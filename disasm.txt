
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f0 7a 00 00       	call   c0007b10 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 84 38 02 c0       	mov    eax,0xc0023884
c0000025:	3d 84 38 02 c0       	cmp    eax,0xc0023884
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 84 38 02 c0       	push   0xc0023884
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 84 38 02 c0       	mov    eax,0xc0023884
c0000051:	2d 84 38 02 c0       	sub    eax,0xc0023884
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 84 38 02 c0       	push   0xc0023884
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 4c ff 01 c0       	mov    ebx,0xc001ff4c
c0000097:	81 eb 48 ff 01 c0    	sub    ebx,0xc001ff48
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 48 ff 01 c0       	mov    esi,0xc001ff48
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 84 38 02 c0       	push   0xc0023884
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 84 38 02 c0       	push   0xc0023884
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 8b 51 01 00       	call   c0015438 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 08 a4 00 00       	call   c000a6cd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 69 51 01 00       	call   c0015438 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 76 56 01 00       	call   c0015964 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 35 5d 01 00       	call   c001602c <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 b1 0f 01 00       	jmp    c0011330 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 60 ff 01 c0 02 	test   BYTE PTR [edx-0x3ffe00a0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 60 ff 01 c0 01 	test   BYTE PTR [edx-0x3ffe00a0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 60 ff 01 c0 08 	test   BYTE PTR [edx-0x3ffe00a0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 60 ff 01 c0 04 	test   BYTE PTR [ecx-0x3ffe00a0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 60 ff 01 c0 01 	test   BYTE PTR [edx-0x3ffe00a0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000df7:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 b0 6a 00 00       	call   c0007988 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 f5 69 00 00       	call   c0007988 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 df 69 00 00       	call   c0007988 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 bb 69 00 00       	call   c0007988 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c0001176:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011b2:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011b7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011c5:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c0001216:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c0001231:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c00012eb:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c00012f1:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c00012f8:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013be:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013c4:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c00013cb:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 64 00 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdff9c]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 32 78 01 00       	jmp    c00195d4 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 5c 78 01 00       	jmp    c0019614 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 7d 78 01 00       	jmp    c0019654 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 c0 01 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdfe40]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 c0 01 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfe40]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba a4 28 02 c0       	mov    edx,0xc00228a4
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba 7c 00 02 c0       	mov    edx,0xc002007c
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 82 00 02 c0       	mov    eax,0xc0020082
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf 40 01 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdfec0]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 8b 00 02 c0       	mov    eax,0xc002008b
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 c0 01 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfe40]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 10 01 02 c0       	mov    eax,0xc0020110
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb 00 01 02 c0       	mov    ebx,0xc0020100
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 e0 00 02 c0       	mov    eax,0xc00200e0
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 f0 00 02 c0       	mov    eax,0xc00200f0
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba 92 00 02 c0       	mov    edx,0xc0020092
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba 9e 00 02 c0       	mov    edx,0xc002009e
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba b2 00 02 c0       	mov    edx,0xc00200b2
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 87 1e 00 00       	call   c0007ab6 <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 7f 1e 00 00       	call   c0007ac6 <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c e0 04 02 c0 	mov    DWORD PTR [esp+0xc],0xc00204e0
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 e0 04 02 c0 	mov    DWORD PTR [esp+0x10],0xc00204e0
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 e0 02 02 c0       	mov    eax,0xc00202e0
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 20 02 02 c0       	mov    eax,0xc0020220
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 e0 01 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfe20]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 e0 05 02 c0       	push   0xc00205e0
c000611b:	e8 50 3e 01 00       	call   c0019f70 <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 ee 05 02 c0       	push   0xc00205ee
c0006153:	e8 18 3e 01 00       	call   c0019f70 <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 81 3d 01 00       	call   c0019f14 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 50 02 c0       	mov    eax,0xc0025020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 5e 02 c0    	mov    ebp,DWORD PTR ds:0xc0025eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 fd 05 02 c0       	push   0xc00205fd
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000655e:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c0006564:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c0006580:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00065f9:	8b 8d 4c 55 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdaab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c00066f1:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000672f:	05 40 55 02 c0       	add    eax,0xc0025540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c00067ee:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 00 06 02 c0       	push   0xc0020600
c0006812:	e8 59 37 01 00       	call   c0019f70 <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 6d 37 01 00       	call   c0019f8c <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 05 06 02 c0 	mov    DWORD PTR [esp],0xc0020605
c000682c:	e8 3f 37 01 00       	call   c0019f70 <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006838:	e8 4f 37 01 00       	call   c0019f8c <iso_kprintfd>
c000683d:	c7 04 24 0b 06 02 c0 	mov    DWORD PTR [esp],0xc002060b
c0006844:	e8 27 37 01 00       	call   c0019f70 <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c0006850:	e8 37 37 01 00       	call   c0019f8c <iso_kprintfd>
c0006855:	c7 04 24 11 06 02 c0 	mov    DWORD PTR [esp],0xc0020611
c000685c:	e8 0f 37 01 00       	call   c0019f70 <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006868:	e8 1f 37 01 00       	call   c0019f8c <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068ce:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 55 02 c0    	lea    ebp,[eax-0x3ffdaaa8]
c000692a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 55 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdaaa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 fd 05 02 c0       	push   0xc00205fd
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a06:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a0c:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 55 02 c0       	add    eax,0xc0025550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 1a 06 02 c0       	push   0xc002061a
c0006a31:	e8 3a 35 01 00       	call   c0019f70 <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a66:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 25 06 02 c0       	push   0xc0020625
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 2c 06 02 c0       	push   0xc002062c
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b27:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 33 06 02 c0       	push   0xc0020633
c0006b48:	e8 23 34 01 00       	call   c0019f70 <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 3e 06 02 c0       	push   0xc002063e
c0006b63:	e8 08 34 01 00       	call   c0019f70 <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 55 02 c0       	push   0xc0025540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006b8d:	e8 24 0f 00 00       	call   c0007ab6 <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006b9e:	e8 13 0f 00 00       	call   c0007ab6 <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 fe 0e 00 00       	call   c0007ab6 <malloc>
c0006bb8:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 e5 0e 00 00       	call   c0007ab6 <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006bfe:	e8 c3 0e 00 00       	call   c0007ac6 <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 b5 0e 00 00       	call   c0007ac6 <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 9b 0e 00 00       	call   c0007ac6 <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 86 0e 00 00       	call   c0007ac6 <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c4d:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	e8 1e 9f 00 00       	call   c0010b90 <KeExecuteAtexit()>
c0006c72:	83 ec 0c             	sub    esp,0xc
c0006c75:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c7b:	50                   	push   eax
c0006c7c:	e8 b3 5b 00 00       	call   c000c834 <Device::closeAll()>
c0006c81:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c87:	83 c4 10             	add    esp,0x10
c0006c8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c8c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c90:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c98:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ca0:	5b                   	pop    ebx
c0006ca1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ca4:	5e                   	pop    esi
c0006ca5:	5f                   	pop    edi
c0006ca6:	ff e0                	jmp    eax

c0006ca8 <Krnl::firstTask()>:
c0006ca8:	53                   	push   ebx
c0006ca9:	83 ec 14             	sub    esp,0x14
c0006cac:	fb                   	sti    
c0006cad:	68 4f 06 02 c0       	push   0xc002064f
c0006cb2:	e8 b8 9f 00 00       	call   c0010c6f <KeSetBootMessage(char const*)>
c0006cb7:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cbe:	e8 f3 0d 00 00       	call   c0007ab6 <malloc>
c0006cc3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cca:	89 c3                	mov    ebx,eax
c0006ccc:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0006cd1:	50                   	push   eax
c0006cd2:	68 68 06 02 c0       	push   0xc0020668
c0006cd7:	6a 01                	push   0x1
c0006cd9:	53                   	push   ebx
c0006cda:	e8 b1 ea 00 00       	call   c0015790 <Process::Process(bool, char const*, Process*, char**)>
c0006cdf:	83 c4 20             	add    esp,0x20
c0006ce2:	68 ff 00 00 00       	push   0xff
c0006ce7:	6a 00                	push   0x0
c0006ce9:	68 fd 74 00 c0       	push   0xc00074fd
c0006cee:	53                   	push   ebx
c0006cef:	e8 c0 ec 00 00       	call   c00159b4 <Process::createThread(void (*)(void*), void*, int)>
c0006cf4:	8b 15 f0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296f0
c0006cfa:	6a 7a                	push   0x7a
c0006cfc:	6a 00                	push   0x0
c0006cfe:	68 9c 64 01 c0       	push   0xc001649c
c0006d03:	52                   	push   edx
c0006d04:	e8 ab ec 00 00       	call   c00159b4 <Process::createThread(void (*)(void*), void*, int)>
c0006d09:	83 c4 14             	add    esp,0x14
c0006d0c:	a3 a8 96 02 c0       	mov    ds:0xc00296a8,eax
c0006d11:	68 64 07 02 c0       	push   0xc0020764
c0006d16:	e8 54 9f 00 00       	call   c0010c6f <KeSetBootMessage(char const*)>
c0006d1b:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d22:	e8 d7 a7 00 00       	call   c00114fe <KeInitRand()>
c0006d27:	e8 93 fb 00 00       	call   c00168bf <Vm::initialise8086()>
c0006d2c:	e8 8f 48 00 00       	call   c000b5c0 <Fs::initVFS()>
c0006d31:	c7 04 24 75 06 02 c0 	mov    DWORD PTR [esp],0xc0020675
c0006d38:	e8 32 9f 00 00       	call   c0010c6f <KeSetBootMessage(char const*)>
c0006d3d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d42:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d48:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	6a 00                	push   0x0
c0006d50:	50                   	push   eax
c0006d51:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d54:	83 c4 14             	add    esp,0x14
c0006d57:	68 64 07 02 c0       	push   0xc0020764
c0006d5c:	e8 0e 9f 00 00       	call   c0010c6f <KeSetBootMessage(char const*)>
c0006d61:	e8 37 45 00 00       	call   c000b29d <KeInitialiseSymlinks()>
c0006d66:	e8 3d a4 00 00       	call   c00111a8 <KeLoadSystemEnv()>
c0006d6b:	e8 9a a6 00 00       	call   c001140a <KeSetupPowerManager()>
c0006d70:	83 c4 0c             	add    esp,0xc
c0006d73:	6a 3a                	push   0x3a
c0006d75:	68 8f 06 02 c0       	push   0xc002068f
c0006d7a:	68 98 06 02 c0       	push   0xc0020698
c0006d7f:	e8 58 cc 00 00       	call   c00139dc <Reg::readIntWithDefault(char*, char*, int)>
c0006d84:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d87:	e8 08 54 00 00       	call   c000c194 <User::loadClockSettings(int)>
c0006d8c:	c7 04 24 88 07 02 c0 	mov    DWORD PTR [esp],0xc0020788
c0006d93:	e8 d7 9e 00 00       	call   c0010c6f <KeSetBootMessage(char const*)>
c0006d98:	59                   	pop    ecx
c0006d99:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d9e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006da4:	53                   	push   ebx
c0006da5:	e8 88 5a 00 00       	call   c000c832 <Device::loadDriversForAll()>
c0006daa:	c7 04 24 a0 06 02 c0 	mov    DWORD PTR [esp],0xc00206a0
c0006db1:	e8 b9 9e 00 00       	call   c0010c6f <KeSetBootMessage(char const*)>
c0006db6:	58                   	pop    eax
c0006db7:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006dbd:	5a                   	pop    edx
c0006dbe:	6a 01                	push   0x1
c0006dc0:	68 b1 06 02 c0       	push   0xc00206b1
c0006dc5:	e8 dc e3 00 00       	call   c00151a6 <Thr::loadDLL(char const*, bool)>
c0006dca:	59                   	pop    ecx
c0006dcb:	5a                   	pop    edx
c0006dcc:	53                   	push   ebx
c0006dcd:	50                   	push   eax
c0006dce:	e8 04 e6 00 00       	call   c00153d7 <Thr::executeDLL(unsigned long, void*)>
c0006dd3:	83 c4 10             	add    esp,0x10
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	6a 02                	push   0x2
c0006ddb:	e8 38 f0 00 00       	call   c0015e18 <blockTask(TaskState)>
c0006de0:	83 c4 10             	add    esp,0x10
c0006de3:	eb f1                	jmp    c0006dd6 <Krnl::firstTask()+0x12e>
c0006de5:	90                   	nop

c0006de6 <Computer::Computer()>:
c0006de6:	83 ec 0c             	sub    esp,0xc
c0006de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ded:	83 ec 08             	sub    esp,0x8
c0006df0:	68 cd 06 02 c0       	push   0xc00206cd
c0006df5:	50                   	push   eax
c0006df6:	e8 b3 5a 00 00       	call   c000c8ae <Device::Device(char const*)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	ba d4 07 02 c0       	mov    edx,0xc00207d4
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	89 10                	mov    DWORD PTR [eax],edx
c0006e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e1b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e2f:	83 ca 04             	or     edx,0x4
c0006e32:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e42:	0f b6 d0             	movzx  edx,al
c0006e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e49:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5a:	0f b6 d0             	movzx  edx,al
c0006e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e61:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e70:	8d 50 01             	lea    edx,[eax+0x1]
c0006e73:	88 d1                	mov    cl,dl
c0006e75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e79:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e7f:	0f b6 d0             	movzx  edx,al
c0006e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e86:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e8a:	83 e1 3f             	and    ecx,0x3f
c0006e8d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e91:	90                   	nop
c0006e92:	83 c4 0c             	add    esp,0xc
c0006e95:	c3                   	ret    

c0006e96 <Computer::setBootMessage(char const*)>:
c0006e96:	c3                   	ret    
c0006e97:	90                   	nop

c0006e98 <Computer::detectFeatures()>:
c0006e98:	55                   	push   ebp
c0006e99:	57                   	push   edi
c0006e9a:	56                   	push   esi
c0006e9b:	53                   	push   ebx
c0006e9c:	83 ec 1c             	sub    esp,0x1c
c0006e9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ea3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea9:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006eaf:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006eb5:	e8 3f 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eba:	31 d2                	xor    edx,edx
c0006ebc:	85 c0                	test   eax,eax
c0006ebe:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ec4:	0f 95 c2             	setne  dl
c0006ec7:	83 e0 fd             	and    eax,0xfffffffd
c0006eca:	d1 e2                	shl    edx,1
c0006ecc:	09 d0                	or     eax,edx
c0006ece:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ed4:	a8 02                	test   al,0x2
c0006ed6:	75 51                	jne    c0006f29 <Computer::detectFeatures()+0x91>
c0006ed8:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006edf:	74 0f                	je     c0006ef0 <Computer::detectFeatures()+0x58>
c0006ee1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee7:	83 e0 fb             	and    eax,0xfffffffb
c0006eea:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef0:	e8 51 80 01 00       	call   c001ef46 <x87Detect>
c0006ef5:	83 e0 01             	and    eax,0x1
c0006ef8:	c1 e0 04             	shl    eax,0x4
c0006efb:	89 c2                	mov    edx,eax
c0006efd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f03:	83 e0 ef             	and    eax,0xffffffef
c0006f06:	09 d0                	or     eax,edx
c0006f08:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0e:	88 c2                	mov    dl,al
c0006f10:	a8 10                	test   al,0x10
c0006f12:	0f 85 33 01 00 00    	jne    c000704b <Computer::detectFeatures()+0x1b3>
c0006f18:	80 e2 80             	and    dl,0x80
c0006f1b:	0f 85 4c 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1d5>
c0006f21:	83 c4 1c             	add    esp,0x1c
c0006f24:	5b                   	pop    ebx
c0006f25:	5e                   	pop    esi
c0006f26:	5f                   	pop    edi
c0006f27:	5d                   	pop    ebp
c0006f28:	c3                   	ret    
c0006f29:	83 ec 0c             	sub    esp,0xc
c0006f2c:	6a 20                	push   0x20
c0006f2e:	e8 75 91 00 00       	call   c00100a8 <CPU::cpuidCheckEDX(unsigned int)>
c0006f33:	83 e0 01             	and    eax,0x1
c0006f36:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f43:	83 e0 f7             	and    eax,0xfffffff7
c0006f46:	09 d0                	or     eax,edx
c0006f48:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f4e:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f55:	e8 4e 91 00 00       	call   c00100a8 <CPU::cpuidCheckEDX(unsigned int)>
c0006f5a:	89 c2                	mov    edx,eax
c0006f5c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f62:	83 e2 01             	and    edx,0x1
c0006f65:	83 e0 fe             	and    eax,0xfffffffe
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f70:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f77:	e8 2c 91 00 00       	call   c00100a8 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	c1 e2 07             	shl    edx,0x7
c0006f87:	83 e0 7f             	and    eax,0x7f
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f99:	e8 0a 91 00 00       	call   c00100a8 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	83 c4 10             	add    esp,0x10
c0006fa1:	83 e0 01             	and    eax,0x1
c0006fa4:	c1 e0 05             	shl    eax,0x5
c0006fa7:	89 c2                	mov    edx,eax
c0006fa9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006faf:	83 e0 df             	and    eax,0xffffffdf
c0006fb2:	09 d0                	or     eax,edx
c0006fb4:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fbe:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc4:	0f 84 c9 00 00 00    	je     c0007093 <Computer::detectFeatures()+0x1fb>
c0006fca:	83 e0 fe             	and    eax,0xfffffffe
c0006fcd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fd3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd9:	89 c2                	mov    edx,eax
c0006fdb:	83 e2 09             	and    edx,0x9
c0006fde:	83 fa 01             	cmp    edx,0x1
c0006fe1:	75 09                	jne    c0006fec <Computer::detectFeatures()+0x154>
c0006fe3:	83 e0 fe             	and    eax,0xfffffffe
c0006fe6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fec:	83 ec 0c             	sub    esp,0xc
c0006fef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006ff3:	50                   	push   eax
c0006ff4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff8:	55                   	push   ebp
c0006ff9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ffd:	57                   	push   edi
c0006ffe:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007002:	56                   	push   esi
c0007003:	68 00 00 00 80       	push   0x80000000
c0007008:	e8 17 90 00 00       	call   c0010024 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000700d:	83 c4 20             	add    esp,0x20
c0007010:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000701b:	0f 86 b7 fe ff ff    	jbe    c0006ed8 <Computer::detectFeatures()+0x40>
c0007021:	83 ec 0c             	sub    esp,0xc
c0007024:	50                   	push   eax
c0007025:	55                   	push   ebp
c0007026:	57                   	push   edi
c0007027:	56                   	push   esi
c0007028:	68 01 00 00 80       	push   0x80000001
c000702d:	e8 f2 8f 00 00       	call   c0010024 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007032:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007038:	83 c4 20             	add    esp,0x20
c000703b:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007040:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007046:	e9 8d fe ff ff       	jmp    c0006ed8 <Computer::detectFeatures()+0x40>
c000704b:	e8 b0 7e 01 00       	call   c001ef00 <absolutelyNoChanceInHell>
c0007050:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007056:	c1 e0 07             	shl    eax,0x7
c0007059:	83 e2 7f             	and    edx,0x7f
c000705c:	09 c2                	or     edx,eax
c000705e:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007064:	80 e2 80             	and    dl,0x80
c0007067:	0f 84 b4 fe ff ff    	je     c0006f21 <Computer::detectFeatures()+0x89>
c000706d:	e8 fe 7a 01 00       	call   c001eb70 <avxDetect>
c0007072:	83 e0 01             	and    eax,0x1
c0007075:	c1 e0 05             	shl    eax,0x5
c0007078:	89 c2                	mov    edx,eax
c000707a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007080:	83 e0 df             	and    eax,0xffffffdf
c0007083:	09 d0                	or     eax,edx
c0007085:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000708b:	83 c4 1c             	add    esp,0x1c
c000708e:	5b                   	pop    ebx
c000708f:	5e                   	pop    esi
c0007090:	5f                   	pop    edi
c0007091:	5d                   	pop    ebp
c0007092:	c3                   	ret    
c0007093:	83 ec 0c             	sub    esp,0xc
c0007096:	68 00 02 00 00       	push   0x200
c000709b:	e8 08 90 00 00       	call   c00100a8 <CPU::cpuidCheckEDX(unsigned int)>
c00070a0:	83 c4 10             	add    esp,0x10
c00070a3:	89 c2                	mov    edx,eax
c00070a5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070ab:	83 e2 01             	and    edx,0x1
c00070ae:	83 e0 fe             	and    eax,0xfffffffe
c00070b1:	09 d0                	or     eax,edx
c00070b3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b9:	e9 15 ff ff ff       	jmp    c0006fd3 <Computer::detectFeatures()+0x13b>

c00070be <Computer::displayFeatures()>:
c00070be:	c3                   	ret    
c00070bf:	90                   	nop

c00070c0 <Computer::rdmsr(unsigned int)>:
c00070c0:	83 ec 0c             	sub    esp,0xc
c00070c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070c7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070ce:	74 0a                	je     c00070da <Computer::rdmsr(unsigned int)+0x1a>
c00070d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070d4:	0f 32                	rdmsr  
c00070d6:	83 c4 0c             	add    esp,0xc
c00070d9:	c3                   	ret    
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	68 d6 06 02 c0       	push   0xc00206d6
c00070e2:	e8 5e a2 00 00       	call   c0011345 <KePanic(char const*)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	eb e4                	jmp    c00070d0 <Computer::rdmsr(unsigned int)+0x10>

c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070ec:	57                   	push   edi
c00070ed:	56                   	push   esi
c00070ee:	83 ec 04             	sub    esp,0x4
c00070f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070fd:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007104:	74 10                	je     c0007116 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007106:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000710a:	89 f0                	mov    eax,esi
c000710c:	89 fa                	mov    edx,edi
c000710e:	0f 30                	wrmsr  
c0007110:	83 c4 04             	add    esp,0x4
c0007113:	5e                   	pop    esi
c0007114:	5f                   	pop    edi
c0007115:	c3                   	ret    
c0007116:	83 ec 0c             	sub    esp,0xc
c0007119:	68 dc 06 02 c0       	push   0xc00206dc
c000711e:	e8 22 a2 00 00       	call   c0011345 <KePanic(char const*)>
c0007123:	83 c4 10             	add    esp,0x10
c0007126:	eb de                	jmp    c0007106 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007128 <Computer::shutdown()>:
c0007128:	83 ec 0c             	sub    esp,0xc
c000712b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000712f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007131:	6a 00                	push   0x0
c0007133:	6a 00                	push   0x0
c0007135:	6a 00                	push   0x0
c0007137:	50                   	push   eax
c0007138:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000713b:	83 c4 1c             	add    esp,0x1c
c000713e:	c3                   	ret    
c000713f:	90                   	nop

c0007140 <Computer::restart()>:
c0007140:	83 ec 0c             	sub    esp,0xc
c0007143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007147:	8b 10                	mov    edx,DWORD PTR [eax]
c0007149:	6a 00                	push   0x0
c000714b:	6a 00                	push   0x0
c000714d:	6a 01                	push   0x1
c000714f:	50                   	push   eax
c0007150:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007153:	83 c4 1c             	add    esp,0x1c
c0007156:	c3                   	ret    
c0007157:	90                   	nop

c0007158 <Computer::sleep()>:
c0007158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000715c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007162:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007166:	e9 55 89 00 00       	jmp    c000fac0 <ACPI::sleep()>
c000716b:	90                   	nop

c000716c <Computer::nmiEnabled()>:
c000716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007170:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007176:	c3                   	ret    
c0007177:	90                   	nop

c0007178 <Computer::readCMOS(unsigned char)>:
c0007178:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000717c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007180:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0007187:	75 09                	jne    c0007192 <Computer::readCMOS(unsigned char)+0x1a>
c0007189:	b2 80                	mov    dl,0x80
c000718b:	09 d0                	or     eax,edx
c000718d:	e6 70                	out    0x70,al
c000718f:	e4 71                	in     al,0x71
c0007191:	c3                   	ret    
c0007192:	31 d2                	xor    edx,edx
c0007194:	eb f5                	jmp    c000718b <Computer::readCMOS(unsigned char)+0x13>

c0007196 <Computer::enableNMI(bool)>:
c0007196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000719a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000719e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071a4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071ac:	eb ca                	jmp    c0007178 <Computer::readCMOS(unsigned char)>

c00071ae <Computer::open(int, int, void*)>:
c00071ae:	56                   	push   esi
c00071af:	53                   	push   ebx
c00071b0:	83 ec 10             	sub    esp,0x10
c00071b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071b7:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071be:	68 e2 06 02 c0       	push   0xc00206e2
c00071c3:	0f 94 05 e0 30 02 c0 	sete   BYTE PTR ds:0xc00230e0
c00071ca:	e8 a0 9a 00 00       	call   c0010c6f <KeSetBootMessage(char const*)>
c00071cf:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071d6:	e8 db 08 00 00       	call   c0007ab6 <malloc>
c00071db:	89 04 24             	mov    DWORD PTR [esp],eax
c00071de:	89 c6                	mov    esi,eax
c00071e0:	e8 4f 84 00 00       	call   c000f634 <ACPI::ACPI()>
c00071e5:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071eb:	58                   	pop    eax
c00071ec:	5a                   	pop    edx
c00071ed:	56                   	push   esi
c00071ee:	53                   	push   ebx
c00071ef:	e8 22 55 00 00       	call   c000c716 <Device::addChild(Device*)>
c00071f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071f7:	e8 9c fc ff ff       	call   c0006e98 <Computer::detectFeatures()>
c00071fc:	59                   	pop    ecx
c00071fd:	5e                   	pop    esi
c00071fe:	6a 01                	push   0x1
c0007200:	53                   	push   ebx
c0007201:	e8 90 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c0007206:	c7 04 24 fa 06 02 c0 	mov    DWORD PTR [esp],0xc00206fa
c000720d:	e8 5d 9a 00 00       	call   c0010c6f <KeSetBootMessage(char const*)>
c0007212:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007219:	e8 98 08 00 00       	call   c0007ab6 <malloc>
c000721e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007221:	89 c6                	mov    esi,eax
c0007223:	e8 38 8f 00 00       	call   c0010160 <CPU::CPU()>
c0007228:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000722e:	58                   	pop    eax
c000722f:	5a                   	pop    edx
c0007230:	56                   	push   esi
c0007231:	53                   	push   ebx
c0007232:	e8 df 54 00 00       	call   c000c716 <Device::addChild(Device*)>
c0007237:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000723d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007241:	8b 10                	mov    edx,DWORD PTR [eax]
c0007243:	51                   	push   ecx
c0007244:	6a 00                	push   0x0
c0007246:	6a 00                	push   0x0
c0007248:	50                   	push   eax
c0007249:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000724c:	83 c4 14             	add    esp,0x14
c000724f:	68 a8 07 02 c0       	push   0xc00207a8
c0007254:	e8 16 9a 00 00       	call   c0010c6f <KeSetBootMessage(char const*)>
c0007259:	e8 9e 08 01 00       	call   c0017afc <HalInitialiseCoprocessor()>
c000725e:	c7 04 24 14 07 02 c0 	mov    DWORD PTR [esp],0xc0020714
c0007265:	e8 05 9a 00 00       	call   c0010c6f <KeSetBootMessage(char const*)>
c000726a:	c7 04 24 a8 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca8
c0007271:	e8 6a e8 00 00       	call   c0015ae0 <setupMultitasking(void (*)())>
c0007276:	83 c4 14             	add    esp,0x14
c0007279:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000727e:	5b                   	pop    ebx
c000727f:	5e                   	pop    esi
c0007280:	c3                   	ret    
c0007281:	90                   	nop

c0007282 <Computer::disableNMI()>:
c0007282:	6a 00                	push   0x0
c0007284:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007288:	50                   	push   eax
c0007289:	e8 08 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c000728e:	5a                   	pop    edx
c000728f:	59                   	pop    ecx
c0007290:	c3                   	ret    
c0007291:	90                   	nop

c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007292:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000729a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000729e:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00072a5:	75 0b                	jne    c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c00072a7:	b1 80                	mov    cl,0x80
c00072a9:	09 c8                	or     eax,ecx
c00072ab:	e6 70                	out    0x70,al
c00072ad:	88 d0                	mov    al,dl
c00072af:	e6 71                	out    0x71,al
c00072b1:	c3                   	ret    
c00072b2:	31 c9                	xor    ecx,ecx
c00072b4:	eb f3                	jmp    c00072a9 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072b6 <Computer::handleNMI()>:
c00072b6:	56                   	push   esi
c00072b7:	53                   	push   ebx
c00072b8:	83 ec 10             	sub    esp,0x10
c00072bb:	e4 92                	in     al,0x92
c00072bd:	89 c6                	mov    esi,eax
c00072bf:	e4 61                	in     al,0x61
c00072c1:	68 2f 07 02 c0       	push   0xc002072f
c00072c6:	88 c3                	mov    bl,al
c00072c8:	e8 78 36 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00072cd:	83 c4 10             	add    esp,0x10
c00072d0:	83 e6 10             	and    esi,0x10
c00072d3:	75 10                	jne    c00072e5 <Computer::handleNMI()+0x2f>
c00072d5:	f6 c3 40             	test   bl,0x40
c00072d8:	75 20                	jne    c00072fa <Computer::handleNMI()+0x44>
c00072da:	80 e3 80             	and    bl,0x80
c00072dd:	75 30                	jne    c000730f <Computer::handleNMI()+0x59>
c00072df:	83 c4 04             	add    esp,0x4
c00072e2:	5b                   	pop    ebx
c00072e3:	5e                   	pop    esi
c00072e4:	c3                   	ret    
c00072e5:	83 ec 0c             	sub    esp,0xc
c00072e8:	68 40 07 02 c0       	push   0xc0020740
c00072ed:	e8 53 a0 00 00       	call   c0011345 <KePanic(char const*)>
c00072f2:	83 c4 10             	add    esp,0x10
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	74 e0                	je     c00072da <Computer::handleNMI()+0x24>
c00072fa:	83 ec 0c             	sub    esp,0xc
c00072fd:	68 4d 07 02 c0       	push   0xc002074d
c0007302:	e8 3e a0 00 00       	call   c0011345 <KePanic(char const*)>
c0007307:	83 c4 10             	add    esp,0x10
c000730a:	80 e3 80             	and    bl,0x80
c000730d:	74 d0                	je     c00072df <Computer::handleNMI()+0x29>
c000730f:	c7 44 24 10 57 07 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020757
c0007317:	83 c4 04             	add    esp,0x4
c000731a:	5b                   	pop    ebx
c000731b:	5e                   	pop    esi
c000731c:	e9 24 a0 00 00       	jmp    c0011345 <KePanic(char const*)>
c0007321:	90                   	nop

c0007322 <GDTEntry::setBase(unsigned int)>:
c0007322:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007326:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000732a:	89 c1                	mov    ecx,eax
c000732c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007330:	c1 e9 10             	shr    ecx,0x10
c0007333:	c1 e8 18             	shr    eax,0x18
c0007336:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007339:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000733c:	c3                   	ret    
c000733d:	90                   	nop

c000733e <GDTEntry::setLimit(unsigned int)>:
c000733e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007349:	66 89 01             	mov    WORD PTR [ecx],ax
c000734c:	83 e2 f0             	and    edx,0xfffffff0
c000734f:	c1 e8 10             	shr    eax,0x10
c0007352:	83 e0 0f             	and    eax,0xf
c0007355:	09 d0                	or     eax,edx
c0007357:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000735a:	c3                   	ret    
c000735b:	90                   	nop

c000735c <GDT::GDT()>:
c000735c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007360:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000736a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007370:	90                   	nop
c0007371:	c3                   	ret    

c0007372 <GDT::addEntry(GDTEntry)>:
c0007372:	53                   	push   ebx
c0007373:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007377:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000737b:	8b 02                	mov    eax,DWORD PTR [edx]
c000737d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007381:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007385:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007389:	8d 48 01             	lea    ecx,[eax+0x1]
c000738c:	c1 e0 03             	shl    eax,0x3
c000738f:	89 0a                	mov    DWORD PTR [edx],ecx
c0007391:	5b                   	pop    ebx
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::getNumberOfEntries()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 00                	mov    eax,DWORD PTR [eax]
c000739a:	c3                   	ret    
c000739b:	90                   	nop

c000739c <GDT::flush()>:
c000739c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073a2:	83 c0 04             	add    eax,0x4
c00073a5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073ac:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073b1:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073b8:	e9 9d 8f ff ff       	jmp    c000035a <loadGDT>
c00073bd:	90                   	nop

c00073be <GDT::setup()>:
c00073be:	57                   	push   edi
c00073bf:	56                   	push   esi
c00073c0:	53                   	push   ebx
c00073c1:	83 ec 30             	sub    esp,0x30
c00073c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c8:	6a 00                	push   0x0
c00073ca:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ce:	56                   	push   esi
c00073cf:	e8 4e ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073d4:	6a 00                	push   0x0
c00073d6:	56                   	push   esi
c00073d7:	e8 62 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073dc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073e4:	6a 00                	push   0x0
c00073e6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073ea:	56                   	push   esi
c00073eb:	e8 32 ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073f0:	68 ff ff ff 00       	push   0xffffff
c00073f5:	56                   	push   esi
c00073f6:	e8 43 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073fb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007403:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007407:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000740b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007410:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007415:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007419:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000741d:	89 f8                	mov    eax,edi
c000741f:	89 fa                	mov    edx,edi
c0007421:	80 e4 f7             	and    ah,0xf7
c0007424:	80 ce 60             	or     dh,0x60
c0007427:	89 c7                	mov    edi,eax
c0007429:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000742d:	80 cc 60             	or     ah,0x60
c0007430:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007434:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007438:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000743c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007440:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007444:	83 c4 20             	add    esp,0x20
c0007447:	6a 00                	push   0x0
c0007449:	8d 44 24 24          	lea    eax,[esp+0x24]
c000744d:	50                   	push   eax
c000744e:	e8 cf fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007453:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007457:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000745b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000745f:	83 e0 3f             	and    eax,0x3f
c0007462:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007466:	6a 00                	push   0x0
c0007468:	8d 44 24 34          	lea    eax,[esp+0x34]
c000746c:	50                   	push   eax
c000746d:	e8 b0 fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007472:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007476:	83 e0 3f             	and    eax,0x3f
c0007479:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000747d:	83 c4 0c             	add    esp,0xc
c0007480:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007488:	53                   	push   ebx
c0007489:	e8 e4 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000748e:	83 c4 0c             	add    esp,0xc
c0007491:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007495:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007499:	53                   	push   ebx
c000749a:	e8 d3 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000749f:	83 c4 0c             	add    esp,0xc
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	e8 c8 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074aa:	83 c4 0c             	add    esp,0xc
c00074ad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b5:	53                   	push   ebx
c00074b6:	e8 b7 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074bb:	83 c4 0c             	add    esp,0xc
c00074be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c6:	53                   	push   ebx
c00074c7:	e8 a6 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074cc:	83 c4 0c             	add    esp,0xc
c00074cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d7:	53                   	push   ebx
c00074d8:	e8 95 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074dd:	83 c4 0c             	add    esp,0xc
c00074e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e8:	53                   	push   ebx
c00074e9:	e8 84 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074f1:	e8 a6 fe ff ff       	call   c000739c <GDT::flush()>
c00074f6:	83 c4 40             	add    esp,0x40
c00074f9:	5b                   	pop    ebx
c00074fa:	5e                   	pop    esi
c00074fb:	5f                   	pop    edi
c00074fc:	c3                   	ret    

c00074fd <idleFunction(void*)>:
c00074fd:	83 ec 0c             	sub    esp,0xc
c0007500:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007505:	48                   	dec    eax
c0007506:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000750b:	75 01                	jne    c000750e <idleFunction(void*)+0x11>
c000750d:	fb                   	sti    
c000750e:	e8 b5 02 01 00       	call   c00177c8 <HalSystemIdle()>
c0007513:	e8 ea 7f 01 00       	call   c001f502 <idleCommon()>
c0007518:	eb f4                	jmp    c000750e <idleFunction(void*)+0x11>
c000751a:	66 90                	xchg   ax,ax

c000751c <IDTEntry::IDTEntry(bool)>:
c000751c:	53                   	push   ebx
c000751d:	83 ec 04             	sub    esp,0x4
c0007520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007524:	88 04 24             	mov    BYTE PTR [esp],al
c0007527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000753d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007540:	83 e2 f0             	and    edx,0xfffffff0
c0007543:	83 ca 0e             	or     edx,0xe
c0007546:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007550:	83 e2 ef             	and    edx,0xffffffef
c0007553:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007556:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000755a:	85 c0                	test   eax,eax
c000755c:	74 06                	je     c0007564 <IDTEntry::IDTEntry(bool)+0x48>
c000755e:	b2 03                	mov    dl,0x3
c0007560:	eb 06                	jmp    c0007568 <IDTEntry::IDTEntry(bool)+0x4c>
c0007562:	66 90                	xchg   ax,ax
c0007564:	b2 00                	mov    dl,0x0
c0007566:	66 90                	xchg   ax,ax
c0007568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756c:	83 e2 03             	and    edx,0x3
c000756f:	89 d3                	mov    ebx,edx
c0007571:	c1 e3 05             	shl    ebx,0x5
c0007574:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007577:	83 e2 9f             	and    edx,0xffffff9f
c000757a:	88 d1                	mov    cl,dl
c000757c:	88 da                	mov    dl,bl
c000757e:	09 ca                	or     edx,ecx
c0007580:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007587:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758a:	83 ca 80             	or     edx,0xffffff80
c000758d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007590:	90                   	nop
c0007591:	83 c4 04             	add    esp,0x4
c0007594:	5b                   	pop    ebx
c0007595:	c3                   	ret    

c0007596 <IDTEntry::setOffset(unsigned int)>:
c0007596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000759a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759e:	66 89 02             	mov    WORD PTR [edx],ax
c00075a1:	c1 e8 10             	shr    eax,0x10
c00075a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a8:	c3                   	ret    
c00075a9:	90                   	nop
c00075aa:	66 90                	xchg   ax,ax

c00075ac <IDT::IDT()>:
c00075ac:	90                   	nop
c00075ad:	c3                   	ret    

c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075b2:	83 c0 30             	add    eax,0x30
c00075b5:	c3                   	ret    

c00075b6 <IDT::addEntry(IDTEntry, int)>:
c00075b6:	53                   	push   ebx
c00075b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075c7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ca:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ce:	5b                   	pop    ebx
c00075cf:	c3                   	ret    

c00075d0 <IDT::addEntry(int, void (*)(), bool)>:
c00075d0:	53                   	push   ebx
c00075d1:	83 ec 10             	sub    esp,0x10
c00075d4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d9:	50                   	push   eax
c00075da:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075de:	53                   	push   ebx
c00075df:	e8 38 ff ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c00075e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e8:	53                   	push   ebx
c00075e9:	e8 a8 ff ff ff       	call   c0007596 <IDTEntry::setOffset(unsigned int)>
c00075ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075fe:	e8 b3 ff ff ff       	call   c00075b6 <IDT::addEntry(IDTEntry, int)>
c0007603:	83 c4 30             	add    esp,0x30
c0007606:	5b                   	pop    ebx
c0007607:	c3                   	ret    

c0007608 <IDT::flush()>:
c0007608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000760c:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c0007615:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c000761a:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007621:	c3                   	ret    

c0007622 <IDT::setup()>:
c0007622:	57                   	push   edi
c0007623:	56                   	push   esi
c0007624:	53                   	push   ebx
c0007625:	83 ec 10             	sub    esp,0x10
c0007628:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000762c:	6a 00                	push   0x0
c000762e:	68 00 ec 01 c0       	push   0xc001ec00
c0007633:	6a 00                	push   0x0
c0007635:	53                   	push   ebx
c0007636:	e8 95 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000763b:	6a 00                	push   0x0
c000763d:	68 10 ec 01 c0       	push   0xc001ec10
c0007642:	6a 01                	push   0x1
c0007644:	53                   	push   ebx
c0007645:	e8 86 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000764a:	83 c4 20             	add    esp,0x20
c000764d:	6a 00                	push   0x0
c000764f:	68 1a ec 01 c0       	push   0xc001ec1a
c0007654:	6a 02                	push   0x2
c0007656:	53                   	push   ebx
c0007657:	e8 74 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000765c:	6a 00                	push   0x0
c000765e:	68 24 ec 01 c0       	push   0xc001ec24
c0007663:	6a 03                	push   0x3
c0007665:	53                   	push   ebx
c0007666:	e8 65 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000766b:	83 c4 20             	add    esp,0x20
c000766e:	6a 00                	push   0x0
c0007670:	68 2e ec 01 c0       	push   0xc001ec2e
c0007675:	6a 04                	push   0x4
c0007677:	53                   	push   ebx
c0007678:	e8 53 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000767d:	6a 00                	push   0x0
c000767f:	68 38 ec 01 c0       	push   0xc001ec38
c0007684:	6a 05                	push   0x5
c0007686:	53                   	push   ebx
c0007687:	e8 44 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000768c:	83 c4 20             	add    esp,0x20
c000768f:	6a 00                	push   0x0
c0007691:	68 42 ec 01 c0       	push   0xc001ec42
c0007696:	6a 06                	push   0x6
c0007698:	53                   	push   ebx
c0007699:	e8 32 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000769e:	6a 00                	push   0x0
c00076a0:	68 4c ec 01 c0       	push   0xc001ec4c
c00076a5:	6a 07                	push   0x7
c00076a7:	53                   	push   ebx
c00076a8:	e8 23 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ad:	83 c4 20             	add    esp,0x20
c00076b0:	6a 00                	push   0x0
c00076b2:	68 56 ec 01 c0       	push   0xc001ec56
c00076b7:	6a 08                	push   0x8
c00076b9:	53                   	push   ebx
c00076ba:	e8 11 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076bf:	6a 00                	push   0x0
c00076c1:	68 5e ec 01 c0       	push   0xc001ec5e
c00076c6:	6a 09                	push   0x9
c00076c8:	53                   	push   ebx
c00076c9:	e8 02 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ce:	83 c4 20             	add    esp,0x20
c00076d1:	6a 00                	push   0x0
c00076d3:	68 68 ec 01 c0       	push   0xc001ec68
c00076d8:	6a 0a                	push   0xa
c00076da:	53                   	push   ebx
c00076db:	e8 f0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076e0:	6a 00                	push   0x0
c00076e2:	68 70 ec 01 c0       	push   0xc001ec70
c00076e7:	6a 0b                	push   0xb
c00076e9:	53                   	push   ebx
c00076ea:	e8 e1 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ef:	83 c4 20             	add    esp,0x20
c00076f2:	6a 00                	push   0x0
c00076f4:	68 78 ec 01 c0       	push   0xc001ec78
c00076f9:	6a 0c                	push   0xc
c00076fb:	53                   	push   ebx
c00076fc:	e8 cf fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007701:	6a 00                	push   0x0
c0007703:	68 80 ec 01 c0       	push   0xc001ec80
c0007708:	6a 0d                	push   0xd
c000770a:	53                   	push   ebx
c000770b:	e8 c0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007710:	83 c4 20             	add    esp,0x20
c0007713:	6a 00                	push   0x0
c0007715:	68 9a ec 01 c0       	push   0xc001ec9a
c000771a:	6a 0e                	push   0xe
c000771c:	53                   	push   ebx
c000771d:	e8 ae fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007722:	6a 00                	push   0x0
c0007724:	68 a2 ec 01 c0       	push   0xc001eca2
c0007729:	6a 0f                	push   0xf
c000772b:	53                   	push   ebx
c000772c:	e8 9f fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007731:	83 c4 20             	add    esp,0x20
c0007734:	6a 00                	push   0x0
c0007736:	68 ac ec 01 c0       	push   0xc001ecac
c000773b:	6a 10                	push   0x10
c000773d:	53                   	push   ebx
c000773e:	e8 8d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007743:	6a 00                	push   0x0
c0007745:	68 b6 ec 01 c0       	push   0xc001ecb6
c000774a:	6a 11                	push   0x11
c000774c:	53                   	push   ebx
c000774d:	e8 7e fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	6a 00                	push   0x0
c0007757:	68 c0 ec 01 c0       	push   0xc001ecc0
c000775c:	6a 12                	push   0x12
c000775e:	53                   	push   ebx
c000775f:	e8 6c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007764:	6a 01                	push   0x1
c0007766:	68 5a ed 01 c0       	push   0xc001ed5a
c000776b:	6a 60                	push   0x60
c000776d:	53                   	push   ebx
c000776e:	e8 5d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007773:	83 c4 20             	add    esp,0x20
c0007776:	6a 00                	push   0x0
c0007778:	68 61 ed 01 c0       	push   0xc001ed61
c000777d:	6a 20                	push   0x20
c000777f:	53                   	push   ebx
c0007780:	e8 4b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007785:	6a 00                	push   0x0
c0007787:	68 4c ed 01 c0       	push   0xc001ed4c
c000778c:	6a 21                	push   0x21
c000778e:	53                   	push   ebx
c000778f:	e8 3c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007794:	83 c4 20             	add    esp,0x20
c0007797:	6a 00                	push   0x0
c0007799:	68 53 ed 01 c0       	push   0xc001ed53
c000779e:	6a 22                	push   0x22
c00077a0:	53                   	push   ebx
c00077a1:	e8 2a fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077a6:	6a 00                	push   0x0
c00077a8:	68 ca ec 01 c0       	push   0xc001ecca
c00077ad:	6a 23                	push   0x23
c00077af:	53                   	push   ebx
c00077b0:	e8 1b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077b5:	83 c4 20             	add    esp,0x20
c00077b8:	6a 00                	push   0x0
c00077ba:	68 d4 ec 01 c0       	push   0xc001ecd4
c00077bf:	6a 24                	push   0x24
c00077c1:	53                   	push   ebx
c00077c2:	e8 09 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077c7:	6a 00                	push   0x0
c00077c9:	68 de ec 01 c0       	push   0xc001ecde
c00077ce:	6a 25                	push   0x25
c00077d0:	53                   	push   ebx
c00077d1:	e8 fa fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077d6:	83 c4 20             	add    esp,0x20
c00077d9:	6a 00                	push   0x0
c00077db:	68 e8 ec 01 c0       	push   0xc001ece8
c00077e0:	6a 26                	push   0x26
c00077e2:	53                   	push   ebx
c00077e3:	e8 e8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077e8:	6a 00                	push   0x0
c00077ea:	68 f2 ec 01 c0       	push   0xc001ecf2
c00077ef:	6a 27                	push   0x27
c00077f1:	53                   	push   ebx
c00077f2:	e8 d9 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077f7:	83 c4 20             	add    esp,0x20
c00077fa:	6a 00                	push   0x0
c00077fc:	68 fc ec 01 c0       	push   0xc001ecfc
c0007801:	6a 28                	push   0x28
c0007803:	53                   	push   ebx
c0007804:	e8 c7 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007809:	6a 00                	push   0x0
c000780b:	68 06 ed 01 c0       	push   0xc001ed06
c0007810:	6a 29                	push   0x29
c0007812:	53                   	push   ebx
c0007813:	e8 b8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007818:	83 c4 20             	add    esp,0x20
c000781b:	6a 00                	push   0x0
c000781d:	68 10 ed 01 c0       	push   0xc001ed10
c0007822:	6a 2a                	push   0x2a
c0007824:	53                   	push   ebx
c0007825:	e8 a6 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000782a:	6a 00                	push   0x0
c000782c:	68 1a ed 01 c0       	push   0xc001ed1a
c0007831:	6a 2b                	push   0x2b
c0007833:	53                   	push   ebx
c0007834:	e8 97 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007839:	83 c4 20             	add    esp,0x20
c000783c:	6a 00                	push   0x0
c000783e:	68 24 ed 01 c0       	push   0xc001ed24
c0007843:	6a 2c                	push   0x2c
c0007845:	53                   	push   ebx
c0007846:	e8 85 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000784b:	6a 00                	push   0x0
c000784d:	68 2e ed 01 c0       	push   0xc001ed2e
c0007852:	6a 2d                	push   0x2d
c0007854:	53                   	push   ebx
c0007855:	e8 76 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000785a:	83 c4 20             	add    esp,0x20
c000785d:	6a 00                	push   0x0
c000785f:	68 38 ed 01 c0       	push   0xc001ed38
c0007864:	6a 2e                	push   0x2e
c0007866:	53                   	push   ebx
c0007867:	e8 64 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000786c:	6a 00                	push   0x0
c000786e:	68 42 ed 01 c0       	push   0xc001ed42
c0007873:	6a 2f                	push   0x2f
c0007875:	53                   	push   ebx
c0007876:	e8 55 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000787b:	83 c4 20             	add    esp,0x20
c000787e:	6a 00                	push   0x0
c0007880:	68 9c ee 01 c0       	push   0xc001ee9c
c0007885:	6a 30                	push   0x30
c0007887:	53                   	push   ebx
c0007888:	e8 43 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000788d:	6a 00                	push   0x0
c000788f:	68 a6 ee 01 c0       	push   0xc001eea6
c0007894:	6a 31                	push   0x31
c0007896:	53                   	push   ebx
c0007897:	e8 34 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000789c:	83 c4 20             	add    esp,0x20
c000789f:	6a 00                	push   0x0
c00078a1:	68 b0 ee 01 c0       	push   0xc001eeb0
c00078a6:	6a 32                	push   0x32
c00078a8:	53                   	push   ebx
c00078a9:	e8 22 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ae:	6a 00                	push   0x0
c00078b0:	68 ba ee 01 c0       	push   0xc001eeba
c00078b5:	6a 33                	push   0x33
c00078b7:	53                   	push   ebx
c00078b8:	e8 13 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078bd:	83 c4 20             	add    esp,0x20
c00078c0:	6a 00                	push   0x0
c00078c2:	68 c4 ee 01 c0       	push   0xc001eec4
c00078c7:	6a 34                	push   0x34
c00078c9:	53                   	push   ebx
c00078ca:	e8 01 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078cf:	6a 00                	push   0x0
c00078d1:	68 ce ee 01 c0       	push   0xc001eece
c00078d6:	6a 35                	push   0x35
c00078d8:	53                   	push   ebx
c00078d9:	e8 f2 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078de:	83 c4 20             	add    esp,0x20
c00078e1:	6a 00                	push   0x0
c00078e3:	68 d8 ee 01 c0       	push   0xc001eed8
c00078e8:	6a 36                	push   0x36
c00078ea:	53                   	push   ebx
c00078eb:	e8 e0 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078f0:	6a 00                	push   0x0
c00078f2:	68 e2 ee 01 c0       	push   0xc001eee2
c00078f7:	6a 37                	push   0x37
c00078f9:	53                   	push   ebx
c00078fa:	e8 d1 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ff:	83 c4 1c             	add    esp,0x1c
c0007902:	6a 03                	push   0x3
c0007904:	6a 02                	push   0x2
c0007906:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c000790c:	e8 13 25 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007911:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007918:	89 c6                	mov    esi,eax
c000791a:	e8 97 01 00 00       	call   c0007ab6 <malloc>
c000791f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	89 c7                	mov    edi,eax
c000792a:	e8 15 16 00 00       	call   c0008f44 <TSS::TSS()>
c000792f:	83 c4 0c             	add    esp,0xc
c0007932:	68 56 ec 01 c0       	push   0xc001ec56
c0007937:	56                   	push   esi
c0007938:	57                   	push   edi
c0007939:	e8 4a 16 00 00       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c000793e:	89 c6                	mov    esi,eax
c0007940:	58                   	pop    eax
c0007941:	5a                   	pop    edx
c0007942:	6a 00                	push   0x0
c0007944:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007948:	50                   	push   eax
c0007949:	e8 ce fb ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c000794e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007952:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007957:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000795e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007964:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007968:	80 ce 05             	or     dh,0x5
c000796b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000796e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007976:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007979:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000797c:	e8 87 fc ff ff       	call   c0007608 <IDT::flush()>
c0007981:	83 c4 20             	add    esp,0x20
c0007984:	5b                   	pop    ebx
c0007985:	5e                   	pop    esi
c0007986:	5f                   	pop    edi
c0007987:	c3                   	ret    

c0007988 <sbrk>:
c0007988:	55                   	push   ebp
c0007989:	57                   	push   edi
c000798a:	56                   	push   esi
c000798b:	53                   	push   ebx
c000798c:	83 ec 1c             	sub    esp,0x1c
c000798f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007993:	85 c0                	test   eax,eax
c0007995:	74 61                	je     c00079f8 <sbrk+0x70>
c0007997:	78 66                	js     c00079ff <sbrk+0x77>
c0007999:	8b 15 d4 30 02 c0    	mov    edx,DWORD PTR ds:0xc00230d4
c000799f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079a3:	05 ff 0f 00 00       	add    eax,0xfff
c00079a8:	89 c5                	mov    ebp,eax
c00079aa:	78 6b                	js     c0007a17 <sbrk+0x8f>
c00079ac:	c1 fd 0c             	sar    ebp,0xc
c00079af:	bb 00 00 00 00       	mov    ebx,0x0
c00079b4:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079ba:	8b 3d d4 30 02 c0    	mov    edi,DWORD PTR ds:0xc00230d4
c00079c0:	e8 fa 03 00 00       	call   c0007dbf <Phys::allocatePage()>
c00079c5:	68 01 04 00 00       	push   0x401
c00079ca:	57                   	push   edi
c00079cb:	50                   	push   eax
c00079cc:	56                   	push   esi
c00079cd:	e8 4e 23 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079d2:	81 05 d4 30 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00230d4,0x1000
c00079dc:	83 c3 01             	add    ebx,0x1
c00079df:	83 c4 10             	add    esp,0x10
c00079e2:	39 dd                	cmp    ebp,ebx
c00079e4:	75 ce                	jne    c00079b4 <sbrk+0x2c>
c00079e6:	0f 20 d8             	mov    eax,cr3
c00079e9:	0f 22 d8             	mov    cr3,eax
c00079ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079f0:	83 c4 1c             	add    esp,0x1c
c00079f3:	5b                   	pop    ebx
c00079f4:	5e                   	pop    esi
c00079f5:	5f                   	pop    edi
c00079f6:	5d                   	pop    ebp
c00079f7:	c3                   	ret    
c00079f8:	a1 d4 30 02 c0       	mov    eax,ds:0xc00230d4
c00079fd:	eb f1                	jmp    c00079f0 <sbrk+0x68>
c00079ff:	83 ec 08             	sub    esp,0x8
c0007a02:	50                   	push   eax
c0007a03:	68 f8 07 02 c0       	push   0xc00207f8
c0007a08:	e8 38 2f 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007a0d:	83 c4 10             	add    esp,0x10
c0007a10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a15:	eb d9                	jmp    c00079f0 <sbrk+0x68>
c0007a17:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a1d:	eb 8d                	jmp    c00079ac <sbrk+0x24>

c0007a1f <mmap>:
c0007a1f:	83 ec 18             	sub    esp,0x18
c0007a22:	68 28 08 02 c0       	push   0xc0020828
c0007a27:	e8 19 99 00 00       	call   c0011345 <KePanic(char const*)>
c0007a2c:	b8 00 00 00 00       	mov    eax,0x0
c0007a31:	83 c4 1c             	add    esp,0x1c
c0007a34:	c3                   	ret    

c0007a35 <munmap>:
c0007a35:	83 ec 18             	sub    esp,0x18
c0007a38:	68 2d 08 02 c0       	push   0xc002082d
c0007a3d:	e8 03 99 00 00       	call   c0011345 <KePanic(char const*)>
c0007a42:	b8 00 00 00 00       	mov    eax,0x0
c0007a47:	83 c4 1c             	add    esp,0x1c
c0007a4a:	c3                   	ret    

c0007a4b <liballoc_lock()>:
c0007a4b:	fa                   	cli    
c0007a4c:	83 05 c8 96 02 c0 01 	add    DWORD PTR ds:0xc00296c8,0x1
c0007a53:	b8 00 00 00 00       	mov    eax,0x0
c0007a58:	c3                   	ret    

c0007a59 <liballoc_unlock()>:
c0007a59:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007a5e:	83 e8 01             	sub    eax,0x1
c0007a61:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007a66:	75 01                	jne    c0007a69 <liballoc_unlock()+0x10>
c0007a68:	fb                   	sti    
c0007a69:	b8 00 00 00 00       	mov    eax,0x0
c0007a6e:	c3                   	ret    

c0007a6f <liballoc_alloc(int)>:
c0007a6f:	83 ec 10             	sub    esp,0x10
c0007a72:	6a 01                	push   0x1
c0007a74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a78:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a7e:	e8 a1 23 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007a83:	83 c4 1c             	add    esp,0x1c
c0007a86:	c3                   	ret    

c0007a87 <liballoc_free(void*, int)>:
c0007a87:	83 ec 14             	sub    esp,0x14
c0007a8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8e:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a94:	e8 cf 1f 00 00       	call   c0009a68 <VAS::freeAllocatedPages(unsigned long)>
c0007a99:	b8 00 00 00 00       	mov    eax,0x0
c0007a9e:	83 c4 1c             	add    esp,0x1c
c0007aa1:	c3                   	ret    

c0007aa2 <realloc>:
c0007aa2:	83 ec 14             	sub    esp,0x14
c0007aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aad:	e8 36 9b ff ff       	call   c00015e8 <dlrealloc>
c0007ab2:	83 c4 1c             	add    esp,0x1c
c0007ab5:	c3                   	ret    

c0007ab6 <malloc>:
c0007ab6:	83 ec 18             	sub    esp,0x18
c0007ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abd:	e8 e9 95 ff ff       	call   c00010ab <dlmalloc>
c0007ac2:	83 c4 1c             	add    esp,0x1c
c0007ac5:	c3                   	ret    

c0007ac6 <free>:
c0007ac6:	83 ec 18             	sub    esp,0x18
c0007ac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007acd:	e8 81 92 ff ff       	call   c0000d53 <dlfree>
c0007ad2:	83 c4 1c             	add    esp,0x1c
c0007ad5:	c3                   	ret    

c0007ad6 <rfree>:
c0007ad6:	83 ec 18             	sub    esp,0x18
c0007ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007add:	e8 71 92 ff ff       	call   c0000d53 <dlfree>
c0007ae2:	83 c4 1c             	add    esp,0x1c
c0007ae5:	c3                   	ret    

c0007ae6 <calloc>:
c0007ae6:	56                   	push   esi
c0007ae7:	53                   	push   ebx
c0007ae8:	83 ec 10             	sub    esp,0x10
c0007aeb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007aef:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007af4:	53                   	push   ebx
c0007af5:	e8 bc ff ff ff       	call   c0007ab6 <malloc>
c0007afa:	89 c6                	mov    esi,eax
c0007afc:	83 c4 0c             	add    esp,0xc
c0007aff:	53                   	push   ebx
c0007b00:	6a 00                	push   0x0
c0007b02:	50                   	push   eax
c0007b03:	e8 e8 89 ff ff       	call   c00004f0 <memset>
c0007b08:	89 f0                	mov    eax,esi
c0007b0a:	83 c4 14             	add    esp,0x14
c0007b0d:	5b                   	pop    ebx
c0007b0e:	5e                   	pop    esi
c0007b0f:	c3                   	ret    

c0007b10 <KeEntryPoint>:
c0007b10:	57                   	push   edi
c0007b11:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b16:	56                   	push   esi
c0007b17:	89 fa                	mov    edx,edi
c0007b19:	53                   	push   ebx
c0007b1a:	31 f6                	xor    esi,esi
c0007b1c:	83 ec 2c             	sub    esp,0x2c
c0007b1f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b24:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b29:	89 f0                	mov    eax,esi
c0007b2b:	ee                   	out    dx,al
c0007b2c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b31:	b0 80                	mov    al,0x80
c0007b33:	89 da                	mov    edx,ebx
c0007b35:	ee                   	out    dx,al
c0007b36:	b1 03                	mov    cl,0x3
c0007b38:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	ee                   	out    dx,al
c0007b40:	89 f0                	mov    eax,esi
c0007b42:	89 fa                	mov    edx,edi
c0007b44:	ee                   	out    dx,al
c0007b45:	88 c8                	mov    al,cl
c0007b47:	89 da                	mov    edx,ebx
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 c7                	mov    al,0xc7
c0007b4c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b51:	ee                   	out    dx,al
c0007b52:	b0 0b                	mov    al,0xb
c0007b54:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b59:	ee                   	out    dx,al
c0007b5a:	68 34 08 02 c0       	push   0xc0020834
c0007b5f:	e8 e1 2d 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007b64:	e8 8a 90 00 00       	call   c0010bf3 <KeDisplaySplashScreen()>
c0007b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0007b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b7b:	e8 ad 03 00 00       	call   c0007f2d <Phys::physicalMemorySetup(unsigned int)>
c0007b80:	e8 66 1c 00 00       	call   c00097eb <Virt::virtualMemorySetup()>
c0007b85:	e8 b3 8f 00 00       	call   c0010b3d <KeInitialiseAtexit()>
c0007b8a:	58                   	pop    eax
c0007b8b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b8f:	53                   	push   ebx
c0007b90:	e8 53 1f 00 00       	call   c0009ae8 <VAS::VAS()>
c0007b95:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007b9b:	e8 fa 78 01 00       	call   c001f49a <_init>
c0007ba0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007ba7:	e8 0a ff ff ff       	call   c0007ab6 <malloc>
c0007bac:	89 04 24             	mov    DWORD PTR [esp],eax
c0007baf:	89 c6                	mov    esi,eax
c0007bb1:	e8 30 f2 ff ff       	call   c0006de6 <Computer::Computer()>
c0007bb6:	53                   	push   ebx
c0007bb7:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bbd:	6a 00                	push   0x0
c0007bbf:	6a 00                	push   0x0
c0007bc1:	56                   	push   esi
c0007bc2:	e8 e7 f5 ff ff       	call   c00071ae <Computer::open(int, int, void*)>
c0007bc7:	83 c4 14             	add    esp,0x14
c0007bca:	53                   	push   ebx
c0007bcb:	e8 e2 1f 00 00       	call   c0009bb2 <VAS::~VAS()>
c0007bd0:	83 c4 30             	add    esp,0x30
c0007bd3:	5b                   	pop    ebx
c0007bd4:	5e                   	pop    esi
c0007bd5:	5f                   	pop    edi
c0007bd6:	c3                   	ret    

c0007bd7 <Phys::allocateDMA(unsigned long)>:
c0007bd7:	55                   	push   ebp
c0007bd8:	31 ed                	xor    ebp,ebp
c0007bda:	57                   	push   edi
c0007bdb:	56                   	push   esi
c0007bdc:	53                   	push   ebx
c0007bdd:	31 db                	xor    ebx,ebx
c0007bdf:	83 ec 1c             	sub    esp,0x1c
c0007be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007be6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007bee:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007bf4:	31 c0                	xor    eax,eax
c0007bf6:	c1 ef 0c             	shr    edi,0xc
c0007bf9:	eb 1b                	jmp    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bfb:	85 c0                	test   eax,eax
c0007bfd:	75 06                	jne    c0007c05 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bff:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c03:	89 dd                	mov    ebp,ebx
c0007c05:	8d 70 01             	lea    esi,[eax+0x1]
c0007c08:	39 f7                	cmp    edi,esi
c0007c0a:	74 37                	je     c0007c43 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c0c:	89 f0                	mov    eax,esi
c0007c0e:	83 c3 01             	add    ebx,0x1
c0007c11:	83 fb 0f             	cmp    ebx,0xf
c0007c14:	7f 13                	jg     c0007c29 <Phys::allocateDMA(unsigned long)+0x52>
c0007c16:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c1d:	74 dc                	je     c0007bfb <Phys::allocateDMA(unsigned long)+0x24>
c0007c1f:	31 c0                	xor    eax,eax
c0007c21:	83 c3 01             	add    ebx,0x1
c0007c24:	83 fb 0f             	cmp    ebx,0xf
c0007c27:	7e ed                	jle    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c29:	83 ec 0c             	sub    esp,0xc
c0007c2c:	68 4c 08 02 c0       	push   0xc002084c
c0007c31:	e8 0f 97 00 00       	call   c0011345 <KePanic(char const*)>
c0007c36:	83 c4 10             	add    esp,0x10
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c4 1c             	add    esp,0x1c
c0007c3e:	5b                   	pop    ebx
c0007c3f:	5e                   	pop    esi
c0007c40:	5f                   	pop    edi
c0007c41:	5d                   	pop    ebp
c0007c42:	c3                   	ret    
c0007c43:	89 e9                	mov    ecx,ebp
c0007c45:	c1 f9 04             	sar    ecx,0x4
c0007c48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c4c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c50:	89 ca                	mov    edx,ecx
c0007c52:	83 ea 01             	sub    edx,0x1
c0007c55:	79 03                	jns    c0007c5a <Phys::allocateDMA(unsigned long)+0x83>
c0007c57:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c5a:	c1 fa 04             	sar    edx,0x4
c0007c5d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c61:	74 08                	je     c0007c6b <Phys::allocateDMA(unsigned long)+0x94>
c0007c63:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c67:	31 c0                	xor    eax,eax
c0007c69:	eb b6                	jmp    c0007c21 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c6b:	85 f6                	test   esi,esi
c0007c6d:	74 17                	je     c0007c86 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c6f:	8d 95 ec 5e 02 c0    	lea    edx,[ebp-0x3ffda114]
c0007c75:	8d 84 05 ed 5e 02 c0 	lea    eax,[ebp+eax*1-0x3ffda113]
c0007c7c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c7f:	83 c2 01             	add    edx,0x1
c0007c82:	39 d0                	cmp    eax,edx
c0007c84:	75 f6                	jne    c0007c7c <Phys::allocateDMA(unsigned long)+0xa5>
c0007c86:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c8f:	01 f8                	add    eax,edi
c0007c91:	85 d2                	test   edx,edx
c0007c93:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007c98:	74 17                	je     c0007cb1 <Phys::allocateDMA(unsigned long)+0xda>
c0007c9a:	83 ec 0c             	sub    esp,0xc
c0007c9d:	68 4c 08 02 c0       	push   0xc002084c
c0007ca2:	e8 9e 96 00 00       	call   c0011345 <KePanic(char const*)>
c0007ca7:	83 c4 10             	add    esp,0x10
c0007caa:	89 f0                	mov    eax,esi
c0007cac:	e9 5d ff ff ff       	jmp    c0007c0e <Phys::allocateDMA(unsigned long)+0x37>
c0007cb1:	c1 e5 0c             	shl    ebp,0xc
c0007cb4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cba:	e9 7c ff ff ff       	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x64>

c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cc3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cc9:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cce:	c1 ea 0c             	shr    edx,0xc
c0007cd1:	29 d0                	sub    eax,edx
c0007cd3:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdc:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007ce1:	c1 e8 0c             	shr    eax,0xc
c0007ce4:	85 d2                	test   edx,edx
c0007ce6:	74 11                	je     c0007cf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007ce8:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007ced:	01 c2                	add    edx,eax
c0007cef:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cf2:	83 c0 01             	add    eax,0x1
c0007cf5:	39 d0                	cmp    eax,edx
c0007cf7:	75 f6                	jne    c0007cef <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cf9:	c3                   	ret    

c0007cfa <Phys::setPageState(unsigned long, bool)>:
c0007cfa:	57                   	push   edi
c0007cfb:	56                   	push   esi
c0007cfc:	8b 35 d8 30 02 c0    	mov    esi,DWORD PTR ds:0xc00230d8
c0007d02:	53                   	push   ebx
c0007d03:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d10:	0f b6 c0             	movzx  eax,al
c0007d13:	89 ca                	mov    edx,ecx
c0007d15:	83 e1 07             	and    ecx,0x7
c0007d18:	c1 ea 03             	shr    edx,0x3
c0007d1b:	d3 c3                	rol    ebx,cl
c0007d1d:	01 d6                	add    esi,edx
c0007d1f:	d3 e0                	shl    eax,cl
c0007d21:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d24:	21 fb                	and    ebx,edi
c0007d26:	88 1e                	mov    BYTE PTR [esi],bl
c0007d28:	8b 1d d8 30 02 c0    	mov    ebx,DWORD PTR ds:0xc00230d8
c0007d2e:	01 da                	add    edx,ebx
c0007d30:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d32:	09 c8                	or     eax,ecx
c0007d34:	88 02                	mov    BYTE PTR [edx],al
c0007d36:	5b                   	pop    ebx
c0007d37:	5e                   	pop    esi
c0007d38:	5f                   	pop    edi
c0007d39:	c3                   	ret    

c0007d3a <Phys::getPageState(unsigned long)>:
c0007d3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d3e:	8b 15 d8 30 02 c0    	mov    edx,DWORD PTR ds:0xc00230d8
c0007d44:	89 c8                	mov    eax,ecx
c0007d46:	83 e1 07             	and    ecx,0x7
c0007d49:	c1 e8 03             	shr    eax,0x3
c0007d4c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d50:	d3 f8                	sar    eax,cl
c0007d52:	83 e0 01             	and    eax,0x1
c0007d55:	c3                   	ret    

c0007d56 <Phys::freePage(unsigned long)>:
c0007d56:	53                   	push   ebx
c0007d57:	83 ec 08             	sub    esp,0x8
c0007d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d5e:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d64:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d6a:	76 41                	jbe    c0007dad <Phys::freePage(unsigned long)+0x57>
c0007d6c:	c1 e8 0c             	shr    eax,0xc
c0007d6f:	50                   	push   eax
c0007d70:	89 c3                	mov    ebx,eax
c0007d72:	e8 c3 ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007d77:	5a                   	pop    edx
c0007d78:	84 c0                	test   al,al
c0007d7a:	74 20                	je     c0007d9c <Phys::freePage(unsigned long)+0x46>
c0007d7c:	83 ec 08             	sub    esp,0x8
c0007d7f:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007d84:	6a 00                	push   0x0
c0007d86:	83 e8 01             	sub    eax,0x1
c0007d89:	53                   	push   ebx
c0007d8a:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007d8f:	e8 66 ff ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007d94:	83 c4 10             	add    esp,0x10
c0007d97:	83 c4 08             	add    esp,0x8
c0007d9a:	5b                   	pop    ebx
c0007d9b:	c3                   	ret    
c0007d9c:	c7 44 24 10 f1 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc00208f1
c0007da4:	83 c4 08             	add    esp,0x8
c0007da7:	5b                   	pop    ebx
c0007da8:	e9 98 95 00 00       	jmp    c0011345 <KePanic(char const*)>
c0007dad:	68 00 10 00 00       	push   0x1000
c0007db2:	50                   	push   eax
c0007db3:	e8 07 ff ff ff       	call   c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>
c0007db8:	59                   	pop    ecx
c0007db9:	5b                   	pop    ebx
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    

c0007dbf <Phys::allocatePage()>:
c0007dbf:	56                   	push   esi
c0007dc0:	53                   	push   ebx
c0007dc1:	83 ec 14             	sub    esp,0x14
c0007dc4:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007dca:	89 f3                	mov    ebx,esi
c0007dcc:	eb 0a                	jmp    c0007dd8 <Phys::allocatePage()+0x19>
c0007dce:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007dd4:	39 de                	cmp    esi,ebx
c0007dd6:	74 26                	je     c0007dfe <Phys::allocatePage()+0x3f>
c0007dd8:	53                   	push   ebx
c0007dd9:	e8 5c ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007dde:	5a                   	pop    edx
c0007ddf:	84 c0                	test   al,al
c0007de1:	74 67                	je     c0007e4a <Phys::allocatePage()+0x8b>
c0007de3:	83 c3 01             	add    ebx,0x1
c0007de6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007dec:	75 e0                	jne    c0007dce <Phys::allocatePage()+0xf>
c0007dee:	31 db                	xor    ebx,ebx
c0007df0:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007dfa:	39 de                	cmp    esi,ebx
c0007dfc:	75 da                	jne    c0007dd8 <Phys::allocatePage()+0x19>
c0007dfe:	83 ec 0c             	sub    esp,0xc
c0007e01:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007e06:	83 f0 01             	xor    eax,0x1
c0007e09:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e16:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e1c:	50                   	push   eax
c0007e1d:	e8 a8 27 00 00       	call   c000a5ca <VAS::scanForEviction()>
c0007e22:	83 c4 10             	add    esp,0x10
c0007e25:	85 c0                	test   eax,eax
c0007e27:	75 48                	jne    c0007e71 <Phys::allocatePage()+0xb2>
c0007e29:	83 ec 0c             	sub    esp,0xc
c0007e2c:	68 74 08 02 c0       	push   0xc0020874
c0007e31:	e8 0f 95 00 00       	call   c0011345 <KePanic(char const*)>
c0007e36:	83 c4 10             	add    esp,0x10
c0007e39:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e3f:	53                   	push   ebx
c0007e40:	e8 f5 fe ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007e45:	5a                   	pop    edx
c0007e46:	84 c0                	test   al,al
c0007e48:	75 99                	jne    c0007de3 <Phys::allocatePage()+0x24>
c0007e4a:	6a 01                	push   0x1
c0007e4c:	53                   	push   ebx
c0007e4d:	e8 a8 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e52:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e58:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e5d:	83 c2 01             	add    edx,0x1
c0007e60:	59                   	pop    ecx
c0007e61:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e67:	c1 e0 0c             	shl    eax,0xc
c0007e6a:	5b                   	pop    ebx
c0007e6b:	83 c4 14             	add    esp,0x14
c0007e6e:	5b                   	pop    ebx
c0007e6f:	5e                   	pop    esi
c0007e70:	c3                   	ret    
c0007e71:	83 ec 08             	sub    esp,0x8
c0007e74:	89 c2                	mov    edx,eax
c0007e76:	6a 01                	push   0x1
c0007e78:	c1 ea 0c             	shr    edx,0xc
c0007e7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e7f:	52                   	push   edx
c0007e80:	e8 75 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e85:	83 c4 10             	add    esp,0x10
c0007e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e8c:	eb dd                	jmp    c0007e6b <Phys::allocatePage()+0xac>

c0007e8e <Phys::allocateContiguousPages(int)>:
c0007e8e:	57                   	push   edi
c0007e8f:	56                   	push   esi
c0007e90:	53                   	push   ebx
c0007e91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e95:	fa                   	cli    
c0007e96:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007e9b:	31 db                	xor    ebx,ebx
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ea5:	85 db                	test   ebx,ebx
c0007ea7:	75 11                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ea9:	e8 11 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007eae:	83 fe 01             	cmp    esi,0x1
c0007eb1:	89 c7                	mov    edi,eax
c0007eb3:	74 21                	je     c0007ed6 <Phys::allocateContiguousPages(int)+0x48>
c0007eb5:	bb 01 00 00 00       	mov    ebx,0x1
c0007eba:	e8 00 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007ebf:	89 da                	mov    edx,ebx
c0007ec1:	c1 e2 0c             	shl    edx,0xc
c0007ec4:	01 fa                	add    edx,edi
c0007ec6:	39 c2                	cmp    edx,eax
c0007ec8:	74 22                	je     c0007eec <Phys::allocateContiguousPages(int)+0x5e>
c0007eca:	bb 01 00 00 00       	mov    ebx,0x1
c0007ecf:	89 c7                	mov    edi,eax
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	75 e4                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ed6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007edb:	83 e8 01             	sub    eax,0x1
c0007ede:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ee3:	75 01                	jne    c0007ee6 <Phys::allocateContiguousPages(int)+0x58>
c0007ee5:	fb                   	sti    
c0007ee6:	89 f8                	mov    eax,edi
c0007ee8:	5b                   	pop    ebx
c0007ee9:	5e                   	pop    esi
c0007eea:	5f                   	pop    edi
c0007eeb:	c3                   	ret    
c0007eec:	83 c3 01             	add    ebx,0x1
c0007eef:	39 f3                	cmp    ebx,esi
c0007ef1:	75 b2                	jne    c0007ea5 <Phys::allocateContiguousPages(int)+0x17>
c0007ef3:	eb e1                	jmp    c0007ed6 <Phys::allocateContiguousPages(int)+0x48>

c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ef5:	56                   	push   esi
c0007ef6:	53                   	push   ebx
c0007ef7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007efb:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007f01:	73 06                	jae    c0007f09 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f03:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007f09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f0d:	c1 eb 0c             	shr    ebx,0xc
c0007f10:	c1 e8 0c             	shr    eax,0xc
c0007f13:	39 d8                	cmp    eax,ebx
c0007f15:	73 13                	jae    c0007f2a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f17:	6a 00                	push   0x0
c0007f19:	8d 70 01             	lea    esi,[eax+0x1]
c0007f1c:	50                   	push   eax
c0007f1d:	e8 d8 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f22:	5a                   	pop    edx
c0007f23:	89 f0                	mov    eax,esi
c0007f25:	59                   	pop    ecx
c0007f26:	39 f3                	cmp    ebx,esi
c0007f28:	75 ed                	jne    c0007f17 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f2a:	5b                   	pop    ebx
c0007f2b:	5e                   	pop    esi
c0007f2c:	c3                   	ret    

c0007f2d <Phys::physicalMemorySetup(unsigned int)>:
c0007f2d:	55                   	push   ebp
c0007f2e:	57                   	push   edi
c0007f2f:	56                   	push   esi
c0007f30:	53                   	push   ebx
c0007f31:	83 ec 40             	sub    esp,0x40
c0007f34:	6a 10                	push   0x10
c0007f36:	6a 00                	push   0x0
c0007f38:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f3d:	e8 ae 85 ff ff       	call   c00004f0 <memset>
c0007f42:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f4b:	05 00 10 00 00       	add    eax,0x1000
c0007f50:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f54:	5b                   	pop    ebx
c0007f55:	31 db                	xor    ebx,ebx
c0007f57:	5e                   	pop    esi
c0007f58:	50                   	push   eax
c0007f59:	68 07 09 02 c0       	push   0xc0020907
c0007f5e:	e8 e2 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007f63:	83 c4 10             	add    esp,0x10
c0007f66:	83 ec 08             	sub    esp,0x8
c0007f69:	6a 01                	push   0x1
c0007f6b:	53                   	push   ebx
c0007f6c:	83 c3 01             	add    ebx,0x1
c0007f6f:	e8 86 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f74:	83 c4 10             	add    esp,0x10
c0007f77:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f7d:	75 e7                	jne    c0007f66 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f7f:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f86:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007f8d:	c1 e0 08             	shl    eax,0x8
c0007f90:	09 c2                	or     edx,eax
c0007f92:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007f96:	0f 84 98 01 00 00    	je     c0008134 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007f9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fa0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fa8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fb1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fb9:	eb 1c                	jmp    c0007fd7 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fbf:	83 c3 18             	add    ebx,0x18
c0007fc2:	83 c6 01             	add    esi,0x1
c0007fc5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fcd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fd1:	0f 84 6d 01 00 00    	je     c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fdd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fe0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fe4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fe8:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fea:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fed:	01 f0                	add    eax,esi
c0007fef:	55                   	push   ebp
c0007ff0:	11 fa                	adc    edx,edi
c0007ff2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ff6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007ffa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ffe:	51                   	push   ecx
c0007fff:	56                   	push   esi
c0008000:	68 a4 08 02 c0       	push   0xc00208a4
c0008005:	e8 3b 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000800a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	09 f8                	or     eax,edi
c0008013:	0f 85 2b 01 00 00    	jne    c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008019:	83 fd 01             	cmp    ebp,0x1
c000801c:	75 9d                	jne    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000801e:	ba 00 00 08 00       	mov    edx,0x80000
c0008023:	89 c1                	mov    ecx,eax
c0008025:	39 f2                	cmp    edx,esi
c0008027:	19 f9                	sbb    ecx,edi
c0008029:	0f 82 ab 00 00 00    	jb     c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000802f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008033:	89 c1                	mov    ecx,eax
c0008035:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008039:	0f 83 9b 00 00 00    	jae    c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000803f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008044:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008048:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000804c:	39 fa                	cmp    edx,edi
c000804e:	19 e8                	sbb    eax,ebp
c0008050:	0f 82 b0 01 00 00    	jb     c0008206 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008056:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000805a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000805e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008064:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008069:	83 d5 ff             	adc    ebp,0xffffffff
c000806c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008070:	31 c0                	xor    eax,eax
c0008072:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008076:	39 fa                	cmp    edx,edi
c0008078:	89 c1                	mov    ecx,eax
c000807a:	19 e9                	sbb    ecx,ebp
c000807c:	0f 83 39 ff ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008082:	be 00 00 08 00       	mov    esi,0x80000
c0008087:	83 ec 04             	sub    esp,0x4
c000808a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000808e:	57                   	push   edi
c000808f:	56                   	push   esi
c0008090:	68 c8 08 02 c0       	push   0xc00208c8
c0008095:	e8 ab 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000809a:	5d                   	pop    ebp
c000809b:	58                   	pop    eax
c000809c:	57                   	push   edi
c000809d:	56                   	push   esi
c000809e:	e8 52 fe ff ff       	call   c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00080a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00080a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00080ab:	83 c4 0c             	add    esp,0xc
c00080ae:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080b2:	8b 15 e8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee8
c00080b8:	01 d0                	add    eax,edx
c00080ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080c1:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00080c6:	52                   	push   edx
c00080c7:	50                   	push   eax
c00080c8:	68 2d 09 02 c0       	push   0xc002092d
c00080cd:	e8 73 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00080d2:	83 c4 10             	add    esp,0x10
c00080d5:	e9 e1 fe ff ff       	jmp    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080da:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080e6:	39 ea                	cmp    edx,ebp
c00080e8:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080ec:	0f 82 c9 fe ff ff    	jb     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080f2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080f7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080fb:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080ff:	0f 83 b6 fe ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008105:	39 ee                	cmp    esi,ebp
c0008107:	89 f8                	mov    eax,edi
c0008109:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000810d:	0f 83 74 ff ff ff    	jae    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008113:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000811b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000811f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008123:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008127:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000812b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000812f:	e9 53 ff ff ff       	jmp    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008134:	83 ec 0c             	sub    esp,0xc
c0008137:	68 1f 09 02 c0       	push   0xc002091f
c000813c:	e8 04 92 00 00       	call   c0011345 <KePanic(char const*)>
c0008141:	83 c4 10             	add    esp,0x10
c0008144:	83 ec 08             	sub    esp,0x8
c0008147:	bb 60 00 00 00       	mov    ebx,0x60
c000814c:	6a 00                	push   0x0
c000814e:	6a 06                	push   0x6
c0008150:	e8 a5 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008155:	58                   	pop    eax
c0008156:	5a                   	pop    edx
c0008157:	6a 00                	push   0x0
c0008159:	6a 07                	push   0x7
c000815b:	e8 9a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008160:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008166:	83 c4 10             	add    esp,0x10
c0008169:	83 c1 02             	add    ecx,0x2
c000816c:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008172:	83 ec 08             	sub    esp,0x8
c0008175:	6a 00                	push   0x0
c0008177:	53                   	push   ebx
c0008178:	83 c3 01             	add    ebx,0x1
c000817b:	e8 7a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008189:	75 e7                	jne    c0008172 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000818b:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008190:	bb 40 01 00 00       	mov    ebx,0x140
c0008195:	83 c0 20             	add    eax,0x20
c0008198:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000819d:	eb 26                	jmp    c00081c5 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000819f:	83 ec 08             	sub    esp,0x8
c00081a2:	6a 00                	push   0x0
c00081a4:	53                   	push   ebx
c00081a5:	83 c3 01             	add    ebx,0x1
c00081a8:	e8 4d fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081ad:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	83 c0 01             	add    eax,0x1
c00081b8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081be:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081c3:	74 07                	je     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081c5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081ca:	7e d3                	jle    c000819f <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081cc:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081d1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081d6:	7f 26                	jg     c00081fe <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081d8:	83 ec 08             	sub    esp,0x8
c00081db:	6a 00                	push   0x0
c00081dd:	53                   	push   ebx
c00081de:	83 c3 01             	add    ebx,0x1
c00081e1:	e8 14 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081e6:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	83 c0 01             	add    eax,0x1
c00081f1:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081f7:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081fc:	75 d3                	jne    c00081d1 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00081fe:	83 c4 3c             	add    esp,0x3c
c0008201:	5b                   	pop    ebx
c0008202:	5e                   	pop    esi
c0008203:	5f                   	pop    edi
c0008204:	5d                   	pop    ebp
c0008205:	c3                   	ret    
c0008206:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000820e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008216:	e9 3b fe ff ff       	jmp    c0008056 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000821b:	90                   	nop

c000821c <Pipe::isAtty()>:
c000821c:	31 c0                	xor    eax,eax
c000821e:	c3                   	ret    
c000821f:	90                   	nop

c0008220 <Pipe::~Pipe()>:
c0008220:	83 ec 0c             	sub    esp,0xc
c0008223:	ba 8c 09 02 c0       	mov    edx,0xc002098c
c0008228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000822c:	89 10                	mov    DWORD PTR [eax],edx
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	50                   	push   eax
c0008236:	e8 69 11 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	90                   	nop
c000823f:	83 c4 0c             	add    esp,0xc
c0008242:	c3                   	ret    
c0008243:	90                   	nop

c0008244 <Pipe::~Pipe()>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 cd ff ff ff       	call   c0008220 <Pipe::~Pipe()>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 ec 08             	sub    esp,0x8
c0008259:	6a 20                	push   0x20
c000825b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000825f:	e8 b4 25 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0008264:	83 c4 10             	add    esp,0x10
c0008267:	83 c4 0c             	add    esp,0xc
c000826a:	c3                   	ret    
c000826b:	90                   	nop

c000826c <Pipe::write(unsigned long long, void*, int*)>:
c000826c:	55                   	push   ebp
c000826d:	57                   	push   edi
c000826e:	56                   	push   esi
c000826f:	53                   	push   ebx
c0008270:	83 ec 1c             	sub    esp,0x1c
c0008273:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008277:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000827b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000827e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008282:	89 04 24             	mov    DWORD PTR [esp],eax
c0008285:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008289:	89 d8                	mov    eax,ebx
c000828b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008292:	89 d6                	mov    esi,edx
c0008294:	89 d7                	mov    edi,edx
c0008296:	c1 ff 1f             	sar    edi,0x1f
c0008299:	03 34 24             	add    esi,DWORD PTR [esp]
c000829c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a0:	c1 f8 1f             	sar    eax,0x1f
c00082a3:	39 f3                	cmp    ebx,esi
c00082a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ad:	19 f8                	sbb    eax,edi
c00082af:	b8 01 00 00 00       	mov    eax,0x1
c00082b4:	72 6e                	jb     c0008324 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082b9:	01 d0                	add    eax,edx
c00082bb:	99                   	cdq    
c00082bc:	f7 fb                	idiv   ebx
c00082be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082c2:	29 d3                	sub    ebx,edx
c00082c4:	89 d7                	mov    edi,edx
c00082c6:	89 de                	mov    esi,ebx
c00082c8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082cb:	c1 fb 1f             	sar    ebx,0x1f
c00082ce:	39 f2                	cmp    edx,esi
c00082d0:	19 d8                	sbb    eax,ebx
c00082d2:	b8 00 00 00 00       	mov    eax,0x0
c00082d7:	72 04                	jb     c00082dd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082d9:	89 d0                	mov    eax,edx
c00082db:	29 f0                	sub    eax,esi
c00082dd:	89 d3                	mov    ebx,edx
c00082df:	29 c3                	sub    ebx,eax
c00082e1:	74 0b                	je     c00082ee <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082e3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082e6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082ea:	89 d9                	mov    ecx,ebx
c00082ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ee:	85 c0                	test   eax,eax
c00082f0:	74 0d                	je     c00082ff <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082f2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082f6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082f9:	89 de                	mov    esi,ebx
c00082fb:	89 c1                	mov    ecx,eax
c00082fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ff:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008302:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008307:	75 10                	jne    c0008319 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008309:	83 ec 0c             	sub    esp,0xc
c000830c:	68 49 09 02 c0       	push   0xc0020949
c0008311:	e8 2f 90 00 00       	call   c0011345 <KePanic(char const*)>
c0008316:	83 c4 10             	add    esp,0x10
c0008319:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000831d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008320:	89 08                	mov    DWORD PTR [eax],ecx
c0008322:	31 c0                	xor    eax,eax
c0008324:	83 c4 1c             	add    esp,0x1c
c0008327:	5b                   	pop    ebx
c0008328:	5e                   	pop    esi
c0008329:	5f                   	pop    edi
c000832a:	5d                   	pop    ebp
c000832b:	c3                   	ret    

c000832c <Pipe::read(unsigned long long, void*, int*)>:
c000832c:	55                   	push   ebp
c000832d:	57                   	push   edi
c000832e:	56                   	push   esi
c000832f:	53                   	push   ebx
c0008330:	83 ec 1c             	sub    esp,0x1c
c0008333:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008337:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000833b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000833f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008342:	89 c8                	mov    eax,ecx
c0008344:	99                   	cdq    
c0008345:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008349:	74 24                	je     c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000834b:	39 f9                	cmp    ecx,edi
c000834d:	89 d1                	mov    ecx,edx
c000834f:	19 f1                	sbb    ecx,esi
c0008351:	73 1c                	jae    c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008353:	fa                   	cli    
c0008354:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000835a:	e8 a5 d8 00 00       	call   c0015c04 <schedule()>
c000835f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0008364:	48                   	dec    eax
c0008365:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000836a:	75 d3                	jne    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836c:	fb                   	sti    
c000836d:	eb d0                	jmp    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836f:	39 f8                	cmp    eax,edi
c0008371:	89 d1                	mov    ecx,edx
c0008373:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008376:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000837a:	19 f1                	sbb    ecx,esi
c000837c:	73 07                	jae    c0008385 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000837e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008381:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008385:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008388:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000838b:	29 f7                	sub    edi,esi
c000838d:	89 f8                	mov    eax,edi
c000838f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008393:	99                   	cdq    
c0008394:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000839b:	19 d0                	sbb    eax,edx
c000839d:	73 07                	jae    c00083a6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000839f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00083a9:	89 ea                	mov    edx,ebp
c00083ab:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083b4:	74 0d                	je     c00083c3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083b6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083b9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c3:	85 d2                	test   edx,edx
c00083c5:	74 11                	je     c00083d8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083cb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ce:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083d2:	89 d1                	mov    ecx,edx
c00083d4:	89 c7                	mov    edi,eax
c00083d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083db:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083de:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083e1:	99                   	cdq    
c00083e2:	89 f7                	mov    edi,esi
c00083e4:	03 04 24             	add    eax,DWORD PTR [esp]
c00083e7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 89 6f 01 00       	call   c001f380 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083fd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 66 09 02 c0       	push   0xc0020966
c000840c:	e8 34 8f 00 00       	call   c0011345 <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000841b:	89 10                	mov    DWORD PTR [eax],edx
c000841d:	83 c4 1c             	add    esp,0x1c
c0008420:	31 c0                	xor    eax,eax
c0008422:	5b                   	pop    ebx
c0008423:	5e                   	pop    esi
c0008424:	5f                   	pop    edi
c0008425:	5d                   	pop    ebp
c0008426:	c3                   	ret    
c0008427:	90                   	nop

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 84 0d 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba 8c 09 02 c0       	mov    edx,0xc002098c
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 40 f6 ff ff       	call   c0007ab6 <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba d4 09 02 c0       	mov    edx,0xc00209d4
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 f5 0e 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 3d 23 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 fa 50 00 00       	call   c000d5f0 <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 a0 04 01 00       	call   c00189bc <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000853f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d 00 31 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdcf00]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d 00 31 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdcf00]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 b8 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd048]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 90 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd070]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 d2 01 01 00       	call   c0018850 <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	0f b6 c0             	movzx  eax,al
c00086d4:	59                   	pop    ecx
c00086d5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	01 f2                	add    edx,esi
c00086ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008705:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 2f 02 01 00       	jmp    c0018958 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 a0 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc00209a0
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 cf 8b 00 00       	jmp    c0011345 <KePanic(char const*)>
c0008776:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c0008791:	50                   	push   eax
c0008792:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	83 c4 10             	add    esp,0x10
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000883e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	83 ec 0c             	sub    esp,0xc
c0008853:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 68 38 00 00       	jmp    c000c13b <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088e9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	83 ec 0c             	sub    esp,0xc
c00088fe:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	83 ec 10             	sub    esp,0x10
c000896e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008972:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008976:	89 f8                	mov    eax,edi
c0008978:	0f be c0             	movsx  eax,al
c000897b:	83 f8 5b             	cmp    eax,0x5b
c000897e:	75 18                	jne    c0008998 <VgaText::putchar(char)+0x30>
c0008980:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008984:	74 20                	je     c00089a6 <VgaText::putchar(char)+0x3e>
c0008986:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000898c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008993:	e9 c1 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008998:	83 f8 1b             	cmp    eax,0x1b
c000899b:	75 09                	jne    c00089a6 <VgaText::putchar(char)+0x3e>
c000899d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089a1:	e9 b3 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c00089a6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00089a9:	84 c9                	test   cl,cl
c00089ab:	0f 84 98 00 00 00    	je     c0008a49 <VgaText::putchar(char)+0xe1>
c00089b1:	8d 77 c0             	lea    esi,[edi-0x40]
c00089b4:	89 f2                	mov    edx,esi
c00089b6:	80 fa 3e             	cmp    dl,0x3e
c00089b9:	77 78                	ja     c0008a33 <VgaText::putchar(char)+0xcb>
c00089bb:	83 f8 6d             	cmp    eax,0x6d
c00089be:	75 47                	jne    c0008a07 <VgaText::putchar(char)+0x9f>
c00089c0:	31 f6                	xor    esi,esi
c00089c2:	31 d2                	xor    edx,edx
c00089c4:	31 c0                	xor    eax,eax
c00089c6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c9:	7e 2d                	jle    c00089f8 <VgaText::putchar(char)+0x90>
c00089cb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089d0:	83 fa 3b             	cmp    edx,0x3b
c00089d3:	75 17                	jne    c00089ec <VgaText::putchar(char)+0x84>
c00089d5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089d9:	50                   	push   eax
c00089da:	53                   	push   ebx
c00089db:	e8 40 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089e0:	59                   	pop    ecx
c00089e1:	31 d2                	xor    edx,edx
c00089e3:	5f                   	pop    edi
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089ea:	eb 09                	jmp    c00089f5 <VgaText::putchar(char)+0x8d>
c00089ec:	6b c0 0a             	imul   eax,eax,0xa
c00089ef:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089f3:	88 ca                	mov    dl,cl
c00089f5:	46                   	inc    esi
c00089f6:	eb ce                	jmp    c00089c6 <VgaText::putchar(char)+0x5e>
c00089f8:	84 d2                	test   dl,dl
c00089fa:	74 2f                	je     c0008a2b <VgaText::putchar(char)+0xc3>
c00089fc:	50                   	push   eax
c00089fd:	53                   	push   ebx
c00089fe:	e8 1d fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c0008a03:	58                   	pop    eax
c0008a04:	5a                   	pop    edx
c0008a05:	eb 24                	jmp    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a07:	83 f8 4a             	cmp    eax,0x4a
c0008a0a:	75 1f                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a0c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a10:	75 19                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a12:	83 ec 0c             	sub    esp,0xc
c0008a15:	53                   	push   ebx
c0008a16:	e8 89 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a1b:	83 c4 0c             	add    esp,0xc
c0008a1e:	6a 00                	push   0x0
c0008a20:	6a 00                	push   0x0
c0008a22:	53                   	push   ebx
c0008a23:	e8 1a fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a28:	83 c4 10             	add    esp,0x10
c0008a2b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a31:	eb 26                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a33:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a36:	83 f8 0e             	cmp    eax,0xe
c0008a39:	7f 1e                	jg     c0008a59 <VgaText::putchar(char)+0xf1>
c0008a3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a3e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a41:	89 f9                	mov    ecx,edi
c0008a43:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a47:	eb 10                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a49:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a4c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a4f:	50                   	push   eax
c0008a50:	53                   	push   ebx
c0008a51:	e8 42 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	83 c4 10             	add    esp,0x10
c0008a5c:	5b                   	pop    ebx
c0008a5d:	5e                   	pop    esi
c0008a5e:	5f                   	pop    edi
c0008a5f:	c3                   	ret    

c0008a60 <VgaText::putx(unsigned int)>:
c0008a60:	57                   	push   edi
c0008a61:	b9 11 00 00 00       	mov    ecx,0x11
c0008a66:	56                   	push   esi
c0008a67:	be ae 09 02 c0       	mov    esi,0xc00209ae
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 20             	sub    esp,0x20
c0008a70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a74:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a78:	fc                   	cld    
c0008a79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a7b:	be 08 00 00 00       	mov    esi,0x8
c0008a80:	50                   	push   eax
c0008a81:	50                   	push   eax
c0008a82:	89 d8                	mov    eax,ebx
c0008a84:	c1 e3 04             	shl    ebx,0x4
c0008a87:	c1 e8 1c             	shr    eax,0x1c
c0008a8a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a8f:	50                   	push   eax
c0008a90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a94:	e8 cf fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a99:	83 c4 10             	add    esp,0x10
c0008a9c:	4e                   	dec    esi
c0008a9d:	75 e1                	jne    c0008a80 <VgaText::putx(unsigned int)+0x20>
c0008a9f:	83 c4 20             	add    esp,0x20
c0008aa2:	5b                   	pop    ebx
c0008aa3:	5e                   	pop    esi
c0008aa4:	5f                   	pop    edi
c0008aa5:	c3                   	ret    

c0008aa6 <VgaText::puts(char const*)>:
c0008aa6:	53                   	push   ebx
c0008aa7:	83 ec 08             	sub    esp,0x8
c0008aaa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab1:	85 c0                	test   eax,eax
c0008ab3:	74 12                	je     c0008ac7 <VgaText::puts(char const*)+0x21>
c0008ab5:	43                   	inc    ebx
c0008ab6:	51                   	push   ecx
c0008ab7:	51                   	push   ecx
c0008ab8:	50                   	push   eax
c0008ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008abd:	e8 a6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ac2:	83 c4 10             	add    esp,0x10
c0008ac5:	eb e7                	jmp    c0008aae <VgaText::puts(char const*)+0x8>
c0008ac7:	83 c4 08             	add    esp,0x8
c0008aca:	5b                   	pop    ebx
c0008acb:	c3                   	ret    

c0008acc <VgaText::write(unsigned long long, void*, int*)>:
c0008acc:	55                   	push   ebp
c0008acd:	57                   	push   edi
c0008ace:	56                   	push   esi
c0008acf:	53                   	push   ebx
c0008ad0:	83 ec 0c             	sub    esp,0xc
c0008ad3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ad7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008adb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008adf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ae6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ae9:	39 eb                	cmp    ebx,ebp
c0008aeb:	74 13                	je     c0008b00 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008aed:	43                   	inc    ebx
c0008aee:	50                   	push   eax
c0008aef:	50                   	push   eax
c0008af0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008af4:	50                   	push   eax
c0008af5:	56                   	push   esi
c0008af6:	e8 6d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008afb:	83 c4 10             	add    esp,0x10
c0008afe:	eb e9                	jmp    c0008ae9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b00:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0b:	89 38                	mov    DWORD PTR [eax],edi
c0008b0d:	83 c4 0c             	add    esp,0xc
c0008b10:	31 c0                	xor    eax,eax
c0008b12:	5b                   	pop    ebx
c0008b13:	5e                   	pop    esi
c0008b14:	5f                   	pop    edi
c0008b15:	5d                   	pop    ebp
c0008b16:	c3                   	ret    
c0008b17:	90                   	nop

c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b18:	55                   	push   ebp
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	53                   	push   ebx
c0008b1c:	83 ec 0c             	sub    esp,0xc
c0008b1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b28:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b2f:	50                   	push   eax
c0008b30:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b35:	50                   	push   eax
c0008b36:	e8 b3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b3b:	5a                   	pop    edx
c0008b3c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b40:	59                   	pop    ecx
c0008b41:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b44:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b48:	0f b7 f6             	movzx  esi,si
c0008b4b:	0f b6 e8             	movzx  ebp,al
c0008b4e:	01 f6                	add    esi,esi
c0008b50:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b53:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b56:	85 c0                	test   eax,eax
c0008b58:	0f 84 ef 00 00 00    	je     c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b5e:	83 f8 0d             	cmp    eax,0xd
c0008b61:	75 0c                	jne    c0008b6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b6a:	e9 d8 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b6f:	83 f8 0a             	cmp    eax,0xa
c0008b72:	75 44                	jne    c0008bb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b74:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b77:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b7e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b81:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b84:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b87:	75 0f                	jne    c0008b98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b89:	83 ec 0c             	sub    esp,0xc
c0008b8c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b8f:	53                   	push   ebx
c0008b90:	e8 6b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b95:	83 c4 10             	add    esp,0x10
c0008b98:	83 ec 0c             	sub    esp,0xc
c0008b9b:	53                   	push   ebx
c0008b9c:	e8 69 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008ba1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bab:	0f b7 f6             	movzx  esi,si
c0008bae:	01 f6                	add    esi,esi
c0008bb0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bb3:	e9 8f 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bb8:	83 f8 08             	cmp    eax,0x8
c0008bbb:	75 34                	jne    c0008bf1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bbd:	51                   	push   ecx
c0008bbe:	51                   	push   ecx
c0008bbf:	6a 01                	push   0x1
c0008bc1:	53                   	push   ebx
c0008bc2:	e8 af fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bc7:	5e                   	pop    esi
c0008bc8:	58                   	pop    eax
c0008bc9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bcc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bcf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bd2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd5:	6a 20                	push   0x20
c0008bd7:	53                   	push   ebx
c0008bd8:	e8 c5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bdd:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008be1:	83 c4 20             	add    esp,0x20
c0008be4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008be7:	0f b7 f6             	movzx  esi,si
c0008bea:	01 f6                	add    esi,esi
c0008bec:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bef:	eb 56                	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf1:	52                   	push   edx
c0008bf2:	52                   	push   edx
c0008bf3:	55                   	push   ebp
c0008bf4:	50                   	push   eax
c0008bf5:	e8 98 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bfa:	83 c4 10             	add    esp,0x10
c0008bfd:	66 89 06             	mov    WORD PTR [esi],ax
c0008c00:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008c06:	75 1d                	jne    c0008c25 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c08:	83 ec 0c             	sub    esp,0xc
c0008c0b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c0e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c11:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c15:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c19:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c1c:	50                   	push   eax
c0008c1d:	e8 36 fd 00 00       	call   c0018958 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c22:	83 c4 20             	add    esp,0x20
c0008c25:	83 c6 02             	add    esi,0x2
c0008c28:	50                   	push   eax
c0008c29:	50                   	push   eax
c0008c2a:	6a 00                	push   0x0
c0008c2c:	53                   	push   ebx
c0008c2d:	e8 f0 fb ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c32:	83 c4 10             	add    esp,0x10
c0008c35:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c39:	75 0c                	jne    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c3b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c3f:	0f b7 f6             	movzx  esi,si
c0008c42:	01 f6                	add    esi,esi
c0008c44:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c47:	47                   	inc    edi
c0008c48:	e9 06 ff ff ff       	jmp    c0008b53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c4d:	83 ec 0c             	sub    esp,0xc
c0008c50:	53                   	push   ebx
c0008c51:	e8 b4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c56:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c5d:	83 c4 1c             	add    esp,0x1c
c0008c60:	5b                   	pop    ebx
c0008c61:	5e                   	pop    esi
c0008c62:	5f                   	pop    edi
c0008c63:	5d                   	pop    ebp
c0008c64:	c3                   	ret    
c0008c65:	90                   	nop

c0008c66 <VgaText::VgaText(char const*)>:
c0008c66:	56                   	push   esi
c0008c67:	53                   	push   ebx
c0008c68:	83 ec 04             	sub    esp,0x4
c0008c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6f:	83 ec 08             	sub    esp,0x8
c0008c72:	6a 00                	push   0x0
c0008c74:	50                   	push   eax
c0008c75:	e8 44 05 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	ba d4 09 02 c0       	mov    edx,0xc00209d4
c0008c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c86:	89 10                	mov    DWORD PTR [eax],edx
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c97:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cde:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ce5:	83 ec 0c             	sub    esp,0xc
c0008ce8:	6a 01                	push   0x1
c0008cea:	e8 1e 09 00 00       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0008cef:	83 c4 10             	add    esp,0x10
c0008cf2:	89 c2                	mov    edx,eax
c0008cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cfb:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d08:	89 c6                	mov    esi,eax
c0008d0a:	e8 b0 f0 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0008d0f:	68 05 0c 00 00       	push   0xc05
c0008d14:	56                   	push   esi
c0008d15:	50                   	push   eax
c0008d16:	53                   	push   ebx
c0008d17:	e8 04 10 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d1c:	83 c4 10             	add    esp,0x10
c0008d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d26:	83 ec 04             	sub    esp,0x4
c0008d29:	68 a0 0f 00 00       	push   0xfa0
c0008d2e:	6a 00                	push   0x0
c0008d30:	50                   	push   eax
c0008d31:	e8 ba 77 ff ff       	call   c00004f0 <memset>
c0008d36:	83 c4 10             	add    esp,0x10
c0008d39:	83 ec 04             	sub    esp,0x4
c0008d3c:	6a 00                	push   0x0
c0008d3e:	6a 07                	push   0x7
c0008d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d44:	e8 6b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	83 ec 04             	sub    esp,0x4
c0008d4f:	6a 00                	push   0x0
c0008d51:	6a 00                	push   0x0
c0008d53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d57:	e8 e6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d5c:	83 c4 10             	add    esp,0x10
c0008d5f:	83 ec 0c             	sub    esp,0xc
c0008d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d66:	e8 39 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d6b:	83 c4 10             	add    esp,0x10
c0008d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d72:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d7a:	05 82 00 00 00       	add    eax,0x82
c0008d7f:	83 ec 04             	sub    esp,0x4
c0008d82:	68 80 00 00 00       	push   0x80
c0008d87:	6a 00                	push   0x0
c0008d89:	50                   	push   eax
c0008d8a:	e8 61 77 ff ff       	call   c00004f0 <memset>
c0008d8f:	83 c4 10             	add    esp,0x10
c0008d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d96:	05 02 01 00 00       	add    eax,0x102
c0008d9b:	83 ec 04             	sub    esp,0x4
c0008d9e:	68 80 00 00 00       	push   0x80
c0008da3:	6a 00                	push   0x0
c0008da5:	50                   	push   eax
c0008da6:	e8 45 77 ff ff       	call   c00004f0 <memset>
c0008dab:	83 c4 10             	add    esp,0x10
c0008dae:	90                   	nop
c0008daf:	83 c4 04             	add    esp,0x4
c0008db2:	5b                   	pop    ebx
c0008db3:	5e                   	pop    esi
c0008db4:	c3                   	ret    
c0008db5:	90                   	nop

c0008db6 <VgaText::receiveKey(unsigned char)>:
c0008db6:	55                   	push   ebp
c0008db7:	57                   	push   edi
c0008db8:	56                   	push   esi
c0008db9:	53                   	push   ebx
c0008dba:	83 ec 2c             	sub    esp,0x2c
c0008dbd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dc1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dc5:	89 ef                	mov    edi,ebp
c0008dc7:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dcd:	0f 84 66 01 00 00    	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008dd3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dd9:	83 ff 08             	cmp    edi,0x8
c0008ddc:	75 73                	jne    c0008e51 <VgaText::receiveKey(unsigned char)+0x9b>
c0008dde:	83 ec 0c             	sub    esp,0xc
c0008de1:	56                   	push   esi
c0008de2:	e8 89 77 ff ff       	call   c0000570 <strlen>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	85 c0                	test   eax,eax
c0008dec:	0f 84 02 01 00 00    	je     c0008ef4 <VgaText::receiveKey(unsigned char)+0x13e>
c0008df2:	50                   	push   eax
c0008df3:	50                   	push   eax
c0008df4:	6a 08                	push   0x8
c0008df6:	53                   	push   ebx
c0008df7:	e8 6c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dfc:	89 34 24             	mov    DWORD PTR [esp],esi
c0008dff:	e8 6c 77 ff ff       	call   c0000570 <strlen>
c0008e04:	83 c4 10             	add    esp,0x10
c0008e07:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e0f:	83 fa 0d             	cmp    edx,0xd
c0008e12:	89 d0                	mov    eax,edx
c0008e14:	0f 95 c1             	setne  cl
c0008e17:	83 fa 1f             	cmp    edx,0x1f
c0008e1a:	0f 9e c2             	setle  dl
c0008e1d:	0f b6 d2             	movzx  edx,dl
c0008e20:	85 ca                	test   edx,ecx
c0008e22:	74 17                	je     c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e24:	83 e8 08             	sub    eax,0x8
c0008e27:	3c 02                	cmp    al,0x2
c0008e29:	76 10                	jbe    c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e2b:	55                   	push   ebp
c0008e2c:	55                   	push   ebp
c0008e2d:	68 bf 09 02 c0       	push   0xc00209bf
c0008e32:	53                   	push   ebx
c0008e33:	e8 6e fc ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0008e38:	83 c4 10             	add    esp,0x10
c0008e3b:	83 ec 0c             	sub    esp,0xc
c0008e3e:	56                   	push   esi
c0008e3f:	e8 2c 77 ff ff       	call   c0000570 <strlen>
c0008e44:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e4c:	e9 a0 00 00 00       	jmp    c0008ef1 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e51:	83 ec 0c             	sub    esp,0xc
c0008e54:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e5a:	50                   	push   eax
c0008e5b:	e8 10 77 ff ff       	call   c0000570 <strlen>
c0008e60:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e67:	e8 04 77 ff ff       	call   c0000570 <strlen>
c0008e6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e70:	83 c4 10             	add    esp,0x10
c0008e73:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e77:	3d 80 00 00 00       	cmp    eax,0x80
c0008e7c:	0f 87 b7 00 00 00    	ja     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008e82:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e85:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e88:	3c 1e                	cmp    al,0x1e
c0008e8a:	0f 96 c0             	setbe  al
c0008e8d:	80 fa 01             	cmp    dl,0x1
c0008e90:	0f 97 c2             	seta   dl
c0008e93:	0f b6 d2             	movzx  edx,dl
c0008e96:	85 c2                	test   edx,eax
c0008e98:	74 2e                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9a:	83 ff 0d             	cmp    edi,0xd
c0008e9d:	74 29                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea5:	68 c5 09 02 c0       	push   0xc00209c5
c0008eaa:	53                   	push   ebx
c0008eab:	e8 68 fc ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008eb0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008eb3:	8d 45 40             	lea    eax,[ebp+0x40]
c0008eb6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eb9:	0f b6 c0             	movzx  eax,al
c0008ebc:	50                   	push   eax
c0008ebd:	53                   	push   ebx
c0008ebe:	e8 d5 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ec3:	83 c4 20             	add    esp,0x20
c0008ec6:	eb 11                	jmp    c0008ed9 <VgaText::receiveKey(unsigned char)+0x123>
c0008ec8:	89 e8                	mov    eax,ebp
c0008eca:	51                   	push   ecx
c0008ecb:	0f be c0             	movsx  eax,al
c0008ece:	51                   	push   ecx
c0008ecf:	50                   	push   eax
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 92 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ede:	89 e8                	mov    eax,ebp
c0008ee0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ee4:	52                   	push   edx
c0008ee5:	52                   	push   edx
c0008ee6:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008eea:	50                   	push   eax
c0008eeb:	56                   	push   esi
c0008eec:	e8 4f 79 ff ff       	call   c0000840 <strcat>
c0008ef1:	83 c4 10             	add    esp,0x10
c0008ef4:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008efa:	b0 01                	mov    al,0x1
c0008efc:	83 ff 1c             	cmp    edi,0x1c
c0008eff:	77 0e                	ja     c0008f0f <VgaText::receiveKey(unsigned char)+0x159>
c0008f01:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f06:	89 f9                	mov    ecx,edi
c0008f08:	d3 e8                	shr    eax,cl
c0008f0a:	f7 d0                	not    eax
c0008f0c:	83 e0 01             	and    eax,0x1
c0008f0f:	84 c0                	test   al,al
c0008f11:	74 04                	je     c0008f17 <VgaText::receiveKey(unsigned char)+0x161>
c0008f13:	84 d2                	test   dl,dl
c0008f15:	74 22                	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008f17:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f1d:	50                   	push   eax
c0008f1e:	50                   	push   eax
c0008f1f:	56                   	push   esi
c0008f20:	53                   	push   ebx
c0008f21:	e8 1a 79 ff ff       	call   c0000840 <strcat>
c0008f26:	83 c4 0c             	add    esp,0xc
c0008f29:	68 80 00 00 00       	push   0x80
c0008f2e:	6a 00                	push   0x0
c0008f30:	56                   	push   esi
c0008f31:	e8 ba 75 ff ff       	call   c00004f0 <memset>
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	83 c4 2c             	add    esp,0x2c
c0008f3c:	5b                   	pop    ebx
c0008f3d:	5e                   	pop    esi
c0008f3e:	5f                   	pop    edi
c0008f3f:	5d                   	pop    ebp
c0008f40:	c3                   	ret    
c0008f41:	90                   	nop

c0008f42 <VgaText::doUpdate()>:
c0008f42:	c3                   	ret    
c0008f43:	90                   	nop

c0008f44 <TSS::TSS()>:
c0008f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f4f:	90                   	nop
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::setESP(unsigned long)>:
c0008f54:	55                   	push   ebp
c0008f55:	89 e5                	mov    ebp,esp
c0008f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f63:	90                   	nop
c0008f64:	5d                   	pop    ebp
c0008f65:	c3                   	ret    
c0008f66:	66 90                	xchg   ax,ax

c0008f68 <TSS::flush()>:
c0008f68:	55                   	push   ebp
c0008f69:	89 e5                	mov    ebp,esp
c0008f6b:	83 ec 10             	sub    esp,0x10
c0008f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f71:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f73:	83 c8 03             	or     eax,0x3
c0008f76:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f7a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f7e:	66 89 d0             	mov    ax,dx
c0008f81:	0f 00 d8             	ltr    ax
c0008f84:	90                   	nop
c0008f85:	c9                   	leave  
c0008f86:	c3                   	ret    
c0008f87:	90                   	nop

c0008f88 <TSS::setup(unsigned long, unsigned long)>:
c0008f88:	55                   	push   ebp
c0008f89:	89 e5                	mov    ebp,esp
c0008f8b:	83 ec 18             	sub    esp,0x18
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	6a 68                	push   0x68
c0008f93:	e8 1e eb ff ff       	call   c0007ab6 <malloc>
c0008f98:	83 c4 10             	add    esp,0x10
c0008f9b:	89 c2                	mov    edx,eax
c0008f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa9:	83 ec 04             	sub    esp,0x4
c0008fac:	6a 68                	push   0x68
c0008fae:	6a 00                	push   0x0
c0008fb0:	50                   	push   eax
c0008fb1:	e8 3a 75 ff ff       	call   c00004f0 <memset>
c0008fb6:	83 c4 10             	add    esp,0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000902e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000903a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000904a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009050:	0f 20 da             	mov    edx,cr3
c0009053:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009056:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009059:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000905c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009062:	83 ec 08             	sub    esp,0x8
c0009065:	50                   	push   eax
c0009066:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009069:	50                   	push   eax
c000906a:	e8 b3 e2 ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	83 ec 08             	sub    esp,0x8
c0009075:	6a 68                	push   0x68
c0009077:	8d 45 ec             	lea    eax,[ebp-0x14]
c000907a:	50                   	push   eax
c000907b:	e8 be e2 ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c0009080:	83 c4 10             	add    esp,0x10
c0009083:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009087:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908a:	83 e0 0f             	and    eax,0xf
c000908d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009090:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009093:	83 c8 40             	or     eax,0x40
c0009096:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009099:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000909e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a4:	05 78 01 00 00       	add    eax,0x178
c00090a9:	83 ec 04             	sub    esp,0x4
c00090ac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090af:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090b2:	50                   	push   eax
c00090b3:	e8 ba e2 ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00090b8:	83 c4 10             	add    esp,0x10
c00090bb:	89 c2                	mov    edx,eax
c00090bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c0:	89 10                	mov    DWORD PTR [eax],edx
c00090c2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090cd:	05 78 01 00 00       	add    eax,0x178
c00090d2:	83 ec 0c             	sub    esp,0xc
c00090d5:	50                   	push   eax
c00090d6:	e8 c1 e2 ff ff       	call   c000739c <GDT::flush()>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090e3:	c9                   	leave  
c00090e4:	c3                   	ret    
c00090e5:	90                   	nop

c00090e6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090f6:	75 08                	jne    c0009100 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090fe:	eb 38                	jmp    c0009138 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009100:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009105:	75 17                	jne    c000911e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000910c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000910f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009115:	8b 10                	mov    edx,DWORD PTR [eax]
c0009117:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000911b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000911e:	89 c1                	mov    ecx,eax
c0009120:	83 e1 fd             	and    ecx,0xfffffffd
c0009123:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009129:	74 cd                	je     c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000912b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009130:	83 e0 ef             	and    eax,0xffffffef
c0009133:	83 f8 08             	cmp    eax,0x8
c0009136:	76 c0                	jbe    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009138:	31 c0                	xor    eax,eax
c000913a:	c3                   	ret    
c000913b:	90                   	nop

c000913c <ReservedFilename::isAtty()>:
c000913c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009140:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009143:	31 c0                	xor    eax,eax
c0009145:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000914b:	74 09                	je     c0009156 <ReservedFilename::isAtty()+0x1a>
c000914d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009153:	0f 94 c0             	sete   al
c0009156:	c3                   	ret    
c0009157:	90                   	nop

c0009158 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000915c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009163:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009167:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000916c:	75 08                	jne    c0009176 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000916e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009174:	eb 3d                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009176:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000917b:	75 17                	jne    c0009194 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000917d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009182:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009185:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000918b:	8b 10                	mov    edx,DWORD PTR [eax]
c000918d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009191:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009194:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009199:	75 04                	jne    c000919f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000919b:	89 0a                	mov    DWORD PTR [edx],ecx
c000919d:	eb 14                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000919f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091a4:	74 c8                	je     c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091a6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091ab:	83 e0 ef             	and    eax,0xffffffef
c00091ae:	83 f8 08             	cmp    eax,0x8
c00091b1:	76 bb                	jbe    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b3:	31 c0                	xor    eax,eax
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::getFileDescriptor()>:
c00091b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091bd:	c3                   	ret    

c00091be <UnixFile::UnixFile(int)>:
c00091be:	53                   	push   ebx
c00091bf:	83 ec 28             	sub    esp,0x28
c00091c2:	ba 9c 0a 02 c0       	mov    edx,0xc0020a9c
c00091c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091cb:	89 10                	mov    DWORD PTR [eax],edx
c00091cd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091d5:	0f 8f 90 01 00 00    	jg     c000936b <UnixFile::UnixFile(int)+0x1ad>
c00091db:	a1 40 31 02 c0       	mov    eax,ds:0xc0023140
c00091e0:	8d 50 01             	lea    edx,[eax+0x1]
c00091e3:	89 15 40 31 02 c0    	mov    DWORD PTR ds:0xc0023140,edx
c00091e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091f0:	83 ec 08             	sub    esp,0x8
c00091f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091f7:	68 98 5f 02 c0       	push   0xc0025f98
c00091fc:	e8 67 63 01 00       	call   c001f568 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009201:	83 c4 10             	add    esp,0x10
c0009204:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c0009209:	83 f0 01             	xor    eax,0x1
c000920c:	0f b6 c0             	movzx  eax,al
c000920f:	85 c0                	test   eax,eax
c0009211:	0f 84 55 01 00 00    	je     c000936c <UnixFile::UnixFile(int)+0x1ae>
c0009217:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c000921e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009226:	83 ec 0c             	sub    esp,0xc
c0009229:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000922d:	e8 84 e8 ff ff       	call   c0007ab6 <malloc>
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	89 c3                	mov    ebx,eax
c0009237:	83 ec 08             	sub    esp,0x8
c000923a:	68 03 ff ff 0f       	push   0xfffff03
c000923f:	53                   	push   ebx
c0009240:	e8 2d 01 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009245:	83 c4 10             	add    esp,0x10
c0009248:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c000924e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009256:	83 ec 0c             	sub    esp,0xc
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 54 e8 ff ff       	call   c0007ab6 <malloc>
c0009262:	83 c4 10             	add    esp,0x10
c0009265:	89 c3                	mov    ebx,eax
c0009267:	83 ec 08             	sub    esp,0x8
c000926a:	68 01 ff ff 0f       	push   0xfffff01
c000926f:	53                   	push   ebx
c0009270:	e8 fd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c000927e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009286:	83 ec 0c             	sub    esp,0xc
c0009289:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000928d:	e8 24 e8 ff ff       	call   c0007ab6 <malloc>
c0009292:	83 c4 10             	add    esp,0x10
c0009295:	89 c3                	mov    ebx,eax
c0009297:	83 ec 08             	sub    esp,0x8
c000929a:	68 00 ff ff 0f       	push   0xfffff00
c000929f:	53                   	push   ebx
c00092a0:	e8 cd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c00092ae:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092b6:	83 ec 0c             	sub    esp,0xc
c00092b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bd:	e8 f4 e7 ff ff       	call   c0007ab6 <malloc>
c00092c2:	83 c4 10             	add    esp,0x10
c00092c5:	89 c3                	mov    ebx,eax
c00092c7:	83 ec 08             	sub    esp,0x8
c00092ca:	68 02 ff ff 0f       	push   0xfffff02
c00092cf:	53                   	push   ebx
c00092d0:	e8 9d 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092d5:	83 c4 10             	add    esp,0x10
c00092d8:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092e6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092eb:	7f 7f                	jg     c000936c <UnixFile::UnixFile(int)+0x1ae>
c00092ed:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092f5:	83 ec 0c             	sub    esp,0xc
c00092f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092fc:	e8 b5 e7 ff ff       	call   c0007ab6 <malloc>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	89 c3                	mov    ebx,eax
c0009306:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000930f:	83 ec 08             	sub    esp,0x8
c0009312:	50                   	push   eax
c0009313:	53                   	push   ebx
c0009314:	e8 59 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009319:	83 c4 10             	add    esp,0x10
c000931c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009320:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c0009327:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000932f:	83 ec 0c             	sub    esp,0xc
c0009332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009336:	e8 7b e7 ff ff       	call   c0007ab6 <malloc>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	89 c3                	mov    ebx,eax
c0009340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009344:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009349:	83 ec 08             	sub    esp,0x8
c000934c:	50                   	push   eax
c000934d:	53                   	push   ebx
c000934e:	e8 1f 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009353:	83 c4 10             	add    esp,0x10
c0009356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000935a:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009361:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009366:	e9 7b ff ff ff       	jmp    c00092e6 <UnixFile::UnixFile(int)+0x128>
c000936b:	90                   	nop
c000936c:	83 c4 28             	add    esp,0x28
c000936f:	5b                   	pop    ebx
c0009370:	c3                   	ret    
c0009371:	90                   	nop

c0009372 <ReservedFilename::ReservedFilename(int)>:
c0009372:	83 ec 0c             	sub    esp,0xc
c0009375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009379:	83 ec 08             	sub    esp,0x8
c000937c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009380:	50                   	push   eax
c0009381:	e8 38 fe ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c0009386:	83 c4 10             	add    esp,0x10
c0009389:	ba b8 0a 02 c0       	mov    edx,0xc0020ab8
c000938e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009392:	89 10                	mov    DWORD PTR [eax],edx
c0009394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009398:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000939c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000939f:	90                   	nop
c00093a0:	83 c4 0c             	add    esp,0xc
c00093a3:	c3                   	ret    

c00093a4 <UnixFile::~UnixFile()>:
c00093a4:	83 ec 1c             	sub    esp,0x1c
c00093a7:	ba 9c 0a 02 c0       	mov    edx,0xc0020a9c
c00093ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b0:	89 10                	mov    DWORD PTR [eax],edx
c00093b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093be:	7f 76                	jg     c0009436 <UnixFile::~UnixFile()+0x92>
c00093c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c8:	83 ec 0c             	sub    esp,0xc
c00093cb:	68 98 5f 02 c0       	push   0xc0025f98
c00093d0:	e8 67 62 01 00       	call   c001f63c <LinkedList<UnixFile>::getFirstElement()>
c00093d5:	83 c4 10             	add    esp,0x10
c00093d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093dc:	83 ec 0c             	sub    esp,0xc
c00093df:	68 98 5f 02 c0       	push   0xc0025f98
c00093e4:	e8 5b 62 01 00       	call   c001f644 <LinkedList<UnixFile>::removeFirst()>
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093f0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093f4:	74 43                	je     c0009439 <UnixFile::~UnixFile()+0x95>
c00093f6:	83 ec 08             	sub    esp,0x8
c00093f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093fd:	68 98 5f 02 c0       	push   0xc0025f98
c0009402:	e8 61 61 01 00       	call   c001f568 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000940e:	8d 50 01             	lea    edx,[eax+0x1]
c0009411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009415:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000941a:	0f 94 c0             	sete   al
c000941d:	0f b6 c0             	movzx  eax,al
c0009420:	85 c0                	test   eax,eax
c0009422:	74 a4                	je     c00093c8 <UnixFile::~UnixFile()+0x24>
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	68 74 0a 02 c0       	push   0xc0020a74
c000942c:	e8 14 7f 00 00       	call   c0011345 <KePanic(char const*)>
c0009431:	83 c4 10             	add    esp,0x10
c0009434:	eb 92                	jmp    c00093c8 <UnixFile::~UnixFile()+0x24>
c0009436:	90                   	nop
c0009437:	eb 01                	jmp    c000943a <UnixFile::~UnixFile()+0x96>
c0009439:	90                   	nop
c000943a:	90                   	nop
c000943b:	83 c4 1c             	add    esp,0x1c
c000943e:	c3                   	ret    
c000943f:	90                   	nop

c0009440 <UnixFile::~UnixFile()>:
c0009440:	83 ec 0c             	sub    esp,0xc
c0009443:	83 ec 0c             	sub    esp,0xc
c0009446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944a:	e8 55 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000944f:	83 c4 10             	add    esp,0x10
c0009452:	83 ec 08             	sub    esp,0x8
c0009455:	6a 0c                	push   0xc
c0009457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945b:	e8 b8 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0009460:	83 c4 10             	add    esp,0x10
c0009463:	83 c4 0c             	add    esp,0xc
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <ReservedFilename::~ReservedFilename()>:
c0009468:	83 ec 0c             	sub    esp,0xc
c000946b:	ba b8 0a 02 c0       	mov    edx,0xc0020ab8
c0009470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009474:	89 10                	mov    DWORD PTR [eax],edx
c0009476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947a:	83 ec 0c             	sub    esp,0xc
c000947d:	50                   	push   eax
c000947e:	e8 21 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	90                   	nop
c0009487:	83 c4 0c             	add    esp,0xc
c000948a:	c3                   	ret    
c000948b:	90                   	nop

c000948c <ReservedFilename::~ReservedFilename()>:
c000948c:	83 ec 0c             	sub    esp,0xc
c000948f:	83 ec 0c             	sub    esp,0xc
c0009492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009496:	e8 cd ff ff ff       	call   c0009468 <ReservedFilename::~ReservedFilename()>
c000949b:	83 c4 10             	add    esp,0x10
c000949e:	83 ec 08             	sub    esp,0x8
c00094a1:	6a 0c                	push   0xc
c00094a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a7:	e8 6c 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	83 c4 0c             	add    esp,0xc
c00094b2:	c3                   	ret    

c00094b3 <KeGetFileFromDescriptor(int)>:
c00094b3:	53                   	push   ebx
c00094b4:	83 ec 08             	sub    esp,0x8
c00094b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094bb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094c1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094c7:	7f 2c                	jg     c00094f5 <KeGetFileFromDescriptor(int)+0x42>
c00094c9:	83 ec 0c             	sub    esp,0xc
c00094cc:	68 98 5f 02 c0       	push   0xc0025f98
c00094d1:	e8 66 61 01 00       	call   c001f63c <LinkedList<UnixFile>::getFirstElement()>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	85 c0                	test   eax,eax
c00094db:	75 04                	jne    c00094e1 <KeGetFileFromDescriptor(int)+0x2e>
c00094dd:	31 c0                	xor    eax,eax
c00094df:	eb 6e                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094e4:	74 69                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e6:	52                   	push   edx
c00094e7:	52                   	push   edx
c00094e8:	50                   	push   eax
c00094e9:	68 98 5f 02 c0       	push   0xc0025f98
c00094ee:	e8 f3 61 01 00       	call   c001f6e6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094f3:	eb e1                	jmp    c00094d6 <KeGetFileFromDescriptor(int)+0x23>
c00094f5:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094fa:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009500:	74 4d                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009502:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c0009507:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000950d:	74 40                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000950f:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009514:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000951a:	74 33                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000951c:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c0009521:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009527:	74 26                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009529:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000952f:	83 f8 08             	cmp    eax,0x8
c0009532:	77 09                	ja     c000953d <KeGetFileFromDescriptor(int)+0x8a>
c0009534:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c000953b:	eb 12                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000953d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009543:	83 fb 08             	cmp    ebx,0x8
c0009546:	77 95                	ja     c00094dd <KeGetFileFromDescriptor(int)+0x2a>
c0009548:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c000954f:	83 c4 08             	add    esp,0x8
c0009552:	5b                   	pop    ebx
c0009553:	c3                   	ret    

c0009554 <__static_initialization_and_destruction_0(int, int)>:
c0009554:	83 ec 0c             	sub    esp,0xc
c0009557:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000955c:	75 34                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000955e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009566:	75 2a                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 98 5f 02 c0       	push   0xc0025f98
c0009570:	e8 b1 5f 01 00       	call   c001f526 <LinkedList<UnixFile>::LinkedList()>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	83 ec 04             	sub    esp,0x4
c000957b:	68 d0 30 02 c0       	push   0xc00230d0
c0009580:	68 98 5f 02 c0       	push   0xc0025f98
c0009585:	68 24 f5 01 c0       	push   0xc001f524
c000958a:	e8 39 12 00 00       	call   c000a7c8 <__cxa_atexit>
c000958f:	83 c4 10             	add    esp,0x10
c0009592:	90                   	nop
c0009593:	83 c4 0c             	add    esp,0xc
c0009596:	c3                   	ret    

c0009597 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009597:	83 ec 0c             	sub    esp,0xc
c000959a:	83 ec 08             	sub    esp,0x8
c000959d:	68 ff ff 00 00       	push   0xffff
c00095a2:	6a 01                	push   0x1
c00095a4:	e8 ab ff ff ff       	call   c0009554 <__static_initialization_and_destruction_0(int, int)>
c00095a9:	83 c4 10             	add    esp,0x10
c00095ac:	83 c4 0c             	add    esp,0xc
c00095af:	c3                   	ret    

c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095b0:	53                   	push   ebx
c00095b1:	8b 15 48 31 02 c0    	mov    edx,DWORD PTR ds:0xc0023148
c00095b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095bf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095c5:	89 d8                	mov    eax,ebx
c00095c7:	d1 e8                	shr    eax,1
c00095c9:	01 d0                	add    eax,edx
c00095cb:	80 e3 01             	and    bl,0x1
c00095ce:	8a 10                	mov    dl,BYTE PTR [eax]
c00095d0:	75 09                	jne    c00095db <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095d2:	83 e2 f0             	and    edx,0xfffffff0
c00095d5:	09 ca                	or     edx,ecx
c00095d7:	88 10                	mov    BYTE PTR [eax],dl
c00095d9:	5b                   	pop    ebx
c00095da:	c3                   	ret    
c00095db:	83 e2 0f             	and    edx,0xf
c00095de:	0f b6 c9             	movzx  ecx,cl
c00095e1:	c1 e1 04             	shl    ecx,0x4
c00095e4:	09 ca                	or     edx,ecx
c00095e6:	88 10                	mov    BYTE PTR [eax],dl
c00095e8:	5b                   	pop    ebx
c00095e9:	c3                   	ret    

c00095ea <Virt::getPageState(unsigned long)>:
c00095ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ee:	8b 0d 48 31 02 c0    	mov    ecx,DWORD PTR ds:0xc0023148
c00095f4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095fa:	89 d0                	mov    eax,edx
c00095fc:	d1 e8                	shr    eax,1
c00095fe:	80 e2 01             	and    dl,0x1
c0009601:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009604:	74 03                	je     c0009609 <Virt::getPageState(unsigned long)+0x1f>
c0009606:	c1 e8 04             	shr    eax,0x4
c0009609:	83 e0 0f             	and    eax,0xf
c000960c:	c3                   	ret    

c000960d <Virt::allocateKernelVirtualPages(int)>:
c000960d:	55                   	push   ebp
c000960e:	31 ed                	xor    ebp,ebp
c0009610:	57                   	push   edi
c0009611:	31 ff                	xor    edi,edi
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	31 db                	xor    ebx,ebx
c0009617:	83 ec 0c             	sub    esp,0xc
c000961a:	8b 35 44 31 02 c0    	mov    esi,DWORD PTR ds:0xc0023144
c0009620:	56                   	push   esi
c0009621:	e8 c4 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009626:	5a                   	pop    edx
c0009627:	84 c0                	test   al,al
c0009629:	75 41                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000962b:	85 db                	test   ebx,ebx
c000962d:	75 02                	jne    c0009631 <Virt::allocateKernelVirtualPages(int)+0x24>
c000962f:	89 f5                	mov    ebp,esi
c0009631:	83 c3 01             	add    ebx,0x1
c0009634:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009638:	74 5f                	je     c0009699 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000963a:	83 c6 01             	add    esi,0x1
c000963d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009643:	76 34                	jbe    c0009679 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009645:	c7 05 44 31 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023144,0xc8000
c000964f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009655:	75 2a                	jne    c0009681 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009657:	be 00 80 0c 00       	mov    esi,0xc8000
c000965c:	bf 01 00 00 00       	mov    edi,0x1
c0009661:	56                   	push   esi
c0009662:	e8 83 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009667:	5a                   	pop    edx
c0009668:	84 c0                	test   al,al
c000966a:	74 bf                	je     c000962b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000966c:	31 db                	xor    ebx,ebx
c000966e:	83 c6 01             	add    esi,0x1
c0009671:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009677:	77 cc                	ja     c0009645 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009679:	89 35 44 31 02 c0    	mov    DWORD PTR ds:0xc0023144,esi
c000967f:	eb 9f                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009681:	83 ec 0c             	sub    esp,0xc
c0009684:	68 cc 0a 02 c0       	push   0xc0020acc
c0009689:	e8 b7 7c 00 00       	call   c0011345 <KePanic(char const*)>
c000968e:	8b 35 44 31 02 c0    	mov    esi,DWORD PTR ds:0xc0023144
c0009694:	83 c4 10             	add    esp,0x10
c0009697:	eb 87                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009699:	89 2d 44 31 02 c0    	mov    DWORD PTR ds:0xc0023144,ebp
c000969f:	83 fb 01             	cmp    ebx,0x1
c00096a2:	74 6f                	je     c0009713 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096a8:	85 c9                	test   ecx,ecx
c00096aa:	74 49                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b0:	89 e8                	mov    eax,ebp
c00096b2:	31 db                	xor    ebx,ebx
c00096b4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096b7:	eb 18                	jmp    c00096d1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096b9:	6a 01                	push   0x1
c00096bb:	83 c3 01             	add    ebx,0x1
c00096be:	50                   	push   eax
c00096bf:	e8 ec fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c4:	58                   	pop    eax
c00096c5:	5a                   	pop    edx
c00096c6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096ca:	74 29                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096cc:	a1 44 31 02 c0       	mov    eax,ds:0xc0023144
c00096d1:	8d 50 01             	lea    edx,[eax+0x1]
c00096d4:	85 db                	test   ebx,ebx
c00096d6:	89 15 44 31 02 c0    	mov    DWORD PTR ds:0xc0023144,edx
c00096dc:	74 24                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096de:	39 df                	cmp    edi,ebx
c00096e0:	75 d7                	jne    c00096b9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096e2:	6a 03                	push   0x3
c00096e4:	83 c3 01             	add    ebx,0x1
c00096e7:	50                   	push   eax
c00096e8:	e8 c3 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ed:	59                   	pop    ecx
c00096ee:	5e                   	pop    esi
c00096ef:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096f3:	75 d7                	jne    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096f5:	83 c4 0c             	add    esp,0xc
c00096f8:	89 e8                	mov    eax,ebp
c00096fa:	5b                   	pop    ebx
c00096fb:	c1 e0 0c             	shl    eax,0xc
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	5d                   	pop    ebp
c0009701:	c3                   	ret    
c0009702:	6a 02                	push   0x2
c0009704:	bb 01 00 00 00       	mov    ebx,0x1
c0009709:	50                   	push   eax
c000970a:	e8 a1 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000970f:	58                   	pop    eax
c0009710:	5a                   	pop    edx
c0009711:	eb b9                	jmp    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009713:	6a 04                	push   0x4
c0009715:	8d 45 01             	lea    eax,[ebp+0x1]
c0009718:	55                   	push   ebp
c0009719:	a3 44 31 02 c0       	mov    ds:0xc0023144,eax
c000971e:	e8 8d fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009723:	5b                   	pop    ebx
c0009724:	89 e8                	mov    eax,ebp
c0009726:	5e                   	pop    esi
c0009727:	c1 e0 0c             	shl    eax,0xc
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <Virt::freeSwapfilePage(unsigned long)>:
c0009732:	53                   	push   ebx
c0009733:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c0009739:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000973d:	b8 01 00 00 00       	mov    eax,0x1
c0009742:	89 cb                	mov    ebx,ecx
c0009744:	d3 e0                	shl    eax,cl
c0009746:	c1 eb 05             	shr    ebx,0x5
c0009749:	f7 d0                	not    eax
c000974b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000974e:	21 c1                	and    ecx,eax
c0009750:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009753:	5b                   	pop    ebx
c0009754:	c3                   	ret    

c0009755 <Virt::swapIDToSector(unsigned long)>:
c0009755:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009759:	8b 15 4c 31 02 c0    	mov    edx,DWORD PTR ds:0xc002314c
c000975f:	8b 0d 54 31 02 c0    	mov    ecx,DWORD PTR ds:0xc0023154
c0009765:	0f af c2             	imul   eax,edx
c0009768:	01 c8                	add    eax,ecx
c000976a:	c3                   	ret    

c000976b <Virt::allocateSwapfilePage()>:
c000976b:	55                   	push   ebp
c000976c:	31 d2                	xor    edx,edx
c000976e:	57                   	push   edi
c000976f:	56                   	push   esi
c0009770:	53                   	push   ebx
c0009771:	83 ec 0c             	sub    esp,0xc
c0009774:	8b 0d 4c 31 02 c0    	mov    ecx,DWORD PTR ds:0xc002314c
c000977a:	a1 50 31 02 c0       	mov    eax,ds:0xc0023150
c000977f:	f7 f1                	div    ecx
c0009781:	39 0d 50 31 02 c0    	cmp    DWORD PTR ds:0xc0023150,ecx
c0009787:	72 2f                	jb     c00097b8 <Virt::allocateSwapfilePage()+0x4d>
c0009789:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c000978f:	8b 16                	mov    edx,DWORD PTR [esi]
c0009791:	f6 c2 01             	test   dl,0x1
c0009794:	74 3e                	je     c00097d4 <Virt::allocateSwapfilePage()+0x69>
c0009796:	31 c9                	xor    ecx,ecx
c0009798:	bf 01 00 00 00       	mov    edi,0x1
c000979d:	eb 12                	jmp    c00097b1 <Virt::allocateSwapfilePage()+0x46>
c000979f:	89 fd                	mov    ebp,edi
c00097a1:	89 ca                	mov    edx,ecx
c00097a3:	d3 e5                	shl    ebp,cl
c00097a5:	c1 ea 05             	shr    edx,0x5
c00097a8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097ad:	85 ea                	test   edx,ebp
c00097af:	74 2c                	je     c00097dd <Virt::allocateSwapfilePage()+0x72>
c00097b1:	83 c1 01             	add    ecx,0x1
c00097b4:	39 c8                	cmp    eax,ecx
c00097b6:	77 e7                	ja     c000979f <Virt::allocateSwapfilePage()+0x34>
c00097b8:	83 ec 0c             	sub    esp,0xc
c00097bb:	68 60 0d 02 c0       	push   0xc0020d60
c00097c0:	e8 80 7b 00 00       	call   c0011345 <KePanic(char const*)>
c00097c5:	83 c4 10             	add    esp,0x10
c00097c8:	31 c9                	xor    ecx,ecx
c00097ca:	83 c4 0c             	add    esp,0xc
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	5b                   	pop    ebx
c00097d0:	5e                   	pop    esi
c00097d1:	5f                   	pop    edi
c00097d2:	5d                   	pop    ebp
c00097d3:	c3                   	ret    
c00097d4:	89 f3                	mov    ebx,esi
c00097d6:	bd 01 00 00 00       	mov    ebp,0x1
c00097db:	31 c9                	xor    ecx,ecx
c00097dd:	09 ea                	or     edx,ebp
c00097df:	89 c8                	mov    eax,ecx
c00097e1:	89 13                	mov    DWORD PTR [ebx],edx
c00097e3:	83 c4 0c             	add    esp,0xc
c00097e6:	5b                   	pop    ebx
c00097e7:	5e                   	pop    esi
c00097e8:	5f                   	pop    edi
c00097e9:	5d                   	pop    ebp
c00097ea:	c3                   	ret    

c00097eb <Virt::virtualMemorySetup()>:
c00097eb:	53                   	push   ebx
c00097ec:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f1:	6a 0f                	push   0xf
c00097f3:	53                   	push   ebx
c00097f4:	83 c3 01             	add    ebx,0x1
c00097f7:	e8 b4 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097fc:	58                   	pop    eax
c00097fd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009803:	5a                   	pop    edx
c0009804:	75 eb                	jne    c00097f1 <Virt::virtualMemorySetup()+0x6>
c0009806:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000980b:	6a 00                	push   0x0
c000980d:	53                   	push   ebx
c000980e:	83 c3 01             	add    ebx,0x1
c0009811:	e8 9a fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009816:	59                   	pop    ecx
c0009817:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000981d:	58                   	pop    eax
c000981e:	75 eb                	jne    c000980b <Virt::virtualMemorySetup()+0x20>
c0009820:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009825:	6a 0f                	push   0xf
c0009827:	53                   	push   ebx
c0009828:	83 c3 01             	add    ebx,0x1
c000982b:	e8 80 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009830:	58                   	pop    eax
c0009831:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009837:	5a                   	pop    edx
c0009838:	75 eb                	jne    c0009825 <Virt::virtualMemorySetup()+0x3a>
c000983a:	5b                   	pop    ebx
c000983b:	c3                   	ret    

c000983c <Virt::setupPageSwapping(int)>:
c000983c:	53                   	push   ebx
c000983d:	83 ec 0c             	sub    esp,0xc
c0009840:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009844:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0009849:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000984f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009851:	53                   	push   ebx
c0009852:	c1 e3 0b             	shl    ebx,0xb
c0009855:	68 77 0d 02 c0       	push   0xc0020d77
c000985a:	50                   	push   eax
c000985b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c000985e:	89 1d 50 31 02 c0    	mov    DWORD PTR ds:0xc0023150,ebx
c0009864:	c6 05 58 31 02 c0 43 	mov    BYTE PTR ds:0xc0023158,0x43
c000986b:	c1 eb 08             	shr    ebx,0x8
c000986e:	a3 54 31 02 c0       	mov    ds:0xc0023154,eax
c0009873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009876:	c7 05 4c 31 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002314c,0x8
c0009880:	e8 31 e2 ff ff       	call   c0007ab6 <malloc>
c0009885:	83 c4 0c             	add    esp,0xc
c0009888:	89 c1                	mov    ecx,eax
c000988a:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c000988f:	31 d2                	xor    edx,edx
c0009891:	a1 50 31 02 c0       	mov    eax,ds:0xc0023150
c0009896:	f7 35 4c 31 02 c0    	div    DWORD PTR ds:0xc002314c
c000989c:	c1 e8 05             	shr    eax,0x5
c000989f:	50                   	push   eax
c00098a0:	6a 00                	push   0x0
c00098a2:	51                   	push   ecx
c00098a3:	e8 48 6c ff ff       	call   c00004f0 <memset>
c00098a8:	83 c4 18             	add    esp,0x18
c00098ab:	5b                   	pop    ebx
c00098ac:	c3                   	ret    
c00098ad:	90                   	nop

c00098ae <VAS::setCPUSpecific(unsigned long)>:
c00098ae:	c3                   	ret    
c00098af:	90                   	nop

c00098b0 <VAS::VAS(VAS*)>:
c00098b0:	83 ec 0c             	sub    esp,0xc
c00098b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098c9:	83 ec 0c             	sub    esp,0xc
c00098cc:	68 ec 0a 02 c0       	push   0xc0020aec
c00098d1:	e8 6f 7a 00 00       	call   c0011345 <KePanic(char const*)>
c00098d6:	83 c4 10             	add    esp,0x10
c00098d9:	90                   	nop
c00098da:	83 c4 0c             	add    esp,0xc
c00098dd:	c3                   	ret    

c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098e2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098e7:	89 c2                	mov    edx,eax
c00098e9:	c1 e8 0a             	shr    eax,0xa
c00098ec:	c1 ea 16             	shr    edx,0x16
c00098ef:	83 f9 01             	cmp    ecx,0x1
c00098f2:	19 c9                	sbb    ecx,ecx
c00098f4:	c1 e2 0c             	shl    edx,0xc
c00098f7:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098fd:	25 fc 0f 00 00       	and    eax,0xffc
c0009902:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009909:	01 d0                	add    eax,edx
c000990b:	c3                   	ret    

c000990c <VAS::getPageTableEntry(unsigned long)>:
c000990c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009910:	89 ca                	mov    edx,ecx
c0009912:	c1 e9 0a             	shr    ecx,0xa
c0009915:	c1 ea 16             	shr    edx,0x16
c0009918:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000991e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009924:	c1 e0 0c             	shl    eax,0xc
c0009927:	8d 04 08             	lea    eax,[eax+ecx*1]
c000992a:	c3                   	ret    

c000992b <Virt::freeKernelVirtualPages(unsigned long)>:
c000992b:	55                   	push   ebp
c000992c:	57                   	push   edi
c000992d:	bf 01 00 00 00       	mov    edi,0x1
c0009932:	56                   	push   esi
c0009933:	53                   	push   ebx
c0009934:	83 ec 1c             	sub    esp,0x1c
c0009937:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000993b:	c1 ee 0c             	shr    esi,0xc
c000993e:	eb 48                	jmp    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009940:	83 ec 08             	sub    esp,0x8
c0009943:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0009948:	55                   	push   ebp
c0009949:	50                   	push   eax
c000994a:	e8 bd ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000994f:	83 c4 10             	add    esp,0x10
c0009952:	8b 10                	mov    edx,DWORD PTR [eax]
c0009954:	f6 c6 04             	test   dh,0x4
c0009957:	75 70                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009959:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000995f:	83 fb 04             	cmp    ebx,0x4
c0009962:	0f 84 8a 00 00 00    	je     c00099f2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009968:	83 fb 02             	cmp    ebx,0x2
c000996b:	0f 84 9a 00 00 00    	je     c0009a0b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009971:	83 fb 03             	cmp    ebx,0x3
c0009974:	0f 84 be 00 00 00    	je     c0009a38 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000997a:	83 fb 01             	cmp    ebx,0x1
c000997d:	0f 84 a2 00 00 00    	je     c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009983:	83 c6 01             	add    esi,0x1
c0009986:	31 ff                	xor    edi,edi
c0009988:	56                   	push   esi
c0009989:	89 f5                	mov    ebp,esi
c000998b:	e8 5a fc ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009990:	c1 e5 0c             	shl    ebp,0xc
c0009993:	0f b6 d8             	movzx  ebx,al
c0009996:	5a                   	pop    edx
c0009997:	85 db                	test   ebx,ebx
c0009999:	75 a5                	jne    c0009940 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999b:	83 ec 0c             	sub    esp,0xc
c000999e:	68 8e 0d 02 c0       	push   0xc0020d8e
c00099a3:	e8 9d 79 00 00       	call   c0011345 <KePanic(char const*)>
c00099a8:	5a                   	pop    edx
c00099a9:	59                   	pop    ecx
c00099aa:	55                   	push   ebp
c00099ab:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c00099b1:	55                   	push   ebp
c00099b2:	e8 55 ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00099bc:	f6 c6 04             	test   dh,0x4
c00099bf:	75 08                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099c7:	eb ba                	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099cd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	52                   	push   edx
c00099d7:	e8 7a e3 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00099dc:	83 c4 10             	add    esp,0x10
c00099df:	83 fb 04             	cmp    ebx,0x4
c00099e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ec:	0f 85 76 ff ff ff    	jne    c0009968 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099f2:	83 e7 01             	and    edi,0x1
c00099f5:	75 46                	jne    c0009a3d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099f7:	c7 44 24 30 10 0b 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020b10
c00099ff:	83 c4 1c             	add    esp,0x1c
c0009a02:	5b                   	pop    ebx
c0009a03:	5e                   	pop    esi
c0009a04:	5f                   	pop    edi
c0009a05:	5d                   	pop    ebp
c0009a06:	e9 3a 79 00 00       	jmp    c0011345 <KePanic(char const*)>
c0009a0b:	83 e7 01             	and    edi,0x1
c0009a0e:	75 15                	jne    c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a10:	83 ec 0c             	sub    esp,0xc
c0009a13:	68 aa 0d 02 c0       	push   0xc0020daa
c0009a18:	e8 28 79 00 00       	call   c0011345 <KePanic(char const*)>
c0009a1d:	83 c4 10             	add    esp,0x10
c0009a20:	e9 5e ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a25:	83 ec 08             	sub    esp,0x8
c0009a28:	6a 00                	push   0x0
c0009a2a:	56                   	push   esi
c0009a2b:	e8 80 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a30:	83 c4 10             	add    esp,0x10
c0009a33:	e9 4b ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a38:	83 e7 01             	and    edi,0x1
c0009a3b:	75 16                	jne    c0009a53 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a3d:	83 ec 08             	sub    esp,0x8
c0009a40:	6a 00                	push   0x0
c0009a42:	56                   	push   esi
c0009a43:	e8 68 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a48:	83 c4 10             	add    esp,0x10
c0009a4b:	83 c4 1c             	add    esp,0x1c
c0009a4e:	5b                   	pop    ebx
c0009a4f:	5e                   	pop    esi
c0009a50:	5f                   	pop    edi
c0009a51:	5d                   	pop    ebp
c0009a52:	c3                   	ret    
c0009a53:	c7 44 24 30 c6 0d 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020dc6
c0009a5b:	83 c4 1c             	add    esp,0x1c
c0009a5e:	5b                   	pop    ebx
c0009a5f:	5e                   	pop    esi
c0009a60:	5f                   	pop    edi
c0009a61:	5d                   	pop    ebp
c0009a62:	e9 de 78 00 00       	jmp    c0011345 <KePanic(char const*)>
c0009a67:	90                   	nop

c0009a68 <VAS::freeAllocatedPages(unsigned long)>:
c0009a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a70:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a74:	74 09                	je     c0009a7f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a7a:	e9 ac fe ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009a7f:	c7 44 24 04 34 0b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020b34
c0009a87:	e9 b9 0e 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c0009a8c <VAS::virtualToPhysical(unsigned long)>:
c0009a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a90:	50                   	push   eax
c0009a91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a95:	52                   	push   edx
c0009a96:	e8 71 fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009a9b:	59                   	pop    ecx
c0009a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a9e:	5a                   	pop    edx
c0009a9f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009aa4:	c3                   	ret    
c0009aa5:	90                   	nop

c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009aa6:	55                   	push   ebp
c0009aa7:	57                   	push   edi
c0009aa8:	56                   	push   esi
c0009aa9:	53                   	push   ebx
c0009aaa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aae:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ab2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ab6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aba:	85 db                	test   ebx,ebx
c0009abc:	7e 24                	jle    c0009ae2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009abe:	c1 e3 0c             	shl    ebx,0xc
c0009ac1:	01 f3                	add    ebx,esi
c0009ac3:	56                   	push   esi
c0009ac4:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aca:	55                   	push   ebp
c0009acb:	e8 3c fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009ad0:	5a                   	pop    edx
c0009ad1:	59                   	pop    ecx
c0009ad2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ad4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ad8:	21 f9                	and    ecx,edi
c0009ada:	09 d1                	or     ecx,edx
c0009adc:	39 f3                	cmp    ebx,esi
c0009ade:	89 08                	mov    DWORD PTR [eax],ecx
c0009ae0:	75 e1                	jne    c0009ac3 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ae2:	5b                   	pop    ebx
c0009ae3:	5e                   	pop    esi
c0009ae4:	5f                   	pop    edi
c0009ae5:	5d                   	pop    ebp
c0009ae6:	c3                   	ret    
c0009ae7:	90                   	nop

c0009ae8 <VAS::VAS()>:
c0009ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b02:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b13:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b1a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b21:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b26:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b2b:	29 c2                	sub    edx,eax
c0009b2d:	89 d0                	mov    eax,edx
c0009b2f:	05 ff 0f 00 00       	add    eax,0xfff
c0009b34:	c1 e8 0c             	shr    eax,0xc
c0009b37:	89 c2                	mov    edx,eax
c0009b39:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b3e:	6a 04                	push   0x4
c0009b40:	6a ff                	push   0xffffffff
c0009b42:	52                   	push   edx
c0009b43:	50                   	push   eax
c0009b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b48:	e8 59 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b4d:	83 c4 14             	add    esp,0x14
c0009b50:	90                   	nop
c0009b51:	c3                   	ret    

c0009b52 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b52:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b5d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b64:	75 01                	jne    c0009b67 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b66:	c3                   	ret    
c0009b67:	68 80 00 00 00       	push   0x80
c0009b6c:	6a ff                	push   0xffffffff
c0009b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b72:	50                   	push   eax
c0009b73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b77:	52                   	push   edx
c0009b78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b7c:	51                   	push   ecx
c0009b7d:	e8 24 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b82:	83 c4 14             	add    esp,0x14
c0009b85:	c3                   	ret    

c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b91:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b99:	83 f8 01             	cmp    eax,0x1
c0009b9c:	19 c0                	sbb    eax,eax
c0009b9e:	83 ca 03             	or     edx,0x3
c0009ba1:	83 e0 fc             	and    eax,0xfffffffc
c0009ba4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bab:	0f 20 d8             	mov    eax,cr3
c0009bae:	0f 22 d8             	mov    cr3,eax
c0009bb1:	c3                   	ret    

c0009bb2 <VAS::~VAS()>:
c0009bb2:	83 ec 2c             	sub    esp,0x2c
c0009bb5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bbd:	fa                   	cli    
c0009bbe:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009bc3:	83 c0 01             	add    eax,0x1
c0009bc6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009bcb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bd5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bdf:	6a 01                	push   0x1
c0009be1:	50                   	push   eax
c0009be2:	e8 9f ff ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0009be7:	83 c4 0c             	add    esp,0xc
c0009bea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bf2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bfa:	0f 8f d8 00 00 00    	jg     c0009cd8 <VAS::~VAS()+0x126>
c0009c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c0b:	c1 e2 02             	shl    edx,0x2
c0009c0e:	01 d0                	add    eax,edx
c0009c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c1a:	83 e0 01             	and    eax,0x1
c0009c1d:	0f 84 ab 00 00 00    	je     c0009cce <VAS::~VAS()+0x11c>
c0009c23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c2b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c33:	7f 74                	jg     c0009ca9 <VAS::~VAS()+0xf7>
c0009c35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c39:	c1 e0 0a             	shl    eax,0xa
c0009c3c:	89 c2                	mov    edx,eax
c0009c3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c42:	01 d0                	add    eax,edx
c0009c44:	c1 e0 0c             	shl    eax,0xc
c0009c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c4b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c55:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c5f:	6a 01                	push   0x1
c0009c61:	50                   	push   eax
c0009c62:	e8 77 fc ff ff       	call   c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c67:	83 c4 0c             	add    esp,0xc
c0009c6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c7c:	25 01 04 00 00       	and    eax,0x401
c0009c81:	3d 01 04 00 00       	cmp    eax,0x401
c0009c86:	75 1a                	jne    c0009ca2 <VAS::~VAS()+0xf0>
c0009c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c91:	83 ec 0c             	sub    esp,0xc
c0009c94:	50                   	push   eax
c0009c95:	e8 bc e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009c9a:	83 c4 10             	add    esp,0x10
c0009c9d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ca2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009ca7:	eb 82                	jmp    c0009c2b <VAS::~VAS()+0x79>
c0009ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cad:	25 00 04 00 00       	and    eax,0x400
c0009cb2:	74 1a                	je     c0009cce <VAS::~VAS()+0x11c>
c0009cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 90 e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cce:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cd3:	e9 1a ff ff ff       	jmp    c0009bf2 <VAS::~VAS()+0x40>
c0009cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cdf:	83 ec 0c             	sub    esp,0xc
c0009ce2:	50                   	push   eax
c0009ce3:	e8 43 fc ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cf2:	83 ec 0c             	sub    esp,0xc
c0009cf5:	50                   	push   eax
c0009cf6:	e8 5b e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cfb:	83 c4 10             	add    esp,0x10
c0009cfe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d03:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009d08:	83 e8 01             	sub    eax,0x1
c0009d0b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009d10:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009d15:	85 c0                	test   eax,eax
c0009d17:	75 01                	jne    c0009d1a <VAS::~VAS()+0x168>
c0009d19:	fb                   	sti    
c0009d1a:	90                   	nop
c0009d1b:	83 c4 2c             	add    esp,0x2c
c0009d1e:	c3                   	ret    
c0009d1f:	90                   	nop

c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d20:	55                   	push   ebp
c0009d21:	57                   	push   edi
c0009d22:	56                   	push   esi
c0009d23:	53                   	push   ebx
c0009d24:	83 ec 1c             	sub    esp,0x1c
c0009d27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d2f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d35:	77 08                	ja     c0009d3f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d37:	0f 20 d8             	mov    eax,cr3
c0009d3a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d3d:	75 49                	jne    c0009d88 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d43:	09 d8                	or     eax,ebx
c0009d45:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4a:	75 59                	jne    c0009da5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d4c:	89 de                	mov    esi,ebx
c0009d4e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d51:	c1 ee 16             	shr    esi,0x16
c0009d54:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d5b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d5f:	74 56                	je     c0009db7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d65:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d69:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d6f:	c1 eb 0a             	shr    ebx,0xa
c0009d72:	c1 e6 0c             	shl    esi,0xc
c0009d75:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d7b:	09 d0                	or     eax,edx
c0009d7d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d80:	83 c4 1c             	add    esp,0x1c
c0009d83:	5b                   	pop    ebx
c0009d84:	5e                   	pop    esi
c0009d85:	5f                   	pop    edi
c0009d86:	5d                   	pop    ebp
c0009d87:	c3                   	ret    
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	68 58 0b 02 c0       	push   0xc0020b58
c0009d90:	e8 b0 0b 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d9c:	09 d8                	or     eax,ebx
c0009d9e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009da3:	74 a7                	je     c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009da5:	83 ec 0c             	sub    esp,0xc
c0009da8:	68 c0 0b 02 c0       	push   0xc0020bc0
c0009dad:	e8 93 75 00 00       	call   c0011345 <KePanic(char const*)>
c0009db2:	83 c4 10             	add    esp,0x10
c0009db5:	eb 95                	jmp    c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009db7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009dbb:	e8 ff df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	89 c5                	mov    ebp,eax
c0009dc5:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009dcb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dcf:	6a 01                	push   0x1
c0009dd1:	e8 37 f8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009dd6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ddd:	6a 01                	push   0x1
c0009ddf:	50                   	push   eax
c0009de0:	55                   	push   ebp
c0009de1:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009deb:	51                   	push   ecx
c0009dec:	e8 29 01 00 00       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009df1:	83 c4 1c             	add    esp,0x1c
c0009df4:	68 00 10 00 00       	push   0x1000
c0009df9:	6a 00                	push   0x0
c0009dfb:	50                   	push   eax
c0009dfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e00:	e8 eb 66 ff ff       	call   c00004f0 <memset>
c0009e05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e0c:	e8 1a fb ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009e11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e15:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e18:	83 c4 10             	add    esp,0x10
c0009e1b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e1e:	e9 3e ff ff ff       	jmp    c0009d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e23:	90                   	nop

c0009e24 <VAS::allocatePages(int, int)>:
c0009e24:	55                   	push   ebp
c0009e25:	57                   	push   edi
c0009e26:	56                   	push   esi
c0009e27:	53                   	push   ebx
c0009e28:	83 ec 1c             	sub    esp,0x1c
c0009e2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e33:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e37:	75 71                	jne    c0009eaa <VAS::allocatePages(int, int)+0x86>
c0009e39:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e40:	85 c0                	test   eax,eax
c0009e42:	74 4d                	je     c0009e91 <VAS::allocatePages(int, int)+0x6d>
c0009e44:	89 dd                	mov    ebp,ebx
c0009e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e4a:	c1 e5 0c             	shl    ebp,0xc
c0009e4d:	01 c5                	add    ebp,eax
c0009e4f:	85 db                	test   ebx,ebx
c0009e51:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e54:	7e 29                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009e56:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e5a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e5e:	81 cf 00 04 00 00    	or     edi,0x400
c0009e64:	e8 56 df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009e69:	57                   	push   edi
c0009e6a:	53                   	push   ebx
c0009e6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e71:	50                   	push   eax
c0009e72:	56                   	push   esi
c0009e73:	e8 a8 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e78:	83 c4 10             	add    esp,0x10
c0009e7b:	39 dd                	cmp    ebp,ebx
c0009e7d:	75 e5                	jne    c0009e64 <VAS::allocatePages(int, int)+0x40>
c0009e7f:	0f 20 d8             	mov    eax,cr3
c0009e82:	0f 22 d8             	mov    cr3,eax
c0009e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e89:	83 c4 1c             	add    esp,0x1c
c0009e8c:	5b                   	pop    ebx
c0009e8d:	5e                   	pop    esi
c0009e8e:	5f                   	pop    edi
c0009e8f:	5d                   	pop    ebp
c0009e90:	c3                   	ret    
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	68 e4 0b 02 c0       	push   0xc0020be4
c0009e99:	e8 a7 74 00 00       	call   c0011345 <KePanic(char const*)>
c0009e9e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ea1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea5:	83 c4 10             	add    esp,0x10
c0009ea8:	eb 9a                	jmp    c0009e44 <VAS::allocatePages(int, int)+0x20>
c0009eaa:	83 ec 0c             	sub    esp,0xc
c0009ead:	53                   	push   ebx
c0009eae:	e8 5a f7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009eb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ebf:	77 37                	ja     c0009ef8 <VAS::allocatePages(int, int)+0xd4>
c0009ec1:	85 db                	test   ebx,ebx
c0009ec3:	7e ba                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ec5:	c1 e3 0c             	shl    ebx,0xc
c0009ec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ecc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ed0:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ed3:	81 cf 00 04 00 00    	or     edi,0x400
c0009ed9:	89 c3                	mov    ebx,eax
c0009edb:	e8 df de ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009ee0:	57                   	push   edi
c0009ee1:	53                   	push   ebx
c0009ee2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ee8:	50                   	push   eax
c0009ee9:	56                   	push   esi
c0009eea:	e8 31 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	39 dd                	cmp    ebp,ebx
c0009ef4:	75 e5                	jne    c0009edb <VAS::allocatePages(int, int)+0xb7>
c0009ef6:	eb 87                	jmp    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ef8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009efd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f03:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f0a:	74 b5                	je     c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f0c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f10:	80 ce 01             	or     dh,0x1
c0009f13:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f17:	eb a8                	jmp    c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f19:	90                   	nop

c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f1a:	55                   	push   ebp
c0009f1b:	57                   	push   edi
c0009f1c:	56                   	push   esi
c0009f1d:	53                   	push   ebx
c0009f1e:	83 ec 0c             	sub    esp,0xc
c0009f21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f25:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f2d:	85 db                	test   ebx,ebx
c0009f2f:	7e 2f                	jle    c0009f60 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f31:	c1 e3 0c             	shl    ebx,0xc
c0009f34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f3c:	01 d3                	add    ebx,edx
c0009f3e:	55                   	push   ebp
c0009f3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f47:	29 c2                	sub    edx,eax
c0009f49:	01 f2                	add    edx,esi
c0009f4b:	52                   	push   edx
c0009f4c:	56                   	push   esi
c0009f4d:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f53:	57                   	push   edi
c0009f54:	e8 c7 fd ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f59:	83 c4 10             	add    esp,0x10
c0009f5c:	39 de                	cmp    esi,ebx
c0009f5e:	75 de                	jne    c0009f3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f60:	0f 20 d8             	mov    eax,cr3
c0009f63:	0f 22 d8             	mov    cr3,eax
c0009f66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6a:	83 c4 0c             	add    esp,0xc
c0009f6d:	5b                   	pop    ebx
c0009f6e:	5e                   	pop    esi
c0009f6f:	5f                   	pop    edi
c0009f70:	5d                   	pop    ebp
c0009f71:	c3                   	ret    

c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f72:	55                   	push   ebp
c0009f73:	57                   	push   edi
c0009f74:	56                   	push   esi
c0009f75:	53                   	push   ebx
c0009f76:	83 ec 1c             	sub    esp,0x1c
c0009f79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f7d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009f81:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f85:	09 f8                	or     eax,edi
c0009f87:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f8b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f90:	75 4f                	jne    c0009fe1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f92:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f96:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009f99:	c1 eb 16             	shr    ebx,0x16
c0009f9c:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009fa3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009fa7:	74 52                	je     c0009ffb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009fa9:	0f b6 f2             	movzx  esi,dl
c0009fac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fb0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fb4:	c1 e8 0a             	shr    eax,0xa
c0009fb7:	83 fe 01             	cmp    esi,0x1
c0009fba:	19 d2                	sbb    edx,edx
c0009fbc:	c1 e3 0c             	shl    ebx,0xc
c0009fbf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fc5:	25 fc 0f 00 00       	and    eax,0xffc
c0009fca:	01 d8                	add    eax,ebx
c0009fcc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009fd0:	09 d9                	or     ecx,ebx
c0009fd2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fd9:	83 c4 1c             	add    esp,0x1c
c0009fdc:	5b                   	pop    ebx
c0009fdd:	5e                   	pop    esi
c0009fde:	5f                   	pop    edi
c0009fdf:	5d                   	pop    ebp
c0009fe0:	c3                   	ret    
c0009fe1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fe5:	83 ec 0c             	sub    esp,0xc
c0009fe8:	68 10 0c 02 c0       	push   0xc0020c10
c0009fed:	e8 53 73 00 00       	call   c0011345 <KePanic(char const*)>
c0009ff2:	83 c4 10             	add    esp,0x10
c0009ff5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ff9:	eb 97                	jmp    c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009ffb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009fff:	e8 bb dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a004:	83 ec 0c             	sub    esp,0xc
c000a007:	89 c5                	mov    ebp,eax
c000a009:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c000a00f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a013:	6a 01                	push   0x1
c000a015:	e8 f3 f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a01a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a021:	6a 01                	push   0x1
c000a023:	50                   	push   eax
c000a024:	55                   	push   ebp
c000a025:	81 cd 07 04 00 00    	or     ebp,0x407
c000a02b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a02f:	51                   	push   ecx
c000a030:	e8 e5 fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a035:	83 c4 1c             	add    esp,0x1c
c000a038:	68 00 10 00 00       	push   0x1000
c000a03d:	6a 00                	push   0x0
c000a03f:	50                   	push   eax
c000a040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a044:	e8 a7 64 ff ff       	call   c00004f0 <memset>
c000a049:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a04d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a050:	e8 d6 f8 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a055:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a058:	83 c4 10             	add    esp,0x10
c000a05b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a05e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a062:	e9 42 ff ff ff       	jmp    c0009fa9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a067:	90                   	nop

c000a068 <VAS::VAS(bool)>:
c000a068:	53                   	push   ebx
c000a069:	83 ec 28             	sub    esp,0x28
c000a06c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a070:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a07f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a083:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a08a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a092:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a095:	e8 25 dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a09a:	89 c2                	mov    edx,eax
c000a09c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0a3:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 01                	push   0x1
c000a0ae:	e8 5a f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a0b3:	83 c4 10             	add    esp,0x10
c000a0b6:	89 c2                	mov    edx,eax
c000a0b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0bf:	83 ec 0c             	sub    esp,0xc
c000a0c2:	6a 03                	push   0x3
c000a0c4:	6a 01                	push   0x1
c000a0c6:	52                   	push   edx
c000a0c7:	50                   	push   eax
c000a0c8:	53                   	push   ebx
c000a0c9:	e8 4c fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0ce:	83 c4 20             	add    esp,0x20
c000a0d1:	89 c2                	mov    edx,eax
c000a0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0da:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0e2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0ea:	7f 1d                	jg     c000a109 <VAS::VAS(bool)+0xa1>
c000a0ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0f7:	c1 e2 02             	shl    edx,0x2
c000a0fa:	01 d0                	add    eax,edx
c000a0fc:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a102:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a107:	eb d9                	jmp    c000a0e2 <VAS::VAS(bool)+0x7a>
c000a109:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a111:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a119:	7f 7e                	jg     c000a199 <VAS::VAS(bool)+0x131>
c000a11b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a11f:	2d 00 02 00 00       	sub    eax,0x200
c000a124:	c1 e0 0c             	shl    eax,0xc
c000a127:	83 c8 05             	or     eax,0x5
c000a12a:	89 c2                	mov    edx,eax
c000a12c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a131:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a137:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a13d:	83 e0 10             	and    eax,0x10
c000a140:	0f b6 c0             	movzx  eax,al
c000a143:	85 c0                	test   eax,eax
c000a145:	74 07                	je     c000a14e <VAS::VAS(bool)+0xe6>
c000a147:	b8 00 01 00 00       	mov    eax,0x100
c000a14c:	eb 05                	jmp    c000a153 <VAS::VAS(bool)+0xeb>
c000a14e:	b8 00 00 00 00       	mov    eax,0x0
c000a153:	09 d0                	or     eax,edx
c000a155:	89 c1                	mov    ecx,eax
c000a157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a15b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a15e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a162:	c1 e2 02             	shl    edx,0x2
c000a165:	01 d0                	add    eax,edx
c000a167:	89 ca                	mov    edx,ecx
c000a169:	89 10                	mov    DWORD PTR [eax],edx
c000a16b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a16f:	2d 40 03 00 00       	sub    eax,0x340
c000a174:	83 f8 7f             	cmp    eax,0x7f
c000a177:	77 16                	ja     c000a18f <VAS::VAS(bool)+0x127>
c000a179:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a17d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a180:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a184:	c1 e2 02             	shl    edx,0x2
c000a187:	01 d0                	add    eax,edx
c000a189:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a18f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a194:	e9 78 ff ff ff       	jmp    c000a111 <VAS::VAS(bool)+0xa9>
c000a199:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a19e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1a4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1aa:	83 e0 10             	and    eax,0x10
c000a1ad:	0f b6 c0             	movzx  eax,al
c000a1b0:	85 c0                	test   eax,eax
c000a1b2:	74 07                	je     c000a1bb <VAS::VAS(bool)+0x153>
c000a1b4:	b8 03 41 00 00       	mov    eax,0x4103
c000a1b9:	eb 05                	jmp    c000a1c0 <VAS::VAS(bool)+0x158>
c000a1bb:	b8 03 40 00 00       	mov    eax,0x4003
c000a1c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1c4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1c7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1cd:	89 02                	mov    DWORD PTR [edx],eax
c000a1cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1d6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1e1:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1e7:	83 e0 10             	and    eax,0x10
c000a1ea:	0f b6 c0             	movzx  eax,al
c000a1ed:	85 c0                	test   eax,eax
c000a1ef:	74 07                	je     c000a1f8 <VAS::VAS(bool)+0x190>
c000a1f1:	b8 00 01 00 00       	mov    eax,0x100
c000a1f6:	eb 05                	jmp    c000a1fd <VAS::VAS(bool)+0x195>
c000a1f8:	b8 00 00 00 00       	mov    eax,0x0
c000a1fd:	09 c2                	or     edx,eax
c000a1ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a203:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a206:	05 fc 0f 00 00       	add    eax,0xffc
c000a20b:	83 ca 03             	or     edx,0x3
c000a20e:	89 10                	mov    DWORD PTR [eax],edx
c000a210:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a215:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a21b:	83 ec 0c             	sub    esp,0xc
c000a21e:	50                   	push   eax
c000a21f:	e8 86 27 00 00       	call   c000c9aa <Device::getName()>
c000a224:	83 c4 10             	add    esp,0x10
c000a227:	83 ec 08             	sub    esp,0x8
c000a22a:	68 e0 0d 02 c0       	push   0xc0020de0
c000a22f:	50                   	push   eax
c000a230:	e8 1b 65 ff ff       	call   c0000750 <strcmp>
c000a235:	83 c4 10             	add    esp,0x10
c000a238:	85 c0                	test   eax,eax
c000a23a:	0f 94 c0             	sete   al
c000a23d:	0f b6 c0             	movzx  eax,al
c000a240:	85 c0                	test   eax,eax
c000a242:	74 68                	je     c000a2ac <VAS::VAS(bool)+0x244>
c000a244:	fa                   	cli    
c000a245:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a24a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a250:	05 7c 09 00 00       	add    eax,0x97c
c000a255:	83 ec 0c             	sub    esp,0xc
c000a258:	50                   	push   eax
c000a259:	e8 50 d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a266:	89 c3                	mov    ebx,eax
c000a268:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a26d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a273:	05 7c 09 00 00       	add    eax,0x97c
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	50                   	push   eax
c000a27c:	e8 2d d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a281:	83 c4 10             	add    esp,0x10
c000a284:	83 ec 08             	sub    esp,0x8
c000a287:	50                   	push   eax
c000a288:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28c:	e8 7b f6 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	8b 00                	mov    eax,DWORD PTR [eax]
c000a296:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a29b:	6a 11                	push   0x11
c000a29d:	53                   	push   ebx
c000a29e:	50                   	push   eax
c000a29f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a3:	e8 78 fa ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	fb                   	sti    
c000a2ac:	90                   	nop
c000a2ad:	83 c4 28             	add    esp,0x28
c000a2b0:	5b                   	pop    ebx
c000a2b1:	c3                   	ret    

c000a2b2 <VAS::evict(unsigned long)>:
c000a2b2:	55                   	push   ebp
c000a2b3:	57                   	push   edi
c000a2b4:	56                   	push   esi
c000a2b5:	53                   	push   ebx
c000a2b6:	83 ec 1c             	sub    esp,0x1c
c000a2b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2bd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2c5:	e8 a1 f4 ff ff       	call   c000976b <Virt::allocateSwapfilePage()>
c000a2ca:	89 c7                	mov    edi,eax
c000a2cc:	a1 4c 31 02 c0       	mov    eax,ds:0xc002314c
c000a2d1:	85 c0                	test   eax,eax
c000a2d3:	7e 40                	jle    c000a315 <VAS::evict(unsigned long)+0x63>
c000a2d5:	89 ee                	mov    esi,ebp
c000a2d7:	31 db                	xor    ebx,ebx
c000a2d9:	83 ec 0c             	sub    esp,0xc
c000a2dc:	57                   	push   edi
c000a2dd:	e8 73 f4 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a2e2:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2e5:	01 d8                	add    eax,ebx
c000a2e7:	6a 01                	push   0x1
c000a2e9:	31 d2                	xor    edx,edx
c000a2eb:	83 c3 01             	add    ebx,0x1
c000a2ee:	52                   	push   edx
c000a2ef:	81 c6 00 02 00 00    	add    esi,0x200
c000a2f5:	50                   	push   eax
c000a2f6:	0f be 05 58 31 02 c0 	movsx  eax,BYTE PTR ds:0xc0023158
c000a2fd:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a304:	50                   	push   eax
c000a305:	e8 5a 38 00 00       	call   c000db64 <LogicalDisk::write(unsigned long long, int, void*)>
c000a30a:	83 c4 20             	add    esp,0x20
c000a30d:	39 1d 4c 31 02 c0    	cmp    DWORD PTR ds:0xc002314c,ebx
c000a313:	7f c4                	jg     c000a2d9 <VAS::evict(unsigned long)+0x27>
c000a315:	83 ec 08             	sub    esp,0x8
c000a318:	c1 e7 0c             	shl    edi,0xc
c000a31b:	55                   	push   ebp
c000a31c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a320:	50                   	push   eax
c000a321:	e8 e6 f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a326:	8b 10                	mov    edx,DWORD PTR [eax]
c000a328:	89 d3                	mov    ebx,edx
c000a32a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a330:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a336:	09 d7                	or     edi,edx
c000a338:	89 38                	mov    DWORD PTR [eax],edi
c000a33a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a33d:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a343:	83 c2 01             	add    edx,0x1
c000a346:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a34c:	e8 05 da ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c000a351:	0f 20 d8             	mov    eax,cr3
c000a354:	0f 22 d8             	mov    cr3,eax
c000a357:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a35d:	51                   	push   ecx
c000a35e:	55                   	push   ebp
c000a35f:	53                   	push   ebx
c000a360:	68 34 0c 02 c0       	push   0xc0020c34
c000a365:	e8 db 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a36a:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a36f:	c7 44 24 50 ee 0d 02 c0 	mov    DWORD PTR [esp+0x50],0xc0020dee
c000a377:	8d 50 01             	lea    edx,[eax+0x1]
c000a37a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a37e:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a384:	83 c4 3c             	add    esp,0x3c
c000a387:	5b                   	pop    ebx
c000a388:	5e                   	pop    esi
c000a389:	5f                   	pop    edi
c000a38a:	5d                   	pop    ebp
c000a38b:	e9 b5 05 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a390:	55                   	push   ebp
c000a391:	57                   	push   edi
c000a392:	56                   	push   esi
c000a393:	53                   	push   ebx
c000a394:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a39a:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a3a1:	89 f3                	mov    ebx,esi
c000a3a3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3a9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3af:	77 22                	ja     c000a3d3 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3b1:	83 ec 08             	sub    esp,0x8
c000a3b4:	56                   	push   esi
c000a3b5:	68 11 0e 02 c0       	push   0xc0020e11
c000a3ba:	e8 86 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3bf:	83 c4 10             	add    esp,0x10
c000a3c2:	85 db                	test   ebx,ebx
c000a3c4:	75 2a                	jne    c000a3f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3c6:	31 c0                	xor    eax,eax
c000a3c8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3ce:	5b                   	pop    ebx
c000a3cf:	5e                   	pop    esi
c000a3d0:	5f                   	pop    edi
c000a3d1:	5d                   	pop    ebp
c000a3d2:	c3                   	ret    
c000a3d3:	83 ec 0c             	sub    esp,0xc
c000a3d6:	68 ff 0d 02 c0       	push   0xc0020dff
c000a3db:	e8 65 6f 00 00       	call   c0011345 <KePanic(char const*)>
c000a3e0:	5f                   	pop    edi
c000a3e1:	5d                   	pop    ebp
c000a3e2:	56                   	push   esi
c000a3e3:	68 11 0e 02 c0       	push   0xc0020e11
c000a3e8:	e8 58 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3ed:	83 c4 10             	add    esp,0x10
c000a3f0:	83 ec 08             	sub    esp,0x8
c000a3f3:	53                   	push   ebx
c000a3f4:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3fb:	51                   	push   ecx
c000a3fc:	e8 0b f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	89 c2                	mov    edx,eax
c000a406:	85 c0                	test   eax,eax
c000a408:	74 bc                	je     c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a40a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a40c:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a412:	0f 85 c0 00 00 00    	jne    c000a4d8 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a418:	89 e8                	mov    eax,ebp
c000a41a:	25 01 04 00 00       	and    eax,0x401
c000a41f:	3d 00 04 00 00       	cmp    eax,0x400
c000a424:	75 a0                	jne    c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a426:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42a:	c1 ed 0c             	shr    ebp,0xc
c000a42d:	e8 8d d9 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a432:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a436:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a438:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a43e:	09 c1                	or     ecx,eax
c000a440:	81 c9 01 08 00 00    	or     ecx,0x801
c000a446:	89 0a                	mov    DWORD PTR [edx],ecx
c000a448:	8b 15 4c 31 02 c0    	mov    edx,DWORD PTR ds:0xc002314c
c000a44e:	85 d2                	test   edx,edx
c000a450:	7e 40                	jle    c000a492 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a452:	89 df                	mov    edi,ebx
c000a454:	31 f6                	xor    esi,esi
c000a456:	83 ec 0c             	sub    esp,0xc
c000a459:	55                   	push   ebp
c000a45a:	e8 f6 f2 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a45f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a462:	01 f0                	add    eax,esi
c000a464:	6a 01                	push   0x1
c000a466:	31 d2                	xor    edx,edx
c000a468:	83 c6 01             	add    esi,0x1
c000a46b:	52                   	push   edx
c000a46c:	81 c7 00 02 00 00    	add    edi,0x200
c000a472:	50                   	push   eax
c000a473:	0f be 05 58 31 02 c0 	movsx  eax,BYTE PTR ds:0xc0023158
c000a47a:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a481:	50                   	push   eax
c000a482:	e8 71 36 00 00       	call   c000daf8 <LogicalDisk::read(unsigned long long, int, void*)>
c000a487:	83 c4 20             	add    esp,0x20
c000a48a:	39 35 4c 31 02 c0    	cmp    DWORD PTR ds:0xc002314c,esi
c000a490:	7f c4                	jg     c000a456 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a492:	83 ec 04             	sub    esp,0x4
c000a495:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a49a:	83 e8 01             	sub    eax,0x1
c000a49d:	50                   	push   eax
c000a49e:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a4a3:	53                   	push   ebx
c000a4a4:	68 24 0e 02 c0       	push   0xc0020e24
c000a4a9:	e8 97 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4ae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4b1:	e8 7c f2 ff ff       	call   c0009732 <Virt::freeSwapfilePage(unsigned long)>
c000a4b6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000a4bb:	83 c4 10             	add    esp,0x10
c000a4be:	83 e8 01             	sub    eax,0x1
c000a4c1:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000a4c6:	85 c0                	test   eax,eax
c000a4c8:	75 01                	jne    c000a4cb <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4ca:	fb                   	sti    
c000a4cb:	0f 20 d8             	mov    eax,cr3
c000a4ce:	0f 22 d8             	mov    cr3,eax
c000a4d1:	b0 01                	mov    al,0x1
c000a4d3:	e9 f0 fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a4d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4dc:	bd 00 10 00 00       	mov    ebp,0x1000
c000a4e1:	83 ec 0c             	sub    esp,0xc
c000a4e4:	89 de                	mov    esi,ebx
c000a4e6:	68 64 0c 02 c0       	push   0xc0020c64
c000a4eb:	e8 55 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4f0:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a4f4:	e8 c6 d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a4f9:	89 e9                	mov    ecx,ebp
c000a4fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a4fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a501:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a503:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a509:	09 c8                	or     eax,ecx
c000a50b:	83 c8 02             	or     eax,0x2
c000a50e:	89 02                	mov    DWORD PTR [edx],eax
c000a510:	0f 20 d8             	mov    eax,cr3
c000a513:	0f 22 d8             	mov    cr3,eax
c000a516:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a51a:	89 df                	mov    edi,ebx
c000a51c:	89 e9                	mov    ecx,ebp
c000a51e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a520:	b0 01                	mov    al,0x1
c000a522:	83 c4 10             	add    esp,0x10
c000a525:	e9 9e fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a52a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a52a:	55                   	push   ebp
c000a52b:	57                   	push   edi
c000a52c:	56                   	push   esi
c000a52d:	53                   	push   ebx
c000a52e:	83 ec 28             	sub    esp,0x28
c000a531:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a535:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a539:	50                   	push   eax
c000a53a:	e8 ce f0 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a53f:	83 c4 0c             	add    esp,0xc
c000a542:	89 c5                	mov    ebp,eax
c000a544:	6a 07                	push   0x7
c000a546:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a54a:	52                   	push   edx
c000a54b:	56                   	push   esi
c000a54c:	e8 d3 f8 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c000a551:	83 c4 10             	add    esp,0x10
c000a554:	89 c7                	mov    edi,eax
c000a556:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a55a:	85 c9                	test   ecx,ecx
c000a55c:	74 2f                	je     c000a58d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a55e:	31 db                	xor    ebx,ebx
c000a560:	e8 5a d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a565:	83 c3 01             	add    ebx,0x1
c000a568:	6a 03                	push   0x3
c000a56a:	55                   	push   ebp
c000a56b:	50                   	push   eax
c000a56c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a570:	56                   	push   esi
c000a571:	e8 aa f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a576:	6a 07                	push   0x7
c000a578:	57                   	push   edi
c000a579:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a57d:	50                   	push   eax
c000a57e:	56                   	push   esi
c000a57f:	e8 9c f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a584:	83 c4 20             	add    esp,0x20
c000a587:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a58b:	75 d3                	jne    c000a560 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a58d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a591:	89 28                	mov    DWORD PTR [eax],ebp
c000a593:	83 c4 1c             	add    esp,0x1c
c000a596:	89 f8                	mov    eax,edi
c000a598:	5b                   	pop    ebx
c000a599:	5e                   	pop    esi
c000a59a:	5f                   	pop    edi
c000a59b:	5d                   	pop    ebp
c000a59c:	c3                   	ret    
c000a59d:	90                   	nop

c000a59e <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a59e:	53                   	push   ebx
c000a59f:	83 ec 14             	sub    esp,0x14
c000a5a2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5a6:	68 84 0c 02 c0       	push   0xc0020c84
c000a5ab:	e8 95 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5b0:	c7 04 24 e4 0c 02 c0 	mov    DWORD PTR [esp],0xc0020ce4
c000a5b7:	e8 89 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5bc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5c0:	83 c4 18             	add    esp,0x18
c000a5c3:	5b                   	pop    ebx
c000a5c4:	e9 62 f3 ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a5c9:	90                   	nop

c000a5ca <VAS::scanForEviction()>:
c000a5ca:	57                   	push   edi
c000a5cb:	56                   	push   esi
c000a5cc:	31 f6                	xor    esi,esi
c000a5ce:	53                   	push   ebx
c000a5cf:	83 ec 10             	sub    esp,0x10
c000a5d2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5d6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5d9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5df:	75 0e                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a5e1:	89 da                	mov    edx,ebx
c000a5e3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5e6:	c1 ea 16             	shr    edx,0x16
c000a5e9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5ed:	74 57                	je     c000a646 <VAS::scanForEviction()+0x7c>
c000a5ef:	53                   	push   ebx
c000a5f0:	57                   	push   edi
c000a5f1:	e8 16 f3 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a5f6:	5a                   	pop    edx
c000a5f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5f9:	59                   	pop    ecx
c000a5fa:	89 d1                	mov    ecx,edx
c000a5fc:	c1 e9 0c             	shr    ecx,0xc
c000a5ff:	74 10                	je     c000a611 <VAS::scanForEviction()+0x47>
c000a601:	89 d1                	mov    ecx,edx
c000a603:	81 e1 01 08 00 00    	and    ecx,0x801
c000a609:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a60f:	74 40                	je     c000a651 <VAS::scanForEviction()+0x87>
c000a611:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a617:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a61d:	76 2d                	jbe    c000a64c <VAS::scanForEviction()+0x82>
c000a61f:	83 c6 01             	add    esi,0x1
c000a622:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a629:	83 fe 03             	cmp    esi,0x3
c000a62c:	74 32                	je     c000a660 <VAS::scanForEviction()+0x96>
c000a62e:	31 db                	xor    ebx,ebx
c000a630:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a636:	75 b7                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a638:	89 da                	mov    edx,ebx
c000a63a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a63d:	c1 ea 16             	shr    edx,0x16
c000a640:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a644:	75 a9                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a646:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a64c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a64f:	eb 88                	jmp    c000a5d9 <VAS::scanForEviction()+0xf>
c000a651:	f6 c2 20             	test   dl,0x20
c000a654:	74 13                	je     c000a669 <VAS::scanForEviction()+0x9f>
c000a656:	83 e2 df             	and    edx,0xffffffdf
c000a659:	89 10                	mov    DWORD PTR [eax],edx
c000a65b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a65e:	eb b1                	jmp    c000a611 <VAS::scanForEviction()+0x47>
c000a660:	83 c4 10             	add    esp,0x10
c000a663:	31 c0                	xor    eax,eax
c000a665:	5b                   	pop    ebx
c000a666:	5e                   	pop    esi
c000a667:	5f                   	pop    edi
c000a668:	c3                   	ret    
c000a669:	83 ec 08             	sub    esp,0x8
c000a66c:	89 d0                	mov    eax,edx
c000a66e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a673:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a677:	53                   	push   ebx
c000a678:	68 39 0e 02 c0       	push   0xc0020e39
c000a67d:	e8 c3 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a682:	58                   	pop    eax
c000a683:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a686:	5a                   	pop    edx
c000a687:	51                   	push   ecx
c000a688:	57                   	push   edi
c000a689:	e8 24 fc ff ff       	call   c000a2b2 <VAS::evict(unsigned long)>
c000a68e:	5b                   	pop    ebx
c000a68f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a692:	5e                   	pop    esi
c000a693:	50                   	push   eax
c000a694:	68 4d 0e 02 c0       	push   0xc0020e4d
c000a699:	e8 a7 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a69e:	58                   	pop    eax
c000a69f:	5a                   	pop    edx
c000a6a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6a4:	50                   	push   eax
c000a6a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6a9:	68 60 0e 02 c0       	push   0xc0020e60
c000a6ae:	e8 92 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a6b3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6c3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	5b                   	pop    ebx
c000a6ca:	5e                   	pop    esi
c000a6cb:	5f                   	pop    edi
c000a6cc:	c3                   	ret    

c000a6cd <mapVASFirstTime>:
c000a6cd:	55                   	push   ebp
c000a6ce:	57                   	push   edi
c000a6cf:	56                   	push   esi
c000a6d0:	53                   	push   ebx
c000a6d1:	83 ec 0c             	sub    esp,0xc
c000a6d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6d9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6dc:	83 fa 01             	cmp    edx,0x1
c000a6df:	0f 84 cb 00 00 00    	je     c000a7b0 <mapVASFirstTime+0xe3>
c000a6e5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6e8:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6eb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6f0:	c1 e5 15             	shl    ebp,0x15
c000a6f3:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6f8:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6fe:	29 eb                	sub    ebx,ebp
c000a700:	29 ef                	sub    edi,ebp
c000a702:	e8 b8 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a707:	83 ec 0c             	sub    esp,0xc
c000a70a:	68 03 04 00 00       	push   0x403
c000a70f:	6a 01                	push   0x1
c000a711:	53                   	push   ebx
c000a712:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a718:	50                   	push   eax
c000a719:	56                   	push   esi
c000a71a:	e8 fb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a71f:	83 c4 20             	add    esp,0x20
c000a722:	39 fb                	cmp    ebx,edi
c000a724:	75 dc                	jne    c000a702 <mapVASFirstTime+0x35>
c000a726:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a72b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a730:	29 eb                	sub    ebx,ebp
c000a732:	29 ef                	sub    edi,ebp
c000a734:	e8 86 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a739:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a73d:	83 fa 01             	cmp    edx,0x1
c000a740:	19 d2                	sbb    edx,edx
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	83 e2 04             	and    edx,0x4
c000a748:	81 c2 03 04 00 00    	add    edx,0x403
c000a74e:	52                   	push   edx
c000a74f:	6a 01                	push   0x1
c000a751:	53                   	push   ebx
c000a752:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a758:	50                   	push   eax
c000a759:	56                   	push   esi
c000a75a:	e8 bb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a75f:	83 c4 20             	add    esp,0x20
c000a762:	39 df                	cmp    edi,ebx
c000a764:	75 ce                	jne    c000a734 <mapVASFirstTime+0x67>
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a76e:	6a 04                	push   0x4
c000a770:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a776:	6a ff                	push   0xffffffff
c000a778:	c1 eb 0c             	shr    ebx,0xc
c000a77b:	53                   	push   ebx
c000a77c:	68 00 40 02 c0       	push   0xc0024000
c000a781:	56                   	push   esi
c000a782:	e8 1f f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a787:	83 c4 14             	add    esp,0x14
c000a78a:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a78f:	6a 04                	push   0x4
c000a791:	6a ff                	push   0xffffffff
c000a793:	53                   	push   ebx
c000a794:	68 00 40 02 c0       	push   0xc0024000
c000a799:	50                   	push   eax
c000a79a:	e8 07 f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a79f:	0f 20 d8             	mov    eax,cr3
c000a7a2:	0f 22 d8             	mov    cr3,eax
c000a7a5:	83 c4 20             	add    esp,0x20
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	5b                   	pop    ebx
c000a7ac:	5e                   	pop    esi
c000a7ad:	5f                   	pop    edi
c000a7ae:	5d                   	pop    ebp
c000a7af:	c3                   	ret    
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	68 6d 0e 02 c0       	push   0xc0020e6d
c000a7b8:	e8 88 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	83 c4 0c             	add    esp,0xc
c000a7c3:	5b                   	pop    ebx
c000a7c4:	5e                   	pop    esi
c000a7c5:	5f                   	pop    edi
c000a7c6:	5d                   	pop    ebp
c000a7c7:	c3                   	ret    

c000a7c8 <__cxa_atexit>:
c000a7c8:	31 c0                	xor    eax,eax
c000a7ca:	c3                   	ret    

c000a7cb <__cxa_finalize>:
c000a7cb:	c3                   	ret    

c000a7cc <__stack_chk_fail>:
c000a7cc:	55                   	push   ebp
c000a7cd:	89 e5                	mov    ebp,esp
c000a7cf:	83 ec 10             	sub    esp,0x10
c000a7d2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7d5:	68 86 0e 02 c0       	push   0xc0020e86
c000a7da:	e8 66 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7df:	58                   	pop    eax
c000a7e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7e3:	5a                   	pop    edx
c000a7e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7e7:	68 86 0e 02 c0       	push   0xc0020e86
c000a7ec:	e8 54 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7f1:	c7 04 24 8e 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e8e
c000a7f8:	e8 48 6b 00 00       	call   c0011345 <KePanic(char const*)>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	c9                   	leave  
c000a801:	c3                   	ret    

c000a802 <__cxa_pure_virtual>:
c000a802:	83 ec 18             	sub    esp,0x18
c000a805:	68 a6 0e 02 c0       	push   0xc0020ea6
c000a80a:	e8 36 6b 00 00       	call   c0011345 <KePanic(char const*)>
c000a80f:	83 c4 1c             	add    esp,0x1c
c000a812:	c3                   	ret    

c000a813 <operator new[](unsigned long)>:
c000a813:	e9 9e d2 ff ff       	jmp    c0007ab6 <malloc>

c000a818 <operator delete(void*, unsigned long)>:
c000a818:	e9 b9 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a81d <operator delete[](void*)>:
c000a81d:	e9 b4 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a822 <operator delete[](void*, unsigned long)>:
c000a822:	e9 af d2 ff ff       	jmp    c0007ad6 <rfree>

c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a827:	55                   	push   ebp
c000a828:	57                   	push   edi
c000a829:	56                   	push   esi
c000a82a:	be af 09 02 c0       	mov    esi,0xc00209af
c000a82f:	53                   	push   ebx
c000a830:	83 ec 20             	sub    esp,0x20
c000a833:	a0 ae 09 02 c0       	mov    al,ds:0xc00209ae
c000a838:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a83c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a840:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a844:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a848:	b8 10 00 00 00       	mov    eax,0x10
c000a84d:	f7 c7 02 00 00 00    	test   edi,0x2
c000a853:	75 60                	jne    c000a8b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a855:	89 c1                	mov    ecx,eax
c000a857:	c1 e9 02             	shr    ecx,0x2
c000a85a:	fc                   	cld    
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a85f:	a8 02                	test   al,0x2
c000a861:	74 0b                	je     c000a86e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a863:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a866:	66 89 17             	mov    WORD PTR [edi],dx
c000a869:	ba 02 00 00 00       	mov    edx,0x2
c000a86e:	a8 01                	test   al,0x1
c000a870:	74 06                	je     c000a878 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a872:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a875:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a878:	89 ee                	mov    esi,ebp
c000a87a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a87e:	eb 02                	jmp    c000a882 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a880:	89 c6                	mov    esi,eax
c000a882:	31 d2                	xor    edx,edx
c000a884:	83 c1 01             	add    ecx,0x1
c000a887:	89 f0                	mov    eax,esi
c000a889:	f7 f3                	div    ebx
c000a88b:	39 de                	cmp    esi,ebx
c000a88d:	73 f1                	jae    c000a880 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a88f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a892:	eb 02                	jmp    c000a896 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a894:	89 c5                	mov    ebp,eax
c000a896:	31 d2                	xor    edx,edx
c000a898:	83 e9 01             	sub    ecx,0x1
c000a89b:	89 e8                	mov    eax,ebp
c000a89d:	f7 f3                	div    ebx
c000a89f:	39 dd                	cmp    ebp,ebx
c000a8a1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8a5:	88 11                	mov    BYTE PTR [ecx],dl
c000a8a7:	73 eb                	jae    c000a894 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8ad:	83 c4 20             	add    esp,0x20
c000a8b0:	5b                   	pop    ebx
c000a8b1:	5e                   	pop    esi
c000a8b2:	5f                   	pop    edi
c000a8b3:	5d                   	pop    ebp
c000a8b4:	c3                   	ret    
c000a8b5:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8b8:	83 c7 02             	add    edi,0x2
c000a8bb:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8bf:	83 c6 02             	add    esi,0x2
c000a8c2:	83 e8 02             	sub    eax,0x2
c000a8c5:	eb 8e                	jmp    c000a855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8c7 <Dbg::logc(char)>:
c000a8c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8cb:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a8d2:	75 12                	jne    c000a8e6 <Dbg::logc(char)+0x1f>
c000a8d4:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8d9:	ec                   	in     al,dx
c000a8da:	a8 20                	test   al,0x20
c000a8dc:	74 fb                	je     c000a8d9 <Dbg::logc(char)+0x12>
c000a8de:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8e3:	88 c8                	mov    al,cl
c000a8e5:	ee                   	out    dx,al
c000a8e6:	c3                   	ret    

c000a8e7 <Dbg::logs(char*)>:
c000a8e7:	53                   	push   ebx
c000a8e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8ef:	85 c0                	test   eax,eax
c000a8f1:	74 11                	je     c000a904 <Dbg::logs(char*)+0x1d>
c000a8f3:	83 c3 01             	add    ebx,0x1
c000a8f6:	50                   	push   eax
c000a8f7:	e8 cb ff ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a8fc:	58                   	pop    eax
c000a8fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a900:	85 c0                	test   eax,eax
c000a902:	75 ef                	jne    c000a8f3 <Dbg::logs(char*)+0xc>
c000a904:	5b                   	pop    ebx
c000a905:	c3                   	ret    

c000a906 <Dbg::logWriteInt(unsigned int)>:
c000a906:	83 ec 10             	sub    esp,0x10
c000a909:	6a 0a                	push   0xa
c000a90b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a90f:	50                   	push   eax
c000a910:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a914:	50                   	push   eax
c000a915:	e8 0d ff ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a91a:	50                   	push   eax
c000a91b:	e8 c7 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a920:	83 c4 20             	add    esp,0x20
c000a923:	c3                   	ret    

c000a924 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a924:	83 ec 10             	sub    esp,0x10
c000a927:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a92b:	50                   	push   eax
c000a92c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a930:	50                   	push   eax
c000a931:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a935:	52                   	push   edx
c000a936:	e8 ec fe ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a93b:	50                   	push   eax
c000a93c:	e8 a6 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a941:	83 c4 20             	add    esp,0x20
c000a944:	c3                   	ret    

c000a945 <Dbg::kprintf(char const*, ...)>:
c000a945:	55                   	push   ebp
c000a946:	57                   	push   edi
c000a947:	56                   	push   esi
c000a948:	53                   	push   ebx
c000a949:	83 ec 0c             	sub    esp,0xc
c000a94c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a950:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a957:	74 08                	je     c000a961 <Dbg::kprintf(char const*, ...)+0x1c>
c000a959:	83 c4 0c             	add    esp,0xc
c000a95c:	5b                   	pop    ebx
c000a95d:	5e                   	pop    esi
c000a95e:	5f                   	pop    edi
c000a95f:	5d                   	pop    ebp
c000a960:	c3                   	ret    
c000a961:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a965:	31 ff                	xor    edi,edi
c000a967:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a96b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a96e:	85 c0                	test   eax,eax
c000a970:	74 e7                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a972:	8d 77 01             	lea    esi,[edi+0x1]
c000a975:	83 f8 25             	cmp    eax,0x25
c000a978:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a97b:	75 47                	jne    c000a9c4 <Dbg::kprintf(char const*, ...)+0x7f>
c000a97d:	83 c7 02             	add    edi,0x2
c000a980:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a983:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a986:	83 e8 25             	sub    eax,0x25
c000a989:	0f b6 c0             	movzx  eax,al
c000a98c:	83 f8 53             	cmp    eax,0x53
c000a98f:	0f 87 ce 00 00 00    	ja     c000aa63 <Dbg::kprintf(char const*, ...)+0x11e>
c000a995:	ff 24 85 bc 0e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf144]
c000a99c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9a0:	89 c8                	mov    eax,ecx
c000a9a2:	83 c1 04             	add    ecx,0x4
c000a9a5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a9:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9ab:	55                   	push   ebp
c000a9ac:	e8 55 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9b1:	58                   	pop    eax
c000a9b2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9b5:	85 c0                	test   eax,eax
c000a9b7:	74 a0                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a9b9:	8d 77 01             	lea    esi,[edi+0x1]
c000a9bc:	83 f8 25             	cmp    eax,0x25
c000a9bf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9c2:	74 b9                	je     c000a97d <Dbg::kprintf(char const*, ...)+0x38>
c000a9c4:	50                   	push   eax
c000a9c5:	89 f7                	mov    edi,esi
c000a9c7:	e8 fb fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a9cc:	89 ee                	mov    esi,ebp
c000a9ce:	58                   	pop    eax
c000a9cf:	eb e1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d5:	89 c8                	mov    eax,ecx
c000a9d7:	83 c1 04             	add    ecx,0x4
c000a9da:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e0:	50                   	push   eax
c000a9e1:	e8 01 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a9e6:	58                   	pop    eax
c000a9e7:	eb c9                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ed:	89 d0                	mov    eax,edx
c000a9ef:	83 c2 04             	add    edx,0x4
c000a9f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9f8:	50                   	push   eax
c000a9f9:	e8 08 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9fe:	58                   	pop    eax
c000a9ff:	eb b1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa05:	89 d0                	mov    eax,edx
c000aa07:	83 c2 04             	add    edx,0x4
c000aa0a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa11:	50                   	push   eax
c000aa12:	e8 b0 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa17:	58                   	pop    eax
c000aa18:	eb 98                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa1e:	89 c8                	mov    eax,ecx
c000aa20:	83 c1 04             	add    ecx,0x4
c000aa23:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa27:	6a 10                	push   0x10
c000aa29:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa2b:	51                   	push   ecx
c000aa2c:	e8 f3 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa31:	5d                   	pop    ebp
c000aa32:	58                   	pop    eax
c000aa33:	e9 7a ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa3c:	89 d0                	mov    eax,edx
c000aa3e:	83 c2 08             	add    edx,0x8
c000aa41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa45:	6a 10                	push   0x10
c000aa47:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa49:	50                   	push   eax
c000aa4a:	e8 d5 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa4f:	58                   	pop    eax
c000aa50:	5a                   	pop    edx
c000aa51:	e9 5c ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa56:	6a 25                	push   0x25
c000aa58:	e8 6a fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa5d:	5a                   	pop    edx
c000aa5e:	e9 4f ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa63:	6a 25                	push   0x25
c000aa65:	e8 5d fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa6a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa6e:	50                   	push   eax
c000aa6f:	e8 53 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa74:	5a                   	pop    edx
c000aa75:	59                   	pop    ecx
c000aa76:	e9 37 ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7b:	90                   	nop

c000aa7c <KiUbsanPrintDetails(char const*, void*)>:
c000aa7c:	83 ec 1c             	sub    esp,0x1c
c000aa7f:	83 ec 08             	sub    esp,0x8
c000aa82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa86:	68 0c 10 02 c0       	push   0xc002100c
c000aa8b:	e8 b5 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aa90:	83 c4 10             	add    esp,0x10
c000aa93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaa1:	83 ec 08             	sub    esp,0x8
c000aaa4:	50                   	push   eax
c000aaa5:	68 20 10 02 c0       	push   0xc0021020
c000aaaa:	e8 96 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aaaf:	83 c4 10             	add    esp,0x10
c000aab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aab9:	83 ec 08             	sub    esp,0x8
c000aabc:	50                   	push   eax
c000aabd:	68 2a 10 02 c0       	push   0xc002102a
c000aac2:	e8 7e fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aac7:	83 c4 10             	add    esp,0x10
c000aaca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aace:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aad1:	83 ec 08             	sub    esp,0x8
c000aad4:	50                   	push   eax
c000aad5:	68 34 10 02 c0       	push   0xc0021034
c000aada:	e8 66 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	90                   	nop
c000aae3:	83 c4 1c             	add    esp,0x1c
c000aae6:	c3                   	ret    
c000aae7:	90                   	nop

c000aae8 <__ubsan_handle_type_mismatch_v1>:
c000aae8:	83 ec 0c             	sub    esp,0xc
c000aaeb:	83 ec 08             	sub    esp,0x8
c000aaee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaf2:	68 78 11 02 c0       	push   0xc0021178
c000aaf7:	e8 80 ff ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000aafc:	83 c4 10             	add    esp,0x10
c000aaff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab04:	75 16                	jne    c000ab1c <__ubsan_handle_type_mismatch_v1+0x34>
c000ab06:	83 ec 0c             	sub    esp,0xc
c000ab09:	68 3e 10 02 c0       	push   0xc002103e
c000ab0e:	e8 32 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab13:	83 c4 10             	add    esp,0x10
c000ab16:	e9 91 00 00 00       	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab1b:	90                   	nop
c000ab1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab23:	85 c0                	test   eax,eax
c000ab25:	74 29                	je     c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab2e:	83 e8 01             	sub    eax,0x1
c000ab31:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab35:	75 19                	jne    c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab37:	83 ec 08             	sub    esp,0x8
c000ab3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab3e:	68 98 11 02 c0       	push   0xc0021198
c000ab43:	e8 fd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab48:	83 c4 10             	add    esp,0x10
c000ab4b:	eb 5f                	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab50:	83 ec 0c             	sub    esp,0xc
c000ab53:	68 53 10 02 c0       	push   0xc0021053
c000ab58:	e8 e8 fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab67:	0f b6 c0             	movzx  eax,al
c000ab6a:	83 ec 08             	sub    esp,0x8
c000ab6d:	50                   	push   eax
c000ab6e:	68 6d 10 02 c0       	push   0xc002106d
c000ab73:	e8 cd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab78:	83 c4 10             	add    esp,0x10
c000ab7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab82:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8d:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab90:	0f b6 c0             	movzx  eax,al
c000ab93:	8b 04 85 60 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcea0]
c000ab9a:	51                   	push   ecx
c000ab9b:	52                   	push   edx
c000ab9c:	50                   	push   eax
c000ab9d:	68 c0 11 02 c0       	push   0xc00211c0
c000aba2:	e8 9e fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	66 90                	xchg   ax,ax
c000abac:	83 ec 0c             	sub    esp,0xc
c000abaf:	68 78 11 02 c0       	push   0xc0021178
c000abb4:	e8 8c 67 00 00       	call   c0011345 <KePanic(char const*)>
c000abb9:	83 c4 10             	add    esp,0x10
c000abbc:	90                   	nop
c000abbd:	83 c4 0c             	add    esp,0xc
c000abc0:	c3                   	ret    
c000abc1:	8d 76 00             	lea    esi,[esi+0x0]

c000abc4 <__ubsan_handle_pointer_overflow>:
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	83 ec 08             	sub    esp,0x8
c000abca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abce:	68 08 12 02 c0       	push   0xc0021208
c000abd3:	e8 a4 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	68 08 12 02 c0       	push   0xc0021208
c000abe3:	e8 5d 67 00 00       	call   c0011345 <KePanic(char const*)>
c000abe8:	83 c4 10             	add    esp,0x10
c000abeb:	90                   	nop
c000abec:	83 c4 0c             	add    esp,0xc
c000abef:	c3                   	ret    

c000abf0 <__ubsan_handle_out_of_bounds>:
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	83 ec 08             	sub    esp,0x8
c000abf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abfa:	68 78 10 02 c0       	push   0xc0021078
c000abff:	e8 78 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	83 ec 0c             	sub    esp,0xc
c000ac0a:	68 78 10 02 c0       	push   0xc0021078
c000ac0f:	e8 31 67 00 00       	call   c0011345 <KePanic(char const*)>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	90                   	nop
c000ac18:	83 c4 0c             	add    esp,0xc
c000ac1b:	c3                   	ret    

c000ac1c <__ubsan_handle_add_overflow>:
c000ac1c:	83 ec 0c             	sub    esp,0xc
c000ac1f:	83 ec 08             	sub    esp,0x8
c000ac22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac26:	68 95 10 02 c0       	push   0xc0021095
c000ac2b:	e8 4c fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	83 ec 0c             	sub    esp,0xc
c000ac36:	68 95 10 02 c0       	push   0xc0021095
c000ac3b:	e8 05 67 00 00       	call   c0011345 <KePanic(char const*)>
c000ac40:	83 c4 10             	add    esp,0x10
c000ac43:	90                   	nop
c000ac44:	83 c4 0c             	add    esp,0xc
c000ac47:	c3                   	ret    

c000ac48 <__ubsan_handle_load_invalid_value>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	83 ec 08             	sub    esp,0x8
c000ac4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac52:	68 28 12 02 c0       	push   0xc0021228
c000ac57:	e8 20 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	83 ec 0c             	sub    esp,0xc
c000ac62:	68 28 12 02 c0       	push   0xc0021228
c000ac67:	e8 d9 66 00 00       	call   c0011345 <KePanic(char const*)>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	90                   	nop
c000ac70:	83 c4 0c             	add    esp,0xc
c000ac73:	c3                   	ret    

c000ac74 <__ubsan_handle_divrem_overflow>:
c000ac74:	83 ec 0c             	sub    esp,0xc
c000ac77:	83 ec 08             	sub    esp,0x8
c000ac7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac7e:	68 4c 12 02 c0       	push   0xc002124c
c000ac83:	e8 f4 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	83 ec 0c             	sub    esp,0xc
c000ac8e:	68 4c 12 02 c0       	push   0xc002124c
c000ac93:	e8 ad 66 00 00       	call   c0011345 <KePanic(char const*)>
c000ac98:	83 c4 10             	add    esp,0x10
c000ac9b:	90                   	nop
c000ac9c:	83 c4 0c             	add    esp,0xc
c000ac9f:	c3                   	ret    

c000aca0 <__ubsan_handle_mul_overflow>:
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	83 ec 08             	sub    esp,0x8
c000aca6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acaa:	68 b1 10 02 c0       	push   0xc00210b1
c000acaf:	e8 c8 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	83 ec 0c             	sub    esp,0xc
c000acba:	68 b1 10 02 c0       	push   0xc00210b1
c000acbf:	e8 81 66 00 00       	call   c0011345 <KePanic(char const*)>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	90                   	nop
c000acc8:	83 c4 0c             	add    esp,0xc
c000accb:	c3                   	ret    

c000accc <__ubsan_handle_sub_overflow>:
c000accc:	83 ec 0c             	sub    esp,0xc
c000accf:	83 ec 08             	sub    esp,0x8
c000acd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acd6:	68 cd 10 02 c0       	push   0xc00210cd
c000acdb:	e8 9c fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	83 ec 0c             	sub    esp,0xc
c000ace6:	68 cd 10 02 c0       	push   0xc00210cd
c000aceb:	e8 55 66 00 00       	call   c0011345 <KePanic(char const*)>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	90                   	nop
c000acf4:	83 c4 0c             	add    esp,0xc
c000acf7:	c3                   	ret    

c000acf8 <__ubsan_handle_shift_out_of_bounds>:
c000acf8:	83 ec 0c             	sub    esp,0xc
c000acfb:	83 ec 08             	sub    esp,0x8
c000acfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad02:	68 6c 12 02 c0       	push   0xc002126c
c000ad07:	e8 70 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	83 ec 0c             	sub    esp,0xc
c000ad12:	68 6c 12 02 c0       	push   0xc002126c
c000ad17:	e8 29 66 00 00       	call   c0011345 <KePanic(char const*)>
c000ad1c:	83 c4 10             	add    esp,0x10
c000ad1f:	90                   	nop
c000ad20:	83 c4 0c             	add    esp,0xc
c000ad23:	c3                   	ret    

c000ad24 <__ubsan_handle_negate_overflow>:
c000ad24:	83 ec 0c             	sub    esp,0xc
c000ad27:	83 ec 08             	sub    esp,0x8
c000ad2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad2e:	68 90 12 02 c0       	push   0xc0021290
c000ad33:	e8 44 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	83 ec 0c             	sub    esp,0xc
c000ad3e:	68 90 12 02 c0       	push   0xc0021290
c000ad43:	e8 fd 65 00 00       	call   c0011345 <KePanic(char const*)>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	90                   	nop
c000ad4c:	83 c4 0c             	add    esp,0xc
c000ad4f:	c3                   	ret    

c000ad50 <KiCreateSymlinkID()>:
c000ad50:	55                   	push   ebp
c000ad51:	57                   	push   edi
c000ad52:	56                   	push   esi
c000ad53:	53                   	push   ebx
c000ad54:	31 db                	xor    ebx,ebx
c000ad56:	83 ec 1c             	sub    esp,0x1c
c000ad59:	e8 35 67 00 00       	call   c0011493 <KeRand()>
c000ad5e:	43                   	inc    ebx
c000ad5f:	8b 2d 00 64 02 c0    	mov    ebp,DWORD PTR ds:0xc0026400
c000ad65:	31 d2                	xor    edx,edx
c000ad67:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000ad6a:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000ad6e:	89 0d 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,ecx
c000ad74:	c1 e0 1b             	shl    eax,0x1b
c000ad77:	89 d7                	mov    edi,edx
c000ad79:	89 c6                	mov    esi,eax
c000ad7b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000ad7f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ad87:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000ad8d:	75 10                	jne    c000ad9f <KiCreateSymlinkID()+0x4f>
c000ad8f:	83 ec 0c             	sub    esp,0xc
c000ad92:	68 af 12 02 c0       	push   0xc00212af
c000ad97:	e8 a9 65 00 00       	call   c0011345 <KePanic(char const*)>
c000ad9c:	83 c4 10             	add    esp,0x10
c000ad9f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ada3:	75 04                	jne    c000ada9 <KiCreateSymlinkID()+0x59>
c000ada5:	39 f5                	cmp    ebp,esi
c000ada7:	74 b0                	je     c000ad59 <KiCreateSymlinkID()+0x9>
c000ada9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000adad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000adb1:	31 f0                	xor    eax,esi
c000adb3:	83 c4 1c             	add    esp,0x1c
c000adb6:	31 fa                	xor    edx,edi
c000adb8:	5b                   	pop    ebx
c000adb9:	5e                   	pop    esi
c000adba:	5f                   	pop    edi
c000adbb:	5d                   	pop    ebp
c000adbc:	c3                   	ret    

c000adbd <KiFlushSymlinkChanges()>:
c000adbd:	56                   	push   esi
c000adbe:	53                   	push   ebx
c000adbf:	83 ec 20             	sub    esp,0x20
c000adc2:	68 14 01 00 00       	push   0x114
c000adc7:	e8 ea cc ff ff       	call   c0007ab6 <malloc>
c000adcc:	83 c4 0c             	add    esp,0xc
c000adcf:	89 c3                	mov    ebx,eax
c000add1:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000add7:	68 b8 12 02 c0       	push   0xc00212b8
c000addc:	50                   	push   eax
c000addd:	e8 12 0a 00 00       	call   c000b7f4 <File::File(char const*, Process*)>
c000ade2:	83 c4 10             	add    esp,0x10
c000ade5:	85 db                	test   ebx,ebx
c000ade7:	75 10                	jne    c000adf9 <KiFlushSymlinkChanges()+0x3c>
c000ade9:	83 ec 0c             	sub    esp,0xc
c000adec:	68 d6 12 02 c0       	push   0xc00212d6
c000adf1:	e8 4f 65 00 00       	call   c0011345 <KePanic(char const*)>
c000adf6:	83 c4 10             	add    esp,0x10
c000adf9:	50                   	push   eax
c000adfa:	50                   	push   eax
c000adfb:	6a 06                	push   0x6
c000adfd:	53                   	push   ebx
c000adfe:	e8 b9 0a 00 00       	call   c000b8bc <File::open(FileOpenMode)>
c000ae03:	83 c4 10             	add    esp,0x10
c000ae06:	85 c0                	test   eax,eax
c000ae08:	74 10                	je     c000ae1a <KiFlushSymlinkChanges()+0x5d>
c000ae0a:	83 ec 0c             	sub    esp,0xc
c000ae0d:	68 f0 12 02 c0       	push   0xc00212f0
c000ae12:	e8 2e 65 00 00       	call   c0011345 <KePanic(char const*)>
c000ae17:	83 c4 10             	add    esp,0x10
c000ae1a:	31 f6                	xor    esi,esi
c000ae1c:	39 35 c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,esi
c000ae22:	7e 40                	jle    c000ae64 <KiFlushSymlinkChanges()+0xa7>
c000ae24:	83 ec 0c             	sub    esp,0xc
c000ae27:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae29:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ae2d:	50                   	push   eax
c000ae2e:	89 f0                	mov    eax,esi
c000ae30:	c1 e0 08             	shl    eax,0x8
c000ae33:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae38:	50                   	push   eax
c000ae39:	6a 00                	push   0x0
c000ae3b:	68 00 01 00 00       	push   0x100
c000ae40:	53                   	push   ebx
c000ae41:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae44:	83 c4 20             	add    esp,0x20
c000ae47:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae4f:	74 10                	je     c000ae61 <KiFlushSymlinkChanges()+0xa4>
c000ae51:	83 ec 0c             	sub    esp,0xc
c000ae54:	68 0a 13 02 c0       	push   0xc002130a
c000ae59:	e8 e7 64 00 00       	call   c0011345 <KePanic(char const*)>
c000ae5e:	83 c4 10             	add    esp,0x10
c000ae61:	46                   	inc    esi
c000ae62:	eb b8                	jmp    c000ae1c <KiFlushSymlinkChanges()+0x5f>
c000ae64:	83 ec 0c             	sub    esp,0xc
c000ae67:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000ae71:	53                   	push   ebx
c000ae72:	e8 a3 0a 00 00       	call   c000b91a <File::close()>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	85 db                	test   ebx,ebx
c000ae7c:	74 0c                	je     c000ae8a <KiFlushSymlinkChanges()+0xcd>
c000ae7e:	83 ec 0c             	sub    esp,0xc
c000ae81:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae83:	53                   	push   ebx
c000ae84:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae87:	83 c4 10             	add    esp,0x10
c000ae8a:	83 c4 14             	add    esp,0x14
c000ae8d:	5b                   	pop    ebx
c000ae8e:	5e                   	pop    esi
c000ae8f:	c3                   	ret    

c000ae90 <KiDeinitialiseSymlinks(void*)>:
c000ae90:	e9 28 ff ff ff       	jmp    c000adbd <KiFlushSymlinkChanges()>

c000ae95 <KeRegisterSymlink(char const*, unsigned long long)>:
c000ae95:	53                   	push   ebx
c000ae96:	83 ec 0c             	sub    esp,0xc
c000ae99:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ae9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000aea1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000aea5:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aeaa:	68 00 01 00 00       	push   0x100
c000aeaf:	89 14 c5 e0 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda020],edx
c000aeb6:	6a 00                	push   0x0
c000aeb8:	89 0c c5 e4 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda01c],ecx
c000aebf:	c1 e0 08             	shl    eax,0x8
c000aec2:	05 00 60 02 c0       	add    eax,0xc0026000
c000aec7:	50                   	push   eax
c000aec8:	e8 23 56 ff ff       	call   c00004f0 <memset>
c000aecd:	58                   	pop    eax
c000aece:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aed3:	5a                   	pop    edx
c000aed4:	c1 e0 08             	shl    eax,0x8
c000aed7:	53                   	push   ebx
c000aed8:	05 00 60 02 c0       	add    eax,0xc0026000
c000aedd:	50                   	push   eax
c000aede:	e8 5d 57 ff ff       	call   c0000640 <strcpy>
c000aee3:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aee8:	83 c4 10             	add    esp,0x10
c000aeeb:	40                   	inc    eax
c000aeec:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c000aef1:	83 f8 03             	cmp    eax,0x3
c000aef4:	7e 09                	jle    c000aeff <KeRegisterSymlink(char const*, unsigned long long)+0x6a>
c000aef6:	83 c4 08             	add    esp,0x8
c000aef9:	5b                   	pop    ebx
c000aefa:	e9 be fe ff ff       	jmp    c000adbd <KiFlushSymlinkChanges()>
c000aeff:	83 c4 08             	add    esp,0x8
c000af02:	5b                   	pop    ebx
c000af03:	c3                   	ret    

c000af04 <KiIsSymlinkRegistered(char const*)>:
c000af04:	53                   	push   ebx
c000af05:	31 db                	xor    ebx,ebx
c000af07:	83 ec 08             	sub    esp,0x8
c000af0a:	39 1d c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,ebx
c000af10:	7e 30                	jle    c000af42 <KiIsSymlinkRegistered(char const*)+0x3e>
c000af12:	50                   	push   eax
c000af13:	50                   	push   eax
c000af14:	89 d8                	mov    eax,ebx
c000af16:	c1 e0 08             	shl    eax,0x8
c000af19:	05 00 60 02 c0       	add    eax,0xc0026000
c000af1e:	50                   	push   eax
c000af1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af23:	e8 28 58 ff ff       	call   c0000750 <strcmp>
c000af28:	83 c4 10             	add    esp,0x10
c000af2b:	85 c0                	test   eax,eax
c000af2d:	75 10                	jne    c000af3f <KiIsSymlinkRegistered(char const*)+0x3b>
c000af2f:	8b 04 dd e0 5f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffda020]
c000af36:	8b 14 dd e4 5f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffda01c]
c000af3d:	eb 07                	jmp    c000af46 <KiIsSymlinkRegistered(char const*)+0x42>
c000af3f:	43                   	inc    ebx
c000af40:	eb c8                	jmp    c000af0a <KiIsSymlinkRegistered(char const*)+0x6>
c000af42:	31 c0                	xor    eax,eax
c000af44:	31 d2                	xor    edx,edx
c000af46:	83 c4 08             	add    esp,0x8
c000af49:	5b                   	pop    ebx
c000af4a:	c3                   	ret    

c000af4b <KeDereferenceSymlink(char const*, char*)>:
c000af4b:	55                   	push   ebp
c000af4c:	57                   	push   edi
c000af4d:	56                   	push   esi
c000af4e:	53                   	push   ebx
c000af4f:	83 ec 44             	sub    esp,0x44
c000af52:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000af56:	56                   	push   esi
c000af57:	68 24 13 02 c0       	push   0xc0021324
c000af5c:	e8 e4 f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000af61:	89 34 24             	mov    DWORD PTR [esp],esi
c000af64:	e8 9b ff ff ff       	call   c000af04 <KiIsSymlinkRegistered(char const*)>
c000af69:	83 c4 10             	add    esp,0x10
c000af6c:	89 c7                	mov    edi,eax
c000af6e:	89 d0                	mov    eax,edx
c000af70:	09 f8                	or     eax,edi
c000af72:	0f 84 de 01 00 00    	je     c000b156 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000af78:	89 d5                	mov    ebp,edx
c000af7a:	53                   	push   ebx
c000af7b:	53                   	push   ebx
c000af7c:	57                   	push   edi
c000af7d:	68 3e 13 02 c0       	push   0xc002133e
c000af82:	e8 be f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000af87:	58                   	pop    eax
c000af88:	5a                   	pop    edx
c000af89:	55                   	push   ebp
c000af8a:	68 4c 13 02 c0       	push   0xc002134c
c000af8f:	e8 b1 f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000af94:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000af9b:	e8 16 cb ff ff       	call   c0007ab6 <malloc>
c000afa0:	83 c4 0c             	add    esp,0xc
c000afa3:	89 c3                	mov    ebx,eax
c000afa5:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000afab:	56                   	push   esi
c000afac:	50                   	push   eax
c000afad:	e8 42 08 00 00       	call   c000b7f4 <File::File(char const*, Process*)>
c000afb2:	83 c4 10             	add    esp,0x10
c000afb5:	85 db                	test   ebx,ebx
c000afb7:	0f 84 68 01 00 00    	je     c000b125 <KeDereferenceSymlink(char const*, char*)+0x1da>
c000afbd:	83 ec 0c             	sub    esp,0xc
c000afc0:	68 40 1f 02 c0       	push   0xc0021f40
c000afc5:	e8 7b f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000afca:	5a                   	pop    edx
c000afcb:	59                   	pop    ecx
c000afcc:	6a 01                	push   0x1
c000afce:	53                   	push   ebx
c000afcf:	e8 e8 08 00 00       	call   c000b8bc <File::open(FileOpenMode)>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	85 c0                	test   eax,eax
c000afd9:	74 0b                	je     c000afe6 <KeDereferenceSymlink(char const*, char*)+0x9b>
c000afdb:	83 ec 0c             	sub    esp,0xc
c000afde:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afe0:	53                   	push   ebx
c000afe1:	e9 39 01 00 00       	jmp    c000b11f <KeDereferenceSymlink(char const*, char*)+0x1d4>
c000afe6:	83 ec 0c             	sub    esp,0xc
c000afe9:	68 46 09 02 c0       	push   0xc0020946
c000afee:	e8 52 f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aff3:	58                   	pop    eax
c000aff4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aff6:	8d 74 24 18          	lea    esi,[esp+0x18]
c000affa:	56                   	push   esi
c000affb:	8d 54 24 37          	lea    edx,[esp+0x37]
c000afff:	52                   	push   edx
c000b000:	6a 00                	push   0x0
c000b002:	6a 08                	push   0x8
c000b004:	53                   	push   ebx
c000b005:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b008:	83 c4 20             	add    esp,0x20
c000b00b:	85 c0                	test   eax,eax
c000b00d:	0f 85 fe 00 00 00    	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b013:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b018:	0f 85 f3 00 00 00    	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b01e:	83 ec 0c             	sub    esp,0xc
c000b021:	68 72 1f 02 c0       	push   0xc0021f72
c000b026:	e8 1a f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b02b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b02d:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b031:	89 34 24             	mov    DWORD PTR [esp],esi
c000b034:	52                   	push   edx
c000b035:	6a 00                	push   0x0
c000b037:	6a 08                	push   0x8
c000b039:	53                   	push   ebx
c000b03a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b03d:	83 c4 20             	add    esp,0x20
c000b040:	85 c0                	test   eax,eax
c000b042:	0f 85 c9 00 00 00    	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b048:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b04d:	0f 85 be 00 00 00    	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b053:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b057:	0f 85 f9 00 00 00    	jne    c000b156 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000b05d:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b061:	0f 85 ef 00 00 00    	jne    c000b156 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000b067:	83 ec 0c             	sub    esp,0xc
c000b06a:	68 5a 13 02 c0       	push   0xc002135a
c000b06f:	e8 d1 f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b074:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b07c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b084:	83 c4 0c             	add    esp,0xc
c000b087:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b08b:	50                   	push   eax
c000b08c:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b090:	50                   	push   eax
c000b091:	53                   	push   ebx
c000b092:	e8 27 0b 00 00       	call   c000bbbe <File::stat(unsigned long long*, bool*)>
c000b097:	83 c4 10             	add    esp,0x10
c000b09a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b09f:	75 70                	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b0a1:	31 ff                	xor    edi,edi
c000b0a3:	b8 0f 00 00 00       	mov    eax,0xf
c000b0a8:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b0ac:	89 f8                	mov    eax,edi
c000b0ae:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000b0b2:	73 5d                	jae    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b0b4:	83 ec 0c             	sub    esp,0xc
c000b0b7:	68 5a 13 02 c0       	push   0xc002135a
c000b0bc:	e8 84 f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b0c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b0c5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b0c9:	83 c0 f0             	add    eax,0xfffffff0
c000b0cc:	b9 ff 00 00 00       	mov    ecx,0xff
c000b0d1:	83 d2 ff             	adc    edx,0xffffffff
c000b0d4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0d8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0dc:	83 c4 10             	add    esp,0x10
c000b0df:	39 c1                	cmp    ecx,eax
c000b0e1:	19 d7                	sbb    edi,edx
c000b0e3:	72 40                	jb     c000b125 <KeDereferenceSymlink(char const*, char*)+0x1da>
c000b0e5:	83 ec 0c             	sub    esp,0xc
c000b0e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b0ea:	56                   	push   esi
c000b0eb:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b0ef:	52                   	push   edx
c000b0f0:	50                   	push   eax
c000b0f1:	53                   	push   ebx
c000b0f2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b0f5:	83 c4 20             	add    esp,0x20
c000b0f8:	85 c0                	test   eax,eax
c000b0fa:	75 15                	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b0fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b100:	89 c7                	mov    edi,eax
c000b102:	c1 ff 1f             	sar    edi,0x1f
c000b105:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b109:	75 06                	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b10b:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b10f:	74 19                	je     c000b12a <KeDereferenceSymlink(char const*, char*)+0x1df>
c000b111:	83 ec 0c             	sub    esp,0xc
c000b114:	53                   	push   ebx
c000b115:	e8 00 08 00 00       	call   c000b91a <File::close()>
c000b11a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b11c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b11f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b122:	83 c4 10             	add    esp,0x10
c000b125:	83 c8 ff             	or     eax,0xffffffff
c000b128:	eb 2e                	jmp    c000b158 <KeDereferenceSymlink(char const*, char*)+0x20d>
c000b12a:	83 ec 0c             	sub    esp,0xc
c000b12d:	68 52 2a 02 c0       	push   0xc0022a52
c000b132:	e8 0e f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b137:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b13a:	e8 db 07 00 00       	call   c000b91a <File::close()>
c000b13f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b141:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b144:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b147:	c7 04 24 5d 13 02 c0 	mov    DWORD PTR [esp],0xc002135d
c000b14e:	e8 f2 f7 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b153:	83 c4 10             	add    esp,0x10
c000b156:	31 c0                	xor    eax,eax
c000b158:	83 c4 3c             	add    esp,0x3c
c000b15b:	5b                   	pop    ebx
c000b15c:	5e                   	pop    esi
c000b15d:	5f                   	pop    edi
c000b15e:	5d                   	pop    ebp
c000b15f:	c3                   	ret    

c000b160 <KeCreateSymlink(char const*, char const*)>:
c000b160:	55                   	push   ebp
c000b161:	57                   	push   edi
c000b162:	56                   	push   esi
c000b163:	53                   	push   ebx
c000b164:	83 ec 38             	sub    esp,0x38
c000b167:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b16b:	68 14 01 00 00       	push   0x114
c000b170:	e8 41 c9 ff ff       	call   c0007ab6 <malloc>
c000b175:	83 c4 0c             	add    esp,0xc
c000b178:	89 c3                	mov    ebx,eax
c000b17a:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b180:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b184:	50                   	push   eax
c000b185:	e8 6a 06 00 00       	call   c000b7f4 <File::File(char const*, Process*)>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	b8 01 00 00 00       	mov    eax,0x1
c000b192:	85 db                	test   ebx,ebx
c000b194:	0f 84 fb 00 00 00    	je     c000b295 <KeCreateSymlink(char const*, char const*)+0x135>
c000b19a:	52                   	push   edx
c000b19b:	52                   	push   edx
c000b19c:	6a 12                	push   0x12
c000b19e:	53                   	push   ebx
c000b19f:	e8 18 07 00 00       	call   c000b8bc <File::open(FileOpenMode)>
c000b1a4:	83 c4 10             	add    esp,0x10
c000b1a7:	85 c0                	test   eax,eax
c000b1a9:	74 0b                	je     c000b1b6 <KeCreateSymlink(char const*, char const*)+0x56>
c000b1ab:	83 ec 0c             	sub    esp,0xc
c000b1ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1b0:	53                   	push   ebx
c000b1b1:	e9 d4 00 00 00       	jmp    c000b28a <KeCreateSymlink(char const*, char const*)+0x12a>
c000b1b6:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b1ba:	be 60 13 02 c0       	mov    esi,0xc0021360
c000b1bf:	b9 09 00 00 00       	mov    ecx,0x9
c000b1c4:	fc                   	cld    
c000b1c5:	83 ec 0c             	sub    esp,0xc
c000b1c8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b1ca:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b1ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1d0:	56                   	push   esi
c000b1d1:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b1d5:	52                   	push   edx
c000b1d6:	6a 00                	push   0x0
c000b1d8:	6a 08                	push   0x8
c000b1da:	53                   	push   ebx
c000b1db:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b1de:	83 c4 20             	add    esp,0x20
c000b1e1:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1e6:	0f 85 90 00 00 00    	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1ec:	85 c0                	test   eax,eax
c000b1ee:	0f 85 88 00 00 00    	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1f4:	e8 57 fb ff ff       	call   c000ad50 <KiCreateSymlinkID()>
c000b1f9:	83 ec 0c             	sub    esp,0xc
c000b1fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b200:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b204:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b206:	56                   	push   esi
c000b207:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b20b:	52                   	push   edx
c000b20c:	6a 00                	push   0x0
c000b20e:	6a 08                	push   0x8
c000b210:	53                   	push   ebx
c000b211:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b214:	83 c4 20             	add    esp,0x20
c000b217:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b21c:	75 5e                	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b21e:	85 c0                	test   eax,eax
c000b220:	75 5a                	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b222:	83 ec 0c             	sub    esp,0xc
c000b225:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b227:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b22a:	55                   	push   ebp
c000b22b:	e8 40 53 ff ff       	call   c0000570 <strlen>
c000b230:	89 34 24             	mov    DWORD PTR [esp],esi
c000b233:	31 d2                	xor    edx,edx
c000b235:	55                   	push   ebp
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	53                   	push   ebx
c000b239:	ff d7                	call   edi
c000b23b:	83 c4 14             	add    esp,0x14
c000b23e:	89 c6                	mov    esi,eax
c000b240:	55                   	push   ebp
c000b241:	e8 2a 53 ff ff       	call   c0000570 <strlen>
c000b246:	83 c4 10             	add    esp,0x10
c000b249:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b24d:	75 2d                	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b24f:	85 f6                	test   esi,esi
c000b251:	75 29                	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b253:	50                   	push   eax
c000b254:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b258:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b25c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b260:	e8 30 fc ff ff       	call   c000ae95 <KeRegisterSymlink(char const*, unsigned long long)>
c000b265:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b268:	e8 ad 06 00 00       	call   c000b91a <File::close()>
c000b26d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b26f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b272:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b275:	83 c4 10             	add    esp,0x10
c000b278:	31 c0                	xor    eax,eax
c000b27a:	eb 19                	jmp    c000b295 <KeCreateSymlink(char const*, char const*)+0x135>
c000b27c:	83 ec 0c             	sub    esp,0xc
c000b27f:	53                   	push   ebx
c000b280:	e8 95 06 00 00       	call   c000b91a <File::close()>
c000b285:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b287:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b28a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b28d:	83 c4 10             	add    esp,0x10
c000b290:	b8 01 00 00 00       	mov    eax,0x1
c000b295:	83 c4 2c             	add    esp,0x2c
c000b298:	5b                   	pop    ebx
c000b299:	5e                   	pop    esi
c000b29a:	5f                   	pop    edi
c000b29b:	5d                   	pop    ebp
c000b29c:	c3                   	ret    

c000b29d <KeInitialiseSymlinks()>:
c000b29d:	53                   	push   ebx
c000b29e:	83 ec 10             	sub    esp,0x10
c000b2a1:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000b2ab:	6a 00                	push   0x0
c000b2ad:	68 90 ae 00 c0       	push   0xc000ae90
c000b2b2:	e8 a5 58 00 00       	call   c0010b5c <KeRegisterAtexit(void (*)(void*), void*)>
c000b2b7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b2be:	e8 f3 c7 ff ff       	call   c0007ab6 <malloc>
c000b2c3:	83 c4 0c             	add    esp,0xc
c000b2c6:	89 c3                	mov    ebx,eax
c000b2c8:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b2ce:	68 b8 12 02 c0       	push   0xc00212b8
c000b2d3:	50                   	push   eax
c000b2d4:	e8 1b 05 00 00       	call   c000b7f4 <File::File(char const*, Process*)>
c000b2d9:	83 c4 10             	add    esp,0x10
c000b2dc:	85 db                	test   ebx,ebx
c000b2de:	75 10                	jne    c000b2f0 <KeInitialiseSymlinks()+0x53>
c000b2e0:	83 ec 0c             	sub    esp,0xc
c000b2e3:	68 69 13 02 c0       	push   0xc0021369
c000b2e8:	e8 58 60 00 00       	call   c0011345 <KePanic(char const*)>
c000b2ed:	83 c4 10             	add    esp,0x10
c000b2f0:	83 ec 0c             	sub    esp,0xc
c000b2f3:	53                   	push   ebx
c000b2f4:	e8 87 08 00 00       	call   c000bb80 <File::exists()>
c000b2f9:	83 c4 10             	add    esp,0x10
c000b2fc:	84 c0                	test   al,al
c000b2fe:	75 2d                	jne    c000b32d <KeInitialiseSymlinks()+0x90>
c000b300:	52                   	push   edx
c000b301:	52                   	push   edx
c000b302:	6a 12                	push   0x12
c000b304:	53                   	push   ebx
c000b305:	e8 b2 05 00 00       	call   c000b8bc <File::open(FileOpenMode)>
c000b30a:	83 c4 10             	add    esp,0x10
c000b30d:	85 c0                	test   eax,eax
c000b30f:	74 10                	je     c000b321 <KeInitialiseSymlinks()+0x84>
c000b311:	83 ec 0c             	sub    esp,0xc
c000b314:	68 86 13 02 c0       	push   0xc0021386
c000b319:	e8 27 60 00 00       	call   c0011345 <KePanic(char const*)>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	83 ec 0c             	sub    esp,0xc
c000b324:	53                   	push   ebx
c000b325:	e8 f0 05 00 00       	call   c000b91a <File::close()>
c000b32a:	83 c4 10             	add    esp,0x10
c000b32d:	85 db                	test   ebx,ebx
c000b32f:	74 0c                	je     c000b33d <KeInitialiseSymlinks()+0xa0>
c000b331:	83 ec 0c             	sub    esp,0xc
c000b334:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b336:	53                   	push   ebx
c000b337:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b33a:	83 c4 10             	add    esp,0x10
c000b33d:	50                   	push   eax
c000b33e:	50                   	push   eax
c000b33f:	68 a3 13 02 c0       	push   0xc00213a3
c000b344:	68 b1 13 02 c0       	push   0xc00213b1
c000b349:	e8 12 fe ff ff       	call   c000b160 <KeCreateSymlink(char const*, char const*)>
c000b34e:	83 c4 18             	add    esp,0x18
c000b351:	5b                   	pop    ebx
c000b352:	c3                   	ret    
c000b353:	90                   	nop

c000b354 <File::read(unsigned long long, void*, int*)>:
c000b354:	53                   	push   ebx
c000b355:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b359:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b35d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b364:	83 f8 19             	cmp    eax,0x19
c000b367:	77 35                	ja     c000b39e <File::read(unsigned long long, void*, int*)+0x4a>
c000b369:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b370:	85 c0                	test   eax,eax
c000b372:	74 2a                	je     c000b39e <File::read(unsigned long long, void*, int*)+0x4a>
c000b374:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b37a:	85 c0                	test   eax,eax
c000b37c:	74 20                	je     c000b39e <File::read(unsigned long long, void*, int*)+0x4a>
c000b37e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b382:	74 21                	je     c000b3a5 <File::read(unsigned long long, void*, int*)+0x51>
c000b384:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b386:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b38a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b390:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b394:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b398:	5b                   	pop    ebx
c000b399:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b39c:	ff e0                	jmp    eax
c000b39e:	b8 0b 00 00 00       	mov    eax,0xb
c000b3a3:	eb 05                	jmp    c000b3aa <File::read(unsigned long long, void*, int*)+0x56>
c000b3a5:	b8 05 00 00 00       	mov    eax,0x5
c000b3aa:	5b                   	pop    ebx
c000b3ab:	c3                   	ret    

c000b3ac <File::write(unsigned long long, void*, int*)>:
c000b3ac:	53                   	push   ebx
c000b3ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b3b1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b3b5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b3bc:	83 f8 19             	cmp    eax,0x19
c000b3bf:	77 35                	ja     c000b3f6 <File::write(unsigned long long, void*, int*)+0x4a>
c000b3c1:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b3c8:	85 c0                	test   eax,eax
c000b3ca:	74 2a                	je     c000b3f6 <File::write(unsigned long long, void*, int*)+0x4a>
c000b3cc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b3d2:	85 c0                	test   eax,eax
c000b3d4:	74 20                	je     c000b3f6 <File::write(unsigned long long, void*, int*)+0x4a>
c000b3d6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3da:	74 21                	je     c000b3fd <File::write(unsigned long long, void*, int*)+0x51>
c000b3dc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b3de:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3e2:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b3e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3f0:	5b                   	pop    ebx
c000b3f1:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b3f4:	ff e0                	jmp    eax
c000b3f6:	b8 0b 00 00 00       	mov    eax,0xb
c000b3fb:	eb 05                	jmp    c000b402 <File::write(unsigned long long, void*, int*)+0x56>
c000b3fd:	b8 05 00 00 00       	mov    eax,0x5
c000b402:	5b                   	pop    ebx
c000b403:	c3                   	ret    

c000b404 <Directory::read(unsigned long long, void*, int*)>:
c000b404:	53                   	push   ebx
c000b405:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b409:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b40d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b414:	83 f8 19             	cmp    eax,0x19
c000b417:	77 35                	ja     c000b44e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b419:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b420:	85 c0                	test   eax,eax
c000b422:	74 2a                	je     c000b44e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b424:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b42a:	85 c0                	test   eax,eax
c000b42c:	74 20                	je     c000b44e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b42e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b432:	74 21                	je     c000b455 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b434:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b436:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b43a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b440:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b444:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b448:	5b                   	pop    ebx
c000b449:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b44c:	ff e0                	jmp    eax
c000b44e:	b8 0b 00 00 00       	mov    eax,0xb
c000b453:	eb 05                	jmp    c000b45a <Directory::read(unsigned long long, void*, int*)+0x56>
c000b455:	b8 05 00 00 00       	mov    eax,0x5
c000b45a:	5b                   	pop    ebx
c000b45b:	c3                   	ret    

c000b45c <Directory::write(unsigned long long, void*, int*)>:
c000b45c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b460:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b467:	b8 0b 00 00 00       	mov    eax,0xb
c000b46c:	83 fa 19             	cmp    edx,0x19
c000b46f:	77 18                	ja     c000b489 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b471:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b478:	85 d2                	test   edx,edx
c000b47a:	74 0d                	je     c000b489 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b47c:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b483:	19 c0                	sbb    eax,eax
c000b485:	83 e0 0a             	and    eax,0xa
c000b488:	40                   	inc    eax
c000b489:	c3                   	ret    

c000b48a <File::isAtty()>:
c000b48a:	31 c0                	xor    eax,eax
c000b48c:	c3                   	ret    
c000b48d:	90                   	nop

c000b48e <Directory::isAtty()>:
c000b48e:	31 c0                	xor    eax,eax
c000b490:	c3                   	ret    
c000b491:	90                   	nop

c000b492 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b492:	b8 0a 00 00 00       	mov    eax,0xa
c000b497:	c3                   	ret    

c000b498 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b498:	b8 0a 00 00 00       	mov    eax,0xa
c000b49d:	c3                   	ret    

c000b49e <Filesystem::allocateSwapfile(char const*, int)>:
c000b49e:	31 c0                	xor    eax,eax
c000b4a0:	31 d2                	xor    edx,edx
c000b4a2:	c3                   	ret    
c000b4a3:	90                   	nop

c000b4a4 <File::~File()>:
c000b4a4:	83 ec 0c             	sub    esp,0xc
c000b4a7:	ba 6c 14 02 c0       	mov    edx,0xc002146c
c000b4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4b0:	89 10                	mov    DWORD PTR [eax],edx
c000b4b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4b6:	83 ec 0c             	sub    esp,0xc
c000b4b9:	50                   	push   eax
c000b4ba:	e8 e5 de ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b4bf:	83 c4 10             	add    esp,0x10
c000b4c2:	90                   	nop
c000b4c3:	83 c4 0c             	add    esp,0xc
c000b4c6:	c3                   	ret    
c000b4c7:	90                   	nop

c000b4c8 <File::~File()>:
c000b4c8:	83 ec 0c             	sub    esp,0xc
c000b4cb:	83 ec 0c             	sub    esp,0xc
c000b4ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4d2:	e8 cd ff ff ff       	call   c000b4a4 <File::~File()>
c000b4d7:	83 c4 10             	add    esp,0x10
c000b4da:	83 ec 08             	sub    esp,0x8
c000b4dd:	68 14 01 00 00       	push   0x114
c000b4e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4e6:	e8 2d f3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b4eb:	83 c4 10             	add    esp,0x10
c000b4ee:	83 c4 0c             	add    esp,0xc
c000b4f1:	c3                   	ret    

c000b4f2 <Directory::~Directory()>:
c000b4f2:	83 ec 0c             	sub    esp,0xc
c000b4f5:	ba 88 14 02 c0       	mov    edx,0xc0021488
c000b4fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4fe:	89 10                	mov    DWORD PTR [eax],edx
c000b500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b504:	83 ec 0c             	sub    esp,0xc
c000b507:	50                   	push   eax
c000b508:	e8 97 de ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b50d:	83 c4 10             	add    esp,0x10
c000b510:	90                   	nop
c000b511:	83 c4 0c             	add    esp,0xc
c000b514:	c3                   	ret    
c000b515:	90                   	nop

c000b516 <Directory::~Directory()>:
c000b516:	83 ec 0c             	sub    esp,0xc
c000b519:	83 ec 0c             	sub    esp,0xc
c000b51c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b520:	e8 cd ff ff ff       	call   c000b4f2 <Directory::~Directory()>
c000b525:	83 c4 10             	add    esp,0x10
c000b528:	83 ec 08             	sub    esp,0x8
c000b52b:	68 14 01 00 00       	push   0x114
c000b530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b534:	e8 df f2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b539:	83 c4 10             	add    esp,0x10
c000b53c:	83 c4 0c             	add    esp,0xc
c000b53f:	c3                   	ret    

c000b540 <Filesystem::Filesystem()>:
c000b540:	ba 00 14 02 c0       	mov    edx,0xc0021400
c000b545:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b549:	89 10                	mov    DWORD PTR [eax],edx
c000b54b:	8b 15 04 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026404
c000b551:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b555:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b55c:	a3 04 64 02 c0       	mov    ds:0xc0026404,eax
c000b561:	90                   	nop
c000b562:	c3                   	ret    
c000b563:	90                   	nop

c000b564 <Filesystem::~Filesystem()>:
c000b564:	ba 00 14 02 c0       	mov    edx,0xc0021400
c000b569:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b56d:	89 10                	mov    DWORD PTR [eax],edx
c000b56f:	90                   	nop
c000b570:	c3                   	ret    
c000b571:	90                   	nop

c000b572 <Filesystem::~Filesystem()>:
c000b572:	83 ec 0c             	sub    esp,0xc
c000b575:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b579:	e8 e6 ff ff ff       	call   c000b564 <Filesystem::~Filesystem()>
c000b57e:	83 c4 04             	add    esp,0x4
c000b581:	83 ec 08             	sub    esp,0x8
c000b584:	6a 08                	push   0x8
c000b586:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b58a:	e8 89 f2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b58f:	83 c4 10             	add    esp,0x10
c000b592:	83 c4 0c             	add    esp,0xc
c000b595:	c3                   	ret    

c000b596 <Fs::getcwd(Process*, char*, int)>:
c000b596:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b59a:	31 c0                	xor    eax,eax
c000b59c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b59f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b5a3:	7d 15                	jge    c000b5ba <Fs::getcwd(Process*, char*, int)+0x24>
c000b5a5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b5a9:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b5b0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b5b3:	84 c9                	test   cl,cl
c000b5b5:	74 06                	je     c000b5bd <Fs::getcwd(Process*, char*, int)+0x27>
c000b5b7:	40                   	inc    eax
c000b5b8:	eb e2                	jmp    c000b59c <Fs::getcwd(Process*, char*, int)+0x6>
c000b5ba:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b5bd:	31 c0                	xor    eax,eax
c000b5bf:	c3                   	ret    

c000b5c0 <Fs::initVFS()>:
c000b5c0:	83 ec 18             	sub    esp,0x18
c000b5c3:	6a 08                	push   0x8
c000b5c5:	e8 ec c4 ff ff       	call   c0007ab6 <malloc>
c000b5ca:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5cd:	e8 9e e1 00 00       	call   c0019770 <FAT::FAT()>
c000b5d2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b5d9:	e8 d8 c4 ff ff       	call   c0007ab6 <malloc>
c000b5de:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5e1:	e8 b6 f0 00 00       	call   c001a69c <ISO9660::ISO9660()>
c000b5e6:	83 c4 1c             	add    esp,0x1c
c000b5e9:	c3                   	ret    

c000b5ea <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b5ea:	55                   	push   ebp
c000b5eb:	57                   	push   edi
c000b5ec:	56                   	push   esi
c000b5ed:	53                   	push   ebx
c000b5ee:	81 ec 10 04 00 00    	sub    esp,0x410
c000b5f4:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c000b5fb:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c000b602:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c000b60a:	68 00 04 00 00       	push   0x400
c000b60f:	6a 00                	push   0x0
c000b611:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000b615:	57                   	push   edi
c000b616:	e8 d5 4e ff ff       	call   c00004f0 <memset>
c000b61b:	83 c4 10             	add    esp,0x10
c000b61e:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c000b622:	75 0b                	jne    c000b62f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c000b624:	50                   	push   eax
c000b625:	50                   	push   eax
c000b626:	55                   	push   ebp
c000b627:	57                   	push   edi
c000b628:	e8 13 50 ff ff       	call   c0000640 <strcpy>
c000b62d:	eb 51                	jmp    c000b680 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c000b62f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000b633:	83 f8 5c             	cmp    eax,0x5c
c000b636:	74 05                	je     c000b63d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c000b638:	83 f8 2f             	cmp    eax,0x2f
c000b63b:	75 1e                	jne    c000b65b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c000b63d:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c000b644:	8a 00                	mov    al,BYTE PTR [eax]
c000b646:	3c 60                	cmp    al,0x60
c000b648:	7e 03                	jle    c000b64d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c000b64a:	83 e8 20             	sub    eax,0x20
c000b64d:	88 04 24             	mov    BYTE PTR [esp],al
c000b650:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b657:	50                   	push   eax
c000b658:	50                   	push   eax
c000b659:	eb 1e                	jmp    c000b679 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c000b65b:	50                   	push   eax
c000b65c:	50                   	push   eax
c000b65d:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c000b664:	57                   	push   edi
c000b665:	e8 d6 4f ff ff       	call   c0000640 <strcpy>
c000b66a:	58                   	pop    eax
c000b66b:	5a                   	pop    edx
c000b66c:	68 c3 23 02 c0       	push   0xc00223c3
c000b671:	57                   	push   edi
c000b672:	e8 c9 51 ff ff       	call   c0000840 <strcat>
c000b677:	59                   	pop    ecx
c000b678:	58                   	pop    eax
c000b679:	55                   	push   ebp
c000b67a:	57                   	push   edi
c000b67b:	e8 c0 51 ff ff       	call   c0000840 <strcat>
c000b680:	83 c4 10             	add    esp,0x10
c000b683:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b686:	3c 60                	cmp    al,0x60
c000b688:	7e 03                	jle    c000b68d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c000b68a:	83 e8 20             	sub    eax,0x20
c000b68d:	88 04 24             	mov    BYTE PTR [esp],al
c000b690:	88 06                	mov    BYTE PTR [esi],al
c000b692:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b699:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c000b69f:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c000b6a3:	bf 03 00 00 00       	mov    edi,0x3
c000b6a8:	b8 03 00 00 00       	mov    eax,0x3
c000b6ad:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b6b1:	89 e9                	mov    ecx,ebp
c000b6b3:	85 ed                	test   ebp,ebp
c000b6b5:	0f 84 97 00 00 00    	je     c000b752 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c000b6bb:	8d 57 01             	lea    edx,[edi+0x1]
c000b6be:	83 fd 5c             	cmp    ebp,0x5c
c000b6c1:	74 05                	je     c000b6c8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c000b6c3:	83 fd 2f             	cmp    ebp,0x2f
c000b6c6:	75 12                	jne    c000b6da <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b6c8:	89 c5                	mov    ebp,eax
c000b6ca:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b6cf:	74 09                	je     c000b6da <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b6d1:	40                   	inc    eax
c000b6d2:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c000b6d6:	89 d7                	mov    edi,edx
c000b6d8:	eb d3                	jmp    c000b6ad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b6da:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b6df:	0f be e9             	movsx  ebp,cl
c000b6e2:	75 5e                	jne    c000b742 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b6e4:	83 fd 2e             	cmp    ebp,0x2e
c000b6e7:	75 59                	jne    c000b742 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b6e9:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c000b6ed:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b6f2:	74 18                	je     c000b70c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c000b6f4:	83 fd 2e             	cmp    ebp,0x2e
c000b6f7:	74 53                	je     c000b74c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b6f9:	89 fa                	mov    edx,edi
c000b6fb:	42                   	inc    edx
c000b6fc:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b700:	83 f9 2f             	cmp    ecx,0x2f
c000b703:	74 f6                	je     c000b6fb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b705:	83 f9 5c             	cmp    ecx,0x5c
c000b708:	74 f1                	je     c000b6fb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b70a:	eb ca                	jmp    c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b70c:	83 fd 2e             	cmp    ebp,0x2e
c000b70f:	74 3b                	je     c000b74c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b711:	83 f8 03             	cmp    eax,0x3
c000b714:	74 c0                	je     c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b716:	42                   	inc    edx
c000b717:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b71b:	83 f9 5c             	cmp    ecx,0x5c
c000b71e:	74 f6                	je     c000b716 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b720:	83 f9 2f             	cmp    ecx,0x2f
c000b723:	74 f1                	je     c000b716 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b725:	48                   	dec    eax
c000b726:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b72a:	75 06                	jne    c000b732 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b72c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b730:	eb f3                	jmp    c000b725 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c000b732:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b736:	74 07                	je     c000b73f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c000b738:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b73c:	48                   	dec    eax
c000b73d:	eb f3                	jmp    c000b732 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b73f:	40                   	inc    eax
c000b740:	eb 94                	jmp    c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b742:	83 fd 5c             	cmp    ebp,0x5c
c000b745:	74 8f                	je     c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b747:	83 fd 2f             	cmp    ebp,0x2f
c000b74a:	74 8a                	je     c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b74c:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c000b74f:	40                   	inc    eax
c000b750:	eb 84                	jmp    c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b752:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b756:	83 ec 0c             	sub    esp,0xc
c000b759:	56                   	push   esi
c000b75a:	e8 11 4e ff ff       	call   c0000570 <strlen>
c000b75f:	83 c4 10             	add    esp,0x10
c000b762:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c000b767:	74 17                	je     c000b780 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000b769:	83 ec 0c             	sub    esp,0xc
c000b76c:	56                   	push   esi
c000b76d:	e8 fe 4d ff ff       	call   c0000570 <strlen>
c000b772:	83 c4 10             	add    esp,0x10
c000b775:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b77a:	74 04                	je     c000b780 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000b77c:	31 ff                	xor    edi,edi
c000b77e:	eb 4c                	jmp    c000b7cc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1e2>
c000b780:	83 ec 0c             	sub    esp,0xc
c000b783:	56                   	push   esi
c000b784:	e8 e7 4d ff ff       	call   c0000570 <strlen>
c000b789:	83 c4 10             	add    esp,0x10
c000b78c:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c000b791:	74 e9                	je     c000b77c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c000b793:	83 ec 0c             	sub    esp,0xc
c000b796:	56                   	push   esi
c000b797:	e8 d4 4d ff ff       	call   c0000570 <strlen>
c000b79c:	83 c4 10             	add    esp,0x10
c000b79f:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000b7a4:	eb b0                	jmp    c000b756 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000b7a6:	50                   	push   eax
c000b7a7:	50                   	push   eax
c000b7a8:	56                   	push   esi
c000b7a9:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c000b7ad:	55                   	push   ebp
c000b7ae:	e8 8d 4e ff ff       	call   c0000640 <strcpy>
c000b7b3:	5a                   	pop    edx
c000b7b4:	59                   	pop    ecx
c000b7b5:	56                   	push   esi
c000b7b6:	55                   	push   ebp
c000b7b7:	e8 8f f7 ff ff       	call   c000af4b <KeDereferenceSymlink(char const*, char*)>
c000b7bc:	83 c4 10             	add    esp,0x10
c000b7bf:	48                   	dec    eax
c000b7c0:	75 27                	jne    c000b7e9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1ff>
c000b7c2:	8d 47 01             	lea    eax,[edi+0x1]
c000b7c5:	83 ff 14             	cmp    edi,0x14
c000b7c8:	74 08                	je     c000b7d2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1e8>
c000b7ca:	89 c7                	mov    edi,eax
c000b7cc:	85 db                	test   ebx,ebx
c000b7ce:	75 d6                	jne    c000b7a6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c000b7d0:	eb 17                	jmp    c000b7e9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1ff>
c000b7d2:	83 ec 0c             	sub    esp,0xc
c000b7d5:	bf 15 00 00 00       	mov    edi,0x15
c000b7da:	68 cf 13 02 c0       	push   0xc00213cf
c000b7df:	e8 61 5b 00 00       	call   c0011345 <KePanic(char const*)>
c000b7e4:	83 c4 10             	add    esp,0x10
c000b7e7:	eb e3                	jmp    c000b7cc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1e2>
c000b7e9:	81 c4 0c 04 00 00    	add    esp,0x40c
c000b7ef:	5b                   	pop    ebx
c000b7f0:	5e                   	pop    esi
c000b7f1:	5f                   	pop    edi
c000b7f2:	5d                   	pop    ebp
c000b7f3:	c3                   	ret    

c000b7f4 <File::File(char const*, Process*)>:
c000b7f4:	83 ec 0c             	sub    esp,0xc
c000b7f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7fb:	83 ec 08             	sub    esp,0x8
c000b7fe:	6a 00                	push   0x0
c000b800:	50                   	push   eax
c000b801:	e8 b8 d9 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000b806:	83 c4 10             	add    esp,0x10
c000b809:	ba 6c 14 02 c0       	mov    edx,0xc002146c
c000b80e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b812:	89 10                	mov    DWORD PTR [eax],edx
c000b814:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000b819:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000b81d:	0f 95 c0             	setne  al
c000b820:	0f b6 c0             	movzx  eax,al
c000b823:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b827:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000b82d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b831:	83 c2 0d             	add    edx,0xd
c000b834:	50                   	push   eax
c000b835:	51                   	push   ecx
c000b836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b83a:	52                   	push   edx
c000b83b:	e8 aa fd ff ff       	call   c000b5ea <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000b840:	83 c4 10             	add    esp,0x10
c000b843:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b847:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b84a:	83 e8 41             	sub    eax,0x41
c000b84d:	88 c2                	mov    dl,al
c000b84f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b853:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b85d:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b865:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b86b:	0f b6 c0             	movzx  eax,al
c000b86e:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b875:	85 c0                	test   eax,eax
c000b877:	74 3e                	je     c000b8b7 <File::File(char const*, Process*)+0xc3>
c000b879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b87d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b883:	0f b6 c0             	movzx  eax,al
c000b886:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b88d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b893:	85 c0                	test   eax,eax
c000b895:	75 20                	jne    c000b8b7 <File::File(char const*, Process*)+0xc3>
c000b897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b89b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b8a1:	0f b6 c0             	movzx  eax,al
c000b8a4:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b8ab:	83 ec 0c             	sub    esp,0xc
c000b8ae:	50                   	push   eax
c000b8af:	e8 82 21 00 00       	call   c000da36 <LogicalDisk::mount()>
c000b8b4:	83 c4 10             	add    esp,0x10
c000b8b7:	90                   	nop
c000b8b8:	83 c4 0c             	add    esp,0xc
c000b8bb:	c3                   	ret    

c000b8bc <File::open(FileOpenMode)>:
c000b8bc:	53                   	push   ebx
c000b8bd:	b8 0b 00 00 00       	mov    eax,0xb
c000b8c2:	83 ec 08             	sub    esp,0x8
c000b8c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b8c9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b8d0:	83 fa 19             	cmp    edx,0x19
c000b8d3:	77 40                	ja     c000b915 <File::open(FileOpenMode)+0x59>
c000b8d5:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b8dc:	85 d2                	test   edx,edx
c000b8de:	74 35                	je     c000b915 <File::open(FileOpenMode)+0x59>
c000b8e0:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b8e6:	85 d2                	test   edx,edx
c000b8e8:	74 2b                	je     c000b915 <File::open(FileOpenMode)+0x59>
c000b8ea:	b8 06 00 00 00       	mov    eax,0x6
c000b8ef:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b8f3:	75 20                	jne    c000b915 <File::open(FileOpenMode)+0x59>
c000b8f5:	8b 02                	mov    eax,DWORD PTR [edx]
c000b8f7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b8fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b901:	51                   	push   ecx
c000b902:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b905:	51                   	push   ecx
c000b906:	52                   	push   edx
c000b907:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b90a:	83 c4 10             	add    esp,0x10
c000b90d:	85 c0                	test   eax,eax
c000b90f:	75 04                	jne    c000b915 <File::open(FileOpenMode)+0x59>
c000b911:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b915:	83 c4 08             	add    esp,0x8
c000b918:	5b                   	pop    ebx
c000b919:	c3                   	ret    

c000b91a <File::close()>:
c000b91a:	53                   	push   ebx
c000b91b:	b8 0b 00 00 00       	mov    eax,0xb
c000b920:	83 ec 08             	sub    esp,0x8
c000b923:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b927:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b92e:	83 f9 19             	cmp    ecx,0x19
c000b931:	77 41                	ja     c000b974 <File::close()+0x5a>
c000b933:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000b93a:	85 db                	test   ebx,ebx
c000b93c:	74 36                	je     c000b974 <File::close()+0x5a>
c000b93e:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b945:	74 2d                	je     c000b974 <File::close()+0x5a>
c000b947:	b8 05 00 00 00       	mov    eax,0x5
c000b94c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b950:	74 22                	je     c000b974 <File::close()+0x5a>
c000b952:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b956:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000b95d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b963:	53                   	push   ebx
c000b964:	53                   	push   ebx
c000b965:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b967:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b96d:	50                   	push   eax
c000b96e:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b971:	83 c4 10             	add    esp,0x10
c000b974:	83 c4 08             	add    esp,0x8
c000b977:	5b                   	pop    ebx
c000b978:	c3                   	ret    
c000b979:	90                   	nop

c000b97a <File::seek(unsigned long long)>:
c000b97a:	56                   	push   esi
c000b97b:	53                   	push   ebx
c000b97c:	b8 0b 00 00 00       	mov    eax,0xb
c000b981:	51                   	push   ecx
c000b982:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b986:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b98a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b991:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b995:	83 fa 19             	cmp    edx,0x19
c000b998:	77 31                	ja     c000b9cb <File::seek(unsigned long long)+0x51>
c000b99a:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b9a1:	85 d2                	test   edx,edx
c000b9a3:	74 26                	je     c000b9cb <File::seek(unsigned long long)+0x51>
c000b9a5:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b9ab:	85 d2                	test   edx,edx
c000b9ad:	74 1c                	je     c000b9cb <File::seek(unsigned long long)+0x51>
c000b9af:	b8 05 00 00 00       	mov    eax,0x5
c000b9b4:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b9b8:	74 11                	je     c000b9cb <File::seek(unsigned long long)+0x51>
c000b9ba:	8b 02                	mov    eax,DWORD PTR [edx]
c000b9bc:	53                   	push   ebx
c000b9bd:	51                   	push   ecx
c000b9be:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b9c4:	52                   	push   edx
c000b9c5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b9c8:	83 c4 10             	add    esp,0x10
c000b9cb:	5a                   	pop    edx
c000b9cc:	5b                   	pop    ebx
c000b9cd:	5e                   	pop    esi
c000b9ce:	c3                   	ret    
c000b9cf:	90                   	nop

c000b9d0 <File::truncate(unsigned long long)>:
c000b9d0:	56                   	push   esi
c000b9d1:	53                   	push   ebx
c000b9d2:	b8 0b 00 00 00       	mov    eax,0xb
c000b9d7:	51                   	push   ecx
c000b9d8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b9dc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b9e0:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b9e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b9eb:	83 fa 19             	cmp    edx,0x19
c000b9ee:	77 31                	ja     c000ba21 <File::truncate(unsigned long long)+0x51>
c000b9f0:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b9f7:	85 d2                	test   edx,edx
c000b9f9:	74 26                	je     c000ba21 <File::truncate(unsigned long long)+0x51>
c000b9fb:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ba01:	85 d2                	test   edx,edx
c000ba03:	74 1c                	je     c000ba21 <File::truncate(unsigned long long)+0x51>
c000ba05:	b8 05 00 00 00       	mov    eax,0x5
c000ba0a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ba0e:	74 11                	je     c000ba21 <File::truncate(unsigned long long)+0x51>
c000ba10:	8b 02                	mov    eax,DWORD PTR [edx]
c000ba12:	53                   	push   ebx
c000ba13:	51                   	push   ecx
c000ba14:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ba1a:	52                   	push   edx
c000ba1b:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ba1e:	83 c4 10             	add    esp,0x10
c000ba21:	5a                   	pop    edx
c000ba22:	5b                   	pop    ebx
c000ba23:	5e                   	pop    esi
c000ba24:	c3                   	ret    
c000ba25:	90                   	nop

c000ba26 <File::tell(unsigned long long*)>:
c000ba26:	83 ec 0c             	sub    esp,0xc
c000ba29:	b8 0b 00 00 00       	mov    eax,0xb
c000ba2e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ba32:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ba39:	83 fa 19             	cmp    edx,0x19
c000ba3c:	77 34                	ja     c000ba72 <File::tell(unsigned long long*)+0x4c>
c000ba3e:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000ba45:	85 d2                	test   edx,edx
c000ba47:	74 29                	je     c000ba72 <File::tell(unsigned long long*)+0x4c>
c000ba49:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ba4f:	85 d2                	test   edx,edx
c000ba51:	74 1f                	je     c000ba72 <File::tell(unsigned long long*)+0x4c>
c000ba53:	b8 05 00 00 00       	mov    eax,0x5
c000ba58:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ba5c:	74 14                	je     c000ba72 <File::tell(unsigned long long*)+0x4c>
c000ba5e:	50                   	push   eax
c000ba5f:	8b 02                	mov    eax,DWORD PTR [edx]
c000ba61:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba65:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ba6b:	52                   	push   edx
c000ba6c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ba6f:	83 c4 10             	add    esp,0x10
c000ba72:	83 c4 0c             	add    esp,0xc
c000ba75:	c3                   	ret    

c000ba76 <File::rewind()>:
c000ba76:	83 ec 10             	sub    esp,0x10
c000ba79:	6a 00                	push   0x0
c000ba7b:	6a 00                	push   0x0
c000ba7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba81:	e8 f4 fe ff ff       	call   c000b97a <File::seek(unsigned long long)>
c000ba86:	83 c4 1c             	add    esp,0x1c
c000ba89:	c3                   	ret    

c000ba8a <File::unlink()>:
c000ba8a:	83 ec 0c             	sub    esp,0xc
c000ba8d:	b8 0b 00 00 00       	mov    eax,0xb
c000ba92:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba96:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba9d:	83 f9 19             	cmp    ecx,0x19
c000baa0:	77 2f                	ja     c000bad1 <File::unlink()+0x47>
c000baa2:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000baa9:	85 c9                	test   ecx,ecx
c000baab:	74 24                	je     c000bad1 <File::unlink()+0x47>
c000baad:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bab3:	85 c9                	test   ecx,ecx
c000bab5:	74 1a                	je     c000bad1 <File::unlink()+0x47>
c000bab7:	b8 06 00 00 00       	mov    eax,0x6
c000babc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bac0:	75 0f                	jne    c000bad1 <File::unlink()+0x47>
c000bac2:	83 c2 0d             	add    edx,0xd
c000bac5:	50                   	push   eax
c000bac6:	50                   	push   eax
c000bac7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bac9:	52                   	push   edx
c000baca:	51                   	push   ecx
c000bacb:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bace:	83 c4 10             	add    esp,0x10
c000bad1:	83 c4 0c             	add    esp,0xc
c000bad4:	c3                   	ret    
c000bad5:	90                   	nop

c000bad6 <File::rename(char const*)>:
c000bad6:	83 ec 0c             	sub    esp,0xc
c000bad9:	b8 0b 00 00 00       	mov    eax,0xb
c000bade:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bae2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bae9:	83 f9 19             	cmp    ecx,0x19
c000baec:	77 32                	ja     c000bb20 <File::rename(char const*)+0x4a>
c000baee:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000baf5:	85 c9                	test   ecx,ecx
c000baf7:	74 27                	je     c000bb20 <File::rename(char const*)+0x4a>
c000baf9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000baff:	85 c9                	test   ecx,ecx
c000bb01:	74 1d                	je     c000bb20 <File::rename(char const*)+0x4a>
c000bb03:	b8 06 00 00 00       	mov    eax,0x6
c000bb08:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb0c:	75 12                	jne    c000bb20 <File::rename(char const*)+0x4a>
c000bb0e:	83 c2 0d             	add    edx,0xd
c000bb11:	50                   	push   eax
c000bb12:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bb14:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb18:	52                   	push   edx
c000bb19:	51                   	push   ecx
c000bb1a:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bb1d:	83 c4 10             	add    esp,0x10
c000bb20:	83 c4 0c             	add    esp,0xc
c000bb23:	c3                   	ret    

c000bb24 <File::chfatattr(unsigned char, unsigned char)>:
c000bb24:	57                   	push   edi
c000bb25:	b8 0b 00 00 00       	mov    eax,0xb
c000bb2a:	56                   	push   esi
c000bb2b:	53                   	push   ebx
c000bb2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb30:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bb34:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb3b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bb3f:	83 f9 19             	cmp    ecx,0x19
c000bb42:	77 37                	ja     c000bb7b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb44:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb4b:	85 c9                	test   ecx,ecx
c000bb4d:	74 2c                	je     c000bb7b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb4f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb55:	85 c9                	test   ecx,ecx
c000bb57:	74 22                	je     c000bb7b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb59:	b8 06 00 00 00       	mov    eax,0x6
c000bb5e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb62:	75 17                	jne    c000bb7b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb64:	8b 39                	mov    edi,DWORD PTR [ecx]
c000bb66:	89 f0                	mov    eax,esi
c000bb68:	83 c2 0d             	add    edx,0xd
c000bb6b:	0f b6 f0             	movzx  esi,al
c000bb6e:	0f b6 db             	movzx  ebx,bl
c000bb71:	56                   	push   esi
c000bb72:	53                   	push   ebx
c000bb73:	52                   	push   edx
c000bb74:	51                   	push   ecx
c000bb75:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000bb78:	83 c4 10             	add    esp,0x10
c000bb7b:	5b                   	pop    ebx
c000bb7c:	5e                   	pop    esi
c000bb7d:	5f                   	pop    edi
c000bb7e:	c3                   	ret    
c000bb7f:	90                   	nop

c000bb80 <File::exists()>:
c000bb80:	83 ec 0c             	sub    esp,0xc
c000bb83:	31 c0                	xor    eax,eax
c000bb85:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb89:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb90:	83 f9 19             	cmp    ecx,0x19
c000bb93:	77 24                	ja     c000bbb9 <File::exists()+0x39>
c000bb95:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb9c:	85 c9                	test   ecx,ecx
c000bb9e:	74 19                	je     c000bbb9 <File::exists()+0x39>
c000bba0:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bba6:	85 c9                	test   ecx,ecx
c000bba8:	74 0f                	je     c000bbb9 <File::exists()+0x39>
c000bbaa:	83 c2 0d             	add    edx,0xd
c000bbad:	50                   	push   eax
c000bbae:	50                   	push   eax
c000bbaf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bbb1:	52                   	push   edx
c000bbb2:	51                   	push   ecx
c000bbb3:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bbb6:	83 c4 10             	add    esp,0x10
c000bbb9:	83 c4 0c             	add    esp,0xc
c000bbbc:	c3                   	ret    
c000bbbd:	90                   	nop

c000bbbe <File::stat(unsigned long long*, bool*)>:
c000bbbe:	56                   	push   esi
c000bbbf:	53                   	push   ebx
c000bbc0:	50                   	push   eax
c000bbc1:	b8 0b 00 00 00       	mov    eax,0xb
c000bbc6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bbca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bbce:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bbd5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bbd9:	83 f9 19             	cmp    ecx,0x19
c000bbdc:	77 3d                	ja     c000bc1b <File::stat(unsigned long long*, bool*)+0x5d>
c000bbde:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bbe5:	85 c9                	test   ecx,ecx
c000bbe7:	74 32                	je     c000bc1b <File::stat(unsigned long long*, bool*)+0x5d>
c000bbe9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bbef:	85 c9                	test   ecx,ecx
c000bbf1:	74 28                	je     c000bc1b <File::stat(unsigned long long*, bool*)+0x5d>
c000bbf3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bbf5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bbf9:	74 13                	je     c000bc0e <File::stat(unsigned long long*, bool*)+0x50>
c000bbfb:	83 ec 04             	sub    esp,0x4
c000bbfe:	56                   	push   esi
c000bbff:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bc05:	51                   	push   ecx
c000bc06:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bc09:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bc0c:	eb 0a                	jmp    c000bc18 <File::stat(unsigned long long*, bool*)+0x5a>
c000bc0e:	53                   	push   ebx
c000bc0f:	83 c2 0d             	add    edx,0xd
c000bc12:	56                   	push   esi
c000bc13:	52                   	push   edx
c000bc14:	51                   	push   ecx
c000bc15:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bc18:	83 c4 10             	add    esp,0x10
c000bc1b:	5a                   	pop    edx
c000bc1c:	5b                   	pop    ebx
c000bc1d:	5e                   	pop    esi
c000bc1e:	c3                   	ret    

c000bc1f <Fs::setcwd(Process*, char*)>:
c000bc1f:	55                   	push   ebp
c000bc20:	57                   	push   edi
c000bc21:	56                   	push   esi
c000bc22:	53                   	push   ebx
c000bc23:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bc29:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bc30:	6a 00                	push   0x0
c000bc32:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bc38:	57                   	push   edi
c000bc39:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bc40:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bc44:	56                   	push   esi
c000bc45:	e8 a0 f9 ff ff       	call   c000b5ea <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bc4a:	89 34 24             	mov    DWORD PTR [esp],esi
c000bc4d:	e8 1e 49 ff ff       	call   c0000570 <strlen>
c000bc52:	83 c4 10             	add    esp,0x10
c000bc55:	83 f8 02             	cmp    eax,0x2
c000bc58:	77 15                	ja     c000bc6f <Fs::setcwd(Process*, char*)+0x50>
c000bc5a:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bc5f:	83 eb 41             	sub    ebx,0x41
c000bc62:	8b 04 9d 80 88 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7780]
c000bc69:	85 c0                	test   eax,eax
c000bc6b:	75 1c                	jne    c000bc89 <Fs::setcwd(Process*, char*)+0x6a>
c000bc6d:	eb 2f                	jmp    c000bc9e <Fs::setcwd(Process*, char*)+0x7f>
c000bc6f:	83 ec 0c             	sub    esp,0xc
c000bc72:	56                   	push   esi
c000bc73:	e8 f8 48 ff ff       	call   c0000570 <strlen>
c000bc78:	83 c4 10             	add    esp,0x10
c000bc7b:	83 f8 03             	cmp    eax,0x3
c000bc7e:	75 57                	jne    c000bcd7 <Fs::setcwd(Process*, char*)+0xb8>
c000bc80:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bc85:	75 50                	jne    c000bcd7 <Fs::setcwd(Process*, char*)+0xb8>
c000bc87:	eb d1                	jmp    c000bc5a <Fs::setcwd(Process*, char*)+0x3b>
c000bc89:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bc90:	75 0c                	jne    c000bc9e <Fs::setcwd(Process*, char*)+0x7f>
c000bc92:	83 ec 0c             	sub    esp,0xc
c000bc95:	50                   	push   eax
c000bc96:	e8 9b 1d 00 00       	call   c000da36 <LogicalDisk::mount()>
c000bc9b:	83 c4 10             	add    esp,0x10
c000bc9e:	b8 03 00 00 00       	mov    eax,0x3
c000bca3:	83 fb 19             	cmp    ebx,0x19
c000bca6:	0f 87 c6 00 00 00    	ja     c000bd72 <Fs::setcwd(Process*, char*)+0x153>
c000bcac:	8b 14 9d 80 88 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7780]
c000bcb3:	b8 05 00 00 00       	mov    eax,0x5
c000bcb8:	85 d2                	test   edx,edx
c000bcba:	0f 84 b2 00 00 00    	je     c000bd72 <Fs::setcwd(Process*, char*)+0x153>
c000bcc0:	b8 06 00 00 00       	mov    eax,0x6
c000bcc5:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bccc:	0f 85 92 00 00 00    	jne    c000bd64 <Fs::setcwd(Process*, char*)+0x145>
c000bcd2:	e9 9b 00 00 00       	jmp    c000bd72 <Fs::setcwd(Process*, char*)+0x153>
c000bcd7:	83 ec 0c             	sub    esp,0xc
c000bcda:	68 14 01 00 00       	push   0x114
c000bcdf:	e8 d2 bd ff ff       	call   c0007ab6 <malloc>
c000bce4:	83 c4 0c             	add    esp,0xc
c000bce7:	89 c3                	mov    ebx,eax
c000bce9:	55                   	push   ebp
c000bcea:	56                   	push   esi
c000bceb:	50                   	push   eax
c000bcec:	e8 03 fb ff ff       	call   c000b7f4 <File::File(char const*, Process*)>
c000bcf1:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bcf6:	83 c4 0c             	add    esp,0xc
c000bcf9:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bcfd:	50                   	push   eax
c000bcfe:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bd02:	50                   	push   eax
c000bd03:	53                   	push   ebx
c000bd04:	e8 b5 fe ff ff       	call   c000bbbe <File::stat(unsigned long long*, bool*)>
c000bd09:	83 c4 10             	add    esp,0x10
c000bd0c:	83 f8 02             	cmp    eax,0x2
c000bd0f:	74 27                	je     c000bd38 <Fs::setcwd(Process*, char*)+0x119>
c000bd11:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bd16:	75 1c                	jne    c000bd34 <Fs::setcwd(Process*, char*)+0x115>
c000bd18:	b8 02 00 00 00       	mov    eax,0x2
c000bd1d:	85 db                	test   ebx,ebx
c000bd1f:	74 51                	je     c000bd72 <Fs::setcwd(Process*, char*)+0x153>
c000bd21:	83 ec 0c             	sub    esp,0xc
c000bd24:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd26:	53                   	push   ebx
c000bd27:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd2a:	83 c4 10             	add    esp,0x10
c000bd2d:	b8 02 00 00 00       	mov    eax,0x2
c000bd32:	eb 3e                	jmp    c000bd72 <Fs::setcwd(Process*, char*)+0x153>
c000bd34:	85 c0                	test   eax,eax
c000bd36:	74 1c                	je     c000bd54 <Fs::setcwd(Process*, char*)+0x135>
c000bd38:	b8 01 00 00 00       	mov    eax,0x1
c000bd3d:	85 db                	test   ebx,ebx
c000bd3f:	74 31                	je     c000bd72 <Fs::setcwd(Process*, char*)+0x153>
c000bd41:	83 ec 0c             	sub    esp,0xc
c000bd44:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd46:	53                   	push   ebx
c000bd47:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd4a:	83 c4 10             	add    esp,0x10
c000bd4d:	b8 01 00 00 00       	mov    eax,0x1
c000bd52:	eb 1e                	jmp    c000bd72 <Fs::setcwd(Process*, char*)+0x153>
c000bd54:	85 db                	test   ebx,ebx
c000bd56:	74 0c                	je     c000bd64 <Fs::setcwd(Process*, char*)+0x145>
c000bd58:	83 ec 0c             	sub    esp,0xc
c000bd5b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd5d:	53                   	push   ebx
c000bd5e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd61:	83 c4 10             	add    esp,0x10
c000bd64:	50                   	push   eax
c000bd65:	50                   	push   eax
c000bd66:	56                   	push   esi
c000bd67:	57                   	push   edi
c000bd68:	e8 d3 48 ff ff       	call   c0000640 <strcpy>
c000bd6d:	83 c4 10             	add    esp,0x10
c000bd70:	31 c0                	xor    eax,eax
c000bd72:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bd78:	5b                   	pop    ebx
c000bd79:	5e                   	pop    esi
c000bd7a:	5f                   	pop    edi
c000bd7b:	5d                   	pop    ebp
c000bd7c:	c3                   	ret    
c000bd7d:	90                   	nop

c000bd7e <Directory::Directory(char const*, Process*)>:
c000bd7e:	83 ec 0c             	sub    esp,0xc
c000bd81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd85:	83 ec 08             	sub    esp,0x8
c000bd88:	6a 00                	push   0x0
c000bd8a:	50                   	push   eax
c000bd8b:	e8 2e d4 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000bd90:	83 c4 10             	add    esp,0x10
c000bd93:	ba 88 14 02 c0       	mov    edx,0xc0021488
c000bd98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd9c:	89 10                	mov    DWORD PTR [eax],edx
c000bd9e:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000bda3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000bda7:	0f 95 c0             	setne  al
c000bdaa:	0f b6 c0             	movzx  eax,al
c000bdad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bdb1:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000bdb7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdbb:	83 c2 0d             	add    edx,0xd
c000bdbe:	50                   	push   eax
c000bdbf:	51                   	push   ecx
c000bdc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdc4:	52                   	push   edx
c000bdc5:	e8 20 f8 ff ff       	call   c000b5ea <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bdca:	83 c4 10             	add    esp,0x10
c000bdcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdd1:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bdd4:	83 e8 41             	sub    eax,0x41
c000bdd7:	88 c2                	mov    dl,al
c000bdd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bddd:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bde3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bde7:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bdeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdef:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bdf5:	0f b6 c0             	movzx  eax,al
c000bdf8:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000bdff:	85 c0                	test   eax,eax
c000be01:	74 3e                	je     c000be41 <Directory::Directory(char const*, Process*)+0xc3>
c000be03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be07:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be0d:	0f b6 c0             	movzx  eax,al
c000be10:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be17:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000be1d:	85 c0                	test   eax,eax
c000be1f:	75 20                	jne    c000be41 <Directory::Directory(char const*, Process*)+0xc3>
c000be21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be25:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be2b:	0f b6 c0             	movzx  eax,al
c000be2e:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be35:	83 ec 0c             	sub    esp,0xc
c000be38:	50                   	push   eax
c000be39:	e8 f8 1b 00 00       	call   c000da36 <LogicalDisk::mount()>
c000be3e:	83 c4 10             	add    esp,0x10
c000be41:	90                   	nop
c000be42:	83 c4 0c             	add    esp,0xc
c000be45:	c3                   	ret    

c000be46 <Directory::open()>:
c000be46:	53                   	push   ebx
c000be47:	b8 0b 00 00 00       	mov    eax,0xb
c000be4c:	83 ec 08             	sub    esp,0x8
c000be4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be53:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000be5a:	83 fa 19             	cmp    edx,0x19
c000be5d:	77 3d                	ja     c000be9c <Directory::open()+0x56>
c000be5f:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000be66:	85 d2                	test   edx,edx
c000be68:	74 32                	je     c000be9c <Directory::open()+0x56>
c000be6a:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000be70:	85 d2                	test   edx,edx
c000be72:	74 28                	je     c000be9c <Directory::open()+0x56>
c000be74:	b8 06 00 00 00       	mov    eax,0x6
c000be79:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000be7d:	75 1d                	jne    c000be9c <Directory::open()+0x56>
c000be7f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000be85:	50                   	push   eax
c000be86:	8b 02                	mov    eax,DWORD PTR [edx]
c000be88:	51                   	push   ecx
c000be89:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000be8c:	51                   	push   ecx
c000be8d:	52                   	push   edx
c000be8e:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000be91:	83 c4 10             	add    esp,0x10
c000be94:	85 c0                	test   eax,eax
c000be96:	75 04                	jne    c000be9c <Directory::open()+0x56>
c000be98:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000be9c:	83 c4 08             	add    esp,0x8
c000be9f:	5b                   	pop    ebx
c000bea0:	c3                   	ret    
c000bea1:	90                   	nop

c000bea2 <Directory::close()>:
c000bea2:	53                   	push   ebx
c000bea3:	b8 0b 00 00 00       	mov    eax,0xb
c000bea8:	83 ec 08             	sub    esp,0x8
c000beab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000beaf:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000beb6:	83 f9 19             	cmp    ecx,0x19
c000beb9:	77 41                	ja     c000befc <Directory::close()+0x5a>
c000bebb:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000bec2:	85 db                	test   ebx,ebx
c000bec4:	74 36                	je     c000befc <Directory::close()+0x5a>
c000bec6:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000becd:	74 2d                	je     c000befc <Directory::close()+0x5a>
c000becf:	b8 05 00 00 00       	mov    eax,0x5
c000bed4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bed8:	74 22                	je     c000befc <Directory::close()+0x5a>
c000beda:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bede:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000bee5:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000beeb:	53                   	push   ebx
c000beec:	53                   	push   ebx
c000beed:	8b 08                	mov    ecx,DWORD PTR [eax]
c000beef:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bef5:	50                   	push   eax
c000bef6:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000bef9:	83 c4 10             	add    esp,0x10
c000befc:	83 c4 08             	add    esp,0x8
c000beff:	5b                   	pop    ebx
c000bf00:	c3                   	ret    
c000bf01:	90                   	nop

c000bf02 <Directory::unlink()>:
c000bf02:	83 ec 0c             	sub    esp,0xc
c000bf05:	b8 0b 00 00 00       	mov    eax,0xb
c000bf0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf0e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf15:	83 f9 19             	cmp    ecx,0x19
c000bf18:	77 2f                	ja     c000bf49 <Directory::unlink()+0x47>
c000bf1a:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf21:	85 c9                	test   ecx,ecx
c000bf23:	74 24                	je     c000bf49 <Directory::unlink()+0x47>
c000bf25:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf2b:	85 c9                	test   ecx,ecx
c000bf2d:	74 1a                	je     c000bf49 <Directory::unlink()+0x47>
c000bf2f:	b8 06 00 00 00       	mov    eax,0x6
c000bf34:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf38:	75 0f                	jne    c000bf49 <Directory::unlink()+0x47>
c000bf3a:	83 c2 0d             	add    edx,0xd
c000bf3d:	50                   	push   eax
c000bf3e:	50                   	push   eax
c000bf3f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf41:	52                   	push   edx
c000bf42:	51                   	push   ecx
c000bf43:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bf46:	83 c4 10             	add    esp,0x10
c000bf49:	83 c4 0c             	add    esp,0xc
c000bf4c:	c3                   	ret    
c000bf4d:	90                   	nop

c000bf4e <Directory::rename(char const*)>:
c000bf4e:	83 ec 0c             	sub    esp,0xc
c000bf51:	b8 0b 00 00 00       	mov    eax,0xb
c000bf56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf5a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf61:	83 f9 19             	cmp    ecx,0x19
c000bf64:	77 32                	ja     c000bf98 <Directory::rename(char const*)+0x4a>
c000bf66:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf6d:	85 c9                	test   ecx,ecx
c000bf6f:	74 27                	je     c000bf98 <Directory::rename(char const*)+0x4a>
c000bf71:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf77:	85 c9                	test   ecx,ecx
c000bf79:	74 1d                	je     c000bf98 <Directory::rename(char const*)+0x4a>
c000bf7b:	b8 06 00 00 00       	mov    eax,0x6
c000bf80:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf84:	75 12                	jne    c000bf98 <Directory::rename(char const*)+0x4a>
c000bf86:	83 c2 0d             	add    edx,0xd
c000bf89:	50                   	push   eax
c000bf8a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf8c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bf90:	52                   	push   edx
c000bf91:	51                   	push   ecx
c000bf92:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bf95:	83 c4 10             	add    esp,0x10
c000bf98:	83 c4 0c             	add    esp,0xc
c000bf9b:	c3                   	ret    

c000bf9c <Directory::exists()>:
c000bf9c:	83 ec 0c             	sub    esp,0xc
c000bf9f:	31 c0                	xor    eax,eax
c000bfa1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfa5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bfac:	83 f9 19             	cmp    ecx,0x19
c000bfaf:	77 24                	ja     c000bfd5 <Directory::exists()+0x39>
c000bfb1:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bfb8:	85 c9                	test   ecx,ecx
c000bfba:	74 19                	je     c000bfd5 <Directory::exists()+0x39>
c000bfbc:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bfc2:	85 c9                	test   ecx,ecx
c000bfc4:	74 0f                	je     c000bfd5 <Directory::exists()+0x39>
c000bfc6:	83 c2 0d             	add    edx,0xd
c000bfc9:	50                   	push   eax
c000bfca:	50                   	push   eax
c000bfcb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bfcd:	52                   	push   edx
c000bfce:	51                   	push   ecx
c000bfcf:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bfd2:	83 c4 10             	add    esp,0x10
c000bfd5:	83 c4 0c             	add    esp,0xc
c000bfd8:	c3                   	ret    
c000bfd9:	90                   	nop

c000bfda <Directory::read(dirent*)>:
c000bfda:	83 ec 1c             	sub    esp,0x1c
c000bfdd:	b8 0b 00 00 00       	mov    eax,0xb
c000bfe2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bfe6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bfed:	83 f9 19             	cmp    ecx,0x19
c000bff0:	77 30                	ja     c000c022 <Directory::read(dirent*)+0x48>
c000bff2:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bff9:	85 c9                	test   ecx,ecx
c000bffb:	74 25                	je     c000c022 <Directory::read(dirent*)+0x48>
c000bffd:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c004:	74 1c                	je     c000c022 <Directory::read(dirent*)+0x48>
c000c006:	83 ec 0c             	sub    esp,0xc
c000c009:	8b 02                	mov    eax,DWORD PTR [edx]
c000c00b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c00f:	51                   	push   ecx
c000c010:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c014:	6a 00                	push   0x0
c000c016:	68 10 01 00 00       	push   0x110
c000c01b:	52                   	push   edx
c000c01c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c01f:	83 c4 20             	add    esp,0x20
c000c022:	83 c4 1c             	add    esp,0x1c
c000c025:	c3                   	ret    

c000c026 <Directory::create()>:
c000c026:	83 ec 0c             	sub    esp,0xc
c000c029:	b8 0b 00 00 00       	mov    eax,0xb
c000c02e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c032:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c039:	83 f9 19             	cmp    ecx,0x19
c000c03c:	77 2f                	ja     c000c06d <Directory::create()+0x47>
c000c03e:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000c045:	85 c9                	test   ecx,ecx
c000c047:	74 24                	je     c000c06d <Directory::create()+0x47>
c000c049:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c04f:	85 c9                	test   ecx,ecx
c000c051:	74 1a                	je     c000c06d <Directory::create()+0x47>
c000c053:	b8 06 00 00 00       	mov    eax,0x6
c000c058:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c05c:	75 0f                	jne    c000c06d <Directory::create()+0x47>
c000c05e:	83 c2 0d             	add    edx,0xd
c000c061:	50                   	push   eax
c000c062:	50                   	push   eax
c000c063:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c065:	52                   	push   edx
c000c066:	51                   	push   ecx
c000c067:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c06a:	83 c4 10             	add    esp,0x10
c000c06d:	83 c4 0c             	add    esp,0xc
c000c070:	c3                   	ret    
c000c071:	90                   	nop

c000c072 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c072:	b8 0a 00 00 00       	mov    eax,0xa
c000c077:	c3                   	ret    

c000c078 <Bus::Bus(char const*)>:
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c07f:	83 ec 08             	sub    esp,0x8
c000c082:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c086:	50                   	push   eax
c000c087:	e8 22 08 00 00       	call   c000c8ae <Device::Device(char const*)>
c000c08c:	83 c4 10             	add    esp,0x10
c000c08f:	ba a4 14 02 c0       	mov    edx,0xc00214a4
c000c094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c098:	89 10                	mov    DWORD PTR [eax],edx
c000c09a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c09e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c0a8:	90                   	nop
c000c0a9:	83 c4 0c             	add    esp,0xc
c000c0ac:	c3                   	ret    
c000c0ad:	90                   	nop
c000c0ae:	66 90                	xchg   ax,ax

c000c0b0 <Bus::~Bus()>:
c000c0b0:	83 ec 0c             	sub    esp,0xc
c000c0b3:	ba a4 14 02 c0       	mov    edx,0xc00214a4
c000c0b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0bc:	89 10                	mov    DWORD PTR [eax],edx
c000c0be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0c2:	83 ec 0c             	sub    esp,0xc
c000c0c5:	50                   	push   eax
c000c0c6:	e8 4d 05 00 00       	call   c000c618 <Device::~Device()>
c000c0cb:	83 c4 10             	add    esp,0x10
c000c0ce:	90                   	nop
c000c0cf:	83 c4 0c             	add    esp,0xc
c000c0d2:	c3                   	ret    
c000c0d3:	90                   	nop

c000c0d4 <Bus::~Bus()>:
c000c0d4:	83 ec 0c             	sub    esp,0xc
c000c0d7:	83 ec 0c             	sub    esp,0xc
c000c0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0de:	e8 cd ff ff ff       	call   c000c0b0 <Bus::~Bus()>
c000c0e3:	83 c4 10             	add    esp,0x10
c000c0e6:	83 ec 08             	sub    esp,0x8
c000c0e9:	68 58 01 00 00       	push   0x158
c000c0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f2:	e8 21 e7 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c0f7:	83 c4 10             	add    esp,0x10
c000c0fa:	83 c4 0c             	add    esp,0xc
c000c0fd:	c3                   	ret    

c000c0fe <beepThread(void*)>:
c000c0fe:	83 ec 0c             	sub    esp,0xc
c000c101:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000c106:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c10a:	48                   	dec    eax
c000c10b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000c110:	75 01                	jne    c000c113 <beepThread(void*)+0x15>
c000c112:	fb                   	sti    
c000c113:	83 ec 0c             	sub    esp,0xc
c000c116:	6b c2 0a             	imul   eax,edx,0xa
c000c119:	50                   	push   eax
c000c11a:	e8 15 9e 00 00       	call   c0015f34 <milliTenthSleep(unsigned int)>
c000c11f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c126:	e8 64 bd 00 00       	call   c0017e8f <HalMakeBeep(int)>
c000c12b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c133:	83 c4 1c             	add    esp,0x1c
c000c136:	e9 dd 9c 00 00       	jmp    c0015e18 <blockTask(TaskState)>

c000c13b <Krnl::beep(int, int, bool)>:
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 10             	sub    esp,0x10
c000c140:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c144:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c14c:	e8 3e bd 00 00       	call   c0017e8f <HalMakeBeep(int)>
c000c151:	83 c4 10             	add    esp,0x10
c000c154:	89 f0                	mov    eax,esi
c000c156:	84 c0                	test   al,al
c000c158:	74 1e                	je     c000c178 <Krnl::beep(int, int, bool)+0x3d>
c000c15a:	83 ec 0c             	sub    esp,0xc
c000c15d:	6b db 0a             	imul   ebx,ebx,0xa
c000c160:	53                   	push   ebx
c000c161:	e8 ce 9d 00 00       	call   c0015f34 <milliTenthSleep(unsigned int)>
c000c166:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c16e:	83 c4 14             	add    esp,0x14
c000c171:	5b                   	pop    ebx
c000c172:	5e                   	pop    esi
c000c173:	e9 17 bd 00 00       	jmp    c0017e8f <HalMakeBeep(int)>
c000c178:	68 e6 00 00 00       	push   0xe6
c000c17d:	53                   	push   ebx
c000c17e:	68 fe c0 00 c0       	push   0xc000c0fe
c000c183:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c189:	e8 26 98 00 00       	call   c00159b4 <Process::createThread(void (*)(void*), void*, int)>
c000c18e:	83 c4 14             	add    esp,0x14
c000c191:	5b                   	pop    ebx
c000c192:	5e                   	pop    esi
c000c193:	c3                   	ret    

c000c194 <User::loadClockSettings(int)>:
c000c194:	53                   	push   ebx
c000c195:	83 ec 14             	sub    esp,0x14
c000c198:	68 14 01 00 00       	push   0x114
c000c19d:	e8 14 b9 ff ff       	call   c0007ab6 <malloc>
c000c1a2:	83 c4 0c             	add    esp,0xc
c000c1a5:	89 c3                	mov    ebx,eax
c000c1a7:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c1ad:	68 c8 14 02 c0       	push   0xc00214c8
c000c1b2:	50                   	push   eax
c000c1b3:	e8 3c f6 ff ff       	call   c000b7f4 <File::File(char const*, Process*)>
c000c1b8:	58                   	pop    eax
c000c1b9:	5a                   	pop    edx
c000c1ba:	6a 01                	push   0x1
c000c1bc:	53                   	push   ebx
c000c1bd:	e8 fa f6 ff ff       	call   c000b8bc <File::open(FileOpenMode)>
c000c1c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c1c5:	e8 50 f7 ff ff       	call   c000b91a <File::close()>
c000c1ca:	83 c4 10             	add    esp,0x10
c000c1cd:	85 db                	test   ebx,ebx
c000c1cf:	74 0f                	je     c000c1e0 <User::loadClockSettings(int)+0x4c>
c000c1d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c1d3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c1d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c1da:	83 c4 08             	add    esp,0x8
c000c1dd:	5b                   	pop    ebx
c000c1de:	ff e0                	jmp    eax
c000c1e0:	83 c4 08             	add    esp,0x8
c000c1e3:	5b                   	pop    ebx
c000c1e4:	c3                   	ret    
c000c1e5:	90                   	nop

c000c1e6 <Clock::Clock(char const*)>:
c000c1e6:	83 ec 0c             	sub    esp,0xc
c000c1e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1ed:	83 ec 08             	sub    esp,0x8
c000c1f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1f4:	50                   	push   eax
c000c1f5:	e8 b4 06 00 00       	call   c000c8ae <Device::Device(char const*)>
c000c1fa:	83 c4 10             	add    esp,0x10
c000c1fd:	ba f0 14 02 c0       	mov    edx,0xc00214f0
c000c202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c206:	89 10                	mov    DWORD PTR [eax],edx
c000c208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c20c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c216:	90                   	nop
c000c217:	83 c4 0c             	add    esp,0xc
c000c21a:	c3                   	ret    
c000c21b:	90                   	nop

c000c21c <Clock::~Clock()>:
c000c21c:	83 ec 0c             	sub    esp,0xc
c000c21f:	ba f0 14 02 c0       	mov    edx,0xc00214f0
c000c224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c228:	89 10                	mov    DWORD PTR [eax],edx
c000c22a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c22e:	83 ec 0c             	sub    esp,0xc
c000c231:	50                   	push   eax
c000c232:	e8 e1 03 00 00       	call   c000c618 <Device::~Device()>
c000c237:	83 c4 10             	add    esp,0x10
c000c23a:	90                   	nop
c000c23b:	83 c4 0c             	add    esp,0xc
c000c23e:	c3                   	ret    
c000c23f:	90                   	nop

c000c240 <Clock::~Clock()>:
c000c240:	83 ec 0c             	sub    esp,0xc
c000c243:	83 ec 0c             	sub    esp,0xc
c000c246:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c24a:	e8 cd ff ff ff       	call   c000c21c <Clock::~Clock()>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	83 ec 08             	sub    esp,0x8
c000c255:	68 58 01 00 00       	push   0x158
c000c25a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c25e:	e8 b5 e5 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c263:	83 c4 10             	add    esp,0x10
c000c266:	83 c4 0c             	add    esp,0xc
c000c269:	c3                   	ret    

c000c26a <Clock::timeInSecondsLocal()>:
c000c26a:	53                   	push   ebx
c000c26b:	83 ec 14             	sub    esp,0x14
c000c26e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c272:	8b 10                	mov    edx,DWORD PTR [eax]
c000c274:	50                   	push   eax
c000c275:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c278:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c27f:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c285:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c28b:	89 cb                	mov    ebx,ecx
c000c28d:	c1 fb 1f             	sar    ebx,0x1f
c000c290:	01 c8                	add    eax,ecx
c000c292:	11 da                	adc    edx,ebx
c000c294:	83 c4 10             	add    esp,0x10
c000c297:	31 c9                	xor    ecx,ecx
c000c299:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c2a0:	74 05                	je     c000c2a7 <Clock::timeInSecondsLocal()+0x3d>
c000c2a2:	b9 08 07 00 00       	mov    ecx,0x708
c000c2a7:	31 db                	xor    ebx,ebx
c000c2a9:	01 c8                	add    eax,ecx
c000c2ab:	11 da                	adc    edx,ebx
c000c2ad:	83 c4 08             	add    esp,0x8
c000c2b0:	5b                   	pop    ebx
c000c2b1:	c3                   	ret    

c000c2b2 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c2b2:	57                   	push   edi
c000c2b3:	56                   	push   esi
c000c2b4:	53                   	push   ebx
c000c2b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c2b9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c2bd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c2bf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c2c3:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c2c6:	0f b6 05 08 64 02 c0 	movzx  eax,BYTE PTR ds:0xc0026408
c000c2cd:	03 05 0c 64 02 c0    	add    eax,DWORD PTR ds:0xc002640c
c000c2d3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c2d9:	99                   	cdq    
c000c2da:	29 c6                	sub    esi,eax
c000c2dc:	19 d7                	sbb    edi,edx
c000c2de:	89 f0                	mov    eax,esi
c000c2e0:	89 fa                	mov    edx,edi
c000c2e2:	31 f6                	xor    esi,esi
c000c2e4:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c2eb:	74 05                	je     c000c2f2 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c2ed:	be 08 07 00 00       	mov    esi,0x708
c000c2f2:	31 ff                	xor    edi,edi
c000c2f4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c2f8:	29 f0                	sub    eax,esi
c000c2fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c2fe:	19 fa                	sbb    edx,edi
c000c300:	89 d8                	mov    eax,ebx
c000c302:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c306:	5b                   	pop    ebx
c000c307:	5e                   	pop    esi
c000c308:	5f                   	pop    edi
c000c309:	ff e0                	jmp    eax

c000c30b <datetimeToSeconds(datetime_t)>:
c000c30b:	55                   	push   ebp
c000c30c:	57                   	push   edi
c000c30d:	56                   	push   esi
c000c30e:	53                   	push   ebx
c000c30f:	83 ec 0c             	sub    esp,0xc
c000c312:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c316:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000c31a:	89 d6                	mov    esi,edx
c000c31c:	0f b6 c7             	movzx  eax,bh
c000c31f:	c1 ee 10             	shr    esi,0x10
c000c322:	6b e8 3c             	imul   ebp,eax,0x3c
c000c325:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000c32b:	0f b6 ce             	movzx  ecx,dh
c000c32e:	89 df                	mov    edi,ebx
c000c330:	49                   	dec    ecx
c000c331:	c1 ef 10             	shr    edi,0x10
c000c334:	0f b6 db             	movzx  ebx,bl
c000c337:	89 f8                	mov    eax,edi
c000c339:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000c33f:	0f b6 f8             	movzx  edi,al
c000c342:	0f b6 d2             	movzx  edx,dl
c000c345:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000c349:	01 d8                	add    eax,ebx
c000c34b:	0f b7 de             	movzx  ebx,si
c000c34e:	89 04 24             	mov    DWORD PTR [esp],eax
c000c351:	c1 f8 1f             	sar    eax,0x1f
c000c354:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c358:	0f b6 c1             	movzx  eax,cl
c000c35b:	8b 0c 85 40 15 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdeac0]
c000c362:	83 f8 01             	cmp    eax,0x1
c000c365:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c369:	76 27                	jbe    c000c392 <datetimeToSeconds(datetime_t)+0x87>
c000c36b:	83 e6 03             	and    esi,0x3
c000c36e:	75 22                	jne    c000c392 <datetimeToSeconds(datetime_t)+0x87>
c000c370:	31 d2                	xor    edx,edx
c000c372:	be 64 00 00 00       	mov    esi,0x64
c000c377:	89 d8                	mov    eax,ebx
c000c379:	f7 f6                	div    esi
c000c37b:	85 d2                	test   edx,edx
c000c37d:	75 12                	jne    c000c391 <datetimeToSeconds(datetime_t)+0x86>
c000c37f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c385:	be 90 01 00 00       	mov    esi,0x190
c000c38a:	99                   	cdq    
c000c38b:	f7 fe                	idiv   esi
c000c38d:	85 d2                	test   edx,edx
c000c38f:	75 01                	jne    c000c392 <datetimeToSeconds(datetime_t)+0x87>
c000c391:	41                   	inc    ecx
c000c392:	83 fb 46             	cmp    ebx,0x46
c000c395:	76 48                	jbe    c000c3df <datetimeToSeconds(datetime_t)+0xd4>
c000c397:	be 46 00 00 00       	mov    esi,0x46
c000c39c:	bf 64 00 00 00       	mov    edi,0x64
c000c3a1:	bd 90 01 00 00       	mov    ebp,0x190
c000c3a6:	b8 6d 01 00 00       	mov    eax,0x16d
c000c3ab:	f7 c6 03 00 00 00    	test   esi,0x3
c000c3b1:	75 23                	jne    c000c3d6 <datetimeToSeconds(datetime_t)+0xcb>
c000c3b3:	89 f0                	mov    eax,esi
c000c3b5:	99                   	cdq    
c000c3b6:	f7 ff                	idiv   edi
c000c3b8:	b8 6e 01 00 00       	mov    eax,0x16e
c000c3bd:	85 d2                	test   edx,edx
c000c3bf:	75 15                	jne    c000c3d6 <datetimeToSeconds(datetime_t)+0xcb>
c000c3c1:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c3c7:	99                   	cdq    
c000c3c8:	f7 fd                	idiv   ebp
c000c3ca:	83 fa 01             	cmp    edx,0x1
c000c3cd:	19 c0                	sbb    eax,eax
c000c3cf:	f7 d0                	not    eax
c000c3d1:	05 6e 01 00 00       	add    eax,0x16e
c000c3d6:	01 c1                	add    ecx,eax
c000c3d8:	46                   	inc    esi
c000c3d9:	39 de                	cmp    esi,ebx
c000c3db:	7c c9                	jl     c000c3a6 <datetimeToSeconds(datetime_t)+0x9b>
c000c3dd:	eb 34                	jmp    c000c413 <datetimeToSeconds(datetime_t)+0x108>
c000c3df:	74 32                	je     c000c413 <datetimeToSeconds(datetime_t)+0x108>
c000c3e1:	b8 45 00 00 00       	mov    eax,0x45
c000c3e6:	89 c2                	mov    edx,eax
c000c3e8:	83 e2 03             	and    edx,0x3
c000c3eb:	39 d8                	cmp    eax,ebx
c000c3ed:	7e 0f                	jle    c000c3fe <datetimeToSeconds(datetime_t)+0xf3>
c000c3ef:	83 fa 01             	cmp    edx,0x1
c000c3f2:	19 d2                	sbb    edx,edx
c000c3f4:	48                   	dec    eax
c000c3f5:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c3fc:	eb e8                	jmp    c000c3e6 <datetimeToSeconds(datetime_t)+0xdb>
c000c3fe:	b8 6d 01 00 00       	mov    eax,0x16d
c000c403:	85 d2                	test   edx,edx
c000c405:	75 0a                	jne    c000c411 <datetimeToSeconds(datetime_t)+0x106>
c000c407:	83 fb 01             	cmp    ebx,0x1
c000c40a:	19 c0                	sbb    eax,eax
c000c40c:	05 6e 01 00 00       	add    eax,0x16e
c000c411:	29 c1                	sub    ecx,eax
c000c413:	b8 80 51 01 00       	mov    eax,0x15180
c000c418:	f7 e9                	imul   ecx
c000c41a:	03 04 24             	add    eax,DWORD PTR [esp]
c000c41d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c421:	83 c4 0c             	add    esp,0xc
c000c424:	5b                   	pop    ebx
c000c425:	5e                   	pop    esi
c000c426:	5f                   	pop    edi
c000c427:	5d                   	pop    ebp
c000c428:	c3                   	ret    
c000c429:	90                   	nop

c000c42a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c42a:	57                   	push   edi
c000c42b:	56                   	push   esi
c000c42c:	53                   	push   ebx
c000c42d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c431:	8b 06                	mov    eax,DWORD PTR [esi]
c000c433:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c436:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c43a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c43e:	e8 c8 fe ff ff       	call   c000c30b <datetimeToSeconds(datetime_t)>
c000c443:	59                   	pop    ecx
c000c444:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c44b:	5b                   	pop    ebx
c000c44c:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c452:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c458:	89 cb                	mov    ebx,ecx
c000c45a:	c1 fb 1f             	sar    ebx,0x1f
c000c45d:	29 c8                	sub    eax,ecx
c000c45f:	19 da                	sbb    edx,ebx
c000c461:	31 c9                	xor    ecx,ecx
c000c463:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c46a:	74 05                	je     c000c471 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c46c:	b9 08 07 00 00       	mov    ecx,0x708
c000c471:	31 db                	xor    ebx,ebx
c000c473:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c477:	29 c8                	sub    eax,ecx
c000c479:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c47d:	19 da                	sbb    edx,ebx
c000c47f:	89 f8                	mov    eax,edi
c000c481:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c485:	5b                   	pop    ebx
c000c486:	5e                   	pop    esi
c000c487:	5f                   	pop    edi
c000c488:	ff e0                	jmp    eax

c000c48a <secondsToDatetime(unsigned long long)>:
c000c48a:	55                   	push   ebp
c000c48b:	57                   	push   edi
c000c48c:	56                   	push   esi
c000c48d:	53                   	push   ebx
c000c48e:	83 ec 1c             	sub    esp,0x1c
c000c491:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c495:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c499:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c49d:	6a 00                	push   0x0
c000c49f:	68 80 51 01 00       	push   0x15180
c000c4a4:	55                   	push   ebp
c000c4a5:	57                   	push   edi
c000c4a6:	e8 d5 2d 01 00       	call   c001f280 <__udivdi3>
c000c4ab:	83 c4 10             	add    esp,0x10
c000c4ae:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c4b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c4b8:	6a 00                	push   0x0
c000c4ba:	68 80 51 01 00       	push   0x15180
c000c4bf:	55                   	push   ebp
c000c4c0:	57                   	push   edi
c000c4c1:	bf 10 0e 00 00       	mov    edi,0xe10
c000c4c6:	e8 b5 2e 01 00       	call   c001f380 <__umoddi3>
c000c4cb:	83 c4 10             	add    esp,0x10
c000c4ce:	99                   	cdq    
c000c4cf:	f7 ff                	idiv   edi
c000c4d1:	bf 3c 00 00 00       	mov    edi,0x3c
c000c4d6:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c4d9:	89 d0                	mov    eax,edx
c000c4db:	99                   	cdq    
c000c4dc:	f7 ff                	idiv   edi
c000c4de:	85 db                	test   ebx,ebx
c000c4e0:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c4e3:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c4e6:	79 11                	jns    c000c4f9 <secondsToDatetime(unsigned long long)+0x6f>
c000c4e8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c4ec:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c4f2:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c4f7:	eb 07                	jmp    c000c500 <secondsToDatetime(unsigned long long)+0x76>
c000c4f9:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c4fe:	89 d8                	mov    eax,ebx
c000c500:	bf b4 05 00 00       	mov    edi,0x5b4
c000c505:	99                   	cdq    
c000c506:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c50b:	f7 f9                	idiv   ecx
c000c50d:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c512:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c516:	31 d2                	xor    edx,edx
c000c518:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c520:	01 c3                	add    ebx,eax
c000c522:	89 d8                	mov    eax,ebx
c000c524:	f7 f1                	div    ecx
c000c526:	31 d2                	xor    edx,edx
c000c528:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c52b:	89 d8                	mov    eax,ebx
c000c52d:	f7 f7                	div    edi
c000c52f:	31 d2                	xor    edx,edx
c000c531:	29 c1                	sub    ecx,eax
c000c533:	89 d8                	mov    eax,ebx
c000c535:	f7 f5                	div    ebp
c000c537:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c53c:	29 c1                	sub    ecx,eax
c000c53e:	31 d2                	xor    edx,edx
c000c540:	89 c8                	mov    eax,ecx
c000c542:	f7 f5                	div    ebp
c000c544:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c549:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c54d:	31 d2                	xor    edx,edx
c000c54f:	89 c8                	mov    eax,ecx
c000c551:	f7 f5                	div    ebp
c000c553:	31 d2                	xor    edx,edx
c000c555:	01 c3                	add    ebx,eax
c000c557:	89 c8                	mov    eax,ecx
c000c559:	f7 f7                	div    edi
c000c55b:	bf 99 00 00 00       	mov    edi,0x99
c000c560:	29 c3                	sub    ebx,eax
c000c562:	31 d2                	xor    edx,edx
c000c564:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c56c:	29 c3                	sub    ebx,eax
c000c56e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c571:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c574:	bb 05 00 00 00       	mov    ebx,0x5
c000c579:	83 c1 02             	add    ecx,0x2
c000c57c:	89 c8                	mov    eax,ecx
c000c57e:	f7 f7                	div    edi
c000c580:	31 d2                	xor    edx,edx
c000c582:	89 c7                	mov    edi,eax
c000c584:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c58a:	83 c0 02             	add    eax,0x2
c000c58d:	f7 f3                	div    ebx
c000c58f:	89 eb                	mov    ebx,ebp
c000c591:	29 c3                	sub    ebx,eax
c000c593:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c599:	88 1e                	mov    BYTE PTR [esi],bl
c000c59b:	19 c0                	sbb    eax,eax
c000c59d:	31 d2                	xor    edx,edx
c000c59f:	83 e0 0c             	and    eax,0xc
c000c5a2:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c5a6:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c5ae:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c5b2:	83 f9 01             	cmp    ecx,0x1
c000c5b5:	0f 96 c2             	setbe  dl
c000c5b8:	41                   	inc    ecx
c000c5b9:	01 d0                	add    eax,edx
c000c5bb:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c5be:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c5c2:	83 c4 1c             	add    esp,0x1c
c000c5c5:	89 f0                	mov    eax,esi
c000c5c7:	5b                   	pop    ebx
c000c5c8:	5e                   	pop    esi
c000c5c9:	5f                   	pop    edi
c000c5ca:	5d                   	pop    ebp
c000c5cb:	c2 04 00             	ret    0x4

c000c5ce <Clock::timeInDatetimeLocal()>:
c000c5ce:	53                   	push   ebx
c000c5cf:	83 ec 14             	sub    esp,0x14
c000c5d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c5d6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c5da:	e8 8b fc ff ff       	call   c000c26a <Clock::timeInSecondsLocal()>
c000c5df:	83 c4 0c             	add    esp,0xc
c000c5e2:	52                   	push   edx
c000c5e3:	50                   	push   eax
c000c5e4:	53                   	push   ebx
c000c5e5:	e8 a0 fe ff ff       	call   c000c48a <secondsToDatetime(unsigned long long)>
c000c5ea:	89 d8                	mov    eax,ebx
c000c5ec:	83 c4 14             	add    esp,0x14
c000c5ef:	5b                   	pop    ebx
c000c5f0:	c2 04 00             	ret    0x4
c000c5f3:	90                   	nop

c000c5f4 <Device::hibernate()>:
c000c5f4:	c3                   	ret    
c000c5f5:	90                   	nop

c000c5f6 <Device::wake()>:
c000c5f6:	c3                   	ret    
c000c5f7:	90                   	nop

c000c5f8 <Device::detect()>:
c000c5f8:	c3                   	ret    
c000c5f9:	90                   	nop

c000c5fa <Device::disableLegacy()>:
c000c5fa:	c3                   	ret    
c000c5fb:	90                   	nop

c000c5fc <Device::powerSaving(PowerSavingLevel)>:
c000c5fc:	c3                   	ret    
c000c5fd:	90                   	nop

c000c5fe <DriverlessDevice::close(int, int, void*)>:
c000c5fe:	31 c0                	xor    eax,eax
c000c600:	c3                   	ret    
c000c601:	90                   	nop

c000c602 <DriverlessDevice::detect()>:
c000c602:	c3                   	ret    
c000c603:	90                   	nop

c000c604 <DriverlessDevice::open(int, int, void*)>:
c000c604:	83 ec 18             	sub    esp,0x18
c000c607:	68 70 15 02 c0       	push   0xc0021570
c000c60c:	e8 34 4d 00 00       	call   c0011345 <KePanic(char const*)>
c000c611:	83 c8 ff             	or     eax,0xffffffff
c000c614:	83 c4 1c             	add    esp,0x1c
c000c617:	c3                   	ret    

c000c618 <Device::~Device()>:
c000c618:	ba d0 15 02 c0       	mov    edx,0xc00215d0
c000c61d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c621:	89 10                	mov    DWORD PTR [eax],edx
c000c623:	90                   	nop
c000c624:	c3                   	ret    
c000c625:	90                   	nop

c000c626 <Device::~Device()>:
c000c626:	83 ec 0c             	sub    esp,0xc
c000c629:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c62d:	e8 e6 ff ff ff       	call   c000c618 <Device::~Device()>
c000c632:	83 c4 04             	add    esp,0x4
c000c635:	83 ec 08             	sub    esp,0x8
c000c638:	68 58 01 00 00       	push   0x158
c000c63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c641:	e8 d2 e1 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c646:	83 c4 10             	add    esp,0x10
c000c649:	83 c4 0c             	add    esp,0xc
c000c64c:	c3                   	ret    
c000c64d:	90                   	nop

c000c64e <Device::findAndLoadDriver()>:
c000c64e:	c7 44 24 04 8e 15 02 c0 	mov    DWORD PTR [esp+0x4],0xc002158e
c000c656:	e9 ea e2 ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c000c65b:	90                   	nop

c000c65c <Device::preOpenPCI(PCIDeviceInfo)>:
c000c65c:	57                   	push   edi
c000c65d:	b9 09 00 00 00       	mov    ecx,0x9
c000c662:	56                   	push   esi
c000c663:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c667:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c66b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c675:	81 c7 18 01 00 00    	add    edi,0x118
c000c67b:	fc                   	cld    
c000c67c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c67e:	5e                   	pop    esi
c000c67f:	5f                   	pop    edi
c000c680:	c3                   	ret    
c000c681:	90                   	nop

c000c682 <Device::preOpenACPI(void*, char*, char*)>:
c000c682:	57                   	push   edi
c000c683:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c688:	56                   	push   esi
c000c689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c68d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c691:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c69b:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c6a1:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c6a7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c6ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c6ad:	b9 0e 00 00 00       	mov    ecx,0xe
c000c6b2:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c6b8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c6bc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c6be:	5e                   	pop    esi
c000c6bf:	5f                   	pop    edi
c000c6c0:	c3                   	ret    
c000c6c1:	90                   	nop

c000c6c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c6c2:	53                   	push   ebx
c000c6c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c6c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c6cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c6cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c6d3:	0f b6 c0             	movzx  eax,al
c000c6d6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c6da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c6de:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c6e2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c6e6:	5b                   	pop    ebx
c000c6e7:	e9 a8 05 00 00       	jmp    c000cc94 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c6ec <Device::getParent()>:
c000c6ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c6f0:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c6f6:	c3                   	ret    
c000c6f7:	90                   	nop

c000c6f8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c6f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c6fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c700:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c709:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c70d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c711:	e9 e6 06 00 00       	jmp    c000cdfc <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c716 <Device::addChild(Device*)>:
c000c716:	53                   	push   ebx
c000c717:	83 ec 08             	sub    esp,0x8
c000c71a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c71e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c722:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c728:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c72e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c730:	85 d2                	test   edx,edx
c000c732:	74 04                	je     c000c738 <Device::addChild(Device*)+0x22>
c000c734:	89 d3                	mov    ebx,edx
c000c736:	eb f6                	jmp    c000c72e <Device::addChild(Device*)+0x18>
c000c738:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c73b:	83 ec 0c             	sub    esp,0xc
c000c73e:	6a 08                	push   0x8
c000c740:	e8 71 b3 ff ff       	call   c0007ab6 <malloc>
c000c745:	89 03                	mov    DWORD PTR [ebx],eax
c000c747:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c74d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c754:	83 c4 18             	add    esp,0x18
c000c757:	5b                   	pop    ebx
c000c758:	c3                   	ret    
c000c759:	90                   	nop

c000c75a <Device::removeAllChildren()>:
c000c75a:	56                   	push   esi
c000c75b:	53                   	push   ebx
c000c75c:	52                   	push   edx
c000c75d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c761:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c767:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c76a:	74 17                	je     c000c783 <Device::removeAllChildren()+0x29>
c000c76c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c76f:	85 c0                	test   eax,eax
c000c771:	74 0c                	je     c000c77f <Device::removeAllChildren()+0x25>
c000c773:	83 ec 0c             	sub    esp,0xc
c000c776:	8b 10                	mov    edx,DWORD PTR [eax]
c000c778:	50                   	push   eax
c000c779:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c781:	eb e4                	jmp    c000c767 <Device::removeAllChildren()+0xd>
c000c783:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c789:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c78f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c795:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c79c:	58                   	pop    eax
c000c79d:	5b                   	pop    ebx
c000c79e:	5e                   	pop    esi
c000c79f:	c3                   	ret    

c000c7a0 <Device::hibernateAll()>:
c000c7a0:	53                   	push   ebx
c000c7a1:	83 ec 14             	sub    esp,0x14
c000c7a4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c7a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7aa:	53                   	push   ebx
c000c7ab:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c7ae:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c7b4:	83 c4 10             	add    esp,0x10
c000c7b7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7ba:	74 0f                	je     c000c7cb <Device::hibernateAll()+0x2b>
c000c7bc:	83 ec 0c             	sub    esp,0xc
c000c7bf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c7c2:	e8 d9 ff ff ff       	call   c000c7a0 <Device::hibernateAll()>
c000c7c7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c7c9:	eb e9                	jmp    c000c7b4 <Device::hibernateAll()+0x14>
c000c7cb:	83 c4 08             	add    esp,0x8
c000c7ce:	5b                   	pop    ebx
c000c7cf:	c3                   	ret    

c000c7d0 <Device::wakeAll()>:
c000c7d0:	53                   	push   ebx
c000c7d1:	83 ec 14             	sub    esp,0x14
c000c7d4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c7d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7da:	53                   	push   ebx
c000c7db:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c7de:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c7e4:	83 c4 10             	add    esp,0x10
c000c7e7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7ea:	74 0f                	je     c000c7fb <Device::wakeAll()+0x2b>
c000c7ec:	83 ec 0c             	sub    esp,0xc
c000c7ef:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c7f2:	e8 d9 ff ff ff       	call   c000c7d0 <Device::wakeAll()>
c000c7f7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c7f9:	eb e9                	jmp    c000c7e4 <Device::wakeAll()+0x14>
c000c7fb:	83 c4 08             	add    esp,0x8
c000c7fe:	5b                   	pop    ebx
c000c7ff:	c3                   	ret    

c000c800 <Device::detectAll()>:
c000c800:	53                   	push   ebx
c000c801:	83 ec 14             	sub    esp,0x14
c000c804:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c808:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c80a:	53                   	push   ebx
c000c80b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c80e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c814:	83 c4 10             	add    esp,0x10
c000c817:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c81a:	74 0f                	je     c000c82b <Device::detectAll()+0x2b>
c000c81c:	83 ec 0c             	sub    esp,0xc
c000c81f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c822:	e8 d9 ff ff ff       	call   c000c800 <Device::detectAll()>
c000c827:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c829:	eb e9                	jmp    c000c814 <Device::detectAll()+0x14>
c000c82b:	83 c4 08             	add    esp,0x8
c000c82e:	5b                   	pop    ebx
c000c82f:	c3                   	ret    

c000c830 <Device::disableLegacyAll()>:
c000c830:	c3                   	ret    
c000c831:	90                   	nop

c000c832 <Device::loadDriversForAll()>:
c000c832:	c3                   	ret    
c000c833:	90                   	nop

c000c834 <Device::closeAll()>:
c000c834:	53                   	push   ebx
c000c835:	83 ec 08             	sub    esp,0x8
c000c838:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c83c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c83e:	6a 00                	push   0x0
c000c840:	6a 00                	push   0x0
c000c842:	6a 00                	push   0x0
c000c844:	53                   	push   ebx
c000c845:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c848:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c84e:	83 c4 10             	add    esp,0x10
c000c851:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c854:	74 0f                	je     c000c865 <Device::closeAll()+0x31>
c000c856:	83 ec 0c             	sub    esp,0xc
c000c859:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c85c:	e8 d3 ff ff ff       	call   c000c834 <Device::closeAll()>
c000c861:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c863:	eb e9                	jmp    c000c84e <Device::closeAll()+0x1a>
c000c865:	83 c4 08             	add    esp,0x8
c000c868:	5b                   	pop    ebx
c000c869:	c3                   	ret    

c000c86a <Device::powerSavingAll(PowerSavingLevel)>:
c000c86a:	56                   	push   esi
c000c86b:	53                   	push   ebx
c000c86c:	83 ec 0c             	sub    esp,0xc
c000c86f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c873:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c877:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c879:	56                   	push   esi
c000c87a:	53                   	push   ebx
c000c87b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c87e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c884:	83 c4 10             	add    esp,0x10
c000c887:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c88a:	74 0f                	je     c000c89b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c88c:	52                   	push   edx
c000c88d:	52                   	push   edx
c000c88e:	56                   	push   esi
c000c88f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c892:	e8 d3 ff ff ff       	call   c000c86a <Device::powerSavingAll(PowerSavingLevel)>
c000c897:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c899:	eb e9                	jmp    c000c884 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c89b:	58                   	pop    eax
c000c89c:	5b                   	pop    ebx
c000c89d:	5e                   	pop    esi
c000c89e:	c3                   	ret    
c000c89f:	90                   	nop

c000c8a0 <Device::setName(char const*)>:
c000c8a0:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c8a8:	e9 93 3d ff ff       	jmp    c0000640 <strcpy>
c000c8ad:	90                   	nop

c000c8ae <Device::Device(char const*)>:
c000c8ae:	83 ec 1c             	sub    esp,0x1c
c000c8b1:	ba d0 15 02 c0       	mov    edx,0xc00215d0
c000c8b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8ba:	89 10                	mov    DWORD PTR [eax],edx
c000c8bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8c0:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c8ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8ce:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c8d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8dc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c8e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8ea:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c8f4:	83 ec 08             	sub    esp,0x8
c000c8f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c8fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c8ff:	e8 9c ff ff ff       	call   c000c8a0 <Device::setName(char const*)>
c000c904:	83 c4 10             	add    esp,0x10
c000c907:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c90f:	83 ec 0c             	sub    esp,0xc
c000c912:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c916:	e8 9b b1 ff ff       	call   c0007ab6 <malloc>
c000c91b:	83 c4 10             	add    esp,0x10
c000c91e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c924:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c92b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c92f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c935:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c939:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c93f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c945:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c949:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c94f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c95a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c961:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c965:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c96c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c970:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c97a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c97e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c988:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c98c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c996:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c99a:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c9a4:	90                   	nop
c000c9a5:	83 c4 1c             	add    esp,0x1c
c000c9a8:	c3                   	ret    
c000c9a9:	90                   	nop

c000c9aa <Device::getName()>:
c000c9aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c9ae:	05 d0 00 00 00       	add    eax,0xd0
c000c9b3:	c3                   	ret    

c000c9b4 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c9b4:	83 ec 0c             	sub    esp,0xc
c000c9b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9bb:	83 ec 08             	sub    esp,0x8
c000c9be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9c2:	50                   	push   eax
c000c9c3:	e8 e6 fe ff ff       	call   c000c8ae <Device::Device(char const*)>
c000c9c8:	83 c4 10             	add    esp,0x10
c000c9cb:	ba fc 15 02 c0       	mov    edx,0xc00215fc
c000c9d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9d4:	89 10                	mov    DWORD PTR [eax],edx
c000c9d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9da:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c9e4:	90                   	nop
c000c9e5:	83 c4 0c             	add    esp,0xc
c000c9e8:	c3                   	ret    
c000c9e9:	90                   	nop

c000c9ea <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c9ea:	57                   	push   edi
c000c9eb:	56                   	push   esi
c000c9ec:	53                   	push   ebx
c000c9ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c9f1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c9f5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c9f9:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c9ff:	75 0c                	jne    c000ca0d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000ca01:	52                   	push   edx
c000ca02:	52                   	push   edx
c000ca03:	53                   	push   ebx
c000ca04:	56                   	push   esi
c000ca05:	e8 28 2d 01 00       	call   c001f732 <LinkedList<Device>::addElement(Device*)>
c000ca0a:	83 c4 10             	add    esp,0x10
c000ca0d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca13:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca16:	74 12                	je     c000ca2a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000ca18:	50                   	push   eax
c000ca19:	57                   	push   edi
c000ca1a:	56                   	push   esi
c000ca1b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca1e:	e8 c7 ff ff ff       	call   c000c9ea <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ca23:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca25:	83 c4 10             	add    esp,0x10
c000ca28:	eb e9                	jmp    c000ca13 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000ca2a:	5b                   	pop    ebx
c000ca2b:	5e                   	pop    esi
c000ca2c:	5f                   	pop    edi
c000ca2d:	c3                   	ret    

c000ca2e <getDevicesOfType(DeviceType)>:
c000ca2e:	53                   	push   ebx
c000ca2f:	83 ec 14             	sub    esp,0x14
c000ca32:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca36:	53                   	push   ebx
c000ca37:	e8 d2 2d 01 00       	call   c001f80e <LinkedList<Device>::LinkedList()>
c000ca3c:	83 c4 0c             	add    esp,0xc
c000ca3f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca43:	53                   	push   ebx
c000ca44:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000ca4a:	e8 9b ff ff ff       	call   c000c9ea <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ca4f:	89 d8                	mov    eax,ebx
c000ca51:	83 c4 18             	add    esp,0x18
c000ca54:	5b                   	pop    ebx
c000ca55:	c2 04 00             	ret    0x4

c000ca58 <HardDiskController::HardDiskController(char const*)>:
c000ca58:	83 ec 0c             	sub    esp,0xc
c000ca5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca5f:	83 ec 08             	sub    esp,0x8
c000ca62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca66:	50                   	push   eax
c000ca67:	e8 42 fe ff ff       	call   c000c8ae <Device::Device(char const*)>
c000ca6c:	83 c4 10             	add    esp,0x10
c000ca6f:	ba 28 16 02 c0       	mov    edx,0xc0021628
c000ca74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca78:	89 10                	mov    DWORD PTR [eax],edx
c000ca7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca7e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000ca88:	90                   	nop
c000ca89:	83 c4 0c             	add    esp,0xc
c000ca8c:	c3                   	ret    
c000ca8d:	90                   	nop
c000ca8e:	66 90                	xchg   ax,ax

c000ca90 <HardDiskController::~HardDiskController()>:
c000ca90:	83 ec 0c             	sub    esp,0xc
c000ca93:	ba 28 16 02 c0       	mov    edx,0xc0021628
c000ca98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca9c:	89 10                	mov    DWORD PTR [eax],edx
c000ca9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caa2:	83 ec 0c             	sub    esp,0xc
c000caa5:	50                   	push   eax
c000caa6:	e8 6d fb ff ff       	call   c000c618 <Device::~Device()>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	90                   	nop
c000caaf:	83 c4 0c             	add    esp,0xc
c000cab2:	c3                   	ret    
c000cab3:	90                   	nop

c000cab4 <HardDiskController::~HardDiskController()>:
c000cab4:	83 ec 0c             	sub    esp,0xc
c000cab7:	83 ec 0c             	sub    esp,0xc
c000caba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cabe:	e8 cd ff ff ff       	call   c000ca90 <HardDiskController::~HardDiskController()>
c000cac3:	83 c4 10             	add    esp,0x10
c000cac6:	83 ec 08             	sub    esp,0x8
c000cac9:	68 58 01 00 00       	push   0x158
c000cace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cad2:	e8 41 dd ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000cad7:	83 c4 10             	add    esp,0x10
c000cada:	83 c4 0c             	add    esp,0xc
c000cadd:	c3                   	ret    

c000cade <PhysicalDisk::eject()>:
c000cade:	83 c8 ff             	or     eax,0xffffffff
c000cae1:	c3                   	ret    

c000cae2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cae2:	83 ec 0c             	sub    esp,0xc
c000cae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae9:	83 ec 08             	sub    esp,0x8
c000caec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000caf0:	50                   	push   eax
c000caf1:	e8 b8 fd ff ff       	call   c000c8ae <Device::Device(char const*)>
c000caf6:	83 c4 10             	add    esp,0x10
c000caf9:	ba 54 16 02 c0       	mov    edx,0xc0021654
c000cafe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb02:	89 10                	mov    DWORD PTR [eax],edx
c000cb04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb08:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb13:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cb1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cb28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb2c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cb30:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cb36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb3a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000cb44:	90                   	nop
c000cb45:	83 c4 0c             	add    esp,0xc
c000cb48:	c3                   	ret    
c000cb49:	90                   	nop

c000cb4a <PhysicalDisk::startCache()>:
c000cb4a:	56                   	push   esi
c000cb4b:	53                   	push   ebx
c000cb4c:	83 ec 10             	sub    esp,0x10
c000cb4f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cb53:	6a 44                	push   0x44
c000cb55:	e8 5c af ff ff       	call   c0007ab6 <malloc>
c000cb5a:	89 c6                	mov    esi,eax
c000cb5c:	58                   	pop    eax
c000cb5d:	5a                   	pop    edx
c000cb5e:	53                   	push   ebx
c000cb5f:	56                   	push   esi
c000cb60:	e8 7b 17 00 00       	call   c000e2e0 <VCache::VCache(PhysicalDisk*)>
c000cb65:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000cb6b:	83 c4 14             	add    esp,0x14
c000cb6e:	5b                   	pop    ebx
c000cb6f:	5e                   	pop    esi
c000cb70:	c3                   	ret    
c000cb71:	90                   	nop

c000cb72 <PhysicalDisk::~PhysicalDisk()>:
c000cb72:	83 ec 0c             	sub    esp,0xc
c000cb75:	ba 54 16 02 c0       	mov    edx,0xc0021654
c000cb7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb7e:	89 10                	mov    DWORD PTR [eax],edx
c000cb80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb84:	83 ec 0c             	sub    esp,0xc
c000cb87:	50                   	push   eax
c000cb88:	e8 8b fa ff ff       	call   c000c618 <Device::~Device()>
c000cb8d:	83 c4 10             	add    esp,0x10
c000cb90:	90                   	nop
c000cb91:	83 c4 0c             	add    esp,0xc
c000cb94:	c3                   	ret    
c000cb95:	90                   	nop

c000cb96 <PhysicalDisk::~PhysicalDisk()>:
c000cb96:	83 ec 0c             	sub    esp,0xc
c000cb99:	83 ec 0c             	sub    esp,0xc
c000cb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cba0:	e8 cd ff ff ff       	call   c000cb72 <PhysicalDisk::~PhysicalDisk()>
c000cba5:	83 c4 10             	add    esp,0x10
c000cba8:	83 ec 08             	sub    esp,0x8
c000cbab:	68 6c 01 00 00       	push   0x16c
c000cbb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbb4:	e8 5f dc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000cbb9:	83 c4 10             	add    esp,0x10
c000cbbc:	83 c4 0c             	add    esp,0xc
c000cbbf:	c3                   	ret    

c000cbc0 <int_handler>:
c000cbc0:	55                   	push   ebp
c000cbc1:	57                   	push   edi
c000cbc2:	56                   	push   esi
c000cbc3:	53                   	push   ebx
c000cbc4:	83 ec 0c             	sub    esp,0xc
c000cbc7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000cbcb:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cbd2:	74 0b                	je     c000cbdf <int_handler+0x1f>
c000cbd4:	fa                   	cli    
c000cbd5:	f4                   	hlt    
c000cbd6:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cbdd:	75 f5                	jne    c000cbd4 <int_handler+0x14>
c000cbdf:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cbe2:	8d 46 e0             	lea    eax,[esi-0x20]
c000cbe5:	83 f8 17             	cmp    eax,0x17
c000cbe8:	76 40                	jbe    c000cc2a <int_handler+0x6a>
c000cbea:	c1 e6 04             	shl    esi,0x4
c000cbed:	31 db                	xor    ebx,ebx
c000cbef:	8d ae 20 74 02 c0    	lea    ebp,[esi-0x3ffd8be0]
c000cbf5:	81 c6 20 64 02 c0    	add    esi,0xc0026420
c000cbfb:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cbff:	85 c0                	test   eax,eax
c000cc01:	74 13                	je     c000cc16 <int_handler+0x56>
c000cc03:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cc06:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cc0a:	74 2c                	je     c000cc38 <int_handler+0x78>
c000cc0c:	83 ec 08             	sub    esp,0x8
c000cc0f:	52                   	push   edx
c000cc10:	57                   	push   edi
c000cc11:	ff d0                	call   eax
c000cc13:	83 c4 10             	add    esp,0x10
c000cc16:	83 c3 01             	add    ebx,0x1
c000cc19:	83 fb 04             	cmp    ebx,0x4
c000cc1c:	75 dd                	jne    c000cbfb <int_handler+0x3b>
c000cc1e:	83 c4 0c             	add    esp,0xc
c000cc21:	31 c0                	xor    eax,eax
c000cc23:	5b                   	pop    ebx
c000cc24:	31 d2                	xor    edx,edx
c000cc26:	5e                   	pop    esi
c000cc27:	5f                   	pop    edi
c000cc28:	5d                   	pop    ebp
c000cc29:	c3                   	ret    
c000cc2a:	83 ec 0c             	sub    esp,0xc
c000cc2d:	50                   	push   eax
c000cc2e:	e8 99 b2 00 00       	call   c0017ecc <HalEndOfInterrupt(int)>
c000cc33:	83 c4 10             	add    esp,0x10
c000cc36:	eb b2                	jmp    c000cbea <int_handler+0x2a>
c000cc38:	83 ec 08             	sub    esp,0x8
c000cc3b:	52                   	push   edx
c000cc3c:	57                   	push   edi
c000cc3d:	ff d0                	call   eax
c000cc3f:	83 c4 10             	add    esp,0x10
c000cc42:	83 c4 0c             	add    esp,0xc
c000cc45:	5b                   	pop    ebx
c000cc46:	5e                   	pop    esi
c000cc47:	5f                   	pop    edi
c000cc48:	5d                   	pop    ebp
c000cc49:	c3                   	ret    

c000cc4a <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cc4a:	56                   	push   esi
c000cc4b:	31 c0                	xor    eax,eax
c000cc4d:	53                   	push   ebx
c000cc4e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cc52:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc56:	89 ca                	mov    edx,ecx
c000cc58:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cc5c:	c1 e2 04             	shl    edx,0x4
c000cc5f:	83 bc 82 20 74 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd8be0],0x0
c000cc67:	74 17                	je     c000cc80 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cc69:	83 c0 01             	add    eax,0x1
c000cc6c:	83 f8 04             	cmp    eax,0x4
c000cc6f:	75 ee                	jne    c000cc5f <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cc71:	c7 44 24 0c 84 16 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021684
c000cc79:	5b                   	pop    ebx
c000cc7a:	5e                   	pop    esi
c000cc7b:	e9 c5 46 00 00       	jmp    c0011345 <KePanic(char const*)>
c000cc80:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cc83:	89 1c 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],ebx
c000cc8a:	89 34 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],esi
c000cc91:	5b                   	pop    ebx
c000cc92:	5e                   	pop    esi
c000cc93:	c3                   	ret    

c000cc94 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cc94:	57                   	push   edi
c000cc95:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cc9b:	56                   	push   esi
c000cc9c:	53                   	push   ebx
c000cc9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cca1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cca5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000ccac:	74 54                	je     c000cd02 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000ccae:	89 c7                	mov    edi,eax
c000ccb0:	84 c0                	test   al,al
c000ccb2:	74 1d                	je     c000ccd1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000ccb4:	83 fe 0f             	cmp    esi,0xf
c000ccb7:	0f 8f d5 00 00 00    	jg     c000cd92 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000ccbd:	0f b6 b6 88 31 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdce78]
c000ccc4:	0f b7 bc 36 c0 8b 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd7440]
c000cccc:	d1 ef                	shr    edi,1
c000ccce:	83 e7 01             	and    edi,0x1
c000ccd1:	83 ec 08             	sub    esp,0x8
c000ccd4:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000ccd9:	31 db                	xor    ebx,ebx
c000ccdb:	50                   	push   eax
c000ccdc:	68 91 16 02 c0       	push   0xc0021691
c000cce1:	e8 5f dc ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000cce6:	83 c4 10             	add    esp,0x10
c000cce9:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000ccee:	85 c0                	test   eax,eax
c000ccf0:	7f 55                	jg     c000cd47 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000ccf2:	83 ec 0c             	sub    esp,0xc
c000ccf5:	68 a8 16 02 c0       	push   0xc00216a8
c000ccfa:	e8 46 46 00 00       	call   c0011345 <KePanic(char const*)>
c000ccff:	83 c4 10             	add    esp,0x10
c000cd02:	8d 7e 20             	lea    edi,[esi+0x20]
c000cd05:	89 f8                	mov    eax,edi
c000cd07:	31 d2                	xor    edx,edx
c000cd09:	c1 e0 04             	shl    eax,0x4
c000cd0c:	8b 8c 90 20 74 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd8be0]
c000cd13:	85 c9                	test   ecx,ecx
c000cd15:	0f 84 8e 00 00 00    	je     c000cda9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000cd1b:	83 c2 01             	add    edx,0x1
c000cd1e:	83 fa 04             	cmp    edx,0x4
c000cd21:	75 e9                	jne    c000cd0c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cd23:	83 ec 0c             	sub    esp,0xc
c000cd26:	68 fc 16 02 c0       	push   0xc00216fc
c000cd2b:	e8 15 46 00 00       	call   c0011345 <KePanic(char const*)>
c000cd30:	83 c4 10             	add    esp,0x10
c000cd33:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cd38:	5b                   	pop    ebx
c000cd39:	5e                   	pop    esi
c000cd3a:	5f                   	pop    edi
c000cd3b:	c3                   	ret    
c000cd3c:	83 c3 01             	add    ebx,0x1
c000cd3f:	39 1d c0 a0 02 c0    	cmp    DWORD PTR ds:0xc002a0c0,ebx
c000cd45:	7e ab                	jle    c000ccf2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000cd47:	83 ec 08             	sub    esp,0x8
c000cd4a:	8b 04 9d e0 a0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5f20]
c000cd51:	56                   	push   esi
c000cd52:	50                   	push   eax
c000cd53:	e8 fe 18 01 00       	call   c001e656 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cd58:	83 c4 10             	add    esp,0x10
c000cd5b:	84 c0                	test   al,al
c000cd5d:	74 dd                	je     c000cd3c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000cd5f:	83 ec 04             	sub    esp,0x4
c000cd62:	89 f8                	mov    eax,edi
c000cd64:	8b 1c 9d e0 a0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd5f20]
c000cd6b:	0f b6 f8             	movzx  edi,al
c000cd6e:	57                   	push   edi
c000cd6f:	8d 7e 20             	lea    edi,[esi+0x20]
c000cd72:	6a 00                	push   0x0
c000cd74:	89 f8                	mov    eax,edi
c000cd76:	0f b6 c0             	movzx  eax,al
c000cd79:	50                   	push   eax
c000cd7a:	89 f0                	mov    eax,esi
c000cd7c:	6a 00                	push   0x0
c000cd7e:	0f b6 c0             	movzx  eax,al
c000cd81:	6a 00                	push   0x0
c000cd83:	50                   	push   eax
c000cd84:	53                   	push   ebx
c000cd85:	e8 38 1a 01 00       	call   c001e7c2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000cd8a:	83 c4 20             	add    esp,0x20
c000cd8d:	e9 73 ff ff ff       	jmp    c000cd05 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000cd92:	83 ec 0c             	sub    esp,0xc
c000cd95:	31 ff                	xor    edi,edi
c000cd97:	68 c4 16 02 c0       	push   0xc00216c4
c000cd9c:	e8 a4 45 00 00       	call   c0011345 <KePanic(char const*)>
c000cda1:	83 c4 10             	add    esp,0x10
c000cda4:	e9 28 ff ff ff       	jmp    c000ccd1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cda9:	8d 04 ba             	lea    eax,[edx+edi*4]
c000cdac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cdb0:	89 14 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],edx
c000cdb7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cdbb:	5b                   	pop    ebx
c000cdbc:	89 14 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],edx
c000cdc3:	89 f0                	mov    eax,esi
c000cdc5:	5e                   	pop    esi
c000cdc6:	5f                   	pop    edi
c000cdc7:	c3                   	ret    

c000cdc8 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000cdc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cdcc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cdd0:	c1 e0 04             	shl    eax,0x4
c000cdd3:	8d 50 10             	lea    edx,[eax+0x10]
c000cdd6:	39 88 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ecx
c000cddc:	74 08                	je     c000cde6 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000cdde:	83 c0 04             	add    eax,0x4
c000cde1:	39 d0                	cmp    eax,edx
c000cde3:	75 f1                	jne    c000cdd6 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000cde5:	c3                   	ret    
c000cde6:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cdf0:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000cdfa:	eb e2                	jmp    c000cdde <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000cdfc <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000cdfc:	53                   	push   ebx
c000cdfd:	83 ec 08             	sub    esp,0x8
c000ce00:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ce04:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ce09:	74 0e                	je     c000ce19 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000ce0b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ce10:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000ce17:	75 37                	jne    c000ce50 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000ce19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce1d:	83 c0 20             	add    eax,0x20
c000ce20:	c1 e0 04             	shl    eax,0x4
c000ce23:	8d 50 10             	lea    edx,[eax+0x10]
c000ce26:	39 98 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ebx
c000ce2c:	74 0c                	je     c000ce3a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000ce2e:	83 c0 04             	add    eax,0x4
c000ce31:	39 d0                	cmp    eax,edx
c000ce33:	75 f1                	jne    c000ce26 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000ce35:	83 c4 08             	add    esp,0x8
c000ce38:	5b                   	pop    ebx
c000ce39:	c3                   	ret    
c000ce3a:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ce44:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000ce4e:	eb de                	jmp    c000ce2e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000ce50:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000ce55:	7f 11                	jg     c000ce68 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000ce57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce5b:	0f b6 80 88 31 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdce78]
c000ce62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce66:	eb b1                	jmp    c000ce19 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000ce68:	83 ec 0c             	sub    esp,0xc
c000ce6b:	68 b5 16 02 c0       	push   0xc00216b5
c000ce70:	e8 d0 44 00 00       	call   c0011345 <KePanic(char const*)>
c000ce75:	83 c4 10             	add    esp,0x10
c000ce78:	eb 9f                	jmp    c000ce19 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000ce7a <setupINTS()>:
c000ce7a:	31 c0                	xor    eax,eax
c000ce7c:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ce86:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000ce90:	c7 80 24 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bdc],0x0
c000ce9a:	c7 80 24 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bdc],0x0
c000cea4:	c7 80 28 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bd8],0x0
c000ceae:	c7 80 28 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bd8],0x0
c000ceb8:	c7 80 2c 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bd4],0x0
c000cec2:	c7 80 2c 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bd4],0x0
c000cecc:	83 c0 10             	add    eax,0x10
c000cecf:	3d 00 10 00 00       	cmp    eax,0x1000
c000ced4:	75 a6                	jne    c000ce7c <setupINTS()+0x2>
c000ced6:	c3                   	ret    

c000ced7 <convertLegacyIRQNumber(int)>:
c000ced7:	83 ec 0c             	sub    esp,0xc
c000ceda:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cee4:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000ceeb:	74 0c                	je     c000cef9 <convertLegacyIRQNumber(int)+0x22>
c000ceed:	83 f8 0f             	cmp    eax,0xf
c000cef0:	7f 0b                	jg     c000cefd <convertLegacyIRQNumber(int)+0x26>
c000cef2:	0f b6 80 88 31 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdce78]
c000cef9:	83 c4 0c             	add    esp,0xc
c000cefc:	c3                   	ret    
c000cefd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf01:	83 ec 0c             	sub    esp,0xc
c000cf04:	68 c4 16 02 c0       	push   0xc00216c4
c000cf09:	e8 37 44 00 00       	call   c0011345 <KePanic(char const*)>
c000cf0e:	83 c4 10             	add    esp,0x10
c000cf11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf15:	83 c4 0c             	add    esp,0xc
c000cf18:	c3                   	ret    
c000cf19:	90                   	nop

c000cf1a <startGUI(void*)>:
c000cf1a:	55                   	push   ebp
c000cf1b:	89 e5                	mov    ebp,esp
c000cf1d:	53                   	push   ebx
c000cf1e:	83 ec 04             	sub    esp,0x4
c000cf21:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf26:	83 e8 01             	sub    eax,0x1
c000cf29:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cf2e:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf33:	85 c0                	test   eax,eax
c000cf35:	75 01                	jne    c000cf38 <startGUI(void*)+0x1e>
c000cf37:	fb                   	sti    
c000cf38:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cf3e:	83 ec 08             	sub    esp,0x8
c000cf41:	6a 01                	push   0x1
c000cf43:	68 21 17 02 c0       	push   0xc0021721
c000cf48:	e8 59 82 00 00       	call   c00151a6 <Thr::loadDLL(char const*, bool)>
c000cf4d:	83 c4 10             	add    esp,0x10
c000cf50:	83 ec 08             	sub    esp,0x8
c000cf53:	53                   	push   ebx
c000cf54:	50                   	push   eax
c000cf55:	e8 7d 84 00 00       	call   c00153d7 <Thr::executeDLL(unsigned long, void*)>
c000cf5a:	83 c4 10             	add    esp,0x10
c000cf5d:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cf63:	83 ec 08             	sub    esp,0x8
c000cf66:	6a 01                	push   0x1
c000cf68:	68 3b 17 02 c0       	push   0xc002173b
c000cf6d:	e8 34 82 00 00       	call   c00151a6 <Thr::loadDLL(char const*, bool)>
c000cf72:	83 c4 10             	add    esp,0x10
c000cf75:	83 ec 08             	sub    esp,0x8
c000cf78:	53                   	push   ebx
c000cf79:	50                   	push   eax
c000cf7a:	e8 58 84 00 00       	call   c00153d7 <Thr::executeDLL(unsigned long, void*)>
c000cf7f:	83 c4 10             	add    esp,0x10
c000cf82:	90                   	nop
c000cf83:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cf86:	c9                   	leave  
c000cf87:	c3                   	ret    

c000cf88 <startGUIVESA(void*)>:
c000cf88:	55                   	push   ebp
c000cf89:	89 e5                	mov    ebp,esp
c000cf8b:	53                   	push   ebx
c000cf8c:	83 ec 04             	sub    esp,0x4
c000cf8f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf94:	83 e8 01             	sub    eax,0x1
c000cf97:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cf9c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cfa1:	85 c0                	test   eax,eax
c000cfa3:	75 01                	jne    c000cfa6 <startGUIVESA(void*)+0x1e>
c000cfa5:	fb                   	sti    
c000cfa6:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cfac:	83 ec 08             	sub    esp,0x8
c000cfaf:	6a 01                	push   0x1
c000cfb1:	68 59 17 02 c0       	push   0xc0021759
c000cfb6:	e8 eb 81 00 00       	call   c00151a6 <Thr::loadDLL(char const*, bool)>
c000cfbb:	83 c4 10             	add    esp,0x10
c000cfbe:	83 ec 08             	sub    esp,0x8
c000cfc1:	53                   	push   ebx
c000cfc2:	50                   	push   eax
c000cfc3:	e8 0f 84 00 00       	call   c00153d7 <Thr::executeDLL(unsigned long, void*)>
c000cfc8:	83 c4 10             	add    esp,0x10
c000cfcb:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cfd1:	83 ec 08             	sub    esp,0x8
c000cfd4:	6a 01                	push   0x1
c000cfd6:	68 3b 17 02 c0       	push   0xc002173b
c000cfdb:	e8 c6 81 00 00       	call   c00151a6 <Thr::loadDLL(char const*, bool)>
c000cfe0:	83 c4 10             	add    esp,0x10
c000cfe3:	83 ec 08             	sub    esp,0x8
c000cfe6:	53                   	push   ebx
c000cfe7:	50                   	push   eax
c000cfe8:	e8 ea 83 00 00       	call   c00153d7 <Thr::executeDLL(unsigned long, void*)>
c000cfed:	83 c4 10             	add    esp,0x10
c000cff0:	90                   	nop
c000cff1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cff4:	c9                   	leave  
c000cff5:	c3                   	ret    

c000cff6 <sendKeyToTerminal(unsigned char)>:
c000cff6:	55                   	push   ebp
c000cff7:	89 e5                	mov    ebp,esp
c000cff9:	83 ec 28             	sub    esp,0x28
c000cffc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cfff:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d002:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000d007:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d00b:	83 ec 08             	sub    esp,0x8
c000d00e:	52                   	push   edx
c000d00f:	50                   	push   eax
c000d010:	e8 a1 bd ff ff       	call   c0008db6 <VgaText::receiveKey(unsigned char)>
c000d015:	83 c4 10             	add    esp,0x10
c000d018:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d01c:	83 f8 0a             	cmp    eax,0xa
c000d01f:	74 16                	je     c000d037 <sendKeyToTerminal(unsigned char)+0x41>
c000d021:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d025:	83 f8 03             	cmp    eax,0x3
c000d028:	74 0d                	je     c000d037 <sendKeyToTerminal(unsigned char)+0x41>
c000d02a:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d02e:	83 f8 1c             	cmp    eax,0x1c
c000d031:	0f 85 97 00 00 00    	jne    c000d0ce <sendKeyToTerminal(unsigned char)+0xd8>
c000d037:	fa                   	cli    
c000d038:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d03d:	83 c0 01             	add    eax,0x1
c000d040:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d045:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d04a:	83 c0 01             	add    eax,0x1
c000d04d:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000d052:	a1 20 84 02 c0       	mov    eax,ds:0xc0028420
c000d057:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d05a:	c7 05 20 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028420,0x0
c000d064:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d068:	74 1f                	je     c000d089 <sendKeyToTerminal(unsigned char)+0x93>
c000d06a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d06d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d070:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d073:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d076:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d079:	83 ec 0c             	sub    esp,0xc
c000d07c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d07f:	e8 98 90 00 00       	call   c001611c <unblockTask(ThreadControlBlock*)>
c000d084:	83 c4 10             	add    esp,0x10
c000d087:	eb db                	jmp    c000d064 <sendKeyToTerminal(unsigned char)+0x6e>
c000d089:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d08e:	83 e8 01             	sub    eax,0x1
c000d091:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000d096:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d09b:	85 c0                	test   eax,eax
c000d09d:	75 18                	jne    c000d0b7 <sendKeyToTerminal(unsigned char)+0xc1>
c000d09f:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c000d0a4:	85 c0                	test   eax,eax
c000d0a6:	74 0f                	je     c000d0b7 <sendKeyToTerminal(unsigned char)+0xc1>
c000d0a8:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000d0b2:	e8 4d 8b 00 00       	call   c0015c04 <schedule()>
c000d0b7:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d0bc:	83 e8 01             	sub    eax,0x1
c000d0bf:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d0c4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d0c9:	85 c0                	test   eax,eax
c000d0cb:	75 01                	jne    c000d0ce <sendKeyToTerminal(unsigned char)+0xd8>
c000d0cd:	fb                   	sti    
c000d0ce:	90                   	nop
c000d0cf:	c9                   	leave  
c000d0d0:	c3                   	ret    

c000d0d1 <sendKeyboardToken(KeyboardToken)>:
c000d0d1:	55                   	push   ebp
c000d0d2:	89 e5                	mov    ebp,esp
c000d0d4:	83 ec 18             	sub    esp,0x18
c000d0d7:	e8 b9 42 00 00       	call   c0011395 <KeUserIOReceived()>
c000d0dc:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d0df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0e2:	0f b7 c0             	movzx  eax,ax
c000d0e5:	83 f2 01             	xor    edx,0x1
c000d0e8:	88 90 40 84 02 c0    	mov    BYTE PTR [eax-0x3ffd7bc0],dl
c000d0ee:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d0f3:	85 c0                	test   eax,eax
c000d0f5:	74 24                	je     c000d11b <sendKeyboardToken(KeyboardToken)+0x4a>
c000d0f7:	8b 0d 28 84 02 c0    	mov    ecx,DWORD PTR ds:0xc0028428
c000d0fd:	83 ec 04             	sub    esp,0x4
c000d100:	68 40 84 02 c0       	push   0xc0028440
c000d105:	83 ec 08             	sub    esp,0x8
c000d108:	89 e2                	mov    edx,esp
c000d10a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d10d:	89 02                	mov    DWORD PTR [edx],eax
c000d10f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d112:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d116:	ff d1                	call   ecx
c000d118:	83 c4 10             	add    esp,0x10
c000d11b:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d11f:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d122:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d127:	0f b6 d2             	movzx  edx,dl
c000d12a:	0f b6 c0             	movzx  eax,al
c000d12d:	39 c2                	cmp    edx,eax
c000d12f:	74 1c                	je     c000d14d <sendKeyboardToken(KeyboardToken)+0x7c>
c000d131:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d134:	a2 48 88 02 c0       	mov    ds:0xc0028848,al
c000d139:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d13e:	0f b6 c0             	movzx  eax,al
c000d141:	83 ec 0c             	sub    esp,0xc
c000d144:	50                   	push   eax
c000d145:	e8 b8 b3 ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000d14a:	83 c4 10             	add    esp,0x10
c000d14d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d150:	0f b6 c0             	movzx  eax,al
c000d153:	85 c0                	test   eax,eax
c000d155:	0f 84 da 00 00 00    	je     c000d235 <sendKeyboardToken(KeyboardToken)+0x164>
c000d15b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d15e:	0f b7 c0             	movzx  eax,ax
c000d161:	3d 18 03 00 00       	cmp    eax,0x318
c000d166:	75 06                	jne    c000d16e <sendKeyboardToken(KeyboardToken)+0x9d>
c000d168:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d16e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d171:	0f b7 c0             	movzx  eax,ax
c000d174:	3d 19 03 00 00       	cmp    eax,0x319
c000d179:	75 06                	jne    c000d181 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d17b:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d181:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d184:	0f b7 c0             	movzx  eax,ax
c000d187:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d18c:	75 06                	jne    c000d194 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d18e:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d194:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d197:	0f b7 c0             	movzx  eax,ax
c000d19a:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d19f:	75 06                	jne    c000d1a7 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d1a1:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d1a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1aa:	0f b7 c0             	movzx  eax,ax
c000d1ad:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d1b2:	75 06                	jne    c000d1ba <sendKeyboardToken(KeyboardToken)+0xe9>
c000d1b4:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d1ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1bd:	0f b7 c0             	movzx  eax,ax
c000d1c0:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d1c5:	75 06                	jne    c000d1cd <sendKeyboardToken(KeyboardToken)+0xfc>
c000d1c7:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d1cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1d0:	0f b7 c0             	movzx  eax,ax
c000d1d3:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d1d8:	75 06                	jne    c000d1e0 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d1da:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d1e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1e3:	0f b7 c0             	movzx  eax,ax
c000d1e6:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d1eb:	75 06                	jne    c000d1f3 <sendKeyboardToken(KeyboardToken)+0x122>
c000d1ed:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d1f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1f6:	0f b7 c0             	movzx  eax,ax
c000d1f9:	3d 20 03 00 00       	cmp    eax,0x320
c000d1fe:	75 06                	jne    c000d206 <sendKeyboardToken(KeyboardToken)+0x135>
c000d200:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d206:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d209:	0f b7 c0             	movzx  eax,ax
c000d20c:	3d 21 03 00 00       	cmp    eax,0x321
c000d211:	75 06                	jne    c000d219 <sendKeyboardToken(KeyboardToken)+0x148>
c000d213:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d219:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d21c:	0f b7 c0             	movzx  eax,ax
c000d21f:	3d 22 03 00 00       	cmp    eax,0x322
c000d224:	0f 85 f1 00 00 00    	jne    c000d31b <sendKeyboardToken(KeyboardToken)+0x24a>
c000d22a:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d230:	e9 e6 00 00 00       	jmp    c000d31b <sendKeyboardToken(KeyboardToken)+0x24a>
c000d235:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d238:	0f b7 c0             	movzx  eax,ax
c000d23b:	3d 18 03 00 00       	cmp    eax,0x318
c000d240:	75 0a                	jne    c000d24c <sendKeyboardToken(KeyboardToken)+0x17b>
c000d242:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d248:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d24c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d24f:	0f b7 c0             	movzx  eax,ax
c000d252:	3d 19 03 00 00       	cmp    eax,0x319
c000d257:	75 0a                	jne    c000d263 <sendKeyboardToken(KeyboardToken)+0x192>
c000d259:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d25f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d263:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d266:	0f b7 c0             	movzx  eax,ax
c000d269:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d26e:	75 0a                	jne    c000d27a <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d270:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d276:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d27a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d27d:	0f b7 c0             	movzx  eax,ax
c000d280:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d285:	75 0a                	jne    c000d291 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d287:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d28d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d291:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d294:	0f b7 c0             	movzx  eax,ax
c000d297:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d29c:	75 0a                	jne    c000d2a8 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d29e:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d2a4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2ab:	0f b7 c0             	movzx  eax,ax
c000d2ae:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d2b3:	75 0a                	jne    c000d2bf <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d2b5:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d2bb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2c2:	0f b7 c0             	movzx  eax,ax
c000d2c5:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d2ca:	75 0a                	jne    c000d2d6 <sendKeyboardToken(KeyboardToken)+0x205>
c000d2cc:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d2d2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2d9:	0f b7 c0             	movzx  eax,ax
c000d2dc:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d2e1:	75 0a                	jne    c000d2ed <sendKeyboardToken(KeyboardToken)+0x21c>
c000d2e3:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d2e9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2f0:	0f b7 c0             	movzx  eax,ax
c000d2f3:	3d 20 03 00 00       	cmp    eax,0x320
c000d2f8:	75 0a                	jne    c000d304 <sendKeyboardToken(KeyboardToken)+0x233>
c000d2fa:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d300:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d304:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d307:	0f b7 c0             	movzx  eax,ax
c000d30a:	3d 21 03 00 00       	cmp    eax,0x321
c000d30f:	75 0a                	jne    c000d31b <sendKeyboardToken(KeyboardToken)+0x24a>
c000d311:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d317:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d31b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d31e:	0f b7 c0             	movzx  eax,ax
c000d321:	3d 00 02 00 00       	cmp    eax,0x200
c000d326:	75 2f                	jne    c000d357 <sendKeyboardToken(KeyboardToken)+0x286>
c000d328:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d32d:	83 f0 01             	xor    eax,0x1
c000d330:	0f b6 c0             	movzx  eax,al
c000d333:	85 c0                	test   eax,eax
c000d335:	74 20                	je     c000d357 <sendKeyboardToken(KeyboardToken)+0x286>
c000d337:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d33c:	6a 01                	push   0x1
c000d33e:	6a 00                	push   0x0
c000d340:	68 1a cf 00 c0       	push   0xc000cf1a
c000d345:	50                   	push   eax
c000d346:	e8 69 86 00 00       	call   c00159b4 <Process::createThread(void (*)(void*), void*, int)>
c000d34b:	83 c4 10             	add    esp,0x10
c000d34e:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d355:	eb 3a                	jmp    c000d391 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d357:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d35a:	0f b7 c0             	movzx  eax,ax
c000d35d:	3d 01 02 00 00       	cmp    eax,0x201
c000d362:	75 2d                	jne    c000d391 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d364:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d369:	83 f0 01             	xor    eax,0x1
c000d36c:	0f b6 c0             	movzx  eax,al
c000d36f:	85 c0                	test   eax,eax
c000d371:	74 1e                	je     c000d391 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d373:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d378:	6a 01                	push   0x1
c000d37a:	6a 00                	push   0x0
c000d37c:	68 88 cf 00 c0       	push   0xc000cf88
c000d381:	50                   	push   eax
c000d382:	e8 2d 86 00 00       	call   c00159b4 <Process::createThread(void (*)(void*), void*, int)>
c000d387:	83 c4 10             	add    esp,0x10
c000d38a:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d391:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d394:	0f b7 c0             	movzx  eax,ax
c000d397:	3d 25 03 00 00       	cmp    eax,0x325
c000d39c:	75 06                	jne    c000d3a4 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d39e:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d3a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3a7:	0f b7 c0             	movzx  eax,ax
c000d3aa:	3d 24 03 00 00       	cmp    eax,0x324
c000d3af:	75 06                	jne    c000d3b7 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d3b1:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d3b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3ba:	0f b7 c0             	movzx  eax,ax
c000d3bd:	3d 23 03 00 00       	cmp    eax,0x323
c000d3c2:	75 06                	jne    c000d3ca <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d3c4:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d3ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3cd:	0f b7 c0             	movzx  eax,ax
c000d3d0:	3d 26 03 00 00       	cmp    eax,0x326
c000d3d5:	75 06                	jne    c000d3dd <sendKeyboardToken(KeyboardToken)+0x30c>
c000d3d7:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d3dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3e0:	0f b7 c0             	movzx  eax,ax
c000d3e3:	3d 27 03 00 00       	cmp    eax,0x327
c000d3e8:	75 06                	jne    c000d3f0 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d3ea:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d3f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3f3:	0f b7 c0             	movzx  eax,ax
c000d3f6:	3d 22 03 00 00       	cmp    eax,0x322
c000d3fb:	75 06                	jne    c000d403 <sendKeyboardToken(KeyboardToken)+0x332>
c000d3fd:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d403:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d407:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d40a:	83 f0 01             	xor    eax,0x1
c000d40d:	0f b6 c0             	movzx  eax,al
c000d410:	85 c0                	test   eax,eax
c000d412:	74 7c                	je     c000d490 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d414:	a0 41 85 02 c0       	mov    al,ds:0xc0028541
c000d419:	0f b6 c0             	movzx  eax,al
c000d41c:	85 c0                	test   eax,eax
c000d41e:	74 43                	je     c000d463 <sendKeyboardToken(KeyboardToken)+0x392>
c000d420:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d424:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d428:	85 c0                	test   eax,eax
c000d42a:	74 2b                	je     c000d457 <sendKeyboardToken(KeyboardToken)+0x386>
c000d42c:	8b 15 44 88 02 c0    	mov    edx,DWORD PTR ds:0xc0028844
c000d432:	89 d0                	mov    eax,edx
c000d434:	c1 e0 02             	shl    eax,0x2
c000d437:	01 d0                	add    eax,edx
c000d439:	01 c0                	add    eax,eax
c000d43b:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d440:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d443:	0f b7 c0             	movzx  eax,ax
c000d446:	8d 50 d0             	lea    edx,[eax-0x30]
c000d449:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d44e:	01 d0                	add    eax,edx
c000d450:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d455:	eb 71                	jmp    c000d4c8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d457:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d461:	eb 65                	jmp    c000d4c8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d463:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d468:	85 c0                	test   eax,eax
c000d46a:	74 18                	je     c000d484 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d46c:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d471:	0f b6 c0             	movzx  eax,al
c000d474:	83 ec 0c             	sub    esp,0xc
c000d477:	50                   	push   eax
c000d478:	e8 79 fb ff ff       	call   c000cff6 <sendKeyToTerminal(unsigned char)>
c000d47d:	83 c4 10             	add    esp,0x10
c000d480:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d484:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d48e:	eb 38                	jmp    c000d4c8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d490:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d493:	0f b7 c0             	movzx  eax,ax
c000d496:	3d 01 01 00 00       	cmp    eax,0x101
c000d49b:	75 2b                	jne    c000d4c8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d49d:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4a2:	85 c0                	test   eax,eax
c000d4a4:	74 18                	je     c000d4be <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d4a6:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4ab:	0f b6 c0             	movzx  eax,al
c000d4ae:	83 ec 0c             	sub    esp,0xc
c000d4b1:	50                   	push   eax
c000d4b2:	e8 3f fb ff ff       	call   c000cff6 <sendKeyToTerminal(unsigned char)>
c000d4b7:	83 c4 10             	add    esp,0x10
c000d4ba:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d4be:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d4c8:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d4cb:	83 f0 01             	xor    eax,0x1
c000d4ce:	0f b6 c0             	movzx  eax,al
c000d4d1:	85 c0                	test   eax,eax
c000d4d3:	74 5a                	je     c000d52f <sendKeyboardToken(KeyboardToken)+0x45e>
c000d4d5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d4d8:	83 f0 01             	xor    eax,0x1
c000d4db:	0f b6 c0             	movzx  eax,al
c000d4de:	85 c0                	test   eax,eax
c000d4e0:	74 4d                	je     c000d52f <sendKeyboardToken(KeyboardToken)+0x45e>
c000d4e2:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d4e7:	83 f0 01             	xor    eax,0x1
c000d4ea:	0f b6 c0             	movzx  eax,al
c000d4ed:	85 c0                	test   eax,eax
c000d4ef:	74 3e                	je     c000d52f <sendKeyboardToken(KeyboardToken)+0x45e>
c000d4f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4f4:	0f b7 c0             	movzx  eax,ax
c000d4f7:	83 f8 1f             	cmp    eax,0x1f
c000d4fa:	76 0b                	jbe    c000d507 <sendKeyboardToken(KeyboardToken)+0x436>
c000d4fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4ff:	0f b7 c0             	movzx  eax,ax
c000d502:	83 f8 7e             	cmp    eax,0x7e
c000d505:	76 16                	jbe    c000d51d <sendKeyboardToken(KeyboardToken)+0x44c>
c000d507:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d50a:	0f b7 c0             	movzx  eax,ax
c000d50d:	83 f8 0a             	cmp    eax,0xa
c000d510:	74 0b                	je     c000d51d <sendKeyboardToken(KeyboardToken)+0x44c>
c000d512:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d515:	0f b7 c0             	movzx  eax,ax
c000d518:	83 f8 08             	cmp    eax,0x8
c000d51b:	75 12                	jne    c000d52f <sendKeyboardToken(KeyboardToken)+0x45e>
c000d51d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d520:	0f b6 c0             	movzx  eax,al
c000d523:	83 ec 0c             	sub    esp,0xc
c000d526:	50                   	push   eax
c000d527:	e8 ca fa ff ff       	call   c000cff6 <sendKeyToTerminal(unsigned char)>
c000d52c:	83 c4 10             	add    esp,0x10
c000d52f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d532:	83 f0 01             	xor    eax,0x1
c000d535:	0f b6 c0             	movzx  eax,al
c000d538:	85 c0                	test   eax,eax
c000d53a:	74 5d                	je     c000d599 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d53c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d53f:	83 f0 01             	xor    eax,0x1
c000d542:	0f b6 c0             	movzx  eax,al
c000d545:	85 c0                	test   eax,eax
c000d547:	74 50                	je     c000d599 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d549:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d54e:	0f b6 c0             	movzx  eax,al
c000d551:	85 c0                	test   eax,eax
c000d553:	74 44                	je     c000d599 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d558:	0f b7 c0             	movzx  eax,ax
c000d55b:	83 f8 3f             	cmp    eax,0x3f
c000d55e:	76 39                	jbe    c000d599 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d560:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d563:	0f b7 c0             	movzx  eax,ax
c000d566:	83 f8 7f             	cmp    eax,0x7f
c000d569:	77 2e                	ja     c000d599 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d56b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d56e:	88 c2                	mov    dl,al
c000d570:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d573:	0f b7 c0             	movzx  eax,ax
c000d576:	83 f8 5f             	cmp    eax,0x5f
c000d579:	76 04                	jbe    c000d57f <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d57b:	b0 20                	mov    al,0x20
c000d57d:	eb 02                	jmp    c000d581 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d57f:	b0 00                	mov    al,0x0
c000d581:	89 d1                	mov    ecx,edx
c000d583:	29 c1                	sub    ecx,eax
c000d585:	89 c8                	mov    eax,ecx
c000d587:	83 e8 40             	sub    eax,0x40
c000d58a:	0f b6 c0             	movzx  eax,al
c000d58d:	83 ec 0c             	sub    esp,0xc
c000d590:	50                   	push   eax
c000d591:	e8 60 fa ff ff       	call   c000cff6 <sendKeyToTerminal(unsigned char)>
c000d596:	83 c4 10             	add    esp,0x10
c000d599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d59c:	0f b7 c0             	movzx  eax,ax
c000d59f:	3d 00 03 00 00       	cmp    eax,0x300
c000d5a4:	75 12                	jne    c000d5b8 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d5a6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d5a9:	83 f0 01             	xor    eax,0x1
c000d5ac:	0f b6 c0             	movzx  eax,al
c000d5af:	85 c0                	test   eax,eax
c000d5b1:	74 05                	je     c000d5b8 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d5b3:	e8 4b af ff ff       	call   c0008503 <doTerminalCycle()>
c000d5b8:	90                   	nop
c000d5b9:	c9                   	leave  
c000d5ba:	c3                   	ret    

c000d5bb <clearInternalKeybuffer(VgaText*)>:
c000d5bb:	55                   	push   ebp
c000d5bc:	89 e5                	mov    ebp,esp
c000d5be:	83 ec 08             	sub    esp,0x8
c000d5c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5c4:	05 02 01 00 00       	add    eax,0x102
c000d5c9:	83 ec 0c             	sub    esp,0xc
c000d5cc:	50                   	push   eax
c000d5cd:	e8 9e 2f ff ff       	call   c0000570 <strlen>
c000d5d2:	83 c4 10             	add    esp,0x10
c000d5d5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d5d8:	81 c2 02 01 00 00    	add    edx,0x102
c000d5de:	83 ec 04             	sub    esp,0x4
c000d5e1:	50                   	push   eax
c000d5e2:	6a 00                	push   0x0
c000d5e4:	52                   	push   edx
c000d5e5:	e8 06 2f ff ff       	call   c00004f0 <memset>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	90                   	nop
c000d5ee:	c9                   	leave  
c000d5ef:	c3                   	ret    

c000d5f0 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d5f0:	55                   	push   ebp
c000d5f1:	89 e5                	mov    ebp,esp
c000d5f3:	83 ec 18             	sub    esp,0x18
c000d5f6:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d5fb:	85 c0                	test   eax,eax
c000d5fd:	74 2a                	je     c000d629 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d5ff:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d605:	8b 0d 28 84 02 c0    	mov    ecx,DWORD PTR ds:0xc0028428
c000d60b:	83 ec 04             	sub    esp,0x4
c000d60e:	68 40 84 02 c0       	push   0xc0028440
c000d613:	83 ec 08             	sub    esp,0x8
c000d616:	89 e2                	mov    edx,esp
c000d618:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000d61b:	89 02                	mov    DWORD PTR [edx],eax
c000d61d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d620:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d624:	ff d1                	call   ecx
c000d626:	83 c4 10             	add    esp,0x10
c000d629:	fb                   	sti    
c000d62a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d631:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d635:	0f 84 0d 01 00 00    	je     c000d748 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d63b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d63e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d644:	0f be c0             	movsx  eax,al
c000d647:	85 c0                	test   eax,eax
c000d649:	75 2c                	jne    c000d677 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d64b:	fa                   	cli    
c000d64c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d651:	83 c0 01             	add    eax,0x1
c000d654:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d659:	e8 a6 85 00 00       	call   c0015c04 <schedule()>
c000d65e:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d663:	83 e8 01             	sub    eax,0x1
c000d666:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d66b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d670:	85 c0                	test   eax,eax
c000d672:	75 c7                	jne    c000d63b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d674:	fb                   	sti    
c000d675:	eb c4                	jmp    c000d63b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d677:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d67a:	8d 50 01             	lea    edx,[eax+0x1]
c000d67d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d680:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d683:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d689:	88 10                	mov    BYTE PTR [eax],dl
c000d68b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d68e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d694:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d697:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d69b:	83 f8 03             	cmp    eax,0x3
c000d69e:	75 1e                	jne    c000d6be <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d6a0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d6a5:	8b 00                	mov    eax,DWORD PTR [eax]
c000d6a7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d6aa:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d6b0:	83 ec 08             	sub    esp,0x8
c000d6b3:	6a 02                	push   0x2
c000d6b5:	50                   	push   eax
c000d6b6:	e8 2b 41 00 00       	call   c00117e6 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d6bb:	83 c4 10             	add    esp,0x10
c000d6be:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d6c2:	83 f8 1c             	cmp    eax,0x1c
c000d6c5:	75 1e                	jne    c000d6e5 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d6c7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d6cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d6ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d6d1:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d6d7:	83 ec 08             	sub    esp,0x8
c000d6da:	6a 09                	push   0x9
c000d6dc:	50                   	push   eax
c000d6dd:	e8 04 41 00 00       	call   c00117e6 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d6e2:	83 c4 10             	add    esp,0x10
c000d6e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6e8:	05 02 01 00 00       	add    eax,0x102
c000d6ed:	83 ec 0c             	sub    esp,0xc
c000d6f0:	50                   	push   eax
c000d6f1:	e8 7a 2e ff ff       	call   c0000570 <strlen>
c000d6f6:	83 c4 10             	add    esp,0x10
c000d6f9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d6fc:	81 c2 02 01 00 00    	add    edx,0x102
c000d702:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d705:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d708:	81 c2 02 01 00 00    	add    edx,0x102
c000d70e:	83 ec 04             	sub    esp,0x4
c000d711:	50                   	push   eax
c000d712:	51                   	push   ecx
c000d713:	52                   	push   edx
c000d714:	e8 b7 2c ff ff       	call   c00003d0 <memmove>
c000d719:	83 c4 10             	add    esp,0x10
c000d71c:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d720:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d724:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d728:	83 f8 0a             	cmp    eax,0xa
c000d72b:	74 16                	je     c000d743 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d72d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d731:	83 f8 03             	cmp    eax,0x3
c000d734:	74 0d                	je     c000d743 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d736:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d73a:	83 f8 1c             	cmp    eax,0x1c
c000d73d:	0f 85 ee fe ff ff    	jne    c000d631 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d743:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d746:	eb 03                	jmp    c000d74b <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d748:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d74b:	c9                   	leave  
c000d74c:	c3                   	ret    
c000d74d:	90                   	nop

c000d74e <Keyboard::Keyboard(char const*)>:
c000d74e:	83 ec 0c             	sub    esp,0xc
c000d751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d755:	83 ec 08             	sub    esp,0x8
c000d758:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d75c:	50                   	push   eax
c000d75d:	e8 4c f1 ff ff       	call   c000c8ae <Device::Device(char const*)>
c000d762:	83 c4 10             	add    esp,0x10
c000d765:	ba 7c 17 02 c0       	mov    edx,0xc002177c
c000d76a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d76e:	89 10                	mov    DWORD PTR [eax],edx
c000d770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d774:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d77e:	c6 05 24 84 02 c0 01 	mov    BYTE PTR ds:0xc0028424,0x1
c000d785:	90                   	nop
c000d786:	83 c4 0c             	add    esp,0xc
c000d789:	c3                   	ret    

c000d78a <Keyboard::~Keyboard()>:
c000d78a:	83 ec 0c             	sub    esp,0xc
c000d78d:	ba 7c 17 02 c0       	mov    edx,0xc002177c
c000d792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d796:	89 10                	mov    DWORD PTR [eax],edx
c000d798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d79c:	83 ec 0c             	sub    esp,0xc
c000d79f:	50                   	push   eax
c000d7a0:	e8 73 ee ff ff       	call   c000c618 <Device::~Device()>
c000d7a5:	83 c4 10             	add    esp,0x10
c000d7a8:	90                   	nop
c000d7a9:	83 c4 0c             	add    esp,0xc
c000d7ac:	c3                   	ret    
c000d7ad:	90                   	nop

c000d7ae <Keyboard::~Keyboard()>:
c000d7ae:	83 ec 0c             	sub    esp,0xc
c000d7b1:	83 ec 0c             	sub    esp,0xc
c000d7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7b8:	e8 cd ff ff ff       	call   c000d78a <Keyboard::~Keyboard()>
c000d7bd:	83 c4 10             	add    esp,0x10
c000d7c0:	83 ec 08             	sub    esp,0x8
c000d7c3:	68 5c 01 00 00       	push   0x15c
c000d7c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7cc:	e8 47 d0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000d7d1:	83 c4 10             	add    esp,0x10
c000d7d4:	83 c4 0c             	add    esp,0xc
c000d7d7:	c3                   	ret    

c000d7d8 <LogicalDisk::close(int, int, void*)>:
c000d7d8:	83 c8 ff             	or     eax,0xffffffff
c000d7db:	c3                   	ret    

c000d7dc <LogicalDisk::~LogicalDisk()>:
c000d7dc:	83 ec 0c             	sub    esp,0xc
c000d7df:	ba f4 17 02 c0       	mov    edx,0xc00217f4
c000d7e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7e8:	89 10                	mov    DWORD PTR [eax],edx
c000d7ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ee:	83 ec 0c             	sub    esp,0xc
c000d7f1:	50                   	push   eax
c000d7f2:	e8 21 ee ff ff       	call   c000c618 <Device::~Device()>
c000d7f7:	83 c4 10             	add    esp,0x10
c000d7fa:	90                   	nop
c000d7fb:	83 c4 0c             	add    esp,0xc
c000d7fe:	c3                   	ret    
c000d7ff:	90                   	nop

c000d800 <LogicalDisk::~LogicalDisk()>:
c000d800:	83 ec 0c             	sub    esp,0xc
c000d803:	83 ec 0c             	sub    esp,0xc
c000d806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d80a:	e8 cd ff ff ff       	call   c000d7dc <LogicalDisk::~LogicalDisk()>
c000d80f:	83 c4 10             	add    esp,0x10
c000d812:	83 ec 08             	sub    esp,0x8
c000d815:	68 78 01 00 00       	push   0x178
c000d81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d81e:	e8 f5 cf ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000d823:	83 c4 10             	add    esp,0x10
c000d826:	83 c4 0c             	add    esp,0xc
c000d829:	c3                   	ret    

c000d82a <LogicalDisk::open(int, int, void*)>:
c000d82a:	83 ec 18             	sub    esp,0x18
c000d82d:	68 a8 17 02 c0       	push   0xc00217a8
c000d832:	e8 0e 3b 00 00       	call   c0011345 <KePanic(char const*)>
c000d837:	83 c8 ff             	or     eax,0xffffffff
c000d83a:	83 c4 1c             	add    esp,0x1c
c000d83d:	c3                   	ret    

c000d83e <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d83e:	53                   	push   ebx
c000d83f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d843:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d847:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d84b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d851:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d857:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d85d:	77 10                	ja     c000d86f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d85f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d865:	89 d3                	mov    ebx,edx
c000d867:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d86d:	72 05                	jb     c000d874 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d86f:	83 c8 ff             	or     eax,0xffffffff
c000d872:	89 c2                	mov    edx,eax
c000d874:	5b                   	pop    ebx
c000d875:	c3                   	ret    

c000d876 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d876:	56                   	push   esi
c000d877:	83 c8 ff             	or     eax,0xffffffff
c000d87a:	53                   	push   ebx
c000d87b:	89 c2                	mov    edx,eax
c000d87d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d881:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d885:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d889:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d88f:	77 27                	ja     c000d8b8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d891:	89 d8                	mov    eax,ebx
c000d893:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d899:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d89f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d8a4:	89 c2                	mov    edx,eax
c000d8a6:	73 10                	jae    c000d8b8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d8a8:	89 c8                	mov    eax,ecx
c000d8aa:	89 da                	mov    edx,ebx
c000d8ac:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d8b2:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d8b8:	5b                   	pop    ebx
c000d8b9:	5e                   	pop    esi
c000d8ba:	c3                   	ret    
c000d8bb:	90                   	nop

c000d8bc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d8bc:	83 ec 1c             	sub    esp,0x1c
c000d8bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d8cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d8cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d8d3:	89 04 24             	mov    DWORD PTR [esp],eax
c000d8d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d8da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d8de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8e2:	83 ec 08             	sub    esp,0x8
c000d8e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d8e9:	50                   	push   eax
c000d8ea:	e8 bf ef ff ff       	call   c000c8ae <Device::Device(char const*)>
c000d8ef:	83 c4 10             	add    esp,0x10
c000d8f2:	ba f4 17 02 c0       	mov    edx,0xc00217f4
c000d8f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8fb:	89 10                	mov    DWORD PTR [eax],edx
c000d8fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d901:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d908:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d90c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d913:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d917:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d91e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d922:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d92c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d930:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d934:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d938:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d93e:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d944:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d948:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d94b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d94f:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d955:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d95b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d95f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d963:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d969:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d96d:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d977:	90                   	nop
c000d978:	83 c4 1c             	add    esp,0x1c
c000d97b:	c3                   	ret    

c000d97c <LogicalDisk::assignDriveLetter()>:
c000d97c:	55                   	push   ebp
c000d97d:	57                   	push   edi
c000d97e:	56                   	push   esi
c000d97f:	53                   	push   ebx
c000d980:	83 ec 14             	sub    esp,0x14
c000d983:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d987:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d98d:	b0 41                	mov    al,0x41
c000d98f:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d995:	84 d2                	test   dl,dl
c000d997:	75 02                	jne    c000d99b <LogicalDisk::assignDriveLetter()+0x1f>
c000d999:	b0 43                	mov    al,0x43
c000d99b:	8b 3d 60 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028860
c000d9a1:	0f b6 ca             	movzx  ecx,dl
c000d9a4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d9a8:	0f be e8             	movsx  ebp,al
c000d9ab:	8b 3d 64 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028864
c000d9b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d9b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d9b9:	3c 43                	cmp    al,0x43
c000d9bb:	75 10                	jne    c000d9cd <LogicalDisk::assignDriveLetter()+0x51>
c000d9bd:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d9c4:	75 5a                	jne    c000da20 <LogicalDisk::assignDriveLetter()+0xa4>
c000d9c6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d9cb:	75 53                	jne    c000da20 <LogicalDisk::assignDriveLetter()+0xa4>
c000d9cd:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d9d0:	ba 01 00 00 00       	mov    edx,0x1
c000d9d5:	89 34 24             	mov    DWORD PTR [esp],esi
c000d9d8:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d9db:	d3 e2                	shl    edx,cl
c000d9dd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d9e1:	89 d7                	mov    edi,edx
c000d9e3:	89 d6                	mov    esi,edx
c000d9e5:	c1 ff 1f             	sar    edi,0x1f
c000d9e8:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d9ec:	21 f9                	and    ecx,edi
c000d9ee:	09 d1                	or     ecx,edx
c000d9f0:	75 2e                	jne    c000da20 <LogicalDisk::assignDriveLetter()+0xa4>
c000d9f2:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d9f6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d9fa:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000da00:	09 f2                	or     edx,esi
c000da02:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000da05:	89 15 60 88 02 c0    	mov    DWORD PTR ds:0xc0028860,edx
c000da0b:	89 1c b5 80 88 02 c0 	mov    DWORD PTR [esi*4-0x3ffd7780],ebx
c000da12:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000da16:	09 fa                	or     edx,edi
c000da18:	89 15 64 88 02 c0    	mov    DWORD PTR ds:0xc0028864,edx
c000da1e:	eb 0d                	jmp    c000da2d <LogicalDisk::assignDriveLetter()+0xb1>
c000da20:	8d 50 01             	lea    edx,[eax+0x1]
c000da23:	45                   	inc    ebp
c000da24:	88 d0                	mov    al,dl
c000da26:	80 fa 5b             	cmp    dl,0x5b
c000da29:	75 8e                	jne    c000d9b9 <LogicalDisk::assignDriveLetter()+0x3d>
c000da2b:	31 c0                	xor    eax,eax
c000da2d:	83 c4 14             	add    esp,0x14
c000da30:	5b                   	pop    ebx
c000da31:	5e                   	pop    esi
c000da32:	5f                   	pop    edi
c000da33:	5d                   	pop    ebp
c000da34:	c3                   	ret    
c000da35:	90                   	nop

c000da36 <LogicalDisk::mount()>:
c000da36:	56                   	push   esi
c000da37:	53                   	push   ebx
c000da38:	53                   	push   ebx
c000da39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da3d:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c000da43:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000da4d:	85 db                	test   ebx,ebx
c000da4f:	74 27                	je     c000da78 <LogicalDisk::mount()+0x42>
c000da51:	51                   	push   ecx
c000da52:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000da59:	8b 13                	mov    edx,DWORD PTR [ebx]
c000da5b:	83 e8 41             	sub    eax,0x41
c000da5e:	50                   	push   eax
c000da5f:	56                   	push   esi
c000da60:	53                   	push   ebx
c000da61:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000da64:	83 c4 10             	add    esp,0x10
c000da67:	84 c0                	test   al,al
c000da69:	74 08                	je     c000da73 <LogicalDisk::mount()+0x3d>
c000da6b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000da71:	eb 07                	jmp    c000da7a <LogicalDisk::mount()+0x44>
c000da73:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000da76:	eb d5                	jmp    c000da4d <LogicalDisk::mount()+0x17>
c000da78:	31 c0                	xor    eax,eax
c000da7a:	5a                   	pop    edx
c000da7b:	5b                   	pop    ebx
c000da7c:	5e                   	pop    esi
c000da7d:	c3                   	ret    

c000da7e <LogicalDisk::unmount()>:
c000da7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da82:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000da8c:	c3                   	ret    
c000da8d:	90                   	nop

c000da8e <LogicalDisk::eject()>:
c000da8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da92:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000da98:	8b 10                	mov    edx,DWORD PTR [eax]
c000da9a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000da9e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000daa1:	90                   	nop

c000daa2 <LogicalDisk::unassignDriveLetter()>:
c000daa2:	57                   	push   edi
c000daa3:	56                   	push   esi
c000daa4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000daa8:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000daaf:	85 c9                	test   ecx,ecx
c000dab1:	75 0f                	jne    c000dac2 <LogicalDisk::unassignDriveLetter()+0x20>
c000dab3:	c7 44 24 0c cc 17 02 c0 	mov    DWORD PTR [esp+0xc],0xc00217cc
c000dabb:	5e                   	pop    esi
c000dabc:	5f                   	pop    edi
c000dabd:	e9 83 38 00 00       	jmp    c0011345 <KePanic(char const*)>
c000dac2:	83 e9 41             	sub    ecx,0x41
c000dac5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000dacc:	b8 01 00 00 00       	mov    eax,0x1
c000dad1:	c7 04 8d 80 88 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7780],0x0
c000dadc:	d3 e0                	shl    eax,cl
c000dade:	89 c7                	mov    edi,eax
c000dae0:	f7 d0                	not    eax
c000dae2:	c1 ff 1f             	sar    edi,0x1f
c000dae5:	21 05 60 88 02 c0    	and    DWORD PTR ds:0xc0028860,eax
c000daeb:	89 fe                	mov    esi,edi
c000daed:	f7 d6                	not    esi
c000daef:	21 35 64 88 02 c0    	and    DWORD PTR ds:0xc0028864,esi
c000daf5:	5e                   	pop    esi
c000daf6:	5f                   	pop    edi
c000daf7:	c3                   	ret    

c000daf8 <LogicalDisk::read(unsigned long long, int, void*)>:
c000daf8:	57                   	push   edi
c000daf9:	56                   	push   esi
c000dafa:	53                   	push   ebx
c000dafb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000daff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db03:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000db07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000db0b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db11:	77 41                	ja     c000db54 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000db13:	99                   	cdq    
c000db14:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000db1a:	01 c8                	add    eax,ecx
c000db1c:	11 da                	adc    edx,ebx
c000db1e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000db24:	19 d7                	sbb    edi,edx
c000db26:	72 33                	jb     c000db5b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000db28:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000db2e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000db34:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000db38:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000db3c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000db42:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000db48:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db4c:	5b                   	pop    ebx
c000db4d:	5e                   	pop    esi
c000db4e:	5f                   	pop    edi
c000db4f:	e9 c6 0a 00 00       	jmp    c000e61a <VCache::read(unsigned long long, int, void*)>
c000db54:	b8 05 00 00 00       	mov    eax,0x5
c000db59:	eb 05                	jmp    c000db60 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000db5b:	b8 07 00 00 00       	mov    eax,0x7
c000db60:	5b                   	pop    ebx
c000db61:	5e                   	pop    esi
c000db62:	5f                   	pop    edi
c000db63:	c3                   	ret    

c000db64 <LogicalDisk::write(unsigned long long, int, void*)>:
c000db64:	57                   	push   edi
c000db65:	56                   	push   esi
c000db66:	53                   	push   ebx
c000db67:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000db6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db6f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000db73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000db77:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db7d:	77 41                	ja     c000dbc0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000db7f:	99                   	cdq    
c000db80:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000db86:	01 c8                	add    eax,ecx
c000db88:	11 da                	adc    edx,ebx
c000db8a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000db90:	19 d7                	sbb    edi,edx
c000db92:	72 33                	jb     c000dbc7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000db94:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000db9a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dba0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dba4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dba8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dbae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dbb4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbb8:	5b                   	pop    ebx
c000dbb9:	5e                   	pop    esi
c000dbba:	5f                   	pop    edi
c000dbbb:	e9 6c 09 00 00       	jmp    c000e52c <VCache::write(unsigned long long, int, void*)>
c000dbc0:	b8 05 00 00 00       	mov    eax,0x5
c000dbc5:	eb 05                	jmp    c000dbcc <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000dbc7:	b8 07 00 00 00       	mov    eax,0x7
c000dbcc:	5b                   	pop    ebx
c000dbcd:	5e                   	pop    esi
c000dbce:	5f                   	pop    edi
c000dbcf:	c3                   	ret    

c000dbd0 <Mouse::Mouse(char const*)>:
c000dbd0:	83 ec 0c             	sub    esp,0xc
c000dbd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbd7:	83 ec 08             	sub    esp,0x8
c000dbda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbde:	50                   	push   eax
c000dbdf:	e8 ca ec ff ff       	call   c000c8ae <Device::Device(char const*)>
c000dbe4:	83 c4 10             	add    esp,0x10
c000dbe7:	ba 20 18 02 c0       	mov    edx,0xc0021820
c000dbec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbf0:	89 10                	mov    DWORD PTR [eax],edx
c000dbf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbf6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000dc00:	90                   	nop
c000dc01:	83 c4 0c             	add    esp,0xc
c000dc04:	c3                   	ret    
c000dc05:	90                   	nop
c000dc06:	66 90                	xchg   ax,ax

c000dc08 <Mouse::~Mouse()>:
c000dc08:	83 ec 0c             	sub    esp,0xc
c000dc0b:	ba 20 18 02 c0       	mov    edx,0xc0021820
c000dc10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc14:	89 10                	mov    DWORD PTR [eax],edx
c000dc16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc1a:	83 ec 0c             	sub    esp,0xc
c000dc1d:	50                   	push   eax
c000dc1e:	e8 f5 e9 ff ff       	call   c000c618 <Device::~Device()>
c000dc23:	83 c4 10             	add    esp,0x10
c000dc26:	90                   	nop
c000dc27:	83 c4 0c             	add    esp,0xc
c000dc2a:	c3                   	ret    
c000dc2b:	90                   	nop

c000dc2c <Mouse::~Mouse()>:
c000dc2c:	83 ec 0c             	sub    esp,0xc
c000dc2f:	83 ec 0c             	sub    esp,0xc
c000dc32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc36:	e8 cd ff ff ff       	call   c000dc08 <Mouse::~Mouse()>
c000dc3b:	83 c4 10             	add    esp,0x10
c000dc3e:	83 ec 08             	sub    esp,0x8
c000dc41:	68 58 01 00 00       	push   0x158
c000dc46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc4a:	e8 c9 cb ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dc4f:	83 c4 10             	add    esp,0x10
c000dc52:	83 c4 0c             	add    esp,0xc
c000dc55:	c3                   	ret    

c000dc56 <NIC::getMAC()>:
c000dc56:	31 c0                	xor    eax,eax
c000dc58:	31 d2                	xor    edx,edx
c000dc5a:	c3                   	ret    
c000dc5b:	90                   	nop

c000dc5c <NIC::write(int, unsigned char*, int*)>:
c000dc5c:	b8 01 00 00 00       	mov    eax,0x1
c000dc61:	c3                   	ret    

c000dc62 <NIC::NIC(char const*)>:
c000dc62:	83 ec 0c             	sub    esp,0xc
c000dc65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc69:	83 ec 08             	sub    esp,0x8
c000dc6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc70:	50                   	push   eax
c000dc71:	e8 38 ec ff ff       	call   c000c8ae <Device::Device(char const*)>
c000dc76:	83 c4 10             	add    esp,0x10
c000dc79:	ba 4c 18 02 c0       	mov    edx,0xc002184c
c000dc7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc82:	89 10                	mov    DWORD PTR [eax],edx
c000dc84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc88:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dc92:	90                   	nop
c000dc93:	83 c4 0c             	add    esp,0xc
c000dc96:	c3                   	ret    
c000dc97:	90                   	nop

c000dc98 <NIC::~NIC()>:
c000dc98:	83 ec 0c             	sub    esp,0xc
c000dc9b:	ba 4c 18 02 c0       	mov    edx,0xc002184c
c000dca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dca4:	89 10                	mov    DWORD PTR [eax],edx
c000dca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcaa:	83 ec 0c             	sub    esp,0xc
c000dcad:	50                   	push   eax
c000dcae:	e8 65 e9 ff ff       	call   c000c618 <Device::~Device()>
c000dcb3:	83 c4 10             	add    esp,0x10
c000dcb6:	90                   	nop
c000dcb7:	83 c4 0c             	add    esp,0xc
c000dcba:	c3                   	ret    
c000dcbb:	90                   	nop

c000dcbc <NIC::~NIC()>:
c000dcbc:	83 ec 0c             	sub    esp,0xc
c000dcbf:	83 ec 0c             	sub    esp,0xc
c000dcc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcc6:	e8 cd ff ff ff       	call   c000dc98 <NIC::~NIC()>
c000dccb:	83 c4 10             	add    esp,0x10
c000dcce:	83 ec 08             	sub    esp,0x8
c000dcd1:	68 58 01 00 00       	push   0x158
c000dcd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcda:	e8 39 cb ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dcdf:	83 c4 10             	add    esp,0x10
c000dce2:	83 c4 0c             	add    esp,0xc
c000dce5:	c3                   	ret    

c000dce6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dce6:	55                   	push   ebp
c000dce7:	57                   	push   edi
c000dce8:	56                   	push   esi
c000dce9:	53                   	push   ebx
c000dcea:	81 ec 28 01 00 00    	sub    esp,0x128
c000dcf0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000dcf7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000dcfe:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000dd05:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000dd0c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd10:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd14:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dd1b:	e8 8a ec ff ff       	call   c000c9aa <Device::getName()>
c000dd20:	5a                   	pop    edx
c000dd21:	59                   	pop    ecx
c000dd22:	50                   	push   eax
c000dd23:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dd27:	55                   	push   ebp
c000dd28:	e8 13 29 ff ff       	call   c0000640 <strcpy>
c000dd2d:	5b                   	pop    ebx
c000dd2e:	58                   	pop    eax
c000dd2f:	68 78 18 02 c0       	push   0xc0021878
c000dd34:	55                   	push   ebp
c000dd35:	e8 06 2b ff ff       	call   c0000840 <strcat>
c000dd3a:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dd41:	e8 70 9d ff ff       	call   c0007ab6 <malloc>
c000dd46:	83 c4 0c             	add    esp,0xc
c000dd49:	89 c3                	mov    ebx,eax
c000dd4b:	57                   	push   edi
c000dd4c:	56                   	push   esi
c000dd4d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd51:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd55:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dd5c:	55                   	push   ebp
c000dd5d:	50                   	push   eax
c000dd5e:	e8 59 fb ff ff       	call   c000d8bc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dd63:	83 c4 14             	add    esp,0x14
c000dd66:	53                   	push   ebx
c000dd67:	e8 10 fc ff ff       	call   c000d97c <LogicalDisk::assignDriveLetter()>
c000dd6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dd6f:	e8 c2 fc ff ff       	call   c000da36 <LogicalDisk::mount()>
c000dd74:	58                   	pop    eax
c000dd75:	5a                   	pop    edx
c000dd76:	53                   	push   ebx
c000dd77:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dd7e:	e8 93 e9 ff ff       	call   c000c716 <Device::addChild(Device*)>
c000dd83:	81 c4 2c 01 00 00    	add    esp,0x12c
c000dd89:	5b                   	pop    ebx
c000dd8a:	5e                   	pop    esi
c000dd8b:	5f                   	pop    edi
c000dd8c:	5d                   	pop    ebp
c000dd8d:	c3                   	ret    

c000dd8e <createPartitionsForDisk(PhysicalDisk*)>:
c000dd8e:	55                   	push   ebp
c000dd8f:	57                   	push   edi
c000dd90:	56                   	push   esi
c000dd91:	53                   	push   ebx
c000dd92:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000dd98:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000dd9f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000dda5:	3d 00 02 00 00       	cmp    eax,0x200
c000ddaa:	74 27                	je     c000ddd3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ddac:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ddb2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ddb8:	83 ec 10             	sub    esp,0x10
c000ddbb:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ddbf:	99                   	cdq    
c000ddc0:	c1 e6 0a             	shl    esi,0xa
c000ddc3:	52                   	push   edx
c000ddc4:	89 fd                	mov    ebp,edi
c000ddc6:	50                   	push   eax
c000ddc7:	55                   	push   ebp
c000ddc8:	56                   	push   esi
c000ddc9:	e8 b2 14 01 00       	call   c001f280 <__udivdi3>
c000ddce:	e9 b9 00 00 00       	jmp    c000de8c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ddd3:	83 ec 0c             	sub    esp,0xc
c000ddd6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ddd8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000dddc:	56                   	push   esi
c000dddd:	6a 01                	push   0x1
c000dddf:	6a 00                	push   0x0
c000dde1:	6a 00                	push   0x0
c000dde3:	53                   	push   ebx
c000dde4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000dde7:	83 c4 20             	add    esp,0x20
c000ddea:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ddf2:	75 0a                	jne    c000ddfe <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ddf4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000ddfc:	74 2c                	je     c000de2a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ddfe:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de04:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de0a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de10:	83 ec 10             	sub    esp,0x10
c000de13:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de17:	89 f7                	mov    edi,esi
c000de19:	c1 e0 0a             	shl    eax,0xa
c000de1c:	c1 ff 1f             	sar    edi,0x1f
c000de1f:	57                   	push   edi
c000de20:	56                   	push   esi
c000de21:	52                   	push   edx
c000de22:	50                   	push   eax
c000de23:	e8 58 14 01 00       	call   c001f280 <__udivdi3>
c000de28:	eb 62                	jmp    c000de8c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000de2a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000de31:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000de38:	89 cf                	mov    edi,ecx
c000de3a:	83 e2 7f             	and    edx,0x7f
c000de3d:	83 e7 7f             	and    edi,0x7f
c000de40:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000de47:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000de4a:	83 e0 7f             	and    eax,0x7f
c000de4d:	8d 14 01             	lea    edx,[ecx+eax*1]
c000de50:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000de57:	83 e0 7f             	and    eax,0x7f
c000de5a:	01 d0                	add    eax,edx
c000de5c:	89 c5                	mov    ebp,eax
c000de5e:	84 c0                	test   al,al
c000de60:	74 41                	je     c000dea3 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000de62:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de68:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de6e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de74:	83 ec 10             	sub    esp,0x10
c000de77:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de7b:	89 f7                	mov    edi,esi
c000de7d:	c1 e0 0a             	shl    eax,0xa
c000de80:	c1 ff 1f             	sar    edi,0x1f
c000de83:	57                   	push   edi
c000de84:	56                   	push   esi
c000de85:	52                   	push   edx
c000de86:	50                   	push   eax
c000de87:	e8 f4 13 01 00       	call   c001f280 <__udivdi3>
c000de8c:	83 c4 14             	add    esp,0x14
c000de8f:	52                   	push   edx
c000de90:	50                   	push   eax
c000de91:	6a 00                	push   0x0
c000de93:	6a 00                	push   0x0
c000de95:	53                   	push   ebx
c000de96:	e8 4b fe ff ff       	call   c000dce6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000de9b:	83 c4 20             	add    esp,0x20
c000de9e:	e9 73 01 00 00       	jmp    c000e016 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000dea3:	89 f0                	mov    eax,esi
c000dea5:	31 c9                	xor    ecx,ecx
c000dea7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000deae:	75 02                	jne    c000deb2 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000deb0:	89 cd                	mov    ebp,ecx
c000deb2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000deb9:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000dec0:	c1 e2 08             	shl    edx,0x8
c000dec3:	c1 e6 10             	shl    esi,0x10
c000dec6:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000dece:	09 f2                	or     edx,esi
c000ded0:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000ded8:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000dedf:	83 c0 10             	add    eax,0x10
c000dee2:	09 f2                	or     edx,esi
c000dee4:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000deeb:	c1 e6 18             	shl    esi,0x18
c000deee:	09 f2                	or     edx,esi
c000def0:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000def7:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000defb:	c1 e6 10             	shl    esi,0x10
c000defe:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000df05:	c1 e2 08             	shl    edx,0x8
c000df08:	09 f2                	or     edx,esi
c000df0a:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000df11:	09 f2                	or     edx,esi
c000df13:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000df1a:	c1 e6 18             	shl    esi,0x18
c000df1d:	09 f2                	or     edx,esi
c000df1f:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000df23:	41                   	inc    ecx
c000df24:	83 f9 04             	cmp    ecx,0x4
c000df27:	0f 85 7a ff ff ff    	jne    c000dea7 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000df2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df31:	83 f0 01             	xor    eax,0x1
c000df34:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000df38:	75 4f                	jne    c000df89 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000df3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df3e:	83 f0 01             	xor    eax,0x1
c000df41:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000df45:	75 42                	jne    c000df89 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000df47:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000df4f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000df57:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000df5d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000df63:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000df69:	0f a4 c2 0a          	shld   edx,eax,0xa
c000df6d:	89 f7                	mov    edi,esi
c000df6f:	c1 e0 0a             	shl    eax,0xa
c000df72:	c1 ff 1f             	sar    edi,0x1f
c000df75:	57                   	push   edi
c000df76:	56                   	push   esi
c000df77:	52                   	push   edx
c000df78:	50                   	push   eax
c000df79:	e8 02 13 01 00       	call   c001f280 <__udivdi3>
c000df7e:	83 c4 10             	add    esp,0x10
c000df81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df85:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000df89:	89 e8                	mov    eax,ebp
c000df8b:	0f b6 e8             	movzx  ebp,al
c000df8e:	85 ed                	test   ebp,ebp
c000df90:	74 50                	je     c000dfe2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000df92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df96:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000df9a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df9e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000dfa2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfa6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfaa:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000dfae:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000dfb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dfb6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dfba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dfbe:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000dfc2:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000dfc6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000dfca:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000dfce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dfd2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000dfd6:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000dfda:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000dfde:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000dfe2:	31 ed                	xor    ebp,ebp
c000dfe4:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000dfe8:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000dfec:	89 f8                	mov    eax,edi
c000dfee:	09 f0                	or     eax,esi
c000dff0:	74 1e                	je     c000e010 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000dff2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000dff6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000dffa:	89 d1                	mov    ecx,edx
c000dffc:	09 c1                	or     ecx,eax
c000dffe:	74 10                	je     c000e010 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e000:	83 ec 0c             	sub    esp,0xc
c000e003:	57                   	push   edi
c000e004:	56                   	push   esi
c000e005:	52                   	push   edx
c000e006:	50                   	push   eax
c000e007:	53                   	push   ebx
c000e008:	e8 d9 fc ff ff       	call   c000dce6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e00d:	83 c4 20             	add    esp,0x20
c000e010:	45                   	inc    ebp
c000e011:	83 fd 04             	cmp    ebp,0x4
c000e014:	75 ce                	jne    c000dfe4 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e016:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e01c:	5b                   	pop    ebx
c000e01d:	5e                   	pop    esi
c000e01e:	5f                   	pop    edi
c000e01f:	5d                   	pop    ebp
c000e020:	c3                   	ret    
c000e021:	66 90                	xchg   ax,ax
c000e023:	90                   	nop

c000e024 <Serial::Serial(char const*)>:
c000e024:	83 ec 0c             	sub    esp,0xc
c000e027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e02b:	83 ec 08             	sub    esp,0x8
c000e02e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e032:	50                   	push   eax
c000e033:	e8 76 e8 ff ff       	call   c000c8ae <Device::Device(char const*)>
c000e038:	83 c4 10             	add    esp,0x10
c000e03b:	ba 8c 18 02 c0       	mov    edx,0xc002188c
c000e040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e044:	89 10                	mov    DWORD PTR [eax],edx
c000e046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e04a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e054:	90                   	nop
c000e055:	83 c4 0c             	add    esp,0xc
c000e058:	c3                   	ret    
c000e059:	90                   	nop
c000e05a:	66 90                	xchg   ax,ax

c000e05c <Serial::~Serial()>:
c000e05c:	83 ec 0c             	sub    esp,0xc
c000e05f:	ba 8c 18 02 c0       	mov    edx,0xc002188c
c000e064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e068:	89 10                	mov    DWORD PTR [eax],edx
c000e06a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e06e:	83 ec 0c             	sub    esp,0xc
c000e071:	50                   	push   eax
c000e072:	e8 a1 e5 ff ff       	call   c000c618 <Device::~Device()>
c000e077:	83 c4 10             	add    esp,0x10
c000e07a:	90                   	nop
c000e07b:	83 c4 0c             	add    esp,0xc
c000e07e:	c3                   	ret    
c000e07f:	90                   	nop

c000e080 <Serial::~Serial()>:
c000e080:	83 ec 0c             	sub    esp,0xc
c000e083:	83 ec 0c             	sub    esp,0xc
c000e086:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e08a:	e8 cd ff ff ff       	call   c000e05c <Serial::~Serial()>
c000e08f:	83 c4 10             	add    esp,0x10
c000e092:	83 ec 08             	sub    esp,0x8
c000e095:	68 58 01 00 00       	push   0x158
c000e09a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e09e:	e8 75 c7 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e0a3:	83 c4 10             	add    esp,0x10
c000e0a6:	83 c4 0c             	add    esp,0xc
c000e0a9:	c3                   	ret    
c000e0aa:	66 90                	xchg   ax,ax

c000e0ac <Timer::Timer(char const*)>:
c000e0ac:	83 ec 0c             	sub    esp,0xc
c000e0af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0b3:	83 ec 08             	sub    esp,0x8
c000e0b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0ba:	50                   	push   eax
c000e0bb:	e8 ee e7 ff ff       	call   c000c8ae <Device::Device(char const*)>
c000e0c0:	83 c4 10             	add    esp,0x10
c000e0c3:	ba d0 18 02 c0       	mov    edx,0xc00218d0
c000e0c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0cc:	89 10                	mov    DWORD PTR [eax],edx
c000e0ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0d2:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e0dc:	90                   	nop
c000e0dd:	83 c4 0c             	add    esp,0xc
c000e0e0:	c3                   	ret    
c000e0e1:	90                   	nop
c000e0e2:	66 90                	xchg   ax,ax

c000e0e4 <Timer::~Timer()>:
c000e0e4:	83 ec 0c             	sub    esp,0xc
c000e0e7:	ba d0 18 02 c0       	mov    edx,0xc00218d0
c000e0ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0f0:	89 10                	mov    DWORD PTR [eax],edx
c000e0f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0f6:	83 ec 0c             	sub    esp,0xc
c000e0f9:	50                   	push   eax
c000e0fa:	e8 19 e5 ff ff       	call   c000c618 <Device::~Device()>
c000e0ff:	83 c4 10             	add    esp,0x10
c000e102:	90                   	nop
c000e103:	83 c4 0c             	add    esp,0xc
c000e106:	c3                   	ret    
c000e107:	90                   	nop

c000e108 <Timer::~Timer()>:
c000e108:	83 ec 0c             	sub    esp,0xc
c000e10b:	83 ec 0c             	sub    esp,0xc
c000e10e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e112:	e8 cd ff ff ff       	call   c000e0e4 <Timer::~Timer()>
c000e117:	83 c4 10             	add    esp,0x10
c000e11a:	83 ec 08             	sub    esp,0x8
c000e11d:	68 5c 01 00 00       	push   0x15c
c000e122:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e126:	e8 ed c6 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e12b:	83 c4 10             	add    esp,0x10
c000e12e:	83 c4 0c             	add    esp,0xc
c000e131:	c3                   	ret    

c000e132 <Timer::read()>:
c000e132:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e136:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e13c:	c3                   	ret    

c000e13d <setupTimer(int)>:
c000e13d:	53                   	push   ebx
c000e13e:	83 ec 14             	sub    esp,0x14
c000e141:	68 5c 01 00 00       	push   0x15c
c000e146:	e8 6b 99 ff ff       	call   c0007ab6 <malloc>
c000e14b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e14e:	89 c3                	mov    ebx,eax
c000e150:	e8 8b 09 01 00       	call   c001eae0 <PIT::PIT()>
c000e155:	58                   	pop    eax
c000e156:	5a                   	pop    edx
c000e157:	53                   	push   ebx
c000e158:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000e15e:	e8 b3 e5 ff ff       	call   c000c716 <Device::addChild(Device*)>
c000e163:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e165:	6a 00                	push   0x0
c000e167:	6a 00                	push   0x0
c000e169:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e16d:	53                   	push   ebx
c000e16e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e171:	89 d8                	mov    eax,ebx
c000e173:	83 c4 28             	add    esp,0x28
c000e176:	5b                   	pop    ebx
c000e177:	c3                   	ret    

c000e178 <timerHandler(unsigned int)>:
c000e178:	56                   	push   esi
c000e179:	53                   	push   ebx
c000e17a:	51                   	push   ecx
c000e17b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e17f:	01 05 ec 88 02 c0    	add    DWORD PTR ds:0xc00288ec,eax
c000e185:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000e18c:	0f 84 4a 01 00 00    	je     c000e2dc <timerHandler(unsigned int)+0x164>
c000e192:	fa                   	cli    
c000e193:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e199:	83 ec 0c             	sub    esp,0xc
c000e19c:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c000e1a2:	68 d8 96 02 c0       	push   0xc00296d8
c000e1a7:	e8 a4 16 01 00       	call   c001f850 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e1ac:	83 c4 10             	add    esp,0x10
c000e1af:	84 c0                	test   al,al
c000e1b1:	0f 85 a1 00 00 00    	jne    c000e258 <timerHandler(unsigned int)+0xe0>
c000e1b7:	83 ec 0c             	sub    esp,0xc
c000e1ba:	68 d8 96 02 c0       	push   0xc00296d8
c000e1bf:	e8 a8 16 01 00       	call   c001f86c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e1c4:	83 c4 10             	add    esp,0x10
c000e1c7:	89 c6                	mov    esi,eax
c000e1c9:	8d 76 00             	lea    esi,[esi+0x0]
c000e1cc:	83 ec 0c             	sub    esp,0xc
c000e1cf:	68 d8 96 02 c0       	push   0xc00296d8
c000e1d4:	e8 93 16 01 00       	call   c001f86c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e1d9:	c7 04 24 d8 96 02 c0 	mov    DWORD PTR [esp],0xc00296d8
c000e1e0:	89 c3                	mov    ebx,eax
c000e1e2:	e8 8d 16 01 00       	call   c001f874 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e1e7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e1ea:	83 c4 10             	add    esp,0x10
c000e1ed:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c000e1f3:	77 23                	ja     c000e218 <timerHandler(unsigned int)+0xa0>
c000e1f5:	83 ec 0c             	sub    esp,0xc
c000e1f8:	53                   	push   ebx
c000e1f9:	e8 1e 7f 00 00       	call   c001611c <unblockTask(ThreadControlBlock*)>
c000e1fe:	83 c4 10             	add    esp,0x10
c000e201:	39 de                	cmp    esi,ebx
c000e203:	75 27                	jne    c000e22c <timerHandler(unsigned int)+0xb4>
c000e205:	83 ec 0c             	sub    esp,0xc
c000e208:	68 d8 96 02 c0       	push   0xc00296d8
c000e20d:	e8 5a 16 01 00       	call   c001f86c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e212:	89 c6                	mov    esi,eax
c000e214:	eb 12                	jmp    c000e228 <timerHandler(unsigned int)+0xb0>
c000e216:	66 90                	xchg   ax,ax
c000e218:	52                   	push   edx
c000e219:	52                   	push   edx
c000e21a:	53                   	push   ebx
c000e21b:	68 d8 96 02 c0       	push   0xc00296d8
c000e220:	e8 0b 17 01 00       	call   c001f930 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e225:	8d 76 00             	lea    esi,[esi+0x0]
c000e228:	83 c4 10             	add    esp,0x10
c000e22b:	90                   	nop
c000e22c:	83 ec 0c             	sub    esp,0xc
c000e22f:	68 d8 96 02 c0       	push   0xc00296d8
c000e234:	e8 17 16 01 00       	call   c001f850 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e239:	83 c4 10             	add    esp,0x10
c000e23c:	84 c0                	test   al,al
c000e23e:	75 18                	jne    c000e258 <timerHandler(unsigned int)+0xe0>
c000e240:	83 ec 0c             	sub    esp,0xc
c000e243:	68 d8 96 02 c0       	push   0xc00296d8
c000e248:	e8 1f 16 01 00       	call   c001f86c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e24d:	83 c4 10             	add    esp,0x10
c000e250:	39 f0                	cmp    eax,esi
c000e252:	0f 85 74 ff ff ff    	jne    c000e1cc <timerHandler(unsigned int)+0x54>
c000e258:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e25d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e261:	74 41                	je     c000e2a4 <timerHandler(unsigned int)+0x12c>
c000e263:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000e26a:	74 38                	je     c000e2a4 <timerHandler(unsigned int)+0x12c>
c000e26c:	fa                   	cli    
c000e26d:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e273:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c000e278:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e27e:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e281:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e287:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e28a:	72 08                	jb     c000e294 <timerHandler(unsigned int)+0x11c>
c000e28c:	e8 73 79 00 00       	call   c0015c04 <schedule()>
c000e291:	8d 76 00             	lea    esi,[esi+0x0]
c000e294:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e299:	48                   	dec    eax
c000e29a:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e29f:	75 03                	jne    c000e2a4 <timerHandler(unsigned int)+0x12c>
c000e2a1:	fb                   	sti    
c000e2a2:	66 90                	xchg   ax,ax
c000e2a4:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000e2a9:	48                   	dec    eax
c000e2aa:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000e2af:	75 1b                	jne    c000e2cc <timerHandler(unsigned int)+0x154>
c000e2b1:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c000e2b8:	74 12                	je     c000e2cc <timerHandler(unsigned int)+0x154>
c000e2ba:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000e2c4:	e8 3b 79 00 00       	call   c0015c04 <schedule()>
c000e2c9:	8d 76 00             	lea    esi,[esi+0x0]
c000e2cc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e2d1:	48                   	dec    eax
c000e2d2:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e2d7:	75 03                	jne    c000e2dc <timerHandler(unsigned int)+0x164>
c000e2d9:	fb                   	sti    
c000e2da:	66 90                	xchg   ax,ax
c000e2dc:	58                   	pop    eax
c000e2dd:	5b                   	pop    ebx
c000e2de:	5e                   	pop    esi
c000e2df:	c3                   	ret    

c000e2e0 <VCache::VCache(PhysicalDisk*)>:
c000e2e0:	53                   	push   ebx
c000e2e1:	83 ec 18             	sub    esp,0x18
c000e2e4:	ba 00 19 02 c0       	mov    edx,0xc0021900
c000e2e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2ed:	89 10                	mov    DWORD PTR [eax],edx
c000e2ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2f3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e2fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2fe:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e305:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e309:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e310:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e317:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e31b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e322:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e329:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e32d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e334:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e338:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e33c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e340:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e347:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e34e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e352:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e356:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e35a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e35e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e362:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e366:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e36a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e371:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e379:	83 ec 0c             	sub    esp,0xc
c000e37c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e380:	e8 31 97 ff ff       	call   c0007ab6 <malloc>
c000e385:	83 c4 10             	add    esp,0x10
c000e388:	89 c3                	mov    ebx,eax
c000e38a:	83 ec 0c             	sub    esp,0xc
c000e38d:	53                   	push   ebx
c000e38e:	e8 0d 76 00 00       	call   c00159a0 <Mutex::Mutex()>
c000e393:	83 c4 10             	add    esp,0x10
c000e396:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e39a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e39d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3a1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e3a5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e3a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3ac:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e3b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e3b7:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e3bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e3c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e3c8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e3ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e3d4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e3d8:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e3db:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e3de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3e2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e3e6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e3ea:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e3f0:	05 00 02 00 00       	add    eax,0x200
c000e3f5:	c1 e0 03             	shl    eax,0x3
c000e3f8:	83 ec 0c             	sub    esp,0xc
c000e3fb:	50                   	push   eax
c000e3fc:	e8 b5 96 ff ff       	call   c0007ab6 <malloc>
c000e401:	83 c4 10             	add    esp,0x10
c000e404:	89 c2                	mov    edx,eax
c000e406:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e40a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e40d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e411:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e418:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e41c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e420:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e424:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e42a:	89 d0                	mov    eax,edx
c000e42c:	c1 e0 02             	shl    eax,0x2
c000e42f:	01 d0                	add    eax,edx
c000e431:	c1 e0 04             	shl    eax,0x4
c000e434:	83 ec 0c             	sub    esp,0xc
c000e437:	50                   	push   eax
c000e438:	e8 79 96 ff ff       	call   c0007ab6 <malloc>
c000e43d:	83 c4 10             	add    esp,0x10
c000e440:	89 c2                	mov    edx,eax
c000e442:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e446:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e449:	90                   	nop
c000e44a:	83 c4 18             	add    esp,0x18
c000e44d:	5b                   	pop    ebx
c000e44e:	c3                   	ret    
c000e44f:	90                   	nop

c000e450 <VCache::invalidateReadBuffer()>:
c000e450:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e454:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e45a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e45e:	c3                   	ret    
c000e45f:	90                   	nop

c000e460 <VCache::writeWriteBuffer()>:
c000e460:	53                   	push   ebx
c000e461:	83 ec 08             	sub    esp,0x8
c000e464:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e468:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e46c:	74 1e                	je     c000e48c <VCache::writeWriteBuffer()+0x2c>
c000e46e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e471:	83 ec 0c             	sub    esp,0xc
c000e474:	8b 10                	mov    edx,DWORD PTR [eax]
c000e476:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e479:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e47c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e47f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e482:	50                   	push   eax
c000e483:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e486:	83 c4 20             	add    esp,0x20
c000e489:	8d 76 00             	lea    esi,[esi+0x0]
c000e48c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e493:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e49a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e49e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e4a5:	83 c4 08             	add    esp,0x8
c000e4a8:	5b                   	pop    ebx
c000e4a9:	c3                   	ret    
c000e4aa:	66 90                	xchg   ax,ax

c000e4ac <VCache::~VCache()>:
c000e4ac:	83 ec 0c             	sub    esp,0xc
c000e4af:	ba 00 19 02 c0       	mov    edx,0xc0021900
c000e4b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4b8:	89 10                	mov    DWORD PTR [eax],edx
c000e4ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4be:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e4c1:	0f b6 c0             	movzx  eax,al
c000e4c4:	85 c0                	test   eax,eax
c000e4c6:	74 10                	je     c000e4d8 <VCache::~VCache()+0x2c>
c000e4c8:	83 ec 0c             	sub    esp,0xc
c000e4cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4cf:	e8 8c ff ff ff       	call   c000e460 <VCache::writeWriteBuffer()>
c000e4d4:	83 c4 10             	add    esp,0x10
c000e4d7:	90                   	nop
c000e4d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4dc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	50                   	push   eax
c000e4e3:	e8 de 95 ff ff       	call   c0007ac6 <free>
c000e4e8:	83 c4 10             	add    esp,0x10
c000e4eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4ef:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e4f2:	83 ec 0c             	sub    esp,0xc
c000e4f5:	50                   	push   eax
c000e4f6:	e8 cb 95 ff ff       	call   c0007ac6 <free>
c000e4fb:	83 c4 10             	add    esp,0x10
c000e4fe:	90                   	nop
c000e4ff:	83 c4 0c             	add    esp,0xc
c000e502:	c3                   	ret    
c000e503:	90                   	nop

c000e504 <VCache::~VCache()>:
c000e504:	83 ec 0c             	sub    esp,0xc
c000e507:	83 ec 0c             	sub    esp,0xc
c000e50a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e50e:	e8 99 ff ff ff       	call   c000e4ac <VCache::~VCache()>
c000e513:	83 c4 10             	add    esp,0x10
c000e516:	83 ec 08             	sub    esp,0x8
c000e519:	6a 44                	push   0x44
c000e51b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e51f:	e8 f4 c2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e524:	83 c4 10             	add    esp,0x10
c000e527:	83 c4 0c             	add    esp,0xc
c000e52a:	c3                   	ret    
c000e52b:	90                   	nop

c000e52c <VCache::write(unsigned long long, int, void*)>:
c000e52c:	55                   	push   ebp
c000e52d:	57                   	push   edi
c000e52e:	56                   	push   esi
c000e52f:	53                   	push   ebx
c000e530:	83 ec 1c             	sub    esp,0x1c
c000e533:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e537:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e53b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e53f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e543:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e547:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e54b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e54f:	74 07                	je     c000e558 <VCache::write(unsigned long long, int, void*)+0x2c>
c000e551:	53                   	push   ebx
c000e552:	e8 f9 fe ff ff       	call   c000e450 <VCache::invalidateReadBuffer()>
c000e557:	58                   	pop    eax
c000e558:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e55c:	74 62                	je     c000e5c0 <VCache::write(unsigned long long, int, void*)+0x94>
c000e55e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e561:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e565:	99                   	cdq    
c000e566:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e56a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e56d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e570:	31 c1                	xor    ecx,eax
c000e572:	89 d0                	mov    eax,edx
c000e574:	89 ca                	mov    edx,ecx
c000e576:	31 e8                	xor    eax,ebp
c000e578:	09 c2                	or     edx,eax
c000e57a:	75 38                	jne    c000e5b4 <VCache::write(unsigned long long, int, void*)+0x88>
c000e57c:	83 ff 01             	cmp    edi,0x1
c000e57f:	75 33                	jne    c000e5b4 <VCache::write(unsigned long long, int, void*)+0x88>
c000e581:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e584:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e588:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e58e:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e591:	0f af c8             	imul   ecx,eax
c000e594:	01 cf                	add    edi,ecx
c000e596:	89 c1                	mov    ecx,eax
c000e598:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e59a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e59d:	40                   	inc    eax
c000e59e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e5a1:	83 f8 50             	cmp    eax,0x50
c000e5a4:	75 6a                	jne    c000e610 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e5a6:	83 ec 0c             	sub    esp,0xc
c000e5a9:	53                   	push   ebx
c000e5aa:	e8 b1 fe ff ff       	call   c000e460 <VCache::writeWriteBuffer()>
c000e5af:	83 c4 10             	add    esp,0x10
c000e5b2:	eb 5c                	jmp    c000e610 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e5b4:	83 ec 0c             	sub    esp,0xc
c000e5b7:	53                   	push   ebx
c000e5b8:	e8 a3 fe ff ff       	call   c000e460 <VCache::writeWriteBuffer()>
c000e5bd:	83 c4 10             	add    esp,0x10
c000e5c0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e5c3:	83 ff 4f             	cmp    edi,0x4f
c000e5c6:	7f 20                	jg     c000e5e8 <VCache::write(unsigned long long, int, void*)+0xbc>
c000e5c8:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e5cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e5cf:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e5d2:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000e5d5:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e5d9:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e5dc:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e5e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5e4:	eb 2a                	jmp    c000e610 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e5e6:	66 90                	xchg   ax,ax
c000e5e8:	8b 10                	mov    edx,DWORD PTR [eax]
c000e5ea:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e5ee:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e5f2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e5f6:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e5fa:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000e5fe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e602:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e605:	83 c4 1c             	add    esp,0x1c
c000e608:	5b                   	pop    ebx
c000e609:	5e                   	pop    esi
c000e60a:	5f                   	pop    edi
c000e60b:	5d                   	pop    ebp
c000e60c:	ff e0                	jmp    eax
c000e60e:	66 90                	xchg   ax,ax
c000e610:	83 c4 1c             	add    esp,0x1c
c000e613:	31 c0                	xor    eax,eax
c000e615:	5b                   	pop    ebx
c000e616:	5e                   	pop    esi
c000e617:	5f                   	pop    edi
c000e618:	5d                   	pop    ebp
c000e619:	c3                   	ret    

c000e61a <VCache::read(unsigned long long, int, void*)>:
c000e61a:	55                   	push   ebp
c000e61b:	57                   	push   edi
c000e61c:	56                   	push   esi
c000e61d:	53                   	push   ebx
c000e61e:	83 ec 1c             	sub    esp,0x1c
c000e621:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e625:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e629:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e62d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e631:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e635:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e639:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e63d:	74 0d                	je     c000e64c <VCache::read(unsigned long long, int, void*)+0x32>
c000e63f:	83 ec 0c             	sub    esp,0xc
c000e642:	57                   	push   edi
c000e643:	e8 18 fe ff ff       	call   c000e460 <VCache::writeWriteBuffer()>
c000e648:	83 c4 10             	add    esp,0x10
c000e64b:	90                   	nop
c000e64c:	83 fd 01             	cmp    ebp,0x1
c000e64f:	0f 85 93 00 00 00    	jne    c000e6e8 <VCache::read(unsigned long long, int, void*)+0xce>
c000e655:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e658:	89 04 24             	mov    DWORD PTR [esp],eax
c000e65b:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e662:	0f 85 80 00 00 00    	jne    c000e6e8 <VCache::read(unsigned long long, int, void*)+0xce>
c000e668:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000e66b:	89 e9                	mov    ecx,ebp
c000e66d:	f7 d9                	neg    ecx
c000e66f:	89 c8                	mov    eax,ecx
c000e671:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e675:	c1 f8 1f             	sar    eax,0x1f
c000e678:	21 d9                	and    ecx,ebx
c000e67a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e67e:	89 c8                	mov    eax,ecx
c000e680:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e684:	21 f1                	and    ecx,esi
c000e686:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e68a:	89 ca                	mov    edx,ecx
c000e68c:	74 2e                	je     c000e6bc <VCache::read(unsigned long long, int, void*)+0xa2>
c000e68e:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e691:	75 29                	jne    c000e6bc <VCache::read(unsigned long long, int, void*)+0xa2>
c000e693:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e696:	75 24                	jne    c000e6bc <VCache::read(unsigned long long, int, void*)+0xa2>
c000e698:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e69b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e6a1:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e6a4:	8d 70 ff             	lea    esi,[eax-0x1]
c000e6a7:	21 f3                	and    ebx,esi
c000e6a9:	0f af d9             	imul   ebx,ecx
c000e6ac:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e6af:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e6b3:	89 de                	mov    esi,ebx
c000e6b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e6b7:	31 c0                	xor    eax,eax
c000e6b9:	eb 61                	jmp    c000e71c <VCache::read(unsigned long long, int, void*)+0x102>
c000e6bb:	90                   	nop
c000e6bc:	83 ec 0c             	sub    esp,0xc
c000e6bf:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e6c3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e6c7:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e6ca:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e6cd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e6cf:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e6d2:	55                   	push   ebp
c000e6d3:	52                   	push   edx
c000e6d4:	50                   	push   eax
c000e6d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6d9:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e6dc:	83 c4 20             	add    esp,0x20
c000e6df:	85 c0                	test   eax,eax
c000e6e1:	75 39                	jne    c000e71c <VCache::read(unsigned long long, int, void*)+0x102>
c000e6e3:	eb b3                	jmp    c000e698 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e6e5:	8d 76 00             	lea    esi,[esi+0x0]
c000e6e8:	83 ec 0c             	sub    esp,0xc
c000e6eb:	57                   	push   edi
c000e6ec:	e8 5f fd ff ff       	call   c000e450 <VCache::invalidateReadBuffer()>
c000e6f1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e6f4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e6f8:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6fa:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e6fe:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e702:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e706:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e70a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e70e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e711:	83 c4 2c             	add    esp,0x2c
c000e714:	5b                   	pop    ebx
c000e715:	5e                   	pop    esi
c000e716:	5f                   	pop    edi
c000e717:	5d                   	pop    ebp
c000e718:	ff e0                	jmp    eax
c000e71a:	66 90                	xchg   ax,ax
c000e71c:	83 c4 1c             	add    esp,0x1c
c000e71f:	5b                   	pop    ebx
c000e720:	5e                   	pop    esi
c000e721:	5f                   	pop    edi
c000e722:	5d                   	pop    ebp
c000e723:	c3                   	ret    

c000e724 <Video::putrect(int, int, int, int, unsigned int)>:
c000e724:	55                   	push   ebp
c000e725:	57                   	push   edi
c000e726:	56                   	push   esi
c000e727:	53                   	push   ebx
c000e728:	83 ec 1c             	sub    esp,0x1c
c000e72b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e72f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e733:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e737:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e73b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e73f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e743:	01 df                	add    edi,ebx
c000e745:	39 fb                	cmp    ebx,edi
c000e747:	7d 1f                	jge    c000e768 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e749:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e74d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e751:	7d 12                	jge    c000e765 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e753:	8b 16                	mov    edx,DWORD PTR [esi]
c000e755:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e759:	53                   	push   ebx
c000e75a:	55                   	push   ebp
c000e75b:	45                   	inc    ebp
c000e75c:	56                   	push   esi
c000e75d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e760:	83 c4 10             	add    esp,0x10
c000e763:	eb e8                	jmp    c000e74d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e765:	43                   	inc    ebx
c000e766:	eb dd                	jmp    c000e745 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e768:	83 c4 1c             	add    esp,0x1c
c000e76b:	5b                   	pop    ebx
c000e76c:	5e                   	pop    esi
c000e76d:	5f                   	pop    edi
c000e76e:	5d                   	pop    ebp
c000e76f:	c3                   	ret    

c000e770 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e770:	55                   	push   ebp
c000e771:	57                   	push   edi
c000e772:	31 ff                	xor    edi,edi
c000e774:	56                   	push   esi
c000e775:	53                   	push   ebx
c000e776:	83 ec 1c             	sub    esp,0x1c
c000e779:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e77d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e781:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e788:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e791:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e795:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e799:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e79c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e7a0:	01 f9                	add    ecx,edi
c000e7a2:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e7a6:	7d 2f                	jge    c000e7d7 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e7a8:	31 f6                	xor    esi,esi
c000e7aa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e7ae:	01 f2                	add    edx,esi
c000e7b0:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e7b4:	7d 1a                	jge    c000e7d0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e7b6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e7b9:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e7bc:	46                   	inc    esi
c000e7bd:	51                   	push   ecx
c000e7be:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e7c2:	52                   	push   edx
c000e7c3:	55                   	push   ebp
c000e7c4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e7c7:	83 c4 10             	add    esp,0x10
c000e7ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e7ce:	eb da                	jmp    c000e7aa <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e7d0:	47                   	inc    edi
c000e7d1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e7d5:	eb c5                	jmp    c000e79c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e7d7:	83 c4 1c             	add    esp,0x1c
c000e7da:	5b                   	pop    ebx
c000e7db:	5e                   	pop    esi
c000e7dc:	5f                   	pop    edi
c000e7dd:	5d                   	pop    ebp
c000e7de:	c3                   	ret    
c000e7df:	90                   	nop

c000e7e0 <Video::blit(unsigned int*, int, int, int, int)>:
c000e7e0:	55                   	push   ebp
c000e7e1:	57                   	push   edi
c000e7e2:	56                   	push   esi
c000e7e3:	53                   	push   ebx
c000e7e4:	83 ec 1c             	sub    esp,0x1c
c000e7e7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7eb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e7ef:	85 c0                	test   eax,eax
c000e7f1:	79 02                	jns    c000e7f5 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000e7f3:	31 c0                	xor    eax,eax
c000e7f5:	c1 e0 02             	shl    eax,0x2
c000e7f8:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000e7fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e800:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e804:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000e808:	39 d8                	cmp    eax,ebx
c000e80a:	7e 49                	jle    c000e855 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e80c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e812:	7c 41                	jl     c000e855 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e814:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e818:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e81c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e820:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000e824:	39 f9                	cmp    ecx,edi
c000e826:	7e 22                	jle    c000e84a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000e828:	83 c5 04             	add    ebp,0x4
c000e82b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e831:	7c 14                	jl     c000e847 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000e833:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e835:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000e838:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e83c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e840:	56                   	push   esi
c000e841:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e844:	83 c4 10             	add    esp,0x10
c000e847:	47                   	inc    edi
c000e848:	eb d2                	jmp    c000e81c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000e84a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e84e:	43                   	inc    ebx
c000e84f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e853:	eb ab                	jmp    c000e800 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000e855:	83 c4 1c             	add    esp,0x1c
c000e858:	5b                   	pop    ebx
c000e859:	5e                   	pop    esi
c000e85a:	5f                   	pop    edi
c000e85b:	5d                   	pop    ebp
c000e85c:	c3                   	ret    
c000e85d:	90                   	nop

c000e85e <Video::clearScreen(unsigned int)>:
c000e85e:	57                   	push   edi
c000e85f:	56                   	push   esi
c000e860:	53                   	push   ebx
c000e861:	31 db                	xor    ebx,ebx
c000e863:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e867:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e86d:	7e 1f                	jle    c000e88e <Video::clearScreen(unsigned int)+0x30>
c000e86f:	31 ff                	xor    edi,edi
c000e871:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e877:	7e 12                	jle    c000e88b <Video::clearScreen(unsigned int)+0x2d>
c000e879:	8b 06                	mov    eax,DWORD PTR [esi]
c000e87b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e87f:	53                   	push   ebx
c000e880:	57                   	push   edi
c000e881:	47                   	inc    edi
c000e882:	56                   	push   esi
c000e883:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e886:	83 c4 10             	add    esp,0x10
c000e889:	eb e6                	jmp    c000e871 <Video::clearScreen(unsigned int)+0x13>
c000e88b:	43                   	inc    ebx
c000e88c:	eb d9                	jmp    c000e867 <Video::clearScreen(unsigned int)+0x9>
c000e88e:	5b                   	pop    ebx
c000e88f:	5e                   	pop    esi
c000e890:	5f                   	pop    edi
c000e891:	c3                   	ret    

c000e892 <Video::putpixel(int, int, unsigned int)>:
c000e892:	c7 44 24 04 08 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021908
c000e89a:	e9 a6 2a 00 00       	jmp    c0011345 <KePanic(char const*)>
c000e89f:	90                   	nop

c000e8a0 <Video::readPixelApprox(int, int)>:
c000e8a0:	83 ec 18             	sub    esp,0x18
c000e8a3:	68 29 19 02 c0       	push   0xc0021929
c000e8a8:	e8 98 2a 00 00       	call   c0011345 <KePanic(char const*)>
c000e8ad:	31 c0                	xor    eax,eax
c000e8af:	83 c4 1c             	add    esp,0x1c
c000e8b2:	c3                   	ret    
c000e8b3:	90                   	nop

c000e8b4 <Video::Video(char const*)>:
c000e8b4:	83 ec 0c             	sub    esp,0xc
c000e8b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8bb:	83 ec 08             	sub    esp,0x8
c000e8be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8c2:	50                   	push   eax
c000e8c3:	e8 e6 df ff ff       	call   c000c8ae <Device::Device(char const*)>
c000e8c8:	83 c4 10             	add    esp,0x10
c000e8cb:	ba a4 19 02 c0       	mov    edx,0xc00219a4
c000e8d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d4:	89 10                	mov    DWORD PTR [eax],edx
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e8e4:	90                   	nop
c000e8e5:	83 c4 0c             	add    esp,0xc
c000e8e8:	c3                   	ret    
c000e8e9:	90                   	nop

c000e8ea <Video::~Video()>:
c000e8ea:	83 ec 0c             	sub    esp,0xc
c000e8ed:	ba a4 19 02 c0       	mov    edx,0xc00219a4
c000e8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f6:	89 10                	mov    DWORD PTR [eax],edx
c000e8f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8fc:	83 ec 0c             	sub    esp,0xc
c000e8ff:	50                   	push   eax
c000e900:	e8 13 dd ff ff       	call   c000c618 <Device::~Device()>
c000e905:	83 c4 10             	add    esp,0x10
c000e908:	90                   	nop
c000e909:	83 c4 0c             	add    esp,0xc
c000e90c:	c3                   	ret    
c000e90d:	90                   	nop

c000e90e <Video::~Video()>:
c000e90e:	83 ec 0c             	sub    esp,0xc
c000e911:	83 ec 0c             	sub    esp,0xc
c000e914:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e918:	e8 cd ff ff ff       	call   c000e8ea <Video::~Video()>
c000e91d:	83 c4 10             	add    esp,0x10
c000e920:	83 ec 08             	sub    esp,0x8
c000e923:	68 64 01 00 00       	push   0x164
c000e928:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e92c:	e8 e7 be ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e931:	83 c4 10             	add    esp,0x10
c000e934:	83 c4 0c             	add    esp,0xc
c000e937:	c3                   	ret    

c000e938 <Video::isMonochrome()>:
c000e938:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e93c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e942:	c3                   	ret    
c000e943:	90                   	nop

c000e944 <Video::getWidth()>:
c000e944:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e948:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e94e:	c3                   	ret    
c000e94f:	90                   	nop

c000e950 <Video::getHeight()>:
c000e950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e954:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e95a:	c3                   	ret    
c000e95b:	90                   	nop

c000e95c <Video::drawCursor(int, int, unsigned int*, int)>:
c000e95c:	55                   	push   ebp
c000e95d:	57                   	push   edi
c000e95e:	56                   	push   esi
c000e95f:	53                   	push   ebx
c000e960:	83 ec 2c             	sub    esp,0x2c
c000e963:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e967:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e96b:	83 f8 01             	cmp    eax,0x1
c000e96e:	19 c9                	sbb    ecx,ecx
c000e970:	31 db                	xor    ebx,ebx
c000e972:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e976:	89 cd                	mov    ebp,ecx
c000e978:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e980:	f7 d5                	not    ebp
c000e982:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e988:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e98c:	01 d8                	add    eax,ebx
c000e98e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e992:	56                   	push   esi
c000e993:	e8 b8 ff ff ff       	call   c000e950 <Video::getHeight()>
c000e998:	59                   	pop    ecx
c000e999:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e99d:	7e 70                	jle    c000ea0f <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e99f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e9a3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e9a7:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e9aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e9ae:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e9b2:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e9b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e9bd:	89 f8                	mov    eax,edi
c000e9bf:	83 c0 20             	add    eax,0x20
c000e9c2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e9c6:	56                   	push   esi
c000e9c7:	e8 78 ff ff ff       	call   c000e944 <Video::getWidth()>
c000e9cc:	5a                   	pop    edx
c000e9cd:	39 c7                	cmp    edi,eax
c000e9cf:	7d 34                	jge    c000ea05 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e9d1:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e9d6:	74 05                	je     c000e9dd <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e9d8:	8b 06                	mov    eax,DWORD PTR [esi]
c000e9da:	55                   	push   ebp
c000e9db:	eb 0d                	jmp    c000e9ea <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e9dd:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e9e2:	74 12                	je     c000e9f6 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e9e4:	8b 06                	mov    eax,DWORD PTR [esi]
c000e9e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e9ea:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e9ee:	57                   	push   edi
c000e9ef:	56                   	push   esi
c000e9f0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e9f3:	83 c4 10             	add    esp,0x10
c000e9f6:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e9fa:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e9fe:	47                   	inc    edi
c000e9ff:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000ea03:	75 c1                	jne    c000e9c6 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ea05:	43                   	inc    ebx
c000ea06:	83 fb 20             	cmp    ebx,0x20
c000ea09:	0f 85 79 ff ff ff    	jne    c000e988 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ea0f:	83 c4 2c             	add    esp,0x2c
c000ea12:	5b                   	pop    ebx
c000ea13:	5e                   	pop    esi
c000ea14:	5f                   	pop    edi
c000ea15:	5d                   	pop    ebp
c000ea16:	c3                   	ret    
c000ea17:	90                   	nop

c000ea18 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ea18:	55                   	push   ebp
c000ea19:	57                   	push   edi
c000ea1a:	56                   	push   esi
c000ea1b:	53                   	push   ebx
c000ea1c:	83 ec 28             	sub    esp,0x28
c000ea1f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ea23:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ea27:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000ea2b:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000ea2f:	c1 e6 08             	shl    esi,0x8
c000ea32:	01 c6                	add    esi,eax
c000ea34:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000ea38:	c1 e0 08             	shl    eax,0x8
c000ea3b:	01 d0                	add    eax,edx
c000ea3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea45:	0f af c6             	imul   eax,esi
c000ea48:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ea4f:	50                   	push   eax
c000ea50:	e8 61 90 ff ff       	call   c0007ab6 <malloc>
c000ea55:	83 c4 10             	add    esp,0x10
c000ea58:	89 c7                	mov    edi,eax
c000ea5a:	85 c0                	test   eax,eax
c000ea5c:	75 10                	jne    c000ea6e <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ea5e:	83 ec 0c             	sub    esp,0xc
c000ea61:	68 54 19 02 c0       	push   0xc0021954
c000ea66:	e8 da 28 00 00       	call   c0011345 <KePanic(char const*)>
c000ea6b:	83 c4 10             	add    esp,0x10
c000ea6e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ea72:	ba 12 00 00 00       	mov    edx,0x12
c000ea77:	85 c0                	test   eax,eax
c000ea79:	74 11                	je     c000ea8c <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000ea7b:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ea7f:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ea83:	c1 fa 03             	sar    edx,0x3
c000ea86:	0f af d1             	imul   edx,ecx
c000ea89:	83 c2 12             	add    edx,0x12
c000ea8c:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000ea90:	74 04                	je     c000ea96 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000ea92:	85 f6                	test   esi,esi
c000ea94:	75 12                	jne    c000eaa8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000ea96:	83 ec 0c             	sub    esp,0xc
c000ea99:	68 64 19 02 c0       	push   0xc0021964
c000ea9e:	e8 a2 be ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000eaa3:	e9 b8 00 00 00       	jmp    c000eb60 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000eaa8:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000eaac:	83 f9 02             	cmp    ecx,0x2
c000eaaf:	0f 85 96 00 00 00    	jne    c000eb4b <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000eab5:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000eaba:	75 0e                	jne    c000eaca <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eabc:	85 c0                	test   eax,eax
c000eabe:	75 0a                	jne    c000eaca <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eac0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000eac3:	83 e8 18             	sub    eax,0x18
c000eac6:	a8 f7                	test   al,0xf7
c000eac8:	74 0a                	je     c000ead4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000eaca:	83 ec 0c             	sub    esp,0xc
c000eacd:	68 79 19 02 c0       	push   0xc0021979
c000ead2:	eb 7f                	jmp    c000eb53 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000ead4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000eadc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000eae4:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000eae8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000eaf0:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000eaf4:	75 0c                	jne    c000eb02 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000eaf6:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000eafb:	c1 e0 18             	shl    eax,0x18
c000eafe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eb02:	45                   	inc    ebp
c000eb03:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000eb08:	c1 e1 10             	shl    ecx,0x10
c000eb0b:	89 c8                	mov    eax,ecx
c000eb0d:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000eb12:	c1 e1 08             	shl    ecx,0x8
c000eb15:	09 c1                	or     ecx,eax
c000eb17:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000eb1b:	09 c1                	or     ecx,eax
c000eb1d:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000eb21:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000eb25:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000eb29:	c1 f8 03             	sar    eax,0x3
c000eb2c:	01 c2                	add    edx,eax
c000eb2e:	89 e8                	mov    eax,ebp
c000eb30:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000eb34:	39 c6                	cmp    esi,eax
c000eb36:	7f b0                	jg     c000eae8 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000eb38:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000eb3c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eb40:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000eb43:	7e 22                	jle    c000eb67 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000eb45:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000eb49:	eb 99                	jmp    c000eae4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000eb4b:	50                   	push   eax
c000eb4c:	50                   	push   eax
c000eb4d:	51                   	push   ecx
c000eb4e:	68 87 19 02 c0       	push   0xc0021987
c000eb53:	e8 ed bd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000eb58:	89 3c 24             	mov    DWORD PTR [esp],edi
c000eb5b:	e8 66 8f ff ff       	call   c0007ac6 <free>
c000eb60:	83 c4 10             	add    esp,0x10
c000eb63:	31 ff                	xor    edi,edi
c000eb65:	eb 0f                	jmp    c000eb76 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000eb67:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb6b:	89 30                	mov    DWORD PTR [eax],esi
c000eb6d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eb71:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000eb74:	89 30                	mov    DWORD PTR [eax],esi
c000eb76:	83 c4 1c             	add    esp,0x1c
c000eb79:	89 f8                	mov    eax,edi
c000eb7b:	5b                   	pop    ebx
c000eb7c:	5e                   	pop    esi
c000eb7d:	5f                   	pop    edi
c000eb7e:	5d                   	pop    ebp
c000eb7f:	c3                   	ret    

c000eb80 <Video::putTGA(int, int, unsigned char*, int)>:
c000eb80:	55                   	push   ebp
c000eb81:	57                   	push   edi
c000eb82:	56                   	push   esi
c000eb83:	53                   	push   ebx
c000eb84:	83 ec 28             	sub    esp,0x28
c000eb87:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000eb8b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eb8f:	50                   	push   eax
c000eb90:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eb94:	50                   	push   eax
c000eb95:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eb99:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eb9d:	56                   	push   esi
c000eb9e:	e8 75 fe ff ff       	call   c000ea18 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000eba3:	83 c4 20             	add    esp,0x20
c000eba6:	85 c0                	test   eax,eax
c000eba8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ebac:	74 35                	je     c000ebe3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ebae:	89 c7                	mov    edi,eax
c000ebb0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ebb4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ebb8:	39 d8                	cmp    eax,ebx
c000ebba:	7e 27                	jle    c000ebe3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ebbc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ebc0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ebc4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ebc8:	39 e8                	cmp    eax,ebp
c000ebca:	7e 14                	jle    c000ebe0 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ebcc:	8b 06                	mov    eax,DWORD PTR [esi]
c000ebce:	83 c7 04             	add    edi,0x4
c000ebd1:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000ebd4:	53                   	push   ebx
c000ebd5:	55                   	push   ebp
c000ebd6:	45                   	inc    ebp
c000ebd7:	56                   	push   esi
c000ebd8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ebdb:	83 c4 10             	add    esp,0x10
c000ebde:	eb e0                	jmp    c000ebc0 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ebe0:	43                   	inc    ebx
c000ebe1:	eb cd                	jmp    c000ebb0 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ebe3:	83 c4 1c             	add    esp,0x1c
c000ebe6:	5b                   	pop    ebx
c000ebe7:	5e                   	pop    esi
c000ebe8:	5f                   	pop    edi
c000ebe9:	5d                   	pop    ebp
c000ebea:	c3                   	ret    
c000ebeb:	90                   	nop

c000ebec <ACPI::close(int, int, void*)>:
c000ebec:	83 ec 1c             	sub    esp,0x1c
c000ebef:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ebf7:	74 0b                	je     c000ec04 <ACPI::close(int, int, void*)+0x18>
c000ebf9:	b8 00 00 00 00       	mov    eax,0x0
c000ebfe:	e9 99 00 00 00       	jmp    c000ec9c <ACPI::close(int, int, void*)+0xb0>
c000ec03:	90                   	nop
c000ec04:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ec09:	75 29                	jne    c000ec34 <ACPI::close(int, int, void*)+0x48>
c000ec0b:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ec10:	85 c0                	test   eax,eax
c000ec12:	74 08                	je     c000ec1c <ACPI::close(int, int, void*)+0x30>
c000ec14:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ec19:	ff d0                	call   eax
c000ec1b:	90                   	nop
c000ec1c:	83 ec 0c             	sub    esp,0xc
c000ec1f:	68 e8 19 02 c0       	push   0xc00219e8
c000ec24:	e8 1c 27 00 00       	call   c0011345 <KePanic(char const*)>
c000ec29:	83 c4 10             	add    esp,0x10
c000ec2c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ec31:	eb 69                	jmp    c000ec9c <ACPI::close(int, int, void*)+0xb0>
c000ec33:	90                   	nop
c000ec34:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ec39:	75 59                	jne    c000ec94 <ACPI::close(int, int, void*)+0xa8>
c000ec3b:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000ec40:	85 c0                	test   eax,eax
c000ec42:	74 08                	je     c000ec4c <ACPI::close(int, int, void*)+0x60>
c000ec44:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000ec49:	ff d0                	call   eax
c000ec4b:	90                   	nop
c000ec4c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ec51:	8d 76 00             	lea    esi,[esi+0x0]
c000ec54:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ec59:	83 e0 02             	and    eax,0x2
c000ec5c:	74 1e                	je     c000ec7c <ACPI::close(int, int, void*)+0x90>
c000ec5e:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ec65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec69:	89 c2                	mov    edx,eax
c000ec6b:	ec                   	in     al,dx
c000ec6c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ec70:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ec74:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ec78:	eb da                	jmp    c000ec54 <ACPI::close(int, int, void*)+0x68>
c000ec7a:	66 90                	xchg   ax,ax
c000ec7c:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ec83:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ec88:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ec8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec90:	ee                   	out    dx,al
c000ec91:	8d 76 00             	lea    esi,[esi+0x0]
c000ec94:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ec99:	8d 76 00             	lea    esi,[esi+0x0]
c000ec9c:	83 c4 1c             	add    esp,0x1c
c000ec9f:	c3                   	ret    

c000eca0 <findRSDP()>:
c000eca0:	83 ec 1c             	sub    esp,0x1c
c000eca3:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eca8:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ecae:	83 e0 04             	and    eax,0x4
c000ecb1:	0f b6 c0             	movzx  eax,al
c000ecb4:	85 c0                	test   eax,eax
c000ecb6:	75 08                	jne    c000ecc0 <findRSDP()+0x20>
c000ecb8:	b8 00 00 00 00       	mov    eax,0x0
c000ecbd:	eb 75                	jmp    c000ed34 <findRSDP()+0x94>
c000ecbf:	90                   	nop
c000ecc0:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000ecc5:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ecca:	7f 1c                	jg     c000ece8 <findRSDP()+0x48>
c000eccc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ecd1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ecd7:	83 e2 fb             	and    edx,0xfffffffb
c000ecda:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ece0:	b8 00 00 00 00       	mov    eax,0x0
c000ece5:	eb 4d                	jmp    c000ed34 <findRSDP()+0x94>
c000ece7:	90                   	nop
c000ece8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ecf0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ecf8:	77 32                	ja     c000ed2c <findRSDP()+0x8c>
c000ecfa:	83 ec 04             	sub    esp,0x4
c000ecfd:	6a 08                	push   0x8
c000ecff:	68 83 1a 02 c0       	push   0xc0021a83
c000ed04:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed08:	e8 73 16 ff ff       	call   c0000380 <memcmp>
c000ed0d:	83 c4 10             	add    esp,0x10
c000ed10:	85 c0                	test   eax,eax
c000ed12:	0f 94 c0             	sete   al
c000ed15:	0f b6 c0             	movzx  eax,al
c000ed18:	85 c0                	test   eax,eax
c000ed1a:	74 08                	je     c000ed24 <findRSDP()+0x84>
c000ed1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed20:	eb 12                	jmp    c000ed34 <findRSDP()+0x94>
c000ed22:	66 90                	xchg   ax,ax
c000ed24:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ed29:	eb c5                	jmp    c000ecf0 <findRSDP()+0x50>
c000ed2b:	90                   	nop
c000ed2c:	b8 00 00 00 00       	mov    eax,0x0
c000ed31:	8d 76 00             	lea    esi,[esi+0x0]
c000ed34:	83 c4 1c             	add    esp,0x1c
c000ed37:	c3                   	ret    

c000ed38 <loadACPITables(unsigned char*)>:
c000ed38:	57                   	push   edi
c000ed39:	56                   	push   esi
c000ed3a:	53                   	push   ebx
c000ed3b:	83 ec 60             	sub    esp,0x60
c000ed3e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ed43:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ed49:	83 e0 04             	and    eax,0x4
c000ed4c:	0f b6 c0             	movzx  eax,al
c000ed4f:	85 c0                	test   eax,eax
c000ed51:	0f 84 41 02 00 00    	je     c000ef98 <loadACPITables(unsigned char*)+0x260>
c000ed57:	a0 20 8b 02 c0       	mov    al,ds:0xc0028b20
c000ed5c:	0f b6 c0             	movzx  eax,al
c000ed5f:	85 c0                	test   eax,eax
c000ed61:	74 79                	je     c000eddc <loadACPITables(unsigned char*)+0xa4>
c000ed63:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ed67:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ed6b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ed6f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ed72:	83 e8 24             	sub    eax,0x24
c000ed75:	c1 e8 03             	shr    eax,0x3
c000ed78:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ed7c:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000ed84:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ed88:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000ed8c:	0f 8d ba 00 00 00    	jge    c000ee4c <loadACPITables(unsigned char*)+0x114>
c000ed92:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ed96:	83 c0 24             	add    eax,0x24
c000ed99:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ed9d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000eda1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000eda5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000eda9:	c1 e0 03             	shl    eax,0x3
c000edac:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000edb0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000edb4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000edb7:	8b 00                	mov    eax,DWORD PTR [eax]
c000edb9:	89 c1                	mov    ecx,eax
c000edbb:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000edc0:	8d 50 01             	lea    edx,[eax+0x1]
c000edc3:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000edc9:	89 ca                	mov    edx,ecx
c000edcb:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000edd2:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000edd7:	eb ab                	jmp    c000ed84 <loadACPITables(unsigned char*)+0x4c>
c000edd9:	8d 76 00             	lea    esi,[esi+0x0]
c000eddc:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ede0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ede4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ede8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000edeb:	83 e8 24             	sub    eax,0x24
c000edee:	c1 e8 02             	shr    eax,0x2
c000edf1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000edf5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000edfd:	8d 76 00             	lea    esi,[esi+0x0]
c000ee00:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ee04:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ee08:	7d 42                	jge    c000ee4c <loadACPITables(unsigned char*)+0x114>
c000ee0a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ee0e:	83 c0 24             	add    eax,0x24
c000ee11:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ee15:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee19:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ee1d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ee21:	c1 e0 02             	shl    eax,0x2
c000ee24:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ee28:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee2c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ee2e:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ee33:	8d 50 01             	lea    edx,[eax+0x1]
c000ee36:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ee3c:	89 ca                	mov    edx,ecx
c000ee3e:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ee45:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000ee4a:	eb b4                	jmp    c000ee00 <loadACPITables(unsigned char*)+0xc8>
c000ee4c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000ee54:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ee59:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000ee5d:	0f 8d 39 01 00 00    	jge    c000ef9c <loadACPITables(unsigned char*)+0x264>
c000ee63:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ee67:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000ee6e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ee72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee76:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ee7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee7e:	25 ff 0f 00 00       	and    eax,0xfff
c000ee83:	89 c6                	mov    esi,eax
c000ee85:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ee8b:	83 ec 0c             	sub    esp,0xc
c000ee8e:	6a 01                	push   0x1
c000ee90:	e8 78 a7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000ee95:	83 c4 10             	add    esp,0x10
c000ee98:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ee9c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000eea2:	83 ec 0c             	sub    esp,0xc
c000eea5:	6a 01                	push   0x1
c000eea7:	6a 01                	push   0x1
c000eea9:	50                   	push   eax
c000eeaa:	52                   	push   edx
c000eeab:	53                   	push   ebx
c000eeac:	e8 69 b0 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eeb1:	83 c4 20             	add    esp,0x20
c000eeb4:	09 f0                	or     eax,esi
c000eeb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eeba:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000eebe:	c1 e0 03             	shl    eax,0x3
c000eec1:	05 20 89 02 c0       	add    eax,0xc0028920
c000eec6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eeca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eece:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eed2:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000eeda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eede:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eee2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eee6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eeea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eeee:	89 c6                	mov    esi,eax
c000eef0:	89 d7                	mov    edi,edx
c000eef2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000eef4:	89 c8                	mov    eax,ecx
c000eef6:	89 fa                	mov    edx,edi
c000eef8:	89 f3                	mov    ebx,esi
c000eefa:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000eefe:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ef02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ef06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ef0d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ef11:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ef15:	05 00 10 00 00       	add    eax,0x1000
c000ef1a:	c1 e8 0c             	shr    eax,0xc
c000ef1d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ef21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef25:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ef29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef2d:	25 ff 0f 00 00       	and    eax,0xfff
c000ef32:	89 c6                	mov    esi,eax
c000ef34:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef3a:	83 ec 0c             	sub    esp,0xc
c000ef3d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef41:	e8 c7 a6 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000ef46:	83 c4 10             	add    esp,0x10
c000ef49:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ef4d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ef53:	83 ec 0c             	sub    esp,0xc
c000ef56:	6a 01                	push   0x1
c000ef58:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ef5c:	50                   	push   eax
c000ef5d:	52                   	push   edx
c000ef5e:	53                   	push   ebx
c000ef5f:	e8 b6 af ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef64:	83 c4 20             	add    esp,0x20
c000ef67:	09 f0                	or     eax,esi
c000ef69:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ef6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef71:	83 ec 0c             	sub    esp,0xc
c000ef74:	50                   	push   eax
c000ef75:	e8 b1 a9 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000ef7a:	83 c4 10             	add    esp,0x10
c000ef7d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ef81:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ef85:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ef8c:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000ef91:	e9 be fe ff ff       	jmp    c000ee54 <loadACPITables(unsigned char*)+0x11c>
c000ef96:	66 90                	xchg   ax,ax
c000ef98:	90                   	nop
c000ef99:	8d 76 00             	lea    esi,[esi+0x0]
c000ef9c:	83 c4 60             	add    esp,0x60
c000ef9f:	5b                   	pop    ebx
c000efa0:	5e                   	pop    esi
c000efa1:	5f                   	pop    edi
c000efa2:	c3                   	ret    
c000efa3:	90                   	nop

c000efa4 <findRSDT(unsigned char*)>:
c000efa4:	57                   	push   edi
c000efa5:	56                   	push   esi
c000efa6:	53                   	push   ebx
c000efa7:	83 ec 50             	sub    esp,0x50
c000efaa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000efaf:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000efb5:	83 e0 04             	and    eax,0x4
c000efb8:	0f b6 c0             	movzx  eax,al
c000efbb:	85 c0                	test   eax,eax
c000efbd:	75 0d                	jne    c000efcc <findRSDT(unsigned char*)+0x28>
c000efbf:	b8 00 00 00 00       	mov    eax,0x0
c000efc4:	e9 2b 01 00 00       	jmp    c000f0f4 <findRSDT(unsigned char*)+0x150>
c000efc9:	8d 76 00             	lea    esi,[esi+0x0]
c000efcc:	89 e0                	mov    eax,esp
c000efce:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000efd2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000efd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000efda:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000efe2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000efe6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000efea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000efee:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000eff2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000eff6:	89 c6                	mov    esi,eax
c000eff8:	89 d7                	mov    edi,edx
c000effa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000effc:	89 c8                	mov    eax,ecx
c000effe:	89 fa                	mov    edx,edi
c000f000:	89 f3                	mov    ebx,esi
c000f002:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f006:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f00a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f00e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f012:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f016:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f01e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f022:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f026:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f02a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f02e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f032:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f036:	25 ff 0f 00 00       	and    eax,0xfff
c000f03b:	89 c6                	mov    esi,eax
c000f03d:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f043:	83 ec 0c             	sub    esp,0xc
c000f046:	6a 02                	push   0x2
c000f048:	e8 c0 a5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f04d:	83 c4 10             	add    esp,0x10
c000f050:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f054:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f05a:	83 ec 0c             	sub    esp,0xc
c000f05d:	6a 01                	push   0x1
c000f05f:	6a 02                	push   0x2
c000f061:	50                   	push   eax
c000f062:	52                   	push   edx
c000f063:	53                   	push   ebx
c000f064:	e8 b1 ae ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f069:	83 c4 20             	add    esp,0x20
c000f06c:	09 f0                	or     eax,esi
c000f06e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f072:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f076:	25 ff 0f 00 00       	and    eax,0xfff
c000f07b:	89 c6                	mov    esi,eax
c000f07d:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f083:	83 ec 0c             	sub    esp,0xc
c000f086:	6a 02                	push   0x2
c000f088:	e8 80 a5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f08d:	83 c4 10             	add    esp,0x10
c000f090:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f094:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f09a:	83 ec 0c             	sub    esp,0xc
c000f09d:	6a 01                	push   0x1
c000f09f:	6a 02                	push   0x2
c000f0a1:	50                   	push   eax
c000f0a2:	52                   	push   edx
c000f0a3:	53                   	push   ebx
c000f0a4:	e8 71 ae ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f0a9:	83 c4 20             	add    esp,0x20
c000f0ac:	09 f0                	or     eax,esi
c000f0ae:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f0b2:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f0b7:	85 c0                	test   eax,eax
c000f0b9:	75 11                	jne    c000f0cc <findRSDT(unsigned char*)+0x128>
c000f0bb:	c6 05 20 8b 02 c0 00 	mov    BYTE PTR ds:0xc0028b20,0x0
c000f0c2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f0c6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f0ca:	eb 24                	jmp    c000f0f0 <findRSDT(unsigned char*)+0x14c>
c000f0cc:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f0d1:	83 f8 02             	cmp    eax,0x2
c000f0d4:	75 12                	jne    c000f0e8 <findRSDT(unsigned char*)+0x144>
c000f0d6:	c6 05 20 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b20,0x1
c000f0dd:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f0e1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f0e5:	eb 09                	jmp    c000f0f0 <findRSDT(unsigned char*)+0x14c>
c000f0e7:	90                   	nop
c000f0e8:	b8 00 00 00 00       	mov    eax,0x0
c000f0ed:	eb 05                	jmp    c000f0f4 <findRSDT(unsigned char*)+0x150>
c000f0ef:	90                   	nop
c000f0f0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f0f4:	83 c4 50             	add    esp,0x50
c000f0f7:	5b                   	pop    ebx
c000f0f8:	5e                   	pop    esi
c000f0f9:	5f                   	pop    edi
c000f0fa:	c3                   	ret    
c000f0fb:	90                   	nop

c000f0fc <findDataTable(unsigned char*, char*)>:
c000f0fc:	83 ec 1c             	sub    esp,0x1c
c000f0ff:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f104:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f10a:	83 e0 04             	and    eax,0x4
c000f10d:	0f b6 c0             	movzx  eax,al
c000f110:	85 c0                	test   eax,eax
c000f112:	75 08                	jne    c000f11c <findDataTable(unsigned char*, char*)+0x20>
c000f114:	b8 00 00 00 00       	mov    eax,0x0
c000f119:	eb 5d                	jmp    c000f178 <findDataTable(unsigned char*, char*)+0x7c>
c000f11b:	90                   	nop
c000f11c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f124:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000f129:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f12d:	7d 41                	jge    c000f170 <findDataTable(unsigned char*, char*)+0x74>
c000f12f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f133:	c1 e0 03             	shl    eax,0x3
c000f136:	05 20 89 02 c0       	add    eax,0xc0028920
c000f13b:	83 ec 04             	sub    esp,0x4
c000f13e:	6a 04                	push   0x4
c000f140:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f144:	50                   	push   eax
c000f145:	e8 36 12 ff ff       	call   c0000380 <memcmp>
c000f14a:	83 c4 10             	add    esp,0x10
c000f14d:	85 c0                	test   eax,eax
c000f14f:	0f 94 c0             	sete   al
c000f152:	0f b6 c0             	movzx  eax,al
c000f155:	85 c0                	test   eax,eax
c000f157:	74 0f                	je     c000f168 <findDataTable(unsigned char*, char*)+0x6c>
c000f159:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f15d:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000f164:	eb 12                	jmp    c000f178 <findDataTable(unsigned char*, char*)+0x7c>
c000f166:	66 90                	xchg   ax,ax
c000f168:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f16d:	eb b5                	jmp    c000f124 <findDataTable(unsigned char*, char*)+0x28>
c000f16f:	90                   	nop
c000f170:	b8 00 00 00 00       	mov    eax,0x0
c000f175:	8d 76 00             	lea    esi,[esi+0x0]
c000f178:	83 c4 1c             	add    esp,0x1c
c000f17b:	c3                   	ret    

c000f17c <scanMADT()>:
c000f17c:	53                   	push   ebx
c000f17d:	83 ec 38             	sub    esp,0x38
c000f180:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000f185:	25 00 04 00 00       	and    eax,0x400
c000f18a:	74 14                	je     c000f1a0 <scanMADT()+0x24>
c000f18c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f191:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f197:	83 e2 fb             	and    edx,0xfffffffb
c000f19a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f1a0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f1a5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f1ab:	83 e0 04             	and    eax,0x4
c000f1ae:	0f b6 c0             	movzx  eax,al
c000f1b1:	85 c0                	test   eax,eax
c000f1b3:	0f 84 6b 04 00 00    	je     c000f624 <scanMADT()+0x4a8>
c000f1b9:	e8 e2 fa ff ff       	call   c000eca0 <findRSDP()>
c000f1be:	a3 2c 8b 02 c0       	mov    ds:0xc0028b2c,eax
c000f1c3:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f1c8:	85 c0                	test   eax,eax
c000f1ca:	75 1c                	jne    c000f1e8 <scanMADT()+0x6c>
c000f1cc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f1d1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f1d7:	83 e2 fb             	and    edx,0xfffffffb
c000f1da:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f1e0:	e9 47 04 00 00       	jmp    c000f62c <scanMADT()+0x4b0>
c000f1e5:	8d 76 00             	lea    esi,[esi+0x0]
c000f1e8:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f1ed:	83 ec 0c             	sub    esp,0xc
c000f1f0:	50                   	push   eax
c000f1f1:	e8 ae fd ff ff       	call   c000efa4 <findRSDT(unsigned char*)>
c000f1f6:	83 c4 10             	add    esp,0x10
c000f1f9:	a3 28 8b 02 c0       	mov    ds:0xc0028b28,eax
c000f1fe:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f203:	85 c0                	test   eax,eax
c000f205:	75 19                	jne    c000f220 <scanMADT()+0xa4>
c000f207:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f20c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f212:	83 e2 fb             	and    edx,0xfffffffb
c000f215:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f21b:	e9 0c 04 00 00       	jmp    c000f62c <scanMADT()+0x4b0>
c000f220:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f225:	83 ec 0c             	sub    esp,0xc
c000f228:	50                   	push   eax
c000f229:	e8 0a fb ff ff       	call   c000ed38 <loadACPITables(unsigned char*)>
c000f22e:	83 c4 10             	add    esp,0x10
c000f231:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f236:	83 ec 08             	sub    esp,0x8
c000f239:	68 8c 1a 02 c0       	push   0xc0021a8c
c000f23e:	50                   	push   eax
c000f23f:	e8 b8 fe ff ff       	call   c000f0fc <findDataTable(unsigned char*, char*)>
c000f244:	83 c4 10             	add    esp,0x10
c000f247:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f24b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f250:	75 1a                	jne    c000f26c <scanMADT()+0xf0>
c000f252:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f257:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f25d:	83 e2 fe             	and    edx,0xfffffffe
c000f260:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f266:	e9 c1 03 00 00       	jmp    c000f62c <scanMADT()+0x4b0>
c000f26b:	90                   	nop
c000f26c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f274:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f278:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f27b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f27f:	0f 87 a7 03 00 00    	ja     c000f62c <scanMADT()+0x4b0>
c000f285:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f28d:	0f 87 99 03 00 00    	ja     c000f62c <scanMADT()+0x4b0>
c000f293:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f297:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f29b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f29f:	8d 50 01             	lea    edx,[eax+0x1]
c000f2a2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f2a6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f2aa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f2ae:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f2b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2b6:	8d 50 01             	lea    edx,[eax+0x1]
c000f2b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f2bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f2c1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f2c5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f2c9:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f2ce:	83 f8 02             	cmp    eax,0x2
c000f2d1:	0f 86 51 03 00 00    	jbe    c000f628 <scanMADT()+0x4ac>
c000f2d7:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f2dc:	85 c0                	test   eax,eax
c000f2de:	75 58                	jne    c000f338 <scanMADT()+0x1bc>
c000f2e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2e4:	8d 50 01             	lea    edx,[eax+0x1]
c000f2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f2eb:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f2f1:	0f b6 d2             	movzx  edx,dl
c000f2f4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f2f8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f2fc:	88 82 60 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72a0],al
c000f302:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f306:	8d 50 01             	lea    edx,[eax+0x1]
c000f309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f30d:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f313:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f316:	88 0d 20 8d 02 c0    	mov    BYTE PTR ds:0xc0028d20,cl
c000f31c:	0f b6 d2             	movzx  edx,dl
c000f31f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f323:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f327:	88 82 40 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72c0],al
c000f32d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f332:	e9 d9 02 00 00       	jmp    c000f610 <scanMADT()+0x494>
c000f337:	90                   	nop
c000f338:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f33d:	83 f8 01             	cmp    eax,0x1
c000f340:	0f 85 1a 01 00 00    	jne    c000f460 <scanMADT()+0x2e4>
c000f346:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f34a:	8d 50 01             	lea    edx,[eax+0x1]
c000f34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f351:	8a 15 e0 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028be0
c000f357:	0f b6 d2             	movzx  edx,dl
c000f35a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f35e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f362:	88 82 00 8c 02 c0    	mov    BYTE PTR [edx-0x3ffd7400],al
c000f368:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f36d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f371:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f375:	01 d0                	add    eax,edx
c000f377:	83 c0 2c             	add    eax,0x2c
c000f37a:	8a 00                	mov    al,BYTE PTR [eax]
c000f37c:	0f b6 d0             	movzx  edx,al
c000f37f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f383:	8d 48 01             	lea    ecx,[eax+0x1]
c000f386:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f38a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f38e:	0f b6 c0             	movzx  eax,al
c000f391:	c1 e0 08             	shl    eax,0x8
c000f394:	89 d1                	mov    ecx,edx
c000f396:	09 c1                	or     ecx,eax
c000f398:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f39c:	8d 50 02             	lea    edx,[eax+0x2]
c000f39f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3a3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3a7:	0f b6 c0             	movzx  eax,al
c000f3aa:	c1 e0 10             	shl    eax,0x10
c000f3ad:	09 c1                	or     ecx,eax
c000f3af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3b3:	8d 50 03             	lea    edx,[eax+0x3]
c000f3b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3ba:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3be:	0f b6 c0             	movzx  eax,al
c000f3c1:	c1 e0 18             	shl    eax,0x18
c000f3c4:	09 c1                	or     ecx,eax
c000f3c6:	89 ca                	mov    edx,ecx
c000f3c8:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f3cd:	0f b6 c0             	movzx  eax,al
c000f3d0:	89 14 85 20 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd73e0],edx
c000f3d7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f3dc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3e4:	01 d0                	add    eax,edx
c000f3e6:	83 c0 2c             	add    eax,0x2c
c000f3e9:	8a 00                	mov    al,BYTE PTR [eax]
c000f3eb:	0f b6 d0             	movzx  edx,al
c000f3ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3f2:	8d 48 01             	lea    ecx,[eax+0x1]
c000f3f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3f9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f3fd:	0f b6 c0             	movzx  eax,al
c000f400:	c1 e0 08             	shl    eax,0x8
c000f403:	89 d1                	mov    ecx,edx
c000f405:	09 c1                	or     ecx,eax
c000f407:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f40b:	8d 50 02             	lea    edx,[eax+0x2]
c000f40e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f412:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f416:	0f b6 c0             	movzx  eax,al
c000f419:	c1 e0 10             	shl    eax,0x10
c000f41c:	09 c1                	or     ecx,eax
c000f41e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f422:	8d 50 03             	lea    edx,[eax+0x3]
c000f425:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f429:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f42d:	0f b6 c0             	movzx  eax,al
c000f430:	c1 e0 18             	shl    eax,0x18
c000f433:	09 c1                	or     ecx,eax
c000f435:	89 ca                	mov    edx,ecx
c000f437:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f43c:	0f b6 c0             	movzx  eax,al
c000f43f:	89 14 85 a0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7360],edx
c000f446:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f44b:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f450:	83 c0 01             	add    eax,0x1
c000f453:	a2 e0 8b 02 c0       	mov    ds:0xc0028be0,al
c000f458:	e9 b3 01 00 00       	jmp    c000f610 <scanMADT()+0x494>
c000f45d:	8d 76 00             	lea    esi,[esi+0x0]
c000f460:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f465:	83 f8 02             	cmp    eax,0x2
c000f468:	0f 85 ea 00 00 00    	jne    c000f558 <scanMADT()+0x3dc>
c000f46e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f472:	8d 50 01             	lea    edx,[eax+0x1]
c000f475:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f479:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f47d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f481:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f485:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f489:	8d 50 01             	lea    edx,[eax+0x1]
c000f48c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f490:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f494:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f498:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f49c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4a0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4a4:	01 d0                	add    eax,edx
c000f4a6:	83 c0 2c             	add    eax,0x2c
c000f4a9:	8a 00                	mov    al,BYTE PTR [eax]
c000f4ab:	0f b6 d0             	movzx  edx,al
c000f4ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4b2:	8d 48 01             	lea    ecx,[eax+0x1]
c000f4b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4b9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f4bd:	0f b6 c0             	movzx  eax,al
c000f4c0:	c1 e0 08             	shl    eax,0x8
c000f4c3:	89 d1                	mov    ecx,edx
c000f4c5:	09 c1                	or     ecx,eax
c000f4c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4cb:	8d 50 02             	lea    edx,[eax+0x2]
c000f4ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4d2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f4d6:	0f b6 c0             	movzx  eax,al
c000f4d9:	c1 e0 10             	shl    eax,0x10
c000f4dc:	09 c1                	or     ecx,eax
c000f4de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4e2:	8d 50 03             	lea    edx,[eax+0x3]
c000f4e5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4e9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f4ed:	0f b6 c0             	movzx  eax,al
c000f4f0:	c1 e0 18             	shl    eax,0x18
c000f4f3:	09 c8                	or     eax,ecx
c000f4f5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f4f9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f4fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f502:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f506:	01 d0                	add    eax,edx
c000f508:	83 c0 2c             	add    eax,0x2c
c000f50b:	8a 00                	mov    al,BYTE PTR [eax]
c000f50d:	0f b6 c0             	movzx  eax,al
c000f510:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f514:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f517:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f51b:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f51f:	0f b6 d2             	movzx  edx,dl
c000f522:	c1 e2 08             	shl    edx,0x8
c000f525:	09 d0                	or     eax,edx
c000f527:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f52c:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f531:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f536:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f53a:	88 90 88 31 02 c0    	mov    BYTE PTR [eax-0x3ffdce78],dl
c000f540:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000f545:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f54a:	66 89 84 12 c0 8b 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd7440],ax
c000f552:	e9 b9 00 00 00       	jmp    c000f610 <scanMADT()+0x494>
c000f557:	90                   	nop
c000f558:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f55d:	83 f8 04             	cmp    eax,0x4
c000f560:	0f 85 9a 00 00 00    	jne    c000f600 <scanMADT()+0x484>
c000f566:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f56a:	8d 50 01             	lea    edx,[eax+0x1]
c000f56d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f571:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f575:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f579:	0f b6 c0             	movzx  eax,al
c000f57c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f580:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f584:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f588:	01 d0                	add    eax,edx
c000f58a:	83 c0 2c             	add    eax,0x2c
c000f58d:	8a 00                	mov    al,BYTE PTR [eax]
c000f58f:	0f b6 d0             	movzx  edx,al
c000f592:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f596:	8d 48 01             	lea    ecx,[eax+0x1]
c000f599:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f59d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f5a1:	0f b6 c0             	movzx  eax,al
c000f5a4:	c1 e0 08             	shl    eax,0x8
c000f5a7:	09 d0                	or     eax,edx
c000f5a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f5ad:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f5b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5b6:	8d 50 01             	lea    edx,[eax+0x1]
c000f5b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5c1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f5c5:	0f b6 c0             	movzx  eax,al
c000f5c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f5cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f5d0:	c1 e0 08             	shl    eax,0x8
c000f5d3:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f5d7:	89 c1                	mov    ecx,eax
c000f5d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f5dd:	c1 e0 18             	shl    eax,0x18
c000f5e0:	89 c3                	mov    ebx,eax
c000f5e2:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c000f5e7:	8d 50 01             	lea    edx,[eax+0x1]
c000f5ea:	89 15 30 8b 02 c0    	mov    DWORD PTR ds:0xc0028b30,edx
c000f5f0:	09 d9                	or     ecx,ebx
c000f5f2:	89 ca                	mov    edx,ecx
c000f5f4:	89 14 85 40 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd74c0],edx
c000f5fb:	eb 13                	jmp    c000f610 <scanMADT()+0x494>
c000f5fd:	8d 76 00             	lea    esi,[esi+0x0]
c000f600:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f605:	83 f8 05             	cmp    eax,0x5
c000f608:	75 06                	jne    c000f610 <scanMADT()+0x494>
c000f60a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f60f:	90                   	nop
c000f610:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f615:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f619:	01 d0                	add    eax,edx
c000f61b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f61f:	e9 50 fc ff ff       	jmp    c000f274 <scanMADT()+0xf8>
c000f624:	90                   	nop
c000f625:	eb 05                	jmp    c000f62c <scanMADT()+0x4b0>
c000f627:	90                   	nop
c000f628:	90                   	nop
c000f629:	8d 76 00             	lea    esi,[esi+0x0]
c000f62c:	83 c4 38             	add    esp,0x38
c000f62f:	5b                   	pop    ebx
c000f630:	c3                   	ret    
c000f631:	90                   	nop
c000f632:	66 90                	xchg   ax,ax

c000f634 <ACPI::ACPI()>:
c000f634:	83 ec 0c             	sub    esp,0xc
c000f637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f63b:	83 ec 08             	sub    esp,0x8
c000f63e:	68 91 1a 02 c0       	push   0xc0021a91
c000f643:	50                   	push   eax
c000f644:	e8 65 d2 ff ff       	call   c000c8ae <Device::Device(char const*)>
c000f649:	83 c4 10             	add    esp,0x10
c000f64c:	ba e4 1b 02 c0       	mov    edx,0xc0021be4
c000f651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f655:	89 10                	mov    DWORD PTR [eax],edx
c000f657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f65b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f666:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f674:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f67e:	e8 f9 fa ff ff       	call   c000f17c <scanMADT()>
c000f683:	90                   	nop
c000f684:	83 c4 0c             	add    esp,0xc
c000f687:	c3                   	ret    

c000f688 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f688:	83 ec 2c             	sub    esp,0x2c
c000f68b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f68f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f693:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f697:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000f69b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f6a0:	88 d0                	mov    al,dl
c000f6a2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f6a6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f6ab:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f6b3:	90                   	nop
c000f6b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f6b8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f6be:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f6c2:	0f 8d b0 00 00 00    	jge    c000f778 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f6c8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f6cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f6d0:	83 c2 2a             	add    edx,0x2a
c000f6d3:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f6d7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f6dc:	0f b7 c0             	movzx  eax,ax
c000f6df:	39 c2                	cmp    edx,eax
c000f6e1:	0f 85 85 00 00 00    	jne    c000f76c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f6e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f6eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f6ef:	83 c2 2a             	add    edx,0x2a
c000f6f2:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f6f6:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f6fb:	0f b6 c0             	movzx  eax,al
c000f6fe:	39 c2                	cmp    edx,eax
c000f700:	75 6a                	jne    c000f76c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f702:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f707:	85 c0                	test   eax,eax
c000f709:	74 3d                	je     c000f748 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f70b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f70f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f713:	83 c2 2a             	add    edx,0x2a
c000f716:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f71a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f71e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f721:	39 c2                	cmp    edx,eax
c000f723:	74 13                	je     c000f738 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f725:	83 ec 0c             	sub    esp,0xc
c000f728:	68 0c 1a 02 c0       	push   0xc0021a0c
c000f72d:	e8 13 1c 00 00       	call   c0011345 <KePanic(char const*)>
c000f732:	83 c4 10             	add    esp,0x10
c000f735:	8d 76 00             	lea    esi,[esi+0x0]
c000f738:	83 ec 0c             	sub    esp,0xc
c000f73b:	68 96 1a 02 c0       	push   0xc0021a96
c000f740:	e8 00 1c 00 00       	call   c0011345 <KePanic(char const*)>
c000f745:	83 c4 10             	add    esp,0x10
c000f748:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f74c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f750:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f754:	83 c2 2a             	add    edx,0x2a
c000f757:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f75b:	8b 02                	mov    eax,DWORD PTR [edx]
c000f75d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f760:	89 01                	mov    DWORD PTR [ecx],eax
c000f762:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f765:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f76a:	66 90                	xchg   ax,ax
c000f76c:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f771:	e9 3e ff ff ff       	jmp    c000f6b4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f776:	66 90                	xchg   ax,ax
c000f778:	90                   	nop
c000f779:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f77d:	83 c4 2c             	add    esp,0x2c
c000f780:	c2 04 00             	ret    0x4
c000f783:	90                   	nop

c000f784 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f784:	83 ec 1c             	sub    esp,0x1c
c000f787:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f78b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f78f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f793:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f798:	88 c8                	mov    al,cl
c000f79a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f79e:	88 d0                	mov    al,dl
c000f7a0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f7a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7a8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f7ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7b2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f7b5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000f7b9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000f7bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7c1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f7c7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f7cb:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000f7ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7d2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000f7d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7db:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f7e1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f7e5:	83 c0 01             	add    eax,0x1
c000f7e8:	88 c1                	mov    cl,al
c000f7ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7ee:	83 c2 2a             	add    edx,0x2a
c000f7f1:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f7f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7f9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f7ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f803:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f806:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f80a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f80e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f812:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f818:	8d 50 01             	lea    edx,[eax+0x1]
c000f81b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f81f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f825:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f829:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f82f:	3d 00 02 00 00       	cmp    eax,0x200
c000f834:	75 12                	jne    c000f848 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f836:	83 ec 0c             	sub    esp,0xc
c000f839:	68 a5 1a 02 c0       	push   0xc0021aa5
c000f83e:	e8 02 1b 00 00       	call   c0011345 <KePanic(char const*)>
c000f843:	83 c4 10             	add    esp,0x10
c000f846:	66 90                	xchg   ax,ax
c000f848:	90                   	nop
c000f849:	83 c4 1c             	add    esp,0x1c
c000f84c:	c3                   	ret    
c000f84d:	90                   	nop
c000f84e:	66 90                	xchg   ax,ax

c000f850 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f850:	b8 00 00 00 00       	mov    eax,0x0
c000f855:	c3                   	ret    
c000f856:	66 90                	xchg   ax,ax

c000f858 <ACPI::detectPCI()>:
c000f858:	53                   	push   ebx
c000f859:	83 ec 28             	sub    esp,0x28
c000f85c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f861:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f866:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f86b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f871:	83 e0 04             	and    eax,0x4
c000f874:	0f b6 c0             	movzx  eax,al
c000f877:	85 c0                	test   eax,eax
c000f879:	74 2d                	je     c000f8a8 <ACPI::detectPCI()+0x50>
c000f87b:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f880:	83 ec 08             	sub    esp,0x8
c000f883:	68 c2 1a 02 c0       	push   0xc0021ac2
c000f888:	50                   	push   eax
c000f889:	e8 6e f8 ff ff       	call   c000f0fc <findDataTable(unsigned char*, char*)>
c000f88e:	83 c4 10             	add    esp,0x10
c000f891:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f895:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f89a:	74 0c                	je     c000f8a8 <ACPI::detectPCI()+0x50>
c000f89c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f8a1:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f8a6:	66 90                	xchg   ax,ax
c000f8a8:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f8b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8b4:	8a 00                	mov    al,BYTE PTR [eax]
c000f8b6:	0f b6 c0             	movzx  eax,al
c000f8b9:	83 f8 01             	cmp    eax,0x1
c000f8bc:	75 0e                	jne    c000f8cc <ACPI::detectPCI()+0x74>
c000f8be:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f8c3:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f8c8:	eb 2e                	jmp    c000f8f8 <ACPI::detectPCI()+0xa0>
c000f8ca:	66 90                	xchg   ax,ax
c000f8cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8d0:	8a 00                	mov    al,BYTE PTR [eax]
c000f8d2:	0f b6 c0             	movzx  eax,al
c000f8d5:	83 f8 02             	cmp    eax,0x2
c000f8d8:	75 1e                	jne    c000f8f8 <ACPI::detectPCI()+0xa0>
c000f8da:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f8df:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f8e4:	85 c0                	test   eax,eax
c000f8e6:	74 10                	je     c000f8f8 <ACPI::detectPCI()+0xa0>
c000f8e8:	83 ec 0c             	sub    esp,0xc
c000f8eb:	68 3c 1a 02 c0       	push   0xc0021a3c
c000f8f0:	e8 50 1a 00 00       	call   c0011345 <KePanic(char const*)>
c000f8f5:	83 c4 10             	add    esp,0x10
c000f8f8:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f8fc:	83 f0 01             	xor    eax,0x1
c000f8ff:	0f b6 c0             	movzx  eax,al
c000f902:	85 c0                	test   eax,eax
c000f904:	74 46                	je     c000f94c <ACPI::detectPCI()+0xf4>
c000f906:	e8 25 08 ff ff       	call   c0000130 <manualPCIProbe>
c000f90b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f90f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f914:	75 0e                	jne    c000f924 <ACPI::detectPCI()+0xcc>
c000f916:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f91b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f920:	eb 2a                	jmp    c000f94c <ACPI::detectPCI()+0xf4>
c000f922:	66 90                	xchg   ax,ax
c000f924:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f929:	75 21                	jne    c000f94c <ACPI::detectPCI()+0xf4>
c000f92b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f930:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f935:	85 c0                	test   eax,eax
c000f937:	74 13                	je     c000f94c <ACPI::detectPCI()+0xf4>
c000f939:	83 ec 0c             	sub    esp,0xc
c000f93c:	68 3c 1a 02 c0       	push   0xc0021a3c
c000f941:	e8 ff 19 00 00       	call   c0011345 <KePanic(char const*)>
c000f946:	83 c4 10             	add    esp,0x10
c000f949:	8d 76 00             	lea    esi,[esi+0x0]
c000f94c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f951:	85 c0                	test   eax,eax
c000f953:	0f 84 87 00 00 00    	je     c000f9e0 <ACPI::detectPCI()+0x188>
c000f959:	83 ec 0c             	sub    esp,0xc
c000f95c:	68 c7 1a 02 c0       	push   0xc0021ac7
c000f961:	e8 09 13 00 00       	call   c0010c6f <KeSetBootMessage(char const*)>
c000f966:	83 c4 10             	add    esp,0x10
c000f969:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f971:	83 ec 0c             	sub    esp,0xc
c000f974:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f978:	e8 39 81 ff ff       	call   c0007ab6 <malloc>
c000f97d:	83 c4 10             	add    esp,0x10
c000f980:	89 c3                	mov    ebx,eax
c000f982:	83 ec 0c             	sub    esp,0xc
c000f985:	53                   	push   ebx
c000f986:	e8 51 b3 00 00       	call   c001acdc <PCI::PCI()>
c000f98b:	83 c4 10             	add    esp,0x10
c000f98e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f992:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f996:	83 ec 08             	sub    esp,0x8
c000f999:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f99d:	50                   	push   eax
c000f99e:	e8 73 cd ff ff       	call   c000c716 <Device::addChild(Device*)>
c000f9a3:	83 c4 10             	add    esp,0x10
c000f9a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9aa:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9ac:	83 c0 08             	add    eax,0x8
c000f9af:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9b1:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f9b6:	85 d2                	test   edx,edx
c000f9b8:	74 0a                	je     c000f9c4 <ACPI::detectPCI()+0x16c>
c000f9ba:	ba 01 00 00 00       	mov    edx,0x1
c000f9bf:	eb 0b                	jmp    c000f9cc <ACPI::detectPCI()+0x174>
c000f9c1:	8d 76 00             	lea    esi,[esi+0x0]
c000f9c4:	ba 02 00 00 00       	mov    edx,0x2
c000f9c9:	8d 76 00             	lea    esi,[esi+0x0]
c000f9cc:	6a 00                	push   0x0
c000f9ce:	6a 00                	push   0x0
c000f9d0:	52                   	push   edx
c000f9d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f9d5:	ff d0                	call   eax
c000f9d7:	83 c4 10             	add    esp,0x10
c000f9da:	e9 91 00 00 00       	jmp    c000fa70 <ACPI::detectPCI()+0x218>
c000f9df:	90                   	nop
c000f9e0:	83 ec 0c             	sub    esp,0xc
c000f9e3:	68 df 1a 02 c0       	push   0xc0021adf
c000f9e8:	e8 82 12 00 00       	call   c0010c6f <KeSetBootMessage(char const*)>
c000f9ed:	83 c4 10             	add    esp,0x10
c000f9f0:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f9f7:	83 ec 0c             	sub    esp,0xc
c000f9fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f9fe:	e8 b3 80 ff ff       	call   c0007ab6 <malloc>
c000fa03:	83 c4 10             	add    esp,0x10
c000fa06:	89 c3                	mov    ebx,eax
c000fa08:	83 ec 0c             	sub    esp,0xc
c000fa0b:	53                   	push   ebx
c000fa0c:	e8 65 be 00 00       	call   c001b876 <IDE::IDE()>
c000fa11:	83 c4 10             	add    esp,0x10
c000fa14:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fa18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa1c:	83 ec 08             	sub    esp,0x8
c000fa1f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fa23:	50                   	push   eax
c000fa24:	e8 ed cc ff ff       	call   c000c716 <Device::addChild(Device*)>
c000fa29:	83 c4 10             	add    esp,0x10
c000fa2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa30:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fa3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa3e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fa47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa4b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fa54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa58:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa5a:	83 c0 08             	add    eax,0x8
c000fa5d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa5f:	6a 00                	push   0x0
c000fa61:	6a 00                	push   0x0
c000fa63:	6a 00                	push   0x0
c000fa65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fa69:	ff d0                	call   eax
c000fa6b:	83 c4 10             	add    esp,0x10
c000fa6e:	66 90                	xchg   ax,ax
c000fa70:	90                   	nop
c000fa71:	83 c4 28             	add    esp,0x28
c000fa74:	5b                   	pop    ebx
c000fa75:	c3                   	ret    
c000fa76:	66 90                	xchg   ax,ax

c000fa78 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fa78:	83 ec 1c             	sub    esp,0x1c
c000fa7b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fa7f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fa82:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fa86:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fa8b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fa90:	83 ec 08             	sub    esp,0x8
c000fa93:	52                   	push   edx
c000fa94:	50                   	push   eax
c000fa95:	e8 de 76 ff ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c000fa9a:	83 c4 10             	add    esp,0x10
c000fa9d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000faa1:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000faa6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000faab:	83 ec 04             	sub    esp,0x4
c000faae:	6a 01                	push   0x1
c000fab0:	52                   	push   edx
c000fab1:	50                   	push   eax
c000fab2:	e8 db 77 ff ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fab7:	83 c4 10             	add    esp,0x10
c000faba:	90                   	nop
c000fabb:	83 c4 1c             	add    esp,0x1c
c000fabe:	c3                   	ret    
c000fabf:	90                   	nop

c000fac0 <ACPI::sleep()>:
c000fac0:	83 ec 0c             	sub    esp,0xc
c000fac3:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fac8:	85 c0                	test   eax,eax
c000faca:	74 08                	je     c000fad4 <ACPI::sleep()+0x14>
c000facc:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fad1:	ff d0                	call   eax
c000fad3:	90                   	nop
c000fad4:	90                   	nop
c000fad5:	83 c4 0c             	add    esp,0xc
c000fad8:	c3                   	ret    
c000fad9:	90                   	nop
c000fada:	66 90                	xchg   ax,ax

c000fadc <ACPI::open(int, int, void*)>:
c000fadc:	57                   	push   edi
c000fadd:	56                   	push   esi
c000fade:	53                   	push   ebx
c000fadf:	81 ec 70 01 00 00    	sub    esp,0x170
c000fae5:	83 ec 0c             	sub    esp,0xc
c000fae8:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000faef:	e8 64 fd ff ff       	call   c000f858 <ACPI::detectPCI()>
c000faf4:	83 c4 10             	add    esp,0x10
c000faf7:	83 ec 0c             	sub    esp,0xc
c000fafa:	68 64 1a 02 c0       	push   0xc0021a64
c000faff:	e8 6b 11 00 00       	call   c0010c6f <KeSetBootMessage(char const*)>
c000fb04:	83 c4 10             	add    esp,0x10
c000fb07:	b8 4c 05 00 00       	mov    eax,0x54c
c000fb0c:	8a 00                	mov    al,BYTE PTR [eax]
c000fb0e:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000fb15:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fb1d:	83 f8 01             	cmp    eax,0x1
c000fb20:	75 12                	jne    c000fb34 <ACPI::open(int, int, void*)+0x58>
c000fb22:	83 ec 0c             	sub    esp,0xc
c000fb25:	68 b1 13 02 c0       	push   0xc00213b1
c000fb2a:	e8 fd 4b 00 00       	call   c001472c <Thr::loadKernelSymbolTable(char const*)>
c000fb2f:	83 c4 10             	add    esp,0x10
c000fb32:	eb 34                	jmp    c000fb68 <ACPI::open(int, int, void*)+0x8c>
c000fb34:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fb3c:	3d bb 00 00 00       	cmp    eax,0xbb
c000fb41:	75 15                	jne    c000fb58 <ACPI::open(int, int, void*)+0x7c>
c000fb43:	83 ec 0c             	sub    esp,0xc
c000fb46:	68 f4 1a 02 c0       	push   0xc0021af4
c000fb4b:	e8 dc 4b 00 00       	call   c001472c <Thr::loadKernelSymbolTable(char const*)>
c000fb50:	83 c4 10             	add    esp,0x10
c000fb53:	eb 13                	jmp    c000fb68 <ACPI::open(int, int, void*)+0x8c>
c000fb55:	8d 76 00             	lea    esi,[esi+0x0]
c000fb58:	83 ec 0c             	sub    esp,0xc
c000fb5b:	68 12 1b 02 c0       	push   0xc0021b12
c000fb60:	e8 e0 17 00 00       	call   c0011345 <KePanic(char const*)>
c000fb65:	83 c4 10             	add    esp,0x10
c000fb68:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000fb70:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000fb7b:	83 ec 0c             	sub    esp,0xc
c000fb7e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fb85:	e8 2c 7f ff ff       	call   c0007ab6 <malloc>
c000fb8a:	83 c4 10             	add    esp,0x10
c000fb8d:	89 c3                	mov    ebx,eax
c000fb8f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fb94:	83 ec 04             	sub    esp,0x4
c000fb97:	50                   	push   eax
c000fb98:	68 2c 1b 02 c0       	push   0xc0021b2c
c000fb9d:	53                   	push   ebx
c000fb9e:	e8 51 bc ff ff       	call   c000b7f4 <File::File(char const*, Process*)>
c000fba3:	83 c4 10             	add    esp,0x10
c000fba6:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000fbad:	83 ec 08             	sub    esp,0x8
c000fbb0:	6a 01                	push   0x1
c000fbb2:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fbb9:	e8 fe bc ff ff       	call   c000b8bc <File::open(FileOpenMode)>
c000fbbe:	83 c4 10             	add    esp,0x10
c000fbc1:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000fbc8:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000fbd0:	75 16                	jne    c000fbe8 <ACPI::open(int, int, void*)+0x10c>
c000fbd2:	83 ec 0c             	sub    esp,0xc
c000fbd5:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fbdc:	e8 39 bd ff ff       	call   c000b91a <File::close()>
c000fbe1:	83 c4 10             	add    esp,0x10
c000fbe4:	eb 0a                	jmp    c000fbf0 <ACPI::open(int, int, void*)+0x114>
c000fbe6:	66 90                	xchg   ax,ax
c000fbe8:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000fbf0:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000fbf8:	74 1e                	je     c000fc18 <ACPI::open(int, int, void*)+0x13c>
c000fbfa:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000fc01:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc03:	83 c0 08             	add    eax,0x8
c000fc06:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc08:	83 ec 0c             	sub    esp,0xc
c000fc0b:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fc12:	ff d0                	call   eax
c000fc14:	83 c4 10             	add    esp,0x10
c000fc17:	90                   	nop
c000fc18:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000fc1f:	83 f0 01             	xor    eax,0x1
c000fc22:	0f b6 c0             	movzx  eax,al
c000fc25:	85 c0                	test   eax,eax
c000fc27:	74 43                	je     c000fc6c <ACPI::open(int, int, void*)+0x190>
c000fc29:	83 ec 0c             	sub    esp,0xc
c000fc2c:	68 4a 1b 02 c0       	push   0xc0021b4a
c000fc31:	e8 39 10 00 00       	call   c0010c6f <KeSetBootMessage(char const*)>
c000fc36:	83 c4 10             	add    esp,0x10
c000fc39:	83 ec 04             	sub    esp,0x4
c000fc3c:	6a 0c                	push   0xc
c000fc3e:	68 65 1b 02 c0       	push   0xc0021b65
c000fc43:	68 76 1b 02 c0       	push   0xc0021b76
c000fc48:	e8 8f 3d 00 00       	call   c00139dc <Reg::readIntWithDefault(char*, char*, int)>
c000fc4d:	83 c4 10             	add    esp,0x10
c000fc50:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000fc57:	83 ec 0c             	sub    esp,0xc
c000fc5a:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000fc61:	e8 d6 9b ff ff       	call   c000983c <Virt::setupPageSwapping(int)>
c000fc66:	83 c4 10             	add    esp,0x10
c000fc69:	8d 76 00             	lea    esi,[esi+0x0]
c000fc6c:	83 ec 0c             	sub    esp,0xc
c000fc6f:	68 75 06 02 c0       	push   0xc0020675
c000fc74:	e8 f6 0f 00 00       	call   c0010c6f <KeSetBootMessage(char const*)>
c000fc79:	83 c4 10             	add    esp,0x10
c000fc7c:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000fc83:	83 ec 08             	sub    esp,0x8
c000fc86:	6a 13                	push   0x13
c000fc88:	50                   	push   eax
c000fc89:	e8 a0 cd ff ff       	call   c000ca2e <getDevicesOfType(DeviceType)>
c000fc8e:	83 c4 0c             	add    esp,0xc
c000fc91:	8d 76 00             	lea    esi,[esi+0x0]
c000fc94:	83 ec 0c             	sub    esp,0xc
c000fc97:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fc9e:	50                   	push   eax
c000fc9f:	e8 bc fd 00 00       	call   c001fa60 <LinkedList<Device>::isEmpty()>
c000fca4:	83 c4 10             	add    esp,0x10
c000fca7:	83 f0 01             	xor    eax,0x1
c000fcaa:	0f b6 c0             	movzx  eax,al
c000fcad:	85 c0                	test   eax,eax
c000fcaf:	0f 84 47 01 00 00    	je     c000fdfc <ACPI::open(int, int, void*)+0x320>
c000fcb5:	83 ec 0c             	sub    esp,0xc
c000fcb8:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fcbf:	50                   	push   eax
c000fcc0:	e8 b7 fd 00 00       	call   c001fa7c <LinkedList<Device>::getFirstElement()>
c000fcc5:	83 c4 10             	add    esp,0x10
c000fcc8:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000fccf:	83 ec 0c             	sub    esp,0xc
c000fcd2:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fcd9:	50                   	push   eax
c000fcda:	e8 a5 fd 00 00       	call   c001fa84 <LinkedList<Device>::removeFirst()>
c000fcdf:	83 c4 10             	add    esp,0x10
c000fce2:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000fce9:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000fcf0:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000fcf7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fcfb:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000fd01:	ba 09 00 00 00       	mov    edx,0x9
c000fd06:	fc                   	cld    
c000fd07:	89 c7                	mov    edi,eax
c000fd09:	89 de                	mov    esi,ebx
c000fd0b:	89 d1                	mov    ecx,edx
c000fd0d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fd0f:	83 ec 08             	sub    esp,0x8
c000fd12:	8d 44 24 38          	lea    eax,[esp+0x38]
c000fd16:	50                   	push   eax
c000fd17:	83 ec 24             	sub    esp,0x24
c000fd1a:	89 e0                	mov    eax,esp
c000fd1c:	89 c3                	mov    ebx,eax
c000fd1e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000fd22:	ba 09 00 00 00       	mov    edx,0x9
c000fd27:	89 df                	mov    edi,ebx
c000fd29:	89 c6                	mov    esi,eax
c000fd2b:	89 d1                	mov    ecx,edx
c000fd2d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fd2f:	e8 92 b4 00 00       	call   c001b1c6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000fd34:	83 c4 30             	add    esp,0x30
c000fd37:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000fd3e:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000fd46:	0f 84 48 ff ff ff    	je     c000fc94 <ACPI::open(int, int, void*)+0x1b8>
c000fd4c:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000fd57:	83 ec 0c             	sub    esp,0xc
c000fd5a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fd61:	e8 50 7d ff ff       	call   c0007ab6 <malloc>
c000fd66:	83 c4 10             	add    esp,0x10
c000fd69:	89 c3                	mov    ebx,eax
c000fd6b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fd70:	83 ec 04             	sub    esp,0x4
c000fd73:	50                   	push   eax
c000fd74:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fd7b:	53                   	push   ebx
c000fd7c:	e8 73 ba ff ff       	call   c000b7f4 <File::File(char const*, Process*)>
c000fd81:	83 c4 10             	add    esp,0x10
c000fd84:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000fd8b:	83 ec 0c             	sub    esp,0xc
c000fd8e:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fd95:	e8 e6 bd ff ff       	call   c000bb80 <File::exists()>
c000fd9a:	83 c4 10             	add    esp,0x10
c000fd9d:	0f b6 c0             	movzx  eax,al
c000fda0:	85 c0                	test   eax,eax
c000fda2:	74 28                	je     c000fdcc <ACPI::open(int, int, void*)+0x2f0>
c000fda4:	83 ec 08             	sub    esp,0x8
c000fda7:	6a 01                	push   0x1
c000fda9:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000fdb0:	e8 f1 53 00 00       	call   c00151a6 <Thr::loadDLL(char const*, bool)>
c000fdb5:	83 c4 10             	add    esp,0x10
c000fdb8:	83 ec 08             	sub    esp,0x8
c000fdbb:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000fdc2:	50                   	push   eax
c000fdc3:	e8 0f 56 00 00       	call   c00153d7 <Thr::executeDLL(unsigned long, void*)>
c000fdc8:	83 c4 10             	add    esp,0x10
c000fdcb:	90                   	nop
c000fdcc:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000fdd4:	0f 84 ba fe ff ff    	je     c000fc94 <ACPI::open(int, int, void*)+0x1b8>
c000fdda:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000fde1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fde3:	83 c0 08             	add    eax,0x8
c000fde6:	8b 00                	mov    eax,DWORD PTR [eax]
c000fde8:	83 ec 0c             	sub    esp,0xc
c000fdeb:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fdf2:	ff d0                	call   eax
c000fdf4:	83 c4 10             	add    esp,0x10
c000fdf7:	e9 98 fe ff ff       	jmp    c000fc94 <ACPI::open(int, int, void*)+0x1b8>
c000fdfc:	83 ec 0c             	sub    esp,0xc
c000fdff:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fe06:	50                   	push   eax
c000fe07:	e8 50 fc 00 00       	call   c001fa5c <LinkedList<Device>::~LinkedList()>
c000fe0c:	83 c4 10             	add    esp,0x10
c000fe0f:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000fe15:	83 ec 08             	sub    esp,0x8
c000fe18:	6a 01                	push   0x1
c000fe1a:	68 7d 1b 02 c0       	push   0xc0021b7d
c000fe1f:	e8 82 53 00 00       	call   c00151a6 <Thr::loadDLL(char const*, bool)>
c000fe24:	83 c4 10             	add    esp,0x10
c000fe27:	83 ec 08             	sub    esp,0x8
c000fe2a:	53                   	push   ebx
c000fe2b:	50                   	push   eax
c000fe2c:	e8 a6 55 00 00       	call   c00153d7 <Thr::executeDLL(unsigned long, void*)>
c000fe31:	83 c4 10             	add    esp,0x10
c000fe34:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fe39:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fe3f:	83 e0 04             	and    eax,0x4
c000fe42:	0f b6 c0             	movzx  eax,al
c000fe45:	85 c0                	test   eax,eax
c000fe47:	0f 84 1b 01 00 00    	je     c000ff68 <ACPI::open(int, int, void*)+0x48c>
c000fe4d:	83 ec 0c             	sub    esp,0xc
c000fe50:	68 9a 1b 02 c0       	push   0xc0021b9a
c000fe55:	e8 15 0e 00 00       	call   c0010c6f <KeSetBootMessage(char const*)>
c000fe5a:	83 c4 10             	add    esp,0x10
c000fe5d:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000fe68:	83 ec 0c             	sub    esp,0xc
c000fe6b:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000fe72:	e8 3f 7c ff ff       	call   c0007ab6 <malloc>
c000fe77:	83 c4 10             	add    esp,0x10
c000fe7a:	89 c3                	mov    ebx,eax
c000fe7c:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fe81:	83 ec 04             	sub    esp,0x4
c000fe84:	50                   	push   eax
c000fe85:	68 b7 1b 02 c0       	push   0xc0021bb7
c000fe8a:	53                   	push   ebx
c000fe8b:	e8 64 b9 ff ff       	call   c000b7f4 <File::File(char const*, Process*)>
c000fe90:	83 c4 10             	add    esp,0x10
c000fe93:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000fe9a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000fea2:	74 20                	je     c000fec4 <ACPI::open(int, int, void*)+0x3e8>
c000fea4:	83 ec 0c             	sub    esp,0xc
c000fea7:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000feae:	e8 cd bc ff ff       	call   c000bb80 <File::exists()>
c000feb3:	83 c4 10             	add    esp,0x10
c000feb6:	0f b6 c0             	movzx  eax,al
c000feb9:	85 c0                	test   eax,eax
c000febb:	74 07                	je     c000fec4 <ACPI::open(int, int, void*)+0x3e8>
c000febd:	b0 01                	mov    al,0x1
c000febf:	eb 07                	jmp    c000fec8 <ACPI::open(int, int, void*)+0x3ec>
c000fec1:	8d 76 00             	lea    esi,[esi+0x0]
c000fec4:	b0 00                	mov    al,0x0
c000fec6:	66 90                	xchg   ax,ax
c000fec8:	0f b6 c0             	movzx  eax,al
c000fecb:	85 c0                	test   eax,eax
c000fecd:	74 25                	je     c000fef4 <ACPI::open(int, int, void*)+0x418>
c000fecf:	83 ec 08             	sub    esp,0x8
c000fed2:	6a 01                	push   0x1
c000fed4:	68 b7 1b 02 c0       	push   0xc0021bb7
c000fed9:	e8 c8 52 00 00       	call   c00151a6 <Thr::loadDLL(char const*, bool)>
c000fede:	83 c4 10             	add    esp,0x10
c000fee1:	83 ec 08             	sub    esp,0x8
c000fee4:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000feeb:	50                   	push   eax
c000feec:	e8 e6 54 00 00       	call   c00153d7 <Thr::executeDLL(unsigned long, void*)>
c000fef1:	83 c4 10             	add    esp,0x10
c000fef4:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000fefc:	74 2a                	je     c000ff28 <ACPI::open(int, int, void*)+0x44c>
c000fefe:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ff06:	74 20                	je     c000ff28 <ACPI::open(int, int, void*)+0x44c>
c000ff08:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000ff0f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff11:	83 c0 08             	add    eax,0x8
c000ff14:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff16:	83 ec 0c             	sub    esp,0xc
c000ff19:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ff20:	ff d0                	call   eax
c000ff22:	83 c4 10             	add    esp,0x10
c000ff25:	8d 76 00             	lea    esi,[esi+0x0]
c000ff28:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000ff2d:	83 ec 08             	sub    esp,0x8
c000ff30:	68 d4 1b 02 c0       	push   0xc0021bd4
c000ff35:	50                   	push   eax
c000ff36:	e8 c1 f1 ff ff       	call   c000f0fc <findDataTable(unsigned char*, char*)>
c000ff3b:	83 c4 10             	add    esp,0x10
c000ff3e:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000ff45:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000ff4d:	74 19                	je     c000ff68 <ACPI::open(int, int, void*)+0x48c>
c000ff4f:	83 ec 08             	sub    esp,0x8
c000ff52:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ff59:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ff60:	e8 13 fb ff ff       	call   c000fa78 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000ff65:	83 c4 10             	add    esp,0x10
c000ff68:	b8 00 00 00 00       	mov    eax,0x0
c000ff6d:	81 c4 70 01 00 00    	add    esp,0x170
c000ff73:	5b                   	pop    ebx
c000ff74:	5e                   	pop    esi
c000ff75:	5f                   	pop    edi
c000ff76:	c3                   	ret    
c000ff77:	90                   	nop

c000ff78 <CPU::close(int, int, void*)>:
c000ff78:	31 c0                	xor    eax,eax
c000ff7a:	c3                   	ret    
c000ff7b:	90                   	nop

c000ff7c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000ff7c:	60                   	pusha  
c000ff7d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ff81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ff89:	9c                   	pushf  
c000ff8a:	fa                   	cli    
c000ff8b:	0f 09                	wbinvd 
c000ff8d:	0f 30                	wrmsr  
c000ff8f:	9d                   	popf   
c000ff90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ff94:	89 02                	mov    DWORD PTR [edx],eax
c000ff96:	61                   	popa   
c000ff97:	c3                   	ret    

c000ff98 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000ff98:	60                   	pusha  
c000ff99:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ff9d:	9c                   	pushf  
c000ff9e:	fa                   	cli    
c000ff9f:	0f 09                	wbinvd 
c000ffa1:	31 c0                	xor    eax,eax
c000ffa3:	31 d2                	xor    edx,edx
c000ffa5:	0f 32                	rdmsr  
c000ffa7:	9d                   	popf   
c000ffa8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ffac:	89 02                	mov    DWORD PTR [edx],eax
c000ffae:	61                   	popa   
c000ffaf:	c3                   	ret    

c000ffb0 <CPU::AMD_K6_writeback(int, int, int)>:
c000ffb0:	56                   	push   esi
c000ffb1:	53                   	push   ebx
c000ffb2:	83 ec 10             	sub    esp,0x10
c000ffb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffb9:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000ffbe:	75 5d                	jne    c001001d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ffc0:	83 f8 08             	cmp    eax,0x8
c000ffc3:	75 09                	jne    c000ffce <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000ffc5:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000ffca:	7e 13                	jle    c000ffdf <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ffcc:	eb 30                	jmp    c000fffe <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ffce:	83 f8 06             	cmp    eax,0x6
c000ffd1:	7c 4a                	jl     c001001d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ffd3:	83 f8 07             	cmp    eax,0x7
c000ffd6:	7e 07                	jle    c000ffdf <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ffd8:	83 f8 09             	cmp    eax,0x9
c000ffdb:	74 21                	je     c000fffe <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ffdd:	eb 3e                	jmp    c001001d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ffdf:	89 e6                	mov    esi,esp
c000ffe1:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c000ffe7:	56                   	push   esi
c000ffe8:	c1 eb 15             	shr    ebx,0x15
c000ffeb:	68 82 00 00 c0       	push   0xc0000082
c000fff0:	83 e3 7e             	and    ebx,0x7e
c000fff3:	e8 a0 ff ff ff       	call   c000ff98 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000fff8:	56                   	push   esi
c000fff9:	6a 00                	push   0x0
c000fffb:	53                   	push   ebx
c000fffc:	eb 12                	jmp    c0010010 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000fffe:	89 e3                	mov    ebx,esp
c0010000:	53                   	push   ebx
c0010001:	68 82 00 00 c0       	push   0xc0000082
c0010006:	e8 8d ff ff ff       	call   c000ff98 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001000b:	53                   	push   ebx
c001000c:	6a 00                	push   0x0
c001000e:	6a 00                	push   0x0
c0010010:	68 82 00 00 c0       	push   0xc0000082
c0010015:	e8 62 ff ff ff       	call   c000ff7c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001001a:	83 c4 18             	add    esp,0x18
c001001d:	83 c4 10             	add    esp,0x10
c0010020:	5b                   	pop    ebx
c0010021:	5e                   	pop    esi
c0010022:	c3                   	ret    
c0010023:	90                   	nop

c0010024 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0010024:	55                   	push   ebp
c0010025:	57                   	push   edi
c0010026:	56                   	push   esi
c0010027:	53                   	push   ebx
c0010028:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001002c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010030:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010034:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0010038:	39 05 98 31 02 c0    	cmp    DWORD PTR ds:0xc0023198,eax
c001003e:	75 23                	jne    c0010063 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0010040:	a1 8c 8d 02 c0       	mov    eax,ds:0xc0028d8c
c0010045:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010049:	89 06                	mov    DWORD PTR [esi],eax
c001004b:	a1 88 8d 02 c0       	mov    eax,ds:0xc0028d88
c0010050:	89 07                	mov    DWORD PTR [edi],eax
c0010052:	a1 84 8d 02 c0       	mov    eax,ds:0xc0028d84
c0010057:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001005a:	a1 80 8d 02 c0       	mov    eax,ds:0xc0028d80
c001005f:	89 02                	mov    DWORD PTR [edx],eax
c0010061:	eb 3f                	jmp    c00100a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0010063:	31 c9                	xor    ecx,ecx
c0010065:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010069:	0f a2                	cpuid  
c001006b:	89 06                	mov    DWORD PTR [esi],eax
c001006d:	89 1f                	mov    DWORD PTR [edi],ebx
c001006f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010073:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0010076:	89 10                	mov    DWORD PTR [eax],edx
c0010078:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001007c:	a3 98 31 02 c0       	mov    ds:0xc0023198,eax
c0010081:	8b 06                	mov    eax,DWORD PTR [esi]
c0010083:	a3 8c 8d 02 c0       	mov    ds:0xc0028d8c,eax
c0010088:	8b 07                	mov    eax,DWORD PTR [edi]
c001008a:	a3 88 8d 02 c0       	mov    ds:0xc0028d88,eax
c001008f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010092:	a3 84 8d 02 c0       	mov    ds:0xc0028d84,eax
c0010097:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001009b:	8b 00                	mov    eax,DWORD PTR [eax]
c001009d:	a3 80 8d 02 c0       	mov    ds:0xc0028d80,eax
c00100a2:	5b                   	pop    ebx
c00100a3:	5e                   	pop    esi
c00100a4:	5f                   	pop    edi
c00100a5:	5d                   	pop    ebp
c00100a6:	c3                   	ret    
c00100a7:	90                   	nop

c00100a8 <CPU::cpuidCheckEDX(unsigned int)>:
c00100a8:	83 ec 10             	sub    esp,0x10
c00100ab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100af:	50                   	push   eax
c00100b0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100b4:	50                   	push   eax
c00100b5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100b9:	50                   	push   eax
c00100ba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100be:	50                   	push   eax
c00100bf:	6a 01                	push   0x1
c00100c1:	e8 5e ff ff ff       	call   c0010024 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00100c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00100ca:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00100ce:	0f 95 c0             	setne  al
c00100d1:	83 c4 24             	add    esp,0x24
c00100d4:	c3                   	ret    
c00100d5:	90                   	nop

c00100d6 <CPU::cpuidCheckECX(unsigned int)>:
c00100d6:	83 ec 10             	sub    esp,0x10
c00100d9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100dd:	50                   	push   eax
c00100de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100e2:	50                   	push   eax
c00100e3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100e7:	50                   	push   eax
c00100e8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100ec:	50                   	push   eax
c00100ed:	6a 01                	push   0x1
c00100ef:	e8 30 ff ff ff       	call   c0010024 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00100f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00100f8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00100fc:	0f 95 c0             	setne  al
c00100ff:	83 c4 24             	add    esp,0x24
c0010102:	c3                   	ret    
c0010103:	90                   	nop

c0010104 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0010104:	83 ec 10             	sub    esp,0x10
c0010107:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001010b:	50                   	push   eax
c001010c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010110:	50                   	push   eax
c0010111:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010115:	50                   	push   eax
c0010116:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001011a:	50                   	push   eax
c001011b:	6a 07                	push   0x7
c001011d:	e8 02 ff ff ff       	call   c0010024 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010122:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010126:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001012a:	0f 95 c0             	setne  al
c001012d:	83 c4 24             	add    esp,0x24
c0010130:	c3                   	ret    
c0010131:	90                   	nop

c0010132 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0010132:	83 ec 10             	sub    esp,0x10
c0010135:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010139:	50                   	push   eax
c001013a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001013e:	50                   	push   eax
c001013f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010143:	50                   	push   eax
c0010144:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010148:	50                   	push   eax
c0010149:	6a 07                	push   0x7
c001014b:	e8 d4 fe ff ff       	call   c0010024 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010150:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010154:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010158:	0f 95 c0             	setne  al
c001015b:	83 c4 24             	add    esp,0x24
c001015e:	c3                   	ret    
c001015f:	90                   	nop

c0010160 <CPU::CPU()>:
c0010160:	83 ec 0c             	sub    esp,0xc
c0010163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010167:	83 ec 08             	sub    esp,0x8
c001016a:	68 f9 1c 02 c0       	push   0xc0021cf9
c001016f:	50                   	push   eax
c0010170:	e8 39 c7 ff ff       	call   c000c8ae <Device::Device(char const*)>
c0010175:	83 c4 10             	add    esp,0x10
c0010178:	ba 8c 1d 02 c0       	mov    edx,0xc0021d8c
c001017d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010181:	89 10                	mov    DWORD PTR [eax],edx
c0010183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010187:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0010191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010195:	05 78 01 00 00       	add    eax,0x178
c001019a:	83 ec 0c             	sub    esp,0xc
c001019d:	50                   	push   eax
c001019e:	e8 b9 71 ff ff       	call   c000735c <GDT::GDT()>
c00101a3:	83 c4 10             	add    esp,0x10
c00101a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101aa:	05 7c 09 00 00       	add    eax,0x97c
c00101af:	83 ec 0c             	sub    esp,0xc
c00101b2:	50                   	push   eax
c00101b3:	e8 f4 73 ff ff       	call   c00075ac <IDT::IDT()>
c00101b8:	83 c4 10             	add    esp,0x10
c00101bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101bf:	05 7c 11 00 00       	add    eax,0x117c
c00101c4:	83 ec 0c             	sub    esp,0xc
c00101c7:	50                   	push   eax
c00101c8:	e8 77 8d ff ff       	call   c0008f44 <TSS::TSS()>
c00101cd:	83 c4 10             	add    esp,0x10
c00101d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101d4:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c00101db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101df:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c00101e9:	90                   	nop
c00101ea:	83 c4 0c             	add    esp,0xc
c00101ed:	c3                   	ret    

c00101ee <CPU::displayFeatures()>:
c00101ee:	c3                   	ret    
c00101ef:	90                   	nop

c00101f0 <CPU::detectFeatures()>:
c00101f0:	55                   	push   ebp
c00101f1:	57                   	push   edi
c00101f2:	56                   	push   esi
c00101f3:	53                   	push   ebx
c00101f4:	83 ec 30             	sub    esp,0x30
c00101f7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00101fb:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0010205:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c001020c:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0010212:	6a 0d                	push   0xd
c0010214:	6a 00                	push   0x0
c0010216:	55                   	push   ebp
c0010217:	e8 d4 02 ff ff       	call   c00004f0 <memset>
c001021c:	83 c4 10             	add    esp,0x10
c001021f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010224:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001022b:	0f 84 db 05 00 00    	je     c001080c <CPU::detectFeatures()+0x61c>
c0010231:	83 ec 0c             	sub    esp,0xc
c0010234:	89 ef                	mov    edi,ebp
c0010236:	6a 10                	push   0x10
c0010238:	e8 6b fe ff ff       	call   c00100a8 <CPU::cpuidCheckEDX(unsigned int)>
c001023d:	83 e0 01             	and    eax,0x1
c0010240:	8d 14 00             	lea    edx,[eax+eax*1]
c0010243:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010249:	83 e0 fd             	and    eax,0xfffffffd
c001024c:	09 d0                	or     eax,edx
c001024e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010254:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001025b:	e8 48 fe ff ff       	call   c00100a8 <CPU::cpuidCheckEDX(unsigned int)>
c0010260:	83 e0 01             	and    eax,0x1
c0010263:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001026a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010270:	83 e0 fb             	and    eax,0xfffffffb
c0010273:	09 d0                	or     eax,edx
c0010275:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001027b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0010282:	e8 21 fe ff ff       	call   c00100a8 <CPU::cpuidCheckEDX(unsigned int)>
c0010287:	83 e0 01             	and    eax,0x1
c001028a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010291:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010297:	83 e0 f7             	and    eax,0xfffffff7
c001029a:	09 d0                	or     eax,edx
c001029c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00102a2:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00102a9:	e8 fa fd ff ff       	call   c00100a8 <CPU::cpuidCheckEDX(unsigned int)>
c00102ae:	83 e0 01             	and    eax,0x1
c00102b1:	c1 e0 04             	shl    eax,0x4
c00102b4:	89 c2                	mov    edx,eax
c00102b6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00102bc:	83 e0 ef             	and    eax,0xffffffef
c00102bf:	09 d0                	or     eax,edx
c00102c1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00102c7:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00102ce:	e8 d5 fd ff ff       	call   c00100a8 <CPU::cpuidCheckEDX(unsigned int)>
c00102d3:	83 e0 01             	and    eax,0x1
c00102d6:	c1 e0 05             	shl    eax,0x5
c00102d9:	89 c2                	mov    edx,eax
c00102db:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00102e1:	83 e0 df             	and    eax,0xffffffdf
c00102e4:	09 d0                	or     eax,edx
c00102e6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00102ec:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00102f3:	e8 b0 fd ff ff       	call   c00100a8 <CPU::cpuidCheckEDX(unsigned int)>
c00102f8:	83 e0 01             	and    eax,0x1
c00102fb:	8d 14 00             	lea    edx,[eax+eax*1]
c00102fe:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010304:	83 e0 fd             	and    eax,0xfffffffd
c0010307:	09 d0                	or     eax,edx
c0010309:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001030f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0010316:	e8 8d fd ff ff       	call   c00100a8 <CPU::cpuidCheckEDX(unsigned int)>
c001031b:	83 e0 01             	and    eax,0x1
c001031e:	c1 e0 06             	shl    eax,0x6
c0010321:	89 c2                	mov    edx,eax
c0010323:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010329:	83 e0 bf             	and    eax,0xffffffbf
c001032c:	09 d0                	or     eax,edx
c001032e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010334:	58                   	pop    eax
c0010335:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010339:	50                   	push   eax
c001033a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001033e:	50                   	push   eax
c001033f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010343:	56                   	push   esi
c0010344:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010348:	50                   	push   eax
c0010349:	6a 00                	push   0x0
c001034b:	e8 d4 fc ff ff       	call   c0010024 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010350:	b8 04 00 00 00       	mov    eax,0x4
c0010355:	89 c1                	mov    ecx,eax
c0010357:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010359:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001035f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0010363:	89 c1                	mov    ecx,eax
c0010365:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010367:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001036d:	8d 74 24 38          	lea    esi,[esp+0x38]
c0010371:	89 c1                	mov    ecx,eax
c0010373:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010375:	83 c4 18             	add    esp,0x18
c0010378:	68 08 1c 02 c0       	push   0xc0021c08
c001037d:	55                   	push   ebp
c001037e:	e8 cd 03 ff ff       	call   c0000750 <strcmp>
c0010383:	83 c4 10             	add    esp,0x10
c0010386:	85 c0                	test   eax,eax
c0010388:	75 0f                	jne    c0010399 <CPU::detectFeatures()+0x1a9>
c001038a:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0010394:	e9 22 02 00 00       	jmp    c00105bb <CPU::detectFeatures()+0x3cb>
c0010399:	50                   	push   eax
c001039a:	50                   	push   eax
c001039b:	68 15 1c 02 c0       	push   0xc0021c15
c00103a0:	55                   	push   ebp
c00103a1:	e8 aa 03 ff ff       	call   c0000750 <strcmp>
c00103a6:	83 c4 10             	add    esp,0x10
c00103a9:	85 c0                	test   eax,eax
c00103ab:	74 dd                	je     c001038a <CPU::detectFeatures()+0x19a>
c00103ad:	50                   	push   eax
c00103ae:	50                   	push   eax
c00103af:	68 22 1c 02 c0       	push   0xc0021c22
c00103b4:	55                   	push   ebp
c00103b5:	e8 96 03 ff ff       	call   c0000750 <strcmp>
c00103ba:	83 c4 10             	add    esp,0x10
c00103bd:	85 c0                	test   eax,eax
c00103bf:	74 2a                	je     c00103eb <CPU::detectFeatures()+0x1fb>
c00103c1:	50                   	push   eax
c00103c2:	50                   	push   eax
c00103c3:	68 2f 1c 02 c0       	push   0xc0021c2f
c00103c8:	55                   	push   ebp
c00103c9:	e8 82 03 ff ff       	call   c0000750 <strcmp>
c00103ce:	83 c4 10             	add    esp,0x10
c00103d1:	85 c0                	test   eax,eax
c00103d3:	74 16                	je     c00103eb <CPU::detectFeatures()+0x1fb>
c00103d5:	50                   	push   eax
c00103d6:	50                   	push   eax
c00103d7:	68 3c 1c 02 c0       	push   0xc0021c3c
c00103dc:	55                   	push   ebp
c00103dd:	e8 6e 03 ff ff       	call   c0000750 <strcmp>
c00103e2:	83 c4 10             	add    esp,0x10
c00103e5:	85 c0                	test   eax,eax
c00103e7:	74 48                	je     c0010431 <CPU::detectFeatures()+0x241>
c00103e9:	eb 0f                	jmp    c00103fa <CPU::detectFeatures()+0x20a>
c00103eb:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00103f5:	e9 c1 01 00 00       	jmp    c00105bb <CPU::detectFeatures()+0x3cb>
c00103fa:	50                   	push   eax
c00103fb:	50                   	push   eax
c00103fc:	68 49 1c 02 c0       	push   0xc0021c49
c0010401:	55                   	push   ebp
c0010402:	e8 49 03 ff ff       	call   c0000750 <strcmp>
c0010407:	83 c4 10             	add    esp,0x10
c001040a:	85 c0                	test   eax,eax
c001040c:	74 23                	je     c0010431 <CPU::detectFeatures()+0x241>
c001040e:	57                   	push   edi
c001040f:	57                   	push   edi
c0010410:	68 56 1c 02 c0       	push   0xc0021c56
c0010415:	55                   	push   ebp
c0010416:	e8 35 03 ff ff       	call   c0000750 <strcmp>
c001041b:	83 c4 10             	add    esp,0x10
c001041e:	85 c0                	test   eax,eax
c0010420:	75 1e                	jne    c0010440 <CPU::detectFeatures()+0x250>
c0010422:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001042c:	e9 8a 01 00 00       	jmp    c00105bb <CPU::detectFeatures()+0x3cb>
c0010431:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001043b:	e9 7b 01 00 00       	jmp    c00105bb <CPU::detectFeatures()+0x3cb>
c0010440:	56                   	push   esi
c0010441:	56                   	push   esi
c0010442:	68 63 1c 02 c0       	push   0xc0021c63
c0010447:	55                   	push   ebp
c0010448:	e8 03 03 ff ff       	call   c0000750 <strcmp>
c001044d:	83 c4 10             	add    esp,0x10
c0010450:	85 c0                	test   eax,eax
c0010452:	75 0f                	jne    c0010463 <CPU::detectFeatures()+0x273>
c0010454:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001045e:	e9 58 01 00 00       	jmp    c00105bb <CPU::detectFeatures()+0x3cb>
c0010463:	51                   	push   ecx
c0010464:	51                   	push   ecx
c0010465:	68 22 1c 02 c0       	push   0xc0021c22
c001046a:	55                   	push   ebp
c001046b:	e8 e0 02 ff ff       	call   c0000750 <strcmp>
c0010470:	83 c4 10             	add    esp,0x10
c0010473:	85 c0                	test   eax,eax
c0010475:	75 0f                	jne    c0010486 <CPU::detectFeatures()+0x296>
c0010477:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0010481:	e9 35 01 00 00       	jmp    c00105bb <CPU::detectFeatures()+0x3cb>
c0010486:	52                   	push   edx
c0010487:	52                   	push   edx
c0010488:	68 70 1c 02 c0       	push   0xc0021c70
c001048d:	55                   	push   ebp
c001048e:	e8 bd 02 ff ff       	call   c0000750 <strcmp>
c0010493:	83 c4 10             	add    esp,0x10
c0010496:	85 c0                	test   eax,eax
c0010498:	75 0f                	jne    c00104a9 <CPU::detectFeatures()+0x2b9>
c001049a:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00104a4:	e9 12 01 00 00       	jmp    c00105bb <CPU::detectFeatures()+0x3cb>
c00104a9:	50                   	push   eax
c00104aa:	50                   	push   eax
c00104ab:	68 7d 1c 02 c0       	push   0xc0021c7d
c00104b0:	55                   	push   ebp
c00104b1:	e8 9a 02 ff ff       	call   c0000750 <strcmp>
c00104b6:	83 c4 10             	add    esp,0x10
c00104b9:	85 c0                	test   eax,eax
c00104bb:	75 0f                	jne    c00104cc <CPU::detectFeatures()+0x2dc>
c00104bd:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00104c7:	e9 ef 00 00 00       	jmp    c00105bb <CPU::detectFeatures()+0x3cb>
c00104cc:	50                   	push   eax
c00104cd:	50                   	push   eax
c00104ce:	68 8a 1c 02 c0       	push   0xc0021c8a
c00104d3:	55                   	push   ebp
c00104d4:	e8 77 02 ff ff       	call   c0000750 <strcmp>
c00104d9:	83 c4 10             	add    esp,0x10
c00104dc:	85 c0                	test   eax,eax
c00104de:	75 0f                	jne    c00104ef <CPU::detectFeatures()+0x2ff>
c00104e0:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00104ea:	e9 cc 00 00 00       	jmp    c00105bb <CPU::detectFeatures()+0x3cb>
c00104ef:	50                   	push   eax
c00104f0:	50                   	push   eax
c00104f1:	68 97 1c 02 c0       	push   0xc0021c97
c00104f6:	55                   	push   ebp
c00104f7:	e8 54 02 ff ff       	call   c0000750 <strcmp>
c00104fc:	83 c4 10             	add    esp,0x10
c00104ff:	85 c0                	test   eax,eax
c0010501:	75 0f                	jne    c0010512 <CPU::detectFeatures()+0x322>
c0010503:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001050d:	e9 a9 00 00 00       	jmp    c00105bb <CPU::detectFeatures()+0x3cb>
c0010512:	50                   	push   eax
c0010513:	50                   	push   eax
c0010514:	68 a4 1c 02 c0       	push   0xc0021ca4
c0010519:	55                   	push   ebp
c001051a:	e8 31 02 ff ff       	call   c0000750 <strcmp>
c001051f:	83 c4 10             	add    esp,0x10
c0010522:	85 c0                	test   eax,eax
c0010524:	75 0f                	jne    c0010535 <CPU::detectFeatures()+0x345>
c0010526:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0010530:	e9 86 00 00 00       	jmp    c00105bb <CPU::detectFeatures()+0x3cb>
c0010535:	50                   	push   eax
c0010536:	50                   	push   eax
c0010537:	68 b1 1c 02 c0       	push   0xc0021cb1
c001053c:	55                   	push   ebp
c001053d:	e8 0e 02 ff ff       	call   c0000750 <strcmp>
c0010542:	83 c4 10             	add    esp,0x10
c0010545:	85 c0                	test   eax,eax
c0010547:	75 0c                	jne    c0010555 <CPU::detectFeatures()+0x365>
c0010549:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0010553:	eb 66                	jmp    c00105bb <CPU::detectFeatures()+0x3cb>
c0010555:	50                   	push   eax
c0010556:	50                   	push   eax
c0010557:	68 be 1c 02 c0       	push   0xc0021cbe
c001055c:	55                   	push   ebp
c001055d:	e8 ee 01 ff ff       	call   c0000750 <strcmp>
c0010562:	83 c4 10             	add    esp,0x10
c0010565:	85 c0                	test   eax,eax
c0010567:	75 0c                	jne    c0010575 <CPU::detectFeatures()+0x385>
c0010569:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0010573:	eb 46                	jmp    c00105bb <CPU::detectFeatures()+0x3cb>
c0010575:	57                   	push   edi
c0010576:	57                   	push   edi
c0010577:	68 cb 1c 02 c0       	push   0xc0021ccb
c001057c:	55                   	push   ebp
c001057d:	e8 ce 01 ff ff       	call   c0000750 <strcmp>
c0010582:	83 c4 10             	add    esp,0x10
c0010585:	85 c0                	test   eax,eax
c0010587:	74 e0                	je     c0010569 <CPU::detectFeatures()+0x379>
c0010589:	56                   	push   esi
c001058a:	56                   	push   esi
c001058b:	68 d8 1c 02 c0       	push   0xc0021cd8
c0010590:	55                   	push   ebp
c0010591:	e8 ba 01 ff ff       	call   c0000750 <strcmp>
c0010596:	83 c4 10             	add    esp,0x10
c0010599:	85 c0                	test   eax,eax
c001059b:	74 cc                	je     c0010569 <CPU::detectFeatures()+0x379>
c001059d:	51                   	push   ecx
c001059e:	51                   	push   ecx
c001059f:	68 e5 1c 02 c0       	push   0xc0021ce5
c00105a4:	55                   	push   ebp
c00105a5:	e8 a6 01 ff ff       	call   c0000750 <strcmp>
c00105aa:	83 c4 10             	add    esp,0x10
c00105ad:	85 c0                	test   eax,eax
c00105af:	74 b8                	je     c0010569 <CPU::detectFeatures()+0x379>
c00105b1:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00105bb:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00105c0:	0f 86 be 00 00 00    	jbe    c0010684 <CPU::detectFeatures()+0x494>
c00105c6:	83 ec 0c             	sub    esp,0xc
c00105c9:	68 80 00 00 00       	push   0x80
c00105ce:	e8 31 fb ff ff       	call   c0010104 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00105d3:	83 e0 01             	and    eax,0x1
c00105d6:	c1 e0 06             	shl    eax,0x6
c00105d9:	89 c2                	mov    edx,eax
c00105db:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105e1:	83 e0 bf             	and    eax,0xffffffbf
c00105e4:	09 d0                	or     eax,edx
c00105e6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105ec:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00105f3:	e8 0c fb ff ff       	call   c0010104 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00105f8:	83 e0 01             	and    eax,0x1
c00105fb:	c1 e0 04             	shl    eax,0x4
c00105fe:	89 c2                	mov    edx,eax
c0010600:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010606:	83 e0 ef             	and    eax,0xffffffef
c0010609:	09 d0                	or     eax,edx
c001060b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010611:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0010618:	e8 e7 fa ff ff       	call   c0010104 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001061d:	89 c2                	mov    edx,eax
c001061f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010625:	c1 e2 07             	shl    edx,0x7
c0010628:	83 e0 7f             	and    eax,0x7f
c001062b:	09 d0                	or     eax,edx
c001062d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010633:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001063a:	e8 f3 fa ff ff       	call   c0010132 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001063f:	83 e0 01             	and    eax,0x1
c0010642:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010649:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001064f:	83 e0 f7             	and    eax,0xfffffff7
c0010652:	09 d0                	or     eax,edx
c0010654:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001065a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0010661:	e8 cc fa ff ff       	call   c0010132 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010666:	83 c4 10             	add    esp,0x10
c0010669:	83 e0 01             	and    eax,0x1
c001066c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010673:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010679:	83 e0 fb             	and    eax,0xfffffffb
c001067c:	09 d0                	or     eax,edx
c001067e:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010684:	83 ec 0c             	sub    esp,0xc
c0010687:	8d 44 24 28          	lea    eax,[esp+0x28]
c001068b:	50                   	push   eax
c001068c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010690:	50                   	push   eax
c0010691:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0010695:	57                   	push   edi
c0010696:	8d 74 24 28          	lea    esi,[esp+0x28]
c001069a:	56                   	push   esi
c001069b:	6a 01                	push   0x1
c001069d:	e8 82 f9 ff ff       	call   c0010024 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00106a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00106a6:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00106ac:	89 c1                	mov    ecx,eax
c00106ae:	83 e2 f0             	and    edx,0xfffffff0
c00106b1:	83 e1 0f             	and    ecx,0xf
c00106b4:	09 ca                	or     edx,ecx
c00106b6:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00106bc:	89 c2                	mov    edx,eax
c00106be:	c1 ea 04             	shr    edx,0x4
c00106c1:	83 e2 0f             	and    edx,0xf
c00106c4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00106c8:	89 d1                	mov    ecx,edx
c00106ca:	83 c4 20             	add    esp,0x20
c00106cd:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00106d3:	c1 e1 06             	shl    ecx,0x6
c00106d6:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c00106dc:	09 ca                	or     edx,ecx
c00106de:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00106e5:	89 c2                	mov    edx,eax
c00106e7:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c00106ed:	c1 ea 08             	shr    edx,0x8
c00106f0:	83 e1 3f             	and    ecx,0x3f
c00106f3:	83 e2 0f             	and    edx,0xf
c00106f6:	89 d5                	mov    ebp,edx
c00106f8:	83 e5 03             	and    ebp,0x3
c00106fb:	c1 e5 06             	shl    ebp,0x6
c00106fe:	09 e9                	or     ecx,ebp
c0010700:	89 d5                	mov    ebp,edx
c0010702:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0010708:	c1 ed 02             	shr    ebp,0x2
c001070b:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0010711:	83 e1 c0             	and    ecx,0xffffffc0
c0010714:	09 e9                	or     ecx,ebp
c0010716:	89 c5                	mov    ebp,eax
c0010718:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001071e:	c1 ed 08             	shr    ebp,0x8
c0010721:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010727:	83 e5 30             	and    ebp,0x30
c001072a:	83 e1 cf             	and    ecx,0xffffffcf
c001072d:	09 e9                	or     ecx,ebp
c001072f:	83 fa 06             	cmp    edx,0x6
c0010732:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0010738:	74 05                	je     c001073f <CPU::detectFeatures()+0x54f>
c001073a:	83 fa 0f             	cmp    edx,0xf
c001073d:	75 64                	jne    c00107a3 <CPU::detectFeatures()+0x5b3>
c001073f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010745:	89 c1                	mov    ecx,eax
c0010747:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c001074d:	c1 e9 10             	shr    ecx,0x10
c0010750:	c1 e1 04             	shl    ecx,0x4
c0010753:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0010757:	0f b6 c9             	movzx  ecx,cl
c001075a:	c1 e1 06             	shl    ecx,0x6
c001075d:	09 e9                	or     ecx,ebp
c001075f:	83 fa 0f             	cmp    edx,0xf
c0010762:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010769:	75 38                	jne    c00107a3 <CPU::detectFeatures()+0x5b3>
c001076b:	c1 e8 14             	shr    eax,0x14
c001076e:	83 c0 0f             	add    eax,0xf
c0010771:	0f b6 c0             	movzx  eax,al
c0010774:	89 c2                	mov    edx,eax
c0010776:	c1 e8 02             	shr    eax,0x2
c0010779:	83 e2 03             	and    edx,0x3
c001077c:	89 d1                	mov    ecx,edx
c001077e:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010784:	c1 e1 06             	shl    ecx,0x6
c0010787:	83 e2 3f             	and    edx,0x3f
c001078a:	09 ca                	or     edx,ecx
c001078c:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010792:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010798:	83 e2 c0             	and    edx,0xffffffc0
c001079b:	09 d0                	or     eax,edx
c001079d:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00107a3:	83 ec 0c             	sub    esp,0xc
c00107a6:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00107ac:	83 c8 07             	or     eax,0x7
c00107af:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00107b5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00107b9:	50                   	push   eax
c00107ba:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00107be:	55                   	push   ebp
c00107bf:	57                   	push   edi
c00107c0:	56                   	push   esi
c00107c1:	68 00 00 00 80       	push   0x80000000
c00107c6:	e8 59 f8 ff ff       	call   c0010024 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00107cb:	83 c4 20             	add    esp,0x20
c00107ce:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00107d6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00107da:	76 1e                	jbe    c00107fa <CPU::detectFeatures()+0x60a>
c00107dc:	83 ec 0c             	sub    esp,0xc
c00107df:	50                   	push   eax
c00107e0:	55                   	push   ebp
c00107e1:	57                   	push   edi
c00107e2:	56                   	push   esi
c00107e3:	68 01 00 00 80       	push   0x80000001
c00107e8:	e8 37 f8 ff ff       	call   c0010024 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00107ed:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c00107f7:	83 c4 20             	add    esp,0x20
c00107fa:	52                   	push   edx
c00107fb:	52                   	push   edx
c00107fc:	68 f1 1c 02 c0       	push   0xc0021cf1
c0010801:	53                   	push   ebx
c0010802:	e8 99 c0 ff ff       	call   c000c8a0 <Device::setName(char const*)>
c0010807:	83 c4 10             	add    esp,0x10
c001080a:	eb 69                	jmp    c0010875 <CPU::detectFeatures()+0x685>
c001080c:	50                   	push   eax
c001080d:	50                   	push   eax
c001080e:	68 56 1c 02 c0       	push   0xc0021c56
c0010813:	55                   	push   ebp
c0010814:	e8 27 fe fe ff       	call   c0000640 <strcpy>
c0010819:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010823:	e8 9b f9 fe ff       	call   c00001c3 <is486>
c0010828:	83 c4 10             	add    esp,0x10
c001082b:	85 c0                	test   eax,eax
c001082d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010833:	74 1f                	je     c0010854 <CPU::detectFeatures()+0x664>
c0010835:	83 c8 07             	or     eax,0x7
c0010838:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001083e:	0f 20 c0             	mov    eax,cr0
c0010841:	83 e0 14             	and    eax,0x14
c0010844:	83 f8 04             	cmp    eax,0x4
c0010847:	75 10                	jne    c0010859 <CPU::detectFeatures()+0x669>
c0010849:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001084f:	83 e0 fd             	and    eax,0xfffffffd
c0010852:	eb 1b                	jmp    c001086f <CPU::detectFeatures()+0x67f>
c0010854:	83 e0 f8             	and    eax,0xfffffff8
c0010857:	eb df                	jmp    c0010838 <CPU::detectFeatures()+0x648>
c0010859:	e8 40 f9 fe ff       	call   c000019e <hasLegacyFPU>
c001085e:	83 e0 01             	and    eax,0x1
c0010861:	8d 14 00             	lea    edx,[eax+eax*1]
c0010864:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001086a:	83 e0 fd             	and    eax,0xfffffffd
c001086d:	09 d0                	or     eax,edx
c001086f:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010875:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c001087c:	74 17                	je     c0010895 <CPU::detectFeatures()+0x6a5>
c001087e:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c0010884:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c001088a:	83 c8 10             	or     eax,0x10
c001088d:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010893:	eb 20                	jmp    c00108b5 <CPU::detectFeatures()+0x6c5>
c0010895:	e8 04 f9 fe ff       	call   c000019e <hasLegacyFPU>
c001089a:	83 e0 01             	and    eax,0x1
c001089d:	8d 14 00             	lea    edx,[eax+eax*1]
c00108a0:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00108a6:	83 e0 fd             	and    eax,0xfffffffd
c00108a9:	09 d0                	or     eax,edx
c00108ab:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00108b1:	a8 02                	test   al,0x2
c00108b3:	75 c9                	jne    c001087e <CPU::detectFeatures()+0x68e>
c00108b5:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c00108bc:	83 c4 2c             	add    esp,0x2c
c00108bf:	5b                   	pop    ebx
c00108c0:	5e                   	pop    esi
c00108c1:	5f                   	pop    edi
c00108c2:	5d                   	pop    ebp
c00108c3:	c3                   	ret    

c00108c4 <CPU::setupSMEP()>:
c00108c4:	0f 20 e0             	mov    eax,cr4
c00108c7:	0d 00 00 10 00       	or     eax,0x100000
c00108cc:	0f 22 e0             	mov    cr4,eax
c00108cf:	c3                   	ret    

c00108d0 <CPU::setupUMIP()>:
c00108d0:	0f 20 e0             	mov    eax,cr4
c00108d3:	80 cc 08             	or     ah,0x8
c00108d6:	0f 22 e0             	mov    cr4,eax
c00108d9:	c3                   	ret    

c00108da <CPU::setupTSC()>:
c00108da:	0f 20 e0             	mov    eax,cr4
c00108dd:	83 c8 04             	or     eax,0x4
c00108e0:	0f 22 e0             	mov    cr4,eax
c00108e3:	c3                   	ret    

c00108e4 <CPU::setupLargePages()>:
c00108e4:	0f 20 e0             	mov    eax,cr4
c00108e7:	83 c8 10             	or     eax,0x10
c00108ea:	0f 22 e0             	mov    cr4,eax
c00108ed:	c3                   	ret    

c00108ee <CPU::setupPAT()>:
c00108ee:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00108f3:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00108fa:	74 2c                	je     c0010928 <CPU::setupPAT()+0x3a>
c00108fc:	53                   	push   ebx
c00108fd:	83 ec 10             	sub    esp,0x10
c0010900:	68 77 02 00 00       	push   0x277
c0010905:	50                   	push   eax
c0010906:	e8 b5 67 ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001090b:	83 e2 f8             	and    edx,0xfffffff8
c001090e:	83 ca 01             	or     edx,0x1
c0010911:	52                   	push   edx
c0010912:	50                   	push   eax
c0010913:	68 77 02 00 00       	push   0x277
c0010918:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001091e:	e8 c9 67 ff ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0010923:	83 c4 28             	add    esp,0x28
c0010926:	5b                   	pop    ebx
c0010927:	c3                   	ret    
c0010928:	c3                   	ret    
c0010929:	90                   	nop

c001092a <CPU::setupMTRR()>:
c001092a:	c3                   	ret    
c001092b:	90                   	nop

c001092c <CPU::setupGlobalPages()>:
c001092c:	0f 20 e0             	mov    eax,cr4
c001092f:	0c 80                	or     al,0x80
c0010931:	0f 22 e0             	mov    cr4,eax
c0010934:	c3                   	ret    
c0010935:	90                   	nop

c0010936 <CPU::allowUsermodeDataAccess()>:
c0010936:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001093a:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010941:	74 03                	je     c0010946 <CPU::allowUsermodeDataAccess()+0x10>
c0010943:	0f 01 cb             	stac   
c0010946:	c3                   	ret    
c0010947:	90                   	nop

c0010948 <CPU::prohibitUsermodeDataAccess()>:
c0010948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001094c:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010953:	74 03                	je     c0010958 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010955:	0f 01 ca             	clac   
c0010958:	c3                   	ret    
c0010959:	90                   	nop

c001095a <CPU::setupSMAP()>:
c001095a:	0f 20 e0             	mov    eax,cr4
c001095d:	0d 00 00 20 00       	or     eax,0x200000
c0010962:	0f 22 e0             	mov    cr4,eax
c0010965:	eb e1                	jmp    c0010948 <CPU::prohibitUsermodeDataAccess()>
c0010967:	90                   	nop

c0010968 <CPU::setupFeatures()>:
c0010968:	53                   	push   ebx
c0010969:	83 ec 08             	sub    esp,0x8
c001096c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010970:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010977:	74 18                	je     c0010991 <CPU::setupFeatures()+0x29>
c0010979:	83 ec 0c             	sub    esp,0xc
c001097c:	68 fd 1c 02 c0       	push   0xc0021cfd
c0010981:	e8 bf 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010986:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010989:	e8 42 ff ff ff       	call   c00108d0 <CPU::setupUMIP()>
c001098e:	83 c4 10             	add    esp,0x10
c0010991:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010998:	74 18                	je     c00109b2 <CPU::setupFeatures()+0x4a>
c001099a:	83 ec 0c             	sub    esp,0xc
c001099d:	68 07 1d 02 c0       	push   0xc0021d07
c00109a2:	e8 9e 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00109a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109aa:	e8 2b ff ff ff       	call   c00108da <CPU::setupTSC()>
c00109af:	83 c4 10             	add    esp,0x10
c00109b2:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c00109b9:	74 18                	je     c00109d3 <CPU::setupFeatures()+0x6b>
c00109bb:	83 ec 0c             	sub    esp,0xc
c00109be:	68 10 1d 02 c0       	push   0xc0021d10
c00109c3:	e8 7d 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00109c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109cb:	e8 14 ff ff ff       	call   c00108e4 <CPU::setupLargePages()>
c00109d0:	83 c4 10             	add    esp,0x10
c00109d3:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c00109da:	74 18                	je     c00109f4 <CPU::setupFeatures()+0x8c>
c00109dc:	83 ec 0c             	sub    esp,0xc
c00109df:	68 19 1d 02 c0       	push   0xc0021d19
c00109e4:	e8 5c 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00109e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109ec:	e8 3b ff ff ff       	call   c001092c <CPU::setupGlobalPages()>
c00109f1:	83 c4 10             	add    esp,0x10
c00109f4:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c00109fb:	74 18                	je     c0010a15 <CPU::setupFeatures()+0xad>
c00109fd:	83 ec 0c             	sub    esp,0xc
c0010a00:	68 2b 1d 02 c0       	push   0xc0021d2b
c0010a05:	e8 3b 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010a0a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a0d:	e8 dc fe ff ff       	call   c00108ee <CPU::setupPAT()>
c0010a12:	83 c4 10             	add    esp,0x10
c0010a15:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010a1c:	74 11                	je     c0010a2f <CPU::setupFeatures()+0xc7>
c0010a1e:	c7 44 24 10 34 1d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021d34
c0010a26:	83 c4 08             	add    esp,0x8
c0010a29:	5b                   	pop    ebx
c0010a2a:	e9 16 9f ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c0010a2f:	83 c4 08             	add    esp,0x8
c0010a32:	5b                   	pop    ebx
c0010a33:	c3                   	ret    

c0010a34 <CPU::open(int, int, void*)>:
c0010a34:	55                   	push   ebp
c0010a35:	57                   	push   edi
c0010a36:	56                   	push   esi
c0010a37:	53                   	push   ebx
c0010a38:	83 ec 18             	sub    esp,0x18
c0010a3b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010a3f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010a43:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010a47:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010a4d:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010a53:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010a59:	50                   	push   eax
c0010a5a:	e8 5f 69 ff ff       	call   c00073be <GDT::setup()>
c0010a5f:	83 c4 0c             	add    esp,0xc
c0010a62:	6a 00                	push   0x0
c0010a64:	68 ef be ad de       	push   0xdeadbeef
c0010a69:	55                   	push   ebp
c0010a6a:	e8 19 85 ff ff       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c0010a6f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010a72:	e8 f1 84 ff ff       	call   c0008f68 <TSS::flush()>
c0010a77:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a80:	e8 9d 6b ff ff       	call   c0007622 <IDT::setup()>
c0010a85:	b8 00 04 00 00       	mov    eax,0x400
c0010a8a:	0f 23 f8             	mov    db7,eax
c0010a8d:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010a97:	e8 23 73 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0010a9c:	83 c4 10             	add    esp,0x10
c0010a9f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010aa5:	85 f6                	test   esi,esi
c0010aa7:	89 38                	mov    DWORD PTR [eax],edi
c0010aa9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010aaf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010ab2:	74 10                	je     c0010ac4 <CPU::open(int, int, void*)+0x90>
c0010ab4:	50                   	push   eax
c0010ab5:	50                   	push   eax
c0010ab6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010abc:	56                   	push   esi
c0010abd:	e8 ec 8d ff ff       	call   c00098ae <VAS::setCPUSpecific(unsigned long)>
c0010ac2:	eb 0d                	jmp    c0010ad1 <CPU::open(int, int, void*)+0x9d>
c0010ac4:	83 ec 0c             	sub    esp,0xc
c0010ac7:	68 3e 1d 02 c0       	push   0xc0021d3e
c0010acc:	e8 74 08 00 00       	call   c0011345 <KePanic(char const*)>
c0010ad1:	83 c4 10             	add    esp,0x10
c0010ad4:	83 ec 0c             	sub    esp,0xc
c0010ad7:	68 4c 1d 02 c0       	push   0xc0021d4c
c0010adc:	e8 8e 01 00 00       	call   c0010c6f <KeSetBootMessage(char const*)>
c0010ae1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ae4:	e8 07 f7 ff ff       	call   c00101f0 <CPU::detectFeatures()>
c0010ae9:	c7 04 24 6f 1d 02 c0 	mov    DWORD PTR [esp],0xc0021d6f
c0010af0:	e8 7a 01 00 00       	call   c0010c6f <KeSetBootMessage(char const*)>
c0010af5:	e8 df 71 00 00       	call   c0017cd9 <HalInitialise()>
c0010afa:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c0010aff:	83 e0 10             	and    eax,0x10
c0010b02:	83 f8 01             	cmp    eax,0x1
c0010b05:	19 c0                	sbb    eax,eax
c0010b07:	83 e0 46             	and    eax,0x46
c0010b0a:	83 c0 1e             	add    eax,0x1e
c0010b0d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b10:	e8 28 d6 ff ff       	call   c000e13d <setupTimer(int)>
c0010b15:	83 c4 10             	add    esp,0x10
c0010b18:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010b1e:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c0010b25:	74 0c                	je     c0010b33 <CPU::open(int, int, void*)+0xff>
c0010b27:	83 ec 0c             	sub    esp,0xc
c0010b2a:	53                   	push   ebx
c0010b2b:	e8 38 fe ff ff       	call   c0010968 <CPU::setupFeatures()>
c0010b30:	83 c4 10             	add    esp,0x10
c0010b33:	83 c4 0c             	add    esp,0xc
c0010b36:	31 c0                	xor    eax,eax
c0010b38:	5b                   	pop    ebx
c0010b39:	5e                   	pop    esi
c0010b3a:	5f                   	pop    edi
c0010b3b:	5d                   	pop    ebp
c0010b3c:	c3                   	ret    

c0010b3d <KeInitialiseAtexit()>:
c0010b3d:	83 ec 10             	sub    esp,0x10
c0010b40:	c7 05 a0 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028da0,0x0
c0010b4a:	6a 60                	push   0x60
c0010b4c:	6a 00                	push   0x0
c0010b4e:	68 20 8e 02 c0       	push   0xc0028e20
c0010b53:	e8 98 f9 fe ff       	call   c00004f0 <memset>
c0010b58:	83 c4 1c             	add    esp,0x1c
c0010b5b:	c3                   	ret    

c0010b5c <KeRegisterAtexit(void (*)(void*), void*)>:
c0010b5c:	a1 a0 8d 02 c0       	mov    eax,ds:0xc0028da0
c0010b61:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b65:	89 14 85 20 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd71e0],edx
c0010b6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b70:	89 14 85 c0 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7240],edx
c0010b77:	40                   	inc    eax
c0010b78:	a3 a0 8d 02 c0       	mov    ds:0xc0028da0,eax
c0010b7d:	83 f8 17             	cmp    eax,0x17
c0010b80:	7e 0d                	jle    c0010b8f <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010b82:	c7 44 24 04 b0 1d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021db0
c0010b8a:	e9 b6 07 00 00       	jmp    c0011345 <KePanic(char const*)>
c0010b8f:	c3                   	ret    

c0010b90 <KeExecuteAtexit()>:
c0010b90:	53                   	push   ebx
c0010b91:	31 db                	xor    ebx,ebx
c0010b93:	83 ec 08             	sub    esp,0x8
c0010b96:	39 1d a0 8d 02 c0    	cmp    DWORD PTR ds:0xc0028da0,ebx
c0010b9c:	7e 50                	jle    c0010bee <KeExecuteAtexit()+0x5e>
c0010b9e:	8b 04 9d 20 8e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd71e0]
c0010ba5:	85 c0                	test   eax,eax
c0010ba7:	74 42                	je     c0010beb <KeExecuteAtexit()+0x5b>
c0010ba9:	51                   	push   ecx
c0010baa:	50                   	push   eax
c0010bab:	53                   	push   ebx
c0010bac:	68 c9 1d 02 c0       	push   0xc0021dc9
c0010bb1:	e8 8f 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010bb6:	58                   	pop    eax
c0010bb7:	ff 34 9d c0 8d 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7240]
c0010bbe:	ff 14 9d 20 8e 02 c0 	call   DWORD PTR [ebx*4-0x3ffd71e0]
c0010bc5:	c7 04 24 eb 1d 02 c0 	mov    DWORD PTR [esp],0xc0021deb
c0010bcc:	e8 74 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010bd1:	c7 04 24 4b 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f4b
c0010bd8:	c7 04 9d 20 8e 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd71e0],0x0
c0010be3:	e8 5d 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010be8:	83 c4 10             	add    esp,0x10
c0010beb:	43                   	inc    ebx
c0010bec:	eb a8                	jmp    c0010b96 <KeExecuteAtexit()+0x6>
c0010bee:	83 c4 08             	add    esp,0x8
c0010bf1:	5b                   	pop    ebx
c0010bf2:	c3                   	ret    

c0010bf3 <KeDisplaySplashScreen()>:
c0010bf3:	55                   	push   ebp
c0010bf4:	bd 05 00 00 00       	mov    ebp,0x5
c0010bf9:	57                   	push   edi
c0010bfa:	bf 0a 00 00 00       	mov    edi,0xa
c0010bff:	56                   	push   esi
c0010c00:	31 f6                	xor    esi,esi
c0010c02:	53                   	push   ebx
c0010c03:	31 db                	xor    ebx,ebx
c0010c05:	83 ec 0c             	sub    esp,0xc
c0010c08:	0f b6 96 a0 31 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdce60]
c0010c0f:	89 d0                	mov    eax,edx
c0010c11:	85 d2                	test   edx,edx
c0010c13:	74 52                	je     c0010c67 <KeDisplaySplashScreen()+0x74>
c0010c15:	80 bb d6 31 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdce2a],0xdb
c0010c1c:	75 13                	jne    c0010c31 <KeDisplaySplashScreen()+0x3e>
c0010c1e:	0f b6 8b d5 31 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdce2b]
c0010c25:	83 e1 fe             	and    ecx,0xfffffffe
c0010c28:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010c2e:	75 01                	jne    c0010c31 <KeDisplaySplashScreen()+0x3e>
c0010c30:	47                   	inc    edi
c0010c31:	83 fa 0d             	cmp    edx,0xd
c0010c34:	74 28                	je     c0010c5e <KeDisplaySplashScreen()+0x6b>
c0010c36:	83 fa 0a             	cmp    edx,0xa
c0010c39:	75 0a                	jne    c0010c45 <KeDisplaySplashScreen()+0x52>
c0010c3b:	45                   	inc    ebp
c0010c3c:	bf 0a 00 00 00       	mov    edi,0xa
c0010c41:	31 db                	xor    ebx,ebx
c0010c43:	eb 19                	jmp    c0010c5e <KeDisplaySplashScreen()+0x6b>
c0010c45:	83 ec 0c             	sub    esp,0xc
c0010c48:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010c4b:	55                   	push   ebp
c0010c4c:	0f be c0             	movsx  eax,al
c0010c4f:	52                   	push   edx
c0010c50:	43                   	inc    ebx
c0010c51:	6a 00                	push   0x0
c0010c53:	6a 0e                	push   0xe
c0010c55:	50                   	push   eax
c0010c56:	e8 fd 7c 00 00       	call   c0018958 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010c5b:	83 c4 20             	add    esp,0x20
c0010c5e:	46                   	inc    esi
c0010c5f:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010c65:	75 a1                	jne    c0010c08 <KeDisplaySplashScreen()+0x15>
c0010c67:	83 c4 0c             	add    esp,0xc
c0010c6a:	5b                   	pop    ebx
c0010c6b:	5e                   	pop    esi
c0010c6c:	5f                   	pop    edi
c0010c6d:	5d                   	pop    ebp
c0010c6e:	c3                   	ret    

c0010c6f <KeSetBootMessage(char const*)>:
c0010c6f:	57                   	push   edi
c0010c70:	56                   	push   esi
c0010c71:	53                   	push   ebx
c0010c72:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010c78:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010c7f:	68 9e 00 00 00       	push   0x9e
c0010c84:	6a 00                	push   0x0
c0010c86:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010c8a:	56                   	push   esi
c0010c8b:	e8 60 f8 fe ff       	call   c00004f0 <memset>
c0010c90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c93:	e8 d8 f8 fe ff       	call   c0000570 <strlen>
c0010c98:	ba 50 00 00 00       	mov    edx,0x50
c0010c9d:	83 c4 10             	add    esp,0x10
c0010ca0:	29 c2                	sub    edx,eax
c0010ca2:	31 c9                	xor    ecx,ecx
c0010ca4:	83 e2 fe             	and    edx,0xfffffffe
c0010ca7:	01 f2                	add    edx,esi
c0010ca9:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010cae:	84 c0                	test   al,al
c0010cb0:	74 0a                	je     c0010cbc <KeSetBootMessage(char const*)+0x4d>
c0010cb2:	80 cc 0f             	or     ah,0xf
c0010cb5:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010cb9:	41                   	inc    ecx
c0010cba:	eb ed                	jmp    c0010ca9 <KeSetBootMessage(char const*)+0x3a>
c0010cbc:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010cc1:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010cc6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010cc8:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010cce:	5b                   	pop    ebx
c0010ccf:	5e                   	pop    esi
c0010cd0:	5f                   	pop    edi
c0010cd1:	c3                   	ret    
c0010cd2:	66 90                	xchg   ax,ax

c0010cd4 <Krnl::handlePowerButton()>:
c0010cd4:	83 ec 0c             	sub    esp,0xc
c0010cd7:	e8 c4 06 00 00       	call   c00113a0 <KeHandlePowerButton()>
c0010cdc:	90                   	nop
c0010cdd:	83 c4 0c             	add    esp,0xc
c0010ce0:	c3                   	ret    
c0010ce1:	8d 76 00             	lea    esi,[esi+0x0]

c0010ce4 <Krnl::handleSleepButton()>:
c0010ce4:	83 ec 0c             	sub    esp,0xc
c0010ce7:	e8 e9 06 00 00       	call   c00113d5 <KeHandleSleepButton()>
c0010cec:	90                   	nop
c0010ced:	83 c4 0c             	add    esp,0xc
c0010cf0:	c3                   	ret    
c0010cf1:	90                   	nop

c0010cf2 <EnvVarContainer::getEnv(char const*)>:
c0010cf2:	57                   	push   edi
c0010cf3:	56                   	push   esi
c0010cf4:	53                   	push   ebx
c0010cf5:	31 db                	xor    ebx,ebx
c0010cf7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010cfb:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010cfd:	7e 2b                	jle    c0010d2a <EnvVarContainer::getEnv(char const*)+0x38>
c0010cff:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010d06:	50                   	push   eax
c0010d07:	50                   	push   eax
c0010d08:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010d0b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010d0e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010d12:	e8 39 fa fe ff       	call   c0000750 <strcmp>
c0010d17:	83 c4 10             	add    esp,0x10
c0010d1a:	85 c0                	test   eax,eax
c0010d1c:	75 09                	jne    c0010d27 <EnvVarContainer::getEnv(char const*)+0x35>
c0010d1e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010d21:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010d25:	eb 05                	jmp    c0010d2c <EnvVarContainer::getEnv(char const*)+0x3a>
c0010d27:	43                   	inc    ebx
c0010d28:	eb d1                	jmp    c0010cfb <EnvVarContainer::getEnv(char const*)+0x9>
c0010d2a:	31 c0                	xor    eax,eax
c0010d2c:	5b                   	pop    ebx
c0010d2d:	5e                   	pop    esi
c0010d2e:	5f                   	pop    edi
c0010d2f:	c3                   	ret    

c0010d30 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010d30:	55                   	push   ebp
c0010d31:	57                   	push   edi
c0010d32:	56                   	push   esi
c0010d33:	53                   	push   ebx
c0010d34:	83 ec 28             	sub    esp,0x28
c0010d37:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010d3b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010d3f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010d43:	56                   	push   esi
c0010d44:	e8 27 f8 fe ff       	call   c0000570 <strlen>
c0010d49:	40                   	inc    eax
c0010d4a:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d4d:	e8 64 6d ff ff       	call   c0007ab6 <malloc>
c0010d52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d55:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010d59:	e8 12 f8 fe ff       	call   c0000570 <strlen>
c0010d5e:	40                   	inc    eax
c0010d5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d62:	e8 4f 6d ff ff       	call   c0007ab6 <malloc>
c0010d67:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d6a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010d6e:	e8 fd f7 fe ff       	call   c0000570 <strlen>
c0010d73:	83 c4 0c             	add    esp,0xc
c0010d76:	40                   	inc    eax
c0010d77:	50                   	push   eax
c0010d78:	6a 00                	push   0x0
c0010d7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010d7e:	e8 6d f7 fe ff       	call   c00004f0 <memset>
c0010d83:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d86:	e8 e5 f7 fe ff       	call   c0000570 <strlen>
c0010d8b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010d8f:	8d 48 01             	lea    ecx,[eax+0x1]
c0010d92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d97:	89 de                	mov    esi,ebx
c0010d99:	e8 d2 f7 fe ff       	call   c0000570 <strlen>
c0010d9e:	83 c4 0c             	add    esp,0xc
c0010da1:	40                   	inc    eax
c0010da2:	50                   	push   eax
c0010da3:	6a 00                	push   0x0
c0010da5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010da9:	e8 42 f7 fe ff       	call   c00004f0 <memset>
c0010dae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010db1:	e8 ba f7 fe ff       	call   c0000570 <strlen>
c0010db6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010dba:	8d 48 01             	lea    ecx,[eax+0x1]
c0010dbd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010dbf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010dc2:	40                   	inc    eax
c0010dc3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010dc6:	c1 e0 03             	shl    eax,0x3
c0010dc9:	5a                   	pop    edx
c0010dca:	59                   	pop    ecx
c0010dcb:	50                   	push   eax
c0010dcc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010dcf:	e8 ce 6c ff ff       	call   c0007aa2 <realloc>
c0010dd4:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010dd8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010ddb:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010dde:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010de2:	b9 08 00 00 00       	mov    ecx,0x8
c0010de7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010de9:	83 c4 2c             	add    esp,0x2c
c0010dec:	5b                   	pop    ebx
c0010ded:	5e                   	pop    esi
c0010dee:	5f                   	pop    edi
c0010def:	5d                   	pop    ebp
c0010df0:	c3                   	ret    
c0010df1:	90                   	nop

c0010df2 <EnvVarContainer::deleteEnv(char const*)>:
c0010df2:	c3                   	ret    
c0010df3:	90                   	nop

c0010df4 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010df4:	55                   	push   ebp
c0010df5:	57                   	push   edi
c0010df6:	56                   	push   esi
c0010df7:	53                   	push   ebx
c0010df8:	81 ec 38 01 00 00    	sub    esp,0x138
c0010dfe:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010e05:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010e0c:	68 14 01 00 00       	push   0x114
c0010e11:	e8 a0 6c ff ff       	call   c0007ab6 <malloc>
c0010e16:	83 c4 0c             	add    esp,0xc
c0010e19:	89 c3                	mov    ebx,eax
c0010e1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010e1e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010e25:	50                   	push   eax
c0010e26:	e8 c9 a9 ff ff       	call   c000b7f4 <File::File(char const*, Process*)>
c0010e2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e2e:	e8 4d ad ff ff       	call   c000bb80 <File::exists()>
c0010e33:	83 c4 10             	add    esp,0x10
c0010e36:	84 c0                	test   al,al
c0010e38:	75 31                	jne    c0010e6b <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010e3a:	50                   	push   eax
c0010e3b:	50                   	push   eax
c0010e3c:	6a 12                	push   0x12
c0010e3e:	53                   	push   ebx
c0010e3f:	e8 78 aa ff ff       	call   c000b8bc <File::open(FileOpenMode)>
c0010e44:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e46:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010e49:	89 34 24             	mov    DWORD PTR [esp],esi
c0010e4c:	e8 1f f7 fe ff       	call   c0000570 <strlen>
c0010e51:	5a                   	pop    edx
c0010e52:	31 d2                	xor    edx,edx
c0010e54:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010e58:	51                   	push   ecx
c0010e59:	56                   	push   esi
c0010e5a:	52                   	push   edx
c0010e5b:	50                   	push   eax
c0010e5c:	53                   	push   ebx
c0010e5d:	ff d7                	call   edi
c0010e5f:	83 c4 14             	add    esp,0x14
c0010e62:	53                   	push   ebx
c0010e63:	e8 b2 aa ff ff       	call   c000b91a <File::close()>
c0010e68:	83 c4 10             	add    esp,0x10
c0010e6b:	56                   	push   esi
c0010e6c:	31 f6                	xor    esi,esi
c0010e6e:	68 00 01 00 00       	push   0x100
c0010e73:	6a 00                	push   0x0
c0010e75:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010e79:	50                   	push   eax
c0010e7a:	e8 71 f6 fe ff       	call   c00004f0 <memset>
c0010e7f:	5f                   	pop    edi
c0010e80:	58                   	pop    eax
c0010e81:	6a 01                	push   0x1
c0010e83:	53                   	push   ebx
c0010e84:	e8 33 aa ff ff       	call   c000b8bc <File::open(FileOpenMode)>
c0010e89:	83 c4 10             	add    esp,0x10
c0010e8c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010e94:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010e9c:	83 ec 0c             	sub    esp,0xc
c0010e9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010ea1:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010ea5:	51                   	push   ecx
c0010ea6:	8d 54 24 23          	lea    edx,[esp+0x23]
c0010eaa:	52                   	push   edx
c0010eab:	6a 00                	push   0x0
c0010ead:	6a 01                	push   0x1
c0010eaf:	53                   	push   ebx
c0010eb0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010eb3:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010eb8:	83 c4 20             	add    esp,0x20
c0010ebb:	89 c2                	mov    edx,eax
c0010ebd:	85 c0                	test   eax,eax
c0010ebf:	0f 84 36 01 00 00    	je     c0010ffb <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010ec5:	83 f8 0d             	cmp    eax,0xd
c0010ec8:	0f 84 22 01 00 00    	je     c0010ff0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010ece:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010ed3:	0f 84 f0 00 00 00    	je     c0010fc9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0010ed9:	83 f8 0a             	cmp    eax,0xa
c0010edc:	74 13                	je     c0010ef1 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010ede:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010ee3:	74 0c                	je     c0010ef1 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010ee5:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010eeb:	0f 8e f6 00 00 00    	jle    c0010fe7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010ef1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ef5:	83 ec 0c             	sub    esp,0xc
c0010ef8:	8d 78 01             	lea    edi,[eax+0x1]
c0010efb:	57                   	push   edi
c0010efc:	e8 b5 6b ff ff       	call   c0007ab6 <malloc>
c0010f01:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010f05:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010f09:	8d 56 04             	lea    edx,[esi+0x4]
c0010f0c:	89 14 24             	mov    DWORD PTR [esp],edx
c0010f0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010f13:	e8 9e 6b ff ff       	call   c0007ab6 <malloc>
c0010f18:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010f1c:	83 c4 0c             	add    esp,0xc
c0010f1f:	57                   	push   edi
c0010f20:	6a 00                	push   0x0
c0010f22:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010f26:	e8 c5 f5 fe ff       	call   c00004f0 <memset>
c0010f2b:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010f2f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010f33:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010f37:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f39:	83 c4 0c             	add    esp,0xc
c0010f3c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010f40:	52                   	push   edx
c0010f41:	6a 00                	push   0x0
c0010f43:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010f47:	e8 a4 f5 fe ff       	call   c00004f0 <memset>
c0010f4c:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010f50:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010f54:	89 34 24             	mov    DWORD PTR [esp],esi
c0010f57:	e8 14 f6 fe ff       	call   c0000570 <strlen>
c0010f5c:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010f60:	89 c1                	mov    ecx,eax
c0010f62:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f64:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010f67:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010f6a:	40                   	inc    eax
c0010f6b:	83 c4 10             	add    esp,0x10
c0010f6e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010f71:	85 d2                	test   edx,edx
c0010f73:	75 0c                	jne    c0010f81 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0010f75:	83 ec 0c             	sub    esp,0xc
c0010f78:	6a 08                	push   0x8
c0010f7a:	e8 37 6b ff ff       	call   c0007ab6 <malloc>
c0010f7f:	eb 0c                	jmp    c0010f8d <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010f81:	c1 e0 03             	shl    eax,0x3
c0010f84:	51                   	push   ecx
c0010f85:	51                   	push   ecx
c0010f86:	50                   	push   eax
c0010f87:	52                   	push   edx
c0010f88:	e8 15 6b ff ff       	call   c0007aa2 <realloc>
c0010f8d:	83 c4 10             	add    esp,0x10
c0010f90:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010f93:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010f96:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010f99:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010f9d:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010fa1:	b9 08 00 00 00       	mov    ecx,0x8
c0010fa6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fa8:	31 f6                	xor    esi,esi
c0010faa:	50                   	push   eax
c0010fab:	68 00 01 00 00       	push   0x100
c0010fb0:	6a 00                	push   0x0
c0010fb2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010fb6:	50                   	push   eax
c0010fb7:	e8 34 f5 fe ff       	call   c00004f0 <memset>
c0010fbc:	83 c4 10             	add    esp,0x10
c0010fbf:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010fc7:	eb 27                	jmp    c0010ff0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010fc9:	83 f8 3d             	cmp    eax,0x3d
c0010fcc:	74 1e                	je     c0010fec <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0010fce:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010fd4:	7f 07                	jg     c0010fdd <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0010fd6:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c0010fda:	46                   	inc    esi
c0010fdb:	eb 13                	jmp    c0010ff0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010fdd:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0010fe5:	eb 09                	jmp    c0010ff0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010fe7:	83 f8 3d             	cmp    eax,0x3d
c0010fea:	75 ea                	jne    c0010fd6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0010fec:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010ff0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010ff5:	0f 85 99 fe ff ff    	jne    c0010e94 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010ffb:	83 ec 0c             	sub    esp,0xc
c0010ffe:	53                   	push   ebx
c0010fff:	e8 16 a9 ff ff       	call   c000b91a <File::close()>
c0011004:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011006:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011009:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001100c:	81 c4 3c 01 00 00    	add    esp,0x13c
c0011012:	5b                   	pop    ebx
c0011013:	5e                   	pop    esi
c0011014:	5f                   	pop    edi
c0011015:	5d                   	pop    ebp
c0011016:	c3                   	ret    
c0011017:	90                   	nop

c0011018 <EnvVarContainer::__loadSystem()>:
c0011018:	83 ec 10             	sub    esp,0x10
c001101b:	68 00 33 02 c0       	push   0xc0023300
c0011020:	68 f0 1d 02 c0       	push   0xc0021df0
c0011025:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011029:	e8 c6 fd ff ff       	call   c0010df4 <EnvVarContainer::loadFrom(char const*, char const*)>
c001102e:	83 c4 1c             	add    esp,0x1c
c0011031:	c3                   	ret    

c0011032 <EnvVarContainer::__loadUser()>:
c0011032:	c3                   	ret    
c0011033:	90                   	nop

c0011034 <EnvVarContainer::EnvVarContainer(Process*)>:
c0011034:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011038:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001103e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011042:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011046:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011049:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001104d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011054:	90                   	nop
c0011055:	c3                   	ret    

c0011056 <EnvVarContainer::~EnvVarContainer()>:
c0011056:	83 ec 0c             	sub    esp,0xc
c0011059:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001105d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011060:	85 c0                	test   eax,eax
c0011062:	74 1d                	je     c0011081 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011068:	8b 00                	mov    eax,DWORD PTR [eax]
c001106a:	85 c0                	test   eax,eax
c001106c:	74 13                	je     c0011081 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001106e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011072:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011075:	83 ec 0c             	sub    esp,0xc
c0011078:	50                   	push   eax
c0011079:	e8 48 6a ff ff       	call   c0007ac6 <free>
c001107e:	83 c4 10             	add    esp,0x10
c0011081:	90                   	nop
c0011082:	83 c4 0c             	add    esp,0xc
c0011085:	c3                   	ret    

c0011086 <KeGetEnv(Process*, char const*)>:
c0011086:	53                   	push   ebx
c0011087:	83 ec 08             	sub    esp,0x8
c001108a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001108e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011092:	39 05 f0 96 02 c0    	cmp    DWORD PTR ds:0xc00296f0,eax
c0011098:	74 04                	je     c001109e <KeGetEnv(Process*, char const*)+0x18>
c001109a:	85 c0                	test   eax,eax
c001109c:	75 0b                	jne    c00110a9 <KeGetEnv(Process*, char const*)+0x23>
c001109e:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c00110a3:	85 c0                	test   eax,eax
c00110a5:	75 19                	jne    c00110c0 <KeGetEnv(Process*, char const*)+0x3a>
c00110a7:	eb 27                	jmp    c00110d0 <KeGetEnv(Process*, char const*)+0x4a>
c00110a9:	52                   	push   edx
c00110aa:	52                   	push   edx
c00110ab:	53                   	push   ebx
c00110ac:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00110b2:	e8 3b fc ff ff       	call   c0010cf2 <EnvVarContainer::getEnv(char const*)>
c00110b7:	83 c4 10             	add    esp,0x10
c00110ba:	85 c0                	test   eax,eax
c00110bc:	75 28                	jne    c00110e6 <KeGetEnv(Process*, char const*)+0x60>
c00110be:	eb de                	jmp    c001109e <KeGetEnv(Process*, char const*)+0x18>
c00110c0:	52                   	push   edx
c00110c1:	52                   	push   edx
c00110c2:	53                   	push   ebx
c00110c3:	50                   	push   eax
c00110c4:	e8 29 fc ff ff       	call   c0010cf2 <EnvVarContainer::getEnv(char const*)>
c00110c9:	83 c4 10             	add    esp,0x10
c00110cc:	85 c0                	test   eax,eax
c00110ce:	75 16                	jne    c00110e6 <KeGetEnv(Process*, char const*)+0x60>
c00110d0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00110d4:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c00110d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00110dd:	83 c4 08             	add    esp,0x8
c00110e0:	5b                   	pop    ebx
c00110e1:	e9 0c fc ff ff       	jmp    c0010cf2 <EnvVarContainer::getEnv(char const*)>
c00110e6:	83 c4 08             	add    esp,0x8
c00110e9:	5b                   	pop    ebx
c00110ea:	c3                   	ret    

c00110eb <KeSetEnvSystem(char const*, char const*)>:
c00110eb:	83 ec 10             	sub    esp,0x10
c00110ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110f6:	ff 35 84 8e 02 c0    	push   DWORD PTR ds:0xc0028e84
c00110fc:	e8 2f fc ff ff       	call   c0010d30 <EnvVarContainer::setEnv(char const*, char const*)>
c0011101:	83 c4 1c             	add    esp,0x1c
c0011104:	c3                   	ret    

c0011105 <KeSetEnvUser(char const*, char const*)>:
c0011105:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c001110a:	85 c0                	test   eax,eax
c001110c:	74 15                	je     c0011123 <KeSetEnvUser(char const*, char const*)+0x1e>
c001110e:	83 ec 10             	sub    esp,0x10
c0011111:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011115:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011119:	50                   	push   eax
c001111a:	e8 11 fc ff ff       	call   c0010d30 <EnvVarContainer::setEnv(char const*, char const*)>
c001111f:	83 c4 1c             	add    esp,0x1c
c0011122:	c3                   	ret    
c0011123:	c3                   	ret    

c0011124 <KeSetEnvProcess(Process*, char const*, char const*)>:
c0011124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011128:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001112e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011132:	e9 f9 fb ff ff       	jmp    c0010d30 <EnvVarContainer::setEnv(char const*, char const*)>

c0011137 <KeDeleteEnvSystem(char const*)>:
c0011137:	c3                   	ret    

c0011138 <KeDeleteEnvUser(char const*)>:
c0011138:	c3                   	ret    

c0011139 <KeDeleteEnvProcess(Process*, char const*)>:
c0011139:	c3                   	ret    

c001113a <KeNewProcessEnv(Process*)>:
c001113a:	83 ec 28             	sub    esp,0x28
c001113d:	6a 0c                	push   0xc
c001113f:	e8 72 69 ff ff       	call   c0007ab6 <malloc>
c0011144:	5a                   	pop    edx
c0011145:	59                   	pop    ecx
c0011146:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001114a:	50                   	push   eax
c001114b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001114f:	e8 e0 fe ff ff       	call   c0011034 <EnvVarContainer::EnvVarContainer(Process*)>
c0011154:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011158:	83 c4 2c             	add    esp,0x2c
c001115b:	c3                   	ret    

c001115c <KeCopyProcessEnv(Process*, Process*)>:
c001115c:	57                   	push   edi
c001115d:	56                   	push   esi
c001115e:	53                   	push   ebx
c001115f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011163:	83 ec 0c             	sub    esp,0xc
c0011166:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001116c:	6a 0c                	push   0xc
c001116e:	e8 43 69 ff ff       	call   c0007ab6 <malloc>
c0011173:	89 c3                	mov    ebx,eax
c0011175:	58                   	pop    eax
c0011176:	5a                   	pop    edx
c0011177:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001117b:	53                   	push   ebx
c001117c:	e8 b3 fe ff ff       	call   c0011034 <EnvVarContainer::EnvVarContainer(Process*)>
c0011181:	8b 07                	mov    eax,DWORD PTR [edi]
c0011183:	89 03                	mov    DWORD PTR [ebx],eax
c0011185:	c1 e0 03             	shl    eax,0x3
c0011188:	89 04 24             	mov    DWORD PTR [esp],eax
c001118b:	e8 26 69 ff ff       	call   c0007ab6 <malloc>
c0011190:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0011193:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0011195:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0011198:	c1 e1 03             	shl    ecx,0x3
c001119b:	89 c7                	mov    edi,eax
c001119d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001119f:	83 c4 10             	add    esp,0x10
c00111a2:	89 d8                	mov    eax,ebx
c00111a4:	5b                   	pop    ebx
c00111a5:	5e                   	pop    esi
c00111a6:	5f                   	pop    edi
c00111a7:	c3                   	ret    

c00111a8 <KeLoadSystemEnv()>:
c00111a8:	53                   	push   ebx
c00111a9:	83 ec 14             	sub    esp,0x14
c00111ac:	6a 0c                	push   0xc
c00111ae:	e8 03 69 ff ff       	call   c0007ab6 <malloc>
c00111b3:	89 c3                	mov    ebx,eax
c00111b5:	58                   	pop    eax
c00111b6:	5a                   	pop    edx
c00111b7:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00111bd:	53                   	push   ebx
c00111be:	e8 71 fe ff ff       	call   c0011034 <EnvVarContainer::EnvVarContainer(Process*)>
c00111c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111c6:	89 1d 84 8e 02 c0    	mov    DWORD PTR ds:0xc0028e84,ebx
c00111cc:	e8 47 fe ff ff       	call   c0011018 <EnvVarContainer::__loadSystem()>
c00111d1:	83 c4 18             	add    esp,0x18
c00111d4:	5b                   	pop    ebx
c00111d5:	c3                   	ret    

c00111d6 <KeLoadUserEnv()>:
c00111d6:	53                   	push   ebx
c00111d7:	83 ec 14             	sub    esp,0x14
c00111da:	6a 0c                	push   0xc
c00111dc:	e8 d5 68 ff ff       	call   c0007ab6 <malloc>
c00111e1:	89 c3                	mov    ebx,eax
c00111e3:	58                   	pop    eax
c00111e4:	5a                   	pop    edx
c00111e5:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00111eb:	53                   	push   ebx
c00111ec:	e8 43 fe ff ff       	call   c0011034 <EnvVarContainer::EnvVarContainer(Process*)>
c00111f1:	89 1d 80 8e 02 c0    	mov    DWORD PTR ds:0xc0028e80,ebx
c00111f7:	83 c4 18             	add    esp,0x18
c00111fa:	5b                   	pop    ebx
c00111fb:	c3                   	ret    

c00111fc <KeFlushEnv()>:
c00111fc:	c3                   	ret    

c00111fd <KeGetProcessTotalEnvCount(Process*)>:
c00111fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011201:	8b 15 80 8e 02 c0    	mov    edx,DWORD PTR ds:0xc0028e80
c0011207:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001120d:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c0011212:	8b 00                	mov    eax,DWORD PTR [eax]
c0011214:	03 01                	add    eax,DWORD PTR [ecx]
c0011216:	85 d2                	test   edx,edx
c0011218:	74 02                	je     c001121c <KeGetProcessTotalEnvCount(Process*)+0x1f>
c001121a:	03 02                	add    eax,DWORD PTR [edx]
c001121c:	c3                   	ret    

c001121d <KeGetProcessEnvPair(Process*, int)>:
c001121d:	57                   	push   edi
c001121e:	56                   	push   esi
c001121f:	8b 35 80 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e80
c0011225:	53                   	push   ebx
c0011226:	85 f6                	test   esi,esi
c0011228:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001122c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011230:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011236:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001123a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001123c:	75 16                	jne    c0011254 <KeGetProcessEnvPair(Process*, int)+0x37>
c001123e:	39 c2                	cmp    edx,eax
c0011240:	7c 16                	jl     c0011258 <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011242:	8b 0d 84 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028e84
c0011248:	8b 31                	mov    esi,DWORD PTR [ecx]
c001124a:	01 c6                	add    esi,eax
c001124c:	39 d6                	cmp    esi,edx
c001124e:	7e 3c                	jle    c001128c <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011250:	29 c2                	sub    edx,eax
c0011252:	eb 04                	jmp    c0011258 <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011254:	39 c2                	cmp    edx,eax
c0011256:	7d 05                	jge    c001125d <KeGetProcessEnvPair(Process*, int)+0x40>
c0011258:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001125b:	eb 20                	jmp    c001127d <KeGetProcessEnvPair(Process*, int)+0x60>
c001125d:	8b 3e                	mov    edi,DWORD PTR [esi]
c001125f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0011262:	39 d1                	cmp    ecx,edx
c0011264:	7e 04                	jle    c001126a <KeGetProcessEnvPair(Process*, int)+0x4d>
c0011266:	29 c2                	sub    edx,eax
c0011268:	eb 10                	jmp    c001127a <KeGetProcessEnvPair(Process*, int)+0x5d>
c001126a:	8b 35 84 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e84
c0011270:	03 0e                	add    ecx,DWORD PTR [esi]
c0011272:	39 d1                	cmp    ecx,edx
c0011274:	7e 16                	jle    c001128c <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011276:	29 c2                	sub    edx,eax
c0011278:	29 fa                	sub    edx,edi
c001127a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001127d:	8d 14 d0             	lea    edx,[eax+edx*8]
c0011280:	8b 02                	mov    eax,DWORD PTR [edx]
c0011282:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011285:	89 03                	mov    DWORD PTR [ebx],eax
c0011287:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001128a:	eb 1d                	jmp    c00112a9 <KeGetProcessEnvPair(Process*, int)+0x8c>
c001128c:	83 ec 0c             	sub    esp,0xc
c001128f:	68 12 1e 02 c0       	push   0xc0021e12
c0011294:	e8 ac 00 00 00       	call   c0011345 <KePanic(char const*)>
c0011299:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001129f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00112a6:	83 c4 10             	add    esp,0x10
c00112a9:	89 d8                	mov    eax,ebx
c00112ab:	5b                   	pop    ebx
c00112ac:	5e                   	pop    esi
c00112ad:	5f                   	pop    edi
c00112ae:	c2 04 00             	ret    0x4

c00112b1 <CPU::current()>:
c00112b1:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00112b6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00112bc:	c3                   	ret    

c00112bd <operator new(unsigned long)>:
c00112bd:	e9 f4 67 ff ff       	jmp    c0007ab6 <malloc>

c00112c2 <operator delete(void*)>:
c00112c2:	e9 0f 68 ff ff       	jmp    c0007ad6 <rfree>

c00112c7 <disableIRQs()>:
c00112c7:	fa                   	cli    
c00112c8:	c3                   	ret    

c00112c9 <enableIRQs()>:
c00112c9:	fb                   	sti    
c00112ca:	c3                   	ret    

c00112cb <lockScheduler()>:
c00112cb:	fa                   	cli    
c00112cc:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00112d2:	c3                   	ret    

c00112d3 <unlockScheduler()>:
c00112d3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00112d8:	48                   	dec    eax
c00112d9:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00112de:	75 01                	jne    c00112e1 <unlockScheduler()+0xe>
c00112e0:	fb                   	sti    
c00112e1:	c3                   	ret    

c00112e2 <lockStuff()>:
c00112e2:	fa                   	cli    
c00112e3:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00112e9:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c00112ef:	c3                   	ret    

c00112f0 <unlockStuff()>:
c00112f0:	83 ec 0c             	sub    esp,0xc
c00112f3:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00112f8:	48                   	dec    eax
c00112f9:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00112fe:	75 18                	jne    c0011318 <unlockStuff()+0x28>
c0011300:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c0011307:	74 0f                	je     c0011318 <unlockStuff()+0x28>
c0011309:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0011313:	e8 ec 48 00 00       	call   c0015c04 <schedule()>
c0011318:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001131d:	48                   	dec    eax
c001131e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0011323:	75 01                	jne    c0011326 <unlockStuff()+0x36>
c0011325:	fb                   	sti    
c0011326:	83 c4 0c             	add    esp,0xc
c0011329:	c3                   	ret    

c001132a <Virt::getAKernelVAS()>:
c001132a:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001132f:	c3                   	ret    

c0011330 <__not_memcpy>:
c0011330:	57                   	push   edi
c0011331:	56                   	push   esi
c0011332:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011336:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001133a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001133e:	89 c7                	mov    edi,eax
c0011340:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011342:	5e                   	pop    esi
c0011343:	5f                   	pop    edi
c0011344:	c3                   	ret    

c0011345 <KePanic(char const*)>:
c0011345:	c6 05 88 8e 02 c0 01 	mov    BYTE PTR ds:0xc0028e88,0x1
c001134c:	e9 59 68 00 00       	jmp    c0017baa <HalPanic(char const*)>

c0011351 <KePowerThread(void*)>:
c0011351:	83 ec 0c             	sub    esp,0xc
c0011354:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0011359:	48                   	dec    eax
c001135a:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001135f:	75 01                	jne    c0011362 <KePowerThread(void*)+0x11>
c0011361:	fb                   	sti    
c0011362:	83 ec 0c             	sub    esp,0xc
c0011365:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c001136c:	6a 0a                	push   0xa
c001136e:	e8 d5 4b 00 00       	call   c0015f48 <sleep(unsigned int)>
c0011373:	83 05 e4 8e 02 c0 0a 	add    DWORD PTR ds:0xc0028ee4,0xa
c001137a:	83 c4 10             	add    esp,0x10
c001137d:	eb e3                	jmp    c0011362 <KePowerThread(void*)+0x11>

c001137f <KeChangePowerSettings(PowerSettings)>:
c001137f:	57                   	push   edi
c0011380:	b9 09 00 00 00       	mov    ecx,0x9
c0011385:	56                   	push   esi
c0011386:	bf c0 8e 02 c0       	mov    edi,0xc0028ec0
c001138b:	fc                   	cld    
c001138c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011390:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011392:	5e                   	pop    esi
c0011393:	5f                   	pop    edi
c0011394:	c3                   	ret    

c0011395 <KeUserIOReceived()>:
c0011395:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c001139f:	c3                   	ret    

c00113a0 <KeHandlePowerButton()>:
c00113a0:	83 ec 0c             	sub    esp,0xc
c00113a3:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c00113a8:	83 f8 02             	cmp    eax,0x2
c00113ab:	75 10                	jne    c00113bd <KeHandlePowerButton()+0x1d>
c00113ad:	83 ec 0c             	sub    esp,0xc
c00113b0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00113b6:	e8 6d 5d ff ff       	call   c0007128 <Computer::shutdown()>
c00113bb:	eb 11                	jmp    c00113ce <KeHandlePowerButton()+0x2e>
c00113bd:	48                   	dec    eax
c00113be:	75 11                	jne    c00113d1 <KeHandlePowerButton()+0x31>
c00113c0:	83 ec 0c             	sub    esp,0xc
c00113c3:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00113c9:	e8 8a 5d ff ff       	call   c0007158 <Computer::sleep()>
c00113ce:	83 c4 10             	add    esp,0x10
c00113d1:	83 c4 0c             	add    esp,0xc
c00113d4:	c3                   	ret    

c00113d5 <KeHandleSleepButton()>:
c00113d5:	83 ec 0c             	sub    esp,0xc
c00113d8:	a1 c4 8e 02 c0       	mov    eax,ds:0xc0028ec4
c00113dd:	83 f8 02             	cmp    eax,0x2
c00113e0:	75 10                	jne    c00113f2 <KeHandleSleepButton()+0x1d>
c00113e2:	83 ec 0c             	sub    esp,0xc
c00113e5:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00113eb:	e8 38 5d ff ff       	call   c0007128 <Computer::shutdown()>
c00113f0:	eb 11                	jmp    c0011403 <KeHandleSleepButton()+0x2e>
c00113f2:	48                   	dec    eax
c00113f3:	75 11                	jne    c0011406 <KeHandleSleepButton()+0x31>
c00113f5:	83 ec 0c             	sub    esp,0xc
c00113f8:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00113fe:	e8 55 5d ff ff       	call   c0007158 <Computer::sleep()>
c0011403:	83 c4 10             	add    esp,0x10
c0011406:	83 c4 0c             	add    esp,0xc
c0011409:	c3                   	ret    

c001140a <KeSetupPowerManager()>:
c001140a:	83 ec 0c             	sub    esp,0xc
c001140d:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c0011417:	68 f0 00 00 00       	push   0xf0
c001141c:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c0011423:	6a 00                	push   0x0
c0011425:	68 51 13 01 c0       	push   0xc0011351
c001142a:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0011430:	e8 7f 45 00 00       	call   c00159b4 <Process::createThread(void (*)(void*), void*, int)>
c0011435:	c7 05 c0 8e 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x2
c001143f:	c7 05 c4 8e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028ec4,0x1
c0011449:	c7 05 c8 8e 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028ec8,0x3
c0011453:	c7 05 cc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ecc,0x0
c001145d:	c7 05 d8 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed8,0x0
c0011467:	c7 05 d0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed0,0x0
c0011471:	c7 05 dc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028edc,0x0
c001147b:	c7 05 d4 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ed4,0x3c
c0011485:	c7 05 e0 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ee0,0x3c
c001148f:	83 c4 1c             	add    esp,0x1c
c0011492:	c3                   	ret    

c0011493 <KeRand()>:
c0011493:	69 05 e8 8e 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0028ee8,0x2875
c001149d:	69 0d ec 8e 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc0028eec,0xa2e7b175
c00114a7:	53                   	push   ebx
c00114a8:	01 c1                	add    ecx,eax
c00114aa:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00114af:	f7 25 e8 8e 02 c0    	mul    DWORD PTR ds:0xc0028ee8
c00114b5:	01 ca                	add    edx,ecx
c00114b7:	05 ef 04 b5 00       	add    eax,0xb504ef
c00114bc:	83 d2 00             	adc    edx,0x0
c00114bf:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c00114c4:	0f b7 da             	movzx  ebx,dx
c00114c7:	89 da                	mov    edx,ebx
c00114c9:	89 1d ec 8e 02 c0    	mov    DWORD PTR ds:0xc0028eec,ebx
c00114cf:	0f ac d0 0e          	shrd   eax,edx,0xe
c00114d3:	5b                   	pop    ebx
c00114d4:	c3                   	ret    

c00114d5 <KeSeedRand(unsigned int)>:
c00114d5:	53                   	push   ebx
c00114d6:	83 ec 08             	sub    esp,0x8
c00114d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00114dd:	e8 e7 69 00 00       	call   c0017ec9 <HalGetRand()>
c00114e2:	c7 05 ec 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eec,0x0
c00114ec:	31 d8                	xor    eax,ebx
c00114ee:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c00114f3:	e8 9b ff ff ff       	call   c0011493 <KeRand()>
c00114f8:	83 c4 08             	add    esp,0x8
c00114fb:	5b                   	pop    ebx
c00114fc:	eb 95                	jmp    c0011493 <KeRand()>

c00114fe <KeInitRand()>:
c00114fe:	83 ec 0c             	sub    esp,0xc
c0011501:	e8 b8 67 00 00       	call   c0017cbe <HalQueryPerformanceCounter()>
c0011506:	0f 20 da             	mov    edx,cr3
c0011509:	0f 22 da             	mov    cr3,edx
c001150c:	0f 20 da             	mov    edx,cr3
c001150f:	0f 22 da             	mov    cr3,edx
c0011512:	0f 20 da             	mov    edx,cr3
c0011515:	0f 22 da             	mov    cr3,edx
c0011518:	0f 20 da             	mov    edx,cr3
c001151b:	0f 22 da             	mov    cr3,edx
c001151e:	83 ec 0c             	sub    esp,0xc
c0011521:	35 03 8a 95 38       	xor    eax,0x38958a03
c0011526:	50                   	push   eax
c0011527:	e8 a9 ff ff ff       	call   c00114d5 <KeSeedRand(unsigned int)>
c001152c:	83 c4 1c             	add    esp,0x1c
c001152f:	c3                   	ret    

c0011530 <KeResolveCompatibilitySymbol(char*)>:
c0011530:	83 ec 0c             	sub    esp,0xc
c0011533:	83 ec 08             	sub    esp,0x8
c0011536:	68 2c 1e 02 c0       	push   0xc0021e2c
c001153b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001153f:	e8 0c f2 fe ff       	call   c0000750 <strcmp>
c0011544:	83 c4 10             	add    esp,0x10
c0011547:	85 c0                	test   eax,eax
c0011549:	0f 94 c0             	sete   al
c001154c:	0f b6 c0             	movzx  eax,al
c001154f:	85 c0                	test   eax,eax
c0011551:	74 0d                	je     c0011560 <KeResolveCompatibilitySymbol(char*)+0x30>
c0011553:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c0011558:	e9 8b 01 00 00       	jmp    c00116e8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001155d:	8d 76 00             	lea    esi,[esi+0x0]
c0011560:	83 ec 08             	sub    esp,0x8
c0011563:	68 35 1e 02 c0       	push   0xc0021e35
c0011568:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001156c:	e8 df f1 fe ff       	call   c0000750 <strcmp>
c0011571:	83 c4 10             	add    esp,0x10
c0011574:	85 c0                	test   eax,eax
c0011576:	0f 94 c0             	sete   al
c0011579:	0f b6 c0             	movzx  eax,al
c001157c:	85 c0                	test   eax,eax
c001157e:	74 0c                	je     c001158c <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011580:	b8 80 f2 01 c0       	mov    eax,0xc001f280
c0011585:	e9 5e 01 00 00       	jmp    c00116e8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001158a:	66 90                	xchg   ax,ax
c001158c:	83 ec 08             	sub    esp,0x8
c001158f:	68 3f 1e 02 c0       	push   0xc0021e3f
c0011594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011598:	e8 b3 f1 fe ff       	call   c0000750 <strcmp>
c001159d:	83 c4 10             	add    esp,0x10
c00115a0:	85 c0                	test   eax,eax
c00115a2:	0f 94 c0             	sete   al
c00115a5:	0f b6 c0             	movzx  eax,al
c00115a8:	85 c0                	test   eax,eax
c00115aa:	74 0c                	je     c00115b8 <KeResolveCompatibilitySymbol(char*)+0x88>
c00115ac:	b8 b4 ef 01 c0       	mov    eax,0xc001efb4
c00115b1:	e9 32 01 00 00       	jmp    c00116e8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115b6:	66 90                	xchg   ax,ax
c00115b8:	83 ec 08             	sub    esp,0x8
c00115bb:	68 48 1e 02 c0       	push   0xc0021e48
c00115c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115c4:	e8 87 f1 fe ff       	call   c0000750 <strcmp>
c00115c9:	83 c4 10             	add    esp,0x10
c00115cc:	85 c0                	test   eax,eax
c00115ce:	0f 94 c0             	sete   al
c00115d1:	0f b6 c0             	movzx  eax,al
c00115d4:	85 c0                	test   eax,eax
c00115d6:	74 0c                	je     c00115e4 <KeResolveCompatibilitySymbol(char*)+0xb4>
c00115d8:	b8 45 13 01 c0       	mov    eax,0xc0011345
c00115dd:	e9 06 01 00 00       	jmp    c00116e8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115e2:	66 90                	xchg   ax,ax
c00115e4:	83 ec 08             	sub    esp,0x8
c00115e7:	68 5b 1e 02 c0       	push   0xc0021e5b
c00115ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115f0:	e8 5b f1 fe ff       	call   c0000750 <strcmp>
c00115f5:	83 c4 10             	add    esp,0x10
c00115f8:	85 c0                	test   eax,eax
c00115fa:	0f 94 c0             	sete   al
c00115fd:	0f b6 c0             	movzx  eax,al
c0011600:	85 c0                	test   eax,eax
c0011602:	74 0c                	je     c0011610 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0011604:	b8 6f 0c 01 c0       	mov    eax,0xc0010c6f
c0011609:	e9 da 00 00 00       	jmp    c00116e8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001160e:	66 90                	xchg   ax,ax
c0011610:	83 ec 08             	sub    esp,0x8
c0011613:	68 78 1e 02 c0       	push   0xc0021e78
c0011618:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001161c:	e8 2f f1 fe ff       	call   c0000750 <strcmp>
c0011621:	83 c4 10             	add    esp,0x10
c0011624:	85 c0                	test   eax,eax
c0011626:	0f 94 c0             	sete   al
c0011629:	0f b6 c0             	movzx  eax,al
c001162c:	85 c0                	test   eax,eax
c001162e:	74 0c                	je     c001163c <KeResolveCompatibilitySymbol(char*)+0x10c>
c0011630:	b8 80 f3 01 c0       	mov    eax,0xc001f380
c0011635:	e9 ae 00 00 00       	jmp    c00116e8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001163a:	66 90                	xchg   ax,ax
c001163c:	83 ec 08             	sub    esp,0x8
c001163f:	68 82 1e 02 c0       	push   0xc0021e82
c0011644:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011648:	e8 03 f1 fe ff       	call   c0000750 <strcmp>
c001164d:	83 c4 10             	add    esp,0x10
c0011650:	85 c0                	test   eax,eax
c0011652:	0f 94 c0             	sete   al
c0011655:	0f b6 c0             	movzx  eax,al
c0011658:	85 c0                	test   eax,eax
c001165a:	74 0c                	je     c0011668 <KeResolveCompatibilitySymbol(char*)+0x138>
c001165c:	b8 00 f1 01 c0       	mov    eax,0xc001f100
c0011661:	e9 82 00 00 00       	jmp    c00116e8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011666:	66 90                	xchg   ax,ax
c0011668:	83 ec 08             	sub    esp,0x8
c001166b:	68 8b 1e 02 c0       	push   0xc0021e8b
c0011670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011674:	e8 d7 f0 fe ff       	call   c0000750 <strcmp>
c0011679:	83 c4 10             	add    esp,0x10
c001167c:	85 c0                	test   eax,eax
c001167e:	0f 94 c0             	sete   al
c0011681:	0f b6 c0             	movzx  eax,al
c0011684:	85 c0                	test   eax,eax
c0011686:	74 08                	je     c0011690 <KeResolveCompatibilitySymbol(char*)+0x160>
c0011688:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c001168d:	eb 59                	jmp    c00116e8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001168f:	90                   	nop
c0011690:	83 ec 08             	sub    esp,0x8
c0011693:	68 a3 1e 02 c0       	push   0xc0021ea3
c0011698:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001169c:	e8 af f0 fe ff       	call   c0000750 <strcmp>
c00116a1:	83 c4 10             	add    esp,0x10
c00116a4:	85 c0                	test   eax,eax
c00116a6:	0f 94 c0             	sete   al
c00116a9:	0f b6 c0             	movzx  eax,al
c00116ac:	85 c0                	test   eax,eax
c00116ae:	74 08                	je     c00116b8 <KeResolveCompatibilitySymbol(char*)+0x188>
c00116b0:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c00116b5:	eb 31                	jmp    c00116e8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00116b7:	90                   	nop
c00116b8:	83 ec 08             	sub    esp,0x8
c00116bb:	68 b0 1e 02 c0       	push   0xc0021eb0
c00116c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116c4:	e8 87 f0 fe ff       	call   c0000750 <strcmp>
c00116c9:	83 c4 10             	add    esp,0x10
c00116cc:	85 c0                	test   eax,eax
c00116ce:	0f 94 c0             	sete   al
c00116d1:	0f b6 c0             	movzx  eax,al
c00116d4:	85 c0                	test   eax,eax
c00116d6:	74 08                	je     c00116e0 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c00116d8:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c00116dd:	eb 09                	jmp    c00116e8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00116df:	90                   	nop
c00116e0:	b8 00 00 00 00       	mov    eax,0x0
c00116e5:	8d 76 00             	lea    esi,[esi+0x0]
c00116e8:	83 c4 0c             	add    esp,0xc
c00116eb:	c3                   	ret    

c00116ec <KiSigKill(int)>:
c00116ec:	83 ec 0c             	sub    esp,0xc
c00116ef:	6a 00                	push   0x0
c00116f1:	6a 00                	push   0x0
c00116f3:	6a ff                	push   0xffffffff
c00116f5:	6a 01                	push   0x1
c00116f7:	e8 56 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00116fc:	83 c4 1c             	add    esp,0x1c
c00116ff:	c3                   	ret    

c0011700 <KiDefaultSignalHandlerIgnore(int)>:
c0011700:	c3                   	ret    

c0011701 <KiDefaultSignalHandlerPause(int)>:
c0011701:	57                   	push   edi
c0011702:	b9 07 00 00 00       	mov    ecx,0x7
c0011707:	56                   	push   esi
c0011708:	be f9 1e 02 c0       	mov    esi,0xc0021ef9
c001170d:	83 ec 24             	sub    esp,0x24
c0011710:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011714:	fc                   	cld    
c0011715:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011717:	8d 44 24 04          	lea    eax,[esp+0x4]
c001171b:	50                   	push   eax
c001171c:	6a 00                	push   0x0
c001171e:	6a 00                	push   0x0
c0011720:	6a 27                	push   0x27
c0011722:	e8 2b 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011727:	83 c4 34             	add    esp,0x34
c001172a:	5e                   	pop    esi
c001172b:	5f                   	pop    edi
c001172c:	c3                   	ret    

c001172d <KiDefaultSignalHandlerResume(int)>:
c001172d:	57                   	push   edi
c001172e:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011733:	56                   	push   esi
c0011734:	be 15 1f 02 c0       	mov    esi,0xc0021f15
c0011739:	83 ec 24             	sub    esp,0x24
c001173c:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011740:	fc                   	cld    
c0011741:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011743:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011747:	50                   	push   eax
c0011748:	6a 00                	push   0x0
c001174a:	6a 00                	push   0x0
c001174c:	6a 27                	push   0x27
c001174e:	e8 ff 28 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011753:	83 c4 34             	add    esp,0x34
c0011756:	5e                   	pop    esi
c0011757:	5f                   	pop    edi
c0011758:	c3                   	ret    

c0011759 <KeDeinitSignals(SigHandlerBlock*)>:
c0011759:	e9 68 63 ff ff       	jmp    c0007ac6 <free>

c001175e <KeInitSignals()>:
c001175e:	53                   	push   ebx
c001175f:	83 ec 14             	sub    esp,0x14
c0011762:	68 c8 00 00 00       	push   0xc8
c0011767:	e8 4a 63 ff ff       	call   c0007ab6 <malloc>
c001176c:	83 c4 0c             	add    esp,0xc
c001176f:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011779:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011783:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001178a:	89 c3                	mov    ebx,eax
c001178c:	6a 20                	push   0x20
c001178e:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011794:	6a 00                	push   0x0
c0011796:	50                   	push   eax
c0011797:	e8 54 ed fe ff       	call   c00004f0 <memset>
c001179c:	83 c4 0c             	add    esp,0xc
c001179f:	6a 44                	push   0x44
c00117a1:	6a 00                	push   0x0
c00117a3:	53                   	push   ebx
c00117a4:	e8 47 ed fe ff       	call   c00004f0 <memset>
c00117a9:	89 d8                	mov    eax,ebx
c00117ab:	83 c4 18             	add    esp,0x18
c00117ae:	5b                   	pop    ebx
c00117af:	c3                   	ret    

c00117b0 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00117b0:	53                   	push   ebx
c00117b1:	b8 01 00 00 00       	mov    eax,0x1
c00117b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00117ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00117be:	83 f9 10             	cmp    ecx,0x10
c00117c1:	7f 21                	jg     c00117e4 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c00117c3:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c00117c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117ca:	89 03                	mov    DWORD PTR [ebx],eax
c00117cc:	b8 01 00 00 00       	mov    eax,0x1
c00117d1:	d3 e0                	shl    eax,cl
c00117d3:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00117d7:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00117da:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00117e2:	31 c0                	xor    eax,eax
c00117e4:	5b                   	pop    ebx
c00117e5:	c3                   	ret    

c00117e6 <KeRaiseSignal(SigHandlerBlock*, int)>:
c00117e6:	55                   	push   ebp
c00117e7:	57                   	push   edi
c00117e8:	bf 08 00 00 00       	mov    edi,0x8
c00117ed:	56                   	push   esi
c00117ee:	53                   	push   ebx
c00117ef:	83 ec 18             	sub    esp,0x18
c00117f2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00117f6:	68 32 1f 02 c0       	push   0xc0021f32
c00117fb:	e8 45 91 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011800:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011807:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c001180d:	83 c4 10             	add    esp,0x10
c0011810:	31 c9                	xor    ecx,ecx
c0011812:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011816:	99                   	cdq    
c0011817:	f7 ff                	idiv   edi
c0011819:	8d 42 24             	lea    eax,[edx+0x24]
c001181c:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011820:	85 f6                	test   esi,esi
c0011822:	75 1a                	jne    c001183e <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011824:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011828:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c001182c:	50                   	push   eax
c001182d:	50                   	push   eax
c001182e:	52                   	push   edx
c001182f:	68 43 1f 02 c0       	push   0xc0021f43
c0011834:	e8 0c 91 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011839:	83 c4 10             	add    esp,0x10
c001183c:	eb 1b                	jmp    c0011859 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c001183e:	41                   	inc    ecx
c001183f:	83 f9 08             	cmp    ecx,0x8
c0011842:	75 ce                	jne    c0011812 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011844:	83 ec 0c             	sub    esp,0xc
c0011847:	be 01 00 00 00       	mov    esi,0x1
c001184c:	68 64 1f 02 c0       	push   0xc0021f64
c0011851:	e8 ef 90 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011856:	83 c4 10             	add    esp,0x10
c0011859:	83 c4 0c             	add    esp,0xc
c001185c:	89 f0                	mov    eax,esi
c001185e:	5b                   	pop    ebx
c001185f:	5e                   	pop    esi
c0011860:	5f                   	pop    edi
c0011861:	5d                   	pop    ebp
c0011862:	c3                   	ret    

c0011863 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011863:	55                   	push   ebp
c0011864:	57                   	push   edi
c0011865:	56                   	push   esi
c0011866:	53                   	push   ebx
c0011867:	51                   	push   ecx
c0011868:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001186c:	85 db                	test   ebx,ebx
c001186e:	0f 84 bc 00 00 00    	je     c0011930 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011874:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c001187b:	0f 84 af 00 00 00    	je     c0011930 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011881:	31 c9                	xor    ecx,ecx
c0011883:	bf 08 00 00 00       	mov    edi,0x8
c0011888:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c001188e:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011891:	99                   	cdq    
c0011892:	f7 ff                	idiv   edi
c0011894:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c001189b:	85 ed                	test   ebp,ebp
c001189d:	0f 84 9e 00 00 00    	je     c0011941 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c00118a3:	89 e9                	mov    ecx,ebp
c00118a5:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00118ab:	bf 01 00 00 00       	mov    edi,0x1
c00118b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00118b3:	d3 e7                	shl    edi,cl
c00118b5:	31 c9                	xor    ecx,ecx
c00118b7:	b8 01 00 00 00       	mov    eax,0x1
c00118bc:	d3 e0                	shl    eax,cl
c00118be:	85 04 24             	test   DWORD PTR [esp],eax
c00118c1:	74 06                	je     c00118c9 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c00118c3:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00118c7:	75 67                	jne    c0011930 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00118c9:	41                   	inc    ecx
c00118ca:	83 f9 11             	cmp    ecx,0x11
c00118cd:	75 e8                	jne    c00118b7 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c00118cf:	46                   	inc    esi
c00118d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00118d3:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00118d9:	09 f8                	or     eax,edi
c00118db:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c00118e6:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00118ec:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00118f3:	31 c0                	xor    eax,eax
c00118f5:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00118fd:	74 09                	je     c0011908 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c00118ff:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011906:	eb 06                	jmp    c001190e <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011908:	40                   	inc    eax
c0011909:	83 f8 08             	cmp    eax,0x8
c001190c:	75 e7                	jne    c00118f5 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c001190e:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011911:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011915:	83 fd 09             	cmp    ebp,0x9
c0011918:	89 2a                	mov    DWORD PTR [edx],ebp
c001191a:	75 07                	jne    c0011923 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c001191c:	b8 ec 16 01 c0       	mov    eax,0xc00116ec
c0011921:	eb 31                	jmp    c0011954 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011923:	83 f8 01             	cmp    eax,0x1
c0011926:	75 0c                	jne    c0011934 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011928:	f7 d7                	not    edi
c001192a:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011930:	31 c0                	xor    eax,eax
c0011932:	eb 20                	jmp    c0011954 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011934:	85 c0                	test   eax,eax
c0011936:	75 1c                	jne    c0011954 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011938:	8b 04 ad 60 33 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdcca0]
c001193f:	eb 13                	jmp    c0011954 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011941:	46                   	inc    esi
c0011942:	41                   	inc    ecx
c0011943:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011949:	83 f9 08             	cmp    ecx,0x8
c001194c:	0f 85 36 ff ff ff    	jne    c0011888 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011952:	eb dc                	jmp    c0011930 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011954:	5a                   	pop    edx
c0011955:	5b                   	pop    ebx
c0011956:	5e                   	pop    esi
c0011957:	5f                   	pop    edi
c0011958:	5d                   	pop    ebp
c0011959:	c3                   	ret    

c001195a <KiCheckSignalZ>:
c001195a:	83 ec 10             	sub    esp,0x10
c001195d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011961:	50                   	push   eax
c0011962:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011967:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001196a:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011970:	e8 ee fe ff ff       	call   c0011863 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011975:	5a                   	pop    edx
c0011976:	31 d2                	xor    edx,edx
c0011978:	59                   	pop    ecx
c0011979:	85 c0                	test   eax,eax
c001197b:	74 19                	je     c0011996 <KiCheckSignalZ+0x3c>
c001197d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011983:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011986:	89 02                	mov    DWORD PTR [edx],eax
c0011988:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c001198f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011993:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011996:	89 d0                	mov    eax,edx
c0011998:	83 c4 10             	add    esp,0x10
c001199b:	c3                   	ret    

c001199c <KeCompleteSignal(SigHandlerBlock*, int)>:
c001199c:	56                   	push   esi
c001199d:	53                   	push   ebx
c001199e:	bb 01 00 00 00       	mov    ebx,0x1
c00119a3:	52                   	push   edx
c00119a4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00119a8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00119ac:	d3 e3                	shl    ebx,cl
c00119ae:	83 f9 10             	cmp    ecx,0x10
c00119b1:	7f 08                	jg     c00119bb <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00119b3:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00119b9:	75 10                	jne    c00119cb <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00119bb:	83 ec 0c             	sub    esp,0xc
c00119be:	68 75 1f 02 c0       	push   0xc0021f75
c00119c3:	e8 7d f9 ff ff       	call   c0011345 <KePanic(char const*)>
c00119c8:	83 c4 10             	add    esp,0x10
c00119cb:	f7 d3                	not    ebx
c00119cd:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00119d3:	58                   	pop    eax
c00119d4:	5b                   	pop    ebx
c00119d5:	5e                   	pop    esi
c00119d6:	c3                   	ret    

c00119d7 <KiFinishSignalZ>:
c00119d7:	53                   	push   ebx
c00119d8:	83 ec 10             	sub    esp,0x10
c00119db:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00119df:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c00119e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119e7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119ea:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00119f0:	e8 a7 ff ff ff       	call   c001199c <KeCompleteSignal(SigHandlerBlock*, int)>
c00119f5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00119fb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011a02:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011a09:	83 c4 18             	add    esp,0x18
c0011a0c:	5b                   	pop    ebx
c0011a0d:	c3                   	ret    

c0011a0e <SysSeekDir(regs*)>:
c0011a0e:	31 c0                	xor    eax,eax
c0011a10:	31 d2                	xor    edx,edx
c0011a12:	c3                   	ret    

c0011a13 <SysTellDir(regs*)>:
c0011a13:	31 c0                	xor    eax,eax
c0011a15:	31 d2                	xor    edx,edx
c0011a17:	c3                   	ret    

c0011a18 <SysVerify(regs*)>:
c0011a18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a1c:	31 d2                	xor    edx,edx
c0011a1e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011a21:	c3                   	ret    

c0011a22 <SysGetArgc(regs*)>:
c0011a22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a27:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a2a:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011a30:	89 c2                	mov    edx,eax
c0011a32:	c1 fa 1f             	sar    edx,0x1f
c0011a35:	c3                   	ret    

c0011a36 <SysTTYName(regs*)>:
c0011a36:	b8 01 00 00 00       	mov    eax,0x1
c0011a3b:	31 d2                	xor    edx,edx
c0011a3d:	c3                   	ret    

c0011a3e <SysFormatDisk(regs*)>:
c0011a3e:	56                   	push   esi
c0011a3f:	53                   	push   ebx
c0011a40:	83 ec 04             	sub    esp,0x4
c0011a43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011a47:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c0011a4d:	eb 28                	jmp    c0011a77 <SysFormatDisk(regs*)+0x39>
c0011a4f:	83 ec 0c             	sub    esp,0xc
c0011a52:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011a55:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011a58:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011a5a:	51                   	push   ecx
c0011a5b:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011a5e:	51                   	push   ecx
c0011a5f:	50                   	push   eax
c0011a60:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0011a67:	50                   	push   eax
c0011a68:	53                   	push   ebx
c0011a69:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011a6c:	83 c4 20             	add    esp,0x20
c0011a6f:	83 f8 08             	cmp    eax,0x8
c0011a72:	75 14                	jne    c0011a88 <SysFormatDisk(regs*)+0x4a>
c0011a74:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011a77:	85 db                	test   ebx,ebx
c0011a79:	75 d4                	jne    c0011a4f <SysFormatDisk(regs*)+0x11>
c0011a7b:	83 c4 04             	add    esp,0x4
c0011a7e:	b8 03 00 00 00       	mov    eax,0x3
c0011a83:	31 d2                	xor    edx,edx
c0011a85:	5b                   	pop    ebx
c0011a86:	5e                   	pop    esi
c0011a87:	c3                   	ret    
c0011a88:	85 c0                	test   eax,eax
c0011a8a:	74 1f                	je     c0011aab <SysFormatDisk(regs*)+0x6d>
c0011a8c:	83 f8 09             	cmp    eax,0x9
c0011a8f:	74 0d                	je     c0011a9e <SysFormatDisk(regs*)+0x60>
c0011a91:	83 c4 04             	add    esp,0x4
c0011a94:	b8 02 00 00 00       	mov    eax,0x2
c0011a99:	31 d2                	xor    edx,edx
c0011a9b:	5b                   	pop    ebx
c0011a9c:	5e                   	pop    esi
c0011a9d:	c3                   	ret    
c0011a9e:	83 c4 04             	add    esp,0x4
c0011aa1:	b8 01 00 00 00       	mov    eax,0x1
c0011aa6:	31 d2                	xor    edx,edx
c0011aa8:	5b                   	pop    ebx
c0011aa9:	5e                   	pop    esi
c0011aaa:	c3                   	ret    
c0011aab:	83 c4 04             	add    esp,0x4
c0011aae:	31 c0                	xor    eax,eax
c0011ab0:	31 d2                	xor    edx,edx
c0011ab2:	5b                   	pop    ebx
c0011ab3:	5e                   	pop    esi
c0011ab4:	c3                   	ret    

c0011ab5 <SysSetDiskVolumeLabel(regs*)>:
c0011ab5:	56                   	push   esi
c0011ab6:	53                   	push   ebx
c0011ab7:	83 ec 04             	sub    esp,0x4
c0011aba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011abe:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011ac1:	83 f8 19             	cmp    eax,0x19
c0011ac4:	77 33                	ja     c0011af9 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011ac6:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0011acd:	85 c9                	test   ecx,ecx
c0011acf:	74 28                	je     c0011af9 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011ad1:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011ad4:	85 db                	test   ebx,ebx
c0011ad6:	74 21                	je     c0011af9 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011ad8:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011ade:	85 d2                	test   edx,edx
c0011ae0:	74 17                	je     c0011af9 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011ae2:	8b 32                	mov    esi,DWORD PTR [edx]
c0011ae4:	53                   	push   ebx
c0011ae5:	50                   	push   eax
c0011ae6:	51                   	push   ecx
c0011ae7:	52                   	push   edx
c0011ae8:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011aeb:	83 c4 10             	add    esp,0x10
c0011aee:	89 c2                	mov    edx,eax
c0011af0:	83 c4 04             	add    esp,0x4
c0011af3:	c1 fa 1f             	sar    edx,0x1f
c0011af6:	5b                   	pop    ebx
c0011af7:	5e                   	pop    esi
c0011af8:	c3                   	ret    
c0011af9:	83 c4 04             	add    esp,0x4
c0011afc:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011b01:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b06:	5b                   	pop    ebx
c0011b07:	5e                   	pop    esi
c0011b08:	c3                   	ret    

c0011b09 <SysGetDiskVolumeLabel(regs*)>:
c0011b09:	57                   	push   edi
c0011b0a:	56                   	push   esi
c0011b0b:	53                   	push   ebx
c0011b0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b10:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011b13:	83 fa 19             	cmp    edx,0x19
c0011b16:	77 3c                	ja     c0011b54 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b18:	8b 0c 95 80 88 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7780]
c0011b1f:	85 c9                	test   ecx,ecx
c0011b21:	74 31                	je     c0011b54 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b23:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011b26:	85 db                	test   ebx,ebx
c0011b28:	74 2a                	je     c0011b54 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b2a:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011b2d:	85 f6                	test   esi,esi
c0011b2f:	74 23                	je     c0011b54 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b31:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011b37:	85 c0                	test   eax,eax
c0011b39:	74 19                	je     c0011b54 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b3b:	83 ec 0c             	sub    esp,0xc
c0011b3e:	8b 38                	mov    edi,DWORD PTR [eax]
c0011b40:	56                   	push   esi
c0011b41:	53                   	push   ebx
c0011b42:	52                   	push   edx
c0011b43:	51                   	push   ecx
c0011b44:	50                   	push   eax
c0011b45:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011b48:	83 c4 20             	add    esp,0x20
c0011b4b:	89 c2                	mov    edx,eax
c0011b4d:	5b                   	pop    ebx
c0011b4e:	c1 fa 1f             	sar    edx,0x1f
c0011b51:	5e                   	pop    esi
c0011b52:	5f                   	pop    edi
c0011b53:	c3                   	ret    
c0011b54:	5b                   	pop    ebx
c0011b55:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011b5a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b5f:	5e                   	pop    esi
c0011b60:	5f                   	pop    edi
c0011b61:	c3                   	ret    

c0011b62 <SysShutdown(regs*)>:
c0011b62:	83 ec 0c             	sub    esp,0xc
c0011b65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b69:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011b6c:	85 c0                	test   eax,eax
c0011b6e:	74 18                	je     c0011b88 <SysShutdown(regs*)+0x26>
c0011b70:	83 f8 01             	cmp    eax,0x1
c0011b73:	74 38                	je     c0011bad <SysShutdown(regs*)+0x4b>
c0011b75:	83 f8 02             	cmp    eax,0x2
c0011b78:	74 24                	je     c0011b9e <SysShutdown(regs*)+0x3c>
c0011b7a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b7f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b84:	83 c4 0c             	add    esp,0xc
c0011b87:	c3                   	ret    
c0011b88:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011b8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b8f:	6a 00                	push   0x0
c0011b91:	6a 00                	push   0x0
c0011b93:	6a 00                	push   0x0
c0011b95:	50                   	push   eax
c0011b96:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011b99:	83 c4 10             	add    esp,0x10
c0011b9c:	eb dc                	jmp    c0011b7a <SysShutdown(regs*)+0x18>
c0011b9e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011ba3:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ba5:	6a 00                	push   0x0
c0011ba7:	6a 00                	push   0x0
c0011ba9:	6a 01                	push   0x1
c0011bab:	eb e8                	jmp    c0011b95 <SysShutdown(regs*)+0x33>
c0011bad:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c0011bb2:	85 c0                	test   eax,eax
c0011bb4:	74 02                	je     c0011bb8 <SysShutdown(regs*)+0x56>
c0011bb6:	ff d0                	call   eax
c0011bb8:	31 c0                	xor    eax,eax
c0011bba:	31 d2                	xor    edx,edx
c0011bbc:	83 c4 0c             	add    esp,0xc
c0011bbf:	c3                   	ret    

c0011bc0 <SysRealpath(regs*)>:
c0011bc0:	83 ec 0c             	sub    esp,0xc
c0011bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bc7:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011bca:	85 d2                	test   edx,edx
c0011bcc:	74 07                	je     c0011bd5 <SysRealpath(regs*)+0x15>
c0011bce:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011bd1:	85 c0                	test   eax,eax
c0011bd3:	75 0b                	jne    c0011be0 <SysRealpath(regs*)+0x20>
c0011bd5:	b8 01 00 00 00       	mov    eax,0x1
c0011bda:	31 d2                	xor    edx,edx
c0011bdc:	83 c4 0c             	add    esp,0xc
c0011bdf:	c3                   	ret    
c0011be0:	6a 00                	push   0x0
c0011be2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011be8:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011beb:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011bf1:	51                   	push   ecx
c0011bf2:	52                   	push   edx
c0011bf3:	50                   	push   eax
c0011bf4:	e8 f1 99 ff ff       	call   c000b5ea <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011bf9:	83 c4 10             	add    esp,0x10
c0011bfc:	31 c0                	xor    eax,eax
c0011bfe:	31 d2                	xor    edx,edx
c0011c00:	83 c4 0c             	add    esp,0xc
c0011c03:	c3                   	ret    

c0011c04 <SysReadDir(regs*)>:
c0011c04:	53                   	push   ebx
c0011c05:	83 ec 18             	sub    esp,0x18
c0011c08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c0c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011c0f:	83 f8 02             	cmp    eax,0x2
c0011c12:	76 61                	jbe    c0011c75 <SysReadDir(regs*)+0x71>
c0011c14:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011c1b:	77 49                	ja     c0011c66 <SysReadDir(regs*)+0x62>
c0011c1d:	83 ec 0c             	sub    esp,0xc
c0011c20:	50                   	push   eax
c0011c21:	e8 8d 78 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011c26:	83 c4 10             	add    esp,0x10
c0011c29:	85 c0                	test   eax,eax
c0011c2b:	74 39                	je     c0011c66 <SysReadDir(regs*)+0x62>
c0011c2d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c35:	83 ec 0c             	sub    esp,0xc
c0011c38:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c3a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011c3e:	51                   	push   ecx
c0011c3f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011c42:	51                   	push   ecx
c0011c43:	6a 00                	push   0x0
c0011c45:	68 10 01 00 00       	push   0x110
c0011c4a:	50                   	push   eax
c0011c4b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011c4e:	83 c4 20             	add    esp,0x20
c0011c51:	85 c0                	test   eax,eax
c0011c53:	74 29                	je     c0011c7e <SysReadDir(regs*)+0x7a>
c0011c55:	83 f8 07             	cmp    eax,0x7
c0011c58:	74 1b                	je     c0011c75 <SysReadDir(regs*)+0x71>
c0011c5a:	b8 02 00 00 00       	mov    eax,0x2
c0011c5f:	31 d2                	xor    edx,edx
c0011c61:	83 c4 18             	add    esp,0x18
c0011c64:	5b                   	pop    ebx
c0011c65:	c3                   	ret    
c0011c66:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c6b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c70:	83 c4 18             	add    esp,0x18
c0011c73:	5b                   	pop    ebx
c0011c74:	c3                   	ret    
c0011c75:	b8 01 00 00 00       	mov    eax,0x1
c0011c7a:	31 d2                	xor    edx,edx
c0011c7c:	eb e3                	jmp    c0011c61 <SysReadDir(regs*)+0x5d>
c0011c7e:	31 c0                	xor    eax,eax
c0011c80:	31 d2                	xor    edx,edx
c0011c82:	eb dd                	jmp    c0011c61 <SysReadDir(regs*)+0x5d>

c0011c84 <SysIsATTY(regs*)>:
c0011c84:	83 ec 0c             	sub    esp,0xc
c0011c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c8b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011c8e:	83 f8 02             	cmp    eax,0x2
c0011c91:	76 07                	jbe    c0011c9a <SysIsATTY(regs*)+0x16>
c0011c93:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011c98:	75 26                	jne    c0011cc0 <SysIsATTY(regs*)+0x3c>
c0011c9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c9f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ca2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011ca8:	85 c0                	test   eax,eax
c0011caa:	74 24                	je     c0011cd0 <SysIsATTY(regs*)+0x4c>
c0011cac:	83 ec 0c             	sub    esp,0xc
c0011caf:	8b 10                	mov    edx,DWORD PTR [eax]
c0011cb1:	50                   	push   eax
c0011cb2:	ff 12                	call   DWORD PTR [edx]
c0011cb4:	31 d2                	xor    edx,edx
c0011cb6:	0f b6 c0             	movzx  eax,al
c0011cb9:	83 c4 10             	add    esp,0x10
c0011cbc:	83 c4 0c             	add    esp,0xc
c0011cbf:	c3                   	ret    
c0011cc0:	83 ec 0c             	sub    esp,0xc
c0011cc3:	50                   	push   eax
c0011cc4:	e8 ea 77 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011cc9:	83 c4 10             	add    esp,0x10
c0011ccc:	85 c0                	test   eax,eax
c0011cce:	75 dc                	jne    c0011cac <SysIsATTY(regs*)+0x28>
c0011cd0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011cd5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011cda:	83 c4 0c             	add    esp,0xc
c0011cdd:	c3                   	ret    

c0011cde <SysSeek(regs*)>:
c0011cde:	53                   	push   ebx
c0011cdf:	83 ec 08             	sub    esp,0x8
c0011ce2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ce6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011ce9:	8d 50 fd             	lea    edx,[eax-0x3]
c0011cec:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011cf2:	77 32                	ja     c0011d26 <SysSeek(regs*)+0x48>
c0011cf4:	83 ec 0c             	sub    esp,0xc
c0011cf7:	50                   	push   eax
c0011cf8:	e8 b6 77 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011cfd:	83 c4 0c             	add    esp,0xc
c0011d00:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011d03:	31 db                	xor    ebx,ebx
c0011d05:	53                   	push   ebx
c0011d06:	51                   	push   ecx
c0011d07:	50                   	push   eax
c0011d08:	e8 6d 9c ff ff       	call   c000b97a <File::seek(unsigned long long)>
c0011d0d:	83 c4 10             	add    esp,0x10
c0011d10:	85 c0                	test   eax,eax
c0011d12:	0f 95 c0             	setne  al
c0011d15:	31 d2                	xor    edx,edx
c0011d17:	0f b6 c0             	movzx  eax,al
c0011d1a:	f7 d8                	neg    eax
c0011d1c:	83 d2 00             	adc    edx,0x0
c0011d1f:	83 c4 08             	add    esp,0x8
c0011d22:	f7 da                	neg    edx
c0011d24:	5b                   	pop    ebx
c0011d25:	c3                   	ret    
c0011d26:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d2b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d30:	83 c4 08             	add    esp,0x8
c0011d33:	5b                   	pop    ebx
c0011d34:	c3                   	ret    

c0011d35 <SysTell(regs*)>:
c0011d35:	53                   	push   ebx
c0011d36:	83 ec 08             	sub    esp,0x8
c0011d39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d3d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d40:	83 f8 02             	cmp    eax,0x2
c0011d43:	76 4e                	jbe    c0011d93 <SysTell(regs*)+0x5e>
c0011d45:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011d4a:	76 19                	jbe    c0011d65 <SysTell(regs*)+0x30>
c0011d4c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011d4f:	31 d2                	xor    edx,edx
c0011d51:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011d57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d5e:	31 c0                	xor    eax,eax
c0011d60:	83 c4 08             	add    esp,0x8
c0011d63:	5b                   	pop    ebx
c0011d64:	c3                   	ret    
c0011d65:	83 ec 0c             	sub    esp,0xc
c0011d68:	50                   	push   eax
c0011d69:	e8 45 77 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011d6e:	5a                   	pop    edx
c0011d6f:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011d72:	59                   	pop    ecx
c0011d73:	53                   	push   ebx
c0011d74:	50                   	push   eax
c0011d75:	e8 ac 9c ff ff       	call   c000ba26 <File::tell(unsigned long long*)>
c0011d7a:	83 c4 10             	add    esp,0x10
c0011d7d:	85 c0                	test   eax,eax
c0011d7f:	0f 95 c0             	setne  al
c0011d82:	31 d2                	xor    edx,edx
c0011d84:	0f b6 c0             	movzx  eax,al
c0011d87:	f7 d8                	neg    eax
c0011d89:	83 d2 00             	adc    edx,0x0
c0011d8c:	83 c4 08             	add    esp,0x8
c0011d8f:	f7 da                	neg    edx
c0011d91:	5b                   	pop    ebx
c0011d92:	c3                   	ret    
c0011d93:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d98:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d9d:	83 c4 08             	add    esp,0x8
c0011da0:	5b                   	pop    ebx
c0011da1:	c3                   	ret    

c0011da2 <SysSize(regs*)>:
c0011da2:	53                   	push   ebx
c0011da3:	83 ec 18             	sub    esp,0x18
c0011da6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011daa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011dad:	83 f8 02             	cmp    eax,0x2
c0011db0:	76 54                	jbe    c0011e06 <SysSize(regs*)+0x64>
c0011db2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011db7:	76 19                	jbe    c0011dd2 <SysSize(regs*)+0x30>
c0011db9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011dbc:	31 d2                	xor    edx,edx
c0011dbe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011dc4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011dcb:	31 c0                	xor    eax,eax
c0011dcd:	83 c4 18             	add    esp,0x18
c0011dd0:	5b                   	pop    ebx
c0011dd1:	c3                   	ret    
c0011dd2:	83 ec 0c             	sub    esp,0xc
c0011dd5:	50                   	push   eax
c0011dd6:	e8 d8 76 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011ddb:	83 c4 0c             	add    esp,0xc
c0011dde:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011de2:	52                   	push   edx
c0011de3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011de6:	52                   	push   edx
c0011de7:	50                   	push   eax
c0011de8:	e8 d1 9d ff ff       	call   c000bbbe <File::stat(unsigned long long*, bool*)>
c0011ded:	83 c4 10             	add    esp,0x10
c0011df0:	85 c0                	test   eax,eax
c0011df2:	0f 95 c0             	setne  al
c0011df5:	31 d2                	xor    edx,edx
c0011df7:	0f b6 c0             	movzx  eax,al
c0011dfa:	f7 d8                	neg    eax
c0011dfc:	83 d2 00             	adc    edx,0x0
c0011dff:	83 c4 18             	add    esp,0x18
c0011e02:	f7 da                	neg    edx
c0011e04:	5b                   	pop    ebx
c0011e05:	c3                   	ret    
c0011e06:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e0b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e10:	83 c4 18             	add    esp,0x18
c0011e13:	5b                   	pop    ebx
c0011e14:	c3                   	ret    

c0011e15 <SysSizeFromFilename(regs*)>:
c0011e15:	57                   	push   edi
c0011e16:	56                   	push   esi
c0011e17:	53                   	push   ebx
c0011e18:	83 ec 20             	sub    esp,0x20
c0011e1b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011e1f:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011e22:	83 fb 02             	cmp    ebx,0x2
c0011e25:	0f 86 8a 00 00 00    	jbe    c0011eb5 <SysSizeFromFilename(regs*)+0xa0>
c0011e2b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011e31:	76 1b                	jbe    c0011e4e <SysSizeFromFilename(regs*)+0x39>
c0011e33:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011e36:	31 d2                	xor    edx,edx
c0011e38:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011e3e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e45:	83 c4 20             	add    esp,0x20
c0011e48:	31 c0                	xor    eax,eax
c0011e4a:	5b                   	pop    ebx
c0011e4b:	5e                   	pop    esi
c0011e4c:	5f                   	pop    edi
c0011e4d:	c3                   	ret    
c0011e4e:	83 ec 0c             	sub    esp,0xc
c0011e51:	68 14 01 00 00       	push   0x114
c0011e56:	e8 5b 5c ff ff       	call   c0007ab6 <malloc>
c0011e5b:	83 c4 0c             	add    esp,0xc
c0011e5e:	89 c7                	mov    edi,eax
c0011e60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e65:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e68:	50                   	push   eax
c0011e69:	53                   	push   ebx
c0011e6a:	57                   	push   edi
c0011e6b:	e8 84 99 ff ff       	call   c000b7f4 <File::File(char const*, Process*)>
c0011e70:	83 c4 0c             	add    esp,0xc
c0011e73:	8d 44 24 23          	lea    eax,[esp+0x23]
c0011e77:	50                   	push   eax
c0011e78:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011e7b:	52                   	push   edx
c0011e7c:	57                   	push   edi
c0011e7d:	e8 3c 9d ff ff       	call   c000bbbe <File::stat(unsigned long long*, bool*)>
c0011e82:	83 c4 10             	add    esp,0x10
c0011e85:	85 ff                	test   edi,edi
c0011e87:	74 14                	je     c0011e9d <SysSizeFromFilename(regs*)+0x88>
c0011e89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e8d:	8b 17                	mov    edx,DWORD PTR [edi]
c0011e8f:	83 ec 0c             	sub    esp,0xc
c0011e92:	57                   	push   edi
c0011e93:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011e96:	83 c4 10             	add    esp,0x10
c0011e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e9d:	85 c0                	test   eax,eax
c0011e9f:	0f 95 c0             	setne  al
c0011ea2:	31 d2                	xor    edx,edx
c0011ea4:	0f b6 c0             	movzx  eax,al
c0011ea7:	f7 d8                	neg    eax
c0011ea9:	83 d2 00             	adc    edx,0x0
c0011eac:	83 c4 20             	add    esp,0x20
c0011eaf:	f7 da                	neg    edx
c0011eb1:	5b                   	pop    ebx
c0011eb2:	5e                   	pop    esi
c0011eb3:	5f                   	pop    edi
c0011eb4:	c3                   	ret    
c0011eb5:	83 c4 20             	add    esp,0x20
c0011eb8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ebd:	5b                   	pop    ebx
c0011ebe:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ec3:	5e                   	pop    esi
c0011ec4:	5f                   	pop    edi
c0011ec5:	c3                   	ret    

c0011ec6 <SysClose(regs*)>:
c0011ec6:	53                   	push   ebx
c0011ec7:	83 ec 08             	sub    esp,0x8
c0011eca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ece:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ed1:	83 f8 02             	cmp    eax,0x2
c0011ed4:	76 41                	jbe    c0011f17 <SysClose(regs*)+0x51>
c0011ed6:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011edc:	83 fa 01             	cmp    edx,0x1
c0011edf:	76 2d                	jbe    c0011f0e <SysClose(regs*)+0x48>
c0011ee1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011ee6:	77 2f                	ja     c0011f17 <SysClose(regs*)+0x51>
c0011ee8:	83 ec 0c             	sub    esp,0xc
c0011eeb:	50                   	push   eax
c0011eec:	e8 c2 75 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011ef1:	89 c3                	mov    ebx,eax
c0011ef3:	89 04 24             	mov    DWORD PTR [esp],eax
c0011ef6:	e8 1f 9a ff ff       	call   c000b91a <File::close()>
c0011efb:	83 c4 10             	add    esp,0x10
c0011efe:	85 db                	test   ebx,ebx
c0011f00:	74 0c                	je     c0011f0e <SysClose(regs*)+0x48>
c0011f02:	83 ec 0c             	sub    esp,0xc
c0011f05:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f07:	53                   	push   ebx
c0011f08:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f0b:	83 c4 10             	add    esp,0x10
c0011f0e:	31 c0                	xor    eax,eax
c0011f10:	31 d2                	xor    edx,edx
c0011f12:	83 c4 08             	add    esp,0x8
c0011f15:	5b                   	pop    ebx
c0011f16:	c3                   	ret    
c0011f17:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f1c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f21:	83 c4 08             	add    esp,0x8
c0011f24:	5b                   	pop    ebx
c0011f25:	c3                   	ret    

c0011f26 <SysOpenDir(regs*)>:
c0011f26:	56                   	push   esi
c0011f27:	53                   	push   ebx
c0011f28:	83 ec 04             	sub    esp,0x4
c0011f2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011f2f:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011f32:	85 c9                	test   ecx,ecx
c0011f34:	74 5d                	je     c0011f93 <SysOpenDir(regs*)+0x6d>
c0011f36:	83 ec 0c             	sub    esp,0xc
c0011f39:	68 14 01 00 00       	push   0x114
c0011f3e:	e8 73 5b ff ff       	call   c0007ab6 <malloc>
c0011f43:	83 c4 0c             	add    esp,0xc
c0011f46:	89 c6                	mov    esi,eax
c0011f48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f4d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f50:	50                   	push   eax
c0011f51:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011f54:	52                   	push   edx
c0011f55:	56                   	push   esi
c0011f56:	e8 23 9e ff ff       	call   c000bd7e <Directory::Directory(char const*, Process*)>
c0011f5b:	83 c4 10             	add    esp,0x10
c0011f5e:	85 f6                	test   esi,esi
c0011f60:	74 31                	je     c0011f93 <SysOpenDir(regs*)+0x6d>
c0011f62:	83 ec 0c             	sub    esp,0xc
c0011f65:	56                   	push   esi
c0011f66:	e8 db 9e ff ff       	call   c000be46 <Directory::open()>
c0011f6b:	83 c4 10             	add    esp,0x10
c0011f6e:	85 c0                	test   eax,eax
c0011f70:	75 21                	jne    c0011f93 <SysOpenDir(regs*)+0x6d>
c0011f72:	83 ec 0c             	sub    esp,0xc
c0011f75:	56                   	push   esi
c0011f76:	e8 3b 72 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0011f7b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011f7e:	83 c4 10             	add    esp,0x10
c0011f81:	89 02                	mov    DWORD PTR [edx],eax
c0011f83:	c1 f8 1f             	sar    eax,0x1f
c0011f86:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011f89:	83 c4 04             	add    esp,0x4
c0011f8c:	31 c0                	xor    eax,eax
c0011f8e:	31 d2                	xor    edx,edx
c0011f90:	5b                   	pop    ebx
c0011f91:	5e                   	pop    esi
c0011f92:	c3                   	ret    
c0011f93:	83 c4 04             	add    esp,0x4
c0011f96:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f9b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fa0:	5b                   	pop    ebx
c0011fa1:	5e                   	pop    esi
c0011fa2:	c3                   	ret    

c0011fa3 <SysMakeDir(regs*)>:
c0011fa3:	56                   	push   esi
c0011fa4:	53                   	push   ebx
c0011fa5:	83 ec 10             	sub    esp,0x10
c0011fa8:	68 14 01 00 00       	push   0x114
c0011fad:	e8 04 5b ff ff       	call   c0007ab6 <malloc>
c0011fb2:	83 c4 0c             	add    esp,0xc
c0011fb5:	89 c3                	mov    ebx,eax
c0011fb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fbc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fbf:	50                   	push   eax
c0011fc0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011fc4:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011fc7:	52                   	push   edx
c0011fc8:	53                   	push   ebx
c0011fc9:	e8 b0 9d ff ff       	call   c000bd7e <Directory::Directory(char const*, Process*)>
c0011fce:	83 c4 10             	add    esp,0x10
c0011fd1:	85 db                	test   ebx,ebx
c0011fd3:	74 2c                	je     c0012001 <SysMakeDir(regs*)+0x5e>
c0011fd5:	83 ec 0c             	sub    esp,0xc
c0011fd8:	53                   	push   ebx
c0011fd9:	e8 48 a0 ff ff       	call   c000c026 <Directory::create()>
c0011fde:	89 c6                	mov    esi,eax
c0011fe0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011fe2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011fe5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011fe8:	83 c4 10             	add    esp,0x10
c0011feb:	31 c0                	xor    eax,eax
c0011fed:	85 f6                	test   esi,esi
c0011fef:	0f 95 c0             	setne  al
c0011ff2:	31 d2                	xor    edx,edx
c0011ff4:	f7 d8                	neg    eax
c0011ff6:	83 d2 00             	adc    edx,0x0
c0011ff9:	83 c4 04             	add    esp,0x4
c0011ffc:	f7 da                	neg    edx
c0011ffe:	5b                   	pop    ebx
c0011fff:	5e                   	pop    esi
c0012000:	c3                   	ret    
c0012001:	83 c4 04             	add    esp,0x4
c0012004:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012009:	ba ff ff ff ff       	mov    edx,0xffffffff
c001200e:	5b                   	pop    ebx
c001200f:	5e                   	pop    esi
c0012010:	c3                   	ret    

c0012011 <SysCloseDir(regs*)>:
c0012011:	53                   	push   ebx
c0012012:	83 ec 08             	sub    esp,0x8
c0012015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012019:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001201c:	8d 50 fd             	lea    edx,[eax-0x3]
c001201f:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0012025:	77 2f                	ja     c0012056 <SysCloseDir(regs*)+0x45>
c0012027:	83 ec 0c             	sub    esp,0xc
c001202a:	50                   	push   eax
c001202b:	e8 83 74 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0012030:	89 c3                	mov    ebx,eax
c0012032:	89 04 24             	mov    DWORD PTR [esp],eax
c0012035:	e8 68 9e ff ff       	call   c000bea2 <Directory::close()>
c001203a:	83 c4 10             	add    esp,0x10
c001203d:	85 db                	test   ebx,ebx
c001203f:	74 0c                	je     c001204d <SysCloseDir(regs*)+0x3c>
c0012041:	83 ec 0c             	sub    esp,0xc
c0012044:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012046:	53                   	push   ebx
c0012047:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001204a:	83 c4 10             	add    esp,0x10
c001204d:	31 c0                	xor    eax,eax
c001204f:	31 d2                	xor    edx,edx
c0012051:	83 c4 08             	add    esp,0x8
c0012054:	5b                   	pop    ebx
c0012055:	c3                   	ret    
c0012056:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001205b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012060:	83 c4 08             	add    esp,0x8
c0012063:	5b                   	pop    ebx
c0012064:	c3                   	ret    

c0012065 <SysWait(regs*)>:
c0012065:	83 ec 10             	sub    esp,0x10
c0012068:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001206c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001206f:	52                   	push   edx
c0012070:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0012073:	51                   	push   ecx
c0012074:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012077:	50                   	push   eax
c0012078:	e8 d3 3d 00 00       	call   c0015e50 <waitTask(int, int*, int)>
c001207d:	83 c4 1c             	add    esp,0x1c
c0012080:	89 c2                	mov    edx,eax
c0012082:	c1 fa 1f             	sar    edx,0x1f
c0012085:	c3                   	ret    

c0012086 <SysNotImpl(regs*)>:
c0012086:	83 ec 18             	sub    esp,0x18
c0012089:	68 86 1f 02 c0       	push   0xc0021f86
c001208e:	e8 b2 f2 ff ff       	call   c0011345 <KePanic(char const*)>
c0012093:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012098:	ba ff ff ff ff       	mov    edx,0xffffffff
c001209d:	83 c4 1c             	add    esp,0x1c
c00120a0:	c3                   	ret    

c00120a1 <SysPanic(regs*)>:
c00120a1:	83 ec 18             	sub    esp,0x18
c00120a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00120a8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00120ab:	50                   	push   eax
c00120ac:	e8 94 f2 ff ff       	call   c0011345 <KePanic(char const*)>
c00120b1:	b8 01 00 00 00       	mov    eax,0x1
c00120b6:	31 d2                	xor    edx,edx
c00120b8:	83 c4 1c             	add    esp,0x1c
c00120bb:	c3                   	ret    

c00120bc <SysRmdir(regs*)>:
c00120bc:	56                   	push   esi
c00120bd:	53                   	push   ebx
c00120be:	83 ec 20             	sub    esp,0x20
c00120c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00120c5:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00120c8:	68 14 01 00 00       	push   0x114
c00120cd:	e8 e4 59 ff ff       	call   c0007ab6 <malloc>
c00120d2:	83 c4 0c             	add    esp,0xc
c00120d5:	89 c3                	mov    ebx,eax
c00120d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120dc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00120df:	50                   	push   eax
c00120e0:	56                   	push   esi
c00120e1:	53                   	push   ebx
c00120e2:	e8 0d 97 ff ff       	call   c000b7f4 <File::File(char const*, Process*)>
c00120e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00120ea:	e8 9b 99 ff ff       	call   c000ba8a <File::unlink()>
c00120ef:	83 c4 10             	add    esp,0x10
c00120f2:	85 db                	test   ebx,ebx
c00120f4:	74 14                	je     c001210a <SysRmdir(regs*)+0x4e>
c00120f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00120fa:	8b 13                	mov    edx,DWORD PTR [ebx]
c00120fc:	83 ec 0c             	sub    esp,0xc
c00120ff:	53                   	push   ebx
c0012100:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012103:	83 c4 10             	add    esp,0x10
c0012106:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001210a:	85 c0                	test   eax,eax
c001210c:	0f 95 c0             	setne  al
c001210f:	31 d2                	xor    edx,edx
c0012111:	0f b6 c0             	movzx  eax,al
c0012114:	f7 d8                	neg    eax
c0012116:	83 d2 00             	adc    edx,0x0
c0012119:	83 c4 14             	add    esp,0x14
c001211c:	f7 da                	neg    edx
c001211e:	5b                   	pop    ebx
c001211f:	5e                   	pop    esi
c0012120:	c3                   	ret    

c0012121 <SysUnlink(regs*)>:
c0012121:	56                   	push   esi
c0012122:	53                   	push   ebx
c0012123:	83 ec 20             	sub    esp,0x20
c0012126:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001212a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001212d:	68 14 01 00 00       	push   0x114
c0012132:	e8 7f 59 ff ff       	call   c0007ab6 <malloc>
c0012137:	83 c4 0c             	add    esp,0xc
c001213a:	89 c3                	mov    ebx,eax
c001213c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012141:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012144:	50                   	push   eax
c0012145:	56                   	push   esi
c0012146:	53                   	push   ebx
c0012147:	e8 a8 96 ff ff       	call   c000b7f4 <File::File(char const*, Process*)>
c001214c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001214f:	e8 36 99 ff ff       	call   c000ba8a <File::unlink()>
c0012154:	83 c4 10             	add    esp,0x10
c0012157:	85 db                	test   ebx,ebx
c0012159:	74 14                	je     c001216f <SysUnlink(regs*)+0x4e>
c001215b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001215f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012161:	83 ec 0c             	sub    esp,0xc
c0012164:	53                   	push   ebx
c0012165:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012168:	83 c4 10             	add    esp,0x10
c001216b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001216f:	85 c0                	test   eax,eax
c0012171:	0f 95 c0             	setne  al
c0012174:	31 d2                	xor    edx,edx
c0012176:	0f b6 c0             	movzx  eax,al
c0012179:	f7 d8                	neg    eax
c001217b:	83 d2 00             	adc    edx,0x0
c001217e:	83 c4 14             	add    esp,0x14
c0012181:	f7 da                	neg    edx
c0012183:	5b                   	pop    ebx
c0012184:	5e                   	pop    esi
c0012185:	c3                   	ret    

c0012186 <SysGetArgv(regs*)>:
c0012186:	83 ec 0c             	sub    esp,0xc
c0012189:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001218d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0012190:	85 c0                	test   eax,eax
c0012192:	78 2c                	js     c00121c0 <SysGetArgv(regs*)+0x3a>
c0012194:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001219a:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001219d:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00121a3:	7d 1b                	jge    c00121c0 <SysGetArgv(regs*)+0x3a>
c00121a5:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00121ac:	85 c0                	test   eax,eax
c00121ae:	74 18                	je     c00121c8 <SysGetArgv(regs*)+0x42>
c00121b0:	83 ec 08             	sub    esp,0x8
c00121b3:	50                   	push   eax
c00121b4:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00121b7:	50                   	push   eax
c00121b8:	e8 83 e4 fe ff       	call   c0000640 <strcpy>
c00121bd:	83 c4 10             	add    esp,0x10
c00121c0:	31 c0                	xor    eax,eax
c00121c2:	31 d2                	xor    edx,edx
c00121c4:	83 c4 0c             	add    esp,0xc
c00121c7:	c3                   	ret    
c00121c8:	b8 01 00 00 00       	mov    eax,0x1
c00121cd:	31 d2                	xor    edx,edx
c00121cf:	83 c4 0c             	add    esp,0xc
c00121d2:	c3                   	ret    

c00121d3 <SysUSleep(regs*)>:
c00121d3:	83 ec 1c             	sub    esp,0x1c
c00121d6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00121da:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00121dd:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00121e0:	6a 00                	push   0x0
c00121e2:	6a 64                	push   0x64
c00121e4:	52                   	push   edx
c00121e5:	50                   	push   eax
c00121e6:	e8 95 d0 00 00       	call   c001f280 <__udivdi3>
c00121eb:	83 c4 14             	add    esp,0x14
c00121ee:	50                   	push   eax
c00121ef:	e8 40 3d 00 00       	call   c0015f34 <milliTenthSleep(unsigned int)>
c00121f4:	31 c0                	xor    eax,eax
c00121f6:	31 d2                	xor    edx,edx
c00121f8:	83 c4 1c             	add    esp,0x1c
c00121fb:	c3                   	ret    

c00121fc <SysSpawn(regs*)>:
c00121fc:	56                   	push   esi
c00121fd:	53                   	push   ebx
c00121fe:	83 ec 04             	sub    esp,0x4
c0012201:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012205:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012208:	85 f6                	test   esi,esi
c001220a:	75 0a                	jne    c0012216 <SysSpawn(regs*)+0x1a>
c001220c:	83 c4 04             	add    esp,0x4
c001220f:	31 c0                	xor    eax,eax
c0012211:	31 d2                	xor    edx,edx
c0012213:	5b                   	pop    ebx
c0012214:	5e                   	pop    esi
c0012215:	c3                   	ret    
c0012216:	83 ec 0c             	sub    esp,0xc
c0012219:	68 24 07 00 00       	push   0x724
c001221e:	e8 93 58 ff ff       	call   c0007ab6 <malloc>
c0012223:	83 c4 10             	add    esp,0x10
c0012226:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012229:	89 c6                	mov    esi,eax
c001222b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001222e:	85 c9                	test   ecx,ecx
c0012230:	75 39                	jne    c001226b <SysSpawn(regs*)+0x6f>
c0012232:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012237:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001223a:	52                   	push   edx
c001223b:	50                   	push   eax
c001223c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001223f:	50                   	push   eax
c0012240:	56                   	push   esi
c0012241:	e8 3e 33 00 00       	call   c0015584 <Process::Process(char const*, Process*, char**)>
c0012246:	83 c4 10             	add    esp,0x10
c0012249:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0012250:	75 ba                	jne    c001220c <SysSpawn(regs*)+0x10>
c0012252:	83 ec 0c             	sub    esp,0xc
c0012255:	56                   	push   esi
c0012256:	e8 65 38 00 00       	call   c0015ac0 <Process::createUserThread()>
c001225b:	8b 06                	mov    eax,DWORD PTR [esi]
c001225d:	83 c4 10             	add    esp,0x10
c0012260:	89 c2                	mov    edx,eax
c0012262:	83 c4 04             	add    esp,0x4
c0012265:	c1 fa 1f             	sar    edx,0x1f
c0012268:	5b                   	pop    ebx
c0012269:	5e                   	pop    esi
c001226a:	c3                   	ret    
c001226b:	31 c0                	xor    eax,eax
c001226d:	eb cb                	jmp    c001223a <SysSpawn(regs*)+0x3e>

c001226f <SysGetEnv(regs*)>:
c001226f:	57                   	push   edi
c0012270:	56                   	push   esi
c0012271:	53                   	push   ebx
c0012272:	83 ec 1c             	sub    esp,0x1c
c0012275:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012279:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001227e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012281:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012284:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012287:	51                   	push   ecx
c0012288:	e8 70 ef ff ff       	call   c00111fd <KeGetProcessTotalEnvCount(Process*)>
c001228d:	83 c4 10             	add    esp,0x10
c0012290:	39 c7                	cmp    edi,eax
c0012292:	7c 14                	jl     c00122a8 <SysGetEnv(regs*)+0x39>
c0012294:	85 f6                	test   esi,esi
c0012296:	75 0b                	jne    c00122a3 <SysGetEnv(regs*)+0x34>
c0012298:	83 c4 10             	add    esp,0x10
c001229b:	31 c0                	xor    eax,eax
c001229d:	5b                   	pop    ebx
c001229e:	31 d2                	xor    edx,edx
c00122a0:	5e                   	pop    esi
c00122a1:	5f                   	pop    edi
c00122a2:	c3                   	ret    
c00122a3:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00122a6:	eb f0                	jmp    c0012298 <SysGetEnv(regs*)+0x29>
c00122a8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00122ac:	83 ec 04             	sub    esp,0x4
c00122af:	57                   	push   edi
c00122b0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00122b6:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00122b9:	57                   	push   edi
c00122ba:	50                   	push   eax
c00122bb:	e8 5d ef ff ff       	call   c001121d <KeGetProcessEnvPair(Process*, int)>
c00122c0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00122c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122c7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00122cb:	83 c4 0c             	add    esp,0xc
c00122ce:	85 d2                	test   edx,edx
c00122d0:	75 23                	jne    c00122f5 <SysGetEnv(regs*)+0x86>
c00122d2:	83 ec 0c             	sub    esp,0xc
c00122d5:	50                   	push   eax
c00122d6:	e8 95 e2 fe ff       	call   c0000570 <strlen>
c00122db:	89 3c 24             	mov    DWORD PTR [esp],edi
c00122de:	89 c3                	mov    ebx,eax
c00122e0:	e8 8b e2 fe ff       	call   c0000570 <strlen>
c00122e5:	83 c4 10             	add    esp,0x10
c00122e8:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00122ec:	83 c4 10             	add    esp,0x10
c00122ef:	31 d2                	xor    edx,edx
c00122f1:	5b                   	pop    ebx
c00122f2:	5e                   	pop    esi
c00122f3:	5f                   	pop    edi
c00122f4:	c3                   	ret    
c00122f5:	83 ec 08             	sub    esp,0x8
c00122f8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00122fb:	50                   	push   eax
c00122fc:	56                   	push   esi
c00122fd:	e8 3e e3 fe ff       	call   c0000640 <strcpy>
c0012302:	58                   	pop    eax
c0012303:	5a                   	pop    edx
c0012304:	68 a0 1f 02 c0       	push   0xc0021fa0
c0012309:	56                   	push   esi
c001230a:	e8 31 e5 fe ff       	call   c0000840 <strcat>
c001230f:	59                   	pop    ecx
c0012310:	5b                   	pop    ebx
c0012311:	57                   	push   edi
c0012312:	56                   	push   esi
c0012313:	e8 28 e5 fe ff       	call   c0000840 <strcat>
c0012318:	83 c4 10             	add    esp,0x10
c001231b:	e9 78 ff ff ff       	jmp    c0012298 <SysGetEnv(regs*)+0x29>

c0012320 <SysSetFatAttrib(regs*)>:
c0012320:	57                   	push   edi
c0012321:	56                   	push   esi
c0012322:	53                   	push   ebx
c0012323:	83 ec 1c             	sub    esp,0x1c
c0012326:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001232a:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001232d:	68 14 01 00 00       	push   0x114
c0012332:	e8 7f 57 ff ff       	call   c0007ab6 <malloc>
c0012337:	83 c4 0c             	add    esp,0xc
c001233a:	89 c3                	mov    ebx,eax
c001233c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012341:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012344:	50                   	push   eax
c0012345:	57                   	push   edi
c0012346:	53                   	push   ebx
c0012347:	e8 a8 94 ff ff       	call   c000b7f4 <File::File(char const*, Process*)>
c001234c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001234f:	83 c4 0c             	add    esp,0xc
c0012352:	0f b6 d4             	movzx  edx,ah
c0012355:	0f b6 c0             	movzx  eax,al
c0012358:	52                   	push   edx
c0012359:	50                   	push   eax
c001235a:	53                   	push   ebx
c001235b:	e8 c4 97 ff ff       	call   c000bb24 <File::chfatattr(unsigned char, unsigned char)>
c0012360:	83 c4 10             	add    esp,0x10
c0012363:	85 db                	test   ebx,ebx
c0012365:	74 14                	je     c001237b <SysSetFatAttrib(regs*)+0x5b>
c0012367:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001236b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001236d:	83 ec 0c             	sub    esp,0xc
c0012370:	53                   	push   ebx
c0012371:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012374:	83 c4 10             	add    esp,0x10
c0012377:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001237b:	85 c0                	test   eax,eax
c001237d:	0f 95 c0             	setne  al
c0012380:	31 d2                	xor    edx,edx
c0012382:	0f b6 c0             	movzx  eax,al
c0012385:	f7 d8                	neg    eax
c0012387:	83 d2 00             	adc    edx,0x0
c001238a:	83 c4 10             	add    esp,0x10
c001238d:	f7 da                	neg    edx
c001238f:	5b                   	pop    ebx
c0012390:	5e                   	pop    esi
c0012391:	5f                   	pop    edi
c0012392:	c3                   	ret    

c0012393 <SysPipe(regs*)>:
c0012393:	57                   	push   edi
c0012394:	56                   	push   esi
c0012395:	53                   	push   ebx
c0012396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001239a:	83 ec 0c             	sub    esp,0xc
c001239d:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00123a0:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00123a3:	6a 20                	push   0x20
c00123a5:	e8 0c 57 ff ff       	call   c0007ab6 <malloc>
c00123aa:	89 c3                	mov    ebx,eax
c00123ac:	58                   	pop    eax
c00123ad:	5a                   	pop    edx
c00123ae:	68 00 50 00 00       	push   0x5000
c00123b3:	53                   	push   ebx
c00123b4:	e8 6f 60 ff ff       	call   c0008428 <Pipe::Pipe(int)>
c00123b9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00123bc:	e8 f5 6d ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c00123c1:	89 07                	mov    DWORD PTR [edi],eax
c00123c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00123c6:	e8 eb 6d ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c00123cb:	83 c4 10             	add    esp,0x10
c00123ce:	89 06                	mov    DWORD PTR [esi],eax
c00123d0:	31 d2                	xor    edx,edx
c00123d2:	5b                   	pop    ebx
c00123d3:	31 c0                	xor    eax,eax
c00123d5:	5e                   	pop    esi
c00123d6:	5f                   	pop    edi
c00123d7:	c3                   	ret    

c00123d8 <SysGetUnixTime(regs*)>:
c00123d8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00123dd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00123e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00123e7:	e9 7e 9e ff ff       	jmp    c000c26a <Clock::timeInSecondsLocal()>

c00123ec <string_ends_with(char const*, char const*)>:
c00123ec:	57                   	push   edi
c00123ed:	56                   	push   esi
c00123ee:	53                   	push   ebx
c00123ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00123f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00123f7:	83 ec 0c             	sub    esp,0xc
c00123fa:	53                   	push   ebx
c00123fb:	e8 70 e1 fe ff       	call   c0000570 <strlen>
c0012400:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012403:	89 c6                	mov    esi,eax
c0012405:	e8 66 e1 fe ff       	call   c0000570 <strlen>
c001240a:	83 c4 10             	add    esp,0x10
c001240d:	39 c6                	cmp    esi,eax
c001240f:	7d 06                	jge    c0012417 <string_ends_with(char const*, char const*)+0x2b>
c0012411:	5b                   	pop    ebx
c0012412:	31 c0                	xor    eax,eax
c0012414:	5e                   	pop    esi
c0012415:	5f                   	pop    edi
c0012416:	c3                   	ret    
c0012417:	83 ec 08             	sub    esp,0x8
c001241a:	29 c6                	sub    esi,eax
c001241c:	57                   	push   edi
c001241d:	01 f3                	add    ebx,esi
c001241f:	53                   	push   ebx
c0012420:	e8 2b e3 fe ff       	call   c0000750 <strcmp>
c0012425:	83 c4 10             	add    esp,0x10
c0012428:	85 c0                	test   eax,eax
c001242a:	5b                   	pop    ebx
c001242b:	0f 94 c0             	sete   al
c001242e:	5e                   	pop    esi
c001242f:	0f b6 c0             	movzx  eax,al
c0012432:	5f                   	pop    edi
c0012433:	c3                   	ret    

c0012434 <SysOpen(regs*)>:
c0012434:	56                   	push   esi
c0012435:	53                   	push   ebx
c0012436:	81 ec 04 01 00 00    	sub    esp,0x104
c001243c:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012443:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012446:	85 c0                	test   eax,eax
c0012448:	0f 84 bc 01 00 00    	je     c001260a <SysOpen(regs*)+0x1d6>
c001244e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012451:	85 c0                	test   eax,eax
c0012453:	0f 84 b1 01 00 00    	je     c001260a <SysOpen(regs*)+0x1d6>
c0012459:	6a 00                	push   0x0
c001245b:	68 a2 1f 02 c0       	push   0xc0021fa2
c0012460:	50                   	push   eax
c0012461:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012465:	56                   	push   esi
c0012466:	e8 7f 91 ff ff       	call   c000b5ea <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001246b:	89 34 24             	mov    DWORD PTR [esp],esi
c001246e:	e8 fd e0 fe ff       	call   c0000570 <strlen>
c0012473:	83 c4 10             	add    esp,0x10
c0012476:	83 e8 01             	sub    eax,0x1
c0012479:	74 21                	je     c001249c <SysOpen(regs*)+0x68>
c001247b:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c001247f:	eb 12                	jmp    c0012493 <SysOpen(regs*)+0x5f>
c0012481:	83 fa 3a             	cmp    edx,0x3a
c0012484:	74 12                	je     c0012498 <SysOpen(regs*)+0x64>
c0012486:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001248a:	83 e8 01             	sub    eax,0x1
c001248d:	74 0d                	je     c001249c <SysOpen(regs*)+0x68>
c001248f:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0012493:	83 fa 2e             	cmp    edx,0x2e
c0012496:	75 e9                	jne    c0012481 <SysOpen(regs*)+0x4d>
c0012498:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001249c:	83 ec 08             	sub    esp,0x8
c001249f:	68 a6 1f 02 c0       	push   0xc0021fa6
c00124a4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00124a7:	50                   	push   eax
c00124a8:	e8 3f ff ff ff       	call   c00123ec <string_ends_with(char const*, char const*)>
c00124ad:	83 c4 10             	add    esp,0x10
c00124b0:	85 c0                	test   eax,eax
c00124b2:	74 1d                	je     c00124d1 <SysOpen(regs*)+0x9d>
c00124b4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00124b7:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00124bd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00124c4:	81 c4 04 01 00 00    	add    esp,0x104
c00124ca:	31 c0                	xor    eax,eax
c00124cc:	31 d2                	xor    edx,edx
c00124ce:	5b                   	pop    ebx
c00124cf:	5e                   	pop    esi
c00124d0:	c3                   	ret    
c00124d1:	83 ec 08             	sub    esp,0x8
c00124d4:	68 ab 1f 02 c0       	push   0xc0021fab
c00124d9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00124dc:	50                   	push   eax
c00124dd:	e8 0a ff ff ff       	call   c00123ec <string_ends_with(char const*, char const*)>
c00124e2:	83 c4 10             	add    esp,0x10
c00124e5:	85 c0                	test   eax,eax
c00124e7:	75 cb                	jne    c00124b4 <SysOpen(regs*)+0x80>
c00124e9:	83 ec 08             	sub    esp,0x8
c00124ec:	68 a7 1f 02 c0       	push   0xc0021fa7
c00124f1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00124f4:	50                   	push   eax
c00124f5:	e8 56 e2 fe ff       	call   c0000750 <strcmp>
c00124fa:	83 c4 10             	add    esp,0x10
c00124fd:	85 c0                	test   eax,eax
c00124ff:	74 b3                	je     c00124b4 <SysOpen(regs*)+0x80>
c0012501:	83 ec 08             	sub    esp,0x8
c0012504:	68 a6 1f 02 c0       	push   0xc0021fa6
c0012509:	56                   	push   esi
c001250a:	e8 dd fe ff ff       	call   c00123ec <string_ends_with(char const*, char const*)>
c001250f:	83 c4 10             	add    esp,0x10
c0012512:	85 c0                	test   eax,eax
c0012514:	75 9e                	jne    c00124b4 <SysOpen(regs*)+0x80>
c0012516:	83 ec 08             	sub    esp,0x8
c0012519:	68 b0 1f 02 c0       	push   0xc0021fb0
c001251e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012521:	50                   	push   eax
c0012522:	e8 c5 fe ff ff       	call   c00123ec <string_ends_with(char const*, char const*)>
c0012527:	83 c4 10             	add    esp,0x10
c001252a:	85 c0                	test   eax,eax
c001252c:	0f 85 eb 00 00 00    	jne    c001261d <SysOpen(regs*)+0x1e9>
c0012532:	83 ec 08             	sub    esp,0x8
c0012535:	68 b5 1f 02 c0       	push   0xc0021fb5
c001253a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001253d:	50                   	push   eax
c001253e:	e8 a9 fe ff ff       	call   c00123ec <string_ends_with(char const*, char const*)>
c0012543:	83 c4 10             	add    esp,0x10
c0012546:	85 c0                	test   eax,eax
c0012548:	0f 85 cf 00 00 00    	jne    c001261d <SysOpen(regs*)+0x1e9>
c001254e:	83 ec 08             	sub    esp,0x8
c0012551:	68 b1 1f 02 c0       	push   0xc0021fb1
c0012556:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012559:	51                   	push   ecx
c001255a:	e8 f1 e1 fe ff       	call   c0000750 <strcmp>
c001255f:	83 c4 10             	add    esp,0x10
c0012562:	85 c0                	test   eax,eax
c0012564:	0f 84 b3 00 00 00    	je     c001261d <SysOpen(regs*)+0x1e9>
c001256a:	83 ec 08             	sub    esp,0x8
c001256d:	68 b0 1f 02 c0       	push   0xc0021fb0
c0012572:	56                   	push   esi
c0012573:	e8 74 fe ff ff       	call   c00123ec <string_ends_with(char const*, char const*)>
c0012578:	83 c4 10             	add    esp,0x10
c001257b:	85 c0                	test   eax,eax
c001257d:	0f 85 9a 00 00 00    	jne    c001261d <SysOpen(regs*)+0x1e9>
c0012583:	83 ec 0c             	sub    esp,0xc
c0012586:	68 14 01 00 00       	push   0x114
c001258b:	e8 26 55 ff ff       	call   c0007ab6 <malloc>
c0012590:	83 c4 0c             	add    esp,0xc
c0012593:	89 c6                	mov    esi,eax
c0012595:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001259a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001259d:	50                   	push   eax
c001259e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00125a1:	52                   	push   edx
c00125a2:	56                   	push   esi
c00125a3:	e8 4c 92 ff ff       	call   c000b7f4 <File::File(char const*, Process*)>
c00125a8:	83 c4 10             	add    esp,0x10
c00125ab:	85 f6                	test   esi,esi
c00125ad:	74 5b                	je     c001260a <SysOpen(regs*)+0x1d6>
c00125af:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00125b2:	0f b6 c2             	movzx  eax,dl
c00125b5:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00125b8:	89 d0                	mov    eax,edx
c00125ba:	83 e0 01             	and    eax,0x1
c00125bd:	f6 c2 02             	test   dl,0x2
c00125c0:	74 03                	je     c00125c5 <SysOpen(regs*)+0x191>
c00125c2:	83 c8 02             	or     eax,0x2
c00125c5:	f6 c2 04             	test   dl,0x4
c00125c8:	74 03                	je     c00125cd <SysOpen(regs*)+0x199>
c00125ca:	83 c8 04             	or     eax,0x4
c00125cd:	f6 c2 08             	test   dl,0x8
c00125d0:	74 03                	je     c00125d5 <SysOpen(regs*)+0x1a1>
c00125d2:	83 c8 0a             	or     eax,0xa
c00125d5:	80 e2 10             	and    dl,0x10
c00125d8:	74 03                	je     c00125dd <SysOpen(regs*)+0x1a9>
c00125da:	83 c8 12             	or     eax,0x12
c00125dd:	83 ec 08             	sub    esp,0x8
c00125e0:	50                   	push   eax
c00125e1:	56                   	push   esi
c00125e2:	e8 d5 92 ff ff       	call   c000b8bc <File::open(FileOpenMode)>
c00125e7:	83 c4 10             	add    esp,0x10
c00125ea:	85 c0                	test   eax,eax
c00125ec:	75 1c                	jne    c001260a <SysOpen(regs*)+0x1d6>
c00125ee:	83 ec 0c             	sub    esp,0xc
c00125f1:	56                   	push   esi
c00125f2:	e8 bf 6b ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c00125f7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00125fa:	83 c4 10             	add    esp,0x10
c00125fd:	89 02                	mov    DWORD PTR [edx],eax
c00125ff:	c1 f8 1f             	sar    eax,0x1f
c0012602:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012605:	e9 ba fe ff ff       	jmp    c00124c4 <SysOpen(regs*)+0x90>
c001260a:	81 c4 04 01 00 00    	add    esp,0x104
c0012610:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012615:	ba ff ff ff ff       	mov    edx,0xffffffff
c001261a:	5b                   	pop    ebx
c001261b:	5e                   	pop    esi
c001261c:	c3                   	ret    
c001261d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012620:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012626:	e9 92 fe ff ff       	jmp    c00124bd <SysOpen(regs*)+0x89>

c001262b <KeSystemCall(regs*, void*)>:
c001262b:	53                   	push   ebx
c001262c:	83 ec 08             	sub    esp,0x8
c001262f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012633:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012636:	83 f8 3b             	cmp    eax,0x3b
c0012639:	77 16                	ja     c0012651 <KeSystemCall(regs*, void*)+0x26>
c001263b:	8b 14 85 c0 33 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcc40]
c0012642:	85 d2                	test   edx,edx
c0012644:	74 0b                	je     c0012651 <KeSystemCall(regs*, void*)+0x26>
c0012646:	83 ec 0c             	sub    esp,0xc
c0012649:	53                   	push   ebx
c001264a:	ff d2                	call   edx
c001264c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001264f:	eb 0d                	jmp    c001265e <KeSystemCall(regs*, void*)+0x33>
c0012651:	52                   	push   edx
c0012652:	52                   	push   edx
c0012653:	50                   	push   eax
c0012654:	68 ba 1f 02 c0       	push   0xc0021fba
c0012659:	e8 e7 82 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001265e:	83 c4 10             	add    esp,0x10
c0012661:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012666:	31 d2                	xor    edx,edx
c0012668:	83 c4 08             	add    esp,0x8
c001266b:	5b                   	pop    ebx
c001266c:	c3                   	ret    
c001266d:	66 90                	xchg   ax,ax
c001266f:	90                   	nop

c0012670 <KeSwitchEndian16(unsigned short)>:
c0012670:	83 ec 04             	sub    esp,0x4
c0012673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012677:	66 89 04 24          	mov    WORD PTR [esp],ax
c001267b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001267f:	c1 f8 08             	sar    eax,0x8
c0012682:	89 c2                	mov    edx,eax
c0012684:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012688:	c1 e0 08             	shl    eax,0x8
c001268b:	09 d0                	or     eax,edx
c001268d:	83 c4 04             	add    esp,0x4
c0012690:	c3                   	ret    
c0012691:	8d 76 00             	lea    esi,[esi+0x0]

c0012694 <KeSwitchEndian32(unsigned int)>:
c0012694:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012698:	c1 e8 18             	shr    eax,0x18
c001269b:	89 c2                	mov    edx,eax
c001269d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126a1:	c1 e0 08             	shl    eax,0x8
c00126a4:	25 00 00 ff 00       	and    eax,0xff0000
c00126a9:	09 c2                	or     edx,eax
c00126ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126af:	c1 e8 08             	shr    eax,0x8
c00126b2:	25 00 ff 00 00       	and    eax,0xff00
c00126b7:	09 c2                	or     edx,eax
c00126b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126bd:	c1 e0 18             	shl    eax,0x18
c00126c0:	09 d0                	or     eax,edx
c00126c2:	c3                   	ret    
c00126c3:	90                   	nop

c00126c4 <EthernetCRC32(unsigned char*, int)>:
c00126c4:	83 ec 10             	sub    esp,0x10
c00126c7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00126cc:	75 0a                	jne    c00126d8 <EthernetCRC32(unsigned char*, int)+0x14>
c00126ce:	b8 00 00 00 00       	mov    eax,0x0
c00126d3:	e9 8c 00 00 00       	jmp    c0012764 <EthernetCRC32(unsigned char*, int)+0xa0>
c00126d8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00126dd:	7f 09                	jg     c00126e8 <EthernetCRC32(unsigned char*, int)+0x24>
c00126df:	b8 00 00 00 00       	mov    eax,0x0
c00126e4:	eb 7e                	jmp    c0012764 <EthernetCRC32(unsigned char*, int)+0xa0>
c00126e6:	66 90                	xchg   ax,ax
c00126e8:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c00126f0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00126f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00126fc:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012700:	7d 5a                	jge    c001275c <EthernetCRC32(unsigned char*, int)+0x98>
c0012702:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012706:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001270a:	01 d0                	add    eax,edx
c001270c:	8a 00                	mov    al,BYTE PTR [eax]
c001270e:	0f b6 c0             	movzx  eax,al
c0012711:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012715:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001271d:	8d 76 00             	lea    esi,[esi+0x0]
c0012720:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012725:	7f 2d                	jg     c0012754 <EthernetCRC32(unsigned char*, int)+0x90>
c0012727:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001272b:	83 e0 01             	and    eax,0x1
c001272e:	74 10                	je     c0012740 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012734:	d1 e8                	shr    eax,1
c0012736:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001273b:	eb 0b                	jmp    c0012748 <EthernetCRC32(unsigned char*, int)+0x84>
c001273d:	8d 76 00             	lea    esi,[esi+0x0]
c0012740:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012744:	d1 e8                	shr    eax,1
c0012746:	66 90                	xchg   ax,ax
c0012748:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001274c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012751:	eb cd                	jmp    c0012720 <EthernetCRC32(unsigned char*, int)+0x5c>
c0012753:	90                   	nop
c0012754:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012759:	eb 9d                	jmp    c00126f8 <EthernetCRC32(unsigned char*, int)+0x34>
c001275b:	90                   	nop
c001275c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012760:	f7 d0                	not    eax
c0012762:	66 90                	xchg   ax,ax
c0012764:	83 c4 10             	add    esp,0x10
c0012767:	c3                   	ret    

c0012768 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012768:	83 ec 2c             	sub    esp,0x2c
c001276b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001276f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012774:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012778:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001277c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012780:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012783:	0f b7 c0             	movzx  eax,ax
c0012786:	3d 06 08 00 00       	cmp    eax,0x806
c001278b:	75 13                	jne    c00127a0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c001278d:	83 ec 0c             	sub    esp,0xc
c0012790:	68 ce 1f 02 c0       	push   0xc0021fce
c0012795:	e8 ab 81 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001279a:	83 c4 10             	add    esp,0x10
c001279d:	eb 25                	jmp    c00127c4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c001279f:	90                   	nop
c00127a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00127a4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00127a7:	0f b7 c0             	movzx  eax,ax
c00127aa:	3d 00 08 00 00       	cmp    eax,0x800
c00127af:	75 13                	jne    c00127c4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c00127b1:	83 ec 0c             	sub    esp,0xc
c00127b4:	68 e4 1f 02 c0       	push   0xc0021fe4
c00127b9:	e8 87 81 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00127be:	83 c4 10             	add    esp,0x10
c00127c1:	8d 76 00             	lea    esi,[esi+0x0]
c00127c4:	90                   	nop
c00127c5:	83 c4 2c             	add    esp,0x2c
c00127c8:	c3                   	ret    

c00127c9 <CmOpen(char const*)>:
c00127c9:	57                   	push   edi
c00127ca:	56                   	push   esi
c00127cb:	53                   	push   ebx
c00127cc:	83 ec 1c             	sub    esp,0x1c
c00127cf:	6a 30                	push   0x30
c00127d1:	e8 e0 52 ff ff       	call   c0007ab6 <malloc>
c00127d6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00127dd:	89 c3                	mov    ebx,eax
c00127df:	e8 d2 52 ff ff       	call   c0007ab6 <malloc>
c00127e4:	83 c4 0c             	add    esp,0xc
c00127e7:	89 c6                	mov    esi,eax
c00127e9:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00127ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00127f3:	50                   	push   eax
c00127f4:	e8 fb 8f ff ff       	call   c000b7f4 <File::File(char const*, Process*)>
c00127f9:	83 c4 0c             	add    esp,0xc
c00127fc:	89 33                	mov    DWORD PTR [ebx],esi
c00127fe:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012802:	50                   	push   eax
c0012803:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012807:	50                   	push   eax
c0012808:	56                   	push   esi
c0012809:	e8 b0 93 ff ff       	call   c000bbbe <File::stat(unsigned long long*, bool*)>
c001280e:	5a                   	pop    edx
c001280f:	59                   	pop    ecx
c0012810:	6a 01                	push   0x1
c0012812:	ff 33                	push   DWORD PTR [ebx]
c0012814:	e8 a3 90 ff ff       	call   c000b8bc <File::open(FileOpenMode)>
c0012819:	5e                   	pop    esi
c001281a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001281e:	e8 93 52 ff ff       	call   c0007ab6 <malloc>
c0012823:	5a                   	pop    edx
c0012824:	89 c7                	mov    edi,eax
c0012826:	8d 74 24 10          	lea    esi,[esp+0x10]
c001282a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001282c:	8b 10                	mov    edx,DWORD PTR [eax]
c001282e:	56                   	push   esi
c001282f:	57                   	push   edi
c0012830:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012834:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012838:	50                   	push   eax
c0012839:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001283c:	83 c4 14             	add    esp,0x14
c001283f:	ff 33                	push   DWORD PTR [ebx]
c0012841:	e8 d4 90 ff ff       	call   c000b91a <File::close()>
c0012846:	59                   	pop    ecx
c0012847:	58                   	pop    eax
c0012848:	6a 13                	push   0x13
c001284a:	ff 33                	push   DWORD PTR [ebx]
c001284c:	e8 6b 90 ff ff       	call   c000b8bc <File::open(FileOpenMode)>
c0012851:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012853:	8b 10                	mov    edx,DWORD PTR [eax]
c0012855:	89 34 24             	mov    DWORD PTR [esp],esi
c0012858:	57                   	push   edi
c0012859:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001285d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012861:	50                   	push   eax
c0012862:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012865:	83 c4 14             	add    esp,0x14
c0012868:	57                   	push   edi
c0012869:	e8 58 52 ff ff       	call   c0007ac6 <free>
c001286e:	83 c4 10             	add    esp,0x10
c0012871:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012874:	75 10                	jne    c0012886 <CmOpen(char const*)+0xbd>
c0012876:	83 ec 0c             	sub    esp,0xc
c0012879:	68 f9 1f 02 c0       	push   0xc0021ff9
c001287e:	e8 c2 ea ff ff       	call   c0011345 <KePanic(char const*)>
c0012883:	83 c4 10             	add    esp,0x10
c0012886:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012889:	50                   	push   eax
c001288a:	6a 00                	push   0x0
c001288c:	6a 00                	push   0x0
c001288e:	ff 33                	push   DWORD PTR [ebx]
c0012890:	e8 e5 90 ff ff       	call   c000b97a <File::seek(unsigned long long)>
c0012895:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012897:	8b 10                	mov    edx,DWORD PTR [eax]
c0012899:	89 34 24             	mov    DWORD PTR [esp],esi
c001289c:	57                   	push   edi
c001289d:	6a 00                	push   0x0
c001289f:	6a 2b                	push   0x2b
c00128a1:	50                   	push   eax
c00128a2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00128a5:	83 c4 1c             	add    esp,0x1c
c00128a8:	6a 00                	push   0x0
c00128aa:	6a 00                	push   0x0
c00128ac:	ff 33                	push   DWORD PTR [ebx]
c00128ae:	e8 c7 90 ff ff       	call   c000b97a <File::seek(unsigned long long)>
c00128b3:	83 c4 0c             	add    esp,0xc
c00128b6:	6a 08                	push   0x8
c00128b8:	68 0a 20 02 c0       	push   0xc002200a
c00128bd:	57                   	push   edi
c00128be:	e8 bd da fe ff       	call   c0000380 <memcmp>
c00128c3:	83 c4 10             	add    esp,0x10
c00128c6:	85 c0                	test   eax,eax
c00128c8:	74 10                	je     c00128da <CmOpen(char const*)+0x111>
c00128ca:	83 ec 0c             	sub    esp,0xc
c00128cd:	68 13 20 02 c0       	push   0xc0022013
c00128d2:	e8 6e ea ff ff       	call   c0011345 <KePanic(char const*)>
c00128d7:	83 c4 10             	add    esp,0x10
c00128da:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c00128de:	89 d8                	mov    eax,ebx
c00128e0:	83 c4 10             	add    esp,0x10
c00128e3:	5b                   	pop    ebx
c00128e4:	5e                   	pop    esi
c00128e5:	5f                   	pop    edi
c00128e6:	c3                   	ret    

c00128e7 <CmClose(Reghive_Tag*)>:
c00128e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128eb:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00128ef:	74 0b                	je     c00128fc <CmClose(Reghive_Tag*)+0x15>
c00128f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00128f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128f7:	e9 1e 90 ff ff       	jmp    c000b91a <File::close()>
c00128fc:	c3                   	ret    

c00128fd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c00128fd:	53                   	push   ebx
c00128fe:	83 ec 18             	sub    esp,0x18
c0012901:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012905:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012909:	74 29                	je     c0012934 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c001290b:	50                   	push   eax
c001290c:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012911:	99                   	cdq    
c0012912:	52                   	push   edx
c0012913:	50                   	push   eax
c0012914:	ff 33                	push   DWORD PTR [ebx]
c0012916:	e8 5f 90 ff ff       	call   c000b97a <File::seek(unsigned long long)>
c001291b:	5a                   	pop    edx
c001291c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001291e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012922:	8b 10                	mov    edx,DWORD PTR [eax]
c0012924:	51                   	push   ecx
c0012925:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012929:	6a 00                	push   0x0
c001292b:	6a 2b                	push   0x2b
c001292d:	50                   	push   eax
c001292e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012931:	83 c4 20             	add    esp,0x20
c0012934:	83 c4 18             	add    esp,0x18
c0012937:	5b                   	pop    ebx
c0012938:	c3                   	ret    

c0012939 <CmGetString(Reghive_Tag*, int, char*)>:
c0012939:	55                   	push   ebp
c001293a:	57                   	push   edi
c001293b:	56                   	push   esi
c001293c:	53                   	push   ebx
c001293d:	31 db                	xor    ebx,ebx
c001293f:	83 ec 70             	sub    esp,0x70
c0012942:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012949:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001294d:	50                   	push   eax
c001294e:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012955:	55                   	push   ebp
c0012956:	e8 a2 ff ff ff       	call   c00128fd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001295b:	83 c4 10             	add    esp,0x10
c001295e:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012963:	c1 e0 08             	shl    eax,0x8
c0012966:	89 c2                	mov    edx,eax
c0012968:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c001296d:	09 d0                	or     eax,edx
c001296f:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012974:	c1 e0 08             	shl    eax,0x8
c0012977:	09 d0                	or     eax,edx
c0012979:	74 25                	je     c00129a0 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c001297b:	6b fb 0d             	imul   edi,ebx,0xd
c001297e:	52                   	push   edx
c001297f:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012983:	52                   	push   edx
c0012984:	50                   	push   eax
c0012985:	55                   	push   ebp
c0012986:	e8 72 ff ff ff       	call   c00128fd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001298b:	8d 74 24 49          	lea    esi,[esp+0x49]
c001298f:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012996:	b9 27 00 00 00       	mov    ecx,0x27
c001299b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001299d:	83 c4 10             	add    esp,0x10
c00129a0:	83 c3 03             	add    ebx,0x3
c00129a3:	83 fb 15             	cmp    ebx,0x15
c00129a6:	75 b6                	jne    c001295e <CmGetString(Reghive_Tag*, int, char*)+0x25>
c00129a8:	83 c4 6c             	add    esp,0x6c
c00129ab:	5b                   	pop    ebx
c00129ac:	5e                   	pop    esi
c00129ad:	5f                   	pop    edi
c00129ae:	5d                   	pop    ebp
c00129af:	c3                   	ret    

c00129b0 <CmEnterDirectory(Reghive_Tag*, int)>:
c00129b0:	83 ec 40             	sub    esp,0x40
c00129b3:	8d 44 24 09          	lea    eax,[esp+0x9]
c00129b7:	50                   	push   eax
c00129b8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00129bc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00129c0:	e8 38 ff ff ff       	call   c00128fd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00129c5:	83 c4 10             	add    esp,0x10
c00129c8:	83 c8 ff             	or     eax,0xffffffff
c00129cb:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c00129d0:	75 19                	jne    c00129eb <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c00129d2:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c00129d7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00129dc:	c1 e0 08             	shl    eax,0x8
c00129df:	09 c2                	or     edx,eax
c00129e1:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c00129e6:	c1 e0 10             	shl    eax,0x10
c00129e9:	09 d0                	or     eax,edx
c00129eb:	83 c4 3c             	add    esp,0x3c
c00129ee:	c3                   	ret    

c00129ef <CmGetNext(Reghive_Tag*, int)>:
c00129ef:	83 ec 40             	sub    esp,0x40
c00129f2:	8d 44 24 09          	lea    eax,[esp+0x9]
c00129f6:	50                   	push   eax
c00129f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00129fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00129ff:	e8 f9 fe ff ff       	call   c00128fd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012a04:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012a09:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012a0e:	c1 e0 08             	shl    eax,0x8
c0012a11:	09 c2                	or     edx,eax
c0012a13:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012a18:	83 c4 4c             	add    esp,0x4c
c0012a1b:	c1 e0 10             	shl    eax,0x10
c0012a1e:	09 d0                	or     eax,edx
c0012a20:	c3                   	ret    

c0012a21 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012a21:	53                   	push   ebx
c0012a22:	83 ec 18             	sub    esp,0x18
c0012a25:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012a29:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012a2d:	74 29                	je     c0012a58 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012a2f:	50                   	push   eax
c0012a30:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012a35:	99                   	cdq    
c0012a36:	52                   	push   edx
c0012a37:	50                   	push   eax
c0012a38:	ff 33                	push   DWORD PTR [ebx]
c0012a3a:	e8 3b 8f ff ff       	call   c000b97a <File::seek(unsigned long long)>
c0012a3f:	5a                   	pop    edx
c0012a40:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012a42:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012a46:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a48:	51                   	push   ecx
c0012a49:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012a4d:	6a 00                	push   0x0
c0012a4f:	6a 2b                	push   0x2b
c0012a51:	50                   	push   eax
c0012a52:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012a55:	83 c4 20             	add    esp,0x20
c0012a58:	83 c4 18             	add    esp,0x18
c0012a5b:	5b                   	pop    ebx
c0012a5c:	c3                   	ret    

c0012a5d <CmFreeExtent(Reghive_Tag*, int)>:
c0012a5d:	53                   	push   ebx
c0012a5e:	83 ec 3c             	sub    esp,0x3c
c0012a61:	6a 2b                	push   0x2b
c0012a63:	6a 00                	push   0x0
c0012a65:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012a69:	53                   	push   ebx
c0012a6a:	e8 81 da fe ff       	call   c00004f0 <memset>
c0012a6f:	83 c4 0c             	add    esp,0xc
c0012a72:	53                   	push   ebx
c0012a73:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a77:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a7b:	e8 a1 ff ff ff       	call   c0012a21 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012a80:	83 c4 48             	add    esp,0x48
c0012a83:	5b                   	pop    ebx
c0012a84:	c3                   	ret    

c0012a85 <CmUpdateHeader(Reghive_Tag*)>:
c0012a85:	83 ec 0c             	sub    esp,0xc
c0012a88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a8c:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012a90:	74 10                	je     c0012aa2 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012a92:	52                   	push   edx
c0012a93:	8d 50 05             	lea    edx,[eax+0x5]
c0012a96:	52                   	push   edx
c0012a97:	6a 00                	push   0x0
c0012a99:	50                   	push   eax
c0012a9a:	e8 82 ff ff ff       	call   c0012a21 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012a9f:	83 c4 10             	add    esp,0x10
c0012aa2:	83 c4 0c             	add    esp,0xc
c0012aa5:	c3                   	ret    

c0012aa6 <CmExpand(Reghive_Tag*, int)>:
c0012aa6:	57                   	push   edi
c0012aa7:	56                   	push   esi
c0012aa8:	83 ce ff             	or     esi,0xffffffff
c0012aab:	53                   	push   ebx
c0012aac:	83 ec 30             	sub    esp,0x30
c0012aaf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012ab3:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012ab7:	74 5f                	je     c0012b18 <CmExpand(Reghive_Tag*, int)+0x72>
c0012ab9:	31 d2                	xor    edx,edx
c0012abb:	31 f6                	xor    esi,esi
c0012abd:	50                   	push   eax
c0012abe:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012ac2:	52                   	push   edx
c0012ac3:	50                   	push   eax
c0012ac4:	ff 33                	push   DWORD PTR [ebx]
c0012ac6:	e8 af 8e ff ff       	call   c000b97a <File::seek(unsigned long long)>
c0012acb:	83 c4 0c             	add    esp,0xc
c0012ace:	6a 2b                	push   0x2b
c0012ad0:	6a 00                	push   0x0
c0012ad2:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0012ad6:	57                   	push   edi
c0012ad7:	e8 14 da fe ff       	call   c00004f0 <memset>
c0012adc:	83 c4 10             	add    esp,0x10
c0012adf:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0012ae3:	7d 1b                	jge    c0012b00 <CmExpand(Reghive_Tag*, int)+0x5a>
c0012ae5:	83 ec 0c             	sub    esp,0xc
c0012ae8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012aea:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012aee:	8b 10                	mov    edx,DWORD PTR [eax]
c0012af0:	46                   	inc    esi
c0012af1:	51                   	push   ecx
c0012af2:	57                   	push   edi
c0012af3:	6a 00                	push   0x0
c0012af5:	6a 2b                	push   0x2b
c0012af7:	50                   	push   eax
c0012af8:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012afb:	83 c4 20             	add    esp,0x20
c0012afe:	eb df                	jmp    c0012adf <CmExpand(Reghive_Tag*, int)+0x39>
c0012b00:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012b04:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0012b07:	83 ec 0c             	sub    esp,0xc
c0012b0a:	01 f2                	add    edx,esi
c0012b0c:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0012b0f:	53                   	push   ebx
c0012b10:	e8 70 ff ff ff       	call   c0012a85 <CmUpdateHeader(Reghive_Tag*)>
c0012b15:	83 c4 10             	add    esp,0x10
c0012b18:	83 c4 30             	add    esp,0x30
c0012b1b:	89 f0                	mov    eax,esi
c0012b1d:	5b                   	pop    ebx
c0012b1e:	5e                   	pop    esi
c0012b1f:	5f                   	pop    edi
c0012b20:	c3                   	ret    

c0012b21 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012b21:	55                   	push   ebp
c0012b22:	57                   	push   edi
c0012b23:	56                   	push   esi
c0012b24:	53                   	push   ebx
c0012b25:	83 cb ff             	or     ebx,0xffffffff
c0012b28:	83 ec 1c             	sub    esp,0x1c
c0012b2b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012b2f:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012b33:	74 68                	je     c0012b9d <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012b35:	be 2b 00 00 00       	mov    esi,0x2b
c0012b3a:	51                   	push   ecx
c0012b3b:	31 ff                	xor    edi,edi
c0012b3d:	6a 00                	push   0x0
c0012b3f:	31 db                	xor    ebx,ebx
c0012b41:	6a 00                	push   0x0
c0012b43:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012b46:	e8 2f 8e ff ff       	call   c000b97a <File::seek(unsigned long long)>
c0012b4b:	83 c4 10             	add    esp,0x10
c0012b4e:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012b51:	76 3b                	jbe    c0012b8e <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012b53:	83 ec 0c             	sub    esp,0xc
c0012b56:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012b59:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012b5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b5f:	51                   	push   ecx
c0012b60:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012b64:	51                   	push   ecx
c0012b65:	6a 00                	push   0x0
c0012b67:	6a 01                	push   0x1
c0012b69:	50                   	push   eax
c0012b6a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012b6d:	83 c4 20             	add    esp,0x20
c0012b70:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012b75:	74 26                	je     c0012b9d <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012b77:	43                   	inc    ebx
c0012b78:	52                   	push   edx
c0012b79:	57                   	push   edi
c0012b7a:	56                   	push   esi
c0012b7b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012b7e:	e8 f7 8d ff ff       	call   c000b97a <File::seek(unsigned long long)>
c0012b83:	83 c6 2b             	add    esi,0x2b
c0012b86:	83 d7 00             	adc    edi,0x0
c0012b89:	83 c4 10             	add    esp,0x10
c0012b8c:	eb c0                	jmp    c0012b4e <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012b8e:	50                   	push   eax
c0012b8f:	50                   	push   eax
c0012b90:	6a 40                	push   0x40
c0012b92:	55                   	push   ebp
c0012b93:	e8 0e ff ff ff       	call   c0012aa6 <CmExpand(Reghive_Tag*, int)>
c0012b98:	83 c4 10             	add    esp,0x10
c0012b9b:	89 c3                	mov    ebx,eax
c0012b9d:	83 c4 1c             	add    esp,0x1c
c0012ba0:	89 d8                	mov    eax,ebx
c0012ba2:	5b                   	pop    ebx
c0012ba3:	5e                   	pop    esi
c0012ba4:	5f                   	pop    edi
c0012ba5:	5d                   	pop    ebp
c0012ba6:	c3                   	ret    

c0012ba7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012ba7:	55                   	push   ebp
c0012ba8:	57                   	push   edi
c0012ba9:	56                   	push   esi
c0012baa:	53                   	push   ebx
c0012bab:	81 ec 88 00 00 00    	sub    esp,0x88
c0012bb1:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012bb8:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012bbf:	e8 5d ff ff ff       	call   c0012b21 <CmFindUnusedExtent(Reghive_Tag*)>
c0012bc4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012bc8:	83 c4 0c             	add    esp,0xc
c0012bcb:	6a 2b                	push   0x2b
c0012bcd:	6a 00                	push   0x0
c0012bcf:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012bd3:	55                   	push   ebp
c0012bd4:	e8 17 d9 fe ff       	call   c00004f0 <memset>
c0012bd9:	83 c4 10             	add    esp,0x10
c0012bdc:	85 db                	test   ebx,ebx
c0012bde:	74 12                	je     c0012bf2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012be0:	51                   	push   ecx
c0012be1:	55                   	push   ebp
c0012be2:	53                   	push   ebx
c0012be3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012bea:	e8 0e fd ff ff       	call   c00128fd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012bef:	83 c4 10             	add    esp,0x10
c0012bf2:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012bf6:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012bfd:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012c02:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012c04:	85 db                	test   ebx,ebx
c0012c06:	74 49                	je     c0012c51 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012c08:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012c0d:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012c12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012c16:	c1 e0 08             	shl    eax,0x8
c0012c19:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012c1f:	09 c8                	or     eax,ecx
c0012c21:	74 11                	je     c0012c34 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012c23:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012c27:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012c2b:	c1 e8 10             	shr    eax,0x10
c0012c2e:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012c32:	eb 0f                	jmp    c0012c43 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012c34:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012c39:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012c3e:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012c43:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012c47:	c1 ea 08             	shr    edx,0x8
c0012c4a:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012c4f:	eb 0f                	jmp    c0012c60 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012c51:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012c56:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012c5b:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012c60:	52                   	push   edx
c0012c61:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012c65:	50                   	push   eax
c0012c66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c6a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c71:	e8 ab fd ff ff       	call   c0012a21 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012c76:	83 c4 10             	add    esp,0x10
c0012c79:	85 db                	test   ebx,ebx
c0012c7b:	74 12                	je     c0012c8f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012c7d:	50                   	push   eax
c0012c7e:	55                   	push   ebp
c0012c7f:	53                   	push   ebx
c0012c80:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c87:	e8 95 fd ff ff       	call   c0012a21 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012c8c:	83 c4 10             	add    esp,0x10
c0012c8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012c93:	83 c4 7c             	add    esp,0x7c
c0012c96:	5b                   	pop    ebx
c0012c97:	5e                   	pop    esi
c0012c98:	5f                   	pop    edi
c0012c99:	5d                   	pop    ebp
c0012c9a:	c3                   	ret    

c0012c9b <CmSetString(Reghive_Tag*, int, char const*)>:
c0012c9b:	55                   	push   ebp
c0012c9c:	57                   	push   edi
c0012c9d:	56                   	push   esi
c0012c9e:	53                   	push   ebx
c0012c9f:	bb 27 00 00 00       	mov    ebx,0x27
c0012ca4:	81 ec 88 00 00 00    	sub    esp,0x88
c0012caa:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012cb1:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012cb8:	e8 b3 d8 fe ff       	call   c0000570 <strlen>
c0012cbd:	8d 48 26             	lea    ecx,[eax+0x26]
c0012cc0:	89 c8                	mov    eax,ecx
c0012cc2:	99                   	cdq    
c0012cc3:	f7 fb                	idiv   ebx
c0012cc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012cc9:	83 c4 10             	add    esp,0x10
c0012ccc:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012cd2:	7e 10                	jle    c0012ce4 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012cd4:	83 ec 0c             	sub    esp,0xc
c0012cd7:	68 24 20 02 c0       	push   0xc0022024
c0012cdc:	e8 64 e6 ff ff       	call   c0011345 <KePanic(char const*)>
c0012ce1:	83 c4 10             	add    esp,0x10
c0012ce4:	31 ff                	xor    edi,edi
c0012ce6:	50                   	push   eax
c0012ce7:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012ceb:	53                   	push   ebx
c0012cec:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012cf3:	56                   	push   esi
c0012cf4:	e8 04 fc ff ff       	call   c00128fd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012cf9:	83 c4 10             	add    esp,0x10
c0012cfc:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0012d00:	89 d0                	mov    eax,edx
c0012d02:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0012d06:	c1 e0 08             	shl    eax,0x8
c0012d09:	09 c2                	or     edx,eax
c0012d0b:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012d0f:	c1 e2 08             	shl    edx,0x8
c0012d12:	09 c2                	or     edx,eax
c0012d14:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0012d18:	7e 76                	jle    c0012d90 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0012d1a:	85 d2                	test   edx,edx
c0012d1c:	75 25                	jne    c0012d43 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012d1e:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012d23:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012d27:	50                   	push   eax
c0012d28:	6a 00                	push   0x0
c0012d2a:	6a 00                	push   0x0
c0012d2c:	56                   	push   esi
c0012d2d:	e8 75 fe ff ff       	call   c0012ba7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012d32:	83 c4 10             	add    esp,0x10
c0012d35:	89 c2                	mov    edx,eax
c0012d37:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012d3a:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012d3d:	c1 f8 10             	sar    eax,0x10
c0012d40:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012d43:	55                   	push   ebp
c0012d44:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0012d48:	55                   	push   ebp
c0012d49:	52                   	push   edx
c0012d4a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012d4e:	56                   	push   esi
c0012d4f:	e8 a9 fb ff ff       	call   c00128fd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d54:	83 c4 0c             	add    esp,0xc
c0012d57:	6a 27                	push   0x27
c0012d59:	6a 00                	push   0x0
c0012d5b:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012d5f:	51                   	push   ecx
c0012d60:	e8 8b d7 fe ff       	call   c00004f0 <memset>
c0012d65:	83 c4 0c             	add    esp,0xc
c0012d68:	6b c7 27             	imul   eax,edi,0x27
c0012d6b:	6a 27                	push   0x27
c0012d6d:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012d74:	50                   	push   eax
c0012d75:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012d79:	51                   	push   ecx
c0012d7a:	e8 01 d9 fe ff       	call   c0000680 <strncpy>
c0012d7f:	83 c4 0c             	add    esp,0xc
c0012d82:	55                   	push   ebp
c0012d83:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012d87:	52                   	push   edx
c0012d88:	56                   	push   esi
c0012d89:	e8 93 fc ff ff       	call   c0012a21 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012d8e:	eb 19                	jmp    c0012da9 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0012d90:	85 d2                	test   edx,edx
c0012d92:	74 18                	je     c0012dac <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0012d94:	51                   	push   ecx
c0012d95:	51                   	push   ecx
c0012d96:	52                   	push   edx
c0012d97:	56                   	push   esi
c0012d98:	e8 c0 fc ff ff       	call   c0012a5d <CmFreeExtent(Reghive_Tag*, int)>
c0012d9d:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012da1:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012da5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012da9:	83 c4 10             	add    esp,0x10
c0012dac:	47                   	inc    edi
c0012dad:	83 c3 03             	add    ebx,0x3
c0012db0:	83 ff 07             	cmp    edi,0x7
c0012db3:	0f 85 43 ff ff ff    	jne    c0012cfc <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012db9:	50                   	push   eax
c0012dba:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012dbe:	50                   	push   eax
c0012dbf:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012dc6:	56                   	push   esi
c0012dc7:	e8 55 fc ff ff       	call   c0012a21 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012dcc:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012dd2:	5b                   	pop    ebx
c0012dd3:	5e                   	pop    esi
c0012dd4:	5f                   	pop    edi
c0012dd5:	5d                   	pop    ebp
c0012dd6:	c3                   	ret    

c0012dd7 <CmGetMatch(char*, char*, bool, bool*)>:
c0012dd7:	56                   	push   esi
c0012dd8:	53                   	push   ebx
c0012dd9:	50                   	push   eax
c0012dda:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012dde:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012de3:	74 25                	je     c0012e0a <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012de5:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012de8:	31 db                	xor    ebx,ebx
c0012dea:	50                   	push   eax
c0012deb:	50                   	push   eax
c0012dec:	8d 04 9d c0 34 02 c0 	lea    eax,[ebx*4-0x3ffdcb40]
c0012df3:	50                   	push   eax
c0012df4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012df8:	e8 53 d9 fe ff       	call   c0000750 <strcmp>
c0012dfd:	83 c4 10             	add    esp,0x10
c0012e00:	85 c0                	test   eax,eax
c0012e02:	74 2e                	je     c0012e32 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012e04:	43                   	inc    ebx
c0012e05:	83 fb 3f             	cmp    ebx,0x3f
c0012e08:	75 e0                	jne    c0012dea <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012e0a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e0d:	31 db                	xor    ebx,ebx
c0012e0f:	8d 04 9d c0 34 02 c0 	lea    eax,[ebx*4-0x3ffdcb40]
c0012e16:	51                   	push   ecx
c0012e17:	51                   	push   ecx
c0012e18:	50                   	push   eax
c0012e19:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012e1d:	e8 2e d9 fe ff       	call   c0000750 <strcmp>
c0012e22:	83 c4 10             	add    esp,0x10
c0012e25:	85 c0                	test   eax,eax
c0012e27:	74 09                	je     c0012e32 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012e29:	43                   	inc    ebx
c0012e2a:	83 fb 3f             	cmp    ebx,0x3f
c0012e2d:	75 e0                	jne    c0012e0f <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012e2f:	83 cb ff             	or     ebx,0xffffffff
c0012e32:	89 d8                	mov    eax,ebx
c0012e34:	5a                   	pop    edx
c0012e35:	5b                   	pop    ebx
c0012e36:	5e                   	pop    esi
c0012e37:	c3                   	ret    

c0012e38 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012e38:	55                   	push   ebp
c0012e39:	31 c0                	xor    eax,eax
c0012e3b:	57                   	push   edi
c0012e3c:	56                   	push   esi
c0012e3d:	53                   	push   ebx
c0012e3e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e42:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012e46:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012e48:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012e4c:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012e4f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012e53:	83 fd 1f             	cmp    ebp,0x1f
c0012e56:	7f 0b                	jg     c0012e63 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012e58:	0f b6 c2             	movzx  eax,dl
c0012e5b:	d3 e0                	shl    eax,cl
c0012e5d:	09 07                	or     DWORD PTR [edi],eax
c0012e5f:	b0 01                	mov    al,0x1
c0012e61:	01 33                	add    DWORD PTR [ebx],esi
c0012e63:	5b                   	pop    ebx
c0012e64:	5e                   	pop    esi
c0012e65:	5f                   	pop    edi
c0012e66:	5d                   	pop    ebp
c0012e67:	c3                   	ret    

c0012e68 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012e68:	57                   	push   edi
c0012e69:	56                   	push   esi
c0012e6a:	53                   	push   ebx
c0012e6b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012e6f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012e73:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012e77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012e7b:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012e7d:	7c 17                	jl     c0012e96 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012e7f:	8b 17                	mov    edx,DWORD PTR [edi]
c0012e81:	b8 01 00 00 00       	mov    eax,0x1
c0012e86:	d3 e0                	shl    eax,cl
c0012e88:	48                   	dec    eax
c0012e89:	21 d0                	and    eax,edx
c0012e8b:	d3 ea                	shr    edx,cl
c0012e8d:	89 17                	mov    DWORD PTR [edi],edx
c0012e8f:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012e91:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012e94:	eb 05                	jmp    c0012e9b <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012e96:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e99:	31 c0                	xor    eax,eax
c0012e9b:	5b                   	pop    ebx
c0012e9c:	5e                   	pop    esi
c0012e9d:	5f                   	pop    edi
c0012e9e:	c3                   	ret    

c0012e9f <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012e9f:	83 ec 40             	sub    esp,0x40
c0012ea2:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012ea6:	50                   	push   eax
c0012ea7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012eab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012eaf:	e8 49 fa ff ff       	call   c00128fd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012eb4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012eb8:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012ebc:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012ec0:	89 10                	mov    DWORD PTR [eax],edx
c0012ec2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012ec5:	83 c4 4c             	add    esp,0x4c
c0012ec8:	c3                   	ret    

c0012ec9 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012ec9:	55                   	push   ebp
c0012eca:	57                   	push   edi
c0012ecb:	56                   	push   esi
c0012ecc:	53                   	push   ebx
c0012ecd:	83 ec 40             	sub    esp,0x40
c0012ed0:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012ed4:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012ed8:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012edc:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012ee0:	53                   	push   ebx
c0012ee1:	56                   	push   esi
c0012ee2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012ee6:	e8 12 fa ff ff       	call   c00128fd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012eeb:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012eef:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012ef3:	83 c4 0c             	add    esp,0xc
c0012ef6:	53                   	push   ebx
c0012ef7:	56                   	push   esi
c0012ef8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012efc:	e8 20 fb ff ff       	call   c0012a21 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f01:	83 c4 4c             	add    esp,0x4c
c0012f04:	5b                   	pop    ebx
c0012f05:	5e                   	pop    esi
c0012f06:	5f                   	pop    edi
c0012f07:	5d                   	pop    ebp
c0012f08:	c3                   	ret    

c0012f09 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012f09:	55                   	push   ebp
c0012f0a:	57                   	push   edi
c0012f0b:	56                   	push   esi
c0012f0c:	31 f6                	xor    esi,esi
c0012f0e:	53                   	push   ebx
c0012f0f:	31 db                	xor    ebx,ebx
c0012f11:	83 ec 40             	sub    esp,0x40
c0012f14:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012f1c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012f24:	6a 12                	push   0x12
c0012f26:	68 ee 00 00 00       	push   0xee
c0012f2b:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012f2f:	e8 bc d5 fe ff       	call   c00004f0 <memset>
c0012f34:	83 c4 10             	add    esp,0x10
c0012f37:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012f3b:	6a 08                	push   0x8
c0012f3d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012f41:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012f45:	50                   	push   eax
c0012f46:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012f4a:	55                   	push   ebp
c0012f4b:	57                   	push   edi
c0012f4c:	e8 e7 fe ff ff       	call   c0012e38 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012f51:	83 c4 10             	add    esp,0x10
c0012f54:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012f58:	50                   	push   eax
c0012f59:	6a 06                	push   0x6
c0012f5b:	55                   	push   ebp
c0012f5c:	57                   	push   edi
c0012f5d:	e8 06 ff ff ff       	call   c0012e68 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012f62:	83 c4 10             	add    esp,0x10
c0012f65:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f6a:	74 07                	je     c0012f73 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012f6c:	46                   	inc    esi
c0012f6d:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012f71:	eb e1                	jmp    c0012f54 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012f73:	43                   	inc    ebx
c0012f74:	83 fb 12             	cmp    ebx,0x12
c0012f77:	75 c2                	jne    c0012f3b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012f79:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012f7d:	31 db                	xor    ebx,ebx
c0012f7f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012f82:	50                   	push   eax
c0012f83:	50                   	push   eax
c0012f84:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0012f89:	43                   	inc    ebx
c0012f8a:	8d 04 85 c0 34 02 c0 	lea    eax,[eax*4-0x3ffdcb40]
c0012f91:	50                   	push   eax
c0012f92:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012f96:	e8 a5 d8 fe ff       	call   c0000840 <strcat>
c0012f9b:	83 c4 10             	add    esp,0x10
c0012f9e:	83 fb 18             	cmp    ebx,0x18
c0012fa1:	75 df                	jne    c0012f82 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012fa3:	83 c4 3c             	add    esp,0x3c
c0012fa6:	31 c0                	xor    eax,eax
c0012fa8:	5b                   	pop    ebx
c0012fa9:	5e                   	pop    esi
c0012faa:	5f                   	pop    edi
c0012fab:	5d                   	pop    ebp
c0012fac:	c3                   	ret    

c0012fad <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012fad:	83 ec 40             	sub    esp,0x40
c0012fb0:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012fb4:	50                   	push   eax
c0012fb5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012fb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012fbd:	e8 3b f9 ff ff       	call   c00128fd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012fc2:	58                   	pop    eax
c0012fc3:	5a                   	pop    edx
c0012fc4:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012fc8:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012fcc:	50                   	push   eax
c0012fcd:	e8 37 ff ff ff       	call   c0012f09 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0012fd2:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012fd7:	83 c4 4c             	add    esp,0x4c
c0012fda:	c3                   	ret    

c0012fdb <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0012fdb:	55                   	push   ebp
c0012fdc:	57                   	push   edi
c0012fdd:	56                   	push   esi
c0012fde:	53                   	push   ebx
c0012fdf:	31 db                	xor    ebx,ebx
c0012fe1:	83 ec 70             	sub    esp,0x70
c0012fe4:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0012feb:	6a 30                	push   0x30
c0012fed:	6a 00                	push   0x0
c0012fef:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012ff3:	56                   	push   esi
c0012ff4:	e8 f7 d4 fe ff       	call   c00004f0 <memset>
c0012ff9:	83 c4 10             	add    esp,0x10
c0012ffc:	83 ec 0c             	sub    esp,0xc
c0012fff:	57                   	push   edi
c0013000:	e8 6b d5 fe ff       	call   c0000570 <strlen>
c0013005:	83 c4 10             	add    esp,0x10
c0013008:	39 d8                	cmp    eax,ebx
c001300a:	76 16                	jbe    c0013022 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c001300c:	83 ec 0c             	sub    esp,0xc
c001300f:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0013013:	50                   	push   eax
c0013014:	e8 17 d9 fe ff       	call   c0000930 <toupper>
c0013019:	83 c4 10             	add    esp,0x10
c001301c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001301f:	43                   	inc    ebx
c0013020:	eb da                	jmp    c0012ffc <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0013022:	31 f6                	xor    esi,esi
c0013024:	52                   	push   edx
c0013025:	31 ff                	xor    edi,edi
c0013027:	6a 18                	push   0x18
c0013029:	6a 3f                	push   0x3f
c001302b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001302f:	50                   	push   eax
c0013030:	e8 bb d4 fe ff       	call   c00004f0 <memset>
c0013035:	83 c4 10             	add    esp,0x10
c0013038:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c001303c:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0013040:	84 c0                	test   al,al
c0013042:	0f 84 b0 00 00 00    	je     c00130f8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0013048:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c001304c:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0013051:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013055:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c001305a:	8d 6e 01             	lea    ebp,[esi+0x1]
c001305d:	83 ec 0c             	sub    esp,0xc
c0013060:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0013064:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0013068:	53                   	push   ebx
c0013069:	e8 02 d5 fe ff       	call   c0000570 <strlen>
c001306e:	83 c4 10             	add    esp,0x10
c0013071:	85 c0                	test   eax,eax
c0013073:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013077:	74 0b                	je     c0013084 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0013079:	50                   	push   eax
c001307a:	6a 01                	push   0x1
c001307c:	53                   	push   ebx
c001307d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013081:	50                   	push   eax
c0013082:	eb 0a                	jmp    c001308e <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0013084:	50                   	push   eax
c0013085:	6a 00                	push   0x0
c0013087:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001308b:	50                   	push   eax
c001308c:	6a 00                	push   0x0
c001308e:	e8 44 fd ff ff       	call   c0012dd7 <CmGetMatch(char*, char*, bool, bool*)>
c0013093:	83 c4 10             	add    esp,0x10
c0013096:	83 f8 ff             	cmp    eax,0xffffffff
c0013099:	75 1a                	jne    c00130b5 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c001309b:	83 ec 0c             	sub    esp,0xc
c001309e:	68 39 20 02 c0       	push   0xc0022039
c00130a3:	e8 9d e2 ff ff       	call   c0011345 <KePanic(char const*)>
c00130a8:	83 c4 10             	add    esp,0x10
c00130ab:	b8 02 00 00 00       	mov    eax,0x2
c00130b0:	e9 bc 00 00 00       	jmp    c0013171 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00130b5:	83 ff 18             	cmp    edi,0x18
c00130b8:	75 1a                	jne    c00130d4 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00130ba:	83 ec 0c             	sub    esp,0xc
c00130bd:	68 4e 20 02 c0       	push   0xc002204e
c00130c2:	e8 7e e2 ff ff       	call   c0011345 <KePanic(char const*)>
c00130c7:	83 c4 10             	add    esp,0x10
c00130ca:	b8 01 00 00 00       	mov    eax,0x1
c00130cf:	e9 9d 00 00 00       	jmp    c0013171 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00130d4:	47                   	inc    edi
c00130d5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00130da:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00130de:	74 02                	je     c00130e2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c00130e0:	89 ee                	mov    esi,ebp
c00130e2:	83 ec 0c             	sub    esp,0xc
c00130e5:	53                   	push   ebx
c00130e6:	e8 85 d4 fe ff       	call   c0000570 <strlen>
c00130eb:	83 c4 10             	add    esp,0x10
c00130ee:	85 c0                	test   eax,eax
c00130f0:	74 06                	je     c00130f8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00130f2:	46                   	inc    esi
c00130f3:	e9 40 ff ff ff       	jmp    c0013038 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00130f8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013100:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013108:	31 f6                	xor    esi,esi
c001310a:	50                   	push   eax
c001310b:	31 ff                	xor    edi,edi
c001310d:	6a 12                	push   0x12
c001310f:	68 ee 00 00 00       	push   0xee
c0013114:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001311b:	e8 d0 d3 fe ff       	call   c00004f0 <memset>
c0013120:	83 c4 10             	add    esp,0x10
c0013123:	83 fe 17             	cmp    esi,0x17
c0013126:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c001312a:	7e 26                	jle    c0013152 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c001312c:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013130:	50                   	push   eax
c0013131:	6a 08                	push   0x8
c0013133:	55                   	push   ebp
c0013134:	53                   	push   ebx
c0013135:	e8 2e fd ff ff       	call   c0012e68 <CmGetShift(unsigned int*, int*, int, bool*)>
c001313a:	83 c4 10             	add    esp,0x10
c001313d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013142:	74 26                	je     c001316a <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0013144:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c001314b:	4e                   	dec    esi
c001314c:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c001314f:	47                   	inc    edi
c0013150:	eb 1c                	jmp    c001316e <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0013152:	6a 06                	push   0x6
c0013154:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0013159:	50                   	push   eax
c001315a:	55                   	push   ebp
c001315b:	53                   	push   ebx
c001315c:	e8 d7 fc ff ff       	call   c0012e38 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0013161:	83 c4 10             	add    esp,0x10
c0013164:	84 c0                	test   al,al
c0013166:	75 06                	jne    c001316e <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0013168:	eb c2                	jmp    c001312c <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c001316a:	31 c0                	xor    eax,eax
c001316c:	eb 03                	jmp    c0013171 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c001316e:	46                   	inc    esi
c001316f:	eb b2                	jmp    c0013123 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c0013171:	83 c4 6c             	add    esp,0x6c
c0013174:	5b                   	pop    ebx
c0013175:	5e                   	pop    esi
c0013176:	5f                   	pop    edi
c0013177:	5d                   	pop    ebp
c0013178:	c3                   	ret    

c0013179 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0013179:	53                   	push   ebx
c001317a:	83 ec 3c             	sub    esp,0x3c
c001317d:	6a 2b                	push   0x2b
c001317f:	6a 00                	push   0x0
c0013181:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013185:	53                   	push   ebx
c0013186:	e8 65 d3 fe ff       	call   c00004f0 <memset>
c001318b:	58                   	pop    eax
c001318c:	5a                   	pop    edx
c001318d:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013191:	50                   	push   eax
c0013192:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013196:	e8 40 fe ff ff       	call   c0012fdb <CmConvertToInternalFilename(char const*, unsigned char*)>
c001319b:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00131a0:	83 c4 0c             	add    esp,0xc
c00131a3:	6a 15                	push   0x15
c00131a5:	6a 00                	push   0x0
c00131a7:	8d 44 24 27          	lea    eax,[esp+0x27]
c00131ab:	50                   	push   eax
c00131ac:	e8 3f d3 fe ff       	call   c00004f0 <memset>
c00131b1:	53                   	push   ebx
c00131b2:	6a 00                	push   0x0
c00131b4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00131b8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00131bc:	e8 e6 f9 ff ff       	call   c0012ba7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00131c1:	83 c4 58             	add    esp,0x58
c00131c4:	5b                   	pop    ebx
c00131c5:	c3                   	ret    

c00131c6 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00131c6:	56                   	push   esi
c00131c7:	53                   	push   ebx
c00131c8:	83 ec 48             	sub    esp,0x48
c00131cb:	6a 12                	push   0x12
c00131cd:	68 ff 00 00 00       	push   0xff
c00131d2:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00131d6:	56                   	push   esi
c00131d7:	e8 14 d3 fe ff       	call   c00004f0 <memset>
c00131dc:	5a                   	pop    edx
c00131dd:	59                   	pop    ecx
c00131de:	56                   	push   esi
c00131df:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00131e3:	e8 f3 fd ff ff       	call   c0012fdb <CmConvertToInternalFilename(char const*, unsigned char*)>
c00131e8:	83 c4 10             	add    esp,0x10
c00131eb:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00131ef:	85 db                	test   ebx,ebx
c00131f1:	74 42                	je     c0013235 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00131f3:	50                   	push   eax
c00131f4:	8d 44 24 19          	lea    eax,[esp+0x19]
c00131f8:	50                   	push   eax
c00131f9:	53                   	push   ebx
c00131fa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00131fe:	e8 fa f6 ff ff       	call   c00128fd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013203:	83 c4 0c             	add    esp,0xc
c0013206:	6a 12                	push   0x12
c0013208:	8d 44 24 21          	lea    eax,[esp+0x21]
c001320c:	50                   	push   eax
c001320d:	56                   	push   esi
c001320e:	e8 6d d1 fe ff       	call   c0000380 <memcmp>
c0013213:	83 c4 10             	add    esp,0x10
c0013216:	85 c0                	test   eax,eax
c0013218:	74 1e                	je     c0013238 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c001321a:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001321f:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0013224:	c1 e3 08             	shl    ebx,0x8
c0013227:	09 d8                	or     eax,ebx
c0013229:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001322e:	c1 e3 10             	shl    ebx,0x10
c0013231:	09 c3                	or     ebx,eax
c0013233:	eb ba                	jmp    c00131ef <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0013235:	83 cb ff             	or     ebx,0xffffffff
c0013238:	89 d8                	mov    eax,ebx
c001323a:	83 c4 44             	add    esp,0x44
c001323d:	5b                   	pop    ebx
c001323e:	5e                   	pop    esi
c001323f:	c3                   	ret    

c0013240 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0013240:	57                   	push   edi
c0013241:	56                   	push   esi
c0013242:	53                   	push   ebx
c0013243:	83 ec 34             	sub    esp,0x34
c0013246:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001324a:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001324e:	6a 2b                	push   0x2b
c0013250:	6a 00                	push   0x0
c0013252:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013256:	53                   	push   ebx
c0013257:	e8 94 d2 fe ff       	call   c00004f0 <memset>
c001325c:	58                   	pop    eax
c001325d:	5a                   	pop    edx
c001325e:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013262:	50                   	push   eax
c0013263:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013267:	e8 6f fd ff ff       	call   c0012fdb <CmConvertToInternalFilename(char const*, unsigned char*)>
c001326c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0013270:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0013274:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0013278:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001327c:	53                   	push   ebx
c001327d:	6a 00                	push   0x0
c001327f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013283:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013287:	e8 1b f9 ff ff       	call   c0012ba7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001328c:	83 c4 50             	add    esp,0x50
c001328f:	5b                   	pop    ebx
c0013290:	5e                   	pop    esi
c0013291:	5f                   	pop    edi
c0013292:	c3                   	ret    

c0013293 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0013293:	55                   	push   ebp
c0013294:	57                   	push   edi
c0013295:	56                   	push   esi
c0013296:	53                   	push   ebx
c0013297:	83 ec 40             	sub    esp,0x40
c001329a:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c001329e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00132a2:	6a 2b                	push   0x2b
c00132a4:	6a 00                	push   0x0
c00132a6:	8d 74 24 11          	lea    esi,[esp+0x11]
c00132aa:	56                   	push   esi
c00132ab:	e8 40 d2 fe ff       	call   c00004f0 <memset>
c00132b0:	5f                   	pop    edi
c00132b1:	89 ef                	mov    edi,ebp
c00132b3:	58                   	pop    eax
c00132b4:	8d 44 24 11          	lea    eax,[esp+0x11]
c00132b8:	50                   	push   eax
c00132b9:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00132bd:	e8 19 fd ff ff       	call   c0012fdb <CmConvertToInternalFilename(char const*, unsigned char*)>
c00132c2:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00132c7:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00132cc:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00132d1:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00132d6:	83 c4 10             	add    esp,0x10
c00132d9:	85 ed                	test   ebp,ebp
c00132db:	74 14                	je     c00132f1 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00132dd:	51                   	push   ecx
c00132de:	51                   	push   ecx
c00132df:	57                   	push   edi
c00132e0:	53                   	push   ebx
c00132e1:	e8 09 f7 ff ff       	call   c00129ef <CmGetNext(Reghive_Tag*, int)>
c00132e6:	83 c4 10             	add    esp,0x10
c00132e9:	85 c0                	test   eax,eax
c00132eb:	74 04                	je     c00132f1 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00132ed:	89 c7                	mov    edi,eax
c00132ef:	eb e8                	jmp    c00132d9 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00132f1:	56                   	push   esi
c00132f2:	6a 00                	push   0x0
c00132f4:	57                   	push   edi
c00132f5:	53                   	push   ebx
c00132f6:	e8 ac f8 ff ff       	call   c0012ba7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00132fb:	83 c4 0c             	add    esp,0xc
c00132fe:	89 c7                	mov    edi,eax
c0013300:	56                   	push   esi
c0013301:	50                   	push   eax
c0013302:	53                   	push   ebx
c0013303:	e8 f5 f5 ff ff       	call   c00128fd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013308:	58                   	pop    eax
c0013309:	5a                   	pop    edx
c001330a:	6a 6c                	push   0x6c
c001330c:	6a 00                	push   0x0
c001330e:	6a 00                	push   0x0
c0013310:	68 5f 20 02 c0       	push   0xc002205f
c0013315:	57                   	push   edi
c0013316:	53                   	push   ebx
c0013317:	e8 24 ff ff ff       	call   c0013240 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c001331c:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0013320:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0013324:	c1 e8 10             	shr    eax,0x10
c0013327:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001332b:	83 c4 1c             	add    esp,0x1c
c001332e:	56                   	push   esi
c001332f:	57                   	push   edi
c0013330:	53                   	push   ebx
c0013331:	e8 eb f6 ff ff       	call   c0012a21 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013336:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c001333b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0013340:	c1 e0 08             	shl    eax,0x8
c0013343:	09 c2                	or     edx,eax
c0013345:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001334a:	83 c4 4c             	add    esp,0x4c
c001334d:	c1 e0 10             	shl    eax,0x10
c0013350:	5b                   	pop    ebx
c0013351:	09 d0                	or     eax,edx
c0013353:	5e                   	pop    esi
c0013354:	5f                   	pop    edi
c0013355:	5d                   	pop    ebp
c0013356:	c3                   	ret    

c0013357 <zStrtok(char*, char const*)>:
c0013357:	55                   	push   ebp
c0013358:	57                   	push   edi
c0013359:	56                   	push   esi
c001335a:	53                   	push   ebx
c001335b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001335f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013363:	85 db                	test   ebx,ebx
c0013365:	74 2f                	je     c0013396 <zStrtok(char*, char const*)+0x3f>
c0013367:	85 c0                	test   eax,eax
c0013369:	75 09                	jne    c0013374 <zStrtok(char*, char const*)+0x1d>
c001336b:	a1 f0 8e 02 c0       	mov    eax,ds:0xc0028ef0
c0013370:	85 c0                	test   eax,eax
c0013372:	74 50                	je     c00133c4 <zStrtok(char*, char const*)+0x6d>
c0013374:	31 c9                	xor    ecx,ecx
c0013376:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c001337a:	74 03                	je     c001337f <zStrtok(char*, char const*)+0x28>
c001337c:	41                   	inc    ecx
c001337d:	eb f7                	jmp    c0013376 <zStrtok(char*, char const*)+0x1f>
c001337f:	31 d2                	xor    edx,edx
c0013381:	39 ca                	cmp    edx,ecx
c0013383:	74 15                	je     c001339a <zStrtok(char*, char const*)+0x43>
c0013385:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0013389:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c001338c:	8d 3c 10             	lea    edi,[eax+edx*1]
c001338f:	39 ee                	cmp    esi,ebp
c0013391:	74 13                	je     c00133a6 <zStrtok(char*, char const*)+0x4f>
c0013393:	42                   	inc    edx
c0013394:	eb eb                	jmp    c0013381 <zStrtok(char*, char const*)+0x2a>
c0013396:	31 c0                	xor    eax,eax
c0013398:	eb 2a                	jmp    c00133c4 <zStrtok(char*, char const*)+0x6d>
c001339a:	c7 05 f0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ef0,0x0
c00133a4:	eb 1e                	jmp    c00133c4 <zStrtok(char*, char const*)+0x6d>
c00133a6:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00133a9:	39 ce                	cmp    esi,ecx
c00133ab:	75 0a                	jne    c00133b7 <zStrtok(char*, char const*)+0x60>
c00133ad:	40                   	inc    eax
c00133ae:	a3 f0 8e 02 c0       	mov    ds:0xc0028ef0,eax
c00133b3:	89 d8                	mov    eax,ebx
c00133b5:	eb 0d                	jmp    c00133c4 <zStrtok(char*, char const*)+0x6d>
c00133b7:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00133bb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00133be:	89 15 f0 8e 02 c0    	mov    DWORD PTR ds:0xc0028ef0,edx
c00133c4:	5b                   	pop    ebx
c00133c5:	5e                   	pop    esi
c00133c6:	5f                   	pop    edi
c00133c7:	5d                   	pop    ebp
c00133c8:	c3                   	ret    

c00133c9 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00133c9:	57                   	push   edi
c00133ca:	56                   	push   esi
c00133cb:	53                   	push   ebx
c00133cc:	81 ec 08 01 00 00    	sub    esp,0x108
c00133d2:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00133d9:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00133e0:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00133e4:	53                   	push   ebx
c00133e5:	e8 56 d2 fe ff       	call   c0000640 <strcpy>
c00133ea:	59                   	pop    ecx
c00133eb:	5e                   	pop    esi
c00133ec:	68 c3 23 02 c0       	push   0xc00223c3
c00133f1:	53                   	push   ebx
c00133f2:	bb 01 00 00 00       	mov    ebx,0x1
c00133f7:	e8 5b ff ff ff       	call   c0013357 <zStrtok(char*, char const*)>
c00133fc:	83 c4 10             	add    esp,0x10
c00133ff:	85 c0                	test   eax,eax
c0013401:	74 3b                	je     c001343e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013403:	52                   	push   edx
c0013404:	50                   	push   eax
c0013405:	6a 01                	push   0x1
c0013407:	57                   	push   edi
c0013408:	e8 b9 fd ff ff       	call   c00131c6 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c001340d:	59                   	pop    ecx
c001340e:	89 c3                	mov    ebx,eax
c0013410:	5e                   	pop    esi
c0013411:	68 c3 23 02 c0       	push   0xc00223c3
c0013416:	6a 00                	push   0x0
c0013418:	e8 3a ff ff ff       	call   c0013357 <zStrtok(char*, char const*)>
c001341d:	83 c4 10             	add    esp,0x10
c0013420:	89 c6                	mov    esi,eax
c0013422:	85 c0                	test   eax,eax
c0013424:	74 18                	je     c001343e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013426:	52                   	push   edx
c0013427:	52                   	push   edx
c0013428:	53                   	push   ebx
c0013429:	57                   	push   edi
c001342a:	e8 81 f5 ff ff       	call   c00129b0 <CmEnterDirectory(Reghive_Tag*, int)>
c001342f:	83 c4 10             	add    esp,0x10
c0013432:	89 c3                	mov    ebx,eax
c0013434:	83 f8 ff             	cmp    eax,0xffffffff
c0013437:	74 05                	je     c001343e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013439:	50                   	push   eax
c001343a:	56                   	push   esi
c001343b:	53                   	push   ebx
c001343c:	eb c9                	jmp    c0013407 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c001343e:	81 c4 00 01 00 00    	add    esp,0x100
c0013444:	89 d8                	mov    eax,ebx
c0013446:	5b                   	pop    ebx
c0013447:	5e                   	pop    esi
c0013448:	5f                   	pop    edi
c0013449:	c3                   	ret    

c001344a <CmDisplayTree(Reghive_Tag*, int, int)>:
c001344a:	55                   	push   ebp
c001344b:	57                   	push   edi
c001344c:	56                   	push   esi
c001344d:	53                   	push   ebx
c001344e:	83 ec 5c             	sub    esp,0x5c
c0013451:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0013455:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0013459:	85 db                	test   ebx,ebx
c001345b:	0f 8e 84 00 00 00    	jle    c00134e5 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0013461:	31 ed                	xor    ebp,ebp
c0013463:	57                   	push   edi
c0013464:	6a 32                	push   0x32
c0013466:	6a 00                	push   0x0
c0013468:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c001346c:	57                   	push   edi
c001346d:	e8 7e d0 fe ff       	call   c00004f0 <memset>
c0013472:	83 c4 0c             	add    esp,0xc
c0013475:	57                   	push   edi
c0013476:	53                   	push   ebx
c0013477:	56                   	push   esi
c0013478:	e8 30 fb ff ff       	call   c0012fad <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001347d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013481:	83 c4 10             	add    esp,0x10
c0013484:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0013488:	7d 13                	jge    c001349d <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c001348a:	83 ec 0c             	sub    esp,0xc
c001348d:	45                   	inc    ebp
c001348e:	68 67 27 02 c0       	push   0xc0022767
c0013493:	e8 ad 74 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013498:	83 c4 10             	add    esp,0x10
c001349b:	eb e7                	jmp    c0013484 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c001349d:	51                   	push   ecx
c001349e:	57                   	push   edi
c001349f:	53                   	push   ebx
c00134a0:	68 65 20 02 c0       	push   0xc0022065
c00134a5:	e8 9b 74 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00134aa:	83 c4 10             	add    esp,0x10
c00134ad:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00134b2:	75 1e                	jne    c00134d2 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00134b4:	52                   	push   edx
c00134b5:	52                   	push   edx
c00134b6:	53                   	push   ebx
c00134b7:	56                   	push   esi
c00134b8:	e8 f3 f4 ff ff       	call   c00129b0 <CmEnterDirectory(Reghive_Tag*, int)>
c00134bd:	83 c4 0c             	add    esp,0xc
c00134c0:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00134c4:	8d 51 04             	lea    edx,[ecx+0x4]
c00134c7:	52                   	push   edx
c00134c8:	50                   	push   eax
c00134c9:	56                   	push   esi
c00134ca:	e8 7b ff ff ff       	call   c001344a <CmDisplayTree(Reghive_Tag*, int, int)>
c00134cf:	83 c4 10             	add    esp,0x10
c00134d2:	50                   	push   eax
c00134d3:	50                   	push   eax
c00134d4:	53                   	push   ebx
c00134d5:	56                   	push   esi
c00134d6:	e8 14 f5 ff ff       	call   c00129ef <CmGetNext(Reghive_Tag*, int)>
c00134db:	83 c4 10             	add    esp,0x10
c00134de:	89 c3                	mov    ebx,eax
c00134e0:	e9 74 ff ff ff       	jmp    c0013459 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00134e5:	83 c4 5c             	add    esp,0x5c
c00134e8:	5b                   	pop    ebx
c00134e9:	5e                   	pop    esi
c00134ea:	5f                   	pop    edi
c00134eb:	5d                   	pop    ebp
c00134ec:	c3                   	ret    

c00134ed <CmSplitFinalSlashInPlace(char*)>:
c00134ed:	53                   	push   ebx
c00134ee:	83 ec 14             	sub    esp,0x14
c00134f1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00134f5:	53                   	push   ebx
c00134f6:	e8 75 d0 fe ff       	call   c0000570 <strlen>
c00134fb:	83 c4 10             	add    esp,0x10
c00134fe:	48                   	dec    eax
c00134ff:	85 c0                	test   eax,eax
c0013501:	74 15                	je     c0013518 <CmSplitFinalSlashInPlace(char*)+0x2b>
c0013503:	8d 14 03             	lea    edx,[ebx+eax*1]
c0013506:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001350a:	75 09                	jne    c0013515 <CmSplitFinalSlashInPlace(char*)+0x28>
c001350c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c001350f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0013513:	eb 05                	jmp    c001351a <CmSplitFinalSlashInPlace(char*)+0x2d>
c0013515:	48                   	dec    eax
c0013516:	eb e7                	jmp    c00134ff <CmSplitFinalSlashInPlace(char*)+0x12>
c0013518:	31 c0                	xor    eax,eax
c001351a:	83 c4 08             	add    esp,0x8
c001351d:	5b                   	pop    ebx
c001351e:	c3                   	ret    

c001351f <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001351f:	55                   	push   ebp
c0013520:	57                   	push   edi
c0013521:	56                   	push   esi
c0013522:	53                   	push   ebx
c0013523:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013529:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0013530:	8a 13                	mov    dl,BYTE PTR [ebx]
c0013532:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013535:	80 fa 40             	cmp    dl,0x40
c0013538:	75 1c                	jne    c0013556 <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c001353a:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c001353d:	85 c9                	test   ecx,ecx
c001353f:	0f 84 09 01 00 00    	je     c001364e <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013545:	8d 43 01             	lea    eax,[ebx+0x1]
c0013548:	83 f9 3a             	cmp    ecx,0x3a
c001354b:	74 04                	je     c0013551 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c001354d:	89 c3                	mov    ebx,eax
c001354f:	eb e9                	jmp    c001353a <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0013551:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013554:	89 c3                	mov    ebx,eax
c0013556:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001355a:	50                   	push   eax
c001355b:	6a 40                	push   0x40
c001355d:	6a 00                	push   0x0
c001355f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013563:	50                   	push   eax
c0013564:	e8 87 cf fe ff       	call   c00004f0 <memset>
c0013569:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0013570:	31 c0                	xor    eax,eax
c0013572:	83 c4 10             	add    esp,0x10
c0013575:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c001357a:	0f be 17             	movsx  edx,BYTE PTR [edi]
c001357d:	89 d1                	mov    ecx,edx
c001357f:	85 d2                	test   edx,edx
c0013581:	0f 84 c7 00 00 00    	je     c001364e <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013587:	3d c7 00 00 00       	cmp    eax,0xc7
c001358c:	0f 8f bc 00 00 00    	jg     c001364e <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013592:	83 fa 0a             	cmp    edx,0xa
c0013595:	0f 85 a4 00 00 00    	jne    c001363f <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c001359b:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00135a0:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c00135a5:	89 c8                	mov    eax,ecx
c00135a7:	a8 df                	test   al,0xdf
c00135a9:	0f 94 c2             	sete   dl
c00135ac:	83 f9 23             	cmp    ecx,0x23
c00135af:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c00135b4:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c00135b8:	80 e2 01             	and    dl,0x1
c00135bb:	75 4a                	jne    c0013607 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00135bd:	83 e8 09             	sub    eax,0x9
c00135c0:	3c 01                	cmp    al,0x1
c00135c2:	76 43                	jbe    c0013607 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00135c4:	83 f9 5b             	cmp    ecx,0x5b
c00135c7:	75 42                	jne    c001360b <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c00135c9:	83 fe 40             	cmp    esi,0x40
c00135cc:	75 39                	jne    c0013607 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00135ce:	83 ec 0c             	sub    esp,0xc
c00135d1:	8d 54 24 65          	lea    edx,[esp+0x65]
c00135d5:	52                   	push   edx
c00135d6:	e8 95 cf fe ff       	call   c0000570 <strlen>
c00135db:	83 c4 10             	add    esp,0x10
c00135de:	83 f8 3f             	cmp    eax,0x3f
c00135e1:	77 6b                	ja     c001364e <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00135e3:	50                   	push   eax
c00135e4:	50                   	push   eax
c00135e5:	8d 54 24 61          	lea    edx,[esp+0x61]
c00135e9:	52                   	push   edx
c00135ea:	8d 54 24 24          	lea    edx,[esp+0x24]
c00135ee:	52                   	push   edx
c00135ef:	e8 4c d0 fe ff       	call   c0000640 <strcpy>
c00135f4:	58                   	pop    eax
c00135f5:	8d 54 24 24          	lea    edx,[esp+0x24]
c00135f9:	52                   	push   edx
c00135fa:	e8 71 cf fe ff       	call   c0000570 <strlen>
c00135ff:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013604:	83 c4 10             	add    esp,0x10
c0013607:	31 d2                	xor    edx,edx
c0013609:	eb 3b                	jmp    c0013646 <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c001360b:	83 fe 40             	cmp    esi,0x40
c001360e:	74 06                	je     c0013616 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0013610:	8d 44 24 58          	lea    eax,[esp+0x58]
c0013614:	eb 20                	jmp    c0013636 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0013616:	50                   	push   eax
c0013617:	50                   	push   eax
c0013618:	55                   	push   ebp
c0013619:	8d 44 24 24          	lea    eax,[esp+0x24]
c001361d:	50                   	push   eax
c001361e:	e8 2d d1 fe ff       	call   c0000750 <strcmp>
c0013623:	83 c4 10             	add    esp,0x10
c0013626:	85 c0                	test   eax,eax
c0013628:	75 dd                	jne    c0013607 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c001362a:	eb e4                	jmp    c0013610 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c001362c:	8d 50 01             	lea    edx,[eax+0x1]
c001362f:	83 f9 3d             	cmp    ecx,0x3d
c0013632:	74 1e                	je     c0013652 <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0013634:	89 d0                	mov    eax,edx
c0013636:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013639:	85 c9                	test   ecx,ecx
c001363b:	75 ef                	jne    c001362c <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c001363d:	eb 0f                	jmp    c001364e <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c001363f:	8d 50 01             	lea    edx,[eax+0x1]
c0013642:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013646:	47                   	inc    edi
c0013647:	89 d0                	mov    eax,edx
c0013649:	e9 2c ff ff ff       	jmp    c001357a <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c001364e:	31 c0                	xor    eax,eax
c0013650:	eb 33                	jmp    c0013685 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0013652:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013656:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013659:	50                   	push   eax
c001365a:	50                   	push   eax
c001365b:	8d 44 24 60          	lea    eax,[esp+0x60]
c001365f:	50                   	push   eax
c0013660:	53                   	push   ebx
c0013661:	e8 ea d0 fe ff       	call   c0000750 <strcmp>
c0013666:	83 c4 10             	add    esp,0x10
c0013669:	85 c0                	test   eax,eax
c001366b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001366f:	75 96                	jne    c0013607 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013671:	51                   	push   ecx
c0013672:	51                   	push   ecx
c0013673:	52                   	push   edx
c0013674:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001367b:	e8 c0 cf fe ff       	call   c0000640 <strcpy>
c0013680:	83 c4 10             	add    esp,0x10
c0013683:	b0 01                	mov    al,0x1
c0013685:	81 c4 2c 01 00 00    	add    esp,0x12c
c001368b:	5b                   	pop    ebx
c001368c:	5e                   	pop    esi
c001368d:	5f                   	pop    edi
c001368e:	5d                   	pop    ebp
c001368f:	c3                   	ret    

c0013690 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013690:	57                   	push   edi
c0013691:	56                   	push   esi
c0013692:	53                   	push   ebx
c0013693:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013699:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00136a0:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00136a7:	53                   	push   ebx
c00136a8:	e8 c3 ce fe ff       	call   c0000570 <strlen>
c00136ad:	89 34 24             	mov    DWORD PTR [esp],esi
c00136b0:	89 c7                	mov    edi,eax
c00136b2:	e8 b9 ce fe ff       	call   c0000570 <strlen>
c00136b7:	83 c4 10             	add    esp,0x10
c00136ba:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00136be:	3d ff 00 00 00       	cmp    eax,0xff
c00136c3:	0f 87 d3 00 00 00    	ja     c001379c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00136c9:	57                   	push   edi
c00136ca:	57                   	push   edi
c00136cb:	56                   	push   esi
c00136cc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00136d0:	56                   	push   esi
c00136d1:	e8 6a cf fe ff       	call   c0000640 <strcpy>
c00136d6:	58                   	pop    eax
c00136d7:	5a                   	pop    edx
c00136d8:	68 c3 23 02 c0       	push   0xc00223c3
c00136dd:	56                   	push   esi
c00136de:	e8 5d d1 fe ff       	call   c0000840 <strcat>
c00136e3:	59                   	pop    ecx
c00136e4:	5f                   	pop    edi
c00136e5:	53                   	push   ebx
c00136e6:	56                   	push   esi
c00136e7:	e8 54 d1 fe ff       	call   c0000840 <strcat>
c00136ec:	58                   	pop    eax
c00136ed:	5a                   	pop    edx
c00136ee:	68 6f 20 02 c0       	push   0xc002206f
c00136f3:	56                   	push   esi
c00136f4:	e8 47 d1 fe ff       	call   c0000840 <strcat>
c00136f9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013700:	e8 b1 43 ff ff       	call   c0007ab6 <malloc>
c0013705:	83 c4 0c             	add    esp,0xc
c0013708:	89 c3                	mov    ebx,eax
c001370a:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0013710:	56                   	push   esi
c0013711:	50                   	push   eax
c0013712:	e8 dd 80 ff ff       	call   c000b7f4 <File::File(char const*, Process*)>
c0013717:	83 c4 10             	add    esp,0x10
c001371a:	85 db                	test   ebx,ebx
c001371c:	74 7e                	je     c001379c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001371e:	51                   	push   ecx
c001371f:	51                   	push   ecx
c0013720:	6a 01                	push   0x1
c0013722:	53                   	push   ebx
c0013723:	e8 94 81 ff ff       	call   c000b8bc <File::open(FileOpenMode)>
c0013728:	83 c4 10             	add    esp,0x10
c001372b:	85 c0                	test   eax,eax
c001372d:	74 08                	je     c0013737 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001372f:	83 ec 0c             	sub    esp,0xc
c0013732:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013734:	53                   	push   ebx
c0013735:	eb 5f                	jmp    c0013796 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013737:	52                   	push   edx
c0013738:	8d 44 24 17          	lea    eax,[esp+0x17]
c001373c:	50                   	push   eax
c001373d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013741:	50                   	push   eax
c0013742:	53                   	push   ebx
c0013743:	e8 76 84 ff ff       	call   c000bbbe <File::stat(unsigned long long*, bool*)>
c0013748:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001374c:	83 c4 10             	add    esp,0x10
c001374f:	89 c1                	mov    ecx,eax
c0013751:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013755:	74 31                	je     c0013788 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013757:	83 ec 0c             	sub    esp,0xc
c001375a:	50                   	push   eax
c001375b:	e8 56 43 ff ff       	call   c0007ab6 <malloc>
c0013760:	89 c6                	mov    esi,eax
c0013762:	58                   	pop    eax
c0013763:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013765:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013769:	52                   	push   edx
c001376a:	56                   	push   esi
c001376b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001376f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013773:	53                   	push   ebx
c0013774:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013777:	83 c4 20             	add    esp,0x20
c001377a:	85 c0                	test   eax,eax
c001377c:	75 0a                	jne    c0013788 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001377e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013782:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013786:	74 18                	je     c00137a0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013788:	83 ec 0c             	sub    esp,0xc
c001378b:	53                   	push   ebx
c001378c:	e8 89 81 ff ff       	call   c000b91a <File::close()>
c0013791:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013793:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013796:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013799:	83 c4 10             	add    esp,0x10
c001379c:	31 c0                	xor    eax,eax
c001379e:	eb 3b                	jmp    c00137db <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00137a0:	83 ec 0c             	sub    esp,0xc
c00137a3:	53                   	push   ebx
c00137a4:	e8 71 81 ff ff       	call   c000b91a <File::close()>
c00137a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00137ae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137b1:	83 c4 0c             	add    esp,0xc
c00137b4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00137bb:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00137c2:	56                   	push   esi
c00137c3:	e8 57 fd ff ff       	call   c001351f <Reg::findLineFromLoadedData(char*, char*, char*)>
c00137c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00137cb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00137cf:	e8 f2 42 ff ff       	call   c0007ac6 <free>
c00137d4:	83 c4 10             	add    esp,0x10
c00137d7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00137db:	81 c4 20 01 00 00    	add    esp,0x120
c00137e1:	5b                   	pop    ebx
c00137e2:	5e                   	pop    esi
c00137e3:	5f                   	pop    edi
c00137e4:	c3                   	ret    

c00137e5 <Reg::getLine(char*, char*, char*)>:
c00137e5:	57                   	push   edi
c00137e6:	56                   	push   esi
c00137e7:	53                   	push   ebx
c00137e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00137ec:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00137f0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00137f4:	57                   	push   edi
c00137f5:	56                   	push   esi
c00137f6:	53                   	push   ebx
c00137f7:	68 74 20 02 c0       	push   0xc0022074
c00137fc:	e8 8f fe ff ff       	call   c0013690 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013801:	83 c4 10             	add    esp,0x10
c0013804:	84 c0                	test   al,al
c0013806:	75 10                	jne    c0013818 <Reg::getLine(char*, char*, char*)+0x33>
c0013808:	57                   	push   edi
c0013809:	56                   	push   esi
c001380a:	53                   	push   ebx
c001380b:	68 99 20 02 c0       	push   0xc0022099
c0013810:	e8 7b fe ff ff       	call   c0013690 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013815:	83 c4 10             	add    esp,0x10
c0013818:	5b                   	pop    ebx
c0013819:	5e                   	pop    esi
c001381a:	5f                   	pop    edi
c001381b:	c3                   	ret    

c001381c <Reg::readInt(char*, char*, int*)>:
c001381c:	55                   	push   ebp
c001381d:	57                   	push   edi
c001381e:	56                   	push   esi
c001381f:	53                   	push   ebx
c0013820:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013826:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001382a:	55                   	push   ebp
c001382b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013832:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013839:	e8 a7 ff ff ff       	call   c00137e5 <Reg::getLine(char*, char*, char*)>
c001383e:	83 c4 10             	add    esp,0x10
c0013841:	84 c0                	test   al,al
c0013843:	0f 84 b6 00 00 00    	je     c00138ff <Reg::readInt(char*, char*, int*)+0xe3>
c0013849:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c001384e:	83 fa 2b             	cmp    edx,0x2b
c0013851:	74 0c                	je     c001385f <Reg::readInt(char*, char*, int*)+0x43>
c0013853:	83 fa 2d             	cmp    edx,0x2d
c0013856:	75 0e                	jne    c0013866 <Reg::readInt(char*, char*, int*)+0x4a>
c0013858:	ba 01 00 00 00       	mov    edx,0x1
c001385d:	eb 0b                	jmp    c001386a <Reg::readInt(char*, char*, int*)+0x4e>
c001385f:	ba 01 00 00 00       	mov    edx,0x1
c0013864:	eb 02                	jmp    c0013868 <Reg::readInt(char*, char*, int*)+0x4c>
c0013866:	31 d2                	xor    edx,edx
c0013868:	31 c0                	xor    eax,eax
c001386a:	be 0a 00 00 00       	mov    esi,0xa
c001386f:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013874:	75 21                	jne    c0013897 <Reg::readInt(char*, char*, int*)+0x7b>
c0013876:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c001387b:	83 f9 78             	cmp    ecx,0x78
c001387e:	75 0a                	jne    c001388a <Reg::readInt(char*, char*, int*)+0x6e>
c0013880:	83 c2 02             	add    edx,0x2
c0013883:	be 10 00 00 00       	mov    esi,0x10
c0013888:	eb 0d                	jmp    c0013897 <Reg::readInt(char*, char*, int*)+0x7b>
c001388a:	83 f9 62             	cmp    ecx,0x62
c001388d:	75 08                	jne    c0013897 <Reg::readInt(char*, char*, int*)+0x7b>
c001388f:	83 c2 02             	add    edx,0x2
c0013892:	be 02 00 00 00       	mov    esi,0x2
c0013897:	01 d5                	add    ebp,edx
c0013899:	31 d2                	xor    edx,edx
c001389b:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c001389f:	83 f9 0d             	cmp    ecx,0xd
c00138a2:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00138a6:	0f 94 c3             	sete   bl
c00138a9:	85 c9                	test   ecx,ecx
c00138ab:	89 df                	mov    edi,ebx
c00138ad:	0f 94 c3             	sete   bl
c00138b0:	09 df                	or     edi,ebx
c00138b2:	89 fb                	mov    ebx,edi
c00138b4:	83 e7 01             	and    edi,0x1
c00138b7:	75 35                	jne    c00138ee <Reg::readInt(char*, char*, int*)+0xd2>
c00138b9:	0f af d6             	imul   edx,esi
c00138bc:	83 fe 10             	cmp    esi,0x10
c00138bf:	75 26                	jne    c00138e7 <Reg::readInt(char*, char*, int*)+0xcb>
c00138c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00138c5:	83 ef 41             	sub    edi,0x41
c00138c8:	89 fb                	mov    ebx,edi
c00138ca:	80 fb 05             	cmp    bl,0x5
c00138cd:	77 06                	ja     c00138d5 <Reg::readInt(char*, char*, int*)+0xb9>
c00138cf:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c00138d3:	eb 16                	jmp    c00138eb <Reg::readInt(char*, char*, int*)+0xcf>
c00138d5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00138d9:	83 eb 61             	sub    ebx,0x61
c00138dc:	80 fb 05             	cmp    bl,0x5
c00138df:	77 06                	ja     c00138e7 <Reg::readInt(char*, char*, int*)+0xcb>
c00138e1:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c00138e5:	eb 04                	jmp    c00138eb <Reg::readInt(char*, char*, int*)+0xcf>
c00138e7:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c00138eb:	45                   	inc    ebp
c00138ec:	eb ad                	jmp    c001389b <Reg::readInt(char*, char*, int*)+0x7f>
c00138ee:	84 c0                	test   al,al
c00138f0:	74 02                	je     c00138f4 <Reg::readInt(char*, char*, int*)+0xd8>
c00138f2:	f7 da                	neg    edx
c00138f4:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00138fb:	89 10                	mov    DWORD PTR [eax],edx
c00138fd:	88 d8                	mov    al,bl
c00138ff:	81 c4 ec 00 00 00    	add    esp,0xec
c0013905:	5b                   	pop    ebx
c0013906:	5e                   	pop    esi
c0013907:	5f                   	pop    edi
c0013908:	5d                   	pop    ebp
c0013909:	c3                   	ret    

c001390a <Reg::readString(char*, char*, char*, int)>:
c001390a:	57                   	push   edi
c001390b:	56                   	push   esi
c001390c:	53                   	push   ebx
c001390d:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013913:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001391a:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001391e:	57                   	push   edi
c001391f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013926:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001392d:	e8 b3 fe ff ff       	call   c00137e5 <Reg::getLine(char*, char*, char*)>
c0013932:	83 c4 10             	add    esp,0x10
c0013935:	89 c6                	mov    esi,eax
c0013937:	84 c0                	test   al,al
c0013939:	74 44                	je     c001397f <Reg::readString(char*, char*, char*, int)+0x75>
c001393b:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013942:	31 c0                	xor    eax,eax
c0013944:	4a                   	dec    edx
c0013945:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013948:	84 c9                	test   cl,cl
c001394a:	74 0f                	je     c001395b <Reg::readString(char*, char*, char*, int)+0x51>
c001394c:	39 c2                	cmp    edx,eax
c001394e:	7e 0b                	jle    c001395b <Reg::readString(char*, char*, char*, int)+0x51>
c0013950:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013953:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013958:	40                   	inc    eax
c0013959:	eb ea                	jmp    c0013945 <Reg::readString(char*, char*, char*, int)+0x3b>
c001395b:	83 ec 0c             	sub    esp,0xc
c001395e:	53                   	push   ebx
c001395f:	e8 0c cc fe ff       	call   c0000570 <strlen>
c0013964:	83 c4 10             	add    esp,0x10
c0013967:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001396c:	75 11                	jne    c001397f <Reg::readString(char*, char*, char*, int)+0x75>
c001396e:	83 ec 0c             	sub    esp,0xc
c0013971:	53                   	push   ebx
c0013972:	e8 f9 cb fe ff       	call   c0000570 <strlen>
c0013977:	83 c4 10             	add    esp,0x10
c001397a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001397f:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013985:	89 f0                	mov    eax,esi
c0013987:	5b                   	pop    ebx
c0013988:	5e                   	pop    esi
c0013989:	5f                   	pop    edi
c001398a:	c3                   	ret    

c001398b <Reg::readBool(char*, char*, bool*)>:
c001398b:	83 ec 20             	sub    esp,0x20
c001398e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013992:	50                   	push   eax
c0013993:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013997:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001399b:	e8 7c fe ff ff       	call   c001381c <Reg::readInt(char*, char*, int*)>
c00139a0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00139a5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00139a9:	0f 95 02             	setne  BYTE PTR [edx]
c00139ac:	83 c4 2c             	add    esp,0x2c
c00139af:	c3                   	ret    

c00139b0 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00139b0:	53                   	push   ebx
c00139b1:	83 ec 1c             	sub    esp,0x1c
c00139b4:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00139b8:	8d 44 24 13          	lea    eax,[esp+0x13]
c00139bc:	50                   	push   eax
c00139bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139c5:	e8 c1 ff ff ff       	call   c001398b <Reg::readBool(char*, char*, bool*)>
c00139ca:	83 c4 10             	add    esp,0x10
c00139cd:	84 c0                	test   al,al
c00139cf:	74 04                	je     c00139d5 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00139d1:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00139d5:	88 d8                	mov    al,bl
c00139d7:	83 c4 18             	add    esp,0x18
c00139da:	5b                   	pop    ebx
c00139db:	c3                   	ret    

c00139dc <Reg::readIntWithDefault(char*, char*, int)>:
c00139dc:	53                   	push   ebx
c00139dd:	83 ec 1c             	sub    esp,0x1c
c00139e0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00139e4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00139e8:	50                   	push   eax
c00139e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139f1:	e8 26 fe ff ff       	call   c001381c <Reg::readInt(char*, char*, int*)>
c00139f6:	83 c4 10             	add    esp,0x10
c00139f9:	84 c0                	test   al,al
c00139fb:	74 04                	je     c0013a01 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00139fd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013a01:	89 d8                	mov    eax,ebx
c0013a03:	83 c4 18             	add    esp,0x18
c0013a06:	5b                   	pop    ebx
c0013a07:	c3                   	ret    

c0013a08 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013a08:	57                   	push   edi
c0013a09:	56                   	push   esi
c0013a0a:	56                   	push   esi
c0013a0b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013a0f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013a13:	56                   	push   esi
c0013a14:	57                   	push   edi
c0013a15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a1d:	e8 e8 fe ff ff       	call   c001390a <Reg::readString(char*, char*, char*, int)>
c0013a22:	83 c4 10             	add    esp,0x10
c0013a25:	84 c0                	test   al,al
c0013a27:	75 1a                	jne    c0013a43 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013a29:	51                   	push   ecx
c0013a2a:	56                   	push   esi
c0013a2b:	6a 00                	push   0x0
c0013a2d:	57                   	push   edi
c0013a2e:	e8 bd ca fe ff       	call   c00004f0 <memset>
c0013a33:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013a36:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013a3a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a3c:	83 c4 10             	add    esp,0x10
c0013a3f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013a43:	89 f8                	mov    eax,edi
c0013a45:	5a                   	pop    edx
c0013a46:	5e                   	pop    esi
c0013a47:	5f                   	pop    edi
c0013a48:	c3                   	ret    

c0013a49 <SysEject(regs*)>:
c0013a49:	83 ec 0c             	sub    esp,0xc
c0013a4c:	83 ca ff             	or     edx,0xffffffff
c0013a4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a53:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013a56:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013a5b:	83 e9 41             	sub    ecx,0x41
c0013a5e:	83 f9 19             	cmp    ecx,0x19
c0013a61:	77 18                	ja     c0013a7b <SysEject(regs*)+0x32>
c0013a63:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c0013a6a:	85 c9                	test   ecx,ecx
c0013a6c:	74 0d                	je     c0013a7b <SysEject(regs*)+0x32>
c0013a6e:	83 ec 0c             	sub    esp,0xc
c0013a71:	51                   	push   ecx
c0013a72:	e8 17 a0 ff ff       	call   c000da8e <LogicalDisk::eject()>
c0013a77:	83 c4 10             	add    esp,0x10
c0013a7a:	99                   	cdq    
c0013a7b:	83 c4 0c             	add    esp,0xc
c0013a7e:	c3                   	ret    

c0013a7f <SysExit(regs*)>:
c0013a7f:	83 ec 18             	sub    esp,0x18
c0013a82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a86:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013a89:	e8 16 2b 00 00       	call   c00165a4 <terminateTask(int)>
c0013a8e:	83 c8 ff             	or     eax,0xffffffff
c0013a91:	83 c4 1c             	add    esp,0x1c
c0013a94:	89 c2                	mov    edx,eax
c0013a96:	c3                   	ret    

c0013a97 <SysGetCwd(regs*)>:
c0013a97:	83 ec 10             	sub    esp,0x10
c0013a9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a9e:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013aa1:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013aa4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013aa9:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013aac:	e8 e5 7a ff ff       	call   c000b596 <Fs::getcwd(Process*, char*, int)>
c0013ab1:	83 c4 1c             	add    esp,0x1c
c0013ab4:	99                   	cdq    
c0013ab5:	c3                   	ret    

c0013ab6 <SysGetPID(regs*)>:
c0013ab6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013abb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013abe:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ac0:	99                   	cdq    
c0013ac1:	c3                   	ret    

c0013ac2 <SysGetRAMData(regs*)>:
c0013ac2:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0013ac8:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c0013ad2:	99                   	cdq    
c0013ad3:	f7 f9                	idiv   ecx
c0013ad5:	c1 e0 18             	shl    eax,0x18
c0013ad8:	09 c8                	or     eax,ecx
c0013ada:	99                   	cdq    
c0013adb:	c3                   	ret    

c0013adc <SysGetVGAPtr(regs*)>:
c0013adc:	55                   	push   ebp
c0013add:	57                   	push   edi
c0013ade:	56                   	push   esi
c0013adf:	53                   	push   ebx
c0013ae0:	83 ec 18             	sub    esp,0x18
c0013ae3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013ae7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013aea:	e8 81 25 00 00       	call   c0016070 <Thr::processFromPID(int)>
c0013aef:	83 c4 10             	add    esp,0x10
c0013af2:	89 c1                	mov    ecx,eax
c0013af4:	b8 01 00 00 00       	mov    eax,0x1
c0013af9:	85 c9                	test   ecx,ecx
c0013afb:	74 57                	je     c0013b54 <SysGetVGAPtr(regs*)+0x78>
c0013afd:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013b03:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013b07:	74 0c                	je     c0013b15 <SysGetVGAPtr(regs*)+0x39>
c0013b09:	83 ec 0c             	sub    esp,0xc
c0013b0c:	55                   	push   ebp
c0013b0d:	e8 47 4c ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0013b12:	83 c4 10             	add    esp,0x10
c0013b15:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013b18:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013b1b:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013b20:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b22:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013b25:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b28:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013b2e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b31:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013b34:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013b3a:	50                   	push   eax
c0013b3b:	50                   	push   eax
c0013b3c:	68 b4 20 02 c0       	push   0xc00220b4
c0013b41:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b44:	05 a8 0f 00 00       	add    eax,0xfa8
c0013b49:	50                   	push   eax
c0013b4a:	e8 f1 ca fe ff       	call   c0000640 <strcpy>
c0013b4f:	83 c4 10             	add    esp,0x10
c0013b52:	31 c0                	xor    eax,eax
c0013b54:	83 c4 0c             	add    esp,0xc
c0013b57:	31 d2                	xor    edx,edx
c0013b59:	5b                   	pop    ebx
c0013b5a:	5e                   	pop    esi
c0013b5b:	5f                   	pop    edi
c0013b5c:	5d                   	pop    ebp
c0013b5d:	c3                   	ret    
c0013b5e:	66 90                	xchg   ax,ax

c0013b60 <SysKill(regs*)>:
c0013b60:	53                   	push   ebx
c0013b61:	83 ec 08             	sub    esp,0x8
c0013b64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013b68:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013b6c:	75 16                	jne    c0013b84 <SysKill(regs*)+0x24>
c0013b6e:	83 ec 0c             	sub    esp,0xc
c0013b71:	68 be 20 02 c0       	push   0xc00220be
c0013b76:	e8 ca d7 ff ff       	call   c0011345 <KePanic(char const*)>
c0013b7b:	83 c4 10             	add    esp,0x10
c0013b7e:	e9 89 00 00 00       	jmp    c0013c0c <SysKill(regs*)+0xac>
c0013b83:	90                   	nop
c0013b84:	83 ec 0c             	sub    esp,0xc
c0013b87:	68 e4 96 02 c0       	push   0xc00296e4
c0013b8c:	e8 db bc 00 00       	call   c001f86c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013b91:	8d 76 00             	lea    esi,[esi+0x0]
c0013b94:	83 c4 10             	add    esp,0x10
c0013b97:	85 c0                	test   eax,eax
c0013b99:	74 19                	je     c0013bb4 <SysKill(regs*)+0x54>
c0013b9b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013b9e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013ba1:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013ba3:	74 33                	je     c0013bd8 <SysKill(regs*)+0x78>
c0013ba5:	52                   	push   edx
c0013ba6:	52                   	push   edx
c0013ba7:	50                   	push   eax
c0013ba8:	68 e4 96 02 c0       	push   0xc00296e4
c0013bad:	e8 da bf 00 00       	call   c001fb8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013bb2:	eb e0                	jmp    c0013b94 <SysKill(regs*)+0x34>
c0013bb4:	83 ec 0c             	sub    esp,0xc
c0013bb7:	68 d8 96 02 c0       	push   0xc00296d8
c0013bbc:	e8 ab bc 00 00       	call   c001f86c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013bc1:	8d 76 00             	lea    esi,[esi+0x0]
c0013bc4:	83 c4 10             	add    esp,0x10
c0013bc7:	85 c0                	test   eax,eax
c0013bc9:	74 41                	je     c0013c0c <SysKill(regs*)+0xac>
c0013bcb:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013bce:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013bd1:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013bd3:	75 27                	jne    c0013bfc <SysKill(regs*)+0x9c>
c0013bd5:	8d 76 00             	lea    esi,[esi+0x0]
c0013bd8:	51                   	push   ecx
c0013bd9:	51                   	push   ecx
c0013bda:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013bdd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013be2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013be5:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013beb:	e8 f6 db ff ff       	call   c00117e6 <KeRaiseSignal(SigHandlerBlock*, int)>
c0013bf0:	83 c4 10             	add    esp,0x10
c0013bf3:	31 c0                	xor    eax,eax
c0013bf5:	31 d2                	xor    edx,edx
c0013bf7:	eb 1b                	jmp    c0013c14 <SysKill(regs*)+0xb4>
c0013bf9:	8d 76 00             	lea    esi,[esi+0x0]
c0013bfc:	52                   	push   edx
c0013bfd:	52                   	push   edx
c0013bfe:	50                   	push   eax
c0013bff:	68 d8 96 02 c0       	push   0xc00296d8
c0013c04:	e8 83 bf 00 00       	call   c001fb8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013c09:	eb b9                	jmp    c0013bc4 <SysKill(regs*)+0x64>
c0013c0b:	90                   	nop
c0013c0c:	83 c8 ff             	or     eax,0xffffffff
c0013c0f:	89 c2                	mov    edx,eax
c0013c11:	8d 76 00             	lea    esi,[esi+0x0]
c0013c14:	83 c4 08             	add    esp,0x8
c0013c17:	5b                   	pop    ebx
c0013c18:	c3                   	ret    

c0013c19 <SysLoadDLL(regs*)>:
c0013c19:	56                   	push   esi
c0013c1a:	53                   	push   ebx
c0013c1b:	31 d2                	xor    edx,edx
c0013c1d:	51                   	push   ecx
c0013c1e:	b8 01 00 00 00       	mov    eax,0x1
c0013c23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c27:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013c2b:	0f 84 8c 00 00 00    	je     c0013cbd <SysLoadDLL(regs*)+0xa4>
c0013c31:	83 ec 0c             	sub    esp,0xc
c0013c34:	68 14 01 00 00       	push   0x114
c0013c39:	e8 78 3e ff ff       	call   c0007ab6 <malloc>
c0013c3e:	83 c4 0c             	add    esp,0xc
c0013c41:	89 c3                	mov    ebx,eax
c0013c43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c48:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013c4b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013c4e:	53                   	push   ebx
c0013c4f:	e8 a0 7b ff ff       	call   c000b7f4 <File::File(char const*, Process*)>
c0013c54:	83 c4 10             	add    esp,0x10
c0013c57:	31 d2                	xor    edx,edx
c0013c59:	b8 02 00 00 00       	mov    eax,0x2
c0013c5e:	85 db                	test   ebx,ebx
c0013c60:	74 5b                	je     c0013cbd <SysLoadDLL(regs*)+0xa4>
c0013c62:	83 ec 0c             	sub    esp,0xc
c0013c65:	53                   	push   ebx
c0013c66:	e8 15 7f ff ff       	call   c000bb80 <File::exists()>
c0013c6b:	83 c4 10             	add    esp,0x10
c0013c6e:	84 c0                	test   al,al
c0013c70:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c72:	75 11                	jne    c0013c85 <SysLoadDLL(regs*)+0x6c>
c0013c74:	83 ec 0c             	sub    esp,0xc
c0013c77:	53                   	push   ebx
c0013c78:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c7b:	83 c4 10             	add    esp,0x10
c0013c7e:	b8 03 00 00 00       	mov    eax,0x3
c0013c83:	eb 36                	jmp    c0013cbb <SysLoadDLL(regs*)+0xa2>
c0013c85:	83 ec 0c             	sub    esp,0xc
c0013c88:	53                   	push   ebx
c0013c89:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c8c:	58                   	pop    eax
c0013c8d:	5a                   	pop    edx
c0013c8e:	6a 00                	push   0x0
c0013c90:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013c93:	e8 0e 15 00 00       	call   c00151a6 <Thr::loadDLL(char const*, bool)>
c0013c98:	83 c4 10             	add    esp,0x10
c0013c9b:	89 c1                	mov    ecx,eax
c0013c9d:	31 d2                	xor    edx,edx
c0013c9f:	b8 04 00 00 00       	mov    eax,0x4
c0013ca4:	85 c9                	test   ecx,ecx
c0013ca6:	74 15                	je     c0013cbd <SysLoadDLL(regs*)+0xa4>
c0013ca8:	53                   	push   ebx
c0013ca9:	53                   	push   ebx
c0013caa:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013cb0:	51                   	push   ecx
c0013cb1:	e8 21 17 00 00       	call   c00153d7 <Thr::executeDLL(unsigned long, void*)>
c0013cb6:	83 c4 10             	add    esp,0x10
c0013cb9:	31 c0                	xor    eax,eax
c0013cbb:	31 d2                	xor    edx,edx
c0013cbd:	59                   	pop    ecx
c0013cbe:	5b                   	pop    ebx
c0013cbf:	5e                   	pop    esi
c0013cc0:	c3                   	ret    

c0013cc1 <SysRead(regs*)>:
c0013cc1:	57                   	push   edi
c0013cc2:	56                   	push   esi
c0013cc3:	53                   	push   ebx
c0013cc4:	83 ec 10             	sub    esp,0x10
c0013cc7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013ccb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013cce:	83 f8 02             	cmp    eax,0x2
c0013cd1:	77 10                	ja     c0013ce3 <SysRead(regs*)+0x22>
c0013cd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cd8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013cdb:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013ce1:	eb 0e                	jmp    c0013cf1 <SysRead(regs*)+0x30>
c0013ce3:	83 ec 0c             	sub    esp,0xc
c0013ce6:	50                   	push   eax
c0013ce7:	e8 c7 57 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0013cec:	83 c4 10             	add    esp,0x10
c0013cef:	89 c1                	mov    ecx,eax
c0013cf1:	83 c8 ff             	or     eax,0xffffffff
c0013cf4:	85 c9                	test   ecx,ecx
c0013cf6:	89 c2                	mov    edx,eax
c0013cf8:	74 28                	je     c0013d22 <SysRead(regs*)+0x61>
c0013cfa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013d02:	31 ff                	xor    edi,edi
c0013d04:	83 ec 0c             	sub    esp,0xc
c0013d07:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013d09:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013d0d:	52                   	push   edx
c0013d0e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013d11:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013d14:	57                   	push   edi
c0013d15:	56                   	push   esi
c0013d16:	51                   	push   ecx
c0013d17:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013d1e:	83 c4 20             	add    esp,0x20
c0013d21:	99                   	cdq    
c0013d22:	83 c4 10             	add    esp,0x10
c0013d25:	5b                   	pop    ebx
c0013d26:	5e                   	pop    esi
c0013d27:	5f                   	pop    edi
c0013d28:	c3                   	ret    

c0013d29 <SysRegisterSignal(regs*)>:
c0013d29:	83 ec 18             	sub    esp,0x18
c0013d2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d30:	6a 00                	push   0x0
c0013d32:	6a 00                	push   0x0
c0013d34:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013d37:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013d3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d3f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013d42:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013d48:	e8 63 da ff ff       	call   c00117b0 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013d4d:	83 c4 2c             	add    esp,0x2c
c0013d50:	99                   	cdq    
c0013d51:	c3                   	ret    

c0013d52 <SysRegistryGetTypeFromPath(regs*)>:
c0013d52:	57                   	push   edi
c0013d53:	56                   	push   esi
c0013d54:	53                   	push   ebx
c0013d55:	81 ec 38 01 00 00    	sub    esp,0x138
c0013d5b:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013d62:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013d65:	68 df 20 02 c0       	push   0xc00220df
c0013d6a:	e8 d6 6b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013d6f:	5a                   	pop    edx
c0013d70:	59                   	pop    ecx
c0013d71:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013d74:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d77:	e8 4d f6 ff ff       	call   c00133c9 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013d7c:	5f                   	pop    edi
c0013d7d:	89 c6                	mov    esi,eax
c0013d7f:	5a                   	pop    edx
c0013d80:	50                   	push   eax
c0013d81:	68 ff 20 02 c0       	push   0xc00220ff
c0013d86:	e8 ba 6b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013d8b:	83 c4 10             	add    esp,0x10
c0013d8e:	85 f6                	test   esi,esi
c0013d90:	74 28                	je     c0013dba <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013d92:	50                   	push   eax
c0013d93:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013d97:	57                   	push   edi
c0013d98:	56                   	push   esi
c0013d99:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d9c:	e8 0c f2 ff ff       	call   c0012fad <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013da1:	83 c4 0c             	add    esp,0xc
c0013da4:	89 c3                	mov    ebx,eax
c0013da6:	57                   	push   edi
c0013da7:	50                   	push   eax
c0013da8:	68 07 21 02 c0       	push   0xc0022107
c0013dad:	e8 93 6b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013db2:	89 d8                	mov    eax,ebx
c0013db4:	83 c4 10             	add    esp,0x10
c0013db7:	99                   	cdq    
c0013db8:	eb 05                	jmp    c0013dbf <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013dba:	83 c8 ff             	or     eax,0xffffffff
c0013dbd:	89 c2                	mov    edx,eax
c0013dbf:	81 c4 30 01 00 00    	add    esp,0x130
c0013dc5:	5b                   	pop    ebx
c0013dc6:	5e                   	pop    esi
c0013dc7:	5f                   	pop    edi
c0013dc8:	c3                   	ret    

c0013dc9 <SysRegistryReadExtent(regs*)>:
c0013dc9:	83 ec 1c             	sub    esp,0x1c
c0013dcc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013dd0:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013dd3:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013dd6:	85 c0                	test   eax,eax
c0013dd8:	79 1f                	jns    c0013df9 <SysRegistryReadExtent(regs*)+0x30>
c0013dda:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013ddf:	52                   	push   edx
c0013de0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013de4:	52                   	push   edx
c0013de5:	50                   	push   eax
c0013de6:	51                   	push   ecx
c0013de7:	e8 b3 f0 ff ff       	call   c0012e9f <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013dec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013df0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013df4:	83 c4 10             	add    esp,0x10
c0013df7:	eb 14                	jmp    c0013e0d <SysRegistryReadExtent(regs*)+0x44>
c0013df9:	83 ec 04             	sub    esp,0x4
c0013dfc:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013dff:	50                   	push   eax
c0013e00:	51                   	push   ecx
c0013e01:	e8 33 eb ff ff       	call   c0012939 <CmGetString(Reghive_Tag*, int, char*)>
c0013e06:	83 c4 10             	add    esp,0x10
c0013e09:	31 c0                	xor    eax,eax
c0013e0b:	31 d2                	xor    edx,edx
c0013e0d:	83 c4 1c             	add    esp,0x1c
c0013e10:	c3                   	ret    

c0013e11 <SysRegistryPathToExtentLookup(regs*)>:
c0013e11:	53                   	push   ebx
c0013e12:	83 ec 10             	sub    esp,0x10
c0013e15:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e19:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013e1c:	68 1d 21 02 c0       	push   0xc002211d
c0013e21:	e8 1f 6b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013e26:	58                   	pop    eax
c0013e27:	5a                   	pop    edx
c0013e28:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013e2b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013e2e:	e8 96 f5 ff ff       	call   c00133c9 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013e33:	83 c4 18             	add    esp,0x18
c0013e36:	99                   	cdq    
c0013e37:	5b                   	pop    ebx
c0013e38:	c3                   	ret    

c0013e39 <SysRegistryEnterDirectory(regs*)>:
c0013e39:	53                   	push   ebx
c0013e3a:	83 ec 10             	sub    esp,0x10
c0013e3d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e41:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013e44:	68 40 21 02 c0       	push   0xc0022140
c0013e49:	e8 f7 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013e4e:	58                   	pop    eax
c0013e4f:	5a                   	pop    edx
c0013e50:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013e53:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013e56:	e8 55 eb ff ff       	call   c00129b0 <CmEnterDirectory(Reghive_Tag*, int)>
c0013e5b:	83 c4 18             	add    esp,0x18
c0013e5e:	99                   	cdq    
c0013e5f:	5b                   	pop    ebx
c0013e60:	c3                   	ret    

c0013e61 <SysRegistryGetNext(regs*)>:
c0013e61:	53                   	push   ebx
c0013e62:	83 ec 10             	sub    esp,0x10
c0013e65:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e69:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013e6c:	68 5e 21 02 c0       	push   0xc002215e
c0013e71:	e8 cf 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013e76:	58                   	pop    eax
c0013e77:	5a                   	pop    edx
c0013e78:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013e7b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013e7e:	e8 6c eb ff ff       	call   c00129ef <CmGetNext(Reghive_Tag*, int)>
c0013e83:	83 c4 18             	add    esp,0x18
c0013e86:	99                   	cdq    
c0013e87:	5b                   	pop    ebx
c0013e88:	c3                   	ret    

c0013e89 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013e89:	57                   	push   edi
c0013e8a:	56                   	push   esi
c0013e8b:	53                   	push   ebx
c0013e8c:	81 ec 34 01 00 00    	sub    esp,0x134
c0013e92:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013e99:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013e9d:	57                   	push   edi
c0013e9e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013ea1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013ea4:	e8 04 f1 ff ff       	call   c0012fad <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013ea9:	89 c3                	mov    ebx,eax
c0013eab:	58                   	pop    eax
c0013eac:	5a                   	pop    edx
c0013ead:	57                   	push   edi
c0013eae:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013eb1:	e8 8a c7 fe ff       	call   c0000640 <strcpy>
c0013eb6:	89 d8                	mov    eax,ebx
c0013eb8:	81 c4 40 01 00 00    	add    esp,0x140
c0013ebe:	99                   	cdq    
c0013ebf:	5b                   	pop    ebx
c0013ec0:	5e                   	pop    esi
c0013ec1:	5f                   	pop    edi
c0013ec2:	c3                   	ret    

c0013ec3 <SysRegistryOpen(regs*)>:
c0013ec3:	83 ec 18             	sub    esp,0x18
c0013ec6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013eca:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013ecd:	e8 f7 e8 ff ff       	call   c00127c9 <CmOpen(char const*)>
c0013ed2:	83 c4 1c             	add    esp,0x1c
c0013ed5:	99                   	cdq    
c0013ed6:	c3                   	ret    

c0013ed7 <SysRegistryClose(regs*)>:
c0013ed7:	83 ec 18             	sub    esp,0x18
c0013eda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ede:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013ee1:	e8 01 ea ff ff       	call   c00128e7 <CmClose(Reghive_Tag*)>
c0013ee6:	31 c0                	xor    eax,eax
c0013ee8:	31 d2                	xor    edx,edx
c0013eea:	83 c4 1c             	add    esp,0x1c
c0013eed:	c3                   	ret    

c0013eee <SysSbrk(regs*)>:
c0013eee:	56                   	push   esi
c0013eef:	53                   	push   ebx
c0013ef0:	50                   	push   eax
c0013ef1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ef6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013efa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013efd:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013f00:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013f06:	85 db                	test   ebx,ebx
c0013f08:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013f0b:	74 02                	je     c0013f0f <SysSbrk(regs*)+0x21>
c0013f0d:	79 06                	jns    c0013f15 <SysSbrk(regs*)+0x27>
c0013f0f:	89 f0                	mov    eax,esi
c0013f11:	31 d2                	xor    edx,edx
c0013f13:	eb 2a                	jmp    c0013f3f <SysSbrk(regs*)+0x51>
c0013f15:	83 c8 ff             	or     eax,0xffffffff
c0013f18:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013f1e:	89 c2                	mov    edx,eax
c0013f20:	77 1d                	ja     c0013f3f <SysSbrk(regs*)+0x51>
c0013f22:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013f28:	50                   	push   eax
c0013f29:	c1 ea 0c             	shr    edx,0xc
c0013f2c:	68 07 0c 00 00       	push   0xc07
c0013f31:	52                   	push   edx
c0013f32:	51                   	push   ecx
c0013f33:	e8 ec 5e ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c0013f38:	89 f0                	mov    eax,esi
c0013f3a:	31 d2                	xor    edx,edx
c0013f3c:	83 c4 10             	add    esp,0x10
c0013f3f:	59                   	pop    ecx
c0013f40:	5b                   	pop    ebx
c0013f41:	5e                   	pop    esi
c0013f42:	c3                   	ret    

c0013f43 <SysSetCwd(regs*)>:
c0013f43:	83 ec 14             	sub    esp,0x14
c0013f46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f4a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f52:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013f55:	e8 c5 7c ff ff       	call   c000bc1f <Fs::setcwd(Process*, char*)>
c0013f5a:	83 c4 1c             	add    esp,0x1c
c0013f5d:	99                   	cdq    
c0013f5e:	c3                   	ret    

c0013f5f <SysSetTime(regs*)>:
c0013f5f:	55                   	push   ebp
c0013f60:	31 c9                	xor    ecx,ecx
c0013f62:	57                   	push   edi
c0013f63:	bd 0c 00 00 00       	mov    ebp,0xc
c0013f68:	56                   	push   esi
c0013f69:	53                   	push   ebx
c0013f6a:	31 db                	xor    ebx,ebx
c0013f6c:	83 ec 10             	sub    esp,0x10
c0013f6f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013f73:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013f76:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013f79:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013f7c:	89 c2                	mov    edx,eax
c0013f7e:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013f84:	83 e2 1f             	and    edx,0x1f
c0013f87:	c1 e7 10             	shl    edi,0x10
c0013f8a:	42                   	inc    edx
c0013f8b:	c1 e8 05             	shr    eax,0x5
c0013f8e:	88 d1                	mov    cl,dl
c0013f90:	31 d2                	xor    edx,edx
c0013f92:	f7 f5                	div    ebp
c0013f94:	89 dd                	mov    ebp,ebx
c0013f96:	88 d5                	mov    ch,dl
c0013f98:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013f9e:	0f b7 c1             	movzx  eax,cx
c0013fa1:	31 d2                	xor    edx,edx
c0013fa3:	09 f8                	or     eax,edi
c0013fa5:	bf 3c 00 00 00       	mov    edi,0x3c
c0013faa:	89 c1                	mov    ecx,eax
c0013fac:	89 f0                	mov    eax,esi
c0013fae:	f7 f7                	div    edi
c0013fb0:	c1 e2 10             	shl    edx,0x10
c0013fb3:	09 d5                	or     ebp,edx
c0013fb5:	31 d2                	xor    edx,edx
c0013fb7:	89 eb                	mov    ebx,ebp
c0013fb9:	f7 f7                	div    edi
c0013fbb:	bf 10 0e 00 00       	mov    edi,0xe10
c0013fc0:	88 d7                	mov    bh,dl
c0013fc2:	89 f0                	mov    eax,esi
c0013fc4:	31 d2                	xor    edx,edx
c0013fc6:	f7 f7                	div    edi
c0013fc8:	bf 18 00 00 00       	mov    edi,0x18
c0013fcd:	31 d2                	xor    edx,edx
c0013fcf:	f7 f7                	div    edi
c0013fd1:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0013fd6:	88 d3                	mov    bl,dl
c0013fd8:	53                   	push   ebx
c0013fd9:	51                   	push   ecx
c0013fda:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013fe0:	e8 45 84 ff ff       	call   c000c42a <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013fe5:	83 c4 1c             	add    esp,0x1c
c0013fe8:	83 f0 01             	xor    eax,0x1
c0013feb:	5b                   	pop    ebx
c0013fec:	0f b6 c0             	movzx  eax,al
c0013fef:	5e                   	pop    esi
c0013ff0:	31 d2                	xor    edx,edx
c0013ff2:	5f                   	pop    edi
c0013ff3:	5d                   	pop    ebp
c0013ff4:	c3                   	ret    

c0013ff5 <SysTimezone(regs*)>:
c0013ff5:	53                   	push   ebx
c0013ff6:	83 ec 08             	sub    esp,0x8
c0013ff9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ffd:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014001:	75 17                	jne    c001401a <SysTimezone(regs*)+0x25>
c0014003:	83 ec 0c             	sub    esp,0xc
c0014006:	68 75 21 02 c0       	push   0xc0022175
c001400b:	e8 35 69 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014010:	83 c8 ff             	or     eax,0xffffffff
c0014013:	83 c4 10             	add    esp,0x10
c0014016:	89 c2                	mov    edx,eax
c0014018:	eb 20                	jmp    c001403a <SysTimezone(regs*)+0x45>
c001401a:	83 ec 0c             	sub    esp,0xc
c001401d:	68 8a 21 02 c0       	push   0xc002218a
c0014022:	e8 1e 69 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014027:	58                   	pop    eax
c0014028:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001402b:	e8 64 81 ff ff       	call   c000c194 <User::loadClockSettings(int)>
c0014030:	83 c4 10             	add    esp,0x10
c0014033:	b8 01 00 00 00       	mov    eax,0x1
c0014038:	31 d2                	xor    edx,edx
c001403a:	83 c4 08             	add    esp,0x8
c001403d:	5b                   	pop    ebx
c001403e:	c3                   	ret    

c001403f <SysTruncate(regs*)>:
c001403f:	55                   	push   ebp
c0014040:	57                   	push   edi
c0014041:	31 ff                	xor    edi,edi
c0014043:	56                   	push   esi
c0014044:	53                   	push   ebx
c0014045:	83 ec 0c             	sub    esp,0xc
c0014048:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001404c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001404f:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014052:	89 ce                	mov    esi,ecx
c0014054:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014058:	0f 84 9a 00 00 00    	je     c00140f8 <SysTruncate(regs*)+0xb9>
c001405e:	83 ec 0c             	sub    esp,0xc
c0014061:	68 14 01 00 00       	push   0x114
c0014066:	e8 4b 3a ff ff       	call   c0007ab6 <malloc>
c001406b:	83 c4 0c             	add    esp,0xc
c001406e:	89 c3                	mov    ebx,eax
c0014070:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014075:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014078:	55                   	push   ebp
c0014079:	53                   	push   ebx
c001407a:	e8 75 77 ff ff       	call   c000b7f4 <File::File(char const*, Process*)>
c001407f:	83 c4 10             	add    esp,0x10
c0014082:	31 d2                	xor    edx,edx
c0014084:	b8 03 00 00 00       	mov    eax,0x3
c0014089:	85 db                	test   ebx,ebx
c001408b:	0f 84 a2 00 00 00    	je     c0014133 <SysTruncate(regs*)+0xf4>
c0014091:	51                   	push   ecx
c0014092:	51                   	push   ecx
c0014093:	6a 02                	push   0x2
c0014095:	53                   	push   ebx
c0014096:	e8 21 78 ff ff       	call   c000b8bc <File::open(FileOpenMode)>
c001409b:	83 c4 10             	add    esp,0x10
c001409e:	85 c0                	test   eax,eax
c00140a0:	74 13                	je     c00140b5 <SysTruncate(regs*)+0x76>
c00140a2:	83 ec 0c             	sub    esp,0xc
c00140a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140a7:	53                   	push   ebx
c00140a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00140ab:	83 c4 10             	add    esp,0x10
c00140ae:	b8 04 00 00 00       	mov    eax,0x4
c00140b3:	eb 7c                	jmp    c0014131 <SysTruncate(regs*)+0xf2>
c00140b5:	52                   	push   edx
c00140b6:	57                   	push   edi
c00140b7:	56                   	push   esi
c00140b8:	53                   	push   ebx
c00140b9:	e8 12 79 ff ff       	call   c000b9d0 <File::truncate(unsigned long long)>
c00140be:	83 c4 10             	add    esp,0x10
c00140c1:	85 c0                	test   eax,eax
c00140c3:	74 1b                	je     c00140e0 <SysTruncate(regs*)+0xa1>
c00140c5:	83 ec 0c             	sub    esp,0xc
c00140c8:	53                   	push   ebx
c00140c9:	e8 4c 78 ff ff       	call   c000b91a <File::close()>
c00140ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00140d3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00140d6:	83 c4 10             	add    esp,0x10
c00140d9:	b8 05 00 00 00       	mov    eax,0x5
c00140de:	eb 51                	jmp    c0014131 <SysTruncate(regs*)+0xf2>
c00140e0:	83 ec 0c             	sub    esp,0xc
c00140e3:	53                   	push   ebx
c00140e4:	e8 31 78 ff ff       	call   c000b91a <File::close()>
c00140e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00140ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00140f1:	83 c4 10             	add    esp,0x10
c00140f4:	31 c0                	xor    eax,eax
c00140f6:	eb 39                	jmp    c0014131 <SysTruncate(regs*)+0xf2>
c00140f8:	31 d2                	xor    edx,edx
c00140fa:	b8 01 00 00 00       	mov    eax,0x1
c00140ff:	83 fd 02             	cmp    ebp,0x2
c0014102:	7e 2f                	jle    c0014133 <SysTruncate(regs*)+0xf4>
c0014104:	83 ec 0c             	sub    esp,0xc
c0014107:	51                   	push   ecx
c0014108:	e8 a6 53 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001410d:	83 c4 10             	add    esp,0x10
c0014110:	89 c1                	mov    ecx,eax
c0014112:	31 d2                	xor    edx,edx
c0014114:	b8 02 00 00 00       	mov    eax,0x2
c0014119:	85 c9                	test   ecx,ecx
c001411b:	74 16                	je     c0014133 <SysTruncate(regs*)+0xf4>
c001411d:	50                   	push   eax
c001411e:	57                   	push   edi
c001411f:	56                   	push   esi
c0014120:	51                   	push   ecx
c0014121:	e8 aa 78 ff ff       	call   c000b9d0 <File::truncate(unsigned long long)>
c0014126:	83 c4 10             	add    esp,0x10
c0014129:	85 c0                	test   eax,eax
c001412b:	0f 95 c0             	setne  al
c001412e:	0f b6 c0             	movzx  eax,al
c0014131:	31 d2                	xor    edx,edx
c0014133:	83 c4 0c             	add    esp,0xc
c0014136:	5b                   	pop    ebx
c0014137:	5e                   	pop    esi
c0014138:	5f                   	pop    edi
c0014139:	5d                   	pop    ebp
c001413a:	c3                   	ret    

c001413b <SysWrite(regs*)>:
c001413b:	57                   	push   edi
c001413c:	56                   	push   esi
c001413d:	53                   	push   ebx
c001413e:	83 ec 10             	sub    esp,0x10
c0014141:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014145:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014148:	83 f8 02             	cmp    eax,0x2
c001414b:	77 10                	ja     c001415d <SysWrite(regs*)+0x22>
c001414d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014152:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014155:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001415b:	eb 0e                	jmp    c001416b <SysWrite(regs*)+0x30>
c001415d:	83 ec 0c             	sub    esp,0xc
c0014160:	50                   	push   eax
c0014161:	e8 4d 53 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0014166:	83 c4 10             	add    esp,0x10
c0014169:	89 c1                	mov    ecx,eax
c001416b:	83 c8 ff             	or     eax,0xffffffff
c001416e:	85 c9                	test   ecx,ecx
c0014170:	89 c2                	mov    edx,eax
c0014172:	74 28                	je     c001419c <SysWrite(regs*)+0x61>
c0014174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001417c:	31 ff                	xor    edi,edi
c001417e:	83 ec 0c             	sub    esp,0xc
c0014181:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014183:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014187:	52                   	push   edx
c0014188:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001418b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001418e:	57                   	push   edi
c001418f:	56                   	push   esi
c0014190:	51                   	push   ecx
c0014191:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014194:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014198:	83 c4 20             	add    esp,0x20
c001419b:	99                   	cdq    
c001419c:	83 c4 10             	add    esp,0x10
c001419f:	5b                   	pop    ebx
c00141a0:	5e                   	pop    esi
c00141a1:	5f                   	pop    edi
c00141a2:	c3                   	ret    

c00141a3 <SysWsbe(regs*)>:
c00141a3:	57                   	push   edi
c00141a4:	b9 0b 00 00 00       	mov    ecx,0xb
c00141a9:	56                   	push   esi
c00141aa:	be c9 21 02 c0       	mov    esi,0xc00221c9
c00141af:	53                   	push   ebx
c00141b0:	83 ec 30             	sub    esp,0x30
c00141b3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00141b7:	fc                   	cld    
c00141b8:	83 ec 0c             	sub    esp,0xc
c00141bb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00141bd:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00141c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141c6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141c9:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00141cf:	8b 06                	mov    eax,DWORD PTR [esi]
c00141d1:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00141d4:	57                   	push   edi
c00141d5:	e8 96 c3 fe ff       	call   c0000570 <strlen>
c00141da:	5a                   	pop    edx
c00141db:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00141df:	52                   	push   edx
c00141e0:	31 d2                	xor    edx,edx
c00141e2:	57                   	push   edi
c00141e3:	52                   	push   edx
c00141e4:	50                   	push   eax
c00141e5:	56                   	push   esi
c00141e6:	ff d3                	call   ebx
c00141e8:	83 c4 14             	add    esp,0x14
c00141eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00141ef:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00141f2:	e8 ad 23 00 00       	call   c00165a4 <terminateTask(int)>
c00141f7:	83 c4 40             	add    esp,0x40
c00141fa:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00141ff:	5b                   	pop    ebx
c0014200:	31 d2                	xor    edx,edx
c0014202:	5e                   	pop    esi
c0014203:	5f                   	pop    edi
c0014204:	c3                   	ret    

c0014205 <SysYield(regs*)>:
c0014205:	83 ec 0c             	sub    esp,0xc
c0014208:	fa                   	cli    
c0014209:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001420f:	e8 f0 19 00 00       	call   c0015c04 <schedule()>
c0014214:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0014219:	48                   	dec    eax
c001421a:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001421f:	75 01                	jne    c0014222 <SysYield(regs*)+0x1d>
c0014221:	fb                   	sti    
c0014222:	31 c0                	xor    eax,eax
c0014224:	31 d2                	xor    edx,edx
c0014226:	83 c4 0c             	add    esp,0xc
c0014229:	c3                   	ret    

c001422a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001422a:	55                   	push   ebp
c001422b:	57                   	push   edi
c001422c:	56                   	push   esi
c001422d:	53                   	push   ebx
c001422e:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014234:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001423c:	0f 95 c0             	setne  al
c001423f:	31 d2                	xor    edx,edx
c0014241:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014249:	0f 94 c2             	sete   dl
c001424c:	85 c2                	test   edx,eax
c001424e:	74 34                	je     c0014284 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014250:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001425b:	74 27                	je     c0014284 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c001425d:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0014264:	05 00 10 00 00       	add    eax,0x1000
c0014269:	89 c1                	mov    ecx,eax
c001426b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014270:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0014276:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c001427d:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0014284:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001428b:	83 ec 0c             	sub    esp,0xc
c001428e:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014294:	6a 01                	push   0x1
c0014296:	e8 72 53 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001429b:	83 c4 10             	add    esp,0x10
c001429e:	89 c3                	mov    ebx,eax
c00142a0:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00142a6:	0f 86 25 01 00 00    	jbe    c00143d1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00142ac:	c1 ee 0c             	shr    esi,0xc
c00142af:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00142b6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00142ba:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00142c2:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00142c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00142cd:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00142d4:	29 ef                	sub    edi,ebp
c00142d6:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00142da:	0f 83 f8 00 00 00    	jae    c00143d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c00142e0:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00142e6:	76 05                	jbe    c00142ed <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c00142e8:	bf 00 10 00 00       	mov    edi,0x1000
c00142ed:	83 ec 0c             	sub    esp,0xc
c00142f0:	31 d2                	xor    edx,edx
c00142f2:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00142f9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142fb:	8d 44 24 28          	lea    eax,[esp+0x28]
c00142ff:	50                   	push   eax
c0014300:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014304:	56                   	push   esi
c0014305:	52                   	push   edx
c0014306:	57                   	push   edi
c0014307:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001430e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014311:	83 c4 20             	add    esp,0x20
c0014314:	85 c0                	test   eax,eax
c0014316:	75 06                	jne    c001431e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0014318:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001431c:	74 13                	je     c0014331 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c001431e:	83 ec 0c             	sub    esp,0xc
c0014321:	53                   	push   ebx
c0014322:	e8 04 56 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0014327:	83 c4 10             	add    esp,0x10
c001432a:	31 c0                	xor    eax,eax
c001432c:	e9 7c 01 00 00       	jmp    c00144ad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0014331:	fa                   	cli    
c0014332:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0014338:	e8 82 3a ff ff       	call   c0007dbf <Phys::allocatePage()>
c001433d:	6a 07                	push   0x7
c001433f:	89 c7                	mov    edi,eax
c0014341:	53                   	push   ebx
c0014342:	50                   	push   eax
c0014343:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014348:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001434b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014351:	e8 ca 59 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014356:	83 c4 0c             	add    esp,0xc
c0014359:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014360:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014366:	6a 00                	push   0x0
c0014368:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001436d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014370:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014376:	e8 0b 58 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c001437b:	58                   	pop    eax
c001437c:	5a                   	pop    edx
c001437d:	68 07 0c 00 00       	push   0xc07
c0014382:	55                   	push   ebp
c0014383:	57                   	push   edi
c0014384:	89 df                	mov    edi,ebx
c0014386:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001438d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014393:	6a 00                	push   0x0
c0014395:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001439a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001439d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143a3:	e8 ca 5b ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00143a8:	b9 00 10 00 00       	mov    ecx,0x1000
c00143ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00143af:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00143b4:	83 c4 20             	add    esp,0x20
c00143b7:	48                   	dec    eax
c00143b8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00143bd:	85 c0                	test   eax,eax
c00143bf:	75 01                	jne    c00143c2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c00143c1:	fb                   	sti    
c00143c2:	81 c5 00 10 00 00    	add    ebp,0x1000
c00143c8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00143cc:	e9 f1 fe ff ff       	jmp    c00142c2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c00143d1:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00143d8:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00143df:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00143e5:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00143eb:	0f 86 ae 00 00 00    	jbe    c001449f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00143f1:	fa                   	cli    
c00143f2:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00143f8:	c1 ee 0c             	shr    esi,0xc
c00143fb:	51                   	push   ecx
c00143fc:	31 ff                	xor    edi,edi
c00143fe:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014405:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001440b:	6a 00                	push   0x0
c001440d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014412:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014415:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001441b:	e8 66 57 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0014420:	83 c4 10             	add    esp,0x10
c0014423:	e8 97 39 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0014428:	47                   	inc    edi
c0014429:	6a 07                	push   0x7
c001442b:	53                   	push   ebx
c001442c:	50                   	push   eax
c001442d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014431:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014437:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001443a:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014440:	e8 db 58 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014445:	58                   	pop    eax
c0014446:	5a                   	pop    edx
c0014447:	68 07 0c 00 00       	push   0xc07
c001444c:	55                   	push   ebp
c001444d:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014453:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014457:	50                   	push   eax
c0014458:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001445f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014465:	6a 00                	push   0x0
c0014467:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001446c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001446f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014475:	e8 f8 5a ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001447a:	83 c4 1c             	add    esp,0x1c
c001447d:	68 00 10 00 00       	push   0x1000
c0014482:	6a 00                	push   0x0
c0014484:	53                   	push   ebx
c0014485:	e8 66 c0 fe ff       	call   c00004f0 <memset>
c001448a:	83 c4 10             	add    esp,0x10
c001448d:	39 fe                	cmp    esi,edi
c001448f:	77 92                	ja     c0014423 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0014491:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0014496:	48                   	dec    eax
c0014497:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001449c:	75 01                	jne    c001449f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001449e:	fb                   	sti    
c001449f:	83 ec 0c             	sub    esp,0xc
c00144a2:	53                   	push   ebx
c00144a3:	e8 83 54 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c00144a8:	83 c4 10             	add    esp,0x10
c00144ab:	b0 01                	mov    al,0x1
c00144ad:	81 c4 2c 10 00 00    	add    esp,0x102c
c00144b3:	5b                   	pop    ebx
c00144b4:	5e                   	pop    esi
c00144b5:	5f                   	pop    edi
c00144b6:	5d                   	pop    ebp
c00144b7:	c3                   	ret    

c00144b8 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00144b8:	55                   	push   ebp
c00144b9:	57                   	push   edi
c00144ba:	56                   	push   esi
c00144bb:	53                   	push   ebx
c00144bc:	83 ec 48             	sub    esp,0x48
c00144bf:	68 14 01 00 00       	push   0x114
c00144c4:	e8 ed 35 ff ff       	call   c0007ab6 <malloc>
c00144c9:	83 c4 0c             	add    esp,0xc
c00144cc:	89 c6                	mov    esi,eax
c00144ce:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00144d2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00144d6:	50                   	push   eax
c00144d7:	e8 18 73 ff ff       	call   c000b7f4 <File::File(char const*, Process*)>
c00144dc:	58                   	pop    eax
c00144dd:	5a                   	pop    edx
c00144de:	6a 01                	push   0x1
c00144e0:	56                   	push   esi
c00144e1:	e8 d6 73 ff ff       	call   c000b8bc <File::open(FileOpenMode)>
c00144e6:	83 c4 10             	add    esp,0x10
c00144e9:	85 c0                	test   eax,eax
c00144eb:	0f 85 43 01 00 00    	jne    c0014634 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00144f1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00144f9:	83 ec 0c             	sub    esp,0xc
c00144fc:	6a 34                	push   0x34
c00144fe:	e8 b3 35 ff ff       	call   c0007ab6 <malloc>
c0014503:	89 c3                	mov    ebx,eax
c0014505:	58                   	pop    eax
c0014506:	8b 06                	mov    eax,DWORD PTR [esi]
c0014508:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001450c:	57                   	push   edi
c001450d:	53                   	push   ebx
c001450e:	6a 00                	push   0x0
c0014510:	6a 34                	push   0x34
c0014512:	56                   	push   esi
c0014513:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014516:	83 c4 20             	add    esp,0x20
c0014519:	85 c0                	test   eax,eax
c001451b:	0f 85 13 01 00 00    	jne    c0014634 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014521:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014527:	0f 85 07 01 00 00    	jne    c0014634 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001452d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014530:	85 c0                	test   eax,eax
c0014532:	0f 84 fc 00 00 00    	je     c0014634 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014538:	31 d2                	xor    edx,edx
c001453a:	55                   	push   ebp
c001453b:	52                   	push   edx
c001453c:	50                   	push   eax
c001453d:	56                   	push   esi
c001453e:	e8 37 74 ff ff       	call   c000b97a <File::seek(unsigned long long)>
c0014543:	83 c4 10             	add    esp,0x10
c0014546:	85 c0                	test   eax,eax
c0014548:	0f 85 e6 00 00 00    	jne    c0014634 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001454e:	83 ec 0c             	sub    esp,0xc
c0014551:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014554:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014558:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001455c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014560:	0f af c2             	imul   eax,edx
c0014563:	50                   	push   eax
c0014564:	e8 4d 35 ff ff       	call   c0007ab6 <malloc>
c0014569:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001456b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001456f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014572:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014576:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001457a:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001457e:	0f af c2             	imul   eax,edx
c0014581:	99                   	cdq    
c0014582:	52                   	push   edx
c0014583:	50                   	push   eax
c0014584:	56                   	push   esi
c0014585:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014588:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001458b:	83 c4 20             	add    esp,0x20
c001458e:	85 c0                	test   eax,eax
c0014590:	0f 84 9e 00 00 00    	je     c0014634 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014596:	31 d2                	xor    edx,edx
c0014598:	51                   	push   ecx
c0014599:	52                   	push   edx
c001459a:	50                   	push   eax
c001459b:	56                   	push   esi
c001459c:	e8 d9 73 ff ff       	call   c000b97a <File::seek(unsigned long long)>
c00145a1:	83 c4 10             	add    esp,0x10
c00145a4:	85 c0                	test   eax,eax
c00145a6:	0f 85 88 00 00 00    	jne    c0014634 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00145ac:	83 ec 0c             	sub    esp,0xc
c00145af:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00145b3:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00145b7:	31 ed                	xor    ebp,ebp
c00145b9:	0f af c2             	imul   eax,edx
c00145bc:	50                   	push   eax
c00145bd:	e8 f4 34 ff ff       	call   c0007ab6 <malloc>
c00145c2:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00145c4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00145c8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00145cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145cf:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00145d3:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00145d7:	0f af c2             	imul   eax,edx
c00145da:	99                   	cdq    
c00145db:	52                   	push   edx
c00145dc:	50                   	push   eax
c00145dd:	56                   	push   esi
c00145de:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00145e1:	83 c4 20             	add    esp,0x20
c00145e4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00145ec:	0f b7 fd             	movzx  edi,bp
c00145ef:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c00145f3:	73 7d                	jae    c0014672 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c00145f5:	c1 e7 05             	shl    edi,0x5
c00145f8:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00145fc:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00145ff:	75 6b                	jne    c001466c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014601:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014604:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014608:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001460b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001460f:	52                   	push   edx
c0014610:	31 d2                	xor    edx,edx
c0014612:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014615:	52                   	push   edx
c0014616:	50                   	push   eax
c0014617:	56                   	push   esi
c0014618:	e8 5d 73 ff ff       	call   c000b97a <File::seek(unsigned long long)>
c001461d:	83 c4 10             	add    esp,0x10
c0014620:	85 c0                	test   eax,eax
c0014622:	74 17                	je     c001463b <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0014624:	83 ec 0c             	sub    esp,0xc
c0014627:	68 f5 21 02 c0       	push   0xc00221f5
c001462c:	e8 14 63 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014631:	83 c4 10             	add    esp,0x10
c0014634:	31 c0                	xor    eax,eax
c0014636:	e9 87 00 00 00       	jmp    c00146c2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c001463b:	83 ec 0c             	sub    esp,0xc
c001463e:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014641:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014644:	50                   	push   eax
c0014645:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014649:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001464d:	56                   	push   esi
c001464e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014652:	e8 d3 fb ff ff       	call   c001422a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014657:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001465b:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001465f:	83 c4 20             	add    esp,0x20
c0014662:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014666:	73 04                	jae    c001466c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014668:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001466c:	45                   	inc    ebp
c001466d:	e9 7a ff ff ff       	jmp    c00145ec <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014672:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0014676:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001467a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001467e:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0014684:	83 ec 0c             	sub    esp,0xc
c0014687:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c001468d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014692:	05 00 10 00 00       	add    eax,0x1000
c0014697:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001469a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001469e:	e8 23 34 ff ff       	call   c0007ac6 <free>
c00146a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146a6:	e8 1b 34 ff ff       	call   c0007ac6 <free>
c00146ab:	58                   	pop    eax
c00146ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146b0:	e8 11 34 ff ff       	call   c0007ac6 <free>
c00146b5:	89 34 24             	mov    DWORD PTR [esp],esi
c00146b8:	e8 5d 72 ff ff       	call   c000b91a <File::close()>
c00146bd:	83 c4 10             	add    esp,0x10
c00146c0:	b0 01                	mov    al,0x1
c00146c2:	83 c4 3c             	add    esp,0x3c
c00146c5:	5b                   	pop    ebx
c00146c6:	5e                   	pop    esi
c00146c7:	5f                   	pop    edi
c00146c8:	5d                   	pop    ebp
c00146c9:	c3                   	ret    

c00146ca <Thr::runtimeReferenceHelper()>:
c00146ca:	83 ec 18             	sub    esp,0x18
c00146cd:	68 fd 21 02 c0       	push   0xc00221fd
c00146d2:	e8 6e 62 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00146d7:	fa                   	cli    
c00146d8:	83 c4 10             	add    esp,0x10
c00146db:	eb fe                	jmp    c00146db <Thr::runtimeReferenceHelper()+0x11>

c00146dd <Thr::getAddressOfKernelSymbol(char const*)>:
c00146dd:	57                   	push   edi
c00146de:	56                   	push   esi
c00146df:	53                   	push   ebx
c00146e0:	31 db                	xor    ebx,ebx
c00146e2:	39 1d a0 96 02 c0    	cmp    DWORD PTR ds:0xc00296a0,ebx
c00146e8:	7e 3c                	jle    c0014726 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00146ea:	8b 34 9d 20 96 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd69e0]
c00146f1:	31 ff                	xor    edi,edi
c00146f3:	39 3c 9d 20 95 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6ae0],edi
c00146fa:	7e 27                	jle    c0014723 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00146fc:	50                   	push   eax
c00146fd:	50                   	push   eax
c00146fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014702:	8b 06                	mov    eax,DWORD PTR [esi]
c0014704:	03 04 9d a0 95 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6a60]
c001470b:	50                   	push   eax
c001470c:	e8 3f c0 fe ff       	call   c0000750 <strcmp>
c0014711:	83 c4 10             	add    esp,0x10
c0014714:	85 c0                	test   eax,eax
c0014716:	75 05                	jne    c001471d <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014718:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001471b:	eb 0b                	jmp    c0014728 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001471d:	83 c6 10             	add    esi,0x10
c0014720:	47                   	inc    edi
c0014721:	eb d0                	jmp    c00146f3 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014723:	43                   	inc    ebx
c0014724:	eb bc                	jmp    c00146e2 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014726:	31 c0                	xor    eax,eax
c0014728:	5b                   	pop    ebx
c0014729:	5e                   	pop    esi
c001472a:	5f                   	pop    edi
c001472b:	c3                   	ret    

c001472c <Thr::loadKernelSymbolTable(char const*)>:
c001472c:	55                   	push   ebp
c001472d:	57                   	push   edi
c001472e:	56                   	push   esi
c001472f:	53                   	push   ebx
c0014730:	83 ec 68             	sub    esp,0x68
c0014733:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c0014739:	68 14 01 00 00       	push   0x114
c001473e:	e8 73 33 ff ff       	call   c0007ab6 <malloc>
c0014743:	83 c4 0c             	add    esp,0xc
c0014746:	89 c3                	mov    ebx,eax
c0014748:	56                   	push   esi
c0014749:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001474d:	50                   	push   eax
c001474e:	e8 a1 70 ff ff       	call   c000b7f4 <File::File(char const*, Process*)>
c0014753:	5e                   	pop    esi
c0014754:	5f                   	pop    edi
c0014755:	6a 01                	push   0x1
c0014757:	53                   	push   ebx
c0014758:	e8 5f 71 ff ff       	call   c000b8bc <File::open(FileOpenMode)>
c001475d:	83 c4 10             	add    esp,0x10
c0014760:	85 c0                	test   eax,eax
c0014762:	74 0a                	je     c001476e <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014764:	83 ec 0c             	sub    esp,0xc
c0014767:	68 1f 22 02 c0       	push   0xc002221f
c001476c:	eb 34                	jmp    c00147a2 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001476e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014776:	83 ec 0c             	sub    esp,0xc
c0014779:	6a 34                	push   0x34
c001477b:	e8 36 33 ff ff       	call   c0007ab6 <malloc>
c0014780:	59                   	pop    ecx
c0014781:	89 c7                	mov    edi,eax
c0014783:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014787:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014789:	56                   	push   esi
c001478a:	57                   	push   edi
c001478b:	6a 00                	push   0x0
c001478d:	6a 34                	push   0x34
c001478f:	53                   	push   ebx
c0014790:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014793:	83 c4 20             	add    esp,0x20
c0014796:	85 c0                	test   eax,eax
c0014798:	74 17                	je     c00147b1 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001479a:	83 ec 0c             	sub    esp,0xc
c001479d:	68 36 22 02 c0       	push   0xc0022236
c00147a2:	e8 9e cb ff ff       	call   c0011345 <KePanic(char const*)>
c00147a7:	83 c4 10             	add    esp,0x10
c00147aa:	31 c0                	xor    eax,eax
c00147ac:	e9 31 02 00 00       	jmp    c00149e2 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00147b1:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00147b7:	75 e1                	jne    c001479a <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00147b9:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00147bc:	85 c0                	test   eax,eax
c00147be:	74 da                	je     c001479a <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00147c0:	52                   	push   edx
c00147c1:	31 d2                	xor    edx,edx
c00147c3:	52                   	push   edx
c00147c4:	50                   	push   eax
c00147c5:	53                   	push   ebx
c00147c6:	e8 af 71 ff ff       	call   c000b97a <File::seek(unsigned long long)>
c00147cb:	83 c4 10             	add    esp,0x10
c00147ce:	85 c0                	test   eax,eax
c00147d0:	75 c8                	jne    c001479a <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00147d2:	83 ec 0c             	sub    esp,0xc
c00147d5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00147d9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00147dd:	31 ed                	xor    ebp,ebp
c00147df:	0f af c2             	imul   eax,edx
c00147e2:	50                   	push   eax
c00147e3:	e8 ce 32 ff ff       	call   c0007ab6 <malloc>
c00147e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00147ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00147ee:	89 34 24             	mov    DWORD PTR [esp],esi
c00147f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00147f5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00147f9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00147fd:	0f af c2             	imul   eax,edx
c0014800:	99                   	cdq    
c0014801:	52                   	push   edx
c0014802:	50                   	push   eax
c0014803:	53                   	push   ebx
c0014804:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014807:	83 c4 20             	add    esp,0x20
c001480a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014812:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001481a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014822:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001482a:	0f b7 f5             	movzx  esi,bp
c001482d:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014831:	0f 83 a7 00 00 00    	jae    c00148de <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014837:	6b f6 28             	imul   esi,esi,0x28
c001483a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001483e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014841:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014845:	50                   	push   eax
c0014846:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001484a:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001484e:	8b 16                	mov    edx,DWORD PTR [esi]
c0014850:	6b c0 28             	imul   eax,eax,0x28
c0014853:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014857:	89 d0                	mov    eax,edx
c0014859:	31 d2                	xor    edx,edx
c001485b:	52                   	push   edx
c001485c:	50                   	push   eax
c001485d:	53                   	push   ebx
c001485e:	e8 17 71 ff ff       	call   c000b97a <File::seek(unsigned long long)>
c0014863:	83 c4 0c             	add    esp,0xc
c0014866:	6a 20                	push   0x20
c0014868:	6a 00                	push   0x0
c001486a:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001486e:	52                   	push   edx
c001486f:	e8 7c bc fe ff       	call   c00004f0 <memset>
c0014874:	58                   	pop    eax
c0014875:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014877:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001487b:	51                   	push   ecx
c001487c:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014880:	52                   	push   edx
c0014881:	6a 00                	push   0x0
c0014883:	6a 1f                	push   0x1f
c0014885:	53                   	push   ebx
c0014886:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014889:	83 c4 18             	add    esp,0x18
c001488c:	68 4d 22 02 c0       	push   0xc002224d
c0014891:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014895:	52                   	push   edx
c0014896:	e8 b5 be fe ff       	call   c0000750 <strcmp>
c001489b:	83 c4 10             	add    esp,0x10
c001489e:	85 c0                	test   eax,eax
c00148a0:	75 0f                	jne    c00148b1 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00148a2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00148a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00148a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00148ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00148b1:	50                   	push   eax
c00148b2:	50                   	push   eax
c00148b3:	68 55 22 02 c0       	push   0xc0022255
c00148b8:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00148bc:	50                   	push   eax
c00148bd:	e8 8e be fe ff       	call   c0000750 <strcmp>
c00148c2:	83 c4 10             	add    esp,0x10
c00148c5:	85 c0                	test   eax,eax
c00148c7:	75 0f                	jne    c00148d8 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00148c9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00148cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00148d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00148d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00148d8:	45                   	inc    ebp
c00148d9:	e9 4c ff ff ff       	jmp    c001482a <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00148de:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00148e3:	75 10                	jne    c00148f5 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00148e5:	83 ec 0c             	sub    esp,0xc
c00148e8:	68 5d 22 02 c0       	push   0xc002225d
c00148ed:	e8 53 ca ff ff       	call   c0011345 <KePanic(char const*)>
c00148f2:	83 c4 10             	add    esp,0x10
c00148f5:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00148fa:	75 10                	jne    c001490c <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00148fc:	83 ec 0c             	sub    esp,0xc
c00148ff:	68 5d 22 02 c0       	push   0xc002225d
c0014904:	e8 3c ca ff ff       	call   c0011345 <KePanic(char const*)>
c0014909:	83 c4 10             	add    esp,0x10
c001490c:	31 d2                	xor    edx,edx
c001490e:	50                   	push   eax
c001490f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014913:	52                   	push   edx
c0014914:	50                   	push   eax
c0014915:	53                   	push   ebx
c0014916:	e8 5f 70 ff ff       	call   c000b97a <File::seek(unsigned long long)>
c001491b:	5a                   	pop    edx
c001491c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014920:	e8 91 31 ff ff       	call   c0007ab6 <malloc>
c0014925:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014929:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001492d:	31 c9                	xor    ecx,ecx
c001492f:	5e                   	pop    esi
c0014930:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014932:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014936:	55                   	push   ebp
c0014937:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001493b:	51                   	push   ecx
c001493c:	52                   	push   edx
c001493d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014941:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014945:	53                   	push   ebx
c0014946:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014949:	83 c4 14             	add    esp,0x14
c001494c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014950:	e8 61 31 ff ff       	call   c0007ab6 <malloc>
c0014955:	89 c6                	mov    esi,eax
c0014957:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014959:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001495c:	56                   	push   esi
c001495d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014961:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014965:	51                   	push   ecx
c0014966:	52                   	push   edx
c0014967:	53                   	push   ebx
c0014968:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001496b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001496f:	8b 15 a0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296a0
c0014975:	83 c4 1c             	add    esp,0x1c
c0014978:	c1 e8 04             	shr    eax,0x4
c001497b:	89 04 95 20 95 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6ae0],eax
c0014982:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014986:	31 d2                	xor    edx,edx
c0014988:	52                   	push   edx
c0014989:	50                   	push   eax
c001498a:	53                   	push   ebx
c001498b:	e8 ea 6f ff ff       	call   c000b97a <File::seek(unsigned long long)>
c0014990:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014992:	31 d2                	xor    edx,edx
c0014994:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014997:	56                   	push   esi
c0014998:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001499c:	52                   	push   edx
c001499d:	50                   	push   eax
c001499e:	53                   	push   ebx
c001499f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00149a2:	83 c4 14             	add    esp,0x14
c00149a5:	53                   	push   ebx
c00149a6:	e8 6f 6f ff ff       	call   c000b91a <File::close()>
c00149ab:	5d                   	pop    ebp
c00149ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00149b0:	e8 11 31 ff ff       	call   c0007ac6 <free>
c00149b5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00149b8:	e8 09 31 ff ff       	call   c0007ac6 <free>
c00149bd:	a1 a0 96 02 c0       	mov    eax,ds:0xc00296a0
c00149c2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00149c6:	8d 50 01             	lea    edx,[eax+0x1]
c00149c9:	89 0c 85 20 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd69e0],ecx
c00149d0:	89 34 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],esi
c00149d7:	89 15 a0 96 02 c0    	mov    DWORD PTR ds:0xc00296a0,edx
c00149dd:	83 c4 10             	add    esp,0x10
c00149e0:	b0 01                	mov    al,0x1
c00149e2:	83 c4 5c             	add    esp,0x5c
c00149e5:	5b                   	pop    ebx
c00149e6:	5e                   	pop    esi
c00149e7:	5f                   	pop    edi
c00149e8:	5d                   	pop    ebp
c00149e9:	c3                   	ret    

c00149ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00149ea:	55                   	push   ebp
c00149eb:	57                   	push   edi
c00149ec:	56                   	push   esi
c00149ed:	53                   	push   ebx
c00149ee:	81 ec 68 03 00 00    	sub    esp,0x368
c00149f4:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00149fb:	8b 1d f0 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296f0
c0014a01:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014a05:	68 14 01 00 00       	push   0x114
c0014a0a:	e8 a7 30 ff ff       	call   c0007ab6 <malloc>
c0014a0f:	83 c4 0c             	add    esp,0xc
c0014a12:	89 c5                	mov    ebp,eax
c0014a14:	53                   	push   ebx
c0014a15:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014a1c:	50                   	push   eax
c0014a1d:	e8 d2 6d ff ff       	call   c000b7f4 <File::File(char const*, Process*)>
c0014a22:	5e                   	pop    esi
c0014a23:	5f                   	pop    edi
c0014a24:	6a 01                	push   0x1
c0014a26:	55                   	push   ebp
c0014a27:	e8 90 6e ff ff       	call   c000b8bc <File::open(FileOpenMode)>
c0014a2c:	83 c4 10             	add    esp,0x10
c0014a2f:	85 c0                	test   eax,eax
c0014a31:	0f 85 aa 06 00 00    	jne    c00150e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014a37:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014a3f:	83 ec 0c             	sub    esp,0xc
c0014a42:	6a 34                	push   0x34
c0014a44:	e8 6d 30 ff ff       	call   c0007ab6 <malloc>
c0014a49:	5b                   	pop    ebx
c0014a4a:	89 c7                	mov    edi,eax
c0014a4c:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014a50:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014a53:	53                   	push   ebx
c0014a54:	57                   	push   edi
c0014a55:	6a 00                	push   0x0
c0014a57:	6a 34                	push   0x34
c0014a59:	55                   	push   ebp
c0014a5a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014a5d:	83 c4 20             	add    esp,0x20
c0014a60:	85 c0                	test   eax,eax
c0014a62:	0f 85 79 06 00 00    	jne    c00150e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014a68:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014a6e:	0f 85 6d 06 00 00    	jne    c00150e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014a74:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014a77:	85 c0                	test   eax,eax
c0014a79:	0f 84 62 06 00 00    	je     c00150e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014a7f:	31 d2                	xor    edx,edx
c0014a81:	51                   	push   ecx
c0014a82:	52                   	push   edx
c0014a83:	50                   	push   eax
c0014a84:	55                   	push   ebp
c0014a85:	e8 f0 6e ff ff       	call   c000b97a <File::seek(unsigned long long)>
c0014a8a:	83 c4 10             	add    esp,0x10
c0014a8d:	85 c0                	test   eax,eax
c0014a8f:	0f 85 4c 06 00 00    	jne    c00150e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014a95:	83 ec 0c             	sub    esp,0xc
c0014a98:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0014a9b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014a9f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014aa3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014aa7:	0f af c2             	imul   eax,edx
c0014aaa:	50                   	push   eax
c0014aab:	e8 06 30 ff ff       	call   c0007ab6 <malloc>
c0014ab0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014ab3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ab7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014aba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014abe:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014ac2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014ac6:	0f af c2             	imul   eax,edx
c0014ac9:	99                   	cdq    
c0014aca:	52                   	push   edx
c0014acb:	50                   	push   eax
c0014acc:	55                   	push   ebp
c0014acd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ad0:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0014ad3:	83 c4 20             	add    esp,0x20
c0014ad6:	85 c0                	test   eax,eax
c0014ad8:	0f 84 03 06 00 00    	je     c00150e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014ade:	52                   	push   edx
c0014adf:	31 d2                	xor    edx,edx
c0014ae1:	52                   	push   edx
c0014ae2:	50                   	push   eax
c0014ae3:	55                   	push   ebp
c0014ae4:	e8 91 6e ff ff       	call   c000b97a <File::seek(unsigned long long)>
c0014ae9:	83 c4 10             	add    esp,0x10
c0014aec:	85 c0                	test   eax,eax
c0014aee:	0f 85 ed 05 00 00    	jne    c00150e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014af4:	83 ec 0c             	sub    esp,0xc
c0014af7:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014afb:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014aff:	31 f6                	xor    esi,esi
c0014b01:	0f af c2             	imul   eax,edx
c0014b04:	50                   	push   eax
c0014b05:	e8 ac 2f ff ff       	call   c0007ab6 <malloc>
c0014b0a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014b0d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014b11:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b14:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014b18:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014b1c:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014b20:	0f af c2             	imul   eax,edx
c0014b23:	99                   	cdq    
c0014b24:	52                   	push   edx
c0014b25:	50                   	push   eax
c0014b26:	55                   	push   ebp
c0014b27:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b2a:	83 c4 20             	add    esp,0x20
c0014b2d:	0f b7 de             	movzx  ebx,si
c0014b30:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0014b34:	0f 83 87 00 00 00    	jae    c0014bc1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0014b3a:	c1 e3 05             	shl    ebx,0x5
c0014b3d:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0014b41:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0014b44:	75 75                	jne    c0014bbb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0014b46:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0014b49:	31 d2                	xor    edx,edx
c0014b4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b4f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014b52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b56:	50                   	push   eax
c0014b57:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014b5a:	52                   	push   edx
c0014b5b:	50                   	push   eax
c0014b5c:	55                   	push   ebp
c0014b5d:	e8 18 6e ff ff       	call   c000b97a <File::seek(unsigned long long)>
c0014b62:	83 c4 10             	add    esp,0x10
c0014b65:	85 c0                	test   eax,eax
c0014b67:	0f 85 74 05 00 00    	jne    c00150e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014b6d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014b74:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014b77:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0014b7b:	31 d2                	xor    edx,edx
c0014b7d:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014b81:	83 ec 0c             	sub    esp,0xc
c0014b84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014b88:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014b8f:	50                   	push   eax
c0014b90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014b94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b98:	52                   	push   edx
c0014b99:	50                   	push   eax
c0014b9a:	55                   	push   ebp
c0014b9b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b9e:	83 c4 1c             	add    esp,0x1c
c0014ba1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014ba4:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0014ba7:	50                   	push   eax
c0014ba8:	6a 00                	push   0x0
c0014baa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014bae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0014bb2:	50                   	push   eax
c0014bb3:	e8 38 b9 fe ff       	call   c00004f0 <memset>
c0014bb8:	83 c4 10             	add    esp,0x10
c0014bbb:	46                   	inc    esi
c0014bbc:	e9 6c ff ff ff       	jmp    c0014b2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0014bc1:	53                   	push   ebx
c0014bc2:	31 db                	xor    ebx,ebx
c0014bc4:	68 00 01 00 00       	push   0x100
c0014bc9:	6a 00                	push   0x0
c0014bcb:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014bcf:	50                   	push   eax
c0014bd0:	e8 1b b9 fe ff       	call   c00004f0 <memset>
c0014bd5:	83 c4 0c             	add    esp,0xc
c0014bd8:	68 00 01 00 00       	push   0x100
c0014bdd:	6a 00                	push   0x0
c0014bdf:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014be6:	50                   	push   eax
c0014be7:	e8 04 b9 fe ff       	call   c00004f0 <memset>
c0014bec:	83 c4 10             	add    esp,0x10
c0014bef:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014bf7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014bff:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014c07:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014c0f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014c17:	0f b7 f3             	movzx  esi,bx
c0014c1a:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0014c1e:	0f 83 2d 01 00 00    	jae    c0014d51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0014c24:	6b f6 28             	imul   esi,esi,0x28
c0014c27:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014c2b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014c2e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014c32:	52                   	push   edx
c0014c33:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014c37:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0014c3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0014c3d:	6b d2 28             	imul   edx,edx,0x28
c0014c40:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014c44:	31 d2                	xor    edx,edx
c0014c46:	52                   	push   edx
c0014c47:	50                   	push   eax
c0014c48:	55                   	push   ebp
c0014c49:	e8 2c 6d ff ff       	call   c000b97a <File::seek(unsigned long long)>
c0014c4e:	83 c4 0c             	add    esp,0xc
c0014c51:	6a 20                	push   0x20
c0014c53:	6a 00                	push   0x0
c0014c55:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014c5c:	51                   	push   ecx
c0014c5d:	e8 8e b8 fe ff       	call   c00004f0 <memset>
c0014c62:	59                   	pop    ecx
c0014c63:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014c66:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014c6a:	52                   	push   edx
c0014c6b:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014c72:	51                   	push   ecx
c0014c73:	6a 00                	push   0x0
c0014c75:	6a 1f                	push   0x1f
c0014c77:	55                   	push   ebp
c0014c78:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014c7b:	83 c4 1c             	add    esp,0x1c
c0014c7e:	6a 09                	push   0x9
c0014c80:	68 77 22 02 c0       	push   0xc0022277
c0014c85:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014c8c:	51                   	push   ecx
c0014c8d:	e8 ee b6 fe ff       	call   c0000380 <memcmp>
c0014c92:	83 c4 10             	add    esp,0x10
c0014c95:	85 c0                	test   eax,eax
c0014c97:	75 21                	jne    c0014cba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0014c99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014ca1:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0014ca5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014ca9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014cac:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014cb3:	89 d0                	mov    eax,edx
c0014cb5:	40                   	inc    eax
c0014cb6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014cba:	50                   	push   eax
c0014cbb:	6a 09                	push   0x9
c0014cbd:	68 81 22 02 c0       	push   0xc0022281
c0014cc2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014cc9:	50                   	push   eax
c0014cca:	e8 b1 b6 fe ff       	call   c0000380 <memcmp>
c0014ccf:	83 c4 10             	add    esp,0x10
c0014cd2:	85 c0                	test   eax,eax
c0014cd4:	75 21                	jne    c0014cf7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0014cd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014cda:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014cde:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014ce2:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0014ce6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014ce9:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014cf0:	89 d0                	mov    eax,edx
c0014cf2:	40                   	inc    eax
c0014cf3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014cf7:	50                   	push   eax
c0014cf8:	50                   	push   eax
c0014cf9:	68 4d 22 02 c0       	push   0xc002224d
c0014cfe:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014d05:	50                   	push   eax
c0014d06:	e8 45 ba fe ff       	call   c0000750 <strcmp>
c0014d0b:	83 c4 10             	add    esp,0x10
c0014d0e:	85 c0                	test   eax,eax
c0014d10:	75 0f                	jne    c0014d21 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0014d12:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d15:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014d1d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014d21:	50                   	push   eax
c0014d22:	50                   	push   eax
c0014d23:	68 55 22 02 c0       	push   0xc0022255
c0014d28:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014d2f:	50                   	push   eax
c0014d30:	e8 1b ba fe ff       	call   c0000750 <strcmp>
c0014d35:	83 c4 10             	add    esp,0x10
c0014d38:	85 c0                	test   eax,eax
c0014d3a:	75 0f                	jne    c0014d4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0014d3c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014d47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014d4b:	43                   	inc    ebx
c0014d4c:	e9 c6 fe ff ff       	jmp    c0014c17 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0014d51:	31 d2                	xor    edx,edx
c0014d53:	50                   	push   eax
c0014d54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d58:	52                   	push   edx
c0014d59:	50                   	push   eax
c0014d5a:	55                   	push   ebp
c0014d5b:	e8 1a 6c ff ff       	call   c000b97a <File::seek(unsigned long long)>
c0014d60:	58                   	pop    eax
c0014d61:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014d65:	e8 4c 2d ff ff       	call   c0007ab6 <malloc>
c0014d6a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014d6d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014d71:	31 d2                	xor    edx,edx
c0014d73:	58                   	pop    eax
c0014d74:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014d78:	53                   	push   ebx
c0014d79:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0014d7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014d81:	52                   	push   edx
c0014d82:	50                   	push   eax
c0014d83:	55                   	push   ebp
c0014d84:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d87:	83 c4 14             	add    esp,0x14
c0014d8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014d8e:	e8 23 2d ff ff       	call   c0007ab6 <malloc>
c0014d93:	31 d2                	xor    edx,edx
c0014d95:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014d99:	83 c4 0c             	add    esp,0xc
c0014d9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014da0:	52                   	push   edx
c0014da1:	50                   	push   eax
c0014da2:	55                   	push   ebp
c0014da3:	e8 d2 6b ff ff       	call   c000b97a <File::seek(unsigned long long)>
c0014da8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014dab:	31 d2                	xor    edx,edx
c0014dad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014db0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014db4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014db8:	52                   	push   edx
c0014db9:	50                   	push   eax
c0014dba:	55                   	push   ebp
c0014dbb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014dbe:	83 c4 20             	add    esp,0x20
c0014dc1:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0014dc6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014dce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014dd2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014dd6:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0014dda:	0f 84 05 03 00 00    	je     c00150e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0014de0:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0014de7:	31 d2                	xor    edx,edx
c0014de9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014ded:	c1 e8 03             	shr    eax,0x3
c0014df0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0014df4:	51                   	push   ecx
c0014df5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014df9:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014dfd:	52                   	push   edx
c0014dfe:	50                   	push   eax
c0014dff:	55                   	push   ebp
c0014e00:	e8 75 6b ff ff       	call   c000b97a <File::seek(unsigned long long)>
c0014e05:	5b                   	pop    ebx
c0014e06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e0a:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014e11:	e8 a0 2c ff ff       	call   c0007ab6 <malloc>
c0014e16:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014e19:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014e1d:	31 d2                	xor    edx,edx
c0014e1f:	5e                   	pop    esi
c0014e20:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014e24:	50                   	push   eax
c0014e25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e29:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014e2d:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014e34:	52                   	push   edx
c0014e35:	50                   	push   eax
c0014e36:	55                   	push   ebp
c0014e37:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014e3a:	83 c4 20             	add    esp,0x20
c0014e3d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014e45:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014e49:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0014e4d:	0f 8d 76 02 00 00    	jge    c00150c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0014e53:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014e57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014e5b:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0014e60:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0014e63:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014e67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014e6b:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0014e6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014e73:	c1 e8 08             	shr    eax,0x8
c0014e76:	89 c6                	mov    esi,eax
c0014e78:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014e7c:	c1 e6 04             	shl    esi,0x4
c0014e7f:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014e83:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0014e86:	85 db                	test   ebx,ebx
c0014e88:	0f 85 b3 00 00 00    	jne    c0014f41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014e8e:	83 ec 0c             	sub    esp,0xc
c0014e91:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014e95:	03 06                	add    eax,DWORD PTR [esi]
c0014e97:	50                   	push   eax
c0014e98:	e8 40 f8 ff ff       	call   c00146dd <Thr::getAddressOfKernelSymbol(char const*)>
c0014e9d:	83 c4 10             	add    esp,0x10
c0014ea0:	89 c3                	mov    ebx,eax
c0014ea2:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0014ea7:	85 c0                	test   eax,eax
c0014ea9:	0f 85 92 00 00 00    	jne    c0014f41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014eaf:	83 ec 0c             	sub    esp,0xc
c0014eb2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014eb6:	03 06                	add    eax,DWORD PTR [esi]
c0014eb8:	50                   	push   eax
c0014eb9:	e8 72 c6 ff ff       	call   c0011530 <KeResolveCompatibilitySymbol(char*)>
c0014ebe:	83 c4 10             	add    esp,0x10
c0014ec1:	89 c3                	mov    ebx,eax
c0014ec3:	85 c0                	test   eax,eax
c0014ec5:	75 7a                	jne    c0014f41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014ec7:	51                   	push   ecx
c0014ec8:	51                   	push   ecx
c0014ec9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014ecd:	03 06                	add    eax,DWORD PTR [esi]
c0014ecf:	50                   	push   eax
c0014ed0:	68 8b 22 02 c0       	push   0xc002228b
c0014ed5:	e8 6b 5a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014eda:	58                   	pop    eax
c0014edb:	5a                   	pop    edx
c0014edc:	68 a5 22 02 c0       	push   0xc00222a5
c0014ee1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014ee8:	50                   	push   eax
c0014ee9:	e8 52 b7 fe ff       	call   c0000640 <strcpy>
c0014eee:	59                   	pop    ecx
c0014eef:	58                   	pop    eax
c0014ef0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014ef4:	03 06                	add    eax,DWORD PTR [esi]
c0014ef6:	50                   	push   eax
c0014ef7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014efe:	50                   	push   eax
c0014eff:	e8 3c b9 fe ff       	call   c0000840 <strcat>
c0014f04:	58                   	pop    eax
c0014f05:	5a                   	pop    edx
c0014f06:	68 3b 23 02 c0       	push   0xc002233b
c0014f0b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014f12:	50                   	push   eax
c0014f13:	e8 28 b9 fe ff       	call   c0000840 <strcat>
c0014f18:	83 c4 10             	add    esp,0x10
c0014f1b:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014f20:	0f 84 5d 01 00 00    	je     c0015083 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014f26:	83 ec 0c             	sub    esp,0xc
c0014f29:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014f30:	50                   	push   eax
c0014f31:	e8 0f c4 ff ff       	call   c0011345 <KePanic(char const*)>
c0014f36:	83 c4 10             	add    esp,0x10
c0014f39:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0014f3d:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0014f41:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0014f46:	83 f8 01             	cmp    eax,0x1
c0014f49:	0f 85 8f 00 00 00    	jne    c0014fde <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0014f4f:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0014f56:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0014f5a:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014f5e:	01 ce                	add    esi,ecx
c0014f60:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014f68:	0f 94 c0             	sete   al
c0014f6b:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014f73:	0f 94 c2             	sete   dl
c0014f76:	09 c2                	or     edx,eax
c0014f78:	8b 06                	mov    eax,DWORD PTR [esi]
c0014f7a:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014f7f:	0f b6 d2             	movzx  edx,dl
c0014f82:	74 41                	je     c0014fc5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0014f84:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0014f87:	85 d2                	test   edx,edx
c0014f89:	75 15                	jne    c0014fa0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0014f8b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014f8f:	66 83 f8 0c          	cmp    ax,0xc
c0014f93:	76 05                	jbe    c0014f9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0014f95:	b8 0c 00 00 00       	mov    eax,0xc
c0014f9a:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014f9e:	76 37                	jbe    c0014fd7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014fa0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0014fa4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014fa9:	0f 84 d4 00 00 00    	je     c0015083 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014faf:	83 ec 0c             	sub    esp,0xc
c0014fb2:	68 bc 22 02 c0       	push   0xc00222bc
c0014fb7:	e8 89 c3 ff ff       	call   c0011345 <KePanic(char const*)>
c0014fbc:	83 c4 10             	add    esp,0x10
c0014fbf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014fc3:	eb 12                	jmp    c0014fd7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014fc5:	01 c1                	add    ecx,eax
c0014fc7:	85 d2                	test   edx,edx
c0014fc9:	75 0c                	jne    c0014fd7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014fcb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014fcf:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014fd3:	77 02                	ja     c0014fd7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014fd5:	01 d9                	add    ecx,ebx
c0014fd7:	89 0e                	mov    DWORD PTR [esi],ecx
c0014fd9:	e9 e2 00 00 00       	jmp    c00150c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014fde:	83 f8 02             	cmp    eax,0x2
c0014fe1:	75 77                	jne    c001505a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0014fe3:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0014fea:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0014fee:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0014ff2:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014ffa:	74 21                	je     c001501d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0014ffc:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0015004:	74 17                	je     c001501d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0015006:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c001500a:	b8 0a 00 00 00       	mov    eax,0xa
c001500f:	83 fa 0e             	cmp    edx,0xe
c0015012:	77 03                	ja     c0015017 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0015014:	8d 42 fc             	lea    eax,[edx-0x4]
c0015017:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001501b:	76 17                	jbe    c0015034 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001501d:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015022:	74 5f                	je     c0015083 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015024:	83 ec 0c             	sub    esp,0xc
c0015027:	68 d8 22 02 c0       	push   0xc00222d8
c001502c:	e8 14 c3 ff ff       	call   c0011345 <KePanic(char const*)>
c0015031:	83 c4 10             	add    esp,0x10
c0015034:	8b 06                	mov    eax,DWORD PTR [esi]
c0015036:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c001503b:	74 13                	je     c0015050 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c001503d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015041:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0015048:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c001504c:	01 d0                	add    eax,edx
c001504e:	eb 04                	jmp    c0015054 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0015050:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0015054:	01 c3                	add    ebx,eax
c0015056:	89 1e                	mov    DWORD PTR [esi],ebx
c0015058:	eb 66                	jmp    c00150c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c001505a:	52                   	push   edx
c001505b:	52                   	push   edx
c001505c:	50                   	push   eax
c001505d:	68 f4 22 02 c0       	push   0xc00222f4
c0015062:	e8 de 58 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015067:	83 c4 10             	add    esp,0x10
c001506a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001506f:	74 12                	je     c0015083 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015071:	83 ec 0c             	sub    esp,0xc
c0015074:	68 ff 22 02 c0       	push   0xc00222ff
c0015079:	e8 c7 c2 ff ff       	call   c0011345 <KePanic(char const*)>
c001507e:	83 c4 10             	add    esp,0x10
c0015081:	eb 3d                	jmp    c00150c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015083:	83 ec 0c             	sub    esp,0xc
c0015086:	55                   	push   ebp
c0015087:	e8 8e 68 ff ff       	call   c000b91a <File::close()>
c001508c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001508f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015092:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015095:	59                   	pop    ecx
c0015096:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001509a:	e8 27 2a ff ff       	call   c0007ac6 <free>
c001509f:	5b                   	pop    ebx
c00150a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00150a4:	e8 1d 2a ff ff       	call   c0007ac6 <free>
c00150a9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00150ac:	e8 15 2a ff ff       	call   c0007ac6 <free>
c00150b1:	5e                   	pop    esi
c00150b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00150b6:	e8 0b 2a ff ff       	call   c0007ac6 <free>
c00150bb:	83 c4 10             	add    esp,0x10
c00150be:	eb 21                	jmp    c00150e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00150c0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00150c4:	e9 7c fd ff ff       	jmp    c0014e45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c00150c9:	83 ec 0c             	sub    esp,0xc
c00150cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00150d0:	e8 f1 29 ff ff       	call   c0007ac6 <free>
c00150d5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00150d9:	83 c4 10             	add    esp,0x10
c00150dc:	e9 f1 fc ff ff       	jmp    c0014dd2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c00150e1:	31 c0                	xor    eax,eax
c00150e3:	eb 33                	jmp    c0015118 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c00150e5:	83 ec 0c             	sub    esp,0xc
c00150e8:	55                   	push   ebp
c00150e9:	e8 2c 68 ff ff       	call   c000b91a <File::close()>
c00150ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00150f1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00150f4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00150f7:	58                   	pop    eax
c00150f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00150fc:	e8 c5 29 ff ff       	call   c0007ac6 <free>
c0015101:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015104:	e8 bd 29 ff ff       	call   c0007ac6 <free>
c0015109:	5a                   	pop    edx
c001510a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001510e:	e8 b3 29 ff ff       	call   c0007ac6 <free>
c0015113:	83 c4 10             	add    esp,0x10
c0015116:	b0 01                	mov    al,0x1
c0015118:	81 c4 5c 03 00 00    	add    esp,0x35c
c001511e:	5b                   	pop    ebx
c001511f:	5e                   	pop    esi
c0015120:	5f                   	pop    edi
c0015121:	5d                   	pop    ebp
c0015122:	c3                   	ret    

c0015123 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0015123:	56                   	push   esi
c0015124:	31 d2                	xor    edx,edx
c0015126:	53                   	push   ebx
c0015127:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c001512d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015131:	39 d3                	cmp    ebx,edx
c0015133:	7e 1b                	jle    c0015150 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0015135:	8b 04 95 20 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6ee0]
c001513c:	39 c8                	cmp    eax,ecx
c001513e:	77 0d                	ja     c001514d <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0015140:	8b 34 95 20 8f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd70e0]
c0015147:	01 c6                	add    esi,eax
c0015149:	39 ce                	cmp    esi,ecx
c001514b:	77 05                	ja     c0015152 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001514d:	42                   	inc    edx
c001514e:	eb e1                	jmp    c0015131 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0015150:	31 c0                	xor    eax,eax
c0015152:	5b                   	pop    ebx
c0015153:	5e                   	pop    esi
c0015154:	c3                   	ret    

c0015155 <Thr::getDriverNameFromAddress(unsigned long)>:
c0015155:	53                   	push   ebx
c0015156:	31 c0                	xor    eax,eax
c0015158:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001515c:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c0015162:	39 c3                	cmp    ebx,eax
c0015164:	7e 22                	jle    c0015188 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0015166:	8b 14 85 20 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6ee0]
c001516d:	39 ca                	cmp    edx,ecx
c001516f:	77 14                	ja     c0015185 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015171:	03 14 85 20 8f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd70e0]
c0015178:	39 ca                	cmp    edx,ecx
c001517a:	76 09                	jbe    c0015185 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001517c:	8b 04 85 20 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ce0]
c0015183:	eb 05                	jmp    c001518a <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0015185:	40                   	inc    eax
c0015186:	eb da                	jmp    c0015162 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015188:	31 c0                	xor    eax,eax
c001518a:	5b                   	pop    ebx
c001518b:	c3                   	ret    

c001518c <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001518c:	53                   	push   ebx
c001518d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015191:	53                   	push   ebx
c0015192:	e8 8c ff ff ff       	call   c0015123 <Thr::getDriverBaseFromAddress(unsigned long)>
c0015197:	5a                   	pop    edx
c0015198:	31 d2                	xor    edx,edx
c001519a:	85 c0                	test   eax,eax
c001519c:	74 04                	je     c00151a2 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001519e:	89 da                	mov    edx,ebx
c00151a0:	29 c2                	sub    edx,eax
c00151a2:	89 d0                	mov    eax,edx
c00151a4:	5b                   	pop    ebx
c00151a5:	c3                   	ret    

c00151a6 <Thr::loadDLL(char const*, bool)>:
c00151a6:	55                   	push   ebp
c00151a7:	57                   	push   edi
c00151a8:	56                   	push   esi
c00151a9:	53                   	push   ebx
c00151aa:	81 ec 34 01 00 00    	sub    esp,0x134
c00151b0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00151b7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00151be:	56                   	push   esi
c00151bf:	68 17 23 02 c0       	push   0xc0022317
c00151c4:	e8 7c 57 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00151c9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00151d0:	e8 e1 28 ff ff       	call   c0007ab6 <malloc>
c00151d5:	83 c4 0c             	add    esp,0xc
c00151d8:	89 c3                	mov    ebx,eax
c00151da:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00151e0:	56                   	push   esi
c00151e1:	50                   	push   eax
c00151e2:	e8 0d 66 ff ff       	call   c000b7f4 <File::File(char const*, Process*)>
c00151e7:	83 c4 10             	add    esp,0x10
c00151ea:	85 db                	test   ebx,ebx
c00151ec:	75 3c                	jne    c001522a <Thr::loadDLL(char const*, bool)+0x84>
c00151ee:	89 f8                	mov    eax,edi
c00151f0:	84 c0                	test   al,al
c00151f2:	0f 84 d2 01 00 00    	je     c00153ca <Thr::loadDLL(char const*, bool)+0x224>
c00151f8:	55                   	push   ebp
c00151f9:	55                   	push   ebp
c00151fa:	68 28 23 02 c0       	push   0xc0022328
c00151ff:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0015203:	55                   	push   ebp
c0015204:	e8 37 b4 fe ff       	call   c0000640 <strcpy>
c0015209:	58                   	pop    eax
c001520a:	5a                   	pop    edx
c001520b:	56                   	push   esi
c001520c:	55                   	push   ebp
c001520d:	e8 2e b6 fe ff       	call   c0000840 <strcat>
c0015212:	59                   	pop    ecx
c0015213:	58                   	pop    eax
c0015214:	68 3b 23 02 c0       	push   0xc002233b
c0015219:	55                   	push   ebp
c001521a:	e8 21 b6 fe ff       	call   c0000840 <strcat>
c001521f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015222:	e8 1e c1 ff ff       	call   c0011345 <KePanic(char const*)>
c0015227:	83 c4 10             	add    esp,0x10
c001522a:	51                   	push   ecx
c001522b:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001522f:	50                   	push   eax
c0015230:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015234:	50                   	push   eax
c0015235:	53                   	push   ebx
c0015236:	e8 83 69 ff ff       	call   c000bbbe <File::stat(unsigned long long*, bool*)>
c001523b:	83 c4 10             	add    esp,0x10
c001523e:	85 db                	test   ebx,ebx
c0015240:	74 0c                	je     c001524e <Thr::loadDLL(char const*, bool)+0xa8>
c0015242:	83 ec 0c             	sub    esp,0xc
c0015245:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015247:	53                   	push   ebx
c0015248:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001524b:	83 c4 10             	add    esp,0x10
c001524e:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015253:	75 0a                	jne    c001525f <Thr::loadDLL(char const*, bool)+0xb9>
c0015255:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015259:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001525d:	75 3c                	jne    c001529b <Thr::loadDLL(char const*, bool)+0xf5>
c001525f:	89 f8                	mov    eax,edi
c0015261:	84 c0                	test   al,al
c0015263:	0f 84 49 01 00 00    	je     c00153b2 <Thr::loadDLL(char const*, bool)+0x20c>
c0015269:	51                   	push   ecx
c001526a:	51                   	push   ecx
c001526b:	68 28 23 02 c0       	push   0xc0022328
c0015270:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0015274:	53                   	push   ebx
c0015275:	e8 c6 b3 fe ff       	call   c0000640 <strcpy>
c001527a:	5d                   	pop    ebp
c001527b:	58                   	pop    eax
c001527c:	56                   	push   esi
c001527d:	53                   	push   ebx
c001527e:	e8 bd b5 fe ff       	call   c0000840 <strcat>
c0015283:	58                   	pop    eax
c0015284:	5a                   	pop    edx
c0015285:	68 3b 23 02 c0       	push   0xc002233b
c001528a:	53                   	push   ebx
c001528b:	e8 b0 b5 fe ff       	call   c0000840 <strcat>
c0015290:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015293:	e8 ad c0 ff ff       	call   c0011345 <KePanic(char const*)>
c0015298:	83 c4 10             	add    esp,0x10
c001529b:	52                   	push   edx
c001529c:	6a 03                	push   0x3
c001529e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152a2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00152a6:	05 ff 0f 00 00       	add    eax,0xfff
c00152ab:	83 d2 00             	adc    edx,0x0
c00152ae:	0f ac d0 0c          	shrd   eax,edx,0xc
c00152b2:	50                   	push   eax
c00152b3:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c00152b9:	e8 66 4b ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c00152be:	59                   	pop    ecx
c00152bf:	89 c3                	mov    ebx,eax
c00152c1:	5d                   	pop    ebp
c00152c2:	50                   	push   eax
c00152c3:	68 12 09 02 c0       	push   0xc0020912
c00152c8:	e8 78 56 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00152cd:	89 34 24             	mov    DWORD PTR [esp],esi
c00152d0:	e8 9b b2 fe ff       	call   c0000570 <strlen>
c00152d5:	8b 2d 00 8f 02 c0    	mov    ebp,DWORD PTR ds:0xc0028f00
c00152db:	40                   	inc    eax
c00152dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00152df:	e8 d2 27 ff ff       	call   c0007ab6 <malloc>
c00152e4:	89 04 ad 20 93 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6ce0],eax
c00152eb:	58                   	pop    eax
c00152ec:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c00152f1:	5a                   	pop    edx
c00152f2:	56                   	push   esi
c00152f3:	ff 34 85 20 93 02 c0 	push   DWORD PTR [eax*4-0x3ffd6ce0]
c00152fa:	e8 41 b3 fe ff       	call   c0000640 <strcpy>
c00152ff:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c0015304:	8d 50 01             	lea    edx,[eax+0x1]
c0015307:	89 1c 85 20 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ee0],ebx
c001530e:	89 15 00 8f 02 c0    	mov    DWORD PTR ds:0xc0028f00,edx
c0015314:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015318:	83 c4 0c             	add    esp,0xc
c001531b:	89 14 85 20 8f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd70e0],edx
c0015322:	6a 01                	push   0x1
c0015324:	53                   	push   ebx
c0015325:	56                   	push   esi
c0015326:	e8 bf f6 ff ff       	call   c00149ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001532b:	83 c4 10             	add    esp,0x10
c001532e:	0f b6 c0             	movzx  eax,al
c0015331:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015335:	85 c0                	test   eax,eax
c0015337:	0f 85 89 00 00 00    	jne    c00153c6 <Thr::loadDLL(char const*, bool)+0x220>
c001533d:	89 f8                	mov    eax,edi
c001533f:	84 c0                	test   al,al
c0015341:	74 73                	je     c00153b6 <Thr::loadDLL(char const*, bool)+0x210>
c0015343:	83 ec 0c             	sub    esp,0xc
c0015346:	68 3d 23 02 c0       	push   0xc002233d
c001534b:	e8 f5 bf ff ff       	call   c0011345 <KePanic(char const*)>
c0015350:	83 c4 10             	add    esp,0x10
c0015353:	eb 61                	jmp    c00153b6 <Thr::loadDLL(char const*, bool)+0x210>
c0015355:	50                   	push   eax
c0015356:	50                   	push   eax
c0015357:	89 e8                	mov    eax,ebp
c0015359:	c1 e0 0c             	shl    eax,0xc
c001535c:	01 d8                	add    eax,ebx
c001535e:	50                   	push   eax
c001535f:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0015365:	e8 a2 45 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c001536a:	83 c4 10             	add    esp,0x10
c001536d:	8b 00                	mov    eax,DWORD PTR [eax]
c001536f:	a8 60                	test   al,0x60
c0015371:	75 11                	jne    c0015384 <Thr::loadDLL(char const*, bool)+0x1de>
c0015373:	83 ec 0c             	sub    esp,0xc
c0015376:	25 00 f0 ff ff       	and    eax,0xfffff000
c001537b:	50                   	push   eax
c001537c:	e8 d5 29 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0015381:	83 c4 10             	add    esp,0x10
c0015384:	45                   	inc    ebp
c0015385:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015389:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001538d:	05 ff 0f 00 00       	add    eax,0xfff
c0015392:	bf 00 00 00 00       	mov    edi,0x0
c0015397:	83 d2 00             	adc    edx,0x0
c001539a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001539e:	c1 ea 0c             	shr    edx,0xc
c00153a1:	39 c5                	cmp    ebp,eax
c00153a3:	89 d1                	mov    ecx,edx
c00153a5:	89 f8                	mov    eax,edi
c00153a7:	19 c8                	sbb    eax,ecx
c00153a9:	72 aa                	jb     c0015355 <Thr::loadDLL(char const*, bool)+0x1af>
c00153ab:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00153b0:	75 18                	jne    c00153ca <Thr::loadDLL(char const*, bool)+0x224>
c00153b2:	31 db                	xor    ebx,ebx
c00153b4:	eb 14                	jmp    c00153ca <Thr::loadDLL(char const*, bool)+0x224>
c00153b6:	83 ec 0c             	sub    esp,0xc
c00153b9:	68 5c 23 02 c0       	push   0xc002235c
c00153be:	e8 82 bf ff ff       	call   c0011345 <KePanic(char const*)>
c00153c3:	83 c4 10             	add    esp,0x10
c00153c6:	31 ed                	xor    ebp,ebp
c00153c8:	eb bb                	jmp    c0015385 <Thr::loadDLL(char const*, bool)+0x1df>
c00153ca:	81 c4 2c 01 00 00    	add    esp,0x12c
c00153d0:	89 d8                	mov    eax,ebx
c00153d2:	5b                   	pop    ebx
c00153d3:	5e                   	pop    esi
c00153d4:	5f                   	pop    edi
c00153d5:	5d                   	pop    ebp
c00153d6:	c3                   	ret    

c00153d7 <Thr::executeDLL(unsigned long, void*)>:
c00153d7:	56                   	push   esi
c00153d8:	53                   	push   ebx
c00153d9:	52                   	push   edx
c00153da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00153de:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00153e2:	85 db                	test   ebx,ebx
c00153e4:	75 10                	jne    c00153f6 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00153e6:	83 ec 0c             	sub    esp,0xc
c00153e9:	68 78 23 02 c0       	push   0xc0022378
c00153ee:	e8 52 bf ff ff       	call   c0011345 <KePanic(char const*)>
c00153f3:	83 c4 10             	add    esp,0x10
c00153f6:	50                   	push   eax
c00153f7:	50                   	push   eax
c00153f8:	53                   	push   ebx
c00153f9:	68 a2 23 02 c0       	push   0xc00223a2
c00153fe:	e8 42 55 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015403:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015407:	89 d8                	mov    eax,ebx
c0015409:	83 c4 14             	add    esp,0x14
c001540c:	5b                   	pop    ebx
c001540d:	5e                   	pop    esi
c001540e:	ff e0                	jmp    eax

c0015410 <userModeEntryPoint(void*)>:
c0015410:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015415:	83 e8 01             	sub    eax,0x1
c0015418:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001541d:	75 01                	jne    c0015420 <userModeEntryPoint(void*)+0x10>
c001541f:	fb                   	sti    
c0015420:	fb                   	sti    
c0015421:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015426:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015429:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001542f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015433:	e9 07 ae fe ff       	jmp    c000023f <goToUsermode>

c0015438 <changeTSS>:
c0015438:	83 ec 14             	sub    esp,0x14
c001543b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015440:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015443:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015448:	c1 e2 15             	shl    edx,0x15
c001544b:	29 d0                	sub    eax,edx
c001544d:	50                   	push   eax
c001544e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0015453:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015459:	05 7c 11 00 00       	add    eax,0x117c
c001545e:	50                   	push   eax
c001545f:	e8 f0 3a ff ff       	call   c0008f54 <TSS::setESP(unsigned long)>
c0015464:	83 c4 1c             	add    esp,0x1c
c0015467:	c3                   	ret    

c0015468 <switchToThread(ThreadControlBlock*)>:
c0015468:	57                   	push   edi
c0015469:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c001546f:	56                   	push   esi
c0015470:	85 c9                	test   ecx,ecx
c0015472:	53                   	push   ebx
c0015473:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015477:	0f 85 8b 00 00 00    	jne    c0015508 <switchToThread(ThreadControlBlock*)+0xa0>
c001547d:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015481:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015487:	74 7b                	je     c0015504 <switchToThread(ThreadControlBlock*)+0x9c>
c0015489:	b8 00 04 00 00       	mov    eax,0x400
c001548e:	29 d0                	sub    eax,edx
c0015490:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0015493:	d1 f8                	sar    eax,1
c0015495:	01 d0                	add    eax,edx
c0015497:	90                   	nop
c0015498:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001549b:	e8 1e 28 00 00       	call   c0017cbe <HalQueryPerformanceCounter()>
c00154a0:	a3 08 97 02 c0       	mov    ds:0xc0029708,eax
c00154a5:	89 15 0c 97 02 c0    	mov    DWORD PTR ds:0xc002970c,edx
c00154ab:	89 c6                	mov    esi,eax
c00154ad:	89 d7                	mov    edi,edx
c00154af:	2b 35 f8 96 02 c0    	sub    esi,DWORD PTR ds:0xc00296f8
c00154b5:	a3 f8 96 02 c0       	mov    ds:0xc00296f8,eax
c00154ba:	1b 3d fc 96 02 c0    	sbb    edi,DWORD PTR ds:0xc00296fc
c00154c0:	89 35 00 97 02 c0    	mov    DWORD PTR ds:0xc0029700,esi
c00154c6:	89 3d 04 97 02 c0    	mov    DWORD PTR ds:0xc0029704,edi
c00154cc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00154d2:	89 15 fc 96 02 c0    	mov    DWORD PTR ds:0xc00296fc,edx
c00154d8:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00154db:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00154de:	01 c6                	add    esi,eax
c00154e0:	11 d7                	adc    edi,edx
c00154e2:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00154e5:	83 ec 0c             	sub    esp,0xc
c00154e8:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00154eb:	53                   	push   ebx
c00154ec:	e8 86 ad fe ff       	call   c0000277 <switchToThreadASM>
c00154f1:	0f 20 c0             	mov    eax,cr0
c00154f4:	83 c8 08             	or     eax,0x8
c00154f7:	0f 22 c0             	mov    cr0,eax
c00154fa:	83 c4 10             	add    esp,0x10
c00154fd:	5b                   	pop    ebx
c00154fe:	5e                   	pop    esi
c00154ff:	5f                   	pop    edi
c0015500:	c3                   	ret    
c0015501:	8d 76 00             	lea    esi,[esi+0x0]
c0015504:	31 c0                	xor    eax,eax
c0015506:	eb 90                	jmp    c0015498 <switchToThread(ThreadControlBlock*)+0x30>
c0015508:	5b                   	pop    ebx
c0015509:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c0015513:	5e                   	pop    esi
c0015514:	5f                   	pop    edi
c0015515:	c3                   	ret    
c0015516:	66 90                	xchg   ax,ax

c0015518 <Process::addArgs(char**)>:
c0015518:	57                   	push   edi
c0015519:	56                   	push   esi
c001551a:	53                   	push   ebx
c001551b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001551f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0015523:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c001552d:	85 ff                	test   edi,edi
c001552f:	74 4f                	je     c0015580 <Process::addArgs(char**)+0x68>
c0015531:	8b 07                	mov    eax,DWORD PTR [edi]
c0015533:	85 c0                	test   eax,eax
c0015535:	74 49                	je     c0015580 <Process::addArgs(char**)+0x68>
c0015537:	31 db                	xor    ebx,ebx
c0015539:	8d 76 00             	lea    esi,[esi+0x0]
c001553c:	83 ec 0c             	sub    esp,0xc
c001553f:	50                   	push   eax
c0015540:	e8 2b b0 fe ff       	call   c0000570 <strlen>
c0015545:	83 c0 01             	add    eax,0x1
c0015548:	89 04 24             	mov    DWORD PTR [esp],eax
c001554b:	e8 66 25 ff ff       	call   c0007ab6 <malloc>
c0015550:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0015557:	5a                   	pop    edx
c0015558:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001555b:	59                   	pop    ecx
c001555c:	83 c3 01             	add    ebx,0x1
c001555f:	52                   	push   edx
c0015560:	50                   	push   eax
c0015561:	e8 da b0 fe ff       	call   c0000640 <strcpy>
c0015566:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c001556c:	83 c4 10             	add    esp,0x10
c001556f:	83 c1 01             	add    ecx,0x1
c0015572:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0015578:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001557b:	85 c0                	test   eax,eax
c001557d:	75 bd                	jne    c001553c <Process::addArgs(char**)+0x24>
c001557f:	90                   	nop
c0015580:	5b                   	pop    ebx
c0015581:	5e                   	pop    esi
c0015582:	5f                   	pop    edi
c0015583:	c3                   	ret    

c0015584 <Process::Process(char const*, Process*, char**)>:
c0015584:	56                   	push   esi
c0015585:	53                   	push   ebx
c0015586:	83 ec 14             	sub    esp,0x14
c0015589:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001558d:	05 0c 02 00 00       	add    eax,0x20c
c0015592:	bb 07 00 00 00       	mov    ebx,0x7
c0015597:	89 c6                	mov    esi,eax
c0015599:	8d 76 00             	lea    esi,[esi+0x0]
c001559c:	85 db                	test   ebx,ebx
c001559e:	78 14                	js     c00155b4 <Process::Process(char const*, Process*, char**)+0x30>
c00155a0:	83 ec 0c             	sub    esp,0xc
c00155a3:	56                   	push   esi
c00155a4:	e8 ef a5 00 00       	call   c001fb98 <ThreadControlBlock::ThreadControlBlock()>
c00155a9:	83 c4 10             	add    esp,0x10
c00155ac:	83 c6 5f             	add    esi,0x5f
c00155af:	83 eb 01             	sub    ebx,0x1
c00155b2:	eb e8                	jmp    c001559c <Process::Process(char const*, Process*, char**)+0x18>
c00155b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155b8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00155bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155c3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00155ca:	83 ec 0c             	sub    esp,0xc
c00155cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155d1:	e8 64 bb ff ff       	call   c001113a <KeNewProcessEnv(Process*)>
c00155d6:	83 c4 10             	add    esp,0x10
c00155d9:	89 c2                	mov    edx,eax
c00155db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155df:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00155e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155e9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00155f2:	a1 c0 35 02 c0       	mov    eax,ds:0xc00235c0
c00155f7:	8d 50 01             	lea    edx,[eax+0x1]
c00155fa:	89 15 c0 35 02 c0    	mov    DWORD PTR ds:0xc00235c0,edx
c0015600:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015604:	89 02                	mov    DWORD PTR [edx],eax
c0015606:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001560e:	83 ec 0c             	sub    esp,0xc
c0015611:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015615:	e8 9c 24 ff ff       	call   c0007ab6 <malloc>
c001561a:	83 c4 10             	add    esp,0x10
c001561d:	89 c3                	mov    ebx,eax
c001561f:	83 ec 08             	sub    esp,0x8
c0015622:	6a 00                	push   0x0
c0015624:	53                   	push   ebx
c0015625:	e8 3e 4a ff ff       	call   c000a068 <VAS::VAS(bool)>
c001562a:	83 c4 10             	add    esp,0x10
c001562d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015631:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015637:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001563b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015645:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015649:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001564d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015653:	e8 06 c1 ff ff       	call   c001175e <KeInitSignals()>
c0015658:	89 c2                	mov    edx,eax
c001565a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001565e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015664:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015668:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001566e:	85 c0                	test   eax,eax
c0015670:	74 42                	je     c00156b4 <Process::Process(char const*, Process*, char**)+0x130>
c0015672:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015676:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001567c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015682:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015686:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001568c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015690:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015696:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001569c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156a0:	05 0c 01 00 00       	add    eax,0x10c
c00156a5:	83 ec 08             	sub    esp,0x8
c00156a8:	52                   	push   edx
c00156a9:	50                   	push   eax
c00156aa:	e8 91 af fe ff       	call   c0000640 <strcpy>
c00156af:	83 c4 10             	add    esp,0x10
c00156b2:	eb 64                	jmp    c0015718 <Process::Process(char const*, Process*, char**)+0x194>
c00156b4:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c00156bc:	83 ec 0c             	sub    esp,0xc
c00156bf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00156c3:	e8 ee 23 ff ff       	call   c0007ab6 <malloc>
c00156c8:	83 c4 10             	add    esp,0x10
c00156cb:	89 c3                	mov    ebx,eax
c00156cd:	83 ec 08             	sub    esp,0x8
c00156d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00156d4:	53                   	push   ebx
c00156d5:	e8 8c 35 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c00156da:	83 c4 10             	add    esp,0x10
c00156dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156e1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00156e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156eb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00156f1:	83 ec 0c             	sub    esp,0xc
c00156f4:	50                   	push   eax
c00156f5:	e8 0a 2e ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c00156fa:	83 c4 10             	add    esp,0x10
c00156fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015701:	05 0c 01 00 00       	add    eax,0x10c
c0015706:	83 ec 08             	sub    esp,0x8
c0015709:	68 c1 23 02 c0       	push   0xc00223c1
c001570e:	50                   	push   eax
c001570f:	e8 2c af fe ff       	call   c0000640 <strcpy>
c0015714:	83 c4 10             	add    esp,0x10
c0015717:	90                   	nop
c0015718:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001571c:	83 c0 0c             	add    eax,0xc
c001571f:	83 ec 08             	sub    esp,0x8
c0015722:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015726:	50                   	push   eax
c0015727:	e8 14 af fe ff       	call   c0000640 <strcpy>
c001572c:	83 c4 10             	add    esp,0x10
c001572f:	83 ec 08             	sub    esp,0x8
c0015732:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015736:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001573a:	e8 d9 fd ff ff       	call   c0015518 <Process::addArgs(char**)>
c001573f:	83 c4 10             	add    esp,0x10
c0015742:	83 ec 08             	sub    esp,0x8
c0015745:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015749:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001574d:	e8 66 ed ff ff       	call   c00144b8 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015752:	83 c4 10             	add    esp,0x10
c0015755:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015759:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001575d:	83 f0 01             	xor    eax,0x1
c0015760:	88 c2                	mov    dl,al
c0015762:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015766:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c001576c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015771:	83 ec 04             	sub    esp,0x4
c0015774:	50                   	push   eax
c0015775:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015779:	68 18 24 02 c0       	push   0xc0022418
c001577e:	e8 c2 51 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015783:	83 c4 10             	add    esp,0x10
c0015786:	90                   	nop
c0015787:	83 c4 14             	add    esp,0x14
c001578a:	5b                   	pop    ebx
c001578b:	5e                   	pop    esi
c001578c:	c3                   	ret    
c001578d:	90                   	nop
c001578e:	66 90                	xchg   ax,ax

c0015790 <Process::Process(bool, char const*, Process*, char**)>:
c0015790:	56                   	push   esi
c0015791:	53                   	push   ebx
c0015792:	83 ec 24             	sub    esp,0x24
c0015795:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015799:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001579d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157a1:	05 0c 02 00 00       	add    eax,0x20c
c00157a6:	bb 07 00 00 00       	mov    ebx,0x7
c00157ab:	89 c6                	mov    esi,eax
c00157ad:	8d 76 00             	lea    esi,[esi+0x0]
c00157b0:	85 db                	test   ebx,ebx
c00157b2:	78 14                	js     c00157c8 <Process::Process(bool, char const*, Process*, char**)+0x38>
c00157b4:	83 ec 0c             	sub    esp,0xc
c00157b7:	56                   	push   esi
c00157b8:	e8 db a3 00 00       	call   c001fb98 <ThreadControlBlock::ThreadControlBlock()>
c00157bd:	83 c4 10             	add    esp,0x10
c00157c0:	83 c6 5f             	add    esi,0x5f
c00157c3:	83 eb 01             	sub    ebx,0x1
c00157c6:	eb e8                	jmp    c00157b0 <Process::Process(bool, char const*, Process*, char**)+0x20>
c00157c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157cc:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00157d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157d7:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00157de:	83 ec 0c             	sub    esp,0xc
c00157e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00157e5:	e8 50 b9 ff ff       	call   c001113a <KeNewProcessEnv(Process*)>
c00157ea:	83 c4 10             	add    esp,0x10
c00157ed:	89 c2                	mov    edx,eax
c00157ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157f3:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00157f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157fd:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015806:	a1 c0 35 02 c0       	mov    eax,ds:0xc00235c0
c001580b:	8d 50 01             	lea    edx,[eax+0x1]
c001580e:	89 15 c0 35 02 c0    	mov    DWORD PTR ds:0xc00235c0,edx
c0015814:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015818:	89 02                	mov    DWORD PTR [edx],eax
c001581a:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015822:	83 ec 0c             	sub    esp,0xc
c0015825:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015829:	e8 88 22 ff ff       	call   c0007ab6 <malloc>
c001582e:	83 c4 10             	add    esp,0x10
c0015831:	89 c3                	mov    ebx,eax
c0015833:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015838:	83 ec 08             	sub    esp,0x8
c001583b:	50                   	push   eax
c001583c:	53                   	push   ebx
c001583d:	e8 26 48 ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015842:	83 c4 10             	add    esp,0x10
c0015845:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015849:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001584f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015853:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001585d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015861:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015865:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001586b:	e8 ee be ff ff       	call   c001175e <KeInitSignals()>
c0015870:	89 c2                	mov    edx,eax
c0015872:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015876:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c001587c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015880:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015886:	85 c0                	test   eax,eax
c0015888:	74 42                	je     c00158cc <Process::Process(bool, char const*, Process*, char**)+0x13c>
c001588a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001588e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015894:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001589a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001589e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00158a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158a8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00158ae:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00158b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158b8:	05 0c 01 00 00       	add    eax,0x10c
c00158bd:	83 ec 08             	sub    esp,0x8
c00158c0:	52                   	push   edx
c00158c1:	50                   	push   eax
c00158c2:	e8 79 ad fe ff       	call   c0000640 <strcpy>
c00158c7:	83 c4 10             	add    esp,0x10
c00158ca:	eb 64                	jmp    c0015930 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c00158cc:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c00158d4:	83 ec 0c             	sub    esp,0xc
c00158d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00158db:	e8 d6 21 ff ff       	call   c0007ab6 <malloc>
c00158e0:	83 c4 10             	add    esp,0x10
c00158e3:	89 c3                	mov    ebx,eax
c00158e5:	83 ec 08             	sub    esp,0x8
c00158e8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00158ec:	53                   	push   ebx
c00158ed:	e8 74 33 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c00158f2:	83 c4 10             	add    esp,0x10
c00158f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158f9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00158ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015903:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015909:	83 ec 0c             	sub    esp,0xc
c001590c:	50                   	push   eax
c001590d:	e8 f2 2b ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015912:	83 c4 10             	add    esp,0x10
c0015915:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015919:	05 0c 01 00 00       	add    eax,0x10c
c001591e:	83 ec 08             	sub    esp,0x8
c0015921:	68 c1 23 02 c0       	push   0xc00223c1
c0015926:	50                   	push   eax
c0015927:	e8 14 ad fe ff       	call   c0000640 <strcpy>
c001592c:	83 c4 10             	add    esp,0x10
c001592f:	90                   	nop
c0015930:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015934:	83 c0 0c             	add    eax,0xc
c0015937:	83 ec 08             	sub    esp,0x8
c001593a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001593e:	50                   	push   eax
c001593f:	e8 fc ac fe ff       	call   c0000640 <strcpy>
c0015944:	83 c4 10             	add    esp,0x10
c0015947:	83 ec 08             	sub    esp,0x8
c001594a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001594e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015952:	e8 c1 fb ff ff       	call   c0015518 <Process::addArgs(char**)>
c0015957:	83 c4 10             	add    esp,0x10
c001595a:	90                   	nop
c001595b:	83 c4 24             	add    esp,0x24
c001595e:	5b                   	pop    ebx
c001595f:	5e                   	pop    esi
c0015960:	c3                   	ret    
c0015961:	8d 76 00             	lea    esi,[esi+0x0]

c0015964 <taskStartupFunction>:
c0015964:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015969:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c001596c:	c3                   	ret    
c001596d:	90                   	nop
c001596e:	66 90                	xchg   ax,ax

c0015970 <Semaphore::Semaphore(int)>:
c0015970:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015974:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015978:	89 10                	mov    DWORD PTR [eax],edx
c001597a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001597e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015985:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015989:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015990:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015994:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001599b:	90                   	nop
c001599c:	c3                   	ret    
c001599d:	90                   	nop
c001599e:	66 90                	xchg   ax,ax

c00159a0 <Mutex::Mutex()>:
c00159a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00159a4:	6a 01                	push   0x1
c00159a6:	50                   	push   eax
c00159a7:	e8 c4 ff ff ff       	call   c0015970 <Semaphore::Semaphore(int)>
c00159ac:	83 c4 08             	add    esp,0x8
c00159af:	90                   	nop
c00159b0:	c3                   	ret    
c00159b1:	90                   	nop
c00159b2:	66 90                	xchg   ax,ax

c00159b4 <Process::createThread(void (*)(void*), void*, int)>:
c00159b4:	57                   	push   edi
c00159b5:	31 c9                	xor    ecx,ecx
c00159b7:	56                   	push   esi
c00159b8:	53                   	push   ebx
c00159b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00159bd:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00159c4:	89 f2                	mov    edx,esi
c00159c6:	66 90                	xchg   ax,ax
c00159c8:	0f b7 c2             	movzx  eax,dx
c00159cb:	80 e2 01             	and    dl,0x1
c00159ce:	74 14                	je     c00159e4 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00159d0:	d1 f8                	sar    eax,1
c00159d2:	83 c1 01             	add    ecx,0x1
c00159d5:	89 c2                	mov    edx,eax
c00159d7:	83 f9 10             	cmp    ecx,0x10
c00159da:	75 ec                	jne    c00159c8 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00159dc:	31 db                	xor    ebx,ebx
c00159de:	89 d8                	mov    eax,ebx
c00159e0:	5b                   	pop    ebx
c00159e1:	5e                   	pop    esi
c00159e2:	5f                   	pop    edi
c00159e3:	c3                   	ret    
c00159e4:	b8 01 00 00 00       	mov    eax,0x1
c00159e9:	d3 e0                	shl    eax,cl
c00159eb:	09 c6                	or     esi,eax
c00159ed:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00159f0:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00159f7:	01 c0                	add    eax,eax
c00159f9:	01 c8                	add    eax,ecx
c00159fb:	8d 04 80             	lea    eax,[eax+eax*4]
c00159fe:	01 d8                	add    eax,ebx
c0015a00:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015a07:	75 0b                	jne    c0015a14 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015a09:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015a13:	90                   	nop
c0015a14:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015a1a:	83 ec 0c             	sub    esp,0xc
c0015a1d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015a20:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015a23:	01 c0                	add    eax,eax
c0015a25:	01 c8                	add    eax,ecx
c0015a27:	8d 3c 80             	lea    edi,[eax+eax*4]
c0015a2a:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015a2d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015a33:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0015a39:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015a3d:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015a43:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015a49:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015a4f:	89 ca                	mov    edx,ecx
c0015a51:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015a58:	f7 da                	neg    edx
c0015a5a:	c1 e2 15             	shl    edx,0x15
c0015a5d:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015a63:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015a69:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015a6d:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015a77:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015a7d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a81:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015a87:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015a91:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015a9b:	68 00 01 00 00       	push   0x100
c0015aa0:	e8 11 20 ff ff       	call   c0007ab6 <malloc>
c0015aa5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0015aa8:	58                   	pop    eax
c0015aa9:	5a                   	pop    edx
c0015aaa:	53                   	push   ebx
c0015aab:	68 e4 96 02 c0       	push   0xc00296e4
c0015ab0:	e8 7b 9e 00 00       	call   c001f930 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015ab5:	83 c4 10             	add    esp,0x10
c0015ab8:	89 d8                	mov    eax,ebx
c0015aba:	5b                   	pop    ebx
c0015abb:	5e                   	pop    esi
c0015abc:	5f                   	pop    edi
c0015abd:	c3                   	ret    
c0015abe:	66 90                	xchg   ax,ax

c0015ac0 <Process::createUserThread()>:
c0015ac0:	83 ec 0c             	sub    esp,0xc
c0015ac3:	68 80 00 00 00       	push   0x80
c0015ac8:	6a 00                	push   0x0
c0015aca:	68 10 54 01 c0       	push   0xc0015410
c0015acf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ad3:	50                   	push   eax
c0015ad4:	e8 db fe ff ff       	call   c00159b4 <Process::createThread(void (*)(void*), void*, int)>
c0015ad9:	83 c4 1c             	add    esp,0x1c
c0015adc:	c3                   	ret    
c0015add:	8d 76 00             	lea    esi,[esi+0x0]

c0015ae0 <setupMultitasking(void (*)())>:
c0015ae0:	56                   	push   esi
c0015ae1:	53                   	push   ebx
c0015ae2:	83 ec 04             	sub    esp,0x4
c0015ae5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ae9:	eb 11                	jmp    c0015afc <setupMultitasking(void (*)())+0x1c>
c0015aeb:	90                   	nop
c0015aec:	83 ec 0c             	sub    esp,0xc
c0015aef:	68 e4 96 02 c0       	push   0xc00296e4
c0015af4:	e8 7b 9d 00 00       	call   c001f874 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015af9:	83 c4 10             	add    esp,0x10
c0015afc:	83 ec 0c             	sub    esp,0xc
c0015aff:	68 e4 96 02 c0       	push   0xc00296e4
c0015b04:	e8 47 9d 00 00       	call   c001f850 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015b09:	83 c4 10             	add    esp,0x10
c0015b0c:	84 c0                	test   al,al
c0015b0e:	74 dc                	je     c0015aec <setupMultitasking(void (*)())+0xc>
c0015b10:	83 ec 0c             	sub    esp,0xc
c0015b13:	68 24 07 00 00       	push   0x724
c0015b18:	e8 99 1f ff ff       	call   c0007ab6 <malloc>
c0015b1d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015b24:	89 c3                	mov    ebx,eax
c0015b26:	6a 00                	push   0x0
c0015b28:	68 c5 23 02 c0       	push   0xc00223c5
c0015b2d:	6a 01                	push   0x1
c0015b2f:	50                   	push   eax
c0015b30:	e8 5b fc ff ff       	call   c0015790 <Process::Process(bool, char const*, Process*, char**)>
c0015b35:	83 c4 14             	add    esp,0x14
c0015b38:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015b3e:	89 1d f0 96 02 c0    	mov    DWORD PTR ds:0xc00296f0,ebx
c0015b44:	50                   	push   eax
c0015b45:	e8 0f 2c ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0015b4a:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015b51:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015b5b:	83 c8 01             	or     eax,0x1
c0015b5e:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015b65:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015b6b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015b6e:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015b78:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015b7e:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015b84:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015b8e:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015b98:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015ba2:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015ba8:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015bb2:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015bb8:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015bc2:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015bc9:	e8 e8 1e ff ff       	call   c0007ab6 <malloc>
c0015bce:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015bd4:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015bda:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015be0:	5a                   	pop    edx
c0015be1:	59                   	pop    ecx
c0015be2:	68 c1 23 02 c0       	push   0xc00223c1
c0015be7:	50                   	push   eax
c0015be8:	e8 53 aa fe ff       	call   c0000640 <strcpy>
c0015bed:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015bf4:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015bf8:	83 c4 14             	add    esp,0x14
c0015bfb:	5b                   	pop    ebx
c0015bfc:	5e                   	pop    esi
c0015bfd:	e9 67 a6 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015c02:	66 90                	xchg   ax,ax

c0015c04 <schedule()>:
c0015c04:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015c0a:	85 d2                	test   edx,edx
c0015c0c:	74 0e                	je     c0015c1c <schedule()+0x18>
c0015c0e:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c0015c18:	c3                   	ret    
c0015c19:	8d 76 00             	lea    esi,[esi+0x0]
c0015c1c:	53                   	push   ebx
c0015c1d:	83 ec 14             	sub    esp,0x14
c0015c20:	68 e4 96 02 c0       	push   0xc00296e4
c0015c25:	e8 26 9c 00 00       	call   c001f850 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015c2a:	83 c4 10             	add    esp,0x10
c0015c2d:	84 c0                	test   al,al
c0015c2f:	75 3f                	jne    c0015c70 <schedule()+0x6c>
c0015c31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c36:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015c39:	83 fa 01             	cmp    edx,0x1
c0015c3c:	74 3a                	je     c0015c78 <schedule()+0x74>
c0015c3e:	66 90                	xchg   ax,ax
c0015c40:	83 ec 0c             	sub    esp,0xc
c0015c43:	68 e4 96 02 c0       	push   0xc00296e4
c0015c48:	e8 1f 9c 00 00       	call   c001f86c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015c4d:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0015c54:	89 c3                	mov    ebx,eax
c0015c56:	e8 19 9c 00 00       	call   c001f874 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015c5b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015c62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c65:	e8 fe f7 ff ff       	call   c0015468 <switchToThread(ThreadControlBlock*)>
c0015c6a:	83 c4 10             	add    esp,0x10
c0015c6d:	8d 76 00             	lea    esi,[esi+0x0]
c0015c70:	83 c4 08             	add    esp,0x8
c0015c73:	5b                   	pop    ebx
c0015c74:	c3                   	ret    
c0015c75:	8d 76 00             	lea    esi,[esi+0x0]
c0015c78:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015c7f:	83 ec 08             	sub    esp,0x8
c0015c82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c87:	50                   	push   eax
c0015c88:	68 e4 96 02 c0       	push   0xc00296e4
c0015c8d:	e8 9e 9c 00 00       	call   c001f930 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015c92:	83 c4 10             	add    esp,0x10
c0015c95:	eb a9                	jmp    c0015c40 <schedule()+0x3c>
c0015c97:	90                   	nop

c0015c98 <Semaphore::tryAcquire()>:
c0015c98:	53                   	push   ebx
c0015c99:	83 ec 08             	sub    esp,0x8
c0015c9c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015ca0:	fa                   	cli    
c0015ca1:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015ca6:	8d 50 01             	lea    edx,[eax+0x1]
c0015ca9:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015caf:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015cb5:	8d 5a 01             	lea    ebx,[edx+0x1]
c0015cb8:	89 1d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ebx
c0015cbe:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015cc1:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015cc3:	7c 33                	jl     c0015cf8 <Semaphore::tryAcquire()+0x60>
c0015cc5:	89 15 c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,edx
c0015ccb:	85 d2                	test   edx,edx
c0015ccd:	75 0d                	jne    c0015cdc <Semaphore::tryAcquire()+0x44>
c0015ccf:	8b 15 c0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c0
c0015cd5:	85 d2                	test   edx,edx
c0015cd7:	75 6f                	jne    c0015d48 <Semaphore::tryAcquire()+0xb0>
c0015cd9:	8d 76 00             	lea    esi,[esi+0x0]
c0015cdc:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015ce1:	85 c0                	test   eax,eax
c0015ce3:	74 0b                	je     c0015cf0 <Semaphore::tryAcquire()+0x58>
c0015ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0015ce8:	31 c0                	xor    eax,eax
c0015cea:	83 c4 08             	add    esp,0x8
c0015ced:	5b                   	pop    ebx
c0015cee:	c3                   	ret    
c0015cef:	90                   	nop
c0015cf0:	fb                   	sti    
c0015cf1:	83 c4 08             	add    esp,0x8
c0015cf4:	5b                   	pop    ebx
c0015cf5:	c3                   	ret    
c0015cf6:	66 90                	xchg   ax,ax
c0015cf8:	83 c3 01             	add    ebx,0x1
c0015cfb:	89 15 c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,edx
c0015d01:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015d04:	85 d2                	test   edx,edx
c0015d06:	75 24                	jne    c0015d2c <Semaphore::tryAcquire()+0x94>
c0015d08:	8b 0d c0 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c0
c0015d0e:	85 c9                	test   ecx,ecx
c0015d10:	74 1a                	je     c0015d2c <Semaphore::tryAcquire()+0x94>
c0015d12:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015d1c:	e8 e3 fe ff ff       	call   c0015c04 <schedule()>
c0015d21:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d26:	83 e8 01             	sub    eax,0x1
c0015d29:	8d 76 00             	lea    esi,[esi+0x0]
c0015d2c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015d31:	85 c0                	test   eax,eax
c0015d33:	75 0b                	jne    c0015d40 <Semaphore::tryAcquire()+0xa8>
c0015d35:	fb                   	sti    
c0015d36:	b0 01                	mov    al,0x1
c0015d38:	83 c4 08             	add    esp,0x8
c0015d3b:	5b                   	pop    ebx
c0015d3c:	c3                   	ret    
c0015d3d:	8d 76 00             	lea    esi,[esi+0x0]
c0015d40:	b0 01                	mov    al,0x1
c0015d42:	83 c4 08             	add    esp,0x8
c0015d45:	5b                   	pop    ebx
c0015d46:	c3                   	ret    
c0015d47:	90                   	nop
c0015d48:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015d52:	e8 ad fe ff ff       	call   c0015c04 <schedule()>
c0015d57:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d5c:	83 e8 01             	sub    eax,0x1
c0015d5f:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015d64:	85 c0                	test   eax,eax
c0015d66:	75 80                	jne    c0015ce8 <Semaphore::tryAcquire()+0x50>
c0015d68:	eb 86                	jmp    c0015cf0 <Semaphore::tryAcquire()+0x58>
c0015d6a:	66 90                	xchg   ax,ax

c0015d6c <Semaphore::assertLocked(char const*)>:
c0015d6c:	83 ec 0c             	sub    esp,0xc
c0015d6f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d73:	fa                   	cli    
c0015d74:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0015d7a:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015d7f:	83 c1 01             	add    ecx,0x1
c0015d82:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0015d88:	8d 48 01             	lea    ecx,[eax+0x1]
c0015d8b:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015d91:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015d93:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015d96:	7c 28                	jl     c0015dc0 <Semaphore::assertLocked(char const*)+0x54>
c0015d98:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015d9d:	85 c0                	test   eax,eax
c0015d9f:	75 0b                	jne    c0015dac <Semaphore::assertLocked(char const*)+0x40>
c0015da1:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015da6:	85 c0                	test   eax,eax
c0015da8:	75 32                	jne    c0015ddc <Semaphore::assertLocked(char const*)+0x70>
c0015daa:	66 90                	xchg   ax,ax
c0015dac:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015db1:	83 e8 01             	sub    eax,0x1
c0015db4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015db9:	75 01                	jne    c0015dbc <Semaphore::assertLocked(char const*)+0x50>
c0015dbb:	fb                   	sti    
c0015dbc:	83 c4 0c             	add    esp,0xc
c0015dbf:	c3                   	ret    
c0015dc0:	83 ec 0c             	sub    esp,0xc
c0015dc3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015dc7:	52                   	push   edx
c0015dc8:	e8 78 b5 ff ff       	call   c0011345 <KePanic(char const*)>
c0015dcd:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015dd2:	83 c4 10             	add    esp,0x10
c0015dd5:	83 e8 01             	sub    eax,0x1
c0015dd8:	eb be                	jmp    c0015d98 <Semaphore::assertLocked(char const*)+0x2c>
c0015dda:	66 90                	xchg   ax,ax
c0015ddc:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015de6:	e8 19 fe ff ff       	call   c0015c04 <schedule()>
c0015deb:	eb bf                	jmp    c0015dac <Semaphore::assertLocked(char const*)+0x40>
c0015ded:	8d 76 00             	lea    esi,[esi+0x0]

c0015df0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015df0:	83 ec 0c             	sub    esp,0xc
c0015df3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015df8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015dfc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015dff:	e8 00 fe ff ff       	call   c0015c04 <schedule()>
c0015e04:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e09:	83 e8 01             	sub    eax,0x1
c0015e0c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e11:	75 01                	jne    c0015e14 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015e13:	fb                   	sti    
c0015e14:	83 c4 0c             	add    esp,0xc
c0015e17:	c3                   	ret    

c0015e18 <blockTask(TaskState)>:
c0015e18:	83 ec 0c             	sub    esp,0xc
c0015e1b:	fa                   	cli    
c0015e1c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e21:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e25:	83 c0 01             	add    eax,0x1
c0015e28:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e32:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015e35:	e8 ca fd ff ff       	call   c0015c04 <schedule()>
c0015e3a:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e3f:	83 e8 01             	sub    eax,0x1
c0015e42:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e47:	75 03                	jne    c0015e4c <blockTask(TaskState)+0x34>
c0015e49:	fb                   	sti    
c0015e4a:	66 90                	xchg   ax,ax
c0015e4c:	83 c4 0c             	add    esp,0xc
c0015e4f:	c3                   	ret    

c0015e50 <waitTask(int, int*, int)>:
c0015e50:	83 ec 18             	sub    esp,0x18
c0015e53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e58:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015e5c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015e5f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015e63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e68:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015e6b:	6a 07                	push   0x7
c0015e6d:	e8 a6 ff ff ff       	call   c0015e18 <blockTask(TaskState)>
c0015e72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e77:	83 c4 10             	add    esp,0x10
c0015e7a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015e7d:	85 d2                	test   edx,edx
c0015e7f:	74 0b                	je     c0015e8c <waitTask(int, int*, int)+0x3c>
c0015e81:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015e84:	89 02                	mov    DWORD PTR [edx],eax
c0015e86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e8b:	90                   	nop
c0015e8c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015e8f:	83 c4 0c             	add    esp,0xc
c0015e92:	c3                   	ret    
c0015e93:	90                   	nop

c0015e94 <milliTenthSleepUntil(unsigned int)>:
c0015e94:	83 ec 0c             	sub    esp,0xc
c0015e97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e9b:	39 05 ec 88 02 c0    	cmp    DWORD PTR ds:0xc00288ec,eax
c0015ea1:	76 05                	jbe    c0015ea8 <milliTenthSleepUntil(unsigned int)+0x14>
c0015ea3:	90                   	nop
c0015ea4:	83 c4 0c             	add    esp,0xc
c0015ea7:	c3                   	ret    
c0015ea8:	fa                   	cli    
c0015ea9:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015eaf:	83 ec 08             	sub    esp,0x8
c0015eb2:	83 c2 01             	add    edx,0x1
c0015eb5:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0015ebb:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015ec1:	83 c1 01             	add    ecx,0x1
c0015ec4:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015eca:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015ed0:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015ed3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ed8:	50                   	push   eax
c0015ed9:	68 d8 96 02 c0       	push   0xc00296d8
c0015ede:	e8 4d 9a 00 00       	call   c001f930 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015ee3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015eea:	e8 29 ff ff ff       	call   c0015e18 <blockTask(TaskState)>
c0015eef:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015ef4:	83 c4 10             	add    esp,0x10
c0015ef7:	83 e8 01             	sub    eax,0x1
c0015efa:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015eff:	85 c0                	test   eax,eax
c0015f01:	75 09                	jne    c0015f0c <milliTenthSleepUntil(unsigned int)+0x78>
c0015f03:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015f08:	85 c0                	test   eax,eax
c0015f0a:	75 14                	jne    c0015f20 <milliTenthSleepUntil(unsigned int)+0x8c>
c0015f0c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f11:	83 e8 01             	sub    eax,0x1
c0015f14:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f19:	75 89                	jne    c0015ea4 <milliTenthSleepUntil(unsigned int)+0x10>
c0015f1b:	fb                   	sti    
c0015f1c:	83 c4 0c             	add    esp,0xc
c0015f1f:	c3                   	ret    
c0015f20:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015f2a:	e8 d5 fc ff ff       	call   c0015c04 <schedule()>
c0015f2f:	eb db                	jmp    c0015f0c <milliTenthSleepUntil(unsigned int)+0x78>
c0015f31:	8d 76 00             	lea    esi,[esi+0x0]

c0015f34 <milliTenthSleep(unsigned int)>:
c0015f34:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015f38:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c0015f3d:	01 c2                	add    edx,eax
c0015f3f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015f43:	e9 4c ff ff ff       	jmp    c0015e94 <milliTenthSleepUntil(unsigned int)>

c0015f48 <sleep(unsigned int)>:
c0015f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f4c:	8d 04 80             	lea    eax,[eax+eax*4]
c0015f4f:	8d 04 80             	lea    eax,[eax+eax*4]
c0015f52:	8d 04 80             	lea    eax,[eax+eax*4]
c0015f55:	8d 04 80             	lea    eax,[eax+eax*4]
c0015f58:	c1 e0 04             	shl    eax,0x4
c0015f5b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015f5f:	eb d3                	jmp    c0015f34 <milliTenthSleep(unsigned int)>
c0015f61:	90                   	nop
c0015f62:	66 90                	xchg   ax,ax

c0015f64 <Semaphore::acquire()>:
c0015f64:	83 ec 0c             	sub    esp,0xc
c0015f67:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f6b:	fa                   	cli    
c0015f6c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f71:	83 c0 01             	add    eax,0x1
c0015f74:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f79:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015f7e:	8d 48 01             	lea    ecx,[eax+0x1]
c0015f81:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015f87:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015f8a:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015f8c:	7d 2e                	jge    c0015fbc <Semaphore::acquire()+0x58>
c0015f8e:	83 c1 01             	add    ecx,0x1
c0015f91:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015f94:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015f99:	85 c0                	test   eax,eax
c0015f9b:	75 0b                	jne    c0015fa8 <Semaphore::acquire()+0x44>
c0015f9d:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015fa2:	85 c0                	test   eax,eax
c0015fa4:	75 66                	jne    c001600c <Semaphore::acquire()+0xa8>
c0015fa6:	66 90                	xchg   ax,ax
c0015fa8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015fad:	83 e8 01             	sub    eax,0x1
c0015fb0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015fb5:	75 01                	jne    c0015fb8 <Semaphore::acquire()+0x54>
c0015fb7:	fb                   	sti    
c0015fb8:	83 c4 0c             	add    esp,0xc
c0015fbb:	c3                   	ret    
c0015fbc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fc1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015fc8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015fcb:	85 c9                	test   ecx,ecx
c0015fcd:	74 51                	je     c0016020 <Semaphore::acquire()+0xbc>
c0015fcf:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0015fd2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015fd8:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0015fdb:	90                   	nop
c0015fdc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fe1:	83 ec 0c             	sub    esp,0xc
c0015fe4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0015fe7:	68 44 24 02 c0       	push   0xc0022444
c0015fec:	e8 54 49 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015ff1:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015ff8:	e8 1b fe ff ff       	call   c0015e18 <blockTask(TaskState)>
c0015ffd:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016002:	83 c4 10             	add    esp,0x10
c0016005:	83 e8 01             	sub    eax,0x1
c0016008:	eb 8a                	jmp    c0015f94 <Semaphore::acquire()+0x30>
c001600a:	66 90                	xchg   ax,ax
c001600c:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0016016:	e8 e9 fb ff ff       	call   c0015c04 <schedule()>
c001601b:	eb 8b                	jmp    c0015fa8 <Semaphore::acquire()+0x44>
c001601d:	8d 76 00             	lea    esi,[esi+0x0]
c0016020:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016025:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016028:	eb b2                	jmp    c0015fdc <Semaphore::acquire()+0x78>
c001602a:	66 90                	xchg   ax,ax

c001602c <taskReturned>:
c001602c:	83 ec 18             	sub    esp,0x18
c001602f:	68 64 24 02 c0       	push   0xc0022464
c0016034:	e8 0c b3 ff ff       	call   c0011345 <KePanic(char const*)>
c0016039:	83 c4 10             	add    esp,0x10
c001603c:	83 ec 0c             	sub    esp,0xc
c001603f:	6a 02                	push   0x2
c0016041:	e8 d2 fd ff ff       	call   c0015e18 <blockTask(TaskState)>
c0016046:	fa                   	cli    
c0016047:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001604c:	83 c0 01             	add    eax,0x1
c001604f:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016054:	e8 ab fb ff ff       	call   c0015c04 <schedule()>
c0016059:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001605e:	83 c4 10             	add    esp,0x10
c0016061:	83 e8 01             	sub    eax,0x1
c0016064:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016069:	85 c0                	test   eax,eax
c001606b:	75 cf                	jne    c001603c <taskReturned+0x10>
c001606d:	fb                   	sti    
c001606e:	eb cc                	jmp    c001603c <taskReturned+0x10>

c0016070 <Thr::processFromPID(int)>:
c0016070:	57                   	push   edi
c0016071:	56                   	push   esi
c0016072:	53                   	push   ebx
c0016073:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016077:	fa                   	cli    
c0016078:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c001607e:	83 ec 0c             	sub    esp,0xc
c0016081:	83 c1 01             	add    ecx,0x1
c0016084:	68 e4 96 02 c0       	push   0xc00296e4
c0016089:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c001608f:	e8 d8 97 00 00       	call   c001f86c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016094:	83 c4 10             	add    esp,0x10
c0016097:	89 c7                	mov    edi,eax
c0016099:	eb 15                	jmp    c00160b0 <Thr::processFromPID(int)+0x40>
c001609b:	90                   	nop
c001609c:	83 ec 0c             	sub    esp,0xc
c001609f:	68 e4 96 02 c0       	push   0xc00296e4
c00160a4:	e8 c3 97 00 00       	call   c001f86c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00160a9:	83 c4 10             	add    esp,0x10
c00160ac:	39 f8                	cmp    eax,edi
c00160ae:	74 50                	je     c0016100 <Thr::processFromPID(int)+0x90>
c00160b0:	83 ec 0c             	sub    esp,0xc
c00160b3:	68 e4 96 02 c0       	push   0xc00296e4
c00160b8:	e8 af 97 00 00       	call   c001f86c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00160bd:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c00160c4:	89 c3                	mov    ebx,eax
c00160c6:	e8 a9 97 00 00       	call   c001f874 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00160cb:	58                   	pop    eax
c00160cc:	5a                   	pop    edx
c00160cd:	53                   	push   ebx
c00160ce:	68 e4 96 02 c0       	push   0xc00296e4
c00160d3:	e8 58 98 00 00       	call   c001f930 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00160d8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00160db:	83 c4 10             	add    esp,0x10
c00160de:	39 30                	cmp    DWORD PTR [eax],esi
c00160e0:	75 ba                	jne    c001609c <Thr::processFromPID(int)+0x2c>
c00160e2:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00160e7:	83 e8 01             	sub    eax,0x1
c00160ea:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00160ef:	74 0b                	je     c00160fc <Thr::processFromPID(int)+0x8c>
c00160f1:	8d 76 00             	lea    esi,[esi+0x0]
c00160f4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00160f7:	5b                   	pop    ebx
c00160f8:	5e                   	pop    esi
c00160f9:	5f                   	pop    edi
c00160fa:	c3                   	ret    
c00160fb:	90                   	nop
c00160fc:	fb                   	sti    
c00160fd:	eb f5                	jmp    c00160f4 <Thr::processFromPID(int)+0x84>
c00160ff:	90                   	nop
c0016100:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016105:	83 e8 01             	sub    eax,0x1
c0016108:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001610d:	75 05                	jne    c0016114 <Thr::processFromPID(int)+0xa4>
c001610f:	fb                   	sti    
c0016110:	5b                   	pop    ebx
c0016111:	5e                   	pop    esi
c0016112:	5f                   	pop    edi
c0016113:	c3                   	ret    
c0016114:	5b                   	pop    ebx
c0016115:	31 c0                	xor    eax,eax
c0016117:	5e                   	pop    esi
c0016118:	5f                   	pop    edi
c0016119:	c3                   	ret    
c001611a:	66 90                	xchg   ax,ax

c001611c <unblockTask(ThreadControlBlock*)>:
c001611c:	53                   	push   ebx
c001611d:	83 ec 08             	sub    esp,0x8
c0016120:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016124:	fa                   	cli    
c0016125:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001612a:	83 c0 01             	add    eax,0x1
c001612d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016132:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016135:	85 c0                	test   eax,eax
c0016137:	74 67                	je     c00161a0 <unblockTask(ThreadControlBlock*)+0x84>
c0016139:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001613c:	83 f8 01             	cmp    eax,0x1
c001613f:	74 37                	je     c0016178 <unblockTask(ThreadControlBlock*)+0x5c>
c0016141:	83 ec 0c             	sub    esp,0xc
c0016144:	68 e4 96 02 c0       	push   0xc00296e4
c0016149:	e8 1e 97 00 00       	call   c001f86c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001614e:	83 c4 10             	add    esp,0x10
c0016151:	85 c0                	test   eax,eax
c0016153:	75 1b                	jne    c0016170 <unblockTask(ThreadControlBlock*)+0x54>
c0016155:	eb 5d                	jmp    c00161b4 <unblockTask(ThreadControlBlock*)+0x98>
c0016157:	90                   	nop
c0016158:	83 ec 08             	sub    esp,0x8
c001615b:	50                   	push   eax
c001615c:	68 e4 96 02 c0       	push   0xc00296e4
c0016161:	e8 26 9a 00 00       	call   c001fb8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0016166:	83 c4 10             	add    esp,0x10
c0016169:	85 c0                	test   eax,eax
c001616b:	74 47                	je     c00161b4 <unblockTask(ThreadControlBlock*)+0x98>
c001616d:	8d 76 00             	lea    esi,[esi+0x0]
c0016170:	39 c3                	cmp    ebx,eax
c0016172:	75 e4                	jne    c0016158 <unblockTask(ThreadControlBlock*)+0x3c>
c0016174:	eb 12                	jmp    c0016188 <unblockTask(ThreadControlBlock*)+0x6c>
c0016176:	66 90                	xchg   ax,ax
c0016178:	83 ec 0c             	sub    esp,0xc
c001617b:	68 e3 23 02 c0       	push   0xc00223e3
c0016180:	e8 c0 47 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016185:	83 c4 10             	add    esp,0x10
c0016188:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001618d:	83 e8 01             	sub    eax,0x1
c0016190:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016195:	75 01                	jne    c0016198 <unblockTask(ThreadControlBlock*)+0x7c>
c0016197:	fb                   	sti    
c0016198:	83 c4 08             	add    esp,0x8
c001619b:	5b                   	pop    ebx
c001619c:	c3                   	ret    
c001619d:	8d 76 00             	lea    esi,[esi+0x0]
c00161a0:	83 ec 0c             	sub    esp,0xc
c00161a3:	68 cc 23 02 c0       	push   0xc00223cc
c00161a8:	e8 98 47 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00161ad:	83 c4 10             	add    esp,0x10
c00161b0:	eb d6                	jmp    c0016188 <unblockTask(ThreadControlBlock*)+0x6c>
c00161b2:	66 90                	xchg   ax,ax
c00161b4:	83 ec 08             	sub    esp,0x8
c00161b7:	53                   	push   ebx
c00161b8:	68 e4 96 02 c0       	push   0xc00296e4
c00161bd:	e8 6e 97 00 00       	call   c001f930 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00161c2:	83 c4 10             	add    esp,0x10
c00161c5:	eb c1                	jmp    c0016188 <unblockTask(ThreadControlBlock*)+0x6c>
c00161c7:	90                   	nop

c00161c8 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00161c8:	55                   	push   ebp
c00161c9:	57                   	push   edi
c00161ca:	56                   	push   esi
c00161cb:	53                   	push   ebx
c00161cc:	83 ec 1c             	sub    esp,0x1c
c00161cf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00161d3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00161d6:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00161dc:	85 ed                	test   ebp,ebp
c00161de:	7e 28                	jle    c0016208 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00161e0:	31 f6                	xor    esi,esi
c00161e2:	66 90                	xchg   ax,ax
c00161e4:	83 ec 0c             	sub    esp,0xc
c00161e7:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00161ee:	83 c6 01             	add    esi,0x1
c00161f1:	57                   	push   edi
c00161f2:	e8 cf 18 ff ff       	call   c0007ac6 <free>
c00161f7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00161fa:	83 c4 10             	add    esp,0x10
c00161fd:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0016203:	7f df                	jg     c00161e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016205:	8d 76 00             	lea    esi,[esi+0x0]
c0016208:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0016212:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016217:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001621a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c001621d:	d3 c0                	rol    eax,cl
c001621f:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0016226:	21 c8                	and    eax,ecx
c0016228:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c001622f:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016232:	89 f7                	mov    edi,esi
c0016234:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001623c:	0f 85 72 01 00 00    	jne    c00163b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016242:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016248:	85 ed                	test   ebp,ebp
c001624a:	74 1c                	je     c0016268 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c001624c:	83 ec 0c             	sub    esp,0xc
c001624f:	55                   	push   ebp
c0016250:	e8 01 ae ff ff       	call   c0011056 <EnvVarContainer::~EnvVarContainer()>
c0016255:	59                   	pop    ecx
c0016256:	5e                   	pop    esi
c0016257:	6a 0c                	push   0xc
c0016259:	55                   	push   ebp
c001625a:	e8 b9 45 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001625f:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016262:	83 c4 10             	add    esp,0x10
c0016265:	89 f7                	mov    edi,esi
c0016267:	90                   	nop
c0016268:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001626e:	85 c0                	test   eax,eax
c0016270:	0f 84 b2 00 00 00    	je     c0016328 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016276:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016279:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001627d:	31 c9                	xor    ecx,ecx
c001627f:	eb 17                	jmp    c0016298 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016281:	8d 76 00             	lea    esi,[esi+0x0]
c0016284:	83 c1 01             	add    ecx,0x1
c0016287:	83 f9 10             	cmp    ecx,0x10
c001628a:	0f 84 98 00 00 00    	je     c0016328 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016290:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016296:	66 90                	xchg   ax,ax
c0016298:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001629f:	d3 fa                	sar    edx,cl
c00162a1:	80 e2 01             	and    dl,0x1
c00162a4:	74 de                	je     c0016284 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00162a6:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00162a9:	01 d2                	add    edx,edx
c00162ab:	01 ca                	add    edx,ecx
c00162ad:	8d 14 92             	lea    edx,[edx+edx*4]
c00162b0:	01 d0                	add    eax,edx
c00162b2:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00162b8:	83 fd 07             	cmp    ebp,0x7
c00162bb:	75 c7                	jne    c0016284 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00162bd:	05 40 02 00 00       	add    eax,0x240
c00162c2:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00162c5:	83 fd ff             	cmp    ebp,0xffffffff
c00162c8:	0f 8c ee 00 00 00    	jl     c00163bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00162ce:	0f 84 ac 01 00 00    	je     c0016480 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00162d4:	85 ed                	test   ebp,ebp
c00162d6:	0f 84 90 01 00 00    	je     c001646c <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00162dc:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00162de:	75 a4                	jne    c0016284 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00162e0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00162e6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00162ea:	01 d0                	add    eax,edx
c00162ec:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00162f0:	83 ec 0c             	sub    esp,0xc
c00162f3:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00162f9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00162fc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016302:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016309:	50                   	push   eax
c001630a:	e8 0d fe ff ff       	call   c001611c <unblockTask(ThreadControlBlock*)>
c001630f:	83 c4 10             	add    esp,0x10
c0016312:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016315:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016319:	89 f7                	mov    edi,esi
c001631b:	83 c1 01             	add    ecx,0x1
c001631e:	83 f9 10             	cmp    ecx,0x10
c0016321:	0f 85 69 ff ff ff    	jne    c0016290 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0016327:	90                   	nop
c0016328:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001632e:	85 c0                	test   eax,eax
c0016330:	74 62                	je     c0016394 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016332:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016338:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001633e:	74 54                	je     c0016394 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016340:	83 ec 0c             	sub    esp,0xc
c0016343:	68 e4 96 02 c0       	push   0xc00296e4
c0016348:	e8 1f 95 00 00       	call   c001f86c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001634d:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016354:	89 c7                	mov    edi,eax
c0016356:	e8 f5 94 00 00       	call   c001f850 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001635b:	83 c4 10             	add    esp,0x10
c001635e:	84 c0                	test   al,al
c0016360:	0f 84 ce 00 00 00    	je     c0016434 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0016366:	66 90                	xchg   ax,ax
c0016368:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001636b:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016371:	85 d2                	test   edx,edx
c0016373:	74 0f                	je     c0016384 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0016375:	83 ec 0c             	sub    esp,0xc
c0016378:	8b 02                	mov    eax,DWORD PTR [edx]
c001637a:	52                   	push   edx
c001637b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001637e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016381:	83 c4 10             	add    esp,0x10
c0016384:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001638e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0016391:	8d 76 00             	lea    esi,[esi+0x0]
c0016394:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001639a:	85 db                	test   ebx,ebx
c001639c:	74 16                	je     c00163b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001639e:	83 ec 0c             	sub    esp,0xc
c00163a1:	53                   	push   ebx
c00163a2:	e8 0b 38 ff ff       	call   c0009bb2 <VAS::~VAS()>
c00163a7:	58                   	pop    eax
c00163a8:	5a                   	pop    edx
c00163a9:	6a 14                	push   0x14
c00163ab:	53                   	push   ebx
c00163ac:	e8 67 44 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00163b1:	83 c4 10             	add    esp,0x10
c00163b4:	83 c4 1c             	add    esp,0x1c
c00163b7:	5b                   	pop    ebx
c00163b8:	5e                   	pop    esi
c00163b9:	5f                   	pop    edi
c00163ba:	5d                   	pop    ebp
c00163bb:	c3                   	ret    
c00163bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00163c0:	83 ec 0c             	sub    esp,0xc
c00163c3:	68 98 24 02 c0       	push   0xc0022498
c00163c8:	e8 78 af ff ff       	call   c0011345 <KePanic(char const*)>
c00163cd:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00163d0:	83 c4 10             	add    esp,0x10
c00163d3:	89 f7                	mov    edi,esi
c00163d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00163d9:	e9 a6 fe ff ff       	jmp    c0016284 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00163de:	66 90                	xchg   ax,ax
c00163e0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00163e6:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00163ec:	75 1e                	jne    c001640c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00163ee:	83 ec 0c             	sub    esp,0xc
c00163f1:	68 00 25 02 c0       	push   0xc0022500
c00163f6:	e8 4a 45 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00163fb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0016402:	e8 11 fa ff ff       	call   c0015e18 <blockTask(TaskState)>
c0016407:	83 c4 10             	add    esp,0x10
c001640a:	66 90                	xchg   ax,ax
c001640c:	83 ec 08             	sub    esp,0x8
c001640f:	56                   	push   esi
c0016410:	68 e4 96 02 c0       	push   0xc00296e4
c0016415:	e8 16 95 00 00       	call   c001f930 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001641a:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016421:	e8 46 94 00 00       	call   c001f86c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016426:	83 c4 10             	add    esp,0x10
c0016429:	39 f8                	cmp    eax,edi
c001642b:	0f 84 37 ff ff ff    	je     c0016368 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0016431:	8d 76 00             	lea    esi,[esi+0x0]
c0016434:	83 ec 0c             	sub    esp,0xc
c0016437:	68 e4 96 02 c0       	push   0xc00296e4
c001643c:	e8 2b 94 00 00       	call   c001f86c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016441:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016448:	89 c6                	mov    esi,eax
c001644a:	e8 25 94 00 00       	call   c001f874 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001644f:	83 c4 10             	add    esp,0x10
c0016452:	39 f3                	cmp    ebx,esi
c0016454:	74 b6                	je     c001640c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016456:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016459:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001645c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0016462:	75 a8                	jne    c001640c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016464:	e9 77 ff ff ff       	jmp    c00163e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016469:	8d 76 00             	lea    esi,[esi+0x0]
c001646c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016470:	83 ec 0c             	sub    esp,0xc
c0016473:	68 cc 24 02 c0       	push   0xc00224cc
c0016478:	e9 4b ff ff ff       	jmp    c00163c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c001647d:	8d 76 00             	lea    esi,[esi+0x0]
c0016480:	8b 36                	mov    esi,DWORD PTR [esi]
c0016482:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016486:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016489:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001648c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0016492:	01 d7                	add    edi,edx
c0016494:	89 f8                	mov    eax,edi
c0016496:	e9 51 fe ff ff       	jmp    c00162ec <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c001649b:	90                   	nop

c001649c <cleanerTaskFunction(void*)>:
c001649c:	53                   	push   ebx
c001649d:	83 ec 08             	sub    esp,0x8
c00164a0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00164a5:	83 e8 01             	sub    eax,0x1
c00164a8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00164ad:	75 01                	jne    c00164b0 <cleanerTaskFunction(void*)+0x14>
c00164af:	fb                   	sti    
c00164b0:	fa                   	cli    
c00164b1:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00164b6:	80 3d ac 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296ac,0x0
c00164bd:	8d 50 01             	lea    edx,[eax+0x1]
c00164c0:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00164c6:	0f 84 c4 00 00 00    	je     c0016590 <cleanerTaskFunction(void*)+0xf4>
c00164cc:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00164d1:	85 c0                	test   eax,eax
c00164d3:	75 03                	jne    c00164d8 <cleanerTaskFunction(void*)+0x3c>
c00164d5:	fb                   	sti    
c00164d6:	66 90                	xchg   ax,ax
c00164d8:	c6 05 ac 96 02 c0 00 	mov    BYTE PTR ds:0xc00296ac,0x0
c00164df:	fa                   	cli    
c00164e0:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c00164e6:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c00164ec:	83 c2 01             	add    edx,0x1
c00164ef:	83 c1 01             	add    ecx,0x1
c00164f2:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00164f8:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c00164fe:	fa                   	cli    
c00164ff:	8b 1d c8 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296c8
c0016505:	83 c3 01             	add    ebx,0x1
c0016508:	89 1d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ebx
c001650e:	eb 28                	jmp    c0016538 <cleanerTaskFunction(void*)+0x9c>
c0016510:	83 ec 0c             	sub    esp,0xc
c0016513:	68 cc 96 02 c0       	push   0xc00296cc
c0016518:	e8 4f 93 00 00       	call   c001f86c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001651d:	c7 04 24 cc 96 02 c0 	mov    DWORD PTR [esp],0xc00296cc
c0016524:	89 c3                	mov    ebx,eax
c0016526:	e8 49 93 00 00       	call   c001f874 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001652b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001652e:	e8 95 fc ff ff       	call   c00161c8 <cleanupTerminatedTask(ThreadControlBlock*)>
c0016533:	83 c4 10             	add    esp,0x10
c0016536:	66 90                	xchg   ax,ax
c0016538:	83 ec 0c             	sub    esp,0xc
c001653b:	68 cc 96 02 c0       	push   0xc00296cc
c0016540:	e8 0b 93 00 00       	call   c001f850 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016545:	83 c4 10             	add    esp,0x10
c0016548:	84 c0                	test   al,al
c001654a:	74 c4                	je     c0016510 <cleanerTaskFunction(void*)+0x74>
c001654c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016551:	83 e8 01             	sub    eax,0x1
c0016554:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016559:	75 01                	jne    c001655c <cleanerTaskFunction(void*)+0xc0>
c001655b:	fb                   	sti    
c001655c:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016561:	83 e8 01             	sub    eax,0x1
c0016564:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016569:	0f 85 31 ff ff ff    	jne    c00164a0 <cleanerTaskFunction(void*)+0x4>
c001656f:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0016574:	85 c0                	test   eax,eax
c0016576:	0f 84 24 ff ff ff    	je     c00164a0 <cleanerTaskFunction(void*)+0x4>
c001657c:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0016586:	e8 79 f6 ff ff       	call   c0015c04 <schedule()>
c001658b:	e9 10 ff ff ff       	jmp    c00164a0 <cleanerTaskFunction(void*)+0x4>
c0016590:	83 ec 0c             	sub    esp,0xc
c0016593:	6a 02                	push   0x2
c0016595:	e8 56 f8 ff ff       	call   c0015df0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001659a:	83 c4 10             	add    esp,0x10
c001659d:	e9 36 ff ff ff       	jmp    c00164d8 <cleanerTaskFunction(void*)+0x3c>
c00165a2:	66 90                	xchg   ax,ax

c00165a4 <terminateTask(int)>:
c00165a4:	83 ec 14             	sub    esp,0x14
c00165a7:	fa                   	cli    
c00165a8:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c00165ae:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c00165b4:	83 c2 01             	add    edx,0x1
c00165b7:	83 c1 01             	add    ecx,0x1
c00165ba:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00165c0:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c00165c6:	fa                   	cli    
c00165c7:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00165cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00165d0:	83 c0 01             	add    eax,0x1
c00165d3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00165d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165dd:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00165e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165e5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00165e8:	50                   	push   eax
c00165e9:	68 cc 96 02 c0       	push   0xc00296cc
c00165ee:	e8 3d 93 00 00       	call   c001f930 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00165f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165f8:	83 c4 10             	add    esp,0x10
c00165fb:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016602:	a1 a8 96 02 c0       	mov    eax,ds:0xc00296a8
c0016607:	85 c0                	test   eax,eax
c0016609:	74 65                	je     c0016670 <terminateTask(int)+0xcc>
c001660b:	83 ec 0c             	sub    esp,0xc
c001660e:	c6 05 ac 96 02 c0 01 	mov    BYTE PTR ds:0xc00296ac,0x1
c0016615:	50                   	push   eax
c0016616:	e8 01 fb ff ff       	call   c001611c <unblockTask(ThreadControlBlock*)>
c001661b:	83 c4 10             	add    esp,0x10
c001661e:	66 90                	xchg   ax,ax
c0016620:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016625:	83 e8 01             	sub    eax,0x1
c0016628:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001662d:	75 01                	jne    c0016630 <terminateTask(int)+0x8c>
c001662f:	fb                   	sti    
c0016630:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016635:	83 e8 01             	sub    eax,0x1
c0016638:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c001663d:	75 09                	jne    c0016648 <terminateTask(int)+0xa4>
c001663f:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c0016646:	75 3c                	jne    c0016684 <terminateTask(int)+0xe0>
c0016648:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001664d:	83 e8 01             	sub    eax,0x1
c0016650:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016655:	75 01                	jne    c0016658 <terminateTask(int)+0xb4>
c0016657:	fb                   	sti    
c0016658:	fa                   	cli    
c0016659:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001665e:	83 c0 01             	add    eax,0x1
c0016661:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016666:	66 90                	xchg   ax,ax
c0016668:	e8 97 f5 ff ff       	call   c0015c04 <schedule()>
c001666d:	eb d9                	jmp    c0016648 <terminateTask(int)+0xa4>
c001666f:	90                   	nop
c0016670:	83 ec 0c             	sub    esp,0xc
c0016673:	68 fa 23 02 c0       	push   0xc00223fa
c0016678:	e8 c8 42 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001667d:	83 c4 10             	add    esp,0x10
c0016680:	eb 9e                	jmp    c0016620 <terminateTask(int)+0x7c>
c0016682:	66 90                	xchg   ax,ax
c0016684:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001668e:	eb d8                	jmp    c0016668 <terminateTask(int)+0xc4>

c0016690 <Thr::terminateFromIRQ(int)>:
c0016690:	83 ec 18             	sub    esp,0x18
c0016693:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016697:	50                   	push   eax
c0016698:	e8 07 ff ff ff       	call   c00165a4 <terminateTask(int)>
c001669d:	90                   	nop
c001669e:	66 90                	xchg   ax,ax

c00166a0 <Semaphore::release()>:
c00166a0:	83 ec 0c             	sub    esp,0xc
c00166a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00166a7:	fa                   	cli    
c00166a8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00166ad:	83 c0 01             	add    eax,0x1
c00166b0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00166b5:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00166ba:	8d 48 01             	lea    ecx,[eax+0x1]
c00166bd:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c00166c3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00166c6:	85 c9                	test   ecx,ecx
c00166c8:	74 42                	je     c001670c <Semaphore::release()+0x6c>
c00166ca:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00166cd:	83 ec 0c             	sub    esp,0xc
c00166d0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00166d3:	51                   	push   ecx
c00166d4:	e8 43 fa ff ff       	call   c001611c <unblockTask(ThreadControlBlock*)>
c00166d9:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00166de:	83 c4 10             	add    esp,0x10
c00166e1:	83 e8 01             	sub    eax,0x1
c00166e4:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00166e9:	85 c0                	test   eax,eax
c00166eb:	75 0b                	jne    c00166f8 <Semaphore::release()+0x58>
c00166ed:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c00166f2:	85 c0                	test   eax,eax
c00166f4:	75 22                	jne    c0016718 <Semaphore::release()+0x78>
c00166f6:	66 90                	xchg   ax,ax
c00166f8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00166fd:	83 e8 01             	sub    eax,0x1
c0016700:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016705:	75 01                	jne    c0016708 <Semaphore::release()+0x68>
c0016707:	fb                   	sti    
c0016708:	83 c4 0c             	add    esp,0xc
c001670b:	c3                   	ret    
c001670c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001670f:	83 e9 01             	sub    ecx,0x1
c0016712:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016715:	eb cd                	jmp    c00166e4 <Semaphore::release()+0x44>
c0016717:	90                   	nop
c0016718:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0016722:	e8 dd f4 ff ff       	call   c0015c04 <schedule()>
c0016727:	eb cf                	jmp    c00166f8 <Semaphore::release()+0x58>
c0016729:	8d 76 00             	lea    esi,[esi+0x0]

c001672c <__static_initialization_and_destruction_0(int, int)>:
c001672c:	83 ec 0c             	sub    esp,0xc
c001672f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016734:	0f 85 8e 00 00 00    	jne    c00167c8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c001673a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016742:	0f 85 80 00 00 00    	jne    c00167c8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016748:	83 ec 0c             	sub    esp,0xc
c001674b:	68 e4 96 02 c0       	push   0xc00296e4
c0016750:	e8 8f 94 00 00       	call   c001fbe4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016755:	83 c4 10             	add    esp,0x10
c0016758:	83 ec 04             	sub    esp,0x4
c001675b:	68 d0 30 02 c0       	push   0xc00230d0
c0016760:	68 e4 96 02 c0       	push   0xc00296e4
c0016765:	68 94 fb 01 c0       	push   0xc001fb94
c001676a:	e8 59 40 ff ff       	call   c000a7c8 <__cxa_atexit>
c001676f:	83 c4 10             	add    esp,0x10
c0016772:	83 ec 0c             	sub    esp,0xc
c0016775:	68 d8 96 02 c0       	push   0xc00296d8
c001677a:	e8 65 94 00 00       	call   c001fbe4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001677f:	83 c4 10             	add    esp,0x10
c0016782:	83 ec 04             	sub    esp,0x4
c0016785:	68 d0 30 02 c0       	push   0xc00230d0
c001678a:	68 d8 96 02 c0       	push   0xc00296d8
c001678f:	68 94 fb 01 c0       	push   0xc001fb94
c0016794:	e8 2f 40 ff ff       	call   c000a7c8 <__cxa_atexit>
c0016799:	83 c4 10             	add    esp,0x10
c001679c:	83 ec 0c             	sub    esp,0xc
c001679f:	68 cc 96 02 c0       	push   0xc00296cc
c00167a4:	e8 3b 94 00 00       	call   c001fbe4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00167a9:	83 c4 10             	add    esp,0x10
c00167ac:	83 ec 04             	sub    esp,0x4
c00167af:	68 d0 30 02 c0       	push   0xc00230d0
c00167b4:	68 cc 96 02 c0       	push   0xc00296cc
c00167b9:	68 94 fb 01 c0       	push   0xc001fb94
c00167be:	e8 05 40 ff ff       	call   c000a7c8 <__cxa_atexit>
c00167c3:	83 c4 10             	add    esp,0x10
c00167c6:	66 90                	xchg   ax,ax
c00167c8:	90                   	nop
c00167c9:	83 c4 0c             	add    esp,0xc
c00167cc:	c3                   	ret    
c00167cd:	8d 76 00             	lea    esi,[esi+0x0]

c00167d0 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00167d0:	83 ec 0c             	sub    esp,0xc
c00167d3:	83 ec 08             	sub    esp,0x8
c00167d6:	68 ff ff 00 00       	push   0xffff
c00167db:	6a 01                	push   0x1
c00167dd:	e8 4a ff ff ff       	call   c001672c <__static_initialization_and_destruction_0(int, int)>
c00167e2:	83 c4 10             	add    esp,0x10
c00167e5:	83 c4 0c             	add    esp,0xc
c00167e8:	c3                   	ret    

c00167e9 <Vm::inbv(unsigned short)>:
c00167e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00167ed:	66 81 fa fe fe       	cmp    dx,0xfefe
c00167f2:	75 06                	jne    c00167fa <Vm::inbv(unsigned short)+0x11>
c00167f4:	a0 2c 97 02 c0       	mov    al,ds:0xc002972c
c00167f9:	c3                   	ret    
c00167fa:	ec                   	in     al,dx
c00167fb:	c3                   	ret    

c00167fc <Vm::outbv(unsigned short, unsigned char)>:
c00167fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016800:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016804:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016809:	75 25                	jne    c0016830 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001680b:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c0016811:	8d 51 01             	lea    edx,[ecx+0x1]
c0016814:	88 81 40 97 02 c0    	mov    BYTE PTR [ecx-0x3ffd68c0],al
c001681a:	89 15 2c 97 02 c0    	mov    DWORD PTR ds:0xc002972c,edx
c0016820:	83 fa 20             	cmp    edx,0x20
c0016823:	75 0c                	jne    c0016831 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016825:	c7 05 2c 97 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x1f
c001682f:	c3                   	ret    
c0016830:	ee                   	out    dx,al
c0016831:	c3                   	ret    

c0016832 <Vm::realToLinear(unsigned short, unsigned short)>:
c0016832:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016837:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001683c:	c1 e0 04             	shl    eax,0x4
c001683f:	01 d0                	add    eax,edx
c0016841:	c3                   	ret    

c0016842 <Vm::getSegment(unsigned int)>:
c0016842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016846:	c1 e8 10             	shr    eax,0x10
c0016849:	c3                   	ret    

c001684a <Vm::getOffset(unsigned int)>:
c001684a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001684e:	c3                   	ret    

c001684f <Vm::mainloop2()>:
c001684f:	83 ec 18             	sub    esp,0x18
c0016852:	fa                   	cli    
c0016853:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016859:	6a 02                	push   0x2
c001685b:	c6 05 25 97 02 c0 01 	mov    BYTE PTR ds:0xc0029725,0x1
c0016862:	e8 89 f5 ff ff       	call   c0015df0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016867:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001686c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016870:	52                   	push   edx
c0016871:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016875:	52                   	push   edx
c0016876:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001687a:	52                   	push   edx
c001687b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001687f:	50                   	push   eax
c0016880:	e8 8a 99 fe ff       	call   c000020f <goToVM86>
c0016885:	83 c4 2c             	add    esp,0x2c
c0016888:	c3                   	ret    

c0016889 <Vm::mainVm8086Loop(void*)>:
c0016889:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001688e:	48                   	dec    eax
c001688f:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016894:	75 01                	jne    c0016897 <Vm::mainVm8086Loop(void*)+0xe>
c0016896:	fb                   	sti    
c0016897:	eb b6                	jmp    c001684f <Vm::mainloop2()>

c0016899 <Vm::mainloop3(unsigned long)>:
c0016899:	83 ec 18             	sub    esp,0x18
c001689c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00168a0:	fa                   	cli    
c00168a1:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00168a7:	6a 02                	push   0x2
c00168a9:	c6 05 24 97 02 c0 01 	mov    BYTE PTR ds:0xc0029724,0x1
c00168b0:	a3 20 97 02 c0       	mov    ds:0xc0029720,eax
c00168b5:	e8 36 f5 ff ff       	call   c0015df0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00168ba:	83 c4 1c             	add    esp,0x1c
c00168bd:	eb 90                	jmp    c001684f <Vm::mainloop2()>

c00168bf <Vm::initialise8086()>:
c00168bf:	83 ec 0c             	sub    esp,0xc
c00168c2:	68 80 00 00 00       	push   0x80
c00168c7:	6a 00                	push   0x0
c00168c9:	68 89 68 01 c0       	push   0xc0016889
c00168ce:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00168d4:	e8 db f0 ff ff       	call   c00159b4 <Process::createThread(void (*)(void*), void*, int)>
c00168d9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00168e0:	a3 28 97 02 c0       	mov    ds:0xc0029728,eax
c00168e5:	68 00 01 00 00       	push   0x100
c00168ea:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00168ef:	6a 00                	push   0x0
c00168f1:	6a 00                	push   0x0
c00168f3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00168f9:	e8 1c 36 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00168fe:	83 c4 2c             	add    esp,0x2c
c0016901:	c3                   	ret    

c0016902 <Vm::finish8086()>:
c0016902:	53                   	push   ebx
c0016903:	83 ec 08             	sub    esp,0x8
c0016906:	fa                   	cli    
c0016907:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001690d:	80 3d 24 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029724,0x0
c0016914:	75 15                	jne    c001692b <Vm::finish8086()+0x29>
c0016916:	e8 e9 f2 ff ff       	call   c0015c04 <schedule()>
c001691b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016920:	48                   	dec    eax
c0016921:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016926:	75 de                	jne    c0016906 <Vm::finish8086()+0x4>
c0016928:	fb                   	sti    
c0016929:	eb db                	jmp    c0016906 <Vm::finish8086()+0x4>
c001692b:	83 ec 0c             	sub    esp,0xc
c001692e:	8b 1d 20 97 02 c0    	mov    ebx,DWORD PTR ds:0xc0029720
c0016934:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c001693a:	c6 05 24 97 02 c0 00 	mov    BYTE PTR ds:0xc0029724,0x0
c0016941:	e8 d6 f7 ff ff       	call   c001611c <unblockTask(ThreadControlBlock*)>
c0016946:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001694b:	83 c4 10             	add    esp,0x10
c001694e:	8d 50 ff             	lea    edx,[eax-0x1]
c0016951:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016957:	85 d2                	test   edx,edx
c0016959:	75 01                	jne    c001695c <Vm::finish8086()+0x5a>
c001695b:	fb                   	sti    
c001695c:	89 d8                	mov    eax,ebx
c001695e:	83 c4 08             	add    esp,0x8
c0016961:	5b                   	pop    ebx
c0016962:	c3                   	ret    

c0016963 <Vm::getOutput8086(unsigned char*)>:
c0016963:	57                   	push   edi
c0016964:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c001696a:	56                   	push   esi
c001696b:	be 40 97 02 c0       	mov    esi,0xc0029740
c0016970:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016974:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016976:	a1 2c 97 02 c0       	mov    eax,ds:0xc002972c
c001697b:	5e                   	pop    esi
c001697c:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016986:	5f                   	pop    edi
c0016987:	c3                   	ret    

c0016988 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016988:	55                   	push   ebp
c0016989:	57                   	push   edi
c001698a:	56                   	push   esi
c001698b:	53                   	push   ebx
c001698c:	83 ec 0c             	sub    esp,0xc
c001698f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016993:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016997:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001699b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001699f:	fa                   	cli    
c00169a0:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00169a6:	80 3d 25 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029725,0x0
c00169ad:	75 15                	jne    c00169c4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00169af:	e8 50 f2 ff ff       	call   c0015c04 <schedule()>
c00169b4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00169b9:	48                   	dec    eax
c00169ba:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00169bf:	75 de                	jne    c001699f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00169c1:	fb                   	sti    
c00169c2:	eb db                	jmp    c001699f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00169c4:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c00169c9:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c00169d3:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00169d7:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00169db:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00169df:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00169e3:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00169e7:	0f b7 ff             	movzx  edi,di
c00169ea:	0f b7 f6             	movzx  esi,si
c00169ed:	50                   	push   eax
c00169ee:	6a 20                	push   0x20
c00169f0:	6a 00                	push   0x0
c00169f2:	68 40 97 02 c0       	push   0xc0029740
c00169f7:	e8 f4 9a fe ff       	call   c00004f0 <memset>
c00169fc:	5a                   	pop    edx
c00169fd:	59                   	pop    ecx
c00169fe:	57                   	push   edi
c00169ff:	56                   	push   esi
c0016a00:	e8 2d fe ff ff       	call   c0016832 <Vm::realToLinear(unsigned short, unsigned short)>
c0016a05:	83 c4 10             	add    esp,0x10
c0016a08:	89 c7                	mov    edi,eax
c0016a0a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016a0e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016a12:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016a14:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a19:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016a20:	48                   	dec    eax
c0016a21:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a26:	75 01                	jne    c0016a29 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016a28:	fb                   	sti    
c0016a29:	83 ec 0c             	sub    esp,0xc
c0016a2c:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016a32:	e8 e5 f6 ff ff       	call   c001611c <unblockTask(ThreadControlBlock*)>
c0016a37:	83 c4 1c             	add    esp,0x1c
c0016a3a:	b0 01                	mov    al,0x1
c0016a3c:	5b                   	pop    ebx
c0016a3d:	5e                   	pop    esi
c0016a3e:	5f                   	pop    edi
c0016a3f:	5d                   	pop    ebp
c0016a40:	c3                   	ret    

c0016a41 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016a41:	55                   	push   ebp
c0016a42:	57                   	push   edi
c0016a43:	56                   	push   esi
c0016a44:	53                   	push   ebx
c0016a45:	83 ec 34             	sub    esp,0x34
c0016a48:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016a4c:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016a50:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016a54:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016a58:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016a5c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016a60:	68 28 25 02 c0       	push   0xc0022528
c0016a65:	e8 db 3e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016a6a:	83 c4 10             	add    esp,0x10
c0016a6d:	fa                   	cli    
c0016a6e:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016a74:	8a 1d 25 97 02 c0    	mov    bl,BYTE PTR ds:0xc0029725
c0016a7a:	84 db                	test   bl,bl
c0016a7c:	75 15                	jne    c0016a93 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016a7e:	e8 81 f1 ff ff       	call   c0015c04 <schedule()>
c0016a83:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a88:	48                   	dec    eax
c0016a89:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a8e:	75 dd                	jne    c0016a6d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016a90:	fb                   	sti    
c0016a91:	eb da                	jmp    c0016a6d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016a93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016a97:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c0016a9c:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016aa6:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016aaa:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016aae:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016ab2:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016ab6:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016aba:	50                   	push   eax
c0016abb:	6a 20                	push   0x20
c0016abd:	6a 00                	push   0x0
c0016abf:	68 40 97 02 c0       	push   0xc0029740
c0016ac4:	e8 27 9a fe ff       	call   c00004f0 <memset>
c0016ac9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016ad0:	e8 e1 0f ff ff       	call   c0007ab6 <malloc>
c0016ad5:	83 c4 0c             	add    esp,0xc
c0016ad8:	89 c5                	mov    ebp,eax
c0016ada:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016ae0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016ae4:	50                   	push   eax
c0016ae5:	e8 0a 4d ff ff       	call   c000b7f4 <File::File(char const*, Process*)>
c0016aea:	83 c4 10             	add    esp,0x10
c0016aed:	85 ed                	test   ebp,ebp
c0016aef:	75 0a                	jne    c0016afb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016af1:	83 ec 0c             	sub    esp,0xc
c0016af4:	68 4a 25 02 c0       	push   0xc002254a
c0016af9:	eb 2b                	jmp    c0016b26 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016afb:	50                   	push   eax
c0016afc:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016b00:	50                   	push   eax
c0016b01:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016b05:	50                   	push   eax
c0016b06:	55                   	push   ebp
c0016b07:	e8 b2 50 ff ff       	call   c000bbbe <File::stat(unsigned long long*, bool*)>
c0016b0c:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016b10:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016b14:	83 c4 10             	add    esp,0x10
c0016b17:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016b1c:	74 27                	je     c0016b45 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016b1e:	83 ec 0c             	sub    esp,0xc
c0016b21:	68 5e 25 02 c0       	push   0xc002255e
c0016b26:	e8 1a a8 ff ff       	call   c0011345 <KePanic(char const*)>
c0016b2b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016b30:	83 c4 10             	add    esp,0x10
c0016b33:	48                   	dec    eax
c0016b34:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016b39:	85 c0                	test   eax,eax
c0016b3b:	75 01                	jne    c0016b3e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016b3d:	fb                   	sti    
c0016b3e:	31 db                	xor    ebx,ebx
c0016b40:	e9 90 00 00 00       	jmp    c0016bd5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016b45:	51                   	push   ecx
c0016b46:	51                   	push   ecx
c0016b47:	6a 01                	push   0x1
c0016b49:	55                   	push   ebp
c0016b4a:	e8 6d 4d ff ff       	call   c000b8bc <File::open(FileOpenMode)>
c0016b4f:	83 c4 10             	add    esp,0x10
c0016b52:	85 c0                	test   eax,eax
c0016b54:	74 26                	je     c0016b7c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016b56:	83 ec 0c             	sub    esp,0xc
c0016b59:	68 77 25 02 c0       	push   0xc0022577
c0016b5e:	e8 e2 a7 ff ff       	call   c0011345 <KePanic(char const*)>
c0016b63:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016b68:	83 c4 10             	add    esp,0x10
c0016b6b:	48                   	dec    eax
c0016b6c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016b71:	85 c0                	test   eax,eax
c0016b73:	75 c9                	jne    c0016b3e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016b75:	fb                   	sti    
c0016b76:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016b7a:	eb 59                	jmp    c0016bd5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016b7c:	0f b7 ff             	movzx  edi,di
c0016b7f:	50                   	push   eax
c0016b80:	0f b7 f6             	movzx  esi,si
c0016b83:	50                   	push   eax
c0016b84:	57                   	push   edi
c0016b85:	56                   	push   esi
c0016b86:	e8 a7 fc ff ff       	call   c0016832 <Vm::realToLinear(unsigned short, unsigned short)>
c0016b8b:	5a                   	pop    edx
c0016b8c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0016b8f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0016b93:	51                   	push   ecx
c0016b94:	50                   	push   eax
c0016b95:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b99:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b9d:	55                   	push   ebp
c0016b9e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016ba1:	83 c4 14             	add    esp,0x14
c0016ba4:	55                   	push   ebp
c0016ba5:	e8 70 4d ff ff       	call   c000b91a <File::close()>
c0016baa:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016baf:	83 c4 10             	add    esp,0x10
c0016bb2:	48                   	dec    eax
c0016bb3:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016bba:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016bbf:	85 c0                	test   eax,eax
c0016bc1:	75 01                	jne    c0016bc4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016bc3:	fb                   	sti    
c0016bc4:	83 ec 0c             	sub    esp,0xc
c0016bc7:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016bcd:	e8 4a f5 ff ff       	call   c001611c <unblockTask(ThreadControlBlock*)>
c0016bd2:	83 c4 10             	add    esp,0x10
c0016bd5:	83 c4 2c             	add    esp,0x2c
c0016bd8:	88 d8                	mov    al,bl
c0016bda:	5b                   	pop    ebx
c0016bdb:	5e                   	pop    esi
c0016bdc:	5f                   	pop    edi
c0016bdd:	5d                   	pop    ebp
c0016bde:	c3                   	ret    

c0016bdf <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016bdf:	57                   	push   edi
c0016be0:	56                   	push   esi
c0016be1:	53                   	push   ebx
c0016be2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016be6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bea:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016bee:	83 e8 06             	sub    eax,0x6
c0016bf1:	0f b7 c0             	movzx  eax,ax
c0016bf4:	50                   	push   eax
c0016bf5:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016bfa:	50                   	push   eax
c0016bfb:	e8 32 fc ff ff       	call   c0016832 <Vm::realToLinear(unsigned short, unsigned short)>
c0016c00:	5a                   	pop    edx
c0016c01:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0016c04:	59                   	pop    ecx
c0016c05:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016c08:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016c0b:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016c11:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016c14:	8d 56 02             	lea    edx,[esi+0x2]
c0016c17:	66 89 10             	mov    WORD PTR [eax],dx
c0016c1a:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016c1e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016c22:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016c25:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016c29:	0f b6 f1             	movzx  esi,cl
c0016c2c:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016c30:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016c36:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016c3a:	0f b6 d5             	movzx  edx,ch
c0016c3d:	74 0a                	je     c0016c49 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0016c3f:	c1 e2 08             	shl    edx,0x8
c0016c42:	09 f2                	or     edx,esi
c0016c44:	80 ce 02             	or     dh,0x2
c0016c47:	eb 08                	jmp    c0016c51 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0016c49:	c1 e2 08             	shl    edx,0x8
c0016c4c:	09 f2                	or     edx,esi
c0016c4e:	80 e6 fd             	and    dh,0xfd
c0016c51:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016c55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c5a:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016c5e:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016c66:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016c69:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016c71:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016c74:	5b                   	pop    ebx
c0016c75:	5e                   	pop    esi
c0016c76:	5f                   	pop    edi
c0016c77:	c3                   	ret    

c0016c78 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016c78:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c7d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c82:	c1 e0 04             	shl    eax,0x4
c0016c85:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016c88:	c3                   	ret    

c0016c89 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016c89:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c8e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c93:	c1 e0 04             	shl    eax,0x4
c0016c96:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016c9a:	c3                   	ret    

c0016c9b <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016c9b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016ca0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016ca5:	c1 e0 04             	shl    eax,0x4
c0016ca8:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016cab:	c3                   	ret    

c0016cac <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016cac:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016cb1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016cb6:	c1 e0 04             	shl    eax,0x4
c0016cb9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016cbd:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016cc0:	c3                   	ret    

c0016cc1 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016cc1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016cc6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016ccb:	c1 e0 04             	shl    eax,0x4
c0016cce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016cd2:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016cd6:	c3                   	ret    

c0016cd7 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016cd7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016cdc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016ce1:	c1 e0 04             	shl    eax,0x4
c0016ce4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016ce8:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016ceb:	c3                   	ret    

c0016cec <Vm::faultHandler(regs*)>:
c0016cec:	55                   	push   ebp
c0016ced:	57                   	push   edi
c0016cee:	56                   	push   esi
c0016cef:	53                   	push   ebx
c0016cf0:	83 ec 2c             	sub    esp,0x2c
c0016cf3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016cf7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016cfa:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016cfe:	0f b7 f8             	movzx  edi,ax
c0016d01:	52                   	push   edx
c0016d02:	0f b7 c0             	movzx  eax,ax
c0016d05:	50                   	push   eax
c0016d06:	e8 27 fb ff ff       	call   c0016832 <Vm::realToLinear(unsigned short, unsigned short)>
c0016d0b:	5a                   	pop    edx
c0016d0c:	59                   	pop    ecx
c0016d0d:	89 c1                	mov    ecx,eax
c0016d0f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016d12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016d16:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016d1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016d1f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016d22:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016d26:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016d2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016d2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016d33:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016d37:	e8 f6 fa ff ff       	call   c0016832 <Vm::realToLinear(unsigned short, unsigned short)>
c0016d3c:	5e                   	pop    esi
c0016d3d:	be 06 00 00 00       	mov    esi,0x6
c0016d42:	5d                   	pop    ebp
c0016d43:	31 ed                	xor    ebp,ebp
c0016d45:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016d4a:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016d4d:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016d53:	0f 84 74 02 00 00    	je     c0016fcd <Vm::faultHandler(regs*)+0x2e1>
c0016d59:	0f 87 94 00 00 00    	ja     c0016df3 <Vm::faultHandler(regs*)+0x107>
c0016d5f:	83 fa 66             	cmp    edx,0x66
c0016d62:	0f 84 e2 01 00 00    	je     c0016f4a <Vm::faultHandler(regs*)+0x25e>
c0016d68:	77 47                	ja     c0016db1 <Vm::faultHandler(regs*)+0xc5>
c0016d6a:	83 fa 36             	cmp    edx,0x36
c0016d6d:	0f 84 ca 01 00 00    	je     c0016f3d <Vm::faultHandler(regs*)+0x251>
c0016d73:	77 1a                	ja     c0016d8f <Vm::faultHandler(regs*)+0xa3>
c0016d75:	83 fa 26             	cmp    edx,0x26
c0016d78:	0f 84 98 01 00 00    	je     c0016f16 <Vm::faultHandler(regs*)+0x22a>
c0016d7e:	83 fa 2e             	cmp    edx,0x2e
c0016d81:	0f 85 21 06 00 00    	jne    c00173a8 <Vm::faultHandler(regs*)+0x6bc>
c0016d87:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d8a:	31 f6                	xor    esi,esi
c0016d8c:	41                   	inc    ecx
c0016d8d:	eb bb                	jmp    c0016d4a <Vm::faultHandler(regs*)+0x5e>
c0016d8f:	83 fa 64             	cmp    edx,0x64
c0016d92:	0f 84 8b 01 00 00    	je     c0016f23 <Vm::faultHandler(regs*)+0x237>
c0016d98:	0f 87 92 01 00 00    	ja     c0016f30 <Vm::faultHandler(regs*)+0x244>
c0016d9e:	83 fa 3e             	cmp    edx,0x3e
c0016da1:	0f 85 01 06 00 00    	jne    c00173a8 <Vm::faultHandler(regs*)+0x6bc>
c0016da7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016daa:	be 01 00 00 00       	mov    esi,0x1
c0016daf:	eb db                	jmp    c0016d8c <Vm::faultHandler(regs*)+0xa0>
c0016db1:	83 fa 6d             	cmp    edx,0x6d
c0016db4:	0f 84 34 03 00 00    	je     c00170ee <Vm::faultHandler(regs*)+0x402>
c0016dba:	77 17                	ja     c0016dd3 <Vm::faultHandler(regs*)+0xe7>
c0016dbc:	83 fa 67             	cmp    edx,0x67
c0016dbf:	0f 84 92 01 00 00    	je     c0016f57 <Vm::faultHandler(regs*)+0x26b>
c0016dc5:	83 fa 6c             	cmp    edx,0x6c
c0016dc8:	0f 84 b1 02 00 00    	je     c001707f <Vm::faultHandler(regs*)+0x393>
c0016dce:	e9 d5 05 00 00       	jmp    c00173a8 <Vm::faultHandler(regs*)+0x6bc>
c0016dd3:	83 fa 6f             	cmp    edx,0x6f
c0016dd6:	0f 84 3d 04 00 00    	je     c0017219 <Vm::faultHandler(regs*)+0x52d>
c0016ddc:	0f 82 9f 03 00 00    	jb     c0017181 <Vm::faultHandler(regs*)+0x495>
c0016de2:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016de8:	0f 84 76 01 00 00    	je     c0016f64 <Vm::faultHandler(regs*)+0x278>
c0016dee:	e9 b5 05 00 00       	jmp    c00173a8 <Vm::faultHandler(regs*)+0x6bc>
c0016df3:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016df9:	0f 84 51 05 00 00    	je     c0017350 <Vm::faultHandler(regs*)+0x664>
c0016dff:	0f 87 a9 00 00 00    	ja     c0016eae <Vm::faultHandler(regs*)+0x1c2>
c0016e05:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016e0b:	0f 84 d0 04 00 00    	je     c00172e1 <Vm::faultHandler(regs*)+0x5f5>
c0016e11:	77 78                	ja     c0016e8b <Vm::faultHandler(regs*)+0x19f>
c0016e13:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016e19:	0f 84 0e 02 00 00    	je     c001702d <Vm::faultHandler(regs*)+0x341>
c0016e1f:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016e25:	0f 85 7d 05 00 00    	jne    c00173a8 <Vm::faultHandler(regs*)+0x6bc>
c0016e2b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016e2f:	89 d1                	mov    ecx,edx
c0016e31:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016e34:	c1 e1 08             	shl    ecx,0x8
c0016e37:	09 ca                	or     edx,ecx
c0016e39:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016e3c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016e40:	89 d1                	mov    ecx,edx
c0016e42:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016e46:	c1 e1 08             	shl    ecx,0x8
c0016e49:	09 ca                	or     edx,ecx
c0016e4b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016e4e:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016e52:	89 d1                	mov    ecx,edx
c0016e54:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016e58:	c1 e1 08             	shl    ecx,0x8
c0016e5b:	09 ca                	or     edx,ecx
c0016e5d:	81 ca 00 02 02 00    	or     edx,0x20200
c0016e63:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016e66:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016e6a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016e70:	d1 e8                	shr    eax,1
c0016e72:	83 e0 01             	and    eax,0x1
c0016e75:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016e78:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016e7b:	83 c0 06             	add    eax,0x6
c0016e7e:	25 ff ff 00 00       	and    eax,0xffff
c0016e83:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016e86:	e9 19 05 00 00       	jmp    c00173a4 <Vm::faultHandler(regs*)+0x6b8>
c0016e8b:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016e91:	0f 84 8f 04 00 00    	je     c0017326 <Vm::faultHandler(regs*)+0x63a>
c0016e97:	0f 82 60 04 00 00    	jb     c00172fd <Vm::faultHandler(regs*)+0x611>
c0016e9d:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016ea3:	0f 84 94 04 00 00    	je     c001733d <Vm::faultHandler(regs*)+0x651>
c0016ea9:	e9 fa 04 00 00       	jmp    c00173a8 <Vm::faultHandler(regs*)+0x6bc>
c0016eae:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016eb4:	0f 84 d7 04 00 00    	je     c0017391 <Vm::faultHandler(regs*)+0x6a5>
c0016eba:	77 2e                	ja     c0016eea <Vm::faultHandler(regs*)+0x1fe>
c0016ebc:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016ec2:	0f 84 a4 04 00 00    	je     c001736c <Vm::faultHandler(regs*)+0x680>
c0016ec8:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016ece:	0f 85 d4 04 00 00    	jne    c00173a8 <Vm::faultHandler(regs*)+0x6bc>
c0016ed4:	50                   	push   eax
c0016ed5:	50                   	push   eax
c0016ed6:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016eda:	50                   	push   eax
c0016edb:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016edf:	50                   	push   eax
c0016ee0:	e8 17 f9 ff ff       	call   c00167fc <Vm::outbv(unsigned short, unsigned char)>
c0016ee5:	e9 9f 04 00 00       	jmp    c0017389 <Vm::faultHandler(regs*)+0x69d>
c0016eea:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016ef0:	0f 84 6d 01 00 00    	je     c0017063 <Vm::faultHandler(regs*)+0x377>
c0016ef6:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016efc:	0f 84 6f 01 00 00    	je     c0017071 <Vm::faultHandler(regs*)+0x385>
c0016f02:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016f08:	0f 85 9a 04 00 00    	jne    c00173a8 <Vm::faultHandler(regs*)+0x6bc>
c0016f0e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f11:	e9 76 fe ff ff       	jmp    c0016d8c <Vm::faultHandler(regs*)+0xa0>
c0016f16:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f19:	be 02 00 00 00       	mov    esi,0x2
c0016f1e:	e9 69 fe ff ff       	jmp    c0016d8c <Vm::faultHandler(regs*)+0xa0>
c0016f23:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f26:	be 03 00 00 00       	mov    esi,0x3
c0016f2b:	e9 5c fe ff ff       	jmp    c0016d8c <Vm::faultHandler(regs*)+0xa0>
c0016f30:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f33:	be 04 00 00 00       	mov    esi,0x4
c0016f38:	e9 4f fe ff ff       	jmp    c0016d8c <Vm::faultHandler(regs*)+0xa0>
c0016f3d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f40:	be 05 00 00 00       	mov    esi,0x5
c0016f45:	e9 42 fe ff ff       	jmp    c0016d8c <Vm::faultHandler(regs*)+0xa0>
c0016f4a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f4d:	bd 01 00 00 00       	mov    ebp,0x1
c0016f52:	e9 35 fe ff ff       	jmp    c0016d8c <Vm::faultHandler(regs*)+0xa0>
c0016f57:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f5a:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016f5f:	e9 28 fe ff ff       	jmp    c0016d8c <Vm::faultHandler(regs*)+0xa0>
c0016f64:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016f67:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016f6b:	83 e5 01             	and    ebp,0x1
c0016f6e:	74 30                	je     c0016fa0 <Vm::faultHandler(regs*)+0x2b4>
c0016f70:	83 e9 04             	sub    ecx,0x4
c0016f73:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016f79:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016f7f:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016f82:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016f85:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016f8b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016f8f:	0f 84 0c 04 00 00    	je     c00173a1 <Vm::faultHandler(regs*)+0x6b5>
c0016f95:	80 ce 02             	or     dh,0x2
c0016f98:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016f9b:	e9 01 04 00 00       	jmp    c00173a1 <Vm::faultHandler(regs*)+0x6b5>
c0016fa0:	83 e9 02             	sub    ecx,0x2
c0016fa3:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016fa9:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016fac:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016fb0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016fb6:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016fba:	74 05                	je     c0016fc1 <Vm::faultHandler(regs*)+0x2d5>
c0016fbc:	80 ce 02             	or     dh,0x2
c0016fbf:	eb 03                	jmp    c0016fc4 <Vm::faultHandler(regs*)+0x2d8>
c0016fc1:	80 e6 fd             	and    dh,0xfd
c0016fc4:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016fc8:	e9 d4 03 00 00       	jmp    c00173a1 <Vm::faultHandler(regs*)+0x6b5>
c0016fcd:	83 e5 01             	and    ebp,0x1
c0016fd0:	74 2a                	je     c0016ffc <Vm::faultHandler(regs*)+0x310>
c0016fd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0016fd4:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016fda:	81 ca 00 02 02 00    	or     edx,0x20200
c0016fe0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016fe3:	8b 00                	mov    eax,DWORD PTR [eax]
c0016fe5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016feb:	c1 e8 09             	shr    eax,0x9
c0016fee:	83 e0 01             	and    eax,0x1
c0016ff1:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016ff4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016ff7:	83 c0 04             	add    eax,0x4
c0016ffa:	eb 24                	jmp    c0017020 <Vm::faultHandler(regs*)+0x334>
c0016ffc:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016fff:	81 ca 00 02 02 00    	or     edx,0x20200
c0017005:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017008:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001700b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017011:	c1 e8 09             	shr    eax,0x9
c0017014:	83 e0 01             	and    eax,0x1
c0017017:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001701a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001701d:	83 c0 02             	add    eax,0x2
c0017020:	25 ff ff 00 00       	and    eax,0xffff
c0017025:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017028:	e9 74 03 00 00       	jmp    c00173a1 <Vm::faultHandler(regs*)+0x6b5>
c001702d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017031:	3d ee 00 00 00       	cmp    eax,0xee
c0017036:	75 10                	jne    c0017048 <Vm::faultHandler(regs*)+0x35c>
c0017038:	83 ec 0c             	sub    esp,0xc
c001703b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001703e:	e8 56 f8 ff ff       	call   c0016899 <Vm::mainloop3(unsigned long)>
c0017043:	e9 44 03 00 00       	jmp    c001738c <Vm::faultHandler(regs*)+0x6a0>
c0017048:	83 ec 0c             	sub    esp,0xc
c001704b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001704f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017053:	51                   	push   ecx
c0017054:	50                   	push   eax
c0017055:	53                   	push   ebx
c0017056:	e8 84 fb ff ff       	call   c0016bdf <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001705b:	83 c4 20             	add    esp,0x20
c001705e:	e9 41 03 00 00       	jmp    c00173a4 <Vm::faultHandler(regs*)+0x6b8>
c0017063:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017068:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001706c:	e9 30 03 00 00       	jmp    c00173a1 <Vm::faultHandler(regs*)+0x6b5>
c0017071:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017076:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001707a:	e9 22 03 00 00       	jmp    c00173a1 <Vm::faultHandler(regs*)+0x6b5>
c001707f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017082:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017087:	74 2b                	je     c00170b4 <Vm::faultHandler(regs*)+0x3c8>
c0017089:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017090:	76 22                	jbe    c00170b4 <Vm::faultHandler(regs*)+0x3c8>
c0017092:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017096:	50                   	push   eax
c0017097:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001709b:	50                   	push   eax
c001709c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00170a0:	50                   	push   eax
c00170a1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00170a5:	50                   	push   eax
c00170a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00170aa:	50                   	push   eax
c00170ab:	6a 6c                	push   0x6c
c00170ad:	6a 6c                	push   0x6c
c00170af:	e9 bd 01 00 00       	jmp    c0017271 <Vm::faultHandler(regs*)+0x585>
c00170b4:	83 ec 0c             	sub    esp,0xc
c00170b7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00170bb:	0f b7 f6             	movzx  esi,si
c00170be:	50                   	push   eax
c00170bf:	e8 25 f7 ff ff       	call   c00167e9 <Vm::inbv(unsigned short)>
c00170c4:	83 c4 0c             	add    esp,0xc
c00170c7:	0f b6 c0             	movzx  eax,al
c00170ca:	50                   	push   eax
c00170cb:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00170cf:	50                   	push   eax
c00170d0:	56                   	push   esi
c00170d1:	e8 d6 fb ff ff       	call   c0016cac <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00170d6:	83 c4 10             	add    esp,0x10
c00170d9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00170dc:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00170e0:	74 03                	je     c00170e5 <Vm::faultHandler(regs*)+0x3f9>
c00170e2:	48                   	dec    eax
c00170e3:	eb 01                	jmp    c00170e6 <Vm::faultHandler(regs*)+0x3fa>
c00170e5:	40                   	inc    eax
c00170e6:	0f b7 c0             	movzx  eax,ax
c00170e9:	e9 8b 00 00 00       	jmp    c0017179 <Vm::faultHandler(regs*)+0x48d>
c00170ee:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00170f1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00170f4:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00170f9:	74 29                	je     c0017124 <Vm::faultHandler(regs*)+0x438>
c00170fb:	3d ff ff 00 00       	cmp    eax,0xffff
c0017100:	76 22                	jbe    c0017124 <Vm::faultHandler(regs*)+0x438>
c0017102:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017106:	50                   	push   eax
c0017107:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001710b:	50                   	push   eax
c001710c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017110:	50                   	push   eax
c0017111:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017115:	50                   	push   eax
c0017116:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001711a:	50                   	push   eax
c001711b:	6a 6d                	push   0x6d
c001711d:	6a 6d                	push   0x6d
c001711f:	e9 4d 01 00 00       	jmp    c0017271 <Vm::faultHandler(regs*)+0x585>
c0017124:	0f b7 c8             	movzx  ecx,ax
c0017127:	0f b7 f6             	movzx  esi,si
c001712a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001712d:	83 e5 01             	and    ebp,0x1
c0017130:	74 20                	je     c0017152 <Vm::faultHandler(regs*)+0x466>
c0017132:	ed                   	in     eax,dx
c0017133:	55                   	push   ebp
c0017134:	50                   	push   eax
c0017135:	51                   	push   ecx
c0017136:	56                   	push   esi
c0017137:	e8 9b fb ff ff       	call   c0016cd7 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001713c:	83 c4 10             	add    esp,0x10
c001713f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017142:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017146:	74 05                	je     c001714d <Vm::faultHandler(regs*)+0x461>
c0017148:	83 e8 04             	sub    eax,0x4
c001714b:	eb 27                	jmp    c0017174 <Vm::faultHandler(regs*)+0x488>
c001714d:	83 c0 04             	add    eax,0x4
c0017150:	eb 22                	jmp    c0017174 <Vm::faultHandler(regs*)+0x488>
c0017152:	66 ed                	in     ax,dx
c0017154:	0f b7 c0             	movzx  eax,ax
c0017157:	57                   	push   edi
c0017158:	50                   	push   eax
c0017159:	51                   	push   ecx
c001715a:	56                   	push   esi
c001715b:	e8 61 fb ff ff       	call   c0016cc1 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0017160:	83 c4 10             	add    esp,0x10
c0017163:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017166:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001716a:	74 05                	je     c0017171 <Vm::faultHandler(regs*)+0x485>
c001716c:	83 e8 02             	sub    eax,0x2
c001716f:	eb 03                	jmp    c0017174 <Vm::faultHandler(regs*)+0x488>
c0017171:	83 c0 02             	add    eax,0x2
c0017174:	25 ff ff 00 00       	and    eax,0xffff
c0017179:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001717c:	e9 20 02 00 00       	jmp    c00173a1 <Vm::faultHandler(regs*)+0x6b5>
c0017181:	8d 46 ff             	lea    eax,[esi-0x1]
c0017184:	0f b6 f0             	movzx  esi,al
c0017187:	83 fe 05             	cmp    esi,0x5
c001718a:	77 23                	ja     c00171af <Vm::faultHandler(regs*)+0x4c3>
c001718c:	ff 24 b5 ec 25 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdda14]
c0017193:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0017198:	eb 15                	jmp    c00171af <Vm::faultHandler(regs*)+0x4c3>
c001719a:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001719e:	eb 0f                	jmp    c00171af <Vm::faultHandler(regs*)+0x4c3>
c00171a0:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00171a4:	eb 09                	jmp    c00171af <Vm::faultHandler(regs*)+0x4c3>
c00171a6:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00171aa:	eb 03                	jmp    c00171af <Vm::faultHandler(regs*)+0x4c3>
c00171ac:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00171af:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00171b2:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00171b7:	74 29                	je     c00171e2 <Vm::faultHandler(regs*)+0x4f6>
c00171b9:	3d ff ff 00 00       	cmp    eax,0xffff
c00171be:	76 22                	jbe    c00171e2 <Vm::faultHandler(regs*)+0x4f6>
c00171c0:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00171c4:	50                   	push   eax
c00171c5:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00171c9:	50                   	push   eax
c00171ca:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00171ce:	50                   	push   eax
c00171cf:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00171d3:	50                   	push   eax
c00171d4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00171d8:	50                   	push   eax
c00171d9:	6a 6e                	push   0x6e
c00171db:	6a 6e                	push   0x6e
c00171dd:	e9 8f 00 00 00       	jmp    c0017271 <Vm::faultHandler(regs*)+0x585>
c00171e2:	0f b7 c0             	movzx  eax,ax
c00171e5:	52                   	push   edx
c00171e6:	52                   	push   edx
c00171e7:	50                   	push   eax
c00171e8:	57                   	push   edi
c00171e9:	e8 8a fa ff ff       	call   c0016c78 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00171ee:	59                   	pop    ecx
c00171ef:	0f b6 c0             	movzx  eax,al
c00171f2:	5e                   	pop    esi
c00171f3:	50                   	push   eax
c00171f4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00171f8:	50                   	push   eax
c00171f9:	e8 fe f5 ff ff       	call   c00167fc <Vm::outbv(unsigned short, unsigned char)>
c00171fe:	83 c4 10             	add    esp,0x10
c0017201:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017204:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017208:	74 03                	je     c001720d <Vm::faultHandler(regs*)+0x521>
c001720a:	48                   	dec    eax
c001720b:	eb 01                	jmp    c001720e <Vm::faultHandler(regs*)+0x522>
c001720d:	40                   	inc    eax
c001720e:	0f b7 c0             	movzx  eax,ax
c0017211:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017214:	e9 88 01 00 00       	jmp    c00173a1 <Vm::faultHandler(regs*)+0x6b5>
c0017219:	8d 46 ff             	lea    eax,[esi-0x1]
c001721c:	0f b6 f0             	movzx  esi,al
c001721f:	83 fe 05             	cmp    esi,0x5
c0017222:	77 1e                	ja     c0017242 <Vm::faultHandler(regs*)+0x556>
c0017224:	ff 24 b5 04 26 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd9fc]
c001722b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001722f:	eb 11                	jmp    c0017242 <Vm::faultHandler(regs*)+0x556>
c0017231:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017234:	eb 0c                	jmp    c0017242 <Vm::faultHandler(regs*)+0x556>
c0017236:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0017239:	eb 07                	jmp    c0017242 <Vm::faultHandler(regs*)+0x556>
c001723b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001723e:	eb 02                	jmp    c0017242 <Vm::faultHandler(regs*)+0x556>
c0017240:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017242:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017245:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001724a:	74 37                	je     c0017283 <Vm::faultHandler(regs*)+0x597>
c001724c:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0017252:	76 2f                	jbe    c0017283 <Vm::faultHandler(regs*)+0x597>
c0017254:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017258:	50                   	push   eax
c0017259:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001725d:	50                   	push   eax
c001725e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017262:	50                   	push   eax
c0017263:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017267:	50                   	push   eax
c0017268:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001726c:	50                   	push   eax
c001726d:	6a 6f                	push   0x6f
c001726f:	6a 6f                	push   0x6f
c0017271:	68 90 25 02 c0       	push   0xc0022590
c0017276:	e8 ca 36 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001727b:	83 c4 20             	add    esp,0x20
c001727e:	e9 83 01 00 00       	jmp    c0017406 <Vm::faultHandler(regs*)+0x71a>
c0017283:	0f b7 d7             	movzx  edx,di
c0017286:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017289:	0f b7 c6             	movzx  eax,si
c001728c:	81 e1 00 04 00 00    	and    ecx,0x400
c0017292:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017295:	83 e5 01             	and    ebp,0x1
c0017298:	74 1d                	je     c00172b7 <Vm::faultHandler(regs*)+0x5cb>
c001729a:	55                   	push   ebp
c001729b:	55                   	push   ebp
c001729c:	50                   	push   eax
c001729d:	52                   	push   edx
c001729e:	e8 f8 f9 ff ff       	call   c0016c9b <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00172a3:	83 c4 10             	add    esp,0x10
c00172a6:	89 fa                	mov    edx,edi
c00172a8:	ef                   	out    dx,eax
c00172a9:	85 c9                	test   ecx,ecx
c00172ab:	74 05                	je     c00172b2 <Vm::faultHandler(regs*)+0x5c6>
c00172ad:	83 ee 04             	sub    esi,0x4
c00172b0:	eb 21                	jmp    c00172d3 <Vm::faultHandler(regs*)+0x5e7>
c00172b2:	83 c6 04             	add    esi,0x4
c00172b5:	eb 1c                	jmp    c00172d3 <Vm::faultHandler(regs*)+0x5e7>
c00172b7:	55                   	push   ebp
c00172b8:	55                   	push   ebp
c00172b9:	50                   	push   eax
c00172ba:	52                   	push   edx
c00172bb:	e8 c9 f9 ff ff       	call   c0016c89 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00172c0:	83 c4 10             	add    esp,0x10
c00172c3:	89 fa                	mov    edx,edi
c00172c5:	66 ef                	out    dx,ax
c00172c7:	85 c9                	test   ecx,ecx
c00172c9:	74 05                	je     c00172d0 <Vm::faultHandler(regs*)+0x5e4>
c00172cb:	83 ee 02             	sub    esi,0x2
c00172ce:	eb 03                	jmp    c00172d3 <Vm::faultHandler(regs*)+0x5e7>
c00172d0:	83 c6 02             	add    esi,0x2
c00172d3:	81 e6 ff ff 00 00    	and    esi,0xffff
c00172d9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00172dc:	e9 c0 00 00 00       	jmp    c00173a1 <Vm::faultHandler(regs*)+0x6b5>
c00172e1:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00172e8:	83 ec 0c             	sub    esp,0xc
c00172eb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00172ef:	50                   	push   eax
c00172f0:	e8 f4 f4 ff ff       	call   c00167e9 <Vm::inbv(unsigned short)>
c00172f5:	0f b6 c0             	movzx  eax,al
c00172f8:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00172fb:	eb 3a                	jmp    c0017337 <Vm::faultHandler(regs*)+0x64b>
c00172fd:	83 e5 01             	and    ebp,0x1
c0017300:	74 07                	je     c0017309 <Vm::faultHandler(regs*)+0x61d>
c0017302:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017306:	ed                   	in     eax,dx
c0017307:	eb 14                	jmp    c001731d <Vm::faultHandler(regs*)+0x631>
c0017309:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001730c:	66 31 f6             	xor    si,si
c001730f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0017312:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017316:	66 ed                	in     ax,dx
c0017318:	0f b7 c0             	movzx  eax,ax
c001731b:	09 f0                	or     eax,esi
c001731d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017320:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017324:	eb 7e                	jmp    c00173a4 <Vm::faultHandler(regs*)+0x6b8>
c0017326:	52                   	push   edx
c0017327:	52                   	push   edx
c0017328:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001732c:	50                   	push   eax
c001732d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017331:	50                   	push   eax
c0017332:	e8 c5 f4 ff ff       	call   c00167fc <Vm::outbv(unsigned short, unsigned char)>
c0017337:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001733b:	eb 4f                	jmp    c001738c <Vm::faultHandler(regs*)+0x6a0>
c001733d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017340:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017344:	83 e5 01             	and    ebp,0x1
c0017347:	74 03                	je     c001734c <Vm::faultHandler(regs*)+0x660>
c0017349:	ef                   	out    dx,eax
c001734a:	eb d4                	jmp    c0017320 <Vm::faultHandler(regs*)+0x634>
c001734c:	66 ef                	out    dx,ax
c001734e:	eb d0                	jmp    c0017320 <Vm::faultHandler(regs*)+0x634>
c0017350:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017357:	83 ec 0c             	sub    esp,0xc
c001735a:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001735e:	50                   	push   eax
c001735f:	e8 85 f4 ff ff       	call   c00167e9 <Vm::inbv(unsigned short)>
c0017364:	0f b6 c0             	movzx  eax,al
c0017367:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001736a:	eb 1d                	jmp    c0017389 <Vm::faultHandler(regs*)+0x69d>
c001736c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001736f:	83 e5 01             	and    ebp,0x1
c0017372:	74 03                	je     c0017377 <Vm::faultHandler(regs*)+0x68b>
c0017374:	ed                   	in     eax,dx
c0017375:	eb 0d                	jmp    c0017384 <Vm::faultHandler(regs*)+0x698>
c0017377:	66 ed                	in     ax,dx
c0017379:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001737c:	0f b7 c0             	movzx  eax,ax
c001737f:	66 31 d2             	xor    dx,dx
c0017382:	09 d0                	or     eax,edx
c0017384:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017387:	eb 18                	jmp    c00173a1 <Vm::faultHandler(regs*)+0x6b5>
c0017389:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001738c:	83 c4 10             	add    esp,0x10
c001738f:	eb 13                	jmp    c00173a4 <Vm::faultHandler(regs*)+0x6b8>
c0017391:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017394:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017397:	83 e5 01             	and    ebp,0x1
c001739a:	74 03                	je     c001739f <Vm::faultHandler(regs*)+0x6b3>
c001739c:	ef                   	out    dx,eax
c001739d:	eb 02                	jmp    c00173a1 <Vm::faultHandler(regs*)+0x6b5>
c001739f:	66 ef                	out    dx,ax
c00173a1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173a4:	b0 01                	mov    al,0x1
c00173a6:	eb 60                	jmp    c0017408 <Vm::faultHandler(regs*)+0x71c>
c00173a8:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00173ac:	50                   	push   eax
c00173ad:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00173b1:	50                   	push   eax
c00173b2:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00173b6:	50                   	push   eax
c00173b7:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00173bb:	50                   	push   eax
c00173bc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00173c0:	50                   	push   eax
c00173c1:	52                   	push   edx
c00173c2:	52                   	push   edx
c00173c3:	68 bd 25 02 c0       	push   0xc00225bd
c00173c8:	e8 78 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00173cd:	83 c4 20             	add    esp,0x20
c00173d0:	83 ec 0c             	sub    esp,0xc
c00173d3:	6a 60                	push   0x60
c00173d5:	e8 0f f4 ff ff       	call   c00167e9 <Vm::inbv(unsigned short)>
c00173da:	83 c4 10             	add    esp,0x10
c00173dd:	0f b6 d0             	movzx  edx,al
c00173e0:	83 fa 1c             	cmp    edx,0x1c
c00173e3:	74 05                	je     c00173ea <Vm::faultHandler(regs*)+0x6fe>
c00173e5:	83 fa 5a             	cmp    edx,0x5a
c00173e8:	75 e6                	jne    c00173d0 <Vm::faultHandler(regs*)+0x6e4>
c00173ea:	0f b6 c0             	movzx  eax,al
c00173ed:	83 f8 1c             	cmp    eax,0x1c
c00173f0:	74 05                	je     c00173f7 <Vm::faultHandler(regs*)+0x70b>
c00173f2:	83 f8 5a             	cmp    eax,0x5a
c00173f5:	75 0f                	jne    c0017406 <Vm::faultHandler(regs*)+0x71a>
c00173f7:	83 ec 0c             	sub    esp,0xc
c00173fa:	6a 60                	push   0x60
c00173fc:	e8 e8 f3 ff ff       	call   c00167e9 <Vm::inbv(unsigned short)>
c0017401:	83 c4 10             	add    esp,0x10
c0017404:	eb e4                	jmp    c00173ea <Vm::faultHandler(regs*)+0x6fe>
c0017406:	31 c0                	xor    eax,eax
c0017408:	83 c4 2c             	add    esp,0x2c
c001740b:	5b                   	pop    ebx
c001740c:	5e                   	pop    esi
c001740d:	5f                   	pop    edi
c001740e:	5d                   	pop    ebp
c001740f:	c3                   	ret    

c0017410 <noCopro(unsigned long)>:
c0017410:	c3                   	ret    

c0017411 <nmiHandler(regs*, void*)>:
c0017411:	83 ec 0c             	sub    esp,0xc
c0017414:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017419:	83 ec 0c             	sub    esp,0xc
c001741c:	50                   	push   eax
c001741d:	e8 94 fe fe ff       	call   c00072b6 <Computer::handleNMI()>
c0017422:	83 c4 10             	add    esp,0x10
c0017425:	90                   	nop
c0017426:	83 c4 0c             	add    esp,0xc
c0017429:	c3                   	ret    

c001742a <doubleFault(regs*, void*)>:
c001742a:	55                   	push   ebp
c001742b:	89 e5                	mov    ebp,esp
c001742d:	83 ec 08             	sub    esp,0x8
c0017430:	83 ec 0c             	sub    esp,0xc
c0017433:	68 1c 26 02 c0       	push   0xc002261c
c0017438:	e8 08 9f ff ff       	call   c0011345 <KePanic(char const*)>
c001743d:	83 c4 10             	add    esp,0x10
c0017440:	90                   	nop
c0017441:	c9                   	leave  
c0017442:	c3                   	ret    

c0017443 <displayDebugInfo(regs*)>:
c0017443:	83 ec 1c             	sub    esp,0x1c
c0017446:	0f 20 c0             	mov    eax,cr0
c0017449:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001744d:	0f 20 d0             	mov    eax,cr2
c0017450:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017454:	0f 20 d8             	mov    eax,cr3
c0017457:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001745b:	0f 20 e0             	mov    eax,cr4
c001745e:	89 04 24             	mov    DWORD PTR [esp],eax
c0017461:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017465:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017468:	83 ec 08             	sub    esp,0x8
c001746b:	50                   	push   eax
c001746c:	68 38 26 02 c0       	push   0xc0022638
c0017471:	e8 cf 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017476:	83 c4 10             	add    esp,0x10
c0017479:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001747d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017480:	83 ec 08             	sub    esp,0x8
c0017483:	50                   	push   eax
c0017484:	68 29 26 02 c0       	push   0xc0022629
c0017489:	e8 b7 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001748e:	83 c4 10             	add    esp,0x10
c0017491:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017495:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017498:	83 ec 08             	sub    esp,0x8
c001749b:	50                   	push   eax
c001749c:	68 34 26 02 c0       	push   0xc0022634
c00174a1:	e8 9f 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00174a6:	83 c4 10             	add    esp,0x10
c00174a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174ad:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00174b0:	83 ec 08             	sub    esp,0x8
c00174b3:	50                   	push   eax
c00174b4:	68 43 26 02 c0       	push   0xc0022643
c00174b9:	e8 87 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00174be:	83 c4 10             	add    esp,0x10
c00174c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174c5:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00174c8:	83 ec 08             	sub    esp,0x8
c00174cb:	50                   	push   eax
c00174cc:	68 4e 26 02 c0       	push   0xc002264e
c00174d1:	e8 6f 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00174d6:	83 c4 10             	add    esp,0x10
c00174d9:	83 ec 08             	sub    esp,0x8
c00174dc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00174e0:	68 59 26 02 c0       	push   0xc0022659
c00174e5:	e8 5b 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00174ea:	83 c4 10             	add    esp,0x10
c00174ed:	83 ec 08             	sub    esp,0x8
c00174f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00174f4:	68 64 26 02 c0       	push   0xc0022664
c00174f9:	e8 47 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00174fe:	83 c4 10             	add    esp,0x10
c0017501:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017505:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017508:	c1 e0 05             	shl    eax,0x5
c001750b:	8d 90 e0 35 02 c0    	lea    edx,[eax-0x3ffdca20]
c0017511:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017515:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017518:	83 ec 04             	sub    esp,0x4
c001751b:	52                   	push   edx
c001751c:	50                   	push   eax
c001751d:	68 6f 26 02 c0       	push   0xc002266f
c0017522:	e8 1e 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017527:	83 c4 10             	add    esp,0x10
c001752a:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001752f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017535:	83 ec 0c             	sub    esp,0xc
c0017538:	50                   	push   eax
c0017539:	e8 1b 12 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c001753e:	83 c4 10             	add    esp,0x10
c0017541:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017546:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001754c:	83 ec 08             	sub    esp,0x8
c001754f:	68 7e 26 02 c0       	push   0xc002267e
c0017554:	50                   	push   eax
c0017555:	e8 4c 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001755a:	83 c4 10             	add    esp,0x10
c001755d:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017562:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017568:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001756c:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001756f:	83 ec 08             	sub    esp,0x8
c0017572:	52                   	push   edx
c0017573:	50                   	push   eax
c0017574:	e8 e7 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017579:	83 c4 10             	add    esp,0x10
c001757c:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017581:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017587:	83 ec 08             	sub    esp,0x8
c001758a:	68 8c 26 02 c0       	push   0xc002268c
c001758f:	50                   	push   eax
c0017590:	e8 11 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017595:	83 c4 10             	add    esp,0x10
c0017598:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001759d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175a3:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00175a8:	8b 12                	mov    edx,DWORD PTR [edx]
c00175aa:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00175ad:	83 c2 0c             	add    edx,0xc
c00175b0:	83 ec 08             	sub    esp,0x8
c00175b3:	52                   	push   edx
c00175b4:	50                   	push   eax
c00175b5:	e8 ec 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00175ba:	83 c4 10             	add    esp,0x10
c00175bd:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175c2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175c8:	83 ec 08             	sub    esp,0x8
c00175cb:	68 95 26 02 c0       	push   0xc0022695
c00175d0:	50                   	push   eax
c00175d1:	e8 d0 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00175d6:	83 c4 10             	add    esp,0x10
c00175d9:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175de:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175e4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00175e8:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00175eb:	83 ec 08             	sub    esp,0x8
c00175ee:	52                   	push   edx
c00175ef:	50                   	push   eax
c00175f0:	e8 6b 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00175f5:	83 c4 10             	add    esp,0x10
c00175f8:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175fd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017603:	83 ec 08             	sub    esp,0x8
c0017606:	68 9d 26 02 c0       	push   0xc002269d
c001760b:	50                   	push   eax
c001760c:	e8 95 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017611:	83 c4 10             	add    esp,0x10
c0017614:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017619:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001761f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017623:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017626:	83 ec 08             	sub    esp,0x8
c0017629:	52                   	push   edx
c001762a:	50                   	push   eax
c001762b:	e8 30 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017630:	83 c4 10             	add    esp,0x10
c0017633:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017638:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001763e:	83 ec 08             	sub    esp,0x8
c0017641:	68 a5 26 02 c0       	push   0xc00226a5
c0017646:	50                   	push   eax
c0017647:	e8 5a 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001764c:	83 c4 10             	add    esp,0x10
c001764f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017654:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001765a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001765e:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017661:	83 ec 08             	sub    esp,0x8
c0017664:	52                   	push   edx
c0017665:	50                   	push   eax
c0017666:	e8 f5 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c001766b:	83 c4 10             	add    esp,0x10
c001766e:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017673:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017679:	83 ec 08             	sub    esp,0x8
c001767c:	68 ad 26 02 c0       	push   0xc00226ad
c0017681:	50                   	push   eax
c0017682:	e8 1f 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017687:	83 c4 10             	add    esp,0x10
c001768a:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001768f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017695:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017699:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001769c:	83 ec 08             	sub    esp,0x8
c001769f:	52                   	push   edx
c00176a0:	50                   	push   eax
c00176a1:	e8 ba 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00176a6:	83 c4 10             	add    esp,0x10
c00176a9:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176ae:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176b4:	83 ec 08             	sub    esp,0x8
c00176b7:	68 b5 26 02 c0       	push   0xc00226b5
c00176bc:	50                   	push   eax
c00176bd:	e8 e4 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00176c2:	83 c4 10             	add    esp,0x10
c00176c5:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176ca:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00176d4:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00176d7:	83 ec 08             	sub    esp,0x8
c00176da:	52                   	push   edx
c00176db:	50                   	push   eax
c00176dc:	e8 7f 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00176e1:	83 c4 10             	add    esp,0x10
c00176e4:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176e9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176ef:	83 ec 08             	sub    esp,0x8
c00176f2:	68 bd 26 02 c0       	push   0xc00226bd
c00176f7:	50                   	push   eax
c00176f8:	e8 a9 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00176fd:	83 c4 10             	add    esp,0x10
c0017700:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017705:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001770b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001770f:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017712:	83 ec 08             	sub    esp,0x8
c0017715:	52                   	push   edx
c0017716:	50                   	push   eax
c0017717:	e8 44 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c001771c:	83 c4 10             	add    esp,0x10
c001771f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017724:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001772a:	83 ec 08             	sub    esp,0x8
c001772d:	68 c5 26 02 c0       	push   0xc00226c5
c0017732:	50                   	push   eax
c0017733:	e8 6e 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017738:	83 c4 10             	add    esp,0x10
c001773b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017740:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017746:	83 ec 08             	sub    esp,0x8
c0017749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001774d:	50                   	push   eax
c001774e:	e8 0d 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017753:	83 c4 10             	add    esp,0x10
c0017756:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001775b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017761:	83 ec 08             	sub    esp,0x8
c0017764:	68 ce 26 02 c0       	push   0xc00226ce
c0017769:	50                   	push   eax
c001776a:	e8 37 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001776f:	83 c4 10             	add    esp,0x10
c0017772:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017777:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001777d:	83 ec 08             	sub    esp,0x8
c0017780:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017784:	50                   	push   eax
c0017785:	e8 d6 12 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c001778a:	83 c4 10             	add    esp,0x10
c001778d:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017792:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017798:	83 ec 08             	sub    esp,0x8
c001779b:	68 d6 26 02 c0       	push   0xc00226d6
c00177a0:	50                   	push   eax
c00177a1:	e8 00 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00177a6:	83 c4 10             	add    esp,0x10
c00177a9:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00177ae:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177b4:	83 ec 08             	sub    esp,0x8
c00177b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00177bb:	50                   	push   eax
c00177bc:	e8 9f 12 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00177c1:	83 c4 10             	add    esp,0x10
c00177c4:	fa                   	cli    
c00177c5:	f4                   	hlt    
c00177c6:	eb fe                	jmp    c00177c6 <displayDebugInfo(regs*)+0x383>

c00177c8 <HalSystemIdle()>:
c00177c8:	56                   	push   esi
c00177c9:	53                   	push   ebx
c00177ca:	83 ec 14             	sub    esp,0x14
c00177cd:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00177d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00177d8:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c00177de:	83 e0 04             	and    eax,0x4
c00177e1:	0f b6 c0             	movzx  eax,al
c00177e4:	85 c0                	test   eax,eax
c00177e6:	0f 95 c0             	setne  al
c00177e9:	0f b6 c0             	movzx  eax,al
c00177ec:	85 c0                	test   eax,eax
c00177ee:	74 4c                	je     c001783c <HalSystemIdle()+0x74>
c00177f0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00177f5:	83 ec 08             	sub    esp,0x8
c00177f8:	68 e1 00 00 00       	push   0xe1
c00177fd:	50                   	push   eax
c00177fe:	e8 bd f8 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0017803:	83 c4 10             	add    esp,0x10
c0017806:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001780a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001780e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017813:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017817:	83 e2 02             	and    edx,0x2
c001781a:	89 d3                	mov    ebx,edx
c001781c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017820:	83 e2 00             	and    edx,0x0
c0017823:	89 d6                	mov    esi,edx
c0017825:	56                   	push   esi
c0017826:	53                   	push   ebx
c0017827:	68 e1 00 00 00       	push   0xe1
c001782c:	50                   	push   eax
c001782d:	e8 ba f8 fe ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0017832:	83 c4 10             	add    esp,0x10
c0017835:	e8 5a 89 fe ff       	call   c0000194 <doTPAUSE>
c001783a:	eb 01                	jmp    c001783d <HalSystemIdle()+0x75>
c001783c:	f4                   	hlt    
c001783d:	90                   	nop
c001783e:	83 c4 14             	add    esp,0x14
c0017841:	5b                   	pop    ebx
c0017842:	5e                   	pop    esi
c0017843:	c3                   	ret    

c0017844 <displayProgramFault(char const*)>:
c0017844:	83 ec 0c             	sub    esp,0xc
c0017847:	83 ec 0c             	sub    esp,0xc
c001784a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001784e:	e8 f2 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017853:	83 c4 10             	add    esp,0x10
c0017856:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001785b:	8b 00                	mov    eax,DWORD PTR [eax]
c001785d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017860:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017866:	85 c0                	test   eax,eax
c0017868:	74 21                	je     c001788b <displayProgramFault(char const*)+0x47>
c001786a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001786f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017871:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017874:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001787a:	6a 04                	push   0x4
c001787c:	6a 0f                	push   0xf
c001787e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017882:	50                   	push   eax
c0017883:	e8 90 12 ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017888:	83 c4 10             	add    esp,0x10
c001788b:	90                   	nop
c001788c:	83 c4 0c             	add    esp,0xc
c001788f:	c3                   	ret    

c0017890 <gpFault(regs*, void*)>:
c0017890:	83 ec 1c             	sub    esp,0x1c
c0017893:	c7 05 74 97 02 c0 ec 6c 01 c0 	mov    DWORD PTR ds:0xc0029774,0xc0016cec
c001789d:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c00178a2:	85 c0                	test   eax,eax
c00178a4:	74 1e                	je     c00178c4 <gpFault(regs*, void*)+0x34>
c00178a6:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c00178ab:	83 ec 0c             	sub    esp,0xc
c00178ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178b2:	ff d0                	call   eax
c00178b4:	83 c4 10             	add    esp,0x10
c00178b7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00178bb:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00178c0:	85 c0                	test   eax,eax
c00178c2:	75 2e                	jne    c00178f2 <gpFault(regs*, void*)+0x62>
c00178c4:	83 ec 0c             	sub    esp,0xc
c00178c7:	68 de 26 02 c0       	push   0xc00226de
c00178cc:	e8 73 ff ff ff       	call   c0017844 <displayProgramFault(char const*)>
c00178d1:	83 c4 10             	add    esp,0x10
c00178d4:	83 ec 0c             	sub    esp,0xc
c00178d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178db:	e8 63 fb ff ff       	call   c0017443 <displayDebugInfo(regs*)>
c00178e0:	83 c4 10             	add    esp,0x10
c00178e3:	83 ec 0c             	sub    esp,0xc
c00178e6:	6a 00                	push   0x0
c00178e8:	e8 a3 ed ff ff       	call   c0016690 <Thr::terminateFromIRQ(int)>
c00178ed:	83 c4 10             	add    esp,0x10
c00178f0:	eb 01                	jmp    c00178f3 <gpFault(regs*, void*)+0x63>
c00178f2:	90                   	nop
c00178f3:	83 c4 1c             	add    esp,0x1c
c00178f6:	c3                   	ret    

c00178f7 <pgFault(regs*, void*)>:
c00178f7:	83 ec 1c             	sub    esp,0x1c
c00178fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178fe:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017901:	0f 20 d0             	mov    eax,cr2
c0017904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017908:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001790c:	83 ec 04             	sub    esp,0x4
c001790f:	52                   	push   edx
c0017910:	50                   	push   eax
c0017911:	68 bc 27 02 c0       	push   0xc00227bc
c0017916:	e8 2a 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001791b:	83 c4 10             	add    esp,0x10
c001791e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017923:	8b 00                	mov    eax,DWORD PTR [eax]
c0017925:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017928:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001792e:	0f 20 d2             	mov    edx,cr2
c0017931:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017935:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017939:	83 ec 08             	sub    esp,0x8
c001793c:	52                   	push   edx
c001793d:	50                   	push   eax
c001793e:	e8 4d 2a ff ff       	call   c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017943:	83 c4 10             	add    esp,0x10
c0017946:	0f b6 c0             	movzx  eax,al
c0017949:	85 c0                	test   eax,eax
c001794b:	75 2e                	jne    c001797b <pgFault(regs*, void*)+0x84>
c001794d:	83 ec 0c             	sub    esp,0xc
c0017950:	68 f7 26 02 c0       	push   0xc00226f7
c0017955:	e8 ea fe ff ff       	call   c0017844 <displayProgramFault(char const*)>
c001795a:	83 c4 10             	add    esp,0x10
c001795d:	83 ec 0c             	sub    esp,0xc
c0017960:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017964:	e8 da fa ff ff       	call   c0017443 <displayDebugInfo(regs*)>
c0017969:	83 c4 10             	add    esp,0x10
c001796c:	83 ec 0c             	sub    esp,0xc
c001796f:	6a 00                	push   0x0
c0017971:	e8 1a ed ff ff       	call   c0016690 <Thr::terminateFromIRQ(int)>
c0017976:	83 c4 10             	add    esp,0x10
c0017979:	eb 01                	jmp    c001797c <pgFault(regs*, void*)+0x85>
c001797b:	90                   	nop
c001797c:	83 c4 1c             	add    esp,0x1c
c001797f:	c3                   	ret    

c0017980 <otherISRHandler(regs*, void*)>:
c0017980:	83 ec 0c             	sub    esp,0xc
c0017983:	83 ec 0c             	sub    esp,0xc
c0017986:	68 e4 27 02 c0       	push   0xc00227e4
c001798b:	e8 b4 fe ff ff       	call   c0017844 <displayProgramFault(char const*)>
c0017990:	83 c4 10             	add    esp,0x10
c0017993:	83 ec 0c             	sub    esp,0xc
c0017996:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001799a:	e8 a4 fa ff ff       	call   c0017443 <displayDebugInfo(regs*)>
c001799f:	83 c4 10             	add    esp,0x10
c00179a2:	83 ec 0c             	sub    esp,0xc
c00179a5:	6a 00                	push   0x0
c00179a7:	e8 e4 ec ff ff       	call   c0016690 <Thr::terminateFromIRQ(int)>
c00179ac:	83 c4 10             	add    esp,0x10
c00179af:	90                   	nop
c00179b0:	83 c4 0c             	add    esp,0xc
c00179b3:	c3                   	ret    

c00179b4 <opcodeFault(regs*, void*)>:
c00179b4:	55                   	push   ebp
c00179b5:	89 e5                	mov    ebp,esp
c00179b7:	83 ec 08             	sub    esp,0x8
c00179ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179bd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00179c0:	83 ec 08             	sub    esp,0x8
c00179c3:	50                   	push   eax
c00179c4:	68 02 27 02 c0       	push   0xc0022702
c00179c9:	e8 77 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00179ce:	83 c4 10             	add    esp,0x10
c00179d1:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00179d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00179dc:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00179e2:	0f b6 c0             	movzx  eax,al
c00179e5:	85 c0                	test   eax,eax
c00179e7:	74 21                	je     c0017a0a <opcodeFault(regs*, void*)+0x56>
c00179e9:	83 ec 0c             	sub    esp,0xc
c00179ec:	68 0c 28 02 c0       	push   0xc002280c
c00179f1:	e8 4f 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00179f6:	83 c4 10             	add    esp,0x10
c00179f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179fc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00179ff:	8d 50 19             	lea    edx,[eax+0x19]
c0017a02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a05:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017a08:	eb 2b                	jmp    c0017a35 <opcodeFault(regs*, void*)+0x81>
c0017a0a:	83 ec 0c             	sub    esp,0xc
c0017a0d:	68 10 27 02 c0       	push   0xc0022710
c0017a12:	e8 2d fe ff ff       	call   c0017844 <displayProgramFault(char const*)>
c0017a17:	83 c4 10             	add    esp,0x10
c0017a1a:	83 ec 0c             	sub    esp,0xc
c0017a1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017a20:	e8 1e fa ff ff       	call   c0017443 <displayDebugInfo(regs*)>
c0017a25:	83 c4 10             	add    esp,0x10
c0017a28:	83 ec 0c             	sub    esp,0xc
c0017a2b:	6a 00                	push   0x0
c0017a2d:	e8 5e ec ff ff       	call   c0016690 <Thr::terminateFromIRQ(int)>
c0017a32:	83 c4 10             	add    esp,0x10
c0017a35:	c9                   	leave  
c0017a36:	c3                   	ret    

c0017a37 <i386SaveCoprocessor(void*)>:
c0017a37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a3b:	83 c0 3f             	add    eax,0x3f
c0017a3e:	83 e0 c0             	and    eax,0xffffffc0
c0017a41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a45:	ff 25 70 97 02 c0    	jmp    DWORD PTR ds:0xc0029770

c0017a4b <i386LoadCoprocessor(void*)>:
c0017a4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a4f:	83 c0 3f             	add    eax,0x3f
c0017a52:	83 e0 c0             	and    eax,0xffffffc0
c0017a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a59:	ff 25 6c 97 02 c0    	jmp    DWORD PTR ds:0xc002976c

c0017a5f <x87EmulHandler(regs*, void*)>:
c0017a5f:	53                   	push   ebx
c0017a60:	83 ec 08             	sub    esp,0x8
c0017a63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a68:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017a6c:	74 10                	je     c0017a7e <x87EmulHandler(regs*, void*)+0x1f>
c0017a6e:	83 ec 0c             	sub    esp,0xc
c0017a71:	68 1d 27 02 c0       	push   0xc002271d
c0017a76:	e8 ca 98 ff ff       	call   c0011345 <KePanic(char const*)>
c0017a7b:	83 c4 10             	add    esp,0x10
c0017a7e:	0f 20 c0             	mov    eax,cr0
c0017a81:	a8 08                	test   al,0x8
c0017a83:	74 59                	je     c0017ade <x87EmulHandler(regs*, void*)+0x7f>
c0017a85:	0f 06                	clts   
c0017a87:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017a8c:	85 c0                	test   eax,eax
c0017a8e:	74 0e                	je     c0017a9e <x87EmulHandler(regs*, void*)+0x3f>
c0017a90:	83 ec 0c             	sub    esp,0xc
c0017a93:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017a96:	e8 9c ff ff ff       	call   c0017a37 <i386SaveCoprocessor(void*)>
c0017a9b:	83 c4 10             	add    esp,0x10
c0017a9e:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017aa4:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017aa8:	75 12                	jne    c0017abc <x87EmulHandler(regs*, void*)+0x5d>
c0017aaa:	83 ec 0c             	sub    esp,0xc
c0017aad:	68 40 02 00 00       	push   0x240
c0017ab2:	e8 ff ff fe ff       	call   c0007ab6 <malloc>
c0017ab7:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017aba:	eb 10                	jmp    c0017acc <x87EmulHandler(regs*, void*)+0x6d>
c0017abc:	83 ec 0c             	sub    esp,0xc
c0017abf:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017ac4:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017ac7:	e8 7f ff ff ff       	call   c0017a4b <i386LoadCoprocessor(void*)>
c0017acc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ad1:	83 c4 10             	add    esp,0x10
c0017ad4:	a3 68 97 02 c0       	mov    ds:0xc0029768,eax
c0017ad9:	83 c4 08             	add    esp,0x8
c0017adc:	5b                   	pop    ebx
c0017add:	c3                   	ret    
c0017ade:	83 ec 0c             	sub    esp,0xc
c0017ae1:	68 31 27 02 c0       	push   0xc0022731
c0017ae6:	e8 5a 2e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017aeb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017af3:	83 c4 18             	add    esp,0x18
c0017af6:	5b                   	pop    ebx
c0017af7:	e9 94 eb ff ff       	jmp    c0016690 <Thr::terminateFromIRQ(int)>

c0017afc <HalInitialiseCoprocessor()>:
c0017afc:	83 ec 10             	sub    esp,0x10
c0017aff:	c7 05 68 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029768,0x0
c0017b09:	6a 00                	push   0x0
c0017b0b:	68 5f 7a 01 c0       	push   0xc0017a5f
c0017b10:	6a 07                	push   0x7
c0017b12:	e8 33 51 ff ff       	call   c000cc4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017b17:	e8 54 70 00 00       	call   c001eb70 <avxDetect>
c0017b1c:	83 c4 10             	add    esp,0x10
c0017b1f:	85 c0                	test   eax,eax
c0017b21:	74 1c                	je     c0017b3f <HalInitialiseCoprocessor()+0x43>
c0017b23:	c7 05 70 97 02 c0 9a eb 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001eb9a
c0017b2d:	c7 05 6c 97 02 c0 ab eb 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ebab
c0017b37:	83 c4 0c             	add    esp,0xc
c0017b3a:	e9 7d 70 00 00       	jmp    c001ebbc <avxInit>
c0017b3f:	e8 bc 73 00 00       	call   c001ef00 <absolutelyNoChanceInHell>
c0017b44:	85 c0                	test   eax,eax
c0017b46:	74 1c                	je     c0017b64 <HalInitialiseCoprocessor()+0x68>
c0017b48:	c7 05 70 97 02 c0 18 ef 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ef18
c0017b52:	c7 05 6c 97 02 c0 20 ef 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ef20
c0017b5c:	83 c4 0c             	add    esp,0xc
c0017b5f:	e9 c4 73 00 00       	jmp    c001ef28 <sseInit>
c0017b64:	e8 dd 73 00 00       	call   c001ef46 <x87Detect>
c0017b69:	85 c0                	test   eax,eax
c0017b6b:	74 1c                	je     c0017b89 <HalInitialiseCoprocessor()+0x8d>
c0017b6d:	c7 05 70 97 02 c0 61 ef 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ef61
c0017b77:	c7 05 6c 97 02 c0 68 ef 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ef68
c0017b81:	83 c4 0c             	add    esp,0xc
c0017b84:	e9 e6 73 00 00       	jmp    c001ef6f <x87Init>
c0017b89:	c7 05 70 97 02 c0 10 74 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc0017410
c0017b93:	c7 05 6c 97 02 c0 10 74 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc0017410
c0017b9d:	0f 20 c0             	mov    eax,cr0
c0017ba0:	83 c8 04             	or     eax,0x4
c0017ba3:	0f 22 c0             	mov    cr0,eax
c0017ba6:	83 c4 0c             	add    esp,0xc
c0017ba9:	c3                   	ret    

c0017baa <HalPanic(char const*)>:
c0017baa:	53                   	push   ebx
c0017bab:	83 ec 10             	sub    esp,0x10
c0017bae:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017bb2:	fa                   	cli    
c0017bb3:	53                   	push   ebx
c0017bb4:	68 47 27 02 c0       	push   0xc0022747
c0017bb9:	e8 87 2d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017bbe:	a1 64 97 02 c0       	mov    eax,ds:0xc0029764
c0017bc3:	83 c4 10             	add    esp,0x10
c0017bc6:	85 c0                	test   eax,eax
c0017bc8:	74 09                	je     c0017bd3 <HalPanic(char const*)+0x29>
c0017bca:	83 ec 0c             	sub    esp,0xc
c0017bcd:	53                   	push   ebx
c0017bce:	ff d0                	call   eax
c0017bd0:	83 c4 10             	add    esp,0x10
c0017bd3:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0017bd8:	85 c0                	test   eax,eax
c0017bda:	0f 84 dc 00 00 00    	je     c0017cbc <HalPanic(char const*)+0x112>
c0017be0:	52                   	push   edx
c0017be1:	6a 01                	push   0x1
c0017be3:	6a 0f                	push   0xf
c0017be5:	50                   	push   eax
c0017be6:	e8 c9 09 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017beb:	59                   	pop    ecx
c0017bec:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017bf2:	e8 ad 0b ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0017bf7:	58                   	pop    eax
c0017bf8:	5a                   	pop    edx
c0017bf9:	68 c4 09 02 c0       	push   0xc00209c4
c0017bfe:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c04:	e8 e3 09 ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c0017c09:	83 c4 0c             	add    esp,0xc
c0017c0c:	6a 01                	push   0x1
c0017c0e:	6a 0f                	push   0xf
c0017c10:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c16:	e8 99 09 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017c1b:	59                   	pop    ecx
c0017c1c:	58                   	pop    eax
c0017c1d:	68 60 27 02 c0       	push   0xc0022760
c0017c22:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c28:	e8 79 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017c2d:	83 c4 0c             	add    esp,0xc
c0017c30:	6a 0f                	push   0xf
c0017c32:	6a 01                	push   0x1
c0017c34:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c3a:	e8 75 09 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017c3f:	58                   	pop    eax
c0017c40:	5a                   	pop    edx
c0017c41:	68 69 27 02 c0       	push   0xc0022769
c0017c46:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c4c:	e8 55 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017c51:	83 c4 0c             	add    esp,0xc
c0017c54:	6a 01                	push   0x1
c0017c56:	6a 0f                	push   0xf
c0017c58:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c5e:	e8 51 09 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017c63:	59                   	pop    ecx
c0017c64:	58                   	pop    eax
c0017c65:	68 ad 27 02 c0       	push   0xc00227ad
c0017c6a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c70:	e8 31 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017c75:	58                   	pop    eax
c0017c76:	5a                   	pop    edx
c0017c77:	68 76 27 02 c0       	push   0xc0022776
c0017c7c:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c82:	e8 1f 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017c87:	59                   	pop    ecx
c0017c88:	58                   	pop    eax
c0017c89:	68 b0 27 02 c0       	push   0xc00227b0
c0017c8e:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c94:	e8 0d 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017c99:	58                   	pop    eax
c0017c9a:	5a                   	pop    edx
c0017c9b:	53                   	push   ebx
c0017c9c:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ca2:	e8 ff 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017ca7:	59                   	pop    ecx
c0017ca8:	5b                   	pop    ebx
c0017ca9:	68 ad 27 02 c0       	push   0xc00227ad
c0017cae:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017cb4:	e8 ed 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017cb9:	83 c4 10             	add    esp,0x10
c0017cbc:	eb fe                	jmp    c0017cbc <HalPanic(char const*)+0x112>

c0017cbe <HalQueryPerformanceCounter()>:
c0017cbe:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017cc3:	31 d2                	xor    edx,edx
c0017cc5:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017ccb:	31 c0                	xor    eax,eax
c0017ccd:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017cd4:	74 02                	je     c0017cd8 <HalQueryPerformanceCounter()+0x1a>
c0017cd6:	0f 31                	rdtsc  
c0017cd8:	c3                   	ret    

c0017cd9 <HalInitialise()>:
c0017cd9:	53                   	push   ebx
c0017cda:	83 ec 08             	sub    esp,0x8
c0017cdd:	e8 98 51 ff ff       	call   c000ce7a <setupINTS()>
c0017ce2:	80 3d e0 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028be0,0x0
c0017ce9:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017cee:	75 0f                	jne    c0017cff <HalInitialise()+0x26>
c0017cf0:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017cf6:	83 e2 fe             	and    edx,0xfffffffe
c0017cf9:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017cff:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017d05:	c6 05 60 97 02 c0 00 	mov    BYTE PTR ds:0xc0029760,0x0
c0017d0c:	83 e2 fe             	and    edx,0xfffffffe
c0017d0f:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017d15:	e8 9e 02 00 00       	call   c0017fb8 <picOpen()>
c0017d1a:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017d21:	74 0a                	je     c0017d2d <HalInitialise()+0x54>
c0017d23:	e8 e0 01 00 00       	call   c0017f08 <picDisable()>
c0017d28:	e8 ad 67 00 00       	call   c001e4da <apicOpen()>
c0017d2d:	bb 0f 00 00 00       	mov    ebx,0xf
c0017d32:	50                   	push   eax
c0017d33:	6a 00                	push   0x0
c0017d35:	68 80 79 01 c0       	push   0xc0017980
c0017d3a:	6a 00                	push   0x0
c0017d3c:	e8 09 4f ff ff       	call   c000cc4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d41:	83 c4 0c             	add    esp,0xc
c0017d44:	6a 00                	push   0x0
c0017d46:	68 80 79 01 c0       	push   0xc0017980
c0017d4b:	6a 01                	push   0x1
c0017d4d:	e8 f8 4e ff ff       	call   c000cc4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d52:	83 c4 0c             	add    esp,0xc
c0017d55:	6a 00                	push   0x0
c0017d57:	68 11 74 01 c0       	push   0xc0017411
c0017d5c:	6a 02                	push   0x2
c0017d5e:	e8 e7 4e ff ff       	call   c000cc4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d63:	83 c4 0c             	add    esp,0xc
c0017d66:	6a 00                	push   0x0
c0017d68:	68 80 79 01 c0       	push   0xc0017980
c0017d6d:	6a 03                	push   0x3
c0017d6f:	e8 d6 4e ff ff       	call   c000cc4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d74:	83 c4 0c             	add    esp,0xc
c0017d77:	6a 00                	push   0x0
c0017d79:	68 80 79 01 c0       	push   0xc0017980
c0017d7e:	6a 04                	push   0x4
c0017d80:	e8 c5 4e ff ff       	call   c000cc4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d85:	83 c4 0c             	add    esp,0xc
c0017d88:	6a 00                	push   0x0
c0017d8a:	68 80 79 01 c0       	push   0xc0017980
c0017d8f:	6a 05                	push   0x5
c0017d91:	e8 b4 4e ff ff       	call   c000cc4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d96:	83 c4 0c             	add    esp,0xc
c0017d99:	6a 00                	push   0x0
c0017d9b:	68 b4 79 01 c0       	push   0xc00179b4
c0017da0:	6a 06                	push   0x6
c0017da2:	e8 a3 4e ff ff       	call   c000cc4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017da7:	83 c4 0c             	add    esp,0xc
c0017daa:	6a 00                	push   0x0
c0017dac:	68 2a 74 01 c0       	push   0xc001742a
c0017db1:	6a 08                	push   0x8
c0017db3:	e8 92 4e ff ff       	call   c000cc4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017db8:	83 c4 0c             	add    esp,0xc
c0017dbb:	6a 00                	push   0x0
c0017dbd:	68 80 79 01 c0       	push   0xc0017980
c0017dc2:	6a 09                	push   0x9
c0017dc4:	e8 81 4e ff ff       	call   c000cc4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017dc9:	83 c4 0c             	add    esp,0xc
c0017dcc:	6a 00                	push   0x0
c0017dce:	68 80 79 01 c0       	push   0xc0017980
c0017dd3:	6a 0a                	push   0xa
c0017dd5:	e8 70 4e ff ff       	call   c000cc4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017dda:	83 c4 0c             	add    esp,0xc
c0017ddd:	6a 00                	push   0x0
c0017ddf:	68 80 79 01 c0       	push   0xc0017980
c0017de4:	6a 0b                	push   0xb
c0017de6:	e8 5f 4e ff ff       	call   c000cc4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017deb:	83 c4 0c             	add    esp,0xc
c0017dee:	6a 00                	push   0x0
c0017df0:	68 90 78 01 c0       	push   0xc0017890
c0017df5:	6a 0d                	push   0xd
c0017df7:	e8 4e 4e ff ff       	call   c000cc4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017dfc:	83 c4 0c             	add    esp,0xc
c0017dff:	6a 00                	push   0x0
c0017e01:	68 f7 78 01 c0       	push   0xc00178f7
c0017e06:	6a 0e                	push   0xe
c0017e08:	e8 3d 4e ff ff       	call   c000cc4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e0d:	83 c4 10             	add    esp,0x10
c0017e10:	50                   	push   eax
c0017e11:	6a 00                	push   0x0
c0017e13:	68 80 79 01 c0       	push   0xc0017980
c0017e18:	53                   	push   ebx
c0017e19:	43                   	inc    ebx
c0017e1a:	e8 2b 4e ff ff       	call   c000cc4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e1f:	83 c4 10             	add    esp,0x10
c0017e22:	83 fb 1e             	cmp    ebx,0x1e
c0017e25:	75 e9                	jne    c0017e10 <HalInitialise()+0x137>
c0017e27:	50                   	push   eax
c0017e28:	6a 00                	push   0x0
c0017e2a:	68 2b 26 01 c0       	push   0xc001262b
c0017e2f:	6a 60                	push   0x60
c0017e31:	e8 14 4e ff ff       	call   c000cc4a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e36:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017e3b:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017e45:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017e4c:	e8 65 fc fe ff       	call   c0007ab6 <malloc>
c0017e51:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e54:	89 c3                	mov    ebx,eax
c0017e56:	e8 3b 09 00 00       	call   c0018796 <RTC::RTC()>
c0017e5b:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017e65:	5a                   	pop    edx
c0017e66:	59                   	pop    ecx
c0017e67:	53                   	push   ebx
c0017e68:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017e6e:	e8 a3 48 ff ff       	call   c000c716 <Device::addChild(Device*)>
c0017e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017e75:	6a 00                	push   0x0
c0017e77:	6a 00                	push   0x0
c0017e79:	6a 00                	push   0x0
c0017e7b:	53                   	push   ebx
c0017e7c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017e7f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017e84:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017e8a:	83 c4 28             	add    esp,0x28
c0017e8d:	5b                   	pop    ebx
c0017e8e:	c3                   	ret    

c0017e8f <HalMakeBeep(int)>:
c0017e8f:	53                   	push   ebx
c0017e90:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017e94:	85 db                	test   ebx,ebx
c0017e96:	75 07                	jne    c0017e9f <HalMakeBeep(int)+0x10>
c0017e98:	e4 61                	in     al,0x61
c0017e9a:	83 e0 fc             	and    eax,0xfffffffc
c0017e9d:	eb 26                	jmp    c0017ec5 <HalMakeBeep(int)+0x36>
c0017e9f:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017ea4:	99                   	cdq    
c0017ea5:	f7 fb                	idiv   ebx
c0017ea7:	89 c1                	mov    ecx,eax
c0017ea9:	b0 b6                	mov    al,0xb6
c0017eab:	e6 43                	out    0x43,al
c0017ead:	88 c8                	mov    al,cl
c0017eaf:	e6 42                	out    0x42,al
c0017eb1:	89 c8                	mov    eax,ecx
c0017eb3:	c1 e8 08             	shr    eax,0x8
c0017eb6:	e6 42                	out    0x42,al
c0017eb8:	e4 61                	in     al,0x61
c0017eba:	89 c2                	mov    edx,eax
c0017ebc:	83 ca 03             	or     edx,0x3
c0017ebf:	38 d0                	cmp    al,dl
c0017ec1:	74 04                	je     c0017ec7 <HalMakeBeep(int)+0x38>
c0017ec3:	88 d0                	mov    al,dl
c0017ec5:	e6 61                	out    0x61,al
c0017ec7:	5b                   	pop    ebx
c0017ec8:	c3                   	ret    

c0017ec9 <HalGetRand()>:
c0017ec9:	31 c0                	xor    eax,eax
c0017ecb:	c3                   	ret    

c0017ecc <HalEndOfInterrupt(int)>:
c0017ecc:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017ed3:	74 23                	je     c0017ef8 <HalEndOfInterrupt(int)+0x2c>
c0017ed5:	83 ec 14             	sub    esp,0x14
c0017ed8:	6a 1b                	push   0x1b
c0017eda:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017ee0:	e8 db f1 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0017ee5:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017eea:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017ef4:	83 c4 1c             	add    esp,0x1c
c0017ef7:	c3                   	ret    
c0017ef8:	e9 3f 02 00 00       	jmp    c001813c <picEOI(int)>

c0017efd <HalRestart()>:
c0017efd:	c3                   	ret    

c0017efe <HalShutdown()>:
c0017efe:	c3                   	ret    

c0017eff <HalSleep()>:
c0017eff:	c3                   	ret    

c0017f00 <picIoWait()>:
c0017f00:	eb 00                	jmp    c0017f02 <picIoWait()+0x2>
c0017f02:	eb 00                	jmp    c0017f04 <picIoWait()+0x4>
c0017f04:	90                   	nop
c0017f05:	c3                   	ret    
c0017f06:	66 90                	xchg   ax,ax

c0017f08 <picDisable()>:
c0017f08:	83 ec 10             	sub    esp,0x10
c0017f0b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0017f12:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0017f17:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017f1b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017f20:	ee                   	out    dx,al
c0017f21:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017f28:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017f2d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017f31:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017f36:	ee                   	out    dx,al
c0017f37:	90                   	nop
c0017f38:	83 c4 10             	add    esp,0x10
c0017f3b:	c3                   	ret    

c0017f3c <picGetIRQReg(int)>:
c0017f3c:	83 ec 10             	sub    esp,0x10
c0017f3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017f43:	0f b6 c0             	movzx  eax,al
c0017f46:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017f4d:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017f51:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017f55:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017f5a:	ee                   	out    dx,al
c0017f5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017f5f:	0f b6 c0             	movzx  eax,al
c0017f62:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017f69:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017f6d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017f71:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017f76:	ee                   	out    dx,al
c0017f77:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017f7e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0017f83:	89 c2                	mov    edx,eax
c0017f85:	ec                   	in     al,dx
c0017f86:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017f8a:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017f8e:	0f b6 c0             	movzx  eax,al
c0017f91:	c1 e0 08             	shl    eax,0x8
c0017f94:	89 c1                	mov    ecx,eax
c0017f96:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017f9d:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0017fa2:	89 c2                	mov    edx,eax
c0017fa4:	ec                   	in     al,dx
c0017fa5:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017fa9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017fad:	0f b6 c0             	movzx  eax,al
c0017fb0:	09 c8                	or     eax,ecx
c0017fb2:	83 c4 10             	add    esp,0x10
c0017fb5:	c3                   	ret    
c0017fb6:	66 90                	xchg   ax,ax

c0017fb8 <picOpen()>:
c0017fb8:	83 ec 50             	sub    esp,0x50
c0017fbb:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0017fc2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017fc7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017fcb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017fcf:	ee                   	out    dx,al
c0017fd0:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0017fd7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017fdc:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017fe0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017fe4:	ee                   	out    dx,al
c0017fe5:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017fed:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0017ff5:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017ffc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018000:	89 c2                	mov    edx,eax
c0018002:	ec                   	in     al,dx
c0018003:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0018007:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001800b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001800f:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0018016:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001801a:	89 c2                	mov    edx,eax
c001801c:	ec                   	in     al,dx
c001801d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018021:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018025:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0018029:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0018030:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018035:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018039:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001803d:	ee                   	out    dx,al
c001803e:	e8 bd fe ff ff       	call   c0017f00 <picIoWait()>
c0018043:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001804a:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001804f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0018053:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018057:	ee                   	out    dx,al
c0018058:	e8 a3 fe ff ff       	call   c0017f00 <picIoWait()>
c001805d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018061:	0f b6 c0             	movzx  eax,al
c0018064:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001806b:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001806f:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0018073:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018077:	ee                   	out    dx,al
c0018078:	e8 83 fe ff ff       	call   c0017f00 <picIoWait()>
c001807d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018081:	0f b6 c0             	movzx  eax,al
c0018084:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001808b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001808f:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0018093:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018097:	ee                   	out    dx,al
c0018098:	e8 63 fe ff ff       	call   c0017f00 <picIoWait()>
c001809d:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00180a4:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00180a9:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00180ad:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00180b1:	ee                   	out    dx,al
c00180b2:	e8 49 fe ff ff       	call   c0017f00 <picIoWait()>
c00180b7:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00180be:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00180c3:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00180c7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00180cb:	ee                   	out    dx,al
c00180cc:	e8 2f fe ff ff       	call   c0017f00 <picIoWait()>
c00180d1:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00180d8:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00180dd:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00180e1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00180e5:	ee                   	out    dx,al
c00180e6:	e8 15 fe ff ff       	call   c0017f00 <picIoWait()>
c00180eb:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00180f2:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00180f7:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00180fb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00180ff:	ee                   	out    dx,al
c0018100:	e8 fb fd ff ff       	call   c0017f00 <picIoWait()>
c0018105:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001810a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018111:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018115:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018119:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001811d:	ee                   	out    dx,al
c001811e:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0018123:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001812a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001812e:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0018132:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018136:	ee                   	out    dx,al
c0018137:	90                   	nop
c0018138:	83 c4 50             	add    esp,0x50
c001813b:	c3                   	ret    

c001813c <picEOI(int)>:
c001813c:	83 ec 10             	sub    esp,0x10
c001813f:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018144:	75 1e                	jne    c0018164 <picEOI(int)+0x28>
c0018146:	6a 0b                	push   0xb
c0018148:	e8 ef fd ff ff       	call   c0017f3c <picGetIRQReg(int)>
c001814d:	83 c4 04             	add    esp,0x4
c0018150:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018155:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001815a:	25 80 00 00 00       	and    eax,0x80
c001815f:	74 73                	je     c00181d4 <picEOI(int)+0x98>
c0018161:	8d 76 00             	lea    esi,[esi+0x0]
c0018164:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018169:	75 31                	jne    c001819c <picEOI(int)+0x60>
c001816b:	6a 0b                	push   0xb
c001816d:	e8 ca fd ff ff       	call   c0017f3c <picGetIRQReg(int)>
c0018172:	83 c4 04             	add    esp,0x4
c0018175:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001817a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001817e:	98                   	cwde   
c001817f:	85 c0                	test   eax,eax
c0018181:	78 19                	js     c001819c <picEOI(int)+0x60>
c0018183:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001818a:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001818f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018193:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018198:	ee                   	out    dx,al
c0018199:	eb 3d                	jmp    c00181d8 <picEOI(int)+0x9c>
c001819b:	90                   	nop
c001819c:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00181a1:	7e 19                	jle    c00181bc <picEOI(int)+0x80>
c00181a3:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00181aa:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00181af:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00181b3:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00181b8:	ee                   	out    dx,al
c00181b9:	8d 76 00             	lea    esi,[esi+0x0]
c00181bc:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00181c3:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00181c8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00181cc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00181d1:	ee                   	out    dx,al
c00181d2:	eb 04                	jmp    c00181d8 <picEOI(int)+0x9c>
c00181d4:	90                   	nop
c00181d5:	8d 76 00             	lea    esi,[esi+0x0]
c00181d8:	83 c4 10             	add    esp,0x10
c00181db:	c3                   	ret    

c00181dc <RTC::open(int, int, void*)>:
c00181dc:	31 c0                	xor    eax,eax
c00181de:	c3                   	ret    
c00181df:	90                   	nop

c00181e0 <RTC::close(int, int, void*)>:
c00181e0:	31 c0                	xor    eax,eax
c00181e2:	c3                   	ret    
c00181e3:	90                   	nop

c00181e4 <RTC::timeInSecondsUTC()>:
c00181e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181e8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00181ee:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00181f4:	c3                   	ret    
c00181f5:	90                   	nop

c00181f6 <RTC::timeInDatetimeUTC()>:
c00181f6:	53                   	push   ebx
c00181f7:	83 ec 14             	sub    esp,0x14
c00181fa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00181fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018202:	8b 10                	mov    edx,DWORD PTR [eax]
c0018204:	50                   	push   eax
c0018205:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018208:	83 c4 0c             	add    esp,0xc
c001820b:	52                   	push   edx
c001820c:	50                   	push   eax
c001820d:	53                   	push   ebx
c001820e:	e8 77 42 ff ff       	call   c000c48a <secondsToDatetime(unsigned long long)>
c0018213:	89 d8                	mov    eax,ebx
c0018215:	83 c4 14             	add    esp,0x14
c0018218:	5b                   	pop    ebx
c0018219:	c2 04 00             	ret    0x4

c001821c <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001821c:	56                   	push   esi
c001821d:	53                   	push   ebx
c001821e:	83 ec 14             	sub    esp,0x14
c0018221:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018225:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018227:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001822a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001822e:	52                   	push   edx
c001822f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018237:	50                   	push   eax
c0018238:	e8 4d 42 ff ff       	call   c000c48a <secondsToDatetime(unsigned long long)>
c001823d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018241:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018245:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018249:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001824d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018251:	89 f0                	mov    eax,esi
c0018253:	83 c4 20             	add    esp,0x20
c0018256:	5b                   	pop    ebx
c0018257:	5e                   	pop    esi
c0018258:	ff e0                	jmp    eax

c001825a <RTC::~RTC()>:
c001825a:	83 ec 0c             	sub    esp,0xc
c001825d:	ba 4c 28 02 c0       	mov    edx,0xc002284c
c0018262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018266:	89 10                	mov    DWORD PTR [eax],edx
c0018268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001826c:	83 ec 0c             	sub    esp,0xc
c001826f:	50                   	push   eax
c0018270:	e8 a7 3f ff ff       	call   c000c21c <Clock::~Clock()>
c0018275:	83 c4 10             	add    esp,0x10
c0018278:	90                   	nop
c0018279:	83 c4 0c             	add    esp,0xc
c001827c:	c3                   	ret    
c001827d:	90                   	nop

c001827e <RTC::~RTC()>:
c001827e:	83 ec 0c             	sub    esp,0xc
c0018281:	83 ec 0c             	sub    esp,0xc
c0018284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018288:	e8 cd ff ff ff       	call   c001825a <RTC::~RTC()>
c001828d:	83 c4 10             	add    esp,0x10
c0018290:	83 ec 08             	sub    esp,0x8
c0018293:	68 60 01 00 00       	push   0x160
c0018298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001829c:	e8 77 25 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00182a1:	83 c4 10             	add    esp,0x10
c00182a4:	83 c4 0c             	add    esp,0xc
c00182a7:	c3                   	ret    

c00182a8 <RTC::get_update_in_progress_flag()>:
c00182a8:	83 ec 14             	sub    esp,0x14
c00182ab:	6a 0a                	push   0xa
c00182ad:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182b3:	e8 c0 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00182b8:	83 c4 1c             	add    esp,0x1c
c00182bb:	0f b6 c0             	movzx  eax,al
c00182be:	c1 e8 07             	shr    eax,0x7
c00182c1:	c3                   	ret    

c00182c2 <RTC::completeRTCRefresh()>:
c00182c2:	55                   	push   ebp
c00182c3:	57                   	push   edi
c00182c4:	56                   	push   esi
c00182c5:	53                   	push   ebx
c00182c6:	83 ec 3c             	sub    esp,0x3c
c00182c9:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c00182cf:	83 ec 0c             	sub    esp,0xc
c00182d2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00182d6:	e8 cd ff ff ff       	call   c00182a8 <RTC::get_update_in_progress_flag()>
c00182db:	83 c4 10             	add    esp,0x10
c00182de:	84 c0                	test   al,al
c00182e0:	74 0e                	je     c00182f0 <RTC::completeRTCRefresh()+0x2e>
c00182e2:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00182e8:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c00182ee:	73 df                	jae    c00182cf <RTC::completeRTCRefresh()+0xd>
c00182f0:	51                   	push   ecx
c00182f1:	51                   	push   ecx
c00182f2:	6a 00                	push   0x0
c00182f4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182fa:	e8 79 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00182ff:	5b                   	pop    ebx
c0018300:	89 c7                	mov    edi,eax
c0018302:	5e                   	pop    esi
c0018303:	6a 02                	push   0x2
c0018305:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001830b:	e8 68 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018310:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018314:	5d                   	pop    ebp
c0018315:	58                   	pop    eax
c0018316:	6a 04                	push   0x4
c0018318:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001831e:	e8 55 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018323:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0018327:	58                   	pop    eax
c0018328:	5a                   	pop    edx
c0018329:	6a 07                	push   0x7
c001832b:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018331:	e8 42 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018336:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001833a:	59                   	pop    ecx
c001833b:	5b                   	pop    ebx
c001833c:	6a 08                	push   0x8
c001833e:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018344:	e8 2f ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018349:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001834d:	5e                   	pop    esi
c001834e:	5d                   	pop    ebp
c001834f:	6a 09                	push   0x9
c0018351:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018357:	e8 1c ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001835c:	0f b6 c0             	movzx  eax,al
c001835f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0018363:	83 c4 10             	add    esp,0x10
c0018366:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c001836c:	83 ec 0c             	sub    esp,0xc
c001836f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018373:	e8 30 ff ff ff       	call   c00182a8 <RTC::get_update_in_progress_flag()>
c0018378:	83 c4 10             	add    esp,0x10
c001837b:	84 c0                	test   al,al
c001837d:	74 0e                	je     c001838d <RTC::completeRTCRefresh()+0xcb>
c001837f:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018385:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c001838b:	73 df                	jae    c001836c <RTC::completeRTCRefresh()+0xaa>
c001838d:	51                   	push   ecx
c001838e:	51                   	push   ecx
c001838f:	6a 00                	push   0x0
c0018391:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018397:	e8 dc ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001839c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00183a0:	5b                   	pop    ebx
c00183a1:	5e                   	pop    esi
c00183a2:	6a 02                	push   0x2
c00183a4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183aa:	e8 c9 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00183af:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00183b3:	5d                   	pop    ebp
c00183b4:	58                   	pop    eax
c00183b5:	6a 04                	push   0x4
c00183b7:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183bd:	e8 b6 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00183c2:	88 c3                	mov    bl,al
c00183c4:	58                   	pop    eax
c00183c5:	5a                   	pop    edx
c00183c6:	6a 07                	push   0x7
c00183c8:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183ce:	e8 a5 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00183d3:	59                   	pop    ecx
c00183d4:	89 c6                	mov    esi,eax
c00183d6:	5d                   	pop    ebp
c00183d7:	6a 08                	push   0x8
c00183d9:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183df:	e8 94 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00183e4:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00183e8:	58                   	pop    eax
c00183e9:	5a                   	pop    edx
c00183ea:	6a 09                	push   0x9
c00183ec:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183f2:	e8 81 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00183f7:	89 f9                	mov    ecx,edi
c00183f9:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00183fd:	0f b6 e8             	movzx  ebp,al
c0018400:	83 c4 10             	add    esp,0x10
c0018403:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0018407:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001840c:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c0018411:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018415:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018419:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c001841d:	0f 94 c0             	sete   al
c0018420:	0f b6 fb             	movzx  edi,bl
c0018423:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c0018427:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001842c:	0f 94 c2             	sete   dl
c001842f:	21 d0                	and    eax,edx
c0018431:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0018435:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0018439:	0f 94 c2             	sete   dl
c001843c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0018440:	21 c2                	and    edx,eax
c0018442:	89 f0                	mov    eax,esi
c0018444:	0f b6 c0             	movzx  eax,al
c0018447:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001844b:	89 f0                	mov    eax,esi
c001844d:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0018451:	0f 94 c0             	sete   al
c0018454:	21 d0                	and    eax,edx
c0018456:	31 d2                	xor    edx,edx
c0018458:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001845c:	0f 94 c2             	sete   dl
c001845f:	85 c2                	test   edx,eax
c0018461:	75 27                	jne    c001848a <RTC::completeRTCRefresh()+0x1c8>
c0018463:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018467:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001846b:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001846f:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0018473:	89 f0                	mov    eax,esi
c0018475:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018479:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001847d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018481:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018485:	e9 dc fe ff ff       	jmp    c0018366 <RTC::completeRTCRefresh()+0xa4>
c001848a:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001848e:	75 d3                	jne    c0018463 <RTC::completeRTCRefresh()+0x1a1>
c0018490:	52                   	push   edx
c0018491:	52                   	push   edx
c0018492:	6a 0b                	push   0xb
c0018494:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001849a:	e8 d9 ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001849f:	83 c4 10             	add    esp,0x10
c00184a2:	a8 04                	test   al,0x4
c00184a4:	75 7a                	jne    c0018520 <RTC::completeRTCRefresh()+0x25e>
c00184a6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00184aa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00184ae:	83 e1 0f             	and    ecx,0xf
c00184b1:	c1 ea 04             	shr    edx,0x4
c00184b4:	c1 ef 04             	shr    edi,0x4
c00184b7:	6b d2 0a             	imul   edx,edx,0xa
c00184ba:	83 e6 0f             	and    esi,0xf
c00184bd:	01 d1                	add    ecx,edx
c00184bf:	c1 ed 04             	shr    ebp,0x4
c00184c2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00184c6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00184ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00184ce:	c1 ea 04             	shr    edx,0x4
c00184d1:	83 e1 0f             	and    ecx,0xf
c00184d4:	6b d2 0a             	imul   edx,edx,0xa
c00184d7:	6b ed 0a             	imul   ebp,ebp,0xa
c00184da:	01 d1                	add    ecx,edx
c00184dc:	89 fa                	mov    edx,edi
c00184de:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00184e2:	83 e2 07             	and    edx,0x7
c00184e5:	89 d9                	mov    ecx,ebx
c00184e7:	6b d2 0a             	imul   edx,edx,0xa
c00184ea:	83 e1 0f             	and    ecx,0xf
c00184ed:	83 e3 80             	and    ebx,0xffffff80
c00184f0:	01 d1                	add    ecx,edx
c00184f2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00184f6:	09 cb                	or     ebx,ecx
c00184f8:	c1 ea 04             	shr    edx,0x4
c00184fb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00184ff:	6b d2 0a             	imul   edx,edx,0xa
c0018502:	83 e1 0f             	and    ecx,0xf
c0018505:	01 d6                	add    esi,edx
c0018507:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001850b:	c1 ea 04             	shr    edx,0x4
c001850e:	6b d2 0a             	imul   edx,edx,0xa
c0018511:	01 d1                	add    ecx,edx
c0018513:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018517:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001851b:	83 e2 0f             	and    edx,0xf
c001851e:	01 d5                	add    ebp,edx
c0018520:	a8 02                	test   al,0x2
c0018522:	75 15                	jne    c0018539 <RTC::completeRTCRefresh()+0x277>
c0018524:	f6 c3 80             	test   bl,0x80
c0018527:	74 10                	je     c0018539 <RTC::completeRTCRefresh()+0x277>
c0018529:	83 e3 7f             	and    ebx,0x7f
c001852c:	b9 18 00 00 00       	mov    ecx,0x18
c0018531:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018534:	99                   	cdq    
c0018535:	f7 f9                	idiv   ecx
c0018537:	88 d3                	mov    bl,dl
c0018539:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c001853f:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018545:	77 06                	ja     c001854d <RTC::completeRTCRefresh()+0x28b>
c0018547:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c001854d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018552:	31 c9                	xor    ecx,ecx
c0018554:	c1 e0 10             	shl    eax,0x10
c0018557:	89 cd                	mov    ebp,ecx
c0018559:	c1 e7 10             	shl    edi,0x10
c001855c:	31 d2                	xor    edx,edx
c001855e:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0018564:	09 c5                	or     ebp,eax
c0018566:	89 f0                	mov    eax,esi
c0018568:	89 e9                	mov    ecx,ebp
c001856a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001856e:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0018572:	88 c2                	mov    dl,al
c0018574:	88 d9                	mov    cl,bl
c0018576:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c001857a:	0f b7 c2             	movzx  eax,dx
c001857d:	09 f8                	or     eax,edi
c001857f:	89 c2                	mov    edx,eax
c0018581:	50                   	push   eax
c0018582:	50                   	push   eax
c0018583:	51                   	push   ecx
c0018584:	52                   	push   edx
c0018585:	e8 81 3d ff ff       	call   c000c30b <datetimeToSeconds(datetime_t)>
c001858a:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001858e:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018594:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001859a:	83 c4 4c             	add    esp,0x4c
c001859d:	5b                   	pop    ebx
c001859e:	5e                   	pop    esi
c001859f:	5f                   	pop    edi
c00185a0:	5d                   	pop    ebp
c00185a1:	c3                   	ret    

c00185a2 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00185a2:	55                   	push   ebp
c00185a3:	57                   	push   edi
c00185a4:	56                   	push   esi
c00185a5:	53                   	push   ebx
c00185a6:	83 ec 30             	sub    esp,0x30
c00185a9:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00185ad:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00185b1:	6a 00                	push   0x0
c00185b3:	6a 00                	push   0x0
c00185b5:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185bb:	e8 d2 ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185c0:	83 c4 0c             	add    esp,0xc
c00185c3:	6a 00                	push   0x0
c00185c5:	6a 02                	push   0x2
c00185c7:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185cd:	e8 c0 ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185d2:	31 d2                	xor    edx,edx
c00185d4:	89 f9                	mov    ecx,edi
c00185d6:	89 f8                	mov    eax,edi
c00185d8:	c1 e9 10             	shr    ecx,0x10
c00185db:	0f b6 c4             	movzx  eax,ah
c00185de:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00185e2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00185e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00185ea:	b9 64 00 00 00       	mov    ecx,0x64
c00185ef:	89 f0                	mov    eax,esi
c00185f1:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00185f5:	89 f0                	mov    eax,esi
c00185f7:	0f b6 c4             	movzx  eax,ah
c00185fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00185fe:	89 f0                	mov    eax,esi
c0018600:	c1 e8 10             	shr    eax,0x10
c0018603:	f7 f1                	div    ecx
c0018605:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018609:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001860d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018611:	59                   	pop    ecx
c0018612:	5b                   	pop    ebx
c0018613:	89 fb                	mov    ebx,edi
c0018615:	6a 0b                	push   0xb
c0018617:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001861d:	e8 56 eb fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018622:	83 c4 10             	add    esp,0x10
c0018625:	89 c5                	mov    ebp,eax
c0018627:	a8 04                	test   al,0x4
c0018629:	75 6e                	jne    c0018699 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c001862b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001862f:	31 d2                	xor    edx,edx
c0018631:	0f b6 c1             	movzx  eax,cl
c0018634:	b9 0a 00 00 00       	mov    ecx,0xa
c0018639:	f7 f1                	div    ecx
c001863b:	c1 e0 04             	shl    eax,0x4
c001863e:	09 d0                	or     eax,edx
c0018640:	31 d2                	xor    edx,edx
c0018642:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018646:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001864b:	f7 f1                	div    ecx
c001864d:	c1 e0 04             	shl    eax,0x4
c0018650:	09 d0                	or     eax,edx
c0018652:	31 d2                	xor    edx,edx
c0018654:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018658:	0f b6 c3             	movzx  eax,bl
c001865b:	f7 f1                	div    ecx
c001865d:	c1 e0 04             	shl    eax,0x4
c0018660:	09 d0                	or     eax,edx
c0018662:	31 d2                	xor    edx,edx
c0018664:	89 c3                	mov    ebx,eax
c0018666:	89 f0                	mov    eax,esi
c0018668:	0f b6 c0             	movzx  eax,al
c001866b:	f7 f1                	div    ecx
c001866d:	c1 e0 04             	shl    eax,0x4
c0018670:	09 d0                	or     eax,edx
c0018672:	31 d2                	xor    edx,edx
c0018674:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018678:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001867d:	f7 f1                	div    ecx
c001867f:	c1 e0 04             	shl    eax,0x4
c0018682:	09 d0                	or     eax,edx
c0018684:	31 d2                	xor    edx,edx
c0018686:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001868a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001868e:	f7 f1                	div    ecx
c0018690:	c1 e0 04             	shl    eax,0x4
c0018693:	09 d0                	or     eax,edx
c0018695:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018699:	83 e5 02             	and    ebp,0x2
c001869c:	75 1e                	jne    c00186bc <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c001869e:	0f b6 c3             	movzx  eax,bl
c00186a1:	83 f8 0b             	cmp    eax,0xb
c00186a4:	76 10                	jbe    c00186b6 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00186a6:	8d 53 f4             	lea    edx,[ebx-0xc]
c00186a9:	88 d3                	mov    bl,dl
c00186ab:	84 d2                	test   dl,dl
c00186ad:	75 02                	jne    c00186b1 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c00186af:	b3 0c                	mov    bl,0xc
c00186b1:	83 cb 80             	or     ebx,0xffffff80
c00186b4:	eb 06                	jmp    c00186bc <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00186b6:	85 c0                	test   eax,eax
c00186b8:	75 02                	jne    c00186bc <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00186ba:	b3 0c                	mov    bl,0xc
c00186bc:	0f b6 db             	movzx  ebx,bl
c00186bf:	50                   	push   eax
c00186c0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00186c5:	52                   	push   edx
c00186c6:	6a 00                	push   0x0
c00186c8:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00186ce:	e8 bf eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00186d3:	83 c4 0c             	add    esp,0xc
c00186d6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00186db:	50                   	push   eax
c00186dc:	6a 02                	push   0x2
c00186de:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00186e4:	e8 a9 eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00186e9:	83 c4 0c             	add    esp,0xc
c00186ec:	53                   	push   ebx
c00186ed:	6a 04                	push   0x4
c00186ef:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00186f5:	e8 98 eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00186fa:	83 c4 0c             	add    esp,0xc
c00186fd:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018702:	52                   	push   edx
c0018703:	6a 07                	push   0x7
c0018705:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001870b:	e8 82 eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018710:	83 c4 0c             	add    esp,0xc
c0018713:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018718:	50                   	push   eax
c0018719:	6a 08                	push   0x8
c001871b:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018721:	e8 6c eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018726:	83 c4 0c             	add    esp,0xc
c0018729:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001872e:	55                   	push   ebp
c001872f:	6a 09                	push   0x9
c0018731:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018737:	e8 56 eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001873c:	5a                   	pop    edx
c001873d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018741:	e8 7c fb ff ff       	call   c00182c2 <RTC::completeRTCRefresh()>
c0018746:	83 c4 3c             	add    esp,0x3c
c0018749:	b0 01                	mov    al,0x1
c001874b:	5b                   	pop    ebx
c001874c:	5e                   	pop    esi
c001874d:	5f                   	pop    edi
c001874e:	5d                   	pop    ebp
c001874f:	c3                   	ret    

c0018750 <rtcIRQHandler(regs*, void*)>:
c0018750:	53                   	push   ebx
c0018751:	83 ec 10             	sub    esp,0x10
c0018754:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018758:	6a 0c                	push   0xc
c001875a:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018760:	e8 13 ea fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018765:	83 c4 10             	add    esp,0x10
c0018768:	a8 80                	test   al,0x80
c001876a:	74 24                	je     c0018790 <rtcIRQHandler(regs*, void*)+0x40>
c001876c:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018773:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001877a:	66 ff 05 78 97 02 c0 	inc    WORD PTR ds:0xc0029778
c0018781:	75 0d                	jne    c0018790 <rtcIRQHandler(regs*, void*)+0x40>
c0018783:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018787:	83 c4 08             	add    esp,0x8
c001878a:	5b                   	pop    ebx
c001878b:	e9 32 fb ff ff       	jmp    c00182c2 <RTC::completeRTCRefresh()>
c0018790:	83 c4 08             	add    esp,0x8
c0018793:	5b                   	pop    ebx
c0018794:	c3                   	ret    
c0018795:	90                   	nop

c0018796 <RTC::RTC()>:
c0018796:	83 ec 1c             	sub    esp,0x1c
c0018799:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001879d:	83 ec 08             	sub    esp,0x8
c00187a0:	68 2f 28 02 c0       	push   0xc002282f
c00187a5:	50                   	push   eax
c00187a6:	e8 3b 3a ff ff       	call   c000c1e6 <Clock::Clock(char const*)>
c00187ab:	83 c4 10             	add    esp,0x10
c00187ae:	ba 4c 28 02 c0       	mov    edx,0xc002284c
c00187b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187b7:	89 10                	mov    DWORD PTR [eax],edx
c00187b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187bd:	83 ec 0c             	sub    esp,0xc
c00187c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187c4:	6a 01                	push   0x1
c00187c6:	68 50 87 01 c0       	push   0xc0018750
c00187cb:	6a 08                	push   0x8
c00187cd:	50                   	push   eax
c00187ce:	e8 ef 3e ff ff       	call   c000c6c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00187d3:	83 c4 20             	add    esp,0x20
c00187d6:	89 c2                	mov    edx,eax
c00187d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187dc:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00187e2:	fa                   	cli    
c00187e3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00187e8:	83 c0 01             	add    eax,0x1
c00187eb:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00187f0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00187f5:	83 ec 08             	sub    esp,0x8
c00187f8:	6a 0b                	push   0xb
c00187fa:	50                   	push   eax
c00187fb:	e8 78 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018800:	83 c4 10             	add    esp,0x10
c0018803:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018807:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001880c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018810:	83 ca 10             	or     edx,0x10
c0018813:	0f b6 d2             	movzx  edx,dl
c0018816:	83 ec 04             	sub    esp,0x4
c0018819:	52                   	push   edx
c001881a:	6a 0b                	push   0xb
c001881c:	50                   	push   eax
c001881d:	e8 70 ea fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018822:	83 c4 10             	add    esp,0x10
c0018825:	83 ec 0c             	sub    esp,0xc
c0018828:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001882c:	e8 91 fa ff ff       	call   c00182c2 <RTC::completeRTCRefresh()>
c0018831:	83 c4 10             	add    esp,0x10
c0018834:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0018839:	83 e8 01             	sub    eax,0x1
c001883c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0018841:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0018846:	85 c0                	test   eax,eax
c0018848:	75 01                	jne    c001884b <RTC::RTC()+0xb5>
c001884a:	fb                   	sti    
c001884b:	90                   	nop
c001884c:	83 c4 1c             	add    esp,0x1c
c001884f:	c3                   	ret    

c0018850 <HalConsoleScroll(int, int)>:
c0018850:	83 ec 10             	sub    esp,0x10
c0018853:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001885b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018863:	90                   	nop
c0018864:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018869:	0f 8f e1 00 00 00    	jg     c0018950 <HalConsoleScroll(int, int)+0x100>
c001886f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018877:	90                   	nop
c0018878:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018880:	0f 8f be 00 00 00    	jg     c0018944 <HalConsoleScroll(int, int)+0xf4>
c0018886:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001888a:	89 d0                	mov    eax,edx
c001888c:	c1 e0 02             	shl    eax,0x2
c001888f:	01 d0                	add    eax,edx
c0018891:	c1 e0 05             	shl    eax,0x5
c0018894:	89 c2                	mov    edx,eax
c0018896:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001889a:	01 d0                	add    eax,edx
c001889c:	89 c2                	mov    edx,eax
c001889e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188a2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00188a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00188a9:	89 d0                	mov    eax,edx
c00188ab:	c1 e0 02             	shl    eax,0x2
c00188ae:	01 d0                	add    eax,edx
c00188b0:	c1 e0 05             	shl    eax,0x5
c00188b3:	89 c2                	mov    edx,eax
c00188b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188b9:	01 d0                	add    eax,edx
c00188bb:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00188c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188c5:	01 c2                	add    edx,eax
c00188c7:	8a 01                	mov    al,BYTE PTR [ecx]
c00188c9:	88 02                	mov    BYTE PTR [edx],al
c00188cb:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00188d0:	75 66                	jne    c0018938 <HalConsoleScroll(int, int)+0xe8>
c00188d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188d6:	83 e0 01             	and    eax,0x1
c00188d9:	74 39                	je     c0018914 <HalConsoleScroll(int, int)+0xc4>
c00188db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00188df:	83 e0 0f             	and    eax,0xf
c00188e2:	88 c2                	mov    dl,al
c00188e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00188e8:	c1 e0 04             	shl    eax,0x4
c00188eb:	09 d0                	or     eax,edx
c00188ed:	88 c1                	mov    cl,al
c00188ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00188f3:	89 d0                	mov    eax,edx
c00188f5:	c1 e0 02             	shl    eax,0x2
c00188f8:	01 d0                	add    eax,edx
c00188fa:	c1 e0 05             	shl    eax,0x5
c00188fd:	89 c2                	mov    edx,eax
c00188ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018903:	01 d0                	add    eax,edx
c0018905:	89 c2                	mov    edx,eax
c0018907:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001890b:	01 d0                	add    eax,edx
c001890d:	88 ca                	mov    dl,cl
c001890f:	88 10                	mov    BYTE PTR [eax],dl
c0018911:	eb 25                	jmp    c0018938 <HalConsoleScroll(int, int)+0xe8>
c0018913:	90                   	nop
c0018914:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018918:	89 d0                	mov    eax,edx
c001891a:	c1 e0 02             	shl    eax,0x2
c001891d:	01 d0                	add    eax,edx
c001891f:	c1 e0 05             	shl    eax,0x5
c0018922:	89 c2                	mov    edx,eax
c0018924:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018928:	01 d0                	add    eax,edx
c001892a:	89 c2                	mov    edx,eax
c001892c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018930:	01 d0                	add    eax,edx
c0018932:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018935:	8d 76 00             	lea    esi,[esi+0x0]
c0018938:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001893d:	e9 36 ff ff ff       	jmp    c0018878 <HalConsoleScroll(int, int)+0x28>
c0018942:	66 90                	xchg   ax,ax
c0018944:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018949:	e9 16 ff ff ff       	jmp    c0018864 <HalConsoleScroll(int, int)+0x14>
c001894e:	66 90                	xchg   ax,ax
c0018950:	90                   	nop
c0018951:	83 c4 10             	add    esp,0x10
c0018954:	c3                   	ret    
c0018955:	8d 76 00             	lea    esi,[esi+0x0]

c0018958 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018958:	83 ec 14             	sub    esp,0x14
c001895b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001895f:	88 04 24             	mov    BYTE PTR [esp],al
c0018962:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018965:	0f b6 c0             	movzx  eax,al
c0018968:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001896c:	89 d1                	mov    ecx,edx
c001896e:	83 e1 0f             	and    ecx,0xf
c0018971:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018975:	c1 e2 04             	shl    edx,0x4
c0018978:	0f b6 d2             	movzx  edx,dl
c001897b:	09 ca                	or     edx,ecx
c001897d:	c1 e2 08             	shl    edx,0x8
c0018980:	09 d0                	or     eax,edx
c0018982:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018987:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001898f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018993:	89 d0                	mov    eax,edx
c0018995:	c1 e0 02             	shl    eax,0x2
c0018998:	01 d0                	add    eax,edx
c001899a:	c1 e0 04             	shl    eax,0x4
c001899d:	89 c2                	mov    edx,eax
c001899f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00189a3:	01 d0                	add    eax,edx
c00189a5:	01 c0                	add    eax,eax
c00189a7:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00189ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00189af:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00189b4:	66 89 02             	mov    WORD PTR [edx],ax
c00189b7:	90                   	nop
c00189b8:	83 c4 14             	add    esp,0x14
c00189bb:	c3                   	ret    

c00189bc <HalConsoleCursorUpdate(int, int)>:
c00189bc:	83 ec 20             	sub    esp,0x20
c00189bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189c3:	89 c2                	mov    edx,eax
c00189c5:	c1 e2 02             	shl    edx,0x2
c00189c8:	01 d0                	add    eax,edx
c00189ca:	c1 e0 04             	shl    eax,0x4
c00189cd:	89 c2                	mov    edx,eax
c00189cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00189d3:	01 d0                	add    eax,edx
c00189d5:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00189da:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00189e1:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00189e6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00189ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00189ee:	ee                   	out    dx,al
c00189ef:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00189f4:	0f b6 c0             	movzx  eax,al
c00189f7:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00189fe:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018a02:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018a06:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018a0a:	ee                   	out    dx,al
c0018a0b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018a12:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018a17:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018a1b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a1f:	ee                   	out    dx,al
c0018a20:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018a25:	c1 e8 08             	shr    eax,0x8
c0018a28:	0f b6 c0             	movzx  eax,al
c0018a2b:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018a32:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018a36:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018a3a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a3e:	ee                   	out    dx,al
c0018a3f:	90                   	nop
c0018a40:	83 c4 20             	add    esp,0x20
c0018a43:	c3                   	ret    

c0018a44 <FAT::getName()>:
c0018a44:	b8 80 28 02 c0       	mov    eax,0xc0022880
c0018a49:	c3                   	ret    
c0018a4a:	66 90                	xchg   ax,ax

c0018a4c <FAT::tell(void*, unsigned long long*)>:
c0018a4c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018a51:	75 09                	jne    c0018a5c <FAT::tell(void*, unsigned long long*)+0x10>
c0018a53:	b8 04 00 00 00       	mov    eax,0x4
c0018a58:	c3                   	ret    
c0018a59:	8d 76 00             	lea    esi,[esi+0x0]
c0018a5c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018a61:	75 09                	jne    c0018a6c <FAT::tell(void*, unsigned long long*)+0x20>
c0018a63:	b8 04 00 00 00       	mov    eax,0x4
c0018a68:	c3                   	ret    
c0018a69:	8d 76 00             	lea    esi,[esi+0x0]
c0018a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a70:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018a73:	ba 00 00 00 00       	mov    edx,0x0
c0018a78:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018a7c:	89 01                	mov    DWORD PTR [ecx],eax
c0018a7e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018a81:	b8 00 00 00 00       	mov    eax,0x0
c0018a86:	c3                   	ret    
c0018a87:	90                   	nop

c0018a88 <FAT::stat(void*, unsigned long long*)>:
c0018a88:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018a8d:	75 09                	jne    c0018a98 <FAT::stat(void*, unsigned long long*)+0x10>
c0018a8f:	b8 04 00 00 00       	mov    eax,0x4
c0018a94:	c3                   	ret    
c0018a95:	8d 76 00             	lea    esi,[esi+0x0]
c0018a98:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018a9d:	75 09                	jne    c0018aa8 <FAT::stat(void*, unsigned long long*)+0x20>
c0018a9f:	b8 04 00 00 00       	mov    eax,0x4
c0018aa4:	c3                   	ret    
c0018aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0018aa8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018aac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018aaf:	ba 00 00 00 00       	mov    edx,0x0
c0018ab4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018ab8:	89 01                	mov    DWORD PTR [ecx],eax
c0018aba:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018abd:	b8 00 00 00 00       	mov    eax,0x0
c0018ac2:	c3                   	ret    
c0018ac3:	90                   	nop

c0018ac4 <FAT::~FAT()>:
c0018ac4:	83 ec 0c             	sub    esp,0xc
c0018ac7:	ba cc 28 02 c0       	mov    edx,0xc00228cc
c0018acc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ad0:	89 10                	mov    DWORD PTR [eax],edx
c0018ad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ad6:	83 ec 0c             	sub    esp,0xc
c0018ad9:	50                   	push   eax
c0018ada:	e8 85 2a ff ff       	call   c000b564 <Filesystem::~Filesystem()>
c0018adf:	83 c4 10             	add    esp,0x10
c0018ae2:	90                   	nop
c0018ae3:	83 c4 0c             	add    esp,0xc
c0018ae6:	c3                   	ret    
c0018ae7:	90                   	nop

c0018ae8 <FAT::~FAT()>:
c0018ae8:	83 ec 0c             	sub    esp,0xc
c0018aeb:	83 ec 0c             	sub    esp,0xc
c0018aee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018af2:	e8 cd ff ff ff       	call   c0018ac4 <FAT::~FAT()>
c0018af7:	83 c4 10             	add    esp,0x10
c0018afa:	83 ec 08             	sub    esp,0x8
c0018afd:	6a 08                	push   0x8
c0018aff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018b03:	e8 10 1d ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0018b08:	83 c4 10             	add    esp,0x10
c0018b0b:	83 c4 0c             	add    esp,0xc
c0018b0e:	c3                   	ret    
c0018b0f:	90                   	nop

c0018b10 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018b10:	83 ec 1c             	sub    esp,0x1c
c0018b13:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018b1a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018b1f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b23:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018b2a:	83 f8 ff             	cmp    eax,0xffffffff
c0018b2d:	75 35                	jne    c0018b64 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018b2f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018b33:	88 c2                	mov    dl,al
c0018b35:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018b3a:	01 d0                	add    eax,edx
c0018b3c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018b40:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018b46:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b4a:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018b51:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018b56:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018b5a:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018b61:	eb 19                	jmp    c0018b7c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018b63:	90                   	nop
c0018b64:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018b68:	88 c2                	mov    dl,al
c0018b6a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b6e:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018b75:	01 d0                	add    eax,edx
c0018b77:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018b7b:	90                   	nop
c0018b7c:	83 ec 04             	sub    esp,0x4
c0018b7f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018b83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018b87:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018b8b:	50                   	push   eax
c0018b8c:	e8 3e c4 fe ff       	call   c0004fcf <f_getlabel>
c0018b91:	83 c4 10             	add    esp,0x10
c0018b94:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b98:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018b9d:	75 09                	jne    c0018ba8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018b9f:	b8 00 00 00 00       	mov    eax,0x0
c0018ba4:	eb 0a                	jmp    c0018bb0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018ba6:	66 90                	xchg   ax,ax
c0018ba8:	b8 01 00 00 00       	mov    eax,0x1
c0018bad:	8d 76 00             	lea    esi,[esi+0x0]
c0018bb0:	83 c4 1c             	add    esp,0x1c
c0018bb3:	c3                   	ret    

c0018bb4 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018bb4:	57                   	push   edi
c0018bb5:	83 ec 58             	sub    esp,0x58
c0018bb8:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018bc0:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018bc4:	b8 00 00 00 00       	mov    eax,0x0
c0018bc9:	b9 0f 00 00 00       	mov    ecx,0xf
c0018bce:	fc                   	cld    
c0018bcf:	89 d7                	mov    edi,edx
c0018bd1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018bd3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018bd7:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018bde:	83 f8 ff             	cmp    eax,0xffffffff
c0018be1:	75 35                	jne    c0018c18 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0018be3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018be7:	88 c2                	mov    dl,al
c0018be9:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018bee:	01 d0                	add    eax,edx
c0018bf0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018bf4:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018bfa:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018bfe:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018c05:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018c0a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018c0e:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018c15:	eb 19                	jmp    c0018c30 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0018c17:	90                   	nop
c0018c18:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018c1c:	88 c2                	mov    dl,al
c0018c1e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018c22:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018c29:	01 d0                	add    eax,edx
c0018c2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018c2f:	90                   	nop
c0018c30:	83 ec 08             	sub    esp,0x8
c0018c33:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018c37:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018c3b:	50                   	push   eax
c0018c3c:	e8 ff 7b fe ff       	call   c0000840 <strcat>
c0018c41:	83 c4 10             	add    esp,0x10
c0018c44:	83 ec 0c             	sub    esp,0xc
c0018c47:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018c4b:	50                   	push   eax
c0018c4c:	e8 cf c4 fe ff       	call   c0005120 <f_setlabel>
c0018c51:	83 c4 10             	add    esp,0x10
c0018c54:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018c58:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018c5d:	75 09                	jne    c0018c68 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0018c5f:	b8 00 00 00 00       	mov    eax,0x0
c0018c64:	eb 0a                	jmp    c0018c70 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0018c66:	66 90                	xchg   ax,ax
c0018c68:	b8 01 00 00 00       	mov    eax,0x1
c0018c6d:	8d 76 00             	lea    esi,[esi+0x0]
c0018c70:	83 c4 58             	add    esp,0x58
c0018c73:	5f                   	pop    edi
c0018c74:	c3                   	ret    
c0018c75:	90                   	nop
c0018c76:	66 90                	xchg   ax,ax

c0018c78 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018c78:	83 ec 2c             	sub    esp,0x2c
c0018c7b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018c83:	83 ec 08             	sub    esp,0x8
c0018c86:	68 a4 28 02 c0       	push   0xc00228a4
c0018c8b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c8f:	e8 bc 7a fe ff       	call   c0000750 <strcmp>
c0018c94:	83 c4 10             	add    esp,0x10
c0018c97:	85 c0                	test   eax,eax
c0018c99:	0f 94 c0             	sete   al
c0018c9c:	0f b6 c0             	movzx  eax,al
c0018c9f:	85 c0                	test   eax,eax
c0018ca1:	74 0d                	je     c0018cb0 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018ca3:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018cab:	e9 c0 00 00 00       	jmp    c0018d70 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018cb0:	83 ec 08             	sub    esp,0x8
c0018cb3:	68 96 28 02 c0       	push   0xc0022896
c0018cb8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018cbc:	e8 8f 7a fe ff       	call   c0000750 <strcmp>
c0018cc1:	83 c4 10             	add    esp,0x10
c0018cc4:	85 c0                	test   eax,eax
c0018cc6:	0f 94 c0             	sete   al
c0018cc9:	0f b6 c0             	movzx  eax,al
c0018ccc:	85 c0                	test   eax,eax
c0018cce:	74 10                	je     c0018ce0 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018cd0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018cd8:	e9 93 00 00 00       	jmp    c0018d70 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0018ce0:	83 ec 08             	sub    esp,0x8
c0018ce3:	68 9c 28 02 c0       	push   0xc002289c
c0018ce8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018cec:	e8 5f 7a fe ff       	call   c0000750 <strcmp>
c0018cf1:	83 c4 10             	add    esp,0x10
c0018cf4:	85 c0                	test   eax,eax
c0018cf6:	0f 94 c0             	sete   al
c0018cf9:	0f b6 c0             	movzx  eax,al
c0018cfc:	85 c0                	test   eax,eax
c0018cfe:	74 0c                	je     c0018d0c <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018d00:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018d08:	eb 66                	jmp    c0018d70 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018d0a:	66 90                	xchg   ax,ax
c0018d0c:	83 ec 08             	sub    esp,0x8
c0018d0f:	68 7c 00 02 c0       	push   0xc002007c
c0018d14:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d18:	e8 33 7a fe ff       	call   c0000750 <strcmp>
c0018d1d:	83 c4 10             	add    esp,0x10
c0018d20:	85 c0                	test   eax,eax
c0018d22:	0f 94 c0             	sete   al
c0018d25:	0f b6 c0             	movzx  eax,al
c0018d28:	85 c0                	test   eax,eax
c0018d2a:	74 0c                	je     c0018d38 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018d2c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018d34:	eb 3a                	jmp    c0018d70 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018d36:	66 90                	xchg   ax,ax
c0018d38:	83 ec 08             	sub    esp,0x8
c0018d3b:	68 a2 28 02 c0       	push   0xc00228a2
c0018d40:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d44:	e8 07 7a fe ff       	call   c0000750 <strcmp>
c0018d49:	83 c4 10             	add    esp,0x10
c0018d4c:	85 c0                	test   eax,eax
c0018d4e:	0f 94 c0             	sete   al
c0018d51:	0f b6 c0             	movzx  eax,al
c0018d54:	85 c0                	test   eax,eax
c0018d56:	74 0c                	je     c0018d64 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018d58:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018d60:	eb 0e                	jmp    c0018d70 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018d62:	66 90                	xchg   ax,ax
c0018d64:	b8 08 00 00 00       	mov    eax,0x8
c0018d69:	e9 ea 00 00 00       	jmp    c0018e58 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018d6e:	66 90                	xchg   ax,ax
c0018d70:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018d77:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018d7c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018d80:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018d87:	83 f8 ff             	cmp    eax,0xffffffff
c0018d8a:	75 34                	jne    c0018dc0 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018d8c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018d90:	88 c2                	mov    dl,al
c0018d92:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018d97:	01 d0                	add    eax,edx
c0018d99:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018d9d:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018da3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018da7:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018dae:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018db3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018db7:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018dbe:	eb 18                	jmp    c0018dd8 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018dc0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018dc4:	88 c2                	mov    dl,al
c0018dc6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018dca:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018dd1:	01 d0                	add    eax,edx
c0018dd3:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018dd7:	90                   	nop
c0018dd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018ddc:	88 04 24             	mov    BYTE PTR [esp],al
c0018ddf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018de3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018de7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018def:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018df4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018dfc:	83 ec 0c             	sub    esp,0xc
c0018dff:	68 00 20 00 00       	push   0x2000
c0018e04:	e8 ad ec fe ff       	call   c0007ab6 <malloc>
c0018e09:	83 c4 10             	add    esp,0x10
c0018e0c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018e10:	68 00 20 00 00       	push   0x2000
c0018e15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e19:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018e1d:	50                   	push   eax
c0018e1e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018e22:	50                   	push   eax
c0018e23:	e8 f5 c5 fe ff       	call   c000541d <f_mkfs>
c0018e28:	83 c4 10             	add    esp,0x10
c0018e2b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018e2f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018e34:	75 0a                	jne    c0018e40 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018e36:	b8 00 00 00 00       	mov    eax,0x0
c0018e3b:	eb 1b                	jmp    c0018e58 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018e3d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e40:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018e45:	75 09                	jne    c0018e50 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018e47:	b8 09 00 00 00       	mov    eax,0x9
c0018e4c:	eb 0a                	jmp    c0018e58 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018e4e:	66 90                	xchg   ax,ax
c0018e50:	b8 01 00 00 00       	mov    eax,0x1
c0018e55:	8d 76 00             	lea    esi,[esi+0x0]
c0018e58:	83 c4 2c             	add    esp,0x2c
c0018e5b:	c3                   	ret    

c0018e5c <FAT::tryMount(LogicalDisk*, int)>:
c0018e5c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018e62:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018e67:	83 f8 14             	cmp    eax,0x14
c0018e6a:	75 18                	jne    c0018e84 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018e6c:	83 ec 0c             	sub    esp,0xc
c0018e6f:	68 a8 28 02 c0       	push   0xc00228a8
c0018e74:	e8 cc 84 ff ff       	call   c0011345 <KePanic(char const*)>
c0018e79:	83 c4 10             	add    esp,0x10
c0018e7c:	b0 00                	mov    al,0x0
c0018e7e:	e9 ed 01 00 00       	jmp    c0019070 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018e83:	90                   	nop
c0018e84:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018e8b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018e91:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018e97:	3d 00 02 00 00       	cmp    eax,0x200
c0018e9c:	74 0a                	je     c0018ea8 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018e9e:	b0 00                	mov    al,0x0
c0018ea0:	e9 cb 01 00 00       	jmp    c0019070 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ea8:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018eb0:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018eb7:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018ebe:	83 f8 ff             	cmp    eax,0xffffffff
c0018ec1:	74 09                	je     c0018ecc <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018ec3:	b0 01                	mov    al,0x1
c0018ec5:	e9 a6 01 00 00       	jmp    c0019070 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018eca:	66 90                	xchg   ax,ax
c0018ecc:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018ed6:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018ede:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018ee5:	88 c2                	mov    dl,al
c0018ee7:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018eec:	01 d0                	add    eax,edx
c0018eee:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018ef5:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018efb:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018f02:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018f09:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018f0e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018f15:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018f1c:	83 ec 0c             	sub    esp,0xc
c0018f1f:	68 34 02 00 00       	push   0x234
c0018f24:	e8 8d eb fe ff       	call   c0007ab6 <malloc>
c0018f29:	83 c4 10             	add    esp,0x10
c0018f2c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0018f33:	83 ec 04             	sub    esp,0x4
c0018f36:	6a 00                	push   0x0
c0018f38:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018f3f:	50                   	push   eax
c0018f40:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018f47:	e8 ac ac fe ff       	call   c0003bf8 <f_mount>
c0018f4c:	83 c4 10             	add    esp,0x10
c0018f4f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018f56:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0018f5e:	74 1c                	je     c0018f7c <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018f60:	83 ec 0c             	sub    esp,0xc
c0018f63:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018f6a:	e8 67 eb fe ff       	call   c0007ad6 <rfree>
c0018f6f:	83 c4 10             	add    esp,0x10
c0018f72:	b0 00                	mov    al,0x0
c0018f74:	e9 f7 00 00 00       	jmp    c0019070 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018f79:	8d 76 00             	lea    esi,[esi+0x0]
c0018f7c:	83 ec 04             	sub    esp,0x4
c0018f7f:	68 00 01 00 00       	push   0x100
c0018f84:	6a 00                	push   0x0
c0018f86:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018f8d:	50                   	push   eax
c0018f8e:	e8 5d 75 fe ff       	call   c00004f0 <memset>
c0018f93:	83 c4 10             	add    esp,0x10
c0018f96:	83 ec 08             	sub    esp,0x8
c0018f99:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018fa0:	50                   	push   eax
c0018fa1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018fa8:	50                   	push   eax
c0018fa9:	e8 92 78 fe ff       	call   c0000840 <strcat>
c0018fae:	83 c4 10             	add    esp,0x10
c0018fb1:	83 ec 08             	sub    esp,0x8
c0018fb4:	68 b6 28 02 c0       	push   0xc00228b6
c0018fb9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018fc0:	50                   	push   eax
c0018fc1:	e8 7a 78 fe ff       	call   c0000840 <strcat>
c0018fc6:	83 c4 10             	add    esp,0x10
c0018fc9:	83 ec 04             	sub    esp,0x4
c0018fcc:	6a 01                	push   0x1
c0018fce:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0018fd5:	50                   	push   eax
c0018fd6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018fda:	50                   	push   eax
c0018fdb:	e8 7a ac fe ff       	call   c0003c5a <f_open>
c0018fe0:	83 c4 10             	add    esp,0x10
c0018fe3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018fea:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018ff1:	85 c0                	test   eax,eax
c0018ff3:	74 0b                	je     c0019000 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0018ff5:	78 31                	js     c0019028 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018ff7:	83 e8 04             	sub    eax,0x4
c0018ffa:	83 f8 01             	cmp    eax,0x1
c0018ffd:	77 29                	ja     c0019028 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018fff:	90                   	nop
c0019000:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019008:	83 ec 0c             	sub    esp,0xc
c001900b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001900f:	50                   	push   eax
c0019010:	e8 14 b4 fe ff       	call   c0004429 <f_close>
c0019015:	83 c4 10             	add    esp,0x10
c0019018:	90                   	nop
c0019019:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019021:	85 c0                	test   eax,eax
c0019023:	74 43                	je     c0019068 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019025:	eb 31                	jmp    c0019058 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0019027:	90                   	nop
c0019028:	83 ec 0c             	sub    esp,0xc
c001902b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019032:	e8 9f ea fe ff       	call   c0007ad6 <rfree>
c0019037:	83 c4 10             	add    esp,0x10
c001903a:	83 ec 04             	sub    esp,0x4
c001903d:	6a 00                	push   0x0
c001903f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019046:	50                   	push   eax
c0019047:	6a 00                	push   0x0
c0019049:	e8 aa ab fe ff       	call   c0003bf8 <f_mount>
c001904e:	83 c4 10             	add    esp,0x10
c0019051:	b0 00                	mov    al,0x0
c0019053:	eb 1b                	jmp    c0019070 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019055:	8d 76 00             	lea    esi,[esi+0x0]
c0019058:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c001905d:	83 c0 01             	add    eax,0x1
c0019060:	a3 80 97 02 c0       	mov    ds:0xc0029780,eax
c0019065:	8d 76 00             	lea    esi,[esi+0x0]
c0019068:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001906f:	90                   	nop
c0019070:	81 c4 4c 03 00 00    	add    esp,0x34c
c0019076:	c3                   	ret    
c0019077:	90                   	nop

c0019078 <FAT::allocateSwapfile(char const*, int)>:
c0019078:	55                   	push   ebp
c0019079:	57                   	push   edi
c001907a:	56                   	push   esi
c001907b:	53                   	push   ebx
c001907c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0019082:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001908d:	83 ec 0c             	sub    esp,0xc
c0019090:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0019097:	e8 1a ea fe ff       	call   c0007ab6 <malloc>
c001909c:	83 c4 10             	add    esp,0x10
c001909f:	89 c7                	mov    edi,eax
c00190a1:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00190a6:	83 ec 04             	sub    esp,0x4
c00190a9:	50                   	push   eax
c00190aa:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00190b1:	57                   	push   edi
c00190b2:	e8 3d 27 ff ff       	call   c000b7f4 <File::File(char const*, Process*)>
c00190b7:	83 c4 10             	add    esp,0x10
c00190ba:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00190c1:	83 ec 04             	sub    esp,0x4
c00190c4:	8d 44 24 13          	lea    eax,[esp+0x13]
c00190c8:	50                   	push   eax
c00190c9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00190cd:	50                   	push   eax
c00190ce:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00190d5:	e8 e4 2a ff ff       	call   c000bbbe <File::stat(unsigned long long*, bool*)>
c00190da:	83 c4 10             	add    esp,0x10
c00190dd:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00190e4:	c1 e0 14             	shl    eax,0x14
c00190e7:	89 c7                	mov    edi,eax
c00190e9:	89 c5                	mov    ebp,eax
c00190eb:	c1 fd 1f             	sar    ebp,0x1f
c00190ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00190f6:	89 f9                	mov    ecx,edi
c00190f8:	31 c1                	xor    ecx,eax
c00190fa:	89 cb                	mov    ebx,ecx
c00190fc:	89 e9                	mov    ecx,ebp
c00190fe:	31 d1                	xor    ecx,edx
c0019100:	89 ce                	mov    esi,ecx
c0019102:	89 f0                	mov    eax,esi
c0019104:	09 d8                	or     eax,ebx
c0019106:	0f 84 9c 00 00 00    	je     c00191a8 <FAT::allocateSwapfile(char const*, int)+0x130>
c001910c:	83 ec 0c             	sub    esp,0xc
c001910f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019116:	e8 6f 29 ff ff       	call   c000ba8a <File::unlink()>
c001911b:	83 c4 10             	add    esp,0x10
c001911e:	83 ec 08             	sub    esp,0x8
c0019121:	6a 12                	push   0x12
c0019123:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001912a:	e8 8d 27 ff ff       	call   c000b8bc <File::open(FileOpenMode)>
c001912f:	83 c4 10             	add    esp,0x10
c0019132:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019139:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001913f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019146:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001914d:	c1 e0 14             	shl    eax,0x14
c0019150:	83 ec 04             	sub    esp,0x4
c0019153:	6a 01                	push   0x1
c0019155:	50                   	push   eax
c0019156:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001915d:	e8 4e c1 fe ff       	call   c00052b0 <f_expand>
c0019162:	83 c4 10             	add    esp,0x10
c0019165:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001916c:	8b 00                	mov    eax,DWORD PTR [eax]
c001916e:	83 c0 10             	add    eax,0x10
c0019171:	8b 00                	mov    eax,DWORD PTR [eax]
c0019173:	83 ec 0c             	sub    esp,0xc
c0019176:	8d 54 24 24          	lea    edx,[esp+0x24]
c001917a:	52                   	push   edx
c001917b:	8d 54 24 30          	lea    edx,[esp+0x30]
c001917f:	52                   	push   edx
c0019180:	6a 00                	push   0x0
c0019182:	68 00 04 00 00       	push   0x400
c0019187:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001918e:	ff d0                	call   eax
c0019190:	83 c4 20             	add    esp,0x20
c0019193:	83 ec 0c             	sub    esp,0xc
c0019196:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001919d:	e8 78 27 ff ff       	call   c000b91a <File::close()>
c00191a2:	83 c4 10             	add    esp,0x10
c00191a5:	8d 76 00             	lea    esi,[esi+0x0]
c00191a8:	83 ec 08             	sub    esp,0x8
c00191ab:	6a 01                	push   0x1
c00191ad:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00191b4:	e8 03 27 ff ff       	call   c000b8bc <File::open(FileOpenMode)>
c00191b9:	83 c4 10             	add    esp,0x10
c00191bc:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00191c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00191c5:	83 c0 0c             	add    eax,0xc
c00191c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00191ca:	83 ec 0c             	sub    esp,0xc
c00191cd:	8d 54 24 24          	lea    edx,[esp+0x24]
c00191d1:	52                   	push   edx
c00191d2:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00191d6:	52                   	push   edx
c00191d7:	6a 00                	push   0x0
c00191d9:	6a 04                	push   0x4
c00191db:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00191e2:	ff d0                	call   eax
c00191e4:	83 c4 20             	add    esp,0x20
c00191e7:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00191ee:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00191f4:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00191fb:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0019202:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019205:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001920c:	83 ec 0c             	sub    esp,0xc
c001920f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019216:	e8 ff 26 ff ff       	call   c000b91a <File::close()>
c001921b:	83 c4 10             	add    esp,0x10
c001921e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019225:	ba 00 00 00 00       	mov    edx,0x0
c001922a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019230:	5b                   	pop    ebx
c0019231:	5e                   	pop    esi
c0019232:	5f                   	pop    edi
c0019233:	5d                   	pop    ebp
c0019234:	c3                   	ret    
c0019235:	90                   	nop
c0019236:	66 90                	xchg   ax,ax

c0019238 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019238:	57                   	push   edi
c0019239:	56                   	push   esi
c001923a:	53                   	push   ebx
c001923b:	81 ec 50 02 00 00    	sub    esp,0x250
c0019241:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019249:	74 0d                	je     c0019258 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001924b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0019253:	75 0f                	jne    c0019264 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019255:	8d 76 00             	lea    esi,[esi+0x0]
c0019258:	b8 04 00 00 00       	mov    eax,0x4
c001925d:	e9 3a 01 00 00       	jmp    c001939c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019262:	66 90                	xchg   ax,ax
c0019264:	83 ec 08             	sub    esp,0x8
c0019267:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001926e:	50                   	push   eax
c001926f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0019276:	e8 7b b4 fe ff       	call   c00046f6 <f_readdir>
c001927b:	83 c4 10             	add    esp,0x10
c001927e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019285:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001928c:	83 ec 0c             	sub    esp,0xc
c001928f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019296:	83 c0 16             	add    eax,0x16
c0019299:	50                   	push   eax
c001929a:	e8 d1 72 fe ff       	call   c0000570 <strlen>
c001929f:	83 c4 10             	add    esp,0x10
c00192a2:	ba 00 00 00 00       	mov    edx,0x0
c00192a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192ab:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00192af:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00192b6:	0f b6 c0             	movzx  eax,al
c00192b9:	83 e0 10             	and    eax,0x10
c00192bc:	74 0a                	je     c00192c8 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00192be:	b8 02 00 00 00       	mov    eax,0x2
c00192c3:	eb 0b                	jmp    c00192d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00192c5:	8d 76 00             	lea    esi,[esi+0x0]
c00192c8:	b8 01 00 00 00       	mov    eax,0x1
c00192cd:	8d 76 00             	lea    esi,[esi+0x0]
c00192d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00192d4:	83 ec 08             	sub    esp,0x8
c00192d7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00192de:	83 c0 16             	add    eax,0x16
c00192e1:	50                   	push   eax
c00192e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00192e6:	83 c0 10             	add    eax,0x10
c00192e9:	50                   	push   eax
c00192ea:	e8 51 73 fe ff       	call   c0000640 <strcpy>
c00192ef:	83 c4 10             	add    esp,0x10
c00192f2:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00192f9:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019300:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019304:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001930b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0019312:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019319:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019320:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0019327:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001932e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019335:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001933c:	89 c6                	mov    esi,eax
c001933e:	89 d7                	mov    edi,edx
c0019340:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019342:	89 c8                	mov    eax,ecx
c0019344:	89 fa                	mov    edx,edi
c0019346:	89 f3                	mov    ebx,esi
c0019348:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001934f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0019356:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001935d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019364:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001936a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019371:	0f be c0             	movsx  eax,al
c0019374:	85 c0                	test   eax,eax
c0019376:	75 08                	jne    c0019380 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019378:	b8 07 00 00 00       	mov    eax,0x7
c001937d:	eb 1d                	jmp    c001939c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001937f:	90                   	nop
c0019380:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0019387:	85 c0                	test   eax,eax
c0019389:	75 09                	jne    c0019394 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001938b:	b8 00 00 00 00       	mov    eax,0x0
c0019390:	eb 0a                	jmp    c001939c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019392:	66 90                	xchg   ax,ax
c0019394:	b8 01 00 00 00       	mov    eax,0x1
c0019399:	8d 76 00             	lea    esi,[esi+0x0]
c001939c:	81 c4 50 02 00 00    	add    esp,0x250
c00193a2:	5b                   	pop    ebx
c00193a3:	5e                   	pop    esi
c00193a4:	5f                   	pop    edi
c00193a5:	c3                   	ret    
c00193a6:	66 90                	xchg   ax,ax

c00193a8 <FAT::read(void*, unsigned long, void*, int*)>:
c00193a8:	83 ec 1c             	sub    esp,0x1c
c00193ab:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00193b0:	74 0a                	je     c00193bc <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00193b2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00193b7:	75 0b                	jne    c00193c4 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00193b9:	8d 76 00             	lea    esi,[esi+0x0]
c00193bc:	b8 04 00 00 00       	mov    eax,0x4
c00193c1:	eb 41                	jmp    c0019404 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00193c3:	90                   	nop
c00193c4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00193c8:	50                   	push   eax
c00193c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00193cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00193d1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00193d5:	e8 43 ab fe ff       	call   c0003f1d <f_read>
c00193da:	83 c4 10             	add    esp,0x10
c00193dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00193e5:	89 c2                	mov    edx,eax
c00193e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00193eb:	89 10                	mov    DWORD PTR [eax],edx
c00193ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193f1:	85 c0                	test   eax,eax
c00193f3:	75 07                	jne    c00193fc <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00193f5:	b8 00 00 00 00       	mov    eax,0x0
c00193fa:	eb 08                	jmp    c0019404 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00193fc:	b8 01 00 00 00       	mov    eax,0x1
c0019401:	8d 76 00             	lea    esi,[esi+0x0]
c0019404:	83 c4 1c             	add    esp,0x1c
c0019407:	c3                   	ret    

c0019408 <FAT::write(void*, unsigned long, void*, int*)>:
c0019408:	83 ec 1c             	sub    esp,0x1c
c001940b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019410:	74 0a                	je     c001941c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0019412:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019417:	75 0b                	jne    c0019424 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0019419:	8d 76 00             	lea    esi,[esi+0x0]
c001941c:	b8 04 00 00 00       	mov    eax,0x4
c0019421:	eb 41                	jmp    c0019464 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019423:	90                   	nop
c0019424:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019428:	50                   	push   eax
c0019429:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001942d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019431:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019435:	e8 e2 ac fe ff       	call   c000411c <f_write>
c001943a:	83 c4 10             	add    esp,0x10
c001943d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019441:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019445:	89 c2                	mov    edx,eax
c0019447:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001944b:	89 10                	mov    DWORD PTR [eax],edx
c001944d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019451:	85 c0                	test   eax,eax
c0019453:	75 07                	jne    c001945c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0019455:	b8 00 00 00 00       	mov    eax,0x0
c001945a:	eb 08                	jmp    c0019464 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001945c:	b8 01 00 00 00       	mov    eax,0x1
c0019461:	8d 76 00             	lea    esi,[esi+0x0]
c0019464:	83 c4 1c             	add    esp,0x1c
c0019467:	c3                   	ret    

c0019468 <FAT::close(void*)>:
c0019468:	83 ec 1c             	sub    esp,0x1c
c001946b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019470:	75 0a                	jne    c001947c <FAT::close(void*)+0x14>
c0019472:	b8 04 00 00 00       	mov    eax,0x4
c0019477:	eb 3f                	jmp    c00194b8 <FAT::close(void*)+0x50>
c0019479:	8d 76 00             	lea    esi,[esi+0x0]
c001947c:	83 ec 0c             	sub    esp,0xc
c001947f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019483:	e8 a1 af fe ff       	call   c0004429 <f_close>
c0019488:	83 c4 10             	add    esp,0x10
c001948b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001948f:	83 ec 0c             	sub    esp,0xc
c0019492:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019496:	e8 2b e6 fe ff       	call   c0007ac6 <free>
c001949b:	83 c4 10             	add    esp,0x10
c001949e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00194a2:	85 c0                	test   eax,eax
c00194a4:	75 0a                	jne    c00194b0 <FAT::close(void*)+0x48>
c00194a6:	b8 00 00 00 00       	mov    eax,0x0
c00194ab:	eb 0b                	jmp    c00194b8 <FAT::close(void*)+0x50>
c00194ad:	8d 76 00             	lea    esi,[esi+0x0]
c00194b0:	b8 01 00 00 00       	mov    eax,0x1
c00194b5:	8d 76 00             	lea    esi,[esi+0x0]
c00194b8:	83 c4 1c             	add    esp,0x1c
c00194bb:	c3                   	ret    

c00194bc <FAT::closeDir(void*)>:
c00194bc:	83 ec 1c             	sub    esp,0x1c
c00194bf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00194c4:	75 0a                	jne    c00194d0 <FAT::closeDir(void*)+0x14>
c00194c6:	b8 04 00 00 00       	mov    eax,0x4
c00194cb:	eb 3f                	jmp    c001950c <FAT::closeDir(void*)+0x50>
c00194cd:	8d 76 00             	lea    esi,[esi+0x0]
c00194d0:	83 ec 0c             	sub    esp,0xc
c00194d3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194d7:	e8 f8 b1 fe ff       	call   c00046d4 <f_closedir>
c00194dc:	83 c4 10             	add    esp,0x10
c00194df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00194e3:	83 ec 0c             	sub    esp,0xc
c00194e6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194ea:	e8 d7 e5 fe ff       	call   c0007ac6 <free>
c00194ef:	83 c4 10             	add    esp,0x10
c00194f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00194f6:	85 c0                	test   eax,eax
c00194f8:	75 0a                	jne    c0019504 <FAT::closeDir(void*)+0x48>
c00194fa:	b8 00 00 00 00       	mov    eax,0x0
c00194ff:	eb 0b                	jmp    c001950c <FAT::closeDir(void*)+0x50>
c0019501:	8d 76 00             	lea    esi,[esi+0x0]
c0019504:	b8 01 00 00 00       	mov    eax,0x1
c0019509:	8d 76 00             	lea    esi,[esi+0x0]
c001950c:	83 c4 1c             	add    esp,0x1c
c001950f:	c3                   	ret    

c0019510 <FAT::truncate(void*, unsigned long long)>:
c0019510:	83 ec 2c             	sub    esp,0x2c
c0019513:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019517:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001951b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001951f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019523:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019528:	75 0a                	jne    c0019534 <FAT::truncate(void*, unsigned long long)+0x24>
c001952a:	b8 04 00 00 00       	mov    eax,0x4
c001952f:	eb 47                	jmp    c0019578 <FAT::truncate(void*, unsigned long long)+0x68>
c0019531:	8d 76 00             	lea    esi,[esi+0x0]
c0019534:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019538:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001953b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001953f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019547:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001954b:	83 ec 08             	sub    esp,0x8
c001954e:	50                   	push   eax
c001954f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019553:	e8 00 af fe ff       	call   c0004458 <f_lseek>
c0019558:	83 c4 10             	add    esp,0x10
c001955b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001955f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019563:	85 c0                	test   eax,eax
c0019565:	75 09                	jne    c0019570 <FAT::truncate(void*, unsigned long long)+0x60>
c0019567:	b8 00 00 00 00       	mov    eax,0x0
c001956c:	eb 0a                	jmp    c0019578 <FAT::truncate(void*, unsigned long long)+0x68>
c001956e:	66 90                	xchg   ax,ax
c0019570:	b8 01 00 00 00       	mov    eax,0x1
c0019575:	8d 76 00             	lea    esi,[esi+0x0]
c0019578:	83 c4 2c             	add    esp,0x2c
c001957b:	c3                   	ret    

c001957c <FAT::seek(void*, unsigned long long)>:
c001957c:	83 ec 2c             	sub    esp,0x2c
c001957f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019583:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019587:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001958b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001958f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019594:	75 0a                	jne    c00195a0 <FAT::seek(void*, unsigned long long)+0x24>
c0019596:	b8 04 00 00 00       	mov    eax,0x4
c001959b:	eb 33                	jmp    c00195d0 <FAT::seek(void*, unsigned long long)+0x54>
c001959d:	8d 76 00             	lea    esi,[esi+0x0]
c00195a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00195a4:	83 ec 08             	sub    esp,0x8
c00195a7:	50                   	push   eax
c00195a8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00195ac:	e8 a7 ae fe ff       	call   c0004458 <f_lseek>
c00195b1:	83 c4 10             	add    esp,0x10
c00195b4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00195b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00195bc:	85 c0                	test   eax,eax
c00195be:	75 08                	jne    c00195c8 <FAT::seek(void*, unsigned long long)+0x4c>
c00195c0:	b8 00 00 00 00       	mov    eax,0x0
c00195c5:	eb 09                	jmp    c00195d0 <FAT::seek(void*, unsigned long long)+0x54>
c00195c7:	90                   	nop
c00195c8:	b8 01 00 00 00       	mov    eax,0x1
c00195cd:	8d 76 00             	lea    esi,[esi+0x0]
c00195d0:	83 c4 2c             	add    esp,0x2c
c00195d3:	c3                   	ret    

c00195d4 <fatWrapperReadDisk>:
c00195d4:	53                   	push   ebx
c00195d5:	83 ec 18             	sub    esp,0x18
c00195d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00195dc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00195e0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00195e5:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c00195ec:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00195f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00195f4:	ba 00 00 00 00       	mov    edx,0x0
c00195f9:	83 ec 0c             	sub    esp,0xc
c00195fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019600:	53                   	push   ebx
c0019601:	52                   	push   edx
c0019602:	50                   	push   eax
c0019603:	51                   	push   ecx
c0019604:	e8 ef 44 ff ff       	call   c000daf8 <LogicalDisk::read(unsigned long long, int, void*)>
c0019609:	83 c4 20             	add    esp,0x20
c001960c:	83 c4 18             	add    esp,0x18
c001960f:	5b                   	pop    ebx
c0019610:	c3                   	ret    
c0019611:	8d 76 00             	lea    esi,[esi+0x0]

c0019614 <fatWrapperWriteDisk>:
c0019614:	53                   	push   ebx
c0019615:	83 ec 18             	sub    esp,0x18
c0019618:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001961c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019620:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019625:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c001962c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019630:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019634:	ba 00 00 00 00       	mov    edx,0x0
c0019639:	83 ec 0c             	sub    esp,0xc
c001963c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019640:	53                   	push   ebx
c0019641:	52                   	push   edx
c0019642:	50                   	push   eax
c0019643:	51                   	push   ecx
c0019644:	e8 1b 45 ff ff       	call   c000db64 <LogicalDisk::write(unsigned long long, int, void*)>
c0019649:	83 c4 20             	add    esp,0x20
c001964c:	83 c4 18             	add    esp,0x18
c001964f:	5b                   	pop    ebx
c0019650:	c3                   	ret    
c0019651:	8d 76 00             	lea    esi,[esi+0x0]

c0019654 <fatWrapperIoctl>:
c0019654:	53                   	push   ebx
c0019655:	83 ec 28             	sub    esp,0x28
c0019658:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001965c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019660:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019664:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019668:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001966d:	83 f8 02             	cmp    eax,0x2
c0019670:	75 32                	jne    c00196a4 <fatWrapperIoctl+0x50>
c0019672:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019676:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001967a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001967f:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0019686:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001968c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019692:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019696:	66 89 02             	mov    WORD PTR [edx],ax
c0019699:	b8 00 00 00 00       	mov    eax,0x0
c001969e:	e9 c5 00 00 00       	jmp    c0019768 <fatWrapperIoctl+0x114>
c00196a3:	90                   	nop
c00196a4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00196a9:	83 f8 01             	cmp    eax,0x1
c00196ac:	75 6a                	jne    c0019718 <fatWrapperIoctl+0xc4>
c00196ae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00196b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00196b6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00196bb:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c00196c2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00196c8:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00196ce:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00196d4:	89 c8                	mov    eax,ecx
c00196d6:	89 da                	mov    edx,ebx
c00196d8:	0f a4 c2 0a          	shld   edx,eax,0xa
c00196dc:	c1 e0 0a             	shl    eax,0xa
c00196df:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00196e4:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c00196eb:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00196f1:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00196f7:	89 cb                	mov    ebx,ecx
c00196f9:	c1 fb 1f             	sar    ebx,0x1f
c00196fc:	53                   	push   ebx
c00196fd:	51                   	push   ecx
c00196fe:	52                   	push   edx
c00196ff:	50                   	push   eax
c0019700:	e8 7b 5b 00 00       	call   c001f280 <__udivdi3>
c0019705:	83 c4 10             	add    esp,0x10
c0019708:	89 c2                	mov    edx,eax
c001970a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001970e:	89 10                	mov    DWORD PTR [eax],edx
c0019710:	b8 00 00 00 00       	mov    eax,0x0
c0019715:	eb 51                	jmp    c0019768 <fatWrapperIoctl+0x114>
c0019717:	90                   	nop
c0019718:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001971d:	85 c0                	test   eax,eax
c001971f:	75 07                	jne    c0019728 <fatWrapperIoctl+0xd4>
c0019721:	b8 00 00 00 00       	mov    eax,0x0
c0019726:	eb 40                	jmp    c0019768 <fatWrapperIoctl+0x114>
c0019728:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001972d:	83 f8 03             	cmp    eax,0x3
c0019730:	75 1a                	jne    c001974c <fatWrapperIoctl+0xf8>
c0019732:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019736:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001973a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001973e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019744:	b8 00 00 00 00       	mov    eax,0x0
c0019749:	eb 1d                	jmp    c0019768 <fatWrapperIoctl+0x114>
c001974b:	90                   	nop
c001974c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019751:	83 f8 04             	cmp    eax,0x4
c0019754:	75 0a                	jne    c0019760 <fatWrapperIoctl+0x10c>
c0019756:	b8 00 00 00 00       	mov    eax,0x0
c001975b:	eb 0b                	jmp    c0019768 <fatWrapperIoctl+0x114>
c001975d:	8d 76 00             	lea    esi,[esi+0x0]
c0019760:	b8 04 00 00 00       	mov    eax,0x4
c0019765:	8d 76 00             	lea    esi,[esi+0x0]
c0019768:	83 c4 28             	add    esp,0x28
c001976b:	5b                   	pop    ebx
c001976c:	c3                   	ret    
c001976d:	90                   	nop
c001976e:	66 90                	xchg   ax,ax

c0019770 <FAT::FAT()>:
c0019770:	83 ec 1c             	sub    esp,0x1c
c0019773:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019777:	83 ec 0c             	sub    esp,0xc
c001977a:	50                   	push   eax
c001977b:	e8 c0 1d ff ff       	call   c000b540 <Filesystem::Filesystem()>
c0019780:	83 c4 10             	add    esp,0x10
c0019783:	ba cc 28 02 c0       	mov    edx,0xc00228cc
c0019788:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001978c:	89 10                	mov    DWORD PTR [eax],edx
c001978e:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c0019798:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00197a0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00197a5:	7f 19                	jg     c00197c0 <FAT::FAT()+0x50>
c00197a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00197ab:	c7 04 85 a0 97 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6860],0xffffffff
c00197b6:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00197bb:	eb e3                	jmp    c00197a0 <FAT::FAT()+0x30>
c00197bd:	8d 76 00             	lea    esi,[esi+0x0]
c00197c0:	90                   	nop
c00197c1:	83 c4 1c             	add    esp,0x1c
c00197c4:	c3                   	ret    
c00197c5:	90                   	nop
c00197c6:	66 90                	xchg   ax,ax

c00197c8 <FAT::fixFilepath(char*)>:
c00197c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197cc:	8a 00                	mov    al,BYTE PTR [eax]
c00197ce:	0f be c0             	movsx  eax,al
c00197d1:	83 f8 40             	cmp    eax,0x40
c00197d4:	7e 2e                	jle    c0019804 <FAT::fixFilepath(char*)+0x3c>
c00197d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197da:	8a 00                	mov    al,BYTE PTR [eax]
c00197dc:	83 e8 41             	sub    eax,0x41
c00197df:	88 c2                	mov    dl,al
c00197e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197e5:	88 10                	mov    BYTE PTR [eax],dl
c00197e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197eb:	8a 00                	mov    al,BYTE PTR [eax]
c00197ed:	0f be c0             	movsx  eax,al
c00197f0:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c00197f7:	83 c0 30             	add    eax,0x30
c00197fa:	88 c2                	mov    dl,al
c00197fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019800:	88 10                	mov    BYTE PTR [eax],dl
c0019802:	66 90                	xchg   ax,ax
c0019804:	90                   	nop
c0019805:	c3                   	ret    
c0019806:	66 90                	xchg   ax,ax

c0019808 <FAT::open(char const*, void**, FileOpenMode)>:
c0019808:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001980e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019816:	74 0c                	je     c0019824 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019818:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019820:	75 0e                	jne    c0019830 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019822:	66 90                	xchg   ax,ax
c0019824:	b8 04 00 00 00       	mov    eax,0x4
c0019829:	e9 46 01 00 00       	jmp    c0019974 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001982e:	66 90                	xchg   ax,ax
c0019830:	83 ec 08             	sub    esp,0x8
c0019833:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001983a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001983e:	50                   	push   eax
c001983f:	e8 fc 6d fe ff       	call   c0000640 <strcpy>
c0019844:	83 c4 10             	add    esp,0x10
c0019847:	83 ec 08             	sub    esp,0x8
c001984a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001984e:	50                   	push   eax
c001984f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019856:	e8 6d ff ff ff       	call   c00197c8 <FAT::fixFilepath(char*)>
c001985b:	83 c4 10             	add    esp,0x10
c001985e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019866:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001986d:	83 e0 01             	and    eax,0x1
c0019870:	74 12                	je     c0019884 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019872:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019879:	83 c8 01             	or     eax,0x1
c001987c:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019883:	90                   	nop
c0019884:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001988b:	83 e0 04             	and    eax,0x4
c001988e:	74 24                	je     c00198b4 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019890:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019897:	83 c8 30             	or     eax,0x30
c001989a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00198a1:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00198a8:	83 c8 02             	or     eax,0x2
c00198ab:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00198b2:	66 90                	xchg   ax,ax
c00198b4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00198bb:	83 e0 02             	and    eax,0x2
c00198be:	74 14                	je     c00198d4 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c00198c0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00198c7:	83 c8 02             	or     eax,0x2
c00198ca:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00198d1:	8d 76 00             	lea    esi,[esi+0x0]
c00198d4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00198db:	83 e0 08             	and    eax,0x8
c00198de:	74 14                	je     c00198f4 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c00198e0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00198e7:	83 c8 04             	or     eax,0x4
c00198ea:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00198f1:	8d 76 00             	lea    esi,[esi+0x0]
c00198f4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00198fb:	83 e0 10             	and    eax,0x10
c00198fe:	74 14                	je     c0019914 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019900:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019907:	83 c8 08             	or     eax,0x8
c001990a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019911:	8d 76 00             	lea    esi,[esi+0x0]
c0019914:	83 ec 0c             	sub    esp,0xc
c0019917:	68 28 02 00 00       	push   0x228
c001991c:	e8 95 e1 fe ff       	call   c0007ab6 <malloc>
c0019921:	83 c4 10             	add    esp,0x10
c0019924:	89 c2                	mov    edx,eax
c0019926:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001992d:	89 10                	mov    DWORD PTR [eax],edx
c001992f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019937:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001993e:	8b 00                	mov    eax,DWORD PTR [eax]
c0019940:	83 ec 04             	sub    esp,0x4
c0019943:	52                   	push   edx
c0019944:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019948:	52                   	push   edx
c0019949:	50                   	push   eax
c001994a:	e8 0b a3 fe ff       	call   c0003c5a <f_open>
c001994f:	83 c4 10             	add    esp,0x10
c0019952:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019959:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019961:	74 09                	je     c001996c <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019963:	b8 01 00 00 00       	mov    eax,0x1
c0019968:	eb 0a                	jmp    c0019974 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001996a:	66 90                	xchg   ax,ax
c001996c:	b8 00 00 00 00       	mov    eax,0x0
c0019971:	8d 76 00             	lea    esi,[esi+0x0]
c0019974:	81 c4 1c 01 00 00    	add    esp,0x11c
c001997a:	c3                   	ret    
c001997b:	90                   	nop

c001997c <FAT::openDir(char const*, void**)>:
c001997c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019982:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001998a:	74 0c                	je     c0019998 <FAT::openDir(char const*, void**)+0x1c>
c001998c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019994:	75 0e                	jne    c00199a4 <FAT::openDir(char const*, void**)+0x28>
c0019996:	66 90                	xchg   ax,ax
c0019998:	b8 04 00 00 00       	mov    eax,0x4
c001999d:	e9 82 00 00 00       	jmp    c0019a24 <FAT::openDir(char const*, void**)+0xa8>
c00199a2:	66 90                	xchg   ax,ax
c00199a4:	83 ec 08             	sub    esp,0x8
c00199a7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00199ae:	8d 44 24 18          	lea    eax,[esp+0x18]
c00199b2:	50                   	push   eax
c00199b3:	e8 88 6c fe ff       	call   c0000640 <strcpy>
c00199b8:	83 c4 10             	add    esp,0x10
c00199bb:	83 ec 08             	sub    esp,0x8
c00199be:	8d 44 24 14          	lea    eax,[esp+0x14]
c00199c2:	50                   	push   eax
c00199c3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00199ca:	e8 f9 fd ff ff       	call   c00197c8 <FAT::fixFilepath(char*)>
c00199cf:	83 c4 10             	add    esp,0x10
c00199d2:	83 ec 0c             	sub    esp,0xc
c00199d5:	6a 30                	push   0x30
c00199d7:	e8 da e0 fe ff       	call   c0007ab6 <malloc>
c00199dc:	83 c4 10             	add    esp,0x10
c00199df:	89 c2                	mov    edx,eax
c00199e1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00199e8:	89 10                	mov    DWORD PTR [eax],edx
c00199ea:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00199f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00199f3:	83 ec 08             	sub    esp,0x8
c00199f6:	8d 54 24 14          	lea    edx,[esp+0x14]
c00199fa:	52                   	push   edx
c00199fb:	50                   	push   eax
c00199fc:	e8 08 ac fe ff       	call   c0004609 <f_opendir>
c0019a01:	83 c4 10             	add    esp,0x10
c0019a04:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019a0b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019a13:	74 07                	je     c0019a1c <FAT::openDir(char const*, void**)+0xa0>
c0019a15:	b8 01 00 00 00       	mov    eax,0x1
c0019a1a:	eb 08                	jmp    c0019a24 <FAT::openDir(char const*, void**)+0xa8>
c0019a1c:	b8 00 00 00 00       	mov    eax,0x0
c0019a21:	8d 76 00             	lea    esi,[esi+0x0]
c0019a24:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019a2a:	c3                   	ret    
c0019a2b:	90                   	nop

c0019a2c <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019a2c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019a32:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019a3a:	75 0c                	jne    c0019a48 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019a3c:	b8 04 00 00 00       	mov    eax,0x4
c0019a41:	e9 d6 00 00 00       	jmp    c0019b1c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019a46:	66 90                	xchg   ax,ax
c0019a48:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019a50:	75 0a                	jne    c0019a5c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019a52:	b8 04 00 00 00       	mov    eax,0x4
c0019a57:	e9 c0 00 00 00       	jmp    c0019b1c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019a5c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019a64:	75 0a                	jne    c0019a70 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019a66:	b8 04 00 00 00       	mov    eax,0x4
c0019a6b:	e9 ac 00 00 00       	jmp    c0019b1c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019a70:	83 ec 08             	sub    esp,0x8
c0019a73:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019a7a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019a81:	50                   	push   eax
c0019a82:	e8 b9 6b fe ff       	call   c0000640 <strcpy>
c0019a87:	83 c4 10             	add    esp,0x10
c0019a8a:	83 ec 08             	sub    esp,0x8
c0019a8d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019a94:	50                   	push   eax
c0019a95:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019a9c:	e8 27 fd ff ff       	call   c00197c8 <FAT::fixFilepath(char*)>
c0019aa1:	83 c4 10             	add    esp,0x10
c0019aa4:	83 ec 08             	sub    esp,0x8
c0019aa7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019aab:	50                   	push   eax
c0019aac:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019ab3:	50                   	push   eax
c0019ab4:	e8 cf ac fe ff       	call   c0004788 <f_stat>
c0019ab9:	83 c4 10             	add    esp,0x10
c0019abc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019ac3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019aca:	85 c0                	test   eax,eax
c0019acc:	74 0a                	je     c0019ad8 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019ace:	83 f8 04             	cmp    eax,0x4
c0019ad1:	74 39                	je     c0019b0c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019ad3:	eb 3f                	jmp    c0019b14 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019ad5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ad8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019adc:	0f b6 c0             	movzx  eax,al
c0019adf:	83 e0 10             	and    eax,0x10
c0019ae2:	0f 95 c2             	setne  dl
c0019ae5:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019aec:	88 10                	mov    BYTE PTR [eax],dl
c0019aee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019af2:	ba 00 00 00 00       	mov    edx,0x0
c0019af7:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019afe:	89 01                	mov    DWORD PTR [ecx],eax
c0019b00:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019b03:	b8 00 00 00 00       	mov    eax,0x0
c0019b08:	eb 12                	jmp    c0019b1c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019b0a:	66 90                	xchg   ax,ax
c0019b0c:	b8 02 00 00 00       	mov    eax,0x2
c0019b11:	eb 09                	jmp    c0019b1c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019b13:	90                   	nop
c0019b14:	b8 01 00 00 00       	mov    eax,0x1
c0019b19:	8d 76 00             	lea    esi,[esi+0x0]
c0019b1c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019b22:	c3                   	ret    
c0019b23:	90                   	nop

c0019b24 <FAT::unlink(char const*)>:
c0019b24:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019b2a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019b32:	75 08                	jne    c0019b3c <FAT::unlink(char const*)+0x18>
c0019b34:	b8 04 00 00 00       	mov    eax,0x4
c0019b39:	eb 61                	jmp    c0019b9c <FAT::unlink(char const*)+0x78>
c0019b3b:	90                   	nop
c0019b3c:	83 ec 08             	sub    esp,0x8
c0019b3f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019b46:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019b4a:	50                   	push   eax
c0019b4b:	e8 f0 6a fe ff       	call   c0000640 <strcpy>
c0019b50:	83 c4 10             	add    esp,0x10
c0019b53:	83 ec 08             	sub    esp,0x8
c0019b56:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019b5a:	50                   	push   eax
c0019b5b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019b62:	e8 61 fc ff ff       	call   c00197c8 <FAT::fixFilepath(char*)>
c0019b67:	83 c4 10             	add    esp,0x10
c0019b6a:	83 ec 0c             	sub    esp,0xc
c0019b6d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019b71:	50                   	push   eax
c0019b72:	e8 83 ae fe ff       	call   c00049fa <f_unlink>
c0019b77:	83 c4 10             	add    esp,0x10
c0019b7a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019b81:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019b88:	85 c0                	test   eax,eax
c0019b8a:	75 08                	jne    c0019b94 <FAT::unlink(char const*)+0x70>
c0019b8c:	b8 00 00 00 00       	mov    eax,0x0
c0019b91:	eb 09                	jmp    c0019b9c <FAT::unlink(char const*)+0x78>
c0019b93:	90                   	nop
c0019b94:	b8 01 00 00 00       	mov    eax,0x1
c0019b99:	8d 76 00             	lea    esi,[esi+0x0]
c0019b9c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019ba2:	c3                   	ret    
c0019ba3:	90                   	nop

c0019ba4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019ba4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019baa:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019bb1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019bb8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019bbc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019bc0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019bc8:	75 0a                	jne    c0019bd4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019bca:	b8 04 00 00 00       	mov    eax,0x4
c0019bcf:	e9 7c 01 00 00       	jmp    c0019d50 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019bd4:	83 ec 08             	sub    esp,0x8
c0019bd7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019bde:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019be2:	50                   	push   eax
c0019be3:	e8 58 6a fe ff       	call   c0000640 <strcpy>
c0019be8:	83 c4 10             	add    esp,0x10
c0019beb:	83 ec 08             	sub    esp,0x8
c0019bee:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019bf2:	50                   	push   eax
c0019bf3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019bfa:	e8 c9 fb ff ff       	call   c00197c8 <FAT::fixFilepath(char*)>
c0019bff:	83 c4 10             	add    esp,0x10
c0019c02:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019c0a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019c12:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c17:	83 e0 01             	and    eax,0x1
c0019c1a:	74 14                	je     c0019c30 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0019c1c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c23:	83 c8 01             	or     eax,0x1
c0019c26:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019c2d:	8d 76 00             	lea    esi,[esi+0x0]
c0019c30:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c35:	83 e0 02             	and    eax,0x2
c0019c38:	74 12                	je     c0019c4c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0019c3a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c41:	83 c8 20             	or     eax,0x20
c0019c44:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019c4b:	90                   	nop
c0019c4c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c51:	83 e0 04             	and    eax,0x4
c0019c54:	74 12                	je     c0019c68 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0019c56:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c5d:	83 c8 04             	or     eax,0x4
c0019c60:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019c67:	90                   	nop
c0019c68:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c6d:	83 e0 08             	and    eax,0x8
c0019c70:	74 12                	je     c0019c84 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c0019c72:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c79:	83 c8 02             	or     eax,0x2
c0019c7c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019c83:	90                   	nop
c0019c84:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c89:	83 e0 01             	and    eax,0x1
c0019c8c:	74 12                	je     c0019ca0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0019c8e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019c95:	83 c8 01             	or     eax,0x1
c0019c98:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019c9f:	90                   	nop
c0019ca0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019ca5:	83 e0 02             	and    eax,0x2
c0019ca8:	74 12                	je     c0019cbc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0019caa:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019cb1:	83 c8 20             	or     eax,0x20
c0019cb4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019cbb:	90                   	nop
c0019cbc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019cc1:	83 e0 04             	and    eax,0x4
c0019cc4:	74 12                	je     c0019cd8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c0019cc6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019ccd:	83 c8 04             	or     eax,0x4
c0019cd0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019cd7:	90                   	nop
c0019cd8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019cdd:	83 e0 08             	and    eax,0x8
c0019ce0:	74 12                	je     c0019cf4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c0019ce2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019ce9:	83 c8 02             	or     eax,0x2
c0019cec:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019cf3:	90                   	nop
c0019cf4:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019cfb:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019d02:	09 d0                	or     eax,edx
c0019d04:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019d0b:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019d13:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019d1b:	83 ec 04             	sub    esp,0x4
c0019d1e:	52                   	push   edx
c0019d1f:	50                   	push   eax
c0019d20:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019d24:	50                   	push   eax
c0019d25:	e8 45 b1 fe ff       	call   c0004e6f <f_chmod>
c0019d2a:	83 c4 10             	add    esp,0x10
c0019d2d:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019d34:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019d3b:	85 c0                	test   eax,eax
c0019d3d:	75 09                	jne    c0019d48 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c0019d3f:	b8 00 00 00 00       	mov    eax,0x0
c0019d44:	eb 0a                	jmp    c0019d50 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019d46:	66 90                	xchg   ax,ax
c0019d48:	b8 01 00 00 00       	mov    eax,0x1
c0019d4d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d50:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019d56:	c3                   	ret    
c0019d57:	90                   	nop

c0019d58 <FAT::rename(char const*, char const*)>:
c0019d58:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019d5e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019d66:	74 0c                	je     c0019d74 <FAT::rename(char const*, char const*)+0x1c>
c0019d68:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019d70:	75 0e                	jne    c0019d80 <FAT::rename(char const*, char const*)+0x28>
c0019d72:	66 90                	xchg   ax,ax
c0019d74:	b8 04 00 00 00       	mov    eax,0x4
c0019d79:	e9 9e 00 00 00       	jmp    c0019e1c <FAT::rename(char const*, char const*)+0xc4>
c0019d7e:	66 90                	xchg   ax,ax
c0019d80:	83 ec 08             	sub    esp,0x8
c0019d83:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019d8a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019d91:	50                   	push   eax
c0019d92:	e8 a9 68 fe ff       	call   c0000640 <strcpy>
c0019d97:	83 c4 10             	add    esp,0x10
c0019d9a:	83 ec 08             	sub    esp,0x8
c0019d9d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019da4:	50                   	push   eax
c0019da5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019dac:	e8 17 fa ff ff       	call   c00197c8 <FAT::fixFilepath(char*)>
c0019db1:	83 c4 10             	add    esp,0x10
c0019db4:	83 ec 08             	sub    esp,0x8
c0019db7:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019dbe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019dc2:	50                   	push   eax
c0019dc3:	e8 78 68 fe ff       	call   c0000640 <strcpy>
c0019dc8:	83 c4 10             	add    esp,0x10
c0019dcb:	83 ec 08             	sub    esp,0x8
c0019dce:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019dd2:	50                   	push   eax
c0019dd3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019dda:	e8 e9 f9 ff ff       	call   c00197c8 <FAT::fixFilepath(char*)>
c0019ddf:	83 c4 10             	add    esp,0x10
c0019de2:	83 ec 08             	sub    esp,0x8
c0019de5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019de9:	50                   	push   eax
c0019dea:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019df1:	50                   	push   eax
c0019df2:	e8 c0 ae fe ff       	call   c0004cb7 <f_rename>
c0019df7:	83 c4 10             	add    esp,0x10
c0019dfa:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019e01:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019e08:	85 c0                	test   eax,eax
c0019e0a:	75 08                	jne    c0019e14 <FAT::rename(char const*, char const*)+0xbc>
c0019e0c:	b8 00 00 00 00       	mov    eax,0x0
c0019e11:	eb 09                	jmp    c0019e1c <FAT::rename(char const*, char const*)+0xc4>
c0019e13:	90                   	nop
c0019e14:	b8 01 00 00 00       	mov    eax,0x1
c0019e19:	8d 76 00             	lea    esi,[esi+0x0]
c0019e1c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019e22:	c3                   	ret    
c0019e23:	90                   	nop

c0019e24 <FAT::mkdir(char const*)>:
c0019e24:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019e2a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019e32:	75 08                	jne    c0019e3c <FAT::mkdir(char const*)+0x18>
c0019e34:	b8 04 00 00 00       	mov    eax,0x4
c0019e39:	eb 61                	jmp    c0019e9c <FAT::mkdir(char const*)+0x78>
c0019e3b:	90                   	nop
c0019e3c:	83 ec 08             	sub    esp,0x8
c0019e3f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e46:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e4a:	50                   	push   eax
c0019e4b:	e8 f0 67 fe ff       	call   c0000640 <strcpy>
c0019e50:	83 c4 10             	add    esp,0x10
c0019e53:	83 ec 08             	sub    esp,0x8
c0019e56:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e5a:	50                   	push   eax
c0019e5b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e62:	e8 61 f9 ff ff       	call   c00197c8 <FAT::fixFilepath(char*)>
c0019e67:	83 c4 10             	add    esp,0x10
c0019e6a:	83 ec 0c             	sub    esp,0xc
c0019e6d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e71:	50                   	push   eax
c0019e72:	e8 a5 ac fe ff       	call   c0004b1c <f_mkdir>
c0019e77:	83 c4 10             	add    esp,0x10
c0019e7a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019e81:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019e88:	85 c0                	test   eax,eax
c0019e8a:	75 08                	jne    c0019e94 <FAT::mkdir(char const*)+0x70>
c0019e8c:	b8 00 00 00 00       	mov    eax,0x0
c0019e91:	eb 09                	jmp    c0019e9c <FAT::mkdir(char const*)+0x78>
c0019e93:	90                   	nop
c0019e94:	b8 01 00 00 00       	mov    eax,0x1
c0019e99:	8d 76 00             	lea    esi,[esi+0x0]
c0019e9c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019ea2:	c3                   	ret    
c0019ea3:	90                   	nop

c0019ea4 <FAT::exists(char const*)>:
c0019ea4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019eaa:	83 ec 08             	sub    esp,0x8
c0019ead:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019eb4:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019eb8:	50                   	push   eax
c0019eb9:	e8 82 67 fe ff       	call   c0000640 <strcpy>
c0019ebe:	83 c4 10             	add    esp,0x10
c0019ec1:	83 ec 08             	sub    esp,0x8
c0019ec4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019ec8:	50                   	push   eax
c0019ec9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019ed0:	e8 f3 f8 ff ff       	call   c00197c8 <FAT::fixFilepath(char*)>
c0019ed5:	83 c4 10             	add    esp,0x10
c0019ed8:	83 ec 08             	sub    esp,0x8
c0019edb:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0019ee2:	50                   	push   eax
c0019ee3:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019ee7:	50                   	push   eax
c0019ee8:	e8 9b a8 fe ff       	call   c0004788 <f_stat>
c0019eed:	83 c4 10             	add    esp,0x10
c0019ef0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019ef7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019efe:	85 c0                	test   eax,eax
c0019f00:	75 06                	jne    c0019f08 <FAT::exists(char const*)+0x64>
c0019f02:	b0 01                	mov    al,0x1
c0019f04:	eb 06                	jmp    c0019f0c <FAT::exists(char const*)+0x68>
c0019f06:	66 90                	xchg   ax,ax
c0019f08:	b0 00                	mov    al,0x0
c0019f0a:	66 90                	xchg   ax,ax
c0019f0c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019f12:	c3                   	ret    
c0019f13:	90                   	nop

c0019f14 <isoReadDiscSectorHelper>:
c0019f14:	83 ec 2c             	sub    esp,0x2c
c0019f17:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019f1b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019f1f:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019f24:	83 e8 41             	sub    eax,0x41
c0019f27:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019f2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f32:	ba 00 00 00 00       	mov    edx,0x0
c0019f37:	83 ec 0c             	sub    esp,0xc
c0019f3a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019f3e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019f42:	52                   	push   edx
c0019f43:	50                   	push   eax
c0019f44:	51                   	push   ecx
c0019f45:	e8 ae 3b ff ff       	call   c000daf8 <LogicalDisk::read(unsigned long long, int, void*)>
c0019f4a:	83 c4 20             	add    esp,0x20
c0019f4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019f51:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019f56:	74 0c                	je     c0019f64 <isoReadDiscSectorHelper+0x50>
c0019f58:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019f5c:	c1 e0 0b             	shl    eax,0xb
c0019f5f:	eb 0b                	jmp    c0019f6c <isoReadDiscSectorHelper+0x58>
c0019f61:	8d 76 00             	lea    esi,[esi+0x0]
c0019f64:	b8 00 00 00 00       	mov    eax,0x0
c0019f69:	8d 76 00             	lea    esi,[esi+0x0]
c0019f6c:	83 c4 2c             	add    esp,0x2c
c0019f6f:	c3                   	ret    

c0019f70 <iso_kprintf>:
c0019f70:	83 ec 0c             	sub    esp,0xc
c0019f73:	83 ec 08             	sub    esp,0x8
c0019f76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f7a:	68 7a 26 02 c0       	push   0xc002267a
c0019f7f:	e8 c1 09 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0019f84:	83 c4 10             	add    esp,0x10
c0019f87:	90                   	nop
c0019f88:	83 c4 0c             	add    esp,0xc
c0019f8b:	c3                   	ret    

c0019f8c <iso_kprintfd>:
c0019f8c:	83 ec 0c             	sub    esp,0xc
c0019f8f:	83 ec 08             	sub    esp,0x8
c0019f92:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f96:	68 5a 0e 02 c0       	push   0xc0020e5a
c0019f9b:	e8 a5 09 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0019fa0:	83 c4 10             	add    esp,0x10
c0019fa3:	90                   	nop
c0019fa4:	83 c4 0c             	add    esp,0xc
c0019fa7:	c3                   	ret    

c0019fa8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019fa8:	b8 08 00 00 00       	mov    eax,0x8
c0019fad:	c3                   	ret    

c0019fae <ISO9660::truncate(void*, unsigned long long)>:
c0019fae:	b8 01 00 00 00       	mov    eax,0x1
c0019fb3:	c3                   	ret    

c0019fb4 <ISO9660::getName()>:
c0019fb4:	b8 30 29 02 c0       	mov    eax,0xc0022930
c0019fb9:	c3                   	ret    

c0019fba <ISO9660::closeDir(void*)>:
c0019fba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0019fc0:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019fc3:	90                   	nop

c0019fc4 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019fc4:	b8 01 00 00 00       	mov    eax,0x1
c0019fc9:	c3                   	ret    

c0019fca <ISO9660::unlink(char const*)>:
c0019fca:	b8 01 00 00 00       	mov    eax,0x1
c0019fcf:	c3                   	ret    

c0019fd0 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019fd0:	b8 03 00 00 00       	mov    eax,0x3
c0019fd5:	c3                   	ret    

c0019fd6 <ISO9660::rename(char const*, char const*)>:
c0019fd6:	b8 01 00 00 00       	mov    eax,0x1
c0019fdb:	c3                   	ret    

c0019fdc <ISO9660::mkdir(char const*)>:
c0019fdc:	b8 01 00 00 00       	mov    eax,0x1
c0019fe1:	c3                   	ret    

c0019fe2 <ISO9660::~ISO9660()>:
c0019fe2:	83 ec 0c             	sub    esp,0xc
c0019fe5:	ba 70 2a 02 c0       	mov    edx,0xc0022a70
c0019fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fee:	89 10                	mov    DWORD PTR [eax],edx
c0019ff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ff4:	83 ec 0c             	sub    esp,0xc
c0019ff7:	50                   	push   eax
c0019ff8:	e8 67 15 ff ff       	call   c000b564 <Filesystem::~Filesystem()>
c0019ffd:	83 c4 10             	add    esp,0x10
c001a000:	90                   	nop
c001a001:	83 c4 0c             	add    esp,0xc
c001a004:	c3                   	ret    
c001a005:	90                   	nop

c001a006 <ISO9660::~ISO9660()>:
c001a006:	83 ec 0c             	sub    esp,0xc
c001a009:	83 ec 0c             	sub    esp,0xc
c001a00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a010:	e8 cd ff ff ff       	call   c0019fe2 <ISO9660::~ISO9660()>
c001a015:	83 c4 10             	add    esp,0x10
c001a018:	83 ec 08             	sub    esp,0x8
c001a01b:	6a 08                	push   0x8
c001a01d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a021:	e8 f2 07 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a026:	83 c4 10             	add    esp,0x10
c001a029:	83 c4 0c             	add    esp,0xc
c001a02c:	c3                   	ret    
c001a02d:	90                   	nop

c001a02e <ISO9660::exists(char const*)>:
c001a02e:	83 ec 18             	sub    esp,0x18
c001a031:	68 4b 29 02 c0       	push   0xc002294b
c001a036:	e8 0a 73 ff ff       	call   c0011345 <KePanic(char const*)>
c001a03b:	31 c0                	xor    eax,eax
c001a03d:	83 c4 1c             	add    esp,0x1c
c001a040:	c3                   	ret    
c001a041:	90                   	nop

c001a042 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a042:	56                   	push   esi
c001a043:	53                   	push   ebx
c001a044:	53                   	push   ebx
c001a045:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a049:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a04d:	85 db                	test   ebx,ebx
c001a04f:	0f 84 ca 00 00 00    	je     c001a11f <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a055:	85 f6                	test   esi,esi
c001a057:	0f 84 c2 00 00 00    	je     c001a11f <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a05d:	b8 03 00 00 00       	mov    eax,0x3
c001a062:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a067:	0f 85 b7 00 00 00    	jne    c001a124 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a06d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a06f:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a076:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a07c:	74 1b                	je     c001a099 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a07e:	85 c0                	test   eax,eax
c001a080:	74 10                	je     c001a092 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a082:	83 ec 0c             	sub    esp,0xc
c001a085:	68 69 29 02 c0       	push   0xc0022969
c001a08a:	e8 b6 72 ff ff       	call   c0011345 <KePanic(char const*)>
c001a08f:	83 c4 10             	add    esp,0x10
c001a092:	8a 03                	mov    al,BYTE PTR [ebx]
c001a094:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a099:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a09c:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a0a3:	85 c0                	test   eax,eax
c001a0a5:	74 09                	je     c001a0b0 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a0a7:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a0ae:	74 48                	je     c001a0f8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a0b0:	83 ec 0c             	sub    esp,0xc
c001a0b3:	68 79 29 02 c0       	push   0xc0022979
c001a0b8:	e8 88 08 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a0bd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a0c0:	83 c4 10             	add    esp,0x10
c001a0c3:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a0ca:	85 c0                	test   eax,eax
c001a0cc:	74 17                	je     c001a0e5 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a0ce:	83 ec 0c             	sub    esp,0xc
c001a0d1:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a0d8:	68 99 29 02 c0       	push   0xc0022999
c001a0dd:	e8 63 08 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a0e2:	83 c4 10             	add    esp,0x10
c001a0e5:	83 ec 0c             	sub    esp,0xc
c001a0e8:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a0ef:	50                   	push   eax
c001a0f0:	e8 51 c9 fe ff       	call   c0006a46 <init_percd>
c001a0f5:	83 c4 10             	add    esp,0x10
c001a0f8:	83 c3 03             	add    ebx,0x3
c001a0fb:	51                   	push   ecx
c001a0fc:	51                   	push   ecx
c001a0fd:	6a 00                	push   0x0
c001a0ff:	53                   	push   ebx
c001a100:	e8 08 c4 fe ff       	call   c000650d <iso_open>
c001a105:	83 c4 10             	add    esp,0x10
c001a108:	89 c2                	mov    edx,eax
c001a10a:	b8 01 00 00 00       	mov    eax,0x1
c001a10f:	83 fa ff             	cmp    edx,0xffffffff
c001a112:	74 10                	je     c001a124 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a114:	83 c2 32             	add    edx,0x32
c001a117:	31 c0                	xor    eax,eax
c001a119:	01 d2                	add    edx,edx
c001a11b:	89 16                	mov    DWORD PTR [esi],edx
c001a11d:	eb 05                	jmp    c001a124 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a11f:	b8 04 00 00 00       	mov    eax,0x4
c001a124:	5a                   	pop    edx
c001a125:	5b                   	pop    ebx
c001a126:	5e                   	pop    esi
c001a127:	c3                   	ret    

c001a128 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a128:	53                   	push   ebx
c001a129:	83 ec 08             	sub    esp,0x8
c001a12c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a130:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a134:	85 c0                	test   eax,eax
c001a136:	74 2d                	je     c001a165 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a138:	85 db                	test   ebx,ebx
c001a13a:	74 29                	je     c001a165 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a13c:	b9 02 00 00 00       	mov    ecx,0x2
c001a141:	52                   	push   edx
c001a142:	99                   	cdq    
c001a143:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a147:	f7 f9                	idiv   ecx
c001a149:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a14d:	83 e8 32             	sub    eax,0x32
c001a150:	50                   	push   eax
c001a151:	e8 5f c4 fe ff       	call   c00065b5 <iso_read>
c001a156:	83 c4 10             	add    esp,0x10
c001a159:	89 03                	mov    DWORD PTR [ebx],eax
c001a15b:	09 d0                	or     eax,edx
c001a15d:	0f 94 c0             	sete   al
c001a160:	0f b6 c0             	movzx  eax,al
c001a163:	eb 05                	jmp    c001a16a <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a165:	b8 04 00 00 00       	mov    eax,0x4
c001a16a:	83 c4 08             	add    esp,0x8
c001a16d:	5b                   	pop    ebx
c001a16e:	c3                   	ret    
c001a16f:	90                   	nop

c001a170 <ISO9660::seek(void*, unsigned long long)>:
c001a170:	57                   	push   edi
c001a171:	56                   	push   esi
c001a172:	b8 04 00 00 00       	mov    eax,0x4
c001a177:	51                   	push   ecx
c001a178:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a17c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a180:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a184:	85 d2                	test   edx,edx
c001a186:	74 26                	je     c001a1ae <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a188:	6a 00                	push   0x0
c001a18a:	b9 02 00 00 00       	mov    ecx,0x2
c001a18f:	57                   	push   edi
c001a190:	89 d0                	mov    eax,edx
c001a192:	56                   	push   esi
c001a193:	99                   	cdq    
c001a194:	f7 f9                	idiv   ecx
c001a196:	83 e8 32             	sub    eax,0x32
c001a199:	50                   	push   eax
c001a19a:	e8 2c c5 fe ff       	call   c00066cb <iso_seek>
c001a19f:	83 c4 10             	add    esp,0x10
c001a1a2:	31 f0                	xor    eax,esi
c001a1a4:	31 fa                	xor    edx,edi
c001a1a6:	09 d0                	or     eax,edx
c001a1a8:	0f 95 c0             	setne  al
c001a1ab:	0f b6 c0             	movzx  eax,al
c001a1ae:	5a                   	pop    edx
c001a1af:	5e                   	pop    esi
c001a1b0:	5f                   	pop    edi
c001a1b1:	c3                   	ret    

c001a1b2 <ISO9660::tell(void*, unsigned long long*)>:
c001a1b2:	53                   	push   ebx
c001a1b3:	83 ec 08             	sub    esp,0x8
c001a1b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a1ba:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a1be:	85 c0                	test   eax,eax
c001a1c0:	74 24                	je     c001a1e6 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a1c2:	85 db                	test   ebx,ebx
c001a1c4:	74 20                	je     c001a1e6 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a1c6:	83 ec 0c             	sub    esp,0xc
c001a1c9:	b9 02 00 00 00       	mov    ecx,0x2
c001a1ce:	99                   	cdq    
c001a1cf:	f7 f9                	idiv   ecx
c001a1d1:	83 e8 32             	sub    eax,0x32
c001a1d4:	50                   	push   eax
c001a1d5:	e8 75 c5 fe ff       	call   c000674f <iso_tell>
c001a1da:	83 c4 10             	add    esp,0x10
c001a1dd:	89 03                	mov    DWORD PTR [ebx],eax
c001a1df:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a1e2:	31 c0                	xor    eax,eax
c001a1e4:	eb 05                	jmp    c001a1eb <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a1e6:	b8 04 00 00 00       	mov    eax,0x4
c001a1eb:	83 c4 08             	add    esp,0x8
c001a1ee:	5b                   	pop    ebx
c001a1ef:	c3                   	ret    

c001a1f0 <ISO9660::stat(void*, unsigned long long*)>:
c001a1f0:	53                   	push   ebx
c001a1f1:	83 ec 14             	sub    esp,0x14
c001a1f4:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a1f8:	68 bd 29 02 c0       	push   0xc00229bd
c001a1fd:	e8 43 07 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a202:	83 c4 10             	add    esp,0x10
c001a205:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a20a:	74 2c                	je     c001a238 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a20c:	85 db                	test   ebx,ebx
c001a20e:	74 28                	je     c001a238 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a210:	83 ec 0c             	sub    esp,0xc
c001a213:	b9 02 00 00 00       	mov    ecx,0x2
c001a218:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a21c:	99                   	cdq    
c001a21d:	f7 f9                	idiv   ecx
c001a21f:	83 e8 32             	sub    eax,0x32
c001a222:	50                   	push   eax
c001a223:	e8 58 c5 fe ff       	call   c0006780 <iso_total>
c001a228:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a22f:	89 03                	mov    DWORD PTR [ebx],eax
c001a231:	83 c4 10             	add    esp,0x10
c001a234:	31 c0                	xor    eax,eax
c001a236:	eb 05                	jmp    c001a23d <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a238:	b8 04 00 00 00       	mov    eax,0x4
c001a23d:	83 c4 08             	add    esp,0x8
c001a240:	5b                   	pop    ebx
c001a241:	c3                   	ret    

c001a242 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a242:	55                   	push   ebp
c001a243:	57                   	push   edi
c001a244:	56                   	push   esi
c001a245:	53                   	push   ebx
c001a246:	83 ec 18             	sub    esp,0x18
c001a249:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a24d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a251:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a255:	68 c5 29 02 c0       	push   0xc00229c5
c001a25a:	e8 e6 06 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a25f:	83 c4 10             	add    esp,0x10
c001a262:	85 ff                	test   edi,edi
c001a264:	0f 94 c0             	sete   al
c001a267:	85 f6                	test   esi,esi
c001a269:	0f 94 c2             	sete   dl
c001a26c:	09 d0                	or     eax,edx
c001a26e:	a8 01                	test   al,0x1
c001a270:	0f 85 dd 00 00 00    	jne    c001a353 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a276:	85 db                	test   ebx,ebx
c001a278:	0f 84 d5 00 00 00    	je     c001a353 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a27e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a281:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a287:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a28e:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a295:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a297:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a29d:	74 1b                	je     c001a2ba <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a29f:	85 c0                	test   eax,eax
c001a2a1:	74 10                	je     c001a2b3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a2a3:	83 ec 0c             	sub    esp,0xc
c001a2a6:	68 69 29 02 c0       	push   0xc0022969
c001a2ab:	e8 95 70 ff ff       	call   c0011345 <KePanic(char const*)>
c001a2b0:	83 c4 10             	add    esp,0x10
c001a2b3:	8a 03                	mov    al,BYTE PTR [ebx]
c001a2b5:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a2ba:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a2bd:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a2c4:	85 c0                	test   eax,eax
c001a2c6:	74 09                	je     c001a2d1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a2c8:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a2cf:	74 51                	je     c001a322 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a2d1:	83 ec 0c             	sub    esp,0xc
c001a2d4:	68 cd 29 02 c0       	push   0xc00229cd
c001a2d9:	e8 67 06 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a2de:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a2e1:	83 c4 10             	add    esp,0x10
c001a2e4:	83 3c 85 7c 87 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd7884],0x0
c001a2ec:	74 21                	je     c001a30f <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a2ee:	83 ec 0c             	sub    esp,0xc
c001a2f1:	68 ed 29 02 c0       	push   0xc00229ed
c001a2f6:	e8 4a 06 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a2fb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a2fe:	83 c4 10             	add    esp,0x10
c001a301:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a308:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a30f:	83 ec 0c             	sub    esp,0xc
c001a312:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a319:	50                   	push   eax
c001a31a:	e8 27 c7 fe ff       	call   c0006a46 <init_percd>
c001a31f:	83 c4 10             	add    esp,0x10
c001a322:	83 c3 03             	add    ebx,0x3
c001a325:	52                   	push   edx
c001a326:	52                   	push   edx
c001a327:	6a 00                	push   0x0
c001a329:	53                   	push   ebx
c001a32a:	e8 de c1 fe ff       	call   c000650d <iso_open>
c001a32f:	83 c4 10             	add    esp,0x10
c001a332:	89 c5                	mov    ebp,eax
c001a334:	83 f8 ff             	cmp    eax,0xffffffff
c001a337:	75 21                	jne    c001a35a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a339:	50                   	push   eax
c001a33a:	50                   	push   eax
c001a33b:	6a 01                	push   0x1
c001a33d:	53                   	push   ebx
c001a33e:	e8 ca c1 fe ff       	call   c000650d <iso_open>
c001a343:	83 c4 10             	add    esp,0x10
c001a346:	ba 02 00 00 00       	mov    edx,0x2
c001a34b:	40                   	inc    eax
c001a34c:	74 2b                	je     c001a379 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a34e:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a351:	eb 24                	jmp    c001a377 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a353:	ba 04 00 00 00       	mov    edx,0x4
c001a358:	eb 1f                	jmp    c001a379 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a35a:	83 ec 0c             	sub    esp,0xc
c001a35d:	50                   	push   eax
c001a35e:	e8 1d c4 fe ff       	call   c0006780 <iso_total>
c001a363:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a36a:	89 07                	mov    DWORD PTR [edi],eax
c001a36c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a36f:	e8 23 c2 fe ff       	call   c0006597 <iso_close>
c001a374:	83 c4 10             	add    esp,0x10
c001a377:	31 d2                	xor    edx,edx
c001a379:	83 c4 0c             	add    esp,0xc
c001a37c:	89 d0                	mov    eax,edx
c001a37e:	5b                   	pop    ebx
c001a37f:	5e                   	pop    esi
c001a380:	5f                   	pop    edi
c001a381:	5d                   	pop    ebp
c001a382:	c3                   	ret    
c001a383:	90                   	nop

c001a384 <ISO9660::close(void*)>:
c001a384:	83 ec 0c             	sub    esp,0xc
c001a387:	b8 04 00 00 00       	mov    eax,0x4
c001a38c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a390:	85 d2                	test   edx,edx
c001a392:	74 1b                	je     c001a3af <ISO9660::close(void*)+0x2b>
c001a394:	83 ec 0c             	sub    esp,0xc
c001a397:	b9 02 00 00 00       	mov    ecx,0x2
c001a39c:	89 d0                	mov    eax,edx
c001a39e:	99                   	cdq    
c001a39f:	f7 f9                	idiv   ecx
c001a3a1:	83 e8 32             	sub    eax,0x32
c001a3a4:	50                   	push   eax
c001a3a5:	e8 ed c1 fe ff       	call   c0006597 <iso_close>
c001a3aa:	83 c4 10             	add    esp,0x10
c001a3ad:	31 c0                	xor    eax,eax
c001a3af:	83 c4 0c             	add    esp,0xc
c001a3b2:	c3                   	ret    
c001a3b3:	90                   	nop

c001a3b4 <ISO9660::openDir(char const*, void**)>:
c001a3b4:	56                   	push   esi
c001a3b5:	53                   	push   ebx
c001a3b6:	50                   	push   eax
c001a3b7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a3bb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a3bf:	85 db                	test   ebx,ebx
c001a3c1:	0f 84 bd 00 00 00    	je     c001a484 <ISO9660::openDir(char const*, void**)+0xd0>
c001a3c7:	85 f6                	test   esi,esi
c001a3c9:	0f 84 b5 00 00 00    	je     c001a484 <ISO9660::openDir(char const*, void**)+0xd0>
c001a3cf:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a3d1:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a3d8:	38 15 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,dl
c001a3de:	74 1b                	je     c001a3fb <ISO9660::openDir(char const*, void**)+0x47>
c001a3e0:	85 c0                	test   eax,eax
c001a3e2:	74 10                	je     c001a3f4 <ISO9660::openDir(char const*, void**)+0x40>
c001a3e4:	83 ec 0c             	sub    esp,0xc
c001a3e7:	68 69 29 02 c0       	push   0xc0022969
c001a3ec:	e8 54 6f ff ff       	call   c0011345 <KePanic(char const*)>
c001a3f1:	83 c4 10             	add    esp,0x10
c001a3f4:	8a 03                	mov    al,BYTE PTR [ebx]
c001a3f6:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a3fb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a3fe:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a405:	85 c0                	test   eax,eax
c001a407:	74 10                	je     c001a419 <ISO9660::openDir(char const*, void**)+0x65>
c001a409:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a410:	74 1a                	je     c001a42c <ISO9660::openDir(char const*, void**)+0x78>
c001a412:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a419:	83 ec 0c             	sub    esp,0xc
c001a41c:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a423:	50                   	push   eax
c001a424:	e8 1d c6 fe ff       	call   c0006a46 <init_percd>
c001a429:	83 c4 10             	add    esp,0x10
c001a42c:	83 c3 03             	add    ebx,0x3
c001a42f:	50                   	push   eax
c001a430:	50                   	push   eax
c001a431:	6a 01                	push   0x1
c001a433:	53                   	push   ebx
c001a434:	e8 d4 c0 fe ff       	call   c000650d <iso_open>
c001a439:	83 c4 10             	add    esp,0x10
c001a43c:	89 c3                	mov    ebx,eax
c001a43e:	83 f8 ff             	cmp    eax,0xffffffff
c001a441:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a446:	75 1c                	jne    c001a464 <ISO9660::openDir(char const*, void**)+0xb0>
c001a448:	53                   	push   ebx
c001a449:	53                   	push   ebx
c001a44a:	68 11 2a 02 c0       	push   0xc0022a11
c001a44f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a455:	e8 4c e6 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a45a:	83 c4 10             	add    esp,0x10
c001a45d:	b8 01 00 00 00       	mov    eax,0x1
c001a462:	eb 25                	jmp    c001a489 <ISO9660::openDir(char const*, void**)+0xd5>
c001a464:	01 db                	add    ebx,ebx
c001a466:	51                   	push   ecx
c001a467:	83 c3 65             	add    ebx,0x65
c001a46a:	51                   	push   ecx
c001a46b:	68 24 2a 02 c0       	push   0xc0022a24
c001a470:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a476:	e8 2b e6 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a47b:	89 1e                	mov    DWORD PTR [esi],ebx
c001a47d:	83 c4 10             	add    esp,0x10
c001a480:	31 c0                	xor    eax,eax
c001a482:	eb 05                	jmp    c001a489 <ISO9660::openDir(char const*, void**)+0xd5>
c001a484:	b8 04 00 00 00       	mov    eax,0x4
c001a489:	5a                   	pop    edx
c001a48a:	5b                   	pop    ebx
c001a48b:	5e                   	pop    esi
c001a48c:	c3                   	ret    
c001a48d:	90                   	nop

c001a48e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a48e:	55                   	push   ebp
c001a48f:	57                   	push   edi
c001a490:	56                   	push   esi
c001a491:	53                   	push   ebx
c001a492:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a498:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a49f:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a4a6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a4ae:	0f 84 e7 00 00 00    	je     c001a59b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a4b4:	85 db                	test   ebx,ebx
c001a4b6:	0f 84 df 00 00 00    	je     c001a59b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a4bc:	83 ec 0c             	sub    esp,0xc
c001a4bf:	68 37 2a 02 c0       	push   0xc0022a37
c001a4c4:	e8 7c 04 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a4c9:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a4d0:	b9 02 00 00 00       	mov    ecx,0x2
c001a4d5:	99                   	cdq    
c001a4d6:	f7 f9                	idiv   ecx
c001a4d8:	83 e8 32             	sub    eax,0x32
c001a4db:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4de:	e8 ef c2 fe ff       	call   c00067d2 <iso_readdir>
c001a4e3:	83 c4 10             	add    esp,0x10
c001a4e6:	89 c6                	mov    esi,eax
c001a4e8:	85 c0                	test   eax,eax
c001a4ea:	75 37                	jne    c001a523 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001a4ec:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a4f1:	56                   	push   esi
c001a4f2:	56                   	push   esi
c001a4f3:	68 42 2a 02 c0       	push   0xc0022a42
c001a4f8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a4fe:	e8 a3 e5 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a503:	83 c4 0c             	add    esp,0xc
c001a506:	68 10 01 00 00       	push   0x110
c001a50b:	6a 00                	push   0x0
c001a50d:	57                   	push   edi
c001a50e:	e8 dd 5f fe ff       	call   c00004f0 <memset>
c001a513:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a519:	83 c4 10             	add    esp,0x10
c001a51c:	b8 01 00 00 00       	mov    eax,0x1
c001a521:	eb 7d                	jmp    c001a5a0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a523:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a529:	8d 68 08             	lea    ebp,[eax+0x8]
c001a52c:	83 ec 0c             	sub    esp,0xc
c001a52f:	55                   	push   ebp
c001a530:	e8 3b 60 fe ff       	call   c0000570 <strlen>
c001a535:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a53d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a541:	83 c4 10             	add    esp,0x10
c001a544:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001a548:	75 0a                	jne    c001a554 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a54a:	b8 02 00 00 00       	mov    eax,0x2
c001a54f:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001a552:	74 05                	je     c001a559 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001a554:	b8 01 00 00 00       	mov    eax,0x1
c001a559:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a55d:	50                   	push   eax
c001a55e:	50                   	push   eax
c001a55f:	55                   	push   ebp
c001a560:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a564:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a568:	50                   	push   eax
c001a569:	e8 d2 60 fe ff       	call   c0000640 <strcpy>
c001a56e:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a575:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a577:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001a57d:	5a                   	pop    edx
c001a57e:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a583:	59                   	pop    ecx
c001a584:	68 55 2a 02 c0       	push   0xc0022a55
c001a589:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a58f:	e8 12 e5 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a594:	83 c4 10             	add    esp,0x10
c001a597:	31 c0                	xor    eax,eax
c001a599:	eb 05                	jmp    c001a5a0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a59b:	b8 04 00 00 00       	mov    eax,0x4
c001a5a0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a5a6:	5b                   	pop    ebx
c001a5a7:	5e                   	pop    esi
c001a5a8:	5f                   	pop    edi
c001a5a9:	5d                   	pop    ebp
c001a5aa:	c3                   	ret    

c001a5ab <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a5ab:	57                   	push   edi
c001a5ac:	56                   	push   esi
c001a5ad:	53                   	push   ebx
c001a5ae:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a5b2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a5b6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a5ba:	39 35 84 98 02 c0    	cmp    DWORD PTR ds:0xc0029884,esi
c001a5c0:	0f be cb             	movsx  ecx,bl
c001a5c3:	75 0b                	jne    c001a5d0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a5c5:	0f be 05 80 38 02 c0 	movsx  eax,BYTE PTR ds:0xc0023880
c001a5cc:	39 c8                	cmp    eax,ecx
c001a5ce:	74 47                	je     c001a617 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a5d0:	83 ec 0c             	sub    esp,0xc
c001a5d3:	31 d2                	xor    edx,edx
c001a5d5:	68 a0 98 02 c0       	push   0xc00298a0
c001a5da:	6a 01                	push   0x1
c001a5dc:	52                   	push   edx
c001a5dd:	56                   	push   esi
c001a5de:	ff 34 8d 7c 87 02 c0 	push   DWORD PTR [ecx*4-0x3ffd7884]
c001a5e5:	e8 0e 35 ff ff       	call   c000daf8 <LogicalDisk::read(unsigned long long, int, void*)>
c001a5ea:	83 c4 20             	add    esp,0x20
c001a5ed:	85 c0                	test   eax,eax
c001a5ef:	75 0e                	jne    c001a5ff <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a5f1:	89 35 84 98 02 c0    	mov    DWORD PTR ds:0xc0029884,esi
c001a5f7:	88 1d 80 38 02 c0    	mov    BYTE PTR ds:0xc0023880,bl
c001a5fd:	eb 18                	jmp    c001a617 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a5ff:	50                   	push   eax
c001a600:	68 00 08 00 00       	push   0x800
c001a605:	6a 00                	push   0x0
c001a607:	57                   	push   edi
c001a608:	e8 e3 5e fe ff       	call   c00004f0 <memset>
c001a60d:	83 c4 10             	add    esp,0x10
c001a610:	b8 01 00 00 00       	mov    eax,0x1
c001a615:	eb 0e                	jmp    c001a625 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001a617:	be a0 98 02 c0       	mov    esi,0xc00298a0
c001a61c:	b9 00 08 00 00       	mov    ecx,0x800
c001a621:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a623:	31 c0                	xor    eax,eax
c001a625:	5b                   	pop    ebx
c001a626:	5e                   	pop    esi
c001a627:	5f                   	pop    edi
c001a628:	c3                   	ret    
c001a629:	90                   	nop

c001a62a <ISO9660::tryMount(LogicalDisk*, int)>:
c001a62a:	53                   	push   ebx
c001a62b:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001a631:	c7 05 84 98 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029884,0xdeadbeef
c001a63b:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001a642:	8d 58 41             	lea    ebx,[eax+0x41]
c001a645:	0f be db             	movsx  ebx,bl
c001a648:	53                   	push   ebx
c001a649:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a64d:	50                   	push   eax
c001a64e:	6a 10                	push   0x10
c001a650:	e8 56 ff ff ff       	call   c001a5ab <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a655:	83 c4 10             	add    esp,0x10
c001a658:	31 d2                	xor    edx,edx
c001a65a:	85 c0                	test   eax,eax
c001a65c:	75 33                	jne    c001a691 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a65e:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a663:	75 2c                	jne    c001a691 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a665:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a66a:	75 25                	jne    c001a691 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a66c:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a671:	75 1e                	jne    c001a691 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a673:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a678:	75 17                	jne    c001a691 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a67a:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a67f:	75 10                	jne    c001a691 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a681:	83 ec 0c             	sub    esp,0xc
c001a684:	53                   	push   ebx
c001a685:	e8 bc c3 fe ff       	call   c0006a46 <init_percd>
c001a68a:	83 c4 10             	add    esp,0x10
c001a68d:	40                   	inc    eax
c001a68e:	0f 95 c2             	setne  dl
c001a691:	88 d0                	mov    al,dl
c001a693:	81 c4 08 08 00 00    	add    esp,0x808
c001a699:	5b                   	pop    ebx
c001a69a:	c3                   	ret    
c001a69b:	90                   	nop

c001a69c <ISO9660::ISO9660()>:
c001a69c:	83 ec 0c             	sub    esp,0xc
c001a69f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6a3:	83 ec 0c             	sub    esp,0xc
c001a6a6:	50                   	push   eax
c001a6a7:	e8 94 0e ff ff       	call   c000b540 <Filesystem::Filesystem()>
c001a6ac:	83 c4 10             	add    esp,0x10
c001a6af:	ba 70 2a 02 c0       	mov    edx,0xc0022a70
c001a6b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6b8:	89 10                	mov    DWORD PTR [eax],edx
c001a6ba:	e8 99 c4 fe ff       	call   c0006b58 <fs_iso9660_init>
c001a6bf:	90                   	nop
c001a6c0:	83 c4 0c             	add    esp,0xc
c001a6c3:	c3                   	ret    

c001a6c4 <SoundCard::beginPlayback()>:
c001a6c4:	c7 44 24 04 d4 2a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022ad4
c001a6cc:	e9 74 6c ff ff       	jmp    c0011345 <KePanic(char const*)>
c001a6d1:	90                   	nop

c001a6d2 <SoundCard::stopPlayback()>:
c001a6d2:	c7 44 24 04 d4 2a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022ad4
c001a6da:	e9 66 6c ff ff       	jmp    c0011345 <KePanic(char const*)>
c001a6df:	90                   	nop

c001a6e0 <SoundCard::SoundCard(char const*)>:
c001a6e0:	83 ec 1c             	sub    esp,0x1c
c001a6e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6e7:	83 ec 08             	sub    esp,0x8
c001a6ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a6ee:	50                   	push   eax
c001a6ef:	e8 ba 21 ff ff       	call   c000c8ae <Device::Device(char const*)>
c001a6f4:	83 c4 10             	add    esp,0x10
c001a6f7:	ba 20 2b 02 c0       	mov    edx,0xc0022b20
c001a6fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a700:	89 10                	mov    DWORD PTR [eax],edx
c001a702:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a706:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a70d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a711:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001a71b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a71f:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001a729:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a72d:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001a737:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a73b:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a745:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a74d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a752:	7f 1a                	jg     c001a76e <SoundCard::SoundCard(char const*)+0x8e>
c001a754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a758:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a75c:	83 c2 54             	add    edx,0x54
c001a75f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001a767:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a76c:	eb df                	jmp    c001a74d <SoundCard::SoundCard(char const*)+0x6d>
c001a76e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a772:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a779:	90                   	nop
c001a77a:	83 c4 1c             	add    esp,0x1c
c001a77d:	c3                   	ret    

c001a77e <SoundCard::~SoundCard()>:
c001a77e:	83 ec 0c             	sub    esp,0xc
c001a781:	ba 20 2b 02 c0       	mov    edx,0xc0022b20
c001a786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a78a:	89 10                	mov    DWORD PTR [eax],edx
c001a78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a790:	83 ec 0c             	sub    esp,0xc
c001a793:	50                   	push   eax
c001a794:	e8 7f 1e ff ff       	call   c000c618 <Device::~Device()>
c001a799:	83 c4 10             	add    esp,0x10
c001a79c:	90                   	nop
c001a79d:	83 c4 0c             	add    esp,0xc
c001a7a0:	c3                   	ret    
c001a7a1:	90                   	nop

c001a7a2 <SoundCard::~SoundCard()>:
c001a7a2:	83 ec 0c             	sub    esp,0xc
c001a7a5:	83 ec 0c             	sub    esp,0xc
c001a7a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a7ac:	e8 cd ff ff ff       	call   c001a77e <SoundCard::~SoundCard()>
c001a7b1:	83 c4 10             	add    esp,0x10
c001a7b4:	83 ec 08             	sub    esp,0x8
c001a7b7:	68 e8 01 00 00       	push   0x1e8
c001a7bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a7c0:	e8 53 00 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a7c5:	83 c4 10             	add    esp,0x10
c001a7c8:	83 c4 0c             	add    esp,0xc
c001a7cb:	c3                   	ret    

c001a7cc <SoundCard::configureRates(int, int, int)>:
c001a7cc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a7d0:	31 c0                	xor    eax,eax
c001a7d2:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a7d9:	75 20                	jne    c001a7fb <SoundCard::configureRates(int, int, int)+0x2f>
c001a7db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7df:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a7e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a7e9:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a7ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7f3:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a7f9:	b0 01                	mov    al,0x1
c001a7fb:	c3                   	ret    

c001a7fc <SoundCard::getSamples16(int, short*)>:
c001a7fc:	55                   	push   ebp
c001a7fd:	57                   	push   edi
c001a7fe:	31 ff                	xor    edi,edi
c001a800:	56                   	push   esi
c001a801:	53                   	push   ebx
c001a802:	31 db                	xor    ebx,ebx
c001a804:	83 ec 10             	sub    esp,0x10
c001a807:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a80b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a80f:	8d 04 36             	lea    eax,[esi+esi*1]
c001a812:	50                   	push   eax
c001a813:	6a 00                	push   0x0
c001a815:	55                   	push   ebp
c001a816:	e8 d5 5c fe ff       	call   c00004f0 <memset>
c001a81b:	83 c4 10             	add    esp,0x10
c001a81e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a822:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001a829:	85 c0                	test   eax,eax
c001a82b:	74 1b                	je     c001a848 <SoundCard::getSamples16(int, short*)+0x4c>
c001a82d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a831:	75 15                	jne    c001a848 <SoundCard::getSamples16(int, short*)+0x4c>
c001a833:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a837:	55                   	push   ebp
c001a838:	56                   	push   esi
c001a839:	50                   	push   eax
c001a83a:	e8 f1 02 00 00       	call   c001ab30 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001a83f:	83 c4 10             	add    esp,0x10
c001a842:	39 c7                	cmp    edi,eax
c001a844:	7d 02                	jge    c001a848 <SoundCard::getSamples16(int, short*)+0x4c>
c001a846:	89 c7                	mov    edi,eax
c001a848:	43                   	inc    ebx
c001a849:	83 fb 20             	cmp    ebx,0x20
c001a84c:	75 d0                	jne    c001a81e <SoundCard::getSamples16(int, short*)+0x22>
c001a84e:	83 c4 0c             	add    esp,0xc
c001a851:	89 f8                	mov    eax,edi
c001a853:	5b                   	pop    ebx
c001a854:	5e                   	pop    esi
c001a855:	5f                   	pop    edi
c001a856:	5d                   	pop    ebp
c001a857:	c3                   	ret    

c001a858 <SoundCard::getSamples32(int, int*)>:
c001a858:	55                   	push   ebp
c001a859:	57                   	push   edi
c001a85a:	31 ff                	xor    edi,edi
c001a85c:	56                   	push   esi
c001a85d:	31 f6                	xor    esi,esi
c001a85f:	53                   	push   ebx
c001a860:	83 ec 10             	sub    esp,0x10
c001a863:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a867:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a86b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a86f:	c1 e0 02             	shl    eax,0x2
c001a872:	50                   	push   eax
c001a873:	6a 00                	push   0x0
c001a875:	55                   	push   ebp
c001a876:	e8 75 5c fe ff       	call   c00004f0 <memset>
c001a87b:	83 c4 10             	add    esp,0x10
c001a87e:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001a885:	85 c0                	test   eax,eax
c001a887:	74 1b                	je     c001a8a4 <SoundCard::getSamples32(int, int*)+0x4c>
c001a889:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a88d:	75 15                	jne    c001a8a4 <SoundCard::getSamples32(int, int*)+0x4c>
c001a88f:	53                   	push   ebx
c001a890:	55                   	push   ebp
c001a891:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a895:	50                   	push   eax
c001a896:	e8 61 03 00 00       	call   c001abfc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001a89b:	83 c4 10             	add    esp,0x10
c001a89e:	39 c6                	cmp    esi,eax
c001a8a0:	7d 02                	jge    c001a8a4 <SoundCard::getSamples32(int, int*)+0x4c>
c001a8a2:	89 c6                	mov    esi,eax
c001a8a4:	47                   	inc    edi
c001a8a5:	83 ff 20             	cmp    edi,0x20
c001a8a8:	75 d4                	jne    c001a87e <SoundCard::getSamples32(int, int*)+0x26>
c001a8aa:	85 f6                	test   esi,esi
c001a8ac:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001a8b3:	75 0f                	jne    c001a8c4 <SoundCard::getSamples32(int, int*)+0x6c>
c001a8b5:	85 c0                	test   eax,eax
c001a8b7:	74 1b                	je     c001a8d4 <SoundCard::getSamples32(int, int*)+0x7c>
c001a8b9:	83 ec 0c             	sub    esp,0xc
c001a8bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8be:	53                   	push   ebx
c001a8bf:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a8c2:	eb 0d                	jmp    c001a8d1 <SoundCard::getSamples32(int, int*)+0x79>
c001a8c4:	85 c0                	test   eax,eax
c001a8c6:	75 0c                	jne    c001a8d4 <SoundCard::getSamples32(int, int*)+0x7c>
c001a8c8:	83 ec 0c             	sub    esp,0xc
c001a8cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8cd:	53                   	push   ebx
c001a8ce:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a8d1:	83 c4 10             	add    esp,0x10
c001a8d4:	83 c4 0c             	add    esp,0xc
c001a8d7:	89 f0                	mov    eax,esi
c001a8d9:	5b                   	pop    ebx
c001a8da:	5e                   	pop    esi
c001a8db:	5f                   	pop    edi
c001a8dc:	5d                   	pop    ebp
c001a8dd:	c3                   	ret    

c001a8de <SoundCard::addChannel(SoundPort*)>:
c001a8de:	83 ec 0c             	sub    esp,0xc
c001a8e1:	31 c0                	xor    eax,eax
c001a8e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a8e7:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001a8ef:	74 1b                	je     c001a90c <SoundCard::addChannel(SoundPort*)+0x2e>
c001a8f1:	40                   	inc    eax
c001a8f2:	83 f8 20             	cmp    eax,0x20
c001a8f5:	75 f0                	jne    c001a8e7 <SoundCard::addChannel(SoundPort*)+0x9>
c001a8f7:	83 ec 0c             	sub    esp,0xc
c001a8fa:	68 f9 2a 02 c0       	push   0xc0022af9
c001a8ff:	e8 41 6a ff ff       	call   c0011345 <KePanic(char const*)>
c001a904:	83 c4 10             	add    esp,0x10
c001a907:	83 c8 ff             	or     eax,0xffffffff
c001a90a:	eb 0b                	jmp    c001a917 <SoundCard::addChannel(SoundPort*)+0x39>
c001a90c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a910:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a917:	83 c4 0c             	add    esp,0xc
c001a91a:	c3                   	ret    
c001a91b:	90                   	nop

c001a91c <SoundCard::removeChannel(int)>:
c001a91c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a920:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a924:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a92f:	c3                   	ret    

c001a930 <SoundPort::SoundPort(int, int, int, int)>:
c001a930:	83 ec 0c             	sub    esp,0xc
c001a933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a937:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a93e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a942:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a94a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a94e:	89 10                	mov    DWORD PTR [eax],edx
c001a950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a954:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a958:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a95b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a95f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a963:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a966:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001a96b:	75 13                	jne    c001a980 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001a96d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a971:	8b 00                	mov    eax,DWORD PTR [eax]
c001a973:	05 a0 0f 00 00       	add    eax,0xfa0
c001a978:	01 c0                	add    eax,eax
c001a97a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a97e:	66 90                	xchg   ax,ax
c001a980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a984:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a988:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a98b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a98f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001a996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a99a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a99d:	c1 e0 02             	shl    eax,0x2
c001a9a0:	83 ec 0c             	sub    esp,0xc
c001a9a3:	50                   	push   eax
c001a9a4:	e8 0d d1 fe ff       	call   c0007ab6 <malloc>
c001a9a9:	83 c4 10             	add    esp,0x10
c001a9ac:	89 c2                	mov    edx,eax
c001a9ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9b2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a9b5:	90                   	nop
c001a9b6:	83 c4 0c             	add    esp,0xc
c001a9b9:	c3                   	ret    
c001a9ba:	66 90                	xchg   ax,ax

c001a9bc <SoundPort::~SoundPort()>:
c001a9bc:	83 ec 0c             	sub    esp,0xc
c001a9bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9c3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a9c6:	85 c0                	test   eax,eax
c001a9c8:	74 1e                	je     c001a9e8 <SoundPort::~SoundPort()+0x2c>
c001a9ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9ce:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a9d1:	83 ec 0c             	sub    esp,0xc
c001a9d4:	50                   	push   eax
c001a9d5:	e8 ec d0 fe ff       	call   c0007ac6 <free>
c001a9da:	83 c4 10             	add    esp,0x10
c001a9dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9e1:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a9e8:	90                   	nop
c001a9e9:	83 c4 0c             	add    esp,0xc
c001a9ec:	c3                   	ret    
c001a9ed:	90                   	nop
c001a9ee:	66 90                	xchg   ax,ax

c001a9f0 <SoundPort::unpause()>:
c001a9f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9f4:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001a9f8:	c3                   	ret    
c001a9f9:	90                   	nop
c001a9fa:	66 90                	xchg   ax,ax

c001a9fc <SoundPort::pause()>:
c001a9fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa00:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001aa04:	c3                   	ret    
c001aa05:	90                   	nop
c001aa06:	66 90                	xchg   ax,ax

c001aa08 <SoundPort::getBufferUsed()>:
c001aa08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa0c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aa0f:	c3                   	ret    

c001aa10 <SoundPort::getBufferSize()>:
c001aa10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa14:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001aa17:	c3                   	ret    

c001aa18 <SoundPort::buffer16(short*, int)>:
c001aa18:	55                   	push   ebp
c001aa19:	57                   	push   edi
c001aa1a:	56                   	push   esi
c001aa1b:	53                   	push   ebx
c001aa1c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aa20:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001aa24:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001aa27:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001aa2a:	74 68                	je     c001aa94 <SoundPort::buffer16(short*, int)+0x7c>
c001aa2c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aa30:	85 c9                	test   ecx,ecx
c001aa32:	7e 60                	jle    c001aa94 <SoundPort::buffer16(short*, int)+0x7c>
c001aa34:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001aa38:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001aa3b:	c1 e1 0f             	shl    ecx,0xf
c001aa3e:	8d 70 01             	lea    esi,[eax+0x1]
c001aa41:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001aa44:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001aa47:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aa4a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aa4d:	74 4d                	je     c001aa9c <SoundPort::buffer16(short*, int)+0x84>
c001aa4f:	31 f6                	xor    esi,esi
c001aa51:	eb 21                	jmp    c001aa74 <SoundPort::buffer16(short*, int)+0x5c>
c001aa53:	90                   	nop
c001aa54:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001aa59:	8d 79 01             	lea    edi,[ecx+0x1]
c001aa5c:	c1 e3 0f             	shl    ebx,0xf
c001aa5f:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001aa62:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001aa65:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001aa68:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aa6b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aa6e:	74 1c                	je     c001aa8c <SoundPort::buffer16(short*, int)+0x74>
c001aa70:	89 c6                	mov    esi,eax
c001aa72:	66 90                	xchg   ax,ax
c001aa74:	8d 46 01             	lea    eax,[esi+0x1]
c001aa77:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001aa7b:	75 d7                	jne    c001aa54 <SoundPort::buffer16(short*, int)+0x3c>
c001aa7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa81:	8d 76 00             	lea    esi,[esi+0x0]
c001aa84:	5b                   	pop    ebx
c001aa85:	5e                   	pop    esi
c001aa86:	5f                   	pop    edi
c001aa87:	5d                   	pop    ebp
c001aa88:	c3                   	ret    
c001aa89:	8d 76 00             	lea    esi,[esi+0x0]
c001aa8c:	5b                   	pop    ebx
c001aa8d:	8d 46 02             	lea    eax,[esi+0x2]
c001aa90:	5e                   	pop    esi
c001aa91:	5f                   	pop    edi
c001aa92:	5d                   	pop    ebp
c001aa93:	c3                   	ret    
c001aa94:	5b                   	pop    ebx
c001aa95:	31 c0                	xor    eax,eax
c001aa97:	5e                   	pop    esi
c001aa98:	5f                   	pop    edi
c001aa99:	5d                   	pop    ebp
c001aa9a:	c3                   	ret    
c001aa9b:	90                   	nop
c001aa9c:	b8 01 00 00 00       	mov    eax,0x1
c001aaa1:	eb e1                	jmp    c001aa84 <SoundPort::buffer16(short*, int)+0x6c>
c001aaa3:	90                   	nop

c001aaa4 <SoundPort::buffer32(int*, int)>:
c001aaa4:	55                   	push   ebp
c001aaa5:	57                   	push   edi
c001aaa6:	56                   	push   esi
c001aaa7:	53                   	push   ebx
c001aaa8:	83 ec 04             	sub    esp,0x4
c001aaab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aaaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aab3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aab6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001aaba:	89 04 24             	mov    DWORD PTR [esp],eax
c001aabd:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aac0:	74 5a                	je     c001ab1c <SoundPort::buffer32(int*, int)+0x78>
c001aac2:	85 c0                	test   eax,eax
c001aac4:	7e 56                	jle    c001ab1c <SoundPort::buffer32(int*, int)+0x78>
c001aac6:	8d 71 01             	lea    esi,[ecx+0x1]
c001aac9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001aacc:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001aacf:	8b 37                	mov    esi,DWORD PTR [edi]
c001aad1:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001aad4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aad7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aada:	74 4c                	je     c001ab28 <SoundPort::buffer32(int*, int)+0x84>
c001aadc:	31 f6                	xor    esi,esi
c001aade:	eb 1c                	jmp    c001aafc <SoundPort::buffer32(int*, int)+0x58>
c001aae0:	8d 69 01             	lea    ebp,[ecx+0x1]
c001aae3:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001aae6:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001aae9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001aaec:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001aaf0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aaf3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aaf6:	74 18                	je     c001ab10 <SoundPort::buffer32(int*, int)+0x6c>
c001aaf8:	89 de                	mov    esi,ebx
c001aafa:	66 90                	xchg   ax,ax
c001aafc:	8d 5e 01             	lea    ebx,[esi+0x1]
c001aaff:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001ab02:	75 dc                	jne    c001aae0 <SoundPort::buffer32(int*, int)+0x3c>
c001ab04:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ab07:	90                   	nop
c001ab08:	83 c4 04             	add    esp,0x4
c001ab0b:	5b                   	pop    ebx
c001ab0c:	5e                   	pop    esi
c001ab0d:	5f                   	pop    edi
c001ab0e:	5d                   	pop    ebp
c001ab0f:	c3                   	ret    
c001ab10:	83 c4 04             	add    esp,0x4
c001ab13:	8d 46 02             	lea    eax,[esi+0x2]
c001ab16:	5b                   	pop    ebx
c001ab17:	5e                   	pop    esi
c001ab18:	5f                   	pop    edi
c001ab19:	5d                   	pop    ebp
c001ab1a:	c3                   	ret    
c001ab1b:	90                   	nop
c001ab1c:	83 c4 04             	add    esp,0x4
c001ab1f:	31 c0                	xor    eax,eax
c001ab21:	5b                   	pop    ebx
c001ab22:	5e                   	pop    esi
c001ab23:	5f                   	pop    edi
c001ab24:	5d                   	pop    ebp
c001ab25:	c3                   	ret    
c001ab26:	66 90                	xchg   ax,ax
c001ab28:	b8 01 00 00 00       	mov    eax,0x1
c001ab2d:	eb d9                	jmp    c001ab08 <SoundPort::buffer32(int*, int)+0x64>
c001ab2f:	90                   	nop

c001ab30 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001ab30:	57                   	push   edi
c001ab31:	56                   	push   esi
c001ab32:	53                   	push   ebx
c001ab33:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab37:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ab3b:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001ab41:	39 03                	cmp    DWORD PTR [ebx],eax
c001ab43:	74 13                	je     c001ab58 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001ab45:	83 ec 0c             	sub    esp,0xc
c001ab48:	68 4c 2b 02 c0       	push   0xc0022b4c
c001ab4d:	e8 f3 67 ff ff       	call   c0011345 <KePanic(char const*)>
c001ab52:	83 c4 10             	add    esp,0x10
c001ab55:	8d 76 00             	lea    esi,[esi+0x0]
c001ab58:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001ab5e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001ab61:	74 11                	je     c001ab74 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001ab63:	83 ec 0c             	sub    esp,0xc
c001ab66:	68 8b 2b 02 c0       	push   0xc0022b8b
c001ab6b:	e8 d5 67 ff ff       	call   c0011345 <KePanic(char const*)>
c001ab70:	83 c4 10             	add    esp,0x10
c001ab73:	90                   	nop
c001ab74:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001ab7a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001ab7d:	74 11                	je     c001ab90 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001ab7f:	83 ec 0c             	sub    esp,0xc
c001ab82:	68 8b 2b 02 c0       	push   0xc0022b8b
c001ab87:	e8 b9 67 ff ff       	call   c0011345 <KePanic(char const*)>
c001ab8c:	83 c4 10             	add    esp,0x10
c001ab8f:	90                   	nop
c001ab90:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001ab93:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001ab97:	7e 07                	jle    c001aba0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001ab99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ab9d:	8d 76 00             	lea    esi,[esi+0x0]
c001aba0:	85 f6                	test   esi,esi
c001aba2:	7e 2c                	jle    c001abd0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001aba4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aba8:	8d 3c 36             	lea    edi,[esi+esi*1]
c001abab:	31 c9                	xor    ecx,ecx
c001abad:	01 d7                	add    edi,edx
c001abaf:	90                   	nop
c001abb0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001abb3:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001abb6:	85 c0                	test   eax,eax
c001abb8:	79 06                	jns    c001abc0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001abba:	05 ff 7f 00 00       	add    eax,0x7fff
c001abbf:	90                   	nop
c001abc0:	c1 f8 0f             	sar    eax,0xf
c001abc3:	83 c1 04             	add    ecx,0x4
c001abc6:	66 01 02             	add    WORD PTR [edx],ax
c001abc9:	83 c2 02             	add    edx,0x2
c001abcc:	39 d7                	cmp    edi,edx
c001abce:	75 e0                	jne    c001abb0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001abd0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001abd3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001abd6:	83 ec 04             	sub    esp,0x4
c001abd9:	29 f0                	sub    eax,esi
c001abdb:	c1 e0 02             	shl    eax,0x2
c001abde:	50                   	push   eax
c001abdf:	8d 04 b2             	lea    eax,[edx+esi*4]
c001abe2:	50                   	push   eax
c001abe3:	52                   	push   edx
c001abe4:	e8 e7 57 fe ff       	call   c00003d0 <memmove>
c001abe9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001abec:	83 c4 10             	add    esp,0x10
c001abef:	29 f0                	sub    eax,esi
c001abf1:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001abf4:	89 f0                	mov    eax,esi
c001abf6:	5b                   	pop    ebx
c001abf7:	5e                   	pop    esi
c001abf8:	5f                   	pop    edi
c001abf9:	c3                   	ret    
c001abfa:	66 90                	xchg   ax,ax

c001abfc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001abfc:	57                   	push   edi
c001abfd:	56                   	push   esi
c001abfe:	53                   	push   ebx
c001abff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ac03:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ac07:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ac0b:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001ac11:	39 06                	cmp    DWORD PTR [esi],eax
c001ac13:	74 13                	je     c001ac28 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001ac15:	83 ec 0c             	sub    esp,0xc
c001ac18:	68 6c 2b 02 c0       	push   0xc0022b6c
c001ac1d:	e8 23 67 ff ff       	call   c0011345 <KePanic(char const*)>
c001ac22:	83 c4 10             	add    esp,0x10
c001ac25:	8d 76 00             	lea    esi,[esi+0x0]
c001ac28:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001ac2e:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001ac31:	74 11                	je     c001ac44 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001ac33:	83 ec 0c             	sub    esp,0xc
c001ac36:	68 a7 2b 02 c0       	push   0xc0022ba7
c001ac3b:	e8 05 67 ff ff       	call   c0011345 <KePanic(char const*)>
c001ac40:	83 c4 10             	add    esp,0x10
c001ac43:	90                   	nop
c001ac44:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001ac4a:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001ac4d:	74 11                	je     c001ac60 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001ac4f:	83 ec 0c             	sub    esp,0xc
c001ac52:	68 a7 2b 02 c0       	push   0xc0022ba7
c001ac57:	e8 e9 66 ff ff       	call   c0011345 <KePanic(char const*)>
c001ac5c:	83 c4 10             	add    esp,0x10
c001ac5f:	90                   	nop
c001ac60:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001ac63:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001ac67:	7e 07                	jle    c001ac70 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001ac69:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ac6d:	8d 76 00             	lea    esi,[esi+0x0]
c001ac70:	85 ff                	test   edi,edi
c001ac72:	7e 1c                	jle    c001ac90 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001ac74:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001ac7b:	31 c0                	xor    eax,eax
c001ac7d:	8d 76 00             	lea    esi,[esi+0x0]
c001ac80:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ac83:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001ac86:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001ac89:	83 c0 04             	add    eax,0x4
c001ac8c:	39 c1                	cmp    ecx,eax
c001ac8e:	75 f0                	jne    c001ac80 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001ac90:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ac93:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ac96:	83 ec 04             	sub    esp,0x4
c001ac99:	29 f8                	sub    eax,edi
c001ac9b:	c1 e0 02             	shl    eax,0x2
c001ac9e:	50                   	push   eax
c001ac9f:	8d 04 ba             	lea    eax,[edx+edi*4]
c001aca2:	50                   	push   eax
c001aca3:	52                   	push   edx
c001aca4:	e8 27 57 fe ff       	call   c00003d0 <memmove>
c001aca9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001acac:	83 c4 10             	add    esp,0x10
c001acaf:	29 f8                	sub    eax,edi
c001acb1:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001acb4:	89 f8                	mov    eax,edi
c001acb6:	5b                   	pop    ebx
c001acb7:	5e                   	pop    esi
c001acb8:	5f                   	pop    edi
c001acb9:	c3                   	ret    

c001acba <PCI::open(int, int, void*)>:
c001acba:	83 ec 18             	sub    esp,0x18
c001acbd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001acc1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001acc5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001accb:	8b 10                	mov    edx,DWORD PTR [eax]
c001accd:	50                   	push   eax
c001acce:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001acd1:	31 c0                	xor    eax,eax
c001acd3:	83 c4 1c             	add    esp,0x1c
c001acd6:	c3                   	ret    
c001acd7:	90                   	nop

c001acd8 <PCI::close(int, int, void*)>:
c001acd8:	31 c0                	xor    eax,eax
c001acda:	c3                   	ret    
c001acdb:	90                   	nop

c001acdc <PCI::PCI()>:
c001acdc:	83 ec 0c             	sub    esp,0xc
c001acdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ace3:	83 ec 08             	sub    esp,0x8
c001ace6:	68 c3 2b 02 c0       	push   0xc0022bc3
c001aceb:	50                   	push   eax
c001acec:	e8 87 13 ff ff       	call   c000c078 <Bus::Bus(char const*)>
c001acf1:	83 c4 10             	add    esp,0x10
c001acf4:	ba 6c 2c 02 c0       	mov    edx,0xc0022c6c
c001acf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acfd:	89 10                	mov    DWORD PTR [eax],edx
c001acff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad03:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001ad0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad11:	a3 a0 a0 02 c0       	mov    ds:0xc002a0a0,eax
c001ad16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad1a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ad20:	0f b6 d0             	movzx  edx,al
c001ad23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad27:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001ad2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad32:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ad38:	0f b6 d0             	movzx  edx,al
c001ad3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad3f:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001ad44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad48:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ad4e:	8d 50 01             	lea    edx,[eax+0x1]
c001ad51:	88 d1                	mov    cl,dl
c001ad53:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad57:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ad5d:	0f b6 d0             	movzx  edx,al
c001ad60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad64:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ad68:	83 c9 c0             	or     ecx,0xffffffc0
c001ad6b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ad6f:	90                   	nop
c001ad70:	83 c4 0c             	add    esp,0xc
c001ad73:	c3                   	ret    

c001ad74 <PCI::readBAR8(unsigned int, int)>:
c001ad74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad7c:	f6 c2 01             	test   dl,0x1
c001ad7f:	74 07                	je     c001ad88 <PCI::readBAR8(unsigned int, int)+0x14>
c001ad81:	83 e2 fc             	and    edx,0xfffffffc
c001ad84:	01 c2                	add    edx,eax
c001ad86:	ec                   	in     al,dx
c001ad87:	c3                   	ret    
c001ad88:	83 e2 f0             	and    edx,0xfffffff0
c001ad8b:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001ad8e:	c3                   	ret    
c001ad8f:	90                   	nop

c001ad90 <PCI::readBAR16(unsigned int, int)>:
c001ad90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad98:	f6 c2 01             	test   dl,0x1
c001ad9b:	74 08                	je     c001ada5 <PCI::readBAR16(unsigned int, int)+0x15>
c001ad9d:	83 e2 fc             	and    edx,0xfffffffc
c001ada0:	01 c2                	add    edx,eax
c001ada2:	66 ed                	in     ax,dx
c001ada4:	c3                   	ret    
c001ada5:	83 e2 f0             	and    edx,0xfffffff0
c001ada8:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001adac:	c3                   	ret    
c001adad:	90                   	nop

c001adae <PCI::readBAR32(unsigned int, int)>:
c001adae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001adb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001adb6:	f6 c2 01             	test   dl,0x1
c001adb9:	74 07                	je     c001adc2 <PCI::readBAR32(unsigned int, int)+0x14>
c001adbb:	83 e2 fc             	and    edx,0xfffffffc
c001adbe:	01 c2                	add    edx,eax
c001adc0:	ed                   	in     eax,dx
c001adc1:	c3                   	ret    
c001adc2:	83 e2 f0             	and    edx,0xfffffff0
c001adc5:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001adc8:	c3                   	ret    
c001adc9:	90                   	nop

c001adca <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001adca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001adce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001add2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001add6:	f6 c2 01             	test   dl,0x1
c001add9:	74 07                	je     c001ade2 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001addb:	83 e2 fc             	and    edx,0xfffffffc
c001adde:	01 ca                	add    edx,ecx
c001ade0:	ee                   	out    dx,al
c001ade1:	c3                   	ret    
c001ade2:	83 e2 f0             	and    edx,0xfffffff0
c001ade5:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001ade8:	c3                   	ret    
c001ade9:	90                   	nop

c001adea <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001adea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001adee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001adf2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001adf6:	f6 c2 01             	test   dl,0x1
c001adf9:	74 08                	je     c001ae03 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001adfb:	83 e2 fc             	and    edx,0xfffffffc
c001adfe:	01 ca                	add    edx,ecx
c001ae00:	66 ef                	out    dx,ax
c001ae02:	c3                   	ret    
c001ae03:	83 e2 f0             	and    edx,0xfffffff0
c001ae06:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001ae0a:	c3                   	ret    
c001ae0b:	90                   	nop

c001ae0c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001ae0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae14:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ae18:	f6 c2 01             	test   dl,0x1
c001ae1b:	74 07                	je     c001ae24 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001ae1d:	83 e2 fc             	and    edx,0xfffffffc
c001ae20:	01 ca                	add    edx,ecx
c001ae22:	ef                   	out    dx,eax
c001ae23:	c3                   	ret    
c001ae24:	83 e2 f0             	and    edx,0xfffffff0
c001ae27:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001ae2a:	c3                   	ret    
c001ae2b:	90                   	nop

c001ae2c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ae2c:	55                   	push   ebp
c001ae2d:	57                   	push   edi
c001ae2e:	56                   	push   esi
c001ae2f:	53                   	push   ebx
c001ae30:	83 ec 0c             	sub    esp,0xc
c001ae33:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001ae38:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001ae3c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ae40:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ae44:	83 fe 07             	cmp    esi,0x7
c001ae47:	76 10                	jbe    c001ae59 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001ae49:	83 ec 0c             	sub    esp,0xc
c001ae4c:	68 cb 2b 02 c0       	push   0xc0022bcb
c001ae51:	e8 ef 64 ff ff       	call   c0011345 <KePanic(char const*)>
c001ae56:	83 c4 10             	add    esp,0x10
c001ae59:	0f b6 db             	movzx  ebx,bl
c001ae5c:	83 fb 0f             	cmp    ebx,0xf
c001ae5f:	76 10                	jbe    c001ae71 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001ae61:	83 ec 0c             	sub    esp,0xc
c001ae64:	68 fb 2b 02 c0       	push   0xc0022bfb
c001ae69:	e8 d7 64 ff ff       	call   c0011345 <KePanic(char const*)>
c001ae6e:	83 c4 10             	add    esp,0x10
c001ae71:	8d 04 36             	lea    eax,[esi+esi*1]
c001ae74:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ae79:	83 c8 f0             	or     eax,0xfffffff0
c001ae7c:	ee                   	out    dx,al
c001ae7d:	ba fa 0c 00 00       	mov    edx,0xcfa
c001ae82:	89 e8                	mov    eax,ebp
c001ae84:	ee                   	out    dx,al
c001ae85:	83 c4 0c             	add    esp,0xc
c001ae88:	89 d8                	mov    eax,ebx
c001ae8a:	89 f9                	mov    ecx,edi
c001ae8c:	c1 e0 08             	shl    eax,0x8
c001ae8f:	0f b6 d9             	movzx  ebx,cl
c001ae92:	83 e3 fc             	and    ebx,0xfffffffc
c001ae95:	09 d8                	or     eax,ebx
c001ae97:	5b                   	pop    ebx
c001ae98:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001ae9d:	5e                   	pop    esi
c001ae9e:	5f                   	pop    edi
c001ae9f:	5d                   	pop    ebp
c001aea0:	c3                   	ret    
c001aea1:	90                   	nop

c001aea2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001aea2:	57                   	push   edi
c001aea3:	56                   	push   esi
c001aea4:	53                   	push   ebx
c001aea5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aea9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aead:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001aeb3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aeb7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aebb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aebf:	83 ff 01             	cmp    edi,0x1
c001aec2:	75 3f                	jne    c001af03 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001aec4:	89 de                	mov    esi,ebx
c001aec6:	0f b6 c0             	movzx  eax,al
c001aec9:	81 e6 fc 00 00 00    	and    esi,0xfc
c001aecf:	c1 e0 10             	shl    eax,0x10
c001aed2:	0f b6 c9             	movzx  ecx,cl
c001aed5:	09 f0                	or     eax,esi
c001aed7:	c1 e1 08             	shl    ecx,0x8
c001aeda:	0f b6 d2             	movzx  edx,dl
c001aedd:	09 c8                	or     eax,ecx
c001aedf:	c1 e2 0b             	shl    edx,0xb
c001aee2:	09 d0                	or     eax,edx
c001aee4:	ba f8 0c 00 00       	mov    edx,0xcf8
c001aee9:	0d 00 00 00 80       	or     eax,0x80000000
c001aeee:	ef                   	out    dx,eax
c001aeef:	ba fc 0c 00 00       	mov    edx,0xcfc
c001aef4:	ed                   	in     eax,dx
c001aef5:	83 e3 02             	and    ebx,0x2
c001aef8:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001aeff:	d3 e8                	shr    eax,cl
c001af01:	eb 44                	jmp    c001af47 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001af03:	83 ff 02             	cmp    edi,0x2
c001af06:	75 2d                	jne    c001af35 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001af08:	83 ec 0c             	sub    esp,0xc
c001af0b:	0f b6 c9             	movzx  ecx,cl
c001af0e:	0f b6 d2             	movzx  edx,dl
c001af11:	0f b6 fb             	movzx  edi,bl
c001af14:	0f b6 c0             	movzx  eax,al
c001af17:	57                   	push   edi
c001af18:	51                   	push   ecx
c001af19:	52                   	push   edx
c001af1a:	50                   	push   eax
c001af1b:	56                   	push   esi
c001af1c:	e8 0b ff ff ff       	call   c001ae2c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af21:	89 c2                	mov    edx,eax
c001af23:	ed                   	in     eax,dx
c001af24:	83 e3 02             	and    ebx,0x2
c001af27:	83 c4 20             	add    esp,0x20
c001af2a:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001af31:	d3 e8                	shr    eax,cl
c001af33:	eb 12                	jmp    c001af47 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001af35:	83 ec 0c             	sub    esp,0xc
c001af38:	68 2b 2c 02 c0       	push   0xc0022c2b
c001af3d:	e8 03 64 ff ff       	call   c0011345 <KePanic(char const*)>
c001af42:	83 c4 10             	add    esp,0x10
c001af45:	31 c0                	xor    eax,eax
c001af47:	5b                   	pop    ebx
c001af48:	5e                   	pop    esi
c001af49:	5f                   	pop    edi
c001af4a:	c3                   	ret    
c001af4b:	90                   	nop

c001af4c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001af4c:	83 ec 18             	sub    esp,0x18
c001af4f:	6a 00                	push   0x0
c001af51:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af56:	50                   	push   eax
c001af57:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af5c:	50                   	push   eax
c001af5d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af62:	50                   	push   eax
c001af63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af67:	e8 36 ff ff ff       	call   c001aea2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af6c:	83 c4 2c             	add    esp,0x2c
c001af6f:	c3                   	ret    

c001af70 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001af70:	83 ec 18             	sub    esp,0x18
c001af73:	6a 0e                	push   0xe
c001af75:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af7a:	50                   	push   eax
c001af7b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af80:	50                   	push   eax
c001af81:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af86:	50                   	push   eax
c001af87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af8b:	e8 12 ff ff ff       	call   c001aea2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af90:	83 c4 2c             	add    esp,0x2c
c001af93:	0f b6 c0             	movzx  eax,al
c001af96:	c3                   	ret    
c001af97:	90                   	nop

c001af98 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001af98:	55                   	push   ebp
c001af99:	57                   	push   edi
c001af9a:	56                   	push   esi
c001af9b:	53                   	push   ebx
c001af9c:	83 ec 18             	sub    esp,0x18
c001af9f:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001afa4:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001afa9:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001afae:	6a 0a                	push   0xa
c001afb0:	56                   	push   esi
c001afb1:	55                   	push   ebp
c001afb2:	57                   	push   edi
c001afb3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001afb7:	e8 e6 fe ff ff       	call   c001aea2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afbc:	83 c4 14             	add    esp,0x14
c001afbf:	89 c3                	mov    ebx,eax
c001afc1:	6a 0a                	push   0xa
c001afc3:	0f b6 db             	movzx  ebx,bl
c001afc6:	56                   	push   esi
c001afc7:	55                   	push   ebp
c001afc8:	57                   	push   edi
c001afc9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001afcd:	e8 d0 fe ff ff       	call   c001aea2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afd2:	83 c4 2c             	add    esp,0x2c
c001afd5:	25 00 ff 00 00       	and    eax,0xff00
c001afda:	09 d8                	or     eax,ebx
c001afdc:	5b                   	pop    ebx
c001afdd:	5e                   	pop    esi
c001afde:	5f                   	pop    edi
c001afdf:	5d                   	pop    ebp
c001afe0:	c3                   	ret    
c001afe1:	90                   	nop

c001afe2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001afe2:	83 ec 18             	sub    esp,0x18
c001afe5:	6a 08                	push   0x8
c001afe7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afec:	50                   	push   eax
c001afed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aff2:	50                   	push   eax
c001aff3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aff8:	50                   	push   eax
c001aff9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001affd:	e8 a0 fe ff ff       	call   c001aea2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b002:	83 c4 2c             	add    esp,0x2c
c001b005:	0f b6 c4             	movzx  eax,ah
c001b008:	c3                   	ret    
c001b009:	90                   	nop

c001b00a <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b00a:	83 ec 18             	sub    esp,0x18
c001b00d:	6a 08                	push   0x8
c001b00f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b014:	50                   	push   eax
c001b015:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b01a:	50                   	push   eax
c001b01b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b020:	50                   	push   eax
c001b021:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b025:	e8 78 fe ff ff       	call   c001aea2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b02a:	83 c4 2c             	add    esp,0x2c
c001b02d:	c3                   	ret    

c001b02e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b02e:	83 ec 18             	sub    esp,0x18
c001b031:	6a 3c                	push   0x3c
c001b033:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b038:	50                   	push   eax
c001b039:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b03e:	50                   	push   eax
c001b03f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b044:	50                   	push   eax
c001b045:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b049:	e8 54 fe ff ff       	call   c001aea2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b04e:	83 c4 2c             	add    esp,0x2c
c001b051:	c3                   	ret    

c001b052 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b052:	83 ec 18             	sub    esp,0x18
c001b055:	6a 18                	push   0x18
c001b057:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b05c:	50                   	push   eax
c001b05d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b062:	50                   	push   eax
c001b063:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b068:	50                   	push   eax
c001b069:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b06d:	e8 30 fe ff ff       	call   c001aea2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b072:	83 c4 2c             	add    esp,0x2c
c001b075:	0f b6 c4             	movzx  eax,ah
c001b078:	c3                   	ret    
c001b079:	90                   	nop

c001b07a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b07a:	55                   	push   ebp
c001b07b:	57                   	push   edi
c001b07c:	56                   	push   esi
c001b07d:	53                   	push   ebx
c001b07e:	83 ec 28             	sub    esp,0x28
c001b081:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b085:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b08a:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b08f:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b094:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b09b:	8d 43 12             	lea    eax,[ebx+0x12]
c001b09e:	83 c3 10             	add    ebx,0x10
c001b0a1:	0f b6 c0             	movzx  eax,al
c001b0a4:	0f b6 db             	movzx  ebx,bl
c001b0a7:	50                   	push   eax
c001b0a8:	51                   	push   ecx
c001b0a9:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b0ad:	57                   	push   edi
c001b0ae:	55                   	push   ebp
c001b0af:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b0b3:	e8 ea fd ff ff       	call   c001aea2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0b8:	83 c4 14             	add    esp,0x14
c001b0bb:	89 c6                	mov    esi,eax
c001b0bd:	53                   	push   ebx
c001b0be:	c1 e6 10             	shl    esi,0x10
c001b0c1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b0c5:	51                   	push   ecx
c001b0c6:	57                   	push   edi
c001b0c7:	55                   	push   ebp
c001b0c8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b0cc:	e8 d1 fd ff ff       	call   c001aea2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0d1:	83 c4 3c             	add    esp,0x3c
c001b0d4:	0f b7 c0             	movzx  eax,ax
c001b0d7:	5b                   	pop    ebx
c001b0d8:	09 f0                	or     eax,esi
c001b0da:	5e                   	pop    esi
c001b0db:	5f                   	pop    edi
c001b0dc:	5d                   	pop    ebp
c001b0dd:	c3                   	ret    

c001b0de <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b0de:	55                   	push   ebp
c001b0df:	57                   	push   edi
c001b0e0:	56                   	push   esi
c001b0e1:	53                   	push   ebx
c001b0e2:	83 ec 0c             	sub    esp,0xc
c001b0e5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b0e9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b0ed:	89 f5                	mov    ebp,esi
c001b0ef:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001b0f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b0f9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b0fd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b101:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b105:	83 f9 01             	cmp    ecx,0x1
c001b108:	75 5d                	jne    c001b167 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001b10a:	0f b6 c8             	movzx  ecx,al
c001b10d:	0f b6 d2             	movzx  edx,dl
c001b110:	c1 e1 10             	shl    ecx,0x10
c001b113:	c1 e2 0b             	shl    edx,0xb
c001b116:	89 f0                	mov    eax,esi
c001b118:	25 fc 00 00 00       	and    eax,0xfc
c001b11d:	09 c1                	or     ecx,eax
c001b11f:	89 e8                	mov    eax,ebp
c001b121:	0f b6 c0             	movzx  eax,al
c001b124:	c1 e0 08             	shl    eax,0x8
c001b127:	09 c1                	or     ecx,eax
c001b129:	09 d1                	or     ecx,edx
c001b12b:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b130:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b136:	89 c8                	mov    eax,ecx
c001b138:	ef                   	out    dx,eax
c001b139:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b13e:	ed                   	in     eax,dx
c001b13f:	0f b7 db             	movzx  ebx,bx
c001b142:	83 e6 02             	and    esi,0x2
c001b145:	74 0a                	je     c001b151 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001b147:	0f b7 d0             	movzx  edx,ax
c001b14a:	c1 e3 10             	shl    ebx,0x10
c001b14d:	09 d3                	or     ebx,edx
c001b14f:	eb 05                	jmp    c001b156 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001b151:	66 31 c0             	xor    ax,ax
c001b154:	09 c3                	or     ebx,eax
c001b156:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b15b:	89 c8                	mov    eax,ecx
c001b15d:	ef                   	out    dx,eax
c001b15e:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b163:	89 d8                	mov    eax,ebx
c001b165:	eb 41                	jmp    c001b1a8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b167:	83 f9 02             	cmp    ecx,0x2
c001b16a:	75 45                	jne    c001b1b1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001b16c:	83 ec 0c             	sub    esp,0xc
c001b16f:	0f b6 d2             	movzx  edx,dl
c001b172:	89 f1                	mov    ecx,esi
c001b174:	0f b6 c0             	movzx  eax,al
c001b177:	0f b6 f1             	movzx  esi,cl
c001b17a:	89 e9                	mov    ecx,ebp
c001b17c:	56                   	push   esi
c001b17d:	0f b6 c9             	movzx  ecx,cl
c001b180:	51                   	push   ecx
c001b181:	52                   	push   edx
c001b182:	50                   	push   eax
c001b183:	57                   	push   edi
c001b184:	e8 a3 fc ff ff       	call   c001ae2c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b189:	89 c2                	mov    edx,eax
c001b18b:	ed                   	in     eax,dx
c001b18c:	83 c4 20             	add    esp,0x20
c001b18f:	0f b7 db             	movzx  ebx,bx
c001b192:	f6 c2 02             	test   dl,0x2
c001b195:	74 0c                	je     c001b1a3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001b197:	0f b7 c8             	movzx  ecx,ax
c001b19a:	89 d8                	mov    eax,ebx
c001b19c:	c1 e0 10             	shl    eax,0x10
c001b19f:	09 c8                	or     eax,ecx
c001b1a1:	eb 05                	jmp    c001b1a8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b1a3:	66 31 c0             	xor    ax,ax
c001b1a6:	09 d8                	or     eax,ebx
c001b1a8:	ef                   	out    dx,eax
c001b1a9:	83 c4 0c             	add    esp,0xc
c001b1ac:	5b                   	pop    ebx
c001b1ad:	5e                   	pop    esi
c001b1ae:	5f                   	pop    edi
c001b1af:	5d                   	pop    ebp
c001b1b0:	c3                   	ret    
c001b1b1:	c7 44 24 20 2b 2c 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022c2b
c001b1b9:	83 c4 0c             	add    esp,0xc
c001b1bc:	5b                   	pop    ebx
c001b1bd:	5e                   	pop    esi
c001b1be:	5f                   	pop    edi
c001b1bf:	5d                   	pop    ebp
c001b1c0:	e9 80 61 ff ff       	jmp    c0011345 <KePanic(char const*)>
c001b1c5:	90                   	nop

c001b1c6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b1c6:	55                   	push   ebp
c001b1c7:	57                   	push   edi
c001b1c8:	56                   	push   esi
c001b1c9:	53                   	push   ebx
c001b1ca:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b1d0:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001b1d7:	80 3d ac a0 02 c0 00 	cmp    BYTE PTR ds:0xc002a0ac,0x0
c001b1de:	0f 85 bd 00 00 00    	jne    c001b2a1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b1e4:	83 ec 0c             	sub    esp,0xc
c001b1e7:	68 14 01 00 00       	push   0x114
c001b1ec:	e8 c5 c8 fe ff       	call   c0007ab6 <malloc>
c001b1f1:	83 c4 0c             	add    esp,0xc
c001b1f4:	89 c3                	mov    ebx,eax
c001b1f6:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001b1fc:	68 31 2c 02 c0       	push   0xc0022c31
c001b201:	50                   	push   eax
c001b202:	e8 ed 05 ff ff       	call   c000b7f4 <File::File(char const*, Process*)>
c001b207:	83 c4 10             	add    esp,0x10
c001b20a:	85 db                	test   ebx,ebx
c001b20c:	0f 84 67 02 00 00    	je     c001b479 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b212:	56                   	push   esi
c001b213:	56                   	push   esi
c001b214:	6a 01                	push   0x1
c001b216:	53                   	push   ebx
c001b217:	e8 a0 06 ff ff       	call   c000b8bc <File::open(FileOpenMode)>
c001b21c:	83 c4 10             	add    esp,0x10
c001b21f:	85 c0                	test   eax,eax
c001b221:	0f 85 52 02 00 00    	jne    c001b479 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b227:	52                   	push   edx
c001b228:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b22c:	50                   	push   eax
c001b22d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b231:	50                   	push   eax
c001b232:	53                   	push   ebx
c001b233:	e8 86 09 ff ff       	call   c000bbbe <File::stat(unsigned long long*, bool*)>
c001b238:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b23c:	40                   	inc    eax
c001b23d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b240:	e8 71 c8 fe ff       	call   c0007ab6 <malloc>
c001b245:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b249:	a3 a8 a0 02 c0       	mov    ds:0xc002a0a8,eax
c001b24e:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b252:	59                   	pop    ecx
c001b253:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b255:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b259:	51                   	push   ecx
c001b25a:	50                   	push   eax
c001b25b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b25f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b263:	53                   	push   ebx
c001b264:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b267:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b26b:	83 c4 20             	add    esp,0x20
c001b26e:	89 c8                	mov    eax,ecx
c001b270:	99                   	cdq    
c001b271:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b275:	0f 85 fe 01 00 00    	jne    c001b479 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b27b:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b27f:	0f 85 f4 01 00 00    	jne    c001b479 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b285:	83 ec 0c             	sub    esp,0xc
c001b288:	53                   	push   ebx
c001b289:	e8 8c 06 ff ff       	call   c000b91a <File::close()>
c001b28e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b292:	c6 05 ac a0 02 c0 01 	mov    BYTE PTR ds:0xc002a0ac,0x1
c001b299:	a3 a4 a0 02 c0       	mov    ds:0xc002a0a4,eax
c001b29e:	83 c4 10             	add    esp,0x10
c001b2a1:	a1 a4 a0 02 c0       	mov    eax,ds:0xc002a0a4
c001b2a6:	8b 1d a8 a0 02 c0    	mov    ebx,DWORD PTR ds:0xc002a0a8
c001b2ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b2b0:	31 f6                	xor    esi,esi
c001b2b2:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b2ba:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b2c1:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b2c6:	31 c9                	xor    ecx,ecx
c001b2c8:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b2d0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b2d5:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b2dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b2e1:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b2e9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b2ed:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b2f1:	0f 8e 82 01 00 00    	jle    c001b479 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b2f7:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001b2fa:	d4 40                	aam    0x40
c001b2fc:	d5 39                	aad    0x39
c001b2fe:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b302:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001b306:	d4 40                	aam    0x40
c001b308:	d5 39                	aad    0x39
c001b30a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b30e:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001b312:	d4 40                	aam    0x40
c001b314:	d5 39                	aad    0x39
c001b316:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b31a:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001b31e:	d4 40                	aam    0x40
c001b320:	d5 39                	aad    0x39
c001b322:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b326:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001b32a:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b32e:	3c 56                	cmp    al,0x56
c001b330:	74 43                	je     c001b375 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001b332:	d4 40                	aam    0x40
c001b334:	d5 39                	aad    0x39
c001b336:	8d 48 d0             	lea    ecx,[eax-0x30]
c001b339:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001b33d:	0f b6 c9             	movzx  ecx,cl
c001b340:	c1 e1 04             	shl    ecx,0x4
c001b343:	d4 40                	aam    0x40
c001b345:	d5 39                	aad    0x39
c001b347:	83 e8 30             	sub    eax,0x30
c001b34a:	0f b6 c0             	movzx  eax,al
c001b34d:	09 c1                	or     ecx,eax
c001b34f:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001b353:	c1 e1 04             	shl    ecx,0x4
c001b356:	d4 40                	aam    0x40
c001b358:	d5 39                	aad    0x39
c001b35a:	83 e8 30             	sub    eax,0x30
c001b35d:	0f b6 c0             	movzx  eax,al
c001b360:	09 c1                	or     ecx,eax
c001b362:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001b366:	c1 e1 04             	shl    ecx,0x4
c001b369:	d4 40                	aam    0x40
c001b36b:	d5 39                	aad    0x39
c001b36d:	83 e8 30             	sub    eax,0x30
c001b370:	0f b6 c0             	movzx  eax,al
c001b373:	09 c1                	or     ecx,eax
c001b375:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001b379:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b37d:	3c 58                	cmp    al,0x58
c001b37f:	74 47                	je     c001b3c8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001b381:	d4 40                	aam    0x40
c001b383:	d5 39                	aad    0x39
c001b385:	8d 50 d0             	lea    edx,[eax-0x30]
c001b388:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001b38c:	0f b6 d2             	movzx  edx,dl
c001b38f:	c1 e2 04             	shl    edx,0x4
c001b392:	d4 40                	aam    0x40
c001b394:	d5 39                	aad    0x39
c001b396:	83 e8 30             	sub    eax,0x30
c001b399:	0f b6 c0             	movzx  eax,al
c001b39c:	09 c2                	or     edx,eax
c001b39e:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001b3a2:	c1 e2 04             	shl    edx,0x4
c001b3a5:	d4 40                	aam    0x40
c001b3a7:	d5 39                	aad    0x39
c001b3a9:	83 e8 30             	sub    eax,0x30
c001b3ac:	0f b6 c0             	movzx  eax,al
c001b3af:	09 c2                	or     edx,eax
c001b3b1:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001b3b5:	c1 e2 04             	shl    edx,0x4
c001b3b8:	d4 40                	aam    0x40
c001b3ba:	d5 39                	aad    0x39
c001b3bc:	83 e8 30             	sub    eax,0x30
c001b3bf:	0f b6 c0             	movzx  eax,al
c001b3c2:	09 c2                	or     edx,eax
c001b3c4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b3c8:	83 c6 10             	add    esi,0x10
c001b3cb:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b3cf:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001b3d3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b3d7:	83 fa 0a             	cmp    edx,0xa
c001b3da:	74 0b                	je     c001b3e7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001b3dc:	47                   	inc    edi
c001b3dd:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b3e1:	75 19                	jne    c001b3fc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001b3e3:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001b3e7:	31 c0                	xor    eax,eax
c001b3e9:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001b3ee:	0f 94 c0             	sete   al
c001b3f1:	01 c6                	add    esi,eax
c001b3f3:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b3f8:	75 0b                	jne    c001b405 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001b3fa:	eb 14                	jmp    c001b410 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001b3fc:	46                   	inc    esi
c001b3fd:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001b400:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b403:	eb ca                	jmp    c001b3cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001b405:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001b40a:	0f 85 dd fe ff ff    	jne    c001b2ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b410:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001b415:	74 10                	je     c001b427 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001b417:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b41c:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b421:	0f 85 c6 fe ff ff    	jne    c001b2ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b427:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b42b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b42f:	83 e8 30             	sub    eax,0x30
c001b432:	83 ef 30             	sub    edi,0x30
c001b435:	c1 e0 04             	shl    eax,0x4
c001b438:	09 f8                	or     eax,edi
c001b43a:	0f b6 c0             	movzx  eax,al
c001b43d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b441:	0f 85 a6 fe ff ff    	jne    c001b2ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b447:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b44b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b44f:	83 e8 30             	sub    eax,0x30
c001b452:	83 ef 30             	sub    edi,0x30
c001b455:	c1 e0 04             	shl    eax,0x4
c001b458:	09 f8                	or     eax,edi
c001b45a:	0f b6 c0             	movzx  eax,al
c001b45d:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b461:	0f 85 86 fe ff ff    	jne    c001b2ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b467:	50                   	push   eax
c001b468:	50                   	push   eax
c001b469:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b46d:	50                   	push   eax
c001b46e:	55                   	push   ebp
c001b46f:	e8 cc 51 fe ff       	call   c0000640 <strcpy>
c001b474:	83 c4 10             	add    esp,0x10
c001b477:	eb 06                	jmp    c001b47f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001b479:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001b47d:	31 ed                	xor    ebp,ebp
c001b47f:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b485:	89 e8                	mov    eax,ebp
c001b487:	5b                   	pop    ebx
c001b488:	5e                   	pop    esi
c001b489:	5f                   	pop    edi
c001b48a:	5d                   	pop    ebp
c001b48b:	c3                   	ret    

c001b48c <PCI::checkBus(unsigned char)>:
c001b48c:	56                   	push   esi
c001b48d:	53                   	push   ebx
c001b48e:	31 db                	xor    ebx,ebx
c001b490:	51                   	push   ecx
c001b491:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b496:	52                   	push   edx
c001b497:	53                   	push   ebx
c001b498:	43                   	inc    ebx
c001b499:	56                   	push   esi
c001b49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b49e:	e8 03 03 00 00       	call   c001b7a6 <PCI::checkDevice(unsigned char, unsigned char)>
c001b4a3:	83 c4 10             	add    esp,0x10
c001b4a6:	83 fb 20             	cmp    ebx,0x20
c001b4a9:	75 eb                	jne    c001b496 <PCI::checkBus(unsigned char)+0xa>
c001b4ab:	58                   	pop    eax
c001b4ac:	5b                   	pop    ebx
c001b4ad:	5e                   	pop    esi
c001b4ae:	c3                   	ret    
c001b4af:	90                   	nop

c001b4b0 <PCI::foundDevice(PCIDeviceInfo)>:
c001b4b0:	55                   	push   ebp
c001b4b1:	57                   	push   edi
c001b4b2:	56                   	push   esi
c001b4b3:	53                   	push   ebx
c001b4b4:	83 ec 1c             	sub    esp,0x1c
c001b4b7:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b4bc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b4c0:	3d ff ff 00 00       	cmp    eax,0xffff
c001b4c5:	0f 84 57 01 00 00    	je     c001b622 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b4cb:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b4d0:	66 3d 06 04          	cmp    ax,0x406
c001b4d4:	75 2c                	jne    c001b502 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b4d6:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b4db:	50                   	push   eax
c001b4dc:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b4e1:	50                   	push   eax
c001b4e2:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b4e7:	50                   	push   eax
c001b4e8:	53                   	push   ebx
c001b4e9:	e8 64 fb ff ff       	call   c001b052 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b4ee:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b4f2:	0f b6 c0             	movzx  eax,al
c001b4f5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b4f9:	83 c4 2c             	add    esp,0x2c
c001b4fc:	5b                   	pop    ebx
c001b4fd:	5e                   	pop    esi
c001b4fe:	5f                   	pop    edi
c001b4ff:	5d                   	pop    ebp
c001b500:	eb 8a                	jmp    c001b48c <PCI::checkBus(unsigned char)>
c001b502:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b506:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b50c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b510:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b514:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001b519:	85 d2                	test   edx,edx
c001b51b:	74 36                	je     c001b553 <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001b51d:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b520:	85 c9                	test   ecx,ecx
c001b522:	74 2b                	je     c001b54f <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b524:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001b52a:	31 ee                	xor    esi,ebp
c001b52c:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001b532:	75 1b                	jne    c001b54f <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b534:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001b538:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001b53e:	75 0f                	jne    c001b54f <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b540:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b547:	39 f9                	cmp    ecx,edi
c001b549:	0f 84 d3 00 00 00    	je     c001b622 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b54f:	8b 12                	mov    edx,DWORD PTR [edx]
c001b551:	eb c6                	jmp    c001b519 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b553:	3d 01 06 00 00       	cmp    eax,0x601
c001b558:	75 19                	jne    c001b573 <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001b55a:	83 ec 0c             	sub    esp,0xc
c001b55d:	68 64 01 00 00       	push   0x164
c001b562:	e8 4f c5 fe ff       	call   c0007ab6 <malloc>
c001b567:	89 c5                	mov    ebp,eax
c001b569:	89 04 24             	mov    DWORD PTR [esp],eax
c001b56c:	e8 a1 0e 00 00       	call   c001c412 <SATABus::SATABus()>
c001b571:	eb 1e                	jmp    c001b591 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001b573:	3d 01 01 00 00       	cmp    eax,0x101
c001b578:	75 62                	jne    c001b5dc <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001b57a:	83 ec 0c             	sub    esp,0xc
c001b57d:	68 70 02 00 00       	push   0x270
c001b582:	e8 2f c5 fe ff       	call   c0007ab6 <malloc>
c001b587:	89 c5                	mov    ebp,eax
c001b589:	89 04 24             	mov    DWORD PTR [esp],eax
c001b58c:	e8 e5 02 00 00       	call   c001b876 <IDE::IDE()>
c001b591:	5f                   	pop    edi
c001b592:	58                   	pop    eax
c001b593:	55                   	push   ebp
c001b594:	53                   	push   ebx
c001b595:	e8 7c 11 ff ff       	call   c000c716 <Device::addChild(Device*)>
c001b59a:	83 ec 1c             	sub    esp,0x1c
c001b59d:	b9 09 00 00 00       	mov    ecx,0x9
c001b5a2:	fc                   	cld    
c001b5a3:	89 e7                	mov    edi,esp
c001b5a5:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b5a9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b5ab:	55                   	push   ebp
c001b5ac:	e8 ab 10 ff ff       	call   c000c65c <Device::preOpenPCI(PCIDeviceInfo)>
c001b5b1:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b5b4:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b5b8:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b5c0:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b5c8:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b5d0:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b5d3:	83 c4 4c             	add    esp,0x4c
c001b5d6:	5b                   	pop    ebx
c001b5d7:	5e                   	pop    esi
c001b5d8:	5f                   	pop    edi
c001b5d9:	5d                   	pop    ebp
c001b5da:	ff e0                	jmp    eax
c001b5dc:	83 ec 0c             	sub    esp,0xc
c001b5df:	68 58 01 00 00       	push   0x158
c001b5e4:	e8 cd c4 fe ff       	call   c0007ab6 <malloc>
c001b5e9:	89 c5                	mov    ebp,eax
c001b5eb:	58                   	pop    eax
c001b5ec:	5a                   	pop    edx
c001b5ed:	68 4a 2c 02 c0       	push   0xc0022c4a
c001b5f2:	55                   	push   ebp
c001b5f3:	e8 bc 13 ff ff       	call   c000c9b4 <DriverlessDevice::DriverlessDevice(char const*)>
c001b5f8:	59                   	pop    ecx
c001b5f9:	5e                   	pop    esi
c001b5fa:	55                   	push   ebp
c001b5fb:	53                   	push   ebx
c001b5fc:	e8 15 11 ff ff       	call   c000c716 <Device::addChild(Device*)>
c001b601:	83 c4 10             	add    esp,0x10
c001b604:	b9 09 00 00 00       	mov    ecx,0x9
c001b609:	fc                   	cld    
c001b60a:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001b60e:	89 fe                	mov    esi,edi
c001b610:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b612:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001b616:	83 c4 1c             	add    esp,0x1c
c001b619:	5b                   	pop    ebx
c001b61a:	5e                   	pop    esi
c001b61b:	5f                   	pop    edi
c001b61c:	5d                   	pop    ebp
c001b61d:	e9 3a 10 ff ff       	jmp    c000c65c <Device::preOpenPCI(PCIDeviceInfo)>
c001b622:	83 c4 1c             	add    esp,0x1c
c001b625:	5b                   	pop    ebx
c001b626:	5e                   	pop    esi
c001b627:	5f                   	pop    edi
c001b628:	5d                   	pop    ebp
c001b629:	c3                   	ret    

c001b62a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b62a:	55                   	push   ebp
c001b62b:	57                   	push   edi
c001b62c:	56                   	push   esi
c001b62d:	53                   	push   ebx
c001b62e:	83 ec 68             	sub    esp,0x68
c001b631:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001b635:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b63c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b640:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b647:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b64c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b650:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b657:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001b65c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b660:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001b665:	6a 0c                	push   0xc
c001b667:	57                   	push   edi
c001b668:	53                   	push   ebx
c001b669:	56                   	push   esi
c001b66a:	55                   	push   ebp
c001b66b:	e8 32 f8 ff ff       	call   c001aea2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b670:	83 c4 20             	add    esp,0x20
c001b673:	57                   	push   edi
c001b674:	53                   	push   ebx
c001b675:	56                   	push   esi
c001b676:	55                   	push   ebp
c001b677:	e8 1c f9 ff ff       	call   c001af98 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b67c:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001b681:	57                   	push   edi
c001b682:	53                   	push   ebx
c001b683:	56                   	push   esi
c001b684:	55                   	push   ebp
c001b685:	e8 a4 f9 ff ff       	call   c001b02e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b68a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b68e:	83 c4 14             	add    esp,0x14
c001b691:	6a 3c                	push   0x3c
c001b693:	57                   	push   edi
c001b694:	53                   	push   ebx
c001b695:	56                   	push   esi
c001b696:	55                   	push   ebp
c001b697:	e8 06 f8 ff ff       	call   c001aea2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b69c:	0f b6 c4             	movzx  eax,ah
c001b69f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b6a3:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001b6a7:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001b6ab:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001b6b0:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001b6b6:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001b6bc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b6c0:	83 c4 20             	add    esp,0x20
c001b6c3:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001b6c8:	74 30                	je     c001b6fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b6ca:	31 c0                	xor    eax,eax
c001b6cc:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001b6d0:	7e 28                	jle    c001b6fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b6d2:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001b6da:	39 cb                	cmp    ebx,ecx
c001b6dc:	75 19                	jne    c001b6f7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b6de:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001b6e6:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b6ea:	75 0b                	jne    c001b6f7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b6ec:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001b6f3:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b6f7:	40                   	inc    eax
c001b6f8:	eb d2                	jmp    c001b6cc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001b6fa:	31 d2                	xor    edx,edx
c001b6fc:	83 ec 0c             	sub    esp,0xc
c001b6ff:	57                   	push   edi
c001b700:	53                   	push   ebx
c001b701:	56                   	push   esi
c001b702:	52                   	push   edx
c001b703:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b707:	55                   	push   ebp
c001b708:	e8 6d f9 ff ff       	call   c001b07a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b70d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b711:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b715:	42                   	inc    edx
c001b716:	83 c4 20             	add    esp,0x20
c001b719:	83 fa 06             	cmp    edx,0x6
c001b71c:	75 de                	jne    c001b6fc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001b71e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b722:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b726:	c1 e2 08             	shl    edx,0x8
c001b729:	83 ec 0c             	sub    esp,0xc
c001b72c:	0f b6 c4             	movzx  eax,ah
c001b72f:	09 d0                	or     eax,edx
c001b731:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001b736:	6a 02                	push   0x2
c001b738:	57                   	push   edi
c001b739:	53                   	push   ebx
c001b73a:	56                   	push   esi
c001b73b:	55                   	push   ebp
c001b73c:	e8 61 f7 ff ff       	call   c001aea2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b741:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001b746:	83 c4 20             	add    esp,0x20
c001b749:	57                   	push   edi
c001b74a:	53                   	push   ebx
c001b74b:	56                   	push   esi
c001b74c:	55                   	push   ebp
c001b74d:	e8 90 f8 ff ff       	call   c001afe2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b752:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b756:	57                   	push   edi
c001b757:	53                   	push   ebx
c001b758:	56                   	push   esi
c001b759:	55                   	push   ebp
c001b75a:	e8 ed f7 ff ff       	call   c001af4c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b75f:	b9 09 00 00 00       	mov    ecx,0x9
c001b764:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001b769:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b76d:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001b771:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001b775:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001b779:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001b77d:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001b781:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001b785:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001b789:	83 ec 0c             	sub    esp,0xc
c001b78c:	fc                   	cld    
c001b78d:	89 e7                	mov    edi,esp
c001b78f:	8d 74 24 58          	lea    esi,[esp+0x58]
c001b793:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b795:	55                   	push   ebp
c001b796:	e8 15 fd ff ff       	call   c001b4b0 <PCI::foundDevice(PCIDeviceInfo)>
c001b79b:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b7a1:	5b                   	pop    ebx
c001b7a2:	5e                   	pop    esi
c001b7a3:	5f                   	pop    edi
c001b7a4:	5d                   	pop    ebp
c001b7a5:	c3                   	ret    

c001b7a6 <PCI::checkDevice(unsigned char, unsigned char)>:
c001b7a6:	55                   	push   ebp
c001b7a7:	57                   	push   edi
c001b7a8:	56                   	push   esi
c001b7a9:	53                   	push   ebx
c001b7aa:	83 ec 0c             	sub    esp,0xc
c001b7ad:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b7b1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b7b6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b7bb:	6a 00                	push   0x0
c001b7bd:	56                   	push   esi
c001b7be:	57                   	push   edi
c001b7bf:	55                   	push   ebp
c001b7c0:	e8 87 f7 ff ff       	call   c001af4c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b7c5:	6a 00                	push   0x0
c001b7c7:	56                   	push   esi
c001b7c8:	57                   	push   edi
c001b7c9:	55                   	push   ebp
c001b7ca:	e8 5b fe ff ff       	call   c001b62a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b7cf:	83 c4 20             	add    esp,0x20
c001b7d2:	6a 00                	push   0x0
c001b7d4:	56                   	push   esi
c001b7d5:	57                   	push   edi
c001b7d6:	55                   	push   ebp
c001b7d7:	e8 94 f7 ff ff       	call   c001af70 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b7dc:	83 c4 10             	add    esp,0x10
c001b7df:	a8 80                	test   al,0x80
c001b7e1:	74 2d                	je     c001b810 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001b7e3:	bb 01 00 00 00       	mov    ebx,0x1
c001b7e8:	53                   	push   ebx
c001b7e9:	56                   	push   esi
c001b7ea:	57                   	push   edi
c001b7eb:	55                   	push   ebp
c001b7ec:	e8 5b f7 ff ff       	call   c001af4c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b7f1:	83 c4 10             	add    esp,0x10
c001b7f4:	0f b7 c0             	movzx  eax,ax
c001b7f7:	3d ff ff 00 00       	cmp    eax,0xffff
c001b7fc:	74 0c                	je     c001b80a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b7fe:	53                   	push   ebx
c001b7ff:	56                   	push   esi
c001b800:	57                   	push   edi
c001b801:	55                   	push   ebp
c001b802:	e8 23 fe ff ff       	call   c001b62a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b807:	83 c4 10             	add    esp,0x10
c001b80a:	43                   	inc    ebx
c001b80b:	83 fb 08             	cmp    ebx,0x8
c001b80e:	75 d8                	jne    c001b7e8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b810:	83 c4 0c             	add    esp,0xc
c001b813:	5b                   	pop    ebx
c001b814:	5e                   	pop    esi
c001b815:	5f                   	pop    edi
c001b816:	5d                   	pop    ebp
c001b817:	c3                   	ret    

c001b818 <PCI::detect()>:
c001b818:	56                   	push   esi
c001b819:	53                   	push   ebx
c001b81a:	53                   	push   ebx
c001b81b:	31 db                	xor    ebx,ebx
c001b81d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b821:	6a 00                	push   0x0
c001b823:	6a 00                	push   0x0
c001b825:	6a 00                	push   0x0
c001b827:	56                   	push   esi
c001b828:	e8 43 f7 ff ff       	call   c001af70 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b82d:	83 c4 10             	add    esp,0x10
c001b830:	a8 80                	test   al,0x80
c001b832:	75 21                	jne    c001b855 <PCI::detect()+0x3d>
c001b834:	51                   	push   ecx
c001b835:	51                   	push   ecx
c001b836:	6a 00                	push   0x0
c001b838:	56                   	push   esi
c001b839:	e8 4e fc ff ff       	call   c001b48c <PCI::checkBus(unsigned char)>
c001b83e:	83 c4 10             	add    esp,0x10
c001b841:	eb 2a                	jmp    c001b86d <PCI::detect()+0x55>
c001b843:	52                   	push   edx
c001b844:	52                   	push   edx
c001b845:	53                   	push   ebx
c001b846:	43                   	inc    ebx
c001b847:	56                   	push   esi
c001b848:	e8 3f fc ff ff       	call   c001b48c <PCI::checkBus(unsigned char)>
c001b84d:	83 c4 10             	add    esp,0x10
c001b850:	83 fb 08             	cmp    ebx,0x8
c001b853:	74 18                	je     c001b86d <PCI::detect()+0x55>
c001b855:	53                   	push   ebx
c001b856:	6a 00                	push   0x0
c001b858:	6a 00                	push   0x0
c001b85a:	56                   	push   esi
c001b85b:	e8 ec f6 ff ff       	call   c001af4c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b860:	83 c4 10             	add    esp,0x10
c001b863:	0f b7 c0             	movzx  eax,ax
c001b866:	3d ff ff 00 00       	cmp    eax,0xffff
c001b86b:	74 d6                	je     c001b843 <PCI::detect()+0x2b>
c001b86d:	58                   	pop    eax
c001b86e:	5b                   	pop    ebx
c001b86f:	5e                   	pop    esi
c001b870:	c3                   	ret    
c001b871:	90                   	nop

c001b872 <IDE::close(int, int, void*)>:
c001b872:	83 c8 ff             	or     eax,0xffffffff
c001b875:	c3                   	ret    

c001b876 <IDE::IDE()>:
c001b876:	83 ec 0c             	sub    esp,0xc
c001b879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b87d:	83 ec 08             	sub    esp,0x8
c001b880:	68 90 2c 02 c0       	push   0xc0022c90
c001b885:	50                   	push   eax
c001b886:	e8 cd 11 ff ff       	call   c000ca58 <HardDiskController::HardDiskController(char const*)>
c001b88b:	83 c4 10             	add    esp,0x10
c001b88e:	ba 20 2d 02 c0       	mov    edx,0xc0022d20
c001b893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b897:	89 10                	mov    DWORD PTR [eax],edx
c001b899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b89d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b8a4:	90                   	nop
c001b8a5:	83 c4 0c             	add    esp,0xc
c001b8a8:	c3                   	ret    
c001b8a9:	90                   	nop

c001b8aa <IDE::prepareInterrupt(unsigned char)>:
c001b8aa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b8af:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b8b3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b8bb:	c3                   	ret    

c001b8bc <selectDrive(unsigned char, unsigned char)>:
c001b8bc:	c3                   	ret    
c001b8bd:	90                   	nop

c001b8be <IDE::getBase(unsigned char)>:
c001b8be:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b8c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8c7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b8cf:	c3                   	ret    

c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b8d0:	55                   	push   ebp
c001b8d1:	57                   	push   edi
c001b8d2:	56                   	push   esi
c001b8d3:	53                   	push   ebx
c001b8d4:	83 ec 1c             	sub    esp,0x1c
c001b8d7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b8db:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b8df:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b8e2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b8e6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b8ea:	80 f9 03             	cmp    cl,0x3
c001b8ed:	77 4f                	ja     c001b93e <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001b8ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b8f3:	0f b6 fa             	movzx  edi,dl
c001b8f6:	0f b6 db             	movzx  ebx,bl
c001b8f9:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001b8fc:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001b901:	80 ca 80             	or     dl,0x80
c001b904:	52                   	push   edx
c001b905:	6a 0c                	push   0xc
c001b907:	57                   	push   edi
c001b908:	56                   	push   esi
c001b909:	e8 c2 ff ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b90e:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001b913:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b917:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b91b:	ee                   	out    dx,al
c001b91c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b921:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001b925:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b929:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b92d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b935:	83 c4 2c             	add    esp,0x2c
c001b938:	5b                   	pop    ebx
c001b939:	5e                   	pop    esi
c001b93a:	5f                   	pop    edi
c001b93b:	5d                   	pop    ebp
c001b93c:	eb 92                	jmp    c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b93e:	0f b6 cb             	movzx  ecx,bl
c001b941:	83 f9 07             	cmp    ecx,0x7
c001b944:	77 12                	ja     c001b958 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001b946:	0f b6 d2             	movzx  edx,dl
c001b949:	0f b6 db             	movzx  ebx,bl
c001b94c:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001b954:	01 da                	add    edx,ebx
c001b956:	eb 2f                	jmp    c001b987 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b958:	83 f9 0d             	cmp    ecx,0xd
c001b95b:	77 13                	ja     c001b970 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001b95d:	0f b6 d2             	movzx  edx,dl
c001b960:	0f b6 db             	movzx  ebx,bl
c001b963:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001b96a:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b96e:	eb 17                	jmp    c001b987 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b970:	83 f9 15             	cmp    ecx,0x15
c001b973:	77 13                	ja     c001b988 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001b975:	0f b6 d2             	movzx  edx,dl
c001b978:	0f b6 db             	movzx  ebx,bl
c001b97b:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001b983:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b987:	ee                   	out    dx,al
c001b988:	83 c4 1c             	add    esp,0x1c
c001b98b:	5b                   	pop    ebx
c001b98c:	5e                   	pop    esi
c001b98d:	5f                   	pop    edi
c001b98e:	5d                   	pop    ebp
c001b98f:	c3                   	ret    

c001b990 <IDE::read(unsigned char, unsigned char)>:
c001b990:	55                   	push   ebp
c001b991:	57                   	push   edi
c001b992:	56                   	push   esi
c001b993:	53                   	push   ebx
c001b994:	83 ec 1c             	sub    esp,0x1c
c001b997:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b99b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b99f:	8d 43 f8             	lea    eax,[ebx-0x8]
c001b9a2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b9a6:	3c 03                	cmp    al,0x3
c001b9a8:	77 40                	ja     c001b9ea <IDE::read(unsigned char, unsigned char)+0x5a>
c001b9aa:	0f b6 f9             	movzx  edi,cl
c001b9ad:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001b9b0:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b9b5:	0c 80                	or     al,0x80
c001b9b7:	50                   	push   eax
c001b9b8:	6a 0c                	push   0xc
c001b9ba:	57                   	push   edi
c001b9bb:	56                   	push   esi
c001b9bc:	e8 0f ff ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b9c1:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b9c6:	0f b6 d3             	movzx  edx,bl
c001b9c9:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b9cd:	ec                   	in     al,dx
c001b9ce:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b9d2:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001b9d7:	52                   	push   edx
c001b9d8:	6a 0c                	push   0xc
c001b9da:	57                   	push   edi
c001b9db:	56                   	push   esi
c001b9dc:	e8 ef fe ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b9e1:	83 c4 20             	add    esp,0x20
c001b9e4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b9e8:	eb 4c                	jmp    c001ba36 <IDE::read(unsigned char, unsigned char)+0xa6>
c001b9ea:	0f b6 d3             	movzx  edx,bl
c001b9ed:	83 fa 07             	cmp    edx,0x7
c001b9f0:	77 12                	ja     c001ba04 <IDE::read(unsigned char, unsigned char)+0x74>
c001b9f2:	0f b6 c9             	movzx  ecx,cl
c001b9f5:	0f b6 d3             	movzx  edx,bl
c001b9f8:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001ba00:	01 c2                	add    edx,eax
c001ba02:	eb 31                	jmp    c001ba35 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ba04:	83 fa 0d             	cmp    edx,0xd
c001ba07:	77 13                	ja     c001ba1c <IDE::read(unsigned char, unsigned char)+0x8c>
c001ba09:	0f b6 c9             	movzx  ecx,cl
c001ba0c:	0f b6 d3             	movzx  edx,bl
c001ba0f:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001ba16:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ba1a:	eb 19                	jmp    c001ba35 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ba1c:	31 c0                	xor    eax,eax
c001ba1e:	83 fa 15             	cmp    edx,0x15
c001ba21:	77 13                	ja     c001ba36 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ba23:	0f b6 c9             	movzx  ecx,cl
c001ba26:	0f b6 d3             	movzx  edx,bl
c001ba29:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001ba31:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ba35:	ec                   	in     al,dx
c001ba36:	83 c4 1c             	add    esp,0x1c
c001ba39:	5b                   	pop    ebx
c001ba3a:	5e                   	pop    esi
c001ba3b:	5f                   	pop    edi
c001ba3c:	5d                   	pop    ebp
c001ba3d:	c3                   	ret    

c001ba3e <IDE::waitInterrupt(unsigned char)>:
c001ba3e:	55                   	push   ebp
c001ba3f:	57                   	push   edi
c001ba40:	56                   	push   esi
c001ba41:	53                   	push   ebx
c001ba42:	31 db                	xor    ebx,ebx
c001ba44:	83 ec 0c             	sub    esp,0xc
c001ba47:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ba4b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ba50:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ba58:	89 e8                	mov    eax,ebp
c001ba5a:	84 c0                	test   al,al
c001ba5c:	75 30                	jne    c001ba8e <IDE::waitInterrupt(unsigned char)+0x50>
c001ba5e:	50                   	push   eax
c001ba5f:	6a 0c                	push   0xc
c001ba61:	56                   	push   esi
c001ba62:	57                   	push   edi
c001ba63:	e8 28 ff ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001ba68:	83 c4 10             	add    esp,0x10
c001ba6b:	a8 01                	test   al,0x1
c001ba6d:	75 27                	jne    c001ba96 <IDE::waitInterrupt(unsigned char)+0x58>
c001ba6f:	f6 c3 04             	test   bl,0x4
c001ba72:	75 12                	jne    c001ba86 <IDE::waitInterrupt(unsigned char)+0x48>
c001ba74:	83 fb 32             	cmp    ebx,0x32
c001ba77:	7e 0d                	jle    c001ba86 <IDE::waitInterrupt(unsigned char)+0x48>
c001ba79:	83 ec 0c             	sub    esp,0xc
c001ba7c:	6a 64                	push   0x64
c001ba7e:	e8 b1 a4 ff ff       	call   c0015f34 <milliTenthSleep(unsigned int)>
c001ba83:	83 c4 10             	add    esp,0x10
c001ba86:	83 fb 3c             	cmp    ebx,0x3c
c001ba89:	74 0b                	je     c001ba96 <IDE::waitInterrupt(unsigned char)+0x58>
c001ba8b:	43                   	inc    ebx
c001ba8c:	eb c2                	jmp    c001ba50 <IDE::waitInterrupt(unsigned char)+0x12>
c001ba8e:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ba96:	83 c4 0c             	add    esp,0xc
c001ba99:	89 e8                	mov    eax,ebp
c001ba9b:	5b                   	pop    ebx
c001ba9c:	5e                   	pop    esi
c001ba9d:	5f                   	pop    edi
c001ba9e:	5d                   	pop    ebp
c001ba9f:	c3                   	ret    

c001baa0 <ideChannel0IRQHandler(regs*, void*)>:
c001baa0:	83 ec 10             	sub    esp,0x10
c001baa3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001baa7:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001baae:	6a 07                	push   0x7
c001bab0:	6a 00                	push   0x0
c001bab2:	50                   	push   eax
c001bab3:	e8 d8 fe ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001bab8:	83 c4 1c             	add    esp,0x1c
c001babb:	c3                   	ret    

c001babc <ideChannel1IRQHandler(regs*, void*)>:
c001babc:	83 ec 10             	sub    esp,0x10
c001babf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bac3:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001baca:	6a 07                	push   0x7
c001bacc:	6a 01                	push   0x1
c001bace:	50                   	push   eax
c001bacf:	e8 bc fe ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001bad4:	83 c4 1c             	add    esp,0x1c
c001bad7:	c3                   	ret    

c001bad8 <IDE::enableIRQs(unsigned char, bool)>:
c001bad8:	57                   	push   edi
c001bad9:	b8 02 00 00 00       	mov    eax,0x2
c001bade:	56                   	push   esi
c001badf:	53                   	push   ebx
c001bae0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bae4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bae8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001baed:	74 02                	je     c001baf1 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001baef:	31 c0                	xor    eax,eax
c001baf1:	0f b6 db             	movzx  ebx,bl
c001baf4:	bf 04 00 00 00       	mov    edi,0x4
c001baf9:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001bb00:	50                   	push   eax
c001bb01:	6a 0c                	push   0xc
c001bb03:	53                   	push   ebx
c001bb04:	56                   	push   esi
c001bb05:	e8 c6 fd ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb0a:	83 c4 10             	add    esp,0x10
c001bb0d:	50                   	push   eax
c001bb0e:	6a 0c                	push   0xc
c001bb10:	53                   	push   ebx
c001bb11:	56                   	push   esi
c001bb12:	e8 79 fe ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001bb17:	83 c4 10             	add    esp,0x10
c001bb1a:	4f                   	dec    edi
c001bb1b:	75 f0                	jne    c001bb0d <IDE::enableIRQs(unsigned char, bool)+0x35>
c001bb1d:	5b                   	pop    ebx
c001bb1e:	5e                   	pop    esi
c001bb1f:	5f                   	pop    edi
c001bb20:	c3                   	ret    
c001bb21:	90                   	nop

c001bb22 <IDE::open(int, int, void*)>:
c001bb22:	55                   	push   ebp
c001bb23:	57                   	push   edi
c001bb24:	56                   	push   esi
c001bb25:	53                   	push   ebx
c001bb26:	83 ec 1c             	sub    esp,0x1c
c001bb29:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bb2d:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bb36:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bb3f:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bb46:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bb4d:	0f 85 de 02 00 00    	jne    c001be31 <IDE::open(int, int, void*)+0x30f>
c001bb53:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bb59:	88 04 24             	mov    BYTE PTR [esp],al
c001bb5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bb5f:	83 e0 7f             	and    eax,0x7f
c001bb62:	83 f8 05             	cmp    eax,0x5
c001bb65:	74 05                	je     c001bb6c <IDE::open(int, int, void*)+0x4a>
c001bb67:	83 f8 0f             	cmp    eax,0xf
c001bb6a:	75 32                	jne    c001bb9e <IDE::open(int, int, void*)+0x7c>
c001bb6c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bb72:	83 e0 fc             	and    eax,0xfffffffc
c001bb75:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bb7c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bb82:	83 e0 fc             	and    eax,0xfffffffc
c001bb85:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bb8c:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bb92:	83 e0 fc             	and    eax,0xfffffffc
c001bb95:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bb9c:	eb 14                	jmp    c001bbb2 <IDE::open(int, int, void*)+0x90>
c001bb9e:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bba8:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bbb2:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001bbb9:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bbc0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bbc4:	89 c6                	mov    esi,eax
c001bbc6:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bbcb:	c1 e6 10             	shl    esi,0x10
c001bbce:	89 e8                	mov    eax,ebp
c001bbd0:	89 fa                	mov    edx,edi
c001bbd2:	c1 e0 0b             	shl    eax,0xb
c001bbd5:	09 f0                	or     eax,esi
c001bbd7:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001bbde:	c1 e6 08             	shl    esi,0x8
c001bbe1:	09 c6                	or     esi,eax
c001bbe3:	89 f0                	mov    eax,esi
c001bbe5:	0d 08 00 00 80       	or     eax,0x80000008
c001bbea:	ef                   	out    dx,eax
c001bbeb:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001bbf0:	89 ca                	mov    edx,ecx
c001bbf2:	ed                   	in     eax,dx
c001bbf3:	c1 e8 10             	shr    eax,0x10
c001bbf6:	3d ff ff 00 00       	cmp    eax,0xffff
c001bbfb:	0f 84 f9 00 00 00    	je     c001bcfa <IDE::open(int, int, void*)+0x1d8>
c001bc01:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001bc07:	89 fa                	mov    edx,edi
c001bc09:	89 f0                	mov    eax,esi
c001bc0b:	ef                   	out    dx,eax
c001bc0c:	b0 fe                	mov    al,0xfe
c001bc0e:	89 ca                	mov    edx,ecx
c001bc10:	ee                   	out    dx,al
c001bc11:	89 f0                	mov    eax,esi
c001bc13:	89 fa                	mov    edx,edi
c001bc15:	ef                   	out    dx,eax
c001bc16:	89 ca                	mov    edx,ecx
c001bc18:	ed                   	in     eax,dx
c001bc19:	3c fe                	cmp    al,0xfe
c001bc1b:	0f 85 a9 00 00 00    	jne    c001bcca <IDE::open(int, int, void*)+0x1a8>
c001bc21:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001bc27:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bc2e:	74 33                	je     c001bc63 <IDE::open(int, int, void*)+0x141>
c001bc30:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bc36:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bc3a:	40                   	inc    eax
c001bc3b:	83 ec 0c             	sub    esp,0xc
c001bc3e:	0f b6 c0             	movzx  eax,al
c001bc41:	50                   	push   eax
c001bc42:	55                   	push   ebp
c001bc43:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bc47:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001bc4d:	51                   	push   ecx
c001bc4e:	e8 35 3a ff ff       	call   c000f688 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bc53:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bc58:	83 c4 1c             	add    esp,0x1c
c001bc5b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bc61:	eb 0a                	jmp    c001bc6d <IDE::open(int, int, void*)+0x14b>
c001bc63:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bc6d:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bc74:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bc7b:	c1 e1 10             	shl    ecx,0x10
c001bc7e:	c1 e0 08             	shl    eax,0x8
c001bc81:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bc86:	09 c1                	or     ecx,eax
c001bc88:	89 fa                	mov    edx,edi
c001bc8a:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bc91:	c1 e0 0b             	shl    eax,0xb
c001bc94:	09 c1                	or     ecx,eax
c001bc96:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bc9c:	89 c8                	mov    eax,ecx
c001bc9e:	ef                   	out    dx,eax
c001bc9f:	be fc 0c 00 00       	mov    esi,0xcfc
c001bca4:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bcaa:	89 f2                	mov    edx,esi
c001bcac:	ee                   	out    dx,al
c001bcad:	89 c8                	mov    eax,ecx
c001bcaf:	89 fa                	mov    edx,edi
c001bcb1:	ef                   	out    dx,eax
c001bcb2:	89 f2                	mov    edx,esi
c001bcb4:	ed                   	in     eax,dx
c001bcb5:	0f b6 c0             	movzx  eax,al
c001bcb8:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001bcbe:	74 4a                	je     c001bd0a <IDE::open(int, int, void*)+0x1e8>
c001bcc0:	83 ec 0c             	sub    esp,0xc
c001bcc3:	68 a8 2c 02 c0       	push   0xc0022ca8
c001bcc8:	eb 38                	jmp    c001bd02 <IDE::open(int, int, void*)+0x1e0>
c001bcca:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bcd3:	75 1b                	jne    c001bcf0 <IDE::open(int, int, void*)+0x1ce>
c001bcd5:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001bcd9:	3d 80 00 00 00       	cmp    eax,0x80
c001bcde:	74 07                	je     c001bce7 <IDE::open(int, int, void*)+0x1c5>
c001bce0:	3d 8a 00 00 00       	cmp    eax,0x8a
c001bce5:	75 09                	jne    c001bcf0 <IDE::open(int, int, void*)+0x1ce>
c001bce7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bcee:	eb 1a                	jmp    c001bd0a <IDE::open(int, int, void*)+0x1e8>
c001bcf0:	83 ec 0c             	sub    esp,0xc
c001bcf3:	68 b0 2c 02 c0       	push   0xc0022cb0
c001bcf8:	eb 08                	jmp    c001bd02 <IDE::open(int, int, void*)+0x1e0>
c001bcfa:	83 ec 0c             	sub    esp,0xc
c001bcfd:	68 e1 2c 02 c0       	push   0xc0022ce1
c001bd02:	e8 3e 56 ff ff       	call   c0011345 <KePanic(char const*)>
c001bd07:	83 c4 10             	add    esp,0x10
c001bd0a:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001bd11:	74 1a                	je     c001bd2d <IDE::open(int, int, void*)+0x20b>
c001bd13:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bd19:	83 e0 fc             	and    eax,0xfffffffc
c001bd1c:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bd23:	83 c0 08             	add    eax,0x8
c001bd26:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bd2d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bd33:	89 c2                	mov    edx,eax
c001bd35:	83 e2 0f             	and    edx,0xf
c001bd38:	83 fa 08             	cmp    edx,0x8
c001bd3b:	75 0a                	jne    c001bd47 <IDE::open(int, int, void*)+0x225>
c001bd3d:	83 e8 02             	sub    eax,0x2
c001bd40:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bd47:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bd4d:	89 c2                	mov    edx,eax
c001bd4f:	83 e2 0f             	and    edx,0xf
c001bd52:	83 fa 08             	cmp    edx,0x8
c001bd55:	75 0a                	jne    c001bd61 <IDE::open(int, int, void*)+0x23f>
c001bd57:	83 e8 02             	sub    eax,0x2
c001bd5a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bd61:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bd68:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bd6f:	89 d0                	mov    eax,edx
c001bd71:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bd74:	8d 7a 01             	lea    edi,[edx+0x1]
c001bd77:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bd7b:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bd7f:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bd83:	83 e1 3f             	and    ecx,0x3f
c001bd86:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bd8a:	89 f9                	mov    ecx,edi
c001bd8c:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bd93:	0f b6 c9             	movzx  ecx,cl
c001bd96:	8d 78 02             	lea    edi,[eax+0x2]
c001bd99:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bd9c:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bda0:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bda4:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bda8:	83 e2 3f             	and    edx,0x3f
c001bdab:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bdaf:	89 f9                	mov    ecx,edi
c001bdb1:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bdb7:	0f b6 d1             	movzx  edx,cl
c001bdba:	8d 78 03             	lea    edi,[eax+0x3]
c001bdbd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bdc0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bdc4:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bdc8:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bdcc:	83 e1 3f             	and    ecx,0x3f
c001bdcf:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bdd3:	89 f9                	mov    ecx,edi
c001bdd5:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bddb:	0f b6 c9             	movzx  ecx,cl
c001bdde:	8d 78 04             	lea    edi,[eax+0x4]
c001bde1:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bde4:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bde8:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bdec:	89 fa                	mov    edx,edi
c001bdee:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bdf4:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bdf8:	83 e2 3f             	and    edx,0x3f
c001bdfb:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bdff:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001be06:	66 85 f6             	test   si,si
c001be09:	74 65                	je     c001be70 <IDE::open(int, int, void*)+0x34e>
c001be0b:	89 f9                	mov    ecx,edi
c001be0d:	83 c0 05             	add    eax,0x5
c001be10:	0f b6 d1             	movzx  edx,cl
c001be13:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001be16:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001be1a:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001be1e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001be24:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001be28:	83 e0 3f             	and    eax,0x3f
c001be2b:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001be2f:	eb 3f                	jmp    c001be70 <IDE::open(int, int, void*)+0x34e>
c001be31:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001be37:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001be3e:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001be45:	05 06 02 00 00       	add    eax,0x206
c001be4a:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001be51:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001be58:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001be5f:	05 06 02 00 00       	add    eax,0x206
c001be64:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001be6b:	e9 bd fe ff ff       	jmp    c001bd2d <IDE::open(int, int, void*)+0x20b>
c001be70:	50                   	push   eax
c001be71:	50                   	push   eax
c001be72:	6a 00                	push   0x0
c001be74:	53                   	push   ebx
c001be75:	e8 30 fa ff ff       	call   c001b8aa <IDE::prepareInterrupt(unsigned char)>
c001be7a:	5a                   	pop    edx
c001be7b:	59                   	pop    ecx
c001be7c:	6a 01                	push   0x1
c001be7e:	53                   	push   ebx
c001be7f:	e8 26 fa ff ff       	call   c001b8aa <IDE::prepareInterrupt(unsigned char)>
c001be84:	83 c4 0c             	add    esp,0xc
c001be87:	6a 00                	push   0x0
c001be89:	6a 00                	push   0x0
c001be8b:	53                   	push   ebx
c001be8c:	e8 47 fc ff ff       	call   c001bad8 <IDE::enableIRQs(unsigned char, bool)>
c001be91:	83 c4 0c             	add    esp,0xc
c001be94:	6a 00                	push   0x0
c001be96:	6a 01                	push   0x1
c001be98:	53                   	push   ebx
c001be99:	e8 3a fc ff ff       	call   c001bad8 <IDE::enableIRQs(unsigned char, bool)>
c001be9e:	83 c4 10             	add    esp,0x10
c001bea1:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001bea8:	74 34                	je     c001bede <IDE::open(int, int, void*)+0x3bc>
c001beaa:	83 ec 0c             	sub    esp,0xc
c001bead:	53                   	push   ebx
c001beae:	6a 01                	push   0x1
c001beb0:	68 a0 ba 01 c0       	push   0xc001baa0
c001beb5:	6a 0e                	push   0xe
c001beb7:	53                   	push   ebx
c001beb8:	e8 05 08 ff ff       	call   c000c6c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bebd:	83 c4 14             	add    esp,0x14
c001bec0:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bec6:	53                   	push   ebx
c001bec7:	6a 01                	push   0x1
c001bec9:	68 bc ba 01 c0       	push   0xc001babc
c001bece:	6a 0f                	push   0xf
c001bed0:	53                   	push   ebx
c001bed1:	e8 ec 07 ff ff       	call   c000c6c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bed6:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001bedc:	eb 38                	jmp    c001bf16 <IDE::open(int, int, void*)+0x3f4>
c001bede:	83 ec 0c             	sub    esp,0xc
c001bee1:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001beeb:	53                   	push   ebx
c001beec:	6a 00                	push   0x0
c001beee:	68 a0 ba 01 c0       	push   0xc001baa0
c001bef3:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bef9:	53                   	push   ebx
c001befa:	e8 c3 07 ff ff       	call   c000c6c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001beff:	83 c4 14             	add    esp,0x14
c001bf02:	53                   	push   ebx
c001bf03:	6a 00                	push   0x0
c001bf05:	68 bc ba 01 c0       	push   0xc001babc
c001bf0a:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001bf10:	53                   	push   ebx
c001bf11:	e8 ac 07 ff ff       	call   c000c6c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bf16:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf18:	83 c4 20             	add    esp,0x20
c001bf1b:	83 ec 0c             	sub    esp,0xc
c001bf1e:	53                   	push   ebx
c001bf1f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001bf22:	83 c4 0c             	add    esp,0xc
c001bf25:	6a 07                	push   0x7
c001bf27:	6a 00                	push   0x0
c001bf29:	53                   	push   ebx
c001bf2a:	e8 61 fa ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001bf2f:	83 c4 0c             	add    esp,0xc
c001bf32:	6a 07                	push   0x7
c001bf34:	6a 01                	push   0x1
c001bf36:	53                   	push   ebx
c001bf37:	e8 54 fa ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001bf3c:	83 c4 0c             	add    esp,0xc
c001bf3f:	6a 01                	push   0x1
c001bf41:	6a 00                	push   0x0
c001bf43:	53                   	push   ebx
c001bf44:	e8 8f fb ff ff       	call   c001bad8 <IDE::enableIRQs(unsigned char, bool)>
c001bf49:	83 c4 0c             	add    esp,0xc
c001bf4c:	6a 01                	push   0x1
c001bf4e:	6a 01                	push   0x1
c001bf50:	53                   	push   ebx
c001bf51:	e8 82 fb ff ff       	call   c001bad8 <IDE::enableIRQs(unsigned char, bool)>
c001bf56:	83 c4 2c             	add    esp,0x2c
c001bf59:	31 c0                	xor    eax,eax
c001bf5b:	5b                   	pop    ebx
c001bf5c:	5e                   	pop    esi
c001bf5d:	5f                   	pop    edi
c001bf5e:	5d                   	pop    ebp
c001bf5f:	c3                   	ret    

c001bf60 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001bf60:	55                   	push   ebp
c001bf61:	57                   	push   edi
c001bf62:	56                   	push   esi
c001bf63:	53                   	push   ebx
c001bf64:	83 ec 1c             	sub    esp,0x1c
c001bf67:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001bf6b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bf6f:	8d 42 f8             	lea    eax,[edx-0x8]
c001bf72:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bf76:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001bf7a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bf7e:	3c 03                	cmp    al,0x3
c001bf80:	77 5a                	ja     c001bfdc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001bf82:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001bf86:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001bf8a:	0f b6 db             	movzx  ebx,bl
c001bf8d:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001bf90:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bf95:	0c 80                	or     al,0x80
c001bf97:	50                   	push   eax
c001bf98:	6a 0c                	push   0xc
c001bf9a:	53                   	push   ebx
c001bf9b:	56                   	push   esi
c001bf9c:	e8 2f f9 ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfa1:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001bfa6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bfaa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bfae:	0f b6 d2             	movzx  edx,dl
c001bfb1:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bfb5:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bfb7:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bfbc:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001bfc0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bfc4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bfc8:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bfd0:	83 c4 2c             	add    esp,0x2c
c001bfd3:	5b                   	pop    ebx
c001bfd4:	5e                   	pop    esi
c001bfd5:	5f                   	pop    edi
c001bfd6:	5d                   	pop    ebp
c001bfd7:	e9 f4 f8 ff ff       	jmp    c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfdc:	0f b6 c2             	movzx  eax,dl
c001bfdf:	83 f8 07             	cmp    eax,0x7
c001bfe2:	77 12                	ja     c001bff6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001bfe4:	0f b6 c2             	movzx  eax,dl
c001bfe7:	0f b6 db             	movzx  ebx,bl
c001bfea:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001bff2:	01 c2                	add    edx,eax
c001bff4:	eb 2f                	jmp    c001c025 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001bff6:	83 f8 0d             	cmp    eax,0xd
c001bff9:	77 13                	ja     c001c00e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001bffb:	0f b6 db             	movzx  ebx,bl
c001bffe:	0f b6 d2             	movzx  edx,dl
c001c001:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c008:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c00c:	eb 17                	jmp    c001c025 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c00e:	83 f8 15             	cmp    eax,0x15
c001c011:	77 14                	ja     c001c027 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c013:	0f b6 db             	movzx  ebx,bl
c001c016:	0f b6 d2             	movzx  edx,dl
c001c019:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c021:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c025:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c027:	83 c4 1c             	add    esp,0x1c
c001c02a:	5b                   	pop    ebx
c001c02b:	5e                   	pop    esi
c001c02c:	5f                   	pop    edi
c001c02d:	5d                   	pop    ebp
c001c02e:	c3                   	ret    
c001c02f:	90                   	nop

c001c030 <IDE::detect()>:
c001c030:	55                   	push   ebp
c001c031:	57                   	push   edi
c001c032:	56                   	push   esi
c001c033:	53                   	push   ebx
c001c034:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c03a:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c041:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c048:	0f 85 a4 02 00 00    	jne    c001c2f2 <IDE::detect()+0x2c2>
c001c04e:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c055:	31 f6                	xor    esi,esi
c001c057:	31 ed                	xor    ebp,ebp
c001c059:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c061:	89 e8                	mov    eax,ebp
c001c063:	c1 e0 06             	shl    eax,0x6
c001c066:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c06e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c072:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c076:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c07a:	c1 e0 04             	shl    eax,0x4
c001c07d:	83 c8 a0             	or     eax,0xffffffa0
c001c080:	0f b6 c0             	movzx  eax,al
c001c083:	50                   	push   eax
c001c084:	6a 06                	push   0x6
c001c086:	56                   	push   esi
c001c087:	53                   	push   ebx
c001c088:	e8 43 f8 ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c08d:	83 c4 0c             	add    esp,0xc
c001c090:	6a 0c                	push   0xc
c001c092:	56                   	push   esi
c001c093:	53                   	push   ebx
c001c094:	e8 f7 f8 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c099:	83 c4 0c             	add    esp,0xc
c001c09c:	6a 0c                	push   0xc
c001c09e:	56                   	push   esi
c001c09f:	53                   	push   ebx
c001c0a0:	e8 eb f8 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c0a5:	83 c4 0c             	add    esp,0xc
c001c0a8:	6a 0c                	push   0xc
c001c0aa:	56                   	push   esi
c001c0ab:	53                   	push   ebx
c001c0ac:	e8 df f8 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c0b1:	83 c4 0c             	add    esp,0xc
c001c0b4:	6a 0c                	push   0xc
c001c0b6:	56                   	push   esi
c001c0b7:	53                   	push   ebx
c001c0b8:	e8 d3 f8 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c0bd:	68 ec 00 00 00       	push   0xec
c001c0c2:	6a 07                	push   0x7
c001c0c4:	56                   	push   esi
c001c0c5:	53                   	push   ebx
c001c0c6:	e8 05 f8 ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0cb:	83 c4 1c             	add    esp,0x1c
c001c0ce:	6a 0c                	push   0xc
c001c0d0:	56                   	push   esi
c001c0d1:	53                   	push   ebx
c001c0d2:	e8 b9 f8 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c0d7:	83 c4 0c             	add    esp,0xc
c001c0da:	6a 0c                	push   0xc
c001c0dc:	56                   	push   esi
c001c0dd:	53                   	push   ebx
c001c0de:	e8 ad f8 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c0e3:	83 c4 0c             	add    esp,0xc
c001c0e6:	6a 0c                	push   0xc
c001c0e8:	56                   	push   esi
c001c0e9:	53                   	push   ebx
c001c0ea:	e8 a1 f8 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c0ef:	83 c4 0c             	add    esp,0xc
c001c0f2:	6a 0c                	push   0xc
c001c0f4:	56                   	push   esi
c001c0f5:	53                   	push   ebx
c001c0f6:	e8 95 f8 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c0fb:	83 c4 0c             	add    esp,0xc
c001c0fe:	6a 0c                	push   0xc
c001c100:	56                   	push   esi
c001c101:	53                   	push   ebx
c001c102:	e8 89 f8 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c107:	83 c4 10             	add    esp,0x10
c001c10a:	84 c0                	test   al,al
c001c10c:	0f 84 60 01 00 00    	je     c001c272 <IDE::detect()+0x242>
c001c112:	31 ff                	xor    edi,edi
c001c114:	50                   	push   eax
c001c115:	6a 0c                	push   0xc
c001c117:	56                   	push   esi
c001c118:	53                   	push   ebx
c001c119:	e8 72 f8 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c11e:	83 c4 10             	add    esp,0x10
c001c121:	a8 01                	test   al,0x1
c001c123:	0f 85 6a 01 00 00    	jne    c001c293 <IDE::detect()+0x263>
c001c129:	a8 80                	test   al,0x80
c001c12b:	75 04                	jne    c001c131 <IDE::detect()+0x101>
c001c12d:	a8 08                	test   al,0x8
c001c12f:	75 23                	jne    c001c154 <IDE::detect()+0x124>
c001c131:	47                   	inc    edi
c001c132:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c138:	7e da                	jle    c001c114 <IDE::detect()+0xe4>
c001c13a:	83 ec 0c             	sub    esp,0xc
c001c13d:	6a 32                	push   0x32
c001c13f:	e8 f0 9d ff ff       	call   c0015f34 <milliTenthSleep(unsigned int)>
c001c144:	83 c4 10             	add    esp,0x10
c001c147:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c14d:	75 c5                	jne    c001c114 <IDE::detect()+0xe4>
c001c14f:	e9 3f 01 00 00       	jmp    c001c293 <IDE::detect()+0x263>
c001c154:	31 c9                	xor    ecx,ecx
c001c156:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c15a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c15e:	83 ec 0c             	sub    esp,0xc
c001c161:	68 80 00 00 00       	push   0x80
c001c166:	57                   	push   edi
c001c167:	6a 00                	push   0x0
c001c169:	56                   	push   esi
c001c16a:	53                   	push   ebx
c001c16b:	e8 f0 fd ff ff       	call   c001bf60 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c170:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c175:	89 e8                	mov    eax,ebp
c001c177:	89 d1                	mov    ecx,edx
c001c179:	c1 e0 06             	shl    eax,0x6
c001c17c:	01 d8                	add    eax,ebx
c001c17e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c185:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c18c:	89 f2                	mov    edx,esi
c001c18e:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c194:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c198:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c19e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c1a2:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c1a9:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c1b1:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c1b8:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c1c0:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c1c6:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c1cd:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c1d3:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c1d7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c1db:	83 c4 20             	add    esp,0x20
c001c1de:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c1e1:	83 c0 02             	add    eax,0x2
c001c1e4:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c1ea:	83 c7 02             	add    edi,0x2
c001c1ed:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c1f0:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c1f6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c1fa:	75 e2                	jne    c001c1de <IDE::detect()+0x1ae>
c001c1fc:	89 e8                	mov    eax,ebp
c001c1fe:	c1 e0 06             	shl    eax,0x6
c001c201:	01 d8                	add    eax,ebx
c001c203:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c20a:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c211:	c1 ea 09             	shr    edx,0x9
c001c214:	83 e2 01             	and    edx,0x1
c001c217:	80 e1 01             	and    cl,0x1
c001c21a:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c220:	75 22                	jne    c001c244 <IDE::detect()+0x214>
c001c222:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c229:	74 46                	je     c001c271 <IDE::detect()+0x241>
c001c22b:	83 ec 0c             	sub    esp,0xc
c001c22e:	68 7c 01 00 00       	push   0x17c
c001c233:	e8 7e b8 fe ff       	call   c0007ab6 <malloc>
c001c238:	89 c7                	mov    edi,eax
c001c23a:	89 04 24             	mov    DWORD PTR [esp],eax
c001c23d:	e8 1a 05 00 00       	call   c001c75c <ATA::ATA()>
c001c242:	eb 17                	jmp    c001c25b <IDE::detect()+0x22b>
c001c244:	83 ec 0c             	sub    esp,0xc
c001c247:	68 84 01 00 00       	push   0x184
c001c24c:	e8 65 b8 fe ff       	call   c0007ab6 <malloc>
c001c251:	89 c7                	mov    edi,eax
c001c253:	89 04 24             	mov    DWORD PTR [esp],eax
c001c256:	e8 45 0e 00 00       	call   c001d0a0 <ATAPI::ATAPI()>
c001c25b:	5a                   	pop    edx
c001c25c:	59                   	pop    ecx
c001c25d:	57                   	push   edi
c001c25e:	53                   	push   ebx
c001c25f:	e8 b2 04 ff ff       	call   c000c716 <Device::addChild(Device*)>
c001c264:	8b 07                	mov    eax,DWORD PTR [edi]
c001c266:	53                   	push   ebx
c001c267:	55                   	push   ebp
c001c268:	6a 00                	push   0x0
c001c26a:	57                   	push   edi
c001c26b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c26e:	83 c4 20             	add    esp,0x20
c001c271:	45                   	inc    ebp
c001c272:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c277:	74 0d                	je     c001c286 <IDE::detect()+0x256>
c001c279:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c281:	e9 db fd ff ff       	jmp    c001c061 <IDE::detect()+0x31>
c001c286:	4e                   	dec    esi
c001c287:	74 69                	je     c001c2f2 <IDE::detect()+0x2c2>
c001c289:	be 01 00 00 00       	mov    esi,0x1
c001c28e:	e9 c6 fd ff ff       	jmp    c001c059 <IDE::detect()+0x29>
c001c293:	50                   	push   eax
c001c294:	6a 04                	push   0x4
c001c296:	56                   	push   esi
c001c297:	53                   	push   ebx
c001c298:	e8 f3 f6 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c29d:	83 c4 0c             	add    esp,0xc
c001c2a0:	89 c7                	mov    edi,eax
c001c2a2:	6a 05                	push   0x5
c001c2a4:	56                   	push   esi
c001c2a5:	53                   	push   ebx
c001c2a6:	e8 e5 f6 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c2ab:	83 c4 10             	add    esp,0x10
c001c2ae:	89 f9                	mov    ecx,edi
c001c2b0:	0f b6 c0             	movzx  eax,al
c001c2b3:	0f b6 f9             	movzx  edi,cl
c001c2b6:	83 ff 14             	cmp    edi,0x14
c001c2b9:	75 07                	jne    c001c2c2 <IDE::detect()+0x292>
c001c2bb:	3d eb 00 00 00       	cmp    eax,0xeb
c001c2c0:	eb 0a                	jmp    c001c2cc <IDE::detect()+0x29c>
c001c2c2:	3d 96 00 00 00       	cmp    eax,0x96
c001c2c7:	75 a9                	jne    c001c272 <IDE::detect()+0x242>
c001c2c9:	83 ff 69             	cmp    edi,0x69
c001c2cc:	75 a4                	jne    c001c272 <IDE::detect()+0x242>
c001c2ce:	68 a1 00 00 00       	push   0xa1
c001c2d3:	6a 07                	push   0x7
c001c2d5:	56                   	push   esi
c001c2d6:	53                   	push   ebx
c001c2d7:	e8 f4 f5 ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2dc:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c2e3:	e8 4c 9c ff ff       	call   c0015f34 <milliTenthSleep(unsigned int)>
c001c2e8:	83 c4 10             	add    esp,0x10
c001c2eb:	b1 01                	mov    cl,0x1
c001c2ed:	e9 64 fe ff ff       	jmp    c001c156 <IDE::detect()+0x126>
c001c2f2:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c2f8:	5b                   	pop    ebx
c001c2f9:	5e                   	pop    esi
c001c2fa:	5f                   	pop    edi
c001c2fb:	5d                   	pop    ebp
c001c2fc:	c3                   	ret    
c001c2fd:	90                   	nop

c001c2fe <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c2fe:	55                   	push   ebp
c001c2ff:	57                   	push   edi
c001c300:	56                   	push   esi
c001c301:	53                   	push   ebx
c001c302:	83 ec 1c             	sub    esp,0x1c
c001c305:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c309:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c30d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c311:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c315:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c319:	88 c3                	mov    bl,al
c001c31b:	25 ff 00 00 00       	and    eax,0xff
c001c320:	0f 84 88 00 00 00    	je     c001c3ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c326:	83 ec 0c             	sub    esp,0xc
c001c329:	89 c7                	mov    edi,eax
c001c32b:	68 0b 2d 02 c0       	push   0xc0022d0b
c001c330:	e8 10 e6 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001c335:	83 c4 10             	add    esp,0x10
c001c338:	83 ff 01             	cmp    edi,0x1
c001c33b:	74 6b                	je     c001c3a8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c33d:	83 ff 02             	cmp    edi,0x2
c001c340:	75 58                	jne    c001c39a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c342:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c347:	01 ff                	add    edi,edi
c001c349:	50                   	push   eax
c001c34a:	09 fe                	or     esi,edi
c001c34c:	6a 01                	push   0x1
c001c34e:	89 f0                	mov    eax,esi
c001c350:	0f b6 f0             	movzx  esi,al
c001c353:	c1 e6 06             	shl    esi,0x6
c001c356:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c35e:	50                   	push   eax
c001c35f:	55                   	push   ebp
c001c360:	e8 2b f6 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c365:	83 c4 10             	add    esp,0x10
c001c368:	a8 01                	test   al,0x1
c001c36a:	74 02                	je     c001c36e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c36c:	b3 07                	mov    bl,0x7
c001c36e:	a8 02                	test   al,0x2
c001c370:	74 02                	je     c001c374 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c372:	b3 03                	mov    bl,0x3
c001c374:	a8 04                	test   al,0x4
c001c376:	74 02                	je     c001c37a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c378:	b3 14                	mov    bl,0x14
c001c37a:	a8 08                	test   al,0x8
c001c37c:	74 02                	je     c001c380 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c37e:	b3 03                	mov    bl,0x3
c001c380:	a8 10                	test   al,0x10
c001c382:	74 02                	je     c001c386 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c384:	b3 15                	mov    bl,0x15
c001c386:	a8 20                	test   al,0x20
c001c388:	74 02                	je     c001c38c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c38a:	b3 03                	mov    bl,0x3
c001c38c:	a8 40                	test   al,0x40
c001c38e:	74 02                	je     c001c392 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c390:	b3 16                	mov    bl,0x16
c001c392:	a8 80                	test   al,0x80
c001c394:	74 18                	je     c001c3ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c396:	b3 0d                	mov    bl,0xd
c001c398:	eb 14                	jmp    c001c3ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c39a:	83 ff 03             	cmp    edi,0x3
c001c39d:	74 0d                	je     c001c3ac <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c39f:	83 ff 04             	cmp    edi,0x4
c001c3a2:	75 0a                	jne    c001c3ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c3a4:	b3 08                	mov    bl,0x8
c001c3a6:	eb 06                	jmp    c001c3ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c3a8:	b3 13                	mov    bl,0x13
c001c3aa:	eb 02                	jmp    c001c3ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c3ac:	b3 17                	mov    bl,0x17
c001c3ae:	83 c4 1c             	add    esp,0x1c
c001c3b1:	88 d8                	mov    al,bl
c001c3b3:	5b                   	pop    ebx
c001c3b4:	5e                   	pop    esi
c001c3b5:	5f                   	pop    edi
c001c3b6:	5d                   	pop    ebp
c001c3b7:	c3                   	ret    

c001c3b8 <IDE::polling(unsigned char, unsigned int)>:
c001c3b8:	57                   	push   edi
c001c3b9:	56                   	push   esi
c001c3ba:	53                   	push   ebx
c001c3bb:	bb 04 00 00 00       	mov    ebx,0x4
c001c3c0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c3c4:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c3c9:	52                   	push   edx
c001c3ca:	6a 0c                	push   0xc
c001c3cc:	56                   	push   esi
c001c3cd:	57                   	push   edi
c001c3ce:	e8 bd f5 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c3d3:	83 c4 10             	add    esp,0x10
c001c3d6:	4b                   	dec    ebx
c001c3d7:	75 f0                	jne    c001c3c9 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c3d9:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c3de:	50                   	push   eax
c001c3df:	6a 0c                	push   0xc
c001c3e1:	56                   	push   esi
c001c3e2:	57                   	push   edi
c001c3e3:	e8 a8 f5 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c3e8:	83 c4 10             	add    esp,0x10
c001c3eb:	a8 01                	test   al,0x1
c001c3ed:	75 17                	jne    c001c406 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c3ef:	a8 20                	test   al,0x20
c001c3f1:	75 0f                	jne    c001c402 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c3f3:	4b                   	dec    ebx
c001c3f4:	74 10                	je     c001c406 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c3f6:	a8 80                	test   al,0x80
c001c3f8:	75 e4                	jne    c001c3de <IDE::polling(unsigned char, unsigned int)+0x26>
c001c3fa:	a8 08                	test   al,0x8
c001c3fc:	74 e0                	je     c001c3de <IDE::polling(unsigned char, unsigned int)+0x26>
c001c3fe:	31 c0                	xor    eax,eax
c001c400:	eb 06                	jmp    c001c408 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c402:	b0 01                	mov    al,0x1
c001c404:	eb 02                	jmp    c001c408 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c406:	b0 02                	mov    al,0x2
c001c408:	5b                   	pop    ebx
c001c409:	5e                   	pop    esi
c001c40a:	5f                   	pop    edi
c001c40b:	c3                   	ret    

c001c40c <SATABus::close(int, int, void*)>:
c001c40c:	31 c0                	xor    eax,eax
c001c40e:	c3                   	ret    
c001c40f:	90                   	nop

c001c410 <SATABus::detect()>:
c001c410:	c3                   	ret    
c001c411:	90                   	nop

c001c412 <SATABus::SATABus()>:
c001c412:	83 ec 0c             	sub    esp,0xc
c001c415:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c419:	83 ec 08             	sub    esp,0x8
c001c41c:	68 44 2d 02 c0       	push   0xc0022d44
c001c421:	50                   	push   eax
c001c422:	e8 31 06 ff ff       	call   c000ca58 <HardDiskController::HardDiskController(char const*)>
c001c427:	83 c4 10             	add    esp,0x10
c001c42a:	ba 70 2d 02 c0       	mov    edx,0xc0022d70
c001c42f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c433:	89 10                	mov    DWORD PTR [eax],edx
c001c435:	83 ec 0c             	sub    esp,0xc
c001c438:	6a 50                	push   0x50
c001c43a:	e8 4f ba fe ff       	call   c0007e8e <Phys::allocateContiguousPages(int)>
c001c43f:	83 c4 10             	add    esp,0x10
c001c442:	89 c2                	mov    edx,eax
c001c444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c448:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c44e:	83 ec 0c             	sub    esp,0xc
c001c451:	6a 50                	push   0x50
c001c453:	e8 b5 d1 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001c458:	83 c4 10             	add    esp,0x10
c001c45b:	89 c2                	mov    edx,eax
c001c45d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c461:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c467:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001c46c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c470:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c476:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c47a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c480:	83 ec 0c             	sub    esp,0xc
c001c483:	6a 03                	push   0x3
c001c485:	6a 50                	push   0x50
c001c487:	51                   	push   ecx
c001c488:	52                   	push   edx
c001c489:	50                   	push   eax
c001c48a:	e8 8b da fe ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c48f:	83 c4 20             	add    esp,0x20
c001c492:	90                   	nop
c001c493:	83 c4 0c             	add    esp,0xc
c001c496:	c3                   	ret    
c001c497:	90                   	nop

c001c498 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c498:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c49c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c49f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c4a2:	09 c2                	or     edx,eax
c001c4a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4a8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c4ae:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c4b0:	31 c0                	xor    eax,eax
c001c4b2:	c1 e9 08             	shr    ecx,0x8
c001c4b5:	83 e1 0f             	and    ecx,0xf
c001c4b8:	39 c8                	cmp    eax,ecx
c001c4ba:	74 0a                	je     c001c4c6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c4bc:	f6 c2 01             	test   dl,0x1
c001c4bf:	74 08                	je     c001c4c9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c4c1:	d1 ea                	shr    edx,1
c001c4c3:	40                   	inc    eax
c001c4c4:	eb f2                	jmp    c001c4b8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c4c6:	83 c8 ff             	or     eax,0xffffffff
c001c4c9:	c3                   	ret    

c001c4ca <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c4ca:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c4ce:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c4d1:	89 c2                	mov    edx,eax
c001c4d3:	c1 ea 08             	shr    edx,0x8
c001c4d6:	83 e2 0f             	and    edx,0xf
c001c4d9:	4a                   	dec    edx
c001c4da:	75 32                	jne    c001c50e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c4dc:	83 e0 0f             	and    eax,0xf
c001c4df:	83 f8 03             	cmp    eax,0x3
c001c4e2:	75 2a                	jne    c001c50e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c4e4:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c4e7:	b8 02 00 00 00       	mov    eax,0x2
c001c4ec:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c4f2:	74 1c                	je     c001c510 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c4f4:	b8 04 00 00 00       	mov    eax,0x4
c001c4f9:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c4ff:	74 0f                	je     c001c510 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c501:	31 c0                	xor    eax,eax
c001c503:	83 fa 03             	cmp    edx,0x3
c001c506:	0f 94 c0             	sete   al
c001c509:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c50d:	c3                   	ret    
c001c50e:	31 c0                	xor    eax,eax
c001c510:	c3                   	ret    
c001c511:	90                   	nop

c001c512 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c512:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c516:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c519:	0f ba e2 0f          	bt     edx,0xf
c001c51d:	72 f7                	jb     c001c516 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c51f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c522:	83 ca 10             	or     edx,0x10
c001c525:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c528:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c52b:	83 ca 01             	or     edx,0x1
c001c52e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c531:	c3                   	ret    

c001c532 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c532:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c536:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c539:	83 e2 fe             	and    edx,0xfffffffe
c001c53c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c53f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c542:	83 e2 ef             	and    edx,0xffffffef
c001c545:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c548:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c54b:	0f ba e2 0e          	bt     edx,0xe
c001c54f:	72 f7                	jb     c001c548 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c551:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c554:	0f ba e2 0f          	bt     edx,0xf
c001c558:	72 ee                	jb     c001c548 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c55a:	c3                   	ret    
c001c55b:	90                   	nop

c001c55c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c55c:	55                   	push   ebp
c001c55d:	57                   	push   edi
c001c55e:	56                   	push   esi
c001c55f:	53                   	push   ebx
c001c560:	83 ec 1c             	sub    esp,0x1c
c001c563:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c567:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c56b:	53                   	push   ebx
c001c56c:	56                   	push   esi
c001c56d:	e8 c0 ff ff ff       	call   c001c532 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c572:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c576:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c57c:	83 ec 0c             	sub    esp,0xc
c001c57f:	c1 e5 0a             	shl    ebp,0xa
c001c582:	01 e8                	add    eax,ebp
c001c584:	89 03                	mov    DWORD PTR [ebx],eax
c001c586:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c588:	68 00 04 00 00       	push   0x400
c001c58d:	6a 00                	push   0x0
c001c58f:	50                   	push   eax
c001c590:	e8 5b 3f fe ff       	call   c00004f0 <memset>
c001c595:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001c59b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001c59f:	01 e8                	add    eax,ebp
c001c5a1:	83 c4 1c             	add    esp,0x1c
c001c5a4:	89 03                	mov    DWORD PTR [ebx],eax
c001c5a6:	c1 e2 08             	shl    edx,0x8
c001c5a9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c5b0:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001c5b6:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c5bc:	01 f8                	add    eax,edi
c001c5be:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c5c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c5c4:	68 00 01 00 00       	push   0x100
c001c5c9:	6a 00                	push   0x0
c001c5cb:	50                   	push   eax
c001c5cc:	e8 1f 3f fe ff       	call   c00004f0 <memset>
c001c5d1:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001c5d7:	01 fa                	add    edx,edi
c001c5d9:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c5dd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001c5e0:	c1 e7 0d             	shl    edi,0xd
c001c5e3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c5ea:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001c5f0:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001c5f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c5fa:	31 ff                	xor    edi,edi
c001c5fc:	83 c4 10             	add    esp,0x10
c001c5ff:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001c605:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c609:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c60f:	83 c5 20             	add    ebp,0x20
c001c612:	01 f8                	add    eax,edi
c001c614:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c617:	52                   	push   edx
c001c618:	68 00 01 00 00       	push   0x100
c001c61d:	6a 00                	push   0x0
c001c61f:	50                   	push   eax
c001c620:	e8 cb 3e fe ff       	call   c00004f0 <memset>
c001c625:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c629:	83 c4 10             	add    esp,0x10
c001c62c:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001c632:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001c639:	01 f8                	add    eax,edi
c001c63b:	81 c7 00 01 00 00    	add    edi,0x100
c001c641:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c644:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001c64a:	75 b3                	jne    c001c5ff <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001c64c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c653:	50                   	push   eax
c001c654:	50                   	push   eax
c001c655:	53                   	push   ebx
c001c656:	56                   	push   esi
c001c657:	e8 b6 fe ff ff       	call   c001c512 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c65c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c663:	83 c4 2c             	add    esp,0x2c
c001c666:	5b                   	pop    ebx
c001c667:	5e                   	pop    esi
c001c668:	5f                   	pop    edi
c001c669:	5d                   	pop    ebp
c001c66a:	c3                   	ret    
c001c66b:	90                   	nop

c001c66c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001c66c:	55                   	push   ebp
c001c66d:	57                   	push   edi
c001c66e:	56                   	push   esi
c001c66f:	53                   	push   ebx
c001c670:	31 db                	xor    ebx,ebx
c001c672:	83 ec 0c             	sub    esp,0xc
c001c675:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c679:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001c67d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001c680:	f7 c7 01 00 00 00    	test   edi,0x1
c001c686:	74 7a                	je     c001c702 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c688:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c68c:	89 d8                	mov    eax,ebx
c001c68e:	c1 e0 07             	shl    eax,0x7
c001c691:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001c698:	55                   	push   ebp
c001c699:	56                   	push   esi
c001c69a:	e8 2b fe ff ff       	call   c001c4ca <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001c69f:	5a                   	pop    edx
c001c6a0:	83 f8 01             	cmp    eax,0x1
c001c6a3:	59                   	pop    ecx
c001c6a4:	75 21                	jne    c001c6c7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001c6a6:	50                   	push   eax
c001c6a7:	53                   	push   ebx
c001c6a8:	55                   	push   ebp
c001c6a9:	56                   	push   esi
c001c6aa:	e8 ad fe ff ff       	call   c001c55c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c6af:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c6b6:	e8 fb b3 fe ff       	call   c0007ab6 <malloc>
c001c6bb:	89 c5                	mov    ebp,eax
c001c6bd:	89 04 24             	mov    DWORD PTR [esp],eax
c001c6c0:	e8 99 10 00 00       	call   c001d75e <SATA::SATA()>
c001c6c5:	eb 24                	jmp    c001c6eb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001c6c7:	83 f8 04             	cmp    eax,0x4
c001c6ca:	75 36                	jne    c001c702 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c6cc:	51                   	push   ecx
c001c6cd:	53                   	push   ebx
c001c6ce:	55                   	push   ebp
c001c6cf:	56                   	push   esi
c001c6d0:	e8 87 fe ff ff       	call   c001c55c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c6d5:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001c6dc:	e8 d5 b3 fe ff       	call   c0007ab6 <malloc>
c001c6e1:	89 c5                	mov    ebp,eax
c001c6e3:	89 04 24             	mov    DWORD PTR [esp],eax
c001c6e6:	e8 d5 17 00 00       	call   c001dec0 <SATAPI::SATAPI()>
c001c6eb:	58                   	pop    eax
c001c6ec:	5a                   	pop    edx
c001c6ed:	55                   	push   ebp
c001c6ee:	56                   	push   esi
c001c6ef:	e8 22 00 ff ff       	call   c000c716 <Device::addChild(Device*)>
c001c6f4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001c6f7:	56                   	push   esi
c001c6f8:	6a 00                	push   0x0
c001c6fa:	53                   	push   ebx
c001c6fb:	55                   	push   ebp
c001c6fc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c6ff:	83 c4 20             	add    esp,0x20
c001c702:	d1 ef                	shr    edi,1
c001c704:	43                   	inc    ebx
c001c705:	83 fb 20             	cmp    ebx,0x20
c001c708:	0f 85 72 ff ff ff    	jne    c001c680 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001c70e:	83 c4 0c             	add    esp,0xc
c001c711:	5b                   	pop    ebx
c001c712:	5e                   	pop    esi
c001c713:	5f                   	pop    edi
c001c714:	5d                   	pop    ebp
c001c715:	c3                   	ret    

c001c716 <SATABus::open(int, int, void*)>:
c001c716:	83 ec 14             	sub    esp,0x14
c001c719:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c71d:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001c723:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001c729:	52                   	push   edx
c001c72a:	50                   	push   eax
c001c72b:	e8 3c ff ff ff       	call   c001c66c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001c730:	31 c0                	xor    eax,eax
c001c732:	83 c4 1c             	add    esp,0x1c
c001c735:	c3                   	ret    

c001c736 <ATA::close(int, int, void*)>:
c001c736:	83 ec 0c             	sub    esp,0xc
c001c739:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c73d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c743:	85 c0                	test   eax,eax
c001c745:	74 0c                	je     c001c753 <ATA::close(int, int, void*)+0x1d>
c001c747:	83 ec 0c             	sub    esp,0xc
c001c74a:	8b 10                	mov    edx,DWORD PTR [eax]
c001c74c:	50                   	push   eax
c001c74d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c750:	83 c4 10             	add    esp,0x10
c001c753:	31 c0                	xor    eax,eax
c001c755:	83 c4 0c             	add    esp,0xc
c001c758:	c3                   	ret    
c001c759:	90                   	nop

c001c75a <ATA::powerSaving(PowerSavingLevel)>:
c001c75a:	c3                   	ret    
c001c75b:	90                   	nop

c001c75c <ATA::ATA()>:
c001c75c:	83 ec 0c             	sub    esp,0xc
c001c75f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c763:	83 ec 04             	sub    esp,0x4
c001c766:	68 00 02 00 00       	push   0x200
c001c76b:	68 3d 2e 02 c0       	push   0xc0022e3d
c001c770:	50                   	push   eax
c001c771:	e8 6c 03 ff ff       	call   c000cae2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c776:	83 c4 10             	add    esp,0x10
c001c779:	ba b0 2d 02 c0       	mov    edx,0xc0022db0
c001c77e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c782:	89 10                	mov    DWORD PTR [eax],edx
c001c784:	90                   	nop
c001c785:	83 c4 0c             	add    esp,0xc
c001c788:	c3                   	ret    
c001c789:	90                   	nop

c001c78a <ATA::flush(bool)>:
c001c78a:	53                   	push   ebx
c001c78b:	83 ec 08             	sub    esp,0x8
c001c78e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c792:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c797:	83 f8 01             	cmp    eax,0x1
c001c79a:	19 c0                	sbb    eax,eax
c001c79c:	83 e0 fd             	and    eax,0xfffffffd
c001c79f:	05 ea 00 00 00       	add    eax,0xea
c001c7a4:	50                   	push   eax
c001c7a5:	6a 07                	push   0x7
c001c7a7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c7ae:	50                   	push   eax
c001c7af:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c7b5:	e8 16 f1 ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c7ba:	83 c4 0c             	add    esp,0xc
c001c7bd:	6a 00                	push   0x0
c001c7bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c7c6:	50                   	push   eax
c001c7c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c7cd:	e8 e6 fb ff ff       	call   c001c3b8 <IDE::polling(unsigned char, unsigned int)>
c001c7d2:	83 c4 18             	add    esp,0x18
c001c7d5:	5b                   	pop    ebx
c001c7d6:	c3                   	ret    
c001c7d7:	90                   	nop

c001c7d8 <ATA::readyForCommand()>:
c001c7d8:	56                   	push   esi
c001c7d9:	53                   	push   ebx
c001c7da:	53                   	push   ebx
c001c7db:	31 db                	xor    ebx,ebx
c001c7dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c7e1:	51                   	push   ecx
c001c7e2:	6a 0c                	push   0xc
c001c7e4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c7eb:	50                   	push   eax
c001c7ec:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c7f2:	e8 99 f1 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001c7f7:	83 c4 10             	add    esp,0x10
c001c7fa:	a8 88                	test   al,0x88
c001c7fc:	74 1f                	je     c001c81d <ATA::readyForCommand()+0x45>
c001c7fe:	43                   	inc    ebx
c001c7ff:	83 fb 63             	cmp    ebx,0x63
c001c802:	7e dd                	jle    c001c7e1 <ATA::readyForCommand()+0x9>
c001c804:	83 ec 0c             	sub    esp,0xc
c001c807:	6a 0a                	push   0xa
c001c809:	e8 26 97 ff ff       	call   c0015f34 <milliTenthSleep(unsigned int)>
c001c80e:	83 c4 10             	add    esp,0x10
c001c811:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c817:	75 c8                	jne    c001c7e1 <ATA::readyForCommand()+0x9>
c001c819:	31 c0                	xor    eax,eax
c001c81b:	eb 02                	jmp    c001c81f <ATA::readyForCommand()+0x47>
c001c81d:	b0 01                	mov    al,0x1
c001c81f:	5a                   	pop    edx
c001c820:	5b                   	pop    ebx
c001c821:	5e                   	pop    esi
c001c822:	c3                   	ret    
c001c823:	90                   	nop

c001c824 <ATA::access(unsigned long long, int, void*, bool)>:
c001c824:	55                   	push   ebp
c001c825:	57                   	push   edi
c001c826:	56                   	push   esi
c001c827:	53                   	push   ebx
c001c828:	83 ec 2c             	sub    esp,0x2c
c001c82b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c82f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c833:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c837:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c83b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c83f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c843:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c847:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c84d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c851:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c857:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c85b:	c1 e0 06             	shl    eax,0x6
c001c85e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c866:	74 5d                	je     c001c8c5 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c868:	89 fa                	mov    edx,edi
c001c86a:	89 f0                	mov    eax,esi
c001c86c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c870:	c1 ea 1c             	shr    edx,0x1c
c001c873:	89 d1                	mov    ecx,edx
c001c875:	09 c1                	or     ecx,eax
c001c877:	74 25                	je     c001c89e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c879:	31 ed                	xor    ebp,ebp
c001c87b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c882:	89 fa                	mov    edx,edi
c001c884:	89 f0                	mov    eax,esi
c001c886:	0f ad d0             	shrd   eax,edx,cl
c001c889:	d3 ea                	shr    edx,cl
c001c88b:	f6 c1 20             	test   cl,0x20
c001c88e:	74 02                	je     c001c892 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c890:	89 d0                	mov    eax,edx
c001c892:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c896:	45                   	inc    ebp
c001c897:	83 fd 06             	cmp    ebp,0x6
c001c89a:	75 df                	jne    c001c87b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c89c:	eb 76                	jmp    c001c914 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c89e:	89 f0                	mov    eax,esi
c001c8a0:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c8a5:	89 fa                	mov    edx,edi
c001c8a7:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c8ae:	0f ac d0 10          	shrd   eax,edx,0x10
c001c8b2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c8b7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c8bb:	c1 ee 18             	shr    esi,0x18
c001c8be:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c8c3:	eb 56                	jmp    c001c91b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c8c5:	6a 00                	push   0x0
c001c8c7:	6a 3f                	push   0x3f
c001c8c9:	57                   	push   edi
c001c8ca:	56                   	push   esi
c001c8cb:	e8 b0 2a 00 00       	call   c001f380 <__umoddi3>
c001c8d0:	83 c4 10             	add    esp,0x10
c001c8d3:	40                   	inc    eax
c001c8d4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c8d8:	6a 00                	push   0x0
c001c8da:	68 f0 03 00 00       	push   0x3f0
c001c8df:	57                   	push   edi
c001c8e0:	56                   	push   esi
c001c8e1:	e8 9a 29 00 00       	call   c001f280 <__udivdi3>
c001c8e6:	83 c4 10             	add    esp,0x10
c001c8e9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c8ee:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c8f5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c8fa:	6a 00                	push   0x0
c001c8fc:	6a 3f                	push   0x3f
c001c8fe:	57                   	push   edi
c001c8ff:	56                   	push   esi
c001c900:	e8 7b 29 00 00       	call   c001f280 <__udivdi3>
c001c905:	83 c4 10             	add    esp,0x10
c001c908:	83 e0 0f             	and    eax,0xf
c001c90b:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c910:	89 c6                	mov    esi,eax
c001c912:	eb 07                	jmp    c001c91b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c914:	31 f6                	xor    esi,esi
c001c916:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c91b:	bf 01 00 00 00       	mov    edi,0x1
c001c920:	50                   	push   eax
c001c921:	6a 00                	push   0x0
c001c923:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c92a:	50                   	push   eax
c001c92b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c92f:	e8 a4 f1 ff ff       	call   c001bad8 <IDE::enableIRQs(unsigned char, bool)>
c001c934:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c937:	e8 9c fe ff ff       	call   c001c7d8 <ATA::readyForCommand()>
c001c93c:	83 c4 10             	add    esp,0x10
c001c93f:	84 c0                	test   al,al
c001c941:	0f 84 69 02 00 00    	je     c001cbb0 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001c947:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c94d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c953:	c1 e0 04             	shl    eax,0x4
c001c956:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c95d:	09 c6                	or     esi,eax
c001c95f:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001c964:	75 05                	jne    c001c96b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c966:	83 ce a0             	or     esi,0xffffffa0
c001c969:	eb 03                	jmp    c001c96e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c96b:	83 ce e0             	or     esi,0xffffffe0
c001c96e:	89 f0                	mov    eax,esi
c001c970:	0f b6 f0             	movzx  esi,al
c001c973:	56                   	push   esi
c001c974:	6a 06                	push   0x6
c001c976:	51                   	push   ecx
c001c977:	52                   	push   edx
c001c978:	e8 53 ef ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c97d:	83 c4 10             	add    esp,0x10
c001c980:	6a 00                	push   0x0
c001c982:	6a 01                	push   0x1
c001c984:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c98b:	50                   	push   eax
c001c98c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c992:	e8 39 ef ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c997:	83 c4 10             	add    esp,0x10
c001c99a:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001c99f:	83 f8 02             	cmp    eax,0x2
c001c9a2:	75 6e                	jne    c001ca12 <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001c9a4:	6a 00                	push   0x0
c001c9a6:	6a 08                	push   0x8
c001c9a8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9af:	50                   	push   eax
c001c9b0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9b6:	e8 15 ef ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9bb:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c9c0:	50                   	push   eax
c001c9c1:	6a 09                	push   0x9
c001c9c3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9ca:	50                   	push   eax
c001c9cb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9d1:	e8 fa ee ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9d6:	83 c4 20             	add    esp,0x20
c001c9d9:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c9de:	50                   	push   eax
c001c9df:	6a 0a                	push   0xa
c001c9e1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9e8:	50                   	push   eax
c001c9e9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9ef:	e8 dc ee ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9f4:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c9f9:	50                   	push   eax
c001c9fa:	6a 0b                	push   0xb
c001c9fc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca03:	50                   	push   eax
c001ca04:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca0a:	e8 c1 ee ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca0f:	83 c4 20             	add    esp,0x20
c001ca12:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ca17:	50                   	push   eax
c001ca18:	6a 02                	push   0x2
c001ca1a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca21:	50                   	push   eax
c001ca22:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca28:	e8 a3 ee ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca2d:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ca32:	50                   	push   eax
c001ca33:	6a 03                	push   0x3
c001ca35:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca3c:	50                   	push   eax
c001ca3d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca43:	e8 88 ee ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca48:	83 c4 20             	add    esp,0x20
c001ca4b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001ca50:	50                   	push   eax
c001ca51:	6a 04                	push   0x4
c001ca53:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca5a:	50                   	push   eax
c001ca5b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca61:	e8 6a ee ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca66:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ca6b:	50                   	push   eax
c001ca6c:	6a 05                	push   0x5
c001ca6e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca75:	50                   	push   eax
c001ca76:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca7c:	e8 4f ee ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca81:	83 c4 20             	add    esp,0x20
c001ca84:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ca89:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001ca8e:	74 11                	je     c001caa1 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001ca90:	b8 30 00 00 00       	mov    eax,0x30
c001ca95:	83 fa 02             	cmp    edx,0x2
c001ca98:	75 16                	jne    c001cab0 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001ca9a:	b8 34 00 00 00       	mov    eax,0x34
c001ca9f:	eb 0f                	jmp    c001cab0 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001caa1:	b8 20 00 00 00       	mov    eax,0x20
c001caa6:	83 fa 02             	cmp    edx,0x2
c001caa9:	75 05                	jne    c001cab0 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001caab:	b8 24 00 00 00       	mov    eax,0x24
c001cab0:	50                   	push   eax
c001cab1:	6a 07                	push   0x7
c001cab3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001caba:	50                   	push   eax
c001cabb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cac1:	e8 0a ee ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cac6:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001caca:	83 c4 10             	add    esp,0x10
c001cacd:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001cad2:	85 f6                	test   esi,esi
c001cad4:	0f 84 b3 00 00 00    	je     c001cb8d <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001cada:	50                   	push   eax
c001cadb:	6a 01                	push   0x1
c001cadd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cae4:	50                   	push   eax
c001cae5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001caeb:	e8 c8 f8 ff ff       	call   c001c3b8 <IDE::polling(unsigned char, unsigned int)>
c001caf0:	83 c4 10             	add    esp,0x10
c001caf3:	0f b6 f8             	movzx  edi,al
c001caf6:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cafc:	85 ff                	test   edi,edi
c001cafe:	74 1d                	je     c001cb1d <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001cb00:	57                   	push   edi
c001cb01:	0f b6 d2             	movzx  edx,dl
c001cb04:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cb0b:	50                   	push   eax
c001cb0c:	52                   	push   edx
c001cb0d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb13:	e8 e6 f7 ff ff       	call   c001c2fe <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cb18:	e9 90 00 00 00       	jmp    c001cbad <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001cb1d:	85 ed                	test   ebp,ebp
c001cb1f:	74 3b                	je     c001cb5c <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001cb21:	31 c9                	xor    ecx,ecx
c001cb23:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cb27:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cb2b:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001cb2f:	50                   	push   eax
c001cb30:	50                   	push   eax
c001cb31:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb38:	50                   	push   eax
c001cb39:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb3f:	e8 7a ed ff ff       	call   c001b8be <IDE::getBase(unsigned char)>
c001cb44:	89 c2                	mov    edx,eax
c001cb46:	89 f8                	mov    eax,edi
c001cb48:	66 ef                	out    dx,ax
c001cb4a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cb4e:	83 c4 10             	add    esp,0x10
c001cb51:	41                   	inc    ecx
c001cb52:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001cb58:	75 c9                	jne    c001cb23 <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001cb5a:	eb 23                	jmp    c001cb7f <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001cb5c:	0f b6 d2             	movzx  edx,dl
c001cb5f:	51                   	push   ecx
c001cb60:	51                   	push   ecx
c001cb61:	52                   	push   edx
c001cb62:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb68:	e8 51 ed ff ff       	call   c001b8be <IDE::getBase(unsigned char)>
c001cb6d:	b9 00 01 00 00       	mov    ecx,0x100
c001cb72:	89 c2                	mov    edx,eax
c001cb74:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cb78:	fc                   	cld    
c001cb79:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cb7c:	83 c4 10             	add    esp,0x10
c001cb7f:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001cb87:	4e                   	dec    esi
c001cb88:	e9 45 ff ff ff       	jmp    c001cad2 <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001cb8d:	31 ff                	xor    edi,edi
c001cb8f:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cb94:	74 1a                	je     c001cbb0 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001cb96:	50                   	push   eax
c001cb97:	50                   	push   eax
c001cb98:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001cb9d:	83 f8 02             	cmp    eax,0x2
c001cba0:	0f 94 c0             	sete   al
c001cba3:	0f b6 c0             	movzx  eax,al
c001cba6:	50                   	push   eax
c001cba7:	53                   	push   ebx
c001cba8:	e8 dd fb ff ff       	call   c001c78a <ATA::flush(bool)>
c001cbad:	83 c4 10             	add    esp,0x10
c001cbb0:	83 c4 2c             	add    esp,0x2c
c001cbb3:	89 f8                	mov    eax,edi
c001cbb5:	5b                   	pop    ebx
c001cbb6:	5e                   	pop    esi
c001cbb7:	5f                   	pop    edi
c001cbb8:	5d                   	pop    ebp
c001cbb9:	c3                   	ret    

c001cbba <ATA::detectCHS()>:
c001cbba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cbbe:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001cbc4:	c1 e0 06             	shl    eax,0x6
c001cbc7:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001cbcd:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cbd7:	c7 44 24 04 94 2d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022d94
c001cbdf:	e9 61 47 ff ff       	jmp    c0011345 <KePanic(char const*)>

c001cbe4 <ATA::open(int, int, void*)>:
c001cbe4:	53                   	push   ebx
c001cbe5:	83 ec 08             	sub    esp,0x8
c001cbe8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cbec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cbf0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cbf4:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cbfa:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cc00:	c1 e0 06             	shl    eax,0x6
c001cc03:	01 d0                	add    eax,edx
c001cc05:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cc0c:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cc12:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cc19:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cc23:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cc29:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cc30:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cc37:	75 0c                	jne    c001cc45 <ATA::open(int, int, void*)+0x61>
c001cc39:	83 ec 0c             	sub    esp,0xc
c001cc3c:	53                   	push   ebx
c001cc3d:	e8 78 ff ff ff       	call   c001cbba <ATA::detectCHS()>
c001cc42:	83 c4 10             	add    esp,0x10
c001cc45:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cc4b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cc51:	c1 e0 06             	shl    eax,0x6
c001cc54:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cc5b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cc65:	d1 e8                	shr    eax,1
c001cc67:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cc6d:	6a 04                	push   0x4
c001cc6f:	6a 0c                	push   0xc
c001cc71:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc78:	50                   	push   eax
c001cc79:	52                   	push   edx
c001cc7a:	e8 51 ec ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc7f:	90                   	nop
c001cc80:	90                   	nop
c001cc81:	6a 00                	push   0x0
c001cc83:	6a 0c                	push   0xc
c001cc85:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc8c:	50                   	push   eax
c001cc8d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc93:	e8 38 ec ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc98:	83 c4 14             	add    esp,0x14
c001cc9b:	53                   	push   ebx
c001cc9c:	e8 a9 fe fe ff       	call   c000cb4a <PhysicalDisk::startCache()>
c001cca1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cca4:	e8 e5 10 ff ff       	call   c000dd8e <createPartitionsForDisk(PhysicalDisk*)>
c001cca9:	31 c0                	xor    eax,eax
c001ccab:	83 c4 18             	add    esp,0x18
c001ccae:	5b                   	pop    ebx
c001ccaf:	c3                   	ret    

c001ccb0 <combineCharAndColour(char, unsigned char)>:
c001ccb0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ccb5:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001ccbb:	c1 e0 08             	shl    eax,0x8
c001ccbe:	09 d0                	or     eax,edx
c001ccc0:	c3                   	ret    

c001ccc1 <combineColours(unsigned char, unsigned char)>:
c001ccc1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ccc6:	c1 e0 04             	shl    eax,0x4
c001ccc9:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001cccd:	c3                   	ret    

c001ccce <ATA::read(unsigned long long, int, void*)>:
c001ccce:	55                   	push   ebp
c001cccf:	57                   	push   edi
c001ccd0:	56                   	push   esi
c001ccd1:	be 04 00 00 00       	mov    esi,0x4
c001ccd6:	53                   	push   ebx
c001ccd7:	83 ec 0c             	sub    esp,0xc
c001ccda:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ccde:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cce2:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cce5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cce9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cced:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ccf3:	0f 87 a1 01 00 00    	ja     c001ce9a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001ccf9:	be 06 00 00 00       	mov    esi,0x6
c001ccfe:	85 c9                	test   ecx,ecx
c001cd00:	0f 84 94 01 00 00    	je     c001ce9a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cd06:	55                   	push   ebp
c001cd07:	55                   	push   ebp
c001cd08:	6a 00                	push   0x0
c001cd0a:	51                   	push   ecx
c001cd0b:	53                   	push   ebx
c001cd0c:	52                   	push   edx
c001cd0d:	50                   	push   eax
c001cd0e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd12:	e8 0d fb ff ff       	call   c001c824 <ATA::access(unsigned long long, int, void*, bool)>
c001cd17:	83 c4 20             	add    esp,0x20
c001cd1a:	89 c6                	mov    esi,eax
c001cd1c:	85 c0                	test   eax,eax
c001cd1e:	0f 85 71 01 00 00    	jne    c001ce95 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001cd24:	03 1d b4 a0 02 c0    	add    ebx,DWORD PTR ds:0xc002a0b4
c001cd2a:	89 da                	mov    edx,ebx
c001cd2c:	50                   	push   eax
c001cd2d:	bd 10 27 00 00       	mov    ebp,0x2710
c001cd32:	50                   	push   eax
c001cd33:	89 1d b4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0b4,ebx
c001cd39:	6a 0f                	push   0xf
c001cd3b:	6a 00                	push   0x0
c001cd3d:	e8 7f ff ff ff       	call   c001ccc1 <combineColours(unsigned char, unsigned char)>
c001cd42:	59                   	pop    ecx
c001cd43:	b9 0a 00 00 00       	mov    ecx,0xa
c001cd48:	5b                   	pop    ebx
c001cd49:	0f b6 d8             	movzx  ebx,al
c001cd4c:	89 d0                	mov    eax,edx
c001cd4e:	53                   	push   ebx
c001cd4f:	99                   	cdq    
c001cd50:	f7 fd                	idiv   ebp
c001cd52:	99                   	cdq    
c001cd53:	f7 f9                	idiv   ecx
c001cd55:	83 c2 30             	add    edx,0x30
c001cd58:	0f b6 d2             	movzx  edx,dl
c001cd5b:	52                   	push   edx
c001cd5c:	e8 4f ff ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001cd61:	5f                   	pop    edi
c001cd62:	bf e8 03 00 00       	mov    edi,0x3e8
c001cd67:	5a                   	pop    edx
c001cd68:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cd6e:	53                   	push   ebx
c001cd6f:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cd74:	99                   	cdq    
c001cd75:	f7 ff                	idiv   edi
c001cd77:	99                   	cdq    
c001cd78:	f7 f9                	idiv   ecx
c001cd7a:	8d 42 30             	lea    eax,[edx+0x30]
c001cd7d:	0f b6 c0             	movzx  eax,al
c001cd80:	50                   	push   eax
c001cd81:	e8 2a ff ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001cd86:	5f                   	pop    edi
c001cd87:	bf 64 00 00 00       	mov    edi,0x64
c001cd8c:	5a                   	pop    edx
c001cd8d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cd93:	53                   	push   ebx
c001cd94:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cd99:	99                   	cdq    
c001cd9a:	f7 ff                	idiv   edi
c001cd9c:	99                   	cdq    
c001cd9d:	f7 f9                	idiv   ecx
c001cd9f:	8d 42 30             	lea    eax,[edx+0x30]
c001cda2:	0f b6 c0             	movzx  eax,al
c001cda5:	50                   	push   eax
c001cda6:	e8 05 ff ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001cdab:	5a                   	pop    edx
c001cdac:	5a                   	pop    edx
c001cdad:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cdb3:	53                   	push   ebx
c001cdb4:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cdb9:	99                   	cdq    
c001cdba:	f7 f9                	idiv   ecx
c001cdbc:	99                   	cdq    
c001cdbd:	f7 f9                	idiv   ecx
c001cdbf:	8d 42 30             	lea    eax,[edx+0x30]
c001cdc2:	0f b6 c0             	movzx  eax,al
c001cdc5:	50                   	push   eax
c001cdc6:	e8 e5 fe ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001cdcb:	5a                   	pop    edx
c001cdcc:	5a                   	pop    edx
c001cdcd:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cdd3:	53                   	push   ebx
c001cdd4:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cdd9:	99                   	cdq    
c001cdda:	f7 f9                	idiv   ecx
c001cddc:	83 c2 30             	add    edx,0x30
c001cddf:	0f b6 d2             	movzx  edx,dl
c001cde2:	52                   	push   edx
c001cde3:	e8 c8 fe ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001cde8:	5a                   	pop    edx
c001cde9:	5a                   	pop    edx
c001cdea:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cdf0:	53                   	push   ebx
c001cdf1:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cdf6:	99                   	cdq    
c001cdf7:	f7 fd                	idiv   ebp
c001cdf9:	99                   	cdq    
c001cdfa:	f7 f9                	idiv   ecx
c001cdfc:	8d 42 30             	lea    eax,[edx+0x30]
c001cdff:	0f b6 c0             	movzx  eax,al
c001ce02:	50                   	push   eax
c001ce03:	e8 a8 fe ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001ce08:	5d                   	pop    ebp
c001ce09:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ce0e:	5a                   	pop    edx
c001ce0f:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ce15:	53                   	push   ebx
c001ce16:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ce1b:	99                   	cdq    
c001ce1c:	f7 fd                	idiv   ebp
c001ce1e:	99                   	cdq    
c001ce1f:	f7 f9                	idiv   ecx
c001ce21:	8d 42 30             	lea    eax,[edx+0x30]
c001ce24:	0f b6 c0             	movzx  eax,al
c001ce27:	50                   	push   eax
c001ce28:	e8 83 fe ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001ce2d:	5d                   	pop    ebp
c001ce2e:	5a                   	pop    edx
c001ce2f:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001ce35:	53                   	push   ebx
c001ce36:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ce3b:	99                   	cdq    
c001ce3c:	f7 ff                	idiv   edi
c001ce3e:	99                   	cdq    
c001ce3f:	f7 f9                	idiv   ecx
c001ce41:	8d 42 30             	lea    eax,[edx+0x30]
c001ce44:	0f b6 c0             	movzx  eax,al
c001ce47:	50                   	push   eax
c001ce48:	e8 63 fe ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001ce4d:	5f                   	pop    edi
c001ce4e:	5d                   	pop    ebp
c001ce4f:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001ce55:	53                   	push   ebx
c001ce56:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ce5b:	99                   	cdq    
c001ce5c:	f7 f9                	idiv   ecx
c001ce5e:	99                   	cdq    
c001ce5f:	f7 f9                	idiv   ecx
c001ce61:	8d 42 30             	lea    eax,[edx+0x30]
c001ce64:	0f b6 c0             	movzx  eax,al
c001ce67:	50                   	push   eax
c001ce68:	e8 43 fe ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001ce6d:	5a                   	pop    edx
c001ce6e:	5f                   	pop    edi
c001ce6f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001ce75:	53                   	push   ebx
c001ce76:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ce7b:	99                   	cdq    
c001ce7c:	f7 f9                	idiv   ecx
c001ce7e:	83 c2 30             	add    edx,0x30
c001ce81:	0f b6 d2             	movzx  edx,dl
c001ce84:	52                   	push   edx
c001ce85:	e8 26 fe ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001ce8a:	83 c4 10             	add    esp,0x10
c001ce8d:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001ce93:	eb 05                	jmp    c001ce9a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001ce95:	be 01 00 00 00       	mov    esi,0x1
c001ce9a:	83 c4 0c             	add    esp,0xc
c001ce9d:	89 f0                	mov    eax,esi
c001ce9f:	5b                   	pop    ebx
c001cea0:	5e                   	pop    esi
c001cea1:	5f                   	pop    edi
c001cea2:	5d                   	pop    ebp
c001cea3:	c3                   	ret    

c001cea4 <ATA::write(unsigned long long, int, void*)>:
c001cea4:	55                   	push   ebp
c001cea5:	57                   	push   edi
c001cea6:	56                   	push   esi
c001cea7:	be 04 00 00 00       	mov    esi,0x4
c001ceac:	53                   	push   ebx
c001cead:	83 ec 0c             	sub    esp,0xc
c001ceb0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ceb4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ceb8:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cebb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cebf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cec3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cec9:	0f 87 9c 01 00 00    	ja     c001d06b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cecf:	be 06 00 00 00       	mov    esi,0x6
c001ced4:	85 c9                	test   ecx,ecx
c001ced6:	0f 84 8f 01 00 00    	je     c001d06b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cedc:	55                   	push   ebp
c001cedd:	55                   	push   ebp
c001cede:	6a 01                	push   0x1
c001cee0:	51                   	push   ecx
c001cee1:	53                   	push   ebx
c001cee2:	52                   	push   edx
c001cee3:	50                   	push   eax
c001cee4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cee8:	e8 37 f9 ff ff       	call   c001c824 <ATA::access(unsigned long long, int, void*, bool)>
c001ceed:	83 c4 20             	add    esp,0x20
c001cef0:	89 c6                	mov    esi,eax
c001cef2:	85 c0                	test   eax,eax
c001cef4:	0f 85 6c 01 00 00    	jne    c001d066 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001cefa:	01 1d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebx
c001cf00:	bd 10 27 00 00       	mov    ebp,0x2710
c001cf05:	50                   	push   eax
c001cf06:	50                   	push   eax
c001cf07:	6a 0f                	push   0xf
c001cf09:	6a 00                	push   0x0
c001cf0b:	e8 b1 fd ff ff       	call   c001ccc1 <combineColours(unsigned char, unsigned char)>
c001cf10:	5a                   	pop    edx
c001cf11:	0f b6 d8             	movzx  ebx,al
c001cf14:	59                   	pop    ecx
c001cf15:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf1a:	53                   	push   ebx
c001cf1b:	b9 0a 00 00 00       	mov    ecx,0xa
c001cf20:	99                   	cdq    
c001cf21:	f7 fd                	idiv   ebp
c001cf23:	99                   	cdq    
c001cf24:	f7 f9                	idiv   ecx
c001cf26:	8d 42 30             	lea    eax,[edx+0x30]
c001cf29:	0f b6 c0             	movzx  eax,al
c001cf2c:	50                   	push   eax
c001cf2d:	e8 7e fd ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001cf32:	5f                   	pop    edi
c001cf33:	bf e8 03 00 00       	mov    edi,0x3e8
c001cf38:	5a                   	pop    edx
c001cf39:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cf3f:	53                   	push   ebx
c001cf40:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf45:	99                   	cdq    
c001cf46:	f7 ff                	idiv   edi
c001cf48:	99                   	cdq    
c001cf49:	f7 f9                	idiv   ecx
c001cf4b:	8d 42 30             	lea    eax,[edx+0x30]
c001cf4e:	0f b6 c0             	movzx  eax,al
c001cf51:	50                   	push   eax
c001cf52:	e8 59 fd ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001cf57:	5f                   	pop    edi
c001cf58:	bf 64 00 00 00       	mov    edi,0x64
c001cf5d:	5a                   	pop    edx
c001cf5e:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cf64:	53                   	push   ebx
c001cf65:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf6a:	99                   	cdq    
c001cf6b:	f7 ff                	idiv   edi
c001cf6d:	99                   	cdq    
c001cf6e:	f7 f9                	idiv   ecx
c001cf70:	8d 42 30             	lea    eax,[edx+0x30]
c001cf73:	0f b6 c0             	movzx  eax,al
c001cf76:	50                   	push   eax
c001cf77:	e8 34 fd ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001cf7c:	5a                   	pop    edx
c001cf7d:	5a                   	pop    edx
c001cf7e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cf84:	53                   	push   ebx
c001cf85:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf8a:	99                   	cdq    
c001cf8b:	f7 f9                	idiv   ecx
c001cf8d:	99                   	cdq    
c001cf8e:	f7 f9                	idiv   ecx
c001cf90:	8d 42 30             	lea    eax,[edx+0x30]
c001cf93:	0f b6 c0             	movzx  eax,al
c001cf96:	50                   	push   eax
c001cf97:	e8 14 fd ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001cf9c:	5a                   	pop    edx
c001cf9d:	5a                   	pop    edx
c001cf9e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cfa4:	53                   	push   ebx
c001cfa5:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cfaa:	99                   	cdq    
c001cfab:	f7 f9                	idiv   ecx
c001cfad:	8d 42 30             	lea    eax,[edx+0x30]
c001cfb0:	0f b6 c0             	movzx  eax,al
c001cfb3:	50                   	push   eax
c001cfb4:	e8 f7 fc ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001cfb9:	5a                   	pop    edx
c001cfba:	5a                   	pop    edx
c001cfbb:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cfc1:	53                   	push   ebx
c001cfc2:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cfc7:	99                   	cdq    
c001cfc8:	f7 fd                	idiv   ebp
c001cfca:	99                   	cdq    
c001cfcb:	f7 f9                	idiv   ecx
c001cfcd:	8d 42 30             	lea    eax,[edx+0x30]
c001cfd0:	0f b6 c0             	movzx  eax,al
c001cfd3:	50                   	push   eax
c001cfd4:	e8 d7 fc ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001cfd9:	5d                   	pop    ebp
c001cfda:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cfdf:	5a                   	pop    edx
c001cfe0:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cfe6:	53                   	push   ebx
c001cfe7:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cfec:	99                   	cdq    
c001cfed:	f7 fd                	idiv   ebp
c001cfef:	99                   	cdq    
c001cff0:	f7 f9                	idiv   ecx
c001cff2:	8d 42 30             	lea    eax,[edx+0x30]
c001cff5:	0f b6 c0             	movzx  eax,al
c001cff8:	50                   	push   eax
c001cff9:	e8 b2 fc ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001cffe:	5d                   	pop    ebp
c001cfff:	5a                   	pop    edx
c001d000:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d006:	53                   	push   ebx
c001d007:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d00c:	99                   	cdq    
c001d00d:	f7 ff                	idiv   edi
c001d00f:	99                   	cdq    
c001d010:	f7 f9                	idiv   ecx
c001d012:	8d 42 30             	lea    eax,[edx+0x30]
c001d015:	0f b6 c0             	movzx  eax,al
c001d018:	50                   	push   eax
c001d019:	e8 92 fc ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001d01e:	5f                   	pop    edi
c001d01f:	5d                   	pop    ebp
c001d020:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d026:	53                   	push   ebx
c001d027:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d02c:	99                   	cdq    
c001d02d:	f7 f9                	idiv   ecx
c001d02f:	99                   	cdq    
c001d030:	f7 f9                	idiv   ecx
c001d032:	8d 42 30             	lea    eax,[edx+0x30]
c001d035:	0f b6 c0             	movzx  eax,al
c001d038:	50                   	push   eax
c001d039:	e8 72 fc ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001d03e:	5a                   	pop    edx
c001d03f:	5f                   	pop    edi
c001d040:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d046:	53                   	push   ebx
c001d047:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d04c:	99                   	cdq    
c001d04d:	f7 f9                	idiv   ecx
c001d04f:	83 c2 30             	add    edx,0x30
c001d052:	0f b6 d2             	movzx  edx,dl
c001d055:	52                   	push   edx
c001d056:	e8 55 fc ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001d05b:	83 c4 10             	add    esp,0x10
c001d05e:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d064:	eb 05                	jmp    c001d06b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d066:	be 01 00 00 00       	mov    esi,0x1
c001d06b:	83 c4 0c             	add    esp,0xc
c001d06e:	89 f0                	mov    eax,esi
c001d070:	5b                   	pop    ebx
c001d071:	5e                   	pop    esi
c001d072:	5f                   	pop    edi
c001d073:	5d                   	pop    ebp
c001d074:	c3                   	ret    
c001d075:	90                   	nop

c001d076 <ATAPI::write(unsigned long long, int, void*)>:
c001d076:	b8 03 00 00 00       	mov    eax,0x3
c001d07b:	c3                   	ret    

c001d07c <ATAPI::close(int, int, void*)>:
c001d07c:	83 ec 0c             	sub    esp,0xc
c001d07f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d083:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d089:	85 c0                	test   eax,eax
c001d08b:	74 0c                	je     c001d099 <ATAPI::close(int, int, void*)+0x1d>
c001d08d:	83 ec 0c             	sub    esp,0xc
c001d090:	8b 10                	mov    edx,DWORD PTR [eax]
c001d092:	50                   	push   eax
c001d093:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d096:	83 c4 10             	add    esp,0x10
c001d099:	31 c0                	xor    eax,eax
c001d09b:	83 c4 0c             	add    esp,0xc
c001d09e:	c3                   	ret    
c001d09f:	90                   	nop

c001d0a0 <ATAPI::ATAPI()>:
c001d0a0:	83 ec 0c             	sub    esp,0xc
c001d0a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0a7:	83 ec 04             	sub    esp,0x4
c001d0aa:	68 00 08 00 00       	push   0x800
c001d0af:	68 dd 2e 02 c0       	push   0xc0022edd
c001d0b4:	50                   	push   eax
c001d0b5:	e8 28 fa fe ff       	call   c000cae2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d0ba:	83 c4 10             	add    esp,0x10
c001d0bd:	ba f8 2d 02 c0       	mov    edx,0xc0022df8
c001d0c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0c6:	89 10                	mov    DWORD PTR [eax],edx
c001d0c8:	90                   	nop
c001d0c9:	83 c4 0c             	add    esp,0xc
c001d0cc:	c3                   	ret    
c001d0cd:	90                   	nop

c001d0ce <ATAPI::readyForCommand()>:
c001d0ce:	56                   	push   esi
c001d0cf:	53                   	push   ebx
c001d0d0:	53                   	push   ebx
c001d0d1:	31 db                	xor    ebx,ebx
c001d0d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d0d7:	51                   	push   ecx
c001d0d8:	6a 0c                	push   0xc
c001d0da:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d0e1:	50                   	push   eax
c001d0e2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d0e8:	e8 a3 e8 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001d0ed:	83 c4 10             	add    esp,0x10
c001d0f0:	a8 88                	test   al,0x88
c001d0f2:	74 25                	je     c001d119 <ATAPI::readyForCommand()+0x4b>
c001d0f4:	43                   	inc    ebx
c001d0f5:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d0fb:	7e da                	jle    c001d0d7 <ATAPI::readyForCommand()+0x9>
c001d0fd:	83 ec 0c             	sub    esp,0xc
c001d100:	68 5e 01 00 00       	push   0x15e
c001d105:	e8 2a 8e ff ff       	call   c0015f34 <milliTenthSleep(unsigned int)>
c001d10a:	83 c4 10             	add    esp,0x10
c001d10d:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d113:	75 c2                	jne    c001d0d7 <ATAPI::readyForCommand()+0x9>
c001d115:	31 c0                	xor    eax,eax
c001d117:	eb 02                	jmp    c001d11b <ATAPI::readyForCommand()+0x4d>
c001d119:	b0 01                	mov    al,0x1
c001d11b:	5a                   	pop    edx
c001d11c:	5b                   	pop    ebx
c001d11d:	5e                   	pop    esi
c001d11e:	c3                   	ret    
c001d11f:	90                   	nop

c001d120 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d120:	55                   	push   ebp
c001d121:	57                   	push   edi
c001d122:	56                   	push   esi
c001d123:	53                   	push   ebx
c001d124:	83 ec 20             	sub    esp,0x20
c001d127:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d12b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d12f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d133:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d137:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d13b:	6a 01                	push   0x1
c001d13d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d144:	50                   	push   eax
c001d145:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d14b:	e8 88 e9 ff ff       	call   c001bad8 <IDE::enableIRQs(unsigned char, bool)>
c001d150:	5e                   	pop    esi
c001d151:	58                   	pop    eax
c001d152:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d159:	50                   	push   eax
c001d15a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d160:	e8 45 e7 ff ff       	call   c001b8aa <IDE::prepareInterrupt(unsigned char)>
c001d165:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d168:	e8 61 ff ff ff       	call   c001d0ce <ATAPI::readyForCommand()>
c001d16d:	83 c4 10             	add    esp,0x10
c001d170:	84 c0                	test   al,al
c001d172:	75 0a                	jne    c001d17e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d174:	bb 01 00 00 00       	mov    ebx,0x1
c001d179:	e9 60 02 00 00       	jmp    c001d3de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d17e:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d184:	c1 e0 04             	shl    eax,0x4
c001d187:	0f b6 c0             	movzx  eax,al
c001d18a:	50                   	push   eax
c001d18b:	6a 06                	push   0x6
c001d18d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d194:	50                   	push   eax
c001d195:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d19b:	e8 30 e7 ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1a0:	6a 00                	push   0x0
c001d1a2:	6a 01                	push   0x1
c001d1a4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1ab:	50                   	push   eax
c001d1ac:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1b2:	e8 19 e7 ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1b7:	83 c4 20             	add    esp,0x20
c001d1ba:	0f b6 c3             	movzx  eax,bl
c001d1bd:	0f b6 df             	movzx  ebx,bh
c001d1c0:	50                   	push   eax
c001d1c1:	6a 04                	push   0x4
c001d1c3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1ca:	50                   	push   eax
c001d1cb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1d1:	e8 fa e6 ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1d6:	53                   	push   ebx
c001d1d7:	6a 05                	push   0x5
c001d1d9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1e0:	50                   	push   eax
c001d1e1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1e7:	e8 e4 e6 ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1ec:	83 c4 20             	add    esp,0x20
c001d1ef:	68 a0 00 00 00       	push   0xa0
c001d1f4:	6a 07                	push   0x7
c001d1f6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1fd:	50                   	push   eax
c001d1fe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d204:	e8 c7 e6 ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d209:	83 c4 0c             	add    esp,0xc
c001d20c:	6a 01                	push   0x1
c001d20e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d215:	50                   	push   eax
c001d216:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d21c:	e8 97 f1 ff ff       	call   c001c3b8 <IDE::polling(unsigned char, unsigned int)>
c001d221:	83 c4 10             	add    esp,0x10
c001d224:	0f b6 d8             	movzx  ebx,al
c001d227:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d22d:	85 db                	test   ebx,ebx
c001d22f:	74 20                	je     c001d251 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d231:	53                   	push   ebx
c001d232:	0f b6 c0             	movzx  eax,al
c001d235:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d23c:	52                   	push   edx
c001d23d:	50                   	push   eax
c001d23e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d244:	e8 b5 f0 ff ff       	call   c001c2fe <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d249:	83 c4 10             	add    esp,0x10
c001d24c:	e9 8d 01 00 00       	jmp    c001d3de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d251:	0f b6 c0             	movzx  eax,al
c001d254:	53                   	push   ebx
c001d255:	53                   	push   ebx
c001d256:	50                   	push   eax
c001d257:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d25d:	e8 5c e6 ff ff       	call   c001b8be <IDE::getBase(unsigned char)>
c001d262:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d266:	b9 06 00 00 00       	mov    ecx,0x6
c001d26b:	89 c2                	mov    edx,eax
c001d26d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d270:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d274:	83 c4 10             	add    esp,0x10
c001d277:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d27c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d280:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d286:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d28d:	85 db                	test   ebx,ebx
c001d28f:	0f 84 ec 00 00 00    	je     c001d381 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001d295:	51                   	push   ecx
c001d296:	51                   	push   ecx
c001d297:	52                   	push   edx
c001d298:	50                   	push   eax
c001d299:	e8 a0 e7 ff ff       	call   c001ba3e <IDE::waitInterrupt(unsigned char)>
c001d29e:	83 c4 10             	add    esp,0x10
c001d2a1:	84 c0                	test   al,al
c001d2a3:	0f 84 cb fe ff ff    	je     c001d174 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d2a9:	56                   	push   esi
c001d2aa:	56                   	push   esi
c001d2ab:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2b2:	50                   	push   eax
c001d2b3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2b9:	e8 ec e5 ff ff       	call   c001b8aa <IDE::prepareInterrupt(unsigned char)>
c001d2be:	83 c4 0c             	add    esp,0xc
c001d2c1:	6a 04                	push   0x4
c001d2c3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2ca:	50                   	push   eax
c001d2cb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2d1:	e8 ba e6 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001d2d6:	83 c4 0c             	add    esp,0xc
c001d2d9:	89 c6                	mov    esi,eax
c001d2db:	6a 05                	push   0x5
c001d2dd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2e4:	50                   	push   eax
c001d2e5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2eb:	e8 a0 e6 ff ff       	call   c001b990 <IDE::read(unsigned char, unsigned char)>
c001d2f0:	89 f1                	mov    ecx,esi
c001d2f2:	0f b6 c0             	movzx  eax,al
c001d2f5:	0f b6 f1             	movzx  esi,cl
c001d2f8:	c1 e0 08             	shl    eax,0x8
c001d2fb:	09 c6                	or     esi,eax
c001d2fd:	d1 fe                	sar    esi,1
c001d2ff:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d303:	83 c4 10             	add    esp,0x10
c001d306:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d30b:	74 41                	je     c001d34e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001d30d:	31 c9                	xor    ecx,ecx
c001d30f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d315:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d31c:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d320:	75 0a                	jne    c001d32c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001d322:	01 c9                	add    ecx,ecx
c001d324:	01 cd                	add    ebp,ecx
c001d326:	4b                   	dec    ebx
c001d327:	e9 54 ff ff ff       	jmp    c001d280 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001d32c:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d331:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d335:	51                   	push   ecx
c001d336:	51                   	push   ecx
c001d337:	52                   	push   edx
c001d338:	50                   	push   eax
c001d339:	e8 80 e5 ff ff       	call   c001b8be <IDE::getBase(unsigned char)>
c001d33e:	89 c2                	mov    edx,eax
c001d340:	89 f0                	mov    eax,esi
c001d342:	66 ef                	out    dx,ax
c001d344:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d348:	83 c4 10             	add    esp,0x10
c001d34b:	41                   	inc    ecx
c001d34c:	eb c1                	jmp    c001d30f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001d34e:	31 f6                	xor    esi,esi
c001d350:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d356:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d35d:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d361:	75 06                	jne    c001d369 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001d363:	01 f6                	add    esi,esi
c001d365:	01 f5                	add    ebp,esi
c001d367:	eb bd                	jmp    c001d326 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001d369:	51                   	push   ecx
c001d36a:	51                   	push   ecx
c001d36b:	52                   	push   edx
c001d36c:	50                   	push   eax
c001d36d:	e8 4c e5 ff ff       	call   c001b8be <IDE::getBase(unsigned char)>
c001d372:	89 c2                	mov    edx,eax
c001d374:	66 ed                	in     ax,dx
c001d376:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d37b:	83 c4 10             	add    esp,0x10
c001d37e:	46                   	inc    esi
c001d37f:	eb cf                	jmp    c001d350 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001d381:	51                   	push   ecx
c001d382:	51                   	push   ecx
c001d383:	52                   	push   edx
c001d384:	50                   	push   eax
c001d385:	e8 b4 e6 ff ff       	call   c001ba3e <IDE::waitInterrupt(unsigned char)>
c001d38a:	83 c4 10             	add    esp,0x10
c001d38d:	84 c0                	test   al,al
c001d38f:	0f 84 df fd ff ff    	je     c001d174 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d395:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d39a:	52                   	push   edx
c001d39b:	52                   	push   edx
c001d39c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d3a3:	50                   	push   eax
c001d3a4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d3aa:	e8 fb e4 ff ff       	call   c001b8aa <IDE::prepareInterrupt(unsigned char)>
c001d3af:	83 c4 10             	add    esp,0x10
c001d3b2:	50                   	push   eax
c001d3b3:	50                   	push   eax
c001d3b4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d3bb:	50                   	push   eax
c001d3bc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d3c2:	e8 f7 e4 ff ff       	call   c001b8be <IDE::getBase(unsigned char)>
c001d3c7:	8d 50 07             	lea    edx,[eax+0x7]
c001d3ca:	ec                   	in     al,dx
c001d3cb:	83 c4 10             	add    esp,0x10
c001d3ce:	a8 88                	test   al,0x88
c001d3d0:	74 0a                	je     c001d3dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001d3d2:	4b                   	dec    ebx
c001d3d3:	75 dd                	jne    c001d3b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001d3d5:	bb 02 00 00 00       	mov    ebx,0x2
c001d3da:	eb 02                	jmp    c001d3de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d3dc:	31 db                	xor    ebx,ebx
c001d3de:	83 c4 1c             	add    esp,0x1c
c001d3e1:	89 d8                	mov    eax,ebx
c001d3e3:	5b                   	pop    ebx
c001d3e4:	5e                   	pop    esi
c001d3e5:	5f                   	pop    edi
c001d3e6:	5d                   	pop    ebp
c001d3e7:	c3                   	ret    

c001d3e8 <ATAPI::diskRemoved()>:
c001d3e8:	53                   	push   ebx
c001d3e9:	83 ec 14             	sub    esp,0x14
c001d3ec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d3f0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d3f7:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d3fd:	e8 7c 06 ff ff       	call   c000da7e <LogicalDisk::unmount()>
c001d402:	58                   	pop    eax
c001d403:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d409:	e8 52 10 ff ff       	call   c000e460 <VCache::writeWriteBuffer()>
c001d40e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d414:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d418:	83 c4 18             	add    esp,0x18
c001d41b:	5b                   	pop    ebx
c001d41c:	e9 2f 10 ff ff       	jmp    c000e450 <VCache::invalidateReadBuffer()>
c001d421:	90                   	nop

c001d422 <ATAPI::eject()>:
c001d422:	57                   	push   edi
c001d423:	b9 03 00 00 00       	mov    ecx,0x3
c001d428:	53                   	push   ebx
c001d429:	83 ec 14             	sub    esp,0x14
c001d42c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d430:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d434:	fc                   	cld    
c001d435:	31 c0                	xor    eax,eax
c001d437:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d439:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d43e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d443:	50                   	push   eax
c001d444:	50                   	push   eax
c001d445:	6a 00                	push   0x0
c001d447:	6a 00                	push   0x0
c001d449:	6a 00                	push   0x0
c001d44b:	6a 02                	push   0x2
c001d44d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d451:	50                   	push   eax
c001d452:	53                   	push   ebx
c001d453:	e8 c8 fc ff ff       	call   c001d120 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d458:	83 c4 14             	add    esp,0x14
c001d45b:	53                   	push   ebx
c001d45c:	e8 87 ff ff ff       	call   c001d3e8 <ATAPI::diskRemoved()>
c001d461:	83 c4 24             	add    esp,0x24
c001d464:	31 c0                	xor    eax,eax
c001d466:	5b                   	pop    ebx
c001d467:	5f                   	pop    edi
c001d468:	c3                   	ret    
c001d469:	90                   	nop

c001d46a <ATAPI::diskInserted()>:
c001d46a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d46e:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d475:	c3                   	ret    

c001d476 <ATAPI::detectMedia()>:
c001d476:	56                   	push   esi
c001d477:	53                   	push   ebx
c001d478:	83 ec 28             	sub    esp,0x28
c001d47b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d47f:	6a 0c                	push   0xc
c001d481:	6a 00                	push   0x0
c001d483:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d487:	56                   	push   esi
c001d488:	e8 63 30 fe ff       	call   c00004f0 <memset>
c001d48d:	58                   	pop    eax
c001d48e:	5a                   	pop    edx
c001d48f:	6a 00                	push   0x0
c001d491:	6a 00                	push   0x0
c001d493:	6a 00                	push   0x0
c001d495:	6a 00                	push   0x0
c001d497:	56                   	push   esi
c001d498:	53                   	push   ebx
c001d499:	e8 82 fc ff ff       	call   c001d120 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d49e:	83 c4 1c             	add    esp,0x1c
c001d4a1:	6a 0c                	push   0xc
c001d4a3:	6a 00                	push   0x0
c001d4a5:	56                   	push   esi
c001d4a6:	e8 45 30 fe ff       	call   c00004f0 <memset>
c001d4ab:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d4b0:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d4b5:	59                   	pop    ecx
c001d4b6:	58                   	pop    eax
c001d4b7:	6a 01                	push   0x1
c001d4b9:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d4bd:	50                   	push   eax
c001d4be:	6a 00                	push   0x0
c001d4c0:	6a 12                	push   0x12
c001d4c2:	56                   	push   esi
c001d4c3:	53                   	push   ebx
c001d4c4:	e8 57 fc ff ff       	call   c001d120 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d4c9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d4cd:	83 c4 20             	add    esp,0x20
c001d4d0:	83 e0 7f             	and    eax,0x7f
c001d4d3:	83 f8 70             	cmp    eax,0x70
c001d4d6:	74 15                	je     c001d4ed <ATAPI::detectMedia()+0x77>
c001d4d8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d4df:	75 0c                	jne    c001d4ed <ATAPI::detectMedia()+0x77>
c001d4e1:	83 ec 0c             	sub    esp,0xc
c001d4e4:	53                   	push   ebx
c001d4e5:	e8 80 ff ff ff       	call   c001d46a <ATAPI::diskInserted()>
c001d4ea:	83 c4 10             	add    esp,0x10
c001d4ed:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d4f1:	83 e0 0f             	and    eax,0xf
c001d4f4:	83 f8 02             	cmp    eax,0x2
c001d4f7:	75 1b                	jne    c001d514 <ATAPI::detectMedia()+0x9e>
c001d4f9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d4fe:	75 2d                	jne    c001d52d <ATAPI::detectMedia()+0xb7>
c001d500:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d507:	74 24                	je     c001d52d <ATAPI::detectMedia()+0xb7>
c001d509:	83 ec 0c             	sub    esp,0xc
c001d50c:	53                   	push   ebx
c001d50d:	e8 d6 fe ff ff       	call   c001d3e8 <ATAPI::diskRemoved()>
c001d512:	eb 16                	jmp    c001d52a <ATAPI::detectMedia()+0xb4>
c001d514:	85 c0                	test   eax,eax
c001d516:	75 15                	jne    c001d52d <ATAPI::detectMedia()+0xb7>
c001d518:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d51f:	75 0c                	jne    c001d52d <ATAPI::detectMedia()+0xb7>
c001d521:	83 ec 0c             	sub    esp,0xc
c001d524:	53                   	push   ebx
c001d525:	e8 40 ff ff ff       	call   c001d46a <ATAPI::diskInserted()>
c001d52a:	83 c4 10             	add    esp,0x10
c001d52d:	83 c4 24             	add    esp,0x24
c001d530:	5b                   	pop    ebx
c001d531:	5e                   	pop    esi
c001d532:	c3                   	ret    
c001d533:	90                   	nop

c001d534 <ATAPI::open(int, int, void*)>:
c001d534:	56                   	push   esi
c001d535:	53                   	push   ebx
c001d536:	50                   	push   eax
c001d537:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d53b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d53f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d543:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d549:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d54f:	c1 e0 06             	shl    eax,0x6
c001d552:	01 d0                	add    eax,edx
c001d554:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d55b:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d561:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d568:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d572:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d578:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d57f:	6a 04                	push   0x4
c001d581:	6a 0c                	push   0xc
c001d583:	51                   	push   ecx
c001d584:	52                   	push   edx
c001d585:	e8 46 e3 ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d58a:	90                   	nop
c001d58b:	90                   	nop
c001d58c:	6a 00                	push   0x0
c001d58e:	6a 0c                	push   0xc
c001d590:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d597:	50                   	push   eax
c001d598:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d59e:	e8 2d e3 ff ff       	call   c001b8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5a3:	83 c4 14             	add    esp,0x14
c001d5a6:	68 78 01 00 00       	push   0x178
c001d5ab:	e8 06 a5 fe ff       	call   c0007ab6 <malloc>
c001d5b0:	83 c4 0c             	add    esp,0xc
c001d5b3:	89 c6                	mov    esi,eax
c001d5b5:	6a 00                	push   0x0
c001d5b7:	68 ff ff ff 7f       	push   0x7fffffff
c001d5bc:	6a 00                	push   0x0
c001d5be:	6a 00                	push   0x0
c001d5c0:	53                   	push   ebx
c001d5c1:	68 8f 2f 02 c0       	push   0xc0022f8f
c001d5c6:	50                   	push   eax
c001d5c7:	e8 f0 02 ff ff       	call   c000d8bc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d5cc:	83 c4 14             	add    esp,0x14
c001d5cf:	56                   	push   esi
c001d5d0:	e8 a7 03 ff ff       	call   c000d97c <LogicalDisk::assignDriveLetter()>
c001d5d5:	5a                   	pop    edx
c001d5d6:	0f be c0             	movsx  eax,al
c001d5d9:	59                   	pop    ecx
c001d5da:	50                   	push   eax
c001d5db:	68 e0 2d 02 c0       	push   0xc0022de0
c001d5e0:	e8 60 d3 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001d5e5:	58                   	pop    eax
c001d5e6:	5a                   	pop    edx
c001d5e7:	56                   	push   esi
c001d5e8:	53                   	push   ebx
c001d5e9:	e8 28 f1 fe ff       	call   c000c716 <Device::addChild(Device*)>
c001d5ee:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001d5f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d5f7:	e8 4e f5 fe ff       	call   c000cb4a <PhysicalDisk::startCache()>
c001d5fc:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d603:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d606:	e8 6b fe ff ff       	call   c001d476 <ATAPI::detectMedia()>
c001d60b:	83 c4 14             	add    esp,0x14
c001d60e:	31 c0                	xor    eax,eax
c001d610:	5b                   	pop    ebx
c001d611:	5e                   	pop    esi
c001d612:	c3                   	ret    
c001d613:	90                   	nop

c001d614 <ATAPI::read(unsigned long long, int, void*)>:
c001d614:	55                   	push   ebp
c001d615:	57                   	push   edi
c001d616:	56                   	push   esi
c001d617:	53                   	push   ebx
c001d618:	83 ec 1c             	sub    esp,0x1c
c001d61b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d61f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d623:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d627:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d62e:	74 3c                	je     c001d66c <ATAPI::read(unsigned long long, int, void*)+0x58>
c001d630:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d634:	b9 03 00 00 00       	mov    ecx,0x3
c001d639:	fc                   	cld    
c001d63a:	31 c0                	xor    eax,eax
c001d63c:	0f ce                	bswap  esi
c001d63e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d640:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d645:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001d649:	89 e8                	mov    eax,ebp
c001d64b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d64f:	50                   	push   eax
c001d650:	50                   	push   eax
c001d651:	55                   	push   ebp
c001d652:	c1 e5 0b             	shl    ebp,0xb
c001d655:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d659:	6a 00                	push   0x0
c001d65b:	55                   	push   ebp
c001d65c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d660:	50                   	push   eax
c001d661:	53                   	push   ebx
c001d662:	e8 b9 fa ff ff       	call   c001d120 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d667:	83 c4 20             	add    esp,0x20
c001d66a:	eb 1a                	jmp    c001d686 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001d66c:	83 ec 0c             	sub    esp,0xc
c001d66f:	53                   	push   ebx
c001d670:	e8 01 fe ff ff       	call   c001d476 <ATAPI::detectMedia()>
c001d675:	83 c4 10             	add    esp,0x10
c001d678:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d67f:	75 af                	jne    c001d630 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d681:	b8 02 00 00 00       	mov    eax,0x2
c001d686:	83 c4 1c             	add    esp,0x1c
c001d689:	5b                   	pop    ebx
c001d68a:	5e                   	pop    esi
c001d68b:	5f                   	pop    edi
c001d68c:	5d                   	pop    ebp
c001d68d:	c3                   	ret    

c001d68e <SATA::close(int, int, void*)>:
c001d68e:	83 ec 0c             	sub    esp,0xc
c001d691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d695:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d69b:	85 c0                	test   eax,eax
c001d69d:	74 0c                	je     c001d6ab <SATA::close(int, int, void*)+0x1d>
c001d69f:	83 ec 0c             	sub    esp,0xc
c001d6a2:	8b 10                	mov    edx,DWORD PTR [eax]
c001d6a4:	50                   	push   eax
c001d6a5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d6a8:	83 c4 10             	add    esp,0x10
c001d6ab:	31 c0                	xor    eax,eax
c001d6ad:	83 c4 0c             	add    esp,0xc
c001d6b0:	c3                   	ret    
c001d6b1:	90                   	nop

c001d6b2 <SATA::powerSaving(PowerSavingLevel)>:
c001d6b2:	c3                   	ret    
c001d6b3:	90                   	nop

c001d6b4 <SATA::open(int, int, void*)>:
c001d6b4:	56                   	push   esi
c001d6b5:	53                   	push   ebx
c001d6b6:	50                   	push   eax
c001d6b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d6bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d6bf:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d6c9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d6cf:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d6d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d6dd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d6e7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d6ed:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d6f4:	e8 c6 a6 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001d6f9:	89 c6                	mov    esi,eax
c001d6fb:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d701:	81 c6 00 10 00 00    	add    esi,0x1000
c001d707:	e8 b3 a6 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001d70c:	39 c6                	cmp    esi,eax
c001d70e:	74 10                	je     c001d720 <SATA::open(int, int, void*)+0x6c>
c001d710:	83 ec 0c             	sub    esp,0xc
c001d713:	68 28 2e 02 c0       	push   0xc0022e28
c001d718:	e8 28 3c ff ff       	call   c0011345 <KePanic(char const*)>
c001d71d:	83 c4 10             	add    esp,0x10
c001d720:	83 ec 0c             	sub    esp,0xc
c001d723:	6a 02                	push   0x2
c001d725:	e8 e3 be fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001d72a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d730:	6a 03                	push   0x3
c001d732:	50                   	push   eax
c001d733:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001d739:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001d73f:	e8 dc c5 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d744:	83 c4 14             	add    esp,0x14
c001d747:	53                   	push   ebx
c001d748:	e8 fd f3 fe ff       	call   c000cb4a <PhysicalDisk::startCache()>
c001d74d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d750:	e8 39 06 ff ff       	call   c000dd8e <createPartitionsForDisk(PhysicalDisk*)>
c001d755:	83 c4 14             	add    esp,0x14
c001d758:	31 c0                	xor    eax,eax
c001d75a:	5b                   	pop    ebx
c001d75b:	5e                   	pop    esi
c001d75c:	c3                   	ret    
c001d75d:	90                   	nop

c001d75e <SATA::SATA()>:
c001d75e:	83 ec 0c             	sub    esp,0xc
c001d761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d765:	83 ec 04             	sub    esp,0x4
c001d768:	68 00 02 00 00       	push   0x200
c001d76d:	68 3c 2e 02 c0       	push   0xc0022e3c
c001d772:	50                   	push   eax
c001d773:	e8 6a f3 fe ff       	call   c000cae2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d778:	83 c4 10             	add    esp,0x10
c001d77b:	ba ac 2e 02 c0       	mov    edx,0xc0022eac
c001d780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d784:	89 10                	mov    DWORD PTR [eax],edx
c001d786:	90                   	nop
c001d787:	83 c4 0c             	add    esp,0xc
c001d78a:	c3                   	ret    
c001d78b:	90                   	nop

c001d78c <SATA::access(unsigned long long, int, void*, bool)>:
c001d78c:	55                   	push   ebp
c001d78d:	57                   	push   edi
c001d78e:	56                   	push   esi
c001d78f:	53                   	push   ebx
c001d790:	83 ec 2c             	sub    esp,0x2c
c001d793:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d797:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d79b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d79f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d7a3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d7a7:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001d7ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d7b0:	7e 10                	jle    c001d7c2 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001d7b2:	83 ec 0c             	sub    esp,0xc
c001d7b5:	68 4c 2e 02 c0       	push   0xc0022e4c
c001d7ba:	e8 86 3b ff ff       	call   c0011345 <KePanic(char const*)>
c001d7bf:	83 c4 10             	add    esp,0x10
c001d7c2:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d7c8:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d7ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d7d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d7d8:	89 d0                	mov    eax,edx
c001d7da:	c1 e0 07             	shl    eax,0x7
c001d7dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d7e1:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d7eb:	51                   	push   ecx
c001d7ec:	8d 42 02             	lea    eax,[edx+0x2]
c001d7ef:	51                   	push   ecx
c001d7f0:	c1 e0 07             	shl    eax,0x7
c001d7f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d7f7:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d7fb:	50                   	push   eax
c001d7fc:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001d802:	e8 91 ec ff ff       	call   c001c498 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d807:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d80b:	83 c4 10             	add    esp,0x10
c001d80e:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001d813:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d817:	0f 84 57 01 00 00    	je     c001d974 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d81d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d821:	c1 e0 09             	shl    eax,0x9
c001d824:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d829:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d82d:	74 0e                	je     c001d83d <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001d82f:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001d835:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d839:	89 c1                	mov    ecx,eax
c001d83b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d83d:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d843:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d847:	8d 42 02             	lea    eax,[edx+0x2]
c001d84a:	c1 e0 07             	shl    eax,0x7
c001d84d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d851:	8b 00                	mov    eax,DWORD PTR [eax]
c001d853:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d859:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d85f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d863:	c1 e1 05             	shl    ecx,0x5
c001d866:	01 c8                	add    eax,ecx
c001d868:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d86c:	83 e1 01             	and    ecx,0x1
c001d86f:	89 ce                	mov    esi,ecx
c001d871:	8a 08                	mov    cl,BYTE PTR [eax]
c001d873:	c1 e6 06             	shl    esi,0x6
c001d876:	83 e1 bf             	and    ecx,0xffffffbf
c001d879:	09 f1                	or     ecx,esi
c001d87b:	88 08                	mov    BYTE PTR [eax],cl
c001d87d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d87f:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001d885:	81 c9 05 00 01 00    	or     ecx,0x10005
c001d88b:	89 08                	mov    DWORD PTR [eax],ecx
c001d88d:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d893:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001d899:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001d89f:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001d8a2:	50                   	push   eax
c001d8a3:	68 90 00 00 00       	push   0x90
c001d8a8:	6a 00                	push   0x0
c001d8aa:	56                   	push   esi
c001d8ab:	e8 40 2c fe ff       	call   c00004f0 <memset>
c001d8b0:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d8b6:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d8bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d8c0:	83 c4 10             	add    esp,0x10
c001d8c3:	48                   	dec    eax
c001d8c4:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d8c9:	89 c1                	mov    ecx,eax
c001d8cb:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d8d1:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d8d6:	09 c8                	or     eax,ecx
c001d8d8:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d8de:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001d8e4:	83 c8 80             	or     eax,0xffffff80
c001d8e7:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001d8ed:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d8f0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d8f4:	25 00 7f 00 00       	and    eax,0x7f00
c001d8f9:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d8fe:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d903:	66 89 06             	mov    WORD PTR [esi],ax
c001d906:	b0 35                	mov    al,0x35
c001d908:	75 02                	jne    c001d90c <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001d90a:	b0 25                	mov    al,0x25
c001d90c:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001d90f:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001d913:	89 e8                	mov    eax,ebp
c001d915:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d919:	c1 e8 10             	shr    eax,0x10
c001d91c:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d91f:	89 e8                	mov    eax,ebp
c001d921:	c1 e8 18             	shr    eax,0x18
c001d924:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001d927:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d92b:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001d92e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d932:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001d935:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d939:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001d93d:	89 d6                	mov    esi,edx
c001d93f:	31 c0                	xor    eax,eax
c001d941:	c1 e6 07             	shl    esi,0x7
c001d944:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d948:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001d94e:	80 e1 88             	and    cl,0x88
c001d951:	74 0a                	je     c001d95d <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001d953:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d958:	74 0a                	je     c001d964 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001d95a:	40                   	inc    eax
c001d95b:	eb eb                	jmp    c001d948 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001d95d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d962:	75 17                	jne    c001d97b <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001d964:	83 ec 0c             	sub    esp,0xc
c001d967:	68 85 2e 02 c0       	push   0xc0022e85
c001d96c:	e8 d4 cf fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001d971:	83 c4 10             	add    esp,0x10
c001d974:	b8 01 00 00 00       	mov    eax,0x1
c001d979:	eb 5d                	jmp    c001d9d8 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001d97b:	b8 01 00 00 00       	mov    eax,0x1
c001d980:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001d984:	c1 e2 07             	shl    edx,0x7
c001d987:	d3 e0                	shl    eax,cl
c001d989:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001d98d:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001d993:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001d999:	85 c8                	test   eax,ecx
c001d99b:	74 16                	je     c001d9b3 <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001d99d:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001d9a3:	0f ba e1 1e          	bt     ecx,0x1e
c001d9a7:	73 ea                	jae    c001d993 <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001d9a9:	83 ec 0c             	sub    esp,0xc
c001d9ac:	68 93 2e 02 c0       	push   0xc0022e93
c001d9b1:	eb b9                	jmp    c001d96c <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001d9b3:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001d9b9:	0f ba e0 1e          	bt     eax,0x1e
c001d9bd:	72 b5                	jb     c001d974 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d9bf:	31 c0                	xor    eax,eax
c001d9c1:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d9c6:	75 10                	jne    c001d9d8 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001d9c8:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001d9ce:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001d9d2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d9d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d9d8:	83 c4 2c             	add    esp,0x2c
c001d9db:	5b                   	pop    ebx
c001d9dc:	5e                   	pop    esi
c001d9dd:	5f                   	pop    edi
c001d9de:	5d                   	pop    ebp
c001d9df:	c3                   	ret    

c001d9e0 <SATA::read(unsigned long long, int, void*)>:
c001d9e0:	55                   	push   ebp
c001d9e1:	57                   	push   edi
c001d9e2:	56                   	push   esi
c001d9e3:	be 04 00 00 00       	mov    esi,0x4
c001d9e8:	53                   	push   ebx
c001d9e9:	83 ec 0c             	sub    esp,0xc
c001d9ec:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d9f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d9f4:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d9f7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d9fb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d9ff:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001da05:	0f 87 1a 02 00 00    	ja     c001dc25 <SATA::read(unsigned long long, int, void*)+0x245>
c001da0b:	be 06 00 00 00       	mov    esi,0x6
c001da10:	85 c9                	test   ecx,ecx
c001da12:	0f 84 0d 02 00 00    	je     c001dc25 <SATA::read(unsigned long long, int, void*)+0x245>
c001da18:	56                   	push   esi
c001da19:	56                   	push   esi
c001da1a:	6a 00                	push   0x0
c001da1c:	51                   	push   ecx
c001da1d:	53                   	push   ebx
c001da1e:	52                   	push   edx
c001da1f:	50                   	push   eax
c001da20:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001da24:	e8 63 fd ff ff       	call   c001d78c <SATA::access(unsigned long long, int, void*, bool)>
c001da29:	83 c4 20             	add    esp,0x20
c001da2c:	89 c6                	mov    esi,eax
c001da2e:	85 c0                	test   eax,eax
c001da30:	0f 85 ea 01 00 00    	jne    c001dc20 <SATA::read(unsigned long long, int, void*)+0x240>
c001da36:	01 1d b4 a0 02 c0    	add    DWORD PTR ds:0xc002a0b4,ebx
c001da3c:	bb 0a 00 00 00       	mov    ebx,0xa
c001da41:	50                   	push   eax
c001da42:	50                   	push   eax
c001da43:	6a 0f                	push   0xf
c001da45:	6a 00                	push   0x0
c001da47:	e8 75 f2 ff ff       	call   c001ccc1 <combineColours(unsigned char, unsigned char)>
c001da4c:	5a                   	pop    edx
c001da4d:	0f b6 c0             	movzx  eax,al
c001da50:	59                   	pop    ecx
c001da51:	b9 10 27 00 00       	mov    ecx,0x2710
c001da56:	50                   	push   eax
c001da57:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001da5c:	99                   	cdq    
c001da5d:	f7 f9                	idiv   ecx
c001da5f:	99                   	cdq    
c001da60:	f7 fb                	idiv   ebx
c001da62:	8d 42 30             	lea    eax,[edx+0x30]
c001da65:	0f b6 c0             	movzx  eax,al
c001da68:	50                   	push   eax
c001da69:	e8 42 f2 ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001da6e:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001da74:	5f                   	pop    edi
c001da75:	5d                   	pop    ebp
c001da76:	bd e8 03 00 00       	mov    ebp,0x3e8
c001da7b:	6a 0f                	push   0xf
c001da7d:	6a 00                	push   0x0
c001da7f:	e8 3d f2 ff ff       	call   c001ccc1 <combineColours(unsigned char, unsigned char)>
c001da84:	5a                   	pop    edx
c001da85:	0f b6 c0             	movzx  eax,al
c001da88:	59                   	pop    ecx
c001da89:	50                   	push   eax
c001da8a:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001da8f:	99                   	cdq    
c001da90:	f7 fd                	idiv   ebp
c001da92:	99                   	cdq    
c001da93:	f7 fb                	idiv   ebx
c001da95:	8d 42 30             	lea    eax,[edx+0x30]
c001da98:	0f b6 c0             	movzx  eax,al
c001da9b:	50                   	push   eax
c001da9c:	e8 0f f2 ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001daa1:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001daa7:	5f                   	pop    edi
c001daa8:	bf 64 00 00 00       	mov    edi,0x64
c001daad:	58                   	pop    eax
c001daae:	6a 0f                	push   0xf
c001dab0:	6a 00                	push   0x0
c001dab2:	e8 0a f2 ff ff       	call   c001ccc1 <combineColours(unsigned char, unsigned char)>
c001dab7:	5a                   	pop    edx
c001dab8:	0f b6 c0             	movzx  eax,al
c001dabb:	59                   	pop    ecx
c001dabc:	50                   	push   eax
c001dabd:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dac2:	99                   	cdq    
c001dac3:	f7 ff                	idiv   edi
c001dac5:	99                   	cdq    
c001dac6:	f7 fb                	idiv   ebx
c001dac8:	8d 42 30             	lea    eax,[edx+0x30]
c001dacb:	0f b6 c0             	movzx  eax,al
c001dace:	50                   	push   eax
c001dacf:	e8 dc f1 ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001dad4:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dada:	58                   	pop    eax
c001dadb:	5a                   	pop    edx
c001dadc:	6a 0f                	push   0xf
c001dade:	6a 00                	push   0x0
c001dae0:	e8 dc f1 ff ff       	call   c001ccc1 <combineColours(unsigned char, unsigned char)>
c001dae5:	59                   	pop    ecx
c001dae6:	0f b6 c0             	movzx  eax,al
c001dae9:	5a                   	pop    edx
c001daea:	50                   	push   eax
c001daeb:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001daf0:	99                   	cdq    
c001daf1:	f7 fb                	idiv   ebx
c001daf3:	99                   	cdq    
c001daf4:	f7 fb                	idiv   ebx
c001daf6:	8d 42 30             	lea    eax,[edx+0x30]
c001daf9:	0f b6 c0             	movzx  eax,al
c001dafc:	50                   	push   eax
c001dafd:	e8 ae f1 ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001db02:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001db08:	59                   	pop    ecx
c001db09:	58                   	pop    eax
c001db0a:	6a 0f                	push   0xf
c001db0c:	6a 00                	push   0x0
c001db0e:	e8 ae f1 ff ff       	call   c001ccc1 <combineColours(unsigned char, unsigned char)>
c001db13:	5a                   	pop    edx
c001db14:	0f b6 c0             	movzx  eax,al
c001db17:	59                   	pop    ecx
c001db18:	50                   	push   eax
c001db19:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001db1e:	99                   	cdq    
c001db1f:	f7 fb                	idiv   ebx
c001db21:	8d 42 30             	lea    eax,[edx+0x30]
c001db24:	0f b6 c0             	movzx  eax,al
c001db27:	50                   	push   eax
c001db28:	e8 83 f1 ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001db2d:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001db33:	58                   	pop    eax
c001db34:	5a                   	pop    edx
c001db35:	6a 0f                	push   0xf
c001db37:	6a 00                	push   0x0
c001db39:	e8 83 f1 ff ff       	call   c001ccc1 <combineColours(unsigned char, unsigned char)>
c001db3e:	59                   	pop    ecx
c001db3f:	0f b6 c0             	movzx  eax,al
c001db42:	5a                   	pop    edx
c001db43:	b9 10 27 00 00       	mov    ecx,0x2710
c001db48:	50                   	push   eax
c001db49:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001db4e:	99                   	cdq    
c001db4f:	f7 f9                	idiv   ecx
c001db51:	99                   	cdq    
c001db52:	f7 fb                	idiv   ebx
c001db54:	8d 42 30             	lea    eax,[edx+0x30]
c001db57:	0f b6 c0             	movzx  eax,al
c001db5a:	50                   	push   eax
c001db5b:	e8 50 f1 ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001db60:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001db66:	59                   	pop    ecx
c001db67:	58                   	pop    eax
c001db68:	6a 0f                	push   0xf
c001db6a:	6a 00                	push   0x0
c001db6c:	e8 50 f1 ff ff       	call   c001ccc1 <combineColours(unsigned char, unsigned char)>
c001db71:	5a                   	pop    edx
c001db72:	0f b6 c0             	movzx  eax,al
c001db75:	59                   	pop    ecx
c001db76:	50                   	push   eax
c001db77:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001db7c:	99                   	cdq    
c001db7d:	f7 fd                	idiv   ebp
c001db7f:	99                   	cdq    
c001db80:	f7 fb                	idiv   ebx
c001db82:	8d 42 30             	lea    eax,[edx+0x30]
c001db85:	0f b6 c0             	movzx  eax,al
c001db88:	50                   	push   eax
c001db89:	e8 22 f1 ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001db8e:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001db94:	5d                   	pop    ebp
c001db95:	58                   	pop    eax
c001db96:	6a 0f                	push   0xf
c001db98:	6a 00                	push   0x0
c001db9a:	e8 22 f1 ff ff       	call   c001ccc1 <combineColours(unsigned char, unsigned char)>
c001db9f:	5a                   	pop    edx
c001dba0:	0f b6 c0             	movzx  eax,al
c001dba3:	59                   	pop    ecx
c001dba4:	50                   	push   eax
c001dba5:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dbaa:	99                   	cdq    
c001dbab:	f7 ff                	idiv   edi
c001dbad:	99                   	cdq    
c001dbae:	f7 fb                	idiv   ebx
c001dbb0:	8d 42 30             	lea    eax,[edx+0x30]
c001dbb3:	0f b6 c0             	movzx  eax,al
c001dbb6:	50                   	push   eax
c001dbb7:	e8 f4 f0 ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001dbbc:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dbc2:	5f                   	pop    edi
c001dbc3:	5d                   	pop    ebp
c001dbc4:	6a 0f                	push   0xf
c001dbc6:	6a 00                	push   0x0
c001dbc8:	e8 f4 f0 ff ff       	call   c001ccc1 <combineColours(unsigned char, unsigned char)>
c001dbcd:	5a                   	pop    edx
c001dbce:	0f b6 c0             	movzx  eax,al
c001dbd1:	59                   	pop    ecx
c001dbd2:	50                   	push   eax
c001dbd3:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dbd8:	99                   	cdq    
c001dbd9:	f7 fb                	idiv   ebx
c001dbdb:	99                   	cdq    
c001dbdc:	f7 fb                	idiv   ebx
c001dbde:	8d 42 30             	lea    eax,[edx+0x30]
c001dbe1:	0f b6 c0             	movzx  eax,al
c001dbe4:	50                   	push   eax
c001dbe5:	e8 c6 f0 ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001dbea:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001dbf0:	5f                   	pop    edi
c001dbf1:	5d                   	pop    ebp
c001dbf2:	6a 0f                	push   0xf
c001dbf4:	6a 00                	push   0x0
c001dbf6:	e8 c6 f0 ff ff       	call   c001ccc1 <combineColours(unsigned char, unsigned char)>
c001dbfb:	5a                   	pop    edx
c001dbfc:	0f b6 c0             	movzx  eax,al
c001dbff:	59                   	pop    ecx
c001dc00:	50                   	push   eax
c001dc01:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dc06:	99                   	cdq    
c001dc07:	f7 fb                	idiv   ebx
c001dc09:	83 c2 30             	add    edx,0x30
c001dc0c:	0f b6 d2             	movzx  edx,dl
c001dc0f:	52                   	push   edx
c001dc10:	e8 9b f0 ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001dc15:	83 c4 10             	add    esp,0x10
c001dc18:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dc1e:	eb 05                	jmp    c001dc25 <SATA::read(unsigned long long, int, void*)+0x245>
c001dc20:	be 01 00 00 00       	mov    esi,0x1
c001dc25:	83 c4 0c             	add    esp,0xc
c001dc28:	89 f0                	mov    eax,esi
c001dc2a:	5b                   	pop    ebx
c001dc2b:	5e                   	pop    esi
c001dc2c:	5f                   	pop    edi
c001dc2d:	5d                   	pop    ebp
c001dc2e:	c3                   	ret    
c001dc2f:	90                   	nop

c001dc30 <SATA::write(unsigned long long, int, void*)>:
c001dc30:	55                   	push   ebp
c001dc31:	b8 04 00 00 00       	mov    eax,0x4
c001dc36:	57                   	push   edi
c001dc37:	56                   	push   esi
c001dc38:	53                   	push   ebx
c001dc39:	83 ec 1c             	sub    esp,0x1c
c001dc3c:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001dc40:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001dc44:	8d 75 ff             	lea    esi,[ebp-0x1]
c001dc47:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001dc4b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001dc4f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001dc55:	0f 87 32 02 00 00    	ja     c001de8d <SATA::write(unsigned long long, int, void*)+0x25d>
c001dc5b:	b8 06 00 00 00       	mov    eax,0x6
c001dc60:	85 ff                	test   edi,edi
c001dc62:	0f 84 25 02 00 00    	je     c001de8d <SATA::write(unsigned long long, int, void*)+0x25d>
c001dc68:	89 ee                	mov    esi,ebp
c001dc6a:	c1 e6 09             	shl    esi,0x9
c001dc6d:	01 fe                	add    esi,edi
c001dc6f:	89 c8                	mov    eax,ecx
c001dc71:	89 da                	mov    edx,ebx
c001dc73:	83 c0 01             	add    eax,0x1
c001dc76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dc7a:	83 d2 00             	adc    edx,0x0
c001dc7d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dc81:	50                   	push   eax
c001dc82:	50                   	push   eax
c001dc83:	6a 01                	push   0x1
c001dc85:	57                   	push   edi
c001dc86:	81 c7 00 02 00 00    	add    edi,0x200
c001dc8c:	6a 01                	push   0x1
c001dc8e:	53                   	push   ebx
c001dc8f:	51                   	push   ecx
c001dc90:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dc94:	e8 f3 fa ff ff       	call   c001d78c <SATA::access(unsigned long long, int, void*, bool)>
c001dc99:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001dc9d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001dca1:	83 c4 20             	add    esp,0x20
c001dca4:	39 f7                	cmp    edi,esi
c001dca6:	75 c7                	jne    c001dc6f <SATA::write(unsigned long long, int, void*)+0x3f>
c001dca8:	bb 0a 00 00 00       	mov    ebx,0xa
c001dcad:	01 2d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebp
c001dcb3:	bd 10 27 00 00       	mov    ebp,0x2710
c001dcb8:	50                   	push   eax
c001dcb9:	50                   	push   eax
c001dcba:	6a 0f                	push   0xf
c001dcbc:	6a 00                	push   0x0
c001dcbe:	e8 fe ef ff ff       	call   c001ccc1 <combineColours(unsigned char, unsigned char)>
c001dcc3:	5a                   	pop    edx
c001dcc4:	0f b6 c0             	movzx  eax,al
c001dcc7:	59                   	pop    ecx
c001dcc8:	50                   	push   eax
c001dcc9:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dcce:	99                   	cdq    
c001dccf:	f7 fd                	idiv   ebp
c001dcd1:	99                   	cdq    
c001dcd2:	f7 fb                	idiv   ebx
c001dcd4:	8d 42 30             	lea    eax,[edx+0x30]
c001dcd7:	0f b6 c0             	movzx  eax,al
c001dcda:	50                   	push   eax
c001dcdb:	e8 d0 ef ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001dce0:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dce6:	5e                   	pop    esi
c001dce7:	5f                   	pop    edi
c001dce8:	bf e8 03 00 00       	mov    edi,0x3e8
c001dced:	6a 0f                	push   0xf
c001dcef:	6a 00                	push   0x0
c001dcf1:	e8 cb ef ff ff       	call   c001ccc1 <combineColours(unsigned char, unsigned char)>
c001dcf6:	5a                   	pop    edx
c001dcf7:	0f b6 c0             	movzx  eax,al
c001dcfa:	59                   	pop    ecx
c001dcfb:	50                   	push   eax
c001dcfc:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dd01:	99                   	cdq    
c001dd02:	f7 ff                	idiv   edi
c001dd04:	99                   	cdq    
c001dd05:	f7 fb                	idiv   ebx
c001dd07:	8d 42 30             	lea    eax,[edx+0x30]
c001dd0a:	0f b6 c0             	movzx  eax,al
c001dd0d:	50                   	push   eax
c001dd0e:	e8 9d ef ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001dd13:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dd19:	5e                   	pop    esi
c001dd1a:	be 64 00 00 00       	mov    esi,0x64
c001dd1f:	58                   	pop    eax
c001dd20:	6a 0f                	push   0xf
c001dd22:	6a 00                	push   0x0
c001dd24:	e8 98 ef ff ff       	call   c001ccc1 <combineColours(unsigned char, unsigned char)>
c001dd29:	5a                   	pop    edx
c001dd2a:	0f b6 c0             	movzx  eax,al
c001dd2d:	59                   	pop    ecx
c001dd2e:	50                   	push   eax
c001dd2f:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dd34:	99                   	cdq    
c001dd35:	f7 fe                	idiv   esi
c001dd37:	99                   	cdq    
c001dd38:	f7 fb                	idiv   ebx
c001dd3a:	8d 42 30             	lea    eax,[edx+0x30]
c001dd3d:	0f b6 c0             	movzx  eax,al
c001dd40:	50                   	push   eax
c001dd41:	e8 6a ef ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001dd46:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dd4c:	58                   	pop    eax
c001dd4d:	5a                   	pop    edx
c001dd4e:	6a 0f                	push   0xf
c001dd50:	6a 00                	push   0x0
c001dd52:	e8 6a ef ff ff       	call   c001ccc1 <combineColours(unsigned char, unsigned char)>
c001dd57:	59                   	pop    ecx
c001dd58:	0f b6 c0             	movzx  eax,al
c001dd5b:	5a                   	pop    edx
c001dd5c:	50                   	push   eax
c001dd5d:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dd62:	99                   	cdq    
c001dd63:	f7 fb                	idiv   ebx
c001dd65:	99                   	cdq    
c001dd66:	f7 fb                	idiv   ebx
c001dd68:	8d 42 30             	lea    eax,[edx+0x30]
c001dd6b:	0f b6 c0             	movzx  eax,al
c001dd6e:	50                   	push   eax
c001dd6f:	e8 3c ef ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001dd74:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001dd7a:	59                   	pop    ecx
c001dd7b:	58                   	pop    eax
c001dd7c:	6a 0f                	push   0xf
c001dd7e:	6a 00                	push   0x0
c001dd80:	e8 3c ef ff ff       	call   c001ccc1 <combineColours(unsigned char, unsigned char)>
c001dd85:	5a                   	pop    edx
c001dd86:	0f b6 c0             	movzx  eax,al
c001dd89:	59                   	pop    ecx
c001dd8a:	50                   	push   eax
c001dd8b:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dd90:	99                   	cdq    
c001dd91:	f7 fb                	idiv   ebx
c001dd93:	83 c2 30             	add    edx,0x30
c001dd96:	0f b6 d2             	movzx  edx,dl
c001dd99:	52                   	push   edx
c001dd9a:	e8 11 ef ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001dd9f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dda5:	58                   	pop    eax
c001dda6:	5a                   	pop    edx
c001dda7:	6a 0f                	push   0xf
c001dda9:	6a 00                	push   0x0
c001ddab:	e8 11 ef ff ff       	call   c001ccc1 <combineColours(unsigned char, unsigned char)>
c001ddb0:	59                   	pop    ecx
c001ddb1:	0f b6 c0             	movzx  eax,al
c001ddb4:	5a                   	pop    edx
c001ddb5:	50                   	push   eax
c001ddb6:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ddbb:	99                   	cdq    
c001ddbc:	f7 fd                	idiv   ebp
c001ddbe:	99                   	cdq    
c001ddbf:	f7 fb                	idiv   ebx
c001ddc1:	8d 42 30             	lea    eax,[edx+0x30]
c001ddc4:	0f b6 c0             	movzx  eax,al
c001ddc7:	50                   	push   eax
c001ddc8:	e8 e3 ee ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001ddcd:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ddd3:	59                   	pop    ecx
c001ddd4:	5d                   	pop    ebp
c001ddd5:	6a 0f                	push   0xf
c001ddd7:	6a 00                	push   0x0
c001ddd9:	e8 e3 ee ff ff       	call   c001ccc1 <combineColours(unsigned char, unsigned char)>
c001ddde:	5a                   	pop    edx
c001dddf:	0f b6 c0             	movzx  eax,al
c001dde2:	59                   	pop    ecx
c001dde3:	50                   	push   eax
c001dde4:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dde9:	99                   	cdq    
c001ddea:	f7 ff                	idiv   edi
c001ddec:	99                   	cdq    
c001dded:	f7 fb                	idiv   ebx
c001ddef:	8d 42 30             	lea    eax,[edx+0x30]
c001ddf2:	0f b6 c0             	movzx  eax,al
c001ddf5:	50                   	push   eax
c001ddf6:	e8 b5 ee ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001ddfb:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001de01:	5f                   	pop    edi
c001de02:	5d                   	pop    ebp
c001de03:	6a 0f                	push   0xf
c001de05:	6a 00                	push   0x0
c001de07:	e8 b5 ee ff ff       	call   c001ccc1 <combineColours(unsigned char, unsigned char)>
c001de0c:	5a                   	pop    edx
c001de0d:	0f b6 c0             	movzx  eax,al
c001de10:	59                   	pop    ecx
c001de11:	50                   	push   eax
c001de12:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001de17:	99                   	cdq    
c001de18:	f7 fe                	idiv   esi
c001de1a:	99                   	cdq    
c001de1b:	f7 fb                	idiv   ebx
c001de1d:	8d 42 30             	lea    eax,[edx+0x30]
c001de20:	0f b6 c0             	movzx  eax,al
c001de23:	50                   	push   eax
c001de24:	e8 87 ee ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001de29:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001de2f:	5e                   	pop    esi
c001de30:	5f                   	pop    edi
c001de31:	6a 0f                	push   0xf
c001de33:	6a 00                	push   0x0
c001de35:	e8 87 ee ff ff       	call   c001ccc1 <combineColours(unsigned char, unsigned char)>
c001de3a:	5d                   	pop    ebp
c001de3b:	0f b6 c0             	movzx  eax,al
c001de3e:	5a                   	pop    edx
c001de3f:	50                   	push   eax
c001de40:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001de45:	99                   	cdq    
c001de46:	f7 fb                	idiv   ebx
c001de48:	99                   	cdq    
c001de49:	f7 fb                	idiv   ebx
c001de4b:	8d 42 30             	lea    eax,[edx+0x30]
c001de4e:	0f b6 c0             	movzx  eax,al
c001de51:	50                   	push   eax
c001de52:	e8 59 ee ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001de57:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001de5d:	59                   	pop    ecx
c001de5e:	5e                   	pop    esi
c001de5f:	6a 0f                	push   0xf
c001de61:	6a 00                	push   0x0
c001de63:	e8 59 ee ff ff       	call   c001ccc1 <combineColours(unsigned char, unsigned char)>
c001de68:	5f                   	pop    edi
c001de69:	0f b6 c0             	movzx  eax,al
c001de6c:	5d                   	pop    ebp
c001de6d:	50                   	push   eax
c001de6e:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001de73:	99                   	cdq    
c001de74:	f7 fb                	idiv   ebx
c001de76:	83 c2 30             	add    edx,0x30
c001de79:	0f b6 d2             	movzx  edx,dl
c001de7c:	52                   	push   edx
c001de7d:	e8 2e ee ff ff       	call   c001ccb0 <combineCharAndColour(char, unsigned char)>
c001de82:	83 c4 10             	add    esp,0x10
c001de85:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001de8b:	31 c0                	xor    eax,eax
c001de8d:	83 c4 1c             	add    esp,0x1c
c001de90:	5b                   	pop    ebx
c001de91:	5e                   	pop    esi
c001de92:	5f                   	pop    edi
c001de93:	5d                   	pop    ebp
c001de94:	c3                   	ret    
c001de95:	90                   	nop

c001de96 <SATAPI::write(unsigned long long, int, void*)>:
c001de96:	b8 03 00 00 00       	mov    eax,0x3
c001de9b:	c3                   	ret    

c001de9c <SATAPI::close(int, int, void*)>:
c001de9c:	83 ec 0c             	sub    esp,0xc
c001de9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dea3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dea9:	85 c0                	test   eax,eax
c001deab:	74 0c                	je     c001deb9 <SATAPI::close(int, int, void*)+0x1d>
c001dead:	83 ec 0c             	sub    esp,0xc
c001deb0:	8b 10                	mov    edx,DWORD PTR [eax]
c001deb2:	50                   	push   eax
c001deb3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001deb6:	83 c4 10             	add    esp,0x10
c001deb9:	31 c0                	xor    eax,eax
c001debb:	83 c4 0c             	add    esp,0xc
c001debe:	c3                   	ret    
c001debf:	90                   	nop

c001dec0 <SATAPI::SATAPI()>:
c001dec0:	83 ec 0c             	sub    esp,0xc
c001dec3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dec7:	83 ec 04             	sub    esp,0x4
c001deca:	68 00 08 00 00       	push   0x800
c001decf:	68 dc 2e 02 c0       	push   0xc0022edc
c001ded4:	50                   	push   eax
c001ded5:	e8 08 ec fe ff       	call   c000cae2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001deda:	83 c4 10             	add    esp,0x10
c001dedd:	ba d0 2f 02 c0       	mov    edx,0xc0022fd0
c001dee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dee6:	89 10                	mov    DWORD PTR [eax],edx
c001dee8:	90                   	nop
c001dee9:	83 c4 0c             	add    esp,0xc
c001deec:	c3                   	ret    
c001deed:	90                   	nop

c001deee <SATAPI::diskRemoved()>:
c001deee:	c3                   	ret    
c001deef:	90                   	nop

c001def0 <SATAPI::diskInserted()>:
c001def0:	83 ec 18             	sub    esp,0x18
c001def3:	68 e8 2e 02 c0       	push   0xc0022ee8
c001def8:	e8 48 ca fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001defd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df01:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001df08:	83 c4 1c             	add    esp,0x1c
c001df0b:	c3                   	ret    

c001df0c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001df0c:	55                   	push   ebp
c001df0d:	57                   	push   edi
c001df0e:	56                   	push   esi
c001df0f:	53                   	push   ebx
c001df10:	83 ec 34             	sub    esp,0x34
c001df13:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001df17:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001df1b:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001df1f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001df23:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001df27:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001df2d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001df33:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001df37:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001df3d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001df41:	83 c0 02             	add    eax,0x2
c001df44:	c1 e0 07             	shl    eax,0x7
c001df47:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001df4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001df4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001df53:	c1 e0 07             	shl    eax,0x7
c001df56:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001df5a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001df5e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001df68:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001df6c:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001df72:	e8 21 e5 ff ff       	call   c001c498 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001df77:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001df7b:	83 c4 10             	add    esp,0x10
c001df7e:	b8 01 00 00 00       	mov    eax,0x1
c001df83:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001df88:	0f 84 53 02 00 00    	je     c001e1e1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001df8e:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001df94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df98:	8b 00                	mov    eax,DWORD PTR [eax]
c001df9a:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001dfa0:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001dfa6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dfaa:	c1 e1 05             	shl    ecx,0x5
c001dfad:	01 c8                	add    eax,ecx
c001dfaf:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dfb1:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001dfb7:	81 c9 25 00 01 00    	or     ecx,0x10025
c001dfbd:	89 08                	mov    DWORD PTR [eax],ecx
c001dfbf:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001dfc5:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001dfcb:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001dfd1:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001dfd4:	8d 7b 40             	lea    edi,[ebx+0x40]
c001dfd7:	50                   	push   eax
c001dfd8:	68 90 00 00 00       	push   0x90
c001dfdd:	6a 00                	push   0x0
c001dfdf:	53                   	push   ebx
c001dfe0:	e8 0b 25 fe ff       	call   c00004f0 <memset>
c001dfe5:	b9 0c 00 00 00       	mov    ecx,0xc
c001dfea:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001dfee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dff0:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001dff6:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001dffa:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e000:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e004:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e008:	48                   	dec    eax
c001e009:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e00e:	89 c1                	mov    ecx,eax
c001e010:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e016:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e01b:	09 c8                	or     eax,ecx
c001e01d:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e023:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e029:	83 c8 80             	or     eax,0xffffff80
c001e02c:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e032:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e035:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e039:	25 00 7f 00 00       	and    eax,0x7f00
c001e03e:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001e042:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e047:	66 89 03             	mov    WORD PTR [ebx],ax
c001e04a:	89 d0                	mov    eax,edx
c001e04c:	c1 ea 18             	shr    edx,0x18
c001e04f:	c1 e8 10             	shr    eax,0x10
c001e052:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001e055:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e058:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e05c:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e05f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e063:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e066:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e06a:	83 c4 10             	add    esp,0x10
c001e06d:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e071:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e075:	31 c0                	xor    eax,eax
c001e077:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001e07d:	80 e1 88             	and    cl,0x88
c001e080:	74 0a                	je     c001e08c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001e082:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e087:	74 0a                	je     c001e093 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001e089:	40                   	inc    eax
c001e08a:	eb eb                	jmp    c001e077 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001e08c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e091:	75 43                	jne    c001e0d6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001e093:	83 ec 0c             	sub    esp,0xc
c001e096:	68 00 2f 02 c0       	push   0xc0022f00
c001e09b:	e8 a5 c8 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e0a0:	58                   	pop    eax
c001e0a1:	5a                   	pop    edx
c001e0a2:	68 15 2f 02 c0       	push   0xc0022f15
c001e0a7:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001e0ad:	e8 f4 a9 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001e0b2:	59                   	pop    ecx
c001e0b3:	5b                   	pop    ebx
c001e0b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e0b8:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e0be:	e8 6f e4 ff ff       	call   c001c532 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e0c3:	5e                   	pop    esi
c001e0c4:	5f                   	pop    edi
c001e0c5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e0c9:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e0cf:	e8 3e e4 ff ff       	call   c001c512 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e0d4:	eb 48                	jmp    c001e11e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001e0d6:	be 01 00 00 00       	mov    esi,0x1
c001e0db:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e0df:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e0e3:	d3 e6                	shl    esi,cl
c001e0e5:	c1 e7 07             	shl    edi,0x7
c001e0e8:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001e0ee:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001e0f3:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e0f7:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e0fd:	85 c6                	test   esi,eax
c001e0ff:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e105:	0f 84 a3 00 00 00    	je     c001e1ae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001e10b:	0f ba e0 1e          	bt     eax,0x1e
c001e10f:	73 1a                	jae    c001e12b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001e111:	83 ec 0c             	sub    esp,0xc
c001e114:	68 27 2f 02 c0       	push   0xc0022f27
c001e119:	e8 27 c8 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e11e:	83 c4 10             	add    esp,0x10
c001e121:	b8 01 00 00 00       	mov    eax,0x1
c001e126:	e9 b6 00 00 00       	jmp    c001e1e1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e12b:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001e131:	83 f8 0d             	cmp    eax,0xd
c001e134:	77 0a                	ja     c001e140 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001e136:	83 ec 0c             	sub    esp,0xc
c001e139:	68 c8 00 00 00       	push   0xc8
c001e13e:	eb 28                	jmp    c001e168 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e140:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001e146:	83 f8 0d             	cmp    eax,0xd
c001e149:	77 0a                	ja     c001e155 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001e14b:	83 ec 0c             	sub    esp,0xc
c001e14e:	68 58 02 00 00       	push   0x258
c001e153:	eb 13                	jmp    c001e168 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e155:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e15b:	83 f8 06             	cmp    eax,0x6
c001e15e:	77 10                	ja     c001e170 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e160:	83 ec 0c             	sub    esp,0xc
c001e163:	68 dc 05 00 00       	push   0x5dc
c001e168:	e8 c7 7d ff ff       	call   c0015f34 <milliTenthSleep(unsigned int)>
c001e16d:	83 c4 10             	add    esp,0x10
c001e170:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e174:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e177:	75 06                	jne    c001e17f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e179:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e17d:	74 15                	je     c001e194 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e17f:	83 fb 06             	cmp    ebx,0x6
c001e182:	77 10                	ja     c001e194 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e184:	83 ec 0c             	sub    esp,0xc
c001e187:	68 c4 09 00 00       	push   0x9c4
c001e18c:	e8 a3 7d ff ff       	call   c0015f34 <milliTenthSleep(unsigned int)>
c001e191:	83 c4 10             	add    esp,0x10
c001e194:	43                   	inc    ebx
c001e195:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e19b:	0f 85 56 ff ff ff    	jne    c001e0f7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e1a1:	83 ec 0c             	sub    esp,0xc
c001e1a4:	68 3a 2f 02 c0       	push   0xc0022f3a
c001e1a9:	e9 6b ff ff ff       	jmp    c001e119 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e1ae:	0f ba e0 1e          	bt     eax,0x1e
c001e1b2:	73 0d                	jae    c001e1c1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001e1b4:	83 ec 0c             	sub    esp,0xc
c001e1b7:	68 4e 2f 02 c0       	push   0xc0022f4e
c001e1bc:	e9 58 ff ff ff       	jmp    c001e119 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e1c1:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e1c6:	74 17                	je     c001e1df <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e1c8:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e1cd:	74 10                	je     c001e1df <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e1cf:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e1d5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e1d9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e1dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e1df:	31 c0                	xor    eax,eax
c001e1e1:	83 c4 2c             	add    esp,0x2c
c001e1e4:	5b                   	pop    ebx
c001e1e5:	5e                   	pop    esi
c001e1e6:	5f                   	pop    edi
c001e1e7:	5d                   	pop    ebp
c001e1e8:	c3                   	ret    
c001e1e9:	90                   	nop

c001e1ea <SATAPI::eject()>:
c001e1ea:	57                   	push   edi
c001e1eb:	b9 03 00 00 00       	mov    ecx,0x3
c001e1f0:	83 ec 18             	sub    esp,0x18
c001e1f3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e1f7:	fc                   	cld    
c001e1f8:	31 c0                	xor    eax,eax
c001e1fa:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e1fc:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e201:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e206:	50                   	push   eax
c001e207:	6a 00                	push   0x0
c001e209:	6a 00                	push   0x0
c001e20b:	6a 00                	push   0x0
c001e20d:	6a 00                	push   0x0
c001e20f:	6a 02                	push   0x2
c001e211:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e215:	50                   	push   eax
c001e216:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e21a:	e8 ed fc ff ff       	call   c001df0c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e21f:	31 c0                	xor    eax,eax
c001e221:	83 c4 38             	add    esp,0x38
c001e224:	5f                   	pop    edi
c001e225:	c3                   	ret    

c001e226 <SATAPI::detectMedia()>:
c001e226:	53                   	push   ebx
c001e227:	83 ec 14             	sub    esp,0x14
c001e22a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e22e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e234:	e8 27 02 ff ff       	call   c000e460 <VCache::writeWriteBuffer()>
c001e239:	59                   	pop    ecx
c001e23a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e240:	e8 0b 02 ff ff       	call   c000e450 <VCache::invalidateReadBuffer()>
c001e245:	c7 04 24 63 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f63
c001e24c:	e8 f4 c6 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e251:	83 c4 10             	add    esp,0x10
c001e254:	31 c0                	xor    eax,eax
c001e256:	8b 14 85 80 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7780]
c001e25d:	85 d2                	test   edx,edx
c001e25f:	74 0f                	je     c001e270 <SATAPI::detectMedia()+0x4a>
c001e261:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e267:	75 07                	jne    c001e270 <SATAPI::detectMedia()+0x4a>
c001e269:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e270:	40                   	inc    eax
c001e271:	83 f8 1a             	cmp    eax,0x1a
c001e274:	75 e0                	jne    c001e256 <SATAPI::detectMedia()+0x30>
c001e276:	83 c4 08             	add    esp,0x8
c001e279:	5b                   	pop    ebx
c001e27a:	c3                   	ret    
c001e27b:	90                   	nop

c001e27c <SATAPI::open(int, int, void*)>:
c001e27c:	56                   	push   esi
c001e27d:	53                   	push   ebx
c001e27e:	51                   	push   ecx
c001e27f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e283:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e287:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e291:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e297:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e2a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2a5:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e2af:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e2b5:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e2bc:	e8 fe 9a fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e2c1:	89 c6                	mov    esi,eax
c001e2c3:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e2c9:	81 c6 00 10 00 00    	add    esi,0x1000
c001e2cf:	e8 eb 9a fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e2d4:	39 c6                	cmp    esi,eax
c001e2d6:	74 10                	je     c001e2e8 <SATAPI::open(int, int, void*)+0x6c>
c001e2d8:	83 ec 0c             	sub    esp,0xc
c001e2db:	68 78 2f 02 c0       	push   0xc0022f78
c001e2e0:	e8 60 30 ff ff       	call   c0011345 <KePanic(char const*)>
c001e2e5:	83 c4 10             	add    esp,0x10
c001e2e8:	83 ec 0c             	sub    esp,0xc
c001e2eb:	6a 02                	push   0x2
c001e2ed:	e8 1b b3 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001e2f2:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e2f8:	6a 03                	push   0x3
c001e2fa:	50                   	push   eax
c001e2fb:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e301:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001e307:	e8 14 ba fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e30c:	83 c4 14             	add    esp,0x14
c001e30f:	68 78 01 00 00       	push   0x178
c001e314:	e8 9d 97 fe ff       	call   c0007ab6 <malloc>
c001e319:	83 c4 0c             	add    esp,0xc
c001e31c:	89 c6                	mov    esi,eax
c001e31e:	6a 00                	push   0x0
c001e320:	68 ff ff ff 7f       	push   0x7fffffff
c001e325:	6a 00                	push   0x0
c001e327:	6a 00                	push   0x0
c001e329:	53                   	push   ebx
c001e32a:	68 8e 2f 02 c0       	push   0xc0022f8e
c001e32f:	50                   	push   eax
c001e330:	e8 87 f5 fe ff       	call   c000d8bc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e335:	83 c4 14             	add    esp,0x14
c001e338:	56                   	push   esi
c001e339:	e8 3e f6 fe ff       	call   c000d97c <LogicalDisk::assignDriveLetter()>
c001e33e:	5a                   	pop    edx
c001e33f:	0f be c0             	movsx  eax,al
c001e342:	59                   	pop    ecx
c001e343:	50                   	push   eax
c001e344:	68 e0 2d 02 c0       	push   0xc0022de0
c001e349:	e8 f7 c5 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e34e:	58                   	pop    eax
c001e34f:	5a                   	pop    edx
c001e350:	56                   	push   esi
c001e351:	53                   	push   ebx
c001e352:	e8 bf e3 fe ff       	call   c000c716 <Device::addChild(Device*)>
c001e357:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e35d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e360:	e8 e5 e7 fe ff       	call   c000cb4a <PhysicalDisk::startCache()>
c001e365:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e36c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e36f:	e8 b2 fe ff ff       	call   c001e226 <SATAPI::detectMedia()>
c001e374:	83 c4 14             	add    esp,0x14
c001e377:	31 c0                	xor    eax,eax
c001e379:	5b                   	pop    ebx
c001e37a:	5e                   	pop    esi
c001e37b:	c3                   	ret    

c001e37c <SATAPI::read(unsigned long long, int, void*)>:
c001e37c:	57                   	push   edi
c001e37d:	56                   	push   esi
c001e37e:	53                   	push   ebx
c001e37f:	83 ec 30             	sub    esp,0x30
c001e382:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e386:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001e38a:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e38e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e392:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e396:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e39a:	83 fe 04             	cmp    esi,0x4
c001e39d:	7e 10                	jle    c001e3af <SATAPI::read(unsigned long long, int, void*)+0x33>
c001e39f:	83 ec 0c             	sub    esp,0xc
c001e3a2:	68 9c 2f 02 c0       	push   0xc0022f9c
c001e3a7:	e8 99 2f ff ff       	call   c0011345 <KePanic(char const*)>
c001e3ac:	83 c4 10             	add    esp,0x10
c001e3af:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e3b5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e3bb:	51                   	push   ecx
c001e3bc:	50                   	push   eax
c001e3bd:	83 c0 02             	add    eax,0x2
c001e3c0:	c1 e0 07             	shl    eax,0x7
c001e3c3:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e3c9:	50                   	push   eax
c001e3ca:	52                   	push   edx
c001e3cb:	e8 8c e1 ff ff       	call   c001c55c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e3d0:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e3d4:	b9 03 00 00 00       	mov    ecx,0x3
c001e3d9:	fc                   	cld    
c001e3da:	31 c0                	xor    eax,eax
c001e3dc:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e3de:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e3e3:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e3e8:	83 c4 0c             	add    esp,0xc
c001e3eb:	6a 00                	push   0x0
c001e3ed:	6a 00                	push   0x0
c001e3ef:	6a 00                	push   0x0
c001e3f1:	6a 00                	push   0x0
c001e3f3:	6a 02                	push   0x2
c001e3f5:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e3f9:	50                   	push   eax
c001e3fa:	53                   	push   ebx
c001e3fb:	e8 0c fb ff ff       	call   c001df0c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e400:	83 c4 20             	add    esp,0x20
c001e403:	85 c0                	test   eax,eax
c001e405:	75 44                	jne    c001e44b <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001e407:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e40b:	b9 03 00 00 00       	mov    ecx,0x3
c001e410:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e412:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e416:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e41b:	0f c8                	bswap  eax
c001e41d:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e421:	89 f0                	mov    eax,esi
c001e423:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e427:	50                   	push   eax
c001e428:	56                   	push   esi
c001e429:	c1 e6 0b             	shl    esi,0xb
c001e42c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e430:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e434:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e438:	56                   	push   esi
c001e439:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e43d:	50                   	push   eax
c001e43e:	53                   	push   ebx
c001e43f:	e8 c8 fa ff ff       	call   c001df0c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e444:	83 c4 20             	add    esp,0x20
c001e447:	85 c0                	test   eax,eax
c001e449:	74 14                	je     c001e45f <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001e44b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e44f:	83 ec 0c             	sub    esp,0xc
c001e452:	53                   	push   ebx
c001e453:	e8 ce fd ff ff       	call   c001e226 <SATAPI::detectMedia()>
c001e458:	83 c4 10             	add    esp,0x10
c001e45b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e45f:	83 c4 30             	add    esp,0x30
c001e462:	5b                   	pop    ebx
c001e463:	5e                   	pop    esi
c001e464:	5f                   	pop    edi
c001e465:	c3                   	ret    

c001e466 <IOAPIC::close(int, int, void*)>:
c001e466:	b8 00 00 00 00       	mov    eax,0x0
c001e46b:	c3                   	ret    

c001e46c <apicGetBase()>:
c001e46c:	55                   	push   ebp
c001e46d:	89 e5                	mov    ebp,esp
c001e46f:	83 ec 18             	sub    esp,0x18
c001e472:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e477:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e47d:	83 e0 08             	and    eax,0x8
c001e480:	0f b6 c0             	movzx  eax,al
c001e483:	85 c0                	test   eax,eax
c001e485:	75 07                	jne    c001e48e <apicGetBase()+0x22>
c001e487:	b8 00 00 00 00       	mov    eax,0x0
c001e48c:	eb 21                	jmp    c001e4af <apicGetBase()+0x43>
c001e48e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e493:	83 ec 08             	sub    esp,0x8
c001e496:	6a 1b                	push   0x1b
c001e498:	50                   	push   eax
c001e499:	e8 22 8c fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001e49e:	83 c4 10             	add    esp,0x10
c001e4a1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e4a4:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e4a7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e4aa:	25 00 00 ff ff       	and    eax,0xffff0000
c001e4af:	c9                   	leave  
c001e4b0:	c3                   	ret    
c001e4b1:	90                   	nop

c001e4b2 <IOAPIC::IOAPIC()>:
c001e4b2:	83 ec 0c             	sub    esp,0xc
c001e4b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4b9:	83 ec 08             	sub    esp,0x8
c001e4bc:	68 00 30 02 c0       	push   0xc0023000
c001e4c1:	50                   	push   eax
c001e4c2:	e8 e7 e3 fe ff       	call   c000c8ae <Device::Device(char const*)>
c001e4c7:	83 c4 10             	add    esp,0x10
c001e4ca:	ba 10 30 02 c0       	mov    edx,0xc0023010
c001e4cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4d3:	89 10                	mov    DWORD PTR [eax],edx
c001e4d5:	90                   	nop
c001e4d6:	83 c4 0c             	add    esp,0xc
c001e4d9:	c3                   	ret    

c001e4da <apicOpen()>:
c001e4da:	55                   	push   ebp
c001e4db:	89 e5                	mov    ebp,esp
c001e4dd:	53                   	push   ebx
c001e4de:	83 ec 34             	sub    esp,0x34
c001e4e1:	a0 00 a1 02 c0       	mov    al,ds:0xc002a100
c001e4e6:	83 f0 01             	xor    eax,0x1
c001e4e9:	0f b6 c0             	movzx  eax,al
c001e4ec:	85 c0                	test   eax,eax
c001e4ee:	0f 84 a3 00 00 00    	je     c001e597 <apicOpen()+0xbd>
c001e4f4:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e4f8:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c001e4fd:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e501:	0f b6 c0             	movzx  eax,al
c001e504:	39 c2                	cmp    edx,eax
c001e506:	0f 83 84 00 00 00    	jae    c001e590 <apicOpen()+0xb6>
c001e50c:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e513:	83 ec 0c             	sub    esp,0xc
c001e516:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e519:	e8 98 95 fe ff       	call   c0007ab6 <malloc>
c001e51e:	83 c4 10             	add    esp,0x10
c001e521:	89 c3                	mov    ebx,eax
c001e523:	83 ec 0c             	sub    esp,0xc
c001e526:	53                   	push   ebx
c001e527:	e8 86 ff ff ff       	call   c001e4b2 <IOAPIC::IOAPIC()>
c001e52c:	83 c4 10             	add    esp,0x10
c001e52f:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e532:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e536:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e539:	89 14 85 e0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f20],edx
c001e540:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c001e545:	83 c0 01             	add    eax,0x1
c001e548:	a3 c0 a0 02 c0       	mov    ds:0xc002a0c0,eax
c001e54d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e552:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e558:	83 ec 08             	sub    esp,0x8
c001e55b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e55e:	50                   	push   eax
c001e55f:	e8 b2 e1 fe ff       	call   c000c716 <Device::addChild(Device*)>
c001e564:	83 c4 10             	add    esp,0x10
c001e567:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e56a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e56c:	83 c0 08             	add    eax,0x8
c001e56f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e571:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e575:	6a 00                	push   0x0
c001e577:	6a 00                	push   0x0
c001e579:	52                   	push   edx
c001e57a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e57d:	ff d0                	call   eax
c001e57f:	83 c4 10             	add    esp,0x10
c001e582:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e585:	83 c0 01             	add    eax,0x1
c001e588:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e58b:	e9 68 ff ff ff       	jmp    c001e4f8 <apicOpen()+0x1e>
c001e590:	c6 05 00 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a100,0x1
c001e597:	e8 d0 fe ff ff       	call   c001e46c <apicGetBase()>
c001e59c:	05 f0 00 00 00       	add    eax,0xf0
c001e5a1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e5a4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e5a7:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5a9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e5ac:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e5b3:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e5ba:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e5bd:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e5c0:	89 10                	mov    DWORD PTR [eax],edx
c001e5c2:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e5c9:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c001e5ce:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e5d1:	7d 7c                	jge    c001e64f <apicOpen()+0x175>
c001e5d3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e5d6:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e5dd:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e5e0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e5e3:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e5ea:	c1 e8 08             	shr    eax,0x8
c001e5ed:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001e5f1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e5f4:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e5fb:	c1 e8 18             	shr    eax,0x18
c001e5fe:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001e601:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001e605:	3d ff 00 00 00       	cmp    eax,0xff
c001e60a:	75 3a                	jne    c001e646 <apicOpen()+0x16c>
c001e60c:	e8 5b fe ff ff       	call   c001e46c <apicGetBase()>
c001e611:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001e615:	83 fa 01             	cmp    edx,0x1
c001e618:	75 07                	jne    c001e621 <apicOpen()+0x147>
c001e61a:	ba 60 03 00 00       	mov    edx,0x360
c001e61f:	eb 05                	jmp    c001e626 <apicOpen()+0x14c>
c001e621:	ba 50 03 00 00       	mov    edx,0x350
c001e626:	01 d0                	add    eax,edx
c001e628:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e62b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e62e:	8b 00                	mov    eax,DWORD PTR [eax]
c001e630:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001e633:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001e63a:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001e63e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e641:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e644:	89 10                	mov    DWORD PTR [eax],edx
c001e646:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001e64a:	e9 7a ff ff ff       	jmp    c001e5c9 <apicOpen()+0xef>
c001e64f:	90                   	nop
c001e650:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e653:	c9                   	leave  
c001e654:	c3                   	ret    
c001e655:	90                   	nop

c001e656 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e656:	55                   	push   ebp
c001e657:	89 e5                	mov    ebp,esp
c001e659:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e65c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e662:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e665:	72 1d                	jb     c001e684 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e667:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e66a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e670:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e673:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e679:	01 d0                	add    eax,edx
c001e67b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e67e:	73 04                	jae    c001e684 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e680:	b0 01                	mov    al,0x1
c001e682:	eb 02                	jmp    c001e686 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e684:	b0 00                	mov    al,0x0
c001e686:	5d                   	pop    ebp
c001e687:	c3                   	ret    

c001e688 <IOAPIC::read(int)>:
c001e688:	55                   	push   ebp
c001e689:	89 e5                	mov    ebp,esp
c001e68b:	83 ec 10             	sub    esp,0x10
c001e68e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e691:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e697:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e69a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e69d:	0f b6 d0             	movzx  edx,al
c001e6a0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e6a3:	89 10                	mov    DWORD PTR [eax],edx
c001e6a5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e6a8:	83 c0 10             	add    eax,0x10
c001e6ab:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6ad:	c9                   	leave  
c001e6ae:	c3                   	ret    
c001e6af:	90                   	nop

c001e6b0 <IOAPIC::open(int, int, void*)>:
c001e6b0:	55                   	push   ebp
c001e6b1:	89 e5                	mov    ebp,esp
c001e6b3:	57                   	push   edi
c001e6b4:	56                   	push   esi
c001e6b5:	53                   	push   ebx
c001e6b6:	83 ec 04             	sub    esp,0x4
c001e6b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6bc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e6bf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e6c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6c8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e6ce:	8b 14 85 20 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd73e0]
c001e6d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6d8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e6de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6e1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e6e7:	8b 14 85 a0 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7360]
c001e6ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6f1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e6f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6fa:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e700:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e703:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e709:	0f b6 f0             	movzx  esi,al
c001e70c:	89 d0                	mov    eax,edx
c001e70e:	ba 00 00 00 00       	mov    edx,0x0
c001e713:	89 c7                	mov    edi,eax
c001e715:	83 e7 ff             	and    edi,0xffffffff
c001e718:	89 f9                	mov    ecx,edi
c001e71a:	0f b6 da             	movzx  ebx,dl
c001e71d:	89 c8                	mov    eax,ecx
c001e71f:	89 da                	mov    edx,ebx
c001e721:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e724:	8d 5e 08             	lea    ebx,[esi+0x8]
c001e727:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e72b:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e72f:	83 e0 00             	and    eax,0x0
c001e732:	09 d0                	or     eax,edx
c001e734:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e738:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e73b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e741:	8d 50 01             	lea    edx,[eax+0x1]
c001e744:	88 d1                	mov    cl,dl
c001e746:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001e749:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001e74f:	0f b6 d0             	movzx  edx,al
c001e752:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e755:	83 c2 08             	add    edx,0x8
c001e758:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e75c:	0f b6 c9             	movzx  ecx,cl
c001e75f:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e765:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e769:	6a 01                	push   0x1
c001e76b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e76e:	e8 15 ff ff ff       	call   c001e688 <IOAPIC::read(int)>
c001e773:	83 c4 08             	add    esp,0x8
c001e776:	c1 f8 10             	sar    eax,0x10
c001e779:	0f b6 c0             	movzx  eax,al
c001e77c:	8d 50 01             	lea    edx,[eax+0x1]
c001e77f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e782:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e788:	b8 00 00 00 00       	mov    eax,0x0
c001e78d:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e790:	5b                   	pop    ebx
c001e791:	5e                   	pop    esi
c001e792:	5f                   	pop    edi
c001e793:	5d                   	pop    ebp
c001e794:	c3                   	ret    
c001e795:	90                   	nop

c001e796 <IOAPIC::write(int, int)>:
c001e796:	55                   	push   ebp
c001e797:	89 e5                	mov    ebp,esp
c001e799:	83 ec 10             	sub    esp,0x10
c001e79c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e79f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e7a5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e7a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e7ab:	0f b6 d0             	movzx  edx,al
c001e7ae:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e7b1:	89 10                	mov    DWORD PTR [eax],edx
c001e7b3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e7b6:	8d 50 10             	lea    edx,[eax+0x10]
c001e7b9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e7bc:	89 02                	mov    DWORD PTR [edx],eax
c001e7be:	90                   	nop
c001e7bf:	c9                   	leave  
c001e7c0:	c3                   	ret    
c001e7c1:	90                   	nop

c001e7c2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e7c2:	55                   	push   ebp
c001e7c3:	89 e5                	mov    ebp,esp
c001e7c5:	53                   	push   ebx
c001e7c6:	83 ec 2c             	sub    esp,0x2c
c001e7c9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e7cc:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e7cf:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e7d2:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e7d5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e7d8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e7db:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e7de:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e7e1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e7e4:	88 d8                	mov    al,bl
c001e7e6:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e7e9:	88 c8                	mov    al,cl
c001e7eb:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e7ee:	88 d0                	mov    al,dl
c001e7f0:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e7f3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e7f7:	83 c0 08             	add    eax,0x8
c001e7fa:	01 c0                	add    eax,eax
c001e7fc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e7ff:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e803:	83 c0 08             	add    eax,0x8
c001e806:	01 c0                	add    eax,eax
c001e808:	83 c0 01             	add    eax,0x1
c001e80b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e80e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e811:	50                   	push   eax
c001e812:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e815:	e8 6e fe ff ff       	call   c001e688 <IOAPIC::read(int)>
c001e81a:	83 c4 08             	add    esp,0x8
c001e81d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e820:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001e827:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e82a:	c1 e0 18             	shl    eax,0x18
c001e82d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001e830:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e833:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e836:	52                   	push   edx
c001e837:	50                   	push   eax
c001e838:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e83b:	e8 56 ff ff ff       	call   c001e796 <IOAPIC::write(int, int)>
c001e840:	83 c4 0c             	add    esp,0xc
c001e843:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e846:	50                   	push   eax
c001e847:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e84a:	e8 39 fe ff ff       	call   c001e688 <IOAPIC::read(int)>
c001e84f:	83 c4 08             	add    esp,0x8
c001e852:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e855:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001e85c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001e863:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001e86a:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001e86e:	85 c0                	test   eax,eax
c001e870:	74 09                	je     c001e87b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001e872:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001e879:	eb 07                	jmp    c001e882 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001e87b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001e882:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001e886:	85 c0                	test   eax,eax
c001e888:	74 09                	je     c001e893 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001e88a:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001e891:	eb 07                	jmp    c001e89a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001e893:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001e89a:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001e8a1:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001e8a5:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e8a8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e8ab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e8ae:	52                   	push   edx
c001e8af:	50                   	push   eax
c001e8b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e8b3:	e8 de fe ff ff       	call   c001e796 <IOAPIC::write(int, int)>
c001e8b8:	83 c4 0c             	add    esp,0xc
c001e8bb:	90                   	nop
c001e8bc:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e8bf:	c9                   	leave  
c001e8c0:	c3                   	ret    
c001e8c1:	66 90                	xchg   ax,ax
c001e8c3:	90                   	nop

c001e8c4 <APICTimer::close(int, int, void*)>:
c001e8c4:	b8 00 00 00 00       	mov    eax,0x0
c001e8c9:	c3                   	ret    
c001e8ca:	66 90                	xchg   ax,ax

c001e8cc <apicTimerHandler(regs*, void*)>:
c001e8cc:	83 ec 0c             	sub    esp,0xc
c001e8cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e8d3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e8d5:	b8 10 27 00 00       	mov    eax,0x2710
c001e8da:	ba 00 00 00 00       	mov    edx,0x0
c001e8df:	f7 f1                	div    ecx
c001e8e1:	83 ec 0c             	sub    esp,0xc
c001e8e4:	50                   	push   eax
c001e8e5:	e8 8e f8 fe ff       	call   c000e178 <timerHandler(unsigned int)>
c001e8ea:	83 c4 10             	add    esp,0x10
c001e8ed:	90                   	nop
c001e8ee:	83 c4 0c             	add    esp,0xc
c001e8f1:	c3                   	ret    
c001e8f2:	66 90                	xchg   ax,ax

c001e8f4 <APICTimer::open(int, int, void*)>:
c001e8f4:	83 ec 0c             	sub    esp,0xc
c001e8f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8fb:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8fd:	83 c0 24             	add    eax,0x24
c001e900:	8b 00                	mov    eax,DWORD PTR [eax]
c001e902:	83 ec 08             	sub    esp,0x8
c001e905:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e909:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e90d:	ff d0                	call   eax
c001e90f:	83 c4 10             	add    esp,0x10
c001e912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e916:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e91a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e924:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e928:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e92e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e932:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e938:	83 ec 0c             	sub    esp,0xc
c001e93b:	51                   	push   ecx
c001e93c:	6a 01                	push   0x1
c001e93e:	68 cc e8 01 c0       	push   0xc001e8cc
c001e943:	52                   	push   edx
c001e944:	50                   	push   eax
c001e945:	e8 78 dd fe ff       	call   c000c6c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e94a:	83 c4 20             	add    esp,0x20
c001e94d:	89 c2                	mov    edx,eax
c001e94f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e953:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e959:	b8 00 00 00 00       	mov    eax,0x0
c001e95e:	83 c4 0c             	add    esp,0xc
c001e961:	c3                   	ret    
c001e962:	66 90                	xchg   ax,ax

c001e964 <APICTimer::write(int)>:
c001e964:	83 ec 0c             	sub    esp,0xc
c001e967:	83 ec 0c             	sub    esp,0xc
c001e96a:	68 34 30 02 c0       	push   0xc0023034
c001e96f:	e8 d1 29 ff ff       	call   c0011345 <KePanic(char const*)>
c001e974:	83 c4 10             	add    esp,0x10
c001e977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e97b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e97f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e985:	90                   	nop
c001e986:	83 c4 0c             	add    esp,0xc
c001e989:	c3                   	ret    
c001e98a:	66 90                	xchg   ax,ax

c001e98c <APICTimer::APICTimer()>:
c001e98c:	83 ec 0c             	sub    esp,0xc
c001e98f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e993:	83 ec 08             	sub    esp,0x8
c001e996:	68 44 30 02 c0       	push   0xc0023044
c001e99b:	50                   	push   eax
c001e99c:	e8 0b f7 fe ff       	call   c000e0ac <Timer::Timer(char const*)>
c001e9a1:	83 c4 10             	add    esp,0x10
c001e9a4:	ba 58 30 02 c0       	mov    edx,0xc0023058
c001e9a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ad:	89 10                	mov    DWORD PTR [eax],edx
c001e9af:	90                   	nop
c001e9b0:	83 c4 0c             	add    esp,0xc
c001e9b3:	c3                   	ret    

c001e9b4 <PIT::write(int)>:
c001e9b4:	83 ec 10             	sub    esp,0x10
c001e9b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e9bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e9bf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e9c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e9c9:	a3 04 a1 02 c0       	mov    ds:0xc002a104,eax
c001e9ce:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e9d3:	89 c2                	mov    edx,eax
c001e9d5:	c1 fa 1f             	sar    edx,0x1f
c001e9d8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e9dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e9e0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e9e7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e9ec:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e9f0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e9f5:	ee                   	out    dx,al
c001e9f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9fa:	0f b6 c0             	movzx  eax,al
c001e9fd:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ea04:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ea08:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ea0c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ea11:	ee                   	out    dx,al
c001ea12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea16:	c1 f8 08             	sar    eax,0x8
c001ea19:	0f b6 c0             	movzx  eax,al
c001ea1c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ea23:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ea27:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ea2b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ea30:	ee                   	out    dx,al
c001ea31:	90                   	nop
c001ea32:	83 c4 10             	add    esp,0x10
c001ea35:	c3                   	ret    
c001ea36:	66 90                	xchg   ax,ax

c001ea38 <pitHandler(regs*, void*)>:
c001ea38:	83 ec 0c             	sub    esp,0xc
c001ea3b:	8b 0d 04 a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a104
c001ea41:	b8 10 27 00 00       	mov    eax,0x2710
c001ea46:	89 c2                	mov    edx,eax
c001ea48:	c1 fa 1f             	sar    edx,0x1f
c001ea4b:	f7 f9                	idiv   ecx
c001ea4d:	83 ec 0c             	sub    esp,0xc
c001ea50:	50                   	push   eax
c001ea51:	e8 22 f7 fe ff       	call   c000e178 <timerHandler(unsigned int)>
c001ea56:	83 c4 10             	add    esp,0x10
c001ea59:	90                   	nop
c001ea5a:	83 c4 0c             	add    esp,0xc
c001ea5d:	c3                   	ret    
c001ea5e:	66 90                	xchg   ax,ax

c001ea60 <PIT::open(int, int, void*)>:
c001ea60:	83 ec 0c             	sub    esp,0xc
c001ea63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea67:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea69:	83 c0 24             	add    eax,0x24
c001ea6c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea6e:	83 ec 08             	sub    esp,0x8
c001ea71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea79:	ff d0                	call   eax
c001ea7b:	83 c4 10             	add    esp,0x10
c001ea7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea82:	83 ec 0c             	sub    esp,0xc
c001ea85:	6a 00                	push   0x0
c001ea87:	6a 01                	push   0x1
c001ea89:	68 38 ea 01 c0       	push   0xc001ea38
c001ea8e:	6a 00                	push   0x0
c001ea90:	50                   	push   eax
c001ea91:	e8 2c dc fe ff       	call   c000c6c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ea96:	83 c4 20             	add    esp,0x20
c001ea99:	89 c2                	mov    edx,eax
c001ea9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea9f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001eaa5:	b8 00 00 00 00       	mov    eax,0x0
c001eaaa:	83 c4 0c             	add    esp,0xc
c001eaad:	c3                   	ret    
c001eaae:	66 90                	xchg   ax,ax

c001eab0 <PIT::close(int, int, void*)>:
c001eab0:	83 ec 0c             	sub    esp,0xc
c001eab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001eac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eac5:	6a 01                	push   0x1
c001eac7:	68 38 ea 01 c0       	push   0xc001ea38
c001eacc:	6a 00                	push   0x0
c001eace:	50                   	push   eax
c001eacf:	e8 24 dc fe ff       	call   c000c6f8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ead4:	83 c4 10             	add    esp,0x10
c001ead7:	b8 00 00 00 00       	mov    eax,0x0
c001eadc:	83 c4 0c             	add    esp,0xc
c001eadf:	c3                   	ret    

c001eae0 <PIT::PIT()>:
c001eae0:	83 ec 0c             	sub    esp,0xc
c001eae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eae7:	83 ec 08             	sub    esp,0x8
c001eaea:	68 80 30 02 c0       	push   0xc0023080
c001eaef:	50                   	push   eax
c001eaf0:	e8 b7 f5 fe ff       	call   c000e0ac <Timer::Timer(char const*)>
c001eaf5:	83 c4 10             	add    esp,0x10
c001eaf8:	ba a8 30 02 c0       	mov    edx,0xc00230a8
c001eafd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb01:	89 10                	mov    DWORD PTR [eax],edx
c001eb03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb07:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eb0d:	0f b6 d0             	movzx  edx,al
c001eb10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb14:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001eb1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb1f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eb25:	0f b6 d0             	movzx  edx,al
c001eb28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb2c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001eb31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb35:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eb3b:	8d 50 01             	lea    edx,[eax+0x1]
c001eb3e:	88 d1                	mov    cl,dl
c001eb40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eb44:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001eb4a:	0f b6 d0             	movzx  edx,al
c001eb4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb51:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001eb55:	83 e1 3f             	and    ecx,0x3f
c001eb58:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001eb5c:	90                   	nop
c001eb5d:	83 c4 0c             	add    esp,0xc
c001eb60:	c3                   	ret    
c001eb61:	66 90                	xchg   ax,ax
c001eb63:	66 90                	xchg   ax,ax
c001eb65:	66 90                	xchg   ax,ax
c001eb67:	66 90                	xchg   ax,ax
c001eb69:	66 90                	xchg   ax,ax
c001eb6b:	66 90                	xchg   ax,ax
c001eb6d:	66 90                	xchg   ax,ax
c001eb6f:	90                   	nop

c001eb70 <avxDetect>:
c001eb70:	b8 01 00 00 00       	mov    eax,0x1
c001eb75:	0f a2                	cpuid  
c001eb77:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001eb7d:	74 15                	je     c001eb94 <avxDetect.noAVX>
c001eb7f:	b8 01 00 00 00       	mov    eax,0x1
c001eb84:	0f a2                	cpuid  
c001eb86:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001eb8c:	74 06                	je     c001eb94 <avxDetect.noAVX>
c001eb8e:	b8 01 00 00 00       	mov    eax,0x1
c001eb93:	c3                   	ret    

c001eb94 <avxDetect.noAVX>:
c001eb94:	b8 00 00 00 00       	mov    eax,0x0
c001eb99:	c3                   	ret    

c001eb9a <avxSave>:
c001eb9a:	53                   	push   ebx
c001eb9b:	52                   	push   edx
c001eb9c:	31 c0                	xor    eax,eax
c001eb9e:	48                   	dec    eax
c001eb9f:	89 c2                	mov    edx,eax
c001eba1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eba5:	0f ae 23             	xsave  [ebx]
c001eba8:	5a                   	pop    edx
c001eba9:	5b                   	pop    ebx
c001ebaa:	c3                   	ret    

c001ebab <avxLoad>:
c001ebab:	53                   	push   ebx
c001ebac:	52                   	push   edx
c001ebad:	31 c0                	xor    eax,eax
c001ebaf:	48                   	dec    eax
c001ebb0:	89 c2                	mov    edx,eax
c001ebb2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ebb6:	0f ae 2b             	xrstor [ebx]
c001ebb9:	5a                   	pop    edx
c001ebba:	5b                   	pop    ebx
c001ebbb:	c3                   	ret    

c001ebbc <avxInit>:
c001ebbc:	e8 67 03 00 00       	call   c001ef28 <sseInit>
c001ebc1:	50                   	push   eax
c001ebc2:	51                   	push   ecx
c001ebc3:	0f 20 e0             	mov    eax,cr4
c001ebc6:	0d 00 00 04 00       	or     eax,0x40000
c001ebcb:	0f 22 e0             	mov    cr4,eax
c001ebce:	31 c9                	xor    ecx,ecx
c001ebd0:	0f 01 d0             	xgetbv 
c001ebd3:	0d 07 00 00 00       	or     eax,0x7
c001ebd8:	0f 01 d1             	xsetbv 
c001ebdb:	59                   	pop    ecx
c001ebdc:	58                   	pop    eax
c001ebdd:	c3                   	ret    

c001ebde <avxClose>:
c001ebde:	c3                   	ret    

c001ebdf <wouldSheSayYes>:
c001ebdf:	c3                   	ret    
c001ebe0:	49                   	dec    ecx
c001ebe1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001ebe5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001ebe9:	75 20                	jne    c001ec0b <isr0+0xb>
c001ebeb:	4e                   	dec    esi
c001ebec:	79 61                	jns    c001ec4f <isr7+0x3>
c001ebee:	68 2e 2e 2e 00       	push   0x2e2e2e
c001ebf3:	66 90                	xchg   ax,ax
c001ebf5:	66 90                	xchg   ax,ax
c001ebf7:	66 90                	xchg   ax,ax
c001ebf9:	66 90                	xchg   ax,ax
c001ebfb:	66 90                	xchg   ax,ax
c001ebfd:	66 90                	xchg   ax,ax
c001ebff:	90                   	nop

c001ec00 <isr0>:
c001ec00:	fa                   	cli    
c001ec01:	68 00 00 00 00       	push   0x0
c001ec06:	68 00 00 00 00       	push   0x0
c001ec0b:	e9 56 01 00 00       	jmp    c001ed66 <int_common_stub>

c001ec10 <isr1>:
c001ec10:	fa                   	cli    
c001ec11:	6a 00                	push   0x0
c001ec13:	6a 01                	push   0x1
c001ec15:	e9 4c 01 00 00       	jmp    c001ed66 <int_common_stub>

c001ec1a <isr2>:
c001ec1a:	fa                   	cli    
c001ec1b:	6a 00                	push   0x0
c001ec1d:	6a 02                	push   0x2
c001ec1f:	e9 42 01 00 00       	jmp    c001ed66 <int_common_stub>

c001ec24 <isr3>:
c001ec24:	fa                   	cli    
c001ec25:	6a 00                	push   0x0
c001ec27:	6a 03                	push   0x3
c001ec29:	e9 38 01 00 00       	jmp    c001ed66 <int_common_stub>

c001ec2e <isr4>:
c001ec2e:	fa                   	cli    
c001ec2f:	6a 00                	push   0x0
c001ec31:	6a 04                	push   0x4
c001ec33:	e9 2e 01 00 00       	jmp    c001ed66 <int_common_stub>

c001ec38 <isr5>:
c001ec38:	fa                   	cli    
c001ec39:	6a 00                	push   0x0
c001ec3b:	6a 05                	push   0x5
c001ec3d:	e9 24 01 00 00       	jmp    c001ed66 <int_common_stub>

c001ec42 <isr6>:
c001ec42:	fa                   	cli    
c001ec43:	6a 00                	push   0x0
c001ec45:	6a 06                	push   0x6
c001ec47:	e9 1a 01 00 00       	jmp    c001ed66 <int_common_stub>

c001ec4c <isr7>:
c001ec4c:	fa                   	cli    
c001ec4d:	6a 00                	push   0x0
c001ec4f:	6a 07                	push   0x7
c001ec51:	e9 10 01 00 00       	jmp    c001ed66 <int_common_stub>

c001ec56 <isr8>:
c001ec56:	fa                   	cli    
c001ec57:	6a 08                	push   0x8
c001ec59:	e9 08 01 00 00       	jmp    c001ed66 <int_common_stub>

c001ec5e <isr9>:
c001ec5e:	fa                   	cli    
c001ec5f:	6a 00                	push   0x0
c001ec61:	6a 09                	push   0x9
c001ec63:	e9 fe 00 00 00       	jmp    c001ed66 <int_common_stub>

c001ec68 <isr10>:
c001ec68:	fa                   	cli    
c001ec69:	6a 0a                	push   0xa
c001ec6b:	e9 f6 00 00 00       	jmp    c001ed66 <int_common_stub>

c001ec70 <isr11>:
c001ec70:	fa                   	cli    
c001ec71:	6a 0b                	push   0xb
c001ec73:	e9 ee 00 00 00       	jmp    c001ed66 <int_common_stub>

c001ec78 <isr12>:
c001ec78:	fa                   	cli    
c001ec79:	6a 0c                	push   0xc
c001ec7b:	e9 e6 00 00 00       	jmp    c001ed66 <int_common_stub>

c001ec80 <isr13>:
c001ec80:	fa                   	cli    
c001ec81:	6a 0d                	push   0xd
c001ec83:	53                   	push   ebx
c001ec84:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ec88:	81 fb 56 ee 01 c0    	cmp    ebx,0xc001ee56
c001ec8e:	5b                   	pop    ebx
c001ec8f:	0f 84 c3 01 00 00    	je     c001ee58 <finishSignal2>
c001ec95:	e9 cc 00 00 00       	jmp    c001ed66 <int_common_stub>

c001ec9a <isr14>:
c001ec9a:	fa                   	cli    
c001ec9b:	6a 0e                	push   0xe
c001ec9d:	e9 c4 00 00 00       	jmp    c001ed66 <int_common_stub>

c001eca2 <isr15>:
c001eca2:	fa                   	cli    
c001eca3:	6a 00                	push   0x0
c001eca5:	6a 0f                	push   0xf
c001eca7:	e9 ba 00 00 00       	jmp    c001ed66 <int_common_stub>

c001ecac <isr16>:
c001ecac:	fa                   	cli    
c001ecad:	6a 00                	push   0x0
c001ecaf:	6a 10                	push   0x10
c001ecb1:	e9 b0 00 00 00       	jmp    c001ed66 <int_common_stub>

c001ecb6 <isr17>:
c001ecb6:	fa                   	cli    
c001ecb7:	6a 00                	push   0x0
c001ecb9:	6a 11                	push   0x11
c001ecbb:	e9 a6 00 00 00       	jmp    c001ed66 <int_common_stub>

c001ecc0 <isr18>:
c001ecc0:	fa                   	cli    
c001ecc1:	6a 00                	push   0x0
c001ecc3:	6a 12                	push   0x12
c001ecc5:	e9 9c 00 00 00       	jmp    c001ed66 <int_common_stub>

c001ecca <irq3>:
c001ecca:	fa                   	cli    
c001eccb:	6a 00                	push   0x0
c001eccd:	6a 23                	push   0x23
c001eccf:	e9 92 00 00 00       	jmp    c001ed66 <int_common_stub>

c001ecd4 <irq4>:
c001ecd4:	fa                   	cli    
c001ecd5:	6a 00                	push   0x0
c001ecd7:	6a 24                	push   0x24
c001ecd9:	e9 88 00 00 00       	jmp    c001ed66 <int_common_stub>

c001ecde <irq5>:
c001ecde:	fa                   	cli    
c001ecdf:	6a 00                	push   0x0
c001ece1:	6a 25                	push   0x25
c001ece3:	e9 7e 00 00 00       	jmp    c001ed66 <int_common_stub>

c001ece8 <irq6>:
c001ece8:	fa                   	cli    
c001ece9:	6a 00                	push   0x0
c001eceb:	6a 26                	push   0x26
c001eced:	e9 74 00 00 00       	jmp    c001ed66 <int_common_stub>

c001ecf2 <irq7>:
c001ecf2:	fa                   	cli    
c001ecf3:	6a 00                	push   0x0
c001ecf5:	6a 27                	push   0x27
c001ecf7:	e9 6a 00 00 00       	jmp    c001ed66 <int_common_stub>

c001ecfc <irq8>:
c001ecfc:	fa                   	cli    
c001ecfd:	6a 00                	push   0x0
c001ecff:	6a 28                	push   0x28
c001ed01:	e9 60 00 00 00       	jmp    c001ed66 <int_common_stub>

c001ed06 <irq9>:
c001ed06:	fa                   	cli    
c001ed07:	6a 00                	push   0x0
c001ed09:	6a 29                	push   0x29
c001ed0b:	e9 56 00 00 00       	jmp    c001ed66 <int_common_stub>

c001ed10 <irq10>:
c001ed10:	fa                   	cli    
c001ed11:	6a 00                	push   0x0
c001ed13:	6a 2a                	push   0x2a
c001ed15:	e9 4c 00 00 00       	jmp    c001ed66 <int_common_stub>

c001ed1a <irq11>:
c001ed1a:	fa                   	cli    
c001ed1b:	6a 00                	push   0x0
c001ed1d:	6a 2b                	push   0x2b
c001ed1f:	e9 42 00 00 00       	jmp    c001ed66 <int_common_stub>

c001ed24 <irq12>:
c001ed24:	fa                   	cli    
c001ed25:	6a 00                	push   0x0
c001ed27:	6a 2c                	push   0x2c
c001ed29:	e9 38 00 00 00       	jmp    c001ed66 <int_common_stub>

c001ed2e <irq13>:
c001ed2e:	fa                   	cli    
c001ed2f:	6a 00                	push   0x0
c001ed31:	6a 2d                	push   0x2d
c001ed33:	e9 2e 00 00 00       	jmp    c001ed66 <int_common_stub>

c001ed38 <irq14>:
c001ed38:	fa                   	cli    
c001ed39:	6a 00                	push   0x0
c001ed3b:	6a 2e                	push   0x2e
c001ed3d:	e9 24 00 00 00       	jmp    c001ed66 <int_common_stub>

c001ed42 <irq15>:
c001ed42:	fa                   	cli    
c001ed43:	6a 00                	push   0x0
c001ed45:	6a 2f                	push   0x2f
c001ed47:	e9 1a 00 00 00       	jmp    c001ed66 <int_common_stub>

c001ed4c <irq1>:
c001ed4c:	fa                   	cli    
c001ed4d:	6a 00                	push   0x0
c001ed4f:	6a 21                	push   0x21
c001ed51:	eb 13                	jmp    c001ed66 <int_common_stub>

c001ed53 <irq2>:
c001ed53:	fa                   	cli    
c001ed54:	6a 00                	push   0x0
c001ed56:	6a 22                	push   0x22
c001ed58:	eb 0c                	jmp    c001ed66 <int_common_stub>

c001ed5a <isr96>:
c001ed5a:	6a 00                	push   0x0
c001ed5c:	6a 60                	push   0x60
c001ed5e:	fb                   	sti    
c001ed5f:	eb 37                	jmp    c001ed98 <syscall_common_stub>

c001ed61 <irq0>:
c001ed61:	fa                   	cli    
c001ed62:	6a 00                	push   0x0
c001ed64:	6a 20                	push   0x20

c001ed66 <int_common_stub>:
c001ed66:	60                   	pusha  
c001ed67:	1e                   	push   ds
c001ed68:	06                   	push   es
c001ed69:	0f a0                	push   fs
c001ed6b:	0f a8                	push   gs
c001ed6d:	66 b8 10 00          	mov    ax,0x10
c001ed71:	66 8e d8             	mov    ds,ax
c001ed74:	66 8e c0             	mov    es,ax
c001ed77:	66 8e e0             	mov    fs,ax
c001ed7a:	66 8e e8             	mov    gs,ax
c001ed7d:	54                   	push   esp
c001ed7e:	fc                   	cld    
c001ed7f:	e8 3c de fe ff       	call   c000cbc0 <int_handler>
c001ed84:	81 c4 04 00 00 00    	add    esp,0x4
c001ed8a:	0f a9                	pop    gs
c001ed8c:	0f a1                	pop    fs
c001ed8e:	07                   	pop    es
c001ed8f:	1f                   	pop    ds
c001ed90:	61                   	popa   
c001ed91:	81 c4 08 00 00 00    	add    esp,0x8
c001ed97:	cf                   	iret   

c001ed98 <syscall_common_stub>:
c001ed98:	60                   	pusha  
c001ed99:	1e                   	push   ds
c001ed9a:	06                   	push   es
c001ed9b:	0f a0                	push   fs
c001ed9d:	0f a8                	push   gs
c001ed9f:	66 b8 10 00          	mov    ax,0x10
c001eda3:	66 8e d8             	mov    ds,ax
c001eda6:	66 8e c0             	mov    es,ax
c001eda9:	66 8e e0             	mov    fs,ax
c001edac:	66 8e e8             	mov    gs,ax
c001edaf:	54                   	push   esp
c001edb0:	fc                   	cld    
c001edb1:	e8 0a de fe ff       	call   c000cbc0 <int_handler>
c001edb6:	81 c4 04 00 00 00    	add    esp,0x4
c001edbc:	0f a9                	pop    gs
c001edbe:	0f a1                	pop    fs
c001edc0:	07                   	pop    es
c001edc1:	1f                   	pop    ds
c001edc2:	e8 93 2b ff ff       	call   c001195a <KiCheckSignalZ>
c001edc7:	3d 00 00 00 00       	cmp    eax,0x0
c001edcc:	0f 84 c0 00 00 00    	je     c001ee92 <skipSignals>
c001edd2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001edd7:	61                   	popa   
c001edd8:	53                   	push   ebx
c001edd9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001eddf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001ede2:	5b                   	pop    ebx
c001ede3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001ede8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001edeb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001edee:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001edf1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001edf4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001edf7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001edfa:	81 c4 08 00 00 00    	add    esp,0x8
c001ee00:	5e                   	pop    esi
c001ee01:	5b                   	pop    ebx
c001ee02:	59                   	pop    ecx
c001ee03:	5a                   	pop    edx
c001ee04:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001ee07:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001ee0a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001ee0d:	52                   	push   edx
c001ee0e:	51                   	push   ecx
c001ee0f:	53                   	push   ebx
c001ee10:	56                   	push   esi
c001ee11:	81 ec 08 00 00 00    	sub    esp,0x8
c001ee17:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001ee1a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001ee1d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001ee20:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ee23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ee26:	60                   	pusha  
c001ee27:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001ee2d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001ee30:	89 e3                	mov    ebx,esp
c001ee32:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001ee35:	52                   	push   edx
c001ee36:	68 56 ee 01 c0       	push   0xc001ee56
c001ee3b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001ee3e:	89 dc                	mov    esp,ebx
c001ee40:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001ee43:	68 23 00 00 00       	push   0x23
c001ee48:	51                   	push   ecx
c001ee49:	68 02 02 00 00       	push   0x202
c001ee4e:	68 1b 00 00 00       	push   0x1b
c001ee53:	ff 36                	push   DWORD PTR [esi]
c001ee55:	cf                   	iret   

c001ee56 <finishSignal>:
c001ee56:	cd 0f                	int    0xf

c001ee58 <finishSignal2>:
c001ee58:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001ee5e:	e8 74 2b ff ff       	call   c00119d7 <KiFinishSignalZ>
c001ee63:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001ee69:	68 23 00 00 00       	push   0x23
c001ee6e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ee71:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001ee74:	68 1b 00 00 00       	push   0x1b
c001ee79:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001ee7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ee7f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001ee82:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001ee85:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001ee88:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001ee8b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ee8e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001ee91:	cf                   	iret   

c001ee92 <skipSignals>:
c001ee92:	61                   	popa   
c001ee93:	81 c4 08 00 00 00    	add    esp,0x8
c001ee99:	cf                   	iret   
c001ee9a:	90                   	nop
c001ee9b:	90                   	nop

c001ee9c <irq16>:
c001ee9c:	fa                   	cli    
c001ee9d:	6a 00                	push   0x0
c001ee9f:	6a 30                	push   0x30
c001eea1:	e9 c0 fe ff ff       	jmp    c001ed66 <int_common_stub>

c001eea6 <irq17>:
c001eea6:	fa                   	cli    
c001eea7:	6a 00                	push   0x0
c001eea9:	6a 31                	push   0x31
c001eeab:	e9 b6 fe ff ff       	jmp    c001ed66 <int_common_stub>

c001eeb0 <irq18>:
c001eeb0:	fa                   	cli    
c001eeb1:	6a 00                	push   0x0
c001eeb3:	6a 32                	push   0x32
c001eeb5:	e9 ac fe ff ff       	jmp    c001ed66 <int_common_stub>

c001eeba <irq19>:
c001eeba:	fa                   	cli    
c001eebb:	6a 00                	push   0x0
c001eebd:	6a 33                	push   0x33
c001eebf:	e9 a2 fe ff ff       	jmp    c001ed66 <int_common_stub>

c001eec4 <irq20>:
c001eec4:	fa                   	cli    
c001eec5:	6a 00                	push   0x0
c001eec7:	6a 34                	push   0x34
c001eec9:	e9 98 fe ff ff       	jmp    c001ed66 <int_common_stub>

c001eece <irq21>:
c001eece:	fa                   	cli    
c001eecf:	6a 00                	push   0x0
c001eed1:	6a 35                	push   0x35
c001eed3:	e9 8e fe ff ff       	jmp    c001ed66 <int_common_stub>

c001eed8 <irq22>:
c001eed8:	fa                   	cli    
c001eed9:	6a 00                	push   0x0
c001eedb:	6a 36                	push   0x36
c001eedd:	e9 84 fe ff ff       	jmp    c001ed66 <int_common_stub>

c001eee2 <irq23>:
c001eee2:	fa                   	cli    
c001eee3:	6a 00                	push   0x0
c001eee5:	6a 37                	push   0x37
c001eee7:	e9 7a fe ff ff       	jmp    c001ed66 <int_common_stub>
c001eeec:	66 90                	xchg   ax,ax
c001eeee:	66 90                	xchg   ax,ax

c001eef0 <i386GetRDRAND>:
c001eef0:	b9 64 00 00 00       	mov    ecx,0x64

c001eef5 <retry>:
c001eef5:	0f c7 f0             	rdrand eax
c001eef8:	72 05                	jb     c001eeff <retry.done>
c001eefa:	e2 f9                	loop   c001eef5 <retry>

c001eefc <retry.fail>:
c001eefc:	31 c0                	xor    eax,eax
c001eefe:	c3                   	ret    

c001eeff <retry.done>:
c001eeff:	c3                   	ret    

c001ef00 <absolutelyNoChanceInHell>:
c001ef00:	b8 01 00 00 00       	mov    eax,0x1
c001ef05:	0f a2                	cpuid  
c001ef07:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001ef0d:	74 06                	je     c001ef15 <sseDetect.noSSE>
c001ef0f:	b8 01 00 00 00       	mov    eax,0x1
c001ef14:	c3                   	ret    

c001ef15 <sseDetect.noSSE>:
c001ef15:	31 c0                	xor    eax,eax
c001ef17:	c3                   	ret    

c001ef18 <sseSave>:
c001ef18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef1c:	0f ae 00             	fxsave [eax]
c001ef1f:	c3                   	ret    

c001ef20 <sseLoad>:
c001ef20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef24:	0f ae 08             	fxrstor [eax]
c001ef27:	c3                   	ret    

c001ef28 <sseInit>:
c001ef28:	e8 42 00 00 00       	call   c001ef6f <x87Init>
c001ef2d:	0f 20 e0             	mov    eax,cr4
c001ef30:	66 0d 00 06          	or     ax,0x600
c001ef34:	0f 22 e0             	mov    cr4,eax
c001ef37:	c3                   	ret    

c001ef38 <sseClose>:
c001ef38:	c3                   	ret    
c001ef39:	66 90                	xchg   ax,ax
c001ef3b:	66 90                	xchg   ax,ax
c001ef3d:	66 90                	xchg   ax,ax
c001ef3f:	90                   	nop

c001ef40 <value_37F>:
c001ef40:	7f 03                	jg     c001ef45 <value_37A+0x1>

c001ef42 <value_37E>:
c001ef42:	7e 03                	jle    c001ef47 <x87Detect+0x1>

c001ef44 <value_37A>:
c001ef44:	7a 03                	jp     c001ef49 <x87Detect+0x3>

c001ef46 <x87Detect>:
c001ef46:	b8 01 00 00 00       	mov    eax,0x1
c001ef4b:	0f a2                	cpuid  
c001ef4d:	f7 c2 01 00 00 00    	test   edx,0x1
c001ef53:	74 06                	je     c001ef5b <x87Detect.nox87>
c001ef55:	b8 01 00 00 00       	mov    eax,0x1
c001ef5a:	c3                   	ret    

c001ef5b <x87Detect.nox87>:
c001ef5b:	b8 00 00 00 00       	mov    eax,0x0
c001ef60:	c3                   	ret    

c001ef61 <x87Save>:
c001ef61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef65:	dd 30                	fnsave [eax]
c001ef67:	c3                   	ret    

c001ef68 <x87Load>:
c001ef68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef6c:	dd 20                	frstor [eax]
c001ef6e:	c3                   	ret    

c001ef6f <x87Init>:
c001ef6f:	0f 20 c0             	mov    eax,cr0
c001ef72:	66 25 fb ff          	and    ax,0xfffb
c001ef76:	66 0d 22 00          	or     ax,0x22
c001ef7a:	0f 22 c0             	mov    cr0,eax
c001ef7d:	db e3                	fninit 
c001ef7f:	0f 06                	clts   
c001ef81:	d9 2d 44 ef 01 c0    	fldcw  WORD PTR ds:0xc001ef44
c001ef87:	c3                   	ret    

c001ef88 <x87Close>:
c001ef88:	c3                   	ret    
c001ef89:	66 90                	xchg   ax,ax
c001ef8b:	90                   	nop

c001ef8c <__do_global_ctors_aux>:
c001ef8c:	a1 40 ff 01 c0       	mov    eax,ds:0xc001ff40
c001ef91:	83 f8 ff             	cmp    eax,0xffffffff
c001ef94:	74 1a                	je     c001efb0 <__do_global_ctors_aux+0x24>
c001ef96:	55                   	push   ebp
c001ef97:	89 e5                	mov    ebp,esp
c001ef99:	53                   	push   ebx
c001ef9a:	52                   	push   edx
c001ef9b:	bb 40 ff 01 c0       	mov    ebx,0xc001ff40
c001efa0:	ff d0                	call   eax
c001efa2:	83 eb 04             	sub    ebx,0x4
c001efa5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001efa7:	83 f8 ff             	cmp    eax,0xffffffff
c001efaa:	75 f4                	jne    c001efa0 <__do_global_ctors_aux+0x14>
c001efac:	58                   	pop    eax
c001efad:	5b                   	pop    ebx
c001efae:	5d                   	pop    ebp
c001efaf:	c3                   	ret    
c001efb0:	c3                   	ret    
c001efb1:	66 90                	xchg   ax,ax
c001efb3:	90                   	nop

c001efb4 <__divdi3>:
c001efb4:	55                   	push   ebp
c001efb5:	57                   	push   edi
c001efb6:	56                   	push   esi
c001efb7:	53                   	push   ebx
c001efb8:	83 ec 1c             	sub    esp,0x1c
c001efbb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001efbf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001efc3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001efc6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001efca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001efce:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001efd2:	85 db                	test   ebx,ebx
c001efd4:	0f 88 8e 00 00 00    	js     c001f068 <__divdi3+0xb4>
c001efda:	89 dd                	mov    ebp,ebx
c001efdc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001efe4:	89 d3                	mov    ebx,edx
c001efe6:	85 d2                	test   edx,edx
c001efe8:	79 0d                	jns    c001eff7 <__divdi3+0x43>
c001efea:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001efee:	f7 d8                	neg    eax
c001eff0:	83 d2 00             	adc    edx,0x0
c001eff3:	f7 da                	neg    edx
c001eff5:	89 d3                	mov    ebx,edx
c001eff7:	89 c7                	mov    edi,eax
c001eff9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001effc:	85 db                	test   ebx,ebx
c001effe:	75 48                	jne    c001f048 <__divdi3+0x94>
c001f000:	39 ef                	cmp    edi,ebp
c001f002:	76 24                	jbe    c001f028 <__divdi3+0x74>
c001f004:	89 ea                	mov    edx,ebp
c001f006:	f7 f7                	div    edi
c001f008:	89 c1                	mov    ecx,eax
c001f00a:	31 f6                	xor    esi,esi
c001f00c:	89 c8                	mov    eax,ecx
c001f00e:	89 f2                	mov    edx,esi
c001f010:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f014:	85 c9                	test   ecx,ecx
c001f016:	74 07                	je     c001f01f <__divdi3+0x6b>
c001f018:	f7 d8                	neg    eax
c001f01a:	83 d2 00             	adc    edx,0x0
c001f01d:	f7 da                	neg    edx
c001f01f:	83 c4 1c             	add    esp,0x1c
c001f022:	5b                   	pop    ebx
c001f023:	5e                   	pop    esi
c001f024:	5f                   	pop    edi
c001f025:	5d                   	pop    ebp
c001f026:	c3                   	ret    
c001f027:	90                   	nop
c001f028:	85 ff                	test   edi,edi
c001f02a:	75 0b                	jne    c001f037 <__divdi3+0x83>
c001f02c:	b8 01 00 00 00       	mov    eax,0x1
c001f031:	31 d2                	xor    edx,edx
c001f033:	f7 f3                	div    ebx
c001f035:	89 c7                	mov    edi,eax
c001f037:	31 d2                	xor    edx,edx
c001f039:	89 e8                	mov    eax,ebp
c001f03b:	f7 f7                	div    edi
c001f03d:	89 c6                	mov    esi,eax
c001f03f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f042:	f7 f7                	div    edi
c001f044:	89 c1                	mov    ecx,eax
c001f046:	eb c4                	jmp    c001f00c <__divdi3+0x58>
c001f048:	39 eb                	cmp    ebx,ebp
c001f04a:	77 3c                	ja     c001f088 <__divdi3+0xd4>
c001f04c:	0f bd f3             	bsr    esi,ebx
c001f04f:	83 f6 1f             	xor    esi,0x1f
c001f052:	75 40                	jne    c001f094 <__divdi3+0xe0>
c001f054:	39 eb                	cmp    ebx,ebp
c001f056:	72 09                	jb     c001f061 <__divdi3+0xad>
c001f058:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f05b:	0f 87 97 00 00 00    	ja     c001f0f8 <__divdi3+0x144>
c001f061:	b9 01 00 00 00       	mov    ecx,0x1
c001f066:	eb a4                	jmp    c001f00c <__divdi3+0x58>
c001f068:	f7 d9                	neg    ecx
c001f06a:	83 d3 00             	adc    ebx,0x0
c001f06d:	f7 db                	neg    ebx
c001f06f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f072:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f076:	89 dd                	mov    ebp,ebx
c001f078:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f080:	e9 5f ff ff ff       	jmp    c001efe4 <__divdi3+0x30>
c001f085:	8d 76 00             	lea    esi,[esi+0x0]
c001f088:	31 f6                	xor    esi,esi
c001f08a:	31 c9                	xor    ecx,ecx
c001f08c:	e9 7b ff ff ff       	jmp    c001f00c <__divdi3+0x58>
c001f091:	8d 76 00             	lea    esi,[esi+0x0]
c001f094:	b8 20 00 00 00       	mov    eax,0x20
c001f099:	29 f0                	sub    eax,esi
c001f09b:	89 f1                	mov    ecx,esi
c001f09d:	d3 e3                	shl    ebx,cl
c001f09f:	89 fa                	mov    edx,edi
c001f0a1:	88 c1                	mov    cl,al
c001f0a3:	d3 ea                	shr    edx,cl
c001f0a5:	09 da                	or     edx,ebx
c001f0a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f0ab:	89 f1                	mov    ecx,esi
c001f0ad:	d3 e7                	shl    edi,cl
c001f0af:	89 eb                	mov    ebx,ebp
c001f0b1:	88 c1                	mov    cl,al
c001f0b3:	d3 eb                	shr    ebx,cl
c001f0b5:	89 f1                	mov    ecx,esi
c001f0b7:	d3 e5                	shl    ebp,cl
c001f0b9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f0bc:	88 c1                	mov    cl,al
c001f0be:	d3 ea                	shr    edx,cl
c001f0c0:	09 d5                	or     ebp,edx
c001f0c2:	89 e8                	mov    eax,ebp
c001f0c4:	89 da                	mov    edx,ebx
c001f0c6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f0ca:	89 d3                	mov    ebx,edx
c001f0cc:	89 c5                	mov    ebp,eax
c001f0ce:	f7 e7                	mul    edi
c001f0d0:	39 d3                	cmp    ebx,edx
c001f0d2:	72 18                	jb     c001f0ec <__divdi3+0x138>
c001f0d4:	74 0a                	je     c001f0e0 <__divdi3+0x12c>
c001f0d6:	89 e9                	mov    ecx,ebp
c001f0d8:	31 f6                	xor    esi,esi
c001f0da:	e9 2d ff ff ff       	jmp    c001f00c <__divdi3+0x58>
c001f0df:	90                   	nop
c001f0e0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f0e3:	89 f1                	mov    ecx,esi
c001f0e5:	d3 e7                	shl    edi,cl
c001f0e7:	39 c7                	cmp    edi,eax
c001f0e9:	73 eb                	jae    c001f0d6 <__divdi3+0x122>
c001f0eb:	90                   	nop
c001f0ec:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f0ef:	31 f6                	xor    esi,esi
c001f0f1:	e9 16 ff ff ff       	jmp    c001f00c <__divdi3+0x58>
c001f0f6:	66 90                	xchg   ax,ax
c001f0f8:	31 c9                	xor    ecx,ecx
c001f0fa:	e9 0d ff ff ff       	jmp    c001f00c <__divdi3+0x58>
c001f0ff:	90                   	nop

c001f100 <__moddi3>:
c001f100:	55                   	push   ebp
c001f101:	57                   	push   edi
c001f102:	56                   	push   esi
c001f103:	53                   	push   ebx
c001f104:	83 ec 2c             	sub    esp,0x2c
c001f107:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f10b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f10f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f113:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f117:	85 db                	test   ebx,ebx
c001f119:	0f 88 85 00 00 00    	js     c001f1a4 <__moddi3+0xa4>
c001f11f:	89 de                	mov    esi,ebx
c001f121:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f129:	89 d7                	mov    edi,edx
c001f12b:	85 d2                	test   edx,edx
c001f12d:	79 09                	jns    c001f138 <__moddi3+0x38>
c001f12f:	f7 d8                	neg    eax
c001f131:	83 d2 00             	adc    edx,0x0
c001f134:	f7 da                	neg    edx
c001f136:	89 d7                	mov    edi,edx
c001f138:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f13c:	89 cd                	mov    ebp,ecx
c001f13e:	85 ff                	test   edi,edi
c001f140:	75 52                	jne    c001f194 <__moddi3+0x94>
c001f142:	89 c3                	mov    ebx,eax
c001f144:	39 f0                	cmp    eax,esi
c001f146:	76 24                	jbe    c001f16c <__moddi3+0x6c>
c001f148:	89 c8                	mov    eax,ecx
c001f14a:	89 f2                	mov    edx,esi
c001f14c:	f7 f3                	div    ebx
c001f14e:	89 d6                	mov    esi,edx
c001f150:	89 f0                	mov    eax,esi
c001f152:	31 d2                	xor    edx,edx
c001f154:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f158:	85 c9                	test   ecx,ecx
c001f15a:	74 07                	je     c001f163 <__moddi3+0x63>
c001f15c:	f7 d8                	neg    eax
c001f15e:	83 d2 00             	adc    edx,0x0
c001f161:	f7 da                	neg    edx
c001f163:	83 c4 2c             	add    esp,0x2c
c001f166:	5b                   	pop    ebx
c001f167:	5e                   	pop    esi
c001f168:	5f                   	pop    edi
c001f169:	5d                   	pop    ebp
c001f16a:	c3                   	ret    
c001f16b:	90                   	nop
c001f16c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f170:	85 db                	test   ebx,ebx
c001f172:	75 0d                	jne    c001f181 <__moddi3+0x81>
c001f174:	b8 01 00 00 00       	mov    eax,0x1
c001f179:	31 d2                	xor    edx,edx
c001f17b:	f7 f7                	div    edi
c001f17d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f181:	89 f0                	mov    eax,esi
c001f183:	31 d2                	xor    edx,edx
c001f185:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f189:	f7 f7                	div    edi
c001f18b:	89 e8                	mov    eax,ebp
c001f18d:	f7 f7                	div    edi
c001f18f:	89 d6                	mov    esi,edx
c001f191:	eb bd                	jmp    c001f150 <__moddi3+0x50>
c001f193:	90                   	nop
c001f194:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f198:	39 f7                	cmp    edi,esi
c001f19a:	76 20                	jbe    c001f1bc <__moddi3+0xbc>
c001f19c:	89 c8                	mov    eax,ecx
c001f19e:	89 f2                	mov    edx,esi
c001f1a0:	eb b2                	jmp    c001f154 <__moddi3+0x54>
c001f1a2:	66 90                	xchg   ax,ax
c001f1a4:	f7 d9                	neg    ecx
c001f1a6:	83 d3 00             	adc    ebx,0x0
c001f1a9:	f7 db                	neg    ebx
c001f1ab:	89 de                	mov    esi,ebx
c001f1ad:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f1b5:	e9 6f ff ff ff       	jmp    c001f129 <__moddi3+0x29>
c001f1ba:	66 90                	xchg   ax,ax
c001f1bc:	0f bd c7             	bsr    eax,edi
c001f1bf:	83 f0 1f             	xor    eax,0x1f
c001f1c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f1c6:	75 24                	jne    c001f1ec <__moddi3+0xec>
c001f1c8:	39 f7                	cmp    edi,esi
c001f1ca:	72 06                	jb     c001f1d2 <__moddi3+0xd2>
c001f1cc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f1d0:	77 0c                	ja     c001f1de <__moddi3+0xde>
c001f1d2:	89 e9                	mov    ecx,ebp
c001f1d4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f1d8:	19 fe                	sbb    esi,edi
c001f1da:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f1de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f1e2:	89 f2                	mov    edx,esi
c001f1e4:	e9 6b ff ff ff       	jmp    c001f154 <__moddi3+0x54>
c001f1e9:	8d 76 00             	lea    esi,[esi+0x0]
c001f1ec:	b8 20 00 00 00       	mov    eax,0x20
c001f1f1:	89 c2                	mov    edx,eax
c001f1f3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f1f7:	29 da                	sub    edx,ebx
c001f1f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f1fd:	88 d9                	mov    cl,bl
c001f1ff:	d3 e7                	shl    edi,cl
c001f201:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f205:	88 d1                	mov    cl,dl
c001f207:	d3 e8                	shr    eax,cl
c001f209:	09 c7                	or     edi,eax
c001f20b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f20f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f213:	89 d8                	mov    eax,ebx
c001f215:	88 d9                	mov    cl,bl
c001f217:	d3 e7                	shl    edi,cl
c001f219:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f21d:	89 f3                	mov    ebx,esi
c001f21f:	88 d1                	mov    cl,dl
c001f221:	d3 eb                	shr    ebx,cl
c001f223:	89 c7                	mov    edi,eax
c001f225:	88 c1                	mov    cl,al
c001f227:	d3 e6                	shl    esi,cl
c001f229:	89 e8                	mov    eax,ebp
c001f22b:	88 d1                	mov    cl,dl
c001f22d:	d3 e8                	shr    eax,cl
c001f22f:	09 f0                	or     eax,esi
c001f231:	89 f9                	mov    ecx,edi
c001f233:	d3 e5                	shl    ebp,cl
c001f235:	89 da                	mov    edx,ebx
c001f237:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f23b:	89 d3                	mov    ebx,edx
c001f23d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f241:	89 c6                	mov    esi,eax
c001f243:	89 d1                	mov    ecx,edx
c001f245:	39 d3                	cmp    ebx,edx
c001f247:	72 27                	jb     c001f270 <__moddi3+0x170>
c001f249:	74 21                	je     c001f26c <__moddi3+0x16c>
c001f24b:	29 f5                	sub    ebp,esi
c001f24d:	19 cb                	sbb    ebx,ecx
c001f24f:	89 de                	mov    esi,ebx
c001f251:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f255:	d3 e6                	shl    esi,cl
c001f257:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f25b:	89 f9                	mov    ecx,edi
c001f25d:	d3 ed                	shr    ebp,cl
c001f25f:	09 ee                	or     esi,ebp
c001f261:	89 f0                	mov    eax,esi
c001f263:	d3 eb                	shr    ebx,cl
c001f265:	89 da                	mov    edx,ebx
c001f267:	e9 e8 fe ff ff       	jmp    c001f154 <__moddi3+0x54>
c001f26c:	39 c5                	cmp    ebp,eax
c001f26e:	73 db                	jae    c001f24b <__moddi3+0x14b>
c001f270:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f274:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f278:	89 d1                	mov    ecx,edx
c001f27a:	89 c6                	mov    esi,eax
c001f27c:	eb cd                	jmp    c001f24b <__moddi3+0x14b>
c001f27e:	66 90                	xchg   ax,ax

c001f280 <__udivdi3>:
c001f280:	55                   	push   ebp
c001f281:	57                   	push   edi
c001f282:	56                   	push   esi
c001f283:	53                   	push   ebx
c001f284:	83 ec 1c             	sub    esp,0x1c
c001f287:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f28b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f28f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f293:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f297:	85 d2                	test   edx,edx
c001f299:	75 41                	jne    c001f2dc <__udivdi3+0x5c>
c001f29b:	39 f7                	cmp    edi,esi
c001f29d:	76 15                	jbe    c001f2b4 <__udivdi3+0x34>
c001f29f:	89 e8                	mov    eax,ebp
c001f2a1:	89 f2                	mov    edx,esi
c001f2a3:	f7 f7                	div    edi
c001f2a5:	31 db                	xor    ebx,ebx
c001f2a7:	89 da                	mov    edx,ebx
c001f2a9:	83 c4 1c             	add    esp,0x1c
c001f2ac:	5b                   	pop    ebx
c001f2ad:	5e                   	pop    esi
c001f2ae:	5f                   	pop    edi
c001f2af:	5d                   	pop    ebp
c001f2b0:	c3                   	ret    
c001f2b1:	8d 76 00             	lea    esi,[esi+0x0]
c001f2b4:	89 f9                	mov    ecx,edi
c001f2b6:	85 ff                	test   edi,edi
c001f2b8:	75 0b                	jne    c001f2c5 <__udivdi3+0x45>
c001f2ba:	b8 01 00 00 00       	mov    eax,0x1
c001f2bf:	31 d2                	xor    edx,edx
c001f2c1:	f7 f7                	div    edi
c001f2c3:	89 c1                	mov    ecx,eax
c001f2c5:	31 d2                	xor    edx,edx
c001f2c7:	89 f0                	mov    eax,esi
c001f2c9:	f7 f1                	div    ecx
c001f2cb:	89 c3                	mov    ebx,eax
c001f2cd:	89 e8                	mov    eax,ebp
c001f2cf:	f7 f1                	div    ecx
c001f2d1:	89 da                	mov    edx,ebx
c001f2d3:	83 c4 1c             	add    esp,0x1c
c001f2d6:	5b                   	pop    ebx
c001f2d7:	5e                   	pop    esi
c001f2d8:	5f                   	pop    edi
c001f2d9:	5d                   	pop    ebp
c001f2da:	c3                   	ret    
c001f2db:	90                   	nop
c001f2dc:	39 f2                	cmp    edx,esi
c001f2de:	77 1c                	ja     c001f2fc <__udivdi3+0x7c>
c001f2e0:	0f bd da             	bsr    ebx,edx
c001f2e3:	83 f3 1f             	xor    ebx,0x1f
c001f2e6:	75 24                	jne    c001f30c <__udivdi3+0x8c>
c001f2e8:	39 f2                	cmp    edx,esi
c001f2ea:	72 08                	jb     c001f2f4 <__udivdi3+0x74>
c001f2ec:	39 ef                	cmp    edi,ebp
c001f2ee:	0f 87 84 00 00 00    	ja     c001f378 <__udivdi3+0xf8>
c001f2f4:	b8 01 00 00 00       	mov    eax,0x1
c001f2f9:	eb ac                	jmp    c001f2a7 <__udivdi3+0x27>
c001f2fb:	90                   	nop
c001f2fc:	31 db                	xor    ebx,ebx
c001f2fe:	31 c0                	xor    eax,eax
c001f300:	89 da                	mov    edx,ebx
c001f302:	83 c4 1c             	add    esp,0x1c
c001f305:	5b                   	pop    ebx
c001f306:	5e                   	pop    esi
c001f307:	5f                   	pop    edi
c001f308:	5d                   	pop    ebp
c001f309:	c3                   	ret    
c001f30a:	66 90                	xchg   ax,ax
c001f30c:	b8 20 00 00 00       	mov    eax,0x20
c001f311:	29 d8                	sub    eax,ebx
c001f313:	88 d9                	mov    cl,bl
c001f315:	d3 e2                	shl    edx,cl
c001f317:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f31b:	89 fa                	mov    edx,edi
c001f31d:	88 c1                	mov    cl,al
c001f31f:	d3 ea                	shr    edx,cl
c001f321:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f325:	09 d1                	or     ecx,edx
c001f327:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f32b:	88 d9                	mov    cl,bl
c001f32d:	d3 e7                	shl    edi,cl
c001f32f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f333:	89 f7                	mov    edi,esi
c001f335:	88 c1                	mov    cl,al
c001f337:	d3 ef                	shr    edi,cl
c001f339:	88 d9                	mov    cl,bl
c001f33b:	d3 e6                	shl    esi,cl
c001f33d:	89 ea                	mov    edx,ebp
c001f33f:	88 c1                	mov    cl,al
c001f341:	d3 ea                	shr    edx,cl
c001f343:	09 d6                	or     esi,edx
c001f345:	89 f0                	mov    eax,esi
c001f347:	89 fa                	mov    edx,edi
c001f349:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f34d:	89 d7                	mov    edi,edx
c001f34f:	89 c6                	mov    esi,eax
c001f351:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f355:	39 d7                	cmp    edi,edx
c001f357:	72 13                	jb     c001f36c <__udivdi3+0xec>
c001f359:	74 09                	je     c001f364 <__udivdi3+0xe4>
c001f35b:	89 f0                	mov    eax,esi
c001f35d:	31 db                	xor    ebx,ebx
c001f35f:	e9 43 ff ff ff       	jmp    c001f2a7 <__udivdi3+0x27>
c001f364:	88 d9                	mov    cl,bl
c001f366:	d3 e5                	shl    ebp,cl
c001f368:	39 c5                	cmp    ebp,eax
c001f36a:	73 ef                	jae    c001f35b <__udivdi3+0xdb>
c001f36c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f36f:	31 db                	xor    ebx,ebx
c001f371:	e9 31 ff ff ff       	jmp    c001f2a7 <__udivdi3+0x27>
c001f376:	66 90                	xchg   ax,ax
c001f378:	31 c0                	xor    eax,eax
c001f37a:	e9 28 ff ff ff       	jmp    c001f2a7 <__udivdi3+0x27>
c001f37f:	90                   	nop

c001f380 <__umoddi3>:
c001f380:	55                   	push   ebp
c001f381:	57                   	push   edi
c001f382:	56                   	push   esi
c001f383:	53                   	push   ebx
c001f384:	83 ec 1c             	sub    esp,0x1c
c001f387:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f38b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f38f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f393:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f397:	89 da                	mov    edx,ebx
c001f399:	85 c0                	test   eax,eax
c001f39b:	75 37                	jne    c001f3d4 <__umoddi3+0x54>
c001f39d:	39 df                	cmp    edi,ebx
c001f39f:	76 13                	jbe    c001f3b4 <__umoddi3+0x34>
c001f3a1:	89 f0                	mov    eax,esi
c001f3a3:	f7 f7                	div    edi
c001f3a5:	89 d0                	mov    eax,edx
c001f3a7:	31 d2                	xor    edx,edx
c001f3a9:	83 c4 1c             	add    esp,0x1c
c001f3ac:	5b                   	pop    ebx
c001f3ad:	5e                   	pop    esi
c001f3ae:	5f                   	pop    edi
c001f3af:	5d                   	pop    ebp
c001f3b0:	c3                   	ret    
c001f3b1:	8d 76 00             	lea    esi,[esi+0x0]
c001f3b4:	89 fd                	mov    ebp,edi
c001f3b6:	85 ff                	test   edi,edi
c001f3b8:	75 0b                	jne    c001f3c5 <__umoddi3+0x45>
c001f3ba:	b8 01 00 00 00       	mov    eax,0x1
c001f3bf:	31 d2                	xor    edx,edx
c001f3c1:	f7 f7                	div    edi
c001f3c3:	89 c5                	mov    ebp,eax
c001f3c5:	89 d8                	mov    eax,ebx
c001f3c7:	31 d2                	xor    edx,edx
c001f3c9:	f7 f5                	div    ebp
c001f3cb:	89 f0                	mov    eax,esi
c001f3cd:	f7 f5                	div    ebp
c001f3cf:	89 d0                	mov    eax,edx
c001f3d1:	eb d4                	jmp    c001f3a7 <__umoddi3+0x27>
c001f3d3:	90                   	nop
c001f3d4:	89 f1                	mov    ecx,esi
c001f3d6:	39 d8                	cmp    eax,ebx
c001f3d8:	76 0a                	jbe    c001f3e4 <__umoddi3+0x64>
c001f3da:	89 f0                	mov    eax,esi
c001f3dc:	83 c4 1c             	add    esp,0x1c
c001f3df:	5b                   	pop    ebx
c001f3e0:	5e                   	pop    esi
c001f3e1:	5f                   	pop    edi
c001f3e2:	5d                   	pop    ebp
c001f3e3:	c3                   	ret    
c001f3e4:	0f bd e8             	bsr    ebp,eax
c001f3e7:	83 f5 1f             	xor    ebp,0x1f
c001f3ea:	75 1c                	jne    c001f408 <__umoddi3+0x88>
c001f3ec:	39 d8                	cmp    eax,ebx
c001f3ee:	72 04                	jb     c001f3f4 <__umoddi3+0x74>
c001f3f0:	39 f7                	cmp    edi,esi
c001f3f2:	77 08                	ja     c001f3fc <__umoddi3+0x7c>
c001f3f4:	89 da                	mov    edx,ebx
c001f3f6:	29 fe                	sub    esi,edi
c001f3f8:	19 c2                	sbb    edx,eax
c001f3fa:	89 f1                	mov    ecx,esi
c001f3fc:	89 c8                	mov    eax,ecx
c001f3fe:	83 c4 1c             	add    esp,0x1c
c001f401:	5b                   	pop    ebx
c001f402:	5e                   	pop    esi
c001f403:	5f                   	pop    edi
c001f404:	5d                   	pop    ebp
c001f405:	c3                   	ret    
c001f406:	66 90                	xchg   ax,ax
c001f408:	ba 20 00 00 00       	mov    edx,0x20
c001f40d:	29 ea                	sub    edx,ebp
c001f40f:	89 e9                	mov    ecx,ebp
c001f411:	d3 e0                	shl    eax,cl
c001f413:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f417:	89 f8                	mov    eax,edi
c001f419:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f41d:	88 d1                	mov    cl,dl
c001f41f:	d3 e8                	shr    eax,cl
c001f421:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f425:	09 c1                	or     ecx,eax
c001f427:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f42b:	89 e9                	mov    ecx,ebp
c001f42d:	d3 e7                	shl    edi,cl
c001f42f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f433:	89 d8                	mov    eax,ebx
c001f435:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f439:	88 d1                	mov    cl,dl
c001f43b:	d3 e8                	shr    eax,cl
c001f43d:	89 c7                	mov    edi,eax
c001f43f:	89 e9                	mov    ecx,ebp
c001f441:	d3 e3                	shl    ebx,cl
c001f443:	89 f0                	mov    eax,esi
c001f445:	88 d1                	mov    cl,dl
c001f447:	d3 e8                	shr    eax,cl
c001f449:	09 d8                	or     eax,ebx
c001f44b:	89 e9                	mov    ecx,ebp
c001f44d:	d3 e6                	shl    esi,cl
c001f44f:	89 f3                	mov    ebx,esi
c001f451:	89 fa                	mov    edx,edi
c001f453:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f457:	89 d1                	mov    ecx,edx
c001f459:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f45d:	89 c6                	mov    esi,eax
c001f45f:	89 d7                	mov    edi,edx
c001f461:	39 d1                	cmp    ecx,edx
c001f463:	72 27                	jb     c001f48c <__umoddi3+0x10c>
c001f465:	74 21                	je     c001f488 <__umoddi3+0x108>
c001f467:	89 ca                	mov    edx,ecx
c001f469:	29 f3                	sub    ebx,esi
c001f46b:	19 fa                	sbb    edx,edi
c001f46d:	89 d0                	mov    eax,edx
c001f46f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f473:	d3 e0                	shl    eax,cl
c001f475:	89 e9                	mov    ecx,ebp
c001f477:	d3 eb                	shr    ebx,cl
c001f479:	09 d8                	or     eax,ebx
c001f47b:	d3 ea                	shr    edx,cl
c001f47d:	83 c4 1c             	add    esp,0x1c
c001f480:	5b                   	pop    ebx
c001f481:	5e                   	pop    esi
c001f482:	5f                   	pop    edi
c001f483:	5d                   	pop    ebp
c001f484:	c3                   	ret    
c001f485:	8d 76 00             	lea    esi,[esi+0x0]
c001f488:	39 c3                	cmp    ebx,eax
c001f48a:	73 db                	jae    c001f467 <__umoddi3+0xe7>
c001f48c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f490:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f494:	89 d7                	mov    edi,edx
c001f496:	89 c6                	mov    esi,eax
c001f498:	eb cd                	jmp    c001f467 <__umoddi3+0xe7>

Disassembly of section .init:

c001f49a <_init>:
c001f49a:	55                   	push   ebp
c001f49b:	89 e5                	mov    ebp,esp
c001f49d:	e8 52 0c fe ff       	call   c00000f4 <frame_dummy>
c001f4a2:	e8 e5 fa ff ff       	call   c001ef8c <__do_global_ctors_aux>
c001f4a7:	5d                   	pop    ebp
c001f4a8:	c3                   	ret    

Disassembly of section .fini:

c001f4a9 <_fini>:
c001f4a9:	55                   	push   ebp
c001f4aa:	89 e5                	mov    ebp,esp
c001f4ac:	e8 d3 0b fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f4b1:	5d                   	pop    ebp
c001f4b2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f4b4 <Computer::~Computer()>:
c001f4b4:	83 ec 0c             	sub    esp,0xc
c001f4b7:	ba d4 07 02 c0       	mov    edx,0xc00207d4
c001f4bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4c0:	89 10                	mov    DWORD PTR [eax],edx
c001f4c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4c6:	83 ec 0c             	sub    esp,0xc
c001f4c9:	50                   	push   eax
c001f4ca:	e8 49 d1 fe ff       	call   c000c618 <Device::~Device()>
c001f4cf:	83 c4 10             	add    esp,0x10
c001f4d2:	90                   	nop
c001f4d3:	83 c4 0c             	add    esp,0xc
c001f4d6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f4d8 <Computer::~Computer()>:
c001f4d8:	83 ec 0c             	sub    esp,0xc
c001f4db:	83 ec 0c             	sub    esp,0xc
c001f4de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4e2:	e8 cd ff ff ff       	call   c001f4b4 <Computer::~Computer()>
c001f4e7:	83 c4 10             	add    esp,0x10
c001f4ea:	83 ec 08             	sub    esp,0x8
c001f4ed:	68 70 01 00 00       	push   0x170
c001f4f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4f6:	e8 1d b3 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f4fb:	83 c4 10             	add    esp,0x10
c001f4fe:	83 c4 0c             	add    esp,0xc
c001f501:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f502 <idleCommon()>:
c001f502:	83 ec 0c             	sub    esp,0xc
c001f505:	fa                   	cli    
c001f506:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001f50c:	e8 f3 66 ff ff       	call   c0015c04 <schedule()>
c001f511:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001f516:	48                   	dec    eax
c001f517:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001f51c:	75 01                	jne    c001f51f <idleCommon()+0x1d>
c001f51e:	fb                   	sti    
c001f51f:	83 c4 0c             	add    esp,0xc
c001f522:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f524 <LinkedList<UnixFile>::~LinkedList()>:
c001f524:	90                   	nop
c001f525:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f526 <LinkedList<UnixFile>::LinkedList()>:
c001f526:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f52a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f530:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f534:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f53b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f53f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f546:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f54a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f550:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f554:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f55b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f55f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f566:	90                   	nop
c001f567:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f568 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f568:	83 ec 0c             	sub    esp,0xc
c001f56b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f570:	75 10                	jne    c001f582 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f572:	83 ec 0c             	sub    esp,0xc
c001f575:	68 e8 09 02 c0       	push   0xc00209e8
c001f57a:	e8 c6 1d ff ff       	call   c0011345 <KePanic(char const*)>
c001f57f:	83 c4 10             	add    esp,0x10
c001f582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f586:	8b 00                	mov    eax,DWORD PTR [eax]
c001f588:	85 c0                	test   eax,eax
c001f58a:	74 34                	je     c001f5c0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f58c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f590:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f593:	85 c0                	test   eax,eax
c001f595:	74 29                	je     c001f5c0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f59b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f59e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f5a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5ad:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f5b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5b7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f5be:	eb 65                	jmp    c001f625 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f5c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5c4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5c6:	85 c0                	test   eax,eax
c001f5c8:	75 4b                	jne    c001f615 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f5ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5d1:	85 c0                	test   eax,eax
c001f5d3:	75 40                	jne    c001f615 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f5d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5dd:	89 10                	mov    DWORD PTR [eax],edx
c001f5df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5e7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f5ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5f1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f5f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5fc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5ff:	85 c0                	test   eax,eax
c001f601:	74 22                	je     c001f625 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f603:	83 ec 0c             	sub    esp,0xc
c001f606:	68 0a 0a 02 c0       	push   0xc0020a0a
c001f60b:	e8 35 1d ff ff       	call   c0011345 <KePanic(char const*)>
c001f610:	83 c4 10             	add    esp,0x10
c001f613:	eb 10                	jmp    c001f625 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f615:	83 ec 0c             	sub    esp,0xc
c001f618:	68 14 0a 02 c0       	push   0xc0020a14
c001f61d:	e8 23 1d ff ff       	call   c0011345 <KePanic(char const*)>
c001f622:	83 c4 10             	add    esp,0x10
c001f625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f629:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f62c:	8d 50 01             	lea    edx,[eax+0x1]
c001f62f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f633:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f636:	90                   	nop
c001f637:	83 c4 0c             	add    esp,0xc
c001f63a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f63c <LinkedList<UnixFile>::getFirstElement()>:
c001f63c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f640:	8b 00                	mov    eax,DWORD PTR [eax]
c001f642:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f644 <LinkedList<UnixFile>::removeFirst()>:
c001f644:	83 ec 0c             	sub    esp,0xc
c001f647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f64b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f64d:	85 c0                	test   eax,eax
c001f64f:	75 12                	jne    c001f663 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f651:	83 ec 0c             	sub    esp,0xc
c001f654:	68 20 0a 02 c0       	push   0xc0020a20
c001f659:	e8 e7 1c ff ff       	call   c0011345 <KePanic(char const*)>
c001f65e:	83 c4 10             	add    esp,0x10
c001f661:	eb 7e                	jmp    c001f6e1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f663:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f667:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f66a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f66d:	85 c0                	test   eax,eax
c001f66f:	74 10                	je     c001f681 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f671:	83 ec 0c             	sub    esp,0xc
c001f674:	68 6b 0a 02 c0       	push   0xc0020a6b
c001f679:	e8 c7 1c ff ff       	call   c0011345 <KePanic(char const*)>
c001f67e:	83 c4 10             	add    esp,0x10
c001f681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f685:	8b 00                	mov    eax,DWORD PTR [eax]
c001f687:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f68a:	85 c0                	test   eax,eax
c001f68c:	75 33                	jne    c001f6c1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f68e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f692:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f69c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f6a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6aa:	83 f8 01             	cmp    eax,0x1
c001f6ad:	74 21                	je     c001f6d0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f6af:	83 ec 0c             	sub    esp,0xc
c001f6b2:	68 44 0a 02 c0       	push   0xc0020a44
c001f6b7:	e8 89 1c ff ff       	call   c0011345 <KePanic(char const*)>
c001f6bc:	83 c4 10             	add    esp,0x10
c001f6bf:	eb 0f                	jmp    c001f6d0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f6c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6c5:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6c7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f6ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6ce:	89 10                	mov    DWORD PTR [eax],edx
c001f6d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6d7:	8d 50 ff             	lea    edx,[eax-0x1]
c001f6da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6de:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f6e1:	83 c4 0c             	add    esp,0xc
c001f6e4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f6e6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f6e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f6ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6ed:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f6ee <DriverlessDevice::~DriverlessDevice()>:
c001f6ee:	ba fc 15 02 c0       	mov    edx,0xc00215fc
c001f6f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6f7:	89 10                	mov    DWORD PTR [eax],edx
c001f6f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6fd:	50                   	push   eax
c001f6fe:	e8 15 cf fe ff       	call   c000c618 <Device::~Device()>
c001f703:	83 c4 04             	add    esp,0x4
c001f706:	90                   	nop
c001f707:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f708 <DriverlessDevice::~DriverlessDevice()>:
c001f708:	83 ec 0c             	sub    esp,0xc
c001f70b:	83 ec 0c             	sub    esp,0xc
c001f70e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f712:	e8 d7 ff ff ff       	call   c001f6ee <DriverlessDevice::~DriverlessDevice()>
c001f717:	83 c4 10             	add    esp,0x10
c001f71a:	83 ec 08             	sub    esp,0x8
c001f71d:	68 58 01 00 00       	push   0x158
c001f722:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f726:	e8 ed b0 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f72b:	83 c4 10             	add    esp,0x10
c001f72e:	83 c4 0c             	add    esp,0xc
c001f731:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f732 <LinkedList<Device>::addElement(Device*)>:
c001f732:	83 ec 0c             	sub    esp,0xc
c001f735:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f73a:	75 10                	jne    c001f74c <LinkedList<Device>::addElement(Device*)+0x1a>
c001f73c:	83 ec 0c             	sub    esp,0xc
c001f73f:	68 e8 09 02 c0       	push   0xc00209e8
c001f744:	e8 fc 1b ff ff       	call   c0011345 <KePanic(char const*)>
c001f749:	83 c4 10             	add    esp,0x10
c001f74c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f750:	8b 00                	mov    eax,DWORD PTR [eax]
c001f752:	85 c0                	test   eax,eax
c001f754:	74 3a                	je     c001f790 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f75a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f75d:	85 c0                	test   eax,eax
c001f75f:	74 2f                	je     c001f790 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f765:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f768:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f76c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f776:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f77a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f77d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f781:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f784:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f78e:	eb 68                	jmp    c001f7f8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f794:	8b 00                	mov    eax,DWORD PTR [eax]
c001f796:	85 c0                	test   eax,eax
c001f798:	75 4e                	jne    c001f7e8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f79e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7a1:	85 c0                	test   eax,eax
c001f7a3:	75 43                	jne    c001f7e8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f7a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7ad:	89 10                	mov    DWORD PTR [eax],edx
c001f7af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7b7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7c1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f7cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7cf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7d2:	85 c0                	test   eax,eax
c001f7d4:	74 22                	je     c001f7f8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f7d6:	83 ec 0c             	sub    esp,0xc
c001f7d9:	68 0a 0a 02 c0       	push   0xc0020a0a
c001f7de:	e8 62 1b ff ff       	call   c0011345 <KePanic(char const*)>
c001f7e3:	83 c4 10             	add    esp,0x10
c001f7e6:	eb 10                	jmp    c001f7f8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f7e8:	83 ec 0c             	sub    esp,0xc
c001f7eb:	68 14 0a 02 c0       	push   0xc0020a14
c001f7f0:	e8 50 1b ff ff       	call   c0011345 <KePanic(char const*)>
c001f7f5:	83 c4 10             	add    esp,0x10
c001f7f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7fc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7ff:	8d 50 01             	lea    edx,[eax+0x1]
c001f802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f806:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f809:	90                   	nop
c001f80a:	83 c4 0c             	add    esp,0xc
c001f80d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f80e <LinkedList<Device>::LinkedList()>:
c001f80e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f812:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f818:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f81c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f823:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f827:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f82e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f832:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f838:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f83c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f843:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f847:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f84e:	90                   	nop
c001f84f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f850 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f854:	8b 00                	mov    eax,DWORD PTR [eax]
c001f856:	85 c0                	test   eax,eax
c001f858:	75 0e                	jne    c001f868 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f85a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f85e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f861:	85 c0                	test   eax,eax
c001f863:	75 03                	jne    c001f868 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f865:	b0 01                	mov    al,0x1
c001f867:	c3                   	ret    
c001f868:	b0 00                	mov    al,0x0
c001f86a:	90                   	nop
c001f86b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f86c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f86c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f870:	8b 00                	mov    eax,DWORD PTR [eax]
c001f872:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f874 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f874:	83 ec 0c             	sub    esp,0xc
c001f877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f87b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f87d:	85 c0                	test   eax,eax
c001f87f:	75 17                	jne    c001f898 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001f881:	83 ec 0c             	sub    esp,0xc
c001f884:	68 20 0a 02 c0       	push   0xc0020a20
c001f889:	e8 b7 1a ff ff       	call   c0011345 <KePanic(char const*)>
c001f88e:	83 c4 10             	add    esp,0x10
c001f891:	e9 96 00 00 00       	jmp    c001f92c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001f896:	66 90                	xchg   ax,ax
c001f898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f89c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f89f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f8a2:	85 c0                	test   eax,eax
c001f8a4:	0f 95 c0             	setne  al
c001f8a7:	0f b6 c0             	movzx  eax,al
c001f8aa:	85 c0                	test   eax,eax
c001f8ac:	74 12                	je     c001f8c0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001f8ae:	83 ec 0c             	sub    esp,0xc
c001f8b1:	68 6b 0a 02 c0       	push   0xc0020a6b
c001f8b6:	e8 8a 1a ff ff       	call   c0011345 <KePanic(char const*)>
c001f8bb:	83 c4 10             	add    esp,0x10
c001f8be:	66 90                	xchg   ax,ax
c001f8c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8c6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f8c9:	85 c0                	test   eax,eax
c001f8cb:	0f 94 c0             	sete   al
c001f8ce:	0f b6 c0             	movzx  eax,al
c001f8d1:	85 c0                	test   eax,eax
c001f8d3:	74 33                	je     c001f908 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f8d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f8df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f8ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8f1:	83 f8 01             	cmp    eax,0x1
c001f8f4:	74 22                	je     c001f918 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f8f6:	83 ec 0c             	sub    esp,0xc
c001f8f9:	68 44 0a 02 c0       	push   0xc0020a44
c001f8fe:	e8 42 1a ff ff       	call   c0011345 <KePanic(char const*)>
c001f903:	83 c4 10             	add    esp,0x10
c001f906:	eb 10                	jmp    c001f918 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f90c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f90e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f911:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f915:	89 10                	mov    DWORD PTR [eax],edx
c001f917:	90                   	nop
c001f918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f91c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f91f:	8d 50 ff             	lea    edx,[eax-0x1]
c001f922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f926:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f929:	8d 76 00             	lea    esi,[esi+0x0]
c001f92c:	83 c4 0c             	add    esp,0xc
c001f92f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f930 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f930:	83 ec 0c             	sub    esp,0xc
c001f933:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f938:	75 12                	jne    c001f94c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001f93a:	83 ec 0c             	sub    esp,0xc
c001f93d:	68 e8 09 02 c0       	push   0xc00209e8
c001f942:	e8 fe 19 ff ff       	call   c0011345 <KePanic(char const*)>
c001f947:	83 c4 10             	add    esp,0x10
c001f94a:	66 90                	xchg   ax,ax
c001f94c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f950:	8b 00                	mov    eax,DWORD PTR [eax]
c001f952:	85 c0                	test   eax,eax
c001f954:	74 36                	je     c001f98c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f95a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f95d:	85 c0                	test   eax,eax
c001f95f:	74 2b                	je     c001f98c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f965:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f968:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f96c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f973:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f977:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f97a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f97e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f981:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f988:	eb 6a                	jmp    c001f9f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f98a:	66 90                	xchg   ax,ax
c001f98c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f990:	8b 00                	mov    eax,DWORD PTR [eax]
c001f992:	85 c0                	test   eax,eax
c001f994:	75 4e                	jne    c001f9e4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f99a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f99d:	85 c0                	test   eax,eax
c001f99f:	75 43                	jne    c001f9e4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f9a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9a9:	89 10                	mov    DWORD PTR [eax],edx
c001f9ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9b3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f9b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9bd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f9c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9cb:	85 c0                	test   eax,eax
c001f9cd:	74 25                	je     c001f9f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f9cf:	83 ec 0c             	sub    esp,0xc
c001f9d2:	68 0a 0a 02 c0       	push   0xc0020a0a
c001f9d7:	e8 69 19 ff ff       	call   c0011345 <KePanic(char const*)>
c001f9dc:	83 c4 10             	add    esp,0x10
c001f9df:	eb 13                	jmp    c001f9f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f9e1:	8d 76 00             	lea    esi,[esi+0x0]
c001f9e4:	83 ec 0c             	sub    esp,0xc
c001f9e7:	68 14 0a 02 c0       	push   0xc0020a14
c001f9ec:	e8 54 19 ff ff       	call   c0011345 <KePanic(char const*)>
c001f9f1:	83 c4 10             	add    esp,0x10
c001f9f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9f8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9fb:	8d 50 01             	lea    edx,[eax+0x1]
c001f9fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa02:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa05:	90                   	nop
c001fa06:	83 c4 0c             	add    esp,0xc
c001fa09:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fa0c <ACPI::~ACPI()>:
c001fa0c:	83 ec 0c             	sub    esp,0xc
c001fa0f:	ba e4 1b 02 c0       	mov    edx,0xc0021be4
c001fa14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa18:	89 10                	mov    DWORD PTR [eax],edx
c001fa1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa1e:	83 ec 0c             	sub    esp,0xc
c001fa21:	50                   	push   eax
c001fa22:	e8 f1 cb fe ff       	call   c000c618 <Device::~Device()>
c001fa27:	83 c4 10             	add    esp,0x10
c001fa2a:	90                   	nop
c001fa2b:	83 c4 0c             	add    esp,0xc
c001fa2e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fa30 <ACPI::~ACPI()>:
c001fa30:	83 ec 0c             	sub    esp,0xc
c001fa33:	83 ec 0c             	sub    esp,0xc
c001fa36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa3a:	e8 cd ff ff ff       	call   c001fa0c <ACPI::~ACPI()>
c001fa3f:	83 c4 10             	add    esp,0x10
c001fa42:	83 ec 08             	sub    esp,0x8
c001fa45:	68 64 12 00 00       	push   0x1264
c001fa4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa4e:	e8 c5 ad fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fa53:	83 c4 10             	add    esp,0x10
c001fa56:	83 c4 0c             	add    esp,0xc
c001fa59:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001fa5c <LinkedList<Device>::~LinkedList()>:
c001fa5c:	90                   	nop
c001fa5d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001fa60 <LinkedList<Device>::isEmpty()>:
c001fa60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa64:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa66:	85 c0                	test   eax,eax
c001fa68:	75 0e                	jne    c001fa78 <LinkedList<Device>::isEmpty()+0x18>
c001fa6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa71:	85 c0                	test   eax,eax
c001fa73:	75 03                	jne    c001fa78 <LinkedList<Device>::isEmpty()+0x18>
c001fa75:	b0 01                	mov    al,0x1
c001fa77:	c3                   	ret    
c001fa78:	b0 00                	mov    al,0x0
c001fa7a:	90                   	nop
c001fa7b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001fa7c <LinkedList<Device>::getFirstElement()>:
c001fa7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa80:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa82:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001fa84 <LinkedList<Device>::removeFirst()>:
c001fa84:	83 ec 0c             	sub    esp,0xc
c001fa87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa8b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa8d:	85 c0                	test   eax,eax
c001fa8f:	75 17                	jne    c001faa8 <LinkedList<Device>::removeFirst()+0x24>
c001fa91:	83 ec 0c             	sub    esp,0xc
c001fa94:	68 20 0a 02 c0       	push   0xc0020a20
c001fa99:	e8 a7 18 ff ff       	call   c0011345 <KePanic(char const*)>
c001fa9e:	83 c4 10             	add    esp,0x10
c001faa1:	e9 92 00 00 00       	jmp    c001fb38 <LinkedList<Device>::removeFirst()+0xb4>
c001faa6:	66 90                	xchg   ax,ax
c001faa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001faaf:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fab5:	85 c0                	test   eax,eax
c001fab7:	74 13                	je     c001facc <LinkedList<Device>::removeFirst()+0x48>
c001fab9:	83 ec 0c             	sub    esp,0xc
c001fabc:	68 6b 0a 02 c0       	push   0xc0020a6b
c001fac1:	e8 7f 18 ff ff       	call   c0011345 <KePanic(char const*)>
c001fac6:	83 c4 10             	add    esp,0x10
c001fac9:	8d 76 00             	lea    esi,[esi+0x0]
c001facc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fad2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fad8:	85 c0                	test   eax,eax
c001fada:	75 34                	jne    c001fb10 <LinkedList<Device>::removeFirst()+0x8c>
c001fadc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001faf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001faf8:	83 f8 01             	cmp    eax,0x1
c001fafb:	74 27                	je     c001fb24 <LinkedList<Device>::removeFirst()+0xa0>
c001fafd:	83 ec 0c             	sub    esp,0xc
c001fb00:	68 44 0a 02 c0       	push   0xc0020a44
c001fb05:	e8 3b 18 ff ff       	call   c0011345 <KePanic(char const*)>
c001fb0a:	83 c4 10             	add    esp,0x10
c001fb0d:	eb 15                	jmp    c001fb24 <LinkedList<Device>::removeFirst()+0xa0>
c001fb0f:	90                   	nop
c001fb10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb14:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb16:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001fb1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb20:	89 10                	mov    DWORD PTR [eax],edx
c001fb22:	66 90                	xchg   ax,ax
c001fb24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb28:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb2b:	8d 50 ff             	lea    edx,[eax-0x1]
c001fb2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb32:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb35:	8d 76 00             	lea    esi,[esi+0x0]
c001fb38:	83 c4 0c             	add    esp,0xc
c001fb3b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fb3c <CPU::~CPU()>:
c001fb3c:	83 ec 0c             	sub    esp,0xc
c001fb3f:	ba 8c 1d 02 c0       	mov    edx,0xc0021d8c
c001fb44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb48:	89 10                	mov    DWORD PTR [eax],edx
c001fb4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb4e:	83 ec 0c             	sub    esp,0xc
c001fb51:	50                   	push   eax
c001fb52:	e8 c1 ca fe ff       	call   c000c618 <Device::~Device()>
c001fb57:	83 c4 10             	add    esp,0x10
c001fb5a:	90                   	nop
c001fb5b:	83 c4 0c             	add    esp,0xc
c001fb5e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fb60 <CPU::~CPU()>:
c001fb60:	83 ec 0c             	sub    esp,0xc
c001fb63:	83 ec 0c             	sub    esp,0xc
c001fb66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb6a:	e8 cd ff ff ff       	call   c001fb3c <CPU::~CPU()>
c001fb6f:	83 c4 10             	add    esp,0x10
c001fb72:	83 ec 08             	sub    esp,0x8
c001fb75:	68 94 11 00 00       	push   0x1194
c001fb7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb7e:	e8 95 ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fb83:	83 c4 10             	add    esp,0x10
c001fb86:	83 c4 0c             	add    esp,0xc
c001fb89:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fb8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fb8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fb90:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fb93:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fb94 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fb94:	90                   	nop
c001fb95:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fb98 <ThreadControlBlock::ThreadControlBlock()>:
c001fb98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb9c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fba3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fba7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fbae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbb2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fbb9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbbd:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001fbc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbc8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001fbcf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbd3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001fbd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbdb:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001fbdf:	90                   	nop
c001fbe0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fbe4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fbe4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbe8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fbee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbf2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fbf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbfd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fc04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc08:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc12:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc1d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fc24:	90                   	nop
c001fc25:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fc26 <PCI::~PCI()>:
c001fc26:	83 ec 0c             	sub    esp,0xc
c001fc29:	ba 6c 2c 02 c0       	mov    edx,0xc0022c6c
c001fc2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc32:	89 10                	mov    DWORD PTR [eax],edx
c001fc34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc38:	83 ec 0c             	sub    esp,0xc
c001fc3b:	50                   	push   eax
c001fc3c:	e8 6f c4 fe ff       	call   c000c0b0 <Bus::~Bus()>
c001fc41:	83 c4 10             	add    esp,0x10
c001fc44:	90                   	nop
c001fc45:	83 c4 0c             	add    esp,0xc
c001fc48:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fc4a <PCI::~PCI()>:
c001fc4a:	83 ec 0c             	sub    esp,0xc
c001fc4d:	83 ec 0c             	sub    esp,0xc
c001fc50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc54:	e8 cd ff ff ff       	call   c001fc26 <PCI::~PCI()>
c001fc59:	83 c4 10             	add    esp,0x10
c001fc5c:	83 ec 08             	sub    esp,0x8
c001fc5f:	68 5c 01 00 00       	push   0x15c
c001fc64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc68:	e8 ab ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fc6d:	83 c4 10             	add    esp,0x10
c001fc70:	83 c4 0c             	add    esp,0xc
c001fc73:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fc74 <IDE::~IDE()>:
c001fc74:	83 ec 0c             	sub    esp,0xc
c001fc77:	ba 20 2d 02 c0       	mov    edx,0xc0022d20
c001fc7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc80:	89 10                	mov    DWORD PTR [eax],edx
c001fc82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc86:	83 ec 0c             	sub    esp,0xc
c001fc89:	50                   	push   eax
c001fc8a:	e8 01 ce fe ff       	call   c000ca90 <HardDiskController::~HardDiskController()>
c001fc8f:	83 c4 10             	add    esp,0x10
c001fc92:	90                   	nop
c001fc93:	83 c4 0c             	add    esp,0xc
c001fc96:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fc98 <IDE::~IDE()>:
c001fc98:	83 ec 0c             	sub    esp,0xc
c001fc9b:	83 ec 0c             	sub    esp,0xc
c001fc9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fca2:	e8 cd ff ff ff       	call   c001fc74 <IDE::~IDE()>
c001fca7:	83 c4 10             	add    esp,0x10
c001fcaa:	83 ec 08             	sub    esp,0x8
c001fcad:	68 70 02 00 00       	push   0x270
c001fcb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcb6:	e8 5d ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fcbb:	83 c4 10             	add    esp,0x10
c001fcbe:	83 c4 0c             	add    esp,0xc
c001fcc1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001fcc2 <SATABus::~SATABus()>:
c001fcc2:	83 ec 0c             	sub    esp,0xc
c001fcc5:	ba 70 2d 02 c0       	mov    edx,0xc0022d70
c001fcca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcce:	89 10                	mov    DWORD PTR [eax],edx
c001fcd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd4:	83 ec 0c             	sub    esp,0xc
c001fcd7:	50                   	push   eax
c001fcd8:	e8 b3 cd fe ff       	call   c000ca90 <HardDiskController::~HardDiskController()>
c001fcdd:	83 c4 10             	add    esp,0x10
c001fce0:	90                   	nop
c001fce1:	83 c4 0c             	add    esp,0xc
c001fce4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001fce6 <SATABus::~SATABus()>:
c001fce6:	83 ec 0c             	sub    esp,0xc
c001fce9:	83 ec 0c             	sub    esp,0xc
c001fcec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcf0:	e8 cd ff ff ff       	call   c001fcc2 <SATABus::~SATABus()>
c001fcf5:	83 c4 10             	add    esp,0x10
c001fcf8:	83 ec 08             	sub    esp,0x8
c001fcfb:	68 64 01 00 00       	push   0x164
c001fd00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd04:	e8 0f ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fd09:	83 c4 10             	add    esp,0x10
c001fd0c:	83 c4 0c             	add    esp,0xc
c001fd0f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fd10 <ATA::~ATA()>:
c001fd10:	83 ec 0c             	sub    esp,0xc
c001fd13:	ba b0 2d 02 c0       	mov    edx,0xc0022db0
c001fd18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd1c:	89 10                	mov    DWORD PTR [eax],edx
c001fd1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd22:	83 ec 0c             	sub    esp,0xc
c001fd25:	50                   	push   eax
c001fd26:	e8 47 ce fe ff       	call   c000cb72 <PhysicalDisk::~PhysicalDisk()>
c001fd2b:	83 c4 10             	add    esp,0x10
c001fd2e:	90                   	nop
c001fd2f:	83 c4 0c             	add    esp,0xc
c001fd32:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fd34 <ATA::~ATA()>:
c001fd34:	83 ec 0c             	sub    esp,0xc
c001fd37:	83 ec 0c             	sub    esp,0xc
c001fd3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd3e:	e8 cd ff ff ff       	call   c001fd10 <ATA::~ATA()>
c001fd43:	83 c4 10             	add    esp,0x10
c001fd46:	83 ec 08             	sub    esp,0x8
c001fd49:	68 7c 01 00 00       	push   0x17c
c001fd4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd52:	e8 c1 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fd57:	83 c4 10             	add    esp,0x10
c001fd5a:	83 c4 0c             	add    esp,0xc
c001fd5d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fd5e <ATAPI::~ATAPI()>:
c001fd5e:	83 ec 0c             	sub    esp,0xc
c001fd61:	ba f8 2d 02 c0       	mov    edx,0xc0022df8
c001fd66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd6a:	89 10                	mov    DWORD PTR [eax],edx
c001fd6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd70:	83 ec 0c             	sub    esp,0xc
c001fd73:	50                   	push   eax
c001fd74:	e8 f9 cd fe ff       	call   c000cb72 <PhysicalDisk::~PhysicalDisk()>
c001fd79:	83 c4 10             	add    esp,0x10
c001fd7c:	90                   	nop
c001fd7d:	83 c4 0c             	add    esp,0xc
c001fd80:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fd82 <ATAPI::~ATAPI()>:
c001fd82:	83 ec 0c             	sub    esp,0xc
c001fd85:	83 ec 0c             	sub    esp,0xc
c001fd88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd8c:	e8 cd ff ff ff       	call   c001fd5e <ATAPI::~ATAPI()>
c001fd91:	83 c4 10             	add    esp,0x10
c001fd94:	83 ec 08             	sub    esp,0x8
c001fd97:	68 84 01 00 00       	push   0x184
c001fd9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fda0:	e8 73 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fda5:	83 c4 10             	add    esp,0x10
c001fda8:	83 c4 0c             	add    esp,0xc
c001fdab:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001fdac <SATA::~SATA()>:
c001fdac:	83 ec 0c             	sub    esp,0xc
c001fdaf:	ba ac 2e 02 c0       	mov    edx,0xc0022eac
c001fdb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdb8:	89 10                	mov    DWORD PTR [eax],edx
c001fdba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdbe:	83 ec 0c             	sub    esp,0xc
c001fdc1:	50                   	push   eax
c001fdc2:	e8 ab cd fe ff       	call   c000cb72 <PhysicalDisk::~PhysicalDisk()>
c001fdc7:	83 c4 10             	add    esp,0x10
c001fdca:	90                   	nop
c001fdcb:	83 c4 0c             	add    esp,0xc
c001fdce:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001fdd0 <SATA::~SATA()>:
c001fdd0:	83 ec 0c             	sub    esp,0xc
c001fdd3:	83 ec 0c             	sub    esp,0xc
c001fdd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdda:	e8 cd ff ff ff       	call   c001fdac <SATA::~SATA()>
c001fddf:	83 c4 10             	add    esp,0x10
c001fde2:	83 ec 08             	sub    esp,0x8
c001fde5:	68 7c 01 00 00       	push   0x17c
c001fdea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdee:	e8 25 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fdf3:	83 c4 10             	add    esp,0x10
c001fdf6:	83 c4 0c             	add    esp,0xc
c001fdf9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001fdfa <SATAPI::~SATAPI()>:
c001fdfa:	83 ec 0c             	sub    esp,0xc
c001fdfd:	ba d0 2f 02 c0       	mov    edx,0xc0022fd0
c001fe02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe06:	89 10                	mov    DWORD PTR [eax],edx
c001fe08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe0c:	83 ec 0c             	sub    esp,0xc
c001fe0f:	50                   	push   eax
c001fe10:	e8 5d cd fe ff       	call   c000cb72 <PhysicalDisk::~PhysicalDisk()>
c001fe15:	83 c4 10             	add    esp,0x10
c001fe18:	90                   	nop
c001fe19:	83 c4 0c             	add    esp,0xc
c001fe1c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001fe1e <SATAPI::~SATAPI()>:
c001fe1e:	83 ec 0c             	sub    esp,0xc
c001fe21:	83 ec 0c             	sub    esp,0xc
c001fe24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe28:	e8 cd ff ff ff       	call   c001fdfa <SATAPI::~SATAPI()>
c001fe2d:	83 c4 10             	add    esp,0x10
c001fe30:	83 ec 08             	sub    esp,0x8
c001fe33:	68 84 01 00 00       	push   0x184
c001fe38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe3c:	e8 d7 a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fe41:	83 c4 10             	add    esp,0x10
c001fe44:	83 c4 0c             	add    esp,0xc
c001fe47:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001fe48 <IOAPIC::~IOAPIC()>:
c001fe48:	83 ec 0c             	sub    esp,0xc
c001fe4b:	ba 10 30 02 c0       	mov    edx,0xc0023010
c001fe50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe54:	89 10                	mov    DWORD PTR [eax],edx
c001fe56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe5a:	83 ec 0c             	sub    esp,0xc
c001fe5d:	50                   	push   eax
c001fe5e:	e8 b5 c7 fe ff       	call   c000c618 <Device::~Device()>
c001fe63:	83 c4 10             	add    esp,0x10
c001fe66:	90                   	nop
c001fe67:	83 c4 0c             	add    esp,0xc
c001fe6a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001fe6c <IOAPIC::~IOAPIC()>:
c001fe6c:	83 ec 0c             	sub    esp,0xc
c001fe6f:	83 ec 0c             	sub    esp,0xc
c001fe72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe76:	e8 cd ff ff ff       	call   c001fe48 <IOAPIC::~IOAPIC()>
c001fe7b:	83 c4 10             	add    esp,0x10
c001fe7e:	83 ec 08             	sub    esp,0x8
c001fe81:	68 68 01 00 00       	push   0x168
c001fe86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe8a:	e8 89 a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fe8f:	83 c4 10             	add    esp,0x10
c001fe92:	83 c4 0c             	add    esp,0xc
c001fe95:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001fe98 <APICTimer::~APICTimer()>:
c001fe98:	83 ec 0c             	sub    esp,0xc
c001fe9b:	ba 58 30 02 c0       	mov    edx,0xc0023058
c001fea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea4:	89 10                	mov    DWORD PTR [eax],edx
c001fea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feaa:	83 ec 0c             	sub    esp,0xc
c001fead:	50                   	push   eax
c001feae:	e8 31 e2 fe ff       	call   c000e0e4 <Timer::~Timer()>
c001feb3:	83 c4 10             	add    esp,0x10
c001feb6:	90                   	nop
c001feb7:	83 c4 0c             	add    esp,0xc
c001feba:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001febc <APICTimer::~APICTimer()>:
c001febc:	83 ec 0c             	sub    esp,0xc
c001febf:	83 ec 0c             	sub    esp,0xc
c001fec2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fec6:	e8 cd ff ff ff       	call   c001fe98 <APICTimer::~APICTimer()>
c001fecb:	83 c4 10             	add    esp,0x10
c001fece:	83 ec 08             	sub    esp,0x8
c001fed1:	68 60 01 00 00       	push   0x160
c001fed6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feda:	e8 39 a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fedf:	83 c4 10             	add    esp,0x10
c001fee2:	83 c4 0c             	add    esp,0xc
c001fee5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001fee8 <PIT::~PIT()>:
c001fee8:	83 ec 0c             	sub    esp,0xc
c001feeb:	ba a8 30 02 c0       	mov    edx,0xc00230a8
c001fef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef4:	89 10                	mov    DWORD PTR [eax],edx
c001fef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fefa:	83 ec 0c             	sub    esp,0xc
c001fefd:	50                   	push   eax
c001fefe:	e8 e1 e1 fe ff       	call   c000e0e4 <Timer::~Timer()>
c001ff03:	83 c4 10             	add    esp,0x10
c001ff06:	90                   	nop
c001ff07:	83 c4 0c             	add    esp,0xc
c001ff0a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ff0c <PIT::~PIT()>:
c001ff0c:	83 ec 0c             	sub    esp,0xc
c001ff0f:	83 ec 0c             	sub    esp,0xc
c001ff12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff16:	e8 cd ff ff ff       	call   c001fee8 <PIT::~PIT()>
c001ff1b:	83 c4 10             	add    esp,0x10
c001ff1e:	83 ec 08             	sub    esp,0x8
c001ff21:	68 5c 01 00 00       	push   0x15c
c001ff26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff2a:	e8 e9 a8 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ff2f:	83 c4 10             	add    esp,0x10
c001ff32:	83 c4 0c             	add    esp,0xc
c001ff35:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be bd 1e 02 c0       	mov    esi,0xc0021ebd
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be d9 1e 02 c0       	mov    esi,0xc0021ed9
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
