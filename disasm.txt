
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 b0 fb 00 00       	call   c000fbd0 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 23 88 02 00       	call   c0028848 <_init>
c0000025:	c3                   	ret    
c0000026:	bb fe 93 02 c0       	mov    ebx,0xc00293fe
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 0c 94 02 c0    	cmp    ebx,0xc002940c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 b8 dc 02 c0       	mov    eax,0xc002dcb8
c0000049:	3d b8 dc 02 c0       	cmp    eax,0xc002dcb8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 b8 dc 02 c0       	push   0xc002dcb8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 b8 dc 02 c0       	mov    eax,0xc002dcb8
c0000075:	2d b8 dc 02 c0       	sub    eax,0xc002dcb8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 b8 dc 02 c0       	push   0xc002dcb8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d e8 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2e8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 14 94 02 c0       	mov    ebx,0xc0029414
c00000bb:	81 eb 10 94 02 c0    	sub    ebx,0xc0029410
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 10 94 02 c0       	mov    esi,0xc0029410
c00000ca:	a1 ec e2 02 c0       	mov    eax,ds:0xc002e2ec
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ec e2 02 c0       	mov    ds:0xc002e2ec,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ec e2 02 c0       	mov    eax,ds:0xc002e2ec
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 b8 dc 02 c0       	push   0xc002dcb8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 e8 e2 02 c0 01 	mov    BYTE PTR ds:0xc002e2e8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 f0 e2 02 c0       	push   0xc002e2f0
c000012c:	68 b8 dc 02 c0       	push   0xc002dcb8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 4f d6 01 00       	call   c001d9f2 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 e6 27 01 00       	call   c0012ba1 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 2d d6 01 00       	call   c001d9f2 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 7b da 01 00       	call   c001de5f <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 63 e0 01 00       	call   c001e450 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 30 e7 02 c0 	lgdtd  ds:0xc002e730
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	e8 ca 44 01 00       	call   c0014aab <int_handler>
c00005e1:	81 c4 04 00 00 00    	add    esp,0x4
c00005e7:	0f a9                	pop    gs
c00005e9:	0f a1                	pop    fs
c00005eb:	07                   	pop    es
c00005ec:	1f                   	pop    ds
c00005ed:	61                   	popa   
c00005ee:	81 c4 08 00 00 00    	add    esp,0x8
c00005f4:	cf                   	iret   

c00005f5 <irq16>:
c00005f5:	fa                   	cli    
c00005f6:	6a 00                	push   0x0
c00005f8:	6a 30                	push   0x30
c00005fa:	e9 c5 ff ff ff       	jmp    c00005c4 <int_common_stub>

c00005ff <irq17>:
c00005ff:	fa                   	cli    
c0000600:	6a 00                	push   0x0
c0000602:	6a 31                	push   0x31
c0000604:	e9 bb ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000609 <irq18>:
c0000609:	fa                   	cli    
c000060a:	6a 00                	push   0x0
c000060c:	6a 32                	push   0x32
c000060e:	e9 b1 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000613 <irq19>:
c0000613:	fa                   	cli    
c0000614:	6a 00                	push   0x0
c0000616:	6a 33                	push   0x33
c0000618:	e9 a7 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061d <irq20>:
c000061d:	fa                   	cli    
c000061e:	6a 00                	push   0x0
c0000620:	6a 34                	push   0x34
c0000622:	e9 9d ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000627 <irq21>:
c0000627:	fa                   	cli    
c0000628:	6a 00                	push   0x0
c000062a:	6a 35                	push   0x35
c000062c:	e9 93 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000631 <irq22>:
c0000631:	fa                   	cli    
c0000632:	6a 00                	push   0x0
c0000634:	6a 36                	push   0x36
c0000636:	e9 89 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063b <irq23>:
c000063b:	fa                   	cli    
c000063c:	6a 00                	push   0x0
c000063e:	6a 37                	push   0x37
c0000640:	e9 7f ff ff ff       	jmp    c00005c4 <int_common_stub>
c0000645:	66 90                	xchg   ax,ax
c0000647:	90                   	nop

c0000648 <memcmp>:
c0000648:	56                   	push   esi
c0000649:	53                   	push   ebx
c000064a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000064e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000652:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000656:	85 f6                	test   esi,esi
c0000658:	74 1d                	je     c0000677 <memcmp+0x2f>
c000065a:	8a 08                	mov    cl,BYTE PTR [eax]
c000065c:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000065f:	38 cb                	cmp    bl,cl
c0000661:	75 19                	jne    c000067c <memcmp+0x34>
c0000663:	01 c6                	add    esi,eax
c0000665:	eb 0a                	jmp    c0000671 <memcmp+0x29>
c0000667:	90                   	nop
c0000668:	8a 08                	mov    cl,BYTE PTR [eax]
c000066a:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000066d:	38 d9                	cmp    cl,bl
c000066f:	75 0b                	jne    c000067c <memcmp+0x34>
c0000671:	40                   	inc    eax
c0000672:	42                   	inc    edx
c0000673:	39 f0                	cmp    eax,esi
c0000675:	75 f1                	jne    c0000668 <memcmp+0x20>
c0000677:	31 c0                	xor    eax,eax
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    
c000067c:	0f b6 c1             	movzx  eax,cl
c000067f:	29 d8                	sub    eax,ebx
c0000681:	5b                   	pop    ebx
c0000682:	5e                   	pop    esi
c0000683:	c3                   	ret    

c0000684 <memmove>:
c0000684:	55                   	push   ebp
c0000685:	57                   	push   edi
c0000686:	56                   	push   esi
c0000687:	53                   	push   ebx
c0000688:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000068c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000690:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000694:	39 dd                	cmp    ebp,ebx
c0000696:	0f 83 80 00 00 00    	jae    c000071c <memmove+0x98>
c000069c:	85 d2                	test   edx,edx
c000069e:	74 74                	je     c0000714 <memmove+0x90>
c00006a0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a3:	8d 75 04             	lea    esi,[ebp+0x4]
c00006a6:	39 cd                	cmp    ebp,ecx
c00006a8:	0f 93 c1             	setae  cl
c00006ab:	39 f3                	cmp    ebx,esi
c00006ad:	0f 93 c0             	setae  al
c00006b0:	89 c6                	mov    esi,eax
c00006b2:	09 ce                	or     esi,ecx
c00006b4:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006b7:	89 f0                	mov    eax,esi
c00006b9:	83 f9 0c             	cmp    ecx,0xc
c00006bc:	0f 97 c1             	seta   cl
c00006bf:	84 c8                	test   al,cl
c00006c1:	74 75                	je     c0000738 <memmove+0xb4>
c00006c3:	89 e9                	mov    ecx,ebp
c00006c5:	09 d9                	or     ecx,ebx
c00006c7:	83 e1 03             	and    ecx,0x3
c00006ca:	75 6c                	jne    c0000738 <memmove+0xb4>
c00006cc:	89 d7                	mov    edi,edx
c00006ce:	89 d9                	mov    ecx,ebx
c00006d0:	83 e7 fc             	and    edi,0xfffffffc
c00006d3:	89 ee                	mov    esi,ebp
c00006d5:	01 df                	add    edi,ebx
c00006d7:	90                   	nop
c00006d8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006da:	83 c6 04             	add    esi,0x4
c00006dd:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e0:	83 c1 04             	add    ecx,0x4
c00006e3:	39 f9                	cmp    ecx,edi
c00006e5:	75 f1                	jne    c00006d8 <memmove+0x54>
c00006e7:	89 d1                	mov    ecx,edx
c00006e9:	89 d7                	mov    edi,edx
c00006eb:	83 e1 fc             	and    ecx,0xfffffffc
c00006ee:	29 cf                	sub    edi,ecx
c00006f0:	01 cb                	add    ebx,ecx
c00006f2:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006f6:	39 ca                	cmp    edx,ecx
c00006f8:	74 1a                	je     c0000714 <memmove+0x90>
c00006fa:	8a 03                	mov    al,BYTE PTR [ebx]
c00006fc:	83 ff 01             	cmp    edi,0x1
c00006ff:	88 06                	mov    BYTE PTR [esi],al
c0000701:	74 11                	je     c0000714 <memmove+0x90>
c0000703:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000706:	83 ff 02             	cmp    edi,0x2
c0000709:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c000070c:	74 06                	je     c0000714 <memmove+0x90>
c000070e:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000711:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000714:	5b                   	pop    ebx
c0000715:	89 e8                	mov    eax,ebp
c0000717:	5e                   	pop    esi
c0000718:	5f                   	pop    edi
c0000719:	5d                   	pop    ebp
c000071a:	c3                   	ret    
c000071b:	90                   	nop
c000071c:	76 f6                	jbe    c0000714 <memmove+0x90>
c000071e:	85 d2                	test   edx,edx
c0000720:	74 f2                	je     c0000714 <memmove+0x90>
c0000722:	4b                   	dec    ebx
c0000723:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000726:	66 90                	xchg   ax,ax
c0000728:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072b:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000072e:	4a                   	dec    edx
c000072f:	75 f7                	jne    c0000728 <memmove+0xa4>
c0000731:	5b                   	pop    ebx
c0000732:	89 e8                	mov    eax,ebp
c0000734:	5e                   	pop    esi
c0000735:	5f                   	pop    edi
c0000736:	5d                   	pop    ebp
c0000737:	c3                   	ret    
c0000738:	01 ea                	add    edx,ebp
c000073a:	89 e9                	mov    ecx,ebp
c000073c:	8a 03                	mov    al,BYTE PTR [ebx]
c000073e:	41                   	inc    ecx
c000073f:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000742:	43                   	inc    ebx
c0000743:	39 d1                	cmp    ecx,edx
c0000745:	75 f5                	jne    c000073c <memmove+0xb8>
c0000747:	eb cb                	jmp    c0000714 <memmove+0x90>
c0000749:	8d 76 00             	lea    esi,[esi+0x0]

c000074c <memcpy>:
c000074c:	57                   	push   edi
c000074d:	56                   	push   esi
c000074e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000752:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000756:	a8 03                	test   al,0x3
c0000758:	74 12                	je     c000076c <memcpy+0x20>
c000075a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000075e:	89 c1                	mov    ecx,eax
c0000760:	fc                   	cld    
c0000761:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000763:	29 c7                	sub    edi,eax
c0000765:	5e                   	pop    esi
c0000766:	89 f8                	mov    eax,edi
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax
c000076c:	89 c1                	mov    ecx,eax
c000076e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000772:	c1 e9 02             	shr    ecx,0x2
c0000775:	fc                   	cld    
c0000776:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000778:	29 c7                	sub    edi,eax
c000077a:	5e                   	pop    esi
c000077b:	89 f8                	mov    eax,edi
c000077d:	5f                   	pop    edi
c000077e:	c3                   	ret    
c000077f:	90                   	nop

c0000780 <memset>:
c0000780:	57                   	push   edi
c0000781:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000785:	85 c9                	test   ecx,ecx
c0000787:	74 0b                	je     c0000794 <memset+0x14>
c0000789:	fc                   	cld    
c000078a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000792:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000798:	5f                   	pop    edi
c0000799:	c3                   	ret    
c000079a:	66 90                	xchg   ax,ax

c000079c <strlen>:
c000079c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00007a0:	31 c0                	xor    eax,eax
c00007a2:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00007a5:	74 09                	je     c00007b0 <strlen+0x14>
c00007a7:	90                   	nop
c00007a8:	40                   	inc    eax
c00007a9:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007ad:	75 f9                	jne    c00007a8 <strlen+0xc>
c00007af:	c3                   	ret    
c00007b0:	c3                   	ret    
c00007b1:	8d 76 00             	lea    esi,[esi+0x0]

c00007b4 <strpbrk>:
c00007b4:	57                   	push   edi
c00007b5:	56                   	push   esi
c00007b6:	53                   	push   ebx
c00007b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007bb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007bf:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007c1:	84 db                	test   bl,bl
c00007c3:	74 21                	je     c00007e6 <strpbrk+0x32>
c00007c5:	8a 07                	mov    al,BYTE PTR [edi]
c00007c7:	84 c0                	test   al,al
c00007c9:	74 14                	je     c00007df <strpbrk+0x2b>
c00007cb:	38 d8                	cmp    al,bl
c00007cd:	74 19                	je     c00007e8 <strpbrk+0x34>
c00007cf:	89 fa                	mov    edx,edi
c00007d1:	eb 05                	jmp    c00007d8 <strpbrk+0x24>
c00007d3:	90                   	nop
c00007d4:	38 d9                	cmp    cl,bl
c00007d6:	74 10                	je     c00007e8 <strpbrk+0x34>
c00007d8:	42                   	inc    edx
c00007d9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007db:	84 c9                	test   cl,cl
c00007dd:	75 f5                	jne    c00007d4 <strpbrk+0x20>
c00007df:	46                   	inc    esi
c00007e0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007e2:	84 db                	test   bl,bl
c00007e4:	75 e1                	jne    c00007c7 <strpbrk+0x13>
c00007e6:	31 f6                	xor    esi,esi
c00007e8:	89 f0                	mov    eax,esi
c00007ea:	5b                   	pop    ebx
c00007eb:	5e                   	pop    esi
c00007ec:	5f                   	pop    edi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strtok>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007fa:	85 db                	test   ebx,ebx
c00007fc:	75 07                	jne    c0000805 <strtok+0x15>
c00007fe:	eb 2c                	jmp    c000082c <strtok+0x3c>
c0000800:	43                   	inc    ebx
c0000801:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000805:	56                   	push   esi
c0000806:	53                   	push   ebx
c0000807:	e8 a8 ff ff ff       	call   c00007b4 <strpbrk>
c000080c:	5a                   	pop    edx
c000080d:	a3 08 e3 02 c0       	mov    ds:0xc002e308,eax
c0000812:	59                   	pop    ecx
c0000813:	39 d8                	cmp    eax,ebx
c0000815:	74 e9                	je     c0000800 <strtok+0x10>
c0000817:	85 c0                	test   eax,eax
c0000819:	74 1b                	je     c0000836 <strtok+0x46>
c000081b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000081e:	8d 50 01             	lea    edx,[eax+0x1]
c0000821:	89 d8                	mov    eax,ebx
c0000823:	89 15 08 e3 02 c0    	mov    DWORD PTR ds:0xc002e308,edx
c0000829:	5b                   	pop    ebx
c000082a:	5e                   	pop    esi
c000082b:	c3                   	ret    
c000082c:	8b 1d 08 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e308
c0000832:	85 db                	test   ebx,ebx
c0000834:	75 cf                	jne    c0000805 <strtok+0x15>
c0000836:	31 c0                	xor    eax,eax
c0000838:	5b                   	pop    ebx
c0000839:	5e                   	pop    esi
c000083a:	c3                   	ret    
c000083b:	90                   	nop

c000083c <strcpy>:
c000083c:	53                   	push   ebx
c000083d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000841:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000845:	89 c3                	mov    ebx,eax
c0000847:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000849:	84 d2                	test   dl,dl
c000084b:	74 0d                	je     c000085a <strcpy+0x1e>
c000084d:	8d 76 00             	lea    esi,[esi+0x0]
c0000850:	88 13                	mov    BYTE PTR [ebx],dl
c0000852:	41                   	inc    ecx
c0000853:	43                   	inc    ebx
c0000854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000856:	84 d2                	test   dl,dl
c0000858:	75 f6                	jne    c0000850 <strcpy+0x14>
c000085a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000085d:	5b                   	pop    ebx
c000085e:	c3                   	ret    
c000085f:	90                   	nop

c0000860 <strncpy>:
c0000860:	55                   	push   ebp
c0000861:	57                   	push   edi
c0000862:	56                   	push   esi
c0000863:	53                   	push   ebx
c0000864:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000868:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000086c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000870:	85 c0                	test   eax,eax
c0000872:	74 39                	je     c00008ad <strncpy+0x4d>
c0000874:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000876:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000879:	8d 55 01             	lea    edx,[ebp+0x1]
c000087c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000087f:	84 db                	test   bl,bl
c0000881:	74 31                	je     c00008b4 <strncpy+0x54>
c0000883:	85 c9                	test   ecx,ecx
c0000885:	74 26                	je     c00008ad <strncpy+0x4d>
c0000887:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000088a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000088d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000890:	8d 46 02             	lea    eax,[esi+0x2]
c0000893:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000896:	84 db                	test   bl,bl
c0000898:	75 0f                	jne    c00008a9 <strncpy+0x49>
c000089a:	eb 18                	jmp    c00008b4 <strncpy+0x54>
c000089c:	40                   	inc    eax
c000089d:	42                   	inc    edx
c000089e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00008a1:	49                   	dec    ecx
c00008a2:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008a5:	84 db                	test   bl,bl
c00008a7:	74 0b                	je     c00008b4 <strncpy+0x54>
c00008a9:	85 c9                	test   ecx,ecx
c00008ab:	75 ef                	jne    c000089c <strncpy+0x3c>
c00008ad:	5b                   	pop    ebx
c00008ae:	89 e8                	mov    eax,ebp
c00008b0:	5e                   	pop    esi
c00008b1:	5f                   	pop    edi
c00008b2:	5d                   	pop    ebp
c00008b3:	c3                   	ret    
c00008b4:	85 c9                	test   ecx,ecx
c00008b6:	74 f5                	je     c00008ad <strncpy+0x4d>
c00008b8:	fc                   	cld    
c00008b9:	31 c0                	xor    eax,eax
c00008bb:	89 d7                	mov    edi,edx
c00008bd:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008bf:	89 e8                	mov    eax,ebp
c00008c1:	5b                   	pop    ebx
c00008c2:	5e                   	pop    esi
c00008c3:	5f                   	pop    edi
c00008c4:	5d                   	pop    ebp
c00008c5:	c3                   	ret    
c00008c6:	66 90                	xchg   ax,ax

c00008c8 <strcmp>:
c00008c8:	56                   	push   esi
c00008c9:	53                   	push   ebx
c00008ca:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008d4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008d7:	38 d1                	cmp    cl,dl
c00008d9:	75 1d                	jne    c00008f8 <strcmp+0x30>
c00008db:	84 c9                	test   cl,cl
c00008dd:	74 21                	je     c0000900 <strcmp+0x38>
c00008df:	b8 01 00 00 00       	mov    eax,0x1
c00008e4:	eb 07                	jmp    c00008ed <strcmp+0x25>
c00008e6:	66 90                	xchg   ax,ax
c00008e8:	40                   	inc    eax
c00008e9:	84 d2                	test   dl,dl
c00008eb:	74 13                	je     c0000900 <strcmp+0x38>
c00008ed:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008f0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008f4:	38 ca                	cmp    dl,cl
c00008f6:	74 f0                	je     c00008e8 <strcmp+0x20>
c00008f8:	0f b6 c2             	movzx  eax,dl
c00008fb:	5b                   	pop    ebx
c00008fc:	29 c8                	sub    eax,ecx
c00008fe:	5e                   	pop    esi
c00008ff:	c3                   	ret    
c0000900:	31 c0                	xor    eax,eax
c0000902:	5b                   	pop    ebx
c0000903:	5e                   	pop    esi
c0000904:	c3                   	ret    
c0000905:	8d 76 00             	lea    esi,[esi+0x0]

c0000908 <strchr>:
c0000908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000090c:	8a 10                	mov    dl,BYTE PTR [eax]
c000090e:	84 d2                	test   dl,dl
c0000910:	74 15                	je     c0000927 <strchr+0x1f>
c0000912:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000916:	38 ca                	cmp    dl,cl
c0000918:	75 06                	jne    c0000920 <strchr+0x18>
c000091a:	eb 0e                	jmp    c000092a <strchr+0x22>
c000091c:	38 ca                	cmp    dl,cl
c000091e:	74 09                	je     c0000929 <strchr+0x21>
c0000920:	40                   	inc    eax
c0000921:	8a 10                	mov    dl,BYTE PTR [eax]
c0000923:	84 d2                	test   dl,dl
c0000925:	75 f5                	jne    c000091c <strchr+0x14>
c0000927:	31 c0                	xor    eax,eax
c0000929:	c3                   	ret    
c000092a:	c3                   	ret    
c000092b:	90                   	nop

c000092c <strncmp>:
c000092c:	57                   	push   edi
c000092d:	56                   	push   esi
c000092e:	53                   	push   ebx
c000092f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000933:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000937:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000093b:	85 ff                	test   edi,edi
c000093d:	74 28                	je     c0000967 <strncmp+0x3b>
c000093f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000941:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000944:	38 d1                	cmp    cl,dl
c0000946:	75 28                	jne    c0000970 <strncmp+0x44>
c0000948:	8d 46 01             	lea    eax,[esi+0x1]
c000094b:	84 c9                	test   cl,cl
c000094d:	74 18                	je     c0000967 <strncmp+0x3b>
c000094f:	01 fe                	add    esi,edi
c0000951:	eb 0f                	jmp    c0000962 <strncmp+0x36>
c0000953:	90                   	nop
c0000954:	8a 10                	mov    dl,BYTE PTR [eax]
c0000956:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000959:	38 ca                	cmp    dl,cl
c000095b:	75 13                	jne    c0000970 <strncmp+0x44>
c000095d:	40                   	inc    eax
c000095e:	84 d2                	test   dl,dl
c0000960:	74 05                	je     c0000967 <strncmp+0x3b>
c0000962:	43                   	inc    ebx
c0000963:	39 c6                	cmp    esi,eax
c0000965:	75 ed                	jne    c0000954 <strncmp+0x28>
c0000967:	5b                   	pop    ebx
c0000968:	31 c0                	xor    eax,eax
c000096a:	5e                   	pop    esi
c000096b:	5f                   	pop    edi
c000096c:	c3                   	ret    
c000096d:	8d 76 00             	lea    esi,[esi+0x0]
c0000970:	5b                   	pop    ebx
c0000971:	0f b6 c2             	movzx  eax,dl
c0000974:	5e                   	pop    esi
c0000975:	29 c8                	sub    eax,ecx
c0000977:	5f                   	pop    edi
c0000978:	c3                   	ret    
c0000979:	8d 76 00             	lea    esi,[esi+0x0]

c000097c <strcat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000982:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000986:	89 c3                	mov    ebx,eax
c0000988:	eb 04                	jmp    c000098e <strcat+0x12>
c000098a:	66 90                	xchg   ax,ax
c000098c:	89 d3                	mov    ebx,edx
c000098e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f5                	jne    c000098c <strcat+0x10>
c0000997:	31 d2                	xor    edx,edx
c0000999:	8d 76 00             	lea    esi,[esi+0x0]
c000099c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000099f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00009a2:	42                   	inc    edx
c00009a3:	84 c9                	test   cl,cl
c00009a5:	75 f5                	jne    c000099c <strcat+0x20>
c00009a7:	5b                   	pop    ebx
c00009a8:	5e                   	pop    esi
c00009a9:	c3                   	ret    
c00009aa:	66 90                	xchg   ax,ax

c00009ac <strncat>:
c00009ac:	56                   	push   esi
c00009ad:	53                   	push   ebx
c00009ae:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009ba:	85 f6                	test   esi,esi
c00009bc:	74 1e                	je     c00009dc <strncat+0x30>
c00009be:	89 c2                	mov    edx,eax
c00009c0:	42                   	inc    edx
c00009c1:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009c5:	75 f9                	jne    c00009c0 <strncat+0x14>
c00009c7:	01 ce                	add    esi,ecx
c00009c9:	eb 06                	jmp    c00009d1 <strncat+0x25>
c00009cb:	90                   	nop
c00009cc:	39 f1                	cmp    ecx,esi
c00009ce:	74 10                	je     c00009e0 <strncat+0x34>
c00009d0:	42                   	inc    edx
c00009d1:	41                   	inc    ecx
c00009d2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009d5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d8:	84 db                	test   bl,bl
c00009da:	75 f0                	jne    c00009cc <strncat+0x20>
c00009dc:	5b                   	pop    ebx
c00009dd:	5e                   	pop    esi
c00009de:	c3                   	ret    
c00009df:	90                   	nop
c00009e0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009e3:	5b                   	pop    ebx
c00009e4:	5e                   	pop    esi
c00009e5:	c3                   	ret    
c00009e6:	66 90                	xchg   ax,ax

c00009e8 <strstr>:
c00009e8:	57                   	push   edi
c00009e9:	56                   	push   esi
c00009ea:	53                   	push   ebx
c00009eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009ef:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009f3:	57                   	push   edi
c00009f4:	e8 a3 fd ff ff       	call   c000079c <strlen>
c00009f9:	59                   	pop    ecx
c00009fa:	85 c0                	test   eax,eax
c00009fc:	74 2a                	je     c0000a28 <strstr+0x40>
c00009fe:	89 c6                	mov    esi,eax
c0000a00:	eb 12                	jmp    c0000a14 <strstr+0x2c>
c0000a02:	66 90                	xchg   ax,ax
c0000a04:	56                   	push   esi
c0000a05:	57                   	push   edi
c0000a06:	53                   	push   ebx
c0000a07:	e8 3c fc ff ff       	call   c0000648 <memcmp>
c0000a0c:	83 c4 0c             	add    esp,0xc
c0000a0f:	85 c0                	test   eax,eax
c0000a11:	74 15                	je     c0000a28 <strstr+0x40>
c0000a13:	43                   	inc    ebx
c0000a14:	53                   	push   ebx
c0000a15:	e8 82 fd ff ff       	call   c000079c <strlen>
c0000a1a:	5a                   	pop    edx
c0000a1b:	39 f0                	cmp    eax,esi
c0000a1d:	73 e5                	jae    c0000a04 <strstr+0x1c>
c0000a1f:	5b                   	pop    ebx
c0000a20:	31 c0                	xor    eax,eax
c0000a22:	5e                   	pop    esi
c0000a23:	5f                   	pop    edi
c0000a24:	c3                   	ret    
c0000a25:	8d 76 00             	lea    esi,[esi+0x0]
c0000a28:	89 d8                	mov    eax,ebx
c0000a2a:	5b                   	pop    ebx
c0000a2b:	5e                   	pop    esi
c0000a2c:	5f                   	pop    edi
c0000a2d:	c3                   	ret    
c0000a2e:	66 90                	xchg   ax,ax

c0000a30 <toupper>:
c0000a30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a34:	0f b6 d0             	movzx  edx,al
c0000a37:	f6 82 20 94 02 c0 02 	test   BYTE PTR [edx-0x3ffd6be0],0x2
c0000a3e:	74 03                	je     c0000a43 <toupper+0x13>
c0000a40:	83 e8 20             	sub    eax,0x20
c0000a43:	c3                   	ret    

c0000a44 <tolower>:
c0000a44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a48:	0f b6 d0             	movzx  edx,al
c0000a4b:	f6 82 20 94 02 c0 01 	test   BYTE PTR [edx-0x3ffd6be0],0x1
c0000a52:	74 03                	je     c0000a57 <tolower+0x13>
c0000a54:	83 c0 20             	add    eax,0x20
c0000a57:	c3                   	ret    

c0000a58 <simple_strtoul>:
c0000a58:	55                   	push   ebp
c0000a59:	57                   	push   edi
c0000a5a:	56                   	push   esi
c0000a5b:	53                   	push   ebx
c0000a5c:	83 ec 08             	sub    esp,0x8
c0000a5f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a63:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a67:	90                   	nop
c0000a68:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a6b:	f6 82 20 94 02 c0 08 	test   BYTE PTR [edx-0x3ffd6be0],0x8
c0000a72:	75 05                	jne    c0000a79 <simple_strtoul+0x21>
c0000a74:	80 fa 09             	cmp    dl,0x9
c0000a77:	75 03                	jne    c0000a7c <simple_strtoul+0x24>
c0000a79:	41                   	inc    ecx
c0000a7a:	eb ec                	jmp    c0000a68 <simple_strtoul+0x10>
c0000a7c:	80 fa 2d             	cmp    dl,0x2d
c0000a7f:	0f 84 1b 01 00 00    	je     c0000ba0 <simple_strtoul+0x148>
c0000a85:	80 fa 2b             	cmp    dl,0x2b
c0000a88:	0f 84 c2 00 00 00    	je     c0000b50 <simple_strtoul+0xf8>
c0000a8e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a96:	85 f6                	test   esi,esi
c0000a98:	0f 85 c3 00 00 00    	jne    c0000b61 <simple_strtoul+0x109>
c0000a9e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aa0:	80 fa 30             	cmp    dl,0x30
c0000aa3:	0f 84 47 01 00 00    	je     c0000bf0 <simple_strtoul+0x198>
c0000aa9:	be 0a 00 00 00       	mov    esi,0xa
c0000aae:	84 d2                	test   dl,dl
c0000ab0:	0f 84 6f 01 00 00    	je     c0000c25 <simple_strtoul+0x1cd>
c0000ab6:	31 ed                	xor    ebp,ebp
c0000ab8:	31 ff                	xor    edi,edi
c0000aba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ac1:	eb 2b                	jmp    c0000aee <simple_strtoul+0x96>
c0000ac3:	90                   	nop
c0000ac4:	83 eb 30             	sub    ebx,0x30
c0000ac7:	39 f3                	cmp    ebx,esi
c0000ac9:	73 4d                	jae    c0000b18 <simple_strtoul+0xc0>
c0000acb:	31 d2                	xor    edx,edx
c0000acd:	89 d8                	mov    eax,ebx
c0000acf:	f7 d0                	not    eax
c0000ad1:	f7 f6                	div    esi
c0000ad3:	39 f8                	cmp    eax,edi
c0000ad5:	0f 82 b1 00 00 00    	jb     c0000b8c <simple_strtoul+0x134>
c0000adb:	0f af fe             	imul   edi,esi
c0000ade:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ae5:	01 df                	add    edi,ebx
c0000ae7:	41                   	inc    ecx
c0000ae8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aea:	84 d2                	test   dl,dl
c0000aec:	74 2a                	je     c0000b18 <simple_strtoul+0xc0>
c0000aee:	0f b6 da             	movzx  ebx,dl
c0000af1:	f6 83 20 94 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6be0],0x4
c0000af8:	75 ca                	jne    c0000ac4 <simple_strtoul+0x6c>
c0000afa:	0f be d2             	movsx  edx,dl
c0000afd:	52                   	push   edx
c0000afe:	e8 2d ff ff ff       	call   c0000a30 <toupper>
c0000b03:	5b                   	pop    ebx
c0000b04:	0f b6 d0             	movzx  edx,al
c0000b07:	f6 82 20 94 02 c0 01 	test   BYTE PTR [edx-0x3ffd6be0],0x1
c0000b0e:	74 08                	je     c0000b18 <simple_strtoul+0xc0>
c0000b10:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b13:	39 f3                	cmp    ebx,esi
c0000b15:	72 b4                	jb     c0000acb <simple_strtoul+0x73>
c0000b17:	90                   	nop
c0000b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b1c:	85 c0                	test   eax,eax
c0000b1e:	74 14                	je     c0000b34 <simple_strtoul+0xdc>
c0000b20:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b23:	09 f8                	or     eax,edi
c0000b25:	75 71                	jne    c0000b98 <simple_strtoul+0x140>
c0000b27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b2b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b2f:	31 ff                	xor    edi,edi
c0000b31:	89 30                	mov    DWORD PTR [eax],esi
c0000b33:	90                   	nop
c0000b34:	4d                   	dec    ebp
c0000b35:	75 05                	jne    c0000b3c <simple_strtoul+0xe4>
c0000b37:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b3c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b41:	75 02                	jne    c0000b45 <simple_strtoul+0xed>
c0000b43:	f7 df                	neg    edi
c0000b45:	83 c4 08             	add    esp,0x8
c0000b48:	89 f8                	mov    eax,edi
c0000b4a:	5b                   	pop    ebx
c0000b4b:	5e                   	pop    esi
c0000b4c:	5f                   	pop    edi
c0000b4d:	5d                   	pop    ebp
c0000b4e:	c3                   	ret    
c0000b4f:	90                   	nop
c0000b50:	41                   	inc    ecx
c0000b51:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b59:	85 f6                	test   esi,esi
c0000b5b:	0f 84 3d ff ff ff    	je     c0000a9e <simple_strtoul+0x46>
c0000b61:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b64:	83 f8 22             	cmp    eax,0x22
c0000b67:	77 6a                	ja     c0000bd3 <simple_strtoul+0x17b>
c0000b69:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b6b:	83 fe 08             	cmp    esi,0x8
c0000b6e:	0f 84 a2 00 00 00    	je     c0000c16 <simple_strtoul+0x1be>
c0000b74:	83 fe 10             	cmp    esi,0x10
c0000b77:	0f 85 31 ff ff ff    	jne    c0000aae <simple_strtoul+0x56>
c0000b7d:	80 fa 30             	cmp    dl,0x30
c0000b80:	74 2c                	je     c0000bae <simple_strtoul+0x156>
c0000b82:	be 10 00 00 00       	mov    esi,0x10
c0000b87:	e9 22 ff ff ff       	jmp    c0000aae <simple_strtoul+0x56>
c0000b8c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b91:	31 ff                	xor    edi,edi
c0000b93:	e9 4f ff ff ff       	jmp    c0000ae7 <simple_strtoul+0x8f>
c0000b98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b9c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b9e:	eb 94                	jmp    c0000b34 <simple_strtoul+0xdc>
c0000ba0:	41                   	inc    ecx
c0000ba1:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba9:	e9 e8 fe ff ff       	jmp    c0000a96 <simple_strtoul+0x3e>
c0000bae:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bb2:	88 04 24             	mov    BYTE PTR [esp],al
c0000bb5:	50                   	push   eax
c0000bb6:	e8 89 fe ff ff       	call   c0000a44 <tolower>
c0000bbb:	5e                   	pop    esi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	0f 84 84 00 00 00    	je     c0000c49 <simple_strtoul+0x1f1>
c0000bc5:	41                   	inc    ecx
c0000bc6:	be 10 00 00 00       	mov    esi,0x10
c0000bcb:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bce:	e9 db fe ff ff       	jmp    c0000aae <simple_strtoul+0x56>
c0000bd3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bd7:	85 ff                	test   edi,edi
c0000bd9:	74 5c                	je     c0000c37 <simple_strtoul+0x1df>
c0000bdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bdf:	85 c9                	test   ecx,ecx
c0000be1:	75 4e                	jne    c0000c31 <simple_strtoul+0x1d9>
c0000be3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be9:	31 ff                	xor    edi,edi
c0000beb:	e9 4c ff ff ff       	jmp    c0000b3c <simple_strtoul+0xe4>
c0000bf0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bf4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bf7:	50                   	push   eax
c0000bf8:	e8 47 fe ff ff       	call   c0000a44 <tolower>
c0000bfd:	5d                   	pop    ebp
c0000bfe:	83 f8 78             	cmp    eax,0x78
c0000c01:	74 3b                	je     c0000c3e <simple_strtoul+0x1e6>
c0000c03:	41                   	inc    ecx
c0000c04:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000c07:	80 fa 30             	cmp    dl,0x30
c0000c0a:	74 13                	je     c0000c1f <simple_strtoul+0x1c7>
c0000c0c:	be 08 00 00 00       	mov    esi,0x8
c0000c11:	e9 98 fe ff ff       	jmp    c0000aae <simple_strtoul+0x56>
c0000c16:	80 fa 30             	cmp    dl,0x30
c0000c19:	0f 85 8f fe ff ff    	jne    c0000aae <simple_strtoul+0x56>
c0000c1f:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c22:	41                   	inc    ecx
c0000c23:	eb e7                	jmp    c0000c0c <simple_strtoul+0x1b4>
c0000c25:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c29:	85 d2                	test   edx,edx
c0000c2b:	74 0a                	je     c0000c37 <simple_strtoul+0x1df>
c0000c2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c31:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c35:	89 30                	mov    DWORD PTR [eax],esi
c0000c37:	31 ff                	xor    edi,edi
c0000c39:	e9 fe fe ff ff       	jmp    c0000b3c <simple_strtoul+0xe4>
c0000c3e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c41:	83 c1 02             	add    ecx,0x2
c0000c44:	e9 34 ff ff ff       	jmp    c0000b7d <simple_strtoul+0x125>
c0000c49:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c4c:	be 10 00 00 00       	mov    esi,0x10
c0000c51:	83 c1 02             	add    ecx,0x2
c0000c54:	e9 55 fe ff ff       	jmp    c0000aae <simple_strtoul+0x56>

c0000c59 <largebin_index>:
c0000c59:	89 c2                	mov    edx,eax
c0000c5b:	c1 ea 08             	shr    edx,0x8
c0000c5e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c64:	77 10                	ja     c0000c76 <largebin_index+0x1d>
c0000c66:	0f bd d2             	bsr    edx,edx
c0000c69:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c6c:	d3 e8                	shr    eax,cl
c0000c6e:	83 e0 03             	and    eax,0x3
c0000c71:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c75:	c3                   	ret    
c0000c76:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c7b:	c3                   	ret    

c0000c7c <malloc_init_state>:
c0000c7c:	53                   	push   ebx
c0000c7d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c80:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c86:	89 d1                	mov    ecx,edx
c0000c88:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c8b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c8e:	83 c2 08             	add    edx,0x8
c0000c91:	39 da                	cmp    edx,ebx
c0000c93:	75 f3                	jne    c0000c88 <malloc_init_state+0xc>
c0000c95:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c97:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ca1:	83 e2 03             	and    edx,0x3
c0000ca4:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000cae:	83 ca 48             	or     edx,0x48
c0000cb1:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cbb:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cc5:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ccc:	89 10                	mov    DWORD PTR [eax],edx
c0000cce:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cd1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cdb:	5b                   	pop    ebx
c0000cdc:	c3                   	ret    

c0000cdd <malloc_consolidate>:
c0000cdd:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cdf:	85 d2                	test   edx,edx
c0000ce1:	0f 84 d8 00 00 00    	je     c0000dbf <malloc_consolidate+0xe2>
c0000ce7:	55                   	push   ebp
c0000ce8:	83 e2 fd             	and    edx,0xfffffffd
c0000ceb:	57                   	push   edi
c0000cec:	89 c5                	mov    ebp,eax
c0000cee:	56                   	push   esi
c0000cef:	8d 78 34             	lea    edi,[eax+0x34]
c0000cf2:	53                   	push   ebx
c0000cf3:	83 ec 10             	sub    esp,0x10
c0000cf6:	89 10                	mov    DWORD PTR [eax],edx
c0000cf8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cfc:	c1 ea 03             	shr    edx,0x3
c0000cff:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000d03:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000d07:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d0a:	85 d2                	test   edx,edx
c0000d0c:	0f 84 98 00 00 00    	je     c0000daa <malloc_consolidate+0xcd>
c0000d12:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d19:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d1c:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d1f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d23:	89 f9                	mov    ecx,edi
c0000d25:	83 e1 fe             	and    ecx,0xfffffffe
c0000d28:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d2b:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d2e:	83 e3 fc             	and    ebx,0xfffffffc
c0000d31:	83 e7 01             	and    edi,0x1
c0000d34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d37:	75 14                	jne    c0000d4d <malloc_consolidate+0x70>
c0000d39:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d3b:	29 fa                	sub    edx,edi
c0000d3d:	01 f9                	add    ecx,edi
c0000d3f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d42:	89 fb                	mov    ebx,edi
c0000d44:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d47:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d4a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d4d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d50:	74 40                	je     c0000d92 <malloc_consolidate+0xb5>
c0000d52:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d55:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d58:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d5c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d5f:	83 e7 01             	and    edi,0x1
c0000d62:	75 0e                	jne    c0000d72 <malloc_consolidate+0x95>
c0000d64:	01 d9                	add    ecx,ebx
c0000d66:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d6f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d72:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d75:	89 ce                	mov    esi,ecx
c0000d77:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d7a:	83 ce 01             	or     esi,0x1
c0000d7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d80:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d83:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d86:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d8a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d8d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d90:	eb 0c                	jmp    c0000d9e <malloc_consolidate+0xc1>
c0000d92:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d95:	83 c9 01             	or     ecx,0x1
c0000d98:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d9b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d9e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000da2:	85 d2                	test   edx,edx
c0000da4:	0f 85 6f ff ff ff    	jne    c0000d19 <malloc_consolidate+0x3c>
c0000daa:	83 c5 04             	add    ebp,0x4
c0000dad:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000db1:	0f 85 50 ff ff ff    	jne    c0000d07 <malloc_consolidate+0x2a>
c0000db7:	83 c4 10             	add    esp,0x10
c0000dba:	5b                   	pop    ebx
c0000dbb:	5e                   	pop    esi
c0000dbc:	5f                   	pop    edi
c0000dbd:	5d                   	pop    ebp
c0000dbe:	c3                   	ret    
c0000dbf:	e9 b8 fe ff ff       	jmp    c0000c7c <malloc_init_state>

c0000dc4 <dlfree>:
c0000dc4:	57                   	push   edi
c0000dc5:	56                   	push   esi
c0000dc6:	53                   	push   ebx
c0000dc7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dcb:	85 db                	test   ebx,ebx
c0000dcd:	0f 84 e2 00 00 00    	je     c0000eb5 <dlfree+0xf1>
c0000dd3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dd6:	8b 0d 20 e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e320
c0000ddc:	89 f0                	mov    eax,esi
c0000dde:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000de1:	83 e0 fc             	and    eax,0xfffffffc
c0000de4:	39 c1                	cmp    ecx,eax
c0000de6:	72 24                	jb     c0000e0c <dlfree+0x48>
c0000de8:	83 c9 03             	or     ecx,0x3
c0000deb:	c1 e8 03             	shr    eax,0x3
c0000dee:	89 0d 20 e3 02 c0    	mov    DWORD PTR ds:0xc002e320,ecx
c0000df4:	83 e8 02             	sub    eax,0x2
c0000df7:	8b 0c 85 24 e3 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1cdc]
c0000dfe:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000e00:	89 14 85 24 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1cdc],edx
c0000e07:	e9 a9 00 00 00       	jmp    c0000eb5 <dlfree+0xf1>
c0000e0c:	83 e6 02             	and    esi,0x2
c0000e0f:	0f 85 a0 00 00 00    	jne    c0000eb5 <dlfree+0xf1>
c0000e15:	83 c9 01             	or     ecx,0x1
c0000e18:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e1b:	89 0d 20 e3 02 c0    	mov    DWORD PTR ds:0xc002e320,ecx
c0000e21:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e24:	83 e1 fc             	and    ecx,0xfffffffc
c0000e27:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e2b:	75 13                	jne    c0000e40 <dlfree+0x7c>
c0000e2d:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e30:	29 da                	sub    edx,ebx
c0000e32:	01 d8                	add    eax,ebx
c0000e34:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e37:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e3a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e3d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e40:	39 35 4c e3 02 c0    	cmp    DWORD PTR ds:0xc002e34c,esi
c0000e46:	74 40                	je     c0000e88 <dlfree+0xc4>
c0000e48:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e4c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e4f:	80 e3 01             	and    bl,0x1
c0000e52:	75 0e                	jne    c0000e62 <dlfree+0x9e>
c0000e54:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e57:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e5a:	01 c8                	add    eax,ecx
c0000e5c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e5f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e62:	8b 0d 5c e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e35c
c0000e68:	c7 42 0c 54 e3 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e354
c0000e6f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e72:	89 15 5c e3 02 c0    	mov    DWORD PTR ds:0xc002e35c,edx
c0000e78:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e7b:	89 c1                	mov    ecx,eax
c0000e7d:	83 c9 01             	or     ecx,0x1
c0000e80:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e83:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e86:	eb 10                	jmp    c0000e98 <dlfree+0xd4>
c0000e88:	01 c8                	add    eax,ecx
c0000e8a:	89 c1                	mov    ecx,eax
c0000e8c:	83 c9 01             	or     ecx,0x1
c0000e8f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e92:	89 15 4c e3 02 c0    	mov    DWORD PTR ds:0xc002e34c,edx
c0000e98:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e9d:	76 16                	jbe    c0000eb5 <dlfree+0xf1>
c0000e9f:	f6 05 20 e3 02 c0 02 	test   BYTE PTR ds:0xc002e320,0x2
c0000ea6:	74 0d                	je     c0000eb5 <dlfree+0xf1>
c0000ea8:	5b                   	pop    ebx
c0000ea9:	b8 20 e3 02 c0       	mov    eax,0xc002e320
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	e9 28 fe ff ff       	jmp    c0000cdd <malloc_consolidate>
c0000eb5:	5b                   	pop    ebx
c0000eb6:	5e                   	pop    esi
c0000eb7:	5f                   	pop    edi
c0000eb8:	c3                   	ret    

c0000eb9 <sYSMALLOc>:
c0000eb9:	55                   	push   ebp
c0000eba:	57                   	push   edi
c0000ebb:	56                   	push   esi
c0000ebc:	53                   	push   ebx
c0000ebd:	89 d3                	mov    ebx,edx
c0000ebf:	83 ec 2c             	sub    esp,0x2c
c0000ec2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ec6:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ecc:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ecf:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ed2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ed6:	74 1f                	je     c0000ef7 <sYSMALLOc+0x3e>
c0000ed8:	89 d8                	mov    eax,ebx
c0000eda:	e8 fe fd ff ff       	call   c0000cdd <malloc_consolidate>
c0000edf:	83 ec 0c             	sub    esp,0xc
c0000ee2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ee6:	83 e8 07             	sub    eax,0x7
c0000ee9:	50                   	push   eax
c0000eea:	e8 30 02 00 00       	call   c000111f <dlmalloc>
c0000eef:	83 c4 10             	add    esp,0x10
c0000ef2:	e9 20 02 00 00       	jmp    c0001117 <sYSMALLOc+0x25e>
c0000ef7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000efa:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000f00:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000f03:	83 e0 fc             	and    eax,0xfffffffc
c0000f06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f0e:	83 c0 10             	add    eax,0x10
c0000f11:	01 c1                	add    ecx,eax
c0000f13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f17:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f1e:	74 04                	je     c0000f24 <sYSMALLOc+0x6b>
c0000f20:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f24:	f7 da                	neg    edx
c0000f26:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f2a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f2e:	21 d1                	and    ecx,edx
c0000f30:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f34:	7f 07                	jg     c0000f3d <sYSMALLOc+0x84>
c0000f36:	31 c0                	xor    eax,eax
c0000f38:	e9 da 01 00 00       	jmp    c0001117 <sYSMALLOc+0x25e>
c0000f3d:	83 ec 0c             	sub    esp,0xc
c0000f40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f44:	e8 56 e7 00 00       	call   c000f69f <sbrk>
c0000f49:	83 c4 10             	add    esp,0x10
c0000f4c:	89 c6                	mov    esi,eax
c0000f4e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f51:	74 e3                	je     c0000f36 <sYSMALLOc+0x7d>
c0000f53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f57:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f5b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f5e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f64:	39 f1                	cmp    ecx,esi
c0000f66:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f6c:	75 13                	jne    c0000f81 <sYSMALLOc+0xc8>
c0000f6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f72:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f76:	83 c8 01             	or     eax,0x1
c0000f79:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f7c:	e9 3e 01 00 00       	jmp    c00010bf <sYSMALLOc+0x206>
c0000f81:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f87:	88 d0                	mov    al,dl
c0000f89:	83 e0 01             	and    eax,0x1
c0000f8c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f91:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f95:	0f 95 c0             	setne  al
c0000f98:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f9c:	39 f1                	cmp    ecx,esi
c0000f9e:	76 12                	jbe    c0000fb2 <sYSMALLOc+0xf9>
c0000fa0:	84 c0                	test   al,al
c0000fa2:	74 0e                	je     c0000fb2 <sYSMALLOc+0xf9>
c0000fa4:	83 e2 fe             	and    edx,0xfffffffe
c0000fa7:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fad:	e9 83 00 00 00       	jmp    c0001035 <sYSMALLOc+0x17c>
c0000fb2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000fb7:	74 7c                	je     c0001035 <sYSMALLOc+0x17c>
c0000fb9:	84 c0                	test   al,al
c0000fbb:	74 0c                	je     c0000fc9 <sYSMALLOc+0x110>
c0000fbd:	89 f0                	mov    eax,esi
c0000fbf:	29 c8                	sub    eax,ecx
c0000fc1:	01 e8                	add    eax,ebp
c0000fc3:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc9:	89 f2                	mov    edx,esi
c0000fcb:	83 e2 07             	and    edx,0x7
c0000fce:	74 0c                	je     c0000fdc <sYSMALLOc+0x123>
c0000fd0:	b8 08 00 00 00       	mov    eax,0x8
c0000fd5:	29 d0                	sub    eax,edx
c0000fd7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fda:	eb 04                	jmp    c0000fe0 <sYSMALLOc+0x127>
c0000fdc:	89 f5                	mov    ebp,esi
c0000fde:	31 c0                	xor    eax,eax
c0000fe0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fe4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fec:	01 c1                	add    ecx,eax
c0000fee:	83 ec 0c             	sub    esp,0xc
c0000ff1:	01 f1                	add    ecx,esi
c0000ff3:	01 ca                	add    edx,ecx
c0000ff5:	29 c8                	sub    eax,ecx
c0000ff7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ffb:	01 c2                	add    edx,eax
c0000ffd:	52                   	push   edx
c0000ffe:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0001002:	e8 98 e6 00 00       	call   c000f69f <sbrk>
c0001007:	83 c4 10             	add    esp,0x10
c000100a:	83 f8 ff             	cmp    eax,0xffffffff
c000100d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001011:	75 0f                	jne    c0001022 <sYSMALLOc+0x169>
c0001013:	83 ec 0c             	sub    esp,0xc
c0001016:	6a 00                	push   0x0
c0001018:	e8 82 e6 00 00       	call   c000f69f <sbrk>
c000101d:	83 c4 10             	add    esp,0x10
c0001020:	eb 30                	jmp    c0001052 <sYSMALLOc+0x199>
c0001022:	39 c6                	cmp    esi,eax
c0001024:	76 33                	jbe    c0001059 <sYSMALLOc+0x1a0>
c0001026:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000102a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001031:	01 f0                	add    eax,esi
c0001033:	eb 1d                	jmp    c0001052 <sYSMALLOc+0x199>
c0001035:	83 ec 0c             	sub    esp,0xc
c0001038:	89 f5                	mov    ebp,esi
c000103a:	6a 00                	push   0x0
c000103c:	e8 5e e6 00 00       	call   c000f69f <sbrk>
c0001041:	89 c2                	mov    edx,eax
c0001043:	29 f2                	sub    edx,esi
c0001045:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001049:	83 c4 10             	add    esp,0x10
c000104c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001052:	31 d2                	xor    edx,edx
c0001054:	83 f8 ff             	cmp    eax,0xffffffff
c0001057:	74 66                	je     c00010bf <sYSMALLOc+0x206>
c0001059:	29 e8                	sub    eax,ebp
c000105b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000105e:	01 d0                	add    eax,edx
c0001060:	83 c8 01             	or     eax,0x1
c0001063:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001066:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000106c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001071:	74 4c                	je     c00010bf <sYSMALLOc+0x206>
c0001073:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001077:	83 e8 0c             	sub    eax,0xc
c000107a:	83 e0 f8             	and    eax,0xfffffff8
c000107d:	89 c2                	mov    edx,eax
c000107f:	83 ca 01             	or     edx,0x1
c0001082:	83 f8 0f             	cmp    eax,0xf
c0001085:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001088:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001090:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001098:	76 25                	jbe    c00010bf <sYSMALLOc+0x206>
c000109a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00010a0:	83 ec 0c             	sub    esp,0xc
c00010a3:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010ad:	83 c7 08             	add    edi,0x8
c00010b0:	57                   	push   edi
c00010b1:	e8 0e fd ff ff       	call   c0000dc4 <dlfree>
c00010b6:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010bc:	83 c4 10             	add    esp,0x10
c00010bf:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010c5:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010cb:	73 06                	jae    c00010d3 <sYSMALLOc+0x21a>
c00010cd:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010d3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010df:	73 06                	jae    c00010e7 <sYSMALLOc+0x22e>
c00010e1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010e7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ea:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010ed:	83 e2 fc             	and    edx,0xfffffffc
c00010f0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010f4:	0f 82 3c fe ff ff    	jb     c0000f36 <sYSMALLOc+0x7d>
c00010fa:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010fe:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001101:	29 fa                	sub    edx,edi
c0001103:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001106:	83 ca 01             	or     edx,0x1
c0001109:	89 fb                	mov    ebx,edi
c000110b:	83 c0 08             	add    eax,0x8
c000110e:	83 cb 01             	or     ebx,0x1
c0001111:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001114:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001117:	83 c4 2c             	add    esp,0x2c
c000111a:	5b                   	pop    ebx
c000111b:	5e                   	pop    esi
c000111c:	5f                   	pop    edi
c000111d:	5d                   	pop    ebp
c000111e:	c3                   	ret    

c000111f <dlmalloc>:
c000111f:	55                   	push   ebp
c0001120:	57                   	push   edi
c0001121:	56                   	push   esi
c0001122:	53                   	push   ebx
c0001123:	83 ec 1c             	sub    esp,0x1c
c0001126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000112a:	83 f8 df             	cmp    eax,0xffffffdf
c000112d:	0f 87 70 03 00 00    	ja     c00014a3 <dlmalloc+0x384>
c0001133:	83 c0 0b             	add    eax,0xb
c0001136:	be 10 00 00 00       	mov    esi,0x10
c000113b:	83 f8 0f             	cmp    eax,0xf
c000113e:	76 05                	jbe    c0001145 <dlmalloc+0x26>
c0001140:	83 e0 f8             	and    eax,0xfffffff8
c0001143:	89 c6                	mov    esi,eax
c0001145:	8b 3d 20 e3 02 c0    	mov    edi,DWORD PTR ds:0xc002e320
c000114b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001151:	75 17                	jne    c000116a <dlmalloc+0x4b>
c0001153:	85 ff                	test   edi,edi
c0001155:	0f 85 05 03 00 00    	jne    c0001460 <dlmalloc+0x341>
c000115b:	b8 20 e3 02 c0       	mov    eax,0xc002e320
c0001160:	e8 78 fb ff ff       	call   c0000cdd <malloc_consolidate>
c0001165:	e9 f6 02 00 00       	jmp    c0001460 <dlmalloc+0x341>
c000116a:	39 f7                	cmp    edi,esi
c000116c:	72 1f                	jb     c000118d <dlmalloc+0x6e>
c000116e:	89 f2                	mov    edx,esi
c0001170:	c1 ea 03             	shr    edx,0x3
c0001173:	83 ea 02             	sub    edx,0x2
c0001176:	8b 04 95 24 e3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1cdc]
c000117d:	85 c0                	test   eax,eax
c000117f:	74 0c                	je     c000118d <dlmalloc+0x6e>
c0001181:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001184:	89 0c 95 24 e3 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1cdc],ecx
c000118b:	eb 30                	jmp    c00011bd <dlmalloc+0x9e>
c000118d:	89 f0                	mov    eax,esi
c000118f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001195:	77 2e                	ja     c00011c5 <dlmalloc+0xa6>
c0001197:	c1 e8 03             	shr    eax,0x3
c000119a:	8d 14 c5 54 e3 02 c0 	lea    edx,[eax*8-0x3ffd1cac]
c00011a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a5:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011ab:	39 c3                	cmp    ebx,eax
c00011ad:	74 2e                	je     c00011dd <dlmalloc+0xbe>
c00011af:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011b2:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011b7:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011ba:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011bd:	83 c0 08             	add    eax,0x8
c00011c0:	e9 e0 02 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c00011c5:	e8 8f fa ff ff       	call   c0000c59 <largebin_index>
c00011ca:	83 e7 02             	and    edi,0x2
c00011cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011d1:	74 0a                	je     c00011dd <dlmalloc+0xbe>
c00011d3:	b8 20 e3 02 c0       	mov    eax,0xc002e320
c00011d8:	e8 00 fb ff ff       	call   c0000cdd <malloc_consolidate>
c00011dd:	8d 46 10             	lea    eax,[esi+0x10]
c00011e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011e4:	8b 1d 60 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e360
c00011ea:	81 fb 54 e3 02 c0    	cmp    ebx,0xc002e354
c00011f0:	0f 84 13 01 00 00    	je     c0001309 <dlmalloc+0x1ea>
c00011f6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011fc:	83 e7 fc             	and    edi,0xfffffffc
c00011ff:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001205:	77 4c                	ja     c0001253 <dlmalloc+0x134>
c0001207:	3d 54 e3 02 c0       	cmp    eax,0xc002e354
c000120c:	75 45                	jne    c0001253 <dlmalloc+0x134>
c000120e:	39 1d 50 e3 02 c0    	cmp    DWORD PTR ds:0xc002e350,ebx
c0001214:	75 3d                	jne    c0001253 <dlmalloc+0x134>
c0001216:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000121a:	73 37                	jae    c0001253 <dlmalloc+0x134>
c000121c:	8d 04 33             	lea    eax,[ebx+esi*1]
c000121f:	89 fa                	mov    edx,edi
c0001221:	a3 5c e3 02 c0       	mov    ds:0xc002e35c,eax
c0001226:	a3 60 e3 02 c0       	mov    ds:0xc002e360,eax
c000122b:	a3 50 e3 02 c0       	mov    ds:0xc002e350,eax
c0001230:	29 f2                	sub    edx,esi
c0001232:	c7 40 08 54 e3 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e354
c0001239:	c7 40 0c 54 e3 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e354
c0001240:	83 ce 01             	or     esi,0x1
c0001243:	89 d1                	mov    ecx,edx
c0001245:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001248:	83 c9 01             	or     ecx,0x1
c000124b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000124e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001251:	eb 15                	jmp    c0001268 <dlmalloc+0x149>
c0001253:	a3 60 e3 02 c0       	mov    ds:0xc002e360,eax
c0001258:	39 fe                	cmp    esi,edi
c000125a:	c7 40 08 54 e3 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e354
c0001261:	75 0d                	jne    c0001270 <dlmalloc+0x151>
c0001263:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001268:	8d 43 08             	lea    eax,[ebx+0x8]
c000126b:	e9 35 02 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001270:	89 f8                	mov    eax,edi
c0001272:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001278:	77 19                	ja     c0001293 <dlmalloc+0x174>
c000127a:	c1 e8 03             	shr    eax,0x3
c000127d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001280:	83 c2 0d             	add    edx,0xd
c0001283:	8d 2c 95 18 e3 02 c0 	lea    ebp,[edx*4-0x3ffd1ce8]
c000128a:	8b 14 95 20 e3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1ce0]
c0001291:	eb 46                	jmp    c00012d9 <dlmalloc+0x1ba>
c0001293:	e8 c1 f9 ff ff       	call   c0000c59 <largebin_index>
c0001298:	8d 14 00             	lea    edx,[eax+eax*1]
c000129b:	83 c2 0d             	add    edx,0xd
c000129e:	8d 0c 95 20 e3 02 c0 	lea    ecx,[edx*4-0x3ffd1ce0]
c00012a5:	8b 14 95 20 e3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1ce0]
c00012ac:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012af:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012b3:	89 d5                	mov    ebp,edx
c00012b5:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b9:	74 1e                	je     c00012d9 <dlmalloc+0x1ba>
c00012bb:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012be:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012c1:	77 12                	ja     c00012d5 <dlmalloc+0x1b6>
c00012c3:	83 cf 01             	or     edi,0x1
c00012c6:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c9:	76 05                	jbe    c00012d0 <dlmalloc+0x1b1>
c00012cb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012ce:	eb f6                	jmp    c00012c6 <dlmalloc+0x1a7>
c00012d0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012d3:	eb 04                	jmp    c00012d9 <dlmalloc+0x1ba>
c00012d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d9:	89 c7                	mov    edi,eax
c00012db:	88 c1                	mov    cl,al
c00012dd:	c1 ff 05             	sar    edi,0x5
c00012e0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012e4:	bf 01 00 00 00       	mov    edi,0x1
c00012e9:	d3 e7                	shl    edi,cl
c00012eb:	89 f8                	mov    eax,edi
c00012ed:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012f1:	09 04 bd 54 e6 02 c0 	or     DWORD PTR [edi*4-0x3ffd19ac],eax
c00012f8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012fb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012fe:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001301:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001304:	e9 db fe ff ff       	jmp    c00011e4 <dlmalloc+0xc5>
c0001309:	81 fe ff 00 00 00    	cmp    esi,0xff
c000130f:	76 78                	jbe    c0001389 <dlmalloc+0x26a>
c0001311:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001315:	8d 04 c5 54 e3 02 c0 	lea    eax,[eax*8-0x3ffd1cac]
c000131c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000131f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001322:	39 ca                	cmp    edx,ecx
c0001324:	74 63                	je     c0001389 <dlmalloc+0x26a>
c0001326:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001329:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000132c:	83 e3 fc             	and    ebx,0xfffffffc
c000132f:	39 de                	cmp    esi,ebx
c0001331:	77 52                	ja     c0001385 <dlmalloc+0x266>
c0001333:	89 df                	mov    edi,ebx
c0001335:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001338:	29 f7                	sub    edi,esi
c000133a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000133d:	01 d3                	add    ebx,edx
c000133f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001342:	83 ff 0f             	cmp    edi,0xf
c0001345:	8d 42 08             	lea    eax,[edx+0x8]
c0001348:	77 09                	ja     c0001353 <dlmalloc+0x234>
c000134a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000134e:	e9 52 01 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001353:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001356:	83 ce 01             	or     esi,0x1
c0001359:	89 0d 5c e3 02 c0    	mov    DWORD PTR ds:0xc002e35c,ecx
c000135f:	89 0d 60 e3 02 c0    	mov    DWORD PTR ds:0xc002e360,ecx
c0001365:	c7 41 08 54 e3 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e354
c000136c:	c7 41 0c 54 e3 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e354
c0001373:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001376:	89 fa                	mov    edx,edi
c0001378:	83 ca 01             	or     edx,0x1
c000137b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000137e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001380:	e9 20 01 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001385:	89 c2                	mov    edx,eax
c0001387:	eb 99                	jmp    c0001322 <dlmalloc+0x203>
c0001389:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000138d:	b8 01 00 00 00       	mov    eax,0x1
c0001392:	41                   	inc    ecx
c0001393:	89 cb                	mov    ebx,ecx
c0001395:	8d 14 cd 4c e3 02 c0 	lea    edx,[ecx*8-0x3ffd1cb4]
c000139c:	c1 eb 05             	shr    ebx,0x5
c000139f:	d3 e0                	shl    eax,cl
c00013a1:	8b 3c 9d 54 e6 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd19ac]
c00013a8:	39 f8                	cmp    eax,edi
c00013aa:	77 04                	ja     c00013b0 <dlmalloc+0x291>
c00013ac:	85 c0                	test   eax,eax
c00013ae:	75 26                	jne    c00013d6 <dlmalloc+0x2b7>
c00013b0:	43                   	inc    ebx
c00013b1:	83 fb 02             	cmp    ebx,0x2
c00013b4:	0f 87 a6 00 00 00    	ja     c0001460 <dlmalloc+0x341>
c00013ba:	8b 3c 9d 54 e6 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd19ac]
c00013c1:	85 ff                	test   edi,edi
c00013c3:	74 eb                	je     c00013b0 <dlmalloc+0x291>
c00013c5:	89 d8                	mov    eax,ebx
c00013c7:	c1 e0 06             	shl    eax,0x6
c00013ca:	8d 14 85 4c e3 02 c0 	lea    edx,[eax*4-0x3ffd1cb4]
c00013d1:	b8 01 00 00 00       	mov    eax,0x1
c00013d6:	85 f8                	test   eax,edi
c00013d8:	75 07                	jne    c00013e1 <dlmalloc+0x2c2>
c00013da:	83 c2 08             	add    edx,0x8
c00013dd:	01 c0                	add    eax,eax
c00013df:	eb f5                	jmp    c00013d6 <dlmalloc+0x2b7>
c00013e1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013e4:	39 ca                	cmp    edx,ecx
c00013e6:	75 14                	jne    c00013fc <dlmalloc+0x2dd>
c00013e8:	89 c1                	mov    ecx,eax
c00013ea:	83 c2 08             	add    edx,0x8
c00013ed:	f7 d1                	not    ecx
c00013ef:	01 c0                	add    eax,eax
c00013f1:	21 cf                	and    edi,ecx
c00013f3:	89 3c 9d 54 e6 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd19ac],edi
c00013fa:	eb ac                	jmp    c00013a8 <dlmalloc+0x289>
c00013fc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013ff:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001402:	83 e0 fc             	and    eax,0xfffffffc
c0001405:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001408:	89 c3                	mov    ebx,eax
c000140a:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000140d:	29 f3                	sub    ebx,esi
c000140f:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001412:	83 fb 0f             	cmp    ebx,0xf
c0001415:	8d 41 08             	lea    eax,[ecx+0x8]
c0001418:	77 09                	ja     c0001423 <dlmalloc+0x304>
c000141a:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000141e:	e9 82 00 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001423:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001426:	81 fe ff 00 00 00    	cmp    esi,0xff
c000142c:	89 3d 5c e3 02 c0    	mov    DWORD PTR ds:0xc002e35c,edi
c0001432:	89 3d 60 e3 02 c0    	mov    DWORD PTR ds:0xc002e360,edi
c0001438:	c7 47 08 54 e3 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e354
c000143f:	c7 47 0c 54 e3 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e354
c0001446:	77 06                	ja     c000144e <dlmalloc+0x32f>
c0001448:	89 3d 50 e3 02 c0    	mov    DWORD PTR ds:0xc002e350,edi
c000144e:	83 ce 01             	or     esi,0x1
c0001451:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001454:	89 d9                	mov    ecx,ebx
c0001456:	83 c9 01             	or     ecx,0x1
c0001459:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000145c:	89 1a                	mov    DWORD PTR [edx],ebx
c000145e:	eb 45                	jmp    c00014a5 <dlmalloc+0x386>
c0001460:	a1 4c e3 02 c0       	mov    eax,ds:0xc002e34c
c0001465:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001468:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000146b:	83 e2 fc             	and    edx,0xfffffffc
c000146e:	39 d1                	cmp    ecx,edx
c0001470:	77 1e                	ja     c0001490 <dlmalloc+0x371>
c0001472:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001475:	89 f3                	mov    ebx,esi
c0001477:	89 0d 4c e3 02 c0    	mov    DWORD PTR ds:0xc002e34c,ecx
c000147d:	83 cb 01             	or     ebx,0x1
c0001480:	29 f2                	sub    edx,esi
c0001482:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001485:	83 ca 01             	or     edx,0x1
c0001488:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000148b:	e9 2d fd ff ff       	jmp    c00011bd <dlmalloc+0x9e>
c0001490:	83 c4 1c             	add    esp,0x1c
c0001493:	89 f0                	mov    eax,esi
c0001495:	5b                   	pop    ebx
c0001496:	ba 20 e3 02 c0       	mov    edx,0xc002e320
c000149b:	5e                   	pop    esi
c000149c:	5f                   	pop    edi
c000149d:	5d                   	pop    ebp
c000149e:	e9 16 fa ff ff       	jmp    c0000eb9 <sYSMALLOc>
c00014a3:	31 c0                	xor    eax,eax
c00014a5:	83 c4 1c             	add    esp,0x1c
c00014a8:	5b                   	pop    ebx
c00014a9:	5e                   	pop    esi
c00014aa:	5f                   	pop    edi
c00014ab:	5d                   	pop    ebp
c00014ac:	c3                   	ret    

c00014ad <iALLOc>:
c00014ad:	55                   	push   ebp
c00014ae:	89 c5                	mov    ebp,eax
c00014b0:	57                   	push   edi
c00014b1:	56                   	push   esi
c00014b2:	53                   	push   ebx
c00014b3:	83 ec 2c             	sub    esp,0x2c
c00014b6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014ba:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014c2:	83 3d 20 e3 02 c0 00 	cmp    DWORD PTR ds:0xc002e320,0x0
c00014c9:	75 12                	jne    c00014dd <iALLOc+0x30>
c00014cb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014cf:	b8 20 e3 02 c0       	mov    eax,0xc002e320
c00014d4:	e8 04 f8 ff ff       	call   c0000cdd <malloc_consolidate>
c00014d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e2:	74 12                	je     c00014f6 <iALLOc+0x49>
c00014e4:	85 ed                	test   ebp,ebp
c00014e6:	0f 84 64 01 00 00    	je     c0001650 <iALLOc+0x1a3>
c00014ec:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014f4:	eb 33                	jmp    c0001529 <iALLOc+0x7c>
c00014f6:	85 ed                	test   ebp,ebp
c00014f8:	75 14                	jne    c000150e <iALLOc+0x61>
c00014fa:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001502:	83 c4 2c             	add    esp,0x2c
c0001505:	5b                   	pop    ebx
c0001506:	5e                   	pop    esi
c0001507:	5f                   	pop    edi
c0001508:	5d                   	pop    ebp
c0001509:	e9 11 fc ff ff       	jmp    c000111f <dlmalloc>
c000150e:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001515:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000151d:	83 f8 0f             	cmp    eax,0xf
c0001520:	76 07                	jbe    c0001529 <iALLOc+0x7c>
c0001522:	83 e0 f8             	and    eax,0xfffffff8
c0001525:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001529:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000152e:	75 09                	jne    c0001539 <iALLOc+0x8c>
c0001530:	89 d0                	mov    eax,edx
c0001532:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001535:	31 f6                	xor    esi,esi
c0001537:	eb 3b                	jmp    c0001574 <iALLOc+0xc7>
c0001539:	8b 02                	mov    eax,DWORD PTR [edx]
c000153b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001543:	83 c0 0b             	add    eax,0xb
c0001546:	83 f8 0f             	cmp    eax,0xf
c0001549:	76 07                	jbe    c0001552 <iALLOc+0xa5>
c000154b:	83 e0 f8             	and    eax,0xfffffff8
c000154e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001552:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001556:	0f af f5             	imul   esi,ebp
c0001559:	eb 25                	jmp    c0001580 <iALLOc+0xd3>
c000155b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000155d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001560:	bb 10 00 00 00       	mov    ebx,0x10
c0001565:	83 f9 0f             	cmp    ecx,0xf
c0001568:	76 05                	jbe    c000156f <iALLOc+0xc2>
c000156a:	83 e1 f8             	and    ecx,0xfffffff8
c000156d:	89 cb                	mov    ebx,ecx
c000156f:	01 de                	add    esi,ebx
c0001571:	83 c0 04             	add    eax,0x4
c0001574:	39 c7                	cmp    edi,eax
c0001576:	75 e3                	jne    c000155b <iALLOc+0xae>
c0001578:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001580:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001584:	8b 1d 74 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e674
c000158a:	83 ec 0c             	sub    esp,0xc
c000158d:	c7 05 74 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e674,0x0
c0001597:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000159b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000159f:	50                   	push   eax
c00015a0:	e8 7a fb ff ff       	call   c000111f <dlmalloc>
c00015a5:	83 c4 10             	add    esp,0x10
c00015a8:	89 1d 74 e6 02 c0    	mov    DWORD PTR ds:0xc002e674,ebx
c00015ae:	85 c0                	test   eax,eax
c00015b0:	0f 84 92 00 00 00    	je     c0001648 <iALLOc+0x19b>
c00015b6:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b9:	8d 78 f8             	lea    edi,[eax-0x8]
c00015bc:	83 e3 fc             	and    ebx,0xfffffffc
c00015bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015c3:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c8:	74 1e                	je     c00015e8 <iALLOc+0x13b>
c00015ca:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015ce:	89 d9                	mov    ecx,ebx
c00015d0:	52                   	push   edx
c00015d1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015d5:	83 e9 04             	sub    ecx,0x4
c00015d8:	51                   	push   ecx
c00015d9:	6a 00                	push   0x0
c00015db:	50                   	push   eax
c00015dc:	e8 9f f1 ff ff       	call   c0000780 <memset>
c00015e1:	83 c4 10             	add    esp,0x10
c00015e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015ed:	75 14                	jne    c0001603 <iALLOc+0x156>
c00015ef:	8d 04 37             	lea    eax,[edi+esi*1]
c00015f2:	29 f3                	sub    ebx,esi
c00015f4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015f7:	83 cb 01             	or     ebx,0x1
c00015fa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015fe:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001601:	89 f3                	mov    ebx,esi
c0001603:	31 c0                	xor    eax,eax
c0001605:	4d                   	dec    ebp
c0001606:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001609:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000160d:	39 c5                	cmp    ebp,eax
c000160f:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001612:	74 2c                	je     c0001640 <iALLOc+0x193>
c0001614:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001618:	85 c9                	test   ecx,ecx
c000161a:	75 15                	jne    c0001631 <iALLOc+0x184>
c000161c:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000161f:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001622:	b9 10 00 00 00       	mov    ecx,0x10
c0001627:	83 fe 0f             	cmp    esi,0xf
c000162a:	76 05                	jbe    c0001631 <iALLOc+0x184>
c000162c:	83 e6 f8             	and    esi,0xfffffff8
c000162f:	89 f1                	mov    ecx,esi
c0001631:	89 ce                	mov    esi,ecx
c0001633:	29 cb                	sub    ebx,ecx
c0001635:	83 ce 01             	or     esi,0x1
c0001638:	40                   	inc    eax
c0001639:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000163c:	01 cf                	add    edi,ecx
c000163e:	eb c6                	jmp    c0001606 <iALLOc+0x159>
c0001640:	83 cb 01             	or     ebx,0x1
c0001643:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001646:	eb 08                	jmp    c0001650 <iALLOc+0x1a3>
c0001648:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001654:	83 c4 2c             	add    esp,0x2c
c0001657:	5b                   	pop    ebx
c0001658:	5e                   	pop    esi
c0001659:	5f                   	pop    edi
c000165a:	5d                   	pop    ebp
c000165b:	c3                   	ret    

c000165c <dlrealloc>:
c000165c:	55                   	push   ebp
c000165d:	57                   	push   edi
c000165e:	56                   	push   esi
c000165f:	53                   	push   ebx
c0001660:	83 ec 1c             	sub    esp,0x1c
c0001663:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001667:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000166b:	85 db                	test   ebx,ebx
c000166d:	75 10                	jne    c000167f <dlrealloc+0x23>
c000166f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001673:	83 c4 1c             	add    esp,0x1c
c0001676:	5b                   	pop    ebx
c0001677:	5e                   	pop    esi
c0001678:	5f                   	pop    edi
c0001679:	5d                   	pop    ebp
c000167a:	e9 a0 fa ff ff       	jmp    c000111f <dlmalloc>
c000167f:	83 f8 df             	cmp    eax,0xffffffdf
c0001682:	76 07                	jbe    c000168b <dlrealloc+0x2f>
c0001684:	31 db                	xor    ebx,ebx
c0001686:	e9 7c 01 00 00       	jmp    c0001807 <dlrealloc+0x1ab>
c000168b:	83 c0 0b             	add    eax,0xb
c000168e:	bf 10 00 00 00       	mov    edi,0x10
c0001693:	83 f8 0f             	cmp    eax,0xf
c0001696:	76 05                	jbe    c000169d <dlrealloc+0x41>
c0001698:	83 e0 f8             	and    eax,0xfffffff8
c000169b:	89 c7                	mov    edi,eax
c000169d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00016a0:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00016a3:	89 c6                	mov    esi,eax
c00016a5:	83 e6 fc             	and    esi,0xfffffffc
c00016a8:	a8 02                	test   al,0x2
c00016aa:	75 d8                	jne    c0001684 <dlrealloc+0x28>
c00016ac:	39 f7                	cmp    edi,esi
c00016ae:	0f 86 15 01 00 00    	jbe    c00017c9 <dlrealloc+0x16d>
c00016b4:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016bb:	39 15 4c e3 02 c0    	cmp    DWORD PTR ds:0xc002e34c,edx
c00016c1:	75 33                	jne    c00016f6 <dlrealloc+0x9a>
c00016c3:	83 e1 fc             	and    ecx,0xfffffffc
c00016c6:	01 f1                	add    ecx,esi
c00016c8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016cc:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016cf:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016d3:	77 49                	ja     c000171e <dlrealloc+0xc2>
c00016d5:	01 fd                	add    ebp,edi
c00016d7:	83 e0 01             	and    eax,0x1
c00016da:	09 f8                	or     eax,edi
c00016dc:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016df:	89 2d 4c e3 02 c0    	mov    DWORD PTR ds:0xc002e34c,ebp
c00016e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e9:	29 f8                	sub    eax,edi
c00016eb:	83 c8 01             	or     eax,0x1
c00016ee:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016f1:	e9 11 01 00 00       	jmp    c0001807 <dlrealloc+0x1ab>
c00016f6:	89 c8                	mov    eax,ecx
c00016f8:	83 e0 fe             	and    eax,0xfffffffe
c00016fb:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001700:	75 1c                	jne    c000171e <dlrealloc+0xc2>
c0001702:	83 e1 fc             	and    ecx,0xfffffffc
c0001705:	01 f1                	add    ecx,esi
c0001707:	39 cf                	cmp    edi,ecx
c0001709:	77 13                	ja     c000171e <dlrealloc+0xc2>
c000170b:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c000170e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001711:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001714:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001717:	89 ce                	mov    esi,ecx
c0001719:	e9 ab 00 00 00       	jmp    c00017c9 <dlrealloc+0x16d>
c000171e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001722:	8d 47 f9             	lea    eax,[edi-0x7]
c0001725:	83 ec 0c             	sub    esp,0xc
c0001728:	50                   	push   eax
c0001729:	e8 f1 f9 ff ff       	call   c000111f <dlmalloc>
c000172e:	83 c4 10             	add    esp,0x10
c0001731:	89 c1                	mov    ecx,eax
c0001733:	85 c0                	test   eax,eax
c0001735:	0f 84 49 ff ff ff    	je     c0001684 <dlrealloc+0x28>
c000173b:	8d 40 f8             	lea    eax,[eax-0x8]
c000173e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001742:	39 c2                	cmp    edx,eax
c0001744:	75 0a                	jne    c0001750 <dlrealloc+0xf4>
c0001746:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001749:	83 e0 fc             	and    eax,0xfffffffc
c000174c:	01 c6                	add    esi,eax
c000174e:	eb 79                	jmp    c00017c9 <dlrealloc+0x16d>
c0001750:	83 ee 04             	sub    esi,0x4
c0001753:	83 fe 27             	cmp    esi,0x27
c0001756:	76 16                	jbe    c000176e <dlrealloc+0x112>
c0001758:	50                   	push   eax
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	51                   	push   ecx
c000175c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001760:	e8 e7 ef ff ff       	call   c000074c <memcpy>
c0001765:	83 c4 10             	add    esp,0x10
c0001768:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000176c:	eb 43                	jmp    c00017b1 <dlrealloc+0x155>
c000176e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001770:	83 fe 13             	cmp    esi,0x13
c0001773:	89 01                	mov    DWORD PTR [ecx],eax
c0001775:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001778:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c000177b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000177e:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001781:	76 2e                	jbe    c00017b1 <dlrealloc+0x155>
c0001783:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001786:	83 fe 1b             	cmp    esi,0x1b
c0001789:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000178c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000178f:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001792:	76 1d                	jbe    c00017b1 <dlrealloc+0x155>
c0001794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001797:	83 fe 23             	cmp    esi,0x23
c000179a:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000179d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00017a0:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00017a3:	76 0c                	jbe    c00017b1 <dlrealloc+0x155>
c00017a5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a8:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017ab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017ae:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017b5:	83 ec 0c             	sub    esp,0xc
c00017b8:	53                   	push   ebx
c00017b9:	e8 06 f6 ff ff       	call   c0000dc4 <dlfree>
c00017be:	83 c4 10             	add    esp,0x10
c00017c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017c5:	89 cb                	mov    ebx,ecx
c00017c7:	eb 3e                	jmp    c0001807 <dlrealloc+0x1ab>
c00017c9:	89 f2                	mov    edx,esi
c00017cb:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017ce:	29 fa                	sub    edx,edi
c00017d0:	83 e1 01             	and    ecx,0x1
c00017d3:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017d7:	83 fa 0f             	cmp    edx,0xf
c00017da:	77 0b                	ja     c00017e7 <dlrealloc+0x18b>
c00017dc:	09 ce                	or     esi,ecx
c00017de:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017e1:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017e5:	eb 20                	jmp    c0001807 <dlrealloc+0x1ab>
c00017e7:	01 fd                	add    ebp,edi
c00017e9:	83 ec 0c             	sub    esp,0xc
c00017ec:	09 cf                	or     edi,ecx
c00017ee:	83 ca 01             	or     edx,0x1
c00017f1:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017f4:	83 c5 08             	add    ebp,0x8
c00017f7:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017fe:	55                   	push   ebp
c00017ff:	e8 c0 f5 ff ff       	call   c0000dc4 <dlfree>
c0001804:	83 c4 10             	add    esp,0x10
c0001807:	83 c4 1c             	add    esp,0x1c
c000180a:	89 d8                	mov    eax,ebx
c000180c:	5b                   	pop    ebx
c000180d:	5e                   	pop    esi
c000180e:	5f                   	pop    edi
c000180f:	5d                   	pop    ebp
c0001810:	c3                   	ret    

c0001811 <dlmemalign>:
c0001811:	55                   	push   ebp
c0001812:	57                   	push   edi
c0001813:	56                   	push   esi
c0001814:	53                   	push   ebx
c0001815:	83 ec 0c             	sub    esp,0xc
c0001818:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000181c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001820:	83 fa 08             	cmp    edx,0x8
c0001823:	77 10                	ja     c0001835 <dlmemalign+0x24>
c0001825:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001829:	83 c4 0c             	add    esp,0xc
c000182c:	5b                   	pop    ebx
c000182d:	5e                   	pop    esi
c000182e:	5f                   	pop    edi
c000182f:	5d                   	pop    ebp
c0001830:	e9 ea f8 ff ff       	jmp    c000111f <dlmalloc>
c0001835:	bf 10 00 00 00       	mov    edi,0x10
c000183a:	83 fa 0f             	cmp    edx,0xf
c000183d:	76 13                	jbe    c0001852 <dlmemalign+0x41>
c000183f:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001842:	85 d1                	test   ecx,edx
c0001844:	75 04                	jne    c000184a <dlmemalign+0x39>
c0001846:	89 d7                	mov    edi,edx
c0001848:	eb 08                	jmp    c0001852 <dlmemalign+0x41>
c000184a:	39 d7                	cmp    edi,edx
c000184c:	73 04                	jae    c0001852 <dlmemalign+0x41>
c000184e:	01 ff                	add    edi,edi
c0001850:	eb f8                	jmp    c000184a <dlmemalign+0x39>
c0001852:	83 f8 df             	cmp    eax,0xffffffdf
c0001855:	76 07                	jbe    c000185e <dlmemalign+0x4d>
c0001857:	31 c0                	xor    eax,eax
c0001859:	e9 ce 00 00 00       	jmp    c000192c <dlmemalign+0x11b>
c000185e:	83 c0 0b             	add    eax,0xb
c0001861:	bd 10 00 00 00       	mov    ebp,0x10
c0001866:	83 f8 0f             	cmp    eax,0xf
c0001869:	76 05                	jbe    c0001870 <dlmemalign+0x5f>
c000186b:	83 e0 f8             	and    eax,0xfffffff8
c000186e:	89 c5                	mov    ebp,eax
c0001870:	83 ec 0c             	sub    esp,0xc
c0001873:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001877:	50                   	push   eax
c0001878:	e8 a2 f8 ff ff       	call   c000111f <dlmalloc>
c000187d:	83 c4 10             	add    esp,0x10
c0001880:	89 c1                	mov    ecx,eax
c0001882:	85 c0                	test   eax,eax
c0001884:	74 d1                	je     c0001857 <dlmemalign+0x46>
c0001886:	31 d2                	xor    edx,edx
c0001888:	8d 70 f8             	lea    esi,[eax-0x8]
c000188b:	f7 f7                	div    edi
c000188d:	85 d2                	test   edx,edx
c000188f:	74 62                	je     c00018f3 <dlmemalign+0xe2>
c0001891:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001895:	89 f8                	mov    eax,edi
c0001897:	f7 d8                	neg    eax
c0001899:	21 c3                	and    ebx,eax
c000189b:	83 eb 08             	sub    ebx,0x8
c000189e:	89 d8                	mov    eax,ebx
c00018a0:	29 f0                	sub    eax,esi
c00018a2:	83 f8 0f             	cmp    eax,0xf
c00018a5:	77 02                	ja     c00018a9 <dlmemalign+0x98>
c00018a7:	01 fb                	add    ebx,edi
c00018a9:	89 d8                	mov    eax,ebx
c00018ab:	29 f0                	sub    eax,esi
c00018ad:	89 c6                	mov    esi,eax
c00018af:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018b2:	89 c2                	mov    edx,eax
c00018b4:	83 e2 fc             	and    edx,0xfffffffc
c00018b7:	29 f2                	sub    edx,esi
c00018b9:	a8 02                	test   al,0x2
c00018bb:	74 10                	je     c00018cd <dlmemalign+0xbc>
c00018bd:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018c0:	83 ca 02             	or     edx,0x2
c00018c3:	8d 43 08             	lea    eax,[ebx+0x8]
c00018c6:	89 33                	mov    DWORD PTR [ebx],esi
c00018c8:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018cb:	eb 5f                	jmp    c000192c <dlmemalign+0x11b>
c00018cd:	83 ec 0c             	sub    esp,0xc
c00018d0:	89 d0                	mov    eax,edx
c00018d2:	83 c8 01             	or     eax,0x1
c00018d5:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d8:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018dd:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018e0:	83 e0 01             	and    eax,0x1
c00018e3:	09 f0                	or     eax,esi
c00018e5:	89 de                	mov    esi,ebx
c00018e7:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018ea:	51                   	push   ecx
c00018eb:	e8 d4 f4 ff ff       	call   c0000dc4 <dlfree>
c00018f0:	83 c4 10             	add    esp,0x10
c00018f3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018f6:	a8 02                	test   al,0x2
c00018f8:	75 2f                	jne    c0001929 <dlmemalign+0x118>
c00018fa:	83 e0 fc             	and    eax,0xfffffffc
c00018fd:	8d 55 10             	lea    edx,[ebp+0x10]
c0001900:	39 c2                	cmp    edx,eax
c0001902:	73 25                	jae    c0001929 <dlmemalign+0x118>
c0001904:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	29 e8                	sub    eax,ebp
c000190c:	83 c2 08             	add    edx,0x8
c000190f:	83 c8 01             	or     eax,0x1
c0001912:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001915:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001918:	83 e0 01             	and    eax,0x1
c000191b:	09 c5                	or     ebp,eax
c000191d:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001920:	52                   	push   edx
c0001921:	e8 9e f4 ff ff       	call   c0000dc4 <dlfree>
c0001926:	83 c4 10             	add    esp,0x10
c0001929:	8d 46 08             	lea    eax,[esi+0x8]
c000192c:	83 c4 0c             	add    esp,0xc
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlcalloc>:
c0001934:	53                   	push   ebx
c0001935:	83 ec 14             	sub    esp,0x14
c0001938:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000193c:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001941:	50                   	push   eax
c0001942:	e8 d8 f7 ff ff       	call   c000111f <dlmalloc>
c0001947:	83 c4 10             	add    esp,0x10
c000194a:	89 c3                	mov    ebx,eax
c000194c:	85 c0                	test   eax,eax
c000194e:	74 77                	je     c00019c7 <dlcalloc+0x93>
c0001950:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001953:	89 d0                	mov    eax,edx
c0001955:	83 e0 fc             	and    eax,0xfffffffc
c0001958:	80 e2 02             	and    dl,0x2
c000195b:	75 5a                	jne    c00019b7 <dlcalloc+0x83>
c000195d:	83 e8 04             	sub    eax,0x4
c0001960:	83 f8 27             	cmp    eax,0x27
c0001963:	76 03                	jbe    c0001968 <dlcalloc+0x34>
c0001965:	51                   	push   ecx
c0001966:	eb 53                	jmp    c00019bb <dlcalloc+0x87>
c0001968:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000196e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001975:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000197c:	83 f8 13             	cmp    eax,0x13
c000197f:	76 46                	jbe    c00019c7 <dlcalloc+0x93>
c0001981:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001988:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000198f:	83 f8 1b             	cmp    eax,0x1b
c0001992:	76 33                	jbe    c00019c7 <dlcalloc+0x93>
c0001994:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000199b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00019a2:	83 f8 23             	cmp    eax,0x23
c00019a5:	76 20                	jbe    c00019c7 <dlcalloc+0x93>
c00019a7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019ae:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019b5:	eb 10                	jmp    c00019c7 <dlcalloc+0x93>
c00019b7:	83 e8 08             	sub    eax,0x8
c00019ba:	52                   	push   edx
c00019bb:	50                   	push   eax
c00019bc:	6a 00                	push   0x0
c00019be:	53                   	push   ebx
c00019bf:	e8 bc ed ff ff       	call   c0000780 <memset>
c00019c4:	83 c4 10             	add    esp,0x10
c00019c7:	89 d8                	mov    eax,ebx
c00019c9:	83 c4 08             	add    esp,0x8
c00019cc:	5b                   	pop    ebx
c00019cd:	c3                   	ret    

c00019ce <dlcfree>:
c00019ce:	e9 f1 f3 ff ff       	jmp    c0000dc4 <dlfree>

c00019d3 <dlindependent_calloc>:
c00019d3:	83 ec 28             	sub    esp,0x28
c00019d6:	b9 03 00 00 00       	mov    ecx,0x3
c00019db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019df:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ef:	e8 b9 fa ff ff       	call   c00014ad <iALLOc>
c00019f4:	83 c4 2c             	add    esp,0x2c
c00019f7:	c3                   	ret    

c00019f8 <dlindependent_comalloc>:
c00019f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a00:	31 c9                	xor    ecx,ecx
c0001a02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001a06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a0a:	e9 9e fa ff ff       	jmp    c00014ad <iALLOc>

c0001a0f <dlvalloc>:
c0001a0f:	83 ec 0c             	sub    esp,0xc
c0001a12:	83 3d 20 e3 02 c0 00 	cmp    DWORD PTR ds:0xc002e320,0x0
c0001a19:	75 0a                	jne    c0001a25 <dlvalloc+0x16>
c0001a1b:	b8 20 e3 02 c0       	mov    eax,0xc002e320
c0001a20:	e8 b8 f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001a25:	50                   	push   eax
c0001a26:	50                   	push   eax
c0001a27:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a2b:	ff 35 7c e6 02 c0    	push   DWORD PTR ds:0xc002e67c
c0001a31:	e8 db fd ff ff       	call   c0001811 <dlmemalign>
c0001a36:	83 c4 1c             	add    esp,0x1c
c0001a39:	c3                   	ret    

c0001a3a <dlpvalloc>:
c0001a3a:	83 ec 0c             	sub    esp,0xc
c0001a3d:	83 3d 20 e3 02 c0 00 	cmp    DWORD PTR ds:0xc002e320,0x0
c0001a44:	75 0a                	jne    c0001a50 <dlpvalloc+0x16>
c0001a46:	b8 20 e3 02 c0       	mov    eax,0xc002e320
c0001a4b:	e8 8d f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001a50:	a1 7c e6 02 c0       	mov    eax,ds:0xc002e67c
c0001a55:	89 c1                	mov    ecx,eax
c0001a57:	52                   	push   edx
c0001a58:	f7 d9                	neg    ecx
c0001a5a:	52                   	push   edx
c0001a5b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a5f:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a63:	21 ca                	and    edx,ecx
c0001a65:	52                   	push   edx
c0001a66:	50                   	push   eax
c0001a67:	e8 a5 fd ff ff       	call   c0001811 <dlmemalign>
c0001a6c:	83 c4 1c             	add    esp,0x1c
c0001a6f:	c3                   	ret    

c0001a70 <dlmalloc_trim>:
c0001a70:	b8 20 e3 02 c0       	mov    eax,0xc002e320
c0001a75:	e8 63 f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001a7a:	31 c0                	xor    eax,eax
c0001a7c:	c3                   	ret    

c0001a7d <dlmalloc_usable_size>:
c0001a7d:	53                   	push   ebx
c0001a7e:	31 c0                	xor    eax,eax
c0001a80:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a84:	85 c9                	test   ecx,ecx
c0001a86:	74 24                	je     c0001aac <dlmalloc_usable_size+0x2f>
c0001a88:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a8b:	f6 c2 02             	test   dl,0x2
c0001a8e:	74 08                	je     c0001a98 <dlmalloc_usable_size+0x1b>
c0001a90:	83 e2 fc             	and    edx,0xfffffffc
c0001a93:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a96:	eb 14                	jmp    c0001aac <dlmalloc_usable_size+0x2f>
c0001a98:	89 d3                	mov    ebx,edx
c0001a9a:	31 c0                	xor    eax,eax
c0001a9c:	83 e3 fe             	and    ebx,0xfffffffe
c0001a9f:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001aa4:	74 06                	je     c0001aac <dlmalloc_usable_size+0x2f>
c0001aa6:	83 e2 fc             	and    edx,0xfffffffc
c0001aa9:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aac:	5b                   	pop    ebx
c0001aad:	c3                   	ret    

c0001aae <dlmallinfo>:
c0001aae:	55                   	push   ebp
c0001aaf:	57                   	push   edi
c0001ab0:	56                   	push   esi
c0001ab1:	53                   	push   ebx
c0001ab2:	83 ec 08             	sub    esp,0x8
c0001ab5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab9:	83 3d 4c e3 02 c0 00 	cmp    DWORD PTR ds:0xc002e34c,0x0
c0001ac0:	75 0a                	jne    c0001acc <dlmallinfo+0x1e>
c0001ac2:	b8 20 e3 02 c0       	mov    eax,0xc002e320
c0001ac7:	e8 11 f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001acc:	a1 4c e3 02 c0       	mov    eax,ds:0xc002e34c
c0001ad1:	31 ed                	xor    ebp,ebp
c0001ad3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ad6:	31 c9                	xor    ecx,ecx
c0001ad8:	83 e0 fc             	and    eax,0xfffffffc
c0001adb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001adf:	31 c0                	xor    eax,eax
c0001ae1:	8b 14 85 24 e3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1cdc]
c0001ae8:	85 d2                	test   edx,edx
c0001aea:	74 0e                	je     c0001afa <dlmallinfo+0x4c>
c0001aec:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aef:	45                   	inc    ebp
c0001af0:	83 e6 fc             	and    esi,0xfffffffc
c0001af3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001af6:	01 f1                	add    ecx,esi
c0001af8:	eb ee                	jmp    c0001ae8 <dlmallinfo+0x3a>
c0001afa:	40                   	inc    eax
c0001afb:	83 f8 0a             	cmp    eax,0xa
c0001afe:	75 e1                	jne    c0001ae1 <dlmallinfo+0x33>
c0001b00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b04:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b0b:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b0e:	b8 54 e3 02 c0       	mov    eax,0xc002e354
c0001b13:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b16:	39 f0                	cmp    eax,esi
c0001b18:	74 10                	je     c0001b2a <dlmallinfo+0x7c>
c0001b1a:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b1d:	ff 04 24             	inc    DWORD PTR [esp]
c0001b20:	83 e7 fc             	and    edi,0xfffffffc
c0001b23:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b26:	01 fa                	add    edx,edi
c0001b28:	eb ec                	jmp    c0001b16 <dlmallinfo+0x68>
c0001b2a:	83 c0 08             	add    eax,0x8
c0001b2d:	3d 4c e6 02 c0       	cmp    eax,0xc002e64c
c0001b32:	75 df                	jne    c0001b13 <dlmallinfo+0x65>
c0001b34:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b37:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b3a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b3d:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0001b42:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b45:	89 03                	mov    DWORD PTR [ebx],eax
c0001b47:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b4a:	8b 35 70 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e670
c0001b50:	29 d0                	sub    eax,edx
c0001b52:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b58:	8b 35 84 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e684
c0001b5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b62:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b65:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b68:	8b 35 94 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e694
c0001b6e:	89 d8                	mov    eax,ebx
c0001b70:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b73:	83 c4 08             	add    esp,0x8
c0001b76:	5b                   	pop    ebx
c0001b77:	5e                   	pop    esi
c0001b78:	5f                   	pop    edi
c0001b79:	5d                   	pop    ebp
c0001b7a:	c2 04 00             	ret    0x4

c0001b7d <dlmalloc_stats>:
c0001b7d:	83 ec 30             	sub    esp,0x30
c0001b80:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b84:	50                   	push   eax
c0001b85:	e8 24 ff ff ff       	call   c0001aae <dlmallinfo>
c0001b8a:	83 c4 30             	add    esp,0x30
c0001b8d:	c3                   	ret    

c0001b8e <dlmallopt>:
c0001b8e:	56                   	push   esi
c0001b8f:	b8 20 e3 02 c0       	mov    eax,0xc002e320
c0001b94:	53                   	push   ebx
c0001b95:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b9d:	e8 3b f1 ff ff       	call   c0000cdd <malloc_consolidate>
c0001ba2:	8d 46 04             	lea    eax,[esi+0x4]
c0001ba5:	83 f8 05             	cmp    eax,0x5
c0001ba8:	77 67                	ja     c0001c11 <dlmallopt+0x83>
c0001baa:	ff 24 85 24 95 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6adc]
c0001bb1:	83 fb 50             	cmp    ebx,0x50
c0001bb4:	77 5b                	ja     c0001c11 <dlmallopt+0x83>
c0001bb6:	ba 08 00 00 00       	mov    edx,0x8
c0001bbb:	85 db                	test   ebx,ebx
c0001bbd:	74 12                	je     c0001bd1 <dlmallopt+0x43>
c0001bbf:	83 c3 0b             	add    ebx,0xb
c0001bc2:	ba 10 00 00 00       	mov    edx,0x10
c0001bc7:	83 fb 0f             	cmp    ebx,0xf
c0001bca:	76 05                	jbe    c0001bd1 <dlmallopt+0x43>
c0001bcc:	89 da                	mov    edx,ebx
c0001bce:	83 e2 f8             	and    edx,0xfffffff8
c0001bd1:	a1 20 e3 02 c0       	mov    eax,ds:0xc002e320
c0001bd6:	83 e0 03             	and    eax,0x3
c0001bd9:	09 d0                	or     eax,edx
c0001bdb:	a3 20 e3 02 c0       	mov    ds:0xc002e320,eax
c0001be0:	eb 31                	jmp    c0001c13 <dlmallopt+0x85>
c0001be2:	89 1d 64 e6 02 c0    	mov    DWORD PTR ds:0xc002e664,ebx
c0001be8:	eb 06                	jmp    c0001bf0 <dlmallopt+0x62>
c0001bea:	89 1d 68 e6 02 c0    	mov    DWORD PTR ds:0xc002e668,ebx
c0001bf0:	be 01 00 00 00       	mov    esi,0x1
c0001bf5:	eb 1c                	jmp    c0001c13 <dlmallopt+0x85>
c0001bf7:	89 1d 6c e6 02 c0    	mov    DWORD PTR ds:0xc002e66c,ebx
c0001bfd:	eb f1                	jmp    c0001bf0 <dlmallopt+0x62>
c0001bff:	31 f6                	xor    esi,esi
c0001c01:	85 db                	test   ebx,ebx
c0001c03:	75 0e                	jne    c0001c13 <dlmallopt+0x85>
c0001c05:	c7 05 74 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e674,0x0
c0001c0f:	eb df                	jmp    c0001bf0 <dlmallopt+0x62>
c0001c11:	31 f6                	xor    esi,esi
c0001c13:	89 f0                	mov    eax,esi
c0001c15:	5b                   	pop    ebx
c0001c16:	5e                   	pop    esi
c0001c17:	c3                   	ret    

c0001c18 <disk_status>:
c0001c18:	31 c0                	xor    eax,eax
c0001c1a:	c3                   	ret    

c0001c1b <disk_initialize>:
c0001c1b:	31 c0                	xor    eax,eax
c0001c1d:	c3                   	ret    

c0001c1e <disk_read>:
c0001c1e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c23:	0f b6 04 85 00 1e 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce200]
c0001c2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c2f:	e9 6e f3 01 00       	jmp    c0020fa2 <fatWrapperReadDisk>

c0001c34 <disk_write>:
c0001c34:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c39:	0f b6 04 85 00 1e 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce200]
c0001c41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c45:	e9 9f f3 01 00       	jmp    c0020fe9 <fatWrapperWriteDisk>

c0001c4a <disk_ioctl>:
c0001c4a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c53:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c58:	0f b6 04 85 00 1e 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce200]
c0001c60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c64:	e9 c7 f3 01 00       	jmp    c0021030 <fatWrapperIoctl>

c0001c69 <ld_word>:
c0001c69:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c6d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c70:	c1 e2 08             	shl    edx,0x8
c0001c73:	09 d0                	or     eax,edx
c0001c75:	c3                   	ret    

c0001c76 <ld_dword>:
c0001c76:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c7a:	89 d1                	mov    ecx,edx
c0001c7c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c80:	c1 e1 08             	shl    ecx,0x8
c0001c83:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c86:	09 ca                	or     edx,ecx
c0001c88:	c1 e2 08             	shl    edx,0x8
c0001c8b:	09 d0                	or     eax,edx
c0001c8d:	c3                   	ret    

c0001c8e <ld_qword>:
c0001c8e:	57                   	push   edi
c0001c8f:	56                   	push   esi
c0001c90:	53                   	push   ebx
c0001c91:	31 db                	xor    ebx,ebx
c0001c93:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c96:	89 df                	mov    edi,ebx
c0001c98:	89 ce                	mov    esi,ecx
c0001c9a:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c9e:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca2:	c1 e6 08             	shl    esi,0x8
c0001ca5:	09 f2                	or     edx,esi
c0001ca7:	89 d6                	mov    esi,edx
c0001ca9:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001cad:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb1:	c1 e6 08             	shl    esi,0x8
c0001cb4:	09 f2                	or     edx,esi
c0001cb6:	89 d6                	mov    esi,edx
c0001cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cbc:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cc0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cc3:	c1 e6 08             	shl    esi,0x8
c0001cc6:	89 fb                	mov    ebx,edi
c0001cc8:	09 f2                	or     edx,esi
c0001cca:	89 d1                	mov    ecx,edx
c0001ccc:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cd0:	c1 e1 08             	shl    ecx,0x8
c0001cd3:	89 da                	mov    edx,ebx
c0001cd5:	09 c8                	or     eax,ecx
c0001cd7:	5b                   	pop    ebx
c0001cd8:	5e                   	pop    esi
c0001cd9:	5f                   	pop    edi
c0001cda:	c3                   	ret    

c0001cdb <st_word>:
c0001cdb:	66 89 10             	mov    WORD PTR [eax],dx
c0001cde:	c3                   	ret    

c0001cdf <st_dword>:
c0001cdf:	89 10                	mov    DWORD PTR [eax],edx
c0001ce1:	c3                   	ret    

c0001ce2 <st_qword>:
c0001ce2:	89 10                	mov    DWORD PTR [eax],edx
c0001ce4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ce7:	c3                   	ret    

c0001ce8 <mem_cpy>:
c0001ce8:	85 c9                	test   ecx,ecx
c0001cea:	74 10                	je     c0001cfc <mem_cpy+0x14>
c0001cec:	57                   	push   edi
c0001ced:	01 c1                	add    ecx,eax
c0001cef:	56                   	push   esi
c0001cf0:	89 c7                	mov    edi,eax
c0001cf2:	89 d6                	mov    esi,edx
c0001cf4:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cf5:	39 f9                	cmp    ecx,edi
c0001cf7:	75 fb                	jne    c0001cf4 <mem_cpy+0xc>
c0001cf9:	5e                   	pop    esi
c0001cfa:	5f                   	pop    edi
c0001cfb:	c3                   	ret    
c0001cfc:	c3                   	ret    

c0001cfd <mem_set>:
c0001cfd:	01 c1                	add    ecx,eax
c0001cff:	40                   	inc    eax
c0001d00:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d03:	39 c8                	cmp    eax,ecx
c0001d05:	75 f8                	jne    c0001cff <mem_set+0x2>
c0001d07:	c3                   	ret    

c0001d08 <mem_cmp>:
c0001d08:	57                   	push   edi
c0001d09:	56                   	push   esi
c0001d0a:	89 c6                	mov    esi,eax
c0001d0c:	53                   	push   ebx
c0001d0d:	46                   	inc    esi
c0001d0e:	42                   	inc    edx
c0001d0f:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d13:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d17:	29 fb                	sub    ebx,edi
c0001d19:	89 cf                	mov    edi,ecx
c0001d1b:	29 f7                	sub    edi,esi
c0001d1d:	01 c7                	add    edi,eax
c0001d1f:	74 04                	je     c0001d25 <mem_cmp+0x1d>
c0001d21:	85 db                	test   ebx,ebx
c0001d23:	74 e8                	je     c0001d0d <mem_cmp+0x5>
c0001d25:	89 d8                	mov    eax,ebx
c0001d27:	5b                   	pop    ebx
c0001d28:	5e                   	pop    esi
c0001d29:	5f                   	pop    edi
c0001d2a:	c3                   	ret    

c0001d2b <chk_chr>:
c0001d2b:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d2e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d31:	74 07                	je     c0001d3a <chk_chr+0xf>
c0001d33:	39 d1                	cmp    ecx,edx
c0001d35:	74 03                	je     c0001d3a <chk_chr+0xf>
c0001d37:	40                   	inc    eax
c0001d38:	eb f1                	jmp    c0001d2b <chk_chr>
c0001d3a:	89 c8                	mov    eax,ecx
c0001d3c:	c3                   	ret    

c0001d3d <dbc_1st>:
c0001d3d:	31 c0                	xor    eax,eax
c0001d3f:	c3                   	ret    

c0001d40 <dbc_2nd>:
c0001d40:	31 c0                	xor    eax,eax
c0001d42:	c3                   	ret    

c0001d43 <tchar2uni>:
c0001d43:	57                   	push   edi
c0001d44:	89 c7                	mov    edi,eax
c0001d46:	56                   	push   esi
c0001d47:	53                   	push   ebx
c0001d48:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d4a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d4c:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d4f:	84 c9                	test   cl,cl
c0001d51:	78 0a                	js     c0001d5d <tchar2uni+0x1a>
c0001d53:	0f b6 d1             	movzx  edx,cl
c0001d56:	89 f3                	mov    ebx,esi
c0001d58:	e9 9f 00 00 00       	jmp    c0001dfc <tchar2uni+0xb9>
c0001d5d:	88 ca                	mov    dl,cl
c0001d5f:	83 e2 e0             	and    edx,0xffffffe0
c0001d62:	80 fa c0             	cmp    dl,0xc0
c0001d65:	75 0c                	jne    c0001d73 <tchar2uni+0x30>
c0001d67:	89 ca                	mov    edx,ecx
c0001d69:	b9 01 00 00 00       	mov    ecx,0x1
c0001d6e:	83 e2 1f             	and    edx,0x1f
c0001d71:	eb 2e                	jmp    c0001da1 <tchar2uni+0x5e>
c0001d73:	88 ca                	mov    dl,cl
c0001d75:	83 e2 f0             	and    edx,0xfffffff0
c0001d78:	80 fa e0             	cmp    dl,0xe0
c0001d7b:	75 0c                	jne    c0001d89 <tchar2uni+0x46>
c0001d7d:	89 ca                	mov    edx,ecx
c0001d7f:	b9 02 00 00 00       	mov    ecx,0x2
c0001d84:	83 e2 0f             	and    edx,0xf
c0001d87:	eb 18                	jmp    c0001da1 <tchar2uni+0x5e>
c0001d89:	88 ca                	mov    dl,cl
c0001d8b:	83 e2 f8             	and    edx,0xfffffff8
c0001d8e:	88 d0                	mov    al,dl
c0001d90:	83 ca ff             	or     edx,0xffffffff
c0001d93:	3c f0                	cmp    al,0xf0
c0001d95:	75 6c                	jne    c0001e03 <tchar2uni+0xc0>
c0001d97:	89 ca                	mov    edx,ecx
c0001d99:	b9 03 00 00 00       	mov    ecx,0x3
c0001d9e:	83 e2 07             	and    edx,0x7
c0001da1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001da5:	46                   	inc    esi
c0001da6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da9:	88 c8                	mov    al,cl
c0001dab:	83 e0 c0             	and    eax,0xffffffc0
c0001dae:	3c 80                	cmp    al,0x80
c0001db0:	75 4e                	jne    c0001e00 <tchar2uni+0xbd>
c0001db2:	c1 e2 06             	shl    edx,0x6
c0001db5:	83 e1 3f             	and    ecx,0x3f
c0001db8:	09 ca                	or     edx,ecx
c0001dba:	39 de                	cmp    esi,ebx
c0001dbc:	75 e7                	jne    c0001da5 <tchar2uni+0x62>
c0001dbe:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001dc1:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dc7:	77 37                	ja     c0001e00 <tchar2uni+0xbd>
c0001dc9:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dcf:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dd5:	76 29                	jbe    c0001e00 <tchar2uni+0xbd>
c0001dd7:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ddd:	76 1d                	jbe    c0001dfc <tchar2uni+0xb9>
c0001ddf:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001de5:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001deb:	c1 e1 06             	shl    ecx,0x6
c0001dee:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dfc:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dfe:	eb 03                	jmp    c0001e03 <tchar2uni+0xc0>
c0001e00:	83 ca ff             	or     edx,0xffffffff
c0001e03:	5b                   	pop    ebx
c0001e04:	89 d0                	mov    eax,edx
c0001e06:	5e                   	pop    esi
c0001e07:	5f                   	pop    edi
c0001e08:	c3                   	ret    

c0001e09 <put_utf>:
c0001e09:	53                   	push   ebx
c0001e0a:	83 f8 7f             	cmp    eax,0x7f
c0001e0d:	89 c3                	mov    ebx,eax
c0001e0f:	b0 00                	mov    al,0x0
c0001e11:	77 11                	ja     c0001e24 <put_utf+0x1b>
c0001e13:	85 c9                	test   ecx,ecx
c0001e15:	0f 84 e5 00 00 00    	je     c0001f00 <put_utf+0xf7>
c0001e1b:	88 1a                	mov    BYTE PTR [edx],bl
c0001e1d:	b0 01                	mov    al,0x1
c0001e1f:	e9 dc 00 00 00       	jmp    c0001f00 <put_utf+0xf7>
c0001e24:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e2a:	77 23                	ja     c0001e4f <put_utf+0x46>
c0001e2c:	83 f9 01             	cmp    ecx,0x1
c0001e2f:	0f 86 cb 00 00 00    	jbe    c0001f00 <put_utf+0xf7>
c0001e35:	89 d8                	mov    eax,ebx
c0001e37:	83 e3 3f             	and    ebx,0x3f
c0001e3a:	c1 e8 06             	shr    eax,0x6
c0001e3d:	83 cb 80             	or     ebx,0xffffff80
c0001e40:	83 c8 c0             	or     eax,0xffffffc0
c0001e43:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e46:	88 02                	mov    BYTE PTR [edx],al
c0001e48:	b0 02                	mov    al,0x2
c0001e4a:	e9 b1 00 00 00       	jmp    c0001f00 <put_utf+0xf7>
c0001e4f:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e55:	77 40                	ja     c0001e97 <put_utf+0x8e>
c0001e57:	83 f9 02             	cmp    ecx,0x2
c0001e5a:	0f 86 a0 00 00 00    	jbe    c0001f00 <put_utf+0xf7>
c0001e60:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e66:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e6c:	0f 86 8e 00 00 00    	jbe    c0001f00 <put_utf+0xf7>
c0001e72:	89 d8                	mov    eax,ebx
c0001e74:	c1 e8 0c             	shr    eax,0xc
c0001e77:	83 c8 e0             	or     eax,0xffffffe0
c0001e7a:	88 02                	mov    BYTE PTR [edx],al
c0001e7c:	89 d8                	mov    eax,ebx
c0001e7e:	83 e3 3f             	and    ebx,0x3f
c0001e81:	c1 e8 06             	shr    eax,0x6
c0001e84:	83 cb 80             	or     ebx,0xffffff80
c0001e87:	83 e0 3f             	and    eax,0x3f
c0001e8a:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e8d:	83 c8 80             	or     eax,0xffffff80
c0001e90:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e93:	b0 03                	mov    al,0x3
c0001e95:	eb 69                	jmp    c0001f00 <put_utf+0xf7>
c0001e97:	83 f9 03             	cmp    ecx,0x3
c0001e9a:	76 64                	jbe    c0001f00 <put_utf+0xf7>
c0001e9c:	89 d9                	mov    ecx,ebx
c0001e9e:	0f b7 c3             	movzx  eax,bx
c0001ea1:	66 31 c9             	xor    cx,cx
c0001ea4:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001eaa:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001eb0:	c1 e9 06             	shr    ecx,0x6
c0001eb3:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb9:	77 43                	ja     c0001efe <put_utf+0xf5>
c0001ebb:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001ec1:	77 3b                	ja     c0001efe <put_utf+0xf5>
c0001ec3:	09 cb                	or     ebx,ecx
c0001ec5:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ecb:	89 d8                	mov    eax,ebx
c0001ecd:	c1 e8 12             	shr    eax,0x12
c0001ed0:	83 c8 f0             	or     eax,0xfffffff0
c0001ed3:	88 02                	mov    BYTE PTR [edx],al
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 e0 3f             	and    eax,0x3f
c0001edd:	83 c8 80             	or     eax,0xffffff80
c0001ee0:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ee3:	89 d8                	mov    eax,ebx
c0001ee5:	83 e3 3f             	and    ebx,0x3f
c0001ee8:	c1 e8 06             	shr    eax,0x6
c0001eeb:	83 cb 80             	or     ebx,0xffffff80
c0001eee:	83 e0 3f             	and    eax,0x3f
c0001ef1:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001ef4:	83 c8 80             	or     eax,0xffffff80
c0001ef7:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001efa:	b0 04                	mov    al,0x4
c0001efc:	eb 02                	jmp    c0001f00 <put_utf+0xf7>
c0001efe:	31 c0                	xor    eax,eax
c0001f00:	5b                   	pop    ebx
c0001f01:	c3                   	ret    

c0001f02 <clst2sect>:
c0001f02:	89 c1                	mov    ecx,eax
c0001f04:	83 ea 02             	sub    edx,0x2
c0001f07:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f0a:	83 e8 02             	sub    eax,0x2
c0001f0d:	39 d0                	cmp    eax,edx
c0001f0f:	76 0d                	jbe    c0001f1e <clst2sect+0x1c>
c0001f11:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f15:	f7 e2                	mul    edx
c0001f17:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f1a:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f1d:	c3                   	ret    
c0001f1e:	31 c0                	xor    eax,eax
c0001f20:	31 d2                	xor    edx,edx
c0001f22:	c3                   	ret    

c0001f23 <clmt_clust>:
c0001f23:	57                   	push   edi
c0001f24:	89 cf                	mov    edi,ecx
c0001f26:	56                   	push   esi
c0001f27:	89 d6                	mov    esi,edx
c0001f29:	53                   	push   ebx
c0001f2a:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f2e:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f31:	89 f2                	mov    edx,esi
c0001f33:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f35:	c1 ef 09             	shr    edi,0x9
c0001f38:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f3c:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f3f:	89 f9                	mov    ecx,edi
c0001f41:	31 ff                	xor    edi,edi
c0001f43:	57                   	push   edi
c0001f44:	56                   	push   esi
c0001f45:	51                   	push   ecx
c0001f46:	52                   	push   edx
c0001f47:	e8 58 4c 02 00       	call   c0026ba4 <__udivdi3>
c0001f4c:	83 c4 10             	add    esp,0x10
c0001f4f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f51:	85 d2                	test   edx,edx
c0001f53:	74 10                	je     c0001f65 <clmt_clust+0x42>
c0001f55:	39 d0                	cmp    eax,edx
c0001f57:	72 07                	jb     c0001f60 <clmt_clust+0x3d>
c0001f59:	29 d0                	sub    eax,edx
c0001f5b:	83 c3 08             	add    ebx,0x8
c0001f5e:	eb ef                	jmp    c0001f4f <clmt_clust+0x2c>
c0001f60:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f63:	89 c2                	mov    edx,eax
c0001f65:	5b                   	pop    ebx
c0001f66:	89 d0                	mov    eax,edx
c0001f68:	5e                   	pop    esi
c0001f69:	5f                   	pop    edi
c0001f6a:	c3                   	ret    

c0001f6b <pick_lfn>:
c0001f6b:	55                   	push   ebp
c0001f6c:	57                   	push   edi
c0001f6d:	56                   	push   esi
c0001f6e:	89 d6                	mov    esi,edx
c0001f70:	53                   	push   ebx
c0001f71:	89 c3                	mov    ebx,eax
c0001f73:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f76:	e8 ee fc ff ff       	call   c0001c69 <ld_word>
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 04                	je     c0001f84 <pick_lfn+0x19>
c0001f80:	31 c0                	xor    eax,eax
c0001f82:	eb 5c                	jmp    c0001fe0 <pick_lfn+0x75>
c0001f84:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f87:	bd 01 00 00 00       	mov    ebp,0x1
c0001f8c:	83 e1 bf             	and    ecx,0xffffffbf
c0001f8f:	31 ff                	xor    edi,edi
c0001f91:	49                   	dec    ecx
c0001f92:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f95:	0f b6 87 40 96 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd69c0]
c0001f9c:	01 f0                	add    eax,esi
c0001f9e:	e8 c6 fc ff ff       	call   c0001c69 <ld_word>
c0001fa3:	66 85 ed             	test   bp,bp
c0001fa6:	74 11                	je     c0001fb9 <pick_lfn+0x4e>
c0001fa8:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fae:	77 d0                	ja     c0001f80 <pick_lfn+0x15>
c0001fb0:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fb4:	89 c5                	mov    ebp,eax
c0001fb6:	41                   	inc    ecx
c0001fb7:	eb 04                	jmp    c0001fbd <pick_lfn+0x52>
c0001fb9:	66 40                	inc    ax
c0001fbb:	75 c3                	jne    c0001f80 <pick_lfn+0x15>
c0001fbd:	47                   	inc    edi
c0001fbe:	83 ff 0d             	cmp    edi,0xd
c0001fc1:	75 d2                	jne    c0001f95 <pick_lfn+0x2a>
c0001fc3:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fc6:	74 13                	je     c0001fdb <pick_lfn+0x70>
c0001fc8:	66 85 ed             	test   bp,bp
c0001fcb:	74 0e                	je     c0001fdb <pick_lfn+0x70>
c0001fcd:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fd3:	77 ab                	ja     c0001f80 <pick_lfn+0x15>
c0001fd5:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fdb:	b8 01 00 00 00       	mov    eax,0x1
c0001fe0:	5b                   	pop    ebx
c0001fe1:	5e                   	pop    esi
c0001fe2:	5f                   	pop    edi
c0001fe3:	5d                   	pop    ebp
c0001fe4:	c3                   	ret    

c0001fe5 <put_lfn>:
c0001fe5:	55                   	push   ebp
c0001fe6:	31 ed                	xor    ebp,ebp
c0001fe8:	57                   	push   edi
c0001fe9:	89 d7                	mov    edi,edx
c0001feb:	56                   	push   esi
c0001fec:	31 f6                	xor    esi,esi
c0001fee:	53                   	push   ebx
c0001fef:	83 ec 08             	sub    esp,0x8
c0001ff2:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ff5:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ffd:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0002003:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002006:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002009:	31 d2                	xor    edx,edx
c000200b:	e8 cb fc ff ff       	call   c0001cdb <st_word>
c0002010:	0f b6 d9             	movzx  ebx,cl
c0002013:	4b                   	dec    ebx
c0002014:	6b db 0d             	imul   ebx,ebx,0xd
c0002017:	66 83 fe ff          	cmp    si,0xffff
c000201b:	74 08                	je     c0002025 <put_lfn+0x40>
c000201d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002020:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0002024:	43                   	inc    ebx
c0002025:	0f b6 85 40 96 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd69c0]
c000202c:	0f b7 d6             	movzx  edx,si
c000202f:	01 f8                	add    eax,edi
c0002031:	e8 a5 fc ff ff       	call   c0001cdb <st_word>
c0002036:	66 85 f6             	test   si,si
c0002039:	75 03                	jne    c000203e <put_lfn+0x59>
c000203b:	83 ce ff             	or     esi,0xffffffff
c000203e:	45                   	inc    ebp
c000203f:	83 fd 0d             	cmp    ebp,0xd
c0002042:	75 d3                	jne    c0002017 <put_lfn+0x32>
c0002044:	66 46                	inc    si
c0002046:	74 0a                	je     c0002052 <put_lfn+0x6d>
c0002048:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000204b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002050:	75 09                	jne    c000205b <put_lfn+0x76>
c0002052:	88 c8                	mov    al,cl
c0002054:	83 c8 40             	or     eax,0x40
c0002057:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000205b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000205f:	88 07                	mov    BYTE PTR [edi],al
c0002061:	83 c4 08             	add    esp,0x8
c0002064:	5b                   	pop    ebx
c0002065:	5e                   	pop    esi
c0002066:	5f                   	pop    edi
c0002067:	5d                   	pop    ebp
c0002068:	c3                   	ret    

c0002069 <gen_numname>:
c0002069:	57                   	push   edi
c000206a:	89 cf                	mov    edi,ecx
c000206c:	56                   	push   esi
c000206d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002072:	53                   	push   ebx
c0002073:	89 c6                	mov    esi,eax
c0002075:	83 ec 10             	sub    esp,0x10
c0002078:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000207c:	e8 67 fc ff ff       	call   c0001ce8 <mem_cpy>
c0002081:	83 fb 05             	cmp    ebx,0x5
c0002084:	76 2d                	jbe    c00020b3 <gen_numname+0x4a>
c0002086:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002089:	66 85 c0             	test   ax,ax
c000208c:	74 25                	je     c00020b3 <gen_numname+0x4a>
c000208e:	83 c7 02             	add    edi,0x2
c0002091:	ba 10 00 00 00       	mov    edx,0x10
c0002096:	01 db                	add    ebx,ebx
c0002098:	89 c1                	mov    ecx,eax
c000209a:	66 d1 e8             	shr    ax,1
c000209d:	83 e1 01             	and    ecx,0x1
c00020a0:	01 cb                	add    ebx,ecx
c00020a2:	0f ba e3 10          	bt     ebx,0x10
c00020a6:	73 06                	jae    c00020ae <gen_numname+0x45>
c00020a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020ae:	4a                   	dec    edx
c00020af:	75 e5                	jne    c0002096 <gen_numname+0x2d>
c00020b1:	eb d3                	jmp    c0002086 <gen_numname+0x1d>
c00020b3:	b8 07 00 00 00       	mov    eax,0x7
c00020b8:	88 d9                	mov    cl,bl
c00020ba:	83 e1 0f             	and    ecx,0xf
c00020bd:	8d 51 30             	lea    edx,[ecx+0x30]
c00020c0:	80 fa 39             	cmp    dl,0x39
c00020c3:	76 03                	jbe    c00020c8 <gen_numname+0x5f>
c00020c5:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c8:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020cb:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020cf:	89 da                	mov    edx,ebx
c00020d1:	c1 ea 04             	shr    edx,0x4
c00020d4:	83 fb 0f             	cmp    ebx,0xf
c00020d7:	76 06                	jbe    c00020df <gen_numname+0x76>
c00020d9:	89 c8                	mov    eax,ecx
c00020db:	89 d3                	mov    ebx,edx
c00020dd:	eb d9                	jmp    c00020b8 <gen_numname+0x4f>
c00020df:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020e4:	31 d2                	xor    edx,edx
c00020e6:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e9:	8d 04 16             	lea    eax,[esi+edx*1]
c00020ec:	39 ca                	cmp    edx,ecx
c00020ee:	73 18                	jae    c0002108 <gen_numname+0x9f>
c00020f0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020f3:	3c 20                	cmp    al,0x20
c00020f5:	74 11                	je     c0002108 <gen_numname+0x9f>
c00020f7:	e8 41 fc ff ff       	call   c0001d3d <dbc_1st>
c00020fc:	85 c0                	test   eax,eax
c00020fe:	74 05                	je     c0002105 <gen_numname+0x9c>
c0002100:	39 d3                	cmp    ebx,edx
c0002102:	74 04                	je     c0002108 <gen_numname+0x9f>
c0002104:	42                   	inc    edx
c0002105:	42                   	inc    edx
c0002106:	eb e1                	jmp    c00020e9 <gen_numname+0x80>
c0002108:	b0 20                	mov    al,0x20
c000210a:	83 f9 07             	cmp    ecx,0x7
c000210d:	77 05                	ja     c0002114 <gen_numname+0xab>
c000210f:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002113:	41                   	inc    ecx
c0002114:	42                   	inc    edx
c0002115:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002119:	83 fa 07             	cmp    edx,0x7
c000211c:	76 ea                	jbe    c0002108 <gen_numname+0x9f>
c000211e:	83 c4 10             	add    esp,0x10
c0002121:	5b                   	pop    ebx
c0002122:	5e                   	pop    esi
c0002123:	5f                   	pop    edi
c0002124:	c3                   	ret    

c0002125 <sum_sfn>:
c0002125:	31 c9                	xor    ecx,ecx
c0002127:	31 d2                	xor    edx,edx
c0002129:	d0 ca                	ror    dl,1
c000212b:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c000212e:	41                   	inc    ecx
c000212f:	83 f9 0b             	cmp    ecx,0xb
c0002132:	75 f5                	jne    c0002129 <sum_sfn+0x4>
c0002134:	88 d0                	mov    al,dl
c0002136:	c3                   	ret    

c0002137 <xdir_sum>:
c0002137:	56                   	push   esi
c0002138:	31 c9                	xor    ecx,ecx
c000213a:	53                   	push   ebx
c000213b:	31 d2                	xor    edx,edx
c000213d:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002141:	43                   	inc    ebx
c0002142:	c1 e3 05             	shl    ebx,0x5
c0002145:	83 fa 02             	cmp    edx,0x2
c0002148:	74 0b                	je     c0002155 <xdir_sum+0x1e>
c000214a:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000214e:	66 d1 c9             	ror    cx,1
c0002151:	01 f1                	add    ecx,esi
c0002153:	eb 05                	jmp    c000215a <xdir_sum+0x23>
c0002155:	ba 03 00 00 00       	mov    edx,0x3
c000215a:	42                   	inc    edx
c000215b:	39 d3                	cmp    ebx,edx
c000215d:	77 e6                	ja     c0002145 <xdir_sum+0xe>
c000215f:	89 c8                	mov    eax,ecx
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	c3                   	ret    

c0002164 <xsum32>:
c0002164:	d1 ca                	ror    edx,1
c0002166:	0f b6 c0             	movzx  eax,al
c0002169:	01 d0                	add    eax,edx
c000216b:	c3                   	ret    

c000216c <get_xfileinfo>:
c000216c:	55                   	push   ebp
c000216d:	31 c9                	xor    ecx,ecx
c000216f:	57                   	push   edi
c0002170:	bd 40 00 00 00       	mov    ebp,0x40
c0002175:	56                   	push   esi
c0002176:	31 ff                	xor    edi,edi
c0002178:	53                   	push   ebx
c0002179:	89 c6                	mov    esi,eax
c000217b:	83 ec 0c             	sub    esp,0xc
c000217e:	89 d3                	mov    ebx,edx
c0002180:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002187:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000218b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000218e:	76 6d                	jbe    c00021fd <get_xfileinfo+0x91>
c0002190:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002196:	76 0b                	jbe    c00021a3 <get_xfileinfo+0x37>
c0002198:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000219c:	bf 01 00 00 00       	mov    edi,0x1
c00021a1:	eb 63                	jmp    c0002206 <get_xfileinfo+0x9a>
c00021a3:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a9:	75 03                	jne    c00021ae <get_xfileinfo+0x42>
c00021ab:	83 c5 02             	add    ebp,0x2
c00021ae:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021b1:	83 c5 02             	add    ebp,0x2
c00021b4:	e8 b0 fa ff ff       	call   c0001c69 <ld_word>
c00021b9:	ff 04 24             	inc    DWORD PTR [esp]
c00021bc:	66 85 c9             	test   cx,cx
c00021bf:	75 0d                	jne    c00021ce <get_xfileinfo+0x62>
c00021c1:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021c7:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021cc:	76 2b                	jbe    c00021f9 <get_xfileinfo+0x8d>
c00021ce:	c1 e1 10             	shl    ecx,0x10
c00021d1:	ba ff 00 00 00       	mov    edx,0xff
c00021d6:	0f b7 c0             	movzx  eax,ax
c00021d9:	29 fa                	sub    edx,edi
c00021db:	09 c8                	or     eax,ecx
c00021dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021e1:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021e5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e9:	e8 1b fc ff ff       	call   c0001e09 <put_utf>
c00021ee:	84 c0                	test   al,al
c00021f0:	74 a6                	je     c0002198 <get_xfileinfo+0x2c>
c00021f2:	0f b6 c0             	movzx  eax,al
c00021f5:	01 c7                	add    edi,eax
c00021f7:	31 c0                	xor    eax,eax
c00021f9:	89 c1                	mov    ecx,eax
c00021fb:	eb 8a                	jmp    c0002187 <get_xfileinfo+0x1b>
c00021fd:	85 ff                	test   edi,edi
c00021ff:	74 97                	je     c0002198 <get_xfileinfo+0x2c>
c0002201:	66 85 c9             	test   cx,cx
c0002204:	75 92                	jne    c0002198 <get_xfileinfo+0x2c>
c0002206:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000220b:	31 c0                	xor    eax,eax
c000220d:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002211:	31 d2                	xor    edx,edx
c0002213:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002216:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002219:	80 e1 10             	and    cl,0x10
c000221c:	75 08                	jne    c0002226 <get_xfileinfo+0xba>
c000221e:	8d 46 38             	lea    eax,[esi+0x38]
c0002221:	e8 68 fa ff ff       	call   c0001c8e <ld_qword>
c0002226:	89 03                	mov    DWORD PTR [ebx],eax
c0002228:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000222b:	8d 46 0c             	lea    eax,[esi+0xc]
c000222e:	e8 36 fa ff ff       	call   c0001c69 <ld_word>
c0002233:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002237:	8d 46 0e             	lea    eax,[esi+0xe]
c000223a:	e8 2a fa ff ff       	call   c0001c69 <ld_word>
c000223f:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002243:	83 c4 0c             	add    esp,0xc
c0002246:	5b                   	pop    ebx
c0002247:	5e                   	pop    esi
c0002248:	5f                   	pop    edi
c0002249:	5d                   	pop    ebp
c000224a:	c3                   	ret    

c000224b <get_ldnumber>:
c000224b:	8b 10                	mov    edx,DWORD PTR [eax]
c000224d:	85 d2                	test   edx,edx
c000224f:	74 14                	je     c0002265 <get_ldnumber+0x1a>
c0002251:	56                   	push   esi
c0002252:	53                   	push   ebx
c0002253:	89 d3                	mov    ebx,edx
c0002255:	43                   	inc    ebx
c0002256:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002259:	80 f9 1f             	cmp    cl,0x1f
c000225c:	76 0d                	jbe    c000226b <get_ldnumber+0x20>
c000225e:	80 f9 3a             	cmp    cl,0x3a
c0002261:	75 f2                	jne    c0002255 <get_ldnumber+0xa>
c0002263:	eb 0a                	jmp    c000226f <get_ldnumber+0x24>
c0002265:	83 c9 ff             	or     ecx,0xffffffff
c0002268:	89 c8                	mov    eax,ecx
c000226a:	c3                   	ret    
c000226b:	31 c9                	xor    ecx,ecx
c000226d:	eb 24                	jmp    c0002293 <get_ldnumber+0x48>
c000226f:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002272:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002275:	80 f9 09             	cmp    cl,0x9
c0002278:	77 16                	ja     c0002290 <get_ldnumber+0x45>
c000227a:	83 c2 02             	add    edx,0x2
c000227d:	83 c9 ff             	or     ecx,0xffffffff
c0002280:	39 d3                	cmp    ebx,edx
c0002282:	75 0f                	jne    c0002293 <get_ldnumber+0x48>
c0002284:	89 f2                	mov    edx,esi
c0002286:	89 18                	mov    DWORD PTR [eax],ebx
c0002288:	0f be ca             	movsx  ecx,dl
c000228b:	83 e9 30             	sub    ecx,0x30
c000228e:	eb 03                	jmp    c0002293 <get_ldnumber+0x48>
c0002290:	83 c9 ff             	or     ecx,0xffffffff
c0002293:	89 c8                	mov    eax,ecx
c0002295:	5b                   	pop    ebx
c0002296:	5e                   	pop    esi
c0002297:	c3                   	ret    

c0002298 <crc32>:
c0002298:	56                   	push   esi
c0002299:	89 d6                	mov    esi,edx
c000229b:	53                   	push   ebx
c000229c:	b2 01                	mov    dl,0x1
c000229e:	bb 08 00 00 00       	mov    ebx,0x8
c00022a3:	89 f1                	mov    ecx,esi
c00022a5:	84 d1                	test   cl,dl
c00022a7:	0f 95 c1             	setne  cl
c00022aa:	0f b6 c9             	movzx  ecx,cl
c00022ad:	31 c1                	xor    ecx,eax
c00022af:	89 c8                	mov    eax,ecx
c00022b1:	d1 e8                	shr    eax,1
c00022b3:	80 e1 01             	and    cl,0x1
c00022b6:	74 05                	je     c00022bd <crc32+0x25>
c00022b8:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022bd:	d1 e2                	shl    edx,1
c00022bf:	4b                   	dec    ebx
c00022c0:	75 e1                	jne    c00022a3 <crc32+0xb>
c00022c2:	5b                   	pop    ebx
c00022c3:	5e                   	pop    esi
c00022c4:	c3                   	ret    

c00022c5 <test_gpt_header>:
c00022c5:	55                   	push   ebp
c00022c6:	b9 10 00 00 00       	mov    ecx,0x10
c00022cb:	57                   	push   edi
c00022cc:	ba 40 95 02 c0       	mov    edx,0xc0029540
c00022d1:	56                   	push   esi
c00022d2:	31 ff                	xor    edi,edi
c00022d4:	53                   	push   ebx
c00022d5:	89 c3                	mov    ebx,eax
c00022d7:	e8 2c fa ff ff       	call   c0001d08 <mem_cmp>
c00022dc:	85 c0                	test   eax,eax
c00022de:	75 55                	jne    c0002335 <test_gpt_header+0x70>
c00022e0:	89 c7                	mov    edi,eax
c00022e2:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022e7:	83 ce ff             	or     esi,0xffffffff
c00022ea:	31 d2                	xor    edx,edx
c00022ec:	83 fd 03             	cmp    ebp,0x3
c00022ef:	76 05                	jbe    c00022f6 <test_gpt_header+0x31>
c00022f1:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022f6:	89 f0                	mov    eax,esi
c00022f8:	45                   	inc    ebp
c00022f9:	e8 9a ff ff ff       	call   c0002298 <crc32>
c00022fe:	83 fd 4c             	cmp    ebp,0x4c
c0002301:	89 c6                	mov    esi,eax
c0002303:	75 e5                	jne    c00022ea <test_gpt_header+0x25>
c0002305:	8d 43 10             	lea    eax,[ebx+0x10]
c0002308:	f7 d6                	not    esi
c000230a:	e8 67 f9 ff ff       	call   c0001c76 <ld_dword>
c000230f:	39 c6                	cmp    esi,eax
c0002311:	75 22                	jne    c0002335 <test_gpt_header+0x70>
c0002313:	8d 43 54             	lea    eax,[ebx+0x54]
c0002316:	e8 5b f9 ff ff       	call   c0001c76 <ld_dword>
c000231b:	83 c0 80             	add    eax,0xffffff80
c000231e:	75 15                	jne    c0002335 <test_gpt_header+0x70>
c0002320:	8d 43 50             	lea    eax,[ebx+0x50]
c0002323:	e8 4e f9 ff ff       	call   c0001c76 <ld_dword>
c0002328:	3d 80 00 00 00       	cmp    eax,0x80
c000232d:	0f 96 c0             	setbe  al
c0002330:	0f b6 c0             	movzx  eax,al
c0002333:	89 c7                	mov    edi,eax
c0002335:	5b                   	pop    ebx
c0002336:	89 f8                	mov    eax,edi
c0002338:	5e                   	pop    esi
c0002339:	5f                   	pop    edi
c000233a:	5d                   	pop    ebp
c000233b:	c3                   	ret    

c000233c <make_rand>:
c000233c:	56                   	push   esi
c000233d:	85 c0                	test   eax,eax
c000233f:	53                   	push   ebx
c0002340:	75 05                	jne    c0002347 <make_rand+0xb>
c0002342:	b8 01 00 00 00       	mov    eax,0x1
c0002347:	01 d1                	add    ecx,edx
c0002349:	bb 08 00 00 00       	mov    ebx,0x8
c000234e:	89 c6                	mov    esi,eax
c0002350:	d1 e8                	shr    eax,1
c0002352:	83 e6 01             	and    esi,0x1
c0002355:	85 f6                	test   esi,esi
c0002357:	74 05                	je     c000235e <make_rand+0x22>
c0002359:	35 00 00 00 a3       	xor    eax,0xa3000000
c000235e:	4b                   	dec    ebx
c000235f:	75 ed                	jne    c000234e <make_rand+0x12>
c0002361:	42                   	inc    edx
c0002362:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002365:	39 ca                	cmp    edx,ecx
c0002367:	75 e0                	jne    c0002349 <make_rand+0xd>
c0002369:	5b                   	pop    ebx
c000236a:	5e                   	pop    esi
c000236b:	c3                   	ret    

c000236c <validate>:
c000236c:	56                   	push   esi
c000236d:	53                   	push   ebx
c000236e:	89 d6                	mov    esi,edx
c0002370:	51                   	push   ecx
c0002371:	85 c0                	test   eax,eax
c0002373:	75 09                	jne    c000237e <validate+0x12>
c0002375:	b8 09 00 00 00       	mov    eax,0x9
c000237a:	31 c9                	xor    ecx,ecx
c000237c:	eb 2f                	jmp    c00023ad <validate+0x41>
c000237e:	89 c3                	mov    ebx,eax
c0002380:	8b 00                	mov    eax,DWORD PTR [eax]
c0002382:	85 c0                	test   eax,eax
c0002384:	74 ef                	je     c0002375 <validate+0x9>
c0002386:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002389:	74 ea                	je     c0002375 <validate+0x9>
c000238b:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000238f:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002393:	75 e0                	jne    c0002375 <validate+0x9>
c0002395:	83 ec 0c             	sub    esp,0xc
c0002398:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000239c:	50                   	push   eax
c000239d:	e8 76 f8 ff ff       	call   c0001c18 <disk_status>
c00023a2:	83 c4 10             	add    esp,0x10
c00023a5:	a8 01                	test   al,0x1
c00023a7:	75 cc                	jne    c0002375 <validate+0x9>
c00023a9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023ab:	31 c0                	xor    eax,eax
c00023ad:	89 0e                	mov    DWORD PTR [esi],ecx
c00023af:	5a                   	pop    edx
c00023b0:	5b                   	pop    ebx
c00023b1:	5e                   	pop    esi
c00023b2:	c3                   	ret    

c00023b3 <sync_window>:
c00023b3:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023b7:	0f 84 85 00 00 00    	je     c0002442 <sync_window+0x8f>
c00023bd:	55                   	push   ebp
c00023be:	8d 68 54             	lea    ebp,[eax+0x54]
c00023c1:	57                   	push   edi
c00023c2:	56                   	push   esi
c00023c3:	53                   	push   ebx
c00023c4:	89 c3                	mov    ebx,eax
c00023c6:	83 ec 28             	sub    esp,0x28
c00023c9:	6a 01                	push   0x1
c00023cb:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023ce:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023d1:	55                   	push   ebp
c00023d2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023d6:	50                   	push   eax
c00023d7:	e8 58 f8 ff ff       	call   c0001c34 <disk_write>
c00023dc:	83 c4 20             	add    esp,0x20
c00023df:	ba 01 00 00 00       	mov    edx,0x1
c00023e4:	85 c0                	test   eax,eax
c00023e6:	75 50                	jne    c0002438 <sync_window+0x85>
c00023e8:	31 ff                	xor    edi,edi
c00023ea:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ed:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023f1:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023f5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f8:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023fb:	89 c6                	mov    esi,eax
c00023fd:	89 d7                	mov    edi,edx
c00023ff:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002402:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002406:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002409:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c000240d:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002411:	73 23                	jae    c0002436 <sync_window+0x83>
c0002413:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002417:	75 1d                	jne    c0002436 <sync_window+0x83>
c0002419:	83 ec 0c             	sub    esp,0xc
c000241c:	6a 01                	push   0x1
c000241e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002422:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002426:	52                   	push   edx
c0002427:	50                   	push   eax
c0002428:	55                   	push   ebp
c0002429:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000242d:	50                   	push   eax
c000242e:	e8 01 f8 ff ff       	call   c0001c34 <disk_write>
c0002433:	83 c4 20             	add    esp,0x20
c0002436:	31 d2                	xor    edx,edx
c0002438:	83 c4 1c             	add    esp,0x1c
c000243b:	89 d0                	mov    eax,edx
c000243d:	5b                   	pop    ebx
c000243e:	5e                   	pop    esi
c000243f:	5f                   	pop    edi
c0002440:	5d                   	pop    ebp
c0002441:	c3                   	ret    
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 d0                	mov    eax,edx
c0002446:	c3                   	ret    

c0002447 <move_window>:
c0002447:	56                   	push   esi
c0002448:	53                   	push   ebx
c0002449:	89 c3                	mov    ebx,eax
c000244b:	83 ec 14             	sub    esp,0x14
c000244e:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002451:	75 07                	jne    c000245a <move_window+0x13>
c0002453:	31 f6                	xor    esi,esi
c0002455:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002458:	74 59                	je     c00024b3 <move_window+0x6c>
c000245a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000245e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002462:	89 d8                	mov    eax,ebx
c0002464:	e8 4a ff ff ff       	call   c00023b3 <sync_window>
c0002469:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000246d:	89 c6                	mov    esi,eax
c000246f:	85 c0                	test   eax,eax
c0002471:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002475:	75 3c                	jne    c00024b3 <move_window+0x6c>
c0002477:	83 ec 0c             	sub    esp,0xc
c000247a:	8d 43 54             	lea    eax,[ebx+0x54]
c000247d:	6a 01                	push   0x1
c000247f:	51                   	push   ecx
c0002480:	52                   	push   edx
c0002481:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002485:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002489:	50                   	push   eax
c000248a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000248e:	50                   	push   eax
c000248f:	e8 8a f7 ff ff       	call   c0001c1e <disk_read>
c0002494:	83 c4 20             	add    esp,0x20
c0002497:	85 c0                	test   eax,eax
c0002499:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000249d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00024a1:	74 0a                	je     c00024ad <move_window+0x66>
c00024a3:	83 ca ff             	or     edx,0xffffffff
c00024a6:	be 01 00 00 00       	mov    esi,0x1
c00024ab:	89 d1                	mov    ecx,edx
c00024ad:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024b0:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	83 c4 14             	add    esp,0x14
c00024b8:	5b                   	pop    ebx
c00024b9:	5e                   	pop    esi
c00024ba:	c3                   	ret    

c00024bb <check_fs>:
c00024bb:	53                   	push   ebx
c00024bc:	89 c3                	mov    ebx,eax
c00024be:	83 ec 08             	sub    esp,0x8
c00024c1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024c5:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024cc:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024d3:	e8 6f ff ff ff       	call   c0002447 <move_window>
c00024d8:	ba 04 00 00 00       	mov    edx,0x4
c00024dd:	85 c0                	test   eax,eax
c00024df:	0f 85 89 00 00 00    	jne    c000256e <check_fs+0xb3>
c00024e5:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024eb:	e8 79 f7 ff ff       	call   c0001c69 <ld_word>
c00024f0:	ba 03 00 00 00       	mov    edx,0x3
c00024f5:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f9:	75 73                	jne    c000256e <check_fs+0xb3>
c00024fb:	ba 60 96 02 c0       	mov    edx,0xc0029660
c0002500:	8d 43 54             	lea    eax,[ebx+0x54]
c0002503:	b9 0b 00 00 00       	mov    ecx,0xb
c0002508:	e8 fb f7 ff ff       	call   c0001d08 <mem_cmp>
c000250d:	ba 01 00 00 00       	mov    edx,0x1
c0002512:	85 c0                	test   eax,eax
c0002514:	74 58                	je     c000256e <check_fs+0xb3>
c0002516:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002519:	8d 50 18             	lea    edx,[eax+0x18]
c000251c:	80 fa 01             	cmp    dl,0x1
c000251f:	76 09                	jbe    c000252a <check_fs+0x6f>
c0002521:	ba 02 00 00 00       	mov    edx,0x2
c0002526:	3c eb                	cmp    al,0xeb
c0002528:	75 44                	jne    c000256e <check_fs+0xb3>
c000252a:	ba 30 cb 02 c0       	mov    edx,0xc002cb30
c000252f:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002535:	b9 03 00 00 00       	mov    ecx,0x3
c000253a:	e8 c9 f7 ff ff       	call   c0001d08 <mem_cmp>
c000253f:	31 d2                	xor    edx,edx
c0002541:	85 c0                	test   eax,eax
c0002543:	74 29                	je     c000256e <check_fs+0xb3>
c0002545:	ba 6c 96 02 c0       	mov    edx,0xc002966c
c000254a:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002550:	b9 05 00 00 00       	mov    ecx,0x5
c0002555:	e8 ae f7 ff ff       	call   c0001d08 <mem_cmp>
c000255a:	31 d2                	xor    edx,edx
c000255c:	85 c0                	test   eax,eax
c000255e:	74 0e                	je     c000256e <check_fs+0xb3>
c0002560:	31 d2                	xor    edx,edx
c0002562:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002569:	0f 95 c2             	setne  dl
c000256c:	01 d2                	add    edx,edx
c000256e:	89 d0                	mov    eax,edx
c0002570:	83 c4 08             	add    esp,0x8
c0002573:	5b                   	pop    ebx
c0002574:	c3                   	ret    

c0002575 <find_volume>:
c0002575:	55                   	push   ebp
c0002576:	31 c9                	xor    ecx,ecx
c0002578:	57                   	push   edi
c0002579:	56                   	push   esi
c000257a:	89 d6                	mov    esi,edx
c000257c:	53                   	push   ebx
c000257d:	31 d2                	xor    edx,edx
c000257f:	83 ec 3c             	sub    esp,0x3c
c0002582:	89 c3                	mov    ebx,eax
c0002584:	e8 32 ff ff ff       	call   c00024bb <check_fs>
c0002589:	83 f8 02             	cmp    eax,0x2
c000258c:	74 0e                	je     c000259c <find_volume+0x27>
c000258e:	0f 87 5d 01 00 00    	ja     c00026f1 <find_volume+0x17c>
c0002594:	85 f6                	test   esi,esi
c0002596:	0f 84 55 01 00 00    	je     c00026f1 <find_volume+0x17c>
c000259c:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00025a3:	0f 85 dd 00 00 00    	jne    c0002686 <find_volume+0x111>
c00025a9:	31 c9                	xor    ecx,ecx
c00025ab:	ba 01 00 00 00       	mov    edx,0x1
c00025b0:	89 d8                	mov    eax,ebx
c00025b2:	e8 90 fe ff ff       	call   c0002447 <move_window>
c00025b7:	85 c0                	test   eax,eax
c00025b9:	74 0a                	je     c00025c5 <find_volume+0x50>
c00025bb:	b8 04 00 00 00       	mov    eax,0x4
c00025c0:	e9 2c 01 00 00       	jmp    c00026f1 <find_volume+0x17c>
c00025c5:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c8:	89 e8                	mov    eax,ebp
c00025ca:	e8 f6 fc ff ff       	call   c00022c5 <test_gpt_header>
c00025cf:	85 c0                	test   eax,eax
c00025d1:	75 0a                	jne    c00025dd <find_volume+0x68>
c00025d3:	b8 03 00 00 00       	mov    eax,0x3
c00025d8:	e9 14 01 00 00       	jmp    c00026f1 <find_volume+0x17c>
c00025dd:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025e3:	e8 8e f6 ff ff       	call   c0001c76 <ld_dword>
c00025e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025ec:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025f2:	e8 97 f6 ff ff       	call   c0001c8e <ld_qword>
c00025f7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002603:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002607:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000260f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002613:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002617:	74 ba                	je     c00025d3 <find_volume+0x5e>
c0002619:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000261d:	31 c9                	xor    ecx,ecx
c000261f:	c1 e7 07             	shl    edi,0x7
c0002622:	89 d8                	mov    eax,ebx
c0002624:	89 fa                	mov    edx,edi
c0002626:	c1 ea 09             	shr    edx,0x9
c0002629:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000262d:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002631:	e8 11 fe ff ff       	call   c0002447 <move_window>
c0002636:	85 c0                	test   eax,eax
c0002638:	75 81                	jne    c00025bb <find_volume+0x46>
c000263a:	81 e7 80 01 00 00    	and    edi,0x180
c0002640:	b9 10 00 00 00       	mov    ecx,0x10
c0002645:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002649:	ba 50 96 02 c0       	mov    edx,0xc0029650
c000264e:	e8 b5 f6 ff ff       	call   c0001d08 <mem_cmp>
c0002653:	85 c0                	test   eax,eax
c0002655:	75 29                	jne    c0002680 <find_volume+0x10b>
c0002657:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000265b:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000265f:	e8 2a f6 ff ff       	call   c0001c8e <ld_qword>
c0002664:	89 d1                	mov    ecx,edx
c0002666:	89 c2                	mov    edx,eax
c0002668:	89 d8                	mov    eax,ebx
c000266a:	e8 4c fe ff ff       	call   c00024bb <check_fs>
c000266f:	85 f6                	test   esi,esi
c0002671:	75 07                	jne    c000267a <find_volume+0x105>
c0002673:	83 f8 01             	cmp    eax,0x1
c0002676:	77 08                	ja     c0002680 <find_volume+0x10b>
c0002678:	eb 77                	jmp    c00026f1 <find_volume+0x17c>
c000267a:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000267e:	74 71                	je     c00026f1 <find_volume+0x17c>
c0002680:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002684:	eb 89                	jmp    c000260f <find_volume+0x9a>
c0002686:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000268a:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002690:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002696:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000269a:	89 cd                	mov    ebp,ecx
c000269c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00026a0:	89 f8                	mov    eax,edi
c00026a2:	83 c7 10             	add    edi,0x10
c00026a5:	e8 cc f5 ff ff       	call   c0001c76 <ld_dword>
c00026aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026ae:	89 01                	mov    DWORD PTR [ecx],eax
c00026b0:	83 c1 04             	add    ecx,0x4
c00026b3:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026b7:	75 e3                	jne    c000269c <find_volume+0x127>
c00026b9:	31 ff                	xor    edi,edi
c00026bb:	85 f6                	test   esi,esi
c00026bd:	74 03                	je     c00026c2 <find_volume+0x14d>
c00026bf:	8d 7e ff             	lea    edi,[esi-0x1]
c00026c2:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026c6:	85 d2                	test   edx,edx
c00026c8:	74 14                	je     c00026de <find_volume+0x169>
c00026ca:	31 c9                	xor    ecx,ecx
c00026cc:	89 d8                	mov    eax,ebx
c00026ce:	e8 e8 fd ff ff       	call   c00024bb <check_fs>
c00026d3:	83 f8 01             	cmp    eax,0x1
c00026d6:	76 19                	jbe    c00026f1 <find_volume+0x17c>
c00026d8:	85 f6                	test   esi,esi
c00026da:	74 0f                	je     c00026eb <find_volume+0x176>
c00026dc:	eb 13                	jmp    c00026f1 <find_volume+0x17c>
c00026de:	85 f6                	test   esi,esi
c00026e0:	0f 85 ed fe ff ff    	jne    c00025d3 <find_volume+0x5e>
c00026e6:	b8 03 00 00 00       	mov    eax,0x3
c00026eb:	47                   	inc    edi
c00026ec:	83 ff 03             	cmp    edi,0x3
c00026ef:	76 d1                	jbe    c00026c2 <find_volume+0x14d>
c00026f1:	83 c4 3c             	add    esp,0x3c
c00026f4:	5b                   	pop    ebx
c00026f5:	5e                   	pop    esi
c00026f6:	5f                   	pop    edi
c00026f7:	5d                   	pop    ebp
c00026f8:	c3                   	ret    

c00026f9 <mount_volume>:
c00026f9:	55                   	push   ebp
c00026fa:	57                   	push   edi
c00026fb:	89 cf                	mov    edi,ecx
c00026fd:	56                   	push   esi
c00026fe:	53                   	push   ebx
c00026ff:	bb 0b 00 00 00       	mov    ebx,0xb
c0002704:	83 ec 3c             	sub    esp,0x3c
c0002707:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000270d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002711:	e8 35 fb ff ff       	call   c000224b <get_ldnumber>
c0002716:	85 c0                	test   eax,eax
c0002718:	0f 88 3a 05 00 00    	js     c0002c58 <mount_volume+0x55f>
c000271e:	8b 2c 85 c0 e6 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1940]
c0002725:	89 c6                	mov    esi,eax
c0002727:	bb 0c 00 00 00       	mov    ebx,0xc
c000272c:	85 ed                	test   ebp,ebp
c000272e:	0f 84 24 05 00 00    	je     c0002c58 <mount_volume+0x55f>
c0002734:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002738:	83 e7 fe             	and    edi,0xfffffffe
c000273b:	89 2a                	mov    DWORD PTR [edx],ebp
c000273d:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002741:	74 32                	je     c0002775 <mount_volume+0x7c>
c0002743:	83 ec 0c             	sub    esp,0xc
c0002746:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000274a:	50                   	push   eax
c000274b:	e8 c8 f4 ff ff       	call   c0001c18 <disk_status>
c0002750:	83 c4 10             	add    esp,0x10
c0002753:	a8 01                	test   al,0x1
c0002755:	75 1e                	jne    c0002775 <mount_volume+0x7c>
c0002757:	31 db                	xor    ebx,ebx
c0002759:	89 f9                	mov    ecx,edi
c000275b:	84 c9                	test   cl,cl
c000275d:	0f 84 f5 04 00 00    	je     c0002c58 <mount_volume+0x55f>
c0002763:	a8 04                	test   al,0x4
c0002765:	0f 84 ed 04 00 00    	je     c0002c58 <mount_volume+0x55f>
c000276b:	bb 0a 00 00 00       	mov    ebx,0xa
c0002770:	e9 e3 04 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c0002775:	83 ec 0c             	sub    esp,0xc
c0002778:	89 f0                	mov    eax,esi
c000277a:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000277e:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002781:	0f b6 f0             	movzx  esi,al
c0002784:	bb 03 00 00 00       	mov    ebx,0x3
c0002789:	56                   	push   esi
c000278a:	e8 8c f4 ff ff       	call   c0001c1b <disk_initialize>
c000278f:	83 c4 10             	add    esp,0x10
c0002792:	a8 01                	test   al,0x1
c0002794:	0f 85 be 04 00 00    	jne    c0002c58 <mount_volume+0x55f>
c000279a:	89 f9                	mov    ecx,edi
c000279c:	84 c9                	test   cl,cl
c000279e:	74 04                	je     c00027a4 <mount_volume+0xab>
c00027a0:	a8 04                	test   al,0x4
c00027a2:	75 c7                	jne    c000276b <mount_volume+0x72>
c00027a4:	31 d2                	xor    edx,edx
c00027a6:	89 e8                	mov    eax,ebp
c00027a8:	e8 c8 fd ff ff       	call   c0002575 <find_volume>
c00027ad:	83 f8 04             	cmp    eax,0x4
c00027b0:	75 0a                	jne    c00027bc <mount_volume+0xc3>
c00027b2:	bb 01 00 00 00       	mov    ebx,0x1
c00027b7:	e9 9c 04 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c00027bc:	83 f8 01             	cmp    eax,0x1
c00027bf:	76 0a                	jbe    c00027cb <mount_volume+0xd2>
c00027c1:	bb 0d 00 00 00       	mov    ebx,0xd
c00027c6:	e9 8d 04 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c00027cb:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027ce:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d9:	75 17                	jne    c00027f2 <mount_volume+0xf9>
c00027db:	b8 0b 00 00 00       	mov    eax,0xb
c00027e0:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027e5:	75 da                	jne    c00027c1 <mount_volume+0xc8>
c00027e7:	40                   	inc    eax
c00027e8:	83 f8 40             	cmp    eax,0x40
c00027eb:	75 f3                	jne    c00027e0 <mount_volume+0xe7>
c00027ed:	e9 5a 02 00 00       	jmp    c0002a4c <mount_volume+0x353>
c00027f2:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027f5:	e8 6f f4 ff ff       	call   c0001c69 <ld_word>
c00027fa:	66 3d 00 02          	cmp    ax,0x200
c00027fe:	75 c1                	jne    c00027c1 <mount_volume+0xc8>
c0002800:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002803:	e8 61 f4 ff ff       	call   c0001c69 <ld_word>
c0002808:	0f b7 c0             	movzx  eax,ax
c000280b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000280f:	85 c0                	test   eax,eax
c0002811:	75 0c                	jne    c000281f <mount_volume+0x126>
c0002813:	8d 45 78             	lea    eax,[ebp+0x78]
c0002816:	e8 5b f4 ff ff       	call   c0001c76 <ld_dword>
c000281b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000281f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002823:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002826:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002829:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000282d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002830:	48                   	dec    eax
c0002831:	3c 01                	cmp    al,0x1
c0002833:	77 8c                	ja     c00027c1 <mount_volume+0xc8>
c0002835:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002839:	89 c3                	mov    ebx,eax
c000283b:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c000283f:	66 85 c0             	test   ax,ax
c0002842:	0f 84 79 ff ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002848:	8d 40 ff             	lea    eax,[eax-0x1]
c000284b:	85 d8                	test   eax,ebx
c000284d:	0f 85 6e ff ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002853:	8d 45 65             	lea    eax,[ebp+0x65]
c0002856:	e8 0e f4 ff ff       	call   c0001c69 <ld_word>
c000285b:	89 c7                	mov    edi,eax
c000285d:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002861:	a8 0f                	test   al,0xf
c0002863:	0f 85 58 ff ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002869:	8d 45 67             	lea    eax,[ebp+0x67]
c000286c:	e8 f8 f3 ff ff       	call   c0001c69 <ld_word>
c0002871:	0f b7 f0             	movzx  esi,ax
c0002874:	85 f6                	test   esi,esi
c0002876:	75 0a                	jne    c0002882 <mount_volume+0x189>
c0002878:	8d 45 74             	lea    eax,[ebp+0x74]
c000287b:	e8 f6 f3 ff ff       	call   c0001c76 <ld_dword>
c0002880:	89 c6                	mov    esi,eax
c0002882:	8d 45 62             	lea    eax,[ebp+0x62]
c0002885:	e8 df f3 ff ff       	call   c0001c69 <ld_word>
c000288a:	66 85 c0             	test   ax,ax
c000288d:	0f 84 2e ff ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002893:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002898:	0f b7 c8             	movzx  ecx,ax
c000289b:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00028a0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00028a4:	89 fa                	mov    edx,edi
c00028a6:	66 c1 ea 04          	shr    dx,0x4
c00028aa:	0f b7 d2             	movzx  edx,dx
c00028ad:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028b1:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b8:	39 c6                	cmp    esi,eax
c00028ba:	0f 82 01 ff ff ff    	jb     c00027c1 <mount_volume+0xc8>
c00028c0:	29 c6                	sub    esi,eax
c00028c2:	31 d2                	xor    edx,edx
c00028c4:	89 f0                	mov    eax,esi
c00028c6:	f7 f3                	div    ebx
c00028c8:	39 de                	cmp    esi,ebx
c00028ca:	0f 82 f1 fe ff ff    	jb     c00027c1 <mount_volume+0xc8>
c00028d0:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028d5:	0f 87 e6 fe ff ff    	ja     c00027c1 <mount_volume+0xc8>
c00028db:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028e0:	0f 86 63 03 00 00    	jbe    c0002c49 <mount_volume+0x550>
c00028e6:	bb 03 00 00 00       	mov    ebx,0x3
c00028eb:	8d 70 02             	lea    esi,[eax+0x2]
c00028ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028f6:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f9:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028fc:	31 d2                	xor    edx,edx
c00028fe:	89 c8                	mov    eax,ecx
c0002900:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002903:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002907:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000290b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000290f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002913:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002916:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002919:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000291d:	31 d2                	xor    edx,edx
c000291f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002923:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002927:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000292a:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000292d:	83 fb 03             	cmp    ebx,0x3
c0002930:	75 2b                	jne    c000295d <mount_volume+0x264>
c0002932:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002935:	e8 2f f3 ff ff       	call   c0001c69 <ld_word>
c000293a:	66 09 c7             	or     di,ax
c000293d:	0f 85 7e fe ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002943:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002949:	c1 e6 02             	shl    esi,0x2
c000294c:	e8 25 f3 ff ff       	call   c0001c76 <ld_dword>
c0002951:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002958:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000295b:	eb 30                	jmp    c000298d <mount_volume+0x294>
c000295d:	66 85 ff             	test   di,di
c0002960:	0f 84 5b fe ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002966:	31 d2                	xor    edx,edx
c0002968:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000296c:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002970:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002974:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002977:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000297a:	83 fb 02             	cmp    ebx,0x2
c000297d:	75 04                	jne    c0002983 <mount_volume+0x28a>
c000297f:	01 f6                	add    esi,esi
c0002981:	eb 0a                	jmp    c000298d <mount_volume+0x294>
c0002983:	8d 04 76             	lea    eax,[esi+esi*2]
c0002986:	83 e6 01             	and    esi,0x1
c0002989:	d1 e8                	shr    eax,1
c000298b:	01 c6                	add    esi,eax
c000298d:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002993:	c1 ee 09             	shr    esi,0x9
c0002996:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000299a:	0f 87 21 fe ff ff    	ja     c00027c1 <mount_volume+0xc8>
c00029a0:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029a7:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029ae:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029b2:	83 fb 03             	cmp    ebx,0x3
c00029b5:	75 7a                	jne    c0002a31 <mount_volume+0x338>
c00029b7:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029bd:	e8 a7 f2 ff ff       	call   c0001c69 <ld_word>
c00029c2:	66 48                	dec    ax
c00029c4:	75 6b                	jne    c0002a31 <mount_volume+0x338>
c00029c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029ce:	83 c2 01             	add    edx,0x1
c00029d1:	89 e8                	mov    eax,ebp
c00029d3:	83 d1 00             	adc    ecx,0x0
c00029d6:	e8 6c fa ff ff       	call   c0002447 <move_window>
c00029db:	85 c0                	test   eax,eax
c00029dd:	75 52                	jne    c0002a31 <mount_volume+0x338>
c00029df:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029e3:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e9:	e8 7b f2 ff ff       	call   c0001c69 <ld_word>
c00029ee:	66 3d 55 aa          	cmp    ax,0xaa55
c00029f2:	75 3d                	jne    c0002a31 <mount_volume+0x338>
c00029f4:	8d 45 54             	lea    eax,[ebp+0x54]
c00029f7:	e8 7a f2 ff ff       	call   c0001c76 <ld_dword>
c00029fc:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002a01:	75 2e                	jne    c0002a31 <mount_volume+0x338>
c0002a03:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a09:	e8 68 f2 ff ff       	call   c0001c76 <ld_dword>
c0002a0e:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a13:	75 1c                	jne    c0002a31 <mount_volume+0x338>
c0002a15:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a1b:	e8 56 f2 ff ff       	call   c0001c76 <ld_dword>
c0002a20:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a23:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a29:	e8 48 f2 ff ff       	call   c0001c76 <ld_dword>
c0002a2e:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a31:	66 a1 a0 e6 02 c0    	mov    ax,ds:0xc002e6a0
c0002a37:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a3a:	40                   	inc    eax
c0002a3b:	31 db                	xor    ebx,ebx
c0002a3d:	66 a3 a0 e6 02 c0    	mov    ds:0xc002e6a0,ax
c0002a43:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a47:	e9 0c 02 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c0002a4c:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a52:	e8 12 f2 ff ff       	call   c0001c69 <ld_word>
c0002a57:	66 3d 00 01          	cmp    ax,0x100
c0002a5b:	0f 85 60 fd ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002a61:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a68:	0f 85 53 fd ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002a6e:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a74:	e8 15 f2 ff ff       	call   c0001c8e <ld_qword>
c0002a79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a7d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a81:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a87:	e8 ea f1 ff ff       	call   c0001c76 <ld_dword>
c0002a8c:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a8f:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a95:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a98:	fe c8                	dec    al
c0002a9a:	0f 85 21 fd ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002aa0:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002aa7:	bb 01 00 00 00       	mov    ebx,0x1
c0002aac:	d3 e3                	shl    ebx,cl
c0002aae:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002ab2:	66 85 db             	test   bx,bx
c0002ab5:	0f 84 06 fd ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002abb:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ac1:	e8 b0 f1 ff ff       	call   c0001c76 <ld_dword>
c0002ac6:	89 c6                	mov    esi,eax
c0002ac8:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002acd:	0f 87 ee fc ff ff    	ja     c00027c1 <mount_volume+0xc8>
c0002ad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ad7:	8d 40 02             	lea    eax,[eax+0x2]
c0002ada:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002add:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ae0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae4:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002ae7:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aed:	e8 84 f1 ff ff       	call   c0001c76 <ld_dword>
c0002af2:	31 d2                	xor    edx,edx
c0002af4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af8:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002afc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b00:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002b04:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002b07:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b0a:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b10:	e8 61 f1 ff ff       	call   c0001c76 <ld_dword>
c0002b15:	31 d2                	xor    edx,edx
c0002b17:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b1f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b23:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b26:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b29:	0f b7 c3             	movzx  eax,bx
c0002b2c:	31 d2                	xor    edx,edx
c0002b2e:	0f af f0             	imul   esi,eax
c0002b31:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b35:	89 f0                	mov    eax,esi
c0002b37:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b3b:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b3f:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b43:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b47:	39 c1                	cmp    ecx,eax
c0002b49:	89 df                	mov    edi,ebx
c0002b4b:	19 d7                	sbb    edi,edx
c0002b4d:	0f 82 6e fc ff ff    	jb     c00027c1 <mount_volume+0xc8>
c0002b53:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b59:	31 db                	xor    ebx,ebx
c0002b5b:	e8 16 f1 ff ff       	call   c0001c76 <ld_dword>
c0002b60:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b67:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b6a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b72:	85 db                	test   ebx,ebx
c0002b74:	75 39                	jne    c0002baf <mount_volume+0x4b6>
c0002b76:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b7a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b7e:	0f 86 3d fc ff ff    	jbe    c00027c1 <mount_volume+0xc8>
c0002b84:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b87:	31 ff                	xor    edi,edi
c0002b89:	89 e8                	mov    eax,ebp
c0002b8b:	e8 72 f3 ff ff       	call   c0001f02 <clst2sect>
c0002b90:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b94:	01 c6                	add    esi,eax
c0002b96:	89 e8                	mov    eax,ebp
c0002b98:	11 d7                	adc    edi,edx
c0002b9a:	89 f2                	mov    edx,esi
c0002b9c:	89 f9                	mov    ecx,edi
c0002b9e:	e8 a4 f8 ff ff       	call   c0002447 <move_window>
c0002ba3:	85 c0                	test   eax,eax
c0002ba5:	0f 85 07 fc ff ff    	jne    c00027b2 <mount_volume+0xb9>
c0002bab:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002baf:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bb4:	74 0b                	je     c0002bc1 <mount_volume+0x4c8>
c0002bb6:	83 c3 20             	add    ebx,0x20
c0002bb9:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bbf:	eb b1                	jmp    c0002b72 <mount_volume+0x479>
c0002bc1:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bc4:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc8:	e8 a9 f0 ff ff       	call   c0001c76 <ld_dword>
c0002bcd:	89 c3                	mov    ebx,eax
c0002bcf:	83 f8 01             	cmp    eax,0x1
c0002bd2:	0f 86 e9 fb ff ff    	jbe    c00027c1 <mount_volume+0xc8>
c0002bd8:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bdb:	0f 86 e0 fb ff ff    	jbe    c00027c1 <mount_volume+0xc8>
c0002be1:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002be4:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be8:	0f af c2             	imul   eax,edx
c0002beb:	31 d2                	xor    edx,edx
c0002bed:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bf0:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bf3:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bf6:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf9:	31 c9                	xor    ecx,ecx
c0002bfb:	89 da                	mov    edx,ebx
c0002bfd:	89 e8                	mov    eax,ebp
c0002bff:	c1 ea 07             	shr    edx,0x7
c0002c02:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002c05:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c08:	e8 3a f8 ff ff       	call   c0002447 <move_window>
c0002c0d:	85 c0                	test   eax,eax
c0002c0f:	0f 85 9d fb ff ff    	jne    c00027b2 <mount_volume+0xb9>
c0002c15:	89 d8                	mov    eax,ebx
c0002c17:	83 e0 7f             	and    eax,0x7f
c0002c1a:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c1d:	e8 54 f0 ff ff       	call   c0001c76 <ld_dword>
c0002c22:	83 f8 ff             	cmp    eax,0xffffffff
c0002c25:	74 0a                	je     c0002c31 <mount_volume+0x538>
c0002c27:	43                   	inc    ebx
c0002c28:	39 d8                	cmp    eax,ebx
c0002c2a:	74 cd                	je     c0002bf9 <mount_volume+0x500>
c0002c2c:	e9 90 fb ff ff       	jmp    c00027c1 <mount_volume+0xc8>
c0002c31:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c38:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c3f:	bb 04 00 00 00       	mov    ebx,0x4
c0002c44:	e9 e8 fd ff ff       	jmp    c0002a31 <mount_volume+0x338>
c0002c49:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c4e:	19 db                	sbb    ebx,ebx
c0002c50:	83 c3 02             	add    ebx,0x2
c0002c53:	e9 93 fc ff ff       	jmp    c00028eb <mount_volume+0x1f2>
c0002c58:	83 c4 3c             	add    esp,0x3c
c0002c5b:	89 d8                	mov    eax,ebx
c0002c5d:	5b                   	pop    ebx
c0002c5e:	5e                   	pop    esi
c0002c5f:	5f                   	pop    edi
c0002c60:	5d                   	pop    ebp
c0002c61:	c3                   	ret    

c0002c62 <find_bitmap>:
c0002c62:	55                   	push   ebp
c0002c63:	57                   	push   edi
c0002c64:	89 c7                	mov    edi,eax
c0002c66:	56                   	push   esi
c0002c67:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c6a:	53                   	push   ebx
c0002c6b:	83 ec 1c             	sub    esp,0x1c
c0002c6e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c71:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c75:	83 e8 02             	sub    eax,0x2
c0002c78:	39 f0                	cmp    eax,esi
c0002c7a:	77 02                	ja     c0002c7e <find_bitmap+0x1c>
c0002c7c:	31 f6                	xor    esi,esi
c0002c7e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c82:	89 f3                	mov    ebx,esi
c0002c84:	31 ed                	xor    ebp,ebp
c0002c86:	31 c9                	xor    ecx,ecx
c0002c88:	89 da                	mov    edx,ebx
c0002c8a:	89 f8                	mov    eax,edi
c0002c8c:	c1 ea 0c             	shr    edx,0xc
c0002c8f:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c92:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c95:	e8 ad f7 ff ff       	call   c0002447 <move_window>
c0002c9a:	85 c0                	test   eax,eax
c0002c9c:	75 68                	jne    c0002d06 <find_bitmap+0xa4>
c0002c9e:	89 da                	mov    edx,ebx
c0002ca0:	89 d9                	mov    ecx,ebx
c0002ca2:	c1 ea 03             	shr    edx,0x3
c0002ca5:	83 e1 07             	and    ecx,0x7
c0002ca8:	b8 01 00 00 00       	mov    eax,0x1
c0002cad:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cb3:	d3 e0                	shl    eax,cl
c0002cb5:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb8:	83 e9 02             	sub    ecx,0x2
c0002cbb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cbf:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cc3:	43                   	inc    ebx
c0002cc4:	21 c1                	and    ecx,eax
c0002cc6:	d1 e0                	shl    eax,1
c0002cc8:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002ccc:	77 09                	ja     c0002cd7 <find_bitmap+0x75>
c0002cce:	31 db                	xor    ebx,ebx
c0002cd0:	ba 00 02 00 00       	mov    edx,0x200
c0002cd5:	31 c0                	xor    eax,eax
c0002cd7:	84 c9                	test   cl,cl
c0002cd9:	75 10                	jne    c0002ceb <find_bitmap+0x89>
c0002cdb:	45                   	inc    ebp
c0002cdc:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ce0:	75 0f                	jne    c0002cf1 <find_bitmap+0x8f>
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	83 c0 02             	add    eax,0x2
c0002ce9:	eb 22                	jmp    c0002d0d <find_bitmap+0xab>
c0002ceb:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cef:	31 ed                	xor    ebp,ebp
c0002cf1:	39 de                	cmp    esi,ebx
c0002cf3:	74 16                	je     c0002d0b <find_bitmap+0xa9>
c0002cf5:	84 c0                	test   al,al
c0002cf7:	75 c6                	jne    c0002cbf <find_bitmap+0x5d>
c0002cf9:	42                   	inc    edx
c0002cfa:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002d00:	77 84                	ja     c0002c86 <find_bitmap+0x24>
c0002d02:	b0 01                	mov    al,0x1
c0002d04:	eb b9                	jmp    c0002cbf <find_bitmap+0x5d>
c0002d06:	83 c8 ff             	or     eax,0xffffffff
c0002d09:	eb 02                	jmp    c0002d0d <find_bitmap+0xab>
c0002d0b:	31 c0                	xor    eax,eax
c0002d0d:	83 c4 1c             	add    esp,0x1c
c0002d10:	5b                   	pop    ebx
c0002d11:	5e                   	pop    esi
c0002d12:	5f                   	pop    edi
c0002d13:	5d                   	pop    ebp
c0002d14:	c3                   	ret    

c0002d15 <change_bitmap>:
c0002d15:	55                   	push   ebp
c0002d16:	89 cd                	mov    ebp,ecx
c0002d18:	57                   	push   edi
c0002d19:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d1c:	56                   	push   esi
c0002d1d:	89 c7                	mov    edi,eax
c0002d1f:	53                   	push   ebx
c0002d20:	89 c8                	mov    eax,ecx
c0002d22:	83 ec 1c             	sub    esp,0x1c
c0002d25:	31 d2                	xor    edx,edx
c0002d27:	89 ce                	mov    esi,ecx
c0002d29:	c1 e8 0c             	shr    eax,0xc
c0002d2c:	bb 01 00 00 00       	mov    ebx,0x1
c0002d31:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d34:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d37:	c1 ee 03             	shr    esi,0x3
c0002d3a:	83 e1 07             	and    ecx,0x7
c0002d3d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d43:	d3 e3                	shl    ebx,cl
c0002d45:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d49:	89 c1                	mov    ecx,eax
c0002d4b:	89 d3                	mov    ebx,edx
c0002d4d:	83 c1 01             	add    ecx,0x1
c0002d50:	83 d3 00             	adc    ebx,0x0
c0002d53:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d57:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d5b:	89 d1                	mov    ecx,edx
c0002d5d:	89 c2                	mov    edx,eax
c0002d5f:	89 f8                	mov    eax,edi
c0002d61:	e8 e1 f6 ff ff       	call   c0002447 <move_window>
c0002d66:	89 c1                	mov    ecx,eax
c0002d68:	85 c0                	test   eax,eax
c0002d6a:	75 48                	jne    c0002db4 <change_bitmap+0x9f>
c0002d6c:	31 d2                	xor    edx,edx
c0002d6e:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d72:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d76:	0f 95 c2             	setne  dl
c0002d79:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d7d:	74 3c                	je     c0002dbb <change_bitmap+0xa6>
c0002d7f:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d83:	4d                   	dec    ebp
c0002d84:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d88:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d8c:	74 32                	je     c0002dc0 <change_bitmap+0xab>
c0002d8e:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d92:	75 d8                	jne    c0002d6c <change_bitmap+0x57>
c0002d94:	8d 46 01             	lea    eax,[esi+0x1]
c0002d97:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d9c:	89 c3                	mov    ebx,eax
c0002d9e:	31 f6                	xor    esi,esi
c0002da0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da8:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002dae:	74 99                	je     c0002d49 <change_bitmap+0x34>
c0002db0:	89 de                	mov    esi,ebx
c0002db2:	eb b8                	jmp    c0002d6c <change_bitmap+0x57>
c0002db4:	b9 01 00 00 00       	mov    ecx,0x1
c0002db9:	eb 05                	jmp    c0002dc0 <change_bitmap+0xab>
c0002dbb:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc0:	83 c4 1c             	add    esp,0x1c
c0002dc3:	89 c8                	mov    eax,ecx
c0002dc5:	5b                   	pop    ebx
c0002dc6:	5e                   	pop    esi
c0002dc7:	5f                   	pop    edi
c0002dc8:	5d                   	pop    ebp
c0002dc9:	c3                   	ret    

c0002dca <put_fat>:
c0002dca:	83 fa 01             	cmp    edx,0x1
c0002dcd:	0f 86 7b 01 00 00    	jbe    c0002f4e <put_fat+0x184>
c0002dd3:	55                   	push   ebp
c0002dd4:	57                   	push   edi
c0002dd5:	89 cf                	mov    edi,ecx
c0002dd7:	56                   	push   esi
c0002dd8:	b9 02 00 00 00       	mov    ecx,0x2
c0002ddd:	53                   	push   ebx
c0002dde:	89 c6                	mov    esi,eax
c0002de0:	83 ec 1c             	sub    esp,0x1c
c0002de3:	89 d3                	mov    ebx,edx
c0002de5:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de8:	0f 86 68 01 00 00    	jbe    c0002f56 <put_fat+0x18c>
c0002dee:	8a 00                	mov    al,BYTE PTR [eax]
c0002df0:	3c 02                	cmp    al,0x2
c0002df2:	0f 84 c7 00 00 00    	je     c0002ebf <put_fat+0xf5>
c0002df8:	77 09                	ja     c0002e03 <put_fat+0x39>
c0002dfa:	fe c8                	dec    al
c0002dfc:	74 17                	je     c0002e15 <put_fat+0x4b>
c0002dfe:	e9 53 01 00 00       	jmp    c0002f56 <put_fat+0x18c>
c0002e03:	b9 02 00 00 00       	mov    ecx,0x2
c0002e08:	3c 04                	cmp    al,0x4
c0002e0a:	0f 86 e1 00 00 00    	jbe    c0002ef1 <put_fat+0x127>
c0002e10:	e9 41 01 00 00       	jmp    c0002f56 <put_fat+0x18c>
c0002e15:	89 d5                	mov    ebp,edx
c0002e17:	31 c9                	xor    ecx,ecx
c0002e19:	d1 ed                	shr    ebp,1
c0002e1b:	89 f0                	mov    eax,esi
c0002e1d:	01 d5                	add    ebp,edx
c0002e1f:	89 ea                	mov    edx,ebp
c0002e21:	c1 ea 09             	shr    edx,0x9
c0002e24:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e27:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e2a:	e8 18 f6 ff ff       	call   c0002447 <move_window>
c0002e2f:	89 c1                	mov    ecx,eax
c0002e31:	85 c0                	test   eax,eax
c0002e33:	0f 85 1d 01 00 00    	jne    c0002f56 <put_fat+0x18c>
c0002e39:	8d 46 54             	lea    eax,[esi+0x54]
c0002e3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e40:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e43:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e4d:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e51:	89 f8                	mov    eax,edi
c0002e53:	83 e3 01             	and    ebx,0x1
c0002e56:	74 0d                	je     c0002e65 <put_fat+0x9b>
c0002e58:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e5b:	89 fa                	mov    edx,edi
c0002e5d:	83 e0 0f             	and    eax,0xf
c0002e60:	c1 e2 04             	shl    edx,0x4
c0002e63:	09 d0                	or     eax,edx
c0002e65:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e68:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e6c:	31 c9                	xor    ecx,ecx
c0002e6e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e72:	c1 ea 09             	shr    edx,0x9
c0002e75:	89 f0                	mov    eax,esi
c0002e77:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e7a:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e7d:	e8 c5 f5 ff ff       	call   c0002447 <move_window>
c0002e82:	89 c1                	mov    ecx,eax
c0002e84:	85 c0                	test   eax,eax
c0002e86:	0f 85 ca 00 00 00    	jne    c0002f56 <put_fat+0x18c>
c0002e8c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e90:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e96:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e9a:	85 db                	test   ebx,ebx
c0002e9c:	74 07                	je     c0002ea5 <put_fat+0xdb>
c0002e9e:	c1 ef 04             	shr    edi,0x4
c0002ea1:	89 fa                	mov    edx,edi
c0002ea3:	eb 0e                	jmp    c0002eb3 <put_fat+0xe9>
c0002ea5:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea8:	c1 ef 08             	shr    edi,0x8
c0002eab:	83 e2 f0             	and    edx,0xfffffff0
c0002eae:	83 e7 0f             	and    edi,0xf
c0002eb1:	09 fa                	or     edx,edi
c0002eb3:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eb6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eba:	e9 97 00 00 00       	jmp    c0002f56 <put_fat+0x18c>
c0002ebf:	31 c9                	xor    ecx,ecx
c0002ec1:	c1 ea 08             	shr    edx,0x8
c0002ec4:	89 f0                	mov    eax,esi
c0002ec6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ecc:	e8 76 f5 ff ff       	call   c0002447 <move_window>
c0002ed1:	89 c1                	mov    ecx,eax
c0002ed3:	85 c0                	test   eax,eax
c0002ed5:	75 7f                	jne    c0002f56 <put_fat+0x18c>
c0002ed7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edb:	01 db                	add    ebx,ebx
c0002edd:	0f b7 d7             	movzx  edx,di
c0002ee0:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ee6:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002eea:	e8 ec ed ff ff       	call   c0001cdb <st_word>
c0002eef:	eb 53                	jmp    c0002f44 <put_fat+0x17a>
c0002ef1:	31 c9                	xor    ecx,ecx
c0002ef3:	c1 ea 07             	shr    edx,0x7
c0002ef6:	89 f0                	mov    eax,esi
c0002ef8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002efb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002efe:	e8 44 f5 ff ff       	call   c0002447 <move_window>
c0002f03:	89 c1                	mov    ecx,eax
c0002f05:	85 c0                	test   eax,eax
c0002f07:	75 4d                	jne    c0002f56 <put_fat+0x18c>
c0002f09:	c1 e3 02             	shl    ebx,0x2
c0002f0c:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f12:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f15:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f19:	74 1c                	je     c0002f37 <put_fat+0x16d>
c0002f1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f1f:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f25:	89 d8                	mov    eax,ebx
c0002f27:	e8 4a ed ff ff       	call   c0001c76 <ld_dword>
c0002f2c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f30:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f35:	09 c7                	or     edi,eax
c0002f37:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f3b:	89 fa                	mov    edx,edi
c0002f3d:	89 d8                	mov    eax,ebx
c0002f3f:	e8 9b ed ff ff       	call   c0001cdf <st_dword>
c0002f44:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f48:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f4c:	eb 08                	jmp    c0002f56 <put_fat+0x18c>
c0002f4e:	b9 02 00 00 00       	mov    ecx,0x2
c0002f53:	89 c8                	mov    eax,ecx
c0002f55:	c3                   	ret    
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	89 c8                	mov    eax,ecx
c0002f5b:	5b                   	pop    ebx
c0002f5c:	5e                   	pop    esi
c0002f5d:	5f                   	pop    edi
c0002f5e:	5d                   	pop    ebp
c0002f5f:	c3                   	ret    

c0002f60 <fill_last_frag>:
c0002f60:	57                   	push   edi
c0002f61:	89 cf                	mov    edi,ecx
c0002f63:	56                   	push   esi
c0002f64:	89 d6                	mov    esi,edx
c0002f66:	53                   	push   ebx
c0002f67:	89 c3                	mov    ebx,eax
c0002f69:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f6c:	85 c0                	test   eax,eax
c0002f6e:	74 21                	je     c0002f91 <fill_last_frag+0x31>
c0002f70:	89 f9                	mov    ecx,edi
c0002f72:	83 f8 01             	cmp    eax,0x1
c0002f75:	76 05                	jbe    c0002f7c <fill_last_frag+0x1c>
c0002f77:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f7a:	29 c1                	sub    ecx,eax
c0002f7c:	8d 56 01             	lea    edx,[esi+0x1]
c0002f7f:	29 c2                	sub    edx,eax
c0002f81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f83:	e8 42 fe ff ff       	call   c0002dca <put_fat>
c0002f88:	85 c0                	test   eax,eax
c0002f8a:	75 05                	jne    c0002f91 <fill_last_frag+0x31>
c0002f8c:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f8f:	eb d8                	jmp    c0002f69 <fill_last_frag+0x9>
c0002f91:	5b                   	pop    ebx
c0002f92:	5e                   	pop    esi
c0002f93:	5f                   	pop    edi
c0002f94:	c3                   	ret    

c0002f95 <fill_first_frag>:
c0002f95:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f99:	75 2d                	jne    c0002fc8 <fill_first_frag+0x33>
c0002f9b:	57                   	push   edi
c0002f9c:	56                   	push   esi
c0002f9d:	53                   	push   ebx
c0002f9e:	89 c3                	mov    ebx,eax
c0002fa0:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002fa3:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002fa6:	01 d7                	add    edi,edx
c0002fa8:	39 fa                	cmp    edx,edi
c0002faa:	74 14                	je     c0002fc0 <fill_first_frag+0x2b>
c0002fac:	8d 72 01             	lea    esi,[edx+0x1]
c0002faf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fb1:	89 f1                	mov    ecx,esi
c0002fb3:	e8 12 fe ff ff       	call   c0002dca <put_fat>
c0002fb8:	89 f2                	mov    edx,esi
c0002fba:	85 c0                	test   eax,eax
c0002fbc:	74 ea                	je     c0002fa8 <fill_first_frag+0x13>
c0002fbe:	eb 0b                	jmp    c0002fcb <fill_first_frag+0x36>
c0002fc0:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fc4:	31 c0                	xor    eax,eax
c0002fc6:	eb 03                	jmp    c0002fcb <fill_first_frag+0x36>
c0002fc8:	31 c0                	xor    eax,eax
c0002fca:	c3                   	ret    
c0002fcb:	5b                   	pop    ebx
c0002fcc:	5e                   	pop    esi
c0002fcd:	5f                   	pop    edi
c0002fce:	c3                   	ret    

c0002fcf <get_fat>:
c0002fcf:	83 fa 01             	cmp    edx,0x1
c0002fd2:	0f 86 db 01 00 00    	jbe    c00031b3 <get_fat+0x1e4>
c0002fd8:	55                   	push   ebp
c0002fd9:	b9 01 00 00 00       	mov    ecx,0x1
c0002fde:	57                   	push   edi
c0002fdf:	56                   	push   esi
c0002fe0:	53                   	push   ebx
c0002fe1:	83 ec 1c             	sub    esp,0x1c
c0002fe4:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fe6:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe9:	0f 86 cc 01 00 00    	jbe    c00031bb <get_fat+0x1ec>
c0002fef:	89 c3                	mov    ebx,eax
c0002ff1:	89 d6                	mov    esi,edx
c0002ff3:	8a 07                	mov    al,BYTE PTR [edi]
c0002ff5:	3c 02                	cmp    al,0x2
c0002ff7:	0f 84 99 00 00 00    	je     c0003096 <get_fat+0xc7>
c0002ffd:	77 09                	ja     c0003008 <get_fat+0x39>
c0002fff:	fe c8                	dec    al
c0003001:	74 1a                	je     c000301d <get_fat+0x4e>
c0003003:	e9 b3 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c0003008:	3c 03                	cmp    al,0x3
c000300a:	0f 84 b5 00 00 00    	je     c00030c5 <get_fat+0xf6>
c0003010:	3c 04                	cmp    al,0x4
c0003012:	0f 84 e3 00 00 00    	je     c00030fb <get_fat+0x12c>
c0003018:	e9 9e 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c000301d:	89 d3                	mov    ebx,edx
c000301f:	31 c9                	xor    ecx,ecx
c0003021:	d1 eb                	shr    ebx,1
c0003023:	89 f8                	mov    eax,edi
c0003025:	01 d3                	add    ebx,edx
c0003027:	89 da                	mov    edx,ebx
c0003029:	c1 ea 09             	shr    edx,0x9
c000302c:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000302f:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003032:	e8 10 f4 ff ff       	call   c0002447 <move_window>
c0003037:	85 c0                	test   eax,eax
c0003039:	74 08                	je     c0003043 <get_fat+0x74>
c000303b:	83 c9 ff             	or     ecx,0xffffffff
c000303e:	e9 78 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c0003043:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003046:	31 c9                	xor    ecx,ecx
c0003048:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000304e:	89 ea                	mov    edx,ebp
c0003050:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003054:	c1 ea 09             	shr    edx,0x9
c0003057:	89 f8                	mov    eax,edi
c0003059:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305c:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000305f:	e8 e3 f3 ff ff       	call   c0002447 <move_window>
c0003064:	85 c0                	test   eax,eax
c0003066:	75 d3                	jne    c000303b <get_fat+0x6c>
c0003068:	0f b6 c3             	movzx  eax,bl
c000306b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003071:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003076:	c1 e3 08             	shl    ebx,0x8
c0003079:	09 c3                	or     ebx,eax
c000307b:	89 d9                	mov    ecx,ebx
c000307d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003083:	83 e6 01             	and    esi,0x1
c0003086:	0f 84 2f 01 00 00    	je     c00031bb <get_fat+0x1ec>
c000308c:	89 d9                	mov    ecx,ebx
c000308e:	c1 e9 04             	shr    ecx,0x4
c0003091:	e9 25 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c0003096:	31 c9                	xor    ecx,ecx
c0003098:	c1 ea 08             	shr    edx,0x8
c000309b:	89 f8                	mov    eax,edi
c000309d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030a0:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030a3:	e8 9f f3 ff ff       	call   c0002447 <move_window>
c00030a8:	85 c0                	test   eax,eax
c00030aa:	75 8f                	jne    c000303b <get_fat+0x6c>
c00030ac:	01 f6                	add    esi,esi
c00030ae:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030b4:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b8:	e8 ac eb ff ff       	call   c0001c69 <ld_word>
c00030bd:	0f b7 c8             	movzx  ecx,ax
c00030c0:	e9 f6 00 00 00       	jmp    c00031bb <get_fat+0x1ec>
c00030c5:	31 c9                	xor    ecx,ecx
c00030c7:	c1 ea 07             	shr    edx,0x7
c00030ca:	89 f8                	mov    eax,edi
c00030cc:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030cf:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030d2:	e8 70 f3 ff ff       	call   c0002447 <move_window>
c00030d7:	85 c0                	test   eax,eax
c00030d9:	0f 85 5c ff ff ff    	jne    c000303b <get_fat+0x6c>
c00030df:	c1 e6 02             	shl    esi,0x2
c00030e2:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e8:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030ec:	e8 85 eb ff ff       	call   c0001c76 <ld_dword>
c00030f1:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030f6:	e9 b4 00 00 00       	jmp    c00031af <get_fat+0x1e0>
c00030fb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030fe:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003101:	89 d1                	mov    ecx,edx
c0003103:	09 c1                	or     ecx,eax
c0003105:	74 06                	je     c000310d <get_fat+0x13e>
c0003107:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000310b:	75 0f                	jne    c000311c <get_fat+0x14d>
c000310d:	b9 01 00 00 00       	mov    ecx,0x1
c0003112:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003116:	0f 85 9f 00 00 00    	jne    c00031bb <get_fat+0x1ec>
c000311c:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003120:	89 f5                	mov    ebp,esi
c0003122:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003127:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000312a:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000312d:	80 f9 02             	cmp    cl,0x2
c0003130:	75 35                	jne    c0003167 <get_fat+0x198>
c0003132:	83 c0 ff             	add    eax,0xffffffff
c0003135:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000313a:	83 d2 ff             	adc    edx,0xffffffff
c000313d:	31 db                	xor    ebx,ebx
c000313f:	0f ac d0 09          	shrd   eax,edx,0x9
c0003143:	53                   	push   ebx
c0003144:	c1 ea 09             	shr    edx,0x9
c0003147:	51                   	push   ecx
c0003148:	52                   	push   edx
c0003149:	50                   	push   eax
c000314a:	e8 55 3a 02 00       	call   c0026ba4 <__udivdi3>
c000314f:	83 c4 10             	add    esp,0x10
c0003152:	b9 01 00 00 00       	mov    ecx,0x1
c0003157:	39 c5                	cmp    ebp,eax
c0003159:	77 60                	ja     c00031bb <get_fat+0x1ec>
c000315b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003160:	74 59                	je     c00031bb <get_fat+0x1ec>
c0003162:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003165:	eb 54                	jmp    c00031bb <get_fat+0x1ec>
c0003167:	80 f9 03             	cmp    cl,0x3
c000316a:	75 05                	jne    c0003171 <get_fat+0x1a2>
c000316c:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000316f:	77 f1                	ja     c0003162 <get_fat+0x193>
c0003171:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003176:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000317a:	75 3f                	jne    c00031bb <get_fat+0x1ec>
c000317c:	31 c9                	xor    ecx,ecx
c000317e:	89 f2                	mov    edx,esi
c0003180:	89 f8                	mov    eax,edi
c0003182:	c1 ea 07             	shr    edx,0x7
c0003185:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003188:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000318b:	e8 b7 f2 ff ff       	call   c0002447 <move_window>
c0003190:	85 c0                	test   eax,eax
c0003192:	0f 85 a3 fe ff ff    	jne    c000303b <get_fat+0x6c>
c0003198:	c1 e6 02             	shl    esi,0x2
c000319b:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031a1:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00031a5:	e8 cc ea ff ff       	call   c0001c76 <ld_dword>
c00031aa:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031af:	89 c1                	mov    ecx,eax
c00031b1:	eb 08                	jmp    c00031bb <get_fat+0x1ec>
c00031b3:	b9 01 00 00 00       	mov    ecx,0x1
c00031b8:	89 c8                	mov    eax,ecx
c00031ba:	c3                   	ret    
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	89 c8                	mov    eax,ecx
c00031c0:	5b                   	pop    ebx
c00031c1:	5e                   	pop    esi
c00031c2:	5f                   	pop    edi
c00031c3:	5d                   	pop    ebp
c00031c4:	c3                   	ret    

c00031c5 <dir_sdi>:
c00031c5:	55                   	push   ebp
c00031c6:	57                   	push   edi
c00031c7:	56                   	push   esi
c00031c8:	53                   	push   ebx
c00031c9:	89 c3                	mov    ebx,eax
c00031cb:	83 ec 1c             	sub    esp,0x1c
c00031ce:	8b 38                	mov    edi,DWORD PTR [eax]
c00031d0:	31 c0                	xor    eax,eax
c00031d2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031d5:	0f 94 c0             	sete   al
c00031d8:	48                   	dec    eax
c00031d9:	25 00 00 20 f0       	and    eax,0xf0200000
c00031de:	05 00 00 00 10       	add    eax,0x10000000
c00031e3:	39 d0                	cmp    eax,edx
c00031e5:	77 0a                	ja     c00031f1 <dir_sdi+0x2c>
c00031e7:	b8 02 00 00 00       	mov    eax,0x2
c00031ec:	e9 c4 00 00 00       	jmp    c00032b5 <dir_sdi+0xf0>
c00031f1:	89 d6                	mov    esi,edx
c00031f3:	f6 c2 1f             	test   dl,0x1f
c00031f6:	75 ef                	jne    c00031e7 <dir_sdi+0x22>
c00031f8:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031fb:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031fe:	85 c9                	test   ecx,ecx
c0003200:	75 2d                	jne    c000322f <dir_sdi+0x6a>
c0003202:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003205:	77 1b                	ja     c0003222 <dir_sdi+0x5d>
c0003207:	89 f2                	mov    edx,esi
c0003209:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000320d:	c1 ea 05             	shr    edx,0x5
c0003210:	39 c2                	cmp    edx,eax
c0003212:	73 d3                	jae    c00031e7 <dir_sdi+0x22>
c0003214:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003217:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000321a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000321d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003220:	eb 4b                	jmp    c000326d <dir_sdi+0xa8>
c0003222:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003225:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003229:	85 c0                	test   eax,eax
c000322b:	74 da                	je     c0003207 <dir_sdi+0x42>
c000322d:	89 c1                	mov    ecx,eax
c000322f:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003233:	c1 e5 09             	shl    ebp,0x9
c0003236:	89 ca                	mov    edx,ecx
c0003238:	39 ee                	cmp    esi,ebp
c000323a:	72 1c                	jb     c0003258 <dir_sdi+0x93>
c000323c:	89 d8                	mov    eax,ebx
c000323e:	e8 8c fd ff ff       	call   c0002fcf <get_fat>
c0003243:	89 c1                	mov    ecx,eax
c0003245:	83 f8 ff             	cmp    eax,0xffffffff
c0003248:	74 66                	je     c00032b0 <dir_sdi+0xeb>
c000324a:	83 f8 01             	cmp    eax,0x1
c000324d:	76 98                	jbe    c00031e7 <dir_sdi+0x22>
c000324f:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003252:	76 93                	jbe    c00031e7 <dir_sdi+0x22>
c0003254:	29 ee                	sub    esi,ebp
c0003256:	eb de                	jmp    c0003236 <dir_sdi+0x71>
c0003258:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000325c:	89 f8                	mov    eax,edi
c000325e:	e8 9f ec ff ff       	call   c0001f02 <clst2sect>
c0003263:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003267:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000326a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000326d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003270:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003273:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003276:	89 d1                	mov    ecx,edx
c0003278:	09 c1                	or     ecx,eax
c000327a:	0f 84 67 ff ff ff    	je     c00031e7 <dir_sdi+0x22>
c0003280:	89 f1                	mov    ecx,esi
c0003282:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000328a:	c1 e9 09             	shr    ecx,0x9
c000328d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003291:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003295:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003299:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000329c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00032a2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00032a5:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a9:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032ac:	31 c0                	xor    eax,eax
c00032ae:	eb 05                	jmp    c00032b5 <dir_sdi+0xf0>
c00032b0:	b8 01 00 00 00       	mov    eax,0x1
c00032b5:	83 c4 1c             	add    esp,0x1c
c00032b8:	5b                   	pop    ebx
c00032b9:	5e                   	pop    esi
c00032ba:	5f                   	pop    edi
c00032bb:	5d                   	pop    ebp
c00032bc:	c3                   	ret    

c00032bd <create_chain>:
c00032bd:	55                   	push   ebp
c00032be:	89 c5                	mov    ebp,eax
c00032c0:	57                   	push   edi
c00032c1:	56                   	push   esi
c00032c2:	53                   	push   ebx
c00032c3:	83 ec 1c             	sub    esp,0x1c
c00032c6:	85 d2                	test   edx,edx
c00032c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032cc:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ce:	75 0e                	jne    c00032de <create_chain+0x21>
c00032d0:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032d3:	85 ff                	test   edi,edi
c00032d5:	74 39                	je     c0003310 <create_chain+0x53>
c00032d7:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032da:	77 39                	ja     c0003315 <create_chain+0x58>
c00032dc:	eb 32                	jmp    c0003310 <create_chain+0x53>
c00032de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032e2:	e8 e8 fc ff ff       	call   c0002fcf <get_fat>
c00032e7:	89 c3                	mov    ebx,eax
c00032e9:	83 f8 01             	cmp    eax,0x1
c00032ec:	77 0a                	ja     c00032f8 <create_chain+0x3b>
c00032ee:	bb 01 00 00 00       	mov    ebx,0x1
c00032f3:	e9 ba 01 00 00       	jmp    c00034b2 <create_chain+0x1f5>
c00032f8:	83 f8 ff             	cmp    eax,0xffffffff
c00032fb:	0f 84 62 01 00 00    	je     c0003463 <create_chain+0x1a6>
c0003301:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003304:	0f 87 a8 01 00 00    	ja     c00034b2 <create_chain+0x1f5>
c000330a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000330e:	eb 05                	jmp    c0003315 <create_chain+0x58>
c0003310:	bf 01 00 00 00       	mov    edi,0x1
c0003315:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003319:	75 07                	jne    c0003322 <create_chain+0x65>
c000331b:	31 db                	xor    ebx,ebx
c000331d:	e9 90 01 00 00       	jmp    c00034b2 <create_chain+0x1f5>
c0003322:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003325:	75 74                	jne    c000339b <create_chain+0xde>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	89 fa                	mov    edx,edi
c000332e:	89 f0                	mov    eax,esi
c0003330:	e8 2d f9 ff ff       	call   c0002c62 <find_bitmap>
c0003335:	89 c3                	mov    ebx,eax
c0003337:	8d 40 ff             	lea    eax,[eax-0x1]
c000333a:	83 f8 fd             	cmp    eax,0xfffffffd
c000333d:	0f 87 6f 01 00 00    	ja     c00034b2 <create_chain+0x1f5>
c0003343:	83 ec 0c             	sub    esp,0xc
c0003346:	b9 01 00 00 00       	mov    ecx,0x1
c000334b:	6a 01                	push   0x1
c000334d:	89 da                	mov    edx,ebx
c000334f:	89 f0                	mov    eax,esi
c0003351:	e8 bf f9 ff ff       	call   c0002d15 <change_bitmap>
c0003356:	83 c4 10             	add    esp,0x10
c0003359:	83 f8 02             	cmp    eax,0x2
c000335c:	74 90                	je     c00032ee <create_chain+0x31>
c000335e:	83 f8 01             	cmp    eax,0x1
c0003361:	0f 84 fc 00 00 00    	je     c0003463 <create_chain+0x1a6>
c0003367:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000336c:	75 09                	jne    c0003377 <create_chain+0xba>
c000336e:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003372:	e9 0c 01 00 00       	jmp    c0003483 <create_chain+0x1c6>
c0003377:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000337b:	0f 85 e7 00 00 00    	jne    c0003468 <create_chain+0x1ab>
c0003381:	8d 57 01             	lea    edx,[edi+0x1]
c0003384:	39 da                	cmp    edx,ebx
c0003386:	0f 84 f7 00 00 00    	je     c0003483 <create_chain+0x1c6>
c000338c:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000338f:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003393:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003396:	e9 cd 00 00 00       	jmp    c0003468 <create_chain+0x1ab>
c000339b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000339f:	75 41                	jne    c00033e2 <create_chain+0x125>
c00033a1:	8d 5f 01             	lea    ebx,[edi+0x1]
c00033a4:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a7:	77 05                	ja     c00033ae <create_chain+0xf1>
c00033a9:	bb 02 00 00 00       	mov    ebx,0x2
c00033ae:	89 da                	mov    edx,ebx
c00033b0:	89 e8                	mov    eax,ebp
c00033b2:	e8 18 fc ff ff       	call   c0002fcf <get_fat>
c00033b7:	83 f8 01             	cmp    eax,0x1
c00033ba:	0f 84 2e ff ff ff    	je     c00032ee <create_chain+0x31>
c00033c0:	83 f8 ff             	cmp    eax,0xffffffff
c00033c3:	0f 84 9a 00 00 00    	je     c0003463 <create_chain+0x1a6>
c00033c9:	85 c0                	test   eax,eax
c00033cb:	74 11                	je     c00033de <create_chain+0x121>
c00033cd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d0:	83 f8 01             	cmp    eax,0x1
c00033d3:	76 0d                	jbe    c00033e2 <create_chain+0x125>
c00033d5:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d8:	76 08                	jbe    c00033e2 <create_chain+0x125>
c00033da:	89 c7                	mov    edi,eax
c00033dc:	eb 04                	jmp    c00033e2 <create_chain+0x125>
c00033de:	85 db                	test   ebx,ebx
c00033e0:	75 38                	jne    c000341a <create_chain+0x15d>
c00033e2:	89 fb                	mov    ebx,edi
c00033e4:	43                   	inc    ebx
c00033e5:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e8:	77 0e                	ja     c00033f8 <create_chain+0x13b>
c00033ea:	83 ff 01             	cmp    edi,0x1
c00033ed:	0f 86 28 ff ff ff    	jbe    c000331b <create_chain+0x5e>
c00033f3:	bb 02 00 00 00       	mov    ebx,0x2
c00033f8:	89 da                	mov    edx,ebx
c00033fa:	89 e8                	mov    eax,ebp
c00033fc:	e8 ce fb ff ff       	call   c0002fcf <get_fat>
c0003401:	85 c0                	test   eax,eax
c0003403:	74 15                	je     c000341a <create_chain+0x15d>
c0003405:	83 f8 01             	cmp    eax,0x1
c0003408:	0f 84 e0 fe ff ff    	je     c00032ee <create_chain+0x31>
c000340e:	40                   	inc    eax
c000340f:	74 52                	je     c0003463 <create_chain+0x1a6>
c0003411:	39 fb                	cmp    ebx,edi
c0003413:	75 cf                	jne    c00033e4 <create_chain+0x127>
c0003415:	e9 01 ff ff ff       	jmp    c000331b <create_chain+0x5e>
c000341a:	83 c9 ff             	or     ecx,0xffffffff
c000341d:	89 da                	mov    edx,ebx
c000341f:	89 f0                	mov    eax,esi
c0003421:	e8 a4 f9 ff ff       	call   c0002dca <put_fat>
c0003426:	85 c0                	test   eax,eax
c0003428:	75 32                	jne    c000345c <create_chain+0x19f>
c000342a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000342f:	74 11                	je     c0003442 <create_chain+0x185>
c0003431:	89 d9                	mov    ecx,ebx
c0003433:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003437:	89 f0                	mov    eax,esi
c0003439:	e8 8c f9 ff ff       	call   c0002dca <put_fat>
c000343e:	85 c0                	test   eax,eax
c0003440:	75 1a                	jne    c000345c <create_chain+0x19f>
c0003442:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003445:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003448:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000344b:	8d 51 fe             	lea    edx,[ecx-0x2]
c000344e:	39 d0                	cmp    eax,edx
c0003450:	77 04                	ja     c0003456 <create_chain+0x199>
c0003452:	48                   	dec    eax
c0003453:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003456:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000345a:	eb 56                	jmp    c00034b2 <create_chain+0x1f5>
c000345c:	48                   	dec    eax
c000345d:	0f 85 8b fe ff ff    	jne    c00032ee <create_chain+0x31>
c0003463:	83 cb ff             	or     ebx,0xffffffff
c0003466:	eb 4a                	jmp    c00034b2 <create_chain+0x1f5>
c0003468:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000346c:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000346f:	41                   	inc    ecx
c0003470:	39 d9                	cmp    ecx,ebx
c0003472:	75 19                	jne    c000348d <create_chain+0x1d0>
c0003474:	b9 02 00 00 00       	mov    ecx,0x2
c0003479:	85 d2                	test   edx,edx
c000347b:	74 03                	je     c0003480 <create_chain+0x1c3>
c000347d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003480:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003483:	85 c0                	test   eax,eax
c0003485:	0f 85 63 fe ff ff    	jne    c00032ee <create_chain+0x31>
c000348b:	eb b5                	jmp    c0003442 <create_chain+0x185>
c000348d:	85 d2                	test   edx,edx
c000348f:	75 07                	jne    c0003498 <create_chain+0x1db>
c0003491:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000349e:	89 e8                	mov    eax,ebp
c00034a0:	e8 bb fa ff ff       	call   c0002f60 <fill_last_frag>
c00034a5:	85 c0                	test   eax,eax
c00034a7:	75 b3                	jne    c000345c <create_chain+0x19f>
c00034a9:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034b0:	eb 90                	jmp    c0003442 <create_chain+0x185>
c00034b2:	83 c4 1c             	add    esp,0x1c
c00034b5:	89 d8                	mov    eax,ebx
c00034b7:	5b                   	pop    ebx
c00034b8:	5e                   	pop    esi
c00034b9:	5f                   	pop    edi
c00034ba:	5d                   	pop    ebp
c00034bb:	c3                   	ret    

c00034bc <remove_chain>:
c00034bc:	55                   	push   ebp
c00034bd:	57                   	push   edi
c00034be:	56                   	push   esi
c00034bf:	53                   	push   ebx
c00034c0:	83 ec 1c             	sub    esp,0x1c
c00034c3:	83 fa 01             	cmp    edx,0x1
c00034c6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034ca:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034cc:	77 0a                	ja     c00034d8 <remove_chain+0x1c>
c00034ce:	b8 02 00 00 00       	mov    eax,0x2
c00034d3:	e9 24 01 00 00       	jmp    c00035fc <remove_chain+0x140>
c00034d8:	89 d6                	mov    esi,edx
c00034da:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034dd:	76 ef                	jbe    c00034ce <remove_chain+0x12>
c00034df:	89 c7                	mov    edi,eax
c00034e1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034e6:	75 06                	jne    c00034ee <remove_chain+0x32>
c00034e8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034ec:	eb 54                	jmp    c0003542 <remove_chain+0x86>
c00034ee:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034f1:	75 06                	jne    c00034f9 <remove_chain+0x3d>
c00034f3:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034f7:	74 ef                	je     c00034e8 <remove_chain+0x2c>
c00034f9:	83 c9 ff             	or     ecx,0xffffffff
c00034fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003500:	89 d8                	mov    eax,ebx
c0003502:	e8 c3 f8 ff ff       	call   c0002dca <put_fat>
c0003507:	85 c0                	test   eax,eax
c0003509:	74 dd                	je     c00034e8 <remove_chain+0x2c>
c000350b:	e9 ec 00 00 00       	jmp    c00035fc <remove_chain+0x140>
c0003510:	83 f8 01             	cmp    eax,0x1
c0003513:	74 b9                	je     c00034ce <remove_chain+0x12>
c0003515:	83 f8 ff             	cmp    eax,0xffffffff
c0003518:	74 6d                	je     c0003587 <remove_chain+0xcb>
c000351a:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000351d:	75 6f                	jne    c000358e <remove_chain+0xd2>
c000351f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003522:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003525:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003528:	39 d0                	cmp    eax,edx
c000352a:	73 08                	jae    c0003534 <remove_chain+0x78>
c000352c:	40                   	inc    eax
c000352d:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003531:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003534:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003537:	39 e9                	cmp    ecx,ebp
c0003539:	75 64                	jne    c000359f <remove_chain+0xe3>
c000353b:	89 ee                	mov    esi,ebp
c000353d:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003540:	76 0f                	jbe    c0003551 <remove_chain+0x95>
c0003542:	89 f2                	mov    edx,esi
c0003544:	89 f8                	mov    eax,edi
c0003546:	e8 84 fa ff ff       	call   c0002fcf <get_fat>
c000354b:	89 c5                	mov    ebp,eax
c000354d:	85 c0                	test   eax,eax
c000354f:	75 bf                	jne    c0003510 <remove_chain+0x54>
c0003551:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003554:	0f 85 a0 00 00 00    	jne    c00035fa <remove_chain+0x13e>
c000355a:	eb 6c                	jmp    c00035c8 <remove_chain+0x10c>
c000355c:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000355f:	84 c0                	test   al,al
c0003561:	75 7d                	jne    c00035e0 <remove_chain+0x124>
c0003563:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003566:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000356a:	0f 84 86 00 00 00    	je     c00035f6 <remove_chain+0x13a>
c0003570:	89 da                	mov    edx,ebx
c0003572:	89 f8                	mov    eax,edi
c0003574:	e8 56 fa ff ff       	call   c0002fcf <get_fat>
c0003579:	83 f8 01             	cmp    eax,0x1
c000357c:	0f 86 4c ff ff ff    	jbe    c00034ce <remove_chain+0x12>
c0003582:	83 f8 ff             	cmp    eax,0xffffffff
c0003585:	75 4e                	jne    c00035d5 <remove_chain+0x119>
c0003587:	b8 01 00 00 00       	mov    eax,0x1
c000358c:	eb 6e                	jmp    c00035fc <remove_chain+0x140>
c000358e:	31 c9                	xor    ecx,ecx
c0003590:	89 f2                	mov    edx,esi
c0003592:	89 d8                	mov    eax,ebx
c0003594:	e8 31 f8 ff ff       	call   c0002dca <put_fat>
c0003599:	85 c0                	test   eax,eax
c000359b:	74 82                	je     c000351f <remove_chain+0x63>
c000359d:	eb 5d                	jmp    c00035fc <remove_chain+0x140>
c000359f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00035a2:	75 1b                	jne    c00035bf <remove_chain+0x103>
c00035a4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a8:	89 d8                	mov    eax,ebx
c00035aa:	83 ec 0c             	sub    esp,0xc
c00035ad:	6a 00                	push   0x0
c00035af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035b3:	e8 5d f7 ff ff       	call   c0002d15 <change_bitmap>
c00035b8:	83 c4 10             	add    esp,0x10
c00035bb:	85 c0                	test   eax,eax
c00035bd:	75 3d                	jne    c00035fc <remove_chain+0x140>
c00035bf:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035c3:	e9 73 ff ff ff       	jmp    c000353b <remove_chain+0x7f>
c00035c8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035cd:	75 8d                	jne    c000355c <remove_chain+0xa0>
c00035cf:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035d3:	eb 25                	jmp    c00035fa <remove_chain+0x13e>
c00035d5:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d8:	89 c3                	mov    ebx,eax
c00035da:	39 c2                	cmp    edx,eax
c00035dc:	74 88                	je     c0003566 <remove_chain+0xaa>
c00035de:	eb 1a                	jmp    c00035fa <remove_chain+0x13e>
c00035e0:	3c 03                	cmp    al,0x3
c00035e2:	75 16                	jne    c00035fa <remove_chain+0x13e>
c00035e4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035e7:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035eb:	77 0d                	ja     c00035fa <remove_chain+0x13e>
c00035ed:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035f0:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035f4:	72 04                	jb     c00035fa <remove_chain+0x13e>
c00035f6:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035fa:	31 c0                	xor    eax,eax
c00035fc:	83 c4 1c             	add    esp,0x1c
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_clear>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	56                   	push   esi
c0003607:	89 c6                	mov    esi,eax
c0003609:	53                   	push   ebx
c000360a:	83 ec 1c             	sub    esp,0x1c
c000360d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003611:	e8 9d ed ff ff       	call   c00023b3 <sync_window>
c0003616:	85 c0                	test   eax,eax
c0003618:	0f 85 de 00 00 00    	jne    c00036fc <dir_clear+0xf8>
c000361e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003622:	89 f0                	mov    eax,esi
c0003624:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003627:	e8 d6 e8 ff ff       	call   c0001f02 <clst2sect>
c000362c:	b9 00 02 00 00       	mov    ecx,0x200
c0003631:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003635:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003639:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000363c:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c000363f:	89 e8                	mov    eax,ebp
c0003641:	31 d2                	xor    edx,edx
c0003643:	e8 b5 e6 ff ff       	call   c0001cfd <mem_set>
c0003648:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000364c:	c1 e3 09             	shl    ebx,0x9
c000364f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003655:	76 1f                	jbe    c0003676 <dir_clear+0x72>
c0003657:	bb 00 80 00 00       	mov    ebx,0x8000
c000365c:	eb 18                	jmp    c0003676 <dir_clear+0x72>
c000365e:	83 ec 0c             	sub    esp,0xc
c0003661:	53                   	push   ebx
c0003662:	e8 35 4e 00 00       	call   c000849c <ff_memalloc>
c0003667:	83 c4 10             	add    esp,0x10
c000366a:	89 c7                	mov    edi,eax
c000366c:	85 c0                	test   eax,eax
c000366e:	0f 85 8f 00 00 00    	jne    c0003703 <dir_clear+0xff>
c0003674:	d1 eb                	shr    ebx,1
c0003676:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000367c:	77 e0                	ja     c000365e <dir_clear+0x5a>
c000367e:	31 db                	xor    ebx,ebx
c0003680:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003684:	39 d8                	cmp    eax,ebx
c0003686:	76 66                	jbe    c00036ee <dir_clear+0xea>
c0003688:	83 ec 0c             	sub    esp,0xc
c000368b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000368f:	6a 01                	push   0x1
c0003691:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003695:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003699:	55                   	push   ebp
c000369a:	50                   	push   eax
c000369b:	e8 94 e5 ff ff       	call   c0001c34 <disk_write>
c00036a0:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00036a5:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036aa:	83 c4 20             	add    esp,0x20
c00036ad:	85 c0                	test   eax,eax
c00036af:	75 3d                	jne    c00036ee <dir_clear+0xea>
c00036b1:	43                   	inc    ebx
c00036b2:	eb cc                	jmp    c0003680 <dir_clear+0x7c>
c00036b4:	83 ec 0c             	sub    esp,0xc
c00036b7:	31 d2                	xor    edx,edx
c00036b9:	55                   	push   ebp
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036c0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036c4:	52                   	push   edx
c00036c5:	50                   	push   eax
c00036c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036ca:	57                   	push   edi
c00036cb:	50                   	push   eax
c00036cc:	e8 63 e5 ff ff       	call   c0001c34 <disk_write>
c00036d1:	83 c4 20             	add    esp,0x20
c00036d4:	85 c0                	test   eax,eax
c00036d6:	75 0a                	jne    c00036e2 <dir_clear+0xde>
c00036d8:	01 eb                	add    ebx,ebp
c00036da:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036de:	39 d8                	cmp    eax,ebx
c00036e0:	77 d2                	ja     c00036b4 <dir_clear+0xb0>
c00036e2:	83 ec 0c             	sub    esp,0xc
c00036e5:	57                   	push   edi
c00036e6:	e8 c7 4d 00 00       	call   c00084b2 <ff_memfree>
c00036eb:	83 c4 10             	add    esp,0x10
c00036ee:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036f2:	39 d8                	cmp    eax,ebx
c00036f4:	0f 95 c0             	setne  al
c00036f7:	0f b6 c0             	movzx  eax,al
c00036fa:	eb 19                	jmp    c0003715 <dir_clear+0x111>
c00036fc:	b8 01 00 00 00       	mov    eax,0x1
c0003701:	eb 12                	jmp    c0003715 <dir_clear+0x111>
c0003703:	89 d9                	mov    ecx,ebx
c0003705:	31 d2                	xor    edx,edx
c0003707:	c1 eb 09             	shr    ebx,0x9
c000370a:	e8 ee e5 ff ff       	call   c0001cfd <mem_set>
c000370f:	89 dd                	mov    ebp,ebx
c0003711:	31 db                	xor    ebx,ebx
c0003713:	eb c5                	jmp    c00036da <dir_clear+0xd6>
c0003715:	83 c4 1c             	add    esp,0x1c
c0003718:	5b                   	pop    ebx
c0003719:	5e                   	pop    esi
c000371a:	5f                   	pop    edi
c000371b:	5d                   	pop    ebp
c000371c:	c3                   	ret    

c000371d <dir_next>:
c000371d:	55                   	push   ebp
c000371e:	57                   	push   edi
c000371f:	56                   	push   esi
c0003720:	53                   	push   ebx
c0003721:	89 c3                	mov    ebx,eax
c0003723:	83 ec 1c             	sub    esp,0x1c
c0003726:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003728:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000372f:	8d 78 20             	lea    edi,[eax+0x20]
c0003732:	31 c0                	xor    eax,eax
c0003734:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003738:	0f 94 c0             	sete   al
c000373b:	48                   	dec    eax
c000373c:	25 00 00 20 f0       	and    eax,0xf0200000
c0003741:	05 00 00 00 10       	add    eax,0x10000000
c0003746:	39 f8                	cmp    eax,edi
c0003748:	77 0e                	ja     c0003758 <dir_next+0x3b>
c000374a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003751:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003758:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000375b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000375e:	b8 04 00 00 00       	mov    eax,0x4
c0003763:	89 ce                	mov    esi,ecx
c0003765:	09 d6                	or     esi,edx
c0003767:	0f 84 da 00 00 00    	je     c0003847 <dir_next+0x12a>
c000376d:	89 f8                	mov    eax,edi
c000376f:	25 ff 01 00 00       	and    eax,0x1ff
c0003774:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003778:	0f 85 b9 00 00 00    	jne    c0003837 <dir_next+0x11a>
c000377e:	83 c2 01             	add    edx,0x1
c0003781:	83 d1 00             	adc    ecx,0x0
c0003784:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003787:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000378a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000378d:	85 d2                	test   edx,edx
c000378f:	75 29                	jne    c00037ba <dir_next+0x9d>
c0003791:	89 fa                	mov    edx,edi
c0003793:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003797:	c1 ea 05             	shr    edx,0x5
c000379a:	39 c2                	cmp    edx,eax
c000379c:	0f 82 95 00 00 00    	jb     c0003837 <dir_next+0x11a>
c00037a2:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a9:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037b0:	b8 04 00 00 00       	mov    eax,0x4
c00037b5:	e9 8d 00 00 00       	jmp    c0003847 <dir_next+0x12a>
c00037ba:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037be:	89 f9                	mov    ecx,edi
c00037c0:	48                   	dec    eax
c00037c1:	c1 e9 09             	shr    ecx,0x9
c00037c4:	85 c8                	test   eax,ecx
c00037c6:	75 6f                	jne    c0003837 <dir_next+0x11a>
c00037c8:	89 d8                	mov    eax,ebx
c00037ca:	e8 00 f8 ff ff       	call   c0002fcf <get_fat>
c00037cf:	89 c6                	mov    esi,eax
c00037d1:	83 f8 01             	cmp    eax,0x1
c00037d4:	77 07                	ja     c00037dd <dir_next+0xc0>
c00037d6:	b8 02 00 00 00       	mov    eax,0x2
c00037db:	eb 6a                	jmp    c0003847 <dir_next+0x12a>
c00037dd:	83 f8 ff             	cmp    eax,0xffffffff
c00037e0:	75 07                	jne    c00037e9 <dir_next+0xcc>
c00037e2:	b8 01 00 00 00       	mov    eax,0x1
c00037e7:	eb 5e                	jmp    c0003847 <dir_next+0x12a>
c00037e9:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037ec:	77 37                	ja     c0003825 <dir_next+0x108>
c00037ee:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037f3:	74 ad                	je     c00037a2 <dir_next+0x85>
c00037f5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f8:	89 d8                	mov    eax,ebx
c00037fa:	e8 be fa ff ff       	call   c00032bd <create_chain>
c00037ff:	89 c6                	mov    esi,eax
c0003801:	b8 07 00 00 00       	mov    eax,0x7
c0003806:	85 f6                	test   esi,esi
c0003808:	74 3d                	je     c0003847 <dir_next+0x12a>
c000380a:	83 fe 01             	cmp    esi,0x1
c000380d:	74 c7                	je     c00037d6 <dir_next+0xb9>
c000380f:	83 fe ff             	cmp    esi,0xffffffff
c0003812:	74 ce                	je     c00037e2 <dir_next+0xc5>
c0003814:	89 f2                	mov    edx,esi
c0003816:	89 e8                	mov    eax,ebp
c0003818:	e8 e7 fd ff ff       	call   c0003604 <dir_clear>
c000381d:	85 c0                	test   eax,eax
c000381f:	75 c1                	jne    c00037e2 <dir_next+0xc5>
c0003821:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003825:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003828:	89 f2                	mov    edx,esi
c000382a:	89 e8                	mov    eax,ebp
c000382c:	e8 d1 e6 ff ff       	call   c0001f02 <clst2sect>
c0003831:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003834:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003837:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000383b:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000383e:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003842:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003845:	31 c0                	xor    eax,eax
c0003847:	83 c4 1c             	add    esp,0x1c
c000384a:	5b                   	pop    ebx
c000384b:	5e                   	pop    esi
c000384c:	5f                   	pop    edi
c000384d:	5d                   	pop    ebp
c000384e:	c3                   	ret    

c000384f <load_xdir>:
c000384f:	55                   	push   ebp
c0003850:	57                   	push   edi
c0003851:	56                   	push   esi
c0003852:	89 c6                	mov    esi,eax
c0003854:	53                   	push   ebx
c0003855:	83 ec 1c             	sub    esp,0x1c
c0003858:	8b 00                	mov    eax,DWORD PTR [eax]
c000385a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000385d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003860:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003863:	e8 df eb ff ff       	call   c0002447 <move_window>
c0003868:	89 c3                	mov    ebx,eax
c000386a:	85 c0                	test   eax,eax
c000386c:	0f 85 0c 01 00 00    	jne    c000397e <load_xdir+0x12f>
c0003872:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003875:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003878:	0f 85 fb 00 00 00    	jne    c0003979 <load_xdir+0x12a>
c000387e:	89 f8                	mov    eax,edi
c0003880:	b9 20 00 00 00       	mov    ecx,0x20
c0003885:	e8 5e e4 ff ff       	call   c0001ce8 <mem_cpy>
c000388a:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000388e:	40                   	inc    eax
c000388f:	c1 e0 05             	shl    eax,0x5
c0003892:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003896:	83 e8 60             	sub    eax,0x60
c0003899:	3d 00 02 00 00       	cmp    eax,0x200
c000389e:	0f 87 d5 00 00 00    	ja     c0003979 <load_xdir+0x12a>
c00038a4:	31 d2                	xor    edx,edx
c00038a6:	89 f0                	mov    eax,esi
c00038a8:	e8 70 fe ff ff       	call   c000371d <dir_next>
c00038ad:	89 c3                	mov    ebx,eax
c00038af:	83 f8 04             	cmp    eax,0x4
c00038b2:	0f 84 c1 00 00 00    	je     c0003979 <load_xdir+0x12a>
c00038b8:	85 c0                	test   eax,eax
c00038ba:	0f 85 be 00 00 00    	jne    c000397e <load_xdir+0x12f>
c00038c0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038c3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038c6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c8:	e8 7a eb ff ff       	call   c0002447 <move_window>
c00038cd:	89 c3                	mov    ebx,eax
c00038cf:	85 c0                	test   eax,eax
c00038d1:	0f 85 a7 00 00 00    	jne    c000397e <load_xdir+0x12f>
c00038d7:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038da:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038dd:	0f 85 96 00 00 00    	jne    c0003979 <load_xdir+0x12a>
c00038e3:	8d 47 20             	lea    eax,[edi+0x20]
c00038e6:	b9 20 00 00 00       	mov    ecx,0x20
c00038eb:	e8 f8 e3 ff ff       	call   c0001ce8 <mem_cpy>
c00038f0:	31 d2                	xor    edx,edx
c00038f2:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038f6:	b9 0f 00 00 00       	mov    ecx,0xf
c00038fb:	83 c0 2c             	add    eax,0x2c
c00038fe:	f7 f1                	div    ecx
c0003900:	c1 e0 05             	shl    eax,0x5
c0003903:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003907:	77 70                	ja     c0003979 <load_xdir+0x12a>
c0003909:	bd 40 00 00 00       	mov    ebp,0x40
c000390e:	31 d2                	xor    edx,edx
c0003910:	89 f0                	mov    eax,esi
c0003912:	e8 06 fe ff ff       	call   c000371d <dir_next>
c0003917:	89 c3                	mov    ebx,eax
c0003919:	83 f8 04             	cmp    eax,0x4
c000391c:	74 5b                	je     c0003979 <load_xdir+0x12a>
c000391e:	85 c0                	test   eax,eax
c0003920:	75 5c                	jne    c000397e <load_xdir+0x12f>
c0003922:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003925:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003928:	8b 06                	mov    eax,DWORD PTR [esi]
c000392a:	e8 18 eb ff ff       	call   c0002447 <move_window>
c000392f:	89 c3                	mov    ebx,eax
c0003931:	85 c0                	test   eax,eax
c0003933:	75 49                	jne    c000397e <load_xdir+0x12f>
c0003935:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003938:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000393b:	75 3c                	jne    c0003979 <load_xdir+0x12a>
c000393d:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003943:	77 0d                	ja     c0003952 <load_xdir+0x103>
c0003945:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003948:	b9 20 00 00 00       	mov    ecx,0x20
c000394d:	e8 96 e3 ff ff       	call   c0001ce8 <mem_cpy>
c0003952:	83 c5 20             	add    ebp,0x20
c0003955:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003959:	77 b3                	ja     c000390e <load_xdir+0xbf>
c000395b:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003961:	77 1b                	ja     c000397e <load_xdir+0x12f>
c0003963:	89 f8                	mov    eax,edi
c0003965:	e8 cd e7 ff ff       	call   c0002137 <xdir_sum>
c000396a:	89 c1                	mov    ecx,eax
c000396c:	8d 47 02             	lea    eax,[edi+0x2]
c000396f:	e8 f5 e2 ff ff       	call   c0001c69 <ld_word>
c0003974:	66 39 c1             	cmp    cx,ax
c0003977:	74 05                	je     c000397e <load_xdir+0x12f>
c0003979:	bb 02 00 00 00       	mov    ebx,0x2
c000397e:	83 c4 1c             	add    esp,0x1c
c0003981:	89 d8                	mov    eax,ebx
c0003983:	5b                   	pop    ebx
c0003984:	5e                   	pop    esi
c0003985:	5f                   	pop    edi
c0003986:	5d                   	pop    ebp
c0003987:	c3                   	ret    

c0003988 <load_obj_xdir>:
c0003988:	53                   	push   ebx
c0003989:	89 c3                	mov    ebx,eax
c000398b:	83 ec 08             	sub    esp,0x8
c000398e:	8b 02                	mov    eax,DWORD PTR [edx]
c0003990:	89 03                	mov    DWORD PTR [ebx],eax
c0003992:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003995:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003998:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000399b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000399e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00039a1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a8:	30 c0                	xor    al,al
c00039aa:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039b1:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039b4:	89 d8                	mov    eax,ebx
c00039b6:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b9:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039bc:	e8 04 f8 ff ff       	call   c00031c5 <dir_sdi>
c00039c1:	85 c0                	test   eax,eax
c00039c3:	75 0b                	jne    c00039d0 <load_obj_xdir+0x48>
c00039c5:	89 d8                	mov    eax,ebx
c00039c7:	83 c4 08             	add    esp,0x8
c00039ca:	5b                   	pop    ebx
c00039cb:	e9 7f fe ff ff       	jmp    c000384f <load_xdir>
c00039d0:	83 c4 08             	add    esp,0x8
c00039d3:	5b                   	pop    ebx
c00039d4:	c3                   	ret    

c00039d5 <dir_read>:
c00039d5:	55                   	push   ebp
c00039d6:	bd 04 00 00 00       	mov    ebp,0x4
c00039db:	57                   	push   edi
c00039dc:	56                   	push   esi
c00039dd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039e2:	53                   	push   ebx
c00039e3:	89 c3                	mov    ebx,eax
c00039e5:	83 ec 1c             	sub    esp,0x1c
c00039e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039ec:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ee:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039f3:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039f6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f9:	89 c8                	mov    eax,ecx
c00039fb:	09 d0                	or     eax,edx
c00039fd:	0f 84 25 01 00 00    	je     c0003b28 <dir_read+0x153>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	e8 3d ea ff ff       	call   c0002447 <move_window>
c0003a0a:	89 c5                	mov    ebp,eax
c0003a0c:	85 c0                	test   eax,eax
c0003a0e:	0f 85 23 01 00 00    	jne    c0003b37 <dir_read+0x162>
c0003a14:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a17:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a19:	84 c9                	test   cl,cl
c0003a1b:	0f 84 11 01 00 00    	je     c0003b32 <dir_read+0x15d>
c0003a21:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a24:	75 48                	jne    c0003a6e <dir_read+0x99>
c0003a26:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a2b:	74 10                	je     c0003a3d <dir_read+0x68>
c0003a2d:	80 f9 83             	cmp    cl,0x83
c0003a30:	0f 85 dd 00 00 00    	jne    c0003b13 <dir_read+0x13e>
c0003a36:	31 ed                	xor    ebp,ebp
c0003a38:	e9 08 01 00 00       	jmp    c0003b45 <dir_read+0x170>
c0003a3d:	80 f9 85             	cmp    cl,0x85
c0003a40:	0f 85 cd 00 00 00    	jne    c0003b13 <dir_read+0x13e>
c0003a46:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a49:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a4c:	89 d8                	mov    eax,ebx
c0003a4e:	e8 fc fd ff ff       	call   c000384f <load_xdir>
c0003a53:	89 c5                	mov    ebp,eax
c0003a55:	85 c0                	test   eax,eax
c0003a57:	0f 85 da 00 00 00    	jne    c0003b37 <dir_read+0x162>
c0003a5d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a60:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a63:	83 e0 3f             	and    eax,0x3f
c0003a66:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a69:	e9 d7 00 00 00       	jmp    c0003b45 <dir_read+0x170>
c0003a6e:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a71:	83 e0 3f             	and    eax,0x3f
c0003a74:	80 f9 2e             	cmp    cl,0x2e
c0003a77:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a7b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a7e:	0f 84 8a 00 00 00    	je     c0003b0e <dir_read+0x139>
c0003a84:	80 f9 e5             	cmp    cl,0xe5
c0003a87:	0f 84 81 00 00 00    	je     c0003b0e <dir_read+0x139>
c0003a8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a91:	83 e0 1f             	and    eax,0x1f
c0003a94:	83 f8 08             	cmp    eax,0x8
c0003a97:	0f 94 c0             	sete   al
c0003a9a:	0f b6 c0             	movzx  eax,al
c0003a9d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003aa1:	75 6b                	jne    c0003b0e <dir_read+0x139>
c0003aa3:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa8:	75 44                	jne    c0003aee <dir_read+0x119>
c0003aaa:	f6 c1 40             	test   cl,0x40
c0003aad:	74 12                	je     c0003ac1 <dir_read+0xec>
c0003aaf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003ab2:	83 e1 bf             	and    ecx,0xffffffbf
c0003ab5:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003abc:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003abf:	eb 06                	jmp    c0003ac7 <dir_read+0xf2>
c0003ac1:	89 f0                	mov    eax,esi
c0003ac3:	38 c8                	cmp    al,cl
c0003ac5:	75 47                	jne    c0003b0e <dir_read+0x139>
c0003ac7:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003acb:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad0:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003ad3:	75 3e                	jne    c0003b13 <dir_read+0x13e>
c0003ad5:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad9:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003adc:	e8 8a e4 ff ff       	call   c0001f6b <pick_lfn>
c0003ae1:	85 c0                	test   eax,eax
c0003ae3:	74 2e                	je     c0003b13 <dir_read+0x13e>
c0003ae5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae9:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aec:	eb 25                	jmp    c0003b13 <dir_read+0x13e>
c0003aee:	89 f0                	mov    eax,esi
c0003af0:	84 c0                	test   al,al
c0003af2:	75 11                	jne    c0003b05 <dir_read+0x130>
c0003af4:	89 d0                	mov    eax,edx
c0003af6:	e8 2a e6 ff ff       	call   c0002125 <sum_sfn>
c0003afb:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003aff:	0f 84 31 ff ff ff    	je     c0003a36 <dir_read+0x61>
c0003b05:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b0c:	eb 37                	jmp    c0003b45 <dir_read+0x170>
c0003b0e:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b13:	31 d2                	xor    edx,edx
c0003b15:	89 d8                	mov    eax,ebx
c0003b17:	e8 01 fc ff ff       	call   c000371d <dir_next>
c0003b1c:	89 c5                	mov    ebp,eax
c0003b1e:	85 c0                	test   eax,eax
c0003b20:	0f 84 cd fe ff ff    	je     c00039f3 <dir_read+0x1e>
c0003b26:	eb 0f                	jmp    c0003b37 <dir_read+0x162>
c0003b28:	85 ed                	test   ebp,ebp
c0003b2a:	0f 84 06 ff ff ff    	je     c0003a36 <dir_read+0x61>
c0003b30:	eb 05                	jmp    c0003b37 <dir_read+0x162>
c0003b32:	bd 04 00 00 00       	mov    ebp,0x4
c0003b37:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b3e:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b45:	83 c4 1c             	add    esp,0x1c
c0003b48:	89 e8                	mov    eax,ebp
c0003b4a:	5b                   	pop    ebx
c0003b4b:	5e                   	pop    esi
c0003b4c:	5f                   	pop    edi
c0003b4d:	5d                   	pop    ebp
c0003b4e:	c3                   	ret    

c0003b4f <dir_alloc>:
c0003b4f:	55                   	push   ebp
c0003b50:	89 d5                	mov    ebp,edx
c0003b52:	57                   	push   edi
c0003b53:	31 d2                	xor    edx,edx
c0003b55:	56                   	push   esi
c0003b56:	53                   	push   ebx
c0003b57:	89 c3                	mov    ebx,eax
c0003b59:	83 ec 0c             	sub    esp,0xc
c0003b5c:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b5e:	e8 62 f6 ff ff       	call   c00031c5 <dir_sdi>
c0003b63:	85 c0                	test   eax,eax
c0003b65:	75 4e                	jne    c0003bb5 <dir_alloc+0x66>
c0003b67:	31 f6                	xor    esi,esi
c0003b69:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b6c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b6f:	89 f8                	mov    eax,edi
c0003b71:	e8 d1 e8 ff ff       	call   c0002447 <move_window>
c0003b76:	85 c0                	test   eax,eax
c0003b78:	75 3b                	jne    c0003bb5 <dir_alloc+0x66>
c0003b7a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b7d:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b80:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b82:	75 07                	jne    c0003b8b <dir_alloc+0x3c>
c0003b84:	f7 d2                	not    edx
c0003b86:	c0 ea 07             	shr    dl,0x7
c0003b89:	eb 0d                	jmp    c0003b98 <dir_alloc+0x49>
c0003b8b:	84 d2                	test   dl,dl
c0003b8d:	0f 94 c1             	sete   cl
c0003b90:	80 fa e5             	cmp    dl,0xe5
c0003b93:	0f 94 c2             	sete   dl
c0003b96:	09 ca                	or     edx,ecx
c0003b98:	84 d2                	test   dl,dl
c0003b9a:	74 07                	je     c0003ba3 <dir_alloc+0x54>
c0003b9c:	46                   	inc    esi
c0003b9d:	39 ee                	cmp    esi,ebp
c0003b9f:	75 04                	jne    c0003ba5 <dir_alloc+0x56>
c0003ba1:	eb 1c                	jmp    c0003bbf <dir_alloc+0x70>
c0003ba3:	31 f6                	xor    esi,esi
c0003ba5:	ba 01 00 00 00       	mov    edx,0x1
c0003baa:	89 d8                	mov    eax,ebx
c0003bac:	e8 6c fb ff ff       	call   c000371d <dir_next>
c0003bb1:	85 c0                	test   eax,eax
c0003bb3:	74 b4                	je     c0003b69 <dir_alloc+0x1a>
c0003bb5:	83 f8 04             	cmp    eax,0x4
c0003bb8:	75 05                	jne    c0003bbf <dir_alloc+0x70>
c0003bba:	b8 07 00 00 00       	mov    eax,0x7
c0003bbf:	83 c4 0c             	add    esp,0xc
c0003bc2:	5b                   	pop    ebx
c0003bc3:	5e                   	pop    esi
c0003bc4:	5f                   	pop    edi
c0003bc5:	5d                   	pop    ebp
c0003bc6:	c3                   	ret    

c0003bc7 <store_xdir>:
c0003bc7:	55                   	push   ebp
c0003bc8:	57                   	push   edi
c0003bc9:	89 c7                	mov    edi,eax
c0003bcb:	56                   	push   esi
c0003bcc:	53                   	push   ebx
c0003bcd:	83 ec 0c             	sub    esp,0xc
c0003bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bd2:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bd5:	89 e8                	mov    eax,ebp
c0003bd7:	e8 5b e5 ff ff       	call   c0002137 <xdir_sum>
c0003bdc:	0f b7 d0             	movzx  edx,ax
c0003bdf:	8d 45 02             	lea    eax,[ebp+0x2]
c0003be2:	e8 f4 e0 ff ff       	call   c0001cdb <st_word>
c0003be7:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003beb:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bee:	89 f8                	mov    eax,edi
c0003bf0:	e8 d0 f5 ff ff       	call   c00031c5 <dir_sdi>
c0003bf5:	89 c6                	mov    esi,eax
c0003bf7:	85 f6                	test   esi,esi
c0003bf9:	75 3d                	jne    c0003c38 <store_xdir+0x71>
c0003bfb:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bfe:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003c01:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c03:	e8 3f e8 ff ff       	call   c0002447 <move_window>
c0003c08:	89 c6                	mov    esi,eax
c0003c0a:	85 c0                	test   eax,eax
c0003c0c:	75 2a                	jne    c0003c38 <store_xdir+0x71>
c0003c0e:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c11:	b9 20 00 00 00       	mov    ecx,0x20
c0003c16:	89 ea                	mov    edx,ebp
c0003c18:	e8 cb e0 ff ff       	call   c0001ce8 <mem_cpy>
c0003c1d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c1f:	85 db                	test   ebx,ebx
c0003c21:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c25:	74 11                	je     c0003c38 <store_xdir+0x71>
c0003c27:	31 d2                	xor    edx,edx
c0003c29:	89 f8                	mov    eax,edi
c0003c2b:	83 c5 20             	add    ebp,0x20
c0003c2e:	e8 ea fa ff ff       	call   c000371d <dir_next>
c0003c33:	4b                   	dec    ebx
c0003c34:	89 c6                	mov    esi,eax
c0003c36:	eb bf                	jmp    c0003bf7 <store_xdir+0x30>
c0003c38:	89 f0                	mov    eax,esi
c0003c3a:	83 fe 02             	cmp    esi,0x2
c0003c3d:	76 05                	jbe    c0003c44 <store_xdir+0x7d>
c0003c3f:	b8 02 00 00 00       	mov    eax,0x2
c0003c44:	83 c4 0c             	add    esp,0xc
c0003c47:	5b                   	pop    ebx
c0003c48:	5e                   	pop    esi
c0003c49:	5f                   	pop    edi
c0003c4a:	5d                   	pop    ebp
c0003c4b:	c3                   	ret    

c0003c4c <dir_remove>:
c0003c4c:	57                   	push   edi
c0003c4d:	56                   	push   esi
c0003c4e:	53                   	push   ebx
c0003c4f:	89 c3                	mov    ebx,eax
c0003c51:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c54:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c56:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c59:	83 fa ff             	cmp    edx,0xffffffff
c0003c5c:	74 09                	je     c0003c67 <dir_remove+0x1b>
c0003c5e:	e8 62 f5 ff ff       	call   c00031c5 <dir_sdi>
c0003c63:	85 c0                	test   eax,eax
c0003c65:	75 41                	jne    c0003ca8 <dir_remove+0x5c>
c0003c67:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c6a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c6d:	89 f0                	mov    eax,esi
c0003c6f:	e8 d3 e7 ff ff       	call   c0002447 <move_window>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	75 26                	jne    c0003c9e <dir_remove+0x52>
c0003c78:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c7b:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c7e:	75 05                	jne    c0003c85 <dir_remove+0x39>
c0003c80:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c83:	eb 03                	jmp    c0003c88 <dir_remove+0x3c>
c0003c85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c8c:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c8f:	73 17                	jae    c0003ca8 <dir_remove+0x5c>
c0003c91:	31 d2                	xor    edx,edx
c0003c93:	89 d8                	mov    eax,ebx
c0003c95:	e8 83 fa ff ff       	call   c000371d <dir_next>
c0003c9a:	85 c0                	test   eax,eax
c0003c9c:	74 c9                	je     c0003c67 <dir_remove+0x1b>
c0003c9e:	83 f8 04             	cmp    eax,0x4
c0003ca1:	75 05                	jne    c0003ca8 <dir_remove+0x5c>
c0003ca3:	b8 02 00 00 00       	mov    eax,0x2
c0003ca8:	5b                   	pop    ebx
c0003ca9:	5e                   	pop    esi
c0003caa:	5f                   	pop    edi
c0003cab:	c3                   	ret    

c0003cac <create_name>:
c0003cac:	55                   	push   ebp
c0003cad:	89 d5                	mov    ebp,edx
c0003caf:	57                   	push   edi
c0003cb0:	89 c7                	mov    edi,eax
c0003cb2:	56                   	push   esi
c0003cb3:	31 f6                	xor    esi,esi
c0003cb5:	53                   	push   ebx
c0003cb6:	83 ec 3c             	sub    esp,0x3c
c0003cb9:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cbb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cc1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003ccc:	e8 72 e0 ff ff       	call   c0001d43 <tchar2uni>
c0003cd1:	89 c3                	mov    ebx,eax
c0003cd3:	83 f8 ff             	cmp    eax,0xffffffff
c0003cd6:	75 0a                	jne    c0003ce2 <create_name+0x36>
c0003cd8:	b8 06 00 00 00       	mov    eax,0x6
c0003cdd:	e9 9e 02 00 00       	jmp    c0003f80 <create_name+0x2d4>
c0003ce2:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ce7:	76 0c                	jbe    c0003cf5 <create_name+0x49>
c0003ce9:	c1 e8 10             	shr    eax,0x10
c0003cec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cf0:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cf4:	46                   	inc    esi
c0003cf5:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf9:	76 4f                	jbe    c0003d4a <create_name+0x9e>
c0003cfb:	66 83 fb 5c          	cmp    bx,0x5c
c0003cff:	74 35                	je     c0003d36 <create_name+0x8a>
c0003d01:	66 83 fb 2f          	cmp    bx,0x2f
c0003d05:	74 2f                	je     c0003d36 <create_name+0x8a>
c0003d07:	66 83 fb 7f          	cmp    bx,0x7f
c0003d0b:	77 11                	ja     c0003d1e <create_name+0x72>
c0003d0d:	0f b7 d3             	movzx  edx,bx
c0003d10:	b8 72 96 02 c0       	mov    eax,0xc0029672
c0003d15:	e8 11 e0 ff ff       	call   c0001d2b <chk_chr>
c0003d1a:	85 c0                	test   eax,eax
c0003d1c:	75 ba                	jne    c0003cd8 <create_name+0x2c>
c0003d1e:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d24:	77 b2                	ja     c0003cd8 <create_name+0x2c>
c0003d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d2a:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d2e:	46                   	inc    esi
c0003d2f:	eb 97                	jmp    c0003cc8 <create_name+0x1c>
c0003d31:	40                   	inc    eax
c0003d32:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d3a:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d3c:	80 fa 2f             	cmp    dl,0x2f
c0003d3f:	74 f0                	je     c0003d31 <create_name+0x85>
c0003d41:	80 fa 5c             	cmp    dl,0x5c
c0003d44:	74 eb                	je     c0003d31 <create_name+0x85>
c0003d46:	31 db                	xor    ebx,ebx
c0003d48:	eb 02                	jmp    c0003d4c <create_name+0xa0>
c0003d4a:	b3 04                	mov    bl,0x4
c0003d4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d50:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d53:	85 f6                	test   esi,esi
c0003d55:	74 18                	je     c0003d6f <create_name+0xc3>
c0003d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d5b:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d60:	66 83 f8 20          	cmp    ax,0x20
c0003d64:	74 06                	je     c0003d6c <create_name+0xc0>
c0003d66:	66 83 f8 2e          	cmp    ax,0x2e
c0003d6a:	75 03                	jne    c0003d6f <create_name+0xc3>
c0003d6c:	4e                   	dec    esi
c0003d6d:	eb e4                	jmp    c0003d53 <create_name+0xa7>
c0003d6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d73:	31 ed                	xor    ebp,ebp
c0003d75:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d7b:	85 f6                	test   esi,esi
c0003d7d:	0f 84 55 ff ff ff    	je     c0003cd8 <create_name+0x2c>
c0003d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d87:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d8a:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d8e:	66 83 f8 20          	cmp    ax,0x20
c0003d92:	75 04                	jne    c0003d98 <create_name+0xec>
c0003d94:	89 d5                	mov    ebp,edx
c0003d96:	eb eb                	jmp    c0003d83 <create_name+0xd7>
c0003d98:	85 ed                	test   ebp,ebp
c0003d9a:	75 06                	jne    c0003da2 <create_name+0xf6>
c0003d9c:	66 83 f8 2e          	cmp    ax,0x2e
c0003da0:	75 08                	jne    c0003daa <create_name+0xfe>
c0003da2:	83 cb 03             	or     ebx,0x3
c0003da5:	eb 03                	jmp    c0003daa <create_name+0xfe>
c0003da7:	4e                   	dec    esi
c0003da8:	74 0c                	je     c0003db6 <create_name+0x10a>
c0003daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dae:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003db4:	75 f1                	jne    c0003da7 <create_name+0xfb>
c0003db6:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dbb:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003dbe:	ba 20 00 00 00       	mov    edx,0x20
c0003dc3:	e8 35 df ff ff       	call   c0001cfd <mem_set>
c0003dc8:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dd0:	31 c9                	xor    ecx,ecx
c0003dd2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dd7:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dda:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003de2:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003de6:	66 85 ed             	test   bp,bp
c0003de9:	0f 84 30 01 00 00    	je     c0003f1f <create_name+0x273>
c0003def:	66 83 fd 20          	cmp    bp,0x20
c0003df3:	74 10                	je     c0003e05 <create_name+0x159>
c0003df5:	66 83 fd 2e          	cmp    bp,0x2e
c0003df9:	75 13                	jne    c0003e0e <create_name+0x162>
c0003dfb:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dff:	0f 84 6b 01 00 00    	je     c0003f70 <create_name+0x2c4>
c0003e05:	83 cb 03             	or     ebx,0x3
c0003e08:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e0c:	eb c9                	jmp    c0003dd7 <create_name+0x12b>
c0003e0e:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e12:	73 0b                	jae    c0003e1f <create_name+0x173>
c0003e14:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e18:	75 47                	jne    c0003e61 <create_name+0x1b5>
c0003e1a:	e9 51 01 00 00       	jmp    c0003f70 <create_name+0x2c4>
c0003e1f:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e24:	75 10                	jne    c0003e36 <create_name+0x18a>
c0003e26:	83 cb 03             	or     ebx,0x3
c0003e29:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e31:	e9 e9 00 00 00       	jmp    c0003f1f <create_name+0x273>
c0003e36:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3a:	74 0d                	je     c0003e49 <create_name+0x19d>
c0003e3c:	83 cb 03             	or     ebx,0x3
c0003e3f:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e43:	0f 87 d6 00 00 00    	ja     c0003f1f <create_name+0x273>
c0003e49:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e4e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e52:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e5a:	b9 08 00 00 00       	mov    ecx,0x8
c0003e5f:	eb a7                	jmp    c0003e08 <create_name+0x15c>
c0003e61:	66 83 fd 7f          	cmp    bp,0x7f
c0003e65:	76 68                	jbe    c0003ecf <create_name+0x223>
c0003e67:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e6b:	88 da                	mov    dl,bl
c0003e6d:	83 ca 02             	or     edx,0x2
c0003e70:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e74:	50                   	push   eax
c0003e75:	50                   	push   eax
c0003e76:	68 b5 01 00 00       	push   0x1b5
c0003e7b:	55                   	push   ebp
c0003e7c:	e8 48 46 00 00       	call   c00084c9 <ff_uni2oem>
c0003e81:	83 c4 10             	add    esp,0x10
c0003e84:	89 c5                	mov    ebp,eax
c0003e86:	a8 80                	test   al,0x80
c0003e88:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e90:	74 0c                	je     c0003e9e <create_name+0x1f2>
c0003e92:	83 e5 7f             	and    ebp,0x7f
c0003e95:	0f b6 ad c0 95 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6a40]
c0003e9c:	eb 2a                	jmp    c0003ec8 <create_name+0x21c>
c0003e9e:	66 3d ff 00          	cmp    ax,0xff
c0003ea2:	76 24                	jbe    c0003ec8 <create_name+0x21c>
c0003ea4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea8:	48                   	dec    eax
c0003ea9:	39 c8                	cmp    eax,ecx
c0003eab:	77 0c                	ja     c0003eb9 <create_name+0x20d>
c0003ead:	83 cb 03             	or     ebx,0x3
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	e9 4f ff ff ff       	jmp    c0003e08 <create_name+0x15c>
c0003eb9:	89 e8                	mov    eax,ebp
c0003ebb:	88 d3                	mov    bl,dl
c0003ebd:	66 c1 e8 08          	shr    ax,0x8
c0003ec1:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ec5:	41                   	inc    ecx
c0003ec6:	eb 4b                	jmp    c0003f13 <create_name+0x267>
c0003ec8:	88 d3                	mov    bl,dl
c0003eca:	66 85 ed             	test   bp,bp
c0003ecd:	74 19                	je     c0003ee8 <create_name+0x23c>
c0003ecf:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ed3:	0f b7 d5             	movzx  edx,bp
c0003ed6:	b8 7b 96 02 c0       	mov    eax,0xc002967b
c0003edb:	e8 4b de ff ff       	call   c0001d2b <chk_chr>
c0003ee0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ee4:	85 c0                	test   eax,eax
c0003ee6:	74 0a                	je     c0003ef2 <create_name+0x246>
c0003ee8:	83 cb 03             	or     ebx,0x3
c0003eeb:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ef0:	eb 21                	jmp    c0003f13 <create_name+0x267>
c0003ef2:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ef5:	66 83 f8 19          	cmp    ax,0x19
c0003ef9:	77 07                	ja     c0003f02 <create_name+0x256>
c0003efb:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003f00:	eb 11                	jmp    c0003f13 <create_name+0x267>
c0003f02:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003f05:	66 83 f8 19          	cmp    ax,0x19
c0003f09:	77 08                	ja     c0003f13 <create_name+0x267>
c0003f0b:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f10:	83 ed 20             	sub    ebp,0x20
c0003f13:	89 e8                	mov    eax,ebp
c0003f15:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f19:	41                   	inc    ecx
c0003f1a:	e9 e9 fe ff ff       	jmp    c0003e08 <create_name+0x15c>
c0003f1f:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f23:	75 04                	jne    c0003f29 <create_name+0x27d>
c0003f25:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f29:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f2e:	75 05                	jne    c0003f35 <create_name+0x289>
c0003f30:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f35:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f39:	83 e0 0c             	and    eax,0xc
c0003f3c:	3c 0c                	cmp    al,0xc
c0003f3e:	74 0b                	je     c0003f4b <create_name+0x29f>
c0003f40:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f44:	83 e0 03             	and    eax,0x3
c0003f47:	3c 03                	cmp    al,0x3
c0003f49:	75 05                	jne    c0003f50 <create_name+0x2a4>
c0003f4b:	83 cb 02             	or     ebx,0x2
c0003f4e:	eb 19                	jmp    c0003f69 <create_name+0x2bd>
c0003f50:	f6 c3 02             	test   bl,0x2
c0003f53:	75 14                	jne    c0003f69 <create_name+0x2bd>
c0003f55:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f5a:	74 03                	je     c0003f5f <create_name+0x2b3>
c0003f5c:	83 cb 10             	or     ebx,0x10
c0003f5f:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f64:	74 03                	je     c0003f69 <create_name+0x2bd>
c0003f66:	83 cb 08             	or     ebx,0x8
c0003f69:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f6c:	31 c0                	xor    eax,eax
c0003f6e:	eb 10                	jmp    c0003f80 <create_name+0x2d4>
c0003f70:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f75:	0f 85 ce fe ff ff    	jne    c0003e49 <create_name+0x19d>
c0003f7b:	e9 a6 fe ff ff       	jmp    c0003e26 <create_name+0x17a>
c0003f80:	83 c4 3c             	add    esp,0x3c
c0003f83:	5b                   	pop    ebx
c0003f84:	5e                   	pop    esi
c0003f85:	5f                   	pop    edi
c0003f86:	5d                   	pop    ebp
c0003f87:	c3                   	ret    

c0003f88 <xname_sum>:
c0003f88:	56                   	push   esi
c0003f89:	53                   	push   ebx
c0003f8a:	89 c6                	mov    esi,eax
c0003f8c:	51                   	push   ecx
c0003f8d:	31 db                	xor    ebx,ebx
c0003f8f:	83 c6 02             	add    esi,0x2
c0003f92:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f96:	66 85 c0             	test   ax,ax
c0003f99:	74 1f                	je     c0003fba <xname_sum+0x32>
c0003f9b:	83 ec 0c             	sub    esp,0xc
c0003f9e:	66 d1 cb             	ror    bx,1
c0003fa1:	50                   	push   eax
c0003fa2:	e8 1e 46 00 00       	call   c00085c5 <ff_wtoupper>
c0003fa7:	83 c4 10             	add    esp,0x10
c0003faa:	0f b6 d0             	movzx  edx,al
c0003fad:	66 c1 e8 08          	shr    ax,0x8
c0003fb1:	01 d3                	add    ebx,edx
c0003fb3:	66 d1 cb             	ror    bx,1
c0003fb6:	01 c3                	add    ebx,eax
c0003fb8:	eb d5                	jmp    c0003f8f <xname_sum+0x7>
c0003fba:	89 d8                	mov    eax,ebx
c0003fbc:	5a                   	pop    edx
c0003fbd:	5b                   	pop    ebx
c0003fbe:	5e                   	pop    esi
c0003fbf:	c3                   	ret    

c0003fc0 <create_xdir>:
c0003fc0:	55                   	push   ebp
c0003fc1:	b9 40 00 00 00       	mov    ecx,0x40
c0003fc6:	57                   	push   edi
c0003fc7:	bd 01 00 00 00       	mov    ebp,0x1
c0003fcc:	56                   	push   esi
c0003fcd:	31 ff                	xor    edi,edi
c0003fcf:	53                   	push   ebx
c0003fd0:	be 40 00 00 00       	mov    esi,0x40
c0003fd5:	89 c3                	mov    ebx,eax
c0003fd7:	83 ec 1c             	sub    esp,0x1c
c0003fda:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fde:	31 d2                	xor    edx,edx
c0003fe0:	e8 18 dd ff ff       	call   c0001cfd <mem_set>
c0003fe5:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe8:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fec:	31 c9                	xor    ecx,ecx
c0003fee:	8d 46 01             	lea    eax,[esi+0x1]
c0003ff1:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ff5:	83 c6 02             	add    esi,0x2
c0003ff8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ffc:	66 85 ed             	test   bp,bp
c0003fff:	74 12                	je     c0004013 <create_xdir+0x53>
c0004001:	0f b6 c1             	movzx  eax,cl
c0004004:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004008:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c000400c:	66 83 fd 01          	cmp    bp,0x1
c0004010:	80 d9 ff             	sbb    cl,0xff
c0004013:	8d 04 33             	lea    eax,[ebx+esi*1]
c0004016:	0f b7 d5             	movzx  edx,bp
c0004019:	83 c6 02             	add    esi,0x2
c000401c:	e8 ba dc ff ff       	call   c0001cdb <st_word>
c0004021:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0004027:	75 d3                	jne    c0003ffc <create_xdir+0x3c>
c0004029:	8d 47 01             	lea    eax,[edi+0x1]
c000402c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004030:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0004034:	0f b6 c1             	movzx  eax,cl
c0004037:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c000403c:	74 07                	je     c0004045 <create_xdir+0x85>
c000403e:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004043:	eb a9                	jmp    c0003fee <create_xdir+0x2e>
c0004045:	8d 47 02             	lea    eax,[edi+0x2]
c0004048:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c000404b:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000404e:	89 d0                	mov    eax,edx
c0004050:	e8 33 ff ff ff       	call   c0003f88 <xname_sum>
c0004055:	83 c4 1c             	add    esp,0x1c
c0004058:	0f b7 d0             	movzx  edx,ax
c000405b:	8d 43 24             	lea    eax,[ebx+0x24]
c000405e:	5b                   	pop    ebx
c000405f:	5e                   	pop    esi
c0004060:	5f                   	pop    edi
c0004061:	5d                   	pop    ebp
c0004062:	e9 74 dc ff ff       	jmp    c0001cdb <st_word>

c0004067 <cmp_lfn>:
c0004067:	55                   	push   ebp
c0004068:	57                   	push   edi
c0004069:	89 d7                	mov    edi,edx
c000406b:	56                   	push   esi
c000406c:	53                   	push   ebx
c000406d:	83 ec 1c             	sub    esp,0x1c
c0004070:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004074:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004077:	e8 ed db ff ff       	call   c0001c69 <ld_word>
c000407c:	66 85 c0             	test   ax,ax
c000407f:	74 07                	je     c0004088 <cmp_lfn+0x21>
c0004081:	31 c0                	xor    eax,eax
c0004083:	e9 9a 00 00 00       	jmp    c0004122 <cmp_lfn+0xbb>
c0004088:	8a 1f                	mov    bl,BYTE PTR [edi]
c000408a:	bd 01 00 00 00       	mov    ebp,0x1
c000408f:	83 e3 3f             	and    ebx,0x3f
c0004092:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000409a:	4b                   	dec    ebx
c000409b:	6b db 0d             	imul   ebx,ebx,0xd
c000409e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00040a2:	0f b6 80 40 96 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd69c0]
c00040a9:	01 f8                	add    eax,edi
c00040ab:	e8 b9 db ff ff       	call   c0001c69 <ld_word>
c00040b0:	66 85 ed             	test   bp,bp
c00040b3:	89 c6                	mov    esi,eax
c00040b5:	74 3c                	je     c00040f3 <cmp_lfn+0x8c>
c00040b7:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040bd:	77 c2                	ja     c0004081 <cmp_lfn+0x1a>
c00040bf:	83 ec 0c             	sub    esp,0xc
c00040c2:	0f b7 c0             	movzx  eax,ax
c00040c5:	50                   	push   eax
c00040c6:	e8 fa 44 00 00       	call   c00085c5 <ff_wtoupper>
c00040cb:	89 c5                	mov    ebp,eax
c00040cd:	8d 43 01             	lea    eax,[ebx+0x1]
c00040d0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d8:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00040df:	e8 e1 44 00 00       	call   c00085c5 <ff_wtoupper>
c00040e4:	83 c4 10             	add    esp,0x10
c00040e7:	39 c5                	cmp    ebp,eax
c00040e9:	75 96                	jne    c0004081 <cmp_lfn+0x1a>
c00040eb:	89 f5                	mov    ebp,esi
c00040ed:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040f1:	eb 04                	jmp    c00040f7 <cmp_lfn+0x90>
c00040f3:	66 46                	inc    si
c00040f5:	75 8a                	jne    c0004081 <cmp_lfn+0x1a>
c00040f7:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040fb:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0004100:	75 9c                	jne    c000409e <cmp_lfn+0x37>
c0004102:	f6 07 40             	test   BYTE PTR [edi],0x40
c0004105:	74 16                	je     c000411d <cmp_lfn+0xb6>
c0004107:	66 85 ed             	test   bp,bp
c000410a:	74 11                	je     c000411d <cmp_lfn+0xb6>
c000410c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004110:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004115:	0f 94 c0             	sete   al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	eb 05                	jmp    c0004122 <cmp_lfn+0xbb>
c000411d:	b8 01 00 00 00       	mov    eax,0x1
c0004122:	83 c4 1c             	add    esp,0x1c
c0004125:	5b                   	pop    ebx
c0004126:	5e                   	pop    esi
c0004127:	5f                   	pop    edi
c0004128:	5d                   	pop    ebp
c0004129:	c3                   	ret    

c000412a <dir_find>:
c000412a:	55                   	push   ebp
c000412b:	31 d2                	xor    edx,edx
c000412d:	57                   	push   edi
c000412e:	56                   	push   esi
c000412f:	53                   	push   ebx
c0004130:	89 c3                	mov    ebx,eax
c0004132:	83 ec 1c             	sub    esp,0x1c
c0004135:	8b 30                	mov    esi,DWORD PTR [eax]
c0004137:	e8 89 f0 ff ff       	call   c00031c5 <dir_sdi>
c000413c:	89 04 24             	mov    DWORD PTR [esp],eax
c000413f:	85 c0                	test   eax,eax
c0004141:	0f 85 9e 01 00 00    	jne    c00042e5 <dir_find+0x1bb>
c0004147:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000414a:	0f 85 8d 00 00 00    	jne    c00041dd <dir_find+0xb3>
c0004150:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004153:	e8 30 fe ff ff       	call   c0003f88 <xname_sum>
c0004158:	89 c7                	mov    edi,eax
c000415a:	31 d2                	xor    edx,edx
c000415c:	89 d8                	mov    eax,ebx
c000415e:	e8 72 f8 ff ff       	call   c00039d5 <dir_read>
c0004163:	85 c0                	test   eax,eax
c0004165:	0f 85 5e 01 00 00    	jne    c00042c9 <dir_find+0x19f>
c000416b:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000416e:	8d 41 24             	lea    eax,[ecx+0x24]
c0004171:	e8 f3 da ff ff       	call   c0001c69 <ld_word>
c0004176:	66 39 f8             	cmp    ax,di
c0004179:	75 df                	jne    c000415a <dir_find+0x30>
c000417b:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000417e:	31 ed                	xor    ebp,ebp
c0004180:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004184:	ba 40 00 00 00       	mov    edx,0x40
c0004189:	89 e9                	mov    ecx,ebp
c000418b:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000418f:	0f 84 42 01 00 00    	je     c00042d7 <dir_find+0x1ad>
c0004195:	f6 c2 1f             	test   dl,0x1f
c0004198:	75 03                	jne    c000419d <dir_find+0x73>
c000419a:	83 c2 02             	add    edx,0x2
c000419d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00041a1:	89 d0                	mov    eax,edx
c00041a3:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00041a6:	e8 be da ff ff       	call   c0001c69 <ld_word>
c00041ab:	83 ec 0c             	sub    esp,0xc
c00041ae:	0f b7 c0             	movzx  eax,ax
c00041b1:	50                   	push   eax
c00041b2:	e8 0e 44 00 00       	call   c00085c5 <ff_wtoupper>
c00041b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041bb:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041be:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00041c5:	e8 fb 43 00 00       	call   c00085c5 <ff_wtoupper>
c00041ca:	83 c4 10             	add    esp,0x10
c00041cd:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041d1:	75 87                	jne    c000415a <dir_find+0x30>
c00041d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041d7:	45                   	inc    ebp
c00041d8:	83 c2 02             	add    edx,0x2
c00041db:	eb ac                	jmp    c0004189 <dir_find+0x5f>
c00041dd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041e4:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e9:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ee:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041f1:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041f4:	89 f0                	mov    eax,esi
c00041f6:	e8 4c e2 ff ff       	call   c0002447 <move_window>
c00041fb:	85 c0                	test   eax,eax
c00041fd:	0f 85 c6 00 00 00    	jne    c00042c9 <dir_find+0x19f>
c0004203:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0004206:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004209:	84 c9                	test   cl,cl
c000420b:	0f 84 bd 00 00 00    	je     c00042ce <dir_find+0x1a4>
c0004211:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004214:	88 d0                	mov    al,dl
c0004216:	83 e0 3f             	and    eax,0x3f
c0004219:	80 f9 e5             	cmp    cl,0xe5
c000421c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000421f:	0f 84 87 00 00 00    	je     c00042ac <dir_find+0x182>
c0004225:	80 e2 08             	and    dl,0x8
c0004228:	74 06                	je     c0004230 <dir_find+0x106>
c000422a:	3c 0f                	cmp    al,0xf
c000422c:	75 7e                	jne    c00042ac <dir_find+0x182>
c000422e:	eb 04                	jmp    c0004234 <dir_find+0x10a>
c0004230:	3c 0f                	cmp    al,0xf
c0004232:	75 4c                	jne    c0004280 <dir_find+0x156>
c0004234:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004238:	75 7e                	jne    c00042b8 <dir_find+0x18e>
c000423a:	f6 c1 40             	test   cl,0x40
c000423d:	74 12                	je     c0004251 <dir_find+0x127>
c000423f:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004242:	83 e1 bf             	and    ecx,0xffffffbf
c0004245:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004249:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000424c:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424f:	eb 06                	jmp    c0004257 <dir_find+0x12d>
c0004251:	89 f8                	mov    eax,edi
c0004253:	38 c8                	cmp    al,cl
c0004255:	75 5c                	jne    c00042b3 <dir_find+0x189>
c0004257:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000425b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004260:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004263:	75 53                	jne    c00042b8 <dir_find+0x18e>
c0004265:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004269:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000426c:	89 ea                	mov    edx,ebp
c000426e:	e8 f4 fd ff ff       	call   c0004067 <cmp_lfn>
c0004273:	85 c0                	test   eax,eax
c0004275:	74 41                	je     c00042b8 <dir_find+0x18e>
c0004277:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000427b:	8d 79 ff             	lea    edi,[ecx-0x1]
c000427e:	eb 38                	jmp    c00042b8 <dir_find+0x18e>
c0004280:	89 f8                	mov    eax,edi
c0004282:	84 c0                	test   al,al
c0004284:	75 0d                	jne    c0004293 <dir_find+0x169>
c0004286:	89 e8                	mov    eax,ebp
c0004288:	e8 98 de ff ff       	call   c0002125 <sum_sfn>
c000428d:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004291:	74 52                	je     c00042e5 <dir_find+0x1bb>
c0004293:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004297:	75 13                	jne    c00042ac <dir_find+0x182>
c0004299:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000429c:	b9 0b 00 00 00       	mov    ecx,0xb
c00042a1:	89 e8                	mov    eax,ebp
c00042a3:	e8 60 da ff ff       	call   c0001d08 <mem_cmp>
c00042a8:	85 c0                	test   eax,eax
c00042aa:	74 39                	je     c00042e5 <dir_find+0x1bb>
c00042ac:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042b3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b8:	31 d2                	xor    edx,edx
c00042ba:	89 d8                	mov    eax,ebx
c00042bc:	e8 5c f4 ff ff       	call   c000371d <dir_next>
c00042c1:	85 c0                	test   eax,eax
c00042c3:	0f 84 25 ff ff ff    	je     c00041ee <dir_find+0xc4>
c00042c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00042cc:	eb 17                	jmp    c00042e5 <dir_find+0x1bb>
c00042ce:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042d5:	eb 0e                	jmp    c00042e5 <dir_find+0x1bb>
c00042d7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042da:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042df:	0f 85 75 fe ff ff    	jne    c000415a <dir_find+0x30>
c00042e5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e8:	83 c4 1c             	add    esp,0x1c
c00042eb:	5b                   	pop    ebx
c00042ec:	5e                   	pop    esi
c00042ed:	5f                   	pop    edi
c00042ee:	5d                   	pop    ebp
c00042ef:	c3                   	ret    

c00042f0 <dir_register>:
c00042f0:	55                   	push   ebp
c00042f1:	57                   	push   edi
c00042f2:	56                   	push   esi
c00042f3:	be 06 00 00 00       	mov    esi,0x6
c00042f8:	53                   	push   ebx
c00042f9:	83 ec 6c             	sub    esp,0x6c
c00042fc:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004300:	0f 85 62 02 00 00    	jne    c0004568 <dir_register+0x278>
c0004306:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004308:	31 ff                	xor    edi,edi
c000430a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000430d:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004312:	74 03                	je     c0004317 <dir_register+0x27>
c0004314:	47                   	inc    edi
c0004315:	eb f6                	jmp    c000430d <dir_register+0x1d>
c0004317:	89 c3                	mov    ebx,eax
c0004319:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000431d:	0f 85 e1 00 00 00    	jne    c0004404 <dir_register+0x114>
c0004323:	83 c7 0e             	add    edi,0xe
c0004326:	b9 0f 00 00 00       	mov    ecx,0xf
c000432b:	89 f8                	mov    eax,edi
c000432d:	31 d2                	xor    edx,edx
c000432f:	f7 f1                	div    ecx
c0004331:	8d 50 02             	lea    edx,[eax+0x2]
c0004334:	89 c7                	mov    edi,eax
c0004336:	89 d8                	mov    eax,ebx
c0004338:	e8 12 f8 ff ff       	call   c0003b4f <dir_alloc>
c000433d:	89 c6                	mov    esi,eax
c000433f:	85 c0                	test   eax,eax
c0004341:	0f 85 21 02 00 00    	jne    c0004568 <dir_register+0x278>
c0004347:	81 c7 01 00 00 08    	add    edi,0x8000001
c000434d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004350:	c1 e7 05             	shl    edi,0x5
c0004353:	29 f8                	sub    eax,edi
c0004355:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004358:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000435b:	a8 04                	test   al,0x4
c000435d:	0f 84 91 00 00 00    	je     c00043f4 <dir_register+0x104>
c0004363:	83 e0 fb             	and    eax,0xfffffffb
c0004366:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004369:	89 d8                	mov    eax,ebx
c000436b:	e8 25 ec ff ff       	call   c0002f95 <fill_first_frag>
c0004370:	85 c0                	test   eax,eax
c0004372:	0f 85 ee 01 00 00    	jne    c0004566 <dir_register+0x276>
c0004378:	83 c9 ff             	or     ecx,0xffffffff
c000437b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000437e:	89 d8                	mov    eax,ebx
c0004380:	e8 db eb ff ff       	call   c0002f60 <fill_last_frag>
c0004385:	85 c0                	test   eax,eax
c0004387:	0f 85 d9 01 00 00    	jne    c0004566 <dir_register+0x276>
c000438d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004391:	74 61                	je     c00043f4 <dir_register+0x104>
c0004393:	89 da                	mov    edx,ebx
c0004395:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004399:	e8 ea f5 ff ff       	call   c0003988 <load_obj_xdir>
c000439e:	85 c0                	test   eax,eax
c00043a0:	0f 85 c0 01 00 00    	jne    c0004566 <dir_register+0x276>
c00043a6:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043aa:	31 c9                	xor    ecx,ecx
c00043ac:	c1 e2 09             	shl    edx,0x9
c00043af:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043b2:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043b5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b8:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043bb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043be:	83 c0 38             	add    eax,0x38
c00043c1:	e8 1c d9 ff ff       	call   c0001ce2 <st_qword>
c00043c6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043cc:	83 c0 28             	add    eax,0x28
c00043cf:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043d2:	e8 0b d9 ff ff       	call   c0001ce2 <st_qword>
c00043d7:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043da:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043dd:	83 c8 01             	or     eax,0x1
c00043e0:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043e3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043e7:	e8 db f7 ff ff       	call   c0003bc7 <store_xdir>
c00043ec:	85 c0                	test   eax,eax
c00043ee:	0f 85 72 01 00 00    	jne    c0004566 <dir_register+0x276>
c00043f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043f7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043fa:	e8 c1 fb ff ff       	call   c0003fc0 <create_xdir>
c00043ff:	e9 64 01 00 00       	jmp    c0004568 <dir_register+0x278>
c0004404:	8d 40 3c             	lea    eax,[eax+0x3c]
c0004407:	b9 0c 00 00 00       	mov    ecx,0xc
c000440c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004410:	89 c2                	mov    edx,eax
c0004412:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004416:	e8 cd d8 ff ff       	call   c0001ce8 <mem_cpy>
c000441b:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004420:	74 58                	je     c000447a <dir_register+0x18a>
c0004422:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004426:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000442e:	83 ec 0c             	sub    esp,0xc
c0004431:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004434:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004438:	8d 54 24 24          	lea    edx,[esp+0x24]
c000443c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004440:	e8 24 dc ff ff       	call   c0002069 <gen_numname>
c0004445:	89 d8                	mov    eax,ebx
c0004447:	e8 de fc ff ff       	call   c000412a <dir_find>
c000444c:	83 c4 10             	add    esp,0x10
c000444f:	89 c6                	mov    esi,eax
c0004451:	85 c0                	test   eax,eax
c0004453:	75 15                	jne    c000446a <dir_register+0x17a>
c0004455:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004459:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000445e:	75 ce                	jne    c000442e <dir_register+0x13e>
c0004460:	be 07 00 00 00       	mov    esi,0x7
c0004465:	e9 fe 00 00 00       	jmp    c0004568 <dir_register+0x278>
c000446a:	83 f8 04             	cmp    eax,0x4
c000446d:	0f 85 f5 00 00 00    	jne    c0004568 <dir_register+0x278>
c0004473:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004477:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000447a:	b9 01 00 00 00       	mov    ecx,0x1
c000447f:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004484:	74 0f                	je     c0004495 <dir_register+0x1a5>
c0004486:	b9 0d 00 00 00       	mov    ecx,0xd
c000448b:	8d 47 0c             	lea    eax,[edi+0xc]
c000448e:	31 d2                	xor    edx,edx
c0004490:	f7 f1                	div    ecx
c0004492:	8d 48 01             	lea    ecx,[eax+0x1]
c0004495:	89 ca                	mov    edx,ecx
c0004497:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000449b:	89 d8                	mov    eax,ebx
c000449d:	e8 ad f6 ff ff       	call   c0003b4f <dir_alloc>
c00044a2:	89 c6                	mov    esi,eax
c00044a4:	85 c0                	test   eax,eax
c00044a6:	0f 85 bc 00 00 00    	jne    c0004568 <dir_register+0x278>
c00044ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044b0:	49                   	dec    ecx
c00044b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044b5:	74 6a                	je     c0004521 <dir_register+0x231>
c00044b7:	89 c8                	mov    eax,ecx
c00044b9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044bc:	c1 e0 05             	shl    eax,0x5
c00044bf:	29 c2                	sub    edx,eax
c00044c1:	89 d8                	mov    eax,ebx
c00044c3:	e8 fd ec ff ff       	call   c00031c5 <dir_sdi>
c00044c8:	89 c6                	mov    esi,eax
c00044ca:	85 c0                	test   eax,eax
c00044cc:	0f 85 96 00 00 00    	jne    c0004568 <dir_register+0x278>
c00044d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044d6:	e8 4a dc ff ff       	call   c0002125 <sum_sfn>
c00044db:	0f b6 f8             	movzx  edi,al
c00044de:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e1:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e4:	89 e8                	mov    eax,ebp
c00044e6:	e8 5c df ff ff       	call   c0002447 <move_window>
c00044eb:	89 c6                	mov    esi,eax
c00044ed:	85 c0                	test   eax,eax
c00044ef:	75 77                	jne    c0004568 <dir_register+0x278>
c00044f1:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044f6:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f9:	83 ec 0c             	sub    esp,0xc
c00044fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044ff:	57                   	push   edi
c0004500:	e8 e0 da ff ff       	call   c0001fe5 <put_lfn>
c0004505:	31 d2                	xor    edx,edx
c0004507:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000450b:	89 d8                	mov    eax,ebx
c000450d:	e8 0b f2 ff ff       	call   c000371d <dir_next>
c0004512:	83 c4 10             	add    esp,0x10
c0004515:	89 c6                	mov    esi,eax
c0004517:	85 c0                	test   eax,eax
c0004519:	75 4d                	jne    c0004568 <dir_register+0x278>
c000451b:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c000451f:	75 bd                	jne    c00044de <dir_register+0x1ee>
c0004521:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004524:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004527:	89 e8                	mov    eax,ebp
c0004529:	e8 19 df ff ff       	call   c0002447 <move_window>
c000452e:	89 c6                	mov    esi,eax
c0004530:	85 c0                	test   eax,eax
c0004532:	75 34                	jne    c0004568 <dir_register+0x278>
c0004534:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004537:	b9 20 00 00 00       	mov    ecx,0x20
c000453c:	31 d2                	xor    edx,edx
c000453e:	e8 ba d7 ff ff       	call   c0001cfd <mem_set>
c0004543:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004546:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000454a:	b9 0b 00 00 00       	mov    ecx,0xb
c000454f:	e8 94 d7 ff ff       	call   c0001ce8 <mem_cpy>
c0004554:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004557:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000455a:	83 e0 18             	and    eax,0x18
c000455d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004560:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004564:	eb 02                	jmp    c0004568 <dir_register+0x278>
c0004566:	89 c6                	mov    esi,eax
c0004568:	83 c4 6c             	add    esp,0x6c
c000456b:	89 f0                	mov    eax,esi
c000456d:	5b                   	pop    ebx
c000456e:	5e                   	pop    esi
c000456f:	5f                   	pop    edi
c0004570:	5d                   	pop    ebp
c0004571:	c3                   	ret    

c0004572 <sync_fs>:
c0004572:	56                   	push   esi
c0004573:	53                   	push   ebx
c0004574:	53                   	push   ebx
c0004575:	89 c3                	mov    ebx,eax
c0004577:	e8 37 de ff ff       	call   c00023b3 <sync_window>
c000457c:	85 c0                	test   eax,eax
c000457e:	0f 85 b1 00 00 00    	jne    c0004635 <sync_fs+0xc3>
c0004584:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004587:	0f 85 8e 00 00 00    	jne    c000461b <sync_fs+0xa9>
c000458d:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004591:	0f 85 84 00 00 00    	jne    c000461b <sync_fs+0xa9>
c0004597:	b9 00 02 00 00       	mov    ecx,0x200
c000459c:	8d 73 54             	lea    esi,[ebx+0x54]
c000459f:	31 d2                	xor    edx,edx
c00045a1:	89 f0                	mov    eax,esi
c00045a3:	e8 55 d7 ff ff       	call   c0001cfd <mem_set>
c00045a8:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045ae:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045b3:	e8 23 d7 ff ff       	call   c0001cdb <st_word>
c00045b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00045bd:	89 f0                	mov    eax,esi
c00045bf:	e8 1b d7 ff ff       	call   c0001cdf <st_dword>
c00045c4:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00045cf:	e8 0b d7 ff ff       	call   c0001cdf <st_dword>
c00045d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045d7:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045dd:	e8 fd d6 ff ff       	call   c0001cdf <st_dword>
c00045e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045e5:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045eb:	e8 ef d6 ff ff       	call   c0001cdf <st_dword>
c00045f0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045f3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045f6:	83 c0 01             	add    eax,0x1
c00045f9:	83 d2 00             	adc    edx,0x0
c00045fc:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045ff:	83 ec 0c             	sub    esp,0xc
c0004602:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0004605:	6a 01                	push   0x1
c0004607:	52                   	push   edx
c0004608:	50                   	push   eax
c0004609:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000460d:	56                   	push   esi
c000460e:	50                   	push   eax
c000460f:	e8 20 d6 ff ff       	call   c0001c34 <disk_write>
c0004614:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004618:	83 c4 20             	add    esp,0x20
c000461b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000461f:	51                   	push   ecx
c0004620:	6a 00                	push   0x0
c0004622:	6a 00                	push   0x0
c0004624:	50                   	push   eax
c0004625:	e8 20 d6 ff ff       	call   c0001c4a <disk_ioctl>
c000462a:	83 c4 10             	add    esp,0x10
c000462d:	85 c0                	test   eax,eax
c000462f:	0f 95 c0             	setne  al
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	5a                   	pop    edx
c0004636:	5b                   	pop    ebx
c0004637:	5e                   	pop    esi
c0004638:	c3                   	ret    

c0004639 <create_partition>:
c0004639:	55                   	push   ebp
c000463a:	0f b6 c0             	movzx  eax,al
c000463d:	57                   	push   edi
c000463e:	56                   	push   esi
c000463f:	53                   	push   ebx
c0004640:	83 ec 60             	sub    esp,0x60
c0004643:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004647:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000464b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000464f:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004653:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004657:	50                   	push   eax
c0004658:	6a 01                	push   0x1
c000465a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000465e:	e8 e7 d5 ff ff       	call   c0001c4a <disk_ioctl>
c0004663:	83 c4 10             	add    esp,0x10
c0004666:	85 c0                	test   eax,eax
c0004668:	74 0a                	je     c0004674 <create_partition+0x3b>
c000466a:	b8 01 00 00 00       	mov    eax,0x1
c000466f:	e9 67 05 00 00       	jmp    c0004bdb <create_partition+0x5a2>
c0004674:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004678:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000467c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004680:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004684:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004689:	0f 86 ed 03 00 00    	jbe    c0004a7c <create_partition+0x443>
c000468f:	83 c0 df             	add    eax,0xffffffdf
c0004692:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000469a:	83 d2 ff             	adc    edx,0xffffffff
c000469d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00046a1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00046a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046ad:	83 c0 bd             	add    eax,0xffffffbd
c00046b0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046b7:	83 d2 ff             	adc    edx,0xffffffff
c00046ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046c2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046ca:	be 22 00 00 00       	mov    esi,0x22
c00046cf:	31 ff                	xor    edi,edi
c00046d1:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d9:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046e1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ed:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046f3:	75 0e                	jne    c0004703 <create_partition+0xca>
c00046f5:	b9 00 02 00 00       	mov    ecx,0x200
c00046fa:	31 d2                	xor    edx,edx
c00046fc:	89 d8                	mov    eax,ebx
c00046fe:	e8 fa d5 ff ff       	call   c0001cfd <mem_set>
c0004703:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004707:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000470b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000470f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004712:	0f 84 23 01 00 00    	je     c000483b <create_partition+0x202>
c0004718:	89 f0                	mov    eax,esi
c000471a:	89 fa                	mov    edx,edi
c000471c:	05 ff 07 00 00       	add    eax,0x7ff
c0004721:	83 d2 00             	adc    edx,0x0
c0004724:	89 c1                	mov    ecx,eax
c0004726:	89 d7                	mov    edi,edx
c0004728:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000472e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004732:	89 ce                	mov    esi,ecx
c0004734:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004738:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000473c:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004740:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004743:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004747:	89 04 24             	mov    DWORD PTR [esp],eax
c000474a:	b8 64 00 00 00       	mov    eax,0x64
c000474f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004752:	b8 00 00 00 00       	mov    eax,0x0
c0004757:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000475b:	72 41                	jb     c000479e <create_partition+0x165>
c000475d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004761:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004765:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004769:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000476e:	01 c1                	add    ecx,eax
c0004770:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004774:	f7 24 24             	mul    DWORD PTR [esp]
c0004777:	6a 00                	push   0x0
c0004779:	01 ca                	add    edx,ecx
c000477b:	6a 64                	push   0x64
c000477d:	52                   	push   edx
c000477e:	50                   	push   eax
c000477f:	e8 20 24 02 00       	call   c0026ba4 <__udivdi3>
c0004784:	83 c4 10             	add    esp,0x10
c0004787:	05 ff 07 00 00       	add    eax,0x7ff
c000478c:	83 d2 00             	adc    edx,0x0
c000478f:	89 c1                	mov    ecx,eax
c0004791:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004795:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000479b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000479e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047a1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00047a5:	01 f0                	add    eax,esi
c00047a7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047ab:	11 fa                	adc    edx,edi
c00047ad:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047b1:	19 d1                	sbb    ecx,edx
c00047b3:	73 2e                	jae    c00047e3 <create_partition+0x1aa>
c00047b5:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b9:	89 f8                	mov    eax,edi
c00047bb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047c2:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047c6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047ce:	73 6b                	jae    c000483b <create_partition+0x202>
c00047d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d8:	29 f0                	sub    eax,esi
c00047da:	19 fa                	sbb    edx,edi
c00047dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00047df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047e7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047ea:	74 4f                	je     c000483b <create_partition+0x202>
c00047ec:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ef:	b9 10 00 00 00       	mov    ecx,0x10
c00047f4:	ba 50 96 02 c0       	mov    edx,0xc0029650
c00047f9:	e8 ea d4 ff ff       	call   c0001ce8 <mem_cpy>
c00047fe:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004802:	b9 10 00 00 00       	mov    ecx,0x10
c0004807:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000480b:	e8 2c db ff ff       	call   c000233c <make_rand>
c0004810:	89 f2                	mov    edx,esi
c0004812:	89 f9                	mov    ecx,edi
c0004814:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004818:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000481c:	e8 c1 d4 ff ff       	call   c0001ce2 <st_qword>
c0004821:	03 34 24             	add    esi,DWORD PTR [esp]
c0004824:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004828:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000482c:	89 f2                	mov    edx,esi
c000482e:	89 f9                	mov    ecx,edi
c0004830:	83 c2 ff             	add    edx,0xffffffff
c0004833:	83 d1 ff             	adc    ecx,0xffffffff
c0004836:	e8 a7 d4 ff ff       	call   c0001ce2 <st_qword>
c000483b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000483f:	83 e8 80             	sub    eax,0xffffff80
c0004842:	89 c5                	mov    ebp,eax
c0004844:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004848:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000484e:	75 6b                	jne    c00048bb <create_partition+0x282>
c0004850:	45                   	inc    ebp
c0004851:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004855:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000485a:	e8 39 da ff ff       	call   c0002298 <crc32>
c000485f:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004865:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004869:	75 e5                	jne    c0004850 <create_partition+0x217>
c000486b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000486f:	31 d2                	xor    edx,edx
c0004871:	83 ec 0c             	sub    esp,0xc
c0004874:	c1 ed 09             	shr    ebp,0x9
c0004877:	6a 01                	push   0x1
c0004879:	8d 45 02             	lea    eax,[ebp+0x2]
c000487c:	52                   	push   edx
c000487d:	50                   	push   eax
c000487e:	53                   	push   ebx
c000487f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004883:	e8 ac d3 ff ff       	call   c0001c34 <disk_write>
c0004888:	83 c4 20             	add    esp,0x20
c000488b:	85 c0                	test   eax,eax
c000488d:	0f 85 d7 fd ff ff    	jne    c000466a <create_partition+0x31>
c0004893:	83 ec 0c             	sub    esp,0xc
c0004896:	31 d2                	xor    edx,edx
c0004898:	6a 01                	push   0x1
c000489a:	89 e8                	mov    eax,ebp
c000489c:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00048a0:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00048a4:	52                   	push   edx
c00048a5:	50                   	push   eax
c00048a6:	53                   	push   ebx
c00048a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048ab:	e8 84 d3 ff ff       	call   c0001c34 <disk_write>
c00048b0:	83 c4 20             	add    esp,0x20
c00048b3:	85 c0                	test   eax,eax
c00048b5:	0f 85 af fd ff ff    	jne    c000466a <create_partition+0x31>
c00048bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048c3:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c8:	74 0d                	je     c00048d7 <create_partition+0x29e>
c00048ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048ce:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048d2:	e9 12 fe ff ff       	jmp    c00046e9 <create_partition+0xb0>
c00048d7:	31 d2                	xor    edx,edx
c00048d9:	b9 00 02 00 00       	mov    ecx,0x200
c00048de:	89 d8                	mov    eax,ebx
c00048e0:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048e3:	e8 15 d4 ff ff       	call   c0001cfd <mem_set>
c00048e8:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048eb:	b9 10 00 00 00       	mov    ecx,0x10
c00048f0:	ba 40 95 02 c0       	mov    edx,0xc0029540
c00048f5:	89 d8                	mov    eax,ebx
c00048f7:	e8 ec d3 ff ff       	call   c0001ce8 <mem_cpy>
c00048fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004900:	8d 43 58             	lea    eax,[ebx+0x58]
c0004903:	f7 d2                	not    edx
c0004905:	e8 d5 d3 ff ff       	call   c0001cdf <st_dword>
c000490a:	8d 43 18             	lea    eax,[ebx+0x18]
c000490d:	31 c9                	xor    ecx,ecx
c000490f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004912:	ba 01 00 00 00       	mov    edx,0x1
c0004917:	e8 c6 d3 ff ff       	call   c0001ce2 <st_qword>
c000491c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004920:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004924:	83 c2 ff             	add    edx,0xffffffff
c0004927:	89 e8                	mov    eax,ebp
c0004929:	83 d1 ff             	adc    ecx,0xffffffff
c000492c:	e8 b1 d3 ff ff       	call   c0001ce2 <st_qword>
c0004931:	31 c9                	xor    ecx,ecx
c0004933:	8d 43 28             	lea    eax,[ebx+0x28]
c0004936:	ba 22 00 00 00       	mov    edx,0x22
c000493b:	e8 a2 d3 ff ff       	call   c0001ce2 <st_qword>
c0004940:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004944:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004948:	83 c2 de             	add    edx,0xffffffde
c000494b:	8d 43 30             	lea    eax,[ebx+0x30]
c000494e:	83 d1 ff             	adc    ecx,0xffffffff
c0004951:	31 f6                	xor    esi,esi
c0004953:	e8 8a d3 ff ff       	call   c0001ce2 <st_qword>
c0004958:	8d 43 54             	lea    eax,[ebx+0x54]
c000495b:	ba 80 00 00 00       	mov    edx,0x80
c0004960:	e8 7a d3 ff ff       	call   c0001cdf <st_dword>
c0004965:	8d 43 50             	lea    eax,[ebx+0x50]
c0004968:	ba 80 00 00 00       	mov    edx,0x80
c000496d:	e8 6d d3 ff ff       	call   c0001cdf <st_dword>
c0004972:	ba 02 00 00 00       	mov    edx,0x2
c0004977:	89 f8                	mov    eax,edi
c0004979:	e8 61 d3 ff ff       	call   c0001cdf <st_dword>
c000497e:	8d 53 38             	lea    edx,[ebx+0x38]
c0004981:	b9 10 00 00 00       	mov    ecx,0x10
c0004986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000498a:	e8 ad d9 ff ff       	call   c000233c <make_rand>
c000498f:	83 c8 ff             	or     eax,0xffffffff
c0004992:	46                   	inc    esi
c0004993:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004998:	e8 fb d8 ff ff       	call   c0002298 <crc32>
c000499d:	83 fe 5c             	cmp    esi,0x5c
c00049a0:	75 f0                	jne    c0004992 <create_partition+0x359>
c00049a2:	f7 d0                	not    eax
c00049a4:	8d 73 10             	lea    esi,[ebx+0x10]
c00049a7:	89 c2                	mov    edx,eax
c00049a9:	89 f0                	mov    eax,esi
c00049ab:	e8 2f d3 ff ff       	call   c0001cdf <st_dword>
c00049b0:	83 ec 0c             	sub    esp,0xc
c00049b3:	6a 01                	push   0x1
c00049b5:	6a 00                	push   0x0
c00049b7:	6a 01                	push   0x1
c00049b9:	53                   	push   ebx
c00049ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049be:	e8 71 d2 ff ff       	call   c0001c34 <disk_write>
c00049c3:	83 c4 20             	add    esp,0x20
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 9c fc ff ff    	jne    c000466a <create_partition+0x31>
c00049ce:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049d2:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049d6:	83 c2 ff             	add    edx,0xffffffff
c00049d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049dc:	83 d1 ff             	adc    ecx,0xffffffff
c00049df:	e8 fe d2 ff ff       	call   c0001ce2 <st_qword>
c00049e4:	ba 01 00 00 00       	mov    edx,0x1
c00049e9:	31 c9                	xor    ecx,ecx
c00049eb:	89 e8                	mov    eax,ebp
c00049ed:	e8 f0 d2 ff ff       	call   c0001ce2 <st_qword>
c00049f2:	89 f8                	mov    eax,edi
c00049f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049fc:	31 ff                	xor    edi,edi
c00049fe:	e8 df d2 ff ff       	call   c0001ce2 <st_qword>
c0004a03:	89 f0                	mov    eax,esi
c0004a05:	31 d2                	xor    edx,edx
c0004a07:	e8 d3 d2 ff ff       	call   c0001cdf <st_dword>
c0004a0c:	83 c8 ff             	or     eax,0xffffffff
c0004a0f:	47                   	inc    edi
c0004a10:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a15:	e8 7e d8 ff ff       	call   c0002298 <crc32>
c0004a1a:	83 ff 5c             	cmp    edi,0x5c
c0004a1d:	75 f0                	jne    c0004a0f <create_partition+0x3d6>
c0004a1f:	f7 d0                	not    eax
c0004a21:	89 c2                	mov    edx,eax
c0004a23:	89 f0                	mov    eax,esi
c0004a25:	e8 b5 d2 ff ff       	call   c0001cdf <st_dword>
c0004a2a:	83 ec 0c             	sub    esp,0xc
c0004a2d:	6a 01                	push   0x1
c0004a2f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a33:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a37:	83 c0 ff             	add    eax,0xffffffff
c0004a3a:	83 d2 ff             	adc    edx,0xffffffff
c0004a3d:	52                   	push   edx
c0004a3e:	50                   	push   eax
c0004a3f:	53                   	push   ebx
c0004a40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a44:	e8 eb d1 ff ff       	call   c0001c34 <disk_write>
c0004a49:	83 c4 20             	add    esp,0x20
c0004a4c:	85 c0                	test   eax,eax
c0004a4e:	0f 85 16 fc ff ff    	jne    c000466a <create_partition+0x31>
c0004a54:	31 d2                	xor    edx,edx
c0004a56:	89 d8                	mov    eax,ebx
c0004a58:	b9 00 02 00 00       	mov    ecx,0x200
c0004a5d:	e8 9b d2 ff ff       	call   c0001cfd <mem_set>
c0004a62:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a68:	b9 10 00 00 00       	mov    ecx,0x10
c0004a6d:	ba 50 95 02 c0       	mov    edx,0xc0029550
c0004a72:	e8 71 d2 ff ff       	call   c0001ce8 <mem_cpy>
c0004a77:	e9 21 01 00 00       	jmp    c0004b9d <create_partition+0x564>
c0004a7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a80:	b9 05 00 00 00       	mov    ecx,0x5
c0004a85:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a88:	bf 08 00 00 00       	mov    edi,0x8
c0004a8d:	89 f8                	mov    eax,edi
c0004a8f:	31 d2                	xor    edx,edx
c0004a91:	0f b6 f0             	movzx  esi,al
c0004a94:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a97:	f7 f6                	div    esi
c0004a99:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a9e:	76 0a                	jbe    c0004aaa <create_partition+0x471>
c0004aa0:	d1 e7                	shl    edi,1
c0004aa2:	49                   	dec    ecx
c0004aa3:	75 e8                	jne    c0004a8d <create_partition+0x454>
c0004aa5:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aaa:	b9 00 02 00 00       	mov    ecx,0x200
c0004aaf:	31 d2                	xor    edx,edx
c0004ab1:	89 d8                	mov    eax,ebx
c0004ab3:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab9:	e8 3f d2 ff ff       	call   c0001cfd <mem_set>
c0004abe:	b9 64 00 00 00       	mov    ecx,0x64
c0004ac3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004ac6:	31 d2                	xor    edx,edx
c0004ac8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ad0:	f7 f1                	div    ecx
c0004ad2:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004ad7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004adb:	89 f8                	mov    eax,edi
c0004add:	0f b6 c0             	movzx  eax,al
c0004ae0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004ae4:	e9 80 00 00 00       	jmp    c0004b69 <create_partition+0x530>
c0004ae9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aec:	29 cf                	sub    edi,ecx
c0004aee:	89 ca                	mov    edx,ecx
c0004af0:	89 f0                	mov    eax,esi
c0004af2:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004af7:	e8 e3 d1 ff ff       	call   c0001cdf <st_dword>
c0004afc:	8d 46 04             	lea    eax,[esi+0x4]
c0004aff:	89 fa                	mov    edx,edi
c0004b01:	83 c6 10             	add    esi,0x10
c0004b04:	e8 d6 d1 ff ff       	call   c0001cdf <st_dword>
c0004b09:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b0d:	31 d2                	xor    edx,edx
c0004b0f:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b12:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b16:	89 c8                	mov    eax,ecx
c0004b18:	01 f9                	add    ecx,edi
c0004b1a:	f7 f5                	div    ebp
c0004b1c:	89 d5                	mov    ebp,edx
c0004b1e:	31 d2                	xor    edx,edx
c0004b20:	45                   	inc    ebp
c0004b21:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b25:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b28:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b2b:	89 c2                	mov    edx,eax
c0004b2d:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b30:	c1 ea 02             	shr    edx,0x2
c0004b33:	83 e2 c0             	and    edx,0xffffffc0
c0004b36:	09 ea                	or     edx,ebp
c0004b38:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b3d:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b40:	31 d2                	xor    edx,edx
c0004b42:	f7 f5                	div    ebp
c0004b44:	89 d7                	mov    edi,edx
c0004b46:	31 d2                	xor    edx,edx
c0004b48:	47                   	inc    edi
c0004b49:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b4d:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b50:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b53:	89 c5                	mov    ebp,eax
c0004b55:	c1 ed 02             	shr    ebp,0x2
c0004b58:	83 e5 c0             	and    ebp,0xffffffc0
c0004b5b:	09 ef                	or     edi,ebp
c0004b5d:	89 fa                	mov    edx,edi
c0004b5f:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b62:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b67:	74 34                	je     c0004b9d <create_partition+0x564>
c0004b69:	85 c9                	test   ecx,ecx
c0004b6b:	74 30                	je     c0004b9d <create_partition+0x564>
c0004b6d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b70:	76 2b                	jbe    c0004b9d <create_partition+0x564>
c0004b72:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b76:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b7a:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b7d:	83 ff 64             	cmp    edi,0x64
c0004b80:	76 4b                	jbe    c0004bcd <create_partition+0x594>
c0004b82:	89 f8                	mov    eax,edi
c0004b84:	01 c8                	add    eax,ecx
c0004b86:	0f 82 5d ff ff ff    	jb     c0004ae9 <create_partition+0x4b0>
c0004b8c:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b8f:	0f 87 54 ff ff ff    	ja     c0004ae9 <create_partition+0x4b0>
c0004b95:	85 ff                	test   edi,edi
c0004b97:	0f 85 51 ff ff ff    	jne    c0004aee <create_partition+0x4b5>
c0004b9d:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004ba3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba8:	e8 2e d1 ff ff       	call   c0001cdb <st_word>
c0004bad:	83 ec 0c             	sub    esp,0xc
c0004bb0:	6a 01                	push   0x1
c0004bb2:	6a 00                	push   0x0
c0004bb4:	6a 00                	push   0x0
c0004bb6:	53                   	push   ebx
c0004bb7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bbb:	e8 74 d0 ff ff       	call   c0001c34 <disk_write>
c0004bc0:	83 c4 20             	add    esp,0x20
c0004bc3:	85 c0                	test   eax,eax
c0004bc5:	0f 95 c0             	setne  al
c0004bc8:	0f b6 c0             	movzx  eax,al
c0004bcb:	eb 0e                	jmp    c0004bdb <create_partition+0x5a2>
c0004bcd:	74 07                	je     c0004bd6 <create_partition+0x59d>
c0004bcf:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bd4:	eb ac                	jmp    c0004b82 <create_partition+0x549>
c0004bd6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd9:	eb a7                	jmp    c0004b82 <create_partition+0x549>
c0004bdb:	83 c4 5c             	add    esp,0x5c
c0004bde:	5b                   	pop    ebx
c0004bdf:	5e                   	pop    esi
c0004be0:	5f                   	pop    edi
c0004be1:	5d                   	pop    ebp
c0004be2:	c3                   	ret    

c0004be3 <get_fileinfo>:
c0004be3:	55                   	push   ebp
c0004be4:	57                   	push   edi
c0004be5:	56                   	push   esi
c0004be6:	53                   	push   ebx
c0004be7:	83 ec 1c             	sub    esp,0x1c
c0004bea:	8b 30                	mov    esi,DWORD PTR [eax]
c0004bec:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bf0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bf4:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bf7:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bfa:	0f 84 dc 01 00 00    	je     c0004ddc <get_fileinfo+0x1f9>
c0004c00:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004c03:	75 0f                	jne    c0004c14 <get_fileinfo+0x31>
c0004c05:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c08:	83 c4 1c             	add    esp,0x1c
c0004c0b:	5b                   	pop    ebx
c0004c0c:	5e                   	pop    esi
c0004c0d:	5f                   	pop    edi
c0004c0e:	5d                   	pop    ebp
c0004c0f:	e9 58 d5 ff ff       	jmp    c000216c <get_xfileinfo>
c0004c14:	89 d3                	mov    ebx,edx
c0004c16:	89 c6                	mov    esi,eax
c0004c18:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c1c:	74 6a                	je     c0004c88 <get_fileinfo+0xa5>
c0004c1e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c26:	31 ed                	xor    ebp,ebp
c0004c28:	31 ff                	xor    edi,edi
c0004c2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c2e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c32:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c35:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c39:	66 85 d2             	test   dx,dx
c0004c3c:	74 3e                	je     c0004c7c <get_fileinfo+0x99>
c0004c3e:	66 85 ed             	test   bp,bp
c0004c41:	75 0c                	jne    c0004c4f <get_fileinfo+0x6c>
c0004c43:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c49:	66 3d ff 07          	cmp    ax,0x7ff
c0004c4d:	76 22                	jbe    c0004c71 <get_fileinfo+0x8e>
c0004c4f:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c54:	89 e8                	mov    eax,ebp
c0004c56:	29 f9                	sub    ecx,edi
c0004c58:	c1 e0 10             	shl    eax,0x10
c0004c5b:	09 d0                	or     eax,edx
c0004c5d:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c61:	e8 a3 d1 ff ff       	call   c0001e09 <put_utf>
c0004c66:	84 c0                	test   al,al
c0004c68:	74 10                	je     c0004c7a <get_fileinfo+0x97>
c0004c6a:	0f b6 c0             	movzx  eax,al
c0004c6d:	31 d2                	xor    edx,edx
c0004c6f:	01 c7                	add    edi,eax
c0004c71:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c76:	89 d5                	mov    ebp,edx
c0004c78:	eb b0                	jmp    c0004c2a <get_fileinfo+0x47>
c0004c7a:	31 ff                	xor    edi,edi
c0004c7c:	66 85 ed             	test   bp,bp
c0004c7f:	74 02                	je     c0004c83 <get_fileinfo+0xa0>
c0004c81:	31 ff                	xor    edi,edi
c0004c83:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c88:	31 ff                	xor    edi,edi
c0004c8a:	31 c9                	xor    ecx,ecx
c0004c8c:	83 f9 0a             	cmp    ecx,0xa
c0004c8f:	0f 87 ad 00 00 00    	ja     c0004d42 <get_fileinfo+0x15f>
c0004c95:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c98:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c9b:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c9f:	66 83 fa 20          	cmp    dx,0x20
c0004ca3:	0f 84 92 00 00 00    	je     c0004d3b <get_fileinfo+0x158>
c0004ca9:	66 83 fa 05          	cmp    dx,0x5
c0004cad:	75 05                	jne    c0004cb4 <get_fileinfo+0xd1>
c0004caf:	ba e5 00 00 00       	mov    edx,0xe5
c0004cb4:	83 ff 0b             	cmp    edi,0xb
c0004cb7:	77 0b                	ja     c0004cc4 <get_fileinfo+0xe1>
c0004cb9:	83 fd 09             	cmp    ebp,0x9
c0004cbc:	75 06                	jne    c0004cc4 <get_fileinfo+0xe1>
c0004cbe:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cc3:	47                   	inc    edi
c0004cc4:	0f b7 c2             	movzx  eax,dx
c0004cc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ccb:	e8 6d d0 ff ff       	call   c0001d3d <dbc_1st>
c0004cd0:	85 c0                	test   eax,eax
c0004cd2:	74 2f                	je     c0004d03 <get_fileinfo+0x120>
c0004cd4:	83 fd 08             	cmp    ebp,0x8
c0004cd7:	74 2a                	je     c0004d03 <get_fileinfo+0x120>
c0004cd9:	83 fd 0b             	cmp    ebp,0xb
c0004cdc:	74 25                	je     c0004d03 <get_fileinfo+0x120>
c0004cde:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ce1:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ce5:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce9:	e8 52 d0 ff ff       	call   c0001d40 <dbc_2nd>
c0004cee:	85 c0                	test   eax,eax
c0004cf0:	74 11                	je     c0004d03 <get_fileinfo+0x120>
c0004cf2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cf6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cfb:	c1 e2 08             	shl    edx,0x8
c0004cfe:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004d01:	09 c2                	or     edx,eax
c0004d03:	0f b7 d2             	movzx  edx,dx
c0004d06:	50                   	push   eax
c0004d07:	50                   	push   eax
c0004d08:	68 b5 01 00 00       	push   0x1b5
c0004d0d:	52                   	push   edx
c0004d0e:	e8 46 38 00 00       	call   c0008559 <ff_oem2uni>
c0004d13:	83 c4 10             	add    esp,0x10
c0004d16:	66 85 c0             	test   ax,ax
c0004d19:	75 04                	jne    c0004d1f <get_fileinfo+0x13c>
c0004d1b:	31 ff                	xor    edi,edi
c0004d1d:	eb 23                	jmp    c0004d42 <get_fileinfo+0x15f>
c0004d1f:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d24:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d28:	29 f9                	sub    ecx,edi
c0004d2a:	0f b7 c0             	movzx  eax,ax
c0004d2d:	e8 d7 d0 ff ff       	call   c0001e09 <put_utf>
c0004d32:	84 c0                	test   al,al
c0004d34:	74 e5                	je     c0004d1b <get_fileinfo+0x138>
c0004d36:	0f b6 c0             	movzx  eax,al
c0004d39:	01 c7                	add    edi,eax
c0004d3b:	89 e9                	mov    ecx,ebp
c0004d3d:	e9 4a ff ff ff       	jmp    c0004c8c <get_fileinfo+0xa9>
c0004d42:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d47:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d4b:	75 54                	jne    c0004da1 <get_fileinfo+0x1be>
c0004d4d:	85 ff                	test   edi,edi
c0004d4f:	75 0b                	jne    c0004d5c <get_fileinfo+0x179>
c0004d51:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d55:	ba 01 00 00 00       	mov    edx,0x1
c0004d5a:	eb 33                	jmp    c0004d8f <get_fileinfo+0x1ac>
c0004d5c:	b1 08                	mov    cl,0x8
c0004d5e:	31 d2                	xor    edx,edx
c0004d60:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d66:	84 c0                	test   al,al
c0004d68:	74 25                	je     c0004d8f <get_fileinfo+0x1ac>
c0004d6a:	66 83 f8 2e          	cmp    ax,0x2e
c0004d6e:	74 16                	je     c0004d86 <get_fileinfo+0x1a3>
c0004d70:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d73:	66 83 ff 19          	cmp    di,0x19
c0004d77:	77 0f                	ja     c0004d88 <get_fileinfo+0x1a5>
c0004d79:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d7c:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d7f:	74 07                	je     c0004d88 <get_fileinfo+0x1a5>
c0004d81:	83 c0 20             	add    eax,0x20
c0004d84:	eb 02                	jmp    c0004d88 <get_fileinfo+0x1a5>
c0004d86:	b1 10                	mov    cl,0x10
c0004d88:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d8c:	42                   	inc    edx
c0004d8d:	eb d1                	jmp    c0004d60 <get_fileinfo+0x17d>
c0004d8f:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d94:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d97:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d9b:	75 04                	jne    c0004da1 <get_fileinfo+0x1be>
c0004d9d:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004da1:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da4:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004da7:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004daa:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dad:	83 c0 1c             	add    eax,0x1c
c0004db0:	e8 c1 ce ff ff       	call   c0001c76 <ld_dword>
c0004db5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004dbc:	89 03                	mov    DWORD PTR [ebx],eax
c0004dbe:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc1:	83 c0 16             	add    eax,0x16
c0004dc4:	e8 a0 ce ff ff       	call   c0001c69 <ld_word>
c0004dc9:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dcd:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dd0:	83 c0 18             	add    eax,0x18
c0004dd3:	e8 91 ce ff ff       	call   c0001c69 <ld_word>
c0004dd8:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004ddc:	83 c4 1c             	add    esp,0x1c
c0004ddf:	5b                   	pop    ebx
c0004de0:	5e                   	pop    esi
c0004de1:	5f                   	pop    edi
c0004de2:	5d                   	pop    ebp
c0004de3:	c3                   	ret    

c0004de4 <ld_clust.isra.0>:
c0004de4:	56                   	push   esi
c0004de5:	89 c6                	mov    esi,eax
c0004de7:	53                   	push   ebx
c0004de8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004deb:	89 d3                	mov    ebx,edx
c0004ded:	e8 77 ce ff ff       	call   c0001c69 <ld_word>
c0004df2:	0f b7 c8             	movzx  ecx,ax
c0004df5:	89 f0                	mov    eax,esi
c0004df7:	3c 03                	cmp    al,0x3
c0004df9:	75 0d                	jne    c0004e08 <ld_clust.isra.0+0x24>
c0004dfb:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dfe:	e8 66 ce ff ff       	call   c0001c69 <ld_word>
c0004e03:	c1 e0 10             	shl    eax,0x10
c0004e06:	09 c1                	or     ecx,eax
c0004e08:	89 c8                	mov    eax,ecx
c0004e0a:	5b                   	pop    ebx
c0004e0b:	5e                   	pop    esi
c0004e0c:	c3                   	ret    

c0004e0d <st_clust.isra.1>:
c0004e0d:	56                   	push   esi
c0004e0e:	89 c6                	mov    esi,eax
c0004e10:	53                   	push   ebx
c0004e11:	89 d3                	mov    ebx,edx
c0004e13:	0f b7 d1             	movzx  edx,cx
c0004e16:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e19:	e8 bd ce ff ff       	call   c0001cdb <st_word>
c0004e1e:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e21:	75 0f                	jne    c0004e32 <st_clust.isra.1+0x25>
c0004e23:	c1 e9 10             	shr    ecx,0x10
c0004e26:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e29:	89 ca                	mov    edx,ecx
c0004e2b:	5b                   	pop    ebx
c0004e2c:	5e                   	pop    esi
c0004e2d:	e9 a9 ce ff ff       	jmp    c0001cdb <st_word>
c0004e32:	5b                   	pop    ebx
c0004e33:	5e                   	pop    esi
c0004e34:	c3                   	ret    

c0004e35 <init_alloc_info.isra.2>:
c0004e35:	56                   	push   esi
c0004e36:	53                   	push   ebx
c0004e37:	89 c6                	mov    esi,eax
c0004e39:	89 d3                	mov    ebx,edx
c0004e3b:	51                   	push   ecx
c0004e3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e3e:	83 c0 34             	add    eax,0x34
c0004e41:	e8 30 ce ff ff       	call   c0001c76 <ld_dword>
c0004e46:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e49:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e4b:	83 c0 38             	add    eax,0x38
c0004e4e:	e8 3b ce ff ff       	call   c0001c8e <ld_qword>
c0004e53:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e56:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e59:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e5b:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e5e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e65:	83 e0 02             	and    eax,0x2
c0004e68:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5b                   	pop    ebx
c0004e6d:	5e                   	pop    esi
c0004e6e:	c3                   	ret    

c0004e6f <follow_path>:
c0004e6f:	56                   	push   esi
c0004e70:	53                   	push   ebx
c0004e71:	89 c3                	mov    ebx,eax
c0004e73:	83 ec 14             	sub    esp,0x14
c0004e76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e7a:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e80:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e82:	80 fa 5c             	cmp    dl,0x5c
c0004e85:	75 07                	jne    c0004e8e <follow_path+0x1f>
c0004e87:	40                   	inc    eax
c0004e88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e8c:	eb ee                	jmp    c0004e7c <follow_path+0xd>
c0004e8e:	80 fa 2f             	cmp    dl,0x2f
c0004e91:	74 f4                	je     c0004e87 <follow_path+0x18>
c0004e93:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e9a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004ea1:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004ea4:	77 52                	ja     c0004ef8 <follow_path+0x89>
c0004ea6:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004eaa:	31 d2                	xor    edx,edx
c0004eac:	89 d8                	mov    eax,ebx
c0004eae:	e8 12 e3 ff ff       	call   c00031c5 <dir_sdi>
c0004eb3:	eb 7c                	jmp    c0004f31 <follow_path+0xc2>
c0004eb5:	89 d8                	mov    eax,ebx
c0004eb7:	e8 6e f2 ff ff       	call   c000412a <dir_find>
c0004ebc:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004ebf:	85 c0                	test   eax,eax
c0004ec1:	75 46                	jne    c0004f09 <follow_path+0x9a>
c0004ec3:	80 e2 04             	and    dl,0x4
c0004ec6:	75 69                	jne    c0004f31 <follow_path+0xc2>
c0004ec8:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ecc:	74 5e                	je     c0004f2c <follow_path+0xbd>
c0004ece:	8a 06                	mov    al,BYTE PTR [esi]
c0004ed0:	3c 04                	cmp    al,0x4
c0004ed2:	75 41                	jne    c0004f15 <follow_path+0xa6>
c0004ed4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ed7:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004edb:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ede:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ee1:	30 c0                	xor    al,al
c0004ee3:	09 d0                	or     eax,edx
c0004ee5:	89 da                	mov    edx,ebx
c0004ee7:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004eea:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eed:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ef0:	8d 46 10             	lea    eax,[esi+0x10]
c0004ef3:	e8 3d ff ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0004ef8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004efc:	89 d8                	mov    eax,ebx
c0004efe:	e8 a9 ed ff ff       	call   c0003cac <create_name>
c0004f03:	85 c0                	test   eax,eax
c0004f05:	74 ae                	je     c0004eb5 <follow_path+0x46>
c0004f07:	eb 28                	jmp    c0004f31 <follow_path+0xc2>
c0004f09:	83 f8 04             	cmp    eax,0x4
c0004f0c:	75 23                	jne    c0004f31 <follow_path+0xc2>
c0004f0e:	80 e2 04             	and    dl,0x4
c0004f11:	74 19                	je     c0004f2c <follow_path+0xbd>
c0004f13:	eb 1c                	jmp    c0004f31 <follow_path+0xc2>
c0004f15:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f18:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f1e:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f22:	e8 bd fe ff ff       	call   c0004de4 <ld_clust.isra.0>
c0004f27:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f2a:	eb cc                	jmp    c0004ef8 <follow_path+0x89>
c0004f2c:	b8 05 00 00 00       	mov    eax,0x5
c0004f31:	83 c4 14             	add    esp,0x14
c0004f34:	5b                   	pop    ebx
c0004f35:	5e                   	pop    esi
c0004f36:	c3                   	ret    

c0004f37 <f_mount>:
c0004f37:	53                   	push   ebx
c0004f38:	83 ec 18             	sub    esp,0x18
c0004f3b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f3f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f47:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f4b:	e8 fb d2 ff ff       	call   c000224b <get_ldnumber>
c0004f50:	89 c2                	mov    edx,eax
c0004f52:	b8 0b 00 00 00       	mov    eax,0xb
c0004f57:	85 d2                	test   edx,edx
c0004f59:	78 39                	js     c0004f94 <f_mount+0x5d>
c0004f5b:	8b 04 95 c0 e6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1940]
c0004f62:	85 c0                	test   eax,eax
c0004f64:	74 03                	je     c0004f69 <f_mount+0x32>
c0004f66:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f6d:	85 c0                	test   eax,eax
c0004f6f:	74 03                	je     c0004f74 <f_mount+0x3d>
c0004f71:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f78:	89 04 95 c0 e6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1940],eax
c0004f7f:	31 c0                	xor    eax,eax
c0004f81:	84 db                	test   bl,bl
c0004f83:	74 0f                	je     c0004f94 <f_mount+0x5d>
c0004f85:	31 c9                	xor    ecx,ecx
c0004f87:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f8b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f8f:	e8 65 d7 ff ff       	call   c00026f9 <mount_volume>
c0004f94:	83 c4 18             	add    esp,0x18
c0004f97:	5b                   	pop    ebx
c0004f98:	c3                   	ret    

c0004f99 <f_open>:
c0004f99:	55                   	push   ebp
c0004f9a:	bd 09 00 00 00       	mov    ebp,0x9
c0004f9f:	57                   	push   edi
c0004fa0:	56                   	push   esi
c0004fa1:	53                   	push   ebx
c0004fa2:	83 ec 7c             	sub    esp,0x7c
c0004fa5:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fac:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fb3:	85 db                	test   ebx,ebx
c0004fb5:	0f 84 10 04 00 00    	je     c00053cb <f_open+0x432>
c0004fbb:	89 fe                	mov    esi,edi
c0004fbd:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fc1:	83 e6 3f             	and    esi,0x3f
c0004fc4:	89 f0                	mov    eax,esi
c0004fc6:	0f b6 c8             	movzx  ecx,al
c0004fc9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fd0:	e8 24 d7 ff ff       	call   c00026f9 <mount_volume>
c0004fd5:	89 c5                	mov    ebp,eax
c0004fd7:	85 c0                	test   eax,eax
c0004fd9:	0f 85 e6 03 00 00    	jne    c00053c5 <f_open+0x42c>
c0004fdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fe3:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fec:	83 ec 0c             	sub    esp,0xc
c0004fef:	68 60 04 00 00       	push   0x460
c0004ff4:	e8 a3 34 00 00       	call   c000849c <ff_memalloc>
c0004ff9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ffd:	83 c4 10             	add    esp,0x10
c0005000:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0005005:	0f 84 c0 03 00 00    	je     c00053cb <f_open+0x432>
c000500b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000500f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005013:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005019:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c000501c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000501f:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0005026:	8d 44 24 24          	lea    eax,[esp+0x24]
c000502a:	e8 40 fe ff ff       	call   c0004e6f <follow_path>
c000502f:	89 c5                	mov    ebp,eax
c0005031:	85 c0                	test   eax,eax
c0005033:	75 0c                	jne    c0005041 <f_open+0xa8>
c0005035:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c000503a:	79 05                	jns    c0005041 <f_open+0xa8>
c000503c:	bd 06 00 00 00       	mov    ebp,0x6
c0005041:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005047:	0f 84 84 01 00 00    	je     c00051d1 <f_open+0x238>
c000504d:	85 ed                	test   ebp,ebp
c000504f:	74 20                	je     c0005071 <f_open+0xd8>
c0005051:	83 fd 04             	cmp    ebp,0x4
c0005054:	0f 85 58 03 00 00    	jne    c00053b2 <f_open+0x419>
c000505a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000505e:	83 ce 08             	or     esi,0x8
c0005061:	e8 8a f2 ff ff       	call   c00042f0 <dir_register>
c0005066:	89 c5                	mov    ebp,eax
c0005068:	85 c0                	test   eax,eax
c000506a:	74 2f                	je     c000509b <f_open+0x102>
c000506c:	e9 41 03 00 00       	jmp    c00053b2 <f_open+0x419>
c0005071:	bd 07 00 00 00       	mov    ebp,0x7
c0005076:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c000507b:	0f 85 31 03 00 00    	jne    c00053b2 <f_open+0x419>
c0005081:	bd 08 00 00 00       	mov    ebp,0x8
c0005086:	f7 c7 04 00 00 00    	test   edi,0x4
c000508c:	0f 85 20 03 00 00    	jne    c00053b2 <f_open+0x419>
c0005092:	83 e7 08             	and    edi,0x8
c0005095:	0f 84 65 01 00 00    	je     c0005200 <f_open+0x267>
c000509b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000509f:	8a 02                	mov    al,BYTE PTR [edx]
c00050a1:	3c 04                	cmp    al,0x4
c00050a3:	0f 85 97 00 00 00    	jne    c0005140 <f_open+0x1a7>
c00050a9:	8d 42 10             	lea    eax,[edx+0x10]
c00050ac:	89 13                	mov    DWORD PTR [ebx],edx
c00050ae:	89 da                	mov    edx,ebx
c00050b0:	e8 80 fd ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c00050b5:	31 d2                	xor    edx,edx
c00050b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050bb:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050c0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c3:	83 c0 02             	add    eax,0x2
c00050c6:	e8 32 cc ff ff       	call   c0001cfd <mem_set>
c00050cb:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050d0:	31 d2                	xor    edx,edx
c00050d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050d6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d9:	83 c0 26             	add    eax,0x26
c00050dc:	e8 1c cc ff ff       	call   c0001cfd <mem_set>
c00050e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050e5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e8:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050ec:	ba 00 00 21 50       	mov    edx,0x50210000
c00050f1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050f4:	83 c0 08             	add    eax,0x8
c00050f7:	e8 e3 cb ff ff       	call   c0001cdf <st_dword>
c00050fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005100:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005103:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0005107:	8d 44 24 24          	lea    eax,[esp+0x24]
c000510b:	e8 b7 ea ff ff       	call   c0003bc7 <store_xdir>
c0005110:	89 c5                	mov    ebp,eax
c0005112:	85 c0                	test   eax,eax
c0005114:	0f 85 98 02 00 00    	jne    c00053b2 <f_open+0x419>
c000511a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000511d:	85 d2                	test   edx,edx
c000511f:	0f 84 db 00 00 00    	je     c0005200 <f_open+0x267>
c0005125:	31 c9                	xor    ecx,ecx
c0005127:	89 d8                	mov    eax,ebx
c0005129:	e8 8e e3 ff ff       	call   c00034bc <remove_chain>
c000512e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005132:	89 c5                	mov    ebp,eax
c0005134:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005137:	48                   	dec    eax
c0005138:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000513b:	e9 b8 00 00 00       	jmp    c00051f8 <f_open+0x25f>
c0005140:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005144:	89 ea                	mov    edx,ebp
c0005146:	e8 99 fc ff ff       	call   c0004de4 <ld_clust.isra.0>
c000514b:	ba 00 00 21 50       	mov    edx,0x50210000
c0005150:	89 c7                	mov    edi,eax
c0005152:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005155:	e8 85 cb ff ff       	call   c0001cdf <st_dword>
c000515a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000515e:	31 c9                	xor    ecx,ecx
c0005160:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005164:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005168:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000516c:	e8 9c fc ff ff       	call   c0004e0d <st_clust.isra.1>
c0005171:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005175:	31 d2                	xor    edx,edx
c0005177:	83 c0 1c             	add    eax,0x1c
c000517a:	e8 60 cb ff ff       	call   c0001cdf <st_dword>
c000517f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005183:	85 ff                	test   edi,edi
c0005185:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005189:	74 75                	je     c0005200 <f_open+0x267>
c000518b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518f:	31 c9                	xor    ecx,ecx
c0005191:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005194:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005197:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000519b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000519f:	89 fa                	mov    edx,edi
c00051a1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00051a5:	e8 12 e3 ff ff       	call   c00034bc <remove_chain>
c00051aa:	89 c5                	mov    ebp,eax
c00051ac:	85 c0                	test   eax,eax
c00051ae:	0f 85 fe 01 00 00    	jne    c00053b2 <f_open+0x419>
c00051b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c0:	4f                   	dec    edi
c00051c1:	e8 81 d2 ff ff       	call   c0002447 <move_window>
c00051c6:	89 c5                	mov    ebp,eax
c00051c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051cc:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051cf:	eb 27                	jmp    c00051f8 <f_open+0x25f>
c00051d1:	85 ed                	test   ebp,ebp
c00051d3:	0f 85 d9 01 00 00    	jne    c00053b2 <f_open+0x419>
c00051d9:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051dd:	bd 04 00 00 00       	mov    ebp,0x4
c00051e2:	a8 10                	test   al,0x10
c00051e4:	0f 85 c8 01 00 00    	jne    c00053b2 <f_open+0x419>
c00051ea:	83 e7 02             	and    edi,0x2
c00051ed:	74 11                	je     c0005200 <f_open+0x267>
c00051ef:	bd 07 00 00 00       	mov    ebp,0x7
c00051f4:	a8 01                	test   al,0x1
c00051f6:	eb 02                	jmp    c00051fa <f_open+0x261>
c00051f8:	85 ed                	test   ebp,ebp
c00051fa:	0f 85 b2 01 00 00    	jne    c00053b2 <f_open+0x419>
c0005200:	f7 c6 08 00 00 00    	test   esi,0x8
c0005206:	74 03                	je     c000520b <f_open+0x272>
c0005208:	83 ce 40             	or     esi,0x40
c000520b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000520f:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005212:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005215:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005218:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000521b:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000521f:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005222:	8a 02                	mov    al,BYTE PTR [edx]
c0005224:	3c 04                	cmp    al,0x4
c0005226:	75 2a                	jne    c0005252 <f_open+0x2b9>
c0005228:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000522c:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005231:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005234:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005238:	30 c0                	xor    al,al
c000523a:	09 c8                	or     eax,ecx
c000523c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000523f:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005243:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005246:	8d 42 10             	lea    eax,[edx+0x10]
c0005249:	89 da                	mov    edx,ebx
c000524b:	e8 e5 fb ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0005250:	eb 1c                	jmp    c000526e <f_open+0x2d5>
c0005252:	89 fa                	mov    edx,edi
c0005254:	e8 8b fb ff ff       	call   c0004de4 <ld_clust.isra.0>
c0005259:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000525c:	8d 47 1c             	lea    eax,[edi+0x1c]
c000525f:	e8 12 ca ff ff       	call   c0001c76 <ld_dword>
c0005264:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000526b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005272:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005279:	89 03                	mov    DWORD PTR [ebx],eax
c000527b:	31 d2                	xor    edx,edx
c000527d:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005281:	b9 00 02 00 00       	mov    ecx,0x200
c0005286:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000528a:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000528e:	89 f0                	mov    eax,esi
c0005290:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005297:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000529a:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00052a1:	8d 43 50             	lea    eax,[ebx+0x50]
c00052a4:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052ab:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052b6:	e8 42 ca ff ff       	call   c0001cfd <mem_set>
c00052bb:	83 e6 20             	and    esi,0x20
c00052be:	75 07                	jne    c00052c7 <f_open+0x32e>
c00052c0:	31 ed                	xor    ebp,ebp
c00052c2:	e9 eb 00 00 00       	jmp    c00053b2 <f_open+0x419>
c00052c7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052ca:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d9:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052dd:	74 e1                	je     c00052c0 <f_open+0x327>
c00052df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052e7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052ea:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052f1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052f4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f8:	31 ff                	xor    edi,edi
c00052fa:	c1 e5 09             	shl    ebp,0x9
c00052fd:	89 ee                	mov    esi,ebp
c00052ff:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005303:	89 f8                	mov    eax,edi
c0005305:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005309:	73 22                	jae    c000532d <f_open+0x394>
c000530b:	89 d8                	mov    eax,ebx
c000530d:	e8 bd dc ff ff       	call   c0002fcf <get_fat>
c0005312:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005316:	89 c2                	mov    edx,eax
c0005318:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000531c:	83 f8 01             	cmp    eax,0x1
c000531f:	76 10                	jbe    c0005331 <f_open+0x398>
c0005321:	83 f8 ff             	cmp    eax,0xffffffff
c0005324:	75 d9                	jne    c00052ff <f_open+0x366>
c0005326:	bd 01 00 00 00       	mov    ebp,0x1
c000532b:	eb 09                	jmp    c0005336 <f_open+0x39d>
c000532d:	31 ed                	xor    ebp,ebp
c000532f:	eb 05                	jmp    c0005336 <f_open+0x39d>
c0005331:	bd 02 00 00 00       	mov    ebp,0x2
c0005336:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005339:	85 ed                	test   ebp,ebp
c000533b:	75 75                	jne    c00053b2 <f_open+0x419>
c000533d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005341:	25 ff 01 00 00       	and    eax,0x1ff
c0005346:	0f 84 74 ff ff ff    	je     c00052c0 <f_open+0x327>
c000534c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005350:	bd 02 00 00 00       	mov    ebp,0x2
c0005355:	89 c8                	mov    eax,ecx
c0005357:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000535b:	e8 a2 cb ff ff       	call   c0001f02 <clst2sect>
c0005360:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005364:	89 d7                	mov    edi,edx
c0005366:	09 c7                	or     edi,eax
c0005368:	74 48                	je     c00053b2 <f_open+0x419>
c000536a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000536e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005372:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000537a:	0f ac fe 09          	shrd   esi,edi,0x9
c000537e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005382:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005386:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005389:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000538d:	83 ec 0c             	sub    esp,0xc
c0005390:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005393:	6a 01                	push   0x1
c0005395:	52                   	push   edx
c0005396:	50                   	push   eax
c0005397:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000539b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000539f:	50                   	push   eax
c00053a0:	e8 79 c8 ff ff       	call   c0001c1e <disk_read>
c00053a5:	83 c4 20             	add    esp,0x20
c00053a8:	85 c0                	test   eax,eax
c00053aa:	0f 95 c0             	setne  al
c00053ad:	0f b6 c0             	movzx  eax,al
c00053b0:	89 c5                	mov    ebp,eax
c00053b2:	83 ec 0c             	sub    esp,0xc
c00053b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b9:	e8 f4 30 00 00       	call   c00084b2 <ff_memfree>
c00053be:	83 c4 10             	add    esp,0x10
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	74 06                	je     c00053cb <f_open+0x432>
c00053c5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053cb:	83 c4 7c             	add    esp,0x7c
c00053ce:	89 e8                	mov    eax,ebp
c00053d0:	5b                   	pop    ebx
c00053d1:	5e                   	pop    esi
c00053d2:	5f                   	pop    edi
c00053d3:	5d                   	pop    ebp
c00053d4:	c3                   	ret    

c00053d5 <f_read>:
c00053d5:	55                   	push   ebp
c00053d6:	57                   	push   edi
c00053d7:	56                   	push   esi
c00053d8:	53                   	push   ebx
c00053d9:	83 ec 2c             	sub    esp,0x2c
c00053dc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053ea:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ee:	89 d8                	mov    eax,ebx
c00053f0:	e8 77 cf ff ff       	call   c000236c <validate>
c00053f5:	89 c5                	mov    ebp,eax
c00053f7:	85 c0                	test   eax,eax
c00053f9:	0f 85 4c 02 00 00    	jne    c000564b <f_read+0x276>
c00053ff:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005403:	85 ed                	test   ebp,ebp
c0005405:	0f 85 40 02 00 00    	jne    c000564b <f_read+0x276>
c000540b:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c000540f:	0f 84 31 02 00 00    	je     c0005646 <f_read+0x271>
c0005415:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005418:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000541b:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000541e:	bf 00 00 00 00       	mov    edi,0x0
c0005423:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005426:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000542a:	89 d1                	mov    ecx,edx
c000542c:	19 f9                	sbb    ecx,edi
c000542e:	0f 83 cf 00 00 00    	jae    c0005503 <f_read+0x12e>
c0005434:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005438:	e9 c6 00 00 00       	jmp    c0005503 <f_read+0x12e>
c000543d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005440:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005443:	89 d0                	mov    eax,edx
c0005445:	25 ff 01 00 00       	and    eax,0x1ff
c000544a:	0f 85 c9 01 00 00    	jne    c0005619 <f_read+0x244>
c0005450:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005454:	89 d6                	mov    esi,edx
c0005456:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000545a:	89 cf                	mov    edi,ecx
c000545c:	48                   	dec    eax
c000545d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005461:	21 f0                	and    eax,esi
c0005463:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005467:	0f 84 a6 00 00 00    	je     c0005513 <f_read+0x13e>
c000546d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005471:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005474:	89 c8                	mov    eax,ecx
c0005476:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005479:	e8 84 ca ff ff       	call   c0001f02 <clst2sect>
c000547e:	89 d7                	mov    edi,edx
c0005480:	09 c7                	or     edi,eax
c0005482:	0f 84 b4 00 00 00    	je     c000553c <f_read+0x167>
c0005488:	31 ff                	xor    edi,edi
c000548a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000548e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005491:	01 c6                	add    esi,eax
c0005493:	11 d7                	adc    edi,edx
c0005495:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000549d:	0f 86 fd 00 00 00    	jbe    c00055a0 <f_read+0x1cb>
c00054a3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054ab:	c1 e8 09             	shr    eax,0x9
c00054ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00054b1:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054b5:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b8:	39 c2                	cmp    edx,eax
c00054ba:	76 07                	jbe    c00054c3 <f_read+0xee>
c00054bc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00054c3:	83 ec 0c             	sub    esp,0xc
c00054c6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054ca:	57                   	push   edi
c00054cb:	56                   	push   esi
c00054cc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054d0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054d4:	50                   	push   eax
c00054d5:	e8 44 c7 ff ff       	call   c0001c1e <disk_read>
c00054da:	83 c4 20             	add    esp,0x20
c00054dd:	85 c0                	test   eax,eax
c00054df:	75 6e                	jne    c000554f <f_read+0x17a>
c00054e1:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054e5:	78 7e                	js     c0005565 <f_read+0x190>
c00054e7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054ea:	c1 e6 09             	shl    esi,0x9
c00054ed:	31 ff                	xor    edi,edi
c00054ef:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054f3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054f7:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054fb:	01 30                	add    DWORD PTR [eax],esi
c00054fd:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005500:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005503:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005508:	0f 85 2f ff ff ff    	jne    c000543d <f_read+0x68>
c000550e:	e9 38 01 00 00       	jmp    c000564b <f_read+0x276>
c0005513:	89 c8                	mov    eax,ecx
c0005515:	09 d0                	or     eax,edx
c0005517:	75 05                	jne    c000551e <f_read+0x149>
c0005519:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000551c:	eb 19                	jmp    c0005537 <f_read+0x162>
c000551e:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005522:	74 09                	je     c000552d <f_read+0x158>
c0005524:	89 d8                	mov    eax,ebx
c0005526:	e8 f8 c9 ff ff       	call   c0001f23 <clmt_clust>
c000552b:	eb 0a                	jmp    c0005537 <f_read+0x162>
c000552d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005530:	89 d8                	mov    eax,ebx
c0005532:	e8 98 da ff ff       	call   c0002fcf <get_fat>
c0005537:	83 f8 01             	cmp    eax,0x1
c000553a:	77 0e                	ja     c000554a <f_read+0x175>
c000553c:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005540:	bd 02 00 00 00       	mov    ebp,0x2
c0005545:	e9 01 01 00 00       	jmp    c000564b <f_read+0x276>
c000554a:	83 f8 ff             	cmp    eax,0xffffffff
c000554d:	75 0e                	jne    c000555d <f_read+0x188>
c000554f:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005553:	bd 01 00 00 00       	mov    ebp,0x1
c0005558:	e9 ee 00 00 00       	jmp    c000564b <f_read+0x276>
c000555d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005560:	e9 08 ff ff ff       	jmp    c000546d <f_read+0x98>
c0005565:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005568:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000556b:	29 f0                	sub    eax,esi
c000556d:	19 fa                	sbb    edx,edi
c000556f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005572:	89 d7                	mov    edi,edx
c0005574:	ba 00 00 00 00       	mov    edx,0x0
c0005579:	89 f9                	mov    ecx,edi
c000557b:	19 d1                	sbb    ecx,edx
c000557d:	0f 83 64 ff ff ff    	jae    c00054e7 <f_read+0x112>
c0005583:	89 c7                	mov    edi,eax
c0005585:	8d 53 50             	lea    edx,[ebx+0x50]
c0005588:	c1 e7 09             	shl    edi,0x9
c000558b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558f:	b9 00 02 00 00       	mov    ecx,0x200
c0005594:	01 f8                	add    eax,edi
c0005596:	e8 4d c7 ff ff       	call   c0001ce8 <mem_cpy>
c000559b:	e9 47 ff ff ff       	jmp    c00054e7 <f_read+0x112>
c00055a0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00055a3:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00055a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055ad:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055b1:	75 05                	jne    c00055b8 <f_read+0x1e3>
c00055b3:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055b6:	74 5b                	je     c0005613 <f_read+0x23e>
c00055b8:	8d 43 50             	lea    eax,[ebx+0x50]
c00055bb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055c3:	79 2a                	jns    c00055ef <f_read+0x21a>
c00055c5:	83 ec 0c             	sub    esp,0xc
c00055c8:	6a 01                	push   0x1
c00055ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055d6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055da:	50                   	push   eax
c00055db:	e8 54 c6 ff ff       	call   c0001c34 <disk_write>
c00055e0:	83 c4 20             	add    esp,0x20
c00055e3:	85 c0                	test   eax,eax
c00055e5:	0f 85 64 ff ff ff    	jne    c000554f <f_read+0x17a>
c00055eb:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ef:	83 ec 0c             	sub    esp,0xc
c00055f2:	6a 01                	push   0x1
c00055f4:	57                   	push   edi
c00055f5:	56                   	push   esi
c00055f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055fe:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005602:	50                   	push   eax
c0005603:	e8 16 c6 ff ff       	call   c0001c1e <disk_read>
c0005608:	83 c4 20             	add    esp,0x20
c000560b:	85 c0                	test   eax,eax
c000560d:	0f 85 3c ff ff ff    	jne    c000554f <f_read+0x17a>
c0005613:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005616:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005619:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000561c:	ba 00 02 00 00       	mov    edx,0x200
c0005621:	25 ff 01 00 00       	and    eax,0x1ff
c0005626:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000562a:	29 c2                	sub    edx,eax
c000562c:	39 d6                	cmp    esi,edx
c000562e:	76 02                	jbe    c0005632 <f_read+0x25d>
c0005630:	89 d6                	mov    esi,edx
c0005632:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005636:	89 f1                	mov    ecx,esi
c0005638:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000563c:	e8 a7 c6 ff ff       	call   c0001ce8 <mem_cpy>
c0005641:	e9 a7 fe ff ff       	jmp    c00054ed <f_read+0x118>
c0005646:	bd 07 00 00 00       	mov    ebp,0x7
c000564b:	83 c4 2c             	add    esp,0x2c
c000564e:	89 e8                	mov    eax,ebp
c0005650:	5b                   	pop    ebx
c0005651:	5e                   	pop    esi
c0005652:	5f                   	pop    edi
c0005653:	5d                   	pop    ebp
c0005654:	c3                   	ret    

c0005655 <f_write>:
c0005655:	55                   	push   ebp
c0005656:	57                   	push   edi
c0005657:	56                   	push   esi
c0005658:	53                   	push   ebx
c0005659:	83 ec 2c             	sub    esp,0x2c
c000565c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005660:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005664:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000566a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000566e:	89 d8                	mov    eax,ebx
c0005670:	e8 f7 cc ff ff       	call   c000236c <validate>
c0005675:	89 c5                	mov    ebp,eax
c0005677:	85 c0                	test   eax,eax
c0005679:	0f 85 86 02 00 00    	jne    c0005905 <f_write+0x2b0>
c000567f:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005683:	85 ed                	test   ebp,ebp
c0005685:	0f 85 7a 02 00 00    	jne    c0005905 <f_write+0x2b0>
c000568b:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000568f:	0f 84 6b 02 00 00    	je     c0005900 <f_write+0x2ab>
c0005695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005699:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000569c:	0f 84 43 01 00 00    	je     c00057e5 <f_write+0x190>
c00056a2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056a5:	89 c1                	mov    ecx,eax
c00056a7:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056ab:	0f 83 34 01 00 00    	jae    c00057e5 <f_write+0x190>
c00056b1:	f7 d0                	not    eax
c00056b3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056b7:	e9 29 01 00 00       	jmp    c00057e5 <f_write+0x190>
c00056bc:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056bf:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056c2:	89 d0                	mov    eax,edx
c00056c4:	25 ff 01 00 00       	and    eax,0x1ff
c00056c9:	0f 85 00 02 00 00    	jne    c00058cf <f_write+0x27a>
c00056cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056d3:	89 d6                	mov    esi,edx
c00056d5:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d9:	89 cf                	mov    edi,ecx
c00056db:	48                   	dec    eax
c00056dc:	0f ac fe 09          	shrd   esi,edi,0x9
c00056e0:	21 f0                	and    eax,esi
c00056e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056e6:	0f 84 06 01 00 00    	je     c00057f2 <f_write+0x19d>
c00056ec:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056f0:	0f 88 6e 01 00 00    	js     c0005864 <f_write+0x20f>
c00056f6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056fa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056fd:	89 c8                	mov    eax,ecx
c00056ff:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005703:	e8 fa c7 ff ff       	call   c0001f02 <clst2sect>
c0005708:	89 d1                	mov    ecx,edx
c000570a:	09 c1                	or     ecx,eax
c000570c:	0f 84 1c 01 00 00    	je     c000582e <f_write+0x1d9>
c0005712:	31 ff                	xor    edi,edi
c0005714:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005718:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000571c:	01 c6                	add    esi,eax
c000571e:	11 d7                	adc    edi,edx
c0005720:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005728:	0f 86 63 01 00 00    	jbe    c0005891 <f_write+0x23c>
c000572e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005732:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005736:	c1 e8 09             	shr    eax,0x9
c0005739:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000573d:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005741:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005745:	39 c2                	cmp    edx,eax
c0005747:	76 08                	jbe    c0005751 <f_write+0xfc>
c0005749:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000574d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005751:	83 ec 0c             	sub    esp,0xc
c0005754:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005758:	57                   	push   edi
c0005759:	56                   	push   esi
c000575a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000575e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005762:	50                   	push   eax
c0005763:	e8 cc c4 ff ff       	call   c0001c34 <disk_write>
c0005768:	83 c4 20             	add    esp,0x20
c000576b:	85 c0                	test   eax,eax
c000576d:	0f 85 ce 00 00 00    	jne    c0005841 <f_write+0x1ec>
c0005773:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005776:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005779:	29 f0                	sub    eax,esi
c000577b:	19 fa                	sbb    edx,edi
c000577d:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005781:	89 d7                	mov    edi,edx
c0005783:	ba 00 00 00 00       	mov    edx,0x0
c0005788:	89 f9                	mov    ecx,edi
c000578a:	19 d1                	sbb    ecx,edx
c000578c:	73 1c                	jae    c00057aa <f_write+0x155>
c000578e:	89 c7                	mov    edi,eax
c0005790:	b9 00 02 00 00       	mov    ecx,0x200
c0005795:	c1 e7 09             	shl    edi,0x9
c0005798:	8d 43 50             	lea    eax,[ebx+0x50]
c000579b:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000579f:	89 fa                	mov    edx,edi
c00057a1:	e8 42 c5 ff ff       	call   c0001ce8 <mem_cpy>
c00057a6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057aa:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057ae:	c1 e6 09             	shl    esi,0x9
c00057b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057b5:	31 ff                	xor    edi,edi
c00057b7:	01 30                	add    DWORD PTR [eax],esi
c00057b9:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057bd:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057c4:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057c7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057ca:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057cd:	89 c1                	mov    ecx,eax
c00057cf:	39 f2                	cmp    edx,esi
c00057d1:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057d4:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057d7:	19 f9                	sbb    ecx,edi
c00057d9:	73 04                	jae    c00057df <f_write+0x18a>
c00057db:	89 f2                	mov    edx,esi
c00057dd:	89 f8                	mov    eax,edi
c00057df:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057e2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057e5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057ea:	0f 85 cc fe ff ff    	jne    c00056bc <f_write+0x67>
c00057f0:	eb 2e                	jmp    c0005820 <f_write+0x1cb>
c00057f2:	89 c8                	mov    eax,ecx
c00057f4:	09 d0                	or     eax,edx
c00057f6:	75 0b                	jne    c0005803 <f_write+0x1ae>
c00057f8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057fb:	31 d2                	xor    edx,edx
c00057fd:	85 c0                	test   eax,eax
c00057ff:	75 28                	jne    c0005829 <f_write+0x1d4>
c0005801:	eb 12                	jmp    c0005815 <f_write+0x1c0>
c0005803:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005807:	74 09                	je     c0005812 <f_write+0x1bd>
c0005809:	89 d8                	mov    eax,ebx
c000580b:	e8 13 c7 ff ff       	call   c0001f23 <clmt_clust>
c0005810:	eb 0a                	jmp    c000581c <f_write+0x1c7>
c0005812:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005815:	89 d8                	mov    eax,ebx
c0005817:	e8 a1 da ff ff       	call   c00032bd <create_chain>
c000581c:	85 c0                	test   eax,eax
c000581e:	75 09                	jne    c0005829 <f_write+0x1d4>
c0005820:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005824:	e9 dc 00 00 00       	jmp    c0005905 <f_write+0x2b0>
c0005829:	83 f8 01             	cmp    eax,0x1
c000582c:	75 0e                	jne    c000583c <f_write+0x1e7>
c000582e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005832:	bd 02 00 00 00       	mov    ebp,0x2
c0005837:	e9 c9 00 00 00       	jmp    c0005905 <f_write+0x2b0>
c000583c:	83 f8 ff             	cmp    eax,0xffffffff
c000583f:	75 0e                	jne    c000584f <f_write+0x1fa>
c0005841:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005845:	bd 01 00 00 00       	mov    ebp,0x1
c000584a:	e9 b6 00 00 00       	jmp    c0005905 <f_write+0x2b0>
c000584f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005852:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005856:	0f 85 90 fe ff ff    	jne    c00056ec <f_write+0x97>
c000585c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000585f:	e9 88 fe ff ff       	jmp    c00056ec <f_write+0x97>
c0005864:	83 ec 0c             	sub    esp,0xc
c0005867:	8d 43 50             	lea    eax,[ebx+0x50]
c000586a:	6a 01                	push   0x1
c000586c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000586f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005872:	50                   	push   eax
c0005873:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005877:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000587b:	50                   	push   eax
c000587c:	e8 b3 c3 ff ff       	call   c0001c34 <disk_write>
c0005881:	83 c4 20             	add    esp,0x20
c0005884:	85 c0                	test   eax,eax
c0005886:	75 b9                	jne    c0005841 <f_write+0x1ec>
c0005888:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000588c:	e9 65 fe ff ff       	jmp    c00056f6 <f_write+0xa1>
c0005891:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005894:	75 05                	jne    c000589b <f_write+0x246>
c0005896:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005899:	74 2e                	je     c00058c9 <f_write+0x274>
c000589b:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000589e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058a1:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00058a4:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00058a7:	73 20                	jae    c00058c9 <f_write+0x274>
c00058a9:	83 ec 0c             	sub    esp,0xc
c00058ac:	8d 43 50             	lea    eax,[ebx+0x50]
c00058af:	6a 01                	push   0x1
c00058b1:	57                   	push   edi
c00058b2:	56                   	push   esi
c00058b3:	50                   	push   eax
c00058b4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b8:	50                   	push   eax
c00058b9:	e8 60 c3 ff ff       	call   c0001c1e <disk_read>
c00058be:	83 c4 20             	add    esp,0x20
c00058c1:	85 c0                	test   eax,eax
c00058c3:	0f 85 78 ff ff ff    	jne    c0005841 <f_write+0x1ec>
c00058c9:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058cc:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058cf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058d2:	ba 00 02 00 00       	mov    edx,0x200
c00058d7:	25 ff 01 00 00       	and    eax,0x1ff
c00058dc:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058e0:	29 c2                	sub    edx,eax
c00058e2:	39 d6                	cmp    esi,edx
c00058e4:	76 02                	jbe    c00058e8 <f_write+0x293>
c00058e6:	89 d6                	mov    esi,edx
c00058e8:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058ec:	89 f1                	mov    ecx,esi
c00058ee:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058f2:	e8 f1 c3 ff ff       	call   c0001ce8 <mem_cpy>
c00058f7:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058fb:	e9 b1 fe ff ff       	jmp    c00057b1 <f_write+0x15c>
c0005900:	bd 07 00 00 00       	mov    ebp,0x7
c0005905:	83 c4 2c             	add    esp,0x2c
c0005908:	89 e8                	mov    eax,ebp
c000590a:	5b                   	pop    ebx
c000590b:	5e                   	pop    esi
c000590c:	5f                   	pop    edi
c000590d:	5d                   	pop    ebp
c000590e:	c3                   	ret    

c000590f <f_sync>:
c000590f:	56                   	push   esi
c0005910:	53                   	push   ebx
c0005911:	83 ec 64             	sub    esp,0x64
c0005914:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005918:	8d 54 24 10          	lea    edx,[esp+0x10]
c000591c:	89 d8                	mov    eax,ebx
c000591e:	e8 49 ca ff ff       	call   c000236c <validate>
c0005923:	85 c0                	test   eax,eax
c0005925:	0f 85 ba 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000592b:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000592e:	f6 c2 40             	test   dl,0x40
c0005931:	0f 84 ae 01 00 00    	je     c0005ae5 <f_sync+0x1d6>
c0005937:	84 d2                	test   dl,dl
c0005939:	79 33                	jns    c000596e <f_sync+0x5f>
c000593b:	83 ec 0c             	sub    esp,0xc
c000593e:	8d 43 50             	lea    eax,[ebx+0x50]
c0005941:	6a 01                	push   0x1
c0005943:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005946:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005949:	50                   	push   eax
c000594a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000594e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005952:	50                   	push   eax
c0005953:	e8 dc c2 ff ff       	call   c0001c34 <disk_write>
c0005958:	83 c4 20             	add    esp,0x20
c000595b:	89 c2                	mov    edx,eax
c000595d:	b8 01 00 00 00       	mov    eax,0x1
c0005962:	85 d2                	test   edx,edx
c0005964:	0f 85 7b 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000596a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000596e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005972:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005975:	0f 85 11 01 00 00    	jne    c0005a8c <f_sync+0x17d>
c000597b:	89 d8                	mov    eax,ebx
c000597d:	e8 13 d6 ff ff       	call   c0002f95 <fill_first_frag>
c0005982:	85 c0                	test   eax,eax
c0005984:	0f 85 5b 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000598a:	83 c9 ff             	or     ecx,0xffffffff
c000598d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005990:	89 d8                	mov    eax,ebx
c0005992:	e8 c9 d5 ff ff       	call   c0002f60 <fill_last_frag>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 46 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000599f:	83 ec 0c             	sub    esp,0xc
c00059a2:	68 60 04 00 00       	push   0x460
c00059a7:	e8 f0 2a 00 00       	call   c000849c <ff_memalloc>
c00059ac:	83 c4 10             	add    esp,0x10
c00059af:	89 c6                	mov    esi,eax
c00059b1:	b8 11 00 00 00       	mov    eax,0x11
c00059b6:	85 f6                	test   esi,esi
c00059b8:	0f 84 27 01 00 00    	je     c0005ae5 <f_sync+0x1d6>
c00059be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c2:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c8:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059cb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059ce:	89 da                	mov    edx,ebx
c00059d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059d4:	e8 af df ff ff       	call   c0003988 <load_obj_xdir>
c00059d9:	85 c0                	test   eax,eax
c00059db:	0f 85 95 00 00 00    	jne    c0005a76 <f_sync+0x167>
c00059e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e8:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059ec:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ef:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059f2:	83 ca 01             	or     edx,0x1
c00059f5:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059fb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fe:	83 c0 34             	add    eax,0x34
c0005a01:	e8 d9 c2 ff ff       	call   c0001cdf <st_dword>
c0005a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a0a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a0d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a10:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a13:	83 c0 38             	add    eax,0x38
c0005a16:	e8 c7 c2 ff ff       	call   c0001ce2 <st_qword>
c0005a1b:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a22:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a28:	83 c0 28             	add    eax,0x28
c0005a2b:	e8 b2 c2 ff ff       	call   c0001ce2 <st_qword>
c0005a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a34:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a39:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a3c:	83 c0 0c             	add    eax,0xc
c0005a3f:	e8 9b c2 ff ff       	call   c0001cdf <st_dword>
c0005a44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a48:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a4b:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a4f:	31 d2                	xor    edx,edx
c0005a51:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a54:	83 c0 10             	add    eax,0x10
c0005a57:	e8 83 c2 ff ff       	call   c0001cdf <st_dword>
c0005a5c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a60:	e8 62 e1 ff ff       	call   c0003bc7 <store_xdir>
c0005a65:	85 c0                	test   eax,eax
c0005a67:	75 0d                	jne    c0005a76 <f_sync+0x167>
c0005a69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a6d:	e8 00 eb ff ff       	call   c0004572 <sync_fs>
c0005a72:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a7a:	83 ec 0c             	sub    esp,0xc
c0005a7d:	56                   	push   esi
c0005a7e:	e8 2f 2a 00 00       	call   c00084b2 <ff_memfree>
c0005a83:	83 c4 10             	add    esp,0x10
c0005a86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a8a:	eb 59                	jmp    c0005ae5 <f_sync+0x1d6>
c0005a8c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a8f:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a92:	e8 b0 c9 ff ff       	call   c0002447 <move_window>
c0005a97:	85 c0                	test   eax,eax
c0005a99:	75 4a                	jne    c0005ae5 <f_sync+0x1d6>
c0005a9b:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a9e:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005aa2:	89 f2                	mov    edx,esi
c0005aa4:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005aa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa9:	e8 5f f3 ff ff       	call   c0004e0d <st_clust.isra.1>
c0005aae:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005ab1:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005ab4:	e8 26 c2 ff ff       	call   c0001cdf <st_dword>
c0005ab9:	8d 46 16             	lea    eax,[esi+0x16]
c0005abc:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ac1:	e8 19 c2 ff ff       	call   c0001cdf <st_dword>
c0005ac6:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac9:	31 d2                	xor    edx,edx
c0005acb:	e8 0b c2 ff ff       	call   c0001cdb <st_word>
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005adc:	e8 91 ea ff ff       	call   c0004572 <sync_fs>
c0005ae1:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005ae5:	83 c4 64             	add    esp,0x64
c0005ae8:	5b                   	pop    ebx
c0005ae9:	5e                   	pop    esi
c0005aea:	c3                   	ret    

c0005aeb <f_close>:
c0005aeb:	53                   	push   ebx
c0005aec:	83 ec 24             	sub    esp,0x24
c0005aef:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005af3:	53                   	push   ebx
c0005af4:	e8 16 fe ff ff       	call   c000590f <f_sync>
c0005af9:	83 c4 10             	add    esp,0x10
c0005afc:	85 c0                	test   eax,eax
c0005afe:	75 15                	jne    c0005b15 <f_close+0x2a>
c0005b00:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005b04:	89 d8                	mov    eax,ebx
c0005b06:	e8 61 c8 ff ff       	call   c000236c <validate>
c0005b0b:	85 c0                	test   eax,eax
c0005b0d:	75 06                	jne    c0005b15 <f_close+0x2a>
c0005b0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b15:	83 c4 18             	add    esp,0x18
c0005b18:	5b                   	pop    ebx
c0005b19:	c3                   	ret    

c0005b1a <f_lseek>:
c0005b1a:	55                   	push   ebp
c0005b1b:	57                   	push   edi
c0005b1c:	56                   	push   esi
c0005b1d:	53                   	push   ebx
c0005b1e:	83 ec 3c             	sub    esp,0x3c
c0005b21:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b25:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b29:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b2d:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b30:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b3a:	e8 2d c8 ff ff       	call   c000236c <validate>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	85 c0                	test   eax,eax
c0005b45:	0f 85 7a 04 00 00    	jne    c0005fc5 <f_lseek+0x4ab>
c0005b4b:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b53:	85 c0                	test   eax,eax
c0005b55:	0f 85 6a 04 00 00    	jne    c0005fc5 <f_lseek+0x4ab>
c0005b5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b5f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b62:	74 0c                	je     c0005b70 <f_lseek+0x56>
c0005b64:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b67:	85 c0                	test   eax,eax
c0005b69:	75 1f                	jne    c0005b8a <f_lseek+0x70>
c0005b6b:	e9 b5 01 00 00       	jmp    c0005d25 <f_lseek+0x20b>
c0005b70:	83 c9 ff             	or     ecx,0xffffffff
c0005b73:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b76:	89 d8                	mov    eax,ebx
c0005b78:	e8 e3 d3 ff ff       	call   c0002f60 <fill_last_frag>
c0005b7d:	85 c0                	test   eax,eax
c0005b7f:	74 e3                	je     c0005b64 <f_lseek+0x4a>
c0005b81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b85:	e9 3b 04 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005b8a:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b8f:	0f 85 ac 00 00 00    	jne    c0005c41 <f_lseek+0x127>
c0005b95:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b99:	0f 85 a2 00 00 00    	jne    c0005c41 <f_lseek+0x127>
c0005b9f:	8d 78 04             	lea    edi,[eax+0x4]
c0005ba2:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005ba5:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ba7:	be 02 00 00 00       	mov    esi,0x2
c0005bac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005bb0:	85 ed                	test   ebp,ebp
c0005bb2:	74 73                	je     c0005c27 <f_lseek+0x10d>
c0005bb4:	89 e9                	mov    ecx,ebp
c0005bb6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bbd:	ff 04 24             	inc    DWORD PTR [esp]
c0005bc0:	89 ca                	mov    edx,ecx
c0005bc2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bc6:	89 d8                	mov    eax,ebx
c0005bc8:	e8 02 d4 ff ff       	call   c0002fcf <get_fat>
c0005bcd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd1:	83 f8 01             	cmp    eax,0x1
c0005bd4:	77 11                	ja     c0005be7 <f_lseek+0xcd>
c0005bd6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bda:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005be2:	e9 de 03 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005be7:	83 f8 ff             	cmp    eax,0xffffffff
c0005bea:	75 11                	jne    c0005bfd <f_lseek+0xe3>
c0005bec:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bf0:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf8:	e9 c8 03 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005bfd:	8d 51 01             	lea    edx,[ecx+0x1]
c0005c00:	89 c1                	mov    ecx,eax
c0005c02:	39 c2                	cmp    edx,eax
c0005c04:	74 b7                	je     c0005bbd <f_lseek+0xa3>
c0005c06:	83 c6 02             	add    esi,0x2
c0005c09:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c0d:	72 0b                	jb     c0005c1a <f_lseek+0x100>
c0005c0f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c12:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c15:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c17:	83 c7 08             	add    edi,0x8
c0005c1a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c1e:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c21:	76 04                	jbe    c0005c27 <f_lseek+0x10d>
c0005c23:	89 c5                	mov    ebp,eax
c0005c25:	eb 8d                	jmp    c0005bb4 <f_lseek+0x9a>
c0005c27:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c2a:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c2e:	89 30                	mov    DWORD PTR [eax],esi
c0005c30:	0f 87 87 03 00 00    	ja     c0005fbd <f_lseek+0x4a3>
c0005c36:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c3c:	e9 84 03 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005c41:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c44:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c53:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c5a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c5e:	73 0f                	jae    c0005c6f <f_lseek+0x155>
c0005c60:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c63:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c6b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c77:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c7a:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c81:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c85:	0f 84 3a 03 00 00    	je     c0005fc5 <f_lseek+0x4ab>
c0005c8b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c8f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c93:	83 c6 ff             	add    esi,0xffffffff
c0005c96:	89 d8                	mov    eax,ebx
c0005c98:	83 d7 ff             	adc    edi,0xffffffff
c0005c9b:	89 f2                	mov    edx,esi
c0005c9d:	89 f9                	mov    ecx,edi
c0005c9f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005ca3:	89 34 24             	mov    DWORD PTR [esp],esi
c0005ca6:	e8 78 c2 ff ff       	call   c0001f23 <clmt_clust>
c0005cab:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005caf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cb2:	89 c2                	mov    edx,eax
c0005cb4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb8:	89 c8                	mov    eax,ecx
c0005cba:	e8 43 c2 ff ff       	call   c0001f02 <clst2sect>
c0005cbf:	89 d7                	mov    edi,edx
c0005cc1:	09 c7                	or     edi,eax
c0005cc3:	0f 84 0d ff ff ff    	je     c0005bd6 <f_lseek+0xbc>
c0005cc9:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005ccd:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005cd3:	0f 84 ec 02 00 00    	je     c0005fc5 <f_lseek+0x4ab>
c0005cd9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cdd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ce1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ce4:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce8:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cec:	4d                   	dec    ebp
c0005ced:	31 ff                	xor    edi,edi
c0005cef:	21 ee                	and    esi,ebp
c0005cf1:	01 c6                	add    esi,eax
c0005cf3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cf6:	11 d7                	adc    edi,edx
c0005cf8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cfb:	39 fa                	cmp    edx,edi
c0005cfd:	75 08                	jne    c0005d07 <f_lseek+0x1ed>
c0005cff:	39 f0                	cmp    eax,esi
c0005d01:	0f 84 be 02 00 00    	je     c0005fc5 <f_lseek+0x4ab>
c0005d07:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d0a:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d0e:	0f 89 80 02 00 00    	jns    c0005f94 <f_lseek+0x47a>
c0005d14:	83 ec 0c             	sub    esp,0xc
c0005d17:	6a 01                	push   0x1
c0005d19:	52                   	push   edx
c0005d1a:	50                   	push   eax
c0005d1b:	55                   	push   ebp
c0005d1c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d20:	e9 5a 02 00 00       	jmp    c0005f7f <f_lseek+0x465>
c0005d25:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d29:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d2c:	74 16                	je     c0005d44 <f_lseek+0x22a>
c0005d2e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d33:	76 0f                	jbe    c0005d44 <f_lseek+0x22a>
c0005d35:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d3c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d44:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d47:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d4a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d4d:	89 c7                	mov    edi,eax
c0005d4f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d53:	73 0d                	jae    c0005d62 <f_lseek+0x248>
c0005d55:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d59:	75 07                	jne    c0005d62 <f_lseek+0x248>
c0005d5b:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d5e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d62:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d65:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d68:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d6c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d73:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d7a:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d7d:	75 09                	jne    c0005d88 <f_lseek+0x26e>
c0005d7f:	31 f6                	xor    esi,esi
c0005d81:	31 ff                	xor    edi,edi
c0005d83:	e9 af 01 00 00       	jmp    c0005f37 <f_lseek+0x41d>
c0005d88:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d8c:	89 d7                	mov    edi,edx
c0005d8e:	c1 e1 09             	shl    ecx,0x9
c0005d91:	09 c7                	or     edi,eax
c0005d93:	89 cd                	mov    ebp,ecx
c0005d95:	74 6d                	je     c0005e04 <f_lseek+0x2ea>
c0005d97:	83 c0 ff             	add    eax,0xffffffff
c0005d9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d9e:	83 d2 ff             	adc    edx,0xffffffff
c0005da1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005da4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da8:	83 c0 ff             	add    eax,0xffffffff
c0005dab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005daf:	83 d2 ff             	adc    edx,0xffffffff
c0005db2:	31 ff                	xor    edi,edi
c0005db4:	57                   	push   edi
c0005db5:	51                   	push   ecx
c0005db6:	52                   	push   edx
c0005db7:	50                   	push   eax
c0005db8:	e8 e7 0d 02 00       	call   c0026ba4 <__udivdi3>
c0005dbd:	83 c4 10             	add    esp,0x10
c0005dc0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dc4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc8:	57                   	push   edi
c0005dc9:	55                   	push   ebp
c0005dca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dd2:	e8 cd 0d 02 00       	call   c0026ba4 <__udivdi3>
c0005dd7:	83 c4 10             	add    esp,0x10
c0005dda:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dde:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005de2:	19 d1                	sbb    ecx,edx
c0005de4:	72 1e                	jb     c0005e04 <f_lseek+0x2ea>
c0005de6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005dea:	89 e9                	mov    ecx,ebp
c0005dec:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005def:	f7 d9                	neg    ecx
c0005df1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005df4:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df8:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005dfb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dfe:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005e02:	eb 28                	jmp    c0005e2c <f_lseek+0x312>
c0005e04:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e07:	85 c0                	test   eax,eax
c0005e09:	75 1e                	jne    c0005e29 <f_lseek+0x30f>
c0005e0b:	31 d2                	xor    edx,edx
c0005e0d:	89 d8                	mov    eax,ebx
c0005e0f:	e8 a9 d4 ff ff       	call   c00032bd <create_chain>
c0005e14:	83 f8 01             	cmp    eax,0x1
c0005e17:	0f 84 b9 fd ff ff    	je     c0005bd6 <f_lseek+0xbc>
c0005e1d:	83 f8 ff             	cmp    eax,0xffffffff
c0005e20:	0f 84 c6 fd ff ff    	je     c0005bec <f_lseek+0xd2>
c0005e26:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e29:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e2c:	85 c0                	test   eax,eax
c0005e2e:	0f 84 4b ff ff ff    	je     c0005d7f <f_lseek+0x265>
c0005e34:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e38:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e40:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e43:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e47:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e4a:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e4d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e51:	0f 83 9d 00 00 00    	jae    c0005ef4 <f_lseek+0x3da>
c0005e57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e5b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e5f:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e62:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e66:	01 f2                	add    edx,esi
c0005e68:	11 f9                	adc    ecx,edi
c0005e6a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e6e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e72:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e75:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e78:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e7b:	f6 c1 02             	test   cl,0x2
c0005e7e:	74 35                	je     c0005eb5 <f_lseek+0x39b>
c0005e80:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e84:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e87:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e8a:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e8e:	73 16                	jae    c0005ea6 <f_lseek+0x38c>
c0005e90:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e94:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e98:	88 ca                	mov    dl,cl
c0005e9a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e9d:	83 ca 40             	or     edx,0x40
c0005ea0:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005ea3:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005ea6:	89 c2                	mov    edx,eax
c0005ea8:	89 d8                	mov    eax,ebx
c0005eaa:	e8 0e d4 ff ff       	call   c00032bd <create_chain>
c0005eaf:	85 c0                	test   eax,eax
c0005eb1:	75 0b                	jne    c0005ebe <f_lseek+0x3a4>
c0005eb3:	eb 30                	jmp    c0005ee5 <f_lseek+0x3cb>
c0005eb5:	89 c2                	mov    edx,eax
c0005eb7:	89 d8                	mov    eax,ebx
c0005eb9:	e8 11 d1 ff ff       	call   c0002fcf <get_fat>
c0005ebe:	83 f8 ff             	cmp    eax,0xffffffff
c0005ec1:	0f 84 25 fd ff ff    	je     c0005bec <f_lseek+0xd2>
c0005ec7:	83 f8 01             	cmp    eax,0x1
c0005eca:	0f 86 06 fd ff ff    	jbe    c0005bd6 <f_lseek+0xbc>
c0005ed0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ed4:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ed7:	0f 86 f9 fc ff ff    	jbe    c0005bd6 <f_lseek+0xbc>
c0005edd:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ee0:	e9 5b ff ff ff       	jmp    c0005e40 <f_lseek+0x326>
c0005ee5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eec:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ef4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005ef7:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005efb:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005efe:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005f01:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005f04:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f0a:	0f 84 6f fe ff ff    	je     c0005d7f <f_lseek+0x265>
c0005f10:	89 c2                	mov    edx,eax
c0005f12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f16:	e8 e7 bf ff ff       	call   c0001f02 <clst2sect>
c0005f1b:	89 d7                	mov    edi,edx
c0005f1d:	09 c7                	or     edi,eax
c0005f1f:	0f 84 b1 fc ff ff    	je     c0005bd6 <f_lseek+0xbc>
c0005f25:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f29:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f2c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f30:	c1 ef 09             	shr    edi,0x9
c0005f33:	01 c6                	add    esi,eax
c0005f35:	11 d7                	adc    edi,edx
c0005f37:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f3a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f3d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f40:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f43:	19 d1                	sbb    ecx,edx
c0005f45:	73 0a                	jae    c0005f51 <f_lseek+0x437>
c0005f47:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f4a:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f4d:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f51:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f56:	74 6d                	je     c0005fc5 <f_lseek+0x4ab>
c0005f58:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f5b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f5e:	39 fa                	cmp    edx,edi
c0005f60:	75 04                	jne    c0005f66 <f_lseek+0x44c>
c0005f62:	39 f0                	cmp    eax,esi
c0005f64:	74 5f                	je     c0005fc5 <f_lseek+0x4ab>
c0005f66:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f69:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f6d:	79 25                	jns    c0005f94 <f_lseek+0x47a>
c0005f6f:	83 ec 0c             	sub    esp,0xc
c0005f72:	6a 01                	push   0x1
c0005f74:	52                   	push   edx
c0005f75:	50                   	push   eax
c0005f76:	55                   	push   ebp
c0005f77:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f7b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f7f:	50                   	push   eax
c0005f80:	e8 af bc ff ff       	call   c0001c34 <disk_write>
c0005f85:	83 c4 20             	add    esp,0x20
c0005f88:	85 c0                	test   eax,eax
c0005f8a:	0f 85 5c fc ff ff    	jne    c0005bec <f_lseek+0xd2>
c0005f90:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f94:	83 ec 0c             	sub    esp,0xc
c0005f97:	6a 01                	push   0x1
c0005f99:	57                   	push   edi
c0005f9a:	56                   	push   esi
c0005f9b:	55                   	push   ebp
c0005f9c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005fa0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005fa4:	50                   	push   eax
c0005fa5:	e8 74 bc ff ff       	call   c0001c1e <disk_read>
c0005faa:	83 c4 20             	add    esp,0x20
c0005fad:	85 c0                	test   eax,eax
c0005faf:	0f 85 37 fc ff ff    	jne    c0005bec <f_lseek+0xd2>
c0005fb5:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb8:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fbb:	eb 08                	jmp    c0005fc5 <f_lseek+0x4ab>
c0005fbd:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fc5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc9:	83 c4 3c             	add    esp,0x3c
c0005fcc:	5b                   	pop    ebx
c0005fcd:	5e                   	pop    esi
c0005fce:	5f                   	pop    edi
c0005fcf:	5d                   	pop    ebp
c0005fd0:	c3                   	ret    

c0005fd1 <f_opendir>:
c0005fd1:	56                   	push   esi
c0005fd2:	b8 09 00 00 00       	mov    eax,0x9
c0005fd7:	53                   	push   ebx
c0005fd8:	83 ec 24             	sub    esp,0x24
c0005fdb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fdf:	85 db                	test   ebx,ebx
c0005fe1:	0f 84 e6 00 00 00    	je     c00060cd <f_opendir+0xfc>
c0005fe7:	31 c9                	xor    ecx,ecx
c0005fe9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fed:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ff1:	e8 03 c7 ff ff       	call   c00026f9 <mount_volume>
c0005ff6:	85 c0                	test   eax,eax
c0005ff8:	0f 85 c9 00 00 00    	jne    c00060c7 <f_opendir+0xf6>
c0005ffe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006002:	83 ec 0c             	sub    esp,0xc
c0006005:	89 03                	mov    DWORD PTR [ebx],eax
c0006007:	68 60 04 00 00       	push   0x460
c000600c:	e8 8b 24 00 00       	call   c000849c <ff_memalloc>
c0006011:	83 c4 10             	add    esp,0x10
c0006014:	89 c6                	mov    esi,eax
c0006016:	b8 11 00 00 00       	mov    eax,0x11
c000601b:	85 f6                	test   esi,esi
c000601d:	0f 84 aa 00 00 00    	je     c00060cd <f_opendir+0xfc>
c0006023:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006027:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000602d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006030:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006033:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0006037:	89 d8                	mov    eax,ebx
c0006039:	e8 31 ee ff ff       	call   c0004e6f <follow_path>
c000603e:	85 c0                	test   eax,eax
c0006040:	75 61                	jne    c00060a3 <f_opendir+0xd2>
c0006042:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006046:	78 46                	js     c000608e <f_opendir+0xbd>
c0006048:	b8 05 00 00 00       	mov    eax,0x5
c000604d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006051:	74 50                	je     c00060a3 <f_opendir+0xd2>
c0006053:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006057:	8a 01                	mov    al,BYTE PTR [ecx]
c0006059:	3c 04                	cmp    al,0x4
c000605b:	75 26                	jne    c0006083 <f_opendir+0xb2>
c000605d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006060:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006063:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006066:	30 d2                	xor    dl,dl
c0006068:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000606c:	09 c2                	or     edx,eax
c000606e:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006071:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006074:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006077:	89 da                	mov    edx,ebx
c0006079:	8d 41 10             	lea    eax,[ecx+0x10]
c000607c:	e8 b4 ed ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0006081:	eb 0b                	jmp    c000608e <f_opendir+0xbd>
c0006083:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006086:	e8 59 ed ff ff       	call   c0004de4 <ld_clust.isra.0>
c000608b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000608e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006092:	31 d2                	xor    edx,edx
c0006094:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006098:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000609c:	89 d8                	mov    eax,ebx
c000609e:	e8 22 d1 ff ff       	call   c00031c5 <dir_sdi>
c00060a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060a7:	83 ec 0c             	sub    esp,0xc
c00060aa:	56                   	push   esi
c00060ab:	e8 02 24 00 00       	call   c00084b2 <ff_memfree>
c00060b0:	83 c4 10             	add    esp,0x10
c00060b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060b7:	83 f8 04             	cmp    eax,0x4
c00060ba:	74 06                	je     c00060c2 <f_opendir+0xf1>
c00060bc:	85 c0                	test   eax,eax
c00060be:	74 0d                	je     c00060cd <f_opendir+0xfc>
c00060c0:	eb 05                	jmp    c00060c7 <f_opendir+0xf6>
c00060c2:	b8 05 00 00 00       	mov    eax,0x5
c00060c7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060cd:	83 c4 24             	add    esp,0x24
c00060d0:	5b                   	pop    ebx
c00060d1:	5e                   	pop    esi
c00060d2:	c3                   	ret    

c00060d3 <f_closedir>:
c00060d3:	53                   	push   ebx
c00060d4:	83 ec 18             	sub    esp,0x18
c00060d7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060db:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060df:	89 d8                	mov    eax,ebx
c00060e1:	e8 86 c2 ff ff       	call   c000236c <validate>
c00060e6:	85 c0                	test   eax,eax
c00060e8:	75 06                	jne    c00060f0 <f_closedir+0x1d>
c00060ea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060f0:	83 c4 18             	add    esp,0x18
c00060f3:	5b                   	pop    ebx
c00060f4:	c3                   	ret    

c00060f5 <f_readdir>:
c00060f5:	57                   	push   edi
c00060f6:	56                   	push   esi
c00060f7:	53                   	push   ebx
c00060f8:	83 ec 20             	sub    esp,0x20
c00060fb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060ff:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006103:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006107:	89 d8                	mov    eax,ebx
c0006109:	e8 5e c2 ff ff       	call   c000236c <validate>
c000610e:	85 c0                	test   eax,eax
c0006110:	75 77                	jne    c0006189 <f_readdir+0x94>
c0006112:	85 ff                	test   edi,edi
c0006114:	75 0b                	jne    c0006121 <f_readdir+0x2c>
c0006116:	31 d2                	xor    edx,edx
c0006118:	89 d8                	mov    eax,ebx
c000611a:	e8 a6 d0 ff ff       	call   c00031c5 <dir_sdi>
c000611f:	eb 68                	jmp    c0006189 <f_readdir+0x94>
c0006121:	83 ec 0c             	sub    esp,0xc
c0006124:	68 60 04 00 00       	push   0x460
c0006129:	e8 6e 23 00 00       	call   c000849c <ff_memalloc>
c000612e:	83 c4 10             	add    esp,0x10
c0006131:	89 c6                	mov    esi,eax
c0006133:	b8 11 00 00 00       	mov    eax,0x11
c0006138:	85 f6                	test   esi,esi
c000613a:	74 4d                	je     c0006189 <f_readdir+0x94>
c000613c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006140:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006146:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006149:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000614c:	31 d2                	xor    edx,edx
c000614e:	89 d8                	mov    eax,ebx
c0006150:	e8 80 d8 ff ff       	call   c00039d5 <dir_read>
c0006155:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000615a:	75 19                	jne    c0006175 <f_readdir+0x80>
c000615c:	89 fa                	mov    edx,edi
c000615e:	89 d8                	mov    eax,ebx
c0006160:	e8 7e ea ff ff       	call   c0004be3 <get_fileinfo>
c0006165:	31 d2                	xor    edx,edx
c0006167:	89 d8                	mov    eax,ebx
c0006169:	e8 af d5 ff ff       	call   c000371d <dir_next>
c000616e:	83 f8 04             	cmp    eax,0x4
c0006171:	75 02                	jne    c0006175 <f_readdir+0x80>
c0006173:	31 c0                	xor    eax,eax
c0006175:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006179:	83 ec 0c             	sub    esp,0xc
c000617c:	56                   	push   esi
c000617d:	e8 30 23 00 00       	call   c00084b2 <ff_memfree>
c0006182:	83 c4 10             	add    esp,0x10
c0006185:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006189:	83 c4 20             	add    esp,0x20
c000618c:	5b                   	pop    ebx
c000618d:	5e                   	pop    esi
c000618e:	5f                   	pop    edi
c000618f:	c3                   	ret    

c0006190 <f_stat>:
c0006190:	57                   	push   edi
c0006191:	31 c9                	xor    ecx,ecx
c0006193:	56                   	push   esi
c0006194:	53                   	push   ebx
c0006195:	83 ec 50             	sub    esp,0x50
c0006198:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000619c:	8d 54 24 04          	lea    edx,[esp+0x4]
c00061a0:	8d 44 24 60          	lea    eax,[esp+0x60]
c00061a4:	e8 50 c5 ff ff       	call   c00026f9 <mount_volume>
c00061a9:	89 c3                	mov    ebx,eax
c00061ab:	85 c0                	test   eax,eax
c00061ad:	75 67                	jne    c0006216 <f_stat+0x86>
c00061af:	83 ec 0c             	sub    esp,0xc
c00061b2:	bb 11 00 00 00       	mov    ebx,0x11
c00061b7:	68 60 04 00 00       	push   0x460
c00061bc:	e8 db 22 00 00       	call   c000849c <ff_memalloc>
c00061c1:	83 c4 10             	add    esp,0x10
c00061c4:	89 c6                	mov    esi,eax
c00061c6:	85 c0                	test   eax,eax
c00061c8:	74 4c                	je     c0006216 <f_stat+0x86>
c00061ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061ce:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061d4:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061d7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061da:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061de:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061e2:	e8 88 ec ff ff       	call   c0004e6f <follow_path>
c00061e7:	89 c3                	mov    ebx,eax
c00061e9:	85 c0                	test   eax,eax
c00061eb:	75 1d                	jne    c000620a <f_stat+0x7a>
c00061ed:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061f2:	78 11                	js     c0006205 <f_stat+0x75>
c00061f4:	85 ff                	test   edi,edi
c00061f6:	74 12                	je     c000620a <f_stat+0x7a>
c00061f8:	89 fa                	mov    edx,edi
c00061fa:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061fe:	e8 e0 e9 ff ff       	call   c0004be3 <get_fileinfo>
c0006203:	eb 05                	jmp    c000620a <f_stat+0x7a>
c0006205:	bb 06 00 00 00       	mov    ebx,0x6
c000620a:	83 ec 0c             	sub    esp,0xc
c000620d:	56                   	push   esi
c000620e:	e8 9f 22 00 00       	call   c00084b2 <ff_memfree>
c0006213:	83 c4 10             	add    esp,0x10
c0006216:	83 c4 50             	add    esp,0x50
c0006219:	89 d8                	mov    eax,ebx
c000621b:	5b                   	pop    ebx
c000621c:	5e                   	pop    esi
c000621d:	5f                   	pop    edi
c000621e:	c3                   	ret    

c000621f <f_getfree>:
c000621f:	55                   	push   ebp
c0006220:	31 c9                	xor    ecx,ecx
c0006222:	57                   	push   edi
c0006223:	56                   	push   esi
c0006224:	53                   	push   ebx
c0006225:	83 ec 5c             	sub    esp,0x5c
c0006228:	8d 54 24 24          	lea    edx,[esp+0x24]
c000622c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006230:	e8 c4 c4 ff ff       	call   c00026f9 <mount_volume>
c0006235:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006239:	85 c0                	test   eax,eax
c000623b:	0f 85 9d 01 00 00    	jne    c00063de <f_getfree+0x1bf>
c0006241:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006245:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006249:	89 02                	mov    DWORD PTR [edx],eax
c000624b:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000624e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006251:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006254:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006258:	39 f2                	cmp    edx,esi
c000625a:	77 0b                	ja     c0006267 <f_getfree+0x48>
c000625c:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006260:	89 10                	mov    DWORD PTR [eax],edx
c0006262:	e9 77 01 00 00       	jmp    c00063de <f_getfree+0x1bf>
c0006267:	8a 10                	mov    dl,BYTE PTR [eax]
c0006269:	80 fa 01             	cmp    dl,0x1
c000626c:	75 3a                	jne    c00062a8 <f_getfree+0x89>
c000626e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006272:	be 02 00 00 00       	mov    esi,0x2
c0006277:	31 db                	xor    ebx,ebx
c0006279:	89 f2                	mov    edx,esi
c000627b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000627f:	e8 4b cd ff ff       	call   c0002fcf <get_fat>
c0006284:	83 f8 ff             	cmp    eax,0xffffffff
c0006287:	0f 84 28 01 00 00    	je     c00063b5 <f_getfree+0x196>
c000628d:	83 f8 01             	cmp    eax,0x1
c0006290:	0f 84 29 01 00 00    	je     c00063bf <f_getfree+0x1a0>
c0006296:	83 d3 00             	adc    ebx,0x0
c0006299:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000629d:	46                   	inc    esi
c000629e:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00062a1:	77 d6                	ja     c0006279 <f_getfree+0x5a>
c00062a3:	e9 25 01 00 00       	jmp    c00063cd <f_getfree+0x1ae>
c00062a8:	80 fa 04             	cmp    dl,0x4
c00062ab:	0f 85 88 00 00 00    	jne    c0006339 <f_getfree+0x11a>
c00062b1:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062b4:	31 ed                	xor    ebp,ebp
c00062b6:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c1:	31 db                	xor    ebx,ebx
c00062c3:	85 ed                	test   ebp,ebp
c00062c5:	75 3f                	jne    c0006306 <f_getfree+0xe7>
c00062c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062cf:	83 c0 01             	add    eax,0x1
c00062d2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062d6:	83 d2 00             	adc    edx,0x0
c00062d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e9:	e8 59 c1 ff ff       	call   c0002447 <move_window>
c00062ee:	85 c0                	test   eax,eax
c00062f0:	0f 85 d3 00 00 00    	jne    c00063c9 <f_getfree+0x1aa>
c00062f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006302:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006306:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000630a:	8d 4e f8             	lea    ecx,[esi-0x8]
c000630d:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006311:	89 cf                	mov    edi,ecx
c0006313:	85 f6                	test   esi,esi
c0006315:	74 12                	je     c0006329 <f_getfree+0x10a>
c0006317:	88 c1                	mov    cl,al
c0006319:	83 e1 01             	and    ecx,0x1
c000631c:	80 f9 01             	cmp    cl,0x1
c000631f:	83 d3 00             	adc    ebx,0x0
c0006322:	d0 e8                	shr    al,1
c0006324:	4e                   	dec    esi
c0006325:	39 fe                	cmp    esi,edi
c0006327:	75 ea                	jne    c0006313 <f_getfree+0xf4>
c0006329:	45                   	inc    ebp
c000632a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006330:	85 f6                	test   esi,esi
c0006332:	75 8f                	jne    c00062c3 <f_getfree+0xa4>
c0006334:	e9 94 00 00 00       	jmp    c00063cd <f_getfree+0x1ae>
c0006339:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000633c:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000633f:	31 f6                	xor    esi,esi
c0006341:	31 db                	xor    ebx,ebx
c0006343:	85 f6                	test   esi,esi
c0006345:	75 1b                	jne    c0006362 <f_getfree+0x143>
c0006347:	89 d7                	mov    edi,edx
c0006349:	89 cd                	mov    ebp,ecx
c000634b:	83 c7 01             	add    edi,0x1
c000634e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006352:	83 d5 00             	adc    ebp,0x0
c0006355:	e8 ed c0 ff ff       	call   c0002447 <move_window>
c000635a:	85 c0                	test   eax,eax
c000635c:	75 6b                	jne    c00063c9 <f_getfree+0x1aa>
c000635e:	89 fa                	mov    edx,edi
c0006360:	89 e9                	mov    ecx,ebp
c0006362:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006366:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000636a:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000636e:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006371:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006375:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006379:	75 11                	jne    c000638c <f_getfree+0x16d>
c000637b:	e8 e9 b8 ff ff       	call   c0001c69 <ld_word>
c0006380:	66 83 f8 01          	cmp    ax,0x1
c0006384:	83 d3 00             	adc    ebx,0x0
c0006387:	83 c6 02             	add    esi,0x2
c000638a:	eb 13                	jmp    c000639f <f_getfree+0x180>
c000638c:	e8 e5 b8 ff ff       	call   c0001c76 <ld_dword>
c0006391:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006396:	83 f8 01             	cmp    eax,0x1
c0006399:	83 d3 00             	adc    ebx,0x0
c000639c:	83 c6 04             	add    esi,0x4
c000639f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00063a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063ad:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063b1:	75 90                	jne    c0006343 <f_getfree+0x124>
c00063b3:	eb 18                	jmp    c00063cd <f_getfree+0x1ae>
c00063b5:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063bd:	eb 0e                	jmp    c00063cd <f_getfree+0x1ae>
c00063bf:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063c7:	eb 04                	jmp    c00063cd <f_getfree+0x1ae>
c00063c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063cd:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063d1:	89 18                	mov    DWORD PTR [eax],ebx
c00063d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063d7:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063da:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063e2:	83 c4 5c             	add    esp,0x5c
c00063e5:	5b                   	pop    ebx
c00063e6:	5e                   	pop    esi
c00063e7:	5f                   	pop    edi
c00063e8:	5d                   	pop    ebp
c00063e9:	c3                   	ret    

c00063ea <f_truncate>:
c00063ea:	56                   	push   esi
c00063eb:	53                   	push   ebx
c00063ec:	83 ec 14             	sub    esp,0x14
c00063ef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063f3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063f7:	89 d8                	mov    eax,ebx
c00063f9:	e8 6e bf ff ff       	call   c000236c <validate>
c00063fe:	89 c6                	mov    esi,eax
c0006400:	85 c0                	test   eax,eax
c0006402:	0f 85 d2 00 00 00    	jne    c00064da <f_truncate+0xf0>
c0006408:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000640c:	85 f6                	test   esi,esi
c000640e:	0f 85 c6 00 00 00    	jne    c00064da <f_truncate+0xf0>
c0006414:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006418:	0f 84 b7 00 00 00    	je     c00064d5 <f_truncate+0xeb>
c000641e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006421:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006424:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006427:	89 d1                	mov    ecx,edx
c0006429:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000642c:	0f 83 a8 00 00 00    	jae    c00064da <f_truncate+0xf0>
c0006432:	09 c2                	or     edx,eax
c0006434:	75 15                	jne    c000644b <f_truncate+0x61>
c0006436:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006439:	31 c9                	xor    ecx,ecx
c000643b:	89 d8                	mov    eax,ebx
c000643d:	e8 7a d0 ff ff       	call   c00034bc <remove_chain>
c0006442:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006449:	eb 35                	jmp    c0006480 <f_truncate+0x96>
c000644b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000644e:	89 d8                	mov    eax,ebx
c0006450:	e8 7a cb ff ff       	call   c0002fcf <get_fat>
c0006455:	89 c2                	mov    edx,eax
c0006457:	b8 01 00 00 00       	mov    eax,0x1
c000645c:	83 fa ff             	cmp    edx,0xffffffff
c000645f:	74 1f                	je     c0006480 <f_truncate+0x96>
c0006461:	b8 02 00 00 00       	mov    eax,0x2
c0006466:	83 fa 01             	cmp    edx,0x1
c0006469:	74 15                	je     c0006480 <f_truncate+0x96>
c000646b:	31 c0                	xor    eax,eax
c000646d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006471:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006474:	76 0a                	jbe    c0006480 <f_truncate+0x96>
c0006476:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006479:	89 d8                	mov    eax,ebx
c000647b:	e8 3c d0 ff ff       	call   c00034bc <remove_chain>
c0006480:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006483:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006486:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006489:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000648c:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000648f:	83 ca 40             	or     edx,0x40
c0006492:	85 c0                	test   eax,eax
c0006494:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006497:	75 35                	jne    c00064ce <f_truncate+0xe4>
c0006499:	84 d2                	test   dl,dl
c000649b:	79 3d                	jns    c00064da <f_truncate+0xf0>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	8d 43 50             	lea    eax,[ebx+0x50]
c00064a3:	6a 01                	push   0x1
c00064a5:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064ab:	50                   	push   eax
c00064ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064b0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064b4:	50                   	push   eax
c00064b5:	e8 7a b7 ff ff       	call   c0001c34 <disk_write>
c00064ba:	83 c4 20             	add    esp,0x20
c00064bd:	85 c0                	test   eax,eax
c00064bf:	75 08                	jne    c00064c9 <f_truncate+0xdf>
c00064c1:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064c5:	31 f6                	xor    esi,esi
c00064c7:	eb 11                	jmp    c00064da <f_truncate+0xf0>
c00064c9:	b8 01 00 00 00       	mov    eax,0x1
c00064ce:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064d1:	89 c6                	mov    esi,eax
c00064d3:	eb 05                	jmp    c00064da <f_truncate+0xf0>
c00064d5:	be 07 00 00 00       	mov    esi,0x7
c00064da:	89 f0                	mov    eax,esi
c00064dc:	83 c4 14             	add    esp,0x14
c00064df:	5b                   	pop    ebx
c00064e0:	5e                   	pop    esi
c00064e1:	c3                   	ret    

c00064e2 <f_unlink>:
c00064e2:	56                   	push   esi
c00064e3:	b9 02 00 00 00       	mov    ecx,0x2
c00064e8:	53                   	push   ebx
c00064e9:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ef:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064f3:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064fa:	e8 fa c1 ff ff       	call   c00026f9 <mount_volume>
c00064ff:	85 c0                	test   eax,eax
c0006501:	0f 85 55 01 00 00    	jne    c000665c <f_unlink+0x17a>
c0006507:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000650b:	83 ec 0c             	sub    esp,0xc
c000650e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006512:	68 60 04 00 00       	push   0x460
c0006517:	e8 80 1f 00 00       	call   c000849c <ff_memalloc>
c000651c:	83 c4 10             	add    esp,0x10
c000651f:	89 c3                	mov    ebx,eax
c0006521:	b8 11 00 00 00       	mov    eax,0x11
c0006526:	85 db                	test   ebx,ebx
c0006528:	0f 84 2e 01 00 00    	je     c000665c <f_unlink+0x17a>
c000652e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006532:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006538:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000653b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000653e:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006545:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006549:	e8 21 e9 ff ff       	call   c0004e6f <follow_path>
c000654e:	85 c0                	test   eax,eax
c0006550:	0f 85 f2 00 00 00    	jne    c0006648 <f_unlink+0x166>
c0006556:	b8 06 00 00 00       	mov    eax,0x6
c000655b:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006563:	0f 88 df 00 00 00    	js     c0006648 <f_unlink+0x166>
c0006569:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000656e:	74 0a                	je     c000657a <f_unlink+0x98>
c0006570:	b8 07 00 00 00       	mov    eax,0x7
c0006575:	e9 ce 00 00 00       	jmp    c0006648 <f_unlink+0x166>
c000657a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006582:	8a 02                	mov    al,BYTE PTR [edx]
c0006584:	3c 04                	cmp    al,0x4
c0006586:	75 12                	jne    c000659a <f_unlink+0xb8>
c0006588:	8d 42 10             	lea    eax,[edx+0x10]
c000658b:	8d 54 24 20          	lea    edx,[esp+0x20]
c000658f:	e8 a1 e8 ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0006594:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006598:	eb 0e                	jmp    c00065a8 <f_unlink+0xc6>
c000659a:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00065a1:	e8 3e e8 ff ff       	call   c0004de4 <ld_clust.isra.0>
c00065a6:	89 c6                	mov    esi,eax
c00065a8:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065ad:	75 12                	jne    c00065c1 <f_unlink+0xdf>
c00065af:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065b3:	e8 94 d6 ff ff       	call   c0003c4c <dir_remove>
c00065b8:	85 c0                	test   eax,eax
c00065ba:	74 6c                	je     c0006628 <f_unlink+0x146>
c00065bc:	e9 87 00 00 00       	jmp    c0006648 <f_unlink+0x166>
c00065c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065c5:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065cc:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065d3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065d6:	75 21                	jne    c00065f9 <f_unlink+0x117>
c00065d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065dc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065e0:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065e7:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ee:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065f2:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f9:	31 d2                	xor    edx,edx
c00065fb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006602:	e8 be cb ff ff       	call   c00031c5 <dir_sdi>
c0006607:	85 c0                	test   eax,eax
c0006609:	75 3d                	jne    c0006648 <f_unlink+0x166>
c000660b:	31 d2                	xor    edx,edx
c000660d:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006614:	e8 bc d3 ff ff       	call   c00039d5 <dir_read>
c0006619:	85 c0                	test   eax,eax
c000661b:	0f 84 4f ff ff ff    	je     c0006570 <f_unlink+0x8e>
c0006621:	83 f8 04             	cmp    eax,0x4
c0006624:	75 22                	jne    c0006648 <f_unlink+0x166>
c0006626:	eb 87                	jmp    c00065af <f_unlink+0xcd>
c0006628:	85 f6                	test   esi,esi
c000662a:	75 0b                	jne    c0006637 <f_unlink+0x155>
c000662c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006630:	e8 3d df ff ff       	call   c0004572 <sync_fs>
c0006635:	eb 11                	jmp    c0006648 <f_unlink+0x166>
c0006637:	31 c9                	xor    ecx,ecx
c0006639:	89 f2                	mov    edx,esi
c000663b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000663f:	e8 78 ce ff ff       	call   c00034bc <remove_chain>
c0006644:	85 c0                	test   eax,eax
c0006646:	74 e4                	je     c000662c <f_unlink+0x14a>
c0006648:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000664c:	83 ec 0c             	sub    esp,0xc
c000664f:	53                   	push   ebx
c0006650:	e8 5d 1e 00 00       	call   c00084b2 <ff_memfree>
c0006655:	83 c4 10             	add    esp,0x10
c0006658:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000665c:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006662:	5b                   	pop    ebx
c0006663:	5e                   	pop    esi
c0006664:	c3                   	ret    

c0006665 <f_mkdir>:
c0006665:	57                   	push   edi
c0006666:	b9 02 00 00 00       	mov    ecx,0x2
c000666b:	56                   	push   esi
c000666c:	53                   	push   ebx
c000666d:	83 c4 80             	add    esp,0xffffff80
c0006670:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006674:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000667b:	e8 79 c0 ff ff       	call   c00026f9 <mount_volume>
c0006680:	89 c3                	mov    ebx,eax
c0006682:	85 c0                	test   eax,eax
c0006684:	0f 85 fe 01 00 00    	jne    c0006888 <f_mkdir+0x223>
c000668a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668e:	bb 11 00 00 00       	mov    ebx,0x11
c0006693:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006697:	83 ec 0c             	sub    esp,0xc
c000669a:	68 60 04 00 00       	push   0x460
c000669f:	e8 f8 1d 00 00       	call   c000849c <ff_memalloc>
c00066a4:	83 c4 10             	add    esp,0x10
c00066a7:	89 c7                	mov    edi,eax
c00066a9:	85 c0                	test   eax,eax
c00066ab:	0f 84 d7 01 00 00    	je     c0006888 <f_mkdir+0x223>
c00066b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066b5:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066bb:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066be:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066c1:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c8:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066cc:	e8 9e e7 ff ff       	call   c0004e6f <follow_path>
c00066d1:	89 c3                	mov    ebx,eax
c00066d3:	85 c0                	test   eax,eax
c00066d5:	74 3e                	je     c0006715 <f_mkdir+0xb0>
c00066d7:	83 f8 04             	cmp    eax,0x4
c00066da:	75 3e                	jne    c000671a <f_mkdir+0xb5>
c00066dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066e0:	31 d2                	xor    edx,edx
c00066e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066e6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066ea:	e8 ce cb ff ff       	call   c00032bd <create_chain>
c00066ef:	89 c6                	mov    esi,eax
c00066f1:	85 c0                	test   eax,eax
c00066f3:	74 0c                	je     c0006701 <f_mkdir+0x9c>
c00066f5:	bb 02 00 00 00       	mov    ebx,0x2
c00066fa:	83 f8 01             	cmp    eax,0x1
c00066fd:	74 07                	je     c0006706 <f_mkdir+0xa1>
c00066ff:	eb 2a                	jmp    c000672b <f_mkdir+0xc6>
c0006701:	bb 07 00 00 00       	mov    ebx,0x7
c0006706:	31 c9                	xor    ecx,ecx
c0006708:	89 f2                	mov    edx,esi
c000670a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000670e:	e8 a9 cd ff ff       	call   c00034bc <remove_chain>
c0006713:	eb 05                	jmp    c000671a <f_mkdir+0xb5>
c0006715:	bb 08 00 00 00       	mov    ebx,0x8
c000671a:	83 ec 0c             	sub    esp,0xc
c000671d:	57                   	push   edi
c000671e:	e8 8f 1d 00 00       	call   c00084b2 <ff_memfree>
c0006723:	83 c4 10             	add    esp,0x10
c0006726:	e9 5d 01 00 00       	jmp    c0006888 <f_mkdir+0x223>
c000672b:	bb 01 00 00 00       	mov    ebx,0x1
c0006730:	83 f8 ff             	cmp    eax,0xffffffff
c0006733:	74 d1                	je     c0006706 <f_mkdir+0xa1>
c0006735:	89 f2                	mov    edx,esi
c0006737:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673b:	e8 c4 ce ff ff       	call   c0003604 <dir_clear>
c0006740:	89 c3                	mov    ebx,eax
c0006742:	85 c0                	test   eax,eax
c0006744:	75 c0                	jne    c0006706 <f_mkdir+0xa1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000674d:	74 69                	je     c00067b8 <f_mkdir+0x153>
c000674f:	b9 0b 00 00 00       	mov    ecx,0xb
c0006754:	83 c0 54             	add    eax,0x54
c0006757:	ba 20 00 00 00       	mov    edx,0x20
c000675c:	e8 9c b5 ff ff       	call   c0001cfd <mem_set>
c0006761:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006765:	ba 00 00 21 50       	mov    edx,0x50210000
c000676a:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000676e:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006772:	83 c0 6a             	add    eax,0x6a
c0006775:	e8 65 b5 ff ff       	call   c0001cdf <st_dword>
c000677a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000677e:	89 f1                	mov    ecx,esi
c0006780:	8d 50 54             	lea    edx,[eax+0x54]
c0006783:	e8 85 e6 ff ff       	call   c0004e0d <st_clust.isra.1>
c0006788:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678c:	b9 20 00 00 00       	mov    ecx,0x20
c0006791:	8d 50 54             	lea    edx,[eax+0x54]
c0006794:	83 c0 74             	add    eax,0x74
c0006797:	e8 4c b5 ff ff       	call   c0001ce8 <mem_cpy>
c000679c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a0:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00067a4:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a8:	8d 50 74             	lea    edx,[eax+0x74]
c00067ab:	e8 5d e6 ff ff       	call   c0004e0d <st_clust.isra.1>
c00067b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b8:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067bc:	e8 2f db ff ff       	call   c00042f0 <dir_register>
c00067c1:	89 c3                	mov    ebx,eax
c00067c3:	85 c0                	test   eax,eax
c00067c5:	0f 85 3b ff ff ff    	jne    c0006706 <f_mkdir+0xa1>
c00067cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cf:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067d2:	75 74                	jne    c0006848 <f_mkdir+0x1e3>
c00067d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d7:	ba 00 00 21 50       	mov    edx,0x50210000
c00067dc:	83 c0 0c             	add    eax,0xc
c00067df:	e8 fb b4 ff ff       	call   c0001cdf <st_dword>
c00067e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e8:	89 f2                	mov    edx,esi
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	83 c0 34             	add    eax,0x34
c00067f0:	e8 ea b4 ff ff       	call   c0001cdf <st_dword>
c00067f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f9:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006800:	c1 e2 09             	shl    edx,0x9
c0006803:	83 c0 38             	add    eax,0x38
c0006806:	e8 d4 b4 ff ff       	call   c0001cdf <st_dword>
c000680b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000680f:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006813:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006816:	c1 e2 09             	shl    edx,0x9
c0006819:	83 c0 28             	add    eax,0x28
c000681c:	e8 be b4 ff ff       	call   c0001cdf <st_dword>
c0006821:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000682c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000682f:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006833:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006837:	e8 8b d3 ff ff       	call   c0003bc7 <store_xdir>
c000683c:	89 c3                	mov    ebx,eax
c000683e:	85 c0                	test   eax,eax
c0006840:	0f 85 d4 fe ff ff    	jne    c000671a <f_mkdir+0xb5>
c0006846:	eb 30                	jmp    c0006878 <f_mkdir+0x213>
c0006848:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000684c:	ba 00 00 21 50       	mov    edx,0x50210000
c0006851:	83 c0 16             	add    eax,0x16
c0006854:	e8 86 b4 ff ff       	call   c0001cdf <st_dword>
c0006859:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000685d:	89 f1                	mov    ecx,esi
c000685f:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006863:	e8 a5 e5 ff ff       	call   c0004e0d <st_clust.isra.1>
c0006868:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000686c:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000687c:	e8 f1 dc ff ff       	call   c0004572 <sync_fs>
c0006881:	89 c3                	mov    ebx,eax
c0006883:	e9 92 fe ff ff       	jmp    c000671a <f_mkdir+0xb5>
c0006888:	83 ec 80             	sub    esp,0xffffff80
c000688b:	89 d8                	mov    eax,ebx
c000688d:	5b                   	pop    ebx
c000688e:	5e                   	pop    esi
c000688f:	5f                   	pop    edi
c0006890:	c3                   	ret    

c0006891 <f_rename>:
c0006891:	55                   	push   ebp
c0006892:	57                   	push   edi
c0006893:	56                   	push   esi
c0006894:	53                   	push   ebx
c0006895:	81 ec fc 00 00 00    	sub    esp,0xfc
c000689b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00068a2:	e8 a4 b9 ff ff       	call   c000224b <get_ldnumber>
c00068a7:	b9 02 00 00 00       	mov    ecx,0x2
c00068ac:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068b0:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068b7:	e8 3d be ff ff       	call   c00026f9 <mount_volume>
c00068bc:	85 c0                	test   eax,eax
c00068be:	0f 85 b5 02 00 00    	jne    c0006b79 <f_rename+0x2e8>
c00068c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c8:	83 ec 0c             	sub    esp,0xc
c00068cb:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068cf:	68 60 04 00 00       	push   0x460
c00068d4:	e8 c3 1b 00 00       	call   c000849c <ff_memalloc>
c00068d9:	83 c4 10             	add    esp,0x10
c00068dc:	89 c3                	mov    ebx,eax
c00068de:	b8 11 00 00 00       	mov    eax,0x11
c00068e3:	85 db                	test   ebx,ebx
c00068e5:	0f 84 8e 02 00 00    	je     c0006b79 <f_rename+0x2e8>
c00068eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ef:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068f5:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068fb:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006902:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006906:	e8 64 e5 ff ff       	call   c0004e6f <follow_path>
c000690b:	85 c0                	test   eax,eax
c000690d:	0f 85 52 02 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006913:	b8 06 00 00 00       	mov    eax,0x6
c0006918:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006920:	0f 85 3f 02 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006926:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000692a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000692d:	0f 85 05 01 00 00    	jne    c0006a38 <f_rename+0x1a7>
c0006933:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006936:	b9 40 00 00 00       	mov    ecx,0x40
c000693b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693f:	e8 a4 b3 ff ff       	call   c0001ce8 <mem_cpy>
c0006944:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006949:	8d 54 24 58          	lea    edx,[esp+0x58]
c000694d:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006954:	e8 8f b3 ff ff       	call   c0001ce8 <mem_cpy>
c0006959:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 03 e5 ff ff       	call   c0004e6f <follow_path>
c000696c:	85 c0                	test   eax,eax
c000696e:	75 29                	jne    c0006999 <f_rename+0x108>
c0006970:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006974:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000697b:	74 0a                	je     c0006987 <f_rename+0xf6>
c000697d:	b8 08 00 00 00       	mov    eax,0x8
c0006982:	e9 de 01 00 00       	jmp    c0006b65 <f_rename+0x2d4>
c0006987:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000698e:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006995:	75 e6                	jne    c000697d <f_rename+0xec>
c0006997:	eb 09                	jmp    c00069a2 <f_rename+0x111>
c0006999:	83 f8 04             	cmp    eax,0x4
c000699c:	0f 85 c3 01 00 00    	jne    c0006b65 <f_rename+0x2d4>
c00069a2:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a9:	e8 42 d9 ff ff       	call   c00042f0 <dir_register>
c00069ae:	85 c0                	test   eax,eax
c00069b0:	0f 85 af 01 00 00    	jne    c0006b65 <f_rename+0x2d4>
c00069b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ba:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069bd:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069c0:	89 c5                	mov    ebp,eax
c00069c2:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069c5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c9:	8d 46 24             	lea    eax,[esi+0x24]
c00069cc:	e8 98 b2 ff ff       	call   c0001c69 <ld_word>
c00069d1:	b9 40 00 00 00       	mov    ecx,0x40
c00069d6:	89 c7                	mov    edi,eax
c00069d8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069dc:	89 f0                	mov    eax,esi
c00069de:	e8 05 b3 ff ff       	call   c0001ce8 <mem_cpy>
c00069e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069e7:	89 e9                	mov    ecx,ebp
c00069e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069ec:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ef:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069f7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069fa:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069fd:	0f b7 d7             	movzx  edx,di
c0006a00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a03:	83 c0 24             	add    eax,0x24
c0006a06:	e8 d0 b2 ff ff       	call   c0001cdb <st_word>
c0006a0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a0f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a12:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a15:	a8 10                	test   al,0x10
c0006a17:	75 06                	jne    c0006a1f <f_rename+0x18e>
c0006a19:	83 c8 20             	or     eax,0x20
c0006a1c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a1f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a26:	e8 9c d1 ff ff       	call   c0003bc7 <store_xdir>
c0006a2b:	85 c0                	test   eax,eax
c0006a2d:	0f 84 1c 01 00 00    	je     c0006b4f <f_rename+0x2be>
c0006a33:	e9 2d 01 00 00       	jmp    c0006b65 <f_rename+0x2d4>
c0006a38:	b9 20 00 00 00       	mov    ecx,0x20
c0006a3d:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a44:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a48:	e8 9b b2 ff ff       	call   c0001ce8 <mem_cpy>
c0006a4d:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a52:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a56:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a5d:	e8 86 b2 ff ff       	call   c0001ce8 <mem_cpy>
c0006a62:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a69:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a70:	e8 fa e3 ff ff       	call   c0004e6f <follow_path>
c0006a75:	85 c0                	test   eax,eax
c0006a77:	75 27                	jne    c0006aa0 <f_rename+0x20f>
c0006a79:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a7d:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a84:	0f 85 f3 fe ff ff    	jne    c000697d <f_rename+0xec>
c0006a8a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a91:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a98:	0f 85 df fe ff ff    	jne    c000697d <f_rename+0xec>
c0006a9e:	eb 09                	jmp    c0006aa9 <f_rename+0x218>
c0006aa0:	83 f8 04             	cmp    eax,0x4
c0006aa3:	0f 85 bc 00 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006aa9:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006ab0:	e8 3b d8 ff ff       	call   c00042f0 <dir_register>
c0006ab5:	85 c0                	test   eax,eax
c0006ab7:	0f 85 a8 00 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006abd:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006ac4:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac9:	8d 46 0d             	lea    eax,[esi+0xd]
c0006acc:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ad0:	e8 13 b2 ff ff       	call   c0001ce8 <mem_cpy>
c0006ad5:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad9:	a8 10                	test   al,0x10
c0006adb:	75 03                	jne    c0006ae0 <f_rename+0x24f>
c0006add:	83 c8 20             	or     eax,0x20
c0006ae0:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006ae3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aeb:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aef:	74 5e                	je     c0006b4f <f_rename+0x2be>
c0006af1:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af8:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006afc:	74 51                	je     c0006b4f <f_rename+0x2be>
c0006afe:	89 f2                	mov    edx,esi
c0006b00:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006b04:	8a 07                	mov    al,BYTE PTR [edi]
c0006b06:	e8 d9 e2 ff ff       	call   c0004de4 <ld_clust.isra.0>
c0006b0b:	89 c2                	mov    edx,eax
c0006b0d:	89 f8                	mov    eax,edi
c0006b0f:	e8 ee b3 ff ff       	call   c0001f02 <clst2sect>
c0006b14:	89 c6                	mov    esi,eax
c0006b16:	89 d1                	mov    ecx,edx
c0006b18:	b8 02 00 00 00       	mov    eax,0x2
c0006b1d:	09 f2                	or     edx,esi
c0006b1f:	74 44                	je     c0006b65 <f_rename+0x2d4>
c0006b21:	89 f2                	mov    edx,esi
c0006b23:	89 f8                	mov    eax,edi
c0006b25:	e8 1d b9 ff ff       	call   c0002447 <move_window>
c0006b2a:	85 c0                	test   eax,eax
c0006b2c:	75 37                	jne    c0006b65 <f_rename+0x2d4>
c0006b2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b32:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b36:	75 17                	jne    c0006b4f <f_rename+0x2be>
c0006b38:	8d 50 74             	lea    edx,[eax+0x74]
c0006b3b:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b42:	e8 c6 e2 ff ff       	call   c0004e0d <st_clust.isra.1>
c0006b47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b4b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b4f:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b53:	e8 f4 d0 ff ff       	call   c0003c4c <dir_remove>
c0006b58:	85 c0                	test   eax,eax
c0006b5a:	75 09                	jne    c0006b65 <f_rename+0x2d4>
c0006b5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b60:	e8 0d da ff ff       	call   c0004572 <sync_fs>
c0006b65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b69:	83 ec 0c             	sub    esp,0xc
c0006b6c:	53                   	push   ebx
c0006b6d:	e8 40 19 00 00       	call   c00084b2 <ff_memfree>
c0006b72:	83 c4 10             	add    esp,0x10
c0006b75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b79:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b7f:	5b                   	pop    ebx
c0006b80:	5e                   	pop    esi
c0006b81:	5f                   	pop    edi
c0006b82:	5d                   	pop    ebp
c0006b83:	c3                   	ret    

c0006b84 <f_chmod>:
c0006b84:	57                   	push   edi
c0006b85:	b9 02 00 00 00       	mov    ecx,0x2
c0006b8a:	56                   	push   esi
c0006b8b:	53                   	push   ebx
c0006b8c:	83 ec 60             	sub    esp,0x60
c0006b8f:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b93:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b97:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b9b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b9f:	e8 55 bb ff ff       	call   c00026f9 <mount_volume>
c0006ba4:	85 c0                	test   eax,eax
c0006ba6:	0f 85 af 00 00 00    	jne    c0006c5b <f_chmod+0xd7>
c0006bac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb0:	83 ec 0c             	sub    esp,0xc
c0006bb3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006bb7:	68 60 04 00 00       	push   0x460
c0006bbc:	e8 db 18 00 00       	call   c000849c <ff_memalloc>
c0006bc1:	83 c4 10             	add    esp,0x10
c0006bc4:	89 c6                	mov    esi,eax
c0006bc6:	b8 11 00 00 00       	mov    eax,0x11
c0006bcb:	85 f6                	test   esi,esi
c0006bcd:	0f 84 88 00 00 00    	je     c0006c5b <f_chmod+0xd7>
c0006bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bdd:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006be0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006be3:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006be7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006beb:	e8 7f e2 ff ff       	call   c0004e6f <follow_path>
c0006bf0:	85 c0                	test   eax,eax
c0006bf2:	75 53                	jne    c0006c47 <f_chmod+0xc3>
c0006bf4:	b8 06 00 00 00       	mov    eax,0x6
c0006bf9:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bfe:	75 47                	jne    c0006c47 <f_chmod+0xc3>
c0006c00:	89 f9                	mov    ecx,edi
c0006c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c06:	83 e1 27             	and    ecx,0x27
c0006c09:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c0c:	75 1d                	jne    c0006c2b <f_chmod+0xa7>
c0006c0e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c11:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c14:	21 cb                	and    ebx,ecx
c0006c16:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c19:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c1c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c20:	e8 a2 cf ff ff       	call   c0003bc7 <store_xdir>
c0006c25:	85 c0                	test   eax,eax
c0006c27:	75 1e                	jne    c0006c47 <f_chmod+0xc3>
c0006c29:	eb 13                	jmp    c0006c3e <f_chmod+0xba>
c0006c2b:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c2f:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c32:	21 cb                	and    ebx,ecx
c0006c34:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c37:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c3a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c42:	e8 2b d9 ff ff       	call   c0004572 <sync_fs>
c0006c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c4b:	83 ec 0c             	sub    esp,0xc
c0006c4e:	56                   	push   esi
c0006c4f:	e8 5e 18 00 00       	call   c00084b2 <ff_memfree>
c0006c54:	83 c4 10             	add    esp,0x10
c0006c57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c5b:	83 c4 60             	add    esp,0x60
c0006c5e:	5b                   	pop    ebx
c0006c5f:	5e                   	pop    esi
c0006c60:	5f                   	pop    edi
c0006c61:	c3                   	ret    

c0006c62 <f_utime>:
c0006c62:	56                   	push   esi
c0006c63:	b9 02 00 00 00       	mov    ecx,0x2
c0006c68:	53                   	push   ebx
c0006c69:	83 ec 64             	sub    esp,0x64
c0006c6c:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c70:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c74:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c78:	e8 7c ba ff ff       	call   c00026f9 <mount_volume>
c0006c7d:	85 c0                	test   eax,eax
c0006c7f:	0f 85 b5 00 00 00    	jne    c0006d3a <f_utime+0xd8>
c0006c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c89:	83 ec 0c             	sub    esp,0xc
c0006c8c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c90:	68 60 04 00 00       	push   0x460
c0006c95:	e8 02 18 00 00       	call   c000849c <ff_memalloc>
c0006c9a:	83 c4 10             	add    esp,0x10
c0006c9d:	89 c3                	mov    ebx,eax
c0006c9f:	b8 11 00 00 00       	mov    eax,0x11
c0006ca4:	85 db                	test   ebx,ebx
c0006ca6:	0f 84 8e 00 00 00    	je     c0006d3a <f_utime+0xd8>
c0006cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cb0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cb6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cbc:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cc0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cc4:	e8 a6 e1 ff ff       	call   c0004e6f <follow_path>
c0006cc9:	85 c0                	test   eax,eax
c0006ccb:	75 59                	jne    c0006d26 <f_utime+0xc4>
c0006ccd:	b8 06 00 00 00       	mov    eax,0x6
c0006cd2:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006cd7:	75 4d                	jne    c0006d26 <f_utime+0xc4>
c0006cd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdd:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006ce1:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ce5:	c1 e2 10             	shl    edx,0x10
c0006ce8:	09 ca                	or     edx,ecx
c0006cea:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ced:	75 1a                	jne    c0006d09 <f_utime+0xa7>
c0006cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cf2:	83 c0 0c             	add    eax,0xc
c0006cf5:	e8 e5 af ff ff       	call   c0001cdf <st_dword>
c0006cfa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cfe:	e8 c4 ce ff ff       	call   c0003bc7 <store_xdir>
c0006d03:	85 c0                	test   eax,eax
c0006d05:	75 1f                	jne    c0006d26 <f_utime+0xc4>
c0006d07:	eb 14                	jmp    c0006d1d <f_utime+0xbb>
c0006d09:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d0d:	83 c0 16             	add    eax,0x16
c0006d10:	e8 ca af ff ff       	call   c0001cdf <st_dword>
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d21:	e8 4c d8 ff ff       	call   c0004572 <sync_fs>
c0006d26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d2a:	83 ec 0c             	sub    esp,0xc
c0006d2d:	53                   	push   ebx
c0006d2e:	e8 7f 17 00 00       	call   c00084b2 <ff_memfree>
c0006d33:	83 c4 10             	add    esp,0x10
c0006d36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d3a:	83 c4 64             	add    esp,0x64
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	c3                   	ret    

c0006d40 <f_getlabel>:
c0006d40:	55                   	push   ebp
c0006d41:	31 c9                	xor    ecx,ecx
c0006d43:	57                   	push   edi
c0006d44:	56                   	push   esi
c0006d45:	53                   	push   ebx
c0006d46:	83 ec 6c             	sub    esp,0x6c
c0006d49:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d4d:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d54:	e8 a0 b9 ff ff       	call   c00026f9 <mount_volume>
c0006d59:	89 c6                	mov    esi,eax
c0006d5b:	85 c0                	test   eax,eax
c0006d5d:	0f 85 c1 01 00 00    	jne    c0006f24 <f_getlabel+0x1e4>
c0006d63:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d6b:	0f 84 5f 01 00 00    	je     c0006ed0 <f_getlabel+0x190>
c0006d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d75:	31 d2                	xor    edx,edx
c0006d77:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d7b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d83:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d87:	e8 39 c4 ff ff       	call   c00031c5 <dir_sdi>
c0006d8c:	85 c0                	test   eax,eax
c0006d8e:	0f 85 2d 01 00 00    	jne    c0006ec1 <f_getlabel+0x181>
c0006d94:	ba 01 00 00 00       	mov    edx,0x1
c0006d99:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d9d:	e8 33 cc ff ff       	call   c00039d5 <dir_read>
c0006da2:	85 c0                	test   eax,eax
c0006da4:	0f 85 17 01 00 00    	jne    c0006ec1 <f_getlabel+0x181>
c0006daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dae:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006db1:	74 09                	je     c0006dbc <f_getlabel+0x7c>
c0006db3:	31 db                	xor    ebx,ebx
c0006db5:	31 c9                	xor    ecx,ecx
c0006db7:	e9 c8 00 00 00       	jmp    c0006e84 <f_getlabel+0x144>
c0006dbc:	31 ed                	xor    ebp,ebp
c0006dbe:	31 db                	xor    ebx,ebx
c0006dc0:	31 ff                	xor    edi,edi
c0006dc2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dc6:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dca:	39 fa                	cmp    edx,edi
c0006dcc:	76 4b                	jbe    c0006e19 <f_getlabel+0xd9>
c0006dce:	47                   	inc    edi
c0006dcf:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dd2:	01 d0                	add    eax,edx
c0006dd4:	e8 90 ae ff ff       	call   c0001c69 <ld_word>
c0006dd9:	66 85 ed             	test   bp,bp
c0006ddc:	75 0d                	jne    c0006deb <f_getlabel+0xab>
c0006dde:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006de4:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de9:	76 28                	jbe    c0006e13 <f_getlabel+0xd3>
c0006deb:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006df2:	89 e9                	mov    ecx,ebp
c0006df4:	01 da                	add    edx,ebx
c0006df6:	c1 e1 10             	shl    ecx,0x10
c0006df9:	0f b7 c0             	movzx  eax,ax
c0006dfc:	09 c8                	or     eax,ecx
c0006dfe:	b9 04 00 00 00       	mov    ecx,0x4
c0006e03:	e8 01 b0 ff ff       	call   c0001e09 <put_utf>
c0006e08:	84 c0                	test   al,al
c0006e0a:	74 0b                	je     c0006e17 <f_getlabel+0xd7>
c0006e0c:	0f b6 c0             	movzx  eax,al
c0006e0f:	01 c3                	add    ebx,eax
c0006e11:	31 c0                	xor    eax,eax
c0006e13:	89 c5                	mov    ebp,eax
c0006e15:	eb ab                	jmp    c0006dc2 <f_getlabel+0x82>
c0006e17:	31 db                	xor    ebx,ebx
c0006e19:	66 85 ed             	test   bp,bp
c0006e1c:	74 02                	je     c0006e20 <f_getlabel+0xe0>
c0006e1e:	31 db                	xor    ebx,ebx
c0006e20:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e27:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e2b:	e9 a0 00 00 00       	jmp    c0006ed0 <f_getlabel+0x190>
c0006e30:	83 ff 0b             	cmp    edi,0xb
c0006e33:	74 11                	je     c0006e46 <f_getlabel+0x106>
c0006e35:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e3e:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e41:	c1 e0 08             	shl    eax,0x8
c0006e44:	09 c2                	or     edx,eax
c0006e46:	0f b7 d2             	movzx  edx,dx
c0006e49:	50                   	push   eax
c0006e4a:	50                   	push   eax
c0006e4b:	68 b5 01 00 00       	push   0x1b5
c0006e50:	52                   	push   edx
c0006e51:	e8 03 17 00 00       	call   c0008559 <ff_oem2uni>
c0006e56:	83 c4 10             	add    esp,0x10
c0006e59:	66 85 c0             	test   ax,ax
c0006e5c:	74 46                	je     c0006ea4 <f_getlabel+0x164>
c0006e5e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e65:	0f b7 c0             	movzx  eax,ax
c0006e68:	01 da                	add    edx,ebx
c0006e6a:	b9 04 00 00 00       	mov    ecx,0x4
c0006e6f:	e8 95 af ff ff       	call   c0001e09 <put_utf>
c0006e74:	84 c0                	test   al,al
c0006e76:	74 2c                	je     c0006ea4 <f_getlabel+0x164>
c0006e78:	0f b6 c0             	movzx  eax,al
c0006e7b:	01 c3                	add    ebx,eax
c0006e7d:	83 ff 0b             	cmp    edi,0xb
c0006e80:	74 24                	je     c0006ea6 <f_getlabel+0x166>
c0006e82:	89 f9                	mov    ecx,edi
c0006e84:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e88:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e8b:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e90:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e99:	e8 9f ae ff ff       	call   c0001d3d <dbc_1st>
c0006e9e:	85 c0                	test   eax,eax
c0006ea0:	74 a4                	je     c0006e46 <f_getlabel+0x106>
c0006ea2:	eb 8c                	jmp    c0006e30 <f_getlabel+0xf0>
c0006ea4:	31 db                	xor    ebx,ebx
c0006ea6:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ead:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eb0:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eb7:	74 17                	je     c0006ed0 <f_getlabel+0x190>
c0006eb9:	4b                   	dec    ebx
c0006eba:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006ebd:	74 ee                	je     c0006ead <f_getlabel+0x16d>
c0006ebf:	eb 0f                	jmp    c0006ed0 <f_getlabel+0x190>
c0006ec1:	83 f8 04             	cmp    eax,0x4
c0006ec4:	75 5c                	jne    c0006f22 <f_getlabel+0x1e2>
c0006ec6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ecd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ed0:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed8:	74 4a                	je     c0006f24 <f_getlabel+0x1e4>
c0006eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ede:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ee1:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ee4:	e8 5e b5 ff ff       	call   c0002447 <move_window>
c0006ee9:	89 c6                	mov    esi,eax
c0006eeb:	85 c0                	test   eax,eax
c0006eed:	75 35                	jne    c0006f24 <f_getlabel+0x1e4>
c0006eef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ef3:	b8 43 00 00 00       	mov    eax,0x43
c0006ef8:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006efa:	80 f9 03             	cmp    cl,0x3
c0006efd:	74 0f                	je     c0006f0e <f_getlabel+0x1ce>
c0006eff:	31 c0                	xor    eax,eax
c0006f01:	80 f9 04             	cmp    cl,0x4
c0006f04:	0f 94 c0             	sete   al
c0006f07:	48                   	dec    eax
c0006f08:	83 e0 c3             	and    eax,0xffffffc3
c0006f0b:	83 c0 64             	add    eax,0x64
c0006f0e:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f12:	e8 5f ad ff ff       	call   c0001c76 <ld_dword>
c0006f17:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f1e:	89 07                	mov    DWORD PTR [edi],eax
c0006f20:	eb 02                	jmp    c0006f24 <f_getlabel+0x1e4>
c0006f22:	89 c6                	mov    esi,eax
c0006f24:	83 c4 6c             	add    esp,0x6c
c0006f27:	89 f0                	mov    eax,esi
c0006f29:	5b                   	pop    ebx
c0006f2a:	5e                   	pop    esi
c0006f2b:	5f                   	pop    edi
c0006f2c:	5d                   	pop    ebp
c0006f2d:	c3                   	ret    

c0006f2e <f_setlabel>:
c0006f2e:	56                   	push   esi
c0006f2f:	b9 02 00 00 00       	mov    ecx,0x2
c0006f34:	53                   	push   ebx
c0006f35:	83 ec 74             	sub    esp,0x74
c0006f38:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f3c:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f43:	e8 b1 b7 ff ff       	call   c00026f9 <mount_volume>
c0006f48:	89 c6                	mov    esi,eax
c0006f4a:	85 c0                	test   eax,eax
c0006f4c:	0f 85 41 02 00 00    	jne    c0007193 <f_setlabel+0x265>
c0006f52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f56:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f59:	0f 85 8e 00 00 00    	jne    c0006fed <f_setlabel+0xbf>
c0006f5f:	b9 16 00 00 00       	mov    ecx,0x16
c0006f64:	31 d2                	xor    edx,edx
c0006f66:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f6a:	31 db                	xor    ebx,ebx
c0006f6c:	e8 8c ad ff ff       	call   c0001cfd <mem_set>
c0006f71:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f78:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f7b:	0f 86 0a 01 00 00    	jbe    c000708b <f_setlabel+0x15d>
c0006f81:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f88:	e8 b6 ad ff ff       	call   c0001d43 <tchar2uni>
c0006f8d:	89 c6                	mov    esi,eax
c0006f8f:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f94:	76 2a                	jbe    c0006fc0 <f_setlabel+0x92>
c0006f96:	83 f8 ff             	cmp    eax,0xffffffff
c0006f99:	74 05                	je     c0006fa0 <f_setlabel+0x72>
c0006f9b:	83 fb 09             	cmp    ebx,0x9
c0006f9e:	76 0a                	jbe    c0006faa <f_setlabel+0x7c>
c0006fa0:	be 06 00 00 00       	mov    esi,0x6
c0006fa5:	e9 e9 01 00 00       	jmp    c0007193 <f_setlabel+0x265>
c0006faa:	89 c2                	mov    edx,eax
c0006fac:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fb0:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fb3:	c1 ea 10             	shr    edx,0x10
c0006fb6:	01 c8                	add    eax,ecx
c0006fb8:	43                   	inc    ebx
c0006fb9:	e8 1d ad ff ff       	call   c0001cdb <st_word>
c0006fbe:	eb 04                	jmp    c0006fc4 <f_setlabel+0x96>
c0006fc0:	85 c0                	test   eax,eax
c0006fc2:	74 dc                	je     c0006fa0 <f_setlabel+0x72>
c0006fc4:	89 f2                	mov    edx,esi
c0006fc6:	b8 97 95 02 c0       	mov    eax,0xc0029597
c0006fcb:	e8 5b ad ff ff       	call   c0001d2b <chk_chr>
c0006fd0:	85 c0                	test   eax,eax
c0006fd2:	75 cc                	jne    c0006fa0 <f_setlabel+0x72>
c0006fd4:	83 fb 0a             	cmp    ebx,0xa
c0006fd7:	77 c7                	ja     c0006fa0 <f_setlabel+0x72>
c0006fd9:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fdc:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fe0:	0f b7 d6             	movzx  edx,si
c0006fe3:	01 c8                	add    eax,ecx
c0006fe5:	43                   	inc    ebx
c0006fe6:	e8 f0 ac ff ff       	call   c0001cdb <st_word>
c0006feb:	eb 84                	jmp    c0006f71 <f_setlabel+0x43>
c0006fed:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ff2:	ba 20 00 00 00       	mov    edx,0x20
c0006ff7:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ffb:	31 db                	xor    ebx,ebx
c0006ffd:	e8 fb ac ff ff       	call   c0001cfd <mem_set>
c0007002:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007009:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000700c:	76 60                	jbe    c000706e <f_setlabel+0x140>
c000700e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0007015:	e8 29 ad ff ff       	call   c0001d43 <tchar2uni>
c000701a:	3d ff ff 00 00       	cmp    eax,0xffff
c000701f:	0f 87 7b ff ff ff    	ja     c0006fa0 <f_setlabel+0x72>
c0007025:	83 ec 0c             	sub    esp,0xc
c0007028:	50                   	push   eax
c0007029:	e8 97 15 00 00       	call   c00085c5 <ff_wtoupper>
c000702e:	5a                   	pop    edx
c000702f:	59                   	pop    ecx
c0007030:	68 b5 01 00 00       	push   0x1b5
c0007035:	50                   	push   eax
c0007036:	e8 8e 14 00 00       	call   c00084c9 <ff_uni2oem>
c000703b:	83 c4 10             	add    esp,0x10
c000703e:	89 c6                	mov    esi,eax
c0007040:	66 85 c0             	test   ax,ax
c0007043:	0f 84 57 ff ff ff    	je     c0006fa0 <f_setlabel+0x72>
c0007049:	0f b7 d0             	movzx  edx,ax
c000704c:	b8 90 95 02 c0       	mov    eax,0xc0029590
c0007051:	e8 d5 ac ff ff       	call   c0001d2b <chk_chr>
c0007056:	85 c0                	test   eax,eax
c0007058:	0f 85 42 ff ff ff    	jne    c0006fa0 <f_setlabel+0x72>
c000705e:	66 81 fe ff 00       	cmp    si,0xff
c0007063:	0f 87 14 01 00 00    	ja     c000717d <f_setlabel+0x24f>
c0007069:	e9 fa 00 00 00       	jmp    c0007168 <f_setlabel+0x23a>
c000706e:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007073:	0f 84 27 ff ff ff    	je     c0006fa0 <f_setlabel+0x72>
c0007079:	85 db                	test   ebx,ebx
c000707b:	74 0e                	je     c000708b <f_setlabel+0x15d>
c000707d:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007080:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007085:	75 04                	jne    c000708b <f_setlabel+0x15d>
c0007087:	89 c3                	mov    ebx,eax
c0007089:	eb ee                	jmp    c0007079 <f_setlabel+0x14b>
c000708b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000708f:	31 d2                	xor    edx,edx
c0007091:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007095:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000709d:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070a1:	e8 1f c1 ff ff       	call   c00031c5 <dir_sdi>
c00070a6:	89 c6                	mov    esi,eax
c00070a8:	85 c0                	test   eax,eax
c00070aa:	0f 85 e3 00 00 00    	jne    c0007193 <f_setlabel+0x265>
c00070b0:	ba 01 00 00 00       	mov    edx,0x1
c00070b5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b9:	e8 17 c9 ff ff       	call   c00039d5 <dir_read>
c00070be:	85 c0                	test   eax,eax
c00070c0:	75 21                	jne    c00070e3 <f_setlabel+0x1b5>
c00070c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070c6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ca:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070cd:	74 5d                	je     c000712c <f_setlabel+0x1fe>
c00070cf:	85 db                	test   ebx,ebx
c00070d1:	74 0b                	je     c00070de <f_setlabel+0x1b0>
c00070d3:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d8:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070dc:	eb 70                	jmp    c000714e <f_setlabel+0x220>
c00070de:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070e1:	eb 70                	jmp    c0007153 <f_setlabel+0x225>
c00070e3:	83 f8 04             	cmp    eax,0x4
c00070e6:	75 7c                	jne    c0007164 <f_setlabel+0x236>
c00070e8:	85 db                	test   ebx,ebx
c00070ea:	0f 84 a3 00 00 00    	je     c0007193 <f_setlabel+0x265>
c00070f0:	ba 01 00 00 00       	mov    edx,0x1
c00070f5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f9:	e8 51 ca ff ff       	call   c0003b4f <dir_alloc>
c00070fe:	89 c6                	mov    esi,eax
c0007100:	85 c0                	test   eax,eax
c0007102:	0f 85 8b 00 00 00    	jne    c0007193 <f_setlabel+0x265>
c0007108:	31 d2                	xor    edx,edx
c000710a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710e:	b9 20 00 00 00       	mov    ecx,0x20
c0007113:	e8 e5 ab ff ff       	call   c0001cfd <mem_set>
c0007118:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000711f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007123:	75 18                	jne    c000713d <f_setlabel+0x20f>
c0007125:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007128:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000712c:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c000712f:	b9 16 00 00 00       	mov    ecx,0x16
c0007134:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007138:	83 c0 02             	add    eax,0x2
c000713b:	eb 9b                	jmp    c00070d8 <f_setlabel+0x1aa>
c000713d:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007141:	b9 0b 00 00 00       	mov    ecx,0xb
c0007146:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000714a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000714e:	e8 95 ab ff ff       	call   c0001ce8 <mem_cpy>
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000715b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000715f:	e8 0e d4 ff ff       	call   c0004572 <sync_fs>
c0007164:	89 c6                	mov    esi,eax
c0007166:	eb 2b                	jmp    c0007193 <f_setlabel+0x265>
c0007168:	83 fb 0a             	cmp    ebx,0xa
c000716b:	0f 87 2f fe ff ff    	ja     c0006fa0 <f_setlabel+0x72>
c0007171:	89 f0                	mov    eax,esi
c0007173:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007177:	43                   	inc    ebx
c0007178:	e9 85 fe ff ff       	jmp    c0007002 <f_setlabel+0xd4>
c000717d:	83 fb 09             	cmp    ebx,0x9
c0007180:	0f 87 1a fe ff ff    	ja     c0006fa0 <f_setlabel+0x72>
c0007186:	89 f0                	mov    eax,esi
c0007188:	66 c1 e8 08          	shr    ax,0x8
c000718c:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007190:	43                   	inc    ebx
c0007191:	eb de                	jmp    c0007171 <f_setlabel+0x243>
c0007193:	89 f0                	mov    eax,esi
c0007195:	83 c4 74             	add    esp,0x74
c0007198:	5b                   	pop    ebx
c0007199:	5e                   	pop    esi
c000719a:	c3                   	ret    

c000719b <f_forward>:
c000719b:	55                   	push   ebp
c000719c:	57                   	push   edi
c000719d:	56                   	push   esi
c000719e:	53                   	push   ebx
c000719f:	83 ec 2c             	sub    esp,0x2c
c00071a2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00071a6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071b0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071b4:	89 d8                	mov    eax,ebx
c00071b6:	e8 b1 b1 ff ff       	call   c000236c <validate>
c00071bb:	89 c5                	mov    ebp,eax
c00071bd:	85 c0                	test   eax,eax
c00071bf:	0f 85 aa 01 00 00    	jne    c000736f <f_forward+0x1d4>
c00071c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c9:	85 ed                	test   ebp,ebp
c00071cb:	0f 85 9e 01 00 00    	jne    c000736f <f_forward+0x1d4>
c00071d1:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071d5:	0f 84 8f 01 00 00    	je     c000736a <f_forward+0x1cf>
c00071db:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071de:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071e1:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071e4:	bf 00 00 00 00       	mov    edi,0x0
c00071e9:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071ec:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071f0:	89 d1                	mov    ecx,edx
c00071f2:	19 f9                	sbb    ecx,edi
c00071f4:	0f 83 cf 00 00 00    	jae    c00072c9 <f_forward+0x12e>
c00071fa:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071fe:	e9 c6 00 00 00       	jmp    c00072c9 <f_forward+0x12e>
c0007203:	50                   	push   eax
c0007204:	50                   	push   eax
c0007205:	6a 00                	push   0x0
c0007207:	6a 00                	push   0x0
c0007209:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000720d:	83 c4 10             	add    esp,0x10
c0007210:	85 c0                	test   eax,eax
c0007212:	0f 84 57 01 00 00    	je     c000736f <f_forward+0x1d4>
c0007218:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000721b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000721f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007222:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007226:	89 d7                	mov    edi,edx
c0007228:	8d 4e ff             	lea    ecx,[esi-0x1]
c000722b:	89 c6                	mov    esi,eax
c000722d:	0f ac fe 09          	shrd   esi,edi,0x9
c0007231:	21 ce                	and    esi,ecx
c0007233:	89 c1                	mov    ecx,eax
c0007235:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000723b:	0f 84 98 00 00 00    	je     c00072d9 <f_forward+0x13e>
c0007241:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007245:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007248:	89 c8                	mov    eax,ecx
c000724a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000724e:	e8 af ac ff ff       	call   c0001f02 <clst2sect>
c0007253:	89 d7                	mov    edi,edx
c0007255:	09 c7                	or     edi,eax
c0007257:	0f 84 9e 00 00 00    	je     c00072fb <f_forward+0x160>
c000725d:	31 ff                	xor    edi,edi
c000725f:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007262:	01 c6                	add    esi,eax
c0007264:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007268:	11 d7                	adc    edi,edx
c000726a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000726d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007270:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007274:	39 fa                	cmp    edx,edi
c0007276:	0f 85 a2 00 00 00    	jne    c000731e <f_forward+0x183>
c000727c:	39 f0                	cmp    eax,esi
c000727e:	0f 85 9a 00 00 00    	jne    c000731e <f_forward+0x183>
c0007284:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007287:	ba 00 02 00 00       	mov    edx,0x200
c000728c:	25 ff 01 00 00       	and    eax,0x1ff
c0007291:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007295:	29 c2                	sub    edx,eax
c0007297:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000729a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000729d:	39 d1                	cmp    ecx,edx
c000729f:	76 02                	jbe    c00072a3 <f_forward+0x108>
c00072a1:	89 d1                	mov    ecx,edx
c00072a3:	8d 73 50             	lea    esi,[ebx+0x50]
c00072a6:	52                   	push   edx
c00072a7:	01 c6                	add    esi,eax
c00072a9:	52                   	push   edx
c00072aa:	51                   	push   ecx
c00072ab:	56                   	push   esi
c00072ac:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072b0:	83 c4 10             	add    esp,0x10
c00072b3:	85 c0                	test   eax,eax
c00072b5:	74 44                	je     c00072fb <f_forward+0x160>
c00072b7:	31 ff                	xor    edi,edi
c00072b9:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072bc:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072bf:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072c3:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072c7:	01 07                	add    DWORD PTR [edi],eax
c00072c9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072ce:	0f 85 2f ff ff ff    	jne    c0007203 <f_forward+0x68>
c00072d4:	e9 96 00 00 00       	jmp    c000736f <f_forward+0x1d4>
c00072d9:	85 f6                	test   esi,esi
c00072db:	0f 85 60 ff ff ff    	jne    c0007241 <f_forward+0xa6>
c00072e1:	89 d7                	mov    edi,edx
c00072e3:	09 c7                	or     edi,eax
c00072e5:	75 05                	jne    c00072ec <f_forward+0x151>
c00072e7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072ea:	eb 0a                	jmp    c00072f6 <f_forward+0x15b>
c00072ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ef:	89 d8                	mov    eax,ebx
c00072f1:	e8 d9 bc ff ff       	call   c0002fcf <get_fat>
c00072f6:	83 f8 01             	cmp    eax,0x1
c00072f9:	77 0b                	ja     c0007306 <f_forward+0x16b>
c00072fb:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072ff:	bd 02 00 00 00       	mov    ebp,0x2
c0007304:	eb 69                	jmp    c000736f <f_forward+0x1d4>
c0007306:	83 f8 ff             	cmp    eax,0xffffffff
c0007309:	75 0b                	jne    c0007316 <f_forward+0x17b>
c000730b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000730f:	bd 01 00 00 00       	mov    ebp,0x1
c0007314:	eb 59                	jmp    c000736f <f_forward+0x1d4>
c0007316:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007319:	e9 23 ff ff ff       	jmp    c0007241 <f_forward+0xa6>
c000731e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007322:	79 20                	jns    c0007344 <f_forward+0x1a9>
c0007324:	83 ec 0c             	sub    esp,0xc
c0007327:	6a 01                	push   0x1
c0007329:	52                   	push   edx
c000732a:	50                   	push   eax
c000732b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000732f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007333:	50                   	push   eax
c0007334:	e8 fb a8 ff ff       	call   c0001c34 <disk_write>
c0007339:	83 c4 20             	add    esp,0x20
c000733c:	85 c0                	test   eax,eax
c000733e:	75 cb                	jne    c000730b <f_forward+0x170>
c0007340:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	6a 01                	push   0x1
c0007349:	57                   	push   edi
c000734a:	56                   	push   esi
c000734b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000734f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007353:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007357:	50                   	push   eax
c0007358:	e8 c1 a8 ff ff       	call   c0001c1e <disk_read>
c000735d:	83 c4 20             	add    esp,0x20
c0007360:	85 c0                	test   eax,eax
c0007362:	0f 84 1c ff ff ff    	je     c0007284 <f_forward+0xe9>
c0007368:	eb a1                	jmp    c000730b <f_forward+0x170>
c000736a:	bd 07 00 00 00       	mov    ebp,0x7
c000736f:	83 c4 2c             	add    esp,0x2c
c0007372:	89 e8                	mov    eax,ebp
c0007374:	5b                   	pop    ebx
c0007375:	5e                   	pop    esi
c0007376:	5f                   	pop    edi
c0007377:	5d                   	pop    ebp
c0007378:	c3                   	ret    

c0007379 <f_mkfs>:
c0007379:	55                   	push   ebp
c000737a:	57                   	push   edi
c000737b:	56                   	push   esi
c000737c:	53                   	push   ebx
c000737d:	bb 0b 00 00 00       	mov    ebx,0xb
c0007382:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007388:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000738f:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007396:	e8 b0 ae ff ff       	call   c000224b <get_ldnumber>
c000739b:	85 c0                	test   eax,eax
c000739d:	0f 88 ec 10 00 00    	js     c000848f <f_mkfs+0x1116>
c00073a3:	8b 14 85 c0 e6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1940]
c00073aa:	85 d2                	test   edx,edx
c00073ac:	74 03                	je     c00073b1 <f_mkfs+0x38>
c00073ae:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073b1:	85 f6                	test   esi,esi
c00073b3:	75 05                	jne    c00073ba <f_mkfs+0x41>
c00073b5:	be 80 95 02 c0       	mov    esi,0xc0029580
c00073ba:	83 ec 0c             	sub    esp,0xc
c00073bd:	0f b6 c0             	movzx  eax,al
c00073c0:	bb 03 00 00 00       	mov    ebx,0x3
c00073c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073cd:	e8 49 a8 ff ff       	call   c0001c1b <disk_initialize>
c00073d2:	83 c4 10             	add    esp,0x10
c00073d5:	a8 01                	test   al,0x1
c00073d7:	0f 85 b2 10 00 00    	jne    c000848f <f_mkfs+0x1116>
c00073dd:	bb 0a 00 00 00       	mov    ebx,0xa
c00073e2:	a8 04                	test   al,0x4
c00073e4:	0f 85 a5 10 00 00    	jne    c000848f <f_mkfs+0x1116>
c00073ea:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ed:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073f1:	85 c0                	test   eax,eax
c00073f3:	75 20                	jne    c0007415 <f_mkfs+0x9c>
c00073f5:	51                   	push   ecx
c00073f6:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073fa:	50                   	push   eax
c00073fb:	6a 03                	push   0x3
c00073fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007401:	e8 44 a8 ff ff       	call   c0001c4a <disk_ioctl>
c0007406:	83 c4 10             	add    esp,0x10
c0007409:	85 c0                	test   eax,eax
c000740b:	74 08                	je     c0007415 <f_mkfs+0x9c>
c000740d:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007415:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007419:	8d 42 ff             	lea    eax,[edx-0x1]
c000741c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007421:	77 04                	ja     c0007427 <f_mkfs+0xae>
c0007423:	85 c2                	test   edx,eax
c0007425:	74 08                	je     c000742f <f_mkfs+0xb6>
c0007427:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000742f:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007432:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007436:	48                   	dec    eax
c0007437:	3c 01                	cmp    al,0x1
c0007439:	76 05                	jbe    c0007440 <f_mkfs+0xc7>
c000743b:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007440:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007447:	48                   	dec    eax
c0007448:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000744d:	77 07                	ja     c0007456 <f_mkfs+0xdd>
c000744f:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007454:	74 08                	je     c000745e <f_mkfs+0xe5>
c0007456:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000745e:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007461:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007467:	77 07                	ja     c0007470 <f_mkfs+0xf7>
c0007469:	8d 43 ff             	lea    eax,[ebx-0x1]
c000746c:	85 d8                	test   eax,ebx
c000746e:	74 02                	je     c0007472 <f_mkfs+0xf9>
c0007470:	31 db                	xor    ebx,ebx
c0007472:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000747d:	77 0a                	ja     c0007489 <f_mkfs+0x110>
c000747f:	bb 11 00 00 00       	mov    ebx,0x11
c0007484:	e9 06 10 00 00       	jmp    c000848f <f_mkfs+0x1116>
c0007489:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007490:	8b 36                	mov    esi,DWORD PTR [esi]
c0007492:	85 ed                	test   ebp,ebp
c0007494:	75 1e                	jne    c00074b4 <f_mkfs+0x13b>
c0007496:	83 ec 0c             	sub    esp,0xc
c0007499:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00074a0:	25 00 fe ff ff       	and    eax,0xfffffe00
c00074a5:	50                   	push   eax
c00074a6:	e8 f1 0f 00 00       	call   c000849c <ff_memalloc>
c00074ab:	83 c4 10             	add    esp,0x10
c00074ae:	89 c5                	mov    ebp,eax
c00074b0:	85 c0                	test   eax,eax
c00074b2:	74 cb                	je     c000747f <f_mkfs+0x106>
c00074b4:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074bc:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074c4:	52                   	push   edx
c00074c5:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c9:	50                   	push   eax
c00074ca:	6a 01                	push   0x1
c00074cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074d0:	e8 75 a7 ff ff       	call   c0001c4a <disk_ioctl>
c00074d5:	83 c4 10             	add    esp,0x10
c00074d8:	85 c0                	test   eax,eax
c00074da:	0f 85 4a 0f 00 00    	jne    c000842a <f_mkfs+0x10b1>
c00074e0:	89 f1                	mov    ecx,esi
c00074e2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074ea:	83 e1 0f             	and    ecx,0xf
c00074ed:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074f5:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f9:	83 e6 08             	and    esi,0x8
c00074fc:	75 56                	jne    c0007554 <f_mkfs+0x1db>
c00074fe:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007502:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007506:	83 ff 00             	cmp    edi,0x0
c0007509:	76 20                	jbe    c000752b <f_mkfs+0x1b2>
c000750b:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007510:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007518:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c000751e:	83 d7 ff             	adc    edi,0xffffffff
c0007521:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007525:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007529:	eb 21                	jmp    c000754c <f_mkfs+0x1d3>
c000752b:	ba 3f 00 00 00       	mov    edx,0x3f
c0007530:	39 f2                	cmp    edx,esi
c0007532:	19 f8                	sbb    eax,edi
c0007534:	73 1e                	jae    c0007554 <f_mkfs+0x1db>
c0007536:	83 c6 c1             	add    esi,0xffffffc1
c0007539:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007541:	83 d7 ff             	adc    edi,0xffffffff
c0007544:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007548:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000754c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007554:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007558:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000755c:	89 04 24             	mov    DWORD PTR [esp],eax
c000755f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007563:	31 c0                	xor    eax,eax
c0007565:	ba 7f 00 00 00       	mov    edx,0x7f
c000756a:	89 c7                	mov    edi,eax
c000756c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000756f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007573:	0f 83 c5 0a 00 00    	jae    c000803e <f_mkfs+0xcc5>
c0007579:	89 df                	mov    edi,ebx
c000757b:	c1 ef 09             	shr    edi,0x9
c000757e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007582:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007589:	c1 ef 09             	shr    edi,0x9
c000758c:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007591:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007595:	74 29                	je     c00075c0 <f_mkfs+0x247>
c0007597:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000759d:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00075a2:	0f 97 c2             	seta   dl
c00075a5:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a8:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075ac:	0f 92 c0             	setb   al
c00075af:	08 c2                	or     dl,al
c00075b1:	75 5b                	jne    c000760e <f_mkfs+0x295>
c00075b3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075b7:	83 e0 07             	and    eax,0x7
c00075ba:	3c 04                	cmp    al,0x4
c00075bc:	74 50                	je     c000760e <f_mkfs+0x295>
c00075be:	eb 1b                	jmp    c00075db <f_mkfs+0x262>
c00075c0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075c5:	0f 87 73 0a 00 00    	ja     c000803e <f_mkfs+0xcc5>
c00075cb:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075d1:	76 08                	jbe    c00075db <f_mkfs+0x262>
c00075d3:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075df:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075e3:	83 e0 01             	and    eax,0x1
c00075e6:	80 e1 02             	and    cl,0x2
c00075e9:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ed:	74 0d                	je     c00075fc <f_mkfs+0x283>
c00075ef:	84 c0                	test   al,al
c00075f1:	0f 84 53 09 00 00    	je     c0007f4a <f_mkfs+0xbd1>
c00075f7:	e9 12 08 00 00       	jmp    c0007e0e <f_mkfs+0xa95>
c00075fc:	bb 13 00 00 00       	mov    ebx,0x13
c0007601:	84 c0                	test   al,al
c0007603:	0f 85 05 08 00 00    	jne    c0007e0e <f_mkfs+0xa95>
c0007609:	e9 39 0e 00 00       	jmp    c0008447 <f_mkfs+0x10ce>
c000760e:	31 c0                	xor    eax,eax
c0007610:	ba ff 0f 00 00       	mov    edx,0xfff
c0007615:	89 c7                	mov    edi,eax
c0007617:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000761a:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000761e:	0f 83 1a 0a 00 00    	jae    c000803e <f_mkfs+0xcc5>
c0007624:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000762a:	77 39                	ja     c0007665 <f_mkfs+0x2ec>
c000762c:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007631:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007639:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000763c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007640:	73 08                	jae    c000764a <f_mkfs+0x2d1>
c0007642:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000764a:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000764f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007652:	b8 00 00 00 00       	mov    eax,0x0
c0007657:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000765b:	73 08                	jae    c0007665 <f_mkfs+0x2ec>
c000765d:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007669:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000766d:	83 c0 20             	add    eax,0x20
c0007670:	83 d2 00             	adc    edx,0x0
c0007673:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007677:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000767b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000767f:	31 d2                	xor    edx,edx
c0007681:	31 ff                	xor    edi,edi
c0007683:	52                   	push   edx
c0007684:	89 fb                	mov    ebx,edi
c0007686:	50                   	push   eax
c0007687:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000768b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000768f:	e8 10 f5 01 00       	call   c0026ba4 <__udivdi3>
c0007694:	83 c4 10             	add    esp,0x10
c0007697:	c1 e0 02             	shl    eax,0x2
c000769a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000769e:	05 07 02 00 00       	add    eax,0x207
c00076a3:	89 f1                	mov    ecx,esi
c00076a5:	c1 e8 09             	shr    eax,0x9
c00076a8:	83 c1 ff             	add    ecx,0xffffffff
c00076ab:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076af:	83 d3 ff             	adc    ebx,0xffffffff
c00076b2:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076b6:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076ba:	31 d2                	xor    edx,edx
c00076bc:	01 c8                	add    eax,ecx
c00076be:	11 da                	adc    edx,ebx
c00076c0:	89 c1                	mov    ecx,eax
c00076c2:	f7 de                	neg    esi
c00076c4:	89 d0                	mov    eax,edx
c00076c6:	83 d7 00             	adc    edi,0x0
c00076c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076cd:	f7 df                	neg    edi
c00076cf:	21 f1                	and    ecx,esi
c00076d1:	21 f8                	and    eax,edi
c00076d3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076db:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076df:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076e3:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076ea:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ee:	0f ac d0 01          	shrd   eax,edx,0x1
c00076f2:	89 df                	mov    edi,ebx
c00076f4:	d1 ea                	shr    edx,1
c00076f6:	39 c1                	cmp    ecx,eax
c00076f8:	19 d7                	sbb    edi,edx
c00076fa:	0f 83 3e 09 00 00    	jae    c000803e <f_mkfs+0xcc5>
c0007700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007704:	31 d2                	xor    edx,edx
c0007706:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000770a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000770e:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007712:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007715:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007719:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c000771d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007721:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007725:	83 f8 0f             	cmp    eax,0xf
c0007728:	0f 86 10 09 00 00    	jbe    c000803e <f_mkfs+0xcc5>
c000772e:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007736:	0f 87 02 09 00 00    	ja     c000803e <f_mkfs+0xcc5>
c000773c:	31 d2                	xor    edx,edx
c000773e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007742:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000774a:	83 c0 07             	add    eax,0x7
c000774d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007755:	c1 e8 03             	shr    eax,0x3
c0007758:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000775f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007763:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007767:	c1 e0 09             	shl    eax,0x9
c000776a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000776e:	48                   	dec    eax
c000776f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007773:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007777:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000777b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000777f:	31 d2                	xor    edx,edx
c0007781:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007785:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000778c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007790:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007795:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007799:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000779d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077a1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00077a5:	31 ff                	xor    edi,edi
c00077a7:	31 f6                	xor    esi,esi
c00077a9:	31 db                	xor    ebx,ebx
c00077ab:	85 ff                	test   edi,edi
c00077ad:	74 05                	je     c00077b4 <f_mkfs+0x43b>
c00077af:	4f                   	dec    edi
c00077b0:	74 44                	je     c00077f6 <f_mkfs+0x47d>
c00077b2:	eb 4f                	jmp    c0007803 <f_mkfs+0x48a>
c00077b4:	83 ec 0c             	sub    esp,0xc
c00077b7:	0f b7 c3             	movzx  eax,bx
c00077ba:	50                   	push   eax
c00077bb:	e8 05 0e 00 00       	call   c00085c5 <ff_wtoupper>
c00077c0:	83 c4 10             	add    esp,0x10
c00077c3:	89 c1                	mov    ecx,eax
c00077c5:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c8:	66 39 c3             	cmp    bx,ax
c00077cb:	75 3e                	jne    c000780b <f_mkfs+0x492>
c00077cd:	be 01 00 00 00       	mov    esi,0x1
c00077d2:	89 df                	mov    edi,ebx
c00077d4:	66 01 f7             	add    di,si
c00077d7:	75 07                	jne    c00077e0 <f_mkfs+0x467>
c00077d9:	83 fe 7f             	cmp    esi,0x7f
c00077dc:	77 31                	ja     c000780f <f_mkfs+0x496>
c00077de:	eb 16                	jmp    c00077f6 <f_mkfs+0x47d>
c00077e0:	83 ec 0c             	sub    esp,0xc
c00077e3:	0f b7 ff             	movzx  edi,di
c00077e6:	57                   	push   edi
c00077e7:	e8 d9 0d 00 00       	call   c00085c5 <ff_wtoupper>
c00077ec:	83 c4 10             	add    esp,0x10
c00077ef:	39 c7                	cmp    edi,eax
c00077f1:	75 e6                	jne    c00077d9 <f_mkfs+0x460>
c00077f3:	46                   	inc    esi
c00077f4:	eb dc                	jmp    c00077d2 <f_mkfs+0x459>
c00077f6:	31 c0                	xor    eax,eax
c00077f8:	89 d9                	mov    ecx,ebx
c00077fa:	4e                   	dec    esi
c00077fb:	0f 95 c0             	setne  al
c00077fe:	43                   	inc    ebx
c00077ff:	89 c7                	mov    edi,eax
c0007801:	eb 14                	jmp    c0007817 <f_mkfs+0x49e>
c0007803:	89 f1                	mov    ecx,esi
c0007805:	01 f3                	add    ebx,esi
c0007807:	31 ff                	xor    edi,edi
c0007809:	eb 0c                	jmp    c0007817 <f_mkfs+0x49e>
c000780b:	89 d3                	mov    ebx,edx
c000780d:	eb 08                	jmp    c0007817 <f_mkfs+0x49e>
c000780f:	bf 02 00 00 00       	mov    edi,0x2
c0007814:	83 c9 ff             	or     ecx,0xffffffff
c0007817:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000781b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000781e:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007822:	0f b6 c1             	movzx  eax,cl
c0007825:	e8 3a a9 ff ff       	call   c0002164 <xsum32>
c000782a:	66 c1 e9 08          	shr    cx,0x8
c000782e:	89 c2                	mov    edx,eax
c0007830:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007833:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007837:	0f b7 c1             	movzx  eax,cx
c000783a:	e8 25 a9 ff ff       	call   c0002164 <xsum32>
c000783f:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007844:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007848:	66 85 db             	test   bx,bx
c000784b:	74 1f                	je     c000786c <f_mkfs+0x4f3>
c000784d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007850:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007857:	83 c0 02             	add    eax,0x2
c000785a:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007860:	39 c2                	cmp    edx,eax
c0007862:	74 08                	je     c000786c <f_mkfs+0x4f3>
c0007864:	89 04 24             	mov    DWORD PTR [esp],eax
c0007867:	e9 3f ff ff ff       	jmp    c00077ab <f_mkfs+0x432>
c000786c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000786f:	83 ec 0c             	sub    esp,0xc
c0007872:	05 01 02 00 00       	add    eax,0x201
c0007877:	c1 e8 09             	shr    eax,0x9
c000787a:	50                   	push   eax
c000787b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000787f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007883:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007887:	55                   	push   ebp
c0007888:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000788c:	e8 a3 a3 ff ff       	call   c0001c34 <disk_write>
c0007891:	83 c4 20             	add    esp,0x20
c0007894:	85 c0                	test   eax,eax
c0007896:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007899:	0f 85 8b 0b 00 00    	jne    c000842a <f_mkfs+0x10b1>
c000789f:	89 d0                	mov    eax,edx
c00078a1:	31 d2                	xor    edx,edx
c00078a3:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00078a7:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078ab:	66 85 db             	test   bx,bx
c00078ae:	74 04                	je     c00078b4 <f_mkfs+0x53b>
c00078b0:	31 c0                	xor    eax,eax
c00078b2:	eb b0                	jmp    c0007864 <f_mkfs+0x4eb>
c00078b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b8:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078bc:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078c0:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078c6:	31 d2                	xor    edx,edx
c00078c8:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078d3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078d7:	c1 eb 09             	shr    ebx,0x9
c00078da:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078e1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078e5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ed:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078f1:	8d 70 01             	lea    esi,[eax+0x1]
c00078f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078fc:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007903:	31 d2                	xor    edx,edx
c0007905:	25 00 fe ff ff       	and    eax,0xfffffe00
c000790a:	89 04 24             	mov    DWORD PTR [esp],eax
c000790d:	89 c1                	mov    ecx,eax
c000790f:	89 e8                	mov    eax,ebp
c0007911:	e8 e7 a3 ff ff       	call   c0001cfd <mem_set>
c0007916:	31 c0                	xor    eax,eax
c0007918:	39 04 24             	cmp    DWORD PTR [esp],eax
c000791b:	76 10                	jbe    c000792d <f_mkfs+0x5b4>
c000791d:	83 fe 07             	cmp    esi,0x7
c0007920:	76 0b                	jbe    c000792d <f_mkfs+0x5b4>
c0007922:	40                   	inc    eax
c0007923:	83 ee 08             	sub    esi,0x8
c0007926:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000792b:	eb eb                	jmp    c0007918 <f_mkfs+0x59f>
c000792d:	b2 01                	mov    dl,0x1
c000792f:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007933:	85 f6                	test   esi,esi
c0007935:	74 0c                	je     c0007943 <f_mkfs+0x5ca>
c0007937:	39 04 24             	cmp    DWORD PTR [esp],eax
c000793a:	76 07                	jbe    c0007943 <f_mkfs+0x5ca>
c000793c:	08 11                	or     BYTE PTR [ecx],dl
c000793e:	4e                   	dec    esi
c000793f:	d1 e2                	shl    edx,1
c0007941:	eb f0                	jmp    c0007933 <f_mkfs+0x5ba>
c0007943:	89 df                	mov    edi,ebx
c0007945:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007949:	76 04                	jbe    c000794f <f_mkfs+0x5d6>
c000794b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000794f:	83 ec 0c             	sub    esp,0xc
c0007952:	57                   	push   edi
c0007953:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007957:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000795b:	55                   	push   ebp
c000795c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007960:	e8 cf a2 ff ff       	call   c0001c34 <disk_write>
c0007965:	83 c4 20             	add    esp,0x20
c0007968:	85 c0                	test   eax,eax
c000796a:	0f 85 ba 0a 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007970:	31 d2                	xor    edx,edx
c0007972:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007976:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000797a:	29 fb                	sub    ebx,edi
c000797c:	0f 85 7a ff ff ff    	jne    c00078fc <f_mkfs+0x583>
c0007982:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007986:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000798e:	31 f6                	xor    esi,esi
c0007990:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007994:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007997:	31 d2                	xor    edx,edx
c0007999:	89 e8                	mov    eax,ebp
c000799b:	e8 5d a3 ff ff       	call   c0001cfd <mem_set>
c00079a0:	31 c9                	xor    ecx,ecx
c00079a2:	85 db                	test   ebx,ebx
c00079a4:	75 40                	jne    c00079e6 <f_mkfs+0x66d>
c00079a6:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079ab:	89 e8                	mov    eax,ebp
c00079ad:	bb 02 00 00 00       	mov    ebx,0x2
c00079b2:	e8 28 a3 ff ff       	call   c0001cdf <st_dword>
c00079b7:	8d 45 04             	lea    eax,[ebp+0x4]
c00079ba:	83 ca ff             	or     edx,0xffffffff
c00079bd:	e8 1d a3 ff ff       	call   c0001cdf <st_dword>
c00079c2:	b9 08 00 00 00       	mov    ecx,0x8
c00079c7:	eb 1d                	jmp    c00079e6 <f_mkfs+0x66d>
c00079c9:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079cc:	76 3b                	jbe    c0007a09 <f_mkfs+0x690>
c00079ce:	43                   	inc    ebx
c00079cf:	83 fe 01             	cmp    esi,0x1
c00079d2:	89 da                	mov    edx,ebx
c00079d4:	77 03                	ja     c00079d9 <f_mkfs+0x660>
c00079d6:	83 ca ff             	or     edx,0xffffffff
c00079d9:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079dd:	4e                   	dec    esi
c00079de:	e8 fc a2 ff ff       	call   c0001cdf <st_dword>
c00079e3:	83 c1 04             	add    ecx,0x4
c00079e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079ea:	85 f6                	test   esi,esi
c00079ec:	75 db                	jne    c00079c9 <f_mkfs+0x650>
c00079ee:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079f3:	77 14                	ja     c0007a09 <f_mkfs+0x690>
c00079f5:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f9:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007a00:	85 f6                	test   esi,esi
c0007a02:	74 05                	je     c0007a09 <f_mkfs+0x690>
c0007a04:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007a07:	77 dd                	ja     c00079e6 <f_mkfs+0x66d>
c0007a09:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a0d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a11:	39 cf                	cmp    edi,ecx
c0007a13:	76 02                	jbe    c0007a17 <f_mkfs+0x69e>
c0007a15:	89 cf                	mov    edi,ecx
c0007a17:	83 ec 0c             	sub    esp,0xc
c0007a1a:	57                   	push   edi
c0007a1b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a23:	55                   	push   ebp
c0007a24:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a28:	e8 07 a2 ff ff       	call   c0001c34 <disk_write>
c0007a2d:	83 c4 20             	add    esp,0x20
c0007a30:	85 c0                	test   eax,eax
c0007a32:	0f 85 f2 09 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007a38:	31 d2                	xor    edx,edx
c0007a3a:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a3e:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a42:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a46:	0f 85 48 ff ff ff    	jne    c0007994 <f_mkfs+0x61b>
c0007a4c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a4f:	31 d2                	xor    edx,edx
c0007a51:	89 e8                	mov    eax,ebp
c0007a53:	31 ff                	xor    edi,edi
c0007a55:	e8 a3 a2 ff ff       	call   c0001cfd <mem_set>
c0007a5a:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a5d:	ba 02 00 00 00       	mov    edx,0x2
c0007a62:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a66:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a6a:	e8 70 a2 ff ff       	call   c0001cdf <st_dword>
c0007a6f:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a72:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a76:	e8 64 a2 ff ff       	call   c0001cdf <st_dword>
c0007a7b:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a7e:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a82:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a86:	e8 54 a2 ff ff       	call   c0001cdf <st_dword>
c0007a8b:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a8e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a92:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a96:	83 c2 02             	add    edx,0x2
c0007a99:	e8 41 a2 ff ff       	call   c0001cdf <st_dword>
c0007a9e:	8d 45 58             	lea    eax,[ebp+0x58]
c0007aa1:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007aa5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa9:	e8 31 a2 ff ff       	call   c0001cdf <st_dword>
c0007aae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab2:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007ab7:	89 c6                	mov    esi,eax
c0007ab9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007abd:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ac1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ac4:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac8:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007acb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007acf:	39 cb                	cmp    ebx,ecx
c0007ad1:	76 02                	jbe    c0007ad5 <f_mkfs+0x75c>
c0007ad3:	89 cb                	mov    ebx,ecx
c0007ad5:	83 ec 0c             	sub    esp,0xc
c0007ad8:	53                   	push   ebx
c0007ad9:	57                   	push   edi
c0007ada:	56                   	push   esi
c0007adb:	55                   	push   ebp
c0007adc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ae0:	e8 4f a1 ff ff       	call   c0001c34 <disk_write>
c0007ae5:	83 c4 20             	add    esp,0x20
c0007ae8:	85 c0                	test   eax,eax
c0007aea:	0f 85 3a 09 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007af0:	31 d2                	xor    edx,edx
c0007af2:	b9 00 02 00 00       	mov    ecx,0x200
c0007af7:	89 e8                	mov    eax,ebp
c0007af9:	e8 ff a1 ff ff       	call   c0001cfd <mem_set>
c0007afe:	31 d2                	xor    edx,edx
c0007b00:	01 de                	add    esi,ebx
c0007b02:	11 d7                	adc    edi,edx
c0007b04:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007b07:	75 bf                	jne    c0007ac8 <f_mkfs+0x74f>
c0007b09:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b0d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b11:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b19:	b9 00 02 00 00       	mov    ecx,0x200
c0007b1e:	31 d2                	xor    edx,edx
c0007b20:	89 e8                	mov    eax,ebp
c0007b22:	e8 d6 a1 ff ff       	call   c0001cfd <mem_set>
c0007b27:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b2c:	ba 60 96 02 c0       	mov    edx,0xc0029660
c0007b31:	89 e8                	mov    eax,ebp
c0007b33:	e8 b0 a1 ff ff       	call   c0001ce8 <mem_cpy>
c0007b38:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b3b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b3f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b43:	e8 9a a1 ff ff       	call   c0001ce2 <st_qword>
c0007b48:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b4c:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b4f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b53:	e8 8a a1 ff ff       	call   c0001ce2 <st_qword>
c0007b58:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b5b:	ba 20 00 00 00       	mov    edx,0x20
c0007b60:	e8 7a a1 ff ff       	call   c0001cdf <st_dword>
c0007b65:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b69:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b6d:	e8 6d a1 ff ff       	call   c0001cdf <st_dword>
c0007b72:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b76:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b7a:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b7e:	e8 5c a1 ff ff       	call   c0001cdf <st_dword>
c0007b83:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b86:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b8a:	e8 50 a1 ff ff       	call   c0001cdf <st_dword>
c0007b8f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b93:	8d 50 02             	lea    edx,[eax+0x2]
c0007b96:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b99:	e8 41 a1 ff ff       	call   c0001cdf <st_dword>
c0007b9e:	8d 45 64             	lea    eax,[ebp+0x64]
c0007ba1:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ba6:	e8 34 a1 ff ff       	call   c0001cdf <st_dword>
c0007bab:	8d 45 68             	lea    eax,[ebp+0x68]
c0007bae:	ba 00 01 00 00       	mov    edx,0x100
c0007bb3:	e8 23 a1 ff ff       	call   c0001cdb <st_word>
c0007bb8:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bbc:	b8 0a 00 00 00       	mov    eax,0xa
c0007bc1:	48                   	dec    eax
c0007bc2:	74 05                	je     c0007bc9 <f_mkfs+0x850>
c0007bc4:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bc7:	eb f8                	jmp    c0007bc1 <f_mkfs+0x848>
c0007bc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bcd:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bd5:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd9:	74 05                	je     c0007be0 <f_mkfs+0x867>
c0007bdb:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bde:	eb f5                	jmp    c0007bd5 <f_mkfs+0x85c>
c0007be0:	8d 45 78             	lea    eax,[ebp+0x78]
c0007be3:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be8:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bee:	31 db                	xor    ebx,ebx
c0007bf0:	e8 e6 a0 ff ff       	call   c0001cdb <st_word>
c0007bf5:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bfb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c00:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c03:	e8 d3 a0 ff ff       	call   c0001cdb <st_word>
c0007c08:	31 c9                	xor    ecx,ecx
c0007c0a:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c0d:	83 f8 01             	cmp    eax,0x1
c0007c10:	76 13                	jbe    c0007c25 <f_mkfs+0x8ac>
c0007c12:	83 f9 70             	cmp    ecx,0x70
c0007c15:	74 0e                	je     c0007c25 <f_mkfs+0x8ac>
c0007c17:	89 da                	mov    edx,ebx
c0007c19:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c1e:	e8 41 a5 ff ff       	call   c0002164 <xsum32>
c0007c23:	89 c3                	mov    ebx,eax
c0007c25:	41                   	inc    ecx
c0007c26:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c2c:	75 dc                	jne    c0007c0a <f_mkfs+0x891>
c0007c2e:	89 f0                	mov    eax,esi
c0007c30:	89 fa                	mov    edx,edi
c0007c32:	83 c0 01             	add    eax,0x1
c0007c35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c39:	83 d2 00             	adc    edx,0x0
c0007c3c:	83 ec 0c             	sub    esp,0xc
c0007c3f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c43:	6a 01                	push   0x1
c0007c45:	57                   	push   edi
c0007c46:	56                   	push   esi
c0007c47:	55                   	push   ebp
c0007c48:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c4c:	e8 e3 9f ff ff       	call   c0001c34 <disk_write>
c0007c51:	83 c4 20             	add    esp,0x20
c0007c54:	85 c0                	test   eax,eax
c0007c56:	0f 85 ce 07 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007c5c:	31 d2                	xor    edx,edx
c0007c5e:	b9 00 02 00 00       	mov    ecx,0x200
c0007c63:	89 e8                	mov    eax,ebp
c0007c65:	e8 93 a0 ff ff       	call   c0001cfd <mem_set>
c0007c6a:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c6f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c72:	e8 64 a0 ff ff       	call   c0001cdb <st_word>
c0007c77:	89 f0                	mov    eax,esi
c0007c79:	89 fa                	mov    edx,edi
c0007c7b:	83 c0 09             	add    eax,0x9
c0007c7e:	83 d2 00             	adc    edx,0x0
c0007c81:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c88:	31 c9                	xor    ecx,ecx
c0007c8a:	41                   	inc    ecx
c0007c8b:	89 da                	mov    edx,ebx
c0007c8d:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c92:	e8 cd a4 ff ff       	call   c0002164 <xsum32>
c0007c97:	89 c3                	mov    ebx,eax
c0007c99:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c9f:	75 e9                	jne    c0007c8a <f_mkfs+0x911>
c0007ca1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007ca5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca9:	83 c0 01             	add    eax,0x1
c0007cac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007cb0:	83 d2 00             	adc    edx,0x0
c0007cb3:	83 ec 0c             	sub    esp,0xc
c0007cb6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cba:	6a 01                	push   0x1
c0007cbc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cc0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cc4:	55                   	push   ebp
c0007cc5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc9:	e8 66 9f ff ff       	call   c0001c34 <disk_write>
c0007cce:	83 c4 20             	add    esp,0x20
c0007cd1:	85 c0                	test   eax,eax
c0007cd3:	0f 85 51 07 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007cd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdd:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ce1:	75 09                	jne    c0007cec <f_mkfs+0x973>
c0007ce3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ce6:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007cea:	74 12                	je     c0007cfe <f_mkfs+0x985>
c0007cec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cf0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cf4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cfc:	eb 8a                	jmp    c0007c88 <f_mkfs+0x90f>
c0007cfe:	31 d2                	xor    edx,edx
c0007d00:	b9 00 02 00 00       	mov    ecx,0x200
c0007d05:	89 e8                	mov    eax,ebp
c0007d07:	e8 f1 9f ff ff       	call   c0001cfd <mem_set>
c0007d0c:	83 c6 0b             	add    esi,0xb
c0007d0f:	83 d7 00             	adc    edi,0x0
c0007d12:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d16:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d1a:	31 c9                	xor    ecx,ecx
c0007d1c:	41                   	inc    ecx
c0007d1d:	89 da                	mov    edx,ebx
c0007d1f:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d24:	e8 3b a4 ff ff       	call   c0002164 <xsum32>
c0007d29:	89 c3                	mov    ebx,eax
c0007d2b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d31:	75 e9                	jne    c0007d1c <f_mkfs+0x9a3>
c0007d33:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d36:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d3a:	83 c6 01             	add    esi,0x1
c0007d3d:	83 d7 00             	adc    edi,0x0
c0007d40:	83 ec 0c             	sub    esp,0xc
c0007d43:	6a 01                	push   0x1
c0007d45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d4d:	55                   	push   ebp
c0007d4e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d52:	e8 dd 9e ff ff       	call   c0001c34 <disk_write>
c0007d57:	83 c4 20             	add    esp,0x20
c0007d5a:	85 c0                	test   eax,eax
c0007d5c:	0f 85 c8 06 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007d62:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d66:	75 06                	jne    c0007d6e <f_mkfs+0x9f5>
c0007d68:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d6c:	74 09                	je     c0007d77 <f_mkfs+0x9fe>
c0007d6e:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d71:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d75:	eb a3                	jmp    c0007d1a <f_mkfs+0x9a1>
c0007d77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d7b:	89 da                	mov    edx,ebx
c0007d7d:	01 e8                	add    eax,ebp
c0007d7f:	e8 5b 9f ff ff       	call   c0001cdf <st_dword>
c0007d84:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d89:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d91:	75 e4                	jne    c0007d77 <f_mkfs+0x9fe>
c0007d93:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d96:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d9a:	83 c6 02             	add    esi,0x2
c0007d9d:	83 d7 00             	adc    edi,0x0
c0007da0:	83 ec 0c             	sub    esp,0xc
c0007da3:	6a 01                	push   0x1
c0007da5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007dad:	55                   	push   ebp
c0007dae:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007db2:	e8 7d 9e ff ff       	call   c0001c34 <disk_write>
c0007db7:	83 c4 20             	add    esp,0x20
c0007dba:	85 c0                	test   eax,eax
c0007dbc:	0f 85 68 06 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007dc2:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dc7:	74 0d                	je     c0007dd6 <f_mkfs+0xa5d>
c0007dc9:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dd1:	e9 43 fd ff ff       	jmp    c0007b19 <f_mkfs+0x7a0>
c0007dd6:	b1 07                	mov    cl,0x7
c0007dd8:	e9 e3 05 00 00       	jmp    c00083c0 <f_mkfs+0x1047>
c0007ddd:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007de2:	0f 85 4f 02 00 00    	jne    c0008037 <f_mkfs+0xcbe>
c0007de8:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ded:	0f 86 22 02 00 00    	jbe    c0008015 <f_mkfs+0xc9c>
c0007df3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df8:	0f 85 81 06 00 00    	jne    c000847f <f_mkfs+0x1106>
c0007dfe:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e05:	83 f8 40             	cmp    eax,0x40
c0007e08:	0f 87 51 06 00 00    	ja     c000845f <f_mkfs+0x10e6>
c0007e0e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e12:	85 ff                	test   edi,edi
c0007e14:	75 1c                	jne    c0007e32 <f_mkfs+0xab9>
c0007e16:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e19:	ba 60 95 02 c0       	mov    edx,0xc0029560
c0007e1e:	c1 e9 0c             	shr    ecx,0xc
c0007e21:	bf 01 00 00 00       	mov    edi,0x1
c0007e26:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e29:	66 85 c0             	test   ax,ax
c0007e2c:	0f 85 95 01 00 00    	jne    c0007fc7 <f_mkfs+0xc4e>
c0007e32:	31 d2                	xor    edx,edx
c0007e34:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e37:	f7 f7                	div    edi
c0007e39:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e3e:	0f 86 95 01 00 00    	jbe    c0007fd9 <f_mkfs+0xc60>
c0007e44:	83 c0 02             	add    eax,0x2
c0007e47:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e4c:	01 c0                	add    eax,eax
c0007e4e:	05 ff 01 00 00       	add    eax,0x1ff
c0007e53:	be 01 00 00 00       	mov    esi,0x1
c0007e58:	c1 e8 09             	shr    eax,0x9
c0007e5b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e63:	c1 e0 05             	shl    eax,0x5
c0007e66:	c1 e8 09             	shr    eax,0x9
c0007e69:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e6d:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e72:	31 d2                	xor    edx,edx
c0007e74:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e78:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e7c:	89 f0                	mov    eax,esi
c0007e7e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e82:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e86:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e8e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e92:	31 d2                	xor    edx,edx
c0007e94:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e99:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e9d:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007ea1:	31 db                	xor    ebx,ebx
c0007ea3:	01 c8                	add    eax,ecx
c0007ea5:	11 da                	adc    edx,ebx
c0007ea7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007eab:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007eaf:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eb3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eb7:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007ebb:	f7 da                	neg    edx
c0007ebd:	21 d1                	and    ecx,edx
c0007ebf:	29 d9                	sub    ecx,ebx
c0007ec1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ec6:	0f 85 20 01 00 00    	jne    c0007fec <f_mkfs+0xc73>
c0007ecc:	31 db                	xor    ebx,ebx
c0007ece:	01 ce                	add    esi,ecx
c0007ed0:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ed4:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed8:	31 d2                	xor    edx,edx
c0007eda:	89 f8                	mov    eax,edi
c0007edc:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ee0:	c1 e0 04             	shl    eax,0x4
c0007ee3:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ee7:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007eeb:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007eef:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007ef3:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007ef6:	19 d3                	sbb    ebx,edx
c0007ef8:	0f 82 40 01 00 00    	jb     c000803e <f_mkfs+0xcc5>
c0007efe:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f01:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f05:	89 c8                	mov    eax,ecx
c0007f07:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f0c:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f10:	29 f0                	sub    eax,esi
c0007f12:	29 d0                	sub    eax,edx
c0007f14:	31 d2                	xor    edx,edx
c0007f16:	f7 f7                	div    edi
c0007f18:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f1d:	89 c3                	mov    ebx,eax
c0007f1f:	0f 85 b8 fe ff ff    	jne    c0007ddd <f_mkfs+0xa64>
c0007f25:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f2a:	0f 87 1d 01 00 00    	ja     c000804d <f_mkfs+0xcd4>
c0007f30:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f35:	0f 85 03 01 00 00    	jne    c000803e <f_mkfs+0xcc5>
c0007f3b:	83 ff 01             	cmp    edi,0x1
c0007f3e:	0f 86 fa 00 00 00    	jbe    c000803e <f_mkfs+0xcc5>
c0007f44:	d1 ef                	shr    edi,1
c0007f46:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f4a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f4e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f51:	85 db                	test   ebx,ebx
c0007f53:	75 2d                	jne    c0007f82 <f_mkfs+0xc09>
c0007f55:	89 cb                	mov    ebx,ecx
c0007f57:	ba 70 95 02 c0       	mov    edx,0xc0029570
c0007f5c:	c1 eb 11             	shr    ebx,0x11
c0007f5f:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f67:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f6a:	66 85 c0             	test   ax,ax
c0007f6d:	74 11                	je     c0007f80 <f_mkfs+0xc07>
c0007f6f:	83 c2 02             	add    edx,0x2
c0007f72:	39 d8                	cmp    eax,ebx
c0007f74:	77 0a                	ja     c0007f80 <f_mkfs+0xc07>
c0007f76:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f7a:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f7e:	eb e7                	jmp    c0007f67 <f_mkfs+0xbee>
c0007f80:	31 db                	xor    ebx,ebx
c0007f82:	31 d2                	xor    edx,edx
c0007f84:	89 c8                	mov    eax,ecx
c0007f86:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f8a:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f91:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f96:	c1 ea 09             	shr    edx,0x9
c0007f99:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f9e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007fa2:	0f 87 96 00 00 00    	ja     c000803e <f_mkfs+0xcc5>
c0007fa8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fac:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fb4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb8:	be 20 00 00 00       	mov    esi,0x20
c0007fbd:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fc2:	e9 a6 fe ff ff       	jmp    c0007e6d <f_mkfs+0xaf4>
c0007fc7:	83 c2 02             	add    edx,0x2
c0007fca:	39 c8                	cmp    eax,ecx
c0007fcc:	0f 87 60 fe ff ff    	ja     c0007e32 <f_mkfs+0xab9>
c0007fd2:	01 ff                	add    edi,edi
c0007fd4:	e9 4d fe ff ff       	jmp    c0007e26 <f_mkfs+0xaad>
c0007fd9:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fdc:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fe1:	40                   	inc    eax
c0007fe2:	d1 e8                	shr    eax,1
c0007fe4:	83 c0 03             	add    eax,0x3
c0007fe7:	e9 62 fe ff ff       	jmp    c0007e4e <f_mkfs+0xad5>
c0007fec:	31 d2                	xor    edx,edx
c0007fee:	89 c8                	mov    eax,ecx
c0007ff0:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007ff4:	85 d2                	test   edx,edx
c0007ff6:	74 0c                	je     c0008004 <f_mkfs+0xc8b>
c0007ff8:	49                   	dec    ecx
c0007ff9:	46                   	inc    esi
c0007ffa:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fff:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0008004:	89 c8                	mov    eax,ecx
c0008006:	31 d2                	xor    edx,edx
c0008008:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000800c:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008010:	e9 c3 fe ff ff       	jmp    c0007ed8 <f_mkfs+0xb5f>
c0008015:	3d f5 0f 00 00       	cmp    eax,0xff5
c000801a:	77 31                	ja     c000804d <f_mkfs+0xcd4>
c000801c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008021:	75 1b                	jne    c000803e <f_mkfs+0xcc5>
c0008023:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008026:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000802a:	3d 80 00 00 00       	cmp    eax,0x80
c000802f:	0f 86 d9 fd ff ff    	jbe    c0007e0e <f_mkfs+0xa95>
c0008035:	eb 07                	jmp    c000803e <f_mkfs+0xcc5>
c0008037:	3d f5 0f 00 00       	cmp    eax,0xff5
c000803c:	76 0a                	jbe    c0008048 <f_mkfs+0xccf>
c000803e:	bb 0e 00 00 00       	mov    ebx,0xe
c0008043:	e9 ff 03 00 00       	jmp    c0008447 <f_mkfs+0x10ce>
c0008048:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000804d:	31 d2                	xor    edx,edx
c000804f:	b9 00 02 00 00       	mov    ecx,0x200
c0008054:	89 e8                	mov    eax,ebp
c0008056:	e8 a2 9c ff ff       	call   c0001cfd <mem_set>
c000805b:	b9 0b 00 00 00       	mov    ecx,0xb
c0008060:	ba 82 96 02 c0       	mov    edx,0xc0029682
c0008065:	89 e8                	mov    eax,ebp
c0008067:	e8 7c 9c ff ff       	call   c0001ce8 <mem_cpy>
c000806c:	8d 45 0b             	lea    eax,[ebp+0xb]
c000806f:	ba 00 02 00 00       	mov    edx,0x200
c0008074:	e8 62 9c ff ff       	call   c0001cdb <st_word>
c0008079:	89 f8                	mov    eax,edi
c000807b:	0f b7 d6             	movzx  edx,si
c000807e:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008081:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008084:	e8 52 9c ff ff       	call   c0001cdb <st_word>
c0008089:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000808d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008092:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008095:	75 08                	jne    c000809f <f_mkfs+0xd26>
c0008097:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000809f:	8d 45 11             	lea    eax,[ebp+0x11]
c00080a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080a6:	e8 30 9c ff ff       	call   c0001cdb <st_word>
c00080ab:	b8 ff ff 00 00       	mov    eax,0xffff
c00080b0:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080b4:	39 d0                	cmp    eax,edx
c00080b6:	b8 00 00 00 00       	mov    eax,0x0
c00080bb:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080bf:	72 0a                	jb     c00080cb <f_mkfs+0xd52>
c00080c1:	8d 45 13             	lea    eax,[ebp+0x13]
c00080c4:	e8 12 9c ff ff       	call   c0001cdb <st_word>
c00080c9:	eb 08                	jmp    c00080d3 <f_mkfs+0xd5a>
c00080cb:	8d 45 20             	lea    eax,[ebp+0x20]
c00080ce:	e8 0c 9c ff ff       	call   c0001cdf <st_dword>
c00080d3:	8d 45 18             	lea    eax,[ebp+0x18]
c00080d6:	ba 3f 00 00 00       	mov    edx,0x3f
c00080db:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080df:	e8 f7 9b ff ff       	call   c0001cdb <st_word>
c00080e4:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080e7:	ba ff 00 00 00       	mov    edx,0xff
c00080ec:	e8 ea 9b ff ff       	call   c0001cdb <st_word>
c00080f1:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f8:	e8 e2 9b ff ff       	call   c0001cdf <st_dword>
c00080fd:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008102:	75 57                	jne    c000815b <f_mkfs+0xde2>
c0008104:	8d 45 43             	lea    eax,[ebp+0x43]
c0008107:	ba 00 00 21 50       	mov    edx,0x50210000
c000810c:	e8 ce 9b ff ff       	call   c0001cdf <st_dword>
c0008111:	8d 45 24             	lea    eax,[ebp+0x24]
c0008114:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008118:	e8 c2 9b ff ff       	call   c0001cdf <st_dword>
c000811d:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008120:	ba 02 00 00 00       	mov    edx,0x2
c0008125:	e8 b5 9b ff ff       	call   c0001cdf <st_dword>
c000812a:	8d 45 30             	lea    eax,[ebp+0x30]
c000812d:	ba 01 00 00 00       	mov    edx,0x1
c0008132:	e8 a4 9b ff ff       	call   c0001cdb <st_word>
c0008137:	8d 45 32             	lea    eax,[ebp+0x32]
c000813a:	ba 06 00 00 00       	mov    edx,0x6
c000813f:	e8 97 9b ff ff       	call   c0001cdb <st_word>
c0008144:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008148:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000814c:	8d 45 47             	lea    eax,[ebp+0x47]
c000814f:	b9 13 00 00 00       	mov    ecx,0x13
c0008154:	ba 8e 96 02 c0       	mov    edx,0xc002968e
c0008159:	eb 2f                	jmp    c000818a <f_mkfs+0xe11>
c000815b:	8d 45 27             	lea    eax,[ebp+0x27]
c000815e:	ba 00 00 21 50       	mov    edx,0x50210000
c0008163:	e8 77 9b ff ff       	call   c0001cdf <st_dword>
c0008168:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000816d:	8d 45 16             	lea    eax,[ebp+0x16]
c0008170:	e8 66 9b ff ff       	call   c0001cdb <st_word>
c0008175:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008179:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000817d:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008180:	b9 13 00 00 00       	mov    ecx,0x13
c0008185:	ba a2 96 02 c0       	mov    edx,0xc00296a2
c000818a:	e8 59 9b ff ff       	call   c0001ce8 <mem_cpy>
c000818f:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008195:	ba 55 aa 00 00       	mov    edx,0xaa55
c000819a:	89 f0                	mov    eax,esi
c000819c:	e8 3a 9b ff ff       	call   c0001cdb <st_word>
c00081a1:	83 ec 0c             	sub    esp,0xc
c00081a4:	6a 01                	push   0x1
c00081a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081ae:	55                   	push   ebp
c00081af:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081b3:	e8 7c 9a ff ff       	call   c0001c34 <disk_write>
c00081b8:	83 c4 20             	add    esp,0x20
c00081bb:	85 c0                	test   eax,eax
c00081bd:	0f 85 67 02 00 00    	jne    c000842a <f_mkfs+0x10b1>
c00081c3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c8:	0f 85 b7 00 00 00    	jne    c0008285 <f_mkfs+0xf0c>
c00081ce:	83 ec 0c             	sub    esp,0xc
c00081d1:	6a 01                	push   0x1
c00081d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081db:	83 c0 06             	add    eax,0x6
c00081de:	83 d2 00             	adc    edx,0x0
c00081e1:	52                   	push   edx
c00081e2:	50                   	push   eax
c00081e3:	55                   	push   ebp
c00081e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e8:	e8 47 9a ff ff       	call   c0001c34 <disk_write>
c00081ed:	83 c4 20             	add    esp,0x20
c00081f0:	b9 00 02 00 00       	mov    ecx,0x200
c00081f5:	31 d2                	xor    edx,edx
c00081f7:	89 e8                	mov    eax,ebp
c00081f9:	e8 ff 9a ff ff       	call   c0001cfd <mem_set>
c00081fe:	ba 52 52 61 41       	mov    edx,0x41615252
c0008203:	89 e8                	mov    eax,ebp
c0008205:	e8 d5 9a ff ff       	call   c0001cdf <st_dword>
c000820a:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008210:	ba 72 72 41 61       	mov    edx,0x61417272
c0008215:	e8 c5 9a ff ff       	call   c0001cdf <st_dword>
c000821a:	8d 53 ff             	lea    edx,[ebx-0x1]
c000821d:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008223:	e8 b7 9a ff ff       	call   c0001cdf <st_dword>
c0008228:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000822e:	ba 02 00 00 00       	mov    edx,0x2
c0008233:	e8 a7 9a ff ff       	call   c0001cdf <st_dword>
c0008238:	ba 55 aa 00 00       	mov    edx,0xaa55
c000823d:	89 f0                	mov    eax,esi
c000823f:	e8 97 9a ff ff       	call   c0001cdb <st_word>
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	6a 01                	push   0x1
c0008249:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000824d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008251:	83 c0 07             	add    eax,0x7
c0008254:	83 d2 00             	adc    edx,0x0
c0008257:	52                   	push   edx
c0008258:	50                   	push   eax
c0008259:	55                   	push   ebp
c000825a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000825e:	e8 d1 99 ff ff       	call   c0001c34 <disk_write>
c0008263:	83 c4 14             	add    esp,0x14
c0008266:	6a 01                	push   0x1
c0008268:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000826c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008270:	83 c0 01             	add    eax,0x1
c0008273:	83 d2 00             	adc    edx,0x0
c0008276:	52                   	push   edx
c0008277:	50                   	push   eax
c0008278:	55                   	push   ebp
c0008279:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000827d:	e8 b2 99 ff ff       	call   c0001c34 <disk_write>
c0008282:	83 c4 20             	add    esp,0x20
c0008285:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000828c:	31 d2                	xor    edx,edx
c000828e:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008294:	31 db                	xor    ebx,ebx
c0008296:	89 e8                	mov    eax,ebp
c0008298:	e8 60 9a ff ff       	call   c0001cfd <mem_set>
c000829d:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00082a2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a9:	0f 94 c3             	sete   bl
c00082ac:	4b                   	dec    ebx
c00082ad:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082b3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082be:	75 21                	jne    c00082e1 <f_mkfs+0xf68>
c00082c0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082c5:	89 e8                	mov    eax,ebp
c00082c7:	e8 13 9a ff ff       	call   c0001cdf <st_dword>
c00082cc:	8d 45 04             	lea    eax,[ebp+0x4]
c00082cf:	83 ca ff             	or     edx,0xffffffff
c00082d2:	e8 08 9a ff ff       	call   c0001cdf <st_dword>
c00082d7:	8d 45 08             	lea    eax,[ebp+0x8]
c00082da:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082df:	eb 04                	jmp    c00082e5 <f_mkfs+0xf6c>
c00082e1:	89 da                	mov    edx,ebx
c00082e3:	89 e8                	mov    eax,ebp
c00082e5:	e8 f5 99 ff ff       	call   c0001cdf <st_dword>
c00082ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082f2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082f6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082fa:	39 ce                	cmp    esi,ecx
c00082fc:	76 02                	jbe    c0008300 <f_mkfs+0xf87>
c00082fe:	89 ce                	mov    esi,ecx
c0008300:	83 ec 0c             	sub    esp,0xc
c0008303:	56                   	push   esi
c0008304:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008308:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000830c:	55                   	push   ebp
c000830d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008311:	e8 1e 99 ff ff       	call   c0001c34 <disk_write>
c0008316:	83 c4 20             	add    esp,0x20
c0008319:	85 c0                	test   eax,eax
c000831b:	0f 85 09 01 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0008321:	31 d2                	xor    edx,edx
c0008323:	b9 00 02 00 00       	mov    ecx,0x200
c0008328:	89 e8                	mov    eax,ebp
c000832a:	e8 ce 99 ff ff       	call   c0001cfd <mem_set>
c000832f:	31 d2                	xor    edx,edx
c0008331:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008335:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008339:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000833d:	75 b3                	jne    c00082f2 <f_mkfs+0xf79>
c000833f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008342:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008349:	40                   	inc    eax
c000834a:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000834e:	0f 87 65 ff ff ff    	ja     c00082b9 <f_mkfs+0xf40>
c0008354:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008359:	74 04                	je     c000835f <f_mkfs+0xfe6>
c000835b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000835f:	89 fb                	mov    ebx,edi
c0008361:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008365:	76 04                	jbe    c000836b <f_mkfs+0xff2>
c0008367:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000836b:	83 ec 0c             	sub    esp,0xc
c000836e:	53                   	push   ebx
c000836f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008373:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008377:	55                   	push   ebp
c0008378:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000837c:	e8 b3 98 ff ff       	call   c0001c34 <disk_write>
c0008381:	83 c4 20             	add    esp,0x20
c0008384:	85 c0                	test   eax,eax
c0008386:	0f 85 9e 00 00 00    	jne    c000842a <f_mkfs+0x10b1>
c000838c:	31 d2                	xor    edx,edx
c000838e:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008392:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008396:	29 df                	sub    edi,ebx
c0008398:	75 c5                	jne    c000835f <f_mkfs+0xfe6>
c000839a:	b1 0c                	mov    cl,0xc
c000839c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083a1:	74 1d                	je     c00083c0 <f_mkfs+0x1047>
c00083a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a8:	b1 06                	mov    cl,0x6
c00083aa:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083ae:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083b2:	72 0c                	jb     c00083c0 <f_mkfs+0x1047>
c00083b4:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b9:	0f 94 c1             	sete   cl
c00083bc:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083c0:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083c5:	75 4c                	jne    c0008413 <f_mkfs+0x109a>
c00083c7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083cb:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083cf:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083d6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083dd:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e8:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083f3:	0f b6 c9             	movzx  ecx,cl
c00083f6:	83 ec 0c             	sub    esp,0xc
c00083f9:	55                   	push   ebp
c00083fa:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008401:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008405:	e8 2f c2 ff ff       	call   c0004639 <create_partition>
c000840a:	83 c4 10             	add    esp,0x10
c000840d:	89 c3                	mov    ebx,eax
c000840f:	85 c0                	test   eax,eax
c0008411:	75 34                	jne    c0008447 <f_mkfs+0x10ce>
c0008413:	31 db                	xor    ebx,ebx
c0008415:	50                   	push   eax
c0008416:	6a 00                	push   0x0
c0008418:	6a 00                	push   0x0
c000841a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000841e:	e8 27 98 ff ff       	call   c0001c4a <disk_ioctl>
c0008423:	83 c4 10             	add    esp,0x10
c0008426:	85 c0                	test   eax,eax
c0008428:	74 1d                	je     c0008447 <f_mkfs+0x10ce>
c000842a:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008432:	75 0c                	jne    c0008440 <f_mkfs+0x10c7>
c0008434:	83 ec 0c             	sub    esp,0xc
c0008437:	55                   	push   ebp
c0008438:	e8 75 00 00 00       	call   c00084b2 <ff_memfree>
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	bb 01 00 00 00       	mov    ebx,0x1
c0008445:	eb 48                	jmp    c000848f <f_mkfs+0x1116>
c0008447:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000844f:	75 3e                	jne    c000848f <f_mkfs+0x1116>
c0008451:	83 ec 0c             	sub    esp,0xc
c0008454:	55                   	push   ebp
c0008455:	e8 58 00 00 00       	call   c00084b2 <ff_memfree>
c000845a:	83 c4 10             	add    esp,0x10
c000845d:	eb 30                	jmp    c000848f <f_mkfs+0x1116>
c000845f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008464:	0f 85 eb fa ff ff    	jne    c0007f55 <f_mkfs+0xbdc>
c000846a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000846e:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008474:	0f 86 b8 f9 ff ff    	jbe    c0007e32 <f_mkfs+0xab9>
c000847a:	e9 bf fb ff ff       	jmp    c000803e <f_mkfs+0xcc5>
c000847f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008484:	0f 85 c0 fa ff ff    	jne    c0007f4a <f_mkfs+0xbd1>
c000848a:	e9 af fb ff ff       	jmp    c000803e <f_mkfs+0xcc5>
c000848f:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008495:	89 d8                	mov    eax,ebx
c0008497:	5b                   	pop    ebx
c0008498:	5e                   	pop    esi
c0008499:	5f                   	pop    edi
c000849a:	5d                   	pop    ebp
c000849b:	c3                   	ret    

c000849c <ff_memalloc>:
c000849c:	83 ec 0c             	sub    esp,0xc
c000849f:	83 ec 0c             	sub    esp,0xc
c00084a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084a6:	e8 a0 73 00 00       	call   c000f84b <malloc>
c00084ab:	83 c4 10             	add    esp,0x10
c00084ae:	83 c4 0c             	add    esp,0xc
c00084b1:	c3                   	ret    

c00084b2 <ff_memfree>:
c00084b2:	83 ec 0c             	sub    esp,0xc
c00084b5:	83 ec 0c             	sub    esp,0xc
c00084b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084bc:	e8 9a 73 00 00       	call   c000f85b <free>
c00084c1:	83 c4 10             	add    esp,0x10
c00084c4:	90                   	nop
c00084c5:	83 c4 0c             	add    esp,0xc
c00084c8:	c3                   	ret    

c00084c9 <ff_uni2oem>:
c00084c9:	83 ec 14             	sub    esp,0x14
c00084cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084d0:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084d4:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084db:	c7 44 24 0c c0 99 02 c0 	mov    DWORD PTR [esp+0xc],0xc00299c0
c00084e3:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e8:	77 0b                	ja     c00084f5 <ff_uni2oem+0x2c>
c00084ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ee:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084f3:	eb 5b                	jmp    c0008550 <ff_uni2oem+0x87>
c00084f5:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084fd:	77 51                	ja     c0008550 <ff_uni2oem+0x87>
c00084ff:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008505:	75 49                	jne    c0008550 <ff_uni2oem+0x87>
c0008507:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000850e:	eb 0b                	jmp    c000851b <ff_uni2oem+0x52>
c0008510:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008515:	40                   	inc    eax
c0008516:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000851b:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008521:	77 1b                	ja     c000853e <ff_uni2oem+0x75>
c0008523:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008528:	01 c0                	add    eax,eax
c000852a:	89 c2                	mov    edx,eax
c000852c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008530:	01 d0                	add    eax,edx
c0008532:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008535:	0f b7 c0             	movzx  eax,ax
c0008538:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000853c:	75 d2                	jne    c0008510 <ff_uni2oem+0x47>
c000853e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008543:	83 e8 80             	sub    eax,0xffffff80
c0008546:	25 ff 00 00 00       	and    eax,0xff
c000854b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008550:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008555:	83 c4 14             	add    esp,0x14
c0008558:	c3                   	ret    

c0008559 <ff_oem2uni>:
c0008559:	83 ec 18             	sub    esp,0x18
c000855c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008564:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008569:	66 89 04 24          	mov    WORD PTR [esp],ax
c000856d:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008574:	c7 44 24 10 c0 99 02 c0 	mov    DWORD PTR [esp+0x10],0xc00299c0
c000857c:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008582:	77 0b                	ja     c000858f <ff_oem2uni+0x36>
c0008584:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008588:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000858d:	eb 2d                	jmp    c00085bc <ff_oem2uni+0x63>
c000858f:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008595:	75 25                	jne    c00085bc <ff_oem2uni+0x63>
c0008597:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000859e:	77 1c                	ja     c00085bc <ff_oem2uni+0x63>
c00085a0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00085a5:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085aa:	01 c0                	add    eax,eax
c00085ac:	89 c2                	mov    edx,eax
c00085ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085b2:	01 d0                	add    eax,edx
c00085b4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085b7:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085bc:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085c1:	83 c4 18             	add    esp,0x18
c00085c4:	c3                   	ret    

c00085c5 <ff_wtoupper>:
c00085c5:	83 ec 10             	sub    esp,0x10
c00085c8:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085d0:	0f 87 3e 01 00 00    	ja     c0008714 <ff_wtoupper+0x14f>
c00085d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085da:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085df:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085e6:	77 07                	ja     c00085ef <ff_wtoupper+0x2a>
c00085e8:	b8 c0 97 02 c0       	mov    eax,0xc00297c0
c00085ed:	eb 05                	jmp    c00085f4 <ff_wtoupper+0x2f>
c00085ef:	b8 00 97 02 c0       	mov    eax,0xc0029700
c00085f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085fc:	8d 50 02             	lea    edx,[eax+0x2]
c00085ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008603:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008606:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000860b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008611:	0f 84 f4 00 00 00    	je     c000870b <ff_wtoupper+0x146>
c0008617:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000861c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008621:	0f 82 e4 00 00 00    	jb     c000870b <ff_wtoupper+0x146>
c0008627:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000862b:	8d 50 02             	lea    edx,[eax+0x2]
c000862e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008632:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008635:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000863a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000863f:	66 c1 e8 08          	shr    ax,0x8
c0008643:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008648:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000864f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008654:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008659:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000865e:	01 ca                	add    edx,ecx
c0008660:	39 d0                	cmp    eax,edx
c0008662:	0f 8d 86 00 00 00    	jge    c00086ee <ff_wtoupper+0x129>
c0008668:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000866d:	83 f8 08             	cmp    eax,0x8
c0008670:	0f 87 94 00 00 00    	ja     c000870a <ff_wtoupper+0x145>
c0008676:	8b 04 85 c0 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6940]
c000867d:	ff e0                	jmp    eax
c000867f:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008684:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008689:	29 c2                	sub    edx,eax
c000868b:	89 d0                	mov    eax,edx
c000868d:	01 c0                	add    eax,eax
c000868f:	89 c2                	mov    edx,eax
c0008691:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008695:	01 d0                	add    eax,edx
c0008697:	66 8b 00             	mov    ax,WORD PTR [eax]
c000869a:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000869f:	eb 4b                	jmp    c00086ec <ff_wtoupper+0x127>
c00086a1:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00086a6:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086aa:	83 e0 01             	and    eax,0x1
c00086ad:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086b2:	eb 38                	jmp    c00086ec <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086ba:	eb 30                	jmp    c00086ec <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086c2:	eb 28                	jmp    c00086ec <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086ca:	eb 20                	jmp    c00086ec <ff_wtoupper+0x127>
c00086cc:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086d2:	eb 18                	jmp    c00086ec <ff_wtoupper+0x127>
c00086d4:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086da:	eb 10                	jmp    c00086ec <ff_wtoupper+0x127>
c00086dc:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086e2:	eb 08                	jmp    c00086ec <ff_wtoupper+0x127>
c00086e4:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086eb:	90                   	nop
c00086ec:	eb 1c                	jmp    c000870a <ff_wtoupper+0x145>
c00086ee:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086f4:	0f 85 fe fe ff ff    	jne    c00085f8 <ff_wtoupper+0x33>
c00086fa:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086ff:	01 c0                	add    eax,eax
c0008701:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008705:	e9 ee fe ff ff       	jmp    c00085f8 <ff_wtoupper+0x33>
c000870a:	90                   	nop
c000870b:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008710:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008714:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008718:	83 c4 10             	add    esp,0x10
c000871b:	c3                   	ret    

c000871c <psrc_set_converter>:
c000871c:	56                   	push   esi
c000871d:	89 d6                	mov    esi,edx
c000871f:	53                   	push   ebx
c0008720:	89 c3                	mov    ebx,eax
c0008722:	83 ec 0c             	sub    esp,0xc
c0008725:	52                   	push   edx
c0008726:	50                   	push   eax
c0008727:	e8 6f 55 00 00       	call   c000dc9b <sinc_set_converter>
c000872c:	83 c4 10             	add    esp,0x10
c000872f:	85 c0                	test   eax,eax
c0008731:	74 25                	je     c0008758 <psrc_set_converter+0x3c>
c0008733:	50                   	push   eax
c0008734:	50                   	push   eax
c0008735:	56                   	push   esi
c0008736:	53                   	push   ebx
c0008737:	e8 17 5d 00 00       	call   c000e453 <zoh_set_converter>
c000873c:	83 c4 10             	add    esp,0x10
c000873f:	85 c0                	test   eax,eax
c0008741:	74 15                	je     c0008758 <psrc_set_converter+0x3c>
c0008743:	51                   	push   ecx
c0008744:	51                   	push   ecx
c0008745:	56                   	push   esi
c0008746:	53                   	push   ebx
c0008747:	e8 0f 11 00 00       	call   c000985b <linear_set_converter>
c000874c:	83 c4 10             	add    esp,0x10
c000874f:	ba 0a 00 00 00       	mov    edx,0xa
c0008754:	85 c0                	test   eax,eax
c0008756:	75 02                	jne    c000875a <psrc_set_converter+0x3e>
c0008758:	31 d2                	xor    edx,edx
c000875a:	89 d0                	mov    eax,edx
c000875c:	5a                   	pop    edx
c000875d:	5b                   	pop    ebx
c000875e:	5e                   	pop    esi
c000875f:	c3                   	ret    

c0008760 <src_delete>:
c0008760:	53                   	push   ebx
c0008761:	83 ec 08             	sub    esp,0x8
c0008764:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008768:	85 db                	test   ebx,ebx
c000876a:	74 29                	je     c0008795 <src_delete+0x35>
c000876c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000876f:	85 c0                	test   eax,eax
c0008771:	74 0c                	je     c000877f <src_delete+0x1f>
c0008773:	83 ec 0c             	sub    esp,0xc
c0008776:	50                   	push   eax
c0008777:	e8 df 70 00 00       	call   c000f85b <free>
c000877c:	83 c4 10             	add    esp,0x10
c000877f:	50                   	push   eax
c0008780:	6a 3c                	push   0x3c
c0008782:	6a 00                	push   0x0
c0008784:	53                   	push   ebx
c0008785:	e8 f6 7f ff ff       	call   c0000780 <memset>
c000878a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000878d:	e8 c9 70 00 00       	call   c000f85b <free>
c0008792:	83 c4 10             	add    esp,0x10
c0008795:	31 c0                	xor    eax,eax
c0008797:	83 c4 08             	add    esp,0x8
c000879a:	5b                   	pop    ebx
c000879b:	c3                   	ret    

c000879c <src_process>:
c000879c:	55                   	push   ebp
c000879d:	57                   	push   edi
c000879e:	56                   	push   esi
c000879f:	53                   	push   ebx
c00087a0:	83 ec 1c             	sub    esp,0x1c
c00087a3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00087a7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087ab:	85 ed                	test   ebp,ebp
c00087ad:	0f 84 6f 01 00 00    	je     c0008922 <src_process+0x186>
c00087b3:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087b7:	0f 84 6c 01 00 00    	je     c0008929 <src_process+0x18d>
c00087bd:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087c1:	0f 84 62 01 00 00    	je     c0008929 <src_process+0x18d>
c00087c7:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087ce:	0f 85 5c 01 00 00    	jne    c0008930 <src_process+0x194>
c00087d4:	85 db                	test   ebx,ebx
c00087d6:	0f 84 5b 01 00 00    	je     c0008937 <src_process+0x19b>
c00087dc:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087de:	85 f6                	test   esi,esi
c00087e0:	0f 84 58 01 00 00    	je     c000893e <src_process+0x1a2>
c00087e6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e9:	85 ff                	test   edi,edi
c00087eb:	0f 84 4d 01 00 00    	je     c000893e <src_process+0x1a2>
c00087f1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087f4:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087ff:	68 00 00 70 3f       	push   0x3f700000
c0008804:	6a 00                	push   0x0
c0008806:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000880a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000880e:	e8 64 fe 01 00       	call   c0028677 <__ltdf2>
c0008813:	83 c4 10             	add    esp,0x10
c0008816:	85 c0                	test   eax,eax
c0008818:	0f 88 27 01 00 00    	js     c0008945 <src_process+0x1a9>
c000881e:	68 00 00 70 40       	push   0x40700000
c0008823:	6a 00                	push   0x0
c0008825:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008829:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000882d:	e8 27 fe 01 00       	call   c0028659 <__gtdf2>
c0008832:	83 c4 10             	add    esp,0x10
c0008835:	85 c0                	test   eax,eax
c0008837:	0f 8f 08 01 00 00    	jg     c0008945 <src_process+0x1a9>
c000883d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008841:	79 07                	jns    c000884a <src_process+0xae>
c0008843:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000884a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000884d:	85 c0                	test   eax,eax
c000884f:	79 50                	jns    c00088a1 <src_process+0x105>
c0008851:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008858:	39 fe                	cmp    esi,edi
c000885a:	72 37                	jb     c0008893 <src_process+0xf7>
c000885c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008863:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000886a:	68 00 00 70 3f       	push   0x3f700000
c000886f:	6a 00                	push   0x0
c0008871:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008874:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008877:	e8 fb fd 01 00       	call   c0028677 <__ltdf2>
c000887c:	83 c4 10             	add    esp,0x10
c000887f:	85 c0                	test   eax,eax
c0008881:	79 37                	jns    c00088ba <src_process+0x11e>
c0008883:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008887:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000888b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000888e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008891:	eb 27                	jmp    c00088ba <src_process+0x11e>
c0008893:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008896:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c000889a:	8d 04 86             	lea    eax,[esi+eax*4]
c000889d:	39 c7                	cmp    edi,eax
c000889f:	eb 0d                	jmp    c00088ae <src_process+0x112>
c00088a1:	39 fe                	cmp    esi,edi
c00088a3:	72 ee                	jb     c0008893 <src_process+0xf7>
c00088a5:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a9:	8d 04 87             	lea    eax,[edi+eax*4]
c00088ac:	39 c6                	cmp    esi,eax
c00088ae:	73 ac                	jae    c000885c <src_process+0xc0>
c00088b0:	b8 10 00 00 00       	mov    eax,0x10
c00088b5:	e9 90 00 00 00       	jmp    c000894a <src_process+0x1ae>
c00088ba:	83 ec 10             	sub    esp,0x10
c00088bd:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088c0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088c3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088c6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c9:	e8 ae f4 01 00       	call   c0027d7c <__subdf3>
c00088ce:	83 c4 18             	add    esp,0x18
c00088d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088d5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d9:	52                   	push   edx
c00088da:	50                   	push   eax
c00088db:	e8 30 ff 01 00       	call   c0028810 <fabs>
c00088e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e8:	83 c4 10             	add    esp,0x10
c00088eb:	68 af 03 d2 3c       	push   0x3cd203af
c00088f0:	68 16 56 e7 9e       	push   0x9ee75616
c00088f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088fd:	e8 75 fd 01 00       	call   c0028677 <__ltdf2>
c0008902:	83 c4 10             	add    esp,0x10
c0008905:	85 c0                	test   eax,eax
c0008907:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c000890b:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c000890f:	79 05                	jns    c0008916 <src_process+0x17a>
c0008911:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c0008914:	eb 03                	jmp    c0008919 <src_process+0x17d>
c0008916:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008919:	83 c4 1c             	add    esp,0x1c
c000891c:	5b                   	pop    ebx
c000891d:	5e                   	pop    esi
c000891e:	5f                   	pop    edi
c000891f:	5d                   	pop    ebp
c0008920:	ff e0                	jmp    eax
c0008922:	b8 02 00 00 00       	mov    eax,0x2
c0008927:	eb 21                	jmp    c000894a <src_process+0x1ae>
c0008929:	b8 07 00 00 00       	mov    eax,0x7
c000892e:	eb 1a                	jmp    c000894a <src_process+0x1ae>
c0008930:	b8 12 00 00 00       	mov    eax,0x12
c0008935:	eb 13                	jmp    c000894a <src_process+0x1ae>
c0008937:	b8 03 00 00 00       	mov    eax,0x3
c000893c:	eb 0c                	jmp    c000894a <src_process+0x1ae>
c000893e:	b8 04 00 00 00       	mov    eax,0x4
c0008943:	eb 05                	jmp    c000894a <src_process+0x1ae>
c0008945:	b8 06 00 00 00       	mov    eax,0x6
c000894a:	83 c4 1c             	add    esp,0x1c
c000894d:	5b                   	pop    ebx
c000894e:	5e                   	pop    esi
c000894f:	5f                   	pop    edi
c0008950:	5d                   	pop    ebp
c0008951:	c3                   	ret    

c0008952 <src_callback_read>:
c0008952:	55                   	push   ebp
c0008953:	57                   	push   edi
c0008954:	56                   	push   esi
c0008955:	53                   	push   ebx
c0008956:	83 ec 3c             	sub    esp,0x3c
c0008959:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000895d:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008961:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008965:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008969:	85 ed                	test   ebp,ebp
c000896b:	0f 8e 52 01 00 00    	jle    c0008ac3 <src_callback_read+0x171>
c0008971:	85 db                	test   ebx,ebx
c0008973:	0f 84 4a 01 00 00    	je     c0008ac3 <src_callback_read+0x171>
c0008979:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008980:	74 0c                	je     c000898e <src_callback_read+0x3c>
c0008982:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008989:	e9 35 01 00 00       	jmp    c0008ac3 <src_callback_read+0x171>
c000898e:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008992:	75 0c                	jne    c00089a0 <src_callback_read+0x4e>
c0008994:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000899b:	e9 23 01 00 00       	jmp    c0008ac3 <src_callback_read+0x171>
c00089a0:	51                   	push   ecx
c00089a1:	6a 24                	push   0x24
c00089a3:	6a 00                	push   0x0
c00089a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a9:	50                   	push   eax
c00089aa:	e8 d1 7d ff ff       	call   c0000780 <memset>
c00089af:	83 c4 10             	add    esp,0x10
c00089b2:	68 00 00 70 3f       	push   0x3f700000
c00089b7:	6a 00                	push   0x0
c00089b9:	57                   	push   edi
c00089ba:	56                   	push   esi
c00089bb:	e8 b7 fc 01 00       	call   c0028677 <__ltdf2>
c00089c0:	83 c4 10             	add    esp,0x10
c00089c3:	85 c0                	test   eax,eax
c00089c5:	78 3e                	js     c0008a05 <src_callback_read+0xb3>
c00089c7:	68 00 00 70 40       	push   0x40700000
c00089cc:	6a 00                	push   0x0
c00089ce:	57                   	push   edi
c00089cf:	56                   	push   esi
c00089d0:	e8 84 fc 01 00       	call   c0028659 <__gtdf2>
c00089d5:	83 c4 10             	add    esp,0x10
c00089d8:	85 c0                	test   eax,eax
c00089da:	7f 29                	jg     c0008a05 <src_callback_read+0xb3>
c00089dc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089e0:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e8:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089ec:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ef:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089f7:	31 f6                	xor    esi,esi
c00089f9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008a00:	e9 97 00 00 00       	jmp    c0008a9c <src_callback_read+0x14a>
c0008a05:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a0c:	e9 b2 00 00 00       	jmp    c0008ac3 <src_callback_read+0x171>
c0008a11:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a19:	52                   	push   edx
c0008a1a:	52                   	push   edx
c0008a1b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a1f:	50                   	push   eax
c0008a20:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a23:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a26:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a2a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a2e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	85 c0                	test   eax,eax
c0008a37:	75 08                	jne    c0008a41 <src_callback_read+0xef>
c0008a39:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a41:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a48:	50                   	push   eax
c0008a49:	50                   	push   eax
c0008a4a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a4e:	50                   	push   eax
c0008a4f:	53                   	push   ebx
c0008a50:	e8 47 fd ff ff       	call   c000879c <src_process>
c0008a55:	83 c4 10             	add    esp,0x10
c0008a58:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a5f:	85 c0                	test   eax,eax
c0008a61:	75 49                	jne    c0008aac <src_callback_read+0x15a>
c0008a63:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a67:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a6a:	89 f9                	mov    ecx,edi
c0008a6c:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a70:	0f af ca             	imul   ecx,edx
c0008a73:	c1 e1 02             	shl    ecx,0x2
c0008a76:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a7a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a7e:	0f af d1             	imul   edx,ecx
c0008a81:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a85:	c1 e2 02             	shl    edx,0x2
c0008a88:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a8c:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a8f:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a94:	74 12                	je     c0008aa8 <src_callback_read+0x156>
c0008a96:	39 d5                	cmp    ebp,edx
c0008a98:	7e 14                	jle    c0008aae <src_callback_read+0x15c>
c0008a9a:	89 d6                	mov    esi,edx
c0008a9c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008aa1:	75 9e                	jne    c0008a41 <src_callback_read+0xef>
c0008aa3:	e9 69 ff ff ff       	jmp    c0008a11 <src_callback_read+0xbf>
c0008aa8:	85 c9                	test   ecx,ecx
c0008aaa:	75 ea                	jne    c0008a96 <src_callback_read+0x144>
c0008aac:	89 f2                	mov    edx,esi
c0008aae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008ab2:	85 c0                	test   eax,eax
c0008ab4:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008ab7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008abb:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008abe:	74 05                	je     c0008ac5 <src_callback_read+0x173>
c0008ac0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008ac3:	31 d2                	xor    edx,edx
c0008ac5:	83 c4 3c             	add    esp,0x3c
c0008ac8:	89 d0                	mov    eax,edx
c0008aca:	5b                   	pop    ebx
c0008acb:	5e                   	pop    esi
c0008acc:	5f                   	pop    edi
c0008acd:	5d                   	pop    ebp
c0008ace:	c3                   	ret    

c0008acf <src_set_ratio>:
c0008acf:	57                   	push   edi
c0008ad0:	ba 02 00 00 00       	mov    edx,0x2
c0008ad5:	56                   	push   esi
c0008ad6:	53                   	push   ebx
c0008ad7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008adb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008adf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008ae3:	85 db                	test   ebx,ebx
c0008ae5:	74 4c                	je     c0008b33 <src_set_ratio+0x64>
c0008ae7:	ba 07 00 00 00       	mov    edx,0x7
c0008aec:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008af0:	74 41                	je     c0008b33 <src_set_ratio+0x64>
c0008af2:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008af6:	74 3b                	je     c0008b33 <src_set_ratio+0x64>
c0008af8:	68 00 00 70 3f       	push   0x3f700000
c0008afd:	6a 00                	push   0x0
c0008aff:	57                   	push   edi
c0008b00:	56                   	push   esi
c0008b01:	e8 71 fb 01 00       	call   c0028677 <__ltdf2>
c0008b06:	83 c4 10             	add    esp,0x10
c0008b09:	ba 06 00 00 00       	mov    edx,0x6
c0008b0e:	85 c0                	test   eax,eax
c0008b10:	78 21                	js     c0008b33 <src_set_ratio+0x64>
c0008b12:	68 00 00 70 40       	push   0x40700000
c0008b17:	6a 00                	push   0x0
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	e8 39 fb 01 00       	call   c0028659 <__gtdf2>
c0008b20:	83 c4 10             	add    esp,0x10
c0008b23:	ba 06 00 00 00       	mov    edx,0x6
c0008b28:	85 c0                	test   eax,eax
c0008b2a:	7f 07                	jg     c0008b33 <src_set_ratio+0x64>
c0008b2c:	89 33                	mov    DWORD PTR [ebx],esi
c0008b2e:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b31:	31 d2                	xor    edx,edx
c0008b33:	5b                   	pop    ebx
c0008b34:	89 d0                	mov    eax,edx
c0008b36:	5e                   	pop    esi
c0008b37:	5f                   	pop    edi
c0008b38:	c3                   	ret    

c0008b39 <src_get_channels>:
c0008b39:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b3d:	b8 02 00 00 00       	mov    eax,0x2
c0008b42:	85 d2                	test   edx,edx
c0008b44:	74 14                	je     c0008b5a <src_get_channels+0x21>
c0008b46:	b8 07 00 00 00       	mov    eax,0x7
c0008b4b:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b4f:	74 09                	je     c0008b5a <src_get_channels+0x21>
c0008b51:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b55:	74 03                	je     c0008b5a <src_get_channels+0x21>
c0008b57:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b5a:	c3                   	ret    

c0008b5b <src_reset>:
c0008b5b:	53                   	push   ebx
c0008b5c:	b8 02 00 00 00       	mov    eax,0x2
c0008b61:	83 ec 08             	sub    esp,0x8
c0008b64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b68:	85 db                	test   ebx,ebx
c0008b6a:	74 36                	je     c0008ba2 <src_reset+0x47>
c0008b6c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b6f:	85 c0                	test   eax,eax
c0008b71:	74 09                	je     c0008b7c <src_reset+0x21>
c0008b73:	83 ec 0c             	sub    esp,0xc
c0008b76:	53                   	push   ebx
c0008b77:	ff d0                	call   eax
c0008b79:	83 c4 10             	add    esp,0x10
c0008b7c:	31 c0                	xor    eax,eax
c0008b7e:	31 d2                	xor    edx,edx
c0008b80:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b83:	89 03                	mov    DWORD PTR [ebx],eax
c0008b85:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b88:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b8b:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b92:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b99:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008ba0:	31 c0                	xor    eax,eax
c0008ba2:	83 c4 08             	add    esp,0x8
c0008ba5:	5b                   	pop    ebx
c0008ba6:	c3                   	ret    

c0008ba7 <src_new>:
c0008ba7:	57                   	push   edi
c0008ba8:	56                   	push   esi
c0008ba9:	53                   	push   ebx
c0008baa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008bae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008bb2:	85 f6                	test   esi,esi
c0008bb4:	74 73                	je     c0008c29 <src_new+0x82>
c0008bb6:	85 ff                	test   edi,edi
c0008bb8:	7f 08                	jg     c0008bc2 <src_new+0x1b>
c0008bba:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bc0:	eb 1e                	jmp    c0008be0 <src_new+0x39>
c0008bc2:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc8:	50                   	push   eax
c0008bc9:	50                   	push   eax
c0008bca:	6a 3c                	push   0x3c
c0008bcc:	6a 01                	push   0x1
c0008bce:	e8 a8 6c 00 00       	call   c000f87b <calloc>
c0008bd3:	83 c4 10             	add    esp,0x10
c0008bd6:	89 c3                	mov    ebx,eax
c0008bd8:	85 c0                	test   eax,eax
c0008bda:	75 10                	jne    c0008bec <src_new+0x45>
c0008bdc:	85 f6                	test   esi,esi
c0008bde:	75 04                	jne    c0008be4 <src_new+0x3d>
c0008be0:	31 db                	xor    ebx,ebx
c0008be2:	eb 4b                	jmp    c0008c2f <src_new+0x88>
c0008be4:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008bea:	eb 43                	jmp    c0008c2f <src_new+0x88>
c0008bec:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bef:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bf6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bfa:	e8 1d fb ff ff       	call   c000871c <psrc_set_converter>
c0008bff:	85 c0                	test   eax,eax
c0008c01:	74 18                	je     c0008c1b <src_new+0x74>
c0008c03:	85 f6                	test   esi,esi
c0008c05:	74 06                	je     c0008c0d <src_new+0x66>
c0008c07:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c0d:	83 ec 0c             	sub    esp,0xc
c0008c10:	53                   	push   ebx
c0008c11:	31 db                	xor    ebx,ebx
c0008c13:	e8 43 6c 00 00       	call   c000f85b <free>
c0008c18:	83 c4 10             	add    esp,0x10
c0008c1b:	83 ec 0c             	sub    esp,0xc
c0008c1e:	53                   	push   ebx
c0008c1f:	e8 37 ff ff ff       	call   c0008b5b <src_reset>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	eb 06                	jmp    c0008c2f <src_new+0x88>
c0008c29:	85 ff                	test   edi,edi
c0008c2b:	7f 9b                	jg     c0008bc8 <src_new+0x21>
c0008c2d:	eb b1                	jmp    c0008be0 <src_new+0x39>
c0008c2f:	89 d8                	mov    eax,ebx
c0008c31:	5b                   	pop    ebx
c0008c32:	5e                   	pop    esi
c0008c33:	5f                   	pop    edi
c0008c34:	c3                   	ret    

c0008c35 <src_callback_new>:
c0008c35:	56                   	push   esi
c0008c36:	53                   	push   ebx
c0008c37:	53                   	push   ebx
c0008c38:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c40:	85 f6                	test   esi,esi
c0008c42:	75 0e                	jne    c0008c52 <src_callback_new+0x1d>
c0008c44:	31 db                	xor    ebx,ebx
c0008c46:	85 c0                	test   eax,eax
c0008c48:	74 47                	je     c0008c91 <src_callback_new+0x5c>
c0008c4a:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c50:	eb 3f                	jmp    c0008c91 <src_callback_new+0x5c>
c0008c52:	85 c0                	test   eax,eax
c0008c54:	74 06                	je     c0008c5c <src_callback_new+0x27>
c0008c56:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c5c:	51                   	push   ecx
c0008c5d:	50                   	push   eax
c0008c5e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c62:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c66:	e8 3c ff ff ff       	call   c0008ba7 <src_new>
c0008c6b:	83 c4 10             	add    esp,0x10
c0008c6e:	89 c3                	mov    ebx,eax
c0008c70:	85 c0                	test   eax,eax
c0008c72:	74 1d                	je     c0008c91 <src_callback_new+0x5c>
c0008c74:	83 ec 0c             	sub    esp,0xc
c0008c77:	50                   	push   eax
c0008c78:	e8 de fe ff ff       	call   c0008b5b <src_reset>
c0008c7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c81:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c88:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c8b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c8e:	83 c4 10             	add    esp,0x10
c0008c91:	89 d8                	mov    eax,ebx
c0008c93:	5a                   	pop    edx
c0008c94:	5b                   	pop    ebx
c0008c95:	5e                   	pop    esi
c0008c96:	c3                   	ret    

c0008c97 <src_get_name>:
c0008c97:	53                   	push   ebx
c0008c98:	83 ec 14             	sub    esp,0x14
c0008c9b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c9f:	53                   	push   ebx
c0008ca0:	e8 d0 4f 00 00       	call   c000dc75 <sinc_get_name>
c0008ca5:	83 c4 10             	add    esp,0x10
c0008ca8:	85 c0                	test   eax,eax
c0008caa:	75 1d                	jne    c0008cc9 <src_get_name+0x32>
c0008cac:	83 ec 0c             	sub    esp,0xc
c0008caf:	53                   	push   ebx
c0008cb0:	e8 80 57 00 00       	call   c000e435 <zoh_get_name>
c0008cb5:	83 c4 10             	add    esp,0x10
c0008cb8:	85 c0                	test   eax,eax
c0008cba:	75 0d                	jne    c0008cc9 <src_get_name+0x32>
c0008cbc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cc0:	83 c4 08             	add    esp,0x8
c0008cc3:	5b                   	pop    ebx
c0008cc4:	e9 74 0b 00 00       	jmp    c000983d <linear_get_name>
c0008cc9:	83 c4 08             	add    esp,0x8
c0008ccc:	5b                   	pop    ebx
c0008ccd:	c3                   	ret    

c0008cce <src_get_description>:
c0008cce:	53                   	push   ebx
c0008ccf:	83 ec 14             	sub    esp,0x14
c0008cd2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cd6:	53                   	push   ebx
c0008cd7:	e8 ac 4f 00 00       	call   c000dc88 <sinc_get_description>
c0008cdc:	83 c4 10             	add    esp,0x10
c0008cdf:	85 c0                	test   eax,eax
c0008ce1:	75 1d                	jne    c0008d00 <src_get_description+0x32>
c0008ce3:	83 ec 0c             	sub    esp,0xc
c0008ce6:	53                   	push   ebx
c0008ce7:	e8 58 57 00 00       	call   c000e444 <zoh_get_description>
c0008cec:	83 c4 10             	add    esp,0x10
c0008cef:	85 c0                	test   eax,eax
c0008cf1:	75 0d                	jne    c0008d00 <src_get_description+0x32>
c0008cf3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cf7:	83 c4 08             	add    esp,0x8
c0008cfa:	5b                   	pop    ebx
c0008cfb:	e9 4c 0b 00 00       	jmp    c000984c <linear_get_description>
c0008d00:	83 c4 08             	add    esp,0x8
c0008d03:	5b                   	pop    ebx
c0008d04:	c3                   	ret    

c0008d05 <src_get_version>:
c0008d05:	b8 c0 9a 02 c0       	mov    eax,0xc0029ac0
c0008d0a:	c3                   	ret    

c0008d0b <src_is_valid_ratio>:
c0008d0b:	83 ec 1c             	sub    esp,0x1c
c0008d0e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d1a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d1e:	68 00 00 70 3f       	push   0x3f700000
c0008d23:	6a 00                	push   0x0
c0008d25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d2d:	e8 45 f9 01 00       	call   c0028677 <__ltdf2>
c0008d32:	83 c4 10             	add    esp,0x10
c0008d35:	31 d2                	xor    edx,edx
c0008d37:	85 c0                	test   eax,eax
c0008d39:	78 1e                	js     c0008d59 <src_is_valid_ratio+0x4e>
c0008d3b:	68 00 00 70 40       	push   0x40700000
c0008d40:	6a 00                	push   0x0
c0008d42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d4a:	e8 0a f9 01 00       	call   c0028659 <__gtdf2>
c0008d4f:	31 d2                	xor    edx,edx
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	85 c0                	test   eax,eax
c0008d56:	0f 9e c2             	setle  dl
c0008d59:	89 d0                	mov    eax,edx
c0008d5b:	83 c4 1c             	add    esp,0x1c
c0008d5e:	c3                   	ret    

c0008d5f <src_error>:
c0008d5f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d63:	31 c0                	xor    eax,eax
c0008d65:	85 d2                	test   edx,edx
c0008d67:	74 03                	je     c0008d6c <src_error+0xd>
c0008d69:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d6c:	c3                   	ret    

c0008d6d <src_strerror>:
c0008d6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d71:	31 c0                	xor    eax,eax
c0008d73:	83 fa 17             	cmp    edx,0x17
c0008d76:	77 07                	ja     c0008d7f <src_strerror+0x12>
c0008d78:	8b 04 95 20 9f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd60e0]
c0008d7f:	c3                   	ret    

c0008d80 <src_simple>:
c0008d80:	56                   	push   esi
c0008d81:	53                   	push   ebx
c0008d82:	83 ec 18             	sub    esp,0x18
c0008d85:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d89:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d8d:	50                   	push   eax
c0008d8e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d92:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d96:	e8 0c fe ff ff       	call   c0008ba7 <src_new>
c0008d9b:	83 c4 10             	add    esp,0x10
c0008d9e:	85 c0                	test   eax,eax
c0008da0:	75 06                	jne    c0008da8 <src_simple+0x28>
c0008da2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008da6:	eb 25                	jmp    c0008dcd <src_simple+0x4d>
c0008da8:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008daf:	89 c3                	mov    ebx,eax
c0008db1:	50                   	push   eax
c0008db2:	50                   	push   eax
c0008db3:	56                   	push   esi
c0008db4:	53                   	push   ebx
c0008db5:	e8 e2 f9 ff ff       	call   c000879c <src_process>
c0008dba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008dbd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008dc1:	e8 9a f9 ff ff       	call   c0008760 <src_delete>
c0008dc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dca:	83 c4 10             	add    esp,0x10
c0008dcd:	83 c4 14             	add    esp,0x14
c0008dd0:	5b                   	pop    ebx
c0008dd1:	5e                   	pop    esi
c0008dd2:	c3                   	ret    

c0008dd3 <src_short_to_float_array>:
c0008dd3:	53                   	push   ebx
c0008dd4:	83 ec 18             	sub    esp,0x18
c0008dd7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ddb:	85 db                	test   ebx,ebx
c0008ddd:	74 54                	je     c0008e33 <src_short_to_float_array+0x60>
c0008ddf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008de3:	4b                   	dec    ebx
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008deb:	50                   	push   eax
c0008dec:	e8 1a f6 01 00       	call   c002840b <__floatsidf>
c0008df1:	83 c4 10             	add    esp,0x10
c0008df4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dfc:	68 00 00 00 3f       	push   0x3f000000
c0008e01:	6a 00                	push   0x0
c0008e03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e0b:	e8 98 ef 01 00       	call   c0027da8 <__muldf3>
c0008e10:	59                   	pop    ecx
c0008e11:	59                   	pop    ecx
c0008e12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e16:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e22:	e8 54 f8 01 00       	call   c002867b <__truncdfsf2>
c0008e27:	83 c4 10             	add    esp,0x10
c0008e2a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e2e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e31:	eb a8                	jmp    c0008ddb <src_short_to_float_array+0x8>
c0008e33:	83 c4 18             	add    esp,0x18
c0008e36:	5b                   	pop    ebx
c0008e37:	c3                   	ret    

c0008e38 <src_float_to_short_array>:
c0008e38:	56                   	push   esi
c0008e39:	53                   	push   ebx
c0008e3a:	83 ec 14             	sub    esp,0x14
c0008e3d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e41:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e45:	85 db                	test   ebx,ebx
c0008e47:	0f 84 a4 00 00 00    	je     c0008ef1 <src_float_to_short_array+0xb9>
c0008e4d:	83 ec 0c             	sub    esp,0xc
c0008e50:	4b                   	dec    ebx
c0008e51:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e55:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e58:	e8 42 f9 01 00       	call   c002879f <__extendsfdf2>
c0008e5d:	83 c4 10             	add    esp,0x10
c0008e60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e68:	68 00 00 e0 41       	push   0x41e00000
c0008e6d:	6a 00                	push   0x0
c0008e6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e77:	e8 2c ef 01 00       	call   c0027da8 <__muldf3>
c0008e7c:	83 c4 10             	add    esp,0x10
c0008e7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e87:	68 ff ff df 41       	push   0x41dfffff
c0008e8c:	68 00 00 c0 ff       	push   0xffc00000
c0008e91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e99:	e8 d7 f7 01 00       	call   c0028675 <__gedf2>
c0008e9e:	83 c4 10             	add    esp,0x10
c0008ea1:	85 c0                	test   eax,eax
c0008ea3:	78 08                	js     c0008ead <src_float_to_short_array+0x75>
c0008ea5:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008eab:	eb 98                	jmp    c0008e45 <src_float_to_short_array+0xd>
c0008ead:	68 00 00 e0 c1       	push   0xc1e00000
c0008eb2:	6a 00                	push   0x0
c0008eb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ebc:	e8 b8 f7 01 00       	call   c0028679 <__ledf2>
c0008ec1:	83 c4 10             	add    esp,0x10
c0008ec4:	85 c0                	test   eax,eax
c0008ec6:	7f 0b                	jg     c0008ed3 <src_float_to_short_array+0x9b>
c0008ec8:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ece:	e9 72 ff ff ff       	jmp    c0008e45 <src_float_to_short_array+0xd>
c0008ed3:	50                   	push   eax
c0008ed4:	50                   	push   eax
c0008ed5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008edd:	e8 4e f9 01 00       	call   c0028830 <lrint>
c0008ee2:	83 c4 10             	add    esp,0x10
c0008ee5:	c1 f8 10             	sar    eax,0x10
c0008ee8:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eec:	e9 54 ff ff ff       	jmp    c0008e45 <src_float_to_short_array+0xd>
c0008ef1:	83 c4 14             	add    esp,0x14
c0008ef4:	5b                   	pop    ebx
c0008ef5:	5e                   	pop    esi
c0008ef6:	c3                   	ret    

c0008ef7 <src_int_to_float_array>:
c0008ef7:	53                   	push   ebx
c0008ef8:	83 ec 18             	sub    esp,0x18
c0008efb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008eff:	85 db                	test   ebx,ebx
c0008f01:	74 52                	je     c0008f55 <src_int_to_float_array+0x5e>
c0008f03:	83 ec 0c             	sub    esp,0xc
c0008f06:	4b                   	dec    ebx
c0008f07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f0b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f0e:	e8 f8 f4 01 00       	call   c002840b <__floatsidf>
c0008f13:	83 c4 10             	add    esp,0x10
c0008f16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f1e:	68 00 00 00 3e       	push   0x3e000000
c0008f23:	6a 00                	push   0x0
c0008f25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f2d:	e8 76 ee 01 00       	call   c0027da8 <__muldf3>
c0008f32:	59                   	pop    ecx
c0008f33:	59                   	pop    ecx
c0008f34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f38:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f44:	e8 32 f7 01 00       	call   c002867b <__truncdfsf2>
c0008f49:	83 c4 10             	add    esp,0x10
c0008f4c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f50:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f53:	eb aa                	jmp    c0008eff <src_int_to_float_array+0x8>
c0008f55:	83 c4 18             	add    esp,0x18
c0008f58:	5b                   	pop    ebx
c0008f59:	c3                   	ret    

c0008f5a <src_float_to_int_array>:
c0008f5a:	56                   	push   esi
c0008f5b:	53                   	push   ebx
c0008f5c:	83 ec 14             	sub    esp,0x14
c0008f5f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f63:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f67:	85 db                	test   ebx,ebx
c0008f69:	0f 84 a2 00 00 00    	je     c0009011 <src_float_to_int_array+0xb7>
c0008f6f:	83 ec 0c             	sub    esp,0xc
c0008f72:	4b                   	dec    ebx
c0008f73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f77:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f7a:	e8 20 f8 01 00       	call   c002879f <__extendsfdf2>
c0008f7f:	83 c4 10             	add    esp,0x10
c0008f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f8a:	68 00 00 e0 41       	push   0x41e00000
c0008f8f:	6a 00                	push   0x0
c0008f91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	e8 0a ee 01 00       	call   c0027da8 <__muldf3>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fa5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa9:	68 ff ff df 41       	push   0x41dfffff
c0008fae:	68 00 00 c0 ff       	push   0xffc00000
c0008fb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	e8 b5 f6 01 00       	call   c0028675 <__gedf2>
c0008fc0:	83 c4 10             	add    esp,0x10
c0008fc3:	85 c0                	test   eax,eax
c0008fc5:	78 09                	js     c0008fd0 <src_float_to_int_array+0x76>
c0008fc7:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fce:	eb 97                	jmp    c0008f67 <src_float_to_int_array+0xd>
c0008fd0:	68 00 00 e0 c1       	push   0xc1e00000
c0008fd5:	6a 00                	push   0x0
c0008fd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fdb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fdf:	e8 95 f6 01 00       	call   c0028679 <__ledf2>
c0008fe4:	83 c4 10             	add    esp,0x10
c0008fe7:	85 c0                	test   eax,eax
c0008fe9:	7f 0c                	jg     c0008ff7 <src_float_to_int_array+0x9d>
c0008feb:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008ff2:	e9 70 ff ff ff       	jmp    c0008f67 <src_float_to_int_array+0xd>
c0008ff7:	50                   	push   eax
c0008ff8:	50                   	push   eax
c0008ff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ffd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009001:	e8 2a f8 01 00       	call   c0028830 <lrint>
c0009006:	83 c4 10             	add    esp,0x10
c0009009:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c000900c:	e9 56 ff ff ff       	jmp    c0008f67 <src_float_to_int_array+0xd>
c0009011:	83 c4 14             	add    esp,0x14
c0009014:	5b                   	pop    ebx
c0009015:	5e                   	pop    esi
c0009016:	c3                   	ret    

c0009017 <linear_vari_process>:
c0009017:	55                   	push   ebp
c0009018:	31 d2                	xor    edx,edx
c000901a:	57                   	push   edi
c000901b:	56                   	push   esi
c000901c:	53                   	push   ebx
c000901d:	83 ec 3c             	sub    esp,0x3c
c0009020:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0009024:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009028:	0f 8e d3 07 00 00    	jle    c0009801 <linear_vari_process+0x7ea>
c000902e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009032:	ba 05 00 00 00       	mov    edx,0x5
c0009037:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000903a:	85 db                	test   ebx,ebx
c000903c:	0f 84 bf 07 00 00    	je     c0009801 <linear_vari_process+0x7ea>
c0009042:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009045:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009049:	74 19                	je     c0009064 <linear_vari_process+0x4d>
c000904b:	31 d2                	xor    edx,edx
c000904d:	39 c2                	cmp    edx,eax
c000904f:	7d 0c                	jge    c000905d <linear_vari_process+0x46>
c0009051:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009053:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009056:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000905a:	42                   	inc    edx
c000905b:	eb f0                	jmp    c000904d <linear_vari_process+0x36>
c000905d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009064:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009067:	0f af d0             	imul   edx,eax
c000906a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000906d:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009071:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009078:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000907b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009082:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009086:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009089:	8b 00                	mov    eax,DWORD PTR [eax]
c000908b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000908f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009093:	68 00 00 70 3f       	push   0x3f700000
c0009098:	6a 00                	push   0x0
c000909a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090a2:	e8 d0 f5 01 00       	call   c0028677 <__ltdf2>
c00090a7:	83 c4 10             	add    esp,0x10
c00090aa:	ba 16 00 00 00       	mov    edx,0x16
c00090af:	85 c0                	test   eax,eax
c00090b1:	0f 88 4a 07 00 00    	js     c0009801 <linear_vari_process+0x7ea>
c00090b7:	68 00 00 70 40       	push   0x40700000
c00090bc:	6a 00                	push   0x0
c00090be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c6:	e8 8e f5 01 00       	call   c0028659 <__gtdf2>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	ba 16 00 00 00       	mov    edx,0x16
c00090d3:	85 c0                	test   eax,eax
c00090d5:	0f 8f 26 07 00 00    	jg     c0009801 <linear_vari_process+0x7ea>
c00090db:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090df:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ed:	68 00 00 f0 3f       	push   0x3ff00000
c00090f2:	6a 00                	push   0x0
c00090f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fc:	e8 76 f5 01 00       	call   c0028677 <__ltdf2>
c0009101:	83 c4 10             	add    esp,0x10
c0009104:	85 c0                	test   eax,eax
c0009106:	0f 89 89 02 00 00    	jns    c0009395 <linear_vari_process+0x37e>
c000910c:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c000910f:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0009112:	0f 8d 7d 02 00 00    	jge    c0009395 <linear_vari_process+0x37e>
c0009118:	83 ec 0c             	sub    esp,0xc
c000911b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000911e:	e8 e8 f2 01 00       	call   c002840b <__floatsidf>
c0009123:	83 c4 10             	add    esp,0x10
c0009126:	89 04 24             	mov    DWORD PTR [esp],eax
c0009129:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000912d:	68 00 00 f0 3f       	push   0x3ff00000
c0009132:	6a 00                	push   0x0
c0009134:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009138:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000913c:	e8 ea e5 01 00       	call   c002772b <__adddf3>
c0009141:	83 c4 10             	add    esp,0x10
c0009144:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009148:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000914c:	52                   	push   edx
c000914d:	50                   	push   eax
c000914e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009152:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009156:	e8 4d ec 01 00       	call   c0027da8 <__muldf3>
c000915b:	5d                   	pop    ebp
c000915c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009160:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009164:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009167:	e8 9f f2 01 00       	call   c002840b <__floatsidf>
c000916c:	83 c4 10             	add    esp,0x10
c000916f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009173:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009177:	52                   	push   edx
c0009178:	50                   	push   eax
c0009179:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000917d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009181:	e8 a5 e5 01 00       	call   c002772b <__adddf3>
c0009186:	59                   	pop    ecx
c0009187:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000918b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000918f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009192:	e8 74 f2 01 00       	call   c002840b <__floatsidf>
c0009197:	83 c4 10             	add    esp,0x10
c000919a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000919e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00091a2:	52                   	push   edx
c00091a3:	50                   	push   eax
c00091a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091ac:	e8 c4 f4 01 00       	call   c0028675 <__gedf2>
c00091b1:	83 c4 10             	add    esp,0x10
c00091b4:	85 c0                	test   eax,eax
c00091b6:	0f 89 d9 01 00 00    	jns    c0009395 <linear_vari_process+0x37e>
c00091bc:	85 ff                	test   edi,edi
c00091be:	0f 8e f4 00 00 00    	jle    c00092b8 <linear_vari_process+0x2a1>
c00091c4:	83 ec 10             	sub    esp,0x10
c00091c7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ca:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091cd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091d1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091d4:	ff 30                	push   DWORD PTR [eax]
c00091d6:	e8 a1 eb 01 00       	call   c0027d7c <__subdf3>
c00091db:	83 c4 18             	add    esp,0x18
c00091de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091e6:	52                   	push   edx
c00091e7:	50                   	push   eax
c00091e8:	e8 23 f6 01 00       	call   c0028810 <fabs>
c00091ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091f5:	83 c4 10             	add    esp,0x10
c00091f8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091fd:	68 23 42 92 0c       	push   0xc924223
c0009202:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009206:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000920a:	e8 4a f4 01 00       	call   c0028659 <__gtdf2>
c000920f:	83 c4 10             	add    esp,0x10
c0009212:	85 c0                	test   eax,eax
c0009214:	0f 8e 9e 00 00 00    	jle    c00092b8 <linear_vari_process+0x2a1>
c000921a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000921e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009221:	8b 00                	mov    eax,DWORD PTR [eax]
c0009223:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009227:	89 04 24             	mov    DWORD PTR [esp],eax
c000922a:	52                   	push   edx
c000922b:	50                   	push   eax
c000922c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000922f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009232:	e8 45 eb 01 00       	call   c0027d7c <__subdf3>
c0009237:	59                   	pop    ecx
c0009238:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000923c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009240:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009243:	e8 c3 f1 01 00       	call   c002840b <__floatsidf>
c0009248:	83 c4 10             	add    esp,0x10
c000924b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000924f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009253:	52                   	push   edx
c0009254:	50                   	push   eax
c0009255:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 46 eb 01 00       	call   c0027da8 <__muldf3>
c0009262:	5f                   	pop    edi
c0009263:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009267:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000926b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000926e:	e8 98 f1 01 00       	call   c002840b <__floatsidf>
c0009273:	83 c4 10             	add    esp,0x10
c0009276:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000927a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000927e:	52                   	push   edx
c000927f:	50                   	push   eax
c0009280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009288:	e8 ff ed 01 00       	call   c002808c <__divdf3>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009294:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009298:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000929c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00092a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a8:	e8 7e e4 01 00       	call   c002772b <__adddf3>
c00092ad:	83 c4 10             	add    esp,0x10
c00092b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b8:	31 ff                	xor    edi,edi
c00092ba:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092bd:	0f 8e 9d 00 00 00    	jle    c0009360 <linear_vari_process+0x349>
c00092c3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092c6:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092ca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092cd:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00092d4:	8b 06                	mov    eax,DWORD PTR [esi]
c00092d6:	52                   	push   edx
c00092d7:	52                   	push   edx
c00092d8:	55                   	push   ebp
c00092d9:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092dc:	47                   	inc    edi
c00092dd:	e8 de dd 01 00       	call   c00270c0 <__subsf3>
c00092e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00092e5:	e8 b5 f4 01 00       	call   c002879f <__extendsfdf2>
c00092ea:	83 c4 10             	add    esp,0x10
c00092ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092f1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009301:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009305:	e8 9e ea 01 00       	call   c0027da8 <__muldf3>
c000930a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000930d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009311:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009315:	e8 85 f4 01 00       	call   c002879f <__extendsfdf2>
c000931a:	83 c4 10             	add    esp,0x10
c000931d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009321:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009325:	52                   	push   edx
c0009326:	50                   	push   eax
c0009327:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000932b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000932f:	e8 f7 e3 01 00       	call   c002772b <__adddf3>
c0009334:	59                   	pop    ecx
c0009335:	5d                   	pop    ebp
c0009336:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000933a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000933e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009342:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009346:	e8 30 f3 01 00       	call   c002867b <__truncdfsf2>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009351:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009355:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009358:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000935b:	e9 5a ff ff ff       	jmp    c00092ba <linear_vari_process+0x2a3>
c0009360:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009364:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009368:	68 00 00 f0 3f       	push   0x3ff00000
c000936d:	6a 00                	push   0x0
c000936f:	e8 18 ed 01 00       	call   c002808c <__divdf3>
c0009374:	83 c4 10             	add    esp,0x10
c0009377:	89 04 24             	mov    DWORD PTR [esp],eax
c000937a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000937e:	52                   	push   edx
c000937f:	50                   	push   eax
c0009380:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009384:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009388:	e8 9e e3 01 00       	call   c002772b <__adddf3>
c000938d:	83 c4 10             	add    esp,0x10
c0009390:	e9 50 fd ff ff       	jmp    c00090e5 <linear_vari_process+0xce>
c0009395:	50                   	push   eax
c0009396:	50                   	push   eax
c0009397:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000939b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000939f:	e8 8c f4 01 00       	call   c0028830 <lrint>
c00093a4:	83 ec 0c             	sub    esp,0xc
c00093a7:	50                   	push   eax
c00093a8:	e8 5e f0 01 00       	call   c002840b <__floatsidf>
c00093ad:	83 c4 10             	add    esp,0x10
c00093b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b8:	52                   	push   edx
c00093b9:	50                   	push   eax
c00093ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093c2:	e8 b5 e9 01 00       	call   c0027d7c <__subdf3>
c00093c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093cb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093cf:	83 c4 20             	add    esp,0x20
c00093d2:	6a 00                	push   0x0
c00093d4:	6a 00                	push   0x0
c00093d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093de:	e8 94 f2 01 00       	call   c0028677 <__ltdf2>
c00093e3:	83 c4 10             	add    esp,0x10
c00093e6:	85 c0                	test   eax,eax
c00093e8:	79 1e                	jns    c0009408 <linear_vari_process+0x3f1>
c00093ea:	68 00 00 f0 3f       	push   0x3ff00000
c00093ef:	6a 00                	push   0x0
c00093f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f9:	e8 2d e3 01 00       	call   c002772b <__adddf3>
c00093fe:	83 c4 10             	add    esp,0x10
c0009401:	89 04 24             	mov    DWORD PTR [esp],eax
c0009404:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009408:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000940b:	83 ec 10             	sub    esp,0x10
c000940e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009412:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009416:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000941a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000941e:	e8 59 e9 01 00       	call   c0027d7c <__subdf3>
c0009423:	83 c4 18             	add    esp,0x18
c0009426:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000942a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000942e:	52                   	push   edx
c000942f:	50                   	push   eax
c0009430:	e8 fb f3 01 00       	call   c0028830 <lrint>
c0009435:	83 c4 10             	add    esp,0x10
c0009438:	0f af f8             	imul   edi,eax
c000943b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000943e:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009441:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009444:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009447:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000944a:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000944e:	0f 8d 13 03 00 00    	jge    c0009767 <linear_vari_process+0x750>
c0009454:	83 ec 0c             	sub    esp,0xc
c0009457:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000945a:	e8 ac ef 01 00       	call   c002840b <__floatsidf>
c000945f:	83 c4 10             	add    esp,0x10
c0009462:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009466:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000946a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009472:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009476:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947a:	e8 29 e9 01 00       	call   c0027da8 <__muldf3>
c000947f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009482:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009486:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000948a:	e8 7c ef 01 00       	call   c002840b <__floatsidf>
c000948f:	83 c4 10             	add    esp,0x10
c0009492:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009496:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000949a:	52                   	push   edx
c000949b:	50                   	push   eax
c000949c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a4:	e8 82 e2 01 00       	call   c002772b <__adddf3>
c00094a9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094b4:	e8 52 ef 01 00       	call   c002840b <__floatsidf>
c00094b9:	83 c4 10             	add    esp,0x10
c00094bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094c0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094c4:	52                   	push   edx
c00094c5:	50                   	push   eax
c00094c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ce:	e8 a4 f1 01 00       	call   c0028677 <__ltdf2>
c00094d3:	83 c4 10             	add    esp,0x10
c00094d6:	85 c0                	test   eax,eax
c00094d8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094dc:	0f 89 85 02 00 00    	jns    c0009767 <linear_vari_process+0x750>
c00094e2:	85 c9                	test   ecx,ecx
c00094e4:	0f 8e f5 00 00 00    	jle    c00095df <linear_vari_process+0x5c8>
c00094ea:	83 ec 10             	sub    esp,0x10
c00094ed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094f0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094f3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094f7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094fa:	ff 30                	push   DWORD PTR [eax]
c00094fc:	e8 7b e8 01 00       	call   c0027d7c <__subdf3>
c0009501:	83 c4 18             	add    esp,0x18
c0009504:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009508:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000950c:	52                   	push   edx
c000950d:	50                   	push   eax
c000950e:	e8 fd f2 01 00       	call   c0028810 <fabs>
c0009513:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009517:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000951b:	83 c4 10             	add    esp,0x10
c000951e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009523:	68 23 42 92 0c       	push   0xc924223
c0009528:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000952c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009530:	e8 24 f1 01 00       	call   c0028659 <__gtdf2>
c0009535:	83 c4 10             	add    esp,0x10
c0009538:	85 c0                	test   eax,eax
c000953a:	0f 8e 9f 00 00 00    	jle    c00095df <linear_vari_process+0x5c8>
c0009540:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009544:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009547:	8b 00                	mov    eax,DWORD PTR [eax]
c0009549:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000954d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009551:	52                   	push   edx
c0009552:	50                   	push   eax
c0009553:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009556:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009559:	e8 1e e8 01 00       	call   c0027d7c <__subdf3>
c000955e:	5f                   	pop    edi
c000955f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009563:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009567:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000956a:	e8 9c ee 01 00       	call   c002840b <__floatsidf>
c000956f:	83 c4 10             	add    esp,0x10
c0009572:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009576:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000957a:	52                   	push   edx
c000957b:	50                   	push   eax
c000957c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009584:	e8 1f e8 01 00       	call   c0027da8 <__muldf3>
c0009589:	5d                   	pop    ebp
c000958a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000958e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009592:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009595:	e8 71 ee 01 00       	call   c002840b <__floatsidf>
c000959a:	83 c4 10             	add    esp,0x10
c000959d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095a1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095a5:	52                   	push   edx
c00095a6:	50                   	push   eax
c00095a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095af:	e8 d8 ea 01 00       	call   c002808c <__divdf3>
c00095b4:	83 c4 10             	add    esp,0x10
c00095b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095bb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095bf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095cf:	e8 57 e1 01 00       	call   c002772b <__adddf3>
c00095d4:	83 c4 10             	add    esp,0x10
c00095d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095df:	31 ff                	xor    edi,edi
c00095e1:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095e4:	39 f8                	cmp    eax,edi
c00095e6:	0f 8e ac 00 00 00    	jle    c0009698 <linear_vari_process+0x681>
c00095ec:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ee:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095f1:	29 c1                	sub    ecx,eax
c00095f3:	89 c8                	mov    eax,ecx
c00095f5:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f8:	01 f8                	add    eax,edi
c00095fa:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095fe:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c0009601:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009604:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009608:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000960b:	51                   	push   ecx
c000960c:	01 f8                	add    eax,edi
c000960e:	51                   	push   ecx
c000960f:	47                   	inc    edi
c0009610:	55                   	push   ebp
c0009611:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009614:	e8 a7 da 01 00       	call   c00270c0 <__subsf3>
c0009619:	89 04 24             	mov    DWORD PTR [esp],eax
c000961c:	e8 7e f1 01 00       	call   c002879f <__extendsfdf2>
c0009621:	83 c4 10             	add    esp,0x10
c0009624:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009628:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000962c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009630:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009634:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009638:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963c:	e8 67 e7 01 00       	call   c0027da8 <__muldf3>
c0009641:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009644:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009648:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000964c:	e8 4e f1 01 00       	call   c002879f <__extendsfdf2>
c0009651:	83 c4 10             	add    esp,0x10
c0009654:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009658:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000965c:	52                   	push   edx
c000965d:	50                   	push   eax
c000965e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009662:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009666:	e8 c0 e0 01 00       	call   c002772b <__adddf3>
c000966b:	5d                   	pop    ebp
c000966c:	59                   	pop    ecx
c000966d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009671:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009675:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009679:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000967d:	e8 f9 ef 01 00       	call   c002867b <__truncdfsf2>
c0009682:	83 c4 10             	add    esp,0x10
c0009685:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009689:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000968d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009690:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009693:	e9 49 ff ff ff       	jmp    c00095e1 <linear_vari_process+0x5ca>
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096a0:	68 00 00 f0 3f       	push   0x3ff00000
c00096a5:	6a 00                	push   0x0
c00096a7:	e8 e0 e9 01 00       	call   c002808c <__divdf3>
c00096ac:	83 c4 10             	add    esp,0x10
c00096af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096b7:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096bb:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c7:	e8 5f e0 01 00       	call   c002772b <__adddf3>
c00096cc:	59                   	pop    ecx
c00096cd:	5f                   	pop    edi
c00096ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096de:	e8 4d f1 01 00       	call   c0028830 <lrint>
c00096e3:	83 ec 0c             	sub    esp,0xc
c00096e6:	50                   	push   eax
c00096e7:	e8 1f ed 01 00       	call   c002840b <__floatsidf>
c00096ec:	83 c4 10             	add    esp,0x10
c00096ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096f3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096f7:	52                   	push   edx
c00096f8:	50                   	push   eax
c00096f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009701:	e8 76 e6 01 00       	call   c0027d7c <__subdf3>
c0009706:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000970a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000970e:	83 c4 20             	add    esp,0x20
c0009711:	6a 00                	push   0x0
c0009713:	6a 00                	push   0x0
c0009715:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009719:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000971d:	e8 55 ef 01 00       	call   c0028677 <__ltdf2>
c0009722:	83 c4 10             	add    esp,0x10
c0009725:	85 c0                	test   eax,eax
c0009727:	79 1e                	jns    c0009747 <linear_vari_process+0x730>
c0009729:	68 00 00 f0 3f       	push   0x3ff00000
c000972e:	6a 00                	push   0x0
c0009730:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009734:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009738:	e8 ee df 01 00       	call   c002772b <__adddf3>
c000973d:	83 c4 10             	add    esp,0x10
c0009740:	89 04 24             	mov    DWORD PTR [esp],eax
c0009743:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009747:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000974a:	83 ec 10             	sub    esp,0x10
c000974d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009755:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009759:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000975d:	e8 1a e6 01 00       	call   c0027d7c <__subdf3>
c0009762:	e9 bc fc ff ff       	jmp    c0009423 <linear_vari_process+0x40c>
c0009767:	39 fd                	cmp    ebp,edi
c0009769:	7d 38                	jge    c00097a3 <linear_vari_process+0x78c>
c000976b:	83 ec 0c             	sub    esp,0xc
c000976e:	89 f8                	mov    eax,edi
c0009770:	29 e8                	sub    eax,ebp
c0009772:	99                   	cdq    
c0009773:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009776:	50                   	push   eax
c0009777:	e8 8f ec 01 00       	call   c002840b <__floatsidf>
c000977c:	83 c4 10             	add    esp,0x10
c000977f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009783:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009787:	52                   	push   edx
c0009788:	50                   	push   eax
c0009789:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000978d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009791:	e8 95 df 01 00       	call   c002772b <__adddf3>
c0009796:	83 c4 10             	add    esp,0x10
c0009799:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000979c:	89 04 24             	mov    DWORD PTR [esp],eax
c000979f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00097a3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097a7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097ae:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097b1:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097b4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097b7:	85 c0                	test   eax,eax
c00097b9:	7f 29                	jg     c00097e4 <linear_vari_process+0x7cd>
c00097bb:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097c7:	89 01                	mov    DWORD PTR [ecx],eax
c00097c9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097cc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097cf:	99                   	cdq    
c00097d0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097d6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d9:	99                   	cdq    
c00097da:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097dd:	31 d2                	xor    edx,edx
c00097df:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097e2:	eb 1d                	jmp    c0009801 <linear_vari_process+0x7ea>
c00097e4:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097e7:	31 d2                	xor    edx,edx
c00097e9:	29 c8                	sub    eax,ecx
c00097eb:	c1 e0 02             	shl    eax,0x2
c00097ee:	39 d1                	cmp    ecx,edx
c00097f0:	7e c9                	jle    c00097bb <linear_vari_process+0x7a4>
c00097f2:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097f4:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097f7:	83 c0 04             	add    eax,0x4
c00097fa:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097fe:	42                   	inc    edx
c00097ff:	eb ed                	jmp    c00097ee <linear_vari_process+0x7d7>
c0009801:	83 c4 3c             	add    esp,0x3c
c0009804:	89 d0                	mov    eax,edx
c0009806:	5b                   	pop    ebx
c0009807:	5e                   	pop    esi
c0009808:	5f                   	pop    edi
c0009809:	5d                   	pop    ebp
c000980a:	c3                   	ret    

c000980b <linear_reset>:
c000980b:	83 ec 0c             	sub    esp,0xc
c000980e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009812:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0009815:	85 c0                	test   eax,eax
c0009817:	74 20                	je     c0009839 <linear_reset+0x2e>
c0009819:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000981c:	83 c0 1c             	add    eax,0x1c
c000981f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009822:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009829:	c1 e2 02             	shl    edx,0x2
c000982c:	51                   	push   ecx
c000982d:	52                   	push   edx
c000982e:	6a 00                	push   0x0
c0009830:	50                   	push   eax
c0009831:	e8 4a 6f ff ff       	call   c0000780 <memset>
c0009836:	83 c4 10             	add    esp,0x10
c0009839:	83 c4 0c             	add    esp,0xc
c000983c:	c3                   	ret    

c000983d <linear_get_name>:
c000983d:	31 c0                	xor    eax,eax
c000983f:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009844:	75 05                	jne    c000984b <linear_get_name+0xe>
c0009846:	b8 80 9f 02 c0       	mov    eax,0xc0029f80
c000984b:	c3                   	ret    

c000984c <linear_get_description>:
c000984c:	31 c0                	xor    eax,eax
c000984e:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009853:	75 05                	jne    c000985a <linear_get_description+0xe>
c0009855:	b8 94 9f 02 c0       	mov    eax,0xc0029f94
c000985a:	c3                   	ret    

c000985b <linear_set_converter>:
c000985b:	53                   	push   ebx
c000985c:	b8 0a 00 00 00       	mov    eax,0xa
c0009861:	83 ec 08             	sub    esp,0x8
c0009864:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009868:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000986d:	75 6e                	jne    c00098dd <linear_set_converter+0x82>
c000986f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009872:	85 c0                	test   eax,eax
c0009874:	74 13                	je     c0009889 <linear_set_converter+0x2e>
c0009876:	83 ec 0c             	sub    esp,0xc
c0009879:	50                   	push   eax
c000987a:	e8 dc 5f 00 00       	call   c000f85b <free>
c000987f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009886:	83 c4 10             	add    esp,0x10
c0009889:	50                   	push   eax
c000988a:	50                   	push   eax
c000988b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000988e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009895:	50                   	push   eax
c0009896:	6a 01                	push   0x1
c0009898:	e8 de 5f 00 00       	call   c000f87b <calloc>
c000989d:	83 c4 10             	add    esp,0x10
c00098a0:	89 c2                	mov    edx,eax
c00098a2:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00098a5:	85 d2                	test   edx,edx
c00098a7:	b8 01 00 00 00       	mov    eax,0x1
c00098ac:	74 2f                	je     c00098dd <linear_set_converter+0x82>
c00098ae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098b1:	83 ec 0c             	sub    esp,0xc
c00098b4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098b7:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098bd:	c7 43 24 17 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009017
c00098c4:	c7 43 20 17 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009017
c00098cb:	c7 43 28 0b 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000980b
c00098d2:	53                   	push   ebx
c00098d3:	e8 33 ff ff ff       	call   c000980b <linear_reset>
c00098d8:	83 c4 10             	add    esp,0x10
c00098db:	31 c0                	xor    eax,eax
c00098dd:	83 c4 08             	add    esp,0x8
c00098e0:	5b                   	pop    ebx
c00098e1:	c3                   	ret    

c00098e2 <int_to_fp>:
c00098e2:	c1 e0 0c             	shl    eax,0xc
c00098e5:	c3                   	ret    

c00098e6 <fp_to_int>:
c00098e6:	c1 f8 0c             	sar    eax,0xc
c00098e9:	c3                   	ret    

c00098ea <fp_fraction_part>:
c00098ea:	25 ff 0f 00 00       	and    eax,0xfff
c00098ef:	c3                   	ret    

c00098f0 <fp_to_double>:
c00098f0:	83 ec 1c             	sub    esp,0x1c
c00098f3:	e8 f2 ff ff ff       	call   c00098ea <fp_fraction_part>
c00098f8:	83 ec 0c             	sub    esp,0xc
c00098fb:	50                   	push   eax
c00098fc:	e8 0a eb 01 00       	call   c002840b <__floatsidf>
c0009901:	83 c4 10             	add    esp,0x10
c0009904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000990c:	68 00 00 30 3f       	push   0x3f300000
c0009911:	6a 00                	push   0x0
c0009913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000991b:	e8 88 e4 01 00       	call   c0027da8 <__muldf3>
c0009920:	83 c4 2c             	add    esp,0x2c
c0009923:	c3                   	ret    

c0009924 <calc_output_single>:
c0009924:	55                   	push   ebp
c0009925:	57                   	push   edi
c0009926:	56                   	push   esi
c0009927:	89 c6                	mov    esi,eax
c0009929:	53                   	push   ebx
c000992a:	89 d3                	mov    ebx,edx
c000992c:	83 ec 4c             	sub    esp,0x4c
c000992f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009933:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009936:	e8 a7 ff ff ff       	call   c00098e2 <int_to_fp>
c000993b:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c000993e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009942:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009946:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000994a:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000994d:	99                   	cdq    
c000994e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009956:	f7 fb                	idiv   ebx
c0009958:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009960:	89 da                	mov    edx,ebx
c0009962:	0f af d0             	imul   edx,eax
c0009965:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009969:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000996d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009971:	29 c2                	sub    edx,eax
c0009973:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000997a:	83 c5 04             	add    ebp,0x4
c000997d:	e8 6e ff ff ff       	call   c00098f0 <fp_to_double>
c0009982:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009986:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000998a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000998e:	e8 53 ff ff ff       	call   c00098e6 <fp_to_int>
c0009993:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009996:	52                   	push   edx
c0009997:	52                   	push   edx
c0009998:	51                   	push   ecx
c0009999:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000999d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00099a1:	e8 1a d7 01 00       	call   c00270c0 <__subsf3>
c00099a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a9:	e8 f1 ed 01 00       	call   c002879f <__extendsfdf2>
c00099ae:	83 c4 10             	add    esp,0x10
c00099b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099b5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c9:	e8 da e3 01 00       	call   c0027da8 <__muldf3>
c00099ce:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099d2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099d6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099dd:	e8 bd ed 01 00       	call   c002879f <__extendsfdf2>
c00099e2:	83 c4 10             	add    esp,0x10
c00099e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ed:	52                   	push   edx
c00099ee:	50                   	push   eax
c00099ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099f7:	e8 2f dd 01 00       	call   c002772b <__adddf3>
c00099fc:	59                   	pop    ecx
c00099fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009a01:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009a05:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a0b:	e8 8f ed 01 00       	call   c002879f <__extendsfdf2>
c0009a10:	83 c4 10             	add    esp,0x10
c0009a13:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a1b:	52                   	push   edx
c0009a1c:	50                   	push   eax
c0009a1d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a21:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a25:	e8 7e e3 01 00       	call   c0027da8 <__muldf3>
c0009a2a:	83 c4 10             	add    esp,0x10
c0009a2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a31:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a35:	52                   	push   edx
c0009a36:	50                   	push   eax
c0009a37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a3f:	e8 e7 dc 01 00       	call   c002772b <__adddf3>
c0009a44:	83 c4 10             	add    esp,0x10
c0009a47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a4f:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a53:	0f 89 1d ff ff ff    	jns    c0009976 <calc_output_single+0x52>
c0009a59:	89 d9                	mov    ecx,ebx
c0009a5b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a5f:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a63:	89 dd                	mov    ebp,ebx
c0009a65:	29 c8                	sub    eax,ecx
c0009a67:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a6f:	99                   	cdq    
c0009a70:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a78:	f7 fb                	idiv   ebx
c0009a7a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a7e:	0f af e8             	imul   ebp,eax
c0009a81:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a85:	01 cd                	add    ebp,ecx
c0009a87:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a8a:	89 e8                	mov    eax,ebp
c0009a8c:	83 ee 04             	sub    esi,0x4
c0009a8f:	e8 5c fe ff ff       	call   c00098f0 <fp_to_double>
c0009a94:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a98:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a9c:	89 e8                	mov    eax,ebp
c0009a9e:	29 dd                	sub    ebp,ebx
c0009aa0:	e8 41 fe ff ff       	call   c00098e6 <fp_to_int>
c0009aa5:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa8:	52                   	push   edx
c0009aa9:	52                   	push   edx
c0009aaa:	51                   	push   ecx
c0009aab:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aaf:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009ab3:	e8 08 d6 01 00       	call   c00270c0 <__subsf3>
c0009ab8:	89 04 24             	mov    DWORD PTR [esp],eax
c0009abb:	e8 df ec 01 00       	call   c002879f <__extendsfdf2>
c0009ac0:	83 c4 10             	add    esp,0x10
c0009ac3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ac7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009acb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ad3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009adb:	e8 c8 e2 01 00       	call   c0027da8 <__muldf3>
c0009ae0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009ae4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aeb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aef:	e8 ab ec 01 00       	call   c002879f <__extendsfdf2>
c0009af4:	83 c4 10             	add    esp,0x10
c0009af7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009afb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aff:	52                   	push   edx
c0009b00:	50                   	push   eax
c0009b01:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b05:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b09:	e8 1d dc 01 00       	call   c002772b <__adddf3>
c0009b0e:	59                   	pop    ecx
c0009b0f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b13:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b17:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b1d:	e8 7d ec 01 00       	call   c002879f <__extendsfdf2>
c0009b22:	83 c4 10             	add    esp,0x10
c0009b25:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b29:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b2d:	52                   	push   edx
c0009b2e:	50                   	push   eax
c0009b2f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b33:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b37:	e8 6c e2 01 00       	call   c0027da8 <__muldf3>
c0009b3c:	83 c4 10             	add    esp,0x10
c0009b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b43:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b47:	52                   	push   edx
c0009b48:	50                   	push   eax
c0009b49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b51:	e8 d5 db 01 00       	call   c002772b <__adddf3>
c0009b56:	83 c4 10             	add    esp,0x10
c0009b59:	85 ed                	test   ebp,ebp
c0009b5b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b5f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b63:	0f 8f 21 ff ff ff    	jg     c0009a8a <calc_output_single+0x166>
c0009b69:	52                   	push   edx
c0009b6a:	50                   	push   eax
c0009b6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b73:	e8 b3 db 01 00       	call   c002772b <__adddf3>
c0009b78:	83 c4 5c             	add    esp,0x5c
c0009b7b:	5b                   	pop    ebx
c0009b7c:	5e                   	pop    esi
c0009b7d:	5f                   	pop    edi
c0009b7e:	5d                   	pop    ebp
c0009b7f:	c3                   	ret    

c0009b80 <calc_output_stereo>:
c0009b80:	55                   	push   ebp
c0009b81:	89 cd                	mov    ebp,ecx
c0009b83:	57                   	push   edi
c0009b84:	56                   	push   esi
c0009b85:	53                   	push   ebx
c0009b86:	89 c3                	mov    ebx,eax
c0009b88:	83 ec 6c             	sub    esp,0x6c
c0009b8b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b8f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b96:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b9d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009ba1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009ba5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba8:	e8 35 fd ff ff       	call   c00098e2 <int_to_fp>
c0009bad:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bb5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bc1:	29 c8                	sub    eax,ecx
c0009bc3:	99                   	cdq    
c0009bc4:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bcc:	0f af d0             	imul   edx,eax
c0009bcf:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bd2:	31 d2                	xor    edx,edx
c0009bd4:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bdc:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bdf:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009be3:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009be6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009bea:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bee:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009bf1:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bf6:	29 c1                	sub    ecx,eax
c0009bf8:	31 c0                	xor    eax,eax
c0009bfa:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bfd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c05:	83 c7 08             	add    edi,0x8
c0009c08:	e8 e3 fc ff ff       	call   c00098f0 <fp_to_double>
c0009c0d:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c11:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c19:	e8 c8 fc ff ff       	call   c00098e6 <fp_to_int>
c0009c1e:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c21:	52                   	push   edx
c0009c22:	52                   	push   edx
c0009c23:	51                   	push   ecx
c0009c24:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c28:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c2c:	e8 8f d4 01 00       	call   c00270c0 <__subsf3>
c0009c31:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c34:	e8 66 eb 01 00       	call   c002879f <__extendsfdf2>
c0009c39:	83 c4 10             	add    esp,0x10
c0009c3c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c40:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c48:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c4c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c50:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c54:	e8 4f e1 01 00       	call   c0027da8 <__muldf3>
c0009c59:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c5d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c61:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c64:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c68:	e8 32 eb 01 00       	call   c002879f <__extendsfdf2>
c0009c6d:	83 c4 10             	add    esp,0x10
c0009c70:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c74:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c78:	52                   	push   edx
c0009c79:	50                   	push   eax
c0009c7a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c82:	e8 a4 da 01 00       	call   c002772b <__adddf3>
c0009c87:	59                   	pop    ecx
c0009c88:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c8c:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c90:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c96:	e8 04 eb 01 00       	call   c002879f <__extendsfdf2>
c0009c9b:	83 c4 10             	add    esp,0x10
c0009c9e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ca2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ca6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009caa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cae:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cb2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cb6:	e8 ed e0 01 00       	call   c0027da8 <__muldf3>
c0009cbb:	83 c4 10             	add    esp,0x10
c0009cbe:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cc2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cc6:	52                   	push   edx
c0009cc7:	50                   	push   eax
c0009cc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cd0:	e8 56 da 01 00       	call   c002772b <__adddf3>
c0009cd5:	59                   	pop    ecx
c0009cd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cda:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cde:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ce4:	e8 b6 ea 01 00       	call   c002879f <__extendsfdf2>
c0009ce9:	83 c4 10             	add    esp,0x10
c0009cec:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cf0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cf4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cfc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009d00:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009d04:	e8 9f e0 01 00       	call   c0027da8 <__muldf3>
c0009d09:	83 c4 10             	add    esp,0x10
c0009d0c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d10:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d14:	52                   	push   edx
c0009d15:	50                   	push   eax
c0009d16:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d1e:	e8 08 da 01 00       	call   c002772b <__adddf3>
c0009d23:	83 c4 10             	add    esp,0x10
c0009d26:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d2a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d2e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d32:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d36:	0f 89 c5 fe ff ff    	jns    c0009c01 <calc_output_stereo+0x81>
c0009d3c:	29 e9                	sub    ecx,ebp
c0009d3e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d42:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d46:	29 c8                	sub    eax,ecx
c0009d48:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d50:	99                   	cdq    
c0009d51:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d55:	31 d2                	xor    edx,edx
c0009d57:	0f af f8             	imul   edi,eax
c0009d5a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d5e:	40                   	inc    eax
c0009d5f:	01 cf                	add    edi,ecx
c0009d61:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d66:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d6a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d72:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d75:	31 c0                	xor    eax,eax
c0009d77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d7b:	89 f8                	mov    eax,edi
c0009d7d:	83 eb 08             	sub    ebx,0x8
c0009d80:	e8 6b fb ff ff       	call   c00098f0 <fp_to_double>
c0009d85:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d89:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d8d:	89 f8                	mov    eax,edi
c0009d8f:	e8 52 fb ff ff       	call   c00098e6 <fp_to_int>
c0009d94:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d97:	52                   	push   edx
c0009d98:	52                   	push   edx
c0009d99:	55                   	push   ebp
c0009d9a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d9e:	e8 1d d3 01 00       	call   c00270c0 <__subsf3>
c0009da3:	89 04 24             	mov    DWORD PTR [esp],eax
c0009da6:	e8 f4 e9 01 00       	call   c002879f <__extendsfdf2>
c0009dab:	83 c4 10             	add    esp,0x10
c0009dae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009db2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009db6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dbe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dc2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dc6:	e8 dd df 01 00       	call   c0027da8 <__muldf3>
c0009dcb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dce:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dd2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dd6:	e8 c4 e9 01 00       	call   c002879f <__extendsfdf2>
c0009ddb:	83 c4 10             	add    esp,0x10
c0009dde:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009de2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009de6:	52                   	push   edx
c0009de7:	50                   	push   eax
c0009de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009df0:	e8 36 d9 01 00       	call   c002772b <__adddf3>
c0009df5:	59                   	pop    ecx
c0009df6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009dfa:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dfe:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009e04:	e8 96 e9 01 00       	call   c002879f <__extendsfdf2>
c0009e09:	83 c4 10             	add    esp,0x10
c0009e0c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e10:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e14:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e18:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e24:	e8 7f df 01 00       	call   c0027da8 <__muldf3>
c0009e29:	83 c4 10             	add    esp,0x10
c0009e2c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e30:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e34:	52                   	push   edx
c0009e35:	50                   	push   eax
c0009e36:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e3a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e3e:	e8 e8 d8 01 00       	call   c002772b <__adddf3>
c0009e43:	5d                   	pop    ebp
c0009e44:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e48:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e4c:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e52:	e8 48 e9 01 00       	call   c002879f <__extendsfdf2>
c0009e57:	83 c4 10             	add    esp,0x10
c0009e5a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e5e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e66:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e72:	e8 31 df 01 00       	call   c0027da8 <__muldf3>
c0009e77:	83 c4 10             	add    esp,0x10
c0009e7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e7e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e82:	52                   	push   edx
c0009e83:	50                   	push   eax
c0009e84:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e88:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e8c:	e8 9a d8 01 00       	call   c002772b <__adddf3>
c0009e91:	83 c4 10             	add    esp,0x10
c0009e94:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e98:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e9c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ea0:	85 ff                	test   edi,edi
c0009ea2:	0f 8f d3 fe ff ff    	jg     c0009d7b <calc_output_stereo+0x1fb>
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb8:	e8 6e d8 01 00       	call   c002772b <__adddf3>
c0009ebd:	83 c4 10             	add    esp,0x10
c0009ec0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ec4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ecc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ed0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed8:	e8 cb de 01 00       	call   c0027da8 <__muldf3>
c0009edd:	59                   	pop    ecx
c0009ede:	5b                   	pop    ebx
c0009edf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ee3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eeb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eef:	e8 87 e7 01 00       	call   c002867b <__truncdfsf2>
c0009ef4:	83 c4 10             	add    esp,0x10
c0009ef7:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009efe:	89 03                	mov    DWORD PTR [ebx],eax
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f10:	e8 16 d8 01 00       	call   c002772b <__adddf3>
c0009f15:	83 c4 10             	add    esp,0x10
c0009f18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f30:	e8 73 de 01 00       	call   c0027da8 <__muldf3>
c0009f35:	5e                   	pop    esi
c0009f36:	5f                   	pop    edi
c0009f37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f47:	e8 2f e7 01 00       	call   c002867b <__truncdfsf2>
c0009f4c:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f53:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f56:	83 c4 7c             	add    esp,0x7c
c0009f59:	5b                   	pop    ebx
c0009f5a:	5e                   	pop    esi
c0009f5b:	5f                   	pop    edi
c0009f5c:	5d                   	pop    ebp
c0009f5d:	c3                   	ret    

c0009f5e <calc_output_quad>:
c0009f5e:	55                   	push   ebp
c0009f5f:	57                   	push   edi
c0009f60:	56                   	push   esi
c0009f61:	89 c6                	mov    esi,eax
c0009f63:	53                   	push   ebx
c0009f64:	83 ec 7c             	sub    esp,0x7c
c0009f67:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f6b:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f6f:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f76:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f85:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f88:	e8 55 f9 ff ff       	call   c00098e2 <int_to_fp>
c0009f8d:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f90:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f93:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f97:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f9b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f9f:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009fa3:	99                   	cdq    
c0009fa4:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fac:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009faf:	31 d2                	xor    edx,edx
c0009fb1:	0f af d8             	imul   ebx,eax
c0009fb4:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fbc:	0f af c7             	imul   eax,edi
c0009fbf:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fc3:	29 c1                	sub    ecx,eax
c0009fc5:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fcd:	31 c0                	xor    eax,eax
c0009fcf:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fd2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fd6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fda:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fde:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fe2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fe6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fea:	89 d8                	mov    eax,ebx
c0009fec:	83 c7 10             	add    edi,0x10
c0009fef:	e8 fc f8 ff ff       	call   c00098f0 <fp_to_double>
c0009ff4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ffc:	89 d8                	mov    eax,ebx
c0009ffe:	e8 e3 f8 ff ff       	call   c00098e6 <fp_to_int>
c000a003:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c000a007:	52                   	push   edx
c000a008:	52                   	push   edx
c000a009:	51                   	push   ecx
c000a00a:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a00e:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a012:	e8 a9 d0 01 00       	call   c00270c0 <__subsf3>
c000a017:	89 04 24             	mov    DWORD PTR [esp],eax
c000a01a:	e8 80 e7 01 00       	call   c002879f <__extendsfdf2>
c000a01f:	83 c4 10             	add    esp,0x10
c000a022:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a026:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a02a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a032:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a036:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a03a:	e8 69 dd 01 00       	call   c0027da8 <__muldf3>
c000a03f:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a043:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a047:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a04a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a04e:	e8 4c e7 01 00       	call   c002879f <__extendsfdf2>
c000a053:	83 c4 10             	add    esp,0x10
c000a056:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a05a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a05e:	52                   	push   edx
c000a05f:	50                   	push   eax
c000a060:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a064:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a068:	e8 be d6 01 00       	call   c002772b <__adddf3>
c000a06d:	59                   	pop    ecx
c000a06e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a072:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a076:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a07c:	e8 1e e7 01 00       	call   c002879f <__extendsfdf2>
c000a081:	83 c4 10             	add    esp,0x10
c000a084:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a088:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a08c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a094:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a098:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a09c:	e8 07 dd 01 00       	call   c0027da8 <__muldf3>
c000a0a1:	83 c4 10             	add    esp,0x10
c000a0a4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ac:	52                   	push   edx
c000a0ad:	50                   	push   eax
c000a0ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0b6:	e8 70 d6 01 00       	call   c002772b <__adddf3>
c000a0bb:	59                   	pop    ecx
c000a0bc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0c0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0c4:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0ca:	e8 d0 e6 01 00       	call   c002879f <__extendsfdf2>
c000a0cf:	83 c4 10             	add    esp,0x10
c000a0d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0d6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ea:	e8 b9 dc 01 00       	call   c0027da8 <__muldf3>
c000a0ef:	83 c4 10             	add    esp,0x10
c000a0f2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0f6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0fa:	52                   	push   edx
c000a0fb:	50                   	push   eax
c000a0fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a100:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a104:	e8 22 d6 01 00       	call   c002772b <__adddf3>
c000a109:	59                   	pop    ecx
c000a10a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a10e:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a112:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a118:	e8 82 e6 01 00       	call   c002879f <__extendsfdf2>
c000a11d:	83 c4 10             	add    esp,0x10
c000a120:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a124:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a12c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a130:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a134:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a138:	e8 6b dc 01 00       	call   c0027da8 <__muldf3>
c000a13d:	83 c4 10             	add    esp,0x10
c000a140:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a144:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a148:	52                   	push   edx
c000a149:	50                   	push   eax
c000a14a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a152:	e8 d4 d5 01 00       	call   c002772b <__adddf3>
c000a157:	59                   	pop    ecx
c000a158:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a15c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a160:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a166:	e8 34 e6 01 00       	call   c002879f <__extendsfdf2>
c000a16b:	83 c4 10             	add    esp,0x10
c000a16e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a172:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a182:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a186:	e8 1d dc 01 00       	call   c0027da8 <__muldf3>
c000a18b:	83 c4 10             	add    esp,0x10
c000a18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a196:	52                   	push   edx
c000a197:	50                   	push   eax
c000a198:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a19c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a1a0:	e8 86 d5 01 00       	call   c002772b <__adddf3>
c000a1a5:	83 c4 10             	add    esp,0x10
c000a1a8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1ac:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1b0:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1b4:	0f 89 30 fe ff ff    	jns    c0009fea <calc_output_quad+0x8c>
c000a1ba:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1be:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1c2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1c6:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1ca:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1d2:	29 c8                	sub    eax,ecx
c000a1d4:	99                   	cdq    
c000a1d5:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d9:	31 d2                	xor    edx,edx
c000a1db:	0f af d8             	imul   ebx,eax
c000a1de:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1e2:	40                   	inc    eax
c000a1e3:	01 cb                	add    ebx,ecx
c000a1e5:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1ea:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ee:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1f6:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f9:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a201:	31 c0                	xor    eax,eax
c000a203:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a207:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a20b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a20f:	89 d8                	mov    eax,ebx
c000a211:	83 ee 10             	sub    esi,0x10
c000a214:	e8 d7 f6 ff ff       	call   c00098f0 <fp_to_double>
c000a219:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a21d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a221:	89 d8                	mov    eax,ebx
c000a223:	e8 be f6 ff ff       	call   c00098e6 <fp_to_int>
c000a228:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a22c:	52                   	push   edx
c000a22d:	52                   	push   edx
c000a22e:	57                   	push   edi
c000a22f:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a233:	e8 88 ce 01 00       	call   c00270c0 <__subsf3>
c000a238:	89 04 24             	mov    DWORD PTR [esp],eax
c000a23b:	e8 5f e5 01 00       	call   c002879f <__extendsfdf2>
c000a240:	83 c4 10             	add    esp,0x10
c000a243:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a247:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a24b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a253:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a257:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a25b:	e8 48 db 01 00       	call   c0027da8 <__muldf3>
c000a260:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a26b:	e8 2f e5 01 00       	call   c002879f <__extendsfdf2>
c000a270:	83 c4 10             	add    esp,0x10
c000a273:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a277:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a27b:	52                   	push   edx
c000a27c:	50                   	push   eax
c000a27d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a281:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a285:	e8 a1 d4 01 00       	call   c002772b <__adddf3>
c000a28a:	59                   	pop    ecx
c000a28b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a28f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a293:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a299:	e8 01 e5 01 00       	call   c002879f <__extendsfdf2>
c000a29e:	83 c4 10             	add    esp,0x10
c000a2a1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2a5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b9:	e8 ea da 01 00       	call   c0027da8 <__muldf3>
c000a2be:	83 c4 10             	add    esp,0x10
c000a2c1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2c5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c9:	52                   	push   edx
c000a2ca:	50                   	push   eax
c000a2cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2d3:	e8 53 d4 01 00       	call   c002772b <__adddf3>
c000a2d8:	5f                   	pop    edi
c000a2d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2dd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2e1:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2e7:	e8 b3 e4 01 00       	call   c002879f <__extendsfdf2>
c000a2ec:	83 c4 10             	add    esp,0x10
c000a2ef:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2f3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2ff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a303:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a307:	e8 9c da 01 00       	call   c0027da8 <__muldf3>
c000a30c:	83 c4 10             	add    esp,0x10
c000a30f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a313:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a317:	52                   	push   edx
c000a318:	50                   	push   eax
c000a319:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a31d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a321:	e8 05 d4 01 00       	call   c002772b <__adddf3>
c000a326:	59                   	pop    ecx
c000a327:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a32b:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a32f:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a335:	e8 65 e4 01 00       	call   c002879f <__extendsfdf2>
c000a33a:	83 c4 10             	add    esp,0x10
c000a33d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a341:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a345:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a349:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a34d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a351:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a355:	e8 4e da 01 00       	call   c0027da8 <__muldf3>
c000a35a:	83 c4 10             	add    esp,0x10
c000a35d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a361:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a365:	52                   	push   edx
c000a366:	50                   	push   eax
c000a367:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a36b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a36f:	e8 b7 d3 01 00       	call   c002772b <__adddf3>
c000a374:	5f                   	pop    edi
c000a375:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a379:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a37d:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a383:	e8 17 e4 01 00       	call   c002879f <__extendsfdf2>
c000a388:	83 c4 10             	add    esp,0x10
c000a38b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a38f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a393:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a397:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a39b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3a3:	e8 00 da 01 00       	call   c0027da8 <__muldf3>
c000a3a8:	83 c4 10             	add    esp,0x10
c000a3ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3b3:	52                   	push   edx
c000a3b4:	50                   	push   eax
c000a3b5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3bd:	e8 69 d3 01 00       	call   c002772b <__adddf3>
c000a3c2:	83 c4 10             	add    esp,0x10
c000a3c5:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3cd:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3d1:	85 db                	test   ebx,ebx
c000a3d3:	0f 8f 36 fe ff ff    	jg     c000a20f <calc_output_quad+0x2b1>
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e9:	e8 3d d3 01 00       	call   c002772b <__adddf3>
c000a3ee:	83 c4 10             	add    esp,0x10
c000a3f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a405:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a409:	e8 9a d9 01 00       	call   c0027da8 <__muldf3>
c000a40e:	59                   	pop    ecx
c000a40f:	5b                   	pop    ebx
c000a410:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a414:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a418:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a420:	e8 56 e2 01 00       	call   c002867b <__truncdfsf2>
c000a425:	83 c4 10             	add    esp,0x10
c000a428:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a42f:	89 06                	mov    DWORD PTR [esi],eax
c000a431:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a435:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a439:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a43d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a441:	e8 e5 d2 01 00       	call   c002772b <__adddf3>
c000a446:	83 c4 10             	add    esp,0x10
c000a449:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a44d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a45d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a461:	e8 42 d9 01 00       	call   c0027da8 <__muldf3>
c000a466:	5e                   	pop    esi
c000a467:	5f                   	pop    edi
c000a468:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a46c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 fe e1 01 00       	call   c002867b <__truncdfsf2>
c000a47d:	83 c4 10             	add    esp,0x10
c000a480:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a487:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a48a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a492:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a496:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a49a:	e8 8c d2 01 00       	call   c002772b <__adddf3>
c000a49f:	83 c4 10             	add    esp,0x10
c000a4a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ba:	e8 e9 d8 01 00       	call   c0027da8 <__muldf3>
c000a4bf:	5d                   	pop    ebp
c000a4c0:	59                   	pop    ecx
c000a4c1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 a5 e1 01 00       	call   c002867b <__truncdfsf2>
c000a4d6:	83 c4 10             	add    esp,0x10
c000a4d9:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4e0:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4f3:	e8 33 d2 01 00       	call   c002772b <__adddf3>
c000a4f8:	83 c4 10             	add    esp,0x10
c000a4fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a513:	e8 90 d8 01 00       	call   c0027da8 <__muldf3>
c000a518:	5b                   	pop    ebx
c000a519:	5e                   	pop    esi
c000a51a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a51e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a522:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a526:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a52a:	e8 4c e1 01 00       	call   c002867b <__truncdfsf2>
c000a52f:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a536:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a539:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a53f:	5b                   	pop    ebx
c000a540:	5e                   	pop    esi
c000a541:	5f                   	pop    edi
c000a542:	5d                   	pop    ebp
c000a543:	c3                   	ret    

c000a544 <calc_output_hex>:
c000a544:	55                   	push   ebp
c000a545:	89 cd                	mov    ebp,ecx
c000a547:	57                   	push   edi
c000a548:	56                   	push   esi
c000a549:	53                   	push   ebx
c000a54a:	89 c3                	mov    ebx,eax
c000a54c:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a552:	89 14 24             	mov    DWORD PTR [esp],edx
c000a555:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a55c:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a563:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a567:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a56b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a56e:	e8 6f f3 ff ff       	call   c00098e2 <int_to_fp>
c000a573:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a576:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a57a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a57d:	29 c8                	sub    eax,ecx
c000a57f:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a583:	99                   	cdq    
c000a584:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a58c:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a58f:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a597:	0f af f8             	imul   edi,eax
c000a59a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a59d:	01 cf                	add    edi,ecx
c000a59f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a5a3:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a5a6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5aa:	0f af c2             	imul   eax,edx
c000a5ad:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5b1:	29 c1                	sub    ecx,eax
c000a5b3:	31 d2                	xor    edx,edx
c000a5b5:	31 c0                	xor    eax,eax
c000a5b7:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5c6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5ce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5d2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5d6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5e2:	89 f8                	mov    eax,edi
c000a5e4:	e8 07 f3 ff ff       	call   c00098f0 <fp_to_double>
c000a5e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5f1:	89 f8                	mov    eax,edi
c000a5f3:	e8 ee f2 ff ff       	call   c00098e6 <fp_to_int>
c000a5f8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5fc:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5ff:	52                   	push   edx
c000a600:	52                   	push   edx
c000a601:	51                   	push   ecx
c000a602:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a606:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a60d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a611:	e8 aa ca 01 00       	call   c00270c0 <__subsf3>
c000a616:	89 04 24             	mov    DWORD PTR [esp],eax
c000a619:	e8 81 e1 01 00       	call   c002879f <__extendsfdf2>
c000a61e:	83 c4 10             	add    esp,0x10
c000a621:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a625:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a631:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a635:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a639:	e8 6a d7 01 00       	call   c0027da8 <__muldf3>
c000a63e:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a642:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a646:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a649:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a64d:	e8 4d e1 01 00       	call   c002879f <__extendsfdf2>
c000a652:	83 c4 10             	add    esp,0x10
c000a655:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a659:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a65d:	52                   	push   edx
c000a65e:	50                   	push   eax
c000a65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a663:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a667:	e8 bf d0 01 00       	call   c002772b <__adddf3>
c000a66c:	59                   	pop    ecx
c000a66d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a671:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a675:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a67b:	e8 1f e1 01 00       	call   c002879f <__extendsfdf2>
c000a680:	83 c4 10             	add    esp,0x10
c000a683:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a687:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a68b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a693:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a697:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a69b:	e8 08 d7 01 00       	call   c0027da8 <__muldf3>
c000a6a0:	83 c4 10             	add    esp,0x10
c000a6a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6a7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6ab:	52                   	push   edx
c000a6ac:	50                   	push   eax
c000a6ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6b5:	e8 71 d0 01 00       	call   c002772b <__adddf3>
c000a6ba:	59                   	pop    ecx
c000a6bb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6bf:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6c3:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c9:	e8 d1 e0 01 00       	call   c002879f <__extendsfdf2>
c000a6ce:	83 c4 10             	add    esp,0x10
c000a6d1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6d5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e9:	e8 ba d6 01 00       	call   c0027da8 <__muldf3>
c000a6ee:	83 c4 10             	add    esp,0x10
c000a6f1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6f5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f9:	52                   	push   edx
c000a6fa:	50                   	push   eax
c000a6fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6ff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a703:	e8 23 d0 01 00       	call   c002772b <__adddf3>
c000a708:	59                   	pop    ecx
c000a709:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a70d:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a711:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a717:	e8 83 e0 01 00       	call   c002879f <__extendsfdf2>
c000a71c:	83 c4 10             	add    esp,0x10
c000a71f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a723:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a727:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a72b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a72f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a733:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a737:	e8 6c d6 01 00       	call   c0027da8 <__muldf3>
c000a73c:	83 c4 10             	add    esp,0x10
c000a73f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a743:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a747:	52                   	push   edx
c000a748:	50                   	push   eax
c000a749:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a74d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a751:	e8 d5 cf 01 00       	call   c002772b <__adddf3>
c000a756:	59                   	pop    ecx
c000a757:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a75b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a75f:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a765:	e8 35 e0 01 00       	call   c002879f <__extendsfdf2>
c000a76a:	83 c4 10             	add    esp,0x10
c000a76d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a771:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a775:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a779:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a77d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a781:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a785:	e8 1e d6 01 00       	call   c0027da8 <__muldf3>
c000a78a:	83 c4 10             	add    esp,0x10
c000a78d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a791:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a795:	52                   	push   edx
c000a796:	50                   	push   eax
c000a797:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a79b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a79f:	e8 87 cf 01 00       	call   c002772b <__adddf3>
c000a7a4:	59                   	pop    ecx
c000a7a5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a9:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7ad:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7b3:	e8 e7 df 01 00       	call   c002879f <__extendsfdf2>
c000a7b8:	83 c4 10             	add    esp,0x10
c000a7bb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7bf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7cb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7d3:	e8 d0 d5 01 00       	call   c0027da8 <__muldf3>
c000a7d8:	83 c4 10             	add    esp,0x10
c000a7db:	83 c6 18             	add    esi,0x18
c000a7de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7e6:	52                   	push   edx
c000a7e7:	50                   	push   eax
c000a7e8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7f0:	e8 36 cf 01 00       	call   c002772b <__adddf3>
c000a7f5:	59                   	pop    ecx
c000a7f6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7fa:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7fe:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a804:	e8 96 df 01 00       	call   c002879f <__extendsfdf2>
c000a809:	83 c4 10             	add    esp,0x10
c000a80c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a810:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a814:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a818:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a81c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a820:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a824:	e8 7f d5 01 00       	call   c0027da8 <__muldf3>
c000a829:	83 c4 10             	add    esp,0x10
c000a82c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a830:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a834:	52                   	push   edx
c000a835:	50                   	push   eax
c000a836:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a83a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a83e:	e8 e8 ce 01 00       	call   c002772b <__adddf3>
c000a843:	83 c4 10             	add    esp,0x10
c000a846:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a84a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a84e:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a851:	0f 89 8b fd ff ff    	jns    c000a5e2 <calc_output_hex+0x9e>
c000a857:	31 f6                	xor    esi,esi
c000a859:	31 ff                	xor    edi,edi
c000a85b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a85f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a862:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a866:	29 e9                	sub    ecx,ebp
c000a868:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a86c:	29 c8                	sub    eax,ecx
c000a86e:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a871:	99                   	cdq    
c000a872:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a876:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a879:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a87d:	0f af e8             	imul   ebp,eax
c000a880:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a884:	40                   	inc    eax
c000a885:	01 cd                	add    ebp,ecx
c000a887:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a88c:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a890:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a894:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a898:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a89b:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a89f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a8a3:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a8a7:	89 e8                	mov    eax,ebp
c000a8a9:	e8 42 f0 ff ff       	call   c00098f0 <fp_to_double>
c000a8ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8b6:	89 e8                	mov    eax,ebp
c000a8b8:	e8 29 f0 ff ff       	call   c00098e6 <fp_to_int>
c000a8bd:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8c1:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8c4:	52                   	push   edx
c000a8c5:	52                   	push   edx
c000a8c6:	51                   	push   ecx
c000a8c7:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8ce:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8d5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d9:	e8 e2 c7 01 00       	call   c00270c0 <__subsf3>
c000a8de:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8e1:	e8 b9 de 01 00       	call   c002879f <__extendsfdf2>
c000a8e6:	83 c4 10             	add    esp,0x10
c000a8e9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ed:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8fd:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a901:	e8 a2 d4 01 00       	call   c0027da8 <__muldf3>
c000a906:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a90d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a911:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a914:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a918:	e8 82 de 01 00       	call   c002879f <__extendsfdf2>
c000a91d:	83 c4 10             	add    esp,0x10
c000a920:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a924:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a928:	52                   	push   edx
c000a929:	50                   	push   eax
c000a92a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a932:	e8 f4 cd 01 00       	call   c002772b <__adddf3>
c000a937:	59                   	pop    ecx
c000a938:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a93c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a940:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a946:	e8 54 de 01 00       	call   c002879f <__extendsfdf2>
c000a94b:	83 c4 10             	add    esp,0x10
c000a94e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a952:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a956:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a95a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a95e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a962:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a966:	e8 3d d4 01 00       	call   c0027da8 <__muldf3>
c000a96b:	83 c4 10             	add    esp,0x10
c000a96e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a972:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a976:	52                   	push   edx
c000a977:	50                   	push   eax
c000a978:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a97c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a980:	e8 a6 cd 01 00       	call   c002772b <__adddf3>
c000a985:	59                   	pop    ecx
c000a986:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a98a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a98e:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a994:	e8 06 de 01 00       	call   c002879f <__extendsfdf2>
c000a999:	83 c4 10             	add    esp,0x10
c000a99c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9a0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ac:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9b0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9b4:	e8 ef d3 01 00       	call   c0027da8 <__muldf3>
c000a9b9:	83 c4 10             	add    esp,0x10
c000a9bc:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9c0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9c4:	52                   	push   edx
c000a9c5:	50                   	push   eax
c000a9c6:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9ca:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9ce:	e8 58 cd 01 00       	call   c002772b <__adddf3>
c000a9d3:	59                   	pop    ecx
c000a9d4:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d8:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9dc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9e2:	e8 b8 dd 01 00       	call   c002879f <__extendsfdf2>
c000a9e7:	83 c4 10             	add    esp,0x10
c000a9ea:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ee:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9fa:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fe:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa02:	e8 a1 d3 01 00       	call   c0027da8 <__muldf3>
c000aa07:	83 c4 10             	add    esp,0x10
c000aa0a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa0e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa12:	52                   	push   edx
c000aa13:	50                   	push   eax
c000aa14:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa18:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa1c:	e8 0a cd 01 00       	call   c002772b <__adddf3>
c000aa21:	59                   	pop    ecx
c000aa22:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa26:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa2a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa30:	e8 6a dd 01 00       	call   c002879f <__extendsfdf2>
c000aa35:	83 c4 10             	add    esp,0x10
c000aa38:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa3c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa48:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa4c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa50:	e8 53 d3 01 00       	call   c0027da8 <__muldf3>
c000aa55:	83 c4 10             	add    esp,0x10
c000aa58:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa5c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa60:	52                   	push   edx
c000aa61:	50                   	push   eax
c000aa62:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa66:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa6a:	e8 bc cc 01 00       	call   c002772b <__adddf3>
c000aa6f:	59                   	pop    ecx
c000aa70:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa74:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa78:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa7e:	e8 1c dd 01 00       	call   c002879f <__extendsfdf2>
c000aa83:	83 c4 10             	add    esp,0x10
c000aa86:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa8a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa96:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa9a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa9e:	e8 05 d3 01 00       	call   c0027da8 <__muldf3>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	83 eb 18             	sub    ebx,0x18
c000aaa9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaad:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aab1:	52                   	push   edx
c000aab2:	50                   	push   eax
c000aab3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aabb:	e8 6b cc 01 00       	call   c002772b <__adddf3>
c000aac0:	59                   	pop    ecx
c000aac1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aac5:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac9:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aacf:	e8 cb dc 01 00       	call   c002879f <__extendsfdf2>
c000aad4:	83 c4 10             	add    esp,0x10
c000aad7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aadb:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aadf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aae3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aae7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaeb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaef:	e8 b4 d2 01 00       	call   c0027da8 <__muldf3>
c000aaf4:	83 c4 10             	add    esp,0x10
c000aaf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aafb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaff:	52                   	push   edx
c000ab00:	50                   	push   eax
c000ab01:	57                   	push   edi
c000ab02:	56                   	push   esi
c000ab03:	e8 23 cc 01 00       	call   c002772b <__adddf3>
c000ab08:	83 c4 10             	add    esp,0x10
c000ab0b:	89 c6                	mov    esi,eax
c000ab0d:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab10:	89 d7                	mov    edi,edx
c000ab12:	85 ed                	test   ebp,ebp
c000ab14:	0f 8f 8d fd ff ff    	jg     c000a8a7 <calc_output_hex+0x363>
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab2a:	e8 fc cb 01 00       	call   c002772b <__adddf3>
c000ab2f:	83 c4 10             	add    esp,0x10
c000ab32:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab35:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab45:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab49:	e8 5a d2 01 00       	call   c0027da8 <__muldf3>
c000ab4e:	59                   	pop    ecx
c000ab4f:	5b                   	pop    ebx
c000ab50:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab54:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab58:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab60:	e8 16 db 01 00       	call   c002867b <__truncdfsf2>
c000ab65:	83 c4 10             	add    esp,0x10
c000ab68:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab6f:	89 03                	mov    DWORD PTR [ebx],eax
c000ab71:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab75:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab81:	e8 a5 cb 01 00       	call   c002772b <__adddf3>
c000ab86:	83 c4 10             	add    esp,0x10
c000ab89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aba0:	e8 03 d2 01 00       	call   c0027da8 <__muldf3>
c000aba5:	5d                   	pop    ebp
c000aba6:	59                   	pop    ecx
c000aba7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb7:	e8 bf da 01 00       	call   c002867b <__truncdfsf2>
c000abbc:	83 c4 10             	add    esp,0x10
c000abbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abc6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc9:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abcd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abd1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd9:	e8 4d cb 01 00       	call   c002772b <__adddf3>
c000abde:	83 c4 10             	add    esp,0x10
c000abe1:	89 04 24             	mov    DWORD PTR [esp],eax
c000abe4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf8:	e8 ab d1 01 00       	call   c0027da8 <__muldf3>
c000abfd:	5b                   	pop    ebx
c000abfe:	5d                   	pop    ebp
c000abff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0f:	e8 67 da 01 00       	call   c002867b <__truncdfsf2>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac21:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac25:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac29:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac31:	e8 f5 ca 01 00       	call   c002772b <__adddf3>
c000ac36:	83 c4 10             	add    esp,0x10
c000ac39:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac50:	e8 53 d1 01 00       	call   c0027da8 <__muldf3>
c000ac55:	59                   	pop    ecx
c000ac56:	5b                   	pop    ebx
c000ac57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac67:	e8 0f da 01 00       	call   c002867b <__truncdfsf2>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac76:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac89:	e8 9d ca 01 00       	call   c002772b <__adddf3>
c000ac8e:	83 c4 10             	add    esp,0x10
c000ac91:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac94:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca8:	e8 fb d0 01 00       	call   c0027da8 <__muldf3>
c000acad:	5d                   	pop    ebp
c000acae:	59                   	pop    ecx
c000acaf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acb7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acbb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acbf:	e8 b7 d9 01 00       	call   c002867b <__truncdfsf2>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acce:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acd1:	57                   	push   edi
c000acd2:	56                   	push   esi
c000acd3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acdb:	e8 4b ca 01 00       	call   c002772b <__adddf3>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	89 04 24             	mov    DWORD PTR [esp],eax
c000ace6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acfa:	e8 a9 d0 01 00       	call   c0027da8 <__muldf3>
c000acff:	5b                   	pop    ebx
c000ad00:	5e                   	pop    esi
c000ad01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad05:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad09:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad0d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad11:	e8 65 d9 01 00       	call   c002867b <__truncdfsf2>
c000ad16:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad1d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad20:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad26:	5b                   	pop    ebx
c000ad27:	5e                   	pop    esi
c000ad28:	5f                   	pop    edi
c000ad29:	5d                   	pop    ebp
c000ad2a:	c3                   	ret    

c000ad2b <sinc_reset>:
c000ad2b:	56                   	push   esi
c000ad2c:	53                   	push   ebx
c000ad2d:	51                   	push   ecx
c000ad2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad32:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad35:	85 db                	test   ebx,ebx
c000ad37:	74 59                	je     c000ad92 <sinc_reset+0x67>
c000ad39:	31 d2                	xor    edx,edx
c000ad3b:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad42:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad45:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad48:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad4f:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad56:	31 c0                	xor    eax,eax
c000ad58:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad5e:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad61:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad64:	52                   	push   edx
c000ad65:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad68:	c1 e0 02             	shl    eax,0x2
c000ad6b:	50                   	push   eax
c000ad6c:	6a 00                	push   0x0
c000ad6e:	56                   	push   esi
c000ad6f:	e8 0c 5a ff ff       	call   c0000780 <memset>
c000ad74:	83 c4 0c             	add    esp,0xc
c000ad77:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad7a:	c1 e0 02             	shl    eax,0x2
c000ad7d:	50                   	push   eax
c000ad7e:	68 aa 00 00 00       	push   0xaa
c000ad83:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad86:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad89:	50                   	push   eax
c000ad8a:	e8 f1 59 ff ff       	call   c0000780 <memset>
c000ad8f:	83 c4 10             	add    esp,0x10
c000ad92:	58                   	pop    eax
c000ad93:	5b                   	pop    ebx
c000ad94:	5e                   	pop    esi
c000ad95:	c3                   	ret    

c000ad96 <calc_output_multi>:
c000ad96:	55                   	push   ebp
c000ad97:	57                   	push   edi
c000ad98:	56                   	push   esi
c000ad99:	89 c6                	mov    esi,eax
c000ad9b:	53                   	push   ebx
c000ad9c:	83 ec 4c             	sub    esp,0x4c
c000ad9f:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ada3:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ada7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000adab:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000adaf:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adb3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adb7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adbb:	8d 46 44             	lea    eax,[esi+0x44]
c000adbe:	89 04 24             	mov    DWORD PTR [esp],eax
c000adc1:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adc7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adcb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adce:	e8 0f eb ff ff       	call   c00098e2 <int_to_fp>
c000add3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000add6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000adda:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000adde:	99                   	cdq    
c000addf:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ade3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ade7:	0f af d0             	imul   edx,eax
c000adea:	0f af c3             	imul   eax,ebx
c000aded:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adf1:	29 c1                	sub    ecx,eax
c000adf3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adf7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adfb:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ae02:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ae06:	57                   	push   edi
c000ae07:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae0b:	6a 00                	push   0x0
c000ae0d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae11:	e8 6a 59 ff ff       	call   c0000780 <memset>
c000ae16:	83 c4 10             	add    esp,0x10
c000ae19:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae1d:	89 df                	mov    edi,ebx
c000ae1f:	e8 cc ea ff ff       	call   c00098f0 <fp_to_double>
c000ae24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae2c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae30:	e8 b1 ea ff ff       	call   c00098e6 <fp_to_int>
c000ae35:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae38:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae3b:	51                   	push   ecx
c000ae3c:	51                   	push   ecx
c000ae3d:	55                   	push   ebp
c000ae3e:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae42:	e8 79 c2 01 00       	call   c00270c0 <__subsf3>
c000ae47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae4a:	e8 50 d9 01 00       	call   c002879f <__extendsfdf2>
c000ae4f:	83 c4 10             	add    esp,0x10
c000ae52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae6a:	e8 39 cf 01 00       	call   c0027da8 <__muldf3>
c000ae6f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae72:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae76:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae7a:	e8 20 d9 01 00       	call   c002879f <__extendsfdf2>
c000ae7f:	83 c4 10             	add    esp,0x10
c000ae82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae8a:	52                   	push   edx
c000ae8b:	50                   	push   eax
c000ae8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae94:	e8 92 c8 01 00       	call   c002772b <__adddf3>
c000ae99:	83 c4 10             	add    esp,0x10
c000ae9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aea0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aea4:	89 f8                	mov    eax,edi
c000aea6:	b9 08 00 00 00       	mov    ecx,0x8
c000aeab:	99                   	cdq    
c000aeac:	f7 f9                	idiv   ecx
c000aeae:	4a                   	dec    edx
c000aeaf:	83 fa 06             	cmp    edx,0x6
c000aeb2:	77 07                	ja     c000aebb <calc_output_multi+0x125>
c000aeb4:	ff 24 95 c4 9f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd603c]
c000aebb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aebe:	4f                   	dec    edi
c000aebf:	83 ec 0c             	sub    esp,0xc
c000aec2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aec5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aed0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aed4:	e8 c6 d8 01 00       	call   c002879f <__extendsfdf2>
c000aed9:	83 c4 10             	add    esp,0x10
c000aedc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aee4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aef0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aef4:	e8 af ce 01 00       	call   c0027da8 <__muldf3>
c000aef9:	83 c4 10             	add    esp,0x10
c000aefc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af00:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af04:	52                   	push   edx
c000af05:	50                   	push   eax
c000af06:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af09:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af0c:	e8 1a c8 01 00       	call   c002772b <__adddf3>
c000af11:	83 c4 10             	add    esp,0x10
c000af14:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af17:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af1a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af1d:	4f                   	dec    edi
c000af1e:	83 ec 0c             	sub    esp,0xc
c000af21:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af28:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af2f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af33:	e8 67 d8 01 00       	call   c002879f <__extendsfdf2>
c000af38:	83 c4 10             	add    esp,0x10
c000af3b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af3f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af4b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af53:	e8 50 ce 01 00       	call   c0027da8 <__muldf3>
c000af58:	83 c4 10             	add    esp,0x10
c000af5b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af63:	52                   	push   edx
c000af64:	50                   	push   eax
c000af65:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af68:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af6b:	e8 bb c7 01 00       	call   c002772b <__adddf3>
c000af70:	83 c4 10             	add    esp,0x10
c000af73:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af76:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af7c:	4f                   	dec    edi
c000af7d:	83 ec 0c             	sub    esp,0xc
c000af80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af92:	e8 08 d8 01 00       	call   c002879f <__extendsfdf2>
c000af97:	83 c4 10             	add    esp,0x10
c000af9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afb2:	e8 f1 cd 01 00       	call   c0027da8 <__muldf3>
c000afb7:	83 c4 10             	add    esp,0x10
c000afba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afc2:	52                   	push   edx
c000afc3:	50                   	push   eax
c000afc4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afc7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afca:	e8 5c c7 01 00       	call   c002772b <__adddf3>
c000afcf:	83 c4 10             	add    esp,0x10
c000afd2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afd5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afdb:	4f                   	dec    edi
c000afdc:	83 ec 0c             	sub    esp,0xc
c000afdf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afe2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afe6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aff1:	e8 a9 d7 01 00       	call   c002879f <__extendsfdf2>
c000aff6:	83 c4 10             	add    esp,0x10
c000aff9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000affd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b001:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b005:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b009:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b00d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b011:	e8 92 cd 01 00       	call   c0027da8 <__muldf3>
c000b016:	83 c4 10             	add    esp,0x10
c000b019:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b021:	52                   	push   edx
c000b022:	50                   	push   eax
c000b023:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b026:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b029:	e8 fd c6 01 00       	call   c002772b <__adddf3>
c000b02e:	83 c4 10             	add    esp,0x10
c000b031:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b034:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b037:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b03a:	4f                   	dec    edi
c000b03b:	83 ec 0c             	sub    esp,0xc
c000b03e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b041:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b045:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b04c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b050:	e8 4a d7 01 00       	call   c002879f <__extendsfdf2>
c000b055:	83 c4 10             	add    esp,0x10
c000b058:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b05c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b064:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b068:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b06c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b070:	e8 33 cd 01 00       	call   c0027da8 <__muldf3>
c000b075:	83 c4 10             	add    esp,0x10
c000b078:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b07c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b080:	52                   	push   edx
c000b081:	50                   	push   eax
c000b082:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b085:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b088:	e8 9e c6 01 00       	call   c002772b <__adddf3>
c000b08d:	83 c4 10             	add    esp,0x10
c000b090:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b093:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b096:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b099:	4f                   	dec    edi
c000b09a:	83 ec 0c             	sub    esp,0xc
c000b09d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0a4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0ab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0af:	e8 eb d6 01 00       	call   c002879f <__extendsfdf2>
c000b0b4:	83 c4 10             	add    esp,0x10
c000b0b7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0bb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0c7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0cb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0cf:	e8 d4 cc 01 00       	call   c0027da8 <__muldf3>
c000b0d4:	83 c4 10             	add    esp,0x10
c000b0d7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0db:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0df:	52                   	push   edx
c000b0e0:	50                   	push   eax
c000b0e1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0e4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0e7:	e8 3f c6 01 00       	call   c002772b <__adddf3>
c000b0ec:	83 c4 10             	add    esp,0x10
c000b0ef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0f2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f8:	4f                   	dec    edi
c000b0f9:	83 ec 0c             	sub    esp,0xc
c000b0fc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b103:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b10a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b10e:	e8 8c d6 01 00       	call   c002879f <__extendsfdf2>
c000b113:	83 c4 10             	add    esp,0x10
c000b116:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b11a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b11e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b126:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b12a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b12e:	e8 75 cc 01 00       	call   c0027da8 <__muldf3>
c000b133:	83 c4 10             	add    esp,0x10
c000b136:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b13a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13e:	52                   	push   edx
c000b13f:	50                   	push   eax
c000b140:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b143:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b146:	e8 e0 c5 01 00       	call   c002772b <__adddf3>
c000b14b:	83 c4 10             	add    esp,0x10
c000b14e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b151:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b154:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b157:	4f                   	dec    edi
c000b158:	83 ec 0c             	sub    esp,0xc
c000b15b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b15e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b162:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b169:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b16d:	e8 2d d6 01 00       	call   c002879f <__extendsfdf2>
c000b172:	83 c4 10             	add    esp,0x10
c000b175:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b179:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b17d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b181:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b185:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b189:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b18d:	e8 16 cc 01 00       	call   c0027da8 <__muldf3>
c000b192:	83 c4 10             	add    esp,0x10
c000b195:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b199:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b19d:	52                   	push   edx
c000b19e:	50                   	push   eax
c000b19f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1a5:	e8 81 c5 01 00       	call   c002772b <__adddf3>
c000b1aa:	83 c4 10             	add    esp,0x10
c000b1ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1b3:	85 ff                	test   edi,edi
c000b1b5:	0f 8f e9 fc ff ff    	jg     c000aea4 <calc_output_multi+0x10e>
c000b1bb:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1bf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1c3:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1c7:	0f 89 4c fc ff ff    	jns    c000ae19 <calc_output_multi+0x83>
c000b1cd:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1d5:	29 c8                	sub    eax,ecx
c000b1d7:	99                   	cdq    
c000b1d8:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1dc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1e0:	0f af d0             	imul   edx,eax
c000b1e3:	40                   	inc    eax
c000b1e4:	01 d1                	add    ecx,edx
c000b1e6:	0f af c3             	imul   eax,ebx
c000b1e9:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ed:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1f4:	55                   	push   ebp
c000b1f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f9:	6a 00                	push   0x0
c000b1fb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1ff:	e8 7c 55 ff ff       	call   c0000780 <memset>
c000b204:	83 c4 10             	add    esp,0x10
c000b207:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b20b:	e8 e0 e6 ff ff       	call   c00098f0 <fp_to_double>
c000b210:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b214:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b218:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b21c:	e8 c5 e6 ff ff       	call   c00098e6 <fp_to_int>
c000b221:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b224:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b227:	57                   	push   edi
c000b228:	57                   	push   edi
c000b229:	89 df                	mov    edi,ebx
c000b22b:	55                   	push   ebp
c000b22c:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b230:	e8 8b be 01 00       	call   c00270c0 <__subsf3>
c000b235:	89 04 24             	mov    DWORD PTR [esp],eax
c000b238:	e8 62 d5 01 00       	call   c002879f <__extendsfdf2>
c000b23d:	83 c4 10             	add    esp,0x10
c000b240:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b244:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b24c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b250:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b254:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b258:	e8 4b cb 01 00       	call   c0027da8 <__muldf3>
c000b25d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b260:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b264:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b268:	e8 32 d5 01 00       	call   c002879f <__extendsfdf2>
c000b26d:	83 c4 10             	add    esp,0x10
c000b270:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b274:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b278:	52                   	push   edx
c000b279:	50                   	push   eax
c000b27a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b282:	e8 a4 c4 01 00       	call   c002772b <__adddf3>
c000b287:	83 c4 10             	add    esp,0x10
c000b28a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b28e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b292:	89 f8                	mov    eax,edi
c000b294:	b9 08 00 00 00       	mov    ecx,0x8
c000b299:	99                   	cdq    
c000b29a:	f7 f9                	idiv   ecx
c000b29c:	4a                   	dec    edx
c000b29d:	83 fa 06             	cmp    edx,0x6
c000b2a0:	77 07                	ja     c000b2a9 <calc_output_multi+0x513>
c000b2a2:	ff 24 95 e0 9f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6020]
c000b2a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2ad:	4f                   	dec    edi
c000b2ae:	83 ec 0c             	sub    esp,0xc
c000b2b1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2bf:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2c3:	e8 d7 d4 01 00       	call   c002879f <__extendsfdf2>
c000b2c8:	83 c4 10             	add    esp,0x10
c000b2cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2e3:	e8 c0 ca 01 00       	call   c0027da8 <__muldf3>
c000b2e8:	83 c4 10             	add    esp,0x10
c000b2eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f3:	52                   	push   edx
c000b2f4:	50                   	push   eax
c000b2f5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2fb:	e8 2b c4 01 00       	call   c002772b <__adddf3>
c000b300:	83 c4 10             	add    esp,0x10
c000b303:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b306:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b30d:	4f                   	dec    edi
c000b30e:	83 ec 0c             	sub    esp,0xc
c000b311:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b314:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b318:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b31f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b323:	e8 77 d4 01 00       	call   c002879f <__extendsfdf2>
c000b328:	83 c4 10             	add    esp,0x10
c000b32b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b32f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b333:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b337:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b33b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b343:	e8 60 ca 01 00       	call   c0027da8 <__muldf3>
c000b348:	83 c4 10             	add    esp,0x10
c000b34b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b353:	52                   	push   edx
c000b354:	50                   	push   eax
c000b355:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b358:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b35b:	e8 cb c3 01 00       	call   c002772b <__adddf3>
c000b360:	83 c4 10             	add    esp,0x10
c000b363:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b366:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b369:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b36d:	4f                   	dec    edi
c000b36e:	83 ec 0c             	sub    esp,0xc
c000b371:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b374:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b378:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b37f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b383:	e8 17 d4 01 00       	call   c002879f <__extendsfdf2>
c000b388:	83 c4 10             	add    esp,0x10
c000b38b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b38f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b397:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b39b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3a3:	e8 00 ca 01 00       	call   c0027da8 <__muldf3>
c000b3a8:	83 c4 10             	add    esp,0x10
c000b3ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b3:	52                   	push   edx
c000b3b4:	50                   	push   eax
c000b3b5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3bb:	e8 6b c3 01 00       	call   c002772b <__adddf3>
c000b3c0:	83 c4 10             	add    esp,0x10
c000b3c3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3c6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3cd:	4f                   	dec    edi
c000b3ce:	83 ec 0c             	sub    esp,0xc
c000b3d1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3df:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3e3:	e8 b7 d3 01 00       	call   c002879f <__extendsfdf2>
c000b3e8:	83 c4 10             	add    esp,0x10
c000b3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b403:	e8 a0 c9 01 00       	call   c0027da8 <__muldf3>
c000b408:	83 c4 10             	add    esp,0x10
c000b40b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b413:	52                   	push   edx
c000b414:	50                   	push   eax
c000b415:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b418:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b41b:	e8 0b c3 01 00       	call   c002772b <__adddf3>
c000b420:	83 c4 10             	add    esp,0x10
c000b423:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b426:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b429:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b42d:	4f                   	dec    edi
c000b42e:	83 ec 0c             	sub    esp,0xc
c000b431:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b434:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b438:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b43f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b443:	e8 57 d3 01 00       	call   c002879f <__extendsfdf2>
c000b448:	83 c4 10             	add    esp,0x10
c000b44b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b44f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b453:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b457:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b45b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b463:	e8 40 c9 01 00       	call   c0027da8 <__muldf3>
c000b468:	83 c4 10             	add    esp,0x10
c000b46b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b473:	52                   	push   edx
c000b474:	50                   	push   eax
c000b475:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b478:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b47b:	e8 ab c2 01 00       	call   c002772b <__adddf3>
c000b480:	83 c4 10             	add    esp,0x10
c000b483:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b486:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b489:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b48d:	4f                   	dec    edi
c000b48e:	83 ec 0c             	sub    esp,0xc
c000b491:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b494:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b498:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b49f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4a3:	e8 f7 d2 01 00       	call   c002879f <__extendsfdf2>
c000b4a8:	83 c4 10             	add    esp,0x10
c000b4ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4c3:	e8 e0 c8 01 00       	call   c0027da8 <__muldf3>
c000b4c8:	83 c4 10             	add    esp,0x10
c000b4cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d3:	52                   	push   edx
c000b4d4:	50                   	push   eax
c000b4d5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4db:	e8 4b c2 01 00       	call   c002772b <__adddf3>
c000b4e0:	83 c4 10             	add    esp,0x10
c000b4e3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4e6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ed:	4f                   	dec    edi
c000b4ee:	83 ec 0c             	sub    esp,0xc
c000b4f1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4ff:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b503:	e8 97 d2 01 00       	call   c002879f <__extendsfdf2>
c000b508:	83 c4 10             	add    esp,0x10
c000b50b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b50f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b513:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b517:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b51b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b523:	e8 80 c8 01 00       	call   c0027da8 <__muldf3>
c000b528:	83 c4 10             	add    esp,0x10
c000b52b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b533:	52                   	push   edx
c000b534:	50                   	push   eax
c000b535:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b538:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b53b:	e8 eb c1 01 00       	call   c002772b <__adddf3>
c000b540:	83 c4 10             	add    esp,0x10
c000b543:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b546:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b549:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b54d:	4f                   	dec    edi
c000b54e:	83 ec 0c             	sub    esp,0xc
c000b551:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b554:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b558:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b55f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b563:	e8 37 d2 01 00       	call   c002879f <__extendsfdf2>
c000b568:	83 c4 10             	add    esp,0x10
c000b56b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b56f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b573:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b577:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b57b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b583:	e8 20 c8 01 00       	call   c0027da8 <__muldf3>
c000b588:	83 c4 10             	add    esp,0x10
c000b58b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b58f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b593:	52                   	push   edx
c000b594:	50                   	push   eax
c000b595:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b598:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b59b:	e8 8b c1 01 00       	call   c002772b <__adddf3>
c000b5a0:	83 c4 10             	add    esp,0x10
c000b5a3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b5a6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a9:	85 ff                	test   edi,edi
c000b5ab:	0f 8f e1 fc ff ff    	jg     c000b292 <calc_output_multi+0x4fc>
c000b5b1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5b5:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b9:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5bd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5c2:	0f 8f 3f fc ff ff    	jg     c000b207 <calc_output_multi+0x471>
c000b5c8:	be 08 00 00 00       	mov    esi,0x8
c000b5cd:	89 d8                	mov    eax,ebx
c000b5cf:	99                   	cdq    
c000b5d0:	f7 fe                	idiv   esi
c000b5d2:	4a                   	dec    edx
c000b5d3:	83 fa 06             	cmp    edx,0x6
c000b5d6:	77 07                	ja     c000b5df <calc_output_multi+0x849>
c000b5d8:	ff 24 95 fc 9f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6004]
c000b5df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5e3:	4b                   	dec    ebx
c000b5e4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ef:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5f3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5f6:	e8 30 c1 01 00       	call   c002772b <__adddf3>
c000b5fb:	83 c4 10             	add    esp,0x10
c000b5fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b602:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b60e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b612:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b616:	e8 8d c7 01 00       	call   c0027da8 <__muldf3>
c000b61b:	5d                   	pop    ebp
c000b61c:	59                   	pop    ecx
c000b61d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b621:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	e8 49 d0 01 00       	call   c002867b <__truncdfsf2>
c000b632:	83 c4 10             	add    esp,0x10
c000b635:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b639:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b63c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b640:	4b                   	dec    ebx
c000b641:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b645:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b64c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b650:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b653:	e8 d3 c0 01 00       	call   c002772b <__adddf3>
c000b658:	83 c4 10             	add    esp,0x10
c000b65b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b65f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b663:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b667:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b66b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b673:	e8 30 c7 01 00       	call   c0027da8 <__muldf3>
c000b678:	59                   	pop    ecx
c000b679:	5f                   	pop    edi
c000b67a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b67e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b682:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	e8 ec cf 01 00       	call   c002867b <__truncdfsf2>
c000b68f:	83 c4 10             	add    esp,0x10
c000b692:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b696:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b699:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b69d:	4b                   	dec    ebx
c000b69e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6ad:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6b0:	e8 76 c0 01 00       	call   c002772b <__adddf3>
c000b6b5:	83 c4 10             	add    esp,0x10
c000b6b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6d0:	e8 d3 c6 01 00       	call   c0027da8 <__muldf3>
c000b6d5:	5f                   	pop    edi
c000b6d6:	5d                   	pop    ebp
c000b6d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	e8 8f cf 01 00       	call   c002867b <__truncdfsf2>
c000b6ec:	83 c4 10             	add    esp,0x10
c000b6ef:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6f3:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6fa:	4b                   	dec    ebx
c000b6fb:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6ff:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b702:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b706:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b70a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b70d:	e8 19 c0 01 00       	call   c002772b <__adddf3>
c000b712:	83 c4 10             	add    esp,0x10
c000b715:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b719:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b71d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b721:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b725:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b729:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b72d:	e8 76 c6 01 00       	call   c0027da8 <__muldf3>
c000b732:	5d                   	pop    ebp
c000b733:	59                   	pop    ecx
c000b734:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b738:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b73c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	e8 32 cf 01 00       	call   c002867b <__truncdfsf2>
c000b749:	83 c4 10             	add    esp,0x10
c000b74c:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b750:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b753:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b757:	4b                   	dec    ebx
c000b758:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b75f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b763:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b767:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b76a:	e8 bc bf 01 00       	call   c002772b <__adddf3>
c000b76f:	83 c4 10             	add    esp,0x10
c000b772:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b776:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b782:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b786:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b78a:	e8 19 c6 01 00       	call   c0027da8 <__muldf3>
c000b78f:	59                   	pop    ecx
c000b790:	5f                   	pop    edi
c000b791:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b795:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	e8 d5 ce 01 00       	call   c002867b <__truncdfsf2>
c000b7a6:	83 c4 10             	add    esp,0x10
c000b7a9:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7ad:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7b4:	4b                   	dec    ebx
c000b7b5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7c0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7c4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7c7:	e8 5f bf 01 00       	call   c002772b <__adddf3>
c000b7cc:	83 c4 10             	add    esp,0x10
c000b7cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7e7:	e8 bc c5 01 00       	call   c0027da8 <__muldf3>
c000b7ec:	5f                   	pop    edi
c000b7ed:	5d                   	pop    ebp
c000b7ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	e8 78 ce 01 00       	call   c002867b <__truncdfsf2>
c000b803:	83 c4 10             	add    esp,0x10
c000b806:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b80a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b80d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b811:	4b                   	dec    ebx
c000b812:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b816:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b81d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b821:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b824:	e8 02 bf 01 00       	call   c002772b <__adddf3>
c000b829:	83 c4 10             	add    esp,0x10
c000b82c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b830:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b834:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b83c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b840:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b844:	e8 5f c5 01 00       	call   c0027da8 <__muldf3>
c000b849:	5d                   	pop    ebp
c000b84a:	59                   	pop    ecx
c000b84b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b84f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b853:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	e8 1b ce 01 00       	call   c002867b <__truncdfsf2>
c000b860:	83 c4 10             	add    esp,0x10
c000b863:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b867:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b86a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b86e:	4b                   	dec    ebx
c000b86f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b873:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b876:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b87a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b87e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b881:	e8 a5 be 01 00       	call   c002772b <__adddf3>
c000b886:	83 c4 10             	add    esp,0x10
c000b889:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b88d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b891:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b895:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b899:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b89d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8a1:	e8 02 c5 01 00       	call   c0027da8 <__muldf3>
c000b8a6:	59                   	pop    ecx
c000b8a7:	5f                   	pop    edi
c000b8a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b8:	e8 be cd 01 00       	call   c002867b <__truncdfsf2>
c000b8bd:	83 c4 10             	add    esp,0x10
c000b8c0:	85 db                	test   ebx,ebx
c000b8c2:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8c6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c9:	0f 8f fe fc ff ff    	jg     c000b5cd <calc_output_multi+0x837>
c000b8cf:	83 c4 4c             	add    esp,0x4c
c000b8d2:	5b                   	pop    ebx
c000b8d3:	5e                   	pop    esi
c000b8d4:	5f                   	pop    edi
c000b8d5:	5d                   	pop    ebp
c000b8d6:	c3                   	ret    

c000b8d7 <double_to_fp>:
c000b8d7:	83 ec 0c             	sub    esp,0xc
c000b8da:	68 00 00 b0 40       	push   0x40b00000
c000b8df:	6a 00                	push   0x0
c000b8e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e9:	e8 ba c4 01 00       	call   c0027da8 <__muldf3>
c000b8ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8f6:	83 c4 1c             	add    esp,0x1c
c000b8f9:	e9 32 cf 01 00       	jmp    c0028830 <lrint>

c000b8fe <prepare_data>:
c000b8fe:	55                   	push   ebp
c000b8ff:	57                   	push   edi
c000b900:	56                   	push   esi
c000b901:	53                   	push   ebx
c000b902:	83 ec 1c             	sub    esp,0x1c
c000b905:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b909:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b90d:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b911:	0f 89 57 01 00 00    	jns    c000ba6e <prepare_data+0x170>
c000b917:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b91a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91d:	85 d2                	test   edx,edx
c000b91f:	75 0d                	jne    c000b92e <prepare_data+0x30>
c000b921:	8d 14 36             	lea    edx,[esi+esi*1]
c000b924:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b927:	29 d0                	sub    eax,edx
c000b929:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b92c:	eb 44                	jmp    c000b972 <prepare_data+0x74>
c000b92e:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b931:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b934:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b937:	39 c1                	cmp    ecx,eax
c000b939:	7d 04                	jge    c000b93f <prepare_data+0x41>
c000b93b:	29 d0                	sub    eax,edx
c000b93d:	eb 2d                	jmp    c000b96c <prepare_data+0x6e>
c000b93f:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b945:	29 d7                	sub    edi,edx
c000b947:	01 f7                	add    edi,esi
c000b949:	51                   	push   ecx
c000b94a:	29 f2                	sub    edx,esi
c000b94c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b953:	8d 14 90             	lea    edx,[eax+edx*4]
c000b956:	51                   	push   ecx
c000b957:	52                   	push   edx
c000b958:	50                   	push   eax
c000b959:	e8 26 4d ff ff       	call   c0000684 <memmove>
c000b95e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b961:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b964:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b967:	29 f0                	sub    eax,esi
c000b969:	83 c4 10             	add    esp,0x10
c000b96c:	29 f0                	sub    eax,esi
c000b96e:	79 02                	jns    c000b972 <prepare_data+0x74>
c000b970:	31 c0                	xor    eax,eax
c000b972:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b975:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b978:	29 ef                	sub    edi,ebp
c000b97a:	39 c7                	cmp    edi,eax
c000b97c:	7e 02                	jle    c000b980 <prepare_data+0x82>
c000b97e:	89 c7                	mov    edi,eax
c000b980:	89 f8                	mov    eax,edi
c000b982:	99                   	cdq    
c000b983:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b986:	b8 15 00 00 00       	mov    eax,0x15
c000b98b:	29 d7                	sub    edi,edx
c000b98d:	0f 88 dd 00 00 00    	js     c000ba70 <prepare_data+0x172>
c000b993:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b996:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b999:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b99c:	0f 8f ce 00 00 00    	jg     c000ba70 <prepare_data+0x172>
c000b9a2:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a8:	50                   	push   eax
c000b9a9:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9b0:	50                   	push   eax
c000b9b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9b7:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9ba:	50                   	push   eax
c000b9bb:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9be:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9c2:	50                   	push   eax
c000b9c3:	e8 84 4d ff ff       	call   c000074c <memcpy>
c000b9c8:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9cb:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9ce:	01 fd                	add    ebp,edi
c000b9d0:	01 f9                	add    ecx,edi
c000b9d2:	83 c4 10             	add    esp,0x10
c000b9d5:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d8:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9db:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9e2:	0f 85 86 00 00 00    	jne    c000ba6e <prepare_data+0x170>
c000b9e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9eb:	89 e8                	mov    eax,ebp
c000b9ed:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9f0:	29 c8                	sub    eax,ecx
c000b9f2:	39 f8                	cmp    eax,edi
c000b9f4:	7d 78                	jge    c000ba6e <prepare_data+0x170>
c000b9f6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9fa:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9fe:	74 6e                	je     c000ba6e <prepare_data+0x170>
c000ba00:	8d 7e 04             	lea    edi,[esi+0x4]
c000ba03:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ba07:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba0a:	29 ef                	sub    edi,ebp
c000ba0c:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba10:	7c 29                	jl     c000ba3b <prepare_data+0x13d>
c000ba12:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba15:	29 f1                	sub    ecx,esi
c000ba17:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba1e:	55                   	push   ebp
c000ba1f:	50                   	push   eax
c000ba20:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba23:	50                   	push   eax
c000ba24:	52                   	push   edx
c000ba25:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba29:	e8 56 4c ff ff       	call   c0000684 <memmove>
c000ba2e:	83 c4 10             	add    esp,0x10
c000ba31:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba34:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba37:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba3b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba3e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba41:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba44:	83 c6 05             	add    esi,0x5
c000ba47:	78 07                	js     c000ba50 <prepare_data+0x152>
c000ba49:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba4c:	39 cf                	cmp    edi,ecx
c000ba4e:	7e 04                	jle    c000ba54 <prepare_data+0x156>
c000ba50:	89 ce                	mov    esi,ecx
c000ba52:	29 c6                	sub    esi,eax
c000ba54:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba57:	51                   	push   ecx
c000ba58:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba5f:	51                   	push   ecx
c000ba60:	6a 00                	push   0x0
c000ba62:	50                   	push   eax
c000ba63:	e8 18 4d ff ff       	call   c0000780 <memset>
c000ba68:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba6b:	83 c4 10             	add    esp,0x10
c000ba6e:	31 c0                	xor    eax,eax
c000ba70:	83 c4 1c             	add    esp,0x1c
c000ba73:	5b                   	pop    ebx
c000ba74:	5e                   	pop    esi
c000ba75:	5f                   	pop    edi
c000ba76:	5d                   	pop    ebp
c000ba77:	c3                   	ret    

c000ba78 <sinc_multichan_vari_process>:
c000ba78:	55                   	push   ebp
c000ba79:	ba 05 00 00 00       	mov    edx,0x5
c000ba7e:	57                   	push   edi
c000ba7f:	56                   	push   esi
c000ba80:	53                   	push   ebx
c000ba81:	83 ec 4c             	sub    esp,0x4c
c000ba84:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba88:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba8c:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba8f:	85 db                	test   ebx,ebx
c000ba91:	0f 84 9b 06 00 00    	je     c000c132 <sinc_multichan_vari_process+0x6ba>
c000ba97:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba9a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba9d:	0f af c5             	imul   eax,ebp
c000baa0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000baa3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000baa6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bab4:	0f af c5             	imul   eax,ebp
c000bab7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000baba:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000babd:	8b 06                	mov    eax,DWORD PTR [esi]
c000babf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bac3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bac7:	68 00 00 70 3f       	push   0x3f700000
c000bacc:	6a 00                	push   0x0
c000bace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad6:	e8 9c cb 01 00       	call   c0028677 <__ltdf2>
c000badb:	83 c4 10             	add    esp,0x10
c000bade:	ba 16 00 00 00       	mov    edx,0x16
c000bae3:	85 c0                	test   eax,eax
c000bae5:	0f 88 47 06 00 00    	js     c000c132 <sinc_multichan_vari_process+0x6ba>
c000baeb:	68 00 00 70 40       	push   0x40700000
c000baf0:	6a 00                	push   0x0
c000baf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bafa:	e8 5a cb 01 00       	call   c0028659 <__gtdf2>
c000baff:	83 c4 10             	add    esp,0x10
c000bb02:	ba 16 00 00 00       	mov    edx,0x16
c000bb07:	85 c0                	test   eax,eax
c000bb09:	0f 8f 23 06 00 00    	jg     c000c132 <sinc_multichan_vari_process+0x6ba>
c000bb0f:	83 ec 0c             	sub    esp,0xc
c000bb12:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb15:	e8 f1 c8 01 00       	call   c002840b <__floatsidf>
c000bb1a:	83 c4 10             	add    esp,0x10
c000bb1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb25:	68 00 00 00 40       	push   0x40000000
c000bb2a:	6a 00                	push   0x0
c000bb2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb34:	e8 f2 bb 01 00       	call   c002772b <__adddf3>
c000bb39:	59                   	pop    ecx
c000bb3a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb3e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb42:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb45:	e8 c1 c8 01 00       	call   c002840b <__floatsidf>
c000bb4a:	83 c4 10             	add    esp,0x10
c000bb4d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb51:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb55:	52                   	push   edx
c000bb56:	50                   	push   eax
c000bb57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5f:	e8 28 c5 01 00       	call   c002808c <__divdf3>
c000bb64:	83 c4 10             	add    esp,0x10
c000bb67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb6b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb6f:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb72:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8d:	e8 c7 ca 01 00       	call   c0028659 <__gtdf2>
c000bb92:	83 c4 10             	add    esp,0x10
c000bb95:	85 c0                	test   eax,eax
c000bb97:	7e 2d                	jle    c000bbc6 <sinc_multichan_vari_process+0x14e>
c000bb99:	68 00 00 f0 3f       	push   0x3ff00000
c000bb9e:	6a 00                	push   0x0
c000bba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba8:	e8 ca ca 01 00       	call   c0028677 <__ltdf2>
c000bbad:	83 c4 10             	add    esp,0x10
c000bbb0:	85 c0                	test   eax,eax
c000bbb2:	79 4d                	jns    c000bc01 <sinc_multichan_vari_process+0x189>
c000bbb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbc4:	eb 1b                	jmp    c000bbe1 <sinc_multichan_vari_process+0x169>
c000bbc6:	68 00 00 f0 3f       	push   0x3ff00000
c000bbcb:	6a 00                	push   0x0
c000bbcd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbd5:	e8 9d ca 01 00       	call   c0028677 <__ltdf2>
c000bbda:	83 c4 10             	add    esp,0x10
c000bbdd:	85 c0                	test   eax,eax
c000bbdf:	79 20                	jns    c000bc01 <sinc_multichan_vari_process+0x189>
c000bbe1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbf1:	e8 96 c4 01 00       	call   c002808c <__divdf3>
c000bbf6:	83 c4 10             	add    esp,0x10
c000bbf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbfd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc01:	50                   	push   eax
c000bc02:	50                   	push   eax
c000bc03:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc0b:	e8 20 cc 01 00       	call   c0028830 <lrint>
c000bc10:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc13:	40                   	inc    eax
c000bc14:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc18:	0f af c5             	imul   eax,ebp
c000bc1b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc1f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc26:	58                   	pop    eax
c000bc27:	5a                   	pop    edx
c000bc28:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc2c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc30:	e8 fb cb 01 00       	call   c0028830 <lrint>
c000bc35:	83 ec 0c             	sub    esp,0xc
c000bc38:	50                   	push   eax
c000bc39:	e8 cd c7 01 00       	call   c002840b <__floatsidf>
c000bc3e:	83 c4 10             	add    esp,0x10
c000bc41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc45:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc49:	52                   	push   edx
c000bc4a:	50                   	push   eax
c000bc4b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc53:	e8 24 c1 01 00       	call   c0027d7c <__subdf3>
c000bc58:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc5c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc60:	83 c4 20             	add    esp,0x20
c000bc63:	6a 00                	push   0x0
c000bc65:	6a 00                	push   0x0
c000bc67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc6f:	e8 03 ca 01 00       	call   c0028677 <__ltdf2>
c000bc74:	83 c4 10             	add    esp,0x10
c000bc77:	85 c0                	test   eax,eax
c000bc79:	79 1f                	jns    c000bc9a <sinc_multichan_vari_process+0x222>
c000bc7b:	68 00 00 f0 3f       	push   0x3ff00000
c000bc80:	6a 00                	push   0x0
c000bc82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc8a:	e8 9c ba 01 00       	call   c002772b <__adddf3>
c000bc8f:	83 c4 10             	add    esp,0x10
c000bc92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc9a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc9d:	83 ec 10             	sub    esp,0x10
c000bca0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bca4:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bca7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcb7:	e8 c0 c0 01 00       	call   c0027d7c <__subdf3>
c000bcbc:	83 c4 18             	add    esp,0x18
c000bcbf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcc7:	52                   	push   edx
c000bcc8:	50                   	push   eax
c000bcc9:	e8 62 cb 01 00       	call   c0028830 <lrint>
c000bcce:	0f af e8             	imul   ebp,eax
c000bcd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcd5:	01 e8                	add    eax,ebp
c000bcd7:	99                   	cdq    
c000bcd8:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcdb:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bce2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bce6:	68 00 00 f0 3f       	push   0x3ff00000
c000bceb:	6a 00                	push   0x0
c000bced:	e8 9a c3 01 00       	call   c002808c <__divdf3>
c000bcf2:	83 c4 10             	add    esp,0x10
c000bcf5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcfd:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bd02:	68 23 42 92 0c       	push   0xc924223
c000bd07:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd0b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd0f:	e8 17 ba 01 00       	call   c002772b <__adddf3>
c000bd14:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd18:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd1c:	83 c4 20             	add    esp,0x20
c000bd1f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd27:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd2f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd32:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd35:	7d 50                	jge    c000bd87 <sinc_multichan_vari_process+0x30f>
c000bd37:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd3a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd3d:	01 c8                	add    eax,ecx
c000bd3f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd42:	99                   	cdq    
c000bd43:	f7 f9                	idiv   ecx
c000bd45:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd49:	7d 0c                	jge    c000bd57 <sinc_multichan_vari_process+0x2df>
c000bd4b:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd4e:	85 ed                	test   ebp,ebp
c000bd50:	79 6b                	jns    c000bdbd <sinc_multichan_vari_process+0x345>
c000bd52:	e9 e6 00 00 00       	jmp    c000be3d <sinc_multichan_vari_process+0x3c5>
c000bd57:	50                   	push   eax
c000bd58:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd5c:	57                   	push   edi
c000bd5d:	53                   	push   ebx
c000bd5e:	e8 9b fb ff ff       	call   c000b8fe <prepare_data>
c000bd63:	83 c4 10             	add    esp,0x10
c000bd66:	89 c2                	mov    edx,eax
c000bd68:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd6b:	85 c0                	test   eax,eax
c000bd6d:	0f 85 bf 03 00 00    	jne    c000c132 <sinc_multichan_vari_process+0x6ba>
c000bd73:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd76:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd79:	01 c8                	add    eax,ecx
c000bd7b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd7e:	99                   	cdq    
c000bd7f:	f7 f9                	idiv   ecx
c000bd81:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd85:	7c c4                	jl     c000bd4b <sinc_multichan_vari_process+0x2d3>
c000bd87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd8f:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd92:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd99:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd9d:	89 06                	mov    DWORD PTR [esi],eax
c000bd9f:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bda2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bda5:	99                   	cdq    
c000bda6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda9:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bdac:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bdaf:	99                   	cdq    
c000bdb0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdb3:	31 d2                	xor    edx,edx
c000bdb5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb8:	e9 75 03 00 00       	jmp    c000c132 <sinc_multichan_vari_process+0x6ba>
c000bdbd:	83 ec 0c             	sub    esp,0xc
c000bdc0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdc3:	e8 43 c6 01 00       	call   c002840b <__floatsidf>
c000bdc8:	83 c4 10             	add    esp,0x10
c000bdcb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdcf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdd3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bddb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde3:	e8 43 b9 01 00       	call   c002772b <__adddf3>
c000bde8:	83 c4 10             	add    esp,0x10
c000bdeb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdf3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be03:	e8 23 b9 01 00       	call   c002772b <__adddf3>
c000be08:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be13:	e8 f3 c5 01 00       	call   c002840b <__floatsidf>
c000be18:	83 c4 10             	add    esp,0x10
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be2d:	e8 43 c8 01 00       	call   c0028675 <__gedf2>
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	85 c0                	test   eax,eax
c000be37:	0f 89 4a ff ff ff    	jns    c000bd87 <sinc_multichan_vari_process+0x30f>
c000be3d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be41:	0f 8e ed 00 00 00    	jle    c000bf34 <sinc_multichan_vari_process+0x4bc>
c000be47:	83 ec 10             	sub    esp,0x10
c000be4a:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be4d:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be50:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be53:	ff 36                	push   DWORD PTR [esi]
c000be55:	e8 22 bf 01 00       	call   c0027d7c <__subdf3>
c000be5a:	83 c4 18             	add    esp,0x18
c000be5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be61:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be65:	52                   	push   edx
c000be66:	50                   	push   eax
c000be67:	e8 a4 c9 01 00       	call   c0028810 <fabs>
c000be6c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be70:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be74:	83 c4 10             	add    esp,0x10
c000be77:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be7c:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be89:	e8 cb c7 01 00       	call   c0028659 <__gtdf2>
c000be8e:	83 c4 10             	add    esp,0x10
c000be91:	85 c0                	test   eax,eax
c000be93:	0f 8e 9b 00 00 00    	jle    c000bf34 <sinc_multichan_vari_process+0x4bc>
c000be99:	8b 06                	mov    eax,DWORD PTR [esi]
c000be9b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bea2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bea6:	52                   	push   edx
c000bea7:	50                   	push   eax
c000bea8:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000beab:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000beae:	e8 c9 be 01 00       	call   c0027d7c <__subdf3>
c000beb3:	59                   	pop    ecx
c000beb4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bebc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bebf:	e8 47 c5 01 00       	call   c002840b <__floatsidf>
c000bec4:	83 c4 10             	add    esp,0x10
c000bec7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000becb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000becf:	52                   	push   edx
c000bed0:	50                   	push   eax
c000bed1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed9:	e8 ca be 01 00       	call   c0027da8 <__muldf3>
c000bede:	5d                   	pop    ebp
c000bedf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bee3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bee7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000beea:	e8 1c c5 01 00       	call   c002840b <__floatsidf>
c000beef:	83 c4 10             	add    esp,0x10
c000bef2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bef6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000befa:	52                   	push   edx
c000befb:	50                   	push   eax
c000befc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf04:	e8 83 c1 01 00       	call   c002808c <__divdf3>
c000bf09:	83 c4 10             	add    esp,0x10
c000bf0c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf10:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf24:	e8 02 b8 01 00       	call   c002772b <__adddf3>
c000bf29:	83 c4 10             	add    esp,0x10
c000bf2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf34:	83 ec 0c             	sub    esp,0xc
c000bf37:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf3a:	e8 cc c4 01 00       	call   c002840b <__floatsidf>
c000bf3f:	83 c4 10             	add    esp,0x10
c000bf42:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf46:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf5a:	e8 18 c7 01 00       	call   c0028677 <__ltdf2>
c000bf5f:	83 c4 10             	add    esp,0x10
c000bf62:	85 c0                	test   eax,eax
c000bf64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf6c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf70:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf74:	78 10                	js     c000bf86 <sinc_multichan_vari_process+0x50e>
c000bf76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf82:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf86:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf8e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf92:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf96:	e8 0d be 01 00       	call   c0027da8 <__muldf3>
c000bf9b:	59                   	pop    ecx
c000bf9c:	5d                   	pop    ebp
c000bf9d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bfa1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bfa5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfad:	e8 25 f9 ff ff       	call   c000b8d7 <double_to_fp>
c000bfb2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb6:	89 c5                	mov    ebp,eax
c000bfb8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfbc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfc0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfc4:	e8 df bd 01 00       	call   c0027da8 <__muldf3>
c000bfc9:	83 c4 18             	add    esp,0x18
c000bfcc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfd0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfd4:	52                   	push   edx
c000bfd5:	50                   	push   eax
c000bfd6:	e8 fc f8 ff ff       	call   c000b8d7 <double_to_fp>
c000bfdb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfde:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfe2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfe5:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe8:	50                   	push   eax
c000bfe9:	50                   	push   eax
c000bfea:	50                   	push   eax
c000bfeb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfee:	e8 18 c4 01 00       	call   c002840b <__floatsidf>
c000bff3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bff7:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c007:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c00b:	e8 7c c0 01 00       	call   c002808c <__divdf3>
c000c010:	83 c4 1c             	add    esp,0x1c
c000c013:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c017:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c01b:	52                   	push   edx
c000c01c:	89 ea                	mov    edx,ebp
c000c01e:	50                   	push   eax
c000c01f:	89 d8                	mov    eax,ebx
c000c021:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c024:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c028:	e8 69 ed ff ff       	call   c000ad96 <calc_output_multi>
c000c02d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c030:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c033:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c037:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c03b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c043:	e8 44 c0 01 00       	call   c002808c <__divdf3>
c000c048:	83 c4 10             	add    esp,0x10
c000c04b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c04f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c053:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c057:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c05b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c063:	e8 c3 b6 01 00       	call   c002772b <__adddf3>
c000c068:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c06c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c070:	83 c4 28             	add    esp,0x28
c000c073:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c077:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c07b:	e8 b0 c7 01 00       	call   c0028830 <lrint>
c000c080:	83 ec 0c             	sub    esp,0xc
c000c083:	50                   	push   eax
c000c084:	e8 82 c3 01 00       	call   c002840b <__floatsidf>
c000c089:	83 c4 10             	add    esp,0x10
c000c08c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c090:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c094:	52                   	push   edx
c000c095:	50                   	push   eax
c000c096:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c09a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c09e:	e8 d9 bc 01 00       	call   c0027d7c <__subdf3>
c000c0a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0ab:	83 c4 20             	add    esp,0x20
c000c0ae:	6a 00                	push   0x0
c000c0b0:	6a 00                	push   0x0
c000c0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ba:	e8 b8 c5 01 00       	call   c0028677 <__ltdf2>
c000c0bf:	83 c4 10             	add    esp,0x10
c000c0c2:	85 c0                	test   eax,eax
c000c0c4:	79 20                	jns    c000c0e6 <sinc_multichan_vari_process+0x66e>
c000c0c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d6:	e8 50 b6 01 00       	call   c002772b <__adddf3>
c000c0db:	83 c4 10             	add    esp,0x10
c000c0de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0e6:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e9:	83 ec 10             	sub    esp,0x10
c000c0ec:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0f0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c103:	e8 74 bc 01 00       	call   c0027d7c <__subdf3>
c000c108:	83 c4 18             	add    esp,0x18
c000c10b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c10f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c113:	52                   	push   edx
c000c114:	50                   	push   eax
c000c115:	e8 16 c7 01 00       	call   c0028830 <lrint>
c000c11a:	0f af e8             	imul   ebp,eax
c000c11d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c121:	83 c4 10             	add    esp,0x10
c000c124:	01 e8                	add    eax,ebp
c000c126:	99                   	cdq    
c000c127:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c12a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c12d:	e9 fd fb ff ff       	jmp    c000bd2f <sinc_multichan_vari_process+0x2b7>
c000c132:	83 c4 4c             	add    esp,0x4c
c000c135:	89 d0                	mov    eax,edx
c000c137:	5b                   	pop    ebx
c000c138:	5e                   	pop    esi
c000c139:	5f                   	pop    edi
c000c13a:	5d                   	pop    ebp
c000c13b:	c3                   	ret    

c000c13c <sinc_hex_vari_process>:
c000c13c:	55                   	push   ebp
c000c13d:	ba 05 00 00 00       	mov    edx,0x5
c000c142:	57                   	push   edi
c000c143:	56                   	push   esi
c000c144:	53                   	push   ebx
c000c145:	83 ec 4c             	sub    esp,0x4c
c000c148:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c14c:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c150:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c153:	85 db                	test   ebx,ebx
c000c155:	0f 84 9c 06 00 00    	je     c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c15b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c15e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c161:	0f af c7             	imul   eax,edi
c000c164:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c167:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c16a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c171:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c178:	0f af c7             	imul   eax,edi
c000c17b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c17e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c181:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c184:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c188:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c18c:	68 00 00 70 3f       	push   0x3f700000
c000c191:	6a 00                	push   0x0
c000c193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c19b:	e8 d7 c4 01 00       	call   c0028677 <__ltdf2>
c000c1a0:	83 c4 10             	add    esp,0x10
c000c1a3:	ba 16 00 00 00       	mov    edx,0x16
c000c1a8:	85 c0                	test   eax,eax
c000c1aa:	0f 88 47 06 00 00    	js     c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c1b0:	68 00 00 70 40       	push   0x40700000
c000c1b5:	6a 00                	push   0x0
c000c1b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1bf:	e8 95 c4 01 00       	call   c0028659 <__gtdf2>
c000c1c4:	83 c4 10             	add    esp,0x10
c000c1c7:	ba 16 00 00 00       	mov    edx,0x16
c000c1cc:	85 c0                	test   eax,eax
c000c1ce:	0f 8f 23 06 00 00    	jg     c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c1d4:	83 ec 0c             	sub    esp,0xc
c000c1d7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1da:	e8 2c c2 01 00       	call   c002840b <__floatsidf>
c000c1df:	83 c4 10             	add    esp,0x10
c000c1e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1ea:	68 00 00 00 40       	push   0x40000000
c000c1ef:	6a 00                	push   0x0
c000c1f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f9:	e8 2d b5 01 00       	call   c002772b <__adddf3>
c000c1fe:	59                   	pop    ecx
c000c1ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c203:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c207:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c20a:	e8 fc c1 01 00       	call   c002840b <__floatsidf>
c000c20f:	83 c4 10             	add    esp,0x10
c000c212:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c216:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c21a:	52                   	push   edx
c000c21b:	50                   	push   eax
c000c21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c220:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c224:	e8 63 be 01 00       	call   c002808c <__divdf3>
c000c229:	83 c4 10             	add    esp,0x10
c000c22c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c230:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c234:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c237:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c23a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c23e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c252:	e8 02 c4 01 00       	call   c0028659 <__gtdf2>
c000c257:	83 c4 10             	add    esp,0x10
c000c25a:	85 c0                	test   eax,eax
c000c25c:	7e 2d                	jle    c000c28b <sinc_hex_vari_process+0x14f>
c000c25e:	68 00 00 f0 3f       	push   0x3ff00000
c000c263:	6a 00                	push   0x0
c000c265:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c26d:	e8 05 c4 01 00       	call   c0028677 <__ltdf2>
c000c272:	83 c4 10             	add    esp,0x10
c000c275:	85 c0                	test   eax,eax
c000c277:	79 4d                	jns    c000c2c6 <sinc_hex_vari_process+0x18a>
c000c279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c27d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c281:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c285:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c289:	eb 1b                	jmp    c000c2a6 <sinc_hex_vari_process+0x16a>
c000c28b:	68 00 00 f0 3f       	push   0x3ff00000
c000c290:	6a 00                	push   0x0
c000c292:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c296:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c29a:	e8 d8 c3 01 00       	call   c0028677 <__ltdf2>
c000c29f:	83 c4 10             	add    esp,0x10
c000c2a2:	85 c0                	test   eax,eax
c000c2a4:	79 20                	jns    c000c2c6 <sinc_hex_vari_process+0x18a>
c000c2a6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2aa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b6:	e8 d1 bd 01 00       	call   c002808c <__divdf3>
c000c2bb:	83 c4 10             	add    esp,0x10
c000c2be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2c6:	50                   	push   eax
c000c2c7:	50                   	push   eax
c000c2c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2d0:	e8 5b c5 01 00       	call   c0028830 <lrint>
c000c2d5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d8:	40                   	inc    eax
c000c2d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2dd:	0f af c7             	imul   eax,edi
c000c2e0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2eb:	58                   	pop    eax
c000c2ec:	5a                   	pop    edx
c000c2ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2f5:	e8 36 c5 01 00       	call   c0028830 <lrint>
c000c2fa:	83 ec 0c             	sub    esp,0xc
c000c2fd:	50                   	push   eax
c000c2fe:	e8 08 c1 01 00       	call   c002840b <__floatsidf>
c000c303:	83 c4 10             	add    esp,0x10
c000c306:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c30a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c30e:	52                   	push   edx
c000c30f:	50                   	push   eax
c000c310:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c314:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c318:	e8 5f ba 01 00       	call   c0027d7c <__subdf3>
c000c31d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c321:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c325:	83 c4 20             	add    esp,0x20
c000c328:	6a 00                	push   0x0
c000c32a:	6a 00                	push   0x0
c000c32c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c330:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c334:	e8 3e c3 01 00       	call   c0028677 <__ltdf2>
c000c339:	83 c4 10             	add    esp,0x10
c000c33c:	85 c0                	test   eax,eax
c000c33e:	79 1f                	jns    c000c35f <sinc_hex_vari_process+0x223>
c000c340:	68 00 00 f0 3f       	push   0x3ff00000
c000c345:	6a 00                	push   0x0
c000c347:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c34b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c34f:	e8 d7 b3 01 00       	call   c002772b <__adddf3>
c000c354:	83 c4 10             	add    esp,0x10
c000c357:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c35b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c35f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c362:	83 ec 10             	sub    esp,0x10
c000c365:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c369:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c36c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c374:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c378:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c37c:	e8 fb b9 01 00       	call   c0027d7c <__subdf3>
c000c381:	83 c4 18             	add    esp,0x18
c000c384:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c388:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c38c:	52                   	push   edx
c000c38d:	50                   	push   eax
c000c38e:	e8 9d c4 01 00       	call   c0028830 <lrint>
c000c393:	0f af f8             	imul   edi,eax
c000c396:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c39a:	01 f8                	add    eax,edi
c000c39c:	99                   	cdq    
c000c39d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c3a0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c3a3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3ab:	68 00 00 f0 3f       	push   0x3ff00000
c000c3b0:	6a 00                	push   0x0
c000c3b2:	e8 d5 bc 01 00       	call   c002808c <__divdf3>
c000c3b7:	83 c4 10             	add    esp,0x10
c000c3ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3c2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3c7:	68 23 42 92 0c       	push   0xc924223
c000c3cc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3d4:	e8 52 b3 01 00       	call   c002772b <__adddf3>
c000c3d9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3dd:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3e1:	83 c4 20             	add    esp,0x20
c000c3e4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3ec:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3f4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3f7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3fa:	7d 50                	jge    c000c44c <sinc_hex_vari_process+0x310>
c000c3fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3ff:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c402:	01 c8                	add    eax,ecx
c000c404:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c407:	99                   	cdq    
c000c408:	f7 f9                	idiv   ecx
c000c40a:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c40e:	7d 0c                	jge    c000c41c <sinc_hex_vari_process+0x2e0>
c000c410:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c413:	85 ff                	test   edi,edi
c000c415:	79 6c                	jns    c000c483 <sinc_hex_vari_process+0x347>
c000c417:	e9 e7 00 00 00       	jmp    c000c503 <sinc_hex_vari_process+0x3c7>
c000c41c:	50                   	push   eax
c000c41d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c421:	56                   	push   esi
c000c422:	53                   	push   ebx
c000c423:	e8 d6 f4 ff ff       	call   c000b8fe <prepare_data>
c000c428:	83 c4 10             	add    esp,0x10
c000c42b:	89 c2                	mov    edx,eax
c000c42d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c430:	85 c0                	test   eax,eax
c000c432:	0f 85 bf 03 00 00    	jne    c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c438:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c43b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c43e:	01 c8                	add    eax,ecx
c000c440:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c443:	99                   	cdq    
c000c444:	f7 f9                	idiv   ecx
c000c446:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c44a:	7c c4                	jl     c000c410 <sinc_hex_vari_process+0x2d4>
c000c44c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c450:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c454:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c457:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c45a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c45e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c462:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c465:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c468:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c46b:	99                   	cdq    
c000c46c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c46f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c472:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c475:	99                   	cdq    
c000c476:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c479:	31 d2                	xor    edx,edx
c000c47b:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c47e:	e9 74 03 00 00       	jmp    c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c483:	83 ec 0c             	sub    esp,0xc
c000c486:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c489:	e8 7d bf 01 00       	call   c002840b <__floatsidf>
c000c48e:	83 c4 10             	add    esp,0x10
c000c491:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c495:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c499:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c49d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c4a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a9:	e8 7d b2 01 00       	call   c002772b <__adddf3>
c000c4ae:	83 c4 10             	add    esp,0x10
c000c4b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4b5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c9:	e8 5d b2 01 00       	call   c002772b <__adddf3>
c000c4ce:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d9:	e8 2d bf 01 00       	call   c002840b <__floatsidf>
c000c4de:	83 c4 10             	add    esp,0x10
c000c4e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e9:	52                   	push   edx
c000c4ea:	50                   	push   eax
c000c4eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4f3:	e8 7d c1 01 00       	call   c0028675 <__gedf2>
c000c4f8:	83 c4 10             	add    esp,0x10
c000c4fb:	85 c0                	test   eax,eax
c000c4fd:	0f 89 49 ff ff ff    	jns    c000c44c <sinc_hex_vari_process+0x310>
c000c503:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c507:	0f 8e ef 00 00 00    	jle    c000c5fc <sinc_hex_vari_process+0x4c0>
c000c50d:	83 ec 10             	sub    esp,0x10
c000c510:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c513:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c516:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c519:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c51c:	e8 5b b8 01 00       	call   c0027d7c <__subdf3>
c000c521:	83 c4 18             	add    esp,0x18
c000c524:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c528:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	e8 dd c2 01 00       	call   c0028810 <fabs>
c000c533:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c537:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c53b:	83 c4 10             	add    esp,0x10
c000c53e:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c543:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c548:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c54c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c550:	e8 04 c1 01 00       	call   c0028659 <__gtdf2>
c000c555:	83 c4 10             	add    esp,0x10
c000c558:	85 c0                	test   eax,eax
c000c55a:	0f 8e 9c 00 00 00    	jle    c000c5fc <sinc_hex_vari_process+0x4c0>
c000c560:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c563:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c566:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c56a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c56e:	52                   	push   edx
c000c56f:	50                   	push   eax
c000c570:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c573:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c576:	e8 01 b8 01 00       	call   c0027d7c <__subdf3>
c000c57b:	59                   	pop    ecx
c000c57c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c580:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c584:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c587:	e8 7f be 01 00       	call   c002840b <__floatsidf>
c000c58c:	83 c4 10             	add    esp,0x10
c000c58f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c593:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c597:	52                   	push   edx
c000c598:	50                   	push   eax
c000c599:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c59d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a1:	e8 02 b8 01 00       	call   c0027da8 <__muldf3>
c000c5a6:	5f                   	pop    edi
c000c5a7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5ab:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5af:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5b2:	e8 54 be 01 00       	call   c002840b <__floatsidf>
c000c5b7:	83 c4 10             	add    esp,0x10
c000c5ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5c2:	52                   	push   edx
c000c5c3:	50                   	push   eax
c000c5c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5cc:	e8 bb ba 01 00       	call   c002808c <__divdf3>
c000c5d1:	83 c4 10             	add    esp,0x10
c000c5d4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5ec:	e8 3a b1 01 00       	call   c002772b <__adddf3>
c000c5f1:	83 c4 10             	add    esp,0x10
c000c5f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5fc:	83 ec 0c             	sub    esp,0xc
c000c5ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c602:	e8 04 be 01 00       	call   c002840b <__floatsidf>
c000c607:	83 c4 10             	add    esp,0x10
c000c60a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c60e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c622:	e8 50 c0 01 00       	call   c0028677 <__ltdf2>
c000c627:	83 c4 10             	add    esp,0x10
c000c62a:	85 c0                	test   eax,eax
c000c62c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c630:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c634:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c638:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c63c:	78 10                	js     c000c64e <sinc_hex_vari_process+0x512>
c000c63e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c642:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c646:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c64a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c64e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c652:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c656:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c65a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c65e:	e8 45 b7 01 00       	call   c0027da8 <__muldf3>
c000c663:	59                   	pop    ecx
c000c664:	5f                   	pop    edi
c000c665:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c669:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c66d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c671:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c675:	e8 5d f2 ff ff       	call   c000b8d7 <double_to_fp>
c000c67a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67e:	89 c7                	mov    edi,eax
c000c680:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c684:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c688:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c68c:	e8 17 b7 01 00       	call   c0027da8 <__muldf3>
c000c691:	83 c4 18             	add    esp,0x18
c000c694:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c698:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c69c:	52                   	push   edx
c000c69d:	50                   	push   eax
c000c69e:	e8 34 f2 ff ff       	call   c000b8d7 <double_to_fp>
c000c6a3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c6a6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6aa:	83 c4 0c             	add    esp,0xc
c000c6ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6b0:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6b3:	50                   	push   eax
c000c6b4:	50                   	push   eax
c000c6b5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b8:	e8 4e bd 01 00       	call   c002840b <__floatsidf>
c000c6bd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6c1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6d5:	e8 b2 b9 01 00       	call   c002808c <__divdf3>
c000c6da:	83 c4 18             	add    esp,0x18
c000c6dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6e5:	52                   	push   edx
c000c6e6:	89 fa                	mov    edx,edi
c000c6e8:	50                   	push   eax
c000c6e9:	89 d8                	mov    eax,ebx
c000c6eb:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ef:	e8 50 de ff ff       	call   c000a544 <calc_output_hex>
c000c6f4:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c700:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c704:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c708:	e8 7f b9 01 00       	call   c002808c <__divdf3>
c000c70d:	83 c4 10             	add    esp,0x10
c000c710:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c714:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c718:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c71c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c724:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c728:	e8 fe af 01 00       	call   c002772b <__adddf3>
c000c72d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c731:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c735:	83 c4 18             	add    esp,0x18
c000c738:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c73c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c740:	e8 eb c0 01 00       	call   c0028830 <lrint>
c000c745:	83 ec 0c             	sub    esp,0xc
c000c748:	50                   	push   eax
c000c749:	e8 bd bc 01 00       	call   c002840b <__floatsidf>
c000c74e:	83 c4 10             	add    esp,0x10
c000c751:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c755:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c759:	52                   	push   edx
c000c75a:	50                   	push   eax
c000c75b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c763:	e8 14 b6 01 00       	call   c0027d7c <__subdf3>
c000c768:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c76c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c770:	83 c4 20             	add    esp,0x20
c000c773:	6a 00                	push   0x0
c000c775:	6a 00                	push   0x0
c000c777:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c77b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c77f:	e8 f3 be 01 00       	call   c0028677 <__ltdf2>
c000c784:	83 c4 10             	add    esp,0x10
c000c787:	85 c0                	test   eax,eax
c000c789:	79 20                	jns    c000c7ab <sinc_hex_vari_process+0x66f>
c000c78b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c793:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c797:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c79b:	e8 8b af 01 00       	call   c002772b <__adddf3>
c000c7a0:	83 c4 10             	add    esp,0x10
c000c7a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7ab:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7ae:	83 ec 10             	sub    esp,0x10
c000c7b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7b5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7c0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c8:	e8 af b5 01 00       	call   c0027d7c <__subdf3>
c000c7cd:	83 c4 18             	add    esp,0x18
c000c7d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7d4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d8:	52                   	push   edx
c000c7d9:	50                   	push   eax
c000c7da:	e8 51 c0 01 00       	call   c0028830 <lrint>
c000c7df:	0f af f8             	imul   edi,eax
c000c7e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7e6:	83 c4 10             	add    esp,0x10
c000c7e9:	01 f8                	add    eax,edi
c000c7eb:	99                   	cdq    
c000c7ec:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ef:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7f2:	e9 fd fb ff ff       	jmp    c000c3f4 <sinc_hex_vari_process+0x2b8>
c000c7f7:	83 c4 4c             	add    esp,0x4c
c000c7fa:	89 d0                	mov    eax,edx
c000c7fc:	5b                   	pop    ebx
c000c7fd:	5e                   	pop    esi
c000c7fe:	5f                   	pop    edi
c000c7ff:	5d                   	pop    ebp
c000c800:	c3                   	ret    

c000c801 <sinc_quad_vari_process>:
c000c801:	55                   	push   ebp
c000c802:	ba 05 00 00 00       	mov    edx,0x5
c000c807:	57                   	push   edi
c000c808:	56                   	push   esi
c000c809:	53                   	push   ebx
c000c80a:	83 ec 4c             	sub    esp,0x4c
c000c80d:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c811:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c815:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c818:	85 db                	test   ebx,ebx
c000c81a:	0f 84 9c 06 00 00    	je     c000cebc <sinc_quad_vari_process+0x6bb>
c000c820:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c823:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c826:	0f af c7             	imul   eax,edi
c000c829:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c82c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c82f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c836:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c83d:	0f af c7             	imul   eax,edi
c000c840:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c843:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c846:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c849:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c84d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c851:	68 00 00 70 3f       	push   0x3f700000
c000c856:	6a 00                	push   0x0
c000c858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c85c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c860:	e8 12 be 01 00       	call   c0028677 <__ltdf2>
c000c865:	83 c4 10             	add    esp,0x10
c000c868:	ba 16 00 00 00       	mov    edx,0x16
c000c86d:	85 c0                	test   eax,eax
c000c86f:	0f 88 47 06 00 00    	js     c000cebc <sinc_quad_vari_process+0x6bb>
c000c875:	68 00 00 70 40       	push   0x40700000
c000c87a:	6a 00                	push   0x0
c000c87c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c884:	e8 d0 bd 01 00       	call   c0028659 <__gtdf2>
c000c889:	83 c4 10             	add    esp,0x10
c000c88c:	ba 16 00 00 00       	mov    edx,0x16
c000c891:	85 c0                	test   eax,eax
c000c893:	0f 8f 23 06 00 00    	jg     c000cebc <sinc_quad_vari_process+0x6bb>
c000c899:	83 ec 0c             	sub    esp,0xc
c000c89c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c89f:	e8 67 bb 01 00       	call   c002840b <__floatsidf>
c000c8a4:	83 c4 10             	add    esp,0x10
c000c8a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8af:	68 00 00 00 40       	push   0x40000000
c000c8b4:	6a 00                	push   0x0
c000c8b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8be:	e8 68 ae 01 00       	call   c002772b <__adddf3>
c000c8c3:	59                   	pop    ecx
c000c8c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8cc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8cf:	e8 37 bb 01 00       	call   c002840b <__floatsidf>
c000c8d4:	83 c4 10             	add    esp,0x10
c000c8d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8db:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8df:	52                   	push   edx
c000c8e0:	50                   	push   eax
c000c8e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e9:	e8 9e b7 01 00       	call   c002808c <__divdf3>
c000c8ee:	83 c4 10             	add    esp,0x10
c000c8f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8fc:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c903:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c917:	e8 3d bd 01 00       	call   c0028659 <__gtdf2>
c000c91c:	83 c4 10             	add    esp,0x10
c000c91f:	85 c0                	test   eax,eax
c000c921:	7e 2d                	jle    c000c950 <sinc_quad_vari_process+0x14f>
c000c923:	68 00 00 f0 3f       	push   0x3ff00000
c000c928:	6a 00                	push   0x0
c000c92a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c932:	e8 40 bd 01 00       	call   c0028677 <__ltdf2>
c000c937:	83 c4 10             	add    esp,0x10
c000c93a:	85 c0                	test   eax,eax
c000c93c:	79 4d                	jns    c000c98b <sinc_quad_vari_process+0x18a>
c000c93e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c942:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c946:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c94a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c94e:	eb 1b                	jmp    c000c96b <sinc_quad_vari_process+0x16a>
c000c950:	68 00 00 f0 3f       	push   0x3ff00000
c000c955:	6a 00                	push   0x0
c000c957:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c95b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c95f:	e8 13 bd 01 00       	call   c0028677 <__ltdf2>
c000c964:	83 c4 10             	add    esp,0x10
c000c967:	85 c0                	test   eax,eax
c000c969:	79 20                	jns    c000c98b <sinc_quad_vari_process+0x18a>
c000c96b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c973:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c977:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c97b:	e8 0c b7 01 00       	call   c002808c <__divdf3>
c000c980:	83 c4 10             	add    esp,0x10
c000c983:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c987:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c98b:	50                   	push   eax
c000c98c:	50                   	push   eax
c000c98d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c991:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c995:	e8 96 be 01 00       	call   c0028830 <lrint>
c000c99a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c99d:	40                   	inc    eax
c000c99e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a2:	0f af c7             	imul   eax,edi
c000c9a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9b0:	58                   	pop    eax
c000c9b1:	5a                   	pop    edx
c000c9b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ba:	e8 71 be 01 00       	call   c0028830 <lrint>
c000c9bf:	83 ec 0c             	sub    esp,0xc
c000c9c2:	50                   	push   eax
c000c9c3:	e8 43 ba 01 00       	call   c002840b <__floatsidf>
c000c9c8:	83 c4 10             	add    esp,0x10
c000c9cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9d3:	52                   	push   edx
c000c9d4:	50                   	push   eax
c000c9d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9dd:	e8 9a b3 01 00       	call   c0027d7c <__subdf3>
c000c9e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9ea:	83 c4 20             	add    esp,0x20
c000c9ed:	6a 00                	push   0x0
c000c9ef:	6a 00                	push   0x0
c000c9f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f9:	e8 79 bc 01 00       	call   c0028677 <__ltdf2>
c000c9fe:	83 c4 10             	add    esp,0x10
c000ca01:	85 c0                	test   eax,eax
c000ca03:	79 1f                	jns    c000ca24 <sinc_quad_vari_process+0x223>
c000ca05:	68 00 00 f0 3f       	push   0x3ff00000
c000ca0a:	6a 00                	push   0x0
c000ca0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca14:	e8 12 ad 01 00       	call   c002772b <__adddf3>
c000ca19:	83 c4 10             	add    esp,0x10
c000ca1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca24:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca27:	83 ec 10             	sub    esp,0x10
c000ca2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca2e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca41:	e8 36 b3 01 00       	call   c0027d7c <__subdf3>
c000ca46:	83 c4 18             	add    esp,0x18
c000ca49:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca51:	52                   	push   edx
c000ca52:	50                   	push   eax
c000ca53:	e8 d8 bd 01 00       	call   c0028830 <lrint>
c000ca58:	0f af f8             	imul   edi,eax
c000ca5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca5f:	01 f8                	add    eax,edi
c000ca61:	99                   	cdq    
c000ca62:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca65:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca6c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca70:	68 00 00 f0 3f       	push   0x3ff00000
c000ca75:	6a 00                	push   0x0
c000ca77:	e8 10 b6 01 00       	call   c002808c <__divdf3>
c000ca7c:	83 c4 10             	add    esp,0x10
c000ca7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca87:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca8c:	68 23 42 92 0c       	push   0xc924223
c000ca91:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca95:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca99:	e8 8d ac 01 00       	call   c002772b <__adddf3>
c000ca9e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000caa2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000caa6:	83 c4 20             	add    esp,0x20
c000caa9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cab1:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cabc:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cabf:	7d 50                	jge    c000cb11 <sinc_quad_vari_process+0x310>
c000cac1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cac4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac7:	01 c8                	add    eax,ecx
c000cac9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cacc:	99                   	cdq    
c000cacd:	f7 f9                	idiv   ecx
c000cacf:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cad3:	7d 0c                	jge    c000cae1 <sinc_quad_vari_process+0x2e0>
c000cad5:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad8:	85 ff                	test   edi,edi
c000cada:	79 6c                	jns    c000cb48 <sinc_quad_vari_process+0x347>
c000cadc:	e9 e7 00 00 00       	jmp    c000cbc8 <sinc_quad_vari_process+0x3c7>
c000cae1:	50                   	push   eax
c000cae2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cae6:	56                   	push   esi
c000cae7:	53                   	push   ebx
c000cae8:	e8 11 ee ff ff       	call   c000b8fe <prepare_data>
c000caed:	83 c4 10             	add    esp,0x10
c000caf0:	89 c2                	mov    edx,eax
c000caf2:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caf5:	85 c0                	test   eax,eax
c000caf7:	0f 85 bf 03 00 00    	jne    c000cebc <sinc_quad_vari_process+0x6bb>
c000cafd:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cb00:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cb03:	01 c8                	add    eax,ecx
c000cb05:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb08:	99                   	cdq    
c000cb09:	f7 f9                	idiv   ecx
c000cb0b:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb0f:	7c c4                	jl     c000cad5 <sinc_quad_vari_process+0x2d4>
c000cb11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb19:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb1c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb27:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb2a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb2d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb30:	99                   	cdq    
c000cb31:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb34:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb37:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb3a:	99                   	cdq    
c000cb3b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb3e:	31 d2                	xor    edx,edx
c000cb40:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb43:	e9 74 03 00 00       	jmp    c000cebc <sinc_quad_vari_process+0x6bb>
c000cb48:	83 ec 0c             	sub    esp,0xc
c000cb4b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb4e:	e8 b8 b8 01 00       	call   c002840b <__floatsidf>
c000cb53:	83 c4 10             	add    esp,0x10
c000cb56:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb5a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb6e:	e8 b8 ab 01 00       	call   c002772b <__adddf3>
c000cb73:	83 c4 10             	add    esp,0x10
c000cb76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb7e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb82:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb8e:	e8 98 ab 01 00       	call   c002772b <__adddf3>
c000cb93:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb96:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb9a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb9e:	e8 68 b8 01 00       	call   c002840b <__floatsidf>
c000cba3:	83 c4 10             	add    esp,0x10
c000cba6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbaa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbae:	52                   	push   edx
c000cbaf:	50                   	push   eax
c000cbb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb8:	e8 b8 ba 01 00       	call   c0028675 <__gedf2>
c000cbbd:	83 c4 10             	add    esp,0x10
c000cbc0:	85 c0                	test   eax,eax
c000cbc2:	0f 89 49 ff ff ff    	jns    c000cb11 <sinc_quad_vari_process+0x310>
c000cbc8:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbcc:	0f 8e ef 00 00 00    	jle    c000ccc1 <sinc_quad_vari_process+0x4c0>
c000cbd2:	83 ec 10             	sub    esp,0x10
c000cbd5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbdb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbde:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbe1:	e8 96 b1 01 00       	call   c0027d7c <__subdf3>
c000cbe6:	83 c4 18             	add    esp,0x18
c000cbe9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	e8 18 bc 01 00       	call   c0028810 <fabs>
c000cbf8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbfc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cc00:	83 c4 10             	add    esp,0x10
c000cc03:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc08:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc15:	e8 3f ba 01 00       	call   c0028659 <__gtdf2>
c000cc1a:	83 c4 10             	add    esp,0x10
c000cc1d:	85 c0                	test   eax,eax
c000cc1f:	0f 8e 9c 00 00 00    	jle    c000ccc1 <sinc_quad_vari_process+0x4c0>
c000cc25:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc28:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc2b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc2f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc33:	52                   	push   edx
c000cc34:	50                   	push   eax
c000cc35:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc38:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc3b:	e8 3c b1 01 00       	call   c0027d7c <__subdf3>
c000cc40:	59                   	pop    ecx
c000cc41:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc45:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc49:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc4c:	e8 ba b7 01 00       	call   c002840b <__floatsidf>
c000cc51:	83 c4 10             	add    esp,0x10
c000cc54:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc58:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc5c:	52                   	push   edx
c000cc5d:	50                   	push   eax
c000cc5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc66:	e8 3d b1 01 00       	call   c0027da8 <__muldf3>
c000cc6b:	5f                   	pop    edi
c000cc6c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc70:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc74:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc77:	e8 8f b7 01 00       	call   c002840b <__floatsidf>
c000cc7c:	83 c4 10             	add    esp,0x10
c000cc7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc87:	52                   	push   edx
c000cc88:	50                   	push   eax
c000cc89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc91:	e8 f6 b3 01 00       	call   c002808c <__divdf3>
c000cc96:	83 c4 10             	add    esp,0x10
c000cc99:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc9d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cca1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccb1:	e8 75 aa 01 00       	call   c002772b <__adddf3>
c000ccb6:	83 c4 10             	add    esp,0x10
c000ccb9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccbd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccc1:	83 ec 0c             	sub    esp,0xc
c000ccc4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccc7:	e8 3f b7 01 00       	call   c002840b <__floatsidf>
c000cccc:	83 c4 10             	add    esp,0x10
c000cccf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccd3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce7:	e8 8b b9 01 00       	call   c0028677 <__ltdf2>
c000ccec:	83 c4 10             	add    esp,0x10
c000ccef:	85 c0                	test   eax,eax
c000ccf1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccf5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccfd:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cd01:	78 10                	js     c000cd13 <sinc_quad_vari_process+0x512>
c000cd03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cd07:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd0f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd1b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd23:	e8 80 b0 01 00       	call   c0027da8 <__muldf3>
c000cd28:	59                   	pop    ecx
c000cd29:	5f                   	pop    edi
c000cd2a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd2e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd3a:	e8 98 eb ff ff       	call   c000b8d7 <double_to_fp>
c000cd3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd43:	89 c7                	mov    edi,eax
c000cd45:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd49:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd4d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd51:	e8 52 b0 01 00       	call   c0027da8 <__muldf3>
c000cd56:	83 c4 18             	add    esp,0x18
c000cd59:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd5d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd61:	52                   	push   edx
c000cd62:	50                   	push   eax
c000cd63:	e8 6f eb ff ff       	call   c000b8d7 <double_to_fp>
c000cd68:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd6b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd6f:	83 c4 0c             	add    esp,0xc
c000cd72:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd75:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd78:	50                   	push   eax
c000cd79:	50                   	push   eax
c000cd7a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd7d:	e8 89 b6 01 00       	call   c002840b <__floatsidf>
c000cd82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd9a:	e8 ed b2 01 00       	call   c002808c <__divdf3>
c000cd9f:	83 c4 18             	add    esp,0x18
c000cda2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cda6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdaa:	52                   	push   edx
c000cdab:	89 fa                	mov    edx,edi
c000cdad:	50                   	push   eax
c000cdae:	89 d8                	mov    eax,ebx
c000cdb0:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdb4:	e8 a5 d1 ff ff       	call   c0009f5e <calc_output_quad>
c000cdb9:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdbd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdcd:	e8 ba b2 01 00       	call   c002808c <__divdf3>
c000cdd2:	83 c4 10             	add    esp,0x10
c000cdd5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cddd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cde1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cde5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cded:	e8 39 a9 01 00       	call   c002772b <__adddf3>
c000cdf2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdf6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdfa:	83 c4 18             	add    esp,0x18
c000cdfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce05:	e8 26 ba 01 00       	call   c0028830 <lrint>
c000ce0a:	83 ec 0c             	sub    esp,0xc
c000ce0d:	50                   	push   eax
c000ce0e:	e8 f8 b5 01 00       	call   c002840b <__floatsidf>
c000ce13:	83 c4 10             	add    esp,0x10
c000ce16:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce1a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce1e:	52                   	push   edx
c000ce1f:	50                   	push   eax
c000ce20:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce24:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce28:	e8 4f af 01 00       	call   c0027d7c <__subdf3>
c000ce2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce31:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce35:	83 c4 20             	add    esp,0x20
c000ce38:	6a 00                	push   0x0
c000ce3a:	6a 00                	push   0x0
c000ce3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce44:	e8 2e b8 01 00       	call   c0028677 <__ltdf2>
c000ce49:	83 c4 10             	add    esp,0x10
c000ce4c:	85 c0                	test   eax,eax
c000ce4e:	79 20                	jns    c000ce70 <sinc_quad_vari_process+0x66f>
c000ce50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce60:	e8 c6 a8 01 00       	call   c002772b <__adddf3>
c000ce65:	83 c4 10             	add    esp,0x10
c000ce68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce70:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce73:	83 ec 10             	sub    esp,0x10
c000ce76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce7a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce85:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce89:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce8d:	e8 ea ae 01 00       	call   c0027d7c <__subdf3>
c000ce92:	83 c4 18             	add    esp,0x18
c000ce95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce9d:	52                   	push   edx
c000ce9e:	50                   	push   eax
c000ce9f:	e8 8c b9 01 00       	call   c0028830 <lrint>
c000cea4:	0f af f8             	imul   edi,eax
c000cea7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ceab:	83 c4 10             	add    esp,0x10
c000ceae:	01 f8                	add    eax,edi
c000ceb0:	99                   	cdq    
c000ceb1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceb4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceb7:	e9 fd fb ff ff       	jmp    c000cab9 <sinc_quad_vari_process+0x2b8>
c000cebc:	83 c4 4c             	add    esp,0x4c
c000cebf:	89 d0                	mov    eax,edx
c000cec1:	5b                   	pop    ebx
c000cec2:	5e                   	pop    esi
c000cec3:	5f                   	pop    edi
c000cec4:	5d                   	pop    ebp
c000cec5:	c3                   	ret    

c000cec6 <sinc_stereo_vari_process>:
c000cec6:	55                   	push   ebp
c000cec7:	ba 05 00 00 00       	mov    edx,0x5
c000cecc:	57                   	push   edi
c000cecd:	56                   	push   esi
c000cece:	53                   	push   ebx
c000cecf:	83 ec 4c             	sub    esp,0x4c
c000ced2:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ced6:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ceda:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cedd:	85 db                	test   ebx,ebx
c000cedf:	0f 84 9c 06 00 00    	je     c000d581 <sinc_stereo_vari_process+0x6bb>
c000cee5:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ceeb:	0f af c7             	imul   eax,edi
c000ceee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cef1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cef4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cefb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cf02:	0f af c7             	imul   eax,edi
c000cf05:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf08:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf0b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf16:	68 00 00 70 3f       	push   0x3f700000
c000cf1b:	6a 00                	push   0x0
c000cf1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf25:	e8 4d b7 01 00       	call   c0028677 <__ltdf2>
c000cf2a:	83 c4 10             	add    esp,0x10
c000cf2d:	ba 16 00 00 00       	mov    edx,0x16
c000cf32:	85 c0                	test   eax,eax
c000cf34:	0f 88 47 06 00 00    	js     c000d581 <sinc_stereo_vari_process+0x6bb>
c000cf3a:	68 00 00 70 40       	push   0x40700000
c000cf3f:	6a 00                	push   0x0
c000cf41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf49:	e8 0b b7 01 00       	call   c0028659 <__gtdf2>
c000cf4e:	83 c4 10             	add    esp,0x10
c000cf51:	ba 16 00 00 00       	mov    edx,0x16
c000cf56:	85 c0                	test   eax,eax
c000cf58:	0f 8f 23 06 00 00    	jg     c000d581 <sinc_stereo_vari_process+0x6bb>
c000cf5e:	83 ec 0c             	sub    esp,0xc
c000cf61:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf64:	e8 a2 b4 01 00       	call   c002840b <__floatsidf>
c000cf69:	83 c4 10             	add    esp,0x10
c000cf6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf74:	68 00 00 00 40       	push   0x40000000
c000cf79:	6a 00                	push   0x0
c000cf7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf83:	e8 a3 a7 01 00       	call   c002772b <__adddf3>
c000cf88:	59                   	pop    ecx
c000cf89:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf8d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf91:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf94:	e8 72 b4 01 00       	call   c002840b <__floatsidf>
c000cf99:	83 c4 10             	add    esp,0x10
c000cf9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfa0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfa4:	52                   	push   edx
c000cfa5:	50                   	push   eax
c000cfa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfae:	e8 d9 b0 01 00       	call   c002808c <__divdf3>
c000cfb3:	83 c4 10             	add    esp,0x10
c000cfb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfbe:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfc1:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfc4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfdc:	e8 78 b6 01 00       	call   c0028659 <__gtdf2>
c000cfe1:	83 c4 10             	add    esp,0x10
c000cfe4:	85 c0                	test   eax,eax
c000cfe6:	7e 2d                	jle    c000d015 <sinc_stereo_vari_process+0x14f>
c000cfe8:	68 00 00 f0 3f       	push   0x3ff00000
c000cfed:	6a 00                	push   0x0
c000cfef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff7:	e8 7b b6 01 00       	call   c0028677 <__ltdf2>
c000cffc:	83 c4 10             	add    esp,0x10
c000cfff:	85 c0                	test   eax,eax
c000d001:	79 4d                	jns    c000d050 <sinc_stereo_vari_process+0x18a>
c000d003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d007:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d00b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d00f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d013:	eb 1b                	jmp    c000d030 <sinc_stereo_vari_process+0x16a>
c000d015:	68 00 00 f0 3f       	push   0x3ff00000
c000d01a:	6a 00                	push   0x0
c000d01c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d020:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d024:	e8 4e b6 01 00       	call   c0028677 <__ltdf2>
c000d029:	83 c4 10             	add    esp,0x10
c000d02c:	85 c0                	test   eax,eax
c000d02e:	79 20                	jns    c000d050 <sinc_stereo_vari_process+0x18a>
c000d030:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d034:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d038:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d040:	e8 47 b0 01 00       	call   c002808c <__divdf3>
c000d045:	83 c4 10             	add    esp,0x10
c000d048:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d04c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d050:	50                   	push   eax
c000d051:	50                   	push   eax
c000d052:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d056:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d05a:	e8 d1 b7 01 00       	call   c0028830 <lrint>
c000d05f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d062:	40                   	inc    eax
c000d063:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d067:	0f af c7             	imul   eax,edi
c000d06a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d06e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d071:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d075:	58                   	pop    eax
c000d076:	5a                   	pop    edx
c000d077:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d07b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d07f:	e8 ac b7 01 00       	call   c0028830 <lrint>
c000d084:	83 ec 0c             	sub    esp,0xc
c000d087:	50                   	push   eax
c000d088:	e8 7e b3 01 00       	call   c002840b <__floatsidf>
c000d08d:	83 c4 10             	add    esp,0x10
c000d090:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d094:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d098:	52                   	push   edx
c000d099:	50                   	push   eax
c000d09a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0a2:	e8 d5 ac 01 00       	call   c0027d7c <__subdf3>
c000d0a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0ab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0af:	83 c4 20             	add    esp,0x20
c000d0b2:	6a 00                	push   0x0
c000d0b4:	6a 00                	push   0x0
c000d0b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0be:	e8 b4 b5 01 00       	call   c0028677 <__ltdf2>
c000d0c3:	83 c4 10             	add    esp,0x10
c000d0c6:	85 c0                	test   eax,eax
c000d0c8:	79 1f                	jns    c000d0e9 <sinc_stereo_vari_process+0x223>
c000d0ca:	68 00 00 f0 3f       	push   0x3ff00000
c000d0cf:	6a 00                	push   0x0
c000d0d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d9:	e8 4d a6 01 00       	call   c002772b <__adddf3>
c000d0de:	83 c4 10             	add    esp,0x10
c000d0e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0ec:	83 ec 10             	sub    esp,0x10
c000d0ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0f3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d102:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d106:	e8 71 ac 01 00       	call   c0027d7c <__subdf3>
c000d10b:	83 c4 18             	add    esp,0x18
c000d10e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d112:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d116:	52                   	push   edx
c000d117:	50                   	push   eax
c000d118:	e8 13 b7 01 00       	call   c0028830 <lrint>
c000d11d:	0f af f8             	imul   edi,eax
c000d120:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d124:	01 f8                	add    eax,edi
c000d126:	99                   	cdq    
c000d127:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d12a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d12d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d131:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d135:	68 00 00 f0 3f       	push   0x3ff00000
c000d13a:	6a 00                	push   0x0
c000d13c:	e8 4b af 01 00       	call   c002808c <__divdf3>
c000d141:	83 c4 10             	add    esp,0x10
c000d144:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d148:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d14c:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d151:	68 23 42 92 0c       	push   0xc924223
c000d156:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d15a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d15e:	e8 c8 a5 01 00       	call   c002772b <__adddf3>
c000d163:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d167:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d16b:	83 c4 20             	add    esp,0x20
c000d16e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d176:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d17e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d181:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d184:	7d 50                	jge    c000d1d6 <sinc_stereo_vari_process+0x310>
c000d186:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d189:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d18c:	01 c8                	add    eax,ecx
c000d18e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d191:	99                   	cdq    
c000d192:	f7 f9                	idiv   ecx
c000d194:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d198:	7d 0c                	jge    c000d1a6 <sinc_stereo_vari_process+0x2e0>
c000d19a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d19d:	85 ff                	test   edi,edi
c000d19f:	79 6c                	jns    c000d20d <sinc_stereo_vari_process+0x347>
c000d1a1:	e9 e7 00 00 00       	jmp    c000d28d <sinc_stereo_vari_process+0x3c7>
c000d1a6:	50                   	push   eax
c000d1a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ab:	56                   	push   esi
c000d1ac:	53                   	push   ebx
c000d1ad:	e8 4c e7 ff ff       	call   c000b8fe <prepare_data>
c000d1b2:	83 c4 10             	add    esp,0x10
c000d1b5:	89 c2                	mov    edx,eax
c000d1b7:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1ba:	85 c0                	test   eax,eax
c000d1bc:	0f 85 bf 03 00 00    	jne    c000d581 <sinc_stereo_vari_process+0x6bb>
c000d1c2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1c5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c8:	01 c8                	add    eax,ecx
c000d1ca:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1cd:	99                   	cdq    
c000d1ce:	f7 f9                	idiv   ecx
c000d1d0:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1d4:	7c c4                	jl     c000d19a <sinc_stereo_vari_process+0x2d4>
c000d1d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1de:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1e1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1ec:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ef:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1f2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1f5:	99                   	cdq    
c000d1f6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1ff:	99                   	cdq    
c000d200:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d203:	31 d2                	xor    edx,edx
c000d205:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d208:	e9 74 03 00 00       	jmp    c000d581 <sinc_stereo_vari_process+0x6bb>
c000d20d:	83 ec 0c             	sub    esp,0xc
c000d210:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d213:	e8 f3 b1 01 00       	call   c002840b <__floatsidf>
c000d218:	83 c4 10             	add    esp,0x10
c000d21b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d21f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d223:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d227:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d22b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d233:	e8 f3 a4 01 00       	call   c002772b <__adddf3>
c000d238:	83 c4 10             	add    esp,0x10
c000d23b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d23f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d243:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d247:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d24b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d253:	e8 d3 a4 01 00       	call   c002772b <__adddf3>
c000d258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d25b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d25f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d263:	e8 a3 b1 01 00       	call   c002840b <__floatsidf>
c000d268:	83 c4 10             	add    esp,0x10
c000d26b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d26f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d273:	52                   	push   edx
c000d274:	50                   	push   eax
c000d275:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d279:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d27d:	e8 f3 b3 01 00       	call   c0028675 <__gedf2>
c000d282:	83 c4 10             	add    esp,0x10
c000d285:	85 c0                	test   eax,eax
c000d287:	0f 89 49 ff ff ff    	jns    c000d1d6 <sinc_stereo_vari_process+0x310>
c000d28d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d291:	0f 8e ef 00 00 00    	jle    c000d386 <sinc_stereo_vari_process+0x4c0>
c000d297:	83 ec 10             	sub    esp,0x10
c000d29a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d29d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2a0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d2a3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d2a6:	e8 d1 aa 01 00       	call   c0027d7c <__subdf3>
c000d2ab:	83 c4 18             	add    esp,0x18
c000d2ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	e8 53 b5 01 00       	call   c0028810 <fabs>
c000d2bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2c1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2c5:	83 c4 10             	add    esp,0x10
c000d2c8:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2cd:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2da:	e8 7a b3 01 00       	call   c0028659 <__gtdf2>
c000d2df:	83 c4 10             	add    esp,0x10
c000d2e2:	85 c0                	test   eax,eax
c000d2e4:	0f 8e 9c 00 00 00    	jle    c000d386 <sinc_stereo_vari_process+0x4c0>
c000d2ea:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ed:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f8:	52                   	push   edx
c000d2f9:	50                   	push   eax
c000d2fa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2fd:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d300:	e8 77 aa 01 00       	call   c0027d7c <__subdf3>
c000d305:	59                   	pop    ecx
c000d306:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d30a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d30e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d311:	e8 f5 b0 01 00       	call   c002840b <__floatsidf>
c000d316:	83 c4 10             	add    esp,0x10
c000d319:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d31d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d321:	52                   	push   edx
c000d322:	50                   	push   eax
c000d323:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d327:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d32b:	e8 78 aa 01 00       	call   c0027da8 <__muldf3>
c000d330:	5f                   	pop    edi
c000d331:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d335:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d339:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d33c:	e8 ca b0 01 00       	call   c002840b <__floatsidf>
c000d341:	83 c4 10             	add    esp,0x10
c000d344:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d348:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d34c:	52                   	push   edx
c000d34d:	50                   	push   eax
c000d34e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d352:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d356:	e8 31 ad 01 00       	call   c002808c <__divdf3>
c000d35b:	83 c4 10             	add    esp,0x10
c000d35e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d362:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d366:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d36a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d36e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d372:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d376:	e8 b0 a3 01 00       	call   c002772b <__adddf3>
c000d37b:	83 c4 10             	add    esp,0x10
c000d37e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d382:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d386:	83 ec 0c             	sub    esp,0xc
c000d389:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d38c:	e8 7a b0 01 00       	call   c002840b <__floatsidf>
c000d391:	83 c4 10             	add    esp,0x10
c000d394:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d398:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ac:	e8 c6 b2 01 00       	call   c0028677 <__ltdf2>
c000d3b1:	83 c4 10             	add    esp,0x10
c000d3b4:	85 c0                	test   eax,eax
c000d3b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3ba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3be:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3c2:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3c6:	78 10                	js     c000d3d8 <sinc_stereo_vari_process+0x512>
c000d3c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3d4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e8:	e8 bb a9 01 00       	call   c0027da8 <__muldf3>
c000d3ed:	59                   	pop    ecx
c000d3ee:	5f                   	pop    edi
c000d3ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3ff:	e8 d3 e4 ff ff       	call   c000b8d7 <double_to_fp>
c000d404:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d408:	89 c7                	mov    edi,eax
c000d40a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d40e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d416:	e8 8d a9 01 00       	call   c0027da8 <__muldf3>
c000d41b:	83 c4 18             	add    esp,0x18
c000d41e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d422:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d426:	52                   	push   edx
c000d427:	50                   	push   eax
c000d428:	e8 aa e4 ff ff       	call   c000b8d7 <double_to_fp>
c000d42d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d430:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d434:	83 c4 0c             	add    esp,0xc
c000d437:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d43a:	8d 04 90             	lea    eax,[eax+edx*4]
c000d43d:	50                   	push   eax
c000d43e:	50                   	push   eax
c000d43f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d442:	e8 c4 af 01 00       	call   c002840b <__floatsidf>
c000d447:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d44b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d45b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d45f:	e8 28 ac 01 00       	call   c002808c <__divdf3>
c000d464:	83 c4 18             	add    esp,0x18
c000d467:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d46b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d46f:	52                   	push   edx
c000d470:	89 fa                	mov    edx,edi
c000d472:	50                   	push   eax
c000d473:	89 d8                	mov    eax,ebx
c000d475:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d479:	e8 02 c7 ff ff       	call   c0009b80 <calc_output_stereo>
c000d47e:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d482:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d486:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d48a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d492:	e8 f5 ab 01 00       	call   c002808c <__divdf3>
c000d497:	83 c4 10             	add    esp,0x10
c000d49a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d49e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d4a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4b2:	e8 74 a2 01 00       	call   c002772b <__adddf3>
c000d4b7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4bb:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4bf:	83 c4 18             	add    esp,0x18
c000d4c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ca:	e8 61 b3 01 00       	call   c0028830 <lrint>
c000d4cf:	83 ec 0c             	sub    esp,0xc
c000d4d2:	50                   	push   eax
c000d4d3:	e8 33 af 01 00       	call   c002840b <__floatsidf>
c000d4d8:	83 c4 10             	add    esp,0x10
c000d4db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4df:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4e3:	52                   	push   edx
c000d4e4:	50                   	push   eax
c000d4e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ed:	e8 8a a8 01 00       	call   c0027d7c <__subdf3>
c000d4f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4fa:	83 c4 20             	add    esp,0x20
c000d4fd:	6a 00                	push   0x0
c000d4ff:	6a 00                	push   0x0
c000d501:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d505:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d509:	e8 69 b1 01 00       	call   c0028677 <__ltdf2>
c000d50e:	83 c4 10             	add    esp,0x10
c000d511:	85 c0                	test   eax,eax
c000d513:	79 20                	jns    c000d535 <sinc_stereo_vari_process+0x66f>
c000d515:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d519:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d525:	e8 01 a2 01 00       	call   c002772b <__adddf3>
c000d52a:	83 c4 10             	add    esp,0x10
c000d52d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d531:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d535:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d538:	83 ec 10             	sub    esp,0x10
c000d53b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d53f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d546:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d54a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d552:	e8 25 a8 01 00       	call   c0027d7c <__subdf3>
c000d557:	83 c4 18             	add    esp,0x18
c000d55a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d55e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d562:	52                   	push   edx
c000d563:	50                   	push   eax
c000d564:	e8 c7 b2 01 00       	call   c0028830 <lrint>
c000d569:	0f af f8             	imul   edi,eax
c000d56c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d570:	83 c4 10             	add    esp,0x10
c000d573:	01 f8                	add    eax,edi
c000d575:	99                   	cdq    
c000d576:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d579:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d57c:	e9 fd fb ff ff       	jmp    c000d17e <sinc_stereo_vari_process+0x2b8>
c000d581:	83 c4 4c             	add    esp,0x4c
c000d584:	89 d0                	mov    eax,edx
c000d586:	5b                   	pop    ebx
c000d587:	5e                   	pop    esi
c000d588:	5f                   	pop    edi
c000d589:	5d                   	pop    ebp
c000d58a:	c3                   	ret    

c000d58b <sinc_mono_vari_process>:
c000d58b:	55                   	push   ebp
c000d58c:	ba 05 00 00 00       	mov    edx,0x5
c000d591:	57                   	push   edi
c000d592:	56                   	push   esi
c000d593:	53                   	push   ebx
c000d594:	83 ec 4c             	sub    esp,0x4c
c000d597:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d59b:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d59f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d5a2:	85 db                	test   ebx,ebx
c000d5a4:	0f 84 c1 06 00 00    	je     c000dc6b <sinc_mono_vari_process+0x6e0>
c000d5aa:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5b0:	0f af c7             	imul   eax,edi
c000d5b3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5b6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5c0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5c7:	0f af c7             	imul   eax,edi
c000d5ca:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5cd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5d1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5d6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5de:	68 00 00 70 3f       	push   0x3f700000
c000d5e3:	6a 00                	push   0x0
c000d5e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ed:	e8 85 b0 01 00       	call   c0028677 <__ltdf2>
c000d5f2:	83 c4 10             	add    esp,0x10
c000d5f5:	ba 16 00 00 00       	mov    edx,0x16
c000d5fa:	85 c0                	test   eax,eax
c000d5fc:	0f 88 69 06 00 00    	js     c000dc6b <sinc_mono_vari_process+0x6e0>
c000d602:	68 00 00 70 40       	push   0x40700000
c000d607:	6a 00                	push   0x0
c000d609:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d60d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d611:	e8 43 b0 01 00       	call   c0028659 <__gtdf2>
c000d616:	83 c4 10             	add    esp,0x10
c000d619:	ba 16 00 00 00       	mov    edx,0x16
c000d61e:	85 c0                	test   eax,eax
c000d620:	0f 8f 45 06 00 00    	jg     c000dc6b <sinc_mono_vari_process+0x6e0>
c000d626:	83 ec 0c             	sub    esp,0xc
c000d629:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d62c:	e8 da ad 01 00       	call   c002840b <__floatsidf>
c000d631:	83 c4 10             	add    esp,0x10
c000d634:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d638:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d63c:	68 00 00 00 40       	push   0x40000000
c000d641:	6a 00                	push   0x0
c000d643:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d647:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d64b:	e8 db a0 01 00       	call   c002772b <__adddf3>
c000d650:	59                   	pop    ecx
c000d651:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d655:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d659:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d65c:	e8 aa ad 01 00       	call   c002840b <__floatsidf>
c000d661:	83 c4 10             	add    esp,0x10
c000d664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d668:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d66c:	52                   	push   edx
c000d66d:	50                   	push   eax
c000d66e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d672:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d676:	e8 11 aa 01 00       	call   c002808c <__divdf3>
c000d67b:	83 c4 10             	add    esp,0x10
c000d67e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d682:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d686:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d689:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d68c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a4:	e8 b0 af 01 00       	call   c0028659 <__gtdf2>
c000d6a9:	83 c4 10             	add    esp,0x10
c000d6ac:	85 c0                	test   eax,eax
c000d6ae:	7e 2d                	jle    c000d6dd <sinc_mono_vari_process+0x152>
c000d6b0:	68 00 00 f0 3f       	push   0x3ff00000
c000d6b5:	6a 00                	push   0x0
c000d6b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6bf:	e8 b3 af 01 00       	call   c0028677 <__ltdf2>
c000d6c4:	83 c4 10             	add    esp,0x10
c000d6c7:	85 c0                	test   eax,eax
c000d6c9:	79 4d                	jns    c000d718 <sinc_mono_vari_process+0x18d>
c000d6cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6db:	eb 1b                	jmp    c000d6f8 <sinc_mono_vari_process+0x16d>
c000d6dd:	68 00 00 f0 3f       	push   0x3ff00000
c000d6e2:	6a 00                	push   0x0
c000d6e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6ec:	e8 86 af 01 00       	call   c0028677 <__ltdf2>
c000d6f1:	83 c4 10             	add    esp,0x10
c000d6f4:	85 c0                	test   eax,eax
c000d6f6:	79 20                	jns    c000d718 <sinc_mono_vari_process+0x18d>
c000d6f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6fc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d700:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d704:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d708:	e8 7f a9 01 00       	call   c002808c <__divdf3>
c000d70d:	83 c4 10             	add    esp,0x10
c000d710:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d714:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d718:	50                   	push   eax
c000d719:	50                   	push   eax
c000d71a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d722:	e8 09 b1 01 00       	call   c0028830 <lrint>
c000d727:	40                   	inc    eax
c000d728:	0f af c7             	imul   eax,edi
c000d72b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d72f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d733:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d736:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d739:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d73d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d741:	58                   	pop    eax
c000d742:	5a                   	pop    edx
c000d743:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d747:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d74b:	e8 e0 b0 01 00       	call   c0028830 <lrint>
c000d750:	83 ec 0c             	sub    esp,0xc
c000d753:	50                   	push   eax
c000d754:	e8 b2 ac 01 00       	call   c002840b <__floatsidf>
c000d759:	83 c4 10             	add    esp,0x10
c000d75c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d760:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d764:	52                   	push   edx
c000d765:	50                   	push   eax
c000d766:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d76a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d76e:	e8 09 a6 01 00       	call   c0027d7c <__subdf3>
c000d773:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d777:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d77b:	83 c4 20             	add    esp,0x20
c000d77e:	6a 00                	push   0x0
c000d780:	6a 00                	push   0x0
c000d782:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d786:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d78a:	e8 e8 ae 01 00       	call   c0028677 <__ltdf2>
c000d78f:	83 c4 10             	add    esp,0x10
c000d792:	85 c0                	test   eax,eax
c000d794:	79 1f                	jns    c000d7b5 <sinc_mono_vari_process+0x22a>
c000d796:	68 00 00 f0 3f       	push   0x3ff00000
c000d79b:	6a 00                	push   0x0
c000d79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7a5:	e8 81 9f 01 00       	call   c002772b <__adddf3>
c000d7aa:	83 c4 10             	add    esp,0x10
c000d7ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7b5:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7bb:	83 ec 10             	sub    esp,0x10
c000d7be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ce:	e8 a9 a5 01 00       	call   c0027d7c <__subdf3>
c000d7d3:	83 c4 18             	add    esp,0x18
c000d7d6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7da:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7de:	52                   	push   edx
c000d7df:	50                   	push   eax
c000d7e0:	e8 4b b0 01 00       	call   c0028830 <lrint>
c000d7e5:	0f af f8             	imul   edi,eax
c000d7e8:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7eb:	31 ff                	xor    edi,edi
c000d7ed:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7f2:	99                   	cdq    
c000d7f3:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7f6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d801:	55                   	push   ebp
c000d802:	57                   	push   edi
c000d803:	e8 84 a8 01 00       	call   c002808c <__divdf3>
c000d808:	83 c4 10             	add    esp,0x10
c000d80b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d80f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d813:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d818:	68 23 42 92 0c       	push   0xc924223
c000d81d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d821:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d825:	e8 01 9f 01 00       	call   c002772b <__adddf3>
c000d82a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d82e:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d832:	83 c4 20             	add    esp,0x20
c000d835:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d839:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d83d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d840:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d843:	7d 54                	jge    c000d899 <sinc_mono_vari_process+0x30e>
c000d845:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d848:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d84b:	01 c8                	add    eax,ecx
c000d84d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d850:	99                   	cdq    
c000d851:	f7 f9                	idiv   ecx
c000d853:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d857:	7d 0c                	jge    c000d865 <sinc_mono_vari_process+0x2da>
c000d859:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d85c:	85 ff                	test   edi,edi
c000d85e:	79 73                	jns    c000d8d3 <sinc_mono_vari_process+0x348>
c000d860:	e9 ee 00 00 00       	jmp    c000d953 <sinc_mono_vari_process+0x3c8>
c000d865:	50                   	push   eax
c000d866:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d86a:	56                   	push   esi
c000d86b:	53                   	push   ebx
c000d86c:	e8 8d e0 ff ff       	call   c000b8fe <prepare_data>
c000d871:	89 c2                	mov    edx,eax
c000d873:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d877:	83 c4 10             	add    esp,0x10
c000d87a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d87d:	85 d2                	test   edx,edx
c000d87f:	0f 85 e6 03 00 00    	jne    c000dc6b <sinc_mono_vari_process+0x6e0>
c000d885:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d888:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d88b:	01 c8                	add    eax,ecx
c000d88d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d890:	99                   	cdq    
c000d891:	f7 f9                	idiv   ecx
c000d893:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d897:	7c c0                	jl     c000d859 <sinc_mono_vari_process+0x2ce>
c000d899:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d89d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d8a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d8a5:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8b3:	89 01                	mov    DWORD PTR [ecx],eax
c000d8b5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8bb:	99                   	cdq    
c000d8bc:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8bf:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8c2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8c5:	99                   	cdq    
c000d8c6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c9:	31 d2                	xor    edx,edx
c000d8cb:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8ce:	e9 98 03 00 00       	jmp    c000dc6b <sinc_mono_vari_process+0x6e0>
c000d8d3:	83 ec 0c             	sub    esp,0xc
c000d8d6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d9:	e8 2d ab 01 00       	call   c002840b <__floatsidf>
c000d8de:	83 c4 10             	add    esp,0x10
c000d8e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f9:	e8 2d 9e 01 00       	call   c002772b <__adddf3>
c000d8fe:	83 c4 10             	add    esp,0x10
c000d901:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d905:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d909:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d90d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d911:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d915:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d919:	e8 0d 9e 01 00       	call   c002772b <__adddf3>
c000d91e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d921:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d925:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d929:	e8 dd aa 01 00       	call   c002840b <__floatsidf>
c000d92e:	83 c4 10             	add    esp,0x10
c000d931:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d935:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d939:	52                   	push   edx
c000d93a:	50                   	push   eax
c000d93b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d943:	e8 11 ad 01 00       	call   c0028659 <__gtdf2>
c000d948:	83 c4 10             	add    esp,0x10
c000d94b:	85 c0                	test   eax,eax
c000d94d:	0f 8f 46 ff ff ff    	jg     c000d899 <sinc_mono_vari_process+0x30e>
c000d953:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d957:	0f 8e f5 00 00 00    	jle    c000da52 <sinc_mono_vari_process+0x4c7>
c000d95d:	83 ec 10             	sub    esp,0x10
c000d960:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d963:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d966:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d96a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d96d:	ff 30                	push   DWORD PTR [eax]
c000d96f:	e8 08 a4 01 00       	call   c0027d7c <__subdf3>
c000d974:	83 c4 18             	add    esp,0x18
c000d977:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d97b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d97f:	52                   	push   edx
c000d980:	50                   	push   eax
c000d981:	e8 8a ae 01 00       	call   c0028810 <fabs>
c000d986:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d98a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d98e:	83 c4 10             	add    esp,0x10
c000d991:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d996:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d99b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9a3:	e8 b1 ac 01 00       	call   c0028659 <__gtdf2>
c000d9a8:	83 c4 10             	add    esp,0x10
c000d9ab:	85 c0                	test   eax,eax
c000d9ad:	0f 8e 9f 00 00 00    	jle    c000da52 <sinc_mono_vari_process+0x4c7>
c000d9b3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9b7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9ba:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9c4:	52                   	push   edx
c000d9c5:	50                   	push   eax
c000d9c6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9cc:	e8 ab a3 01 00       	call   c0027d7c <__subdf3>
c000d9d1:	5f                   	pop    edi
c000d9d2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9d6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9da:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9dd:	e8 29 aa 01 00       	call   c002840b <__floatsidf>
c000d9e2:	83 c4 10             	add    esp,0x10
c000d9e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ed:	52                   	push   edx
c000d9ee:	50                   	push   eax
c000d9ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9f7:	e8 ac a3 01 00       	call   c0027da8 <__muldf3>
c000d9fc:	5d                   	pop    ebp
c000d9fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000da01:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000da05:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da08:	e8 fe a9 01 00       	call   c002840b <__floatsidf>
c000da0d:	83 c4 10             	add    esp,0x10
c000da10:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da14:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da18:	52                   	push   edx
c000da19:	50                   	push   eax
c000da1a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da22:	e8 65 a6 01 00       	call   c002808c <__divdf3>
c000da27:	83 c4 10             	add    esp,0x10
c000da2a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da2e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da32:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da42:	e8 e4 9c 01 00       	call   c002772b <__adddf3>
c000da47:	83 c4 10             	add    esp,0x10
c000da4a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da4e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da52:	83 ec 0c             	sub    esp,0xc
c000da55:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da58:	e8 ae a9 01 00       	call   c002840b <__floatsidf>
c000da5d:	83 c4 10             	add    esp,0x10
c000da60:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da64:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da78:	e8 fa ab 01 00       	call   c0028677 <__ltdf2>
c000da7d:	83 c4 10             	add    esp,0x10
c000da80:	85 c0                	test   eax,eax
c000da82:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da86:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da8a:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da8e:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da92:	78 10                	js     c000daa4 <sinc_mono_vari_process+0x519>
c000da94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da98:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000daa0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000daa4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dab0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dab4:	e8 ef a2 01 00       	call   c0027da8 <__muldf3>
c000dab9:	59                   	pop    ecx
c000daba:	5f                   	pop    edi
c000dabb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dabf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dac3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dacb:	e8 07 de ff ff       	call   c000b8d7 <double_to_fp>
c000dad0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad4:	89 c7                	mov    edi,eax
c000dad6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dada:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dade:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dae2:	e8 c1 a2 01 00       	call   c0027da8 <__muldf3>
c000dae7:	83 c4 18             	add    esp,0x18
c000daea:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daf2:	52                   	push   edx
c000daf3:	50                   	push   eax
c000daf4:	e8 de dd ff ff       	call   c000b8d7 <double_to_fp>
c000daf9:	83 ec 0c             	sub    esp,0xc
c000dafc:	89 c5                	mov    ebp,eax
c000dafe:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db01:	e8 05 a9 01 00       	call   c002840b <__floatsidf>
c000db06:	83 c4 10             	add    esp,0x10
c000db09:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db0d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db11:	52                   	push   edx
c000db12:	50                   	push   eax
c000db13:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db17:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1b:	e8 6c a5 01 00       	call   c002808c <__divdf3>
c000db20:	83 c4 10             	add    esp,0x10
c000db23:	89 e9                	mov    ecx,ebp
c000db25:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db29:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db2d:	89 d8                	mov    eax,ebx
c000db2f:	89 fa                	mov    edx,edi
c000db31:	e8 ee bd ff ff       	call   c0009924 <calc_output_single>
c000db36:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db39:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db3c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db40:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db44:	52                   	push   edx
c000db45:	50                   	push   eax
c000db46:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db4a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db4e:	e8 55 a2 01 00       	call   c0027da8 <__muldf3>
c000db53:	59                   	pop    ecx
c000db54:	59                   	pop    ecx
c000db55:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db59:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db65:	e8 11 ab 01 00       	call   c002867b <__truncdfsf2>
c000db6a:	83 c4 10             	add    esp,0x10
c000db6d:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db70:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db73:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db77:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db83:	e8 04 a5 01 00       	call   c002808c <__divdf3>
c000db88:	83 c4 10             	add    esp,0x10
c000db8b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db8f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db9b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dba3:	e8 83 9b 01 00       	call   c002772b <__adddf3>
c000dba8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dbac:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dbb0:	83 c4 18             	add    esp,0x18
c000dbb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbbb:	e8 70 ac 01 00       	call   c0028830 <lrint>
c000dbc0:	83 ec 0c             	sub    esp,0xc
c000dbc3:	50                   	push   eax
c000dbc4:	e8 42 a8 01 00       	call   c002840b <__floatsidf>
c000dbc9:	83 c4 10             	add    esp,0x10
c000dbcc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbd4:	52                   	push   edx
c000dbd5:	50                   	push   eax
c000dbd6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbde:	e8 99 a1 01 00       	call   c0027d7c <__subdf3>
c000dbe3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbe7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbeb:	83 c4 20             	add    esp,0x20
c000dbee:	6a 00                	push   0x0
c000dbf0:	6a 00                	push   0x0
c000dbf2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbfa:	e8 78 aa 01 00       	call   c0028677 <__ltdf2>
c000dbff:	83 c4 10             	add    esp,0x10
c000dc02:	85 c0                	test   eax,eax
c000dc04:	79 20                	jns    c000dc26 <sinc_mono_vari_process+0x69b>
c000dc06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc16:	e8 10 9b 01 00       	call   c002772b <__adddf3>
c000dc1b:	83 c4 10             	add    esp,0x10
c000dc1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc26:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc29:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc2c:	83 ec 10             	sub    esp,0x10
c000dc2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc37:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc3b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc3f:	e8 38 a1 01 00       	call   c0027d7c <__subdf3>
c000dc44:	83 c4 18             	add    esp,0x18
c000dc47:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc4b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc4f:	52                   	push   edx
c000dc50:	50                   	push   eax
c000dc51:	e8 da ab 01 00       	call   c0028830 <lrint>
c000dc56:	83 c4 10             	add    esp,0x10
c000dc59:	0f af f8             	imul   edi,eax
c000dc5c:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc5f:	99                   	cdq    
c000dc60:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc63:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc66:	e9 d2 fb ff ff       	jmp    c000d83d <sinc_mono_vari_process+0x2b2>
c000dc6b:	83 c4 4c             	add    esp,0x4c
c000dc6e:	89 d0                	mov    eax,edx
c000dc70:	5b                   	pop    ebx
c000dc71:	5e                   	pop    esi
c000dc72:	5f                   	pop    edi
c000dc73:	5d                   	pop    ebp
c000dc74:	c3                   	ret    

c000dc75 <sinc_get_name>:
c000dc75:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc79:	31 c0                	xor    eax,eax
c000dc7b:	83 fa 02             	cmp    edx,0x2
c000dc7e:	77 07                	ja     c000dc87 <sinc_get_name+0x12>
c000dc80:	8b 04 95 24 a0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5fdc]
c000dc87:	c3                   	ret    

c000dc88 <sinc_get_description>:
c000dc88:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc8c:	31 c0                	xor    eax,eax
c000dc8e:	83 fa 02             	cmp    edx,0x2
c000dc91:	77 07                	ja     c000dc9a <sinc_get_description+0x12>
c000dc93:	8b 04 95 18 a0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5fe8]
c000dc9a:	c3                   	ret    

c000dc9b <sinc_set_converter>:
c000dc9b:	53                   	push   ebx
c000dc9c:	81 ec 58 08 00 00    	sub    esp,0x858
c000dca2:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dcac:	85 c0                	test   eax,eax
c000dcae:	74 13                	je     c000dcc3 <sinc_set_converter+0x28>
c000dcb0:	83 ec 0c             	sub    esp,0xc
c000dcb3:	50                   	push   eax
c000dcb4:	e8 a2 1b 00 00       	call   c000f85b <free>
c000dcb9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcc0:	83 c4 10             	add    esp,0x10
c000dcc3:	50                   	push   eax
c000dcc4:	68 44 08 00 00       	push   0x844
c000dcc9:	6a 00                	push   0x0
c000dccb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dccf:	50                   	push   eax
c000dcd0:	e8 ab 2a ff ff       	call   c0000780 <memset>
c000dcd5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd8:	83 c4 10             	add    esp,0x10
c000dcdb:	b8 0b 00 00 00       	mov    eax,0xb
c000dce0:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dce6:	7f 6e                	jg     c000dd56 <sinc_set_converter+0xbb>
c000dce8:	83 fa 01             	cmp    edx,0x1
c000dceb:	75 10                	jne    c000dcfd <sinc_set_converter+0x62>
c000dced:	c7 43 24 8b d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d58b
c000dcf4:	c7 43 20 8b d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d58b
c000dcfb:	eb 4d                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dcfd:	83 fa 02             	cmp    edx,0x2
c000dd00:	75 10                	jne    c000dd12 <sinc_set_converter+0x77>
c000dd02:	c7 43 24 c6 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cec6
c000dd09:	c7 43 20 c6 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cec6
c000dd10:	eb 38                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dd12:	83 fa 04             	cmp    edx,0x4
c000dd15:	75 10                	jne    c000dd27 <sinc_set_converter+0x8c>
c000dd17:	c7 43 24 01 c8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c801
c000dd1e:	c7 43 20 01 c8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c801
c000dd25:	eb 23                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dd27:	83 fa 06             	cmp    edx,0x6
c000dd2a:	75 10                	jne    c000dd3c <sinc_set_converter+0xa1>
c000dd2c:	c7 43 24 3c c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c13c
c000dd33:	c7 43 20 3c c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c13c
c000dd3a:	eb 0e                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dd3c:	c7 43 24 78 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba78
c000dd43:	c7 43 20 78 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba78
c000dd4a:	c7 43 28 2b ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad2b
c000dd51:	b8 0a 00 00 00       	mov    eax,0xa
c000dd56:	81 c4 58 08 00 00    	add    esp,0x858
c000dd5c:	5b                   	pop    ebx
c000dd5d:	c3                   	ret    

c000dd5e <zoh_vari_process>:
c000dd5e:	55                   	push   ebp
c000dd5f:	31 d2                	xor    edx,edx
c000dd61:	57                   	push   edi
c000dd62:	56                   	push   esi
c000dd63:	53                   	push   ebx
c000dd64:	83 ec 3c             	sub    esp,0x3c
c000dd67:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd6b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd6f:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd73:	0f 8e 80 06 00 00    	jle    c000e3f9 <zoh_vari_process+0x69b>
c000dd79:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd7c:	ba 05 00 00 00       	mov    edx,0x5
c000dd81:	85 db                	test   ebx,ebx
c000dd83:	0f 84 70 06 00 00    	je     c000e3f9 <zoh_vari_process+0x69b>
c000dd89:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd8c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd90:	74 19                	je     c000ddab <zoh_vari_process+0x4d>
c000dd92:	31 d2                	xor    edx,edx
c000dd94:	39 c2                	cmp    edx,eax
c000dd96:	7d 0c                	jge    c000dda4 <zoh_vari_process+0x46>
c000dd98:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd9a:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd9d:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dda1:	42                   	inc    edx
c000dda2:	eb f0                	jmp    c000dd94 <zoh_vari_process+0x36>
c000dda4:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ddab:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ddae:	0f af d0             	imul   edx,eax
c000ddb1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddb4:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb8:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddbf:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddc2:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc9:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddcc:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddd2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddd6:	68 00 00 70 3f       	push   0x3f700000
c000dddb:	6a 00                	push   0x0
c000dddd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dde1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dde5:	e8 8d a8 01 00       	call   c0028677 <__ltdf2>
c000ddea:	83 c4 10             	add    esp,0x10
c000dded:	ba 16 00 00 00       	mov    edx,0x16
c000ddf2:	85 c0                	test   eax,eax
c000ddf4:	0f 88 ff 05 00 00    	js     c000e3f9 <zoh_vari_process+0x69b>
c000ddfa:	68 00 00 70 40       	push   0x40700000
c000ddff:	6a 00                	push   0x0
c000de01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de09:	e8 4b a8 01 00       	call   c0028659 <__gtdf2>
c000de0e:	83 c4 10             	add    esp,0x10
c000de11:	ba 16 00 00 00       	mov    edx,0x16
c000de16:	85 c0                	test   eax,eax
c000de18:	0f 8f db 05 00 00    	jg     c000e3f9 <zoh_vari_process+0x69b>
c000de1e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de21:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de2c:	68 00 00 f0 3f       	push   0x3ff00000
c000de31:	6a 00                	push   0x0
c000de33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de3b:	e8 37 a8 01 00       	call   c0028677 <__ltdf2>
c000de40:	83 c4 10             	add    esp,0x10
c000de43:	85 c0                	test   eax,eax
c000de45:	0f 89 da 01 00 00    	jns    c000e025 <zoh_vari_process+0x2c7>
c000de4b:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de4e:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de51:	0f 8d ce 01 00 00    	jge    c000e025 <zoh_vari_process+0x2c7>
c000de57:	83 ec 0c             	sub    esp,0xc
c000de5a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de5d:	e8 a9 a5 01 00       	call   c002840b <__floatsidf>
c000de62:	83 c4 10             	add    esp,0x10
c000de65:	89 04 24             	mov    DWORD PTR [esp],eax
c000de68:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de74:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de78:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de7c:	e8 27 9f 01 00       	call   c0027da8 <__muldf3>
c000de81:	59                   	pop    ecx
c000de82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de86:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de8a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de8d:	e8 79 a5 01 00       	call   c002840b <__floatsidf>
c000de92:	83 c4 10             	add    esp,0x10
c000de95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de99:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de9d:	52                   	push   edx
c000de9e:	50                   	push   eax
c000de9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dea3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dea7:	e8 7f 98 01 00       	call   c002772b <__adddf3>
c000deac:	59                   	pop    ecx
c000dead:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000deb1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000deb5:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb8:	e8 4e a5 01 00       	call   c002840b <__floatsidf>
c000debd:	83 c4 10             	add    esp,0x10
c000dec0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dec4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec8:	52                   	push   edx
c000dec9:	50                   	push   eax
c000deca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dece:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ded2:	e8 9e a7 01 00       	call   c0028675 <__gedf2>
c000ded7:	83 c4 10             	add    esp,0x10
c000deda:	85 c0                	test   eax,eax
c000dedc:	0f 89 43 01 00 00    	jns    c000e025 <zoh_vari_process+0x2c7>
c000dee2:	85 ed                	test   ebp,ebp
c000dee4:	0f 8e ec 00 00 00    	jle    c000dfd6 <zoh_vari_process+0x278>
c000deea:	83 ec 10             	sub    esp,0x10
c000deed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000def0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000def3:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000def6:	ff 37                	push   DWORD PTR [edi]
c000def8:	e8 7f 9e 01 00       	call   c0027d7c <__subdf3>
c000defd:	83 c4 18             	add    esp,0x18
c000df00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df08:	52                   	push   edx
c000df09:	50                   	push   eax
c000df0a:	e8 01 a9 01 00       	call   c0028810 <fabs>
c000df0f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df13:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df17:	83 c4 10             	add    esp,0x10
c000df1a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df1f:	68 23 42 92 0c       	push   0xc924223
c000df24:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df28:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df2c:	e8 28 a7 01 00       	call   c0028659 <__gtdf2>
c000df31:	83 c4 10             	add    esp,0x10
c000df34:	85 c0                	test   eax,eax
c000df36:	0f 8e 9a 00 00 00    	jle    c000dfd6 <zoh_vari_process+0x278>
c000df3c:	8b 07                	mov    eax,DWORD PTR [edi]
c000df3e:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df41:	89 04 24             	mov    DWORD PTR [esp],eax
c000df44:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df48:	52                   	push   edx
c000df49:	50                   	push   eax
c000df4a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df4d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df50:	e8 27 9e 01 00       	call   c0027d7c <__subdf3>
c000df55:	59                   	pop    ecx
c000df56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df5a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df5e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df61:	e8 a5 a4 01 00       	call   c002840b <__floatsidf>
c000df66:	83 c4 10             	add    esp,0x10
c000df69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df6d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df71:	52                   	push   edx
c000df72:	50                   	push   eax
c000df73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df7b:	e8 28 9e 01 00       	call   c0027da8 <__muldf3>
c000df80:	5d                   	pop    ebp
c000df81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df89:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df8c:	e8 7a a4 01 00       	call   c002840b <__floatsidf>
c000df91:	83 c4 10             	add    esp,0x10
c000df94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df9c:	52                   	push   edx
c000df9d:	50                   	push   eax
c000df9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfa6:	e8 e1 a0 01 00       	call   c002808c <__divdf3>
c000dfab:	83 c4 10             	add    esp,0x10
c000dfae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfb2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfb6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfba:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfc6:	e8 60 97 01 00       	call   c002772b <__adddf3>
c000dfcb:	83 c4 10             	add    esp,0x10
c000dfce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfd2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfd6:	31 c0                	xor    eax,eax
c000dfd8:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfdb:	7e 13                	jle    c000dff0 <zoh_vari_process+0x292>
c000dfdd:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfe1:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfe4:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfe7:	40                   	inc    eax
c000dfe8:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfeb:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfee:	eb e8                	jmp    c000dfd8 <zoh_vari_process+0x27a>
c000dff0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff8:	68 00 00 f0 3f       	push   0x3ff00000
c000dffd:	6a 00                	push   0x0
c000dfff:	e8 88 a0 01 00       	call   c002808c <__divdf3>
c000e004:	83 c4 10             	add    esp,0x10
c000e007:	89 04 24             	mov    DWORD PTR [esp],eax
c000e00a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e00e:	52                   	push   edx
c000e00f:	50                   	push   eax
c000e010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e018:	e8 0e 97 01 00       	call   c002772b <__adddf3>
c000e01d:	83 c4 10             	add    esp,0x10
c000e020:	e9 ff fd ff ff       	jmp    c000de24 <zoh_vari_process+0xc6>
c000e025:	55                   	push   ebp
c000e026:	55                   	push   ebp
c000e027:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02f:	e8 fc a7 01 00       	call   c0028830 <lrint>
c000e034:	83 ec 0c             	sub    esp,0xc
c000e037:	50                   	push   eax
c000e038:	e8 ce a3 01 00       	call   c002840b <__floatsidf>
c000e03d:	83 c4 10             	add    esp,0x10
c000e040:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e044:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e048:	52                   	push   edx
c000e049:	50                   	push   eax
c000e04a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e052:	e8 25 9d 01 00       	call   c0027d7c <__subdf3>
c000e057:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e05b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e05f:	83 c4 20             	add    esp,0x20
c000e062:	6a 00                	push   0x0
c000e064:	6a 00                	push   0x0
c000e066:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06e:	e8 04 a6 01 00       	call   c0028677 <__ltdf2>
c000e073:	83 c4 10             	add    esp,0x10
c000e076:	85 c0                	test   eax,eax
c000e078:	79 1e                	jns    c000e098 <zoh_vari_process+0x33a>
c000e07a:	68 00 00 f0 3f       	push   0x3ff00000
c000e07f:	6a 00                	push   0x0
c000e081:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e085:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e089:	e8 9d 96 01 00       	call   c002772b <__adddf3>
c000e08e:	83 c4 10             	add    esp,0x10
c000e091:	89 04 24             	mov    DWORD PTR [esp],eax
c000e094:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e098:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e09b:	83 ec 10             	sub    esp,0x10
c000e09e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0ae:	e8 c9 9c 01 00       	call   c0027d7c <__subdf3>
c000e0b3:	83 c4 18             	add    esp,0x18
c000e0b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0be:	52                   	push   edx
c000e0bf:	50                   	push   eax
c000e0c0:	e8 6b a7 01 00       	call   c0028830 <lrint>
c000e0c5:	83 c4 10             	add    esp,0x10
c000e0c8:	0f af e8             	imul   ebp,eax
c000e0cb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0ce:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0d1:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0d5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d8:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0df:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0e2:	0f 8d 7a 02 00 00    	jge    c000e362 <zoh_vari_process+0x604>
c000e0e8:	83 ec 0c             	sub    esp,0xc
c000e0eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ee:	e8 18 a3 01 00       	call   c002840b <__floatsidf>
c000e0f3:	83 c4 10             	add    esp,0x10
c000e0f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0fa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0fe:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e102:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e106:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e10a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e10e:	e8 95 9c 01 00       	call   c0027da8 <__muldf3>
c000e113:	59                   	pop    ecx
c000e114:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e118:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e11c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e120:	e8 e6 a2 01 00       	call   c002840b <__floatsidf>
c000e125:	83 c4 10             	add    esp,0x10
c000e128:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e12c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e130:	52                   	push   edx
c000e131:	50                   	push   eax
c000e132:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e136:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e13a:	e8 ec 95 01 00       	call   c002772b <__adddf3>
c000e13f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e142:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e146:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e14a:	e8 bc a2 01 00       	call   c002840b <__floatsidf>
c000e14f:	83 c4 10             	add    esp,0x10
c000e152:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e156:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e15a:	52                   	push   edx
c000e15b:	50                   	push   eax
c000e15c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e160:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e164:	e8 10 a5 01 00       	call   c0028679 <__ledf2>
c000e169:	83 c4 10             	add    esp,0x10
c000e16c:	85 c0                	test   eax,eax
c000e16e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e172:	0f 8f ea 01 00 00    	jg     c000e362 <zoh_vari_process+0x604>
c000e178:	85 c9                	test   ecx,ecx
c000e17a:	0f 8e ed 00 00 00    	jle    c000e26d <zoh_vari_process+0x50f>
c000e180:	83 ec 10             	sub    esp,0x10
c000e183:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e186:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e189:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e18c:	ff 37                	push   DWORD PTR [edi]
c000e18e:	e8 e9 9b 01 00       	call   c0027d7c <__subdf3>
c000e193:	83 c4 18             	add    esp,0x18
c000e196:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e19a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e19e:	52                   	push   edx
c000e19f:	50                   	push   eax
c000e1a0:	e8 6b a6 01 00       	call   c0028810 <fabs>
c000e1a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1ad:	83 c4 10             	add    esp,0x10
c000e1b0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1b5:	68 23 42 92 0c       	push   0xc924223
c000e1ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1c2:	e8 92 a4 01 00       	call   c0028659 <__gtdf2>
c000e1c7:	83 c4 10             	add    esp,0x10
c000e1ca:	85 c0                	test   eax,eax
c000e1cc:	0f 8e 9b 00 00 00    	jle    c000e26d <zoh_vari_process+0x50f>
c000e1d2:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1d4:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1df:	52                   	push   edx
c000e1e0:	50                   	push   eax
c000e1e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1e4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1e7:	e8 90 9b 01 00       	call   c0027d7c <__subdf3>
c000e1ec:	5d                   	pop    ebp
c000e1ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1f1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1f5:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f8:	e8 0e a2 01 00       	call   c002840b <__floatsidf>
c000e1fd:	83 c4 10             	add    esp,0x10
c000e200:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e204:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e208:	52                   	push   edx
c000e209:	50                   	push   eax
c000e20a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e212:	e8 91 9b 01 00       	call   c0027da8 <__muldf3>
c000e217:	59                   	pop    ecx
c000e218:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e21c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e220:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e223:	e8 e3 a1 01 00       	call   c002840b <__floatsidf>
c000e228:	83 c4 10             	add    esp,0x10
c000e22b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e22f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e233:	52                   	push   edx
c000e234:	50                   	push   eax
c000e235:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e239:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e23d:	e8 4a 9e 01 00       	call   c002808c <__divdf3>
c000e242:	83 c4 10             	add    esp,0x10
c000e245:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e249:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e24d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e25d:	e8 c9 94 01 00       	call   c002772b <__adddf3>
c000e262:	83 c4 10             	add    esp,0x10
c000e265:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e269:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e26d:	31 d2                	xor    edx,edx
c000e26f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e272:	39 d0                	cmp    eax,edx
c000e274:	7e 1d                	jle    c000e293 <zoh_vari_process+0x535>
c000e276:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e279:	29 c1                	sub    ecx,eax
c000e27b:	89 c8                	mov    eax,ecx
c000e27d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e27f:	01 d0                	add    eax,edx
c000e281:	42                   	inc    edx
c000e282:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e285:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e288:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e28b:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e28e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e291:	eb dc                	jmp    c000e26f <zoh_vari_process+0x511>
c000e293:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e297:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e29b:	68 00 00 f0 3f       	push   0x3ff00000
c000e2a0:	6a 00                	push   0x0
c000e2a2:	e8 e5 9d 01 00       	call   c002808c <__divdf3>
c000e2a7:	83 c4 10             	add    esp,0x10
c000e2aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2c2:	e8 64 94 01 00       	call   c002772b <__adddf3>
c000e2c7:	5d                   	pop    ebp
c000e2c8:	59                   	pop    ecx
c000e2c9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d9:	e8 52 a5 01 00       	call   c0028830 <lrint>
c000e2de:	83 ec 0c             	sub    esp,0xc
c000e2e1:	50                   	push   eax
c000e2e2:	e8 24 a1 01 00       	call   c002840b <__floatsidf>
c000e2e7:	83 c4 10             	add    esp,0x10
c000e2ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2f2:	52                   	push   edx
c000e2f3:	50                   	push   eax
c000e2f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2fc:	e8 7b 9a 01 00       	call   c0027d7c <__subdf3>
c000e301:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e305:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e309:	83 c4 20             	add    esp,0x20
c000e30c:	6a 00                	push   0x0
c000e30e:	6a 00                	push   0x0
c000e310:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e314:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e318:	e8 5a a3 01 00       	call   c0028677 <__ltdf2>
c000e31d:	83 c4 10             	add    esp,0x10
c000e320:	85 c0                	test   eax,eax
c000e322:	79 1e                	jns    c000e342 <zoh_vari_process+0x5e4>
c000e324:	68 00 00 f0 3f       	push   0x3ff00000
c000e329:	6a 00                	push   0x0
c000e32b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e333:	e8 f3 93 01 00       	call   c002772b <__adddf3>
c000e338:	83 c4 10             	add    esp,0x10
c000e33b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e33e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e342:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e345:	83 ec 10             	sub    esp,0x10
c000e348:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e34c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e350:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e354:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e358:	e8 1f 9a 01 00       	call   c0027d7c <__subdf3>
c000e35d:	e9 51 fd ff ff       	jmp    c000e0b3 <zoh_vari_process+0x355>
c000e362:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e366:	7d 3a                	jge    c000e3a2 <zoh_vari_process+0x644>
c000e368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36c:	83 ec 0c             	sub    esp,0xc
c000e36f:	29 e8                	sub    eax,ebp
c000e371:	99                   	cdq    
c000e372:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e375:	50                   	push   eax
c000e376:	e8 90 a0 01 00       	call   c002840b <__floatsidf>
c000e37b:	83 c4 10             	add    esp,0x10
c000e37e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e382:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e386:	52                   	push   edx
c000e387:	50                   	push   eax
c000e388:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e38c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e390:	e8 96 93 01 00       	call   c002772b <__adddf3>
c000e395:	83 c4 10             	add    esp,0x10
c000e398:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e39b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e39e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e3a2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e3a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a9:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3ac:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3af:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3b2:	85 c0                	test   eax,eax
c000e3b4:	7f 25                	jg     c000e3db <zoh_vari_process+0x67d>
c000e3b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3be:	89 07                	mov    DWORD PTR [edi],eax
c000e3c0:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3c3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3c6:	99                   	cdq    
c000e3c7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3ca:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3cd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3d0:	99                   	cdq    
c000e3d1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3d4:	31 d2                	xor    edx,edx
c000e3d6:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d9:	eb 1e                	jmp    c000e3f9 <zoh_vari_process+0x69b>
c000e3db:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3de:	31 d2                	xor    edx,edx
c000e3e0:	29 c8                	sub    eax,ecx
c000e3e2:	c1 e0 02             	shl    eax,0x2
c000e3e5:	39 d1                	cmp    ecx,edx
c000e3e7:	7e cd                	jle    c000e3b6 <zoh_vari_process+0x658>
c000e3e9:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3eb:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ef:	83 c0 04             	add    eax,0x4
c000e3f2:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3f6:	42                   	inc    edx
c000e3f7:	eb ec                	jmp    c000e3e5 <zoh_vari_process+0x687>
c000e3f9:	83 c4 3c             	add    esp,0x3c
c000e3fc:	89 d0                	mov    eax,edx
c000e3fe:	5b                   	pop    ebx
c000e3ff:	5e                   	pop    esi
c000e400:	5f                   	pop    edi
c000e401:	5d                   	pop    ebp
c000e402:	c3                   	ret    

c000e403 <zoh_reset>:
c000e403:	83 ec 0c             	sub    esp,0xc
c000e406:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e40a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e40d:	85 c0                	test   eax,eax
c000e40f:	74 20                	je     c000e431 <zoh_reset+0x2e>
c000e411:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e414:	83 c0 1c             	add    eax,0x1c
c000e417:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e41a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e421:	c1 e2 02             	shl    edx,0x2
c000e424:	51                   	push   ecx
c000e425:	52                   	push   edx
c000e426:	6a 00                	push   0x0
c000e428:	50                   	push   eax
c000e429:	e8 52 23 ff ff       	call   c0000780 <memset>
c000e42e:	83 c4 10             	add    esp,0x10
c000e431:	83 c4 0c             	add    esp,0xc
c000e434:	c3                   	ret    

c000e435 <zoh_get_name>:
c000e435:	31 c0                	xor    eax,eax
c000e437:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e43c:	75 05                	jne    c000e443 <zoh_get_name+0xe>
c000e43e:	b8 3e a1 02 c0       	mov    eax,0xc002a13e
c000e443:	c3                   	ret    

c000e444 <zoh_get_description>:
c000e444:	31 c0                	xor    eax,eax
c000e446:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e44b:	75 05                	jne    c000e452 <zoh_get_description+0xe>
c000e44d:	b8 4f a1 02 c0       	mov    eax,0xc002a14f
c000e452:	c3                   	ret    

c000e453 <zoh_set_converter>:
c000e453:	53                   	push   ebx
c000e454:	b8 0a 00 00 00       	mov    eax,0xa
c000e459:	83 ec 08             	sub    esp,0x8
c000e45c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e460:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e465:	75 6e                	jne    c000e4d5 <zoh_set_converter+0x82>
c000e467:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e46a:	85 c0                	test   eax,eax
c000e46c:	74 13                	je     c000e481 <zoh_set_converter+0x2e>
c000e46e:	83 ec 0c             	sub    esp,0xc
c000e471:	50                   	push   eax
c000e472:	e8 e4 13 00 00       	call   c000f85b <free>
c000e477:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e47e:	83 c4 10             	add    esp,0x10
c000e481:	50                   	push   eax
c000e482:	50                   	push   eax
c000e483:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e486:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e48d:	50                   	push   eax
c000e48e:	6a 01                	push   0x1
c000e490:	e8 e6 13 00 00       	call   c000f87b <calloc>
c000e495:	83 c4 10             	add    esp,0x10
c000e498:	89 c2                	mov    edx,eax
c000e49a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e49d:	85 d2                	test   edx,edx
c000e49f:	b8 01 00 00 00       	mov    eax,0x1
c000e4a4:	74 2f                	je     c000e4d5 <zoh_set_converter+0x82>
c000e4a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a9:	83 ec 0c             	sub    esp,0xc
c000e4ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4af:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4b5:	c7 43 24 5e dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd5e
c000e4bc:	c7 43 20 5e dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd5e
c000e4c3:	c7 43 28 03 e4 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e403
c000e4ca:	53                   	push   ebx
c000e4cb:	e8 33 ff ff ff       	call   c000e403 <zoh_reset>
c000e4d0:	83 c4 10             	add    esp,0x10
c000e4d3:	31 c0                	xor    eax,eax
c000e4d5:	83 c4 08             	add    esp,0x8
c000e4d8:	5b                   	pop    ebx
c000e4d9:	c3                   	ret    

c000e4da <CPU::current()>:
c000e4da:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c000e4df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4e5:	90                   	nop
c000e4e6:	c3                   	ret    

c000e4e7 <operator new(unsigned long)>:
c000e4e7:	83 ec 0c             	sub    esp,0xc
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4f1:	e8 55 13 00 00       	call   c000f84b <malloc>
c000e4f6:	83 c4 10             	add    esp,0x10
c000e4f9:	83 c4 0c             	add    esp,0xc
c000e4fc:	c3                   	ret    

c000e4fd <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4fd:	83 ec 0c             	sub    esp,0xc
c000e500:	83 ec 08             	sub    esp,0x8
c000e503:	68 86 a1 02 c0       	push   0xc002a186
c000e508:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e50c:	e8 b7 23 ff ff       	call   c00008c8 <strcmp>
c000e511:	83 c4 10             	add    esp,0x10
c000e514:	85 c0                	test   eax,eax
c000e516:	0f 94 c0             	sete   al
c000e519:	84 c0                	test   al,al
c000e51b:	74 0a                	je     c000e527 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e51d:	b8 28 e7 02 c0       	mov    eax,0xc002e728
c000e522:	e9 e3 00 00 00       	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e527:	83 ec 08             	sub    esp,0x8
c000e52a:	68 8f a1 02 c0       	push   0xc002a18f
c000e52f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e533:	e8 90 23 ff ff       	call   c00008c8 <strcmp>
c000e538:	83 c4 10             	add    esp,0x10
c000e53b:	85 c0                	test   eax,eax
c000e53d:	0f 94 c0             	sete   al
c000e540:	84 c0                	test   al,al
c000e542:	74 0a                	je     c000e54e <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e544:	b8 a4 6b 02 c0       	mov    eax,0xc0026ba4
c000e549:	e9 bc 00 00 00       	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e54e:	83 ec 08             	sub    esp,0x8
c000e551:	68 99 a1 02 c0       	push   0xc002a199
c000e556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e55a:	e8 69 23 ff ff       	call   c00008c8 <strcmp>
c000e55f:	83 c4 10             	add    esp,0x10
c000e562:	85 c0                	test   eax,eax
c000e564:	0f 94 c0             	sete   al
c000e567:	84 c0                	test   al,al
c000e569:	74 0a                	je     c000e575 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e56b:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c000e570:	e9 95 00 00 00       	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e575:	83 ec 08             	sub    esp,0x8
c000e578:	68 a2 a1 02 c0       	push   0xc002a1a2
c000e57d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e581:	e8 42 23 ff ff       	call   c00008c8 <strcmp>
c000e586:	83 c4 10             	add    esp,0x10
c000e589:	85 c0                	test   eax,eax
c000e58b:	0f 94 c0             	sete   al
c000e58e:	84 c0                	test   al,al
c000e590:	74 07                	je     c000e599 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e592:	b8 a4 6c 02 c0       	mov    eax,0xc0026ca4
c000e597:	eb 71                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e599:	83 ec 08             	sub    esp,0x8
c000e59c:	68 ac a1 02 c0       	push   0xc002a1ac
c000e5a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5a5:	e8 1e 23 ff ff       	call   c00008c8 <strcmp>
c000e5aa:	83 c4 10             	add    esp,0x10
c000e5ad:	85 c0                	test   eax,eax
c000e5af:	0f 94 c0             	sete   al
c000e5b2:	84 c0                	test   al,al
c000e5b4:	74 07                	je     c000e5bd <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5b6:	b8 24 6a 02 c0       	mov    eax,0xc0026a24
c000e5bb:	eb 4d                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5bd:	83 ec 08             	sub    esp,0x8
c000e5c0:	68 b5 a1 02 c0       	push   0xc002a1b5
c000e5c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c9:	e8 fa 22 ff ff       	call   c00008c8 <strcmp>
c000e5ce:	83 c4 10             	add    esp,0x10
c000e5d1:	85 c0                	test   eax,eax
c000e5d3:	0f 94 c0             	sete   al
c000e5d6:	84 c0                	test   al,al
c000e5d8:	74 07                	je     c000e5e1 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5da:	b8 2c e7 02 c0       	mov    eax,0xc002e72c
c000e5df:	eb 29                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5e1:	83 ec 08             	sub    esp,0x8
c000e5e4:	68 c2 a1 02 c0       	push   0xc002a1c2
c000e5e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5ed:	e8 d6 22 ff ff       	call   c00008c8 <strcmp>
c000e5f2:	83 c4 10             	add    esp,0x10
c000e5f5:	85 c0                	test   eax,eax
c000e5f7:	0f 94 c0             	sete   al
c000e5fa:	84 c0                	test   al,al
c000e5fc:	74 07                	je     c000e605 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5fe:	b8 2d e7 02 c0       	mov    eax,0xc002e72d
c000e603:	eb 05                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e605:	b8 00 00 00 00       	mov    eax,0x0
c000e60a:	83 c4 0c             	add    esp,0xc
c000e60d:	c3                   	ret    

c000e60e <Computer::close(int, int, void*)>:
c000e60e:	57                   	push   edi
c000e60f:	56                   	push   esi
c000e610:	53                   	push   ebx
c000e611:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e615:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e619:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e61d:	83 ec 0c             	sub    esp,0xc
c000e620:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e626:	e8 3b 5d 00 00       	call   c0014366 <Device::closeAll()>
c000e62b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e631:	83 c4 10             	add    esp,0x10
c000e634:	8b 10                	mov    edx,DWORD PTR [eax]
c000e636:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e63a:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e642:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e646:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e64a:	5b                   	pop    ebx
c000e64b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e64e:	5e                   	pop    esi
c000e64f:	5f                   	pop    edi
c000e650:	ff e0                	jmp    eax

c000e652 <Krnl::firstTask()>:
c000e652:	53                   	push   ebx
c000e653:	83 ec 14             	sub    esp,0x14
c000e656:	fb                   	sti    
c000e657:	68 3f 07 00 00       	push   0x73f
c000e65c:	e8 ea 11 00 00       	call   c000f84b <malloc>
c000e661:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e668:	89 c3                	mov    ebx,eax
c000e66a:	ff 35 94 1c 03 c0    	push   DWORD PTR ds:0xc0031c94
c000e670:	68 cf a1 02 c0       	push   0xc002a1cf
c000e675:	6a 01                	push   0x1
c000e677:	50                   	push   eax
c000e678:	e8 e3 f5 00 00       	call   c001dc60 <Process::Process(bool, char const*, Process*, char**)>
c000e67d:	83 c4 20             	add    esp,0x20
c000e680:	68 ff 00 00 00       	push   0xff
c000e685:	6a 00                	push   0x0
c000e687:	68 dd f1 00 c0       	push   0xc000f1dd
c000e68c:	53                   	push   ebx
c000e68d:	e8 cc f8 00 00       	call   c001df5e <Process::createThread(void (*)(void*), void*, int)>
c000e692:	6a 7a                	push   0x7a
c000e694:	6a 00                	push   0x0
c000e696:	68 8f e8 01 c0       	push   0xc001e88f
c000e69b:	ff 35 94 1c 03 c0    	push   DWORD PTR ds:0xc0031c94
c000e6a1:	e8 b8 f8 00 00       	call   c001df5e <Process::createThread(void (*)(void*), void*, int)>
c000e6a6:	83 c4 20             	add    esp,0x20
c000e6a9:	a3 48 1c 03 c0       	mov    ds:0xc0031c48,eax
c000e6ae:	c6 05 2d e7 02 c0 01 	mov    BYTE PTR ds:0xc002e72d,0x1
c000e6b5:	e8 55 05 01 00       	call   c001ec0f <Vm::initialise8086()>
c000e6ba:	e8 8f 4a 00 00       	call   c001314e <Fs::initVFS()>
c000e6bf:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c000e6c4:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6ca:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6cc:	6a 00                	push   0x0
c000e6ce:	6a 00                	push   0x0
c000e6d0:	6a 00                	push   0x0
c000e6d2:	50                   	push   eax
c000e6d3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6d6:	e8 f2 de 00 00       	call   c001c5cd <Sys::loadSyscalls()>
c000e6db:	e8 76 bd 00 00       	call   c001a456 <Krnl::loadSystemEnv()>
c000e6e0:	83 c4 0c             	add    esp,0xc
c000e6e3:	6a 3a                	push   0x3a
c000e6e5:	68 dc a1 02 c0       	push   0xc002a1dc
c000e6ea:	68 e5 a1 02 c0       	push   0xc002a1e5
c000e6ef:	e8 88 ca 00 00       	call   c001b17c <Reg::readIntWithDefault(char*, char*, int)>
c000e6f4:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6f7:	e8 3a 55 00 00       	call   c0013c36 <User::loadClockSettings(int)>
c000e6fc:	58                   	pop    eax
c000e6fd:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c000e702:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e708:	e8 2d 5c 00 00       	call   c001433a <Device::loadDriversForAll()>
c000e70d:	e8 8a b8 00 00       	call   c0019f9c <Krnl::startCPUs()>
c000e712:	5a                   	pop    edx
c000e713:	8b 1d 28 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e728
c000e719:	59                   	pop    ecx
c000e71a:	6a 01                	push   0x1
c000e71c:	68 ed a1 02 c0       	push   0xc002a1ed
c000e721:	e8 5f f0 00 00       	call   c001d785 <Thr::loadDLL(char const*, bool)>
c000e726:	5a                   	pop    edx
c000e727:	59                   	pop    ecx
c000e728:	53                   	push   ebx
c000e729:	50                   	push   eax
c000e72a:	e8 8a f2 00 00       	call   c001d9b9 <Thr::executeDLL(unsigned long, void*)>
c000e72f:	83 c4 10             	add    esp,0x10
c000e732:	83 ec 0c             	sub    esp,0xc
c000e735:	6a 02                	push   0x2
c000e737:	e8 c0 fb 00 00       	call   c001e2fc <blockTask(TaskState)>
c000e73c:	83 c4 10             	add    esp,0x10
c000e73f:	eb f1                	jmp    c000e732 <Krnl::firstTask()+0xe0>
c000e741:	90                   	nop

c000e742 <Computer::Computer()>:
c000e742:	83 ec 0c             	sub    esp,0xc
c000e745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e749:	83 ec 08             	sub    esp,0x8
c000e74c:	68 09 a2 02 c0       	push   0xc002a209
c000e751:	50                   	push   eax
c000e752:	e8 89 5c 00 00       	call   c00143e0 <Device::Device(char const*)>
c000e757:	83 c4 10             	add    esp,0x10
c000e75a:	ba a8 a3 02 c0       	mov    edx,0xc002a3a8
c000e75f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e763:	89 10                	mov    DWORD PTR [eax],edx
c000e765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e769:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e777:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e785:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e78b:	83 ca 04             	or     edx,0x4
c000e78e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e798:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e79e:	0f b6 d0             	movzx  edx,al
c000e7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a5:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7b6:	0f b6 d0             	movzx  edx,al
c000e7b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7bd:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7cc:	8d 50 01             	lea    edx,[eax+0x1]
c000e7cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7d3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d9:	0f b6 d0             	movzx  edx,al
c000e7dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7e4:	83 e1 3f             	and    ecx,0x3f
c000e7e7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7f5:	0f b6 d0             	movzx  edx,al
c000e7f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fc:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e807:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e80d:	0f b6 d0             	movzx  edx,al
c000e810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e814:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e819:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e81d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e823:	8d 50 01             	lea    edx,[eax+0x1]
c000e826:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e82a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e830:	0f b6 d0             	movzx  edx,al
c000e833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e837:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e83b:	83 e1 3f             	and    ecx,0x3f
c000e83e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e846:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84c:	0f b6 d0             	movzx  edx,al
c000e84f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e853:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e85a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e864:	0f b6 d0             	movzx  edx,al
c000e867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86b:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e87a:	8d 50 01             	lea    edx,[eax+0x1]
c000e87d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e881:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e887:	0f b6 d0             	movzx  edx,al
c000e88a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e88e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e892:	83 e1 3f             	and    ecx,0x3f
c000e895:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e899:	90                   	nop
c000e89a:	83 c4 0c             	add    esp,0xc
c000e89d:	c3                   	ret    

c000e89e <Computer::setBootMessage(char const*)>:
c000e89e:	c3                   	ret    
c000e89f:	90                   	nop

c000e8a0 <Computer::detectFeatures()>:
c000e8a0:	55                   	push   ebp
c000e8a1:	57                   	push   edi
c000e8a2:	56                   	push   esi
c000e8a3:	53                   	push   ebx
c000e8a4:	83 ec 1c             	sub    esp,0x1c
c000e8a7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8ab:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8b5:	e8 2a 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8ba:	85 c0                	test   eax,eax
c000e8bc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8c2:	0f 95 c2             	setne  dl
c000e8c5:	83 e0 fd             	and    eax,0xfffffffd
c000e8c8:	d1 e2                	shl    edx,1
c000e8ca:	09 d0                	or     eax,edx
c000e8cc:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8d2:	a8 02                	test   al,0x2
c000e8d4:	75 46                	jne    c000e91c <Computer::detectFeatures()+0x7c>
c000e8d6:	f6 05 41 e7 02 c0 04 	test   BYTE PTR ds:0xc002e741,0x4
c000e8dd:	74 07                	je     c000e8e6 <Computer::detectFeatures()+0x46>
c000e8df:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8e6:	e8 7b 7f 01 00       	call   c0026866 <x87Detect>
c000e8eb:	83 e0 01             	and    eax,0x1
c000e8ee:	c1 e0 04             	shl    eax,0x4
c000e8f1:	88 c2                	mov    dl,al
c000e8f3:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f9:	83 e0 ef             	and    eax,0xffffffef
c000e8fc:	09 d0                	or     eax,edx
c000e8fe:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e904:	a8 10                	test   al,0x10
c000e906:	0f 85 2a 01 00 00    	jne    c000ea36 <Computer::detectFeatures()+0x196>
c000e90c:	84 c0                	test   al,al
c000e90e:	0f 88 45 01 00 00    	js     c000ea59 <Computer::detectFeatures()+0x1b9>
c000e914:	83 c4 1c             	add    esp,0x1c
c000e917:	5b                   	pop    ebx
c000e918:	5e                   	pop    esi
c000e919:	5f                   	pop    edi
c000e91a:	5d                   	pop    ebp
c000e91b:	c3                   	ret    
c000e91c:	83 ec 0c             	sub    esp,0xc
c000e91f:	6a 20                	push   0x20
c000e921:	e8 88 a3 00 00       	call   c0018cae <CPU::cpuidCheckEDX(unsigned int)>
c000e926:	83 e0 01             	and    eax,0x1
c000e929:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e930:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e936:	83 e0 f7             	and    eax,0xfffffff7
c000e939:	09 d0                	or     eax,edx
c000e93b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e941:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e948:	e8 61 a3 00 00       	call   c0018cae <CPU::cpuidCheckEDX(unsigned int)>
c000e94d:	83 e0 01             	and    eax,0x1
c000e950:	88 c2                	mov    dl,al
c000e952:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e958:	83 e0 fe             	and    eax,0xfffffffe
c000e95b:	09 d0                	or     eax,edx
c000e95d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e963:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e96a:	e8 3f a3 00 00       	call   c0018cae <CPU::cpuidCheckEDX(unsigned int)>
c000e96f:	c1 e0 07             	shl    eax,0x7
c000e972:	88 c2                	mov    dl,al
c000e974:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e97a:	83 e0 7f             	and    eax,0x7f
c000e97d:	09 d0                	or     eax,edx
c000e97f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e985:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e98c:	e8 1d a3 00 00       	call   c0018cae <CPU::cpuidCheckEDX(unsigned int)>
c000e991:	83 c4 10             	add    esp,0x10
c000e994:	83 e0 01             	and    eax,0x1
c000e997:	c1 e0 05             	shl    eax,0x5
c000e99a:	88 c2                	mov    dl,al
c000e99c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9a2:	83 e0 df             	and    eax,0xffffffdf
c000e9a5:	09 d0                	or     eax,edx
c000e9a7:	f7 05 40 e7 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e740,0x401
c000e9b1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9b7:	0f 84 c2 00 00 00    	je     c000ea7f <Computer::detectFeatures()+0x1df>
c000e9bd:	83 e0 fe             	and    eax,0xfffffffe
c000e9c0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9c6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9cc:	88 c2                	mov    dl,al
c000e9ce:	83 e2 09             	and    edx,0x9
c000e9d1:	fe ca                	dec    dl
c000e9d3:	75 09                	jne    c000e9de <Computer::detectFeatures()+0x13e>
c000e9d5:	83 e0 fe             	and    eax,0xfffffffe
c000e9d8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9de:	83 ec 0c             	sub    esp,0xc
c000e9e1:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9e5:	50                   	push   eax
c000e9e6:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9ea:	55                   	push   ebp
c000e9eb:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9ef:	57                   	push   edi
c000e9f0:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9f4:	56                   	push   esi
c000e9f5:	68 00 00 00 80       	push   0x80000000
c000e9fa:	e8 2b a2 00 00       	call   c0018c2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9ff:	83 c4 20             	add    esp,0x20
c000ea02:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea09:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea0d:	0f 86 c3 fe ff ff    	jbe    c000e8d6 <Computer::detectFeatures()+0x36>
c000ea13:	83 ec 0c             	sub    esp,0xc
c000ea16:	50                   	push   eax
c000ea17:	55                   	push   ebp
c000ea18:	57                   	push   edi
c000ea19:	56                   	push   esi
c000ea1a:	68 01 00 00 80       	push   0x80000001
c000ea1f:	e8 06 a2 00 00       	call   c0018c2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea24:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea2e:	83 c4 20             	add    esp,0x20
c000ea31:	e9 a0 fe ff ff       	jmp    c000e8d6 <Computer::detectFeatures()+0x36>
c000ea36:	e8 e5 7d 01 00       	call   c0026820 <absolutelyNoChanceInHell>
c000ea3b:	88 c2                	mov    dl,al
c000ea3d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea43:	c1 e2 07             	shl    edx,0x7
c000ea46:	83 e0 7f             	and    eax,0x7f
c000ea49:	09 d0                	or     eax,edx
c000ea4b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea51:	84 c0                	test   al,al
c000ea53:	0f 89 bb fe ff ff    	jns    c000e914 <Computer::detectFeatures()+0x74>
c000ea59:	e8 a2 7d 01 00       	call   c0026800 <avxDetect>
c000ea5e:	83 e0 01             	and    eax,0x1
c000ea61:	c1 e0 05             	shl    eax,0x5
c000ea64:	88 c2                	mov    dl,al
c000ea66:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea6c:	83 e0 df             	and    eax,0xffffffdf
c000ea6f:	09 d0                	or     eax,edx
c000ea71:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea77:	83 c4 1c             	add    esp,0x1c
c000ea7a:	5b                   	pop    ebx
c000ea7b:	5e                   	pop    esi
c000ea7c:	5f                   	pop    edi
c000ea7d:	5d                   	pop    ebp
c000ea7e:	c3                   	ret    
c000ea7f:	83 ec 0c             	sub    esp,0xc
c000ea82:	68 00 02 00 00       	push   0x200
c000ea87:	e8 22 a2 00 00       	call   c0018cae <CPU::cpuidCheckEDX(unsigned int)>
c000ea8c:	83 c4 10             	add    esp,0x10
c000ea8f:	83 e0 01             	and    eax,0x1
c000ea92:	88 c2                	mov    dl,al
c000ea94:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea9a:	83 e0 fe             	and    eax,0xfffffffe
c000ea9d:	09 d0                	or     eax,edx
c000ea9f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eaa5:	e9 1c ff ff ff       	jmp    c000e9c6 <Computer::detectFeatures()+0x126>

c000eaaa <Computer::displayFeatures()>:
c000eaaa:	53                   	push   ebx
c000eaab:	83 ec 14             	sub    esp,0x14
c000eaae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eab2:	68 19 a2 02 c0       	push   0xc002a219
c000eab7:	e8 07 43 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000eabc:	83 c4 10             	add    esp,0x10
c000eabf:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eac6:	0f 85 73 02 00 00    	jne    c000ed3f <Computer::displayFeatures()+0x295>
c000eacc:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c000ead1:	83 ec 08             	sub    esp,0x8
c000ead4:	50                   	push   eax
c000ead5:	68 2c a2 02 c0       	push   0xc002a22c
c000eada:	e8 e4 42 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000eadf:	83 c4 10             	add    esp,0x10
c000eae2:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae9:	0f 85 8c 02 00 00    	jne    c000ed7b <Computer::displayFeatures()+0x2d1>
c000eaef:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c000eaf4:	83 ec 08             	sub    esp,0x8
c000eaf7:	50                   	push   eax
c000eaf8:	68 3d a2 02 c0       	push   0xc002a23d
c000eafd:	e8 c1 42 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000eb02:	83 c4 10             	add    esp,0x10
c000eb05:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb0c:	0f 85 5f 02 00 00    	jne    c000ed71 <Computer::displayFeatures()+0x2c7>
c000eb12:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c000eb17:	83 ec 08             	sub    esp,0x8
c000eb1a:	50                   	push   eax
c000eb1b:	68 4e a2 02 c0       	push   0xc002a24e
c000eb20:	e8 9e 42 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000eb25:	83 c4 10             	add    esp,0x10
c000eb28:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb2f:	0f 85 32 02 00 00    	jne    c000ed67 <Computer::displayFeatures()+0x2bd>
c000eb35:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c000eb3a:	83 ec 08             	sub    esp,0x8
c000eb3d:	50                   	push   eax
c000eb3e:	68 5f a2 02 c0       	push   0xc002a25f
c000eb43:	e8 7b 42 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000eb48:	83 c4 10             	add    esp,0x10
c000eb4b:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb52:	0f 85 05 02 00 00    	jne    c000ed5d <Computer::displayFeatures()+0x2b3>
c000eb58:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c000eb5d:	83 ec 08             	sub    esp,0x8
c000eb60:	50                   	push   eax
c000eb61:	68 70 a2 02 c0       	push   0xc002a270
c000eb66:	e8 58 42 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000eb6b:	83 c4 10             	add    esp,0x10
c000eb6e:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb75:	0f 85 d8 01 00 00    	jne    c000ed53 <Computer::displayFeatures()+0x2a9>
c000eb7b:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c000eb80:	83 ec 08             	sub    esp,0x8
c000eb83:	50                   	push   eax
c000eb84:	68 81 a2 02 c0       	push   0xc002a281
c000eb89:	e8 35 42 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000eb8e:	83 c4 10             	add    esp,0x10
c000eb91:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb98:	0f 85 ab 01 00 00    	jne    c000ed49 <Computer::displayFeatures()+0x29f>
c000eb9e:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c000eba3:	83 ec 08             	sub    esp,0x8
c000eba6:	50                   	push   eax
c000eba7:	68 92 a2 02 c0       	push   0xc002a292
c000ebac:	e8 12 42 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ebb1:	83 c4 10             	add    esp,0x10
c000ebb4:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebbb:	0f 88 1b 02 00 00    	js     c000eddc <Computer::displayFeatures()+0x332>
c000ebc1:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c000ebc6:	83 ec 08             	sub    esp,0x8
c000ebc9:	50                   	push   eax
c000ebca:	68 a3 a2 02 c0       	push   0xc002a2a3
c000ebcf:	e8 ef 41 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ebd4:	83 c4 10             	add    esp,0x10
c000ebd7:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebde:	0f 85 a1 01 00 00    	jne    c000ed85 <Computer::displayFeatures()+0x2db>
c000ebe4:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c000ebe9:	83 ec 08             	sub    esp,0x8
c000ebec:	50                   	push   eax
c000ebed:	68 b4 a2 02 c0       	push   0xc002a2b4
c000ebf2:	e8 cc 41 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ebf7:	83 c4 10             	add    esp,0x10
c000ebfa:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec01:	0f 85 cb 01 00 00    	jne    c000edd2 <Computer::displayFeatures()+0x328>
c000ec07:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c000ec0c:	83 ec 08             	sub    esp,0x8
c000ec0f:	50                   	push   eax
c000ec10:	68 c5 a2 02 c0       	push   0xc002a2c5
c000ec15:	e8 a9 41 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ec1a:	83 c4 10             	add    esp,0x10
c000ec1d:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec24:	0f 85 9e 01 00 00    	jne    c000edc8 <Computer::displayFeatures()+0x31e>
c000ec2a:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c000ec2f:	83 ec 08             	sub    esp,0x8
c000ec32:	50                   	push   eax
c000ec33:	68 d6 a2 02 c0       	push   0xc002a2d6
c000ec38:	e8 86 41 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ec3d:	83 c4 10             	add    esp,0x10
c000ec40:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec47:	0f 85 71 01 00 00    	jne    c000edbe <Computer::displayFeatures()+0x314>
c000ec4d:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c000ec52:	83 ec 08             	sub    esp,0x8
c000ec55:	50                   	push   eax
c000ec56:	68 e7 a2 02 c0       	push   0xc002a2e7
c000ec5b:	e8 63 41 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ec60:	83 c4 10             	add    esp,0x10
c000ec63:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec6a:	0f 85 44 01 00 00    	jne    c000edb4 <Computer::displayFeatures()+0x30a>
c000ec70:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c000ec75:	83 ec 08             	sub    esp,0x8
c000ec78:	50                   	push   eax
c000ec79:	68 f8 a2 02 c0       	push   0xc002a2f8
c000ec7e:	e8 40 41 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ec83:	83 c4 10             	add    esp,0x10
c000ec86:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec8d:	0f 85 17 01 00 00    	jne    c000edaa <Computer::displayFeatures()+0x300>
c000ec93:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c000ec98:	83 ec 08             	sub    esp,0x8
c000ec9b:	50                   	push   eax
c000ec9c:	68 09 a3 02 c0       	push   0xc002a309
c000eca1:	e8 1d 41 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000eca6:	83 c4 10             	add    esp,0x10
c000eca9:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ecb0:	0f 85 ea 00 00 00    	jne    c000eda0 <Computer::displayFeatures()+0x2f6>
c000ecb6:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c000ecbb:	83 ec 08             	sub    esp,0x8
c000ecbe:	50                   	push   eax
c000ecbf:	68 1a a3 02 c0       	push   0xc002a31a
c000ecc4:	e8 fa 40 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ecc9:	83 c4 10             	add    esp,0x10
c000eccc:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ecd3:	0f 88 0d 01 00 00    	js     c000ede6 <Computer::displayFeatures()+0x33c>
c000ecd9:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c000ecde:	83 ec 08             	sub    esp,0x8
c000ece1:	50                   	push   eax
c000ece2:	68 2b a3 02 c0       	push   0xc002a32b
c000ece7:	e8 d7 40 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ecec:	83 c4 10             	add    esp,0x10
c000ecef:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecf6:	0f 85 9a 00 00 00    	jne    c000ed96 <Computer::displayFeatures()+0x2ec>
c000ecfc:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c000ed01:	83 ec 08             	sub    esp,0x8
c000ed04:	50                   	push   eax
c000ed05:	68 3c a3 02 c0       	push   0xc002a33c
c000ed0a:	e8 b4 40 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ed0f:	83 c4 10             	add    esp,0x10
c000ed12:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed19:	75 74                	jne    c000ed8f <Computer::displayFeatures()+0x2e5>
c000ed1b:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c000ed20:	83 ec 08             	sub    esp,0x8
c000ed23:	50                   	push   eax
c000ed24:	68 4d a3 02 c0       	push   0xc002a34d
c000ed29:	e8 95 40 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ed2e:	c7 44 24 20 b8 bd 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bdb8
c000ed36:	83 c4 18             	add    esp,0x18
c000ed39:	5b                   	pop    ebx
c000ed3a:	e9 84 40 00 00       	jmp    c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ed3f:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c000ed44:	e9 88 fd ff ff       	jmp    c000ead1 <Computer::displayFeatures()+0x27>
c000ed49:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c000ed4e:	e9 50 fe ff ff       	jmp    c000eba3 <Computer::displayFeatures()+0xf9>
c000ed53:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c000ed58:	e9 23 fe ff ff       	jmp    c000eb80 <Computer::displayFeatures()+0xd6>
c000ed5d:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c000ed62:	e9 f6 fd ff ff       	jmp    c000eb5d <Computer::displayFeatures()+0xb3>
c000ed67:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c000ed6c:	e9 c9 fd ff ff       	jmp    c000eb3a <Computer::displayFeatures()+0x90>
c000ed71:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c000ed76:	e9 9c fd ff ff       	jmp    c000eb17 <Computer::displayFeatures()+0x6d>
c000ed7b:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c000ed80:	e9 6f fd ff ff       	jmp    c000eaf4 <Computer::displayFeatures()+0x4a>
c000ed85:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c000ed8a:	e9 5a fe ff ff       	jmp    c000ebe9 <Computer::displayFeatures()+0x13f>
c000ed8f:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c000ed94:	eb 8a                	jmp    c000ed20 <Computer::displayFeatures()+0x276>
c000ed96:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c000ed9b:	e9 61 ff ff ff       	jmp    c000ed01 <Computer::displayFeatures()+0x257>
c000eda0:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c000eda5:	e9 11 ff ff ff       	jmp    c000ecbb <Computer::displayFeatures()+0x211>
c000edaa:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c000edaf:	e9 e4 fe ff ff       	jmp    c000ec98 <Computer::displayFeatures()+0x1ee>
c000edb4:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c000edb9:	e9 b7 fe ff ff       	jmp    c000ec75 <Computer::displayFeatures()+0x1cb>
c000edbe:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c000edc3:	e9 8a fe ff ff       	jmp    c000ec52 <Computer::displayFeatures()+0x1a8>
c000edc8:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c000edcd:	e9 5d fe ff ff       	jmp    c000ec2f <Computer::displayFeatures()+0x185>
c000edd2:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c000edd7:	e9 30 fe ff ff       	jmp    c000ec0c <Computer::displayFeatures()+0x162>
c000eddc:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c000ede1:	e9 e0 fd ff ff       	jmp    c000ebc6 <Computer::displayFeatures()+0x11c>
c000ede6:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c000edeb:	e9 ee fe ff ff       	jmp    c000ecde <Computer::displayFeatures()+0x234>

c000edf0 <Computer::rdmsr(unsigned int)>:
c000edf0:	83 ec 0c             	sub    esp,0xc
c000edf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edf7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edfe:	74 0a                	je     c000ee0a <Computer::rdmsr(unsigned int)+0x1a>
c000ee00:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee04:	0f 32                	rdmsr  
c000ee06:	83 c4 0c             	add    esp,0xc
c000ee09:	c3                   	ret    
c000ee0a:	83 ec 0c             	sub    esp,0xc
c000ee0d:	68 5e a3 02 c0       	push   0xc002a35e
c000ee12:	e8 78 b7 00 00       	call   c001a58f <Krnl::panic(char const*)>
c000ee17:	83 c4 10             	add    esp,0x10
c000ee1a:	eb e4                	jmp    c000ee00 <Computer::rdmsr(unsigned int)+0x10>

c000ee1c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee1c:	57                   	push   edi
c000ee1d:	56                   	push   esi
c000ee1e:	52                   	push   edx
c000ee1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee23:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee27:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee2b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee32:	74 0e                	je     c000ee42 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee38:	89 f0                	mov    eax,esi
c000ee3a:	89 fa                	mov    edx,edi
c000ee3c:	0f 30                	wrmsr  
c000ee3e:	58                   	pop    eax
c000ee3f:	5e                   	pop    esi
c000ee40:	5f                   	pop    edi
c000ee41:	c3                   	ret    
c000ee42:	83 ec 0c             	sub    esp,0xc
c000ee45:	68 64 a3 02 c0       	push   0xc002a364
c000ee4a:	e8 40 b7 00 00       	call   c001a58f <Krnl::panic(char const*)>
c000ee4f:	83 c4 10             	add    esp,0x10
c000ee52:	eb e0                	jmp    c000ee34 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee54 <Computer::nmiEnabled()>:
c000ee54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee58:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee5e:	c3                   	ret    
c000ee5f:	90                   	nop

c000ee60 <Computer::readCMOS(unsigned char)>:
c000ee60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee64:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee6b:	19 c0                	sbb    eax,eax
c000ee6d:	83 e0 80             	and    eax,0xffffff80
c000ee70:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee74:	e6 70                	out    0x70,al
c000ee76:	e4 71                	in     al,0x71
c000ee78:	c3                   	ret    
c000ee79:	90                   	nop

c000ee7a <Computer::enableNMI(bool)>:
c000ee7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee82:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee88:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee90:	eb ce                	jmp    c000ee60 <Computer::readCMOS(unsigned char)>

c000ee92 <Computer::open(int, int, void*)>:
c000ee92:	56                   	push   esi
c000ee93:	53                   	push   ebx
c000ee94:	83 ec 10             	sub    esp,0x10
c000ee97:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee9b:	f6 05 40 e7 02 c0 04 	test   BYTE PTR ds:0xc002e740,0x4
c000eea2:	68 68 12 00 00       	push   0x1268
c000eea7:	0f 94 05 64 d6 02 c0 	sete   BYTE PTR ds:0xc002d664
c000eeae:	e8 98 09 00 00       	call   c000f84b <malloc>
c000eeb3:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeb6:	89 c6                	mov    esi,eax
c000eeb8:	e8 b5 92 00 00       	call   c0018172 <ACPI::ACPI()>
c000eebd:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eec3:	58                   	pop    eax
c000eec4:	5a                   	pop    edx
c000eec5:	56                   	push   esi
c000eec6:	53                   	push   ebx
c000eec7:	e8 24 53 00 00       	call   c00141f0 <Device::addChild(Device*)>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 cc f9 ff ff       	call   c000e8a0 <Computer::detectFeatures()>
c000eed4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eed7:	e8 ce fb ff ff       	call   c000eaaa <Computer::displayFeatures()>
c000eedc:	59                   	pop    ecx
c000eedd:	5e                   	pop    esi
c000eede:	6a 01                	push   0x1
c000eee0:	53                   	push   ebx
c000eee1:	e8 94 ff ff ff       	call   c000ee7a <Computer::enableNMI(bool)>
c000eee6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eeed:	e8 59 09 00 00       	call   c000f84b <malloc>
c000eef2:	89 04 24             	mov    DWORD PTR [esp],eax
c000eef5:	89 c6                	mov    esi,eax
c000eef7:	e8 6a 9e 00 00       	call   c0018d66 <CPU::CPU()>
c000eefc:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef02:	58                   	pop    eax
c000ef03:	5a                   	pop    edx
c000ef04:	56                   	push   esi
c000ef05:	53                   	push   ebx
c000ef06:	e8 e5 52 00 00       	call   c00141f0 <Device::addChild(Device*)>
c000ef0b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef11:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef17:	6a 00                	push   0x0
c000ef19:	6a 00                	push   0x0
c000ef1b:	50                   	push   eax
c000ef1c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef1f:	83 c4 20             	add    esp,0x20
c000ef22:	e8 4f 58 00 00       	call   c0014776 <setupFPU()>
c000ef27:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef2d:	85 c0                	test   eax,eax
c000ef2f:	74 1f                	je     c000ef50 <Computer::open(int, int, void*)+0xbe>
c000ef31:	83 ec 08             	sub    esp,0x8
c000ef34:	50                   	push   eax
c000ef35:	53                   	push   ebx
c000ef36:	e8 b5 52 00 00       	call   c00141f0 <Device::addChild(Device*)>
c000ef3b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef41:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef43:	6a 00                	push   0x0
c000ef45:	6a 00                	push   0x0
c000ef47:	6a 00                	push   0x0
c000ef49:	50                   	push   eax
c000ef4a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef4d:	83 c4 20             	add    esp,0x20
c000ef50:	83 ec 0c             	sub    esp,0xc
c000ef53:	68 52 e6 00 c0       	push   0xc000e652
c000ef58:	e8 23 f1 00 00       	call   c001e080 <setupMultitasking(void (*)())>
c000ef5d:	83 c4 14             	add    esp,0x14
c000ef60:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef65:	5b                   	pop    ebx
c000ef66:	5e                   	pop    esi
c000ef67:	c3                   	ret    

c000ef68 <Computer::disableNMI()>:
c000ef68:	6a 00                	push   0x0
c000ef6a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef6e:	e8 07 ff ff ff       	call   c000ee7a <Computer::enableNMI(bool)>
c000ef73:	58                   	pop    eax
c000ef74:	5a                   	pop    edx
c000ef75:	c3                   	ret    

c000ef76 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef7a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef81:	19 c0                	sbb    eax,eax
c000ef83:	83 e0 80             	and    eax,0xffffff80
c000ef86:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef8a:	e6 70                	out    0x70,al
c000ef8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef90:	e6 71                	out    0x71,al
c000ef92:	c3                   	ret    
c000ef93:	90                   	nop

c000ef94 <Computer::handleNMI()>:
c000ef94:	56                   	push   esi
c000ef95:	53                   	push   ebx
c000ef96:	83 ec 10             	sub    esp,0x10
c000ef99:	e4 92                	in     al,0x92
c000ef9b:	89 c6                	mov    esi,eax
c000ef9d:	e4 61                	in     al,0x61
c000ef9f:	68 6a a3 02 c0       	push   0xc002a36a
c000efa4:	88 c3                	mov    bl,al
c000efa6:	e8 18 3e 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000efab:	83 c4 10             	add    esp,0x10
c000efae:	83 e6 10             	and    esi,0x10
c000efb1:	75 0d                	jne    c000efc0 <Computer::handleNMI()+0x2c>
c000efb3:	f6 c3 40             	test   bl,0x40
c000efb6:	75 1d                	jne    c000efd5 <Computer::handleNMI()+0x41>
c000efb8:	84 db                	test   bl,bl
c000efba:	78 2d                	js     c000efe9 <Computer::handleNMI()+0x55>
c000efbc:	58                   	pop    eax
c000efbd:	5b                   	pop    ebx
c000efbe:	5e                   	pop    esi
c000efbf:	c3                   	ret    
c000efc0:	83 ec 0c             	sub    esp,0xc
c000efc3:	68 7b a3 02 c0       	push   0xc002a37b
c000efc8:	e8 c2 b5 00 00       	call   c001a58f <Krnl::panic(char const*)>
c000efcd:	83 c4 10             	add    esp,0x10
c000efd0:	f6 c3 40             	test   bl,0x40
c000efd3:	74 e3                	je     c000efb8 <Computer::handleNMI()+0x24>
c000efd5:	83 ec 0c             	sub    esp,0xc
c000efd8:	68 88 a3 02 c0       	push   0xc002a388
c000efdd:	e8 ad b5 00 00       	call   c001a58f <Krnl::panic(char const*)>
c000efe2:	83 c4 10             	add    esp,0x10
c000efe5:	84 db                	test   bl,bl
c000efe7:	79 d3                	jns    c000efbc <Computer::handleNMI()+0x28>
c000efe9:	c7 44 24 10 92 a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a392
c000eff1:	5a                   	pop    edx
c000eff2:	5b                   	pop    ebx
c000eff3:	5e                   	pop    esi
c000eff4:	e9 96 b5 00 00       	jmp    c001a58f <Krnl::panic(char const*)>
c000eff9:	90                   	nop

c000effa <Computer::setDiskActivityLight(int, bool)>:
c000effa:	56                   	push   esi
c000effb:	53                   	push   ebx
c000effc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f000:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f005:	77 1b                	ja     c000f022 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f007:	e4 92                	in     al,0x92
c000f009:	bb 40 00 00 00       	mov    ebx,0x40
c000f00e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f012:	89 da                	mov    edx,ebx
c000f014:	d3 e2                	shl    edx,cl
c000f016:	89 f1                	mov    ecx,esi
c000f018:	f7 d2                	not    edx
c000f01a:	d3 e3                	shl    ebx,cl
c000f01c:	21 d0                	and    eax,edx
c000f01e:	09 d8                	or     eax,ebx
c000f020:	e6 92                	out    0x92,al
c000f022:	5b                   	pop    ebx
c000f023:	5e                   	pop    esi
c000f024:	c3                   	ret    
c000f025:	90                   	nop

c000f026 <GDTEntry::setBase(unsigned int)>:
c000f026:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f02e:	89 c1                	mov    ecx,eax
c000f030:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f034:	c1 e9 10             	shr    ecx,0x10
c000f037:	c1 e8 18             	shr    eax,0x18
c000f03a:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f03d:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f040:	c3                   	ret    
c000f041:	90                   	nop

c000f042 <GDTEntry::setLimit(unsigned int)>:
c000f042:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f046:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f04a:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f04d:	66 89 01             	mov    WORD PTR [ecx],ax
c000f050:	83 e2 f0             	and    edx,0xfffffff0
c000f053:	c1 e8 10             	shr    eax,0x10
c000f056:	83 e0 0f             	and    eax,0xf
c000f059:	09 d0                	or     eax,edx
c000f05b:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f05e:	c3                   	ret    
c000f05f:	90                   	nop

c000f060 <GDT::GDT()>:
c000f060:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f064:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f06e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f074:	90                   	nop
c000f075:	c3                   	ret    

c000f076 <GDT::addEntry(GDTEntry)>:
c000f076:	53                   	push   ebx
c000f077:	83 ec 0c             	sub    esp,0xc
c000f07a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f07e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f080:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f087:	52                   	push   edx
c000f088:	50                   	push   eax
c000f089:	68 cc a3 02 c0       	push   0xc002a3cc
c000f08e:	e8 30 3d 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000f093:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f095:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f099:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f09d:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f0a1:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f0a5:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a8:	c1 e0 03             	shl    eax,0x3
c000f0ab:	89 13                	mov    DWORD PTR [ebx],edx
c000f0ad:	83 c4 18             	add    esp,0x18
c000f0b0:	5b                   	pop    ebx
c000f0b1:	c3                   	ret    

c000f0b2 <GDT::getNumberOfEntries()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b8:	c3                   	ret    
c000f0b9:	90                   	nop

c000f0ba <GDT::flush()>:
c000f0ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0be:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0c0:	83 c0 04             	add    eax,0x4
c000f0c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0ca:	a3 32 e7 02 c0       	mov    ds:0xc002e732,eax
c000f0cf:	66 89 15 30 e7 02 c0 	mov    WORD PTR ds:0xc002e730,dx
c000f0d6:	e9 75 13 ff ff       	jmp    c0000450 <loadGDT>
c000f0db:	90                   	nop

c000f0dc <GDT::setup()>:
c000f0dc:	55                   	push   ebp
c000f0dd:	57                   	push   edi
c000f0de:	56                   	push   esi
c000f0df:	53                   	push   ebx
c000f0e0:	83 ec 3c             	sub    esp,0x3c
c000f0e3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0e7:	6a 00                	push   0x0
c000f0e9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 33 ff ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c000f0f3:	6a 00                	push   0x0
c000f0f5:	53                   	push   ebx
c000f0f6:	e8 47 ff ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c000f0fb:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f103:	6a 00                	push   0x0
c000f105:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f109:	53                   	push   ebx
c000f10a:	e8 17 ff ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c000f10f:	68 ff ff ff 00       	push   0xffffff
c000f114:	53                   	push   ebx
c000f115:	e8 28 ff ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c000f11a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f11e:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f123:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f128:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f12c:	83 c4 20             	add    esp,0x20
c000f12f:	6a 00                	push   0x0
c000f131:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f135:	53                   	push   ebx
c000f136:	e8 eb fe ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c000f13b:	68 ff ff ff 00       	push   0xffffff
c000f140:	53                   	push   ebx
c000f141:	e8 fc fe ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c000f146:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f14a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f14e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f152:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f156:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f15a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f15f:	0d 00 92 c0 00       	or     eax,0xc09200
c000f164:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f168:	89 d8                	mov    eax,ebx
c000f16a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f16e:	80 cc 60             	or     ah,0x60
c000f171:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f175:	83 c4 0c             	add    esp,0xc
c000f178:	89 f8                	mov    eax,edi
c000f17a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17e:	80 cc 60             	or     ah,0x60
c000f181:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f185:	89 c7                	mov    edi,eax
c000f187:	55                   	push   ebp
c000f188:	e8 e9 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f18d:	83 c4 0c             	add    esp,0xc
c000f190:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f194:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f198:	55                   	push   ebp
c000f199:	e8 d8 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f19e:	83 c4 0c             	add    esp,0xc
c000f1a1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a9:	55                   	push   ebp
c000f1aa:	e8 c7 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f1af:	83 c4 0c             	add    esp,0xc
c000f1b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1ba:	53                   	push   ebx
c000f1bb:	51                   	push   ecx
c000f1bc:	55                   	push   ebp
c000f1bd:	e8 b4 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f1c2:	83 c4 0c             	add    esp,0xc
c000f1c5:	57                   	push   edi
c000f1c6:	56                   	push   esi
c000f1c7:	55                   	push   ebp
c000f1c8:	e8 a9 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f1cd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1d0:	e8 e5 fe ff ff       	call   c000f0ba <GDT::flush()>
c000f1d5:	83 c4 4c             	add    esp,0x4c
c000f1d8:	5b                   	pop    ebx
c000f1d9:	5e                   	pop    esi
c000f1da:	5f                   	pop    edi
c000f1db:	5d                   	pop    ebp
c000f1dc:	c3                   	ret    

c000f1dd <idleFunction(void*)>:
c000f1dd:	53                   	push   ebx
c000f1de:	83 ec 08             	sub    esp,0x8
c000f1e1:	e8 48 ec 00 00       	call   c001de2e <unlockScheduler()>
c000f1e6:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c000f1eb:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1f1:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f8:	74 3c                	je     c000f236 <idleFunction(void*)+0x59>
c000f1fa:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f201:	74 33                	je     c000f236 <idleFunction(void*)+0x59>
c000f203:	31 db                	xor    ebx,ebx
c000f205:	52                   	push   edx
c000f206:	52                   	push   edx
c000f207:	68 e1 00 00 00       	push   0xe1
c000f20c:	50                   	push   eax
c000f20d:	e8 de fb ff ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c000f212:	53                   	push   ebx
c000f213:	83 e0 02             	and    eax,0x2
c000f216:	50                   	push   eax
c000f217:	68 e1 00 00 00       	push   0xe1
c000f21c:	ff 35 28 e7 02 c0    	push   DWORD PTR ds:0xc002e728
c000f222:	e8 f5 fb ff ff       	call   c000ee1c <Computer::wrmsr(unsigned int, unsigned long long)>
c000f227:	83 c4 20             	add    esp,0x20
c000f22a:	e8 50 10 ff ff       	call   c000027f <doTPAUSE>
c000f22f:	e8 7c 96 01 00       	call   c00288b0 <idleCommon()>
c000f234:	eb f4                	jmp    c000f22a <idleFunction(void*)+0x4d>
c000f236:	fb                   	sti    
c000f237:	f4                   	hlt    
c000f238:	e8 73 96 01 00       	call   c00288b0 <idleCommon()>
c000f23d:	eb f7                	jmp    c000f236 <idleFunction(void*)+0x59>
c000f23f:	90                   	nop

c000f240 <IDTEntry::IDTEntry(bool)>:
c000f240:	83 ec 04             	sub    esp,0x4
c000f243:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f247:	88 04 24             	mov    BYTE PTR [esp],al
c000f24a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f24e:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f25c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f260:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f263:	83 e2 f0             	and    edx,0xfffffff0
c000f266:	83 ca 0e             	or     edx,0xe
c000f269:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f26c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f270:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f273:	83 e2 ef             	and    edx,0xffffffef
c000f276:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f279:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f27d:	74 04                	je     c000f283 <IDTEntry::IDTEntry(bool)+0x43>
c000f27f:	b2 03                	mov    dl,0x3
c000f281:	eb 02                	jmp    c000f285 <IDTEntry::IDTEntry(bool)+0x45>
c000f283:	b2 00                	mov    dl,0x0
c000f285:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f289:	83 e2 03             	and    edx,0x3
c000f28c:	88 d1                	mov    cl,dl
c000f28e:	c1 e1 05             	shl    ecx,0x5
c000f291:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f294:	83 e2 9f             	and    edx,0xffffff9f
c000f297:	09 ca                	or     edx,ecx
c000f299:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f29c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2a0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2a3:	83 ca 80             	or     edx,0xffffff80
c000f2a6:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a9:	90                   	nop
c000f2aa:	83 c4 04             	add    esp,0x4
c000f2ad:	c3                   	ret    

c000f2ae <IDTEntry::setOffset(unsigned int)>:
c000f2ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2b6:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b9:	c1 e8 10             	shr    eax,0x10
c000f2bc:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2c0:	c3                   	ret    
c000f2c1:	90                   	nop

c000f2c2 <IDT::IDT()>:
c000f2c2:	90                   	nop
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c8:	83 c0 30             	add    eax,0x30
c000f2cb:	c3                   	ret    

c000f2cc <IDT::addEntry(IDTEntry, int)>:
c000f2cc:	53                   	push   ebx
c000f2cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2dd:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2e0:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2e4:	5b                   	pop    ebx
c000f2e5:	c3                   	ret    

c000f2e6 <IDT::addEntry(int, void (*)(), bool)>:
c000f2e6:	53                   	push   ebx
c000f2e7:	83 ec 10             	sub    esp,0x10
c000f2ea:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2ef:	50                   	push   eax
c000f2f0:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2f4:	53                   	push   ebx
c000f2f5:	e8 46 ff ff ff       	call   c000f240 <IDTEntry::IDTEntry(bool)>
c000f2fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2fe:	53                   	push   ebx
c000f2ff:	e8 aa ff ff ff       	call   c000f2ae <IDTEntry::setOffset(unsigned int)>
c000f304:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f308:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f30c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f310:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f314:	e8 b3 ff ff ff       	call   c000f2cc <IDT::addEntry(IDTEntry, int)>
c000f319:	83 c4 30             	add    esp,0x30
c000f31c:	5b                   	pop    ebx
c000f31d:	c3                   	ret    

c000f31e <IDT::flush()>:
c000f31e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f322:	66 c7 05 38 e7 02 c0 ff 07 	mov    WORD PTR ds:0xc002e738,0x7ff
c000f32b:	a3 3a e7 02 c0       	mov    ds:0xc002e73a,eax
c000f330:	0f 01 1d 38 e7 02 c0 	lidtd  ds:0xc002e738
c000f337:	c3                   	ret    

c000f338 <IDT::setup()>:
c000f338:	57                   	push   edi
c000f339:	56                   	push   esi
c000f33a:	53                   	push   ebx
c000f33b:	83 ec 10             	sub    esp,0x10
c000f33e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f342:	6a 00                	push   0x0
c000f344:	68 70 04 00 c0       	push   0xc0000470
c000f349:	6a 00                	push   0x0
c000f34b:	53                   	push   ebx
c000f34c:	e8 95 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f351:	6a 00                	push   0x0
c000f353:	68 80 04 00 c0       	push   0xc0000480
c000f358:	6a 01                	push   0x1
c000f35a:	53                   	push   ebx
c000f35b:	e8 86 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	83 c4 20             	add    esp,0x20
c000f363:	6a 00                	push   0x0
c000f365:	68 8a 04 00 c0       	push   0xc000048a
c000f36a:	6a 02                	push   0x2
c000f36c:	53                   	push   ebx
c000f36d:	e8 74 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f372:	6a 00                	push   0x0
c000f374:	68 94 04 00 c0       	push   0xc0000494
c000f379:	6a 03                	push   0x3
c000f37b:	53                   	push   ebx
c000f37c:	e8 65 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f381:	83 c4 20             	add    esp,0x20
c000f384:	6a 00                	push   0x0
c000f386:	68 9e 04 00 c0       	push   0xc000049e
c000f38b:	6a 04                	push   0x4
c000f38d:	53                   	push   ebx
c000f38e:	e8 53 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f393:	6a 00                	push   0x0
c000f395:	68 a8 04 00 c0       	push   0xc00004a8
c000f39a:	6a 05                	push   0x5
c000f39c:	53                   	push   ebx
c000f39d:	e8 44 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3a2:	83 c4 20             	add    esp,0x20
c000f3a5:	6a 00                	push   0x0
c000f3a7:	68 b2 04 00 c0       	push   0xc00004b2
c000f3ac:	6a 06                	push   0x6
c000f3ae:	53                   	push   ebx
c000f3af:	e8 32 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3b4:	6a 00                	push   0x0
c000f3b6:	68 bc 04 00 c0       	push   0xc00004bc
c000f3bb:	6a 07                	push   0x7
c000f3bd:	53                   	push   ebx
c000f3be:	e8 23 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3c3:	83 c4 20             	add    esp,0x20
c000f3c6:	6a 00                	push   0x0
c000f3c8:	68 c6 04 00 c0       	push   0xc00004c6
c000f3cd:	6a 08                	push   0x8
c000f3cf:	53                   	push   ebx
c000f3d0:	e8 11 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3d5:	6a 00                	push   0x0
c000f3d7:	68 ce 04 00 c0       	push   0xc00004ce
c000f3dc:	6a 09                	push   0x9
c000f3de:	53                   	push   ebx
c000f3df:	e8 02 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3e4:	83 c4 20             	add    esp,0x20
c000f3e7:	6a 00                	push   0x0
c000f3e9:	68 d8 04 00 c0       	push   0xc00004d8
c000f3ee:	6a 0a                	push   0xa
c000f3f0:	53                   	push   ebx
c000f3f1:	e8 f0 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3f6:	6a 00                	push   0x0
c000f3f8:	68 e0 04 00 c0       	push   0xc00004e0
c000f3fd:	6a 0b                	push   0xb
c000f3ff:	53                   	push   ebx
c000f400:	e8 e1 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f405:	83 c4 20             	add    esp,0x20
c000f408:	6a 00                	push   0x0
c000f40a:	68 e8 04 00 c0       	push   0xc00004e8
c000f40f:	6a 0c                	push   0xc
c000f411:	53                   	push   ebx
c000f412:	e8 cf fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f417:	6a 00                	push   0x0
c000f419:	68 f0 04 00 c0       	push   0xc00004f0
c000f41e:	6a 0d                	push   0xd
c000f420:	53                   	push   ebx
c000f421:	e8 c0 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f426:	83 c4 20             	add    esp,0x20
c000f429:	6a 00                	push   0x0
c000f42b:	68 f8 04 00 c0       	push   0xc00004f8
c000f430:	6a 0e                	push   0xe
c000f432:	53                   	push   ebx
c000f433:	e8 ae fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f438:	6a 00                	push   0x0
c000f43a:	68 00 05 00 c0       	push   0xc0000500
c000f43f:	6a 0f                	push   0xf
c000f441:	53                   	push   ebx
c000f442:	e8 9f fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f447:	83 c4 20             	add    esp,0x20
c000f44a:	6a 00                	push   0x0
c000f44c:	68 0a 05 00 c0       	push   0xc000050a
c000f451:	6a 10                	push   0x10
c000f453:	53                   	push   ebx
c000f454:	e8 8d fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f459:	6a 00                	push   0x0
c000f45b:	68 14 05 00 c0       	push   0xc0000514
c000f460:	6a 11                	push   0x11
c000f462:	53                   	push   ebx
c000f463:	e8 7e fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f468:	83 c4 20             	add    esp,0x20
c000f46b:	6a 00                	push   0x0
c000f46d:	68 1e 05 00 c0       	push   0xc000051e
c000f472:	6a 12                	push   0x12
c000f474:	53                   	push   ebx
c000f475:	e8 6c fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f47a:	6a 01                	push   0x1
c000f47c:	68 b8 05 00 c0       	push   0xc00005b8
c000f481:	6a 60                	push   0x60
c000f483:	53                   	push   ebx
c000f484:	e8 5d fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f489:	83 c4 20             	add    esp,0x20
c000f48c:	6a 00                	push   0x0
c000f48e:	68 bf 05 00 c0       	push   0xc00005bf
c000f493:	6a 20                	push   0x20
c000f495:	53                   	push   ebx
c000f496:	e8 4b fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f49b:	6a 00                	push   0x0
c000f49d:	68 aa 05 00 c0       	push   0xc00005aa
c000f4a2:	6a 21                	push   0x21
c000f4a4:	53                   	push   ebx
c000f4a5:	e8 3c fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4aa:	83 c4 20             	add    esp,0x20
c000f4ad:	6a 00                	push   0x0
c000f4af:	68 b1 05 00 c0       	push   0xc00005b1
c000f4b4:	6a 22                	push   0x22
c000f4b6:	53                   	push   ebx
c000f4b7:	e8 2a fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4bc:	6a 00                	push   0x0
c000f4be:	68 28 05 00 c0       	push   0xc0000528
c000f4c3:	6a 23                	push   0x23
c000f4c5:	53                   	push   ebx
c000f4c6:	e8 1b fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4cb:	83 c4 20             	add    esp,0x20
c000f4ce:	6a 00                	push   0x0
c000f4d0:	68 32 05 00 c0       	push   0xc0000532
c000f4d5:	6a 24                	push   0x24
c000f4d7:	53                   	push   ebx
c000f4d8:	e8 09 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4dd:	6a 00                	push   0x0
c000f4df:	68 3c 05 00 c0       	push   0xc000053c
c000f4e4:	6a 25                	push   0x25
c000f4e6:	53                   	push   ebx
c000f4e7:	e8 fa fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4ec:	83 c4 20             	add    esp,0x20
c000f4ef:	6a 00                	push   0x0
c000f4f1:	68 46 05 00 c0       	push   0xc0000546
c000f4f6:	6a 26                	push   0x26
c000f4f8:	53                   	push   ebx
c000f4f9:	e8 e8 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4fe:	6a 00                	push   0x0
c000f500:	68 50 05 00 c0       	push   0xc0000550
c000f505:	6a 27                	push   0x27
c000f507:	53                   	push   ebx
c000f508:	e8 d9 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f50d:	83 c4 20             	add    esp,0x20
c000f510:	6a 00                	push   0x0
c000f512:	68 5a 05 00 c0       	push   0xc000055a
c000f517:	6a 28                	push   0x28
c000f519:	53                   	push   ebx
c000f51a:	e8 c7 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f51f:	6a 00                	push   0x0
c000f521:	68 64 05 00 c0       	push   0xc0000564
c000f526:	6a 29                	push   0x29
c000f528:	53                   	push   ebx
c000f529:	e8 b8 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f52e:	83 c4 20             	add    esp,0x20
c000f531:	6a 00                	push   0x0
c000f533:	68 6e 05 00 c0       	push   0xc000056e
c000f538:	6a 2a                	push   0x2a
c000f53a:	53                   	push   ebx
c000f53b:	e8 a6 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f540:	6a 00                	push   0x0
c000f542:	68 78 05 00 c0       	push   0xc0000578
c000f547:	6a 2b                	push   0x2b
c000f549:	53                   	push   ebx
c000f54a:	e8 97 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f54f:	83 c4 20             	add    esp,0x20
c000f552:	6a 00                	push   0x0
c000f554:	68 82 05 00 c0       	push   0xc0000582
c000f559:	6a 2c                	push   0x2c
c000f55b:	53                   	push   ebx
c000f55c:	e8 85 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f561:	6a 00                	push   0x0
c000f563:	68 8c 05 00 c0       	push   0xc000058c
c000f568:	6a 2d                	push   0x2d
c000f56a:	53                   	push   ebx
c000f56b:	e8 76 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f570:	83 c4 20             	add    esp,0x20
c000f573:	6a 00                	push   0x0
c000f575:	68 96 05 00 c0       	push   0xc0000596
c000f57a:	6a 2e                	push   0x2e
c000f57c:	53                   	push   ebx
c000f57d:	e8 64 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f582:	6a 00                	push   0x0
c000f584:	68 a0 05 00 c0       	push   0xc00005a0
c000f589:	6a 2f                	push   0x2f
c000f58b:	53                   	push   ebx
c000f58c:	e8 55 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f591:	83 c4 20             	add    esp,0x20
c000f594:	6a 00                	push   0x0
c000f596:	68 f5 05 00 c0       	push   0xc00005f5
c000f59b:	6a 30                	push   0x30
c000f59d:	53                   	push   ebx
c000f59e:	e8 43 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5a3:	6a 00                	push   0x0
c000f5a5:	68 ff 05 00 c0       	push   0xc00005ff
c000f5aa:	6a 31                	push   0x31
c000f5ac:	53                   	push   ebx
c000f5ad:	e8 34 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5b2:	83 c4 20             	add    esp,0x20
c000f5b5:	6a 00                	push   0x0
c000f5b7:	68 09 06 00 c0       	push   0xc0000609
c000f5bc:	6a 32                	push   0x32
c000f5be:	53                   	push   ebx
c000f5bf:	e8 22 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5c4:	6a 00                	push   0x0
c000f5c6:	68 13 06 00 c0       	push   0xc0000613
c000f5cb:	6a 33                	push   0x33
c000f5cd:	53                   	push   ebx
c000f5ce:	e8 13 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5d3:	83 c4 20             	add    esp,0x20
c000f5d6:	6a 00                	push   0x0
c000f5d8:	68 1d 06 00 c0       	push   0xc000061d
c000f5dd:	6a 34                	push   0x34
c000f5df:	53                   	push   ebx
c000f5e0:	e8 01 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5e5:	6a 00                	push   0x0
c000f5e7:	68 27 06 00 c0       	push   0xc0000627
c000f5ec:	6a 35                	push   0x35
c000f5ee:	53                   	push   ebx
c000f5ef:	e8 f2 fc ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5f4:	83 c4 20             	add    esp,0x20
c000f5f7:	6a 00                	push   0x0
c000f5f9:	68 31 06 00 c0       	push   0xc0000631
c000f5fe:	6a 36                	push   0x36
c000f600:	53                   	push   ebx
c000f601:	e8 e0 fc ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f606:	6a 00                	push   0x0
c000f608:	68 3b 06 00 c0       	push   0xc000063b
c000f60d:	6a 37                	push   0x37
c000f60f:	53                   	push   ebx
c000f610:	e8 d1 fc ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f615:	83 c4 20             	add    esp,0x20
c000f618:	e8 11 26 00 00       	call   c0011c2e <Virt::getAKernelVAS()>
c000f61d:	52                   	push   edx
c000f61e:	6a 03                	push   0x3
c000f620:	6a 02                	push   0x2
c000f622:	50                   	push   eax
c000f623:	e8 f4 2c 00 00       	call   c001231c <VAS::allocatePages(int, int)>
c000f628:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f62f:	89 c6                	mov    esi,eax
c000f631:	e8 15 02 00 00       	call   c000f84b <malloc>
c000f636:	81 c6 00 20 00 00    	add    esi,0x2000
c000f63c:	89 04 24             	mov    DWORD PTR [esp],eax
c000f63f:	89 c7                	mov    edi,eax
c000f641:	e8 da 1c 00 00       	call   c0011320 <TSS::TSS()>
c000f646:	83 c4 0c             	add    esp,0xc
c000f649:	68 c6 04 00 c0       	push   0xc00004c6
c000f64e:	56                   	push   esi
c000f64f:	57                   	push   edi
c000f650:	e8 0b 1d 00 00       	call   c0011360 <TSS::setup(unsigned long, unsigned long)>
c000f655:	59                   	pop    ecx
c000f656:	89 c6                	mov    esi,eax
c000f658:	5f                   	pop    edi
c000f659:	6a 00                	push   0x0
c000f65b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f65f:	50                   	push   eax
c000f660:	e8 db fb ff ff       	call   c000f240 <IDTEntry::IDTEntry(bool)>
c000f665:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f669:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f66e:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f675:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f67b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f67f:	80 ce 05             	or     dh,0x5
c000f682:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f685:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f689:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f68d:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f690:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f693:	e8 86 fc ff ff       	call   c000f31e <IDT::flush()>
c000f698:	83 c4 20             	add    esp,0x20
c000f69b:	5b                   	pop    ebx
c000f69c:	5e                   	pop    esi
c000f69d:	5f                   	pop    edi
c000f69e:	c3                   	ret    

c000f69f <sbrk>:
c000f69f:	55                   	push   ebp
c000f6a0:	57                   	push   edi
c000f6a1:	56                   	push   esi
c000f6a2:	53                   	push   ebx
c000f6a3:	83 ec 1c             	sub    esp,0x1c
c000f6a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6aa:	85 c0                	test   eax,eax
c000f6ac:	74 3e                	je     c000f6ec <sbrk+0x4d>
c000f6ae:	78 43                	js     c000f6f3 <sbrk+0x54>
c000f6b0:	8b 15 28 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e728
c000f6b6:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6bc:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6c2:	83 e2 01             	and    edx,0x1
c000f6c5:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c9:	8b 0d 58 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d658
c000f6cf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6d3:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d8:	89 c2                	mov    edx,eax
c000f6da:	78 2f                	js     c000f70b <sbrk+0x6c>
c000f6dc:	c1 fa 0c             	sar    edx,0xc
c000f6df:	89 d7                	mov    edi,edx
c000f6e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6e5:	be 00 00 00 00       	mov    esi,0x0
c000f6ea:	eb 36                	jmp    c000f722 <sbrk+0x83>
c000f6ec:	a1 58 d6 02 c0       	mov    eax,ds:0xc002d658
c000f6f1:	eb 74                	jmp    c000f767 <sbrk+0xc8>
c000f6f3:	83 ec 08             	sub    esp,0x8
c000f6f6:	50                   	push   eax
c000f6f7:	68 e8 a3 02 c0       	push   0xc002a3e8
c000f6fc:	e8 c2 36 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000f701:	83 c4 10             	add    esp,0x10
c000f704:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f709:	eb 5c                	jmp    c000f767 <sbrk+0xc8>
c000f70b:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f711:	eb c9                	jmp    c000f6dc <sbrk+0x3d>
c000f713:	81 05 58 d6 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d658,0x1000
c000f71d:	46                   	inc    esi
c000f71e:	39 f7                	cmp    edi,esi
c000f720:	74 34                	je     c000f756 <sbrk+0xb7>
c000f722:	e8 07 25 00 00       	call   c0011c2e <Virt::getAKernelVAS()>
c000f727:	89 c3                	mov    ebx,eax
c000f729:	8b 2d 58 d6 02 c0    	mov    ebp,DWORD PTR ds:0xc002d658
c000f72f:	e8 83 07 00 00       	call   c000feb7 <Phys::allocatePage()>
c000f734:	68 01 0c 00 00       	push   0xc01
c000f739:	55                   	push   ebp
c000f73a:	50                   	push   eax
c000f73b:	53                   	push   ebx
c000f73c:	e8 db 2a 00 00       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c000f741:	83 c4 10             	add    esp,0x10
c000f744:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f749:	74 c8                	je     c000f713 <sbrk+0x74>
c000f74b:	8b 1d 58 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d658
c000f751:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f754:	eb bd                	jmp    c000f713 <sbrk+0x74>
c000f756:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f75b:	75 12                	jne    c000f76f <sbrk+0xd0>
c000f75d:	0f 20 d8             	mov    eax,cr3
c000f760:	0f 22 d8             	mov    cr3,eax
c000f763:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f767:	83 c4 1c             	add    esp,0x1c
c000f76a:	5b                   	pop    ebx
c000f76b:	5e                   	pop    esi
c000f76c:	5f                   	pop    edi
c000f76d:	5d                   	pop    ebp
c000f76e:	c3                   	ret    
c000f76f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f773:	89 cb                	mov    ebx,ecx
c000f775:	c1 eb 0a             	shr    ebx,0xa
c000f778:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f77e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f784:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f788:	c1 e0 0c             	shl    eax,0xc
c000f78b:	01 c8                	add    eax,ecx
c000f78d:	c1 e8 0a             	shr    eax,0xa
c000f790:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f795:	2d 00 00 40 00       	sub    eax,0x400000
c000f79a:	39 c3                	cmp    ebx,eax
c000f79c:	77 c5                	ja     c000f763 <sbrk+0xc4>
c000f79e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7a1:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f7a7:	39 d8                	cmp    eax,ebx
c000f7a9:	73 f3                	jae    c000f79e <sbrk+0xff>
c000f7ab:	eb b6                	jmp    c000f763 <sbrk+0xc4>

c000f7ad <mmap>:
c000f7ad:	83 ec 18             	sub    esp,0x18
c000f7b0:	68 18 a4 02 c0       	push   0xc002a418
c000f7b5:	e8 d5 ad 00 00       	call   c001a58f <Krnl::panic(char const*)>
c000f7ba:	b8 00 00 00 00       	mov    eax,0x0
c000f7bf:	83 c4 1c             	add    esp,0x1c
c000f7c2:	c3                   	ret    

c000f7c3 <munmap>:
c000f7c3:	83 ec 18             	sub    esp,0x18
c000f7c6:	68 1d a4 02 c0       	push   0xc002a41d
c000f7cb:	e8 bf ad 00 00       	call   c001a58f <Krnl::panic(char const*)>
c000f7d0:	b8 00 00 00 00       	mov    eax,0x0
c000f7d5:	83 c4 1c             	add    esp,0x1c
c000f7d8:	c3                   	ret    

c000f7d9 <liballoc_lock()>:
c000f7d9:	83 ec 0c             	sub    esp,0xc
c000f7dc:	e8 4b e6 00 00       	call   c001de2c <lockScheduler()>
c000f7e1:	b8 00 00 00 00       	mov    eax,0x0
c000f7e6:	83 c4 0c             	add    esp,0xc
c000f7e9:	c3                   	ret    

c000f7ea <liballoc_unlock()>:
c000f7ea:	83 ec 0c             	sub    esp,0xc
c000f7ed:	e8 3c e6 00 00       	call   c001de2e <unlockScheduler()>
c000f7f2:	b8 00 00 00 00       	mov    eax,0x0
c000f7f7:	83 c4 0c             	add    esp,0xc
c000f7fa:	c3                   	ret    

c000f7fb <liballoc_alloc(int)>:
c000f7fb:	83 ec 0c             	sub    esp,0xc
c000f7fe:	e8 2b 24 00 00       	call   c0011c2e <Virt::getAKernelVAS()>
c000f803:	83 ec 04             	sub    esp,0x4
c000f806:	68 01 08 00 00       	push   0x801
c000f80b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f80f:	50                   	push   eax
c000f810:	e8 07 2b 00 00       	call   c001231c <VAS::allocatePages(int, int)>
c000f815:	83 c4 1c             	add    esp,0x1c
c000f818:	c3                   	ret    

c000f819 <liballoc_free(void*, int)>:
c000f819:	83 ec 0c             	sub    esp,0xc
c000f81c:	e8 0d 24 00 00       	call   c0011c2e <Virt::getAKernelVAS()>
c000f821:	83 ec 08             	sub    esp,0x8
c000f824:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f828:	50                   	push   eax
c000f829:	e8 aa 27 00 00       	call   c0011fd8 <VAS::freeAllocatedPages(unsigned long)>
c000f82e:	b8 00 00 00 00       	mov    eax,0x0
c000f833:	83 c4 1c             	add    esp,0x1c
c000f836:	c3                   	ret    

c000f837 <realloc>:
c000f837:	83 ec 14             	sub    esp,0x14
c000f83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f842:	e8 15 1e ff ff       	call   c000165c <dlrealloc>
c000f847:	83 c4 1c             	add    esp,0x1c
c000f84a:	c3                   	ret    

c000f84b <malloc>:
c000f84b:	83 ec 18             	sub    esp,0x18
c000f84e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f852:	e8 c8 18 ff ff       	call   c000111f <dlmalloc>
c000f857:	83 c4 1c             	add    esp,0x1c
c000f85a:	c3                   	ret    

c000f85b <free>:
c000f85b:	83 ec 18             	sub    esp,0x18
c000f85e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f862:	e8 5d 15 ff ff       	call   c0000dc4 <dlfree>
c000f867:	83 c4 1c             	add    esp,0x1c
c000f86a:	c3                   	ret    

c000f86b <rfree>:
c000f86b:	83 ec 18             	sub    esp,0x18
c000f86e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f872:	e8 4d 15 ff ff       	call   c0000dc4 <dlfree>
c000f877:	83 c4 1c             	add    esp,0x1c
c000f87a:	c3                   	ret    

c000f87b <calloc>:
c000f87b:	56                   	push   esi
c000f87c:	53                   	push   ebx
c000f87d:	83 ec 10             	sub    esp,0x10
c000f880:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f884:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f889:	53                   	push   ebx
c000f88a:	e8 bc ff ff ff       	call   c000f84b <malloc>
c000f88f:	89 c6                	mov    esi,eax
c000f891:	83 c4 0c             	add    esp,0xc
c000f894:	53                   	push   ebx
c000f895:	6a 00                	push   0x0
c000f897:	50                   	push   eax
c000f898:	e8 e3 0e ff ff       	call   c0000780 <memset>
c000f89d:	89 f0                	mov    eax,esi
c000f89f:	83 c4 14             	add    esp,0x14
c000f8a2:	5b                   	pop    ebx
c000f8a3:	5e                   	pop    esi
c000f8a4:	c3                   	ret    

c000f8a5 <hwTextMode_loadInData(VgaText*)>:
c000f8a5:	55                   	push   ebp
c000f8a6:	a1 60 d6 02 c0       	mov    eax,ds:0xc002d660
c000f8ab:	57                   	push   edi
c000f8ac:	56                   	push   esi
c000f8ad:	53                   	push   ebx
c000f8ae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8b2:	8b 57 10             	mov    edx,DWORD PTR [edi+0x10]
c000f8b5:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c000f8b8:	85 d2                	test   edx,edx
c000f8ba:	7e 29                	jle    c000f8e5 <hwTextMode_loadInData(VgaText*)+0x40>
c000f8bc:	8d a8 a0 00 00 00    	lea    ebp,[eax+0xa0]
c000f8c2:	31 f6                	xor    esi,esi
c000f8c4:	29 cd                	sub    ebp,ecx
c000f8c6:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c9:	31 c0                	xor    eax,eax
c000f8cb:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8cf:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8d3:	40                   	inc    eax
c000f8d4:	83 f8 50             	cmp    eax,0x50
c000f8d7:	75 f2                	jne    c000f8cb <hwTextMode_loadInData(VgaText*)+0x26>
c000f8d9:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8df:	46                   	inc    esi
c000f8e0:	39 77 10             	cmp    DWORD PTR [edi+0x10],esi
c000f8e3:	7f e1                	jg     c000f8c6 <hwTextMode_loadInData(VgaText*)+0x21>
c000f8e5:	5b                   	pop    ebx
c000f8e6:	5e                   	pop    esi
c000f8e7:	5f                   	pop    edi
c000f8e8:	5d                   	pop    ebp
c000f8e9:	c3                   	ret    

c000f8ea <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8ea:	55                   	push   ebp
c000f8eb:	80 3d c0 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e7c0,0x0
c000f8f2:	57                   	push   edi
c000f8f3:	56                   	push   esi
c000f8f4:	53                   	push   ebx
c000f8f5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f9:	75 44                	jne    c000f93f <hwTextMode_loadInTitle(VgaText*, char*)+0x55>
c000f8fb:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f8fe:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f901:	8b 15 60 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d660
c000f907:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90b:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f911:	eb 08                	jmp    c000f91b <hwTextMode_loadInTitle(VgaText*, char*)+0x31>
c000f913:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f916:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f919:	89 da                	mov    edx,ebx
c000f91b:	83 e5 0f             	and    ebp,0xf
c000f91e:	c1 e0 04             	shl    eax,0x4
c000f921:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f924:	0f b6 c0             	movzx  eax,al
c000f927:	41                   	inc    ecx
c000f928:	09 e8                	or     eax,ebp
c000f92a:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f92e:	c1 e0 08             	shl    eax,0x8
c000f931:	09 e8                	or     eax,ebp
c000f933:	39 fb                	cmp    ebx,edi
c000f935:	66 89 02             	mov    WORD PTR [edx],ax
c000f938:	75 d9                	jne    c000f913 <hwTextMode_loadInTitle(VgaText*, char*)+0x29>
c000f93a:	5b                   	pop    ebx
c000f93b:	5e                   	pop    esi
c000f93c:	5f                   	pop    edi
c000f93d:	5d                   	pop    ebp
c000f93e:	c3                   	ret    
c000f93f:	c7 46 3c 02 00 00 00 	mov    DWORD PTR [esi+0x3c],0x2
c000f946:	c7 46 38 00 00 00 00 	mov    DWORD PTR [esi+0x38],0x0
c000f94d:	31 c0                	xor    eax,eax
c000f94f:	bd 02 00 00 00       	mov    ebp,0x2
c000f954:	eb ab                	jmp    c000f901 <hwTextMode_loadInTitle(VgaText*, char*)+0x17>

c000f956 <hwTextMode_showCursor(VgaText*, bool)>:
c000f956:	56                   	push   esi
c000f957:	80 3d c0 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e7c0,0x0
c000f95e:	53                   	push   ebx
c000f95f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f963:	75 36                	jne    c000f99b <hwTextMode_showCursor(VgaText*, bool)+0x45>
c000f965:	84 c0                	test   al,al
c000f967:	74 35                	je     c000f99e <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f969:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f96e:	b0 0a                	mov    al,0xa
c000f970:	89 da                	mov    edx,ebx
c000f972:	ee                   	out    dx,al
c000f973:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f978:	89 ca                	mov    edx,ecx
c000f97a:	ec                   	in     al,dx
c000f97b:	b2 0f                	mov    dl,0xf
c000f97d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f981:	83 e0 c0             	and    eax,0xffffffc0
c000f984:	2b 56 1c             	sub    edx,DWORD PTR [esi+0x1c]
c000f987:	09 d0                	or     eax,edx
c000f989:	89 ca                	mov    edx,ecx
c000f98b:	ee                   	out    dx,al
c000f98c:	b0 0b                	mov    al,0xb
c000f98e:	89 da                	mov    edx,ebx
c000f990:	ee                   	out    dx,al
c000f991:	89 ca                	mov    edx,ecx
c000f993:	ec                   	in     al,dx
c000f994:	83 e0 e0             	and    eax,0xffffffe0
c000f997:	83 c8 0f             	or     eax,0xf
c000f99a:	ee                   	out    dx,al
c000f99b:	5b                   	pop    ebx
c000f99c:	5e                   	pop    esi
c000f99d:	c3                   	ret    
c000f99e:	b0 0a                	mov    al,0xa
c000f9a0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9a5:	ee                   	out    dx,al
c000f9a6:	b0 20                	mov    al,0x20
c000f9a8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9ad:	ee                   	out    dx,al
c000f9ae:	5b                   	pop    ebx
c000f9af:	5e                   	pop    esi
c000f9b0:	c3                   	ret    

c000f9b1 <hwTextMode_update(VgaText*)>:
c000f9b1:	c3                   	ret    

c000f9b2 <hwTextMode_updateCursor(VgaText*)>:
c000f9b2:	56                   	push   esi
c000f9b3:	80 3d c0 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e7c0,0x0
c000f9ba:	53                   	push   ebx
c000f9bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9bf:	75 36                	jne    c000f9f7 <hwTextMode_updateCursor(VgaText*)+0x45>
c000f9c1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9c6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9cb:	89 f2                	mov    edx,esi
c000f9cd:	2b 48 10             	sub    ecx,DWORD PTR [eax+0x10]
c000f9d0:	03 48 18             	add    ecx,DWORD PTR [eax+0x18]
c000f9d3:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9d6:	c1 e1 04             	shl    ecx,0x4
c000f9d9:	03 48 14             	add    ecx,DWORD PTR [eax+0x14]
c000f9dc:	b0 0f                	mov    al,0xf
c000f9de:	ee                   	out    dx,al
c000f9df:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9e4:	88 c8                	mov    al,cl
c000f9e6:	89 da                	mov    edx,ebx
c000f9e8:	ee                   	out    dx,al
c000f9e9:	b0 0e                	mov    al,0xe
c000f9eb:	89 f2                	mov    edx,esi
c000f9ed:	ee                   	out    dx,al
c000f9ee:	89 c8                	mov    eax,ecx
c000f9f0:	89 da                	mov    edx,ebx
c000f9f2:	66 c1 e8 08          	shr    ax,0x8
c000f9f6:	ee                   	out    dx,al
c000f9f7:	5b                   	pop    ebx
c000f9f8:	5e                   	pop    esi
c000f9f9:	c3                   	ret    

c000f9fa <hwTextMode_disableBlink(VgaText*, bool)>:
c000f9fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f9fe:	80 3d c0 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e7c0,0x0
c000fa05:	75 38                	jne    c000fa3f <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa07:	ba da 03 00 00       	mov    edx,0x3da
c000fa0c:	84 c0                	test   al,al
c000fa0e:	75 18                	jne    c000fa28 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa10:	ec                   	in     al,dx
c000fa11:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa16:	b0 30                	mov    al,0x30
c000fa18:	89 ca                	mov    edx,ecx
c000fa1a:	ee                   	out    dx,al
c000fa1b:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa20:	ec                   	in     al,dx
c000fa21:	83 c8 08             	or     eax,0x8
c000fa24:	89 ca                	mov    edx,ecx
c000fa26:	ee                   	out    dx,al
c000fa27:	c3                   	ret    
c000fa28:	ec                   	in     al,dx
c000fa29:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2e:	b0 30                	mov    al,0x30
c000fa30:	89 ca                	mov    edx,ecx
c000fa32:	ee                   	out    dx,al
c000fa33:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa38:	ec                   	in     al,dx
c000fa39:	83 e0 f7             	and    eax,0xfffffff7
c000fa3c:	89 ca                	mov    edx,ecx
c000fa3e:	ee                   	out    dx,al
c000fa3f:	c3                   	ret    

c000fa40 <hwTextMode_scrollScreen(VgaText*)>:
c000fa40:	55                   	push   ebp
c000fa41:	57                   	push   edi
c000fa42:	56                   	push   esi
c000fa43:	53                   	push   ebx
c000fa44:	83 ec 1c             	sub    esp,0x1c
c000fa47:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa4b:	80 3d c0 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e7c0,0x0
c000fa52:	74 0e                	je     c000fa62 <hwTextMode_scrollScreen(VgaText*)+0x22>
c000fa54:	c7 41 34 02 00 00 00 	mov    DWORD PTR [ecx+0x34],0x2
c000fa5b:	c7 41 30 00 00 00 00 	mov    DWORD PTR [ecx+0x30],0x0
c000fa62:	a1 60 d6 02 c0       	mov    eax,ds:0xc002d660
c000fa67:	bd 02 00 00 00       	mov    ebp,0x2
c000fa6c:	05 a0 00 00 00       	add    eax,0xa0
c000fa71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa75:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa79:	31 c0                	xor    eax,eax
c000fa7b:	eb 0b                	jmp    c000fa88 <hwTextMode_scrollScreen(VgaText*)+0x48>
c000fa7d:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fa83:	74 51                	je     c000fad6 <hwTextMode_scrollScreen(VgaText*)+0x96>
c000fa85:	43                   	inc    ebx
c000fa86:	89 f0                	mov    eax,esi
c000fa88:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fa8e:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fa94:	88 13                	mov    BYTE PTR [ebx],dl
c000fa96:	8d 70 01             	lea    esi,[eax+0x1]
c000fa99:	83 fd 18             	cmp    ebp,0x18
c000fa9c:	75 df                	jne    c000fa7d <hwTextMode_scrollScreen(VgaText*)+0x3d>
c000fa9e:	a8 01                	test   al,0x1
c000faa0:	75 13                	jne    c000fab5 <hwTextMode_scrollScreen(VgaText*)+0x75>
c000faa2:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000faa5:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faab:	75 d8                	jne    c000fa85 <hwTextMode_scrollScreen(VgaText*)+0x45>
c000faad:	83 c4 1c             	add    esp,0x1c
c000fab0:	5b                   	pop    ebx
c000fab1:	5e                   	pop    esi
c000fab2:	5f                   	pop    edi
c000fab3:	5d                   	pop    ebp
c000fab4:	c3                   	ret    
c000fab5:	83 ec 08             	sub    esp,0x8
c000fab8:	0f b6 41 30          	movzx  eax,BYTE PTR [ecx+0x30]
c000fabc:	50                   	push   eax
c000fabd:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fac1:	0f b6 41 34          	movzx  eax,BYTE PTR [ecx+0x34]
c000fac5:	50                   	push   eax
c000fac6:	e8 09 0c 00 00       	call   c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>
c000facb:	83 c4 10             	add    esp,0x10
c000face:	88 07                	mov    BYTE PTR [edi],al
c000fad0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fad4:	eb cf                	jmp    c000faa5 <hwTextMode_scrollScreen(VgaText*)+0x65>
c000fad6:	45                   	inc    ebp
c000fad7:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fadf:	eb 94                	jmp    c000fa75 <hwTextMode_scrollScreen(VgaText*)+0x35>

c000fae1 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fae1:	57                   	push   edi
c000fae2:	80 3d c0 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e7c0,0x0
c000fae9:	56                   	push   esi
c000faea:	53                   	push   ebx
c000faeb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000faef:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000faf3:	75 62                	jne    c000fb57 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x76>
c000faf5:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fafa:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000faff:	83 ec 08             	sub    esp,0x8
c000fb02:	52                   	push   edx
c000fb03:	50                   	push   eax
c000fb04:	e8 cb 0b 00 00       	call   c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb09:	5a                   	pop    edx
c000fb0a:	0f b6 c0             	movzx  eax,al
c000fb0d:	59                   	pop    ecx
c000fb0e:	50                   	push   eax
c000fb0f:	0f be c3             	movsx  eax,bl
c000fb12:	50                   	push   eax
c000fb13:	e8 62 0c 00 00       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c000fb18:	83 c4 10             	add    esp,0x10
c000fb1b:	8b 35 60 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d660
c000fb21:	80 3d c0 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e7c0,0x0
c000fb28:	74 07                	je     c000fb31 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb2a:	66 0f be c3          	movsx  ax,bl
c000fb2e:	80 cc 02             	or     ah,0x2
c000fb31:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb35:	ba 19 00 00 00       	mov    edx,0x19
c000fb3a:	2b 51 10             	sub    edx,DWORD PTR [ecx+0x10]
c000fb3d:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb40:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb43:	c1 e1 04             	shl    ecx,0x4
c000fb46:	c1 e2 04             	shl    edx,0x4
c000fb49:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb4d:	01 ca                	add    edx,ecx
c000fb4f:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb53:	5b                   	pop    ebx
c000fb54:	5e                   	pop    esi
c000fb55:	5f                   	pop    edi
c000fb56:	c3                   	ret    
c000fb57:	b8 02 00 00 00       	mov    eax,0x2
c000fb5c:	31 d2                	xor    edx,edx
c000fb5e:	eb 9f                	jmp    c000faff <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb60 <setupTextMode()>:
c000fb60:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb65:	83 e0 30             	and    eax,0x30
c000fb68:	66 83 f8 30          	cmp    ax,0x30
c000fb6c:	75 11                	jne    c000fb7f <setupTextMode()+0x1f>
c000fb6e:	81 2d 60 d6 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d660,0x8000
c000fb78:	c6 05 c0 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e7c0,0x1
c000fb7f:	c7 05 f8 e7 02 c0 fa f9 00 c0 	mov    DWORD PTR ds:0xc002e7f8,0xc000f9fa
c000fb89:	c7 05 e4 e7 02 c0 a5 f8 00 c0 	mov    DWORD PTR ds:0xc002e7e4,0xc000f8a5
c000fb93:	c7 05 e0 e7 02 c0 ea f8 00 c0 	mov    DWORD PTR ds:0xc002e7e0,0xc000f8ea
c000fb9d:	c7 05 ec e7 02 c0 40 fa 00 c0 	mov    DWORD PTR ds:0xc002e7ec,0xc000fa40
c000fba7:	c7 05 f4 e7 02 c0 56 f9 00 c0 	mov    DWORD PTR ds:0xc002e7f4,0xc000f956
c000fbb1:	c7 05 e8 e7 02 c0 b1 f9 00 c0 	mov    DWORD PTR ds:0xc002e7e8,0xc000f9b1
c000fbbb:	c7 05 f0 e7 02 c0 b2 f9 00 c0 	mov    DWORD PTR ds:0xc002e7f0,0xc000f9b2
c000fbc5:	c7 05 fc e7 02 c0 e1 fa 00 c0 	mov    DWORD PTR ds:0xc002e7fc,0xc000fae1
c000fbcf:	c3                   	ret    

c000fbd0 <kernel_main>:
c000fbd0:	57                   	push   edi
c000fbd1:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbd6:	56                   	push   esi
c000fbd7:	89 fa                	mov    edx,edi
c000fbd9:	53                   	push   ebx
c000fbda:	31 f6                	xor    esi,esi
c000fbdc:	83 ec 2c             	sub    esp,0x2c
c000fbdf:	89 f0                	mov    eax,esi
c000fbe1:	ee                   	out    dx,al
c000fbe2:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fbe7:	b0 80                	mov    al,0x80
c000fbe9:	89 da                	mov    edx,ebx
c000fbeb:	ee                   	out    dx,al
c000fbec:	b1 03                	mov    cl,0x3
c000fbee:	ba f8 03 00 00       	mov    edx,0x3f8
c000fbf3:	88 c8                	mov    al,cl
c000fbf5:	ee                   	out    dx,al
c000fbf6:	89 f0                	mov    eax,esi
c000fbf8:	89 fa                	mov    edx,edi
c000fbfa:	ee                   	out    dx,al
c000fbfb:	88 c8                	mov    al,cl
c000fbfd:	89 da                	mov    edx,ebx
c000fbff:	ee                   	out    dx,al
c000fc00:	b0 c7                	mov    al,0xc7
c000fc02:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc07:	ee                   	out    dx,al
c000fc08:	b0 0b                	mov    al,0xb
c000fc0a:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc0f:	ee                   	out    dx,al
c000fc10:	68 24 a4 02 c0       	push   0xc002a424
c000fc15:	e8 a9 31 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000fc1a:	e8 47 09 00 00       	call   c0010566 <installVgaTextImplementation()>
c000fc1f:	e8 3c ff ff ff       	call   c000fb60 <setupTextMode()>
c000fc24:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc29:	05 ff 0f 00 00       	add    eax,0xfff
c000fc2e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc33:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc36:	e8 f3 03 00 00       	call   c001002e <Phys::physicalMemorySetup(unsigned int)>
c000fc3b:	e8 6e 1f 00 00       	call   c0011bae <Virt::virtualMemorySetup()>
c000fc40:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc46:	83 c4 10             	add    esp,0x10
c000fc49:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc4f:	75 0e                	jne    c000fc5f <kernel_main+0x8f>
c000fc51:	89 d8                	mov    eax,ebx
c000fc53:	25 48 03 00 00       	and    eax,0x348
c000fc58:	3d 00 03 00 00       	cmp    eax,0x300
c000fc5d:	74 10                	je     c000fc6f <kernel_main+0x9f>
c000fc5f:	83 ec 0c             	sub    esp,0xc
c000fc62:	68 b9 bd 02 c0       	push   0xc002bdb9
c000fc67:	e8 23 a9 00 00       	call   c001a58f <Krnl::panic(char const*)>
c000fc6c:	83 c4 10             	add    esp,0x10
c000fc6f:	83 ec 0c             	sub    esp,0xc
c000fc72:	89 1d 40 e7 02 c0    	mov    DWORD PTR ds:0xc002e740,ebx
c000fc78:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fc7c:	53                   	push   ebx
c000fc7d:	e8 7e 21 00 00       	call   c0011e00 <VAS::VAS()>
c000fc82:	89 1d b0 e8 02 c0    	mov    DWORD PTR ds:0xc002e8b0,ebx
c000fc88:	e8 93 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fc8d:	c7 04 24 3b a4 02 c0 	mov    DWORD PTR [esp],0xc002a43b
c000fc94:	e8 2a 31 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000fc99:	e8 8f 1f 00 00       	call   c0011c2d <Virt::swappingSetup()>
c000fc9e:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fca5:	e8 a1 fb ff ff       	call   c000f84b <malloc>
c000fcaa:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcad:	89 c6                	mov    esi,eax
c000fcaf:	e8 8e ea ff ff       	call   c000e742 <Computer::Computer()>
c000fcb4:	58                   	pop    eax
c000fcb5:	89 35 28 e7 02 c0    	mov    DWORD PTR ds:0xc002e728,esi
c000fcbb:	5a                   	pop    edx
c000fcbc:	56                   	push   esi
c000fcbd:	68 58 a4 02 c0       	push   0xc002a458
c000fcc2:	e8 fc 30 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000fcc7:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c000fccc:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcce:	6a 00                	push   0x0
c000fcd0:	6a 00                	push   0x0
c000fcd2:	6a 00                	push   0x0
c000fcd4:	50                   	push   eax
c000fcd5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fcd8:	83 c4 14             	add    esp,0x14
c000fcdb:	53                   	push   ebx
c000fcdc:	e8 cf 23 00 00       	call   c00120b0 <VAS::~VAS()>
c000fce1:	c7 04 24 6b a4 02 c0 	mov    DWORD PTR [esp],0xc002a46b
c000fce8:	e8 a2 a8 00 00       	call   c001a58f <Krnl::panic(char const*)>
c000fced:	83 c4 30             	add    esp,0x30
c000fcf0:	5b                   	pop    ebx
c000fcf1:	5e                   	pop    esi
c000fcf2:	5f                   	pop    edi
c000fcf3:	c3                   	ret    

c000fcf4 <Phys::allocateDMA(unsigned long)>:
c000fcf4:	55                   	push   ebp
c000fcf5:	31 d2                	xor    edx,edx
c000fcf7:	57                   	push   edi
c000fcf8:	31 ed                	xor    ebp,ebp
c000fcfa:	56                   	push   esi
c000fcfb:	31 c9                	xor    ecx,ecx
c000fcfd:	53                   	push   ebx
c000fcfe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd02:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd08:	31 c0                	xor    eax,eax
c000fd0a:	c1 ee 0c             	shr    esi,0xc
c000fd0d:	eb 17                	jmp    c000fd26 <Phys::allocateDMA(unsigned long)+0x32>
c000fd0f:	85 c9                	test   ecx,ecx
c000fd11:	75 04                	jne    c000fd17 <Phys::allocateDMA(unsigned long)+0x23>
c000fd13:	89 d5                	mov    ebp,edx
c000fd15:	89 d0                	mov    eax,edx
c000fd17:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd1a:	39 de                	cmp    esi,ebx
c000fd1c:	74 20                	je     c000fd3e <Phys::allocateDMA(unsigned long)+0x4a>
c000fd1e:	42                   	inc    edx
c000fd1f:	89 d9                	mov    ecx,ebx
c000fd21:	83 fa 2f             	cmp    edx,0x2f
c000fd24:	7f 11                	jg     c000fd37 <Phys::allocateDMA(unsigned long)+0x43>
c000fd26:	80 ba 80 e7 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1880],0x0
c000fd2d:	74 e0                	je     c000fd0f <Phys::allocateDMA(unsigned long)+0x1b>
c000fd2f:	31 c9                	xor    ecx,ecx
c000fd31:	42                   	inc    edx
c000fd32:	83 fa 2f             	cmp    edx,0x2f
c000fd35:	7e ef                	jle    c000fd26 <Phys::allocateDMA(unsigned long)+0x32>
c000fd37:	5b                   	pop    ebx
c000fd38:	31 c0                	xor    eax,eax
c000fd3a:	5e                   	pop    esi
c000fd3b:	5f                   	pop    edi
c000fd3c:	5d                   	pop    ebp
c000fd3d:	c3                   	ret    
c000fd3e:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd41:	89 d7                	mov    edi,edx
c000fd43:	4f                   	dec    edi
c000fd44:	79 03                	jns    c000fd49 <Phys::allocateDMA(unsigned long)+0x55>
c000fd46:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd49:	c1 ff 04             	sar    edi,0x4
c000fd4c:	89 c2                	mov    edx,eax
c000fd4e:	c1 fa 04             	sar    edx,0x4
c000fd51:	39 fa                	cmp    edx,edi
c000fd53:	75 2f                	jne    c000fd84 <Phys::allocateDMA(unsigned long)+0x90>
c000fd55:	85 db                	test   ebx,ebx
c000fd57:	74 1a                	je     c000fd73 <Phys::allocateDMA(unsigned long)+0x7f>
c000fd59:	be 80 e7 02 c0       	mov    esi,0xc002e780
c000fd5e:	8d 90 80 e7 02 c0    	lea    edx,[eax-0x3ffd1880]
c000fd64:	f7 d6                	not    esi
c000fd66:	29 c6                	sub    esi,eax
c000fd68:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd6b:	42                   	inc    edx
c000fd6c:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd6f:	39 d9                	cmp    ecx,ebx
c000fd71:	7f f5                	jg     c000fd68 <Phys::allocateDMA(unsigned long)+0x74>
c000fd73:	85 ff                	test   edi,edi
c000fd75:	74 13                	je     c000fd8a <Phys::allocateDMA(unsigned long)+0x96>
c000fd77:	5b                   	pop    ebx
c000fd78:	05 50 20 0c 00       	add    eax,0xc2050
c000fd7d:	5e                   	pop    esi
c000fd7e:	c1 e0 0c             	shl    eax,0xc
c000fd81:	5f                   	pop    edi
c000fd82:	5d                   	pop    ebp
c000fd83:	c3                   	ret    
c000fd84:	89 ea                	mov    edx,ebp
c000fd86:	31 c9                	xor    ecx,ecx
c000fd88:	eb a7                	jmp    c000fd31 <Phys::allocateDMA(unsigned long)+0x3d>
c000fd8a:	5b                   	pop    ebx
c000fd8b:	c1 e0 0c             	shl    eax,0xc
c000fd8e:	5e                   	pop    esi
c000fd8f:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fd94:	5f                   	pop    edi
c000fd95:	5d                   	pop    ebp
c000fd96:	c3                   	ret    

c000fd97 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fd97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd9b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fd9f:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fda5:	c1 e9 0c             	shr    ecx,0xc
c000fda8:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdad:	76 25                	jbe    c000fdd4 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdaf:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fdb4:	c1 e8 0c             	shr    eax,0xc
c000fdb7:	8d 50 10             	lea    edx,[eax+0x10]
c000fdba:	85 c9                	test   ecx,ecx
c000fdbc:	74 15                	je     c000fdd3 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fdbe:	8d 82 80 e7 02 c0    	lea    eax,[edx-0x3ffd1880]
c000fdc4:	8d 94 11 80 e7 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1880]
c000fdcb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdce:	40                   	inc    eax
c000fdcf:	39 d0                	cmp    eax,edx
c000fdd1:	75 f8                	jne    c000fdcb <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdd3:	c3                   	ret    
c000fdd4:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fdda:	c1 ea 0c             	shr    edx,0xc
c000fddd:	eb db                	jmp    c000fdba <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fddf <Phys::setPageState(unsigned long, bool)>:
c000fddf:	56                   	push   esi
c000fde0:	ba 01 00 00 00       	mov    edx,0x1
c000fde5:	53                   	push   ebx
c000fde6:	8b 35 5c d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d65c
c000fdec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fdf0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fdf4:	89 c8                	mov    eax,ecx
c000fdf6:	83 e1 07             	and    ecx,0x7
c000fdf9:	c1 e8 03             	shr    eax,0x3
c000fdfc:	d3 e3                	shl    ebx,cl
c000fdfe:	01 c6                	add    esi,eax
c000fe00:	d3 e2                	shl    edx,cl
c000fe02:	f7 d2                	not    edx
c000fe04:	20 16                	and    BYTE PTR [esi],dl
c000fe06:	03 05 5c d6 02 c0    	add    eax,DWORD PTR ds:0xc002d65c
c000fe0c:	08 18                	or     BYTE PTR [eax],bl
c000fe0e:	5b                   	pop    ebx
c000fe0f:	5e                   	pop    esi
c000fe10:	c3                   	ret    

c000fe11 <Phys::getPageState(unsigned long)>:
c000fe11:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe15:	8b 15 5c d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d65c
c000fe1b:	89 c8                	mov    eax,ecx
c000fe1d:	83 e1 07             	and    ecx,0x7
c000fe20:	c1 e8 03             	shr    eax,0x3
c000fe23:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe27:	d3 f8                	sar    eax,cl
c000fe29:	83 e0 01             	and    eax,0x1
c000fe2c:	c3                   	ret    

c000fe2d <Phys::freePage(unsigned long)>:
c000fe2d:	53                   	push   ebx
c000fe2e:	83 ec 08             	sub    esp,0x8
c000fe31:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe35:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe3b:	76 57                	jbe    c000fe94 <Phys::freePage(unsigned long)+0x67>
c000fe3d:	c1 eb 0c             	shr    ebx,0xc
c000fe40:	53                   	push   ebx
c000fe41:	e8 cb ff ff ff       	call   c000fe11 <Phys::getPageState(unsigned long)>
c000fe46:	5a                   	pop    edx
c000fe47:	84 c0                	test   al,al
c000fe49:	74 5b                	je     c000fea6 <Phys::freePage(unsigned long)+0x79>
c000fe4b:	a1 70 e7 02 c0       	mov    eax,ds:0xc002e770
c000fe50:	48                   	dec    eax
c000fe51:	a3 70 e7 02 c0       	mov    ds:0xc002e770,eax
c000fe56:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe59:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe5c:	c1 e0 02             	shl    eax,0x2
c000fe5f:	99                   	cdq    
c000fe60:	f7 3d 74 e7 02 c0    	idiv   DWORD PTR ds:0xc002e774
c000fe66:	39 05 6c e7 02 c0    	cmp    DWORD PTR ds:0xc002e76c,eax
c000fe6c:	75 13                	jne    c000fe81 <Phys::freePage(unsigned long)+0x54>
c000fe6e:	83 ec 08             	sub    esp,0x8
c000fe71:	6a 00                	push   0x0
c000fe73:	53                   	push   ebx
c000fe74:	e8 66 ff ff ff       	call   c000fddf <Phys::setPageState(unsigned long, bool)>
c000fe79:	83 c4 10             	add    esp,0x10
c000fe7c:	83 c4 08             	add    esp,0x8
c000fe7f:	5b                   	pop    ebx
c000fe80:	c3                   	ret    
c000fe81:	83 ec 0c             	sub    esp,0xc
c000fe84:	a3 6c e7 02 c0       	mov    ds:0xc002e76c,eax
c000fe89:	50                   	push   eax
c000fe8a:	e8 05 0a 00 00       	call   c0010894 <VgaText::updateRAMUsageDisplay(int)>
c000fe8f:	83 c4 10             	add    esp,0x10
c000fe92:	eb da                	jmp    c000fe6e <Phys::freePage(unsigned long)+0x41>
c000fe94:	68 00 10 00 00       	push   0x1000
c000fe99:	53                   	push   ebx
c000fe9a:	e8 f8 fe ff ff       	call   c000fd97 <Phys::freeDMA(unsigned long, unsigned long)>
c000fe9f:	59                   	pop    ecx
c000fea0:	5b                   	pop    ebx
c000fea1:	83 c4 08             	add    esp,0x8
c000fea4:	5b                   	pop    ebx
c000fea5:	c3                   	ret    
c000fea6:	c7 44 24 10 86 a4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a486
c000feae:	83 c4 08             	add    esp,0x8
c000feb1:	5b                   	pop    ebx
c000feb2:	e9 d8 a6 00 00       	jmp    c001a58f <Krnl::panic(char const*)>

c000feb7 <Phys::allocatePage()>:
c000feb7:	56                   	push   esi
c000feb8:	53                   	push   ebx
c000feb9:	51                   	push   ecx
c000feba:	8b 35 64 e7 02 c0    	mov    esi,DWORD PTR ds:0xc002e764
c000fec0:	89 f3                	mov    ebx,esi
c000fec2:	eb 0a                	jmp    c000fece <Phys::allocatePage()+0x17>
c000fec4:	89 1d 64 e7 02 c0    	mov    DWORD PTR ds:0xc002e764,ebx
c000feca:	39 de                	cmp    esi,ebx
c000fecc:	74 24                	je     c000fef2 <Phys::allocatePage()+0x3b>
c000fece:	53                   	push   ebx
c000fecf:	e8 3d ff ff ff       	call   c000fe11 <Phys::getPageState(unsigned long)>
c000fed4:	5a                   	pop    edx
c000fed5:	84 c0                	test   al,al
c000fed7:	74 77                	je     c000ff50 <Phys::allocatePage()+0x99>
c000fed9:	43                   	inc    ebx
c000feda:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fee0:	75 e2                	jne    c000fec4 <Phys::allocatePage()+0xd>
c000fee2:	31 db                	xor    ebx,ebx
c000fee4:	c7 05 64 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e764,0x0
c000feee:	39 de                	cmp    esi,ebx
c000fef0:	75 dc                	jne    c000fece <Phys::allocatePage()+0x17>
c000fef2:	83 ec 0c             	sub    esp,0xc
c000fef5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fefa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fefd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ff03:	e8 e8 2b 00 00       	call   c0012af0 <VAS::scanForEviction()>
c000ff08:	83 c4 10             	add    esp,0x10
c000ff0b:	85 c0                	test   eax,eax
c000ff0d:	75 76                	jne    c000ff85 <Phys::allocatePage()+0xce>
c000ff0f:	83 ec 0c             	sub    esp,0xc
c000ff12:	68 9c a4 02 c0       	push   0xc002a49c
c000ff17:	e8 a7 2e 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c000ff1c:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff23:	e8 cc fd ff ff       	call   c000fcf4 <Phys::allocateDMA(unsigned long)>
c000ff28:	83 c4 10             	add    esp,0x10
c000ff2b:	85 c0                	test   eax,eax
c000ff2d:	75 56                	jne    c000ff85 <Phys::allocatePage()+0xce>
c000ff2f:	83 ec 0c             	sub    esp,0xc
c000ff32:	68 ad a4 02 c0       	push   0xc002a4ad
c000ff37:	e8 53 a6 00 00       	call   c001a58f <Krnl::panic(char const*)>
c000ff3c:	83 c4 10             	add    esp,0x10
c000ff3f:	8b 1d 64 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e764
c000ff45:	53                   	push   ebx
c000ff46:	e8 c6 fe ff ff       	call   c000fe11 <Phys::getPageState(unsigned long)>
c000ff4b:	5a                   	pop    edx
c000ff4c:	84 c0                	test   al,al
c000ff4e:	75 89                	jne    c000fed9 <Phys::allocatePage()+0x22>
c000ff50:	6a 01                	push   0x1
c000ff52:	53                   	push   ebx
c000ff53:	e8 87 fe ff ff       	call   c000fddf <Phys::setPageState(unsigned long, bool)>
c000ff58:	a1 70 e7 02 c0       	mov    eax,ds:0xc002e770
c000ff5d:	59                   	pop    ecx
c000ff5e:	40                   	inc    eax
c000ff5f:	5b                   	pop    ebx
c000ff60:	a3 70 e7 02 c0       	mov    ds:0xc002e770,eax
c000ff65:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff68:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff6b:	c1 e0 02             	shl    eax,0x2
c000ff6e:	99                   	cdq    
c000ff6f:	f7 3d 74 e7 02 c0    	idiv   DWORD PTR ds:0xc002e774
c000ff75:	39 05 6c e7 02 c0    	cmp    DWORD PTR ds:0xc002e76c,eax
c000ff7b:	75 0c                	jne    c000ff89 <Phys::allocatePage()+0xd2>
c000ff7d:	a1 64 e7 02 c0       	mov    eax,ds:0xc002e764
c000ff82:	c1 e0 0c             	shl    eax,0xc
c000ff85:	5a                   	pop    edx
c000ff86:	5b                   	pop    ebx
c000ff87:	5e                   	pop    esi
c000ff88:	c3                   	ret    
c000ff89:	83 ec 0c             	sub    esp,0xc
c000ff8c:	a3 6c e7 02 c0       	mov    ds:0xc002e76c,eax
c000ff91:	50                   	push   eax
c000ff92:	e8 fd 08 00 00       	call   c0010894 <VgaText::updateRAMUsageDisplay(int)>
c000ff97:	83 c4 10             	add    esp,0x10
c000ff9a:	eb e1                	jmp    c000ff7d <Phys::allocatePage()+0xc6>

c000ff9c <Phys::allocateContiguousPages(int)>:
c000ff9c:	57                   	push   edi
c000ff9d:	56                   	push   esi
c000ff9e:	53                   	push   ebx
c000ff9f:	31 db                	xor    ebx,ebx
c000ffa1:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ffa5:	e8 82 de 00 00       	call   c001de2c <lockScheduler()>
c000ffaa:	85 db                	test   ebx,ebx
c000ffac:	75 11                	jne    c000ffbf <Phys::allocateContiguousPages(int)+0x23>
c000ffae:	e8 04 ff ff ff       	call   c000feb7 <Phys::allocatePage()>
c000ffb3:	83 ff 01             	cmp    edi,0x1
c000ffb6:	89 c6                	mov    esi,eax
c000ffb8:	74 21                	je     c000ffdb <Phys::allocateContiguousPages(int)+0x3f>
c000ffba:	bb 01 00 00 00       	mov    ebx,0x1
c000ffbf:	e8 f3 fe ff ff       	call   c000feb7 <Phys::allocatePage()>
c000ffc4:	89 da                	mov    edx,ebx
c000ffc6:	c1 e2 0c             	shl    edx,0xc
c000ffc9:	01 f2                	add    edx,esi
c000ffcb:	39 c2                	cmp    edx,eax
c000ffcd:	74 17                	je     c000ffe6 <Phys::allocateContiguousPages(int)+0x4a>
c000ffcf:	bb 01 00 00 00       	mov    ebx,0x1
c000ffd4:	89 c6                	mov    esi,eax
c000ffd6:	83 ff 01             	cmp    edi,0x1
c000ffd9:	75 e4                	jne    c000ffbf <Phys::allocateContiguousPages(int)+0x23>
c000ffdb:	e8 4e de 00 00       	call   c001de2e <unlockScheduler()>
c000ffe0:	89 f0                	mov    eax,esi
c000ffe2:	5b                   	pop    ebx
c000ffe3:	5e                   	pop    esi
c000ffe4:	5f                   	pop    edi
c000ffe5:	c3                   	ret    
c000ffe6:	43                   	inc    ebx
c000ffe7:	39 fb                	cmp    ebx,edi
c000ffe9:	75 bf                	jne    c000ffaa <Phys::allocateContiguousPages(int)+0xe>
c000ffeb:	e8 3e de 00 00       	call   c001de2e <unlockScheduler()>
c000fff0:	89 f0                	mov    eax,esi
c000fff2:	5b                   	pop    ebx
c000fff3:	5e                   	pop    esi
c000fff4:	5f                   	pop    edi
c000fff5:	c3                   	ret    

c000fff6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fff6:	56                   	push   esi
c000fff7:	53                   	push   ebx
c000fff8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fffc:	39 1d 68 e7 02 c0    	cmp    DWORD PTR ds:0xc002e768,ebx
c0010002:	73 06                	jae    c001000a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010004:	89 1d 68 e7 02 c0    	mov    DWORD PTR ds:0xc002e768,ebx
c001000a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001000e:	c1 eb 0c             	shr    ebx,0xc
c0010011:	c1 e8 0c             	shr    eax,0xc
c0010014:	39 d8                	cmp    eax,ebx
c0010016:	73 13                	jae    c001002b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010018:	6a 00                	push   0x0
c001001a:	8d 70 01             	lea    esi,[eax+0x1]
c001001d:	50                   	push   eax
c001001e:	e8 bc fd ff ff       	call   c000fddf <Phys::setPageState(unsigned long, bool)>
c0010023:	5a                   	pop    edx
c0010024:	89 f0                	mov    eax,esi
c0010026:	59                   	pop    ecx
c0010027:	39 f3                	cmp    ebx,esi
c0010029:	75 ed                	jne    c0010018 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c001002b:	5b                   	pop    ebx
c001002c:	5e                   	pop    esi
c001002d:	c3                   	ret    

c001002e <Phys::physicalMemorySetup(unsigned int)>:
c001002e:	55                   	push   ebp
c001002f:	57                   	push   edi
c0010030:	56                   	push   esi
c0010031:	53                   	push   ebx
c0010032:	31 db                	xor    ebx,ebx
c0010034:	83 ec 40             	sub    esp,0x40
c0010037:	6a 30                	push   0x30
c0010039:	6a 00                	push   0x0
c001003b:	68 80 e7 02 c0       	push   0xc002e780
c0010040:	e8 3b 07 ff ff       	call   c0000780 <memset>
c0010045:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010049:	25 00 f0 ff ff       	and    eax,0xfffff000
c001004e:	05 00 10 00 00       	add    eax,0x1000
c0010053:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010057:	83 c4 10             	add    esp,0x10
c001005a:	83 ec 08             	sub    esp,0x8
c001005d:	6a 01                	push   0x1
c001005f:	53                   	push   ebx
c0010060:	43                   	inc    ebx
c0010061:	e8 79 fd ff ff       	call   c000fddf <Phys::setPageState(unsigned long, bool)>
c0010066:	83 c4 10             	add    esp,0x10
c0010069:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c001006f:	75 e9                	jne    c001005a <Phys::physicalMemorySetup(unsigned int)+0x2c>
c0010071:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010078:	66 85 c0             	test   ax,ax
c001007b:	0f 84 8e 01 00 00    	je     c001020f <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c0010081:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010085:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001008d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010091:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010096:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001009a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100a2:	eb 15                	jmp    c00100b9 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00100a4:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00100a8:	83 c3 18             	add    ebx,0x18
c00100ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100af:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100b3:	0f 84 66 01 00 00    	je     c001021f <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100b9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100bc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00100bf:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00100c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100c6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00100ca:	8b 33                	mov    esi,DWORD PTR [ebx]
c00100cc:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00100cf:	01 f0                	add    eax,esi
c00100d1:	55                   	push   ebp
c00100d2:	11 fa                	adc    edx,edi
c00100d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100d8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00100dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00100e0:	56                   	push   esi
c00100e1:	68 e8 a4 02 c0       	push   0xc002a4e8
c00100e6:	e8 d8 2c 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00100eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100ef:	83 c4 10             	add    esp,0x10
c00100f2:	09 f8                	or     eax,edi
c00100f4:	0f 85 25 01 00 00    	jne    c001021f <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100fa:	4d                   	dec    ebp
c00100fb:	75 a7                	jne    c00100a4 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00100fd:	ba 00 00 08 00       	mov    edx,0x80000
c0010102:	89 c1                	mov    ecx,eax
c0010104:	39 f2                	cmp    edx,esi
c0010106:	19 f9                	sbb    ecx,edi
c0010108:	0f 82 a7 00 00 00    	jb     c00101b5 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001010e:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010112:	89 c1                	mov    ecx,eax
c0010114:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010118:	0f 83 97 00 00 00    	jae    c00101b5 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001011e:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010123:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010127:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001012b:	39 fa                	cmp    edx,edi
c001012d:	19 e8                	sbb    eax,ebp
c001012f:	0f 82 14 01 00 00    	jb     c0010249 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010135:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010139:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001013d:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010143:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010148:	83 d5 ff             	adc    ebp,0xffffffff
c001014b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001014f:	31 c0                	xor    eax,eax
c0010151:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010155:	39 fa                	cmp    edx,edi
c0010157:	89 c1                	mov    ecx,eax
c0010159:	19 e9                	sbb    ecx,ebp
c001015b:	0f 83 43 ff ff ff    	jae    c00100a4 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010161:	be 00 00 08 00       	mov    esi,0x80000
c0010166:	50                   	push   eax
c0010167:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001016b:	57                   	push   edi
c001016c:	56                   	push   esi
c001016d:	68 0c a5 02 c0       	push   0xc002a50c
c0010172:	e8 4c 2c 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0010177:	5a                   	pop    edx
c0010178:	59                   	pop    ecx
c0010179:	57                   	push   edi
c001017a:	56                   	push   esi
c001017b:	e8 76 fe ff ff       	call   c000fff6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010180:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010184:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010188:	83 c4 0c             	add    esp,0xc
c001018b:	0f ac d0 0c          	shrd   eax,edx,0xc
c001018f:	03 05 74 e7 02 c0    	add    eax,DWORD PTR ds:0xc002e774
c0010195:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001019c:	a3 74 e7 02 c0       	mov    ds:0xc002e774,eax
c00101a1:	52                   	push   edx
c00101a2:	50                   	push   eax
c00101a3:	68 c9 a4 02 c0       	push   0xc002a4c9
c00101a8:	e8 16 2c 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00101ad:	83 c4 10             	add    esp,0x10
c00101b0:	e9 ef fe ff ff       	jmp    c00100a4 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101b5:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101b9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101c1:	39 ea                	cmp    edx,ebp
c00101c3:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00101c7:	0f 82 d7 fe ff ff    	jb     c00100a4 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101cd:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101d2:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00101d6:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00101da:	0f 83 c4 fe ff ff    	jae    c00100a4 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101e0:	39 ee                	cmp    esi,ebp
c00101e2:	89 f8                	mov    eax,edi
c00101e4:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00101e8:	0f 83 78 ff ff ff    	jae    c0010166 <Phys::physicalMemorySetup(unsigned int)+0x138>
c00101ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00101f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00101f6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00101fa:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00101fe:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010202:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010206:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001020a:	e9 57 ff ff ff       	jmp    c0010166 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001020f:	83 ec 0c             	sub    esp,0xc
c0010212:	68 bb a4 02 c0       	push   0xc002a4bb
c0010217:	e8 73 a3 00 00       	call   c001a58f <Krnl::panic(char const*)>
c001021c:	83 c4 10             	add    esp,0x10
c001021f:	bb 40 01 00 00       	mov    ebx,0x140
c0010224:	83 ec 08             	sub    esp,0x8
c0010227:	6a 00                	push   0x0
c0010229:	53                   	push   ebx
c001022a:	43                   	inc    ebx
c001022b:	e8 af fb ff ff       	call   c000fddf <Phys::setPageState(unsigned long, bool)>
c0010230:	ff 05 74 e7 02 c0    	inc    DWORD PTR ds:0xc002e774
c0010236:	83 c4 10             	add    esp,0x10
c0010239:	81 fb 80 01 00 00    	cmp    ebx,0x180
c001023f:	75 e3                	jne    c0010224 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010241:	83 c4 3c             	add    esp,0x3c
c0010244:	5b                   	pop    ebx
c0010245:	5e                   	pop    esi
c0010246:	5f                   	pop    edi
c0010247:	5d                   	pop    ebp
c0010248:	c3                   	ret    
c0010249:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010251:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010259:	e9 d7 fe ff ff       	jmp    c0010135 <Phys::physicalMemorySetup(unsigned int)+0x107>

c001025e <Pipe::isAtty()>:
c001025e:	31 c0                	xor    eax,eax
c0010260:	c3                   	ret    
c0010261:	90                   	nop

c0010262 <Pipe::~Pipe()>:
c0010262:	83 ec 0c             	sub    esp,0xc
c0010265:	ba 78 a5 02 c0       	mov    edx,0xc002a578
c001026a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001026e:	89 10                	mov    DWORD PTR [eax],edx
c0010270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010274:	83 ec 0c             	sub    esp,0xc
c0010277:	50                   	push   eax
c0010278:	e8 11 15 00 00       	call   c001178e <UnixFile::~UnixFile()>
c001027d:	83 c4 10             	add    esp,0x10
c0010280:	90                   	nop
c0010281:	83 c4 0c             	add    esp,0xc
c0010284:	c3                   	ret    
c0010285:	90                   	nop

c0010286 <Pipe::~Pipe()>:
c0010286:	83 ec 0c             	sub    esp,0xc
c0010289:	83 ec 0c             	sub    esp,0xc
c001028c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010290:	e8 cd ff ff ff       	call   c0010262 <Pipe::~Pipe()>
c0010295:	83 c4 10             	add    esp,0x10
c0010298:	83 ec 08             	sub    esp,0x8
c001029b:	6a 20                	push   0x20
c001029d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102a1:	e8 3d 2a 00 00       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00102a6:	83 c4 10             	add    esp,0x10
c00102a9:	83 c4 0c             	add    esp,0xc
c00102ac:	c3                   	ret    
c00102ad:	90                   	nop

c00102ae <Pipe::read(unsigned long long, void*, int*)>:
c00102ae:	55                   	push   ebp
c00102af:	57                   	push   edi
c00102b0:	56                   	push   esi
c00102b1:	53                   	push   ebx
c00102b2:	83 ec 1c             	sub    esp,0x1c
c00102b5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00102b9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00102bd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00102c1:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00102c4:	89 c8                	mov    eax,ecx
c00102c6:	99                   	cdq    
c00102c7:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00102cb:	74 19                	je     c00102e6 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102cd:	39 f9                	cmp    ecx,edi
c00102cf:	89 d1                	mov    ecx,edx
c00102d1:	19 f1                	sbb    ecx,esi
c00102d3:	73 11                	jae    c00102e6 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102d5:	e8 52 db 00 00       	call   c001de2c <lockScheduler()>
c00102da:	e8 c3 de 00 00       	call   c001e1a2 <schedule()>
c00102df:	e8 4a db 00 00       	call   c001de2e <unlockScheduler()>
c00102e4:	eb db                	jmp    c00102c1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00102e6:	39 f8                	cmp    eax,edi
c00102e8:	89 d1                	mov    ecx,edx
c00102ea:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00102ee:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00102f2:	19 f1                	sbb    ecx,esi
c00102f4:	73 08                	jae    c00102fe <Pipe::read(unsigned long long, void*, int*)+0x50>
c00102f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00102fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00102fe:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010301:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010304:	29 c6                	sub    esi,eax
c0010306:	89 f1                	mov    ecx,esi
c0010308:	c1 f9 1f             	sar    ecx,0x1f
c001030b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001030f:	89 ca                	mov    edx,ecx
c0010311:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010315:	19 d1                	sbb    ecx,edx
c0010317:	73 04                	jae    c001031d <Pipe::read(unsigned long long, void*, int*)+0x6f>
c0010319:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001031d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010321:	89 fd                	mov    ebp,edi
c0010323:	29 f5                	sub    ebp,esi
c0010325:	85 f6                	test   esi,esi
c0010327:	74 12                	je     c001033b <Pipe::read(unsigned long long, void*, int*)+0x8d>
c0010329:	52                   	push   edx
c001032a:	56                   	push   esi
c001032b:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c001032e:	50                   	push   eax
c001032f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010333:	e8 14 04 ff ff       	call   c000074c <memcpy>
c0010338:	83 c4 10             	add    esp,0x10
c001033b:	85 ed                	test   ebp,ebp
c001033d:	74 12                	je     c0010351 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c001033f:	50                   	push   eax
c0010340:	55                   	push   ebp
c0010341:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010344:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010348:	56                   	push   esi
c0010349:	e8 fe 03 ff ff       	call   c000074c <memcpy>
c001034e:	83 c4 10             	add    esp,0x10
c0010351:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010354:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010357:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001035a:	99                   	cdq    
c001035b:	89 f7                	mov    edi,esi
c001035d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010361:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010365:	c1 ff 1f             	sar    edi,0x1f
c0010368:	57                   	push   edi
c0010369:	56                   	push   esi
c001036a:	52                   	push   edx
c001036b:	50                   	push   eax
c001036c:	e8 33 69 01 00       	call   c0026ca4 <__umoddi3>
c0010371:	83 c4 10             	add    esp,0x10
c0010374:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010377:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001037c:	75 10                	jne    c001038e <Pipe::read(unsigned long long, void*, int*)+0xe0>
c001037e:	83 ec 0c             	sub    esp,0xc
c0010381:	68 35 a5 02 c0       	push   0xc002a535
c0010386:	e8 04 a2 00 00       	call   c001a58f <Krnl::panic(char const*)>
c001038b:	83 c4 10             	add    esp,0x10
c001038e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010392:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010396:	89 10                	mov    DWORD PTR [eax],edx
c0010398:	83 c4 1c             	add    esp,0x1c
c001039b:	31 c0                	xor    eax,eax
c001039d:	5b                   	pop    ebx
c001039e:	5e                   	pop    esi
c001039f:	5f                   	pop    edi
c00103a0:	5d                   	pop    ebp
c00103a1:	c3                   	ret    

c00103a2 <Pipe::write(unsigned long long, void*, int*)>:
c00103a2:	55                   	push   ebp
c00103a3:	57                   	push   edi
c00103a4:	56                   	push   esi
c00103a5:	53                   	push   ebx
c00103a6:	83 ec 1c             	sub    esp,0x1c
c00103a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103ad:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00103b1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00103b8:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00103bb:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00103be:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103c2:	89 de                	mov    esi,ebx
c00103c4:	89 df                	mov    edi,ebx
c00103c6:	c1 ff 1f             	sar    edi,0x1f
c00103c9:	01 c6                	add    esi,eax
c00103cb:	89 c8                	mov    eax,ecx
c00103cd:	11 d7                	adc    edi,edx
c00103cf:	99                   	cdq    
c00103d0:	39 f1                	cmp    ecx,esi
c00103d2:	89 d0                	mov    eax,edx
c00103d4:	19 f8                	sbb    eax,edi
c00103d6:	b8 01 00 00 00       	mov    eax,0x1
c00103db:	0f 82 80 00 00 00    	jb     c0010461 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c00103e1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00103e4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00103e7:	01 d8                	add    eax,ebx
c00103e9:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00103ed:	99                   	cdq    
c00103ee:	f7 f9                	idiv   ecx
c00103f0:	29 d1                	sub    ecx,edx
c00103f2:	89 d7                	mov    edi,edx
c00103f4:	89 c8                	mov    eax,ecx
c00103f6:	99                   	cdq    
c00103f7:	39 ce                	cmp    esi,ecx
c00103f9:	19 d3                	sbb    ebx,edx
c00103fb:	bb 00 00 00 00       	mov    ebx,0x0
c0010400:	72 04                	jb     c0010406 <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010402:	89 f3                	mov    ebx,esi
c0010404:	29 cb                	sub    ebx,ecx
c0010406:	89 f1                	mov    ecx,esi
c0010408:	29 d9                	sub    ecx,ebx
c001040a:	74 1a                	je     c0010426 <Pipe::write(unsigned long long, void*, int*)+0x84>
c001040c:	52                   	push   edx
c001040d:	51                   	push   ecx
c001040e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010412:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010416:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010419:	57                   	push   edi
c001041a:	e8 2d 03 ff ff       	call   c000074c <memcpy>
c001041f:	83 c4 10             	add    esp,0x10
c0010422:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010426:	85 db                	test   ebx,ebx
c0010428:	74 12                	je     c001043c <Pipe::write(unsigned long long, void*, int*)+0x9a>
c001042a:	50                   	push   eax
c001042b:	53                   	push   ebx
c001042c:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010430:	51                   	push   ecx
c0010431:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010434:	e8 13 03 ff ff       	call   c000074c <memcpy>
c0010439:	83 c4 10             	add    esp,0x10
c001043c:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c001043f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010444:	75 10                	jne    c0010456 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010446:	83 ec 0c             	sub    esp,0xc
c0010449:	68 51 a5 02 c0       	push   0xc002a551
c001044e:	e8 3c a1 00 00       	call   c001a58f <Krnl::panic(char const*)>
c0010453:	83 c4 10             	add    esp,0x10
c0010456:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001045a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001045d:	89 38                	mov    DWORD PTR [eax],edi
c001045f:	31 c0                	xor    eax,eax
c0010461:	83 c4 1c             	add    esp,0x1c
c0010464:	5b                   	pop    ebx
c0010465:	5e                   	pop    esi
c0010466:	5f                   	pop    edi
c0010467:	5d                   	pop    ebp
c0010468:	c3                   	ret    
c0010469:	90                   	nop

c001046a <Pipe::Pipe(int)>:
c001046a:	83 ec 0c             	sub    esp,0xc
c001046d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010471:	83 ec 08             	sub    esp,0x8
c0010474:	6a 00                	push   0x0
c0010476:	50                   	push   eax
c0010477:	e8 30 11 00 00       	call   c00115ac <UnixFile::UnixFile(int)>
c001047c:	83 c4 10             	add    esp,0x10
c001047f:	ba 78 a5 02 c0       	mov    edx,0xc002a578
c0010484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010488:	89 10                	mov    DWORD PTR [eax],edx
c001048a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001048e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010492:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010499:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a4:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104af:	83 ec 0c             	sub    esp,0xc
c00104b2:	50                   	push   eax
c00104b3:	e8 93 f3 ff ff       	call   c000f84b <malloc>
c00104b8:	83 c4 10             	add    esp,0x10
c00104bb:	89 c2                	mov    edx,eax
c00104bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00104c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c8:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00104cc:	90                   	nop
c00104cd:	83 c4 0c             	add    esp,0xc
c00104d0:	c3                   	ret    
c00104d1:	90                   	nop

c00104d2 <VgaText::isAtty()>:
c00104d2:	b0 01                	mov    al,0x1
c00104d4:	c3                   	ret    
c00104d5:	90                   	nop

c00104d6 <VgaText::~VgaText()>:
c00104d6:	83 ec 0c             	sub    esp,0xc
c00104d9:	ba 34 a6 02 c0       	mov    edx,0xc002a634
c00104de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e2:	89 10                	mov    DWORD PTR [eax],edx
c00104e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e8:	83 ec 0c             	sub    esp,0xc
c00104eb:	50                   	push   eax
c00104ec:	e8 9d 12 00 00       	call   c001178e <UnixFile::~UnixFile()>
c00104f1:	83 c4 10             	add    esp,0x10
c00104f4:	90                   	nop
c00104f5:	83 c4 0c             	add    esp,0xc
c00104f8:	c3                   	ret    
c00104f9:	90                   	nop

c00104fa <VgaText::~VgaText()>:
c00104fa:	83 ec 0c             	sub    esp,0xc
c00104fd:	83 ec 0c             	sub    esp,0xc
c0010500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010504:	e8 cd ff ff ff       	call   c00104d6 <VgaText::~VgaText()>
c0010509:	83 c4 10             	add    esp,0x10
c001050c:	83 ec 08             	sub    esp,0x8
c001050f:	68 c4 02 00 00       	push   0x2c4
c0010514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010518:	e8 c6 27 00 00       	call   c0012ce3 <operator delete(void*, unsigned long)>
c001051d:	83 c4 10             	add    esp,0x10
c0010520:	83 c4 0c             	add    esp,0xc
c0010523:	c3                   	ret    

c0010524 <VgaText::read(unsigned long long, void*, int*)>:
c0010524:	83 ec 10             	sub    esp,0x10
c0010527:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001052b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001052f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010533:	e8 ae 5c 00 00       	call   c00161e6 <readKeyboard(VgaText*, char*, unsigned long)>
c0010538:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001053c:	89 02                	mov    DWORD PTR [edx],eax
c001053e:	31 c0                	xor    eax,eax
c0010540:	83 c4 1c             	add    esp,0x1c
c0010543:	c3                   	ret    

c0010544 <setTerminalScrollLock(bool)>:
c0010544:	c3                   	ret    

c0010545 <addToTerminalCycle(VgaText*)>:
c0010545:	8b 15 00 e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e800
c001054b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001054f:	85 d2                	test   edx,edx
c0010551:	75 09                	jne    c001055c <addToTerminalCycle(VgaText*)+0x17>
c0010553:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010556:	a3 00 e8 02 c0       	mov    ds:0xc002e800,eax
c001055b:	c3                   	ret    
c001055c:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c001055f:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010562:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010565:	c3                   	ret    

c0010566 <installVgaTextImplementation()>:
c0010566:	83 ec 10             	sub    esp,0x10
c0010569:	6a 20                	push   0x20
c001056b:	6a 00                	push   0x0
c001056d:	68 e0 e7 02 c0       	push   0xc002e7e0
c0010572:	e8 09 02 ff ff       	call   c0000780 <memset>
c0010577:	83 c4 1c             	add    esp,0x1c
c001057a:	c3                   	ret    

c001057b <scrollTerminalScrollLock(int)>:
c001057b:	c3                   	ret    

c001057c <VgaText::load()>:
c001057c:	53                   	push   ebx
c001057d:	31 c0                	xor    eax,eax
c001057f:	83 ec 58             	sub    esp,0x58
c0010582:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010586:	89 e2                	mov    edx,esp
c0010588:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001058c:	40                   	inc    eax
c001058d:	83 f8 50             	cmp    eax,0x50
c0010590:	75 f6                	jne    c0010588 <VgaText::load()+0xc>
c0010592:	31 c0                	xor    eax,eax
c0010594:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c001059b:	84 c9                	test   cl,cl
c001059d:	74 06                	je     c00105a5 <VgaText::load()+0x29>
c001059f:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105a2:	40                   	inc    eax
c00105a3:	eb ef                	jmp    c0010594 <VgaText::load()+0x18>
c00105a5:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00105a8:	85 c0                	test   eax,eax
c00105aa:	74 09                	je     c00105b5 <VgaText::load()+0x39>
c00105ac:	51                   	push   ecx
c00105ad:	51                   	push   ecx
c00105ae:	52                   	push   edx
c00105af:	53                   	push   ebx
c00105b0:	ff d0                	call   eax
c00105b2:	83 c4 10             	add    esp,0x10
c00105b5:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00105b8:	85 c0                	test   eax,eax
c00105ba:	74 09                	je     c00105c5 <VgaText::load()+0x49>
c00105bc:	83 ec 0c             	sub    esp,0xc
c00105bf:	53                   	push   ebx
c00105c0:	ff d0                	call   eax
c00105c2:	83 c4 10             	add    esp,0x10
c00105c5:	83 c4 58             	add    esp,0x58
c00105c8:	5b                   	pop    ebx
c00105c9:	c3                   	ret    

c00105ca <VgaText::updateCursor()>:
c00105ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105ce:	39 05 04 e8 02 c0    	cmp    DWORD PTR ds:0xc002e804,eax
c00105d4:	75 09                	jne    c00105df <VgaText::updateCursor()+0x15>
c00105d6:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c00105d9:	85 c0                	test   eax,eax
c00105db:	74 02                	je     c00105df <VgaText::updateCursor()+0x15>
c00105dd:	ff e0                	jmp    eax
c00105df:	c3                   	ret    

c00105e0 <VgaText::showCursor(bool)>:
c00105e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105e8:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c00105eb:	c3                   	ret    

c00105ec <VgaText::disableBlink(bool)>:
c00105ec:	56                   	push   esi
c00105ed:	53                   	push   ebx
c00105ee:	51                   	push   ecx
c00105ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00105f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00105f7:	39 1d 04 e8 02 c0    	cmp    DWORD PTR ds:0xc002e804,ebx
c00105fd:	75 15                	jne    c0010614 <VgaText::disableBlink(bool)+0x28>
c00105ff:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c0010602:	85 c0                	test   eax,eax
c0010604:	74 0e                	je     c0010614 <VgaText::disableBlink(bool)+0x28>
c0010606:	89 f1                	mov    ecx,esi
c0010608:	52                   	push   edx
c0010609:	52                   	push   edx
c001060a:	0f b6 d1             	movzx  edx,cl
c001060d:	52                   	push   edx
c001060e:	53                   	push   ebx
c001060f:	ff d0                	call   eax
c0010611:	83 c4 10             	add    esp,0x10
c0010614:	89 f0                	mov    eax,esi
c0010616:	83 f0 01             	xor    eax,0x1
c0010619:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c001061c:	58                   	pop    eax
c001061d:	5b                   	pop    ebx
c001061e:	5e                   	pop    esi
c001061f:	c3                   	ret    

c0010620 <VgaText::doANSI_SGR(int)>:
c0010620:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010628:	85 d2                	test   edx,edx
c001062a:	75 0b                	jne    c0010637 <VgaText::doANSI_SGR(int)+0x17>
c001062c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001062f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010632:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010635:	eb 59                	jmp    c0010690 <VgaText::doANSI_SGR(int)+0x70>
c0010637:	83 fa 07             	cmp    edx,0x7
c001063a:	75 0b                	jne    c0010647 <VgaText::doANSI_SGR(int)+0x27>
c001063c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001063f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010642:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010645:	eb 49                	jmp    c0010690 <VgaText::doANSI_SGR(int)+0x70>
c0010647:	83 fa 1b             	cmp    edx,0x1b
c001064a:	74 e0                	je     c001062c <VgaText::doANSI_SGR(int)+0xc>
c001064c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001064f:	83 f9 07             	cmp    ecx,0x7
c0010652:	77 09                	ja     c001065d <VgaText::doANSI_SGR(int)+0x3d>
c0010654:	8b 14 8d 80 d6 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2980]
c001065b:	eb 20                	jmp    c001067d <VgaText::doANSI_SGR(int)+0x5d>
c001065d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010660:	83 f9 07             	cmp    ecx,0x7
c0010663:	77 09                	ja     c001066e <VgaText::doANSI_SGR(int)+0x4e>
c0010665:	8b 14 8d 80 d6 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2980]
c001066c:	eb 22                	jmp    c0010690 <VgaText::doANSI_SGR(int)+0x70>
c001066e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010671:	83 f9 07             	cmp    ecx,0x7
c0010674:	77 0b                	ja     c0010681 <VgaText::doANSI_SGR(int)+0x61>
c0010676:	8b 14 95 38 d5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2ac8]
c001067d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010680:	c3                   	ret    
c0010681:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010684:	83 f9 07             	cmp    ecx,0x7
c0010687:	77 0a                	ja     c0010693 <VgaText::doANSI_SGR(int)+0x73>
c0010689:	8b 14 95 10 d5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2af0]
c0010690:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010693:	c3                   	ret    

c0010694 <VgaText::setDefaultBgColour(VgaColour)>:
c0010694:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010698:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001069c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001069f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00106a2:	c3                   	ret    
c00106a3:	90                   	nop

c00106a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00106a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00106af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00106b2:	c3                   	ret    
c00106b3:	90                   	nop

c00106b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00106b4:	53                   	push   ebx
c00106b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00106b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00106bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00106c1:	51                   	push   ecx
c00106c2:	e8 cd ff ff ff       	call   c0010694 <VgaText::setDefaultBgColour(VgaColour)>
c00106c7:	58                   	pop    eax
c00106c8:	5a                   	pop    edx
c00106c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00106cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00106d1:	5b                   	pop    ebx
c00106d2:	eb d0                	jmp    c00106a4 <VgaText::setDefaultFgColour(VgaColour)>

c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>:
c00106d4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00106d8:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00106dd:	83 e0 0f             	and    eax,0xf
c00106e0:	c1 e2 04             	shl    edx,0x4
c00106e3:	09 d0                	or     eax,edx
c00106e5:	c3                   	ret    

c00106e6 <VgaText::scrollScreen()>:
c00106e6:	55                   	push   ebp
c00106e7:	b9 01 00 00 00       	mov    ecx,0x1
c00106ec:	57                   	push   edi
c00106ed:	56                   	push   esi
c00106ee:	53                   	push   ebx
c00106ef:	83 ec 0c             	sub    esp,0xc
c00106f2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00106f6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00106fc:	31 ff                	xor    edi,edi
c00106fe:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010701:	83 f9 17             	cmp    ecx,0x17
c0010704:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0010707:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c001070e:	75 27                	jne    c0010737 <VgaText::scrollScreen()+0x51>
c0010710:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010713:	01 f5                	add    ebp,esi
c0010715:	f7 c7 01 00 00 00    	test   edi,0x1
c001071b:	74 16                	je     c0010733 <VgaText::scrollScreen()+0x4d>
c001071d:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010721:	50                   	push   eax
c0010722:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010726:	50                   	push   eax
c0010727:	e8 a8 ff ff ff       	call   c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>
c001072c:	5a                   	pop    edx
c001072d:	5a                   	pop    edx
c001072e:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010731:	eb 04                	jmp    c0010737 <VgaText::scrollScreen()+0x51>
c0010733:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0010737:	47                   	inc    edi
c0010738:	46                   	inc    esi
c0010739:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001073f:	75 bd                	jne    c00106fe <VgaText::scrollScreen()+0x18>
c0010741:	41                   	inc    ecx
c0010742:	83 f9 18             	cmp    ecx,0x18
c0010745:	75 af                	jne    c00106f6 <VgaText::scrollScreen()+0x10>
c0010747:	39 1d 04 e8 02 c0    	cmp    DWORD PTR ds:0xc002e804,ebx
c001074d:	75 1b                	jne    c001076a <VgaText::scrollScreen()+0x84>
c001074f:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010753:	74 05                	je     c001075a <VgaText::scrollScreen()+0x74>
c0010755:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010758:	eb 10                	jmp    c001076a <VgaText::scrollScreen()+0x84>
c001075a:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c001075d:	85 c0                	test   eax,eax
c001075f:	74 09                	je     c001076a <VgaText::scrollScreen()+0x84>
c0010761:	83 ec 0c             	sub    esp,0xc
c0010764:	53                   	push   ebx
c0010765:	ff d0                	call   eax
c0010767:	83 c4 10             	add    esp,0x10
c001076a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001076e:	83 c4 0c             	add    esp,0xc
c0010771:	5b                   	pop    ebx
c0010772:	5e                   	pop    esi
c0010773:	5f                   	pop    edi
c0010774:	5d                   	pop    ebp
c0010775:	e9 50 fe ff ff       	jmp    c00105ca <VgaText::updateCursor()>

c001077a <VgaText::combineCharAndColour(char, unsigned char)>:
c001077a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001077f:	c1 e0 08             	shl    eax,0x8
c0010782:	89 c2                	mov    edx,eax
c0010784:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010789:	09 d0                	or     eax,edx
c001078b:	c3                   	ret    

c001078c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001078c:	56                   	push   esi
c001078d:	53                   	push   ebx
c001078e:	51                   	push   ecx
c001078f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010793:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010798:	50                   	push   eax
c0010799:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001079e:	50                   	push   eax
c001079f:	e8 30 ff ff ff       	call   c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>
c00107a4:	5b                   	pop    ebx
c00107a5:	0f b6 c0             	movzx  eax,al
c00107a8:	5e                   	pop    esi
c00107a9:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00107ae:	50                   	push   eax
c00107af:	53                   	push   ebx
c00107b0:	e8 c5 ff ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c00107b5:	5a                   	pop    edx
c00107b6:	5e                   	pop    esi
c00107b7:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00107ba:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00107c0:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00107c4:	0f b7 d2             	movzx  edx,dx
c00107c7:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c00107cb:	39 0d 04 e8 02 c0    	cmp    DWORD PTR ds:0xc002e804,ecx
c00107d1:	75 10                	jne    c00107e3 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00107d3:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c00107d6:	85 c0                	test   eax,eax
c00107d8:	74 09                	je     c00107e3 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00107da:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00107de:	5a                   	pop    edx
c00107df:	5b                   	pop    ebx
c00107e0:	5e                   	pop    esi
c00107e1:	ff e0                	jmp    eax
c00107e3:	58                   	pop    eax
c00107e4:	5b                   	pop    ebx
c00107e5:	5e                   	pop    esi
c00107e6:	c3                   	ret    
c00107e7:	90                   	nop

c00107e8 <VgaText::getCursorX()>:
c00107e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107ec:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00107ef:	c3                   	ret    

c00107f0 <VgaText::getCursorY()>:
c00107f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107f4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00107f7:	c3                   	ret    

c00107f8 <VgaText::setCursor(int, int)>:
c00107f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010800:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010803:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010807:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001080a:	e9 bb fd ff ff       	jmp    c00105ca <VgaText::updateCursor()>
c001080f:	90                   	nop

c0010810 <VgaText::setCursorX(int)>:
c0010810:	83 ec 10             	sub    esp,0x10
c0010813:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010817:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001081a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001081e:	50                   	push   eax
c001081f:	e8 d4 ff ff ff       	call   c00107f8 <VgaText::setCursor(int, int)>
c0010824:	83 c4 1c             	add    esp,0x1c
c0010827:	c3                   	ret    

c0010828 <VgaText::setCursorY(int)>:
c0010828:	83 ec 10             	sub    esp,0x10
c001082b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001082f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010833:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010836:	50                   	push   eax
c0010837:	e8 bc ff ff ff       	call   c00107f8 <VgaText::setCursor(int, int)>
c001083c:	83 c4 1c             	add    esp,0x1c
c001083f:	c3                   	ret    

c0010840 <VgaText::incrementCursor(bool)>:
c0010840:	56                   	push   esi
c0010841:	53                   	push   ebx
c0010842:	51                   	push   ecx
c0010843:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010847:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001084b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001084e:	40                   	inc    eax
c001084f:	83 f8 50             	cmp    eax,0x50
c0010852:	74 05                	je     c0010859 <VgaText::incrementCursor(bool)+0x19>
c0010854:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010857:	eb 24                	jmp    c001087d <VgaText::incrementCursor(bool)+0x3d>
c0010859:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001085c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010863:	8d 50 01             	lea    edx,[eax+0x1]
c0010866:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010869:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001086c:	75 0f                	jne    c001087d <VgaText::incrementCursor(bool)+0x3d>
c001086e:	83 ec 0c             	sub    esp,0xc
c0010871:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010874:	53                   	push   ebx
c0010875:	e8 6c fe ff ff       	call   c00106e6 <VgaText::scrollScreen()>
c001087a:	83 c4 10             	add    esp,0x10
c001087d:	89 f0                	mov    eax,esi
c001087f:	84 c0                	test   al,al
c0010881:	74 0c                	je     c001088f <VgaText::incrementCursor(bool)+0x4f>
c0010883:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010887:	5a                   	pop    edx
c0010888:	5b                   	pop    ebx
c0010889:	5e                   	pop    esi
c001088a:	e9 3b fd ff ff       	jmp    c00105ca <VgaText::updateCursor()>
c001088f:	58                   	pop    eax
c0010890:	5b                   	pop    ebx
c0010891:	5e                   	pop    esi
c0010892:	c3                   	ret    
c0010893:	90                   	nop

c0010894 <VgaText::updateRAMUsageDisplay(int)>:
c0010894:	56                   	push   esi
c0010895:	8b 35 60 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d660
c001089b:	53                   	push   ebx
c001089c:	bb 0a 00 00 00       	mov    ebx,0xa
c00108a1:	6a 0f                	push   0xf
c00108a3:	6a 00                	push   0x0
c00108a5:	e8 2a fe ff ff       	call   c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>
c00108aa:	5a                   	pop    edx
c00108ab:	59                   	pop    ecx
c00108ac:	0f b6 c8             	movzx  ecx,al
c00108af:	51                   	push   ecx
c00108b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b4:	99                   	cdq    
c00108b5:	f7 fb                	idiv   ebx
c00108b7:	89 d3                	mov    ebx,edx
c00108b9:	83 c0 30             	add    eax,0x30
c00108bc:	83 c3 30             	add    ebx,0x30
c00108bf:	0f be c0             	movsx  eax,al
c00108c2:	0f b6 db             	movzx  ebx,bl
c00108c5:	50                   	push   eax
c00108c6:	e8 af fe ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c00108cb:	5a                   	pop    edx
c00108cc:	5a                   	pop    edx
c00108cd:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00108d4:	51                   	push   ecx
c00108d5:	53                   	push   ebx
c00108d6:	e8 9f fe ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c00108db:	5b                   	pop    ebx
c00108dc:	5a                   	pop    edx
c00108dd:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00108e4:	51                   	push   ecx
c00108e5:	6a 25                	push   0x25
c00108e7:	e8 8e fe ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c00108ec:	59                   	pop    ecx
c00108ed:	5b                   	pop    ebx
c00108ee:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00108f5:	5b                   	pop    ebx
c00108f6:	5e                   	pop    esi
c00108f7:	c3                   	ret    

c00108f8 <VgaText::updateDiskUsage()>:
c00108f8:	55                   	push   ebp
c00108f9:	bd 10 27 00 00       	mov    ebp,0x2710
c00108fe:	57                   	push   edi
c00108ff:	8b 3d 60 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d660
c0010905:	56                   	push   esi
c0010906:	53                   	push   ebx
c0010907:	6a 0f                	push   0xf
c0010909:	6a 00                	push   0x0
c001090b:	e8 c4 fd ff ff       	call   c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>
c0010910:	5a                   	pop    edx
c0010911:	0f b6 d8             	movzx  ebx,al
c0010914:	59                   	pop    ecx
c0010915:	8b 35 88 2a 03 c0    	mov    esi,DWORD PTR ds:0xc0032a88
c001091b:	53                   	push   ebx
c001091c:	b9 0a 00 00 00       	mov    ecx,0xa
c0010921:	89 f0                	mov    eax,esi
c0010923:	99                   	cdq    
c0010924:	f7 fd                	idiv   ebp
c0010926:	99                   	cdq    
c0010927:	f7 f9                	idiv   ecx
c0010929:	8d 42 30             	lea    eax,[edx+0x30]
c001092c:	0f b6 c0             	movzx  eax,al
c001092f:	50                   	push   eax
c0010930:	e8 45 fe ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010935:	5d                   	pop    ebp
c0010936:	bd e8 03 00 00       	mov    ebp,0x3e8
c001093b:	5a                   	pop    edx
c001093c:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010940:	53                   	push   ebx
c0010941:	89 f0                	mov    eax,esi
c0010943:	99                   	cdq    
c0010944:	f7 fd                	idiv   ebp
c0010946:	99                   	cdq    
c0010947:	f7 f9                	idiv   ecx
c0010949:	8d 42 30             	lea    eax,[edx+0x30]
c001094c:	0f b6 c0             	movzx  eax,al
c001094f:	50                   	push   eax
c0010950:	e8 25 fe ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010955:	5d                   	pop    ebp
c0010956:	bd 64 00 00 00       	mov    ebp,0x64
c001095b:	5a                   	pop    edx
c001095c:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010963:	53                   	push   ebx
c0010964:	89 f0                	mov    eax,esi
c0010966:	99                   	cdq    
c0010967:	f7 fd                	idiv   ebp
c0010969:	99                   	cdq    
c001096a:	f7 f9                	idiv   ecx
c001096c:	8d 42 30             	lea    eax,[edx+0x30]
c001096f:	0f b6 c0             	movzx  eax,al
c0010972:	50                   	push   eax
c0010973:	e8 02 fe ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010978:	5d                   	pop    ebp
c0010979:	5a                   	pop    edx
c001097a:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010981:	53                   	push   ebx
c0010982:	89 f0                	mov    eax,esi
c0010984:	99                   	cdq    
c0010985:	f7 f9                	idiv   ecx
c0010987:	89 d6                	mov    esi,edx
c0010989:	99                   	cdq    
c001098a:	f7 f9                	idiv   ecx
c001098c:	8d 42 30             	lea    eax,[edx+0x30]
c001098f:	0f b6 c0             	movzx  eax,al
c0010992:	50                   	push   eax
c0010993:	e8 e2 fd ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010998:	5d                   	pop    ebp
c0010999:	5a                   	pop    edx
c001099a:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c00109a1:	53                   	push   ebx
c00109a2:	8d 46 30             	lea    eax,[esi+0x30]
c00109a5:	0f b6 f0             	movzx  esi,al
c00109a8:	56                   	push   esi
c00109a9:	e8 cc fd ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c00109ae:	5e                   	pop    esi
c00109af:	8b 35 84 2a 03 c0    	mov    esi,DWORD PTR ds:0xc0032a84
c00109b5:	5d                   	pop    ebp
c00109b6:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c00109bd:	bd 10 27 00 00       	mov    ebp,0x2710
c00109c2:	53                   	push   ebx
c00109c3:	89 f0                	mov    eax,esi
c00109c5:	99                   	cdq    
c00109c6:	f7 fd                	idiv   ebp
c00109c8:	99                   	cdq    
c00109c9:	f7 f9                	idiv   ecx
c00109cb:	8d 42 30             	lea    eax,[edx+0x30]
c00109ce:	0f b6 c0             	movzx  eax,al
c00109d1:	50                   	push   eax
c00109d2:	e8 a3 fd ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c00109d7:	5a                   	pop    edx
c00109d8:	5d                   	pop    ebp
c00109d9:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c00109e0:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109e5:	53                   	push   ebx
c00109e6:	89 f0                	mov    eax,esi
c00109e8:	99                   	cdq    
c00109e9:	f7 fd                	idiv   ebp
c00109eb:	99                   	cdq    
c00109ec:	f7 f9                	idiv   ecx
c00109ee:	8d 42 30             	lea    eax,[edx+0x30]
c00109f1:	0f b6 c0             	movzx  eax,al
c00109f4:	50                   	push   eax
c00109f5:	e8 80 fd ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c00109fa:	5a                   	pop    edx
c00109fb:	5d                   	pop    ebp
c00109fc:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010a03:	bd 64 00 00 00       	mov    ebp,0x64
c0010a08:	53                   	push   ebx
c0010a09:	89 f0                	mov    eax,esi
c0010a0b:	99                   	cdq    
c0010a0c:	f7 fd                	idiv   ebp
c0010a0e:	99                   	cdq    
c0010a0f:	f7 f9                	idiv   ecx
c0010a11:	83 c2 30             	add    edx,0x30
c0010a14:	0f b6 d2             	movzx  edx,dl
c0010a17:	52                   	push   edx
c0010a18:	e8 5d fd ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010a1d:	5a                   	pop    edx
c0010a1e:	5d                   	pop    ebp
c0010a1f:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010a26:	53                   	push   ebx
c0010a27:	89 f0                	mov    eax,esi
c0010a29:	99                   	cdq    
c0010a2a:	f7 f9                	idiv   ecx
c0010a2c:	89 d6                	mov    esi,edx
c0010a2e:	99                   	cdq    
c0010a2f:	f7 f9                	idiv   ecx
c0010a31:	8d 42 30             	lea    eax,[edx+0x30]
c0010a34:	0f b6 c0             	movzx  eax,al
c0010a37:	50                   	push   eax
c0010a38:	e8 3d fd ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010a3d:	5a                   	pop    edx
c0010a3e:	59                   	pop    ecx
c0010a3f:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010a46:	53                   	push   ebx
c0010a47:	8d 46 30             	lea    eax,[esi+0x30]
c0010a4a:	0f b6 f0             	movzx  esi,al
c0010a4d:	56                   	push   esi
c0010a4e:	e8 27 fd ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010a53:	5b                   	pop    ebx
c0010a54:	5e                   	pop    esi
c0010a55:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010a5c:	5b                   	pop    ebx
c0010a5d:	5e                   	pop    esi
c0010a5e:	5f                   	pop    edi
c0010a5f:	5d                   	pop    ebp
c0010a60:	c3                   	ret    
c0010a61:	90                   	nop

c0010a62 <VgaText::updateTitle()>:
c0010a62:	53                   	push   ebx
c0010a63:	31 c0                	xor    eax,eax
c0010a65:	83 ec 58             	sub    esp,0x58
c0010a68:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010a6c:	89 e1                	mov    ecx,esp
c0010a6e:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010a72:	40                   	inc    eax
c0010a73:	83 f8 50             	cmp    eax,0x50
c0010a76:	75 f6                	jne    c0010a6e <VgaText::updateTitle()+0xc>
c0010a78:	31 c0                	xor    eax,eax
c0010a7a:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010a81:	84 db                	test   bl,bl
c0010a83:	74 06                	je     c0010a8b <VgaText::updateTitle()+0x29>
c0010a85:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010a88:	40                   	inc    eax
c0010a89:	eb ef                	jmp    c0010a7a <VgaText::updateTitle()+0x18>
c0010a8b:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010a8e:	85 c0                	test   eax,eax
c0010a90:	74 09                	je     c0010a9b <VgaText::updateTitle()+0x39>
c0010a92:	53                   	push   ebx
c0010a93:	53                   	push   ebx
c0010a94:	51                   	push   ecx
c0010a95:	52                   	push   edx
c0010a96:	ff d0                	call   eax
c0010a98:	83 c4 10             	add    esp,0x10
c0010a9b:	e8 58 fe ff ff       	call   c00108f8 <VgaText::updateDiskUsage()>
c0010aa0:	83 c4 58             	add    esp,0x58
c0010aa3:	5b                   	pop    ebx
c0010aa4:	c3                   	ret    
c0010aa5:	90                   	nop

c0010aa6 <VgaText::setTitleTextColour(VgaColour)>:
c0010aa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010aaa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010aae:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010ab1:	eb af                	jmp    c0010a62 <VgaText::updateTitle()>
c0010ab3:	90                   	nop

c0010ab4 <VgaText::setTitleColour(VgaColour)>:
c0010ab4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ab8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010abc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010abf:	eb a1                	jmp    c0010a62 <VgaText::updateTitle()>
c0010ac1:	90                   	nop

c0010ac2 <VgaText::setTitle(char*)>:
c0010ac2:	53                   	push   ebx
c0010ac3:	83 ec 10             	sub    esp,0x10
c0010ac6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010aca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ace:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010ad4:	50                   	push   eax
c0010ad5:	e8 62 fd fe ff       	call   c000083c <strcpy>
c0010ada:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010ade:	83 c4 18             	add    esp,0x18
c0010ae1:	5b                   	pop    ebx
c0010ae2:	e9 7b ff ff ff       	jmp    c0010a62 <VgaText::updateTitle()>
c0010ae7:	90                   	nop

c0010ae8 <VgaText::decrementCursor(bool)>:
c0010ae8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010aec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010af0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010af3:	85 c0                	test   eax,eax
c0010af5:	74 04                	je     c0010afb <VgaText::decrementCursor(bool)+0x13>
c0010af7:	48                   	dec    eax
c0010af8:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010afb:	84 c9                	test   cl,cl
c0010afd:	74 09                	je     c0010b08 <VgaText::decrementCursor(bool)+0x20>
c0010aff:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010b03:	e9 c2 fa ff ff       	jmp    c00105ca <VgaText::updateCursor()>
c0010b08:	c3                   	ret    
c0010b09:	90                   	nop

c0010b0a <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010b0a:	53                   	push   ebx
c0010b0b:	83 ec 08             	sub    esp,0x8
c0010b0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b16:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010b1a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010b1e:	3c 07                	cmp    al,0x7
c0010b20:	75 2a                	jne    c0010b4c <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010b22:	a1 b8 e8 02 c0       	mov    eax,ds:0xc002e8b8
c0010b27:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010b2f:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010b37:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010b3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010b43:	83 c4 08             	add    esp,0x8
c0010b46:	5b                   	pop    ebx
c0010b47:	e9 7c 30 00 00       	jmp    c0013bc8 <Buzzer::beep(int, int, bool)>
c0010b4c:	3c 0d                	cmp    al,0xd
c0010b4e:	75 09                	jne    c0010b59 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010b50:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010b57:	eb 2c                	jmp    c0010b85 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010b59:	3c 0a                	cmp    al,0xa
c0010b5b:	75 31                	jne    c0010b8e <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010b5d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010b60:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010b67:	8d 50 01             	lea    edx,[eax+0x1]
c0010b6a:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010b6d:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010b70:	75 0f                	jne    c0010b81 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010b72:	83 ec 0c             	sub    esp,0xc
c0010b75:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010b78:	53                   	push   ebx
c0010b79:	e8 68 fb ff ff       	call   c00106e6 <VgaText::scrollScreen()>
c0010b7e:	83 c4 10             	add    esp,0x10
c0010b81:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010b85:	83 c4 08             	add    esp,0x8
c0010b88:	5b                   	pop    ebx
c0010b89:	e9 3c fa ff ff       	jmp    c00105ca <VgaText::updateCursor()>
c0010b8e:	3c 08                	cmp    al,0x8
c0010b90:	75 25                	jne    c0010bb7 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010b92:	50                   	push   eax
c0010b93:	50                   	push   eax
c0010b94:	6a 01                	push   0x1
c0010b96:	53                   	push   ebx
c0010b97:	e8 4c ff ff ff       	call   c0010ae8 <VgaText::decrementCursor(bool)>
c0010b9c:	5a                   	pop    edx
c0010b9d:	59                   	pop    ecx
c0010b9e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010ba1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010ba4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010ba7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010baa:	6a 20                	push   0x20
c0010bac:	53                   	push   ebx
c0010bad:	e8 da fb ff ff       	call   c001078c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010bb2:	83 c4 28             	add    esp,0x28
c0010bb5:	5b                   	pop    ebx
c0010bb6:	c3                   	ret    
c0010bb7:	83 ec 08             	sub    esp,0x8
c0010bba:	0f be c0             	movsx  eax,al
c0010bbd:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010bc0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010bc3:	51                   	push   ecx
c0010bc4:	52                   	push   edx
c0010bc5:	50                   	push   eax
c0010bc6:	53                   	push   ebx
c0010bc7:	e8 c0 fb ff ff       	call   c001078c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010bcc:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010bd0:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010bd8:	83 c4 28             	add    esp,0x28
c0010bdb:	5b                   	pop    ebx
c0010bdc:	e9 5f fc ff ff       	jmp    c0010840 <VgaText::incrementCursor(bool)>
c0010be1:	90                   	nop

c0010be2 <VgaText::isShowingCursor()>:
c0010be2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010be6:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0010be9:	c3                   	ret    

c0010bea <VgaText::isBlinkDisabled()>:
c0010bea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bee:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0010bf1:	83 f0 01             	xor    eax,0x1
c0010bf4:	c3                   	ret    
c0010bf5:	90                   	nop

c0010bf6 <VgaText::setCursorHeight(int)>:
c0010bf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bfa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bfe:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c01:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c0010c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c09:	e9 d2 f9 ff ff       	jmp    c00105e0 <VgaText::showCursor(bool)>

c0010c0e <VgaText::getCursorHeight()>:
c0010c0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c12:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0010c15:	c3                   	ret    

c0010c16 <setActiveTerminal(VgaText*)>:
c0010c16:	53                   	push   ebx
c0010c17:	83 ec 08             	sub    esp,0x8
c0010c1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c1e:	85 db                	test   ebx,ebx
c0010c20:	75 11                	jne    c0010c33 <setActiveTerminal(VgaText*)+0x1d>
c0010c22:	c7 44 24 10 8c a5 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a58c
c0010c2a:	83 c4 08             	add    esp,0x8
c0010c2d:	5b                   	pop    ebx
c0010c2e:	e9 5c 99 00 00       	jmp    c001a58f <Krnl::panic(char const*)>
c0010c33:	50                   	push   eax
c0010c34:	50                   	push   eax
c0010c35:	53                   	push   ebx
c0010c36:	68 9a a5 02 c0       	push   0xc002a59a
c0010c3b:	e8 83 21 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0010c40:	a1 04 e8 02 c0       	mov    eax,ds:0xc002e804
c0010c45:	83 c4 10             	add    esp,0x10
c0010c48:	85 c0                	test   eax,eax
c0010c4a:	74 0c                	je     c0010c58 <setActiveTerminal(VgaText*)+0x42>
c0010c4c:	83 ec 0c             	sub    esp,0xc
c0010c4f:	50                   	push   eax
c0010c50:	e8 75 f9 ff ff       	call   c00105ca <VgaText::updateCursor()>
c0010c55:	83 c4 10             	add    esp,0x10
c0010c58:	89 1d 04 e8 02 c0    	mov    DWORD PTR ds:0xc002e804,ebx
c0010c5e:	51                   	push   ecx
c0010c5f:	51                   	push   ecx
c0010c60:	53                   	push   ebx
c0010c61:	68 b2 a5 02 c0       	push   0xc002a5b2
c0010c66:	e8 58 21 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0010c6b:	83 c4 0c             	add    esp,0xc
c0010c6e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c71:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c74:	53                   	push   ebx
c0010c75:	e8 7e fb ff ff       	call   c00107f8 <VgaText::setCursor(int, int)>
c0010c7a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c7d:	e8 68 ff ff ff       	call   c0010bea <VgaText::isBlinkDisabled()>
c0010c82:	5a                   	pop    edx
c0010c83:	0f b6 c0             	movzx  eax,al
c0010c86:	59                   	pop    ecx
c0010c87:	50                   	push   eax
c0010c88:	53                   	push   ebx
c0010c89:	e8 5e f9 ff ff       	call   c00105ec <VgaText::disableBlink(bool)>
c0010c8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c91:	e8 78 ff ff ff       	call   c0010c0e <VgaText::getCursorHeight()>
c0010c96:	5a                   	pop    edx
c0010c97:	59                   	pop    ecx
c0010c98:	50                   	push   eax
c0010c99:	53                   	push   ebx
c0010c9a:	e8 57 ff ff ff       	call   c0010bf6 <VgaText::setCursorHeight(int)>
c0010c9f:	83 c4 10             	add    esp,0x10
c0010ca2:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010ca6:	75 07                	jne    c0010caf <setActiveTerminal(VgaText*)+0x99>
c0010ca8:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010caf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010cb3:	83 c4 08             	add    esp,0x8
c0010cb6:	5b                   	pop    ebx
c0010cb7:	e9 c0 f8 ff ff       	jmp    c001057c <VgaText::load()>

c0010cbc <doTerminalCycle()>:
c0010cbc:	83 ec 18             	sub    esp,0x18
c0010cbf:	a1 00 e8 02 c0       	mov    eax,ds:0xc002e800
c0010cc4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010cc7:	50                   	push   eax
c0010cc8:	a3 00 e8 02 c0       	mov    ds:0xc002e800,eax
c0010ccd:	e8 44 ff ff ff       	call   c0010c16 <setActiveTerminal(VgaText*)>
c0010cd2:	83 c4 1c             	add    esp,0x1c
c0010cd5:	c3                   	ret    

c0010cd6 <VgaText::doUpdate()>:
c0010cd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cda:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010cdd:	85 c0                	test   eax,eax
c0010cdf:	74 02                	je     c0010ce3 <VgaText::doUpdate()+0xd>
c0010ce1:	ff e0                	jmp    eax
c0010ce3:	c3                   	ret    

c0010ce4 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010ce4:	55                   	push   ebp
c0010ce5:	31 ed                	xor    ebp,ebp
c0010ce7:	57                   	push   edi
c0010ce8:	56                   	push   esi
c0010ce9:	53                   	push   ebx
c0010cea:	83 ec 1c             	sub    esp,0x1c
c0010ced:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010cf1:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010cf6:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010cfd:	50                   	push   eax
c0010cfe:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010d03:	50                   	push   eax
c0010d04:	e8 cb f9 ff ff       	call   c00106d4 <VgaText::combineColours(unsigned char, unsigned char)>
c0010d09:	59                   	pop    ecx
c0010d0a:	0f b6 c0             	movzx  eax,al
c0010d0d:	5e                   	pop    esi
c0010d0e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010d13:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010d17:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010d1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d1e:	0f b7 f6             	movzx  esi,si
c0010d21:	01 f6                	add    esi,esi
c0010d23:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010d26:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010d29:	84 c0                	test   al,al
c0010d2b:	0f 84 fd 00 00 00    	je     c0010e2e <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010d31:	3c 0d                	cmp    al,0xd
c0010d33:	75 0c                	jne    c0010d41 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010d35:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010d3c:	e9 e7 00 00 00       	jmp    c0010e28 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010d41:	3c 0a                	cmp    al,0xa
c0010d43:	75 47                	jne    c0010d8c <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010d45:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010d48:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010d4f:	8d 48 01             	lea    ecx,[eax+0x1]
c0010d52:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010d55:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010d58:	75 0f                	jne    c0010d69 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010d5a:	83 ec 0c             	sub    esp,0xc
c0010d5d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010d60:	53                   	push   ebx
c0010d61:	e8 80 f9 ff ff       	call   c00106e6 <VgaText::scrollScreen()>
c0010d66:	83 c4 10             	add    esp,0x10
c0010d69:	83 ec 0c             	sub    esp,0xc
c0010d6c:	31 ed                	xor    ebp,ebp
c0010d6e:	53                   	push   ebx
c0010d6f:	e8 56 f8 ff ff       	call   c00105ca <VgaText::updateCursor()>
c0010d74:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010d79:	83 c4 10             	add    esp,0x10
c0010d7c:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010d7f:	0f b7 f6             	movzx  esi,si
c0010d82:	01 f6                	add    esi,esi
c0010d84:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010d87:	e9 9c 00 00 00       	jmp    c0010e28 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010d8c:	3c 08                	cmp    al,0x8
c0010d8e:	75 35                	jne    c0010dc5 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010d90:	56                   	push   esi
c0010d91:	56                   	push   esi
c0010d92:	6a 01                	push   0x1
c0010d94:	53                   	push   ebx
c0010d95:	e8 4e fd ff ff       	call   c0010ae8 <VgaText::decrementCursor(bool)>
c0010d9a:	58                   	pop    eax
c0010d9b:	5a                   	pop    edx
c0010d9c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010d9f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010da2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010da5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010da8:	6a 20                	push   0x20
c0010daa:	53                   	push   ebx
c0010dab:	e8 dc f9 ff ff       	call   c001078c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010db0:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010db5:	83 c4 20             	add    esp,0x20
c0010db8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010dbb:	0f b7 f6             	movzx  esi,si
c0010dbe:	01 f6                	add    esi,esi
c0010dc0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010dc3:	eb 63                	jmp    c0010e28 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010dc5:	51                   	push   ecx
c0010dc6:	51                   	push   ecx
c0010dc7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010dcb:	50                   	push   eax
c0010dcc:	e8 a9 f9 ff ff       	call   c001077a <VgaText::combineCharAndColour(char, unsigned char)>
c0010dd1:	83 c4 10             	add    esp,0x10
c0010dd4:	66 89 06             	mov    WORD PTR [esi],ax
c0010dd7:	39 1d 04 e8 02 c0    	cmp    DWORD PTR ds:0xc002e804,ebx
c0010ddd:	75 21                	jne    c0010e00 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010ddf:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010de2:	85 c0                	test   eax,eax
c0010de4:	74 1a                	je     c0010e00 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010de6:	52                   	push   edx
c0010de7:	52                   	push   edx
c0010de8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010deb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010dee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010df2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010df6:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010df9:	51                   	push   ecx
c0010dfa:	53                   	push   ebx
c0010dfb:	ff d0                	call   eax
c0010dfd:	83 c4 20             	add    esp,0x20
c0010e00:	83 c6 02             	add    esi,0x2
c0010e03:	50                   	push   eax
c0010e04:	50                   	push   eax
c0010e05:	6a 00                	push   0x0
c0010e07:	53                   	push   ebx
c0010e08:	e8 33 fa ff ff       	call   c0010840 <VgaText::incrementCursor(bool)>
c0010e0d:	83 c4 10             	add    esp,0x10
c0010e10:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010e14:	75 0d                	jne    c0010e23 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010e16:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e1b:	0f b7 f6             	movzx  esi,si
c0010e1e:	01 f6                	add    esi,esi
c0010e20:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e23:	bd 01 00 00 00       	mov    ebp,0x1
c0010e28:	47                   	inc    edi
c0010e29:	e9 f8 fe ff ff       	jmp    c0010d26 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010e2e:	83 ec 0c             	sub    esp,0xc
c0010e31:	53                   	push   ebx
c0010e32:	e8 93 f7 ff ff       	call   c00105ca <VgaText::updateCursor()>
c0010e37:	83 c4 10             	add    esp,0x10
c0010e3a:	89 e8                	mov    eax,ebp
c0010e3c:	84 c0                	test   al,al
c0010e3e:	74 0c                	je     c0010e4c <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010e40:	83 ec 0c             	sub    esp,0xc
c0010e43:	53                   	push   ebx
c0010e44:	e8 8d fe ff ff       	call   c0010cd6 <VgaText::doUpdate()>
c0010e49:	83 c4 10             	add    esp,0x10
c0010e4c:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010e53:	83 c4 1c             	add    esp,0x1c
c0010e56:	5b                   	pop    ebx
c0010e57:	5e                   	pop    esi
c0010e58:	5f                   	pop    edi
c0010e59:	5d                   	pop    ebp
c0010e5a:	c3                   	ret    
c0010e5b:	90                   	nop

c0010e5c <VgaText::clearScreen()>:
c0010e5c:	57                   	push   edi
c0010e5d:	56                   	push   esi
c0010e5e:	31 f6                	xor    esi,esi
c0010e60:	53                   	push   ebx
c0010e61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010e65:	52                   	push   edx
c0010e66:	6a 00                	push   0x0
c0010e68:	6a 00                	push   0x0
c0010e6a:	53                   	push   ebx
c0010e6b:	e8 88 f9 ff ff       	call   c00107f8 <VgaText::setCursor(int, int)>
c0010e70:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010e77:	83 c4 10             	add    esp,0x10
c0010e7a:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010e7d:	7e 20                	jle    c0010e9f <VgaText::clearScreen()+0x43>
c0010e7f:	31 ff                	xor    edi,edi
c0010e81:	50                   	push   eax
c0010e82:	50                   	push   eax
c0010e83:	56                   	push   esi
c0010e84:	57                   	push   edi
c0010e85:	47                   	inc    edi
c0010e86:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010e89:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010e8c:	6a 20                	push   0x20
c0010e8e:	53                   	push   ebx
c0010e8f:	e8 f8 f8 ff ff       	call   c001078c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010e94:	83 c4 20             	add    esp,0x20
c0010e97:	83 ff 50             	cmp    edi,0x50
c0010e9a:	75 e5                	jne    c0010e81 <VgaText::clearScreen()+0x25>
c0010e9c:	46                   	inc    esi
c0010e9d:	eb db                	jmp    c0010e7a <VgaText::clearScreen()+0x1e>
c0010e9f:	83 ec 0c             	sub    esp,0xc
c0010ea2:	53                   	push   ebx
c0010ea3:	e8 2e fe ff ff       	call   c0010cd6 <VgaText::doUpdate()>
c0010ea8:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010eaf:	83 c4 10             	add    esp,0x10
c0010eb2:	5b                   	pop    ebx
c0010eb3:	5e                   	pop    esi
c0010eb4:	5f                   	pop    edi
c0010eb5:	c3                   	ret    

c0010eb6 <VgaText::putchar(char)>:
c0010eb6:	56                   	push   esi
c0010eb7:	53                   	push   ebx
c0010eb8:	83 ec 14             	sub    esp,0x14
c0010ebb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010ebf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010ec3:	3c 5b                	cmp    al,0x5b
c0010ec5:	75 18                	jne    c0010edf <VgaText::putchar(char)+0x29>
c0010ec7:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010ecb:	74 1f                	je     c0010eec <VgaText::putchar(char)+0x36>
c0010ecd:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010ed3:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010eda:	e9 bd 00 00 00       	jmp    c0010f9c <VgaText::putchar(char)+0xe6>
c0010edf:	3c 1b                	cmp    al,0x1b
c0010ee1:	75 09                	jne    c0010eec <VgaText::putchar(char)+0x36>
c0010ee3:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010ee7:	e9 b0 00 00 00       	jmp    c0010f9c <VgaText::putchar(char)+0xe6>
c0010eec:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010eef:	84 c9                	test   cl,cl
c0010ef1:	0f 84 92 00 00 00    	je     c0010f89 <VgaText::putchar(char)+0xd3>
c0010ef7:	8d 50 c0             	lea    edx,[eax-0x40]
c0010efa:	80 fa 3e             	cmp    dl,0x3e
c0010efd:	77 76                	ja     c0010f75 <VgaText::putchar(char)+0xbf>
c0010eff:	3c 6d                	cmp    al,0x6d
c0010f01:	75 47                	jne    c0010f4a <VgaText::putchar(char)+0x94>
c0010f03:	31 f6                	xor    esi,esi
c0010f05:	31 d2                	xor    edx,edx
c0010f07:	31 c0                	xor    eax,eax
c0010f09:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010f0c:	7e 2d                	jle    c0010f3b <VgaText::putchar(char)+0x85>
c0010f0e:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010f13:	80 fa 3b             	cmp    dl,0x3b
c0010f16:	75 17                	jne    c0010f2f <VgaText::putchar(char)+0x79>
c0010f18:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f1c:	50                   	push   eax
c0010f1d:	53                   	push   ebx
c0010f1e:	e8 fd f6 ff ff       	call   c0010620 <VgaText::doANSI_SGR(int)>
c0010f23:	59                   	pop    ecx
c0010f24:	31 d2                	xor    edx,edx
c0010f26:	58                   	pop    eax
c0010f27:	31 c0                	xor    eax,eax
c0010f29:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f2d:	eb 09                	jmp    c0010f38 <VgaText::putchar(char)+0x82>
c0010f2f:	6b c0 0a             	imul   eax,eax,0xa
c0010f32:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010f36:	88 ca                	mov    dl,cl
c0010f38:	46                   	inc    esi
c0010f39:	eb ce                	jmp    c0010f09 <VgaText::putchar(char)+0x53>
c0010f3b:	84 d2                	test   dl,dl
c0010f3d:	74 2e                	je     c0010f6d <VgaText::putchar(char)+0xb7>
c0010f3f:	50                   	push   eax
c0010f40:	53                   	push   ebx
c0010f41:	e8 da f6 ff ff       	call   c0010620 <VgaText::doANSI_SGR(int)>
c0010f46:	58                   	pop    eax
c0010f47:	5a                   	pop    edx
c0010f48:	eb 23                	jmp    c0010f6d <VgaText::putchar(char)+0xb7>
c0010f4a:	3c 4a                	cmp    al,0x4a
c0010f4c:	75 1f                	jne    c0010f6d <VgaText::putchar(char)+0xb7>
c0010f4e:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010f52:	75 19                	jne    c0010f6d <VgaText::putchar(char)+0xb7>
c0010f54:	83 ec 0c             	sub    esp,0xc
c0010f57:	53                   	push   ebx
c0010f58:	e8 ff fe ff ff       	call   c0010e5c <VgaText::clearScreen()>
c0010f5d:	83 c4 0c             	add    esp,0xc
c0010f60:	6a 00                	push   0x0
c0010f62:	6a 00                	push   0x0
c0010f64:	53                   	push   ebx
c0010f65:	e8 8e f8 ff ff       	call   c00107f8 <VgaText::setCursor(int, int)>
c0010f6a:	83 c4 10             	add    esp,0x10
c0010f6d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010f73:	eb 27                	jmp    c0010f9c <VgaText::putchar(char)+0xe6>
c0010f75:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010f78:	83 fa 0e             	cmp    edx,0xe
c0010f7b:	7f 1f                	jg     c0010f9c <VgaText::putchar(char)+0xe6>
c0010f7d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010f80:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010f83:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010f87:	eb 13                	jmp    c0010f9c <VgaText::putchar(char)+0xe6>
c0010f89:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010f8c:	0f be c0             	movsx  eax,al
c0010f8f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010f92:	50                   	push   eax
c0010f93:	53                   	push   ebx
c0010f94:	e8 71 fb ff ff       	call   c0010b0a <VgaText::putchar(char, VgaColour, VgaColour)>
c0010f99:	83 c4 10             	add    esp,0x10
c0010f9c:	83 c4 14             	add    esp,0x14
c0010f9f:	5b                   	pop    ebx
c0010fa0:	5e                   	pop    esi
c0010fa1:	c3                   	ret    

c0010fa2 <VgaText::puts(char const*)>:
c0010fa2:	53                   	push   ebx
c0010fa3:	83 ec 08             	sub    esp,0x8
c0010fa6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010faa:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010fad:	84 c0                	test   al,al
c0010faf:	74 12                	je     c0010fc3 <VgaText::puts(char const*)+0x21>
c0010fb1:	43                   	inc    ebx
c0010fb2:	51                   	push   ecx
c0010fb3:	51                   	push   ecx
c0010fb4:	50                   	push   eax
c0010fb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fb9:	e8 f8 fe ff ff       	call   c0010eb6 <VgaText::putchar(char)>
c0010fbe:	83 c4 10             	add    esp,0x10
c0010fc1:	eb e7                	jmp    c0010faa <VgaText::puts(char const*)+0x8>
c0010fc3:	83 c4 08             	add    esp,0x8
c0010fc6:	5b                   	pop    ebx
c0010fc7:	c3                   	ret    

c0010fc8 <VgaText::putx(unsigned int)>:
c0010fc8:	57                   	push   edi
c0010fc9:	b9 11 00 00 00       	mov    ecx,0x11
c0010fce:	56                   	push   esi
c0010fcf:	be ce a5 02 c0       	mov    esi,0xc002a5ce
c0010fd4:	53                   	push   ebx
c0010fd5:	83 ec 20             	sub    esp,0x20
c0010fd8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010fdc:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010fe0:	fc                   	cld    
c0010fe1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fe3:	be 08 00 00 00       	mov    esi,0x8
c0010fe8:	50                   	push   eax
c0010fe9:	50                   	push   eax
c0010fea:	89 d8                	mov    eax,ebx
c0010fec:	c1 e3 04             	shl    ebx,0x4
c0010fef:	c1 e8 1c             	shr    eax,0x1c
c0010ff2:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010ff7:	50                   	push   eax
c0010ff8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010ffc:	e8 b5 fe ff ff       	call   c0010eb6 <VgaText::putchar(char)>
c0011001:	83 c4 10             	add    esp,0x10
c0011004:	4e                   	dec    esi
c0011005:	75 e1                	jne    c0010fe8 <VgaText::putx(unsigned int)+0x20>
c0011007:	83 c4 20             	add    esp,0x20
c001100a:	5b                   	pop    ebx
c001100b:	5e                   	pop    esi
c001100c:	5f                   	pop    edi
c001100d:	c3                   	ret    

c001100e <VgaText::VgaText(char const*)>:
c001100e:	57                   	push   edi
c001100f:	56                   	push   esi
c0011010:	53                   	push   ebx
c0011011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011015:	83 ec 08             	sub    esp,0x8
c0011018:	6a 00                	push   0x0
c001101a:	50                   	push   eax
c001101b:	e8 8c 05 00 00       	call   c00115ac <UnixFile::UnixFile(int)>
c0011020:	83 c4 10             	add    esp,0x10
c0011023:	ba 34 a6 02 c0       	mov    edx,0xc002a634
c0011028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001102c:	89 10                	mov    DWORD PTR [eax],edx
c001102e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011032:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0011039:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001103d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0011044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011048:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c001104c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011050:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0011054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011058:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c001105f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011063:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c001106a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001106e:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0011075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011079:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0011080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011084:	8d 50 60             	lea    edx,[eax+0x60]
c0011087:	bb e0 e7 02 c0       	mov    ebx,0xc002e7e0
c001108c:	b8 08 00 00 00       	mov    eax,0x8
c0011091:	fc                   	cld    
c0011092:	89 d7                	mov    edi,edx
c0011094:	89 de                	mov    esi,ebx
c0011096:	89 c1                	mov    ecx,eax
c0011098:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001109a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001109e:	05 82 00 00 00       	add    eax,0x82
c00110a3:	83 ec 08             	sub    esp,0x8
c00110a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110aa:	50                   	push   eax
c00110ab:	e8 8c f7 fe ff       	call   c000083c <strcpy>
c00110b0:	83 c4 10             	add    esp,0x10
c00110b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110b7:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c00110be:	83 ec 0c             	sub    esp,0xc
c00110c1:	6a 01                	push   0x1
c00110c3:	e8 27 09 00 00       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c00110c8:	83 c4 10             	add    esp,0x10
c00110cb:	89 c2                	mov    edx,eax
c00110cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110d1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00110d4:	e8 55 0b 00 00       	call   c0011c2e <Virt::getAKernelVAS()>
c00110d9:	89 c3                	mov    ebx,eax
c00110db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110df:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00110e2:	89 c6                	mov    esi,eax
c00110e4:	e8 ce ed ff ff       	call   c000feb7 <Phys::allocatePage()>
c00110e9:	6a 05                	push   0x5
c00110eb:	56                   	push   esi
c00110ec:	50                   	push   eax
c00110ed:	53                   	push   ebx
c00110ee:	e8 29 11 00 00       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c00110f3:	83 c4 10             	add    esp,0x10
c00110f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110fa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00110fd:	83 ec 04             	sub    esp,0x4
c0011100:	68 00 0f 00 00       	push   0xf00
c0011105:	6a 00                	push   0x0
c0011107:	50                   	push   eax
c0011108:	e8 73 f6 fe ff       	call   c0000780 <memset>
c001110d:	83 c4 10             	add    esp,0x10
c0011110:	83 ec 04             	sub    esp,0x4
c0011113:	6a 00                	push   0x0
c0011115:	6a 07                	push   0x7
c0011117:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001111b:	e8 94 f5 ff ff       	call   c00106b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011120:	83 c4 10             	add    esp,0x10
c0011123:	83 ec 08             	sub    esp,0x8
c0011126:	6a 02                	push   0x2
c0011128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001112c:	e8 c5 fa ff ff       	call   c0010bf6 <VgaText::setCursorHeight(int)>
c0011131:	83 c4 10             	add    esp,0x10
c0011134:	83 ec 04             	sub    esp,0x4
c0011137:	6a 00                	push   0x0
c0011139:	6a 00                	push   0x0
c001113b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001113f:	e8 b4 f6 ff ff       	call   c00107f8 <VgaText::setCursor(int, int)>
c0011144:	83 c4 10             	add    esp,0x10
c0011147:	83 ec 08             	sub    esp,0x8
c001114a:	6a 01                	push   0x1
c001114c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011150:	e8 8b f4 ff ff       	call   c00105e0 <VgaText::showCursor(bool)>
c0011155:	83 c4 10             	add    esp,0x10
c0011158:	83 ec 08             	sub    esp,0x8
c001115b:	6a 01                	push   0x1
c001115d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011161:	e8 86 f4 ff ff       	call   c00105ec <VgaText::disableBlink(bool)>
c0011166:	83 c4 10             	add    esp,0x10
c0011169:	83 ec 0c             	sub    esp,0xc
c001116c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011170:	e8 e7 fc ff ff       	call   c0010e5c <VgaText::clearScreen()>
c0011175:	83 c4 10             	add    esp,0x10
c0011178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001117c:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0011180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011184:	05 02 01 00 00       	add    eax,0x102
c0011189:	83 ec 04             	sub    esp,0x4
c001118c:	68 96 00 00 00       	push   0x96
c0011191:	6a 00                	push   0x0
c0011193:	50                   	push   eax
c0011194:	e8 e7 f5 fe ff       	call   c0000780 <memset>
c0011199:	83 c4 10             	add    esp,0x10
c001119c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111a0:	05 98 01 00 00       	add    eax,0x198
c00111a5:	83 ec 04             	sub    esp,0x4
c00111a8:	68 2c 01 00 00       	push   0x12c
c00111ad:	6a 00                	push   0x0
c00111af:	50                   	push   eax
c00111b0:	e8 cb f5 fe ff       	call   c0000780 <memset>
c00111b5:	83 c4 10             	add    esp,0x10
c00111b8:	90                   	nop
c00111b9:	5b                   	pop    ebx
c00111ba:	5e                   	pop    esi
c00111bb:	5f                   	pop    edi
c00111bc:	c3                   	ret    
c00111bd:	90                   	nop

c00111be <VgaText::receiveKey(unsigned char)>:
c00111be:	55                   	push   ebp
c00111bf:	57                   	push   edi
c00111c0:	56                   	push   esi
c00111c1:	53                   	push   ebx
c00111c2:	83 ec 1c             	sub    esp,0x1c
c00111c5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00111c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00111cd:	84 db                	test   bl,bl
c00111cf:	0f 84 c9 00 00 00    	je     c001129e <VgaText::receiveKey(unsigned char)+0xe0>
c00111d5:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c00111db:	80 fb 08             	cmp    bl,0x8
c00111de:	75 2c                	jne    c001120c <VgaText::receiveKey(unsigned char)+0x4e>
c00111e0:	83 ec 0c             	sub    esp,0xc
c00111e3:	57                   	push   edi
c00111e4:	e8 b3 f5 fe ff       	call   c000079c <strlen>
c00111e9:	83 c4 10             	add    esp,0x10
c00111ec:	85 c0                	test   eax,eax
c00111ee:	74 41                	je     c0011231 <VgaText::receiveKey(unsigned char)+0x73>
c00111f0:	50                   	push   eax
c00111f1:	50                   	push   eax
c00111f2:	6a 08                	push   0x8
c00111f4:	56                   	push   esi
c00111f5:	e8 bc fc ff ff       	call   c0010eb6 <VgaText::putchar(char)>
c00111fa:	89 3c 24             	mov    DWORD PTR [esp],edi
c00111fd:	e8 9a f5 fe ff       	call   c000079c <strlen>
c0011202:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c001120a:	eb 22                	jmp    c001122e <VgaText::receiveKey(unsigned char)+0x70>
c001120c:	0f be c3             	movsx  eax,bl
c001120f:	52                   	push   edx
c0011210:	52                   	push   edx
c0011211:	50                   	push   eax
c0011212:	56                   	push   esi
c0011213:	e8 9e fc ff ff       	call   c0010eb6 <VgaText::putchar(char)>
c0011218:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c001121c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011221:	59                   	pop    ecx
c0011222:	5d                   	pop    ebp
c0011223:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011227:	50                   	push   eax
c0011228:	57                   	push   edi
c0011229:	e8 4e f7 fe ff       	call   c000097c <strcat>
c001122e:	83 c4 10             	add    esp,0x10
c0011231:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0011238:	75 05                	jne    c001123f <VgaText::receiveKey(unsigned char)+0x81>
c001123a:	80 fb 0a             	cmp    bl,0xa
c001123d:	75 53                	jne    c0011292 <VgaText::receiveKey(unsigned char)+0xd4>
c001123f:	83 ec 0c             	sub    esp,0xc
c0011242:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0011248:	53                   	push   ebx
c0011249:	e8 4e f5 fe ff       	call   c000079c <strlen>
c001124e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011251:	89 c5                	mov    ebp,eax
c0011253:	e8 44 f5 fe ff       	call   c000079c <strlen>
c0011258:	83 c4 10             	add    esp,0x10
c001125b:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c001125f:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011264:	76 10                	jbe    c0011276 <VgaText::receiveKey(unsigned char)+0xb8>
c0011266:	83 ec 0c             	sub    esp,0xc
c0011269:	68 df a5 02 c0       	push   0xc002a5df
c001126e:	e8 1c 93 00 00       	call   c001a58f <Krnl::panic(char const*)>
c0011273:	83 c4 10             	add    esp,0x10
c0011276:	50                   	push   eax
c0011277:	50                   	push   eax
c0011278:	57                   	push   edi
c0011279:	53                   	push   ebx
c001127a:	e8 fd f6 fe ff       	call   c000097c <strcat>
c001127f:	83 c4 0c             	add    esp,0xc
c0011282:	68 96 00 00 00       	push   0x96
c0011287:	6a 00                	push   0x0
c0011289:	57                   	push   edi
c001128a:	e8 f1 f4 fe ff       	call   c0000780 <memset>
c001128f:	83 c4 10             	add    esp,0x10
c0011292:	83 ec 0c             	sub    esp,0xc
c0011295:	56                   	push   esi
c0011296:	e8 3b fa ff ff       	call   c0010cd6 <VgaText::doUpdate()>
c001129b:	83 c4 10             	add    esp,0x10
c001129e:	83 c4 1c             	add    esp,0x1c
c00112a1:	5b                   	pop    ebx
c00112a2:	5e                   	pop    esi
c00112a3:	5f                   	pop    edi
c00112a4:	5d                   	pop    ebp
c00112a5:	c3                   	ret    

c00112a6 <VgaText::write(unsigned long long, void*, int*)>:
c00112a6:	55                   	push   ebp
c00112a7:	57                   	push   edi
c00112a8:	56                   	push   esi
c00112a9:	53                   	push   ebx
c00112aa:	83 ec 0c             	sub    esp,0xc
c00112ad:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00112b1:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00112b5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00112b9:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00112c0:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00112c3:	39 eb                	cmp    ebx,ebp
c00112c5:	74 13                	je     c00112da <VgaText::write(unsigned long long, void*, int*)+0x34>
c00112c7:	43                   	inc    ebx
c00112c8:	50                   	push   eax
c00112c9:	50                   	push   eax
c00112ca:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00112ce:	50                   	push   eax
c00112cf:	56                   	push   esi
c00112d0:	e8 e1 fb ff ff       	call   c0010eb6 <VgaText::putchar(char)>
c00112d5:	83 c4 10             	add    esp,0x10
c00112d8:	eb e9                	jmp    c00112c3 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00112da:	83 ec 0c             	sub    esp,0xc
c00112dd:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00112e4:	56                   	push   esi
c00112e5:	e8 ec f9 ff ff       	call   c0010cd6 <VgaText::doUpdate()>
c00112ea:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00112ee:	89 38                	mov    DWORD PTR [eax],edi
c00112f0:	83 c4 1c             	add    esp,0x1c
c00112f3:	31 c0                	xor    eax,eax
c00112f5:	5b                   	pop    ebx
c00112f6:	5e                   	pop    esi
c00112f7:	5f                   	pop    edi
c00112f8:	5d                   	pop    ebp
c00112f9:	c3                   	ret    

c00112fa <newTerminal(char*)>:
c00112fa:	83 ec 28             	sub    esp,0x28
c00112fd:	68 c4 02 00 00       	push   0x2c4
c0011302:	e8 44 e5 ff ff       	call   c000f84b <malloc>
c0011307:	5a                   	pop    edx
c0011308:	59                   	pop    ecx
c0011309:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001130d:	50                   	push   eax
c001130e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011312:	e8 f7 fc ff ff       	call   c001100e <VgaText::VgaText(char const*)>
c0011317:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001131b:	83 c4 2c             	add    esp,0x2c
c001131e:	c3                   	ret    
c001131f:	90                   	nop

c0011320 <TSS::TSS()>:
c0011320:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011324:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001132b:	90                   	nop
c001132c:	c3                   	ret    
c001132d:	90                   	nop

c001132e <TSS::setESP(unsigned long)>:
c001132e:	55                   	push   ebp
c001132f:	89 e5                	mov    ebp,esp
c0011331:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011334:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011337:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001133a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001133d:	90                   	nop
c001133e:	5d                   	pop    ebp
c001133f:	c3                   	ret    

c0011340 <TSS::flush()>:
c0011340:	55                   	push   ebp
c0011341:	89 e5                	mov    ebp,esp
c0011343:	83 ec 10             	sub    esp,0x10
c0011346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011349:	8b 00                	mov    eax,DWORD PTR [eax]
c001134b:	83 c8 03             	or     eax,0x3
c001134e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011352:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011356:	66 89 d0             	mov    ax,dx
c0011359:	0f 00 d8             	ltr    ax
c001135c:	90                   	nop
c001135d:	c9                   	leave  
c001135e:	c3                   	ret    
c001135f:	90                   	nop

c0011360 <TSS::setup(unsigned long, unsigned long)>:
c0011360:	55                   	push   ebp
c0011361:	89 e5                	mov    ebp,esp
c0011363:	83 ec 18             	sub    esp,0x18
c0011366:	83 ec 0c             	sub    esp,0xc
c0011369:	6a 68                	push   0x68
c001136b:	e8 db e4 ff ff       	call   c000f84b <malloc>
c0011370:	83 c4 10             	add    esp,0x10
c0011373:	89 c2                	mov    edx,eax
c0011375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011378:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001137b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001137e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011381:	83 ec 04             	sub    esp,0x4
c0011384:	6a 68                	push   0x68
c0011386:	6a 00                	push   0x0
c0011388:	50                   	push   eax
c0011389:	e8 f2 f3 fe ff       	call   c0000780 <memset>
c001138e:	83 c4 10             	add    esp,0x10
c0011391:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011394:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011397:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001139d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113a3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00113a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113af:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00113b2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00113b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113bb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00113c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113c7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00113cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113d3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00113d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113df:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00113e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113eb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00113f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113f7:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00113fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011400:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011403:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011406:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011409:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001140c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001140f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011412:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011415:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011418:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001141b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011422:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011425:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011428:	0f 20 da             	mov    edx,cr3
c001142b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001142e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011431:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011434:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011437:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001143a:	83 ec 08             	sub    esp,0x8
c001143d:	50                   	push   eax
c001143e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011441:	50                   	push   eax
c0011442:	e8 df db ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c0011447:	83 c4 10             	add    esp,0x10
c001144a:	83 ec 08             	sub    esp,0x8
c001144d:	6a 68                	push   0x68
c001144f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011452:	50                   	push   eax
c0011453:	e8 ea db ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c0011458:	83 c4 10             	add    esp,0x10
c001145b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c001145f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011462:	83 e0 0f             	and    eax,0xf
c0011465:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011468:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001146b:	83 c8 40             	or     eax,0x40
c001146e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011471:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0011476:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001147c:	05 78 01 00 00       	add    eax,0x178
c0011481:	83 ec 04             	sub    esp,0x4
c0011484:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011487:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001148a:	50                   	push   eax
c001148b:	e8 e6 db ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c0011490:	83 c4 10             	add    esp,0x10
c0011493:	89 c2                	mov    edx,eax
c0011495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011498:	89 10                	mov    DWORD PTR [eax],edx
c001149a:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c001149f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00114a5:	05 78 01 00 00       	add    eax,0x178
c00114aa:	83 ec 0c             	sub    esp,0xc
c00114ad:	50                   	push   eax
c00114ae:	e8 07 dc ff ff       	call   c000f0ba <GDT::flush()>
c00114b3:	83 c4 10             	add    esp,0x10
c00114b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00114bb:	83 ec 08             	sub    esp,0x8
c00114be:	50                   	push   eax
c00114bf:	68 48 a6 02 c0       	push   0xc002a648
c00114c4:	e8 fa 18 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00114c9:	83 c4 10             	add    esp,0x10
c00114cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00114d1:	c9                   	leave  
c00114d2:	c3                   	ret    
c00114d3:	90                   	nop

c00114d4 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00114d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00114dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114df:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00114e4:	75 08                	jne    c00114ee <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00114e6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00114ec:	eb 38                	jmp    c0011526 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00114ee:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00114f3:	75 17                	jne    c001150c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00114f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114fa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00114fd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011503:	8b 10                	mov    edx,DWORD PTR [eax]
c0011505:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011509:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001150c:	89 c1                	mov    ecx,eax
c001150e:	83 e1 fd             	and    ecx,0xfffffffd
c0011511:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011517:	74 cd                	je     c00114e6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011519:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001151e:	83 e0 ef             	and    eax,0xffffffef
c0011521:	83 f8 08             	cmp    eax,0x8
c0011524:	76 c0                	jbe    c00114e6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011526:	31 c0                	xor    eax,eax
c0011528:	c3                   	ret    
c0011529:	90                   	nop

c001152a <ReservedFilename::isAtty()>:
c001152a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001152e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011531:	31 c0                	xor    eax,eax
c0011533:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011539:	74 09                	je     c0011544 <ReservedFilename::isAtty()+0x1a>
c001153b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011541:	0f 94 c0             	sete   al
c0011544:	c3                   	ret    
c0011545:	90                   	nop

c0011546 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011546:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001154a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001154e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011551:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011555:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001155a:	75 08                	jne    c0011564 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001155c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011562:	eb 3d                	jmp    c00115a1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011564:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011569:	75 17                	jne    c0011582 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001156b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011570:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011573:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011579:	8b 10                	mov    edx,DWORD PTR [eax]
c001157b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001157f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011582:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011587:	75 04                	jne    c001158d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011589:	89 0a                	mov    DWORD PTR [edx],ecx
c001158b:	eb 14                	jmp    c00115a1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001158d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011592:	74 c8                	je     c001155c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011594:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011599:	83 e0 ef             	and    eax,0xffffffef
c001159c:	83 f8 08             	cmp    eax,0x8
c001159f:	76 bb                	jbe    c001155c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00115a1:	31 c0                	xor    eax,eax
c00115a3:	c3                   	ret    

c00115a4 <UnixFile::getFileDescriptor()>:
c00115a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ab:	c3                   	ret    

c00115ac <UnixFile::UnixFile(int)>:
c00115ac:	53                   	push   ebx
c00115ad:	83 ec 28             	sub    esp,0x28
c00115b0:	ba 34 a7 02 c0       	mov    edx,0xc002a734
c00115b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115b9:	89 10                	mov    DWORD PTR [eax],edx
c00115bb:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00115c3:	0f 8f 8c 01 00 00    	jg     c0011755 <UnixFile::UnixFile(int)+0x1a9>
c00115c9:	a1 c0 d6 02 c0       	mov    eax,ds:0xc002d6c0
c00115ce:	8d 50 01             	lea    edx,[eax+0x1]
c00115d1:	89 15 c0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6c0,edx
c00115d7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00115db:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00115de:	83 ec 08             	sub    esp,0x8
c00115e1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00115e5:	68 98 e8 02 c0       	push   0xc002e898
c00115ea:	e8 31 73 01 00       	call   c0028920 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00115ef:	83 c4 10             	add    esp,0x10
c00115f2:	a0 94 e8 02 c0       	mov    al,ds:0xc002e894
c00115f7:	83 f0 01             	xor    eax,0x1
c00115fa:	84 c0                	test   al,al
c00115fc:	0f 84 54 01 00 00    	je     c0011756 <UnixFile::UnixFile(int)+0x1aa>
c0011602:	c6 05 94 e8 02 c0 01 	mov    BYTE PTR ds:0xc002e894,0x1
c0011609:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011611:	83 ec 0c             	sub    esp,0xc
c0011614:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011618:	e8 2e e2 ff ff       	call   c000f84b <malloc>
c001161d:	83 c4 10             	add    esp,0x10
c0011620:	89 c3                	mov    ebx,eax
c0011622:	83 ec 08             	sub    esp,0x8
c0011625:	68 03 ff ff 0f       	push   0xfffff03
c001162a:	53                   	push   ebx
c001162b:	e8 2c 01 00 00       	call   c001175c <ReservedFilename::ReservedFilename(int)>
c0011630:	83 c4 10             	add    esp,0x10
c0011633:	89 1d 8c e8 02 c0    	mov    DWORD PTR ds:0xc002e88c,ebx
c0011639:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011641:	83 ec 0c             	sub    esp,0xc
c0011644:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011648:	e8 fe e1 ff ff       	call   c000f84b <malloc>
c001164d:	83 c4 10             	add    esp,0x10
c0011650:	89 c3                	mov    ebx,eax
c0011652:	83 ec 08             	sub    esp,0x8
c0011655:	68 01 ff ff 0f       	push   0xfffff01
c001165a:	53                   	push   ebx
c001165b:	e8 fc 00 00 00       	call   c001175c <ReservedFilename::ReservedFilename(int)>
c0011660:	83 c4 10             	add    esp,0x10
c0011663:	89 1d 90 e8 02 c0    	mov    DWORD PTR ds:0xc002e890,ebx
c0011669:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011671:	83 ec 0c             	sub    esp,0xc
c0011674:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011678:	e8 ce e1 ff ff       	call   c000f84b <malloc>
c001167d:	83 c4 10             	add    esp,0x10
c0011680:	89 c3                	mov    ebx,eax
c0011682:	83 ec 08             	sub    esp,0x8
c0011685:	68 00 ff ff 0f       	push   0xfffff00
c001168a:	53                   	push   ebx
c001168b:	e8 cc 00 00 00       	call   c001175c <ReservedFilename::ReservedFilename(int)>
c0011690:	83 c4 10             	add    esp,0x10
c0011693:	89 1d 84 e8 02 c0    	mov    DWORD PTR ds:0xc002e884,ebx
c0011699:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00116a1:	83 ec 0c             	sub    esp,0xc
c00116a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00116a8:	e8 9e e1 ff ff       	call   c000f84b <malloc>
c00116ad:	83 c4 10             	add    esp,0x10
c00116b0:	89 c3                	mov    ebx,eax
c00116b2:	83 ec 08             	sub    esp,0x8
c00116b5:	68 02 ff ff 0f       	push   0xfffff02
c00116ba:	53                   	push   ebx
c00116bb:	e8 9c 00 00 00       	call   c001175c <ReservedFilename::ReservedFilename(int)>
c00116c0:	83 c4 10             	add    esp,0x10
c00116c3:	89 1d 88 e8 02 c0    	mov    DWORD PTR ds:0xc002e888,ebx
c00116c9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00116d1:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00116d6:	7f 7e                	jg     c0011756 <UnixFile::UnixFile(int)+0x1aa>
c00116d8:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00116e0:	83 ec 0c             	sub    esp,0xc
c00116e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00116e7:	e8 5f e1 ff ff       	call   c000f84b <malloc>
c00116ec:	83 c4 10             	add    esp,0x10
c00116ef:	89 c3                	mov    ebx,eax
c00116f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00116f5:	05 10 ff ff 0f       	add    eax,0xfffff10
c00116fa:	83 ec 08             	sub    esp,0x8
c00116fd:	50                   	push   eax
c00116fe:	53                   	push   ebx
c00116ff:	e8 58 00 00 00       	call   c001175c <ReservedFilename::ReservedFilename(int)>
c0011704:	83 c4 10             	add    esp,0x10
c0011707:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001170b:	89 1c 85 60 e8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd17a0],ebx
c0011712:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001171a:	83 ec 0c             	sub    esp,0xc
c001171d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011721:	e8 25 e1 ff ff       	call   c000f84b <malloc>
c0011726:	83 c4 10             	add    esp,0x10
c0011729:	89 c3                	mov    ebx,eax
c001172b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001172f:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011734:	83 ec 08             	sub    esp,0x8
c0011737:	50                   	push   eax
c0011738:	53                   	push   ebx
c0011739:	e8 1e 00 00 00       	call   c001175c <ReservedFilename::ReservedFilename(int)>
c001173e:	83 c4 10             	add    esp,0x10
c0011741:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011745:	89 1c 85 20 e8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd17e0],ebx
c001174c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011750:	e9 7c ff ff ff       	jmp    c00116d1 <UnixFile::UnixFile(int)+0x125>
c0011755:	90                   	nop
c0011756:	83 c4 28             	add    esp,0x28
c0011759:	5b                   	pop    ebx
c001175a:	c3                   	ret    
c001175b:	90                   	nop

c001175c <ReservedFilename::ReservedFilename(int)>:
c001175c:	83 ec 0c             	sub    esp,0xc
c001175f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011763:	83 ec 08             	sub    esp,0x8
c0011766:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001176a:	50                   	push   eax
c001176b:	e8 3c fe ff ff       	call   c00115ac <UnixFile::UnixFile(int)>
c0011770:	83 c4 10             	add    esp,0x10
c0011773:	ba 50 a7 02 c0       	mov    edx,0xc002a750
c0011778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001177c:	89 10                	mov    DWORD PTR [eax],edx
c001177e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011782:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011786:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011789:	90                   	nop
c001178a:	83 c4 0c             	add    esp,0xc
c001178d:	c3                   	ret    

c001178e <UnixFile::~UnixFile()>:
c001178e:	83 ec 1c             	sub    esp,0x1c
c0011791:	ba 34 a7 02 c0       	mov    edx,0xc002a734
c0011796:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001179a:	89 10                	mov    DWORD PTR [eax],edx
c001179c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00117a3:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00117a8:	7f 73                	jg     c001181d <UnixFile::~UnixFile()+0x8f>
c00117aa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00117b2:	83 ec 0c             	sub    esp,0xc
c00117b5:	68 98 e8 02 c0       	push   0xc002e898
c00117ba:	e8 35 72 01 00       	call   c00289f4 <LinkedList<UnixFile>::getFirstElement()>
c00117bf:	83 c4 10             	add    esp,0x10
c00117c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00117c6:	83 ec 0c             	sub    esp,0xc
c00117c9:	68 98 e8 02 c0       	push   0xc002e898
c00117ce:	e8 29 72 01 00       	call   c00289fc <LinkedList<UnixFile>::removeFirst()>
c00117d3:	83 c4 10             	add    esp,0x10
c00117d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00117da:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00117de:	74 40                	je     c0011820 <UnixFile::~UnixFile()+0x92>
c00117e0:	83 ec 08             	sub    esp,0x8
c00117e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00117e7:	68 98 e8 02 c0       	push   0xc002e898
c00117ec:	e8 2f 71 01 00       	call   c0028920 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00117f1:	83 c4 10             	add    esp,0x10
c00117f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117f8:	8d 50 01             	lea    edx,[eax+0x1]
c00117fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00117ff:	3d 88 13 00 00       	cmp    eax,0x1388
c0011804:	0f 94 c0             	sete   al
c0011807:	84 c0                	test   al,al
c0011809:	74 a7                	je     c00117b2 <UnixFile::~UnixFile()+0x24>
c001180b:	83 ec 0c             	sub    esp,0xc
c001180e:	68 0c a7 02 c0       	push   0xc002a70c
c0011813:	e8 77 8d 00 00       	call   c001a58f <Krnl::panic(char const*)>
c0011818:	83 c4 10             	add    esp,0x10
c001181b:	eb 95                	jmp    c00117b2 <UnixFile::~UnixFile()+0x24>
c001181d:	90                   	nop
c001181e:	eb 01                	jmp    c0011821 <UnixFile::~UnixFile()+0x93>
c0011820:	90                   	nop
c0011821:	90                   	nop
c0011822:	83 c4 1c             	add    esp,0x1c
c0011825:	c3                   	ret    

c0011826 <UnixFile::~UnixFile()>:
c0011826:	83 ec 0c             	sub    esp,0xc
c0011829:	83 ec 0c             	sub    esp,0xc
c001182c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011830:	e8 59 ff ff ff       	call   c001178e <UnixFile::~UnixFile()>
c0011835:	83 c4 10             	add    esp,0x10
c0011838:	83 ec 08             	sub    esp,0x8
c001183b:	6a 0c                	push   0xc
c001183d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011841:	e8 9d 14 00 00       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0011846:	83 c4 10             	add    esp,0x10
c0011849:	83 c4 0c             	add    esp,0xc
c001184c:	c3                   	ret    
c001184d:	90                   	nop

c001184e <ReservedFilename::~ReservedFilename()>:
c001184e:	83 ec 0c             	sub    esp,0xc
c0011851:	ba 50 a7 02 c0       	mov    edx,0xc002a750
c0011856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001185a:	89 10                	mov    DWORD PTR [eax],edx
c001185c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011860:	83 ec 0c             	sub    esp,0xc
c0011863:	50                   	push   eax
c0011864:	e8 25 ff ff ff       	call   c001178e <UnixFile::~UnixFile()>
c0011869:	83 c4 10             	add    esp,0x10
c001186c:	90                   	nop
c001186d:	83 c4 0c             	add    esp,0xc
c0011870:	c3                   	ret    
c0011871:	90                   	nop

c0011872 <ReservedFilename::~ReservedFilename()>:
c0011872:	83 ec 0c             	sub    esp,0xc
c0011875:	83 ec 0c             	sub    esp,0xc
c0011878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001187c:	e8 cd ff ff ff       	call   c001184e <ReservedFilename::~ReservedFilename()>
c0011881:	83 c4 10             	add    esp,0x10
c0011884:	83 ec 08             	sub    esp,0x8
c0011887:	6a 0c                	push   0xc
c0011889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001188d:	e8 51 14 00 00       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0011892:	83 c4 10             	add    esp,0x10
c0011895:	83 c4 0c             	add    esp,0xc
c0011898:	c3                   	ret    

c0011899 <getFromFileDescriptor(int)>:
c0011899:	53                   	push   ebx
c001189a:	83 ec 08             	sub    esp,0x8
c001189d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118a1:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00118a7:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00118ad:	7f 2c                	jg     c00118db <getFromFileDescriptor(int)+0x42>
c00118af:	83 ec 0c             	sub    esp,0xc
c00118b2:	68 98 e8 02 c0       	push   0xc002e898
c00118b7:	e8 38 71 01 00       	call   c00289f4 <LinkedList<UnixFile>::getFirstElement()>
c00118bc:	83 c4 10             	add    esp,0x10
c00118bf:	85 c0                	test   eax,eax
c00118c1:	75 04                	jne    c00118c7 <getFromFileDescriptor(int)+0x2e>
c00118c3:	31 c0                	xor    eax,eax
c00118c5:	eb 6e                	jmp    c0011935 <getFromFileDescriptor(int)+0x9c>
c00118c7:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00118ca:	74 69                	je     c0011935 <getFromFileDescriptor(int)+0x9c>
c00118cc:	52                   	push   edx
c00118cd:	52                   	push   edx
c00118ce:	50                   	push   eax
c00118cf:	68 98 e8 02 c0       	push   0xc002e898
c00118d4:	e8 c5 71 01 00       	call   c0028a9e <LinkedList<UnixFile>::getNext(UnixFile*)>
c00118d9:	eb e1                	jmp    c00118bc <getFromFileDescriptor(int)+0x23>
c00118db:	a1 8c e8 02 c0       	mov    eax,ds:0xc002e88c
c00118e0:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00118e6:	74 4d                	je     c0011935 <getFromFileDescriptor(int)+0x9c>
c00118e8:	a1 90 e8 02 c0       	mov    eax,ds:0xc002e890
c00118ed:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00118f3:	74 40                	je     c0011935 <getFromFileDescriptor(int)+0x9c>
c00118f5:	a1 88 e8 02 c0       	mov    eax,ds:0xc002e888
c00118fa:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011900:	74 33                	je     c0011935 <getFromFileDescriptor(int)+0x9c>
c0011902:	a1 84 e8 02 c0       	mov    eax,ds:0xc002e884
c0011907:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001190d:	74 26                	je     c0011935 <getFromFileDescriptor(int)+0x9c>
c001190f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011915:	83 f8 08             	cmp    eax,0x8
c0011918:	77 09                	ja     c0011923 <getFromFileDescriptor(int)+0x8a>
c001191a:	8b 04 85 60 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17a0]
c0011921:	eb 12                	jmp    c0011935 <getFromFileDescriptor(int)+0x9c>
c0011923:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011929:	83 fb 08             	cmp    ebx,0x8
c001192c:	77 95                	ja     c00118c3 <getFromFileDescriptor(int)+0x2a>
c001192e:	8b 04 9d 20 e8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd17e0]
c0011935:	83 c4 08             	add    esp,0x8
c0011938:	5b                   	pop    ebx
c0011939:	c3                   	ret    

c001193a <__static_initialization_and_destruction_0(int, int)>:
c001193a:	83 ec 0c             	sub    esp,0xc
c001193d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011942:	75 34                	jne    c0011978 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011944:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001194c:	75 2a                	jne    c0011978 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001194e:	83 ec 0c             	sub    esp,0xc
c0011951:	68 98 e8 02 c0       	push   0xc002e898
c0011956:	e8 6d 6f 01 00       	call   c00288c8 <LinkedList<UnixFile>::LinkedList()>
c001195b:	83 c4 10             	add    esp,0x10
c001195e:	83 ec 04             	sub    esp,0x4
c0011961:	68 54 d6 02 c0       	push   0xc002d654
c0011966:	68 98 e8 02 c0       	push   0xc002e898
c001196b:	68 c6 88 02 c0       	push   0xc00288c6
c0011970:	e8 e8 12 00 00       	call   c0012c5d <__cxa_atexit>
c0011975:	83 c4 10             	add    esp,0x10
c0011978:	90                   	nop
c0011979:	83 c4 0c             	add    esp,0xc
c001197c:	c3                   	ret    

c001197d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001197d:	83 ec 0c             	sub    esp,0xc
c0011980:	83 ec 08             	sub    esp,0x8
c0011983:	68 ff ff 00 00       	push   0xffff
c0011988:	6a 01                	push   0x1
c001198a:	e8 ab ff ff ff       	call   c001193a <__static_initialization_and_destruction_0(int, int)>
c001198f:	83 c4 10             	add    esp,0x10
c0011992:	83 c4 0c             	add    esp,0xc
c0011995:	c3                   	ret    

c0011996 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011996:	53                   	push   ebx
c0011997:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001199b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001199f:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00119a5:	89 c8                	mov    eax,ecx
c00119a7:	d1 e8                	shr    eax,1
c00119a9:	03 05 c8 d6 02 c0    	add    eax,DWORD PTR ds:0xc002d6c8
c00119af:	83 e1 01             	and    ecx,0x1
c00119b2:	8a 10                	mov    dl,BYTE PTR [eax]
c00119b4:	75 09                	jne    c00119bf <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00119b6:	83 e2 f0             	and    edx,0xfffffff0
c00119b9:	09 da                	or     edx,ebx
c00119bb:	88 10                	mov    BYTE PTR [eax],dl
c00119bd:	5b                   	pop    ebx
c00119be:	c3                   	ret    
c00119bf:	c1 e3 04             	shl    ebx,0x4
c00119c2:	83 e2 0f             	and    edx,0xf
c00119c5:	09 da                	or     edx,ebx
c00119c7:	88 10                	mov    BYTE PTR [eax],dl
c00119c9:	5b                   	pop    ebx
c00119ca:	c3                   	ret    

c00119cb <Virt::getPageState(unsigned long)>:
c00119cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119cf:	8b 0d c8 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6c8
c00119d5:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00119db:	89 d0                	mov    eax,edx
c00119dd:	d1 e8                	shr    eax,1
c00119df:	83 e2 01             	and    edx,0x1
c00119e2:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00119e5:	75 04                	jne    c00119eb <Virt::getPageState(unsigned long)+0x20>
c00119e7:	83 e0 0f             	and    eax,0xf
c00119ea:	c3                   	ret    
c00119eb:	c0 e8 04             	shr    al,0x4
c00119ee:	c3                   	ret    

c00119ef <Virt::allocateKernelVirtualPages(int)>:
c00119ef:	55                   	push   ebp
c00119f0:	31 ed                	xor    ebp,ebp
c00119f2:	57                   	push   edi
c00119f3:	56                   	push   esi
c00119f4:	53                   	push   ebx
c00119f5:	31 db                	xor    ebx,ebx
c00119f7:	83 ec 1c             	sub    esp,0x1c
c00119fa:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00119fe:	8b 3d c4 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d6c4
c0011a04:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011a09:	57                   	push   edi
c0011a0a:	e8 bc ff ff ff       	call   c00119cb <Virt::getPageState(unsigned long)>
c0011a0f:	5a                   	pop    edx
c0011a10:	84 c0                	test   al,al
c0011a12:	75 3a                	jne    c0011a4e <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011a14:	85 db                	test   ebx,ebx
c0011a16:	75 02                	jne    c0011a1a <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011a18:	89 fd                	mov    ebp,edi
c0011a1a:	43                   	inc    ebx
c0011a1b:	39 f3                	cmp    ebx,esi
c0011a1d:	74 5a                	je     c0011a79 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011a1f:	47                   	inc    edi
c0011a20:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011a26:	76 31                	jbe    c0011a59 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011a28:	c7 05 c4 d6 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d6c4,0xc8000
c0011a32:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011a37:	75 28                	jne    c0011a61 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011a39:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011a3e:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011a43:	57                   	push   edi
c0011a44:	e8 82 ff ff ff       	call   c00119cb <Virt::getPageState(unsigned long)>
c0011a49:	5a                   	pop    edx
c0011a4a:	84 c0                	test   al,al
c0011a4c:	74 c6                	je     c0011a14 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011a4e:	31 db                	xor    ebx,ebx
c0011a50:	47                   	inc    edi
c0011a51:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011a57:	77 cf                	ja     c0011a28 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011a59:	89 3d c4 d6 02 c0    	mov    DWORD PTR ds:0xc002d6c4,edi
c0011a5f:	eb a8                	jmp    c0011a09 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011a61:	83 ec 0c             	sub    esp,0xc
c0011a64:	68 64 a7 02 c0       	push   0xc002a764
c0011a69:	e8 21 8b 00 00       	call   c001a58f <Krnl::panic(char const*)>
c0011a6e:	8b 3d c4 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d6c4
c0011a74:	83 c4 10             	add    esp,0x10
c0011a77:	eb 90                	jmp    c0011a09 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011a79:	89 2d c4 d6 02 c0    	mov    DWORD PTR ds:0xc002d6c4,ebp
c0011a7f:	4b                   	dec    ebx
c0011a80:	74 5f                	je     c0011ae1 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011a82:	85 f6                	test   esi,esi
c0011a84:	74 3d                	je     c0011ac3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011a86:	89 e8                	mov    eax,ebp
c0011a88:	31 db                	xor    ebx,ebx
c0011a8a:	8d 7e ff             	lea    edi,[esi-0x1]
c0011a8d:	eb 14                	jmp    c0011aa3 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011a8f:	6a 01                	push   0x1
c0011a91:	43                   	inc    ebx
c0011a92:	50                   	push   eax
c0011a93:	e8 fe fe ff ff       	call   c0011996 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a98:	58                   	pop    eax
c0011a99:	39 f3                	cmp    ebx,esi
c0011a9b:	5a                   	pop    edx
c0011a9c:	74 25                	je     c0011ac3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011a9e:	a1 c4 d6 02 c0       	mov    eax,ds:0xc002d6c4
c0011aa3:	8d 50 01             	lea    edx,[eax+0x1]
c0011aa6:	85 db                	test   ebx,ebx
c0011aa8:	89 15 c4 d6 02 c0    	mov    DWORD PTR ds:0xc002d6c4,edx
c0011aae:	74 20                	je     c0011ad0 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011ab0:	39 df                	cmp    edi,ebx
c0011ab2:	75 db                	jne    c0011a8f <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011ab4:	6a 03                	push   0x3
c0011ab6:	43                   	inc    ebx
c0011ab7:	50                   	push   eax
c0011ab8:	e8 d9 fe ff ff       	call   c0011996 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011abd:	59                   	pop    ecx
c0011abe:	39 f3                	cmp    ebx,esi
c0011ac0:	58                   	pop    eax
c0011ac1:	75 db                	jne    c0011a9e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011ac3:	83 c4 1c             	add    esp,0x1c
c0011ac6:	89 e8                	mov    eax,ebp
c0011ac8:	5b                   	pop    ebx
c0011ac9:	c1 e0 0c             	shl    eax,0xc
c0011acc:	5e                   	pop    esi
c0011acd:	5f                   	pop    edi
c0011ace:	5d                   	pop    ebp
c0011acf:	c3                   	ret    
c0011ad0:	6a 02                	push   0x2
c0011ad2:	bb 01 00 00 00       	mov    ebx,0x1
c0011ad7:	50                   	push   eax
c0011ad8:	e8 b9 fe ff ff       	call   c0011996 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011add:	58                   	pop    eax
c0011ade:	5a                   	pop    edx
c0011adf:	eb bd                	jmp    c0011a9e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011ae1:	6a 04                	push   0x4
c0011ae3:	8d 45 01             	lea    eax,[ebp+0x1]
c0011ae6:	55                   	push   ebp
c0011ae7:	a3 c4 d6 02 c0       	mov    ds:0xc002d6c4,eax
c0011aec:	e8 a5 fe ff ff       	call   c0011996 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011af1:	59                   	pop    ecx
c0011af2:	89 e8                	mov    eax,ebp
c0011af4:	5b                   	pop    ebx
c0011af5:	c1 e0 0c             	shl    eax,0xc
c0011af8:	83 c4 1c             	add    esp,0x1c
c0011afb:	5b                   	pop    ebx
c0011afc:	5e                   	pop    esi
c0011afd:	5f                   	pop    edi
c0011afe:	5d                   	pop    ebp
c0011aff:	c3                   	ret    

c0011b00 <Virt::freeSwapfilePage(unsigned long)>:
c0011b00:	53                   	push   ebx
c0011b01:	8b 15 ac e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e8ac
c0011b07:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011b0b:	b8 01 00 00 00       	mov    eax,0x1
c0011b10:	89 cb                	mov    ebx,ecx
c0011b12:	d3 e0                	shl    eax,cl
c0011b14:	c1 eb 05             	shr    ebx,0x5
c0011b17:	f7 d0                	not    eax
c0011b19:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011b1c:	5b                   	pop    ebx
c0011b1d:	c3                   	ret    

c0011b1e <Virt::swapIDToSector(unsigned long)>:
c0011b1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b22:	0f af 05 cc d6 02 c0 	imul   eax,DWORD PTR ds:0xc002d6cc
c0011b29:	03 05 d4 d6 02 c0    	add    eax,DWORD PTR ds:0xc002d6d4
c0011b2f:	c3                   	ret    

c0011b30 <Virt::allocateSwapfilePage()>:
c0011b30:	55                   	push   ebp
c0011b31:	31 d2                	xor    edx,edx
c0011b33:	57                   	push   edi
c0011b34:	56                   	push   esi
c0011b35:	53                   	push   ebx
c0011b36:	83 ec 0c             	sub    esp,0xc
c0011b39:	8b 0d cc d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6cc
c0011b3f:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0011b44:	f7 f1                	div    ecx
c0011b46:	39 0d d0 d6 02 c0    	cmp    DWORD PTR ds:0xc002d6d0,ecx
c0011b4c:	72 2d                	jb     c0011b7b <Virt::allocateSwapfilePage()+0x4b>
c0011b4e:	8b 35 ac e8 02 c0    	mov    esi,DWORD PTR ds:0xc002e8ac
c0011b54:	8b 16                	mov    edx,DWORD PTR [esi]
c0011b56:	f6 c2 01             	test   dl,0x1
c0011b59:	74 3c                	je     c0011b97 <Virt::allocateSwapfilePage()+0x67>
c0011b5b:	31 c9                	xor    ecx,ecx
c0011b5d:	bf 01 00 00 00       	mov    edi,0x1
c0011b62:	eb 12                	jmp    c0011b76 <Virt::allocateSwapfilePage()+0x46>
c0011b64:	89 fd                	mov    ebp,edi
c0011b66:	89 ca                	mov    edx,ecx
c0011b68:	d3 e5                	shl    ebp,cl
c0011b6a:	c1 ea 05             	shr    edx,0x5
c0011b6d:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011b70:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011b72:	85 ea                	test   edx,ebp
c0011b74:	74 2a                	je     c0011ba0 <Virt::allocateSwapfilePage()+0x70>
c0011b76:	41                   	inc    ecx
c0011b77:	39 c8                	cmp    eax,ecx
c0011b79:	77 e9                	ja     c0011b64 <Virt::allocateSwapfilePage()+0x34>
c0011b7b:	83 ec 0c             	sub    esp,0xc
c0011b7e:	68 eb a8 02 c0       	push   0xc002a8eb
c0011b83:	e8 07 8a 00 00       	call   c001a58f <Krnl::panic(char const*)>
c0011b88:	83 c4 10             	add    esp,0x10
c0011b8b:	31 c9                	xor    ecx,ecx
c0011b8d:	83 c4 0c             	add    esp,0xc
c0011b90:	89 c8                	mov    eax,ecx
c0011b92:	5b                   	pop    ebx
c0011b93:	5e                   	pop    esi
c0011b94:	5f                   	pop    edi
c0011b95:	5d                   	pop    ebp
c0011b96:	c3                   	ret    
c0011b97:	89 f3                	mov    ebx,esi
c0011b99:	bd 01 00 00 00       	mov    ebp,0x1
c0011b9e:	31 c9                	xor    ecx,ecx
c0011ba0:	09 ea                	or     edx,ebp
c0011ba2:	89 c8                	mov    eax,ecx
c0011ba4:	89 13                	mov    DWORD PTR [ebx],edx
c0011ba6:	83 c4 0c             	add    esp,0xc
c0011ba9:	5b                   	pop    ebx
c0011baa:	5e                   	pop    esi
c0011bab:	5f                   	pop    edi
c0011bac:	5d                   	pop    ebp
c0011bad:	c3                   	ret    

c0011bae <Virt::virtualMemorySetup()>:
c0011bae:	53                   	push   ebx
c0011baf:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011bb4:	83 ec 08             	sub    esp,0x8
c0011bb7:	6a 0f                	push   0xf
c0011bb9:	53                   	push   ebx
c0011bba:	43                   	inc    ebx
c0011bbb:	e8 d6 fd ff ff       	call   c0011996 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bc0:	59                   	pop    ecx
c0011bc1:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011bc7:	58                   	pop    eax
c0011bc8:	75 ed                	jne    c0011bb7 <Virt::virtualMemorySetup()+0x9>
c0011bca:	83 ec 08             	sub    esp,0x8
c0011bcd:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011bd2:	68 00 00 00 c8       	push   0xc8000000
c0011bd7:	68 02 a9 02 c0       	push   0xc002a902
c0011bdc:	e8 e2 11 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0011be1:	58                   	pop    eax
c0011be2:	5a                   	pop    edx
c0011be3:	68 00 f0 ff ef       	push   0xeffff000
c0011be8:	68 16 a9 02 c0       	push   0xc002a916
c0011bed:	e8 d1 11 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0011bf2:	83 c4 10             	add    esp,0x10
c0011bf5:	83 ec 08             	sub    esp,0x8
c0011bf8:	6a 00                	push   0x0
c0011bfa:	53                   	push   ebx
c0011bfb:	43                   	inc    ebx
c0011bfc:	e8 95 fd ff ff       	call   c0011996 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c01:	83 c4 10             	add    esp,0x10
c0011c04:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c0a:	75 e9                	jne    c0011bf5 <Virt::virtualMemorySetup()+0x47>
c0011c0c:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011c11:	83 ec 08             	sub    esp,0x8
c0011c14:	6a 0f                	push   0xf
c0011c16:	53                   	push   ebx
c0011c17:	43                   	inc    ebx
c0011c18:	e8 79 fd ff ff       	call   c0011996 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c1d:	83 c4 10             	add    esp,0x10
c0011c20:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011c26:	75 e9                	jne    c0011c11 <Virt::virtualMemorySetup()+0x63>
c0011c28:	83 c4 08             	add    esp,0x8
c0011c2b:	5b                   	pop    ebx
c0011c2c:	c3                   	ret    

c0011c2d <Virt::swappingSetup()>:
c0011c2d:	c3                   	ret    

c0011c2e <Virt::getAKernelVAS()>:
c0011c2e:	a1 b0 e8 02 c0       	mov    eax,ds:0xc002e8b0
c0011c33:	c3                   	ret    

c0011c34 <Virt::setupPageSwapping(int)>:
c0011c34:	57                   	push   edi
c0011c35:	56                   	push   esi
c0011c36:	53                   	push   ebx
c0011c37:	83 ec 1c             	sub    esp,0x1c
c0011c3a:	68 2a a9 02 c0       	push   0xc002a92a
c0011c3f:	e8 7f 11 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0011c44:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011c4b:	e8 fb db ff ff       	call   c000f84b <malloc>
c0011c50:	83 c4 0c             	add    esp,0xc
c0011c53:	89 c6                	mov    esi,eax
c0011c55:	ff 35 94 1c 03 c0    	push   DWORD PTR ds:0xc0031c94
c0011c5b:	68 3e a9 02 c0       	push   0xc002a93e
c0011c60:	50                   	push   eax
c0011c61:	e8 bc 16 00 00       	call   c0013322 <File::File(char const*, Process*)>
c0011c66:	89 34 24             	mov    DWORD PTR [esp],esi
c0011c69:	e8 90 18 00 00       	call   c00134fe <File::unlink()>
c0011c6e:	59                   	pop    ecx
c0011c6f:	5b                   	pop    ebx
c0011c70:	6a 12                	push   0x12
c0011c72:	56                   	push   esi
c0011c73:	e8 0e 17 00 00       	call   c0013386 <File::open(FileOpenMode)>
c0011c78:	83 c4 10             	add    esp,0x10
c0011c7b:	85 c0                	test   eax,eax
c0011c7d:	0f 85 5b 01 00 00    	jne    c0011dde <Virt::setupPageSwapping(int)+0x1aa>
c0011c83:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c87:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c8f:	c1 e3 08             	shl    ebx,0x8
c0011c92:	83 ec 0c             	sub    esp,0xc
c0011c95:	68 00 00 01 00       	push   0x10000
c0011c9a:	e8 ac db ff ff       	call   c000f84b <malloc>
c0011c9f:	83 c4 0c             	add    esp,0xc
c0011ca2:	89 c7                	mov    edi,eax
c0011ca4:	68 00 00 01 00       	push   0x10000
c0011ca9:	68 ee 00 00 00       	push   0xee
c0011cae:	50                   	push   eax
c0011caf:	e8 cc ea fe ff       	call   c0000780 <memset>
c0011cb4:	83 c4 10             	add    esp,0x10
c0011cb7:	85 db                	test   ebx,ebx
c0011cb9:	79 03                	jns    c0011cbe <Virt::setupPageSwapping(int)+0x8a>
c0011cbb:	83 c3 0f             	add    ebx,0xf
c0011cbe:	c1 fb 04             	sar    ebx,0x4
c0011cc1:	4b                   	dec    ebx
c0011cc2:	83 fb ff             	cmp    ebx,0xffffffff
c0011cc5:	74 4f                	je     c0011d16 <Virt::setupPageSwapping(int)+0xe2>
c0011cc7:	83 ec 0c             	sub    esp,0xc
c0011cca:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ccc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011cd0:	52                   	push   edx
c0011cd1:	57                   	push   edi
c0011cd2:	6a 00                	push   0x0
c0011cd4:	68 00 00 01 00       	push   0x10000
c0011cd9:	56                   	push   esi
c0011cda:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011cdd:	83 c4 20             	add    esp,0x20
c0011ce0:	85 c0                	test   eax,eax
c0011ce2:	0f 85 e0 00 00 00    	jne    c0011dc8 <Virt::setupPageSwapping(int)+0x194>
c0011ce8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cec:	3d 00 00 01 00       	cmp    eax,0x10000
c0011cf1:	74 ce                	je     c0011cc1 <Virt::setupPageSwapping(int)+0x8d>
c0011cf3:	83 ec 08             	sub    esp,0x8
c0011cf6:	4b                   	dec    ebx
c0011cf7:	50                   	push   eax
c0011cf8:	68 91 a9 02 c0       	push   0xc002a991
c0011cfd:	e8 c1 10 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0011d02:	c7 04 24 9a a9 02 c0 	mov    DWORD PTR [esp],0xc002a99a
c0011d09:	e8 81 88 00 00       	call   c001a58f <Krnl::panic(char const*)>
c0011d0e:	83 c4 10             	add    esp,0x10
c0011d11:	83 fb ff             	cmp    ebx,0xffffffff
c0011d14:	75 b1                	jne    c0011cc7 <Virt::setupPageSwapping(int)+0x93>
c0011d16:	83 ec 0c             	sub    esp,0xc
c0011d19:	56                   	push   esi
c0011d1a:	e8 c5 16 00 00       	call   c00133e4 <File::close()>
c0011d1f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d22:	e8 44 db ff ff       	call   c000f86b <rfree>
c0011d27:	83 c4 10             	add    esp,0x10
c0011d2a:	85 f6                	test   esi,esi
c0011d2c:	74 0c                	je     c0011d3a <Virt::setupPageSwapping(int)+0x106>
c0011d2e:	83 ec 0c             	sub    esp,0xc
c0011d31:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d33:	56                   	push   esi
c0011d34:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d37:	83 c4 10             	add    esp,0x10
c0011d3a:	83 ec 08             	sub    esp,0x8
c0011d3d:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c0011d42:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011d48:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d4a:	68 3e a9 02 c0       	push   0xc002a93e
c0011d4f:	50                   	push   eax
c0011d50:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011d53:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011d57:	c6 05 d8 d6 02 c0 43 	mov    BYTE PTR ds:0xc002d6d8,0x43
c0011d5e:	c1 e2 0b             	shl    edx,0xb
c0011d61:	a3 d4 d6 02 c0       	mov    ds:0xc002d6d4,eax
c0011d66:	89 15 d0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6d0,edx
c0011d6c:	c7 05 cc d6 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002d6cc,0x8
c0011d76:	c1 ea 08             	shr    edx,0x8
c0011d79:	89 14 24             	mov    DWORD PTR [esp],edx
c0011d7c:	e8 ca da ff ff       	call   c000f84b <malloc>
c0011d81:	83 c4 0c             	add    esp,0xc
c0011d84:	89 c1                	mov    ecx,eax
c0011d86:	a3 ac e8 02 c0       	mov    ds:0xc002e8ac,eax
c0011d8b:	31 d2                	xor    edx,edx
c0011d8d:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0011d92:	f7 35 cc d6 02 c0    	div    DWORD PTR ds:0xc002d6cc
c0011d98:	c1 e8 05             	shr    eax,0x5
c0011d9b:	50                   	push   eax
c0011d9c:	6a 00                	push   0x0
c0011d9e:	51                   	push   ecx
c0011d9f:	e8 dc e9 fe ff       	call   c0000780 <memset>
c0011da4:	58                   	pop    eax
c0011da5:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0011daa:	5a                   	pop    edx
c0011dab:	31 d2                	xor    edx,edx
c0011dad:	f7 35 cc d6 02 c0    	div    DWORD PTR ds:0xc002d6cc
c0011db3:	c1 e8 05             	shr    eax,0x5
c0011db6:	50                   	push   eax
c0011db7:	68 a0 a9 02 c0       	push   0xc002a9a0
c0011dbc:	e8 02 10 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0011dc1:	83 c4 20             	add    esp,0x20
c0011dc4:	5b                   	pop    ebx
c0011dc5:	5e                   	pop    esi
c0011dc6:	5f                   	pop    edi
c0011dc7:	c3                   	ret    
c0011dc8:	83 ec 08             	sub    esp,0x8
c0011dcb:	50                   	push   eax
c0011dcc:	68 79 a9 02 c0       	push   0xc002a979
c0011dd1:	e8 ed 0f 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0011dd6:	83 c4 10             	add    esp,0x10
c0011dd9:	e9 0a ff ff ff       	jmp    c0011ce8 <Virt::setupPageSwapping(int)+0xb4>
c0011dde:	83 ec 08             	sub    esp,0x8
c0011de1:	50                   	push   eax
c0011de2:	68 55 a9 02 c0       	push   0xc002a955
c0011de7:	e8 d7 0f 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0011dec:	c7 04 24 5e a9 02 c0 	mov    DWORD PTR [esp],0xc002a95e
c0011df3:	e8 97 87 00 00       	call   c001a58f <Krnl::panic(char const*)>
c0011df8:	83 c4 10             	add    esp,0x10
c0011dfb:	e9 83 fe ff ff       	jmp    c0011c83 <Virt::setupPageSwapping(int)+0x4f>

c0011e00 <VAS::VAS()>:
c0011e00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e04:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e0f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e1a:	a3 b0 e8 02 c0       	mov    ds:0xc002e8b0,eax
c0011e1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e23:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011e27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e2b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011e2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e32:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011e39:	90                   	nop
c0011e3a:	c3                   	ret    
c0011e3b:	90                   	nop

c0011e3c <VAS::VAS(VAS*)>:
c0011e3c:	83 ec 0c             	sub    esp,0xc
c0011e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e43:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e4e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e55:	83 ec 0c             	sub    esp,0xc
c0011e58:	68 84 a7 02 c0       	push   0xc002a784
c0011e5d:	e8 2d 87 00 00       	call   c001a58f <Krnl::panic(char const*)>
c0011e62:	83 c4 10             	add    esp,0x10
c0011e65:	90                   	nop
c0011e66:	83 c4 0c             	add    esp,0xc
c0011e69:	c3                   	ret    

c0011e6a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011e6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e6e:	89 c2                	mov    edx,eax
c0011e70:	c1 e8 0a             	shr    eax,0xa
c0011e73:	c1 ea 16             	shr    edx,0x16
c0011e76:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011e7b:	19 c9                	sbb    ecx,ecx
c0011e7d:	c1 e2 0c             	shl    edx,0xc
c0011e80:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011e86:	25 fc 0f 00 00       	and    eax,0xffc
c0011e8b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011e92:	01 d0                	add    eax,edx
c0011e94:	c3                   	ret    
c0011e95:	90                   	nop

c0011e96 <VAS::getPageTableEntry(unsigned long)>:
c0011e96:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011e9a:	89 ca                	mov    edx,ecx
c0011e9c:	c1 e9 0a             	shr    ecx,0xa
c0011e9f:	c1 ea 16             	shr    edx,0x16
c0011ea2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011ea8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011eae:	c1 e0 0c             	shl    eax,0xc
c0011eb1:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011eb4:	c3                   	ret    

c0011eb5 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011eb5:	57                   	push   edi
c0011eb6:	56                   	push   esi
c0011eb7:	be 01 00 00 00       	mov    esi,0x1
c0011ebc:	53                   	push   ebx
c0011ebd:	83 ec 10             	sub    esp,0x10
c0011ec0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ec4:	c1 eb 0c             	shr    ebx,0xc
c0011ec7:	eb 3f                	jmp    c0011f08 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011ec9:	e8 60 fd ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0011ece:	83 ec 08             	sub    esp,0x8
c0011ed1:	57                   	push   edi
c0011ed2:	50                   	push   eax
c0011ed3:	e8 be ff ff ff       	call   c0011e96 <VAS::getPageTableEntry(unsigned long)>
c0011ed8:	83 c4 10             	add    esp,0x10
c0011edb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011edd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011ee1:	f6 c4 04             	test   ah,0x4
c0011ee4:	75 5f                	jne    c0011f45 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011ee6:	80 fa 04             	cmp    dl,0x4
c0011ee9:	74 78                	je     c0011f63 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011eeb:	80 fa 02             	cmp    dl,0x2
c0011eee:	0f 84 88 00 00 00    	je     c0011f7c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011ef4:	80 fa 03             	cmp    dl,0x3
c0011ef7:	0f 84 ad 00 00 00    	je     c0011faa <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011efd:	fe ca                	dec    dl
c0011eff:	0f 84 92 00 00 00    	je     c0011f97 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f05:	43                   	inc    ebx
c0011f06:	31 f6                	xor    esi,esi
c0011f08:	53                   	push   ebx
c0011f09:	e8 bd fa ff ff       	call   c00119cb <Virt::getPageState(unsigned long)>
c0011f0e:	5f                   	pop    edi
c0011f0f:	89 df                	mov    edi,ebx
c0011f11:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011f15:	c1 e7 0c             	shl    edi,0xc
c0011f18:	84 c0                	test   al,al
c0011f1a:	75 ad                	jne    c0011ec9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011f1c:	83 ec 0c             	sub    esp,0xc
c0011f1f:	68 bb a9 02 c0       	push   0xc002a9bb
c0011f24:	e8 66 86 00 00       	call   c001a58f <Krnl::panic(char const*)>
c0011f29:	e8 00 fd ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0011f2e:	5a                   	pop    edx
c0011f2f:	59                   	pop    ecx
c0011f30:	57                   	push   edi
c0011f31:	50                   	push   eax
c0011f32:	e8 5f ff ff ff       	call   c0011e96 <VAS::getPageTableEntry(unsigned long)>
c0011f37:	83 c4 10             	add    esp,0x10
c0011f3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f3c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f40:	f6 c4 04             	test   ah,0x4
c0011f43:	74 c0                	je     c0011f05 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f45:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011f49:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f4e:	83 ec 0c             	sub    esp,0xc
c0011f51:	50                   	push   eax
c0011f52:	e8 d6 de ff ff       	call   c000fe2d <Phys::freePage(unsigned long)>
c0011f57:	83 c4 10             	add    esp,0x10
c0011f5a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f5e:	80 fa 04             	cmp    dl,0x4
c0011f61:	75 88                	jne    c0011eeb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011f63:	89 f0                	mov    eax,esi
c0011f65:	84 c0                	test   al,al
c0011f67:	75 47                	jne    c0011fb0 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011f69:	c7 44 24 20 a8 a7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a7a8
c0011f71:	83 c4 10             	add    esp,0x10
c0011f74:	5b                   	pop    ebx
c0011f75:	5e                   	pop    esi
c0011f76:	5f                   	pop    edi
c0011f77:	e9 13 86 00 00       	jmp    c001a58f <Krnl::panic(char const*)>
c0011f7c:	89 f0                	mov    eax,esi
c0011f7e:	84 c0                	test   al,al
c0011f80:	75 15                	jne    c0011f97 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f82:	83 ec 0c             	sub    esp,0xc
c0011f85:	68 d7 a9 02 c0       	push   0xc002a9d7
c0011f8a:	e8 00 86 00 00       	call   c001a58f <Krnl::panic(char const*)>
c0011f8f:	83 c4 10             	add    esp,0x10
c0011f92:	e9 6e ff ff ff       	jmp    c0011f05 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f97:	83 ec 08             	sub    esp,0x8
c0011f9a:	6a 00                	push   0x0
c0011f9c:	53                   	push   ebx
c0011f9d:	e8 f4 f9 ff ff       	call   c0011996 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011fa2:	83 c4 10             	add    esp,0x10
c0011fa5:	e9 5b ff ff ff       	jmp    c0011f05 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011faa:	89 f0                	mov    eax,esi
c0011fac:	84 c0                	test   al,al
c0011fae:	75 15                	jne    c0011fc5 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011fb0:	83 ec 08             	sub    esp,0x8
c0011fb3:	6a 00                	push   0x0
c0011fb5:	53                   	push   ebx
c0011fb6:	e8 db f9 ff ff       	call   c0011996 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011fbb:	83 c4 10             	add    esp,0x10
c0011fbe:	83 c4 10             	add    esp,0x10
c0011fc1:	5b                   	pop    ebx
c0011fc2:	5e                   	pop    esi
c0011fc3:	5f                   	pop    edi
c0011fc4:	c3                   	ret    
c0011fc5:	c7 44 24 20 f3 a9 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a9f3
c0011fcd:	83 c4 10             	add    esp,0x10
c0011fd0:	5b                   	pop    ebx
c0011fd1:	5e                   	pop    esi
c0011fd2:	5f                   	pop    edi
c0011fd3:	e9 b7 85 00 00       	jmp    c001a58f <Krnl::panic(char const*)>

c0011fd8 <VAS::freeAllocatedPages(unsigned long)>:
c0011fd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fdc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011fe0:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011fe4:	74 09                	je     c0011fef <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011fe6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011fea:	e9 c6 fe ff ff       	jmp    c0011eb5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011fef:	c7 44 24 04 cc a7 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a7cc
c0011ff7:	e9 c7 0d 00 00       	jmp    c0012dc3 <Dbg::kprintf(char const*, ...)>

c0011ffc <VAS::virtualToPhysical(unsigned long)>:
c0011ffc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012000:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012004:	e8 8d fe ff ff       	call   c0011e96 <VAS::getPageTableEntry(unsigned long)>
c0012009:	5a                   	pop    edx
c001200a:	8b 00                	mov    eax,DWORD PTR [eax]
c001200c:	59                   	pop    ecx
c001200d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012012:	c3                   	ret    
c0012013:	90                   	nop

c0012014 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012014:	55                   	push   ebp
c0012015:	57                   	push   edi
c0012016:	56                   	push   esi
c0012017:	53                   	push   ebx
c0012018:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001201c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012020:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012024:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012028:	85 db                	test   ebx,ebx
c001202a:	7e 22                	jle    c001204e <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c001202c:	c1 e3 0c             	shl    ebx,0xc
c001202f:	01 f3                	add    ebx,esi
c0012031:	56                   	push   esi
c0012032:	81 c6 00 10 00 00    	add    esi,0x1000
c0012038:	55                   	push   ebp
c0012039:	e8 58 fe ff ff       	call   c0011e96 <VAS::getPageTableEntry(unsigned long)>
c001203e:	5a                   	pop    edx
c001203f:	59                   	pop    ecx
c0012040:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012042:	21 f9                	and    ecx,edi
c0012044:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012048:	39 f3                	cmp    ebx,esi
c001204a:	89 08                	mov    DWORD PTR [eax],ecx
c001204c:	75 e3                	jne    c0012031 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c001204e:	5b                   	pop    ebx
c001204f:	5e                   	pop    esi
c0012050:	5f                   	pop    edi
c0012051:	5d                   	pop    ebp
c0012052:	c3                   	ret    
c0012053:	90                   	nop

c0012054 <VAS::setToWriteCombining(unsigned long, int)>:
c0012054:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0012059:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001205f:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0012066:	75 01                	jne    c0012069 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0012068:	c3                   	ret    
c0012069:	68 80 00 00 00       	push   0x80
c001206e:	6a ff                	push   0xffffffff
c0012070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001207c:	e8 93 ff ff ff       	call   c0012014 <VAS::reflagRange(unsigned long, int, int, int)>
c0012081:	83 c4 14             	add    esp,0x14
c0012084:	c3                   	ret    
c0012085:	90                   	nop

c0012086 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012086:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001208b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001208f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012092:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012096:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0012099:	19 c0                	sbb    eax,eax
c001209b:	83 ca 03             	or     edx,0x3
c001209e:	83 e0 fc             	and    eax,0xfffffffc
c00120a1:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00120a8:	0f 20 d8             	mov    eax,cr3
c00120ab:	0f 22 d8             	mov    cr3,eax
c00120ae:	c3                   	ret    
c00120af:	90                   	nop

c00120b0 <VAS::~VAS()>:
c00120b0:	83 ec 2c             	sub    esp,0x2c
c00120b3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00120bb:	e8 6c bd 00 00       	call   c001de2c <lockScheduler()>
c00120c0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00120c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00120c7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00120ca:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00120d0:	83 ec 04             	sub    esp,0x4
c00120d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00120d7:	6a 01                	push   0x1
c00120d9:	50                   	push   eax
c00120da:	e8 a7 ff ff ff       	call   c0012086 <VAS::mapOtherVASIn(bool, VAS*)>
c00120df:	83 c4 10             	add    esp,0x10
c00120e2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00120ea:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00120f2:	0f 8f d7 00 00 00    	jg     c00121cf <VAS::~VAS()+0x11f>
c00120f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120fc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00120ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012103:	c1 e2 02             	shl    edx,0x2
c0012106:	01 d0                	add    eax,edx
c0012108:	8b 00                	mov    eax,DWORD PTR [eax]
c001210a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001210e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012112:	83 e0 01             	and    eax,0x1
c0012115:	0f 84 ab 00 00 00    	je     c00121c6 <VAS::~VAS()+0x116>
c001211b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012123:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001212b:	7f 75                	jg     c00121a2 <VAS::~VAS()+0xf2>
c001212d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012131:	c1 e0 0a             	shl    eax,0xa
c0012134:	89 c2                	mov    edx,eax
c0012136:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001213a:	01 d0                	add    eax,edx
c001213c:	c1 e0 0c             	shl    eax,0xc
c001213f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012143:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012148:	8b 00                	mov    eax,DWORD PTR [eax]
c001214a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001214d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012153:	83 ec 04             	sub    esp,0x4
c0012156:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001215a:	6a 01                	push   0x1
c001215c:	50                   	push   eax
c001215d:	e8 08 fd ff ff       	call   c0011e6a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012162:	83 c4 10             	add    esp,0x10
c0012165:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012169:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001216d:	8b 00                	mov    eax,DWORD PTR [eax]
c001216f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012173:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012177:	25 01 04 00 00       	and    eax,0x401
c001217c:	3d 01 04 00 00       	cmp    eax,0x401
c0012181:	75 19                	jne    c001219c <VAS::~VAS()+0xec>
c0012183:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012187:	25 00 f0 ff ff       	and    eax,0xfffff000
c001218c:	83 ec 0c             	sub    esp,0xc
c001218f:	50                   	push   eax
c0012190:	e8 98 dc ff ff       	call   c000fe2d <Phys::freePage(unsigned long)>
c0012195:	83 c4 10             	add    esp,0x10
c0012198:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001219c:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00121a0:	eb 81                	jmp    c0012123 <VAS::~VAS()+0x73>
c00121a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121a6:	25 00 04 00 00       	and    eax,0x400
c00121ab:	74 19                	je     c00121c6 <VAS::~VAS()+0x116>
c00121ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121b1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121b6:	83 ec 0c             	sub    esp,0xc
c00121b9:	50                   	push   eax
c00121ba:	e8 6e dc ff ff       	call   c000fe2d <Phys::freePage(unsigned long)>
c00121bf:	83 c4 10             	add    esp,0x10
c00121c2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121c6:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00121ca:	e9 1b ff ff ff       	jmp    c00120ea <VAS::~VAS()+0x3a>
c00121cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121d3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00121d6:	83 ec 0c             	sub    esp,0xc
c00121d9:	50                   	push   eax
c00121da:	e8 d6 fc ff ff       	call   c0011eb5 <Virt::freeKernelVirtualPages(unsigned long)>
c00121df:	83 c4 10             	add    esp,0x10
c00121e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121e6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00121e9:	83 ec 0c             	sub    esp,0xc
c00121ec:	50                   	push   eax
c00121ed:	e8 3b dc ff ff       	call   c000fe2d <Phys::freePage(unsigned long)>
c00121f2:	83 c4 10             	add    esp,0x10
c00121f5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00121fd:	c1 e0 02             	shl    eax,0x2
c0012200:	83 ec 08             	sub    esp,0x8
c0012203:	50                   	push   eax
c0012204:	68 f0 a7 02 c0       	push   0xc002a7f0
c0012209:	e8 b5 0b 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001220e:	83 c4 10             	add    esp,0x10
c0012211:	e8 18 bc 00 00       	call   c001de2e <unlockScheduler()>
c0012216:	90                   	nop
c0012217:	83 c4 2c             	add    esp,0x2c
c001221a:	c3                   	ret    
c001221b:	90                   	nop

c001221c <VAS::mapPage(unsigned long, unsigned long, int)>:
c001221c:	55                   	push   ebp
c001221d:	57                   	push   edi
c001221e:	56                   	push   esi
c001221f:	53                   	push   ebx
c0012220:	83 ec 1c             	sub    esp,0x1c
c0012223:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012227:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001222b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012231:	77 08                	ja     c001223b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012233:	0f 20 d8             	mov    eax,cr3
c0012236:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0012239:	75 47                	jne    c0012282 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001223b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001223f:	09 d8                	or     eax,ebx
c0012241:	a9 ff 0f 00 00       	test   eax,0xfff
c0012246:	75 57                	jne    c001229f <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0012248:	89 de                	mov    esi,ebx
c001224a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001224d:	c1 ee 16             	shr    esi,0x16
c0012250:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012257:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001225b:	74 54                	je     c00122b1 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c001225d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012261:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012267:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001226b:	c1 e6 0c             	shl    esi,0xc
c001226e:	c1 eb 0a             	shr    ebx,0xa
c0012271:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012277:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001227a:	83 c4 1c             	add    esp,0x1c
c001227d:	5b                   	pop    ebx
c001227e:	5e                   	pop    esi
c001227f:	5f                   	pop    edi
c0012280:	5d                   	pop    ebp
c0012281:	c3                   	ret    
c0012282:	83 ec 0c             	sub    esp,0xc
c0012285:	68 10 a8 02 c0       	push   0xc002a810
c001228a:	e8 34 0b 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001228f:	83 c4 10             	add    esp,0x10
c0012292:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012296:	09 d8                	or     eax,ebx
c0012298:	a9 ff 0f 00 00       	test   eax,0xfff
c001229d:	74 a9                	je     c0012248 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001229f:	83 ec 0c             	sub    esp,0xc
c00122a2:	68 78 a8 02 c0       	push   0xc002a878
c00122a7:	e8 e3 82 00 00       	call   c001a58f <Krnl::panic(char const*)>
c00122ac:	83 c4 10             	add    esp,0x10
c00122af:	eb 97                	jmp    c0012248 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00122b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00122b5:	e8 fd db ff ff       	call   c000feb7 <Phys::allocatePage()>
c00122ba:	89 c5                	mov    ebp,eax
c00122bc:	e8 6d f9 ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c00122c1:	83 ec 0c             	sub    esp,0xc
c00122c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00122c8:	6a 01                	push   0x1
c00122ca:	e8 20 f7 ff ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c00122cf:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00122d6:	6a 01                	push   0x1
c00122d8:	50                   	push   eax
c00122d9:	55                   	push   ebp
c00122da:	81 cd 07 04 00 00    	or     ebp,0x407
c00122e0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00122e4:	51                   	push   ecx
c00122e5:	e8 26 02 00 00       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00122ea:	83 c4 1c             	add    esp,0x1c
c00122ed:	68 00 10 00 00       	push   0x1000
c00122f2:	6a 00                	push   0x0
c00122f4:	50                   	push   eax
c00122f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122f9:	e8 82 e4 fe ff       	call   c0000780 <memset>
c00122fe:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012302:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012305:	e8 ab fb ff ff       	call   c0011eb5 <Virt::freeKernelVirtualPages(unsigned long)>
c001230a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001230e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012311:	83 c4 10             	add    esp,0x10
c0012314:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012317:	e9 41 ff ff ff       	jmp    c001225d <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c001231c <VAS::allocatePages(int, int)>:
c001231c:	55                   	push   ebp
c001231d:	57                   	push   edi
c001231e:	56                   	push   esi
c001231f:	53                   	push   ebx
c0012320:	83 ec 1c             	sub    esp,0x1c
c0012323:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012327:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c001232c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012332:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012338:	83 e0 01             	and    eax,0x1
c001233b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001233f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012343:	0f 85 cc 00 00 00    	jne    c0012415 <VAS::allocatePages(int, int)+0xf9>
c0012349:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001234c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012350:	85 c0                	test   eax,eax
c0012352:	0f 84 a1 00 00 00    	je     c00123f9 <VAS::allocatePages(int, int)+0xdd>
c0012358:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001235c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012360:	c1 e6 0c             	shl    esi,0xc
c0012363:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012367:	85 c0                	test   eax,eax
c0012369:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c001236c:	7e 33                	jle    c00123a1 <VAS::allocatePages(int, int)+0x85>
c001236e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012372:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012376:	81 cd 00 04 00 00    	or     ebp,0x400
c001237c:	e8 36 db ff ff       	call   c000feb7 <Phys::allocatePage()>
c0012381:	55                   	push   ebp
c0012382:	53                   	push   ebx
c0012383:	50                   	push   eax
c0012384:	57                   	push   edi
c0012385:	e8 92 fe ff ff       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c001238a:	83 c4 10             	add    esp,0x10
c001238d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012392:	74 03                	je     c0012397 <VAS::allocatePages(int, int)+0x7b>
c0012394:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012397:	81 c3 00 10 00 00    	add    ebx,0x1000
c001239d:	39 de                	cmp    esi,ebx
c001239f:	75 db                	jne    c001237c <VAS::allocatePages(int, int)+0x60>
c00123a1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00123a6:	75 12                	jne    c00123ba <VAS::allocatePages(int, int)+0x9e>
c00123a8:	0f 20 d8             	mov    eax,cr3
c00123ab:	0f 22 d8             	mov    cr3,eax
c00123ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123b2:	83 c4 1c             	add    esp,0x1c
c00123b5:	5b                   	pop    ebx
c00123b6:	5e                   	pop    esi
c00123b7:	5f                   	pop    edi
c00123b8:	5d                   	pop    ebp
c00123b9:	c3                   	ret    
c00123ba:	c1 ee 0a             	shr    esi,0xa
c00123bd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123c1:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00123c7:	c1 eb 0a             	shr    ebx,0xa
c00123ca:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00123d0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00123d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00123dc:	39 c3                	cmp    ebx,eax
c00123de:	77 ce                	ja     c00123ae <VAS::allocatePages(int, int)+0x92>
c00123e0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00123e3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123e9:	39 d8                	cmp    eax,ebx
c00123eb:	73 f3                	jae    c00123e0 <VAS::allocatePages(int, int)+0xc4>
c00123ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123f1:	83 c4 1c             	add    esp,0x1c
c00123f4:	5b                   	pop    ebx
c00123f5:	5e                   	pop    esi
c00123f6:	5f                   	pop    edi
c00123f7:	5d                   	pop    ebp
c00123f8:	c3                   	ret    
c00123f9:	83 ec 0c             	sub    esp,0xc
c00123fc:	68 9c a8 02 c0       	push   0xc002a89c
c0012401:	e8 89 81 00 00       	call   c001a58f <Krnl::panic(char const*)>
c0012406:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012409:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001240d:	83 c4 10             	add    esp,0x10
c0012410:	e9 43 ff ff ff       	jmp    c0012358 <VAS::allocatePages(int, int)+0x3c>
c0012415:	83 ec 0c             	sub    esp,0xc
c0012418:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001241c:	e8 ce f5 ff ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c0012421:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012425:	83 c4 10             	add    esp,0x10
c0012428:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001242d:	0f 87 9b 00 00 00    	ja     c00124ce <VAS::allocatePages(int, int)+0x1b2>
c0012433:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012437:	85 d2                	test   edx,edx
c0012439:	7e 3c                	jle    c0012477 <VAS::allocatePages(int, int)+0x15b>
c001243b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001243f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012443:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012447:	c1 e5 0c             	shl    ebp,0xc
c001244a:	81 ce 00 04 00 00    	or     esi,0x400
c0012450:	01 dd                	add    ebp,ebx
c0012452:	e8 60 da ff ff       	call   c000feb7 <Phys::allocatePage()>
c0012457:	56                   	push   esi
c0012458:	53                   	push   ebx
c0012459:	50                   	push   eax
c001245a:	57                   	push   edi
c001245b:	e8 bc fd ff ff       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012460:	83 c4 10             	add    esp,0x10
c0012463:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012468:	74 03                	je     c001246d <VAS::allocatePages(int, int)+0x151>
c001246a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001246d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012473:	39 dd                	cmp    ebp,ebx
c0012475:	75 db                	jne    c0012452 <VAS::allocatePages(int, int)+0x136>
c0012477:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001247c:	0f 84 26 ff ff ff    	je     c00123a8 <VAS::allocatePages(int, int)+0x8c>
c0012482:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012486:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001248a:	89 d3                	mov    ebx,edx
c001248c:	c1 e0 0c             	shl    eax,0xc
c001248f:	c1 eb 0a             	shr    ebx,0xa
c0012492:	01 d0                	add    eax,edx
c0012494:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001249a:	c1 e8 0a             	shr    eax,0xa
c001249d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00124a3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00124a8:	2d 00 00 40 00       	sub    eax,0x400000
c00124ad:	39 c3                	cmp    ebx,eax
c00124af:	0f 87 f9 fe ff ff    	ja     c00123ae <VAS::allocatePages(int, int)+0x92>
c00124b5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124b8:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124be:	39 d8                	cmp    eax,ebx
c00124c0:	73 f3                	jae    c00124b5 <VAS::allocatePages(int, int)+0x199>
c00124c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124c6:	83 c4 1c             	add    esp,0x1c
c00124c9:	5b                   	pop    ebx
c00124ca:	5e                   	pop    esi
c00124cb:	5f                   	pop    edi
c00124cc:	5d                   	pop    ebp
c00124cd:	c3                   	ret    
c00124ce:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c00124d3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124d9:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00124e0:	0f 84 4d ff ff ff    	je     c0012433 <VAS::allocatePages(int, int)+0x117>
c00124e6:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00124ee:	e9 40 ff ff ff       	jmp    c0012433 <VAS::allocatePages(int, int)+0x117>
c00124f3:	90                   	nop

c00124f4 <VAS::setCPUSpecific(unsigned long)>:
c00124f4:	83 ec 0c             	sub    esp,0xc
c00124f7:	6a 05                	push   0x5
c00124f9:	68 00 00 40 c2       	push   0xc2400000
c00124fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012506:	e8 11 fd ff ff       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c001250b:	83 c4 1c             	add    esp,0x1c
c001250e:	c3                   	ret    
c001250f:	90                   	nop

c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012510:	55                   	push   ebp
c0012511:	57                   	push   edi
c0012512:	56                   	push   esi
c0012513:	53                   	push   ebx
c0012514:	83 ec 1c             	sub    esp,0x1c
c0012517:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c001251c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012520:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012526:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001252a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012530:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012534:	83 e0 01             	and    eax,0x1
c0012537:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001253b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001253f:	85 c0                	test   eax,eax
c0012541:	7e 39                	jle    c001257c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012543:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012547:	89 f3                	mov    ebx,esi
c0012549:	c1 e0 0c             	shl    eax,0xc
c001254c:	01 f0                	add    eax,esi
c001254e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012552:	55                   	push   ebp
c0012553:	53                   	push   ebx
c0012554:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012558:	29 f0                	sub    eax,esi
c001255a:	01 d8                	add    eax,ebx
c001255c:	50                   	push   eax
c001255d:	57                   	push   edi
c001255e:	e8 b9 fc ff ff       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012563:	83 c4 10             	add    esp,0x10
c0012566:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001256b:	74 03                	je     c0012570 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c001256d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012570:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012576:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001257a:	75 d6                	jne    c0012552 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c001257c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012581:	75 10                	jne    c0012593 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012583:	0f 20 d8             	mov    eax,cr3
c0012586:	0f 22 d8             	mov    cr3,eax
c0012589:	83 c4 1c             	add    esp,0x1c
c001258c:	89 f0                	mov    eax,esi
c001258e:	5b                   	pop    ebx
c001258f:	5e                   	pop    esi
c0012590:	5f                   	pop    edi
c0012591:	5d                   	pop    ebp
c0012592:	c3                   	ret    
c0012593:	89 f3                	mov    ebx,esi
c0012595:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012599:	c1 eb 0a             	shr    ebx,0xa
c001259c:	c1 e0 0c             	shl    eax,0xc
c001259f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125a5:	01 f0                	add    eax,esi
c00125a7:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125ad:	c1 e8 0a             	shr    eax,0xa
c00125b0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125b5:	2d 00 00 40 00       	sub    eax,0x400000
c00125ba:	39 c3                	cmp    ebx,eax
c00125bc:	77 cb                	ja     c0012589 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00125be:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125c1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125c7:	39 d8                	cmp    eax,ebx
c00125c9:	73 f3                	jae    c00125be <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00125cb:	83 c4 1c             	add    esp,0x1c
c00125ce:	89 f0                	mov    eax,esi
c00125d0:	5b                   	pop    ebx
c00125d1:	5e                   	pop    esi
c00125d2:	5f                   	pop    edi
c00125d3:	5d                   	pop    ebp
c00125d4:	c3                   	ret    
c00125d5:	90                   	nop

c00125d6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00125d6:	55                   	push   ebp
c00125d7:	57                   	push   edi
c00125d8:	56                   	push   esi
c00125d9:	53                   	push   ebx
c00125da:	83 ec 1c             	sub    esp,0x1c
c00125dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00125e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00125e5:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00125e9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00125ed:	a9 ff 0f 00 00       	test   eax,0xfff
c00125f2:	75 4a                	jne    c001263e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00125f4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00125f8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00125fb:	c1 eb 16             	shr    ebx,0x16
c00125fe:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012605:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012609:	74 4d                	je     c0012658 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001260b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001260f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012613:	c1 e8 0a             	shr    eax,0xa
c0012616:	80 fa 01             	cmp    dl,0x1
c0012619:	19 d2                	sbb    edx,edx
c001261b:	c1 e3 0c             	shl    ebx,0xc
c001261e:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012622:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012628:	25 fc 0f 00 00       	and    eax,0xffc
c001262d:	01 d8                	add    eax,ebx
c001262f:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012636:	83 c4 1c             	add    esp,0x1c
c0012639:	5b                   	pop    ebx
c001263a:	5e                   	pop    esi
c001263b:	5f                   	pop    edi
c001263c:	5d                   	pop    ebp
c001263d:	c3                   	ret    
c001263e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012642:	83 ec 0c             	sub    esp,0xc
c0012645:	68 c8 a8 02 c0       	push   0xc002a8c8
c001264a:	e8 40 7f 00 00       	call   c001a58f <Krnl::panic(char const*)>
c001264f:	83 c4 10             	add    esp,0x10
c0012652:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012656:	eb 9c                	jmp    c00125f4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012658:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001265c:	e8 56 d8 ff ff       	call   c000feb7 <Phys::allocatePage()>
c0012661:	89 c5                	mov    ebp,eax
c0012663:	e8 c6 f5 ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0012668:	83 ec 0c             	sub    esp,0xc
c001266b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001266f:	6a 01                	push   0x1
c0012671:	e8 79 f3 ff ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c0012676:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001267d:	6a 01                	push   0x1
c001267f:	50                   	push   eax
c0012680:	55                   	push   ebp
c0012681:	81 cd 07 04 00 00    	or     ebp,0x407
c0012687:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001268b:	51                   	push   ecx
c001268c:	e8 7f fe ff ff       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012691:	83 c4 1c             	add    esp,0x1c
c0012694:	68 00 10 00 00       	push   0x1000
c0012699:	6a 00                	push   0x0
c001269b:	50                   	push   eax
c001269c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126a0:	e8 db e0 fe ff       	call   c0000780 <memset>
c00126a5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00126a9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00126ac:	e8 04 f8 ff ff       	call   c0011eb5 <Virt::freeKernelVirtualPages(unsigned long)>
c00126b1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00126b4:	83 c4 10             	add    esp,0x10
c00126b7:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00126ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00126be:	e9 48 ff ff ff       	jmp    c001260b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00126c3:	90                   	nop

c00126c4 <VAS::VAS(bool)>:
c00126c4:	53                   	push   ebx
c00126c5:	83 ec 28             	sub    esp,0x28
c00126c8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126cc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00126d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00126db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00126e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126ea:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00126ee:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00126f1:	e8 c1 d7 ff ff       	call   c000feb7 <Phys::allocatePage()>
c00126f6:	89 c2                	mov    edx,eax
c00126f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126fc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00126ff:	e8 2a f5 ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0012704:	89 c3                	mov    ebx,eax
c0012706:	83 ec 0c             	sub    esp,0xc
c0012709:	6a 01                	push   0x1
c001270b:	e8 df f2 ff ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c0012710:	83 c4 10             	add    esp,0x10
c0012713:	89 c2                	mov    edx,eax
c0012715:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012719:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001271c:	83 ec 0c             	sub    esp,0xc
c001271f:	6a 03                	push   0x3
c0012721:	6a 01                	push   0x1
c0012723:	52                   	push   edx
c0012724:	50                   	push   eax
c0012725:	53                   	push   ebx
c0012726:	e8 e5 fd ff ff       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001272b:	83 c4 20             	add    esp,0x20
c001272e:	89 c2                	mov    edx,eax
c0012730:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012734:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012737:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001273f:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012747:	7f 1c                	jg     c0012765 <VAS::VAS(bool)+0xa1>
c0012749:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001274d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012750:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012754:	c1 e2 02             	shl    edx,0x2
c0012757:	01 d0                	add    eax,edx
c0012759:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001275f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012763:	eb da                	jmp    c001273f <VAS::VAS(bool)+0x7b>
c0012765:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c001276d:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012775:	7f 7a                	jg     c00127f1 <VAS::VAS(bool)+0x12d>
c0012777:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001277b:	2d 00 02 00 00       	sub    eax,0x200
c0012780:	c1 e0 0c             	shl    eax,0xc
c0012783:	83 c8 03             	or     eax,0x3
c0012786:	89 c2                	mov    edx,eax
c0012788:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c001278d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012793:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012799:	83 e0 10             	and    eax,0x10
c001279c:	84 c0                	test   al,al
c001279e:	74 07                	je     c00127a7 <VAS::VAS(bool)+0xe3>
c00127a0:	b8 00 01 00 00       	mov    eax,0x100
c00127a5:	eb 05                	jmp    c00127ac <VAS::VAS(bool)+0xe8>
c00127a7:	b8 00 00 00 00       	mov    eax,0x0
c00127ac:	09 d0                	or     eax,edx
c00127ae:	89 c1                	mov    ecx,eax
c00127b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00127b7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127bb:	c1 e2 02             	shl    edx,0x2
c00127be:	01 d0                	add    eax,edx
c00127c0:	89 ca                	mov    edx,ecx
c00127c2:	89 10                	mov    DWORD PTR [eax],edx
c00127c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127c8:	2d 40 03 00 00       	sub    eax,0x340
c00127cd:	83 f8 7f             	cmp    eax,0x7f
c00127d0:	77 16                	ja     c00127e8 <VAS::VAS(bool)+0x124>
c00127d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127d6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00127d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127dd:	c1 e2 02             	shl    edx,0x2
c00127e0:	01 d0                	add    eax,edx
c00127e2:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00127e8:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00127ec:	e9 7c ff ff ff       	jmp    c001276d <VAS::VAS(bool)+0xa9>
c00127f1:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c00127f6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127fc:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012802:	83 e0 10             	and    eax,0x10
c0012805:	84 c0                	test   al,al
c0012807:	74 07                	je     c0012810 <VAS::VAS(bool)+0x14c>
c0012809:	b8 03 41 00 00       	mov    eax,0x4103
c001280e:	eb 05                	jmp    c0012815 <VAS::VAS(bool)+0x151>
c0012810:	b8 03 40 00 00       	mov    eax,0x4003
c0012815:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012819:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c001281c:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012822:	89 02                	mov    DWORD PTR [edx],eax
c0012824:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0012829:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001282f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012835:	83 ec 08             	sub    esp,0x8
c0012838:	50                   	push   eax
c0012839:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001283d:	e8 b2 fc ff ff       	call   c00124f4 <VAS::setCPUSpecific(unsigned long)>
c0012842:	83 c4 10             	add    esp,0x10
c0012845:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012849:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001284c:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0012851:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012857:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001285d:	83 e0 10             	and    eax,0x10
c0012860:	84 c0                	test   al,al
c0012862:	74 07                	je     c001286b <VAS::VAS(bool)+0x1a7>
c0012864:	b8 00 01 00 00       	mov    eax,0x100
c0012869:	eb 05                	jmp    c0012870 <VAS::VAS(bool)+0x1ac>
c001286b:	b8 00 00 00 00       	mov    eax,0x0
c0012870:	09 c2                	or     edx,eax
c0012872:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012876:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012879:	05 fc 0f 00 00       	add    eax,0xffc
c001287e:	83 ca 03             	or     edx,0x3
c0012881:	89 10                	mov    DWORD PTR [eax],edx
c0012883:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0012888:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001288e:	83 ec 0c             	sub    esp,0xc
c0012891:	50                   	push   eax
c0012892:	e8 45 1c 00 00       	call   c00144dc <Device::getName()>
c0012897:	83 c4 10             	add    esp,0x10
c001289a:	83 ec 08             	sub    esp,0x8
c001289d:	68 0d aa 02 c0       	push   0xc002aa0d
c00128a2:	50                   	push   eax
c00128a3:	e8 20 e0 fe ff       	call   c00008c8 <strcmp>
c00128a8:	83 c4 10             	add    esp,0x10
c00128ab:	85 c0                	test   eax,eax
c00128ad:	0f 94 c0             	sete   al
c00128b0:	84 c0                	test   al,al
c00128b2:	74 70                	je     c0012924 <VAS::VAS(bool)+0x260>
c00128b4:	e8 56 b5 00 00       	call   c001de0f <disableIRQs()>
c00128b9:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c00128be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128c4:	05 7c 09 00 00       	add    eax,0x97c
c00128c9:	83 ec 0c             	sub    esp,0xc
c00128cc:	50                   	push   eax
c00128cd:	e8 f2 c9 ff ff       	call   c000f2c4 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00128d2:	83 c4 10             	add    esp,0x10
c00128d5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00128da:	89 c3                	mov    ebx,eax
c00128dc:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c00128e1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128e7:	05 7c 09 00 00       	add    eax,0x97c
c00128ec:	83 ec 0c             	sub    esp,0xc
c00128ef:	50                   	push   eax
c00128f0:	e8 cf c9 ff ff       	call   c000f2c4 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00128f5:	83 c4 10             	add    esp,0x10
c00128f8:	83 ec 08             	sub    esp,0x8
c00128fb:	50                   	push   eax
c00128fc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012900:	e8 91 f5 ff ff       	call   c0011e96 <VAS::getPageTableEntry(unsigned long)>
c0012905:	83 c4 10             	add    esp,0x10
c0012908:	8b 00                	mov    eax,DWORD PTR [eax]
c001290a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001290f:	6a 11                	push   0x11
c0012911:	53                   	push   ebx
c0012912:	50                   	push   eax
c0012913:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012917:	e8 00 f9 ff ff       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c001291c:	83 c4 10             	add    esp,0x10
c001291f:	e8 f9 b4 00 00       	call   c001de1d <enableIRQs()>
c0012924:	90                   	nop
c0012925:	83 c4 28             	add    esp,0x28
c0012928:	5b                   	pop    ebx
c0012929:	c3                   	ret    

c001292a <VAS::evict(unsigned long)>:
c001292a:	55                   	push   ebp
c001292b:	57                   	push   edi
c001292c:	56                   	push   esi
c001292d:	53                   	push   ebx
c001292e:	83 ec 1c             	sub    esp,0x1c
c0012931:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012935:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012939:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001293d:	e8 ee f1 ff ff       	call   c0011b30 <Virt::allocateSwapfilePage()>
c0012942:	89 c7                	mov    edi,eax
c0012944:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c0012949:	85 c0                	test   eax,eax
c001294b:	7e 3d                	jle    c001298a <VAS::evict(unsigned long)+0x60>
c001294d:	89 ee                	mov    esi,ebp
c001294f:	31 db                	xor    ebx,ebx
c0012951:	83 ec 0c             	sub    esp,0xc
c0012954:	57                   	push   edi
c0012955:	e8 c4 f1 ff ff       	call   c0011b1e <Virt::swapIDToSector(unsigned long)>
c001295a:	89 34 24             	mov    DWORD PTR [esp],esi
c001295d:	01 d8                	add    eax,ebx
c001295f:	6a 01                	push   0x1
c0012961:	31 d2                	xor    edx,edx
c0012963:	43                   	inc    ebx
c0012964:	52                   	push   edx
c0012965:	81 c6 00 02 00 00    	add    esi,0x200
c001296b:	50                   	push   eax
c001296c:	0f be 05 d8 d6 02 c0 	movsx  eax,BYTE PTR ds:0xc002d6d8
c0012973:	ff 34 85 3c ec 02 c0 	push   DWORD PTR [eax*4-0x3ffd13c4]
c001297a:	e8 83 3d 00 00       	call   c0016702 <LogicalDisk::write(unsigned long long, int, void*)>
c001297f:	83 c4 20             	add    esp,0x20
c0012982:	39 1d cc d6 02 c0    	cmp    DWORD PTR ds:0xc002d6cc,ebx
c0012988:	7f c7                	jg     c0012951 <VAS::evict(unsigned long)+0x27>
c001298a:	83 ec 08             	sub    esp,0x8
c001298d:	c1 e7 0b             	shl    edi,0xb
c0012990:	55                   	push   ebp
c0012991:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012995:	e8 fc f4 ff ff       	call   c0011e96 <VAS::getPageTableEntry(unsigned long)>
c001299a:	83 c4 0c             	add    esp,0xc
c001299d:	8b 10                	mov    edx,DWORD PTR [eax]
c001299f:	81 e2 fe 07 00 00    	and    edx,0x7fe
c00129a5:	09 d7                	or     edi,edx
c00129a7:	89 38                	mov    DWORD PTR [eax],edi
c00129a9:	a1 a8 e8 02 c0       	mov    eax,ds:0xc002e8a8
c00129ae:	40                   	inc    eax
c00129af:	a3 a8 e8 02 c0       	mov    ds:0xc002e8a8,eax
c00129b4:	0f 20 da             	mov    edx,cr3
c00129b7:	0f 22 da             	mov    cr3,edx
c00129ba:	50                   	push   eax
c00129bb:	55                   	push   ebp
c00129bc:	68 1b aa 02 c0       	push   0xc002aa1b
c00129c1:	e8 fd 03 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00129c6:	a1 a4 e8 02 c0       	mov    eax,ds:0xc002e8a4
c00129cb:	c7 44 24 40 30 aa 02 c0 	mov    DWORD PTR [esp+0x40],0xc002aa30
c00129d3:	8d 50 01             	lea    edx,[eax+0x1]
c00129d6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00129da:	89 15 a4 e8 02 c0    	mov    DWORD PTR ds:0xc002e8a4,edx
c00129e0:	83 c4 2c             	add    esp,0x2c
c00129e3:	5b                   	pop    ebx
c00129e4:	5e                   	pop    esi
c00129e5:	5f                   	pop    edi
c00129e6:	5d                   	pop    ebp
c00129e7:	e9 d7 03 00 00       	jmp    c0012dc3 <Dbg::kprintf(char const*, ...)>

c00129ec <VAS::tryLoadBackOffDisk(unsigned long)>:
c00129ec:	55                   	push   ebp
c00129ed:	57                   	push   edi
c00129ee:	56                   	push   esi
c00129ef:	53                   	push   ebx
c00129f0:	83 ec 0c             	sub    esp,0xc
c00129f3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00129f7:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00129fd:	0f 84 d1 00 00 00    	je     c0012ad4 <VAS::tryLoadBackOffDisk(unsigned long)+0xe8>
c0012a03:	56                   	push   esi
c0012a04:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012a08:	e8 89 f4 ff ff       	call   c0011e96 <VAS::getPageTableEntry(unsigned long)>
c0012a0d:	5b                   	pop    ebx
c0012a0e:	85 c0                	test   eax,eax
c0012a10:	5f                   	pop    edi
c0012a11:	89 c3                	mov    ebx,eax
c0012a13:	0f 84 bb 00 00 00    	je     c0012ad4 <VAS::tryLoadBackOffDisk(unsigned long)+0xe8>
c0012a19:	8b 38                	mov    edi,DWORD PTR [eax]
c0012a1b:	31 c0                	xor    eax,eax
c0012a1d:	89 fa                	mov    edx,edi
c0012a1f:	81 e2 01 04 00 00    	and    edx,0x401
c0012a25:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012a2b:	0f 85 a5 00 00 00    	jne    c0012ad6 <VAS::tryLoadBackOffDisk(unsigned long)+0xea>
c0012a31:	e8 81 d4 ff ff       	call   c000feb7 <Phys::allocatePage()>
c0012a36:	c1 ef 0b             	shr    edi,0xb
c0012a39:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012a3b:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012a41:	09 c2                	or     edx,eax
c0012a43:	81 ca 01 08 00 00    	or     edx,0x801
c0012a49:	89 13                	mov    DWORD PTR [ebx],edx
c0012a4b:	8b 0d cc d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6cc
c0012a51:	85 c9                	test   ecx,ecx
c0012a53:	7e 3d                	jle    c0012a92 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012a55:	89 f5                	mov    ebp,esi
c0012a57:	31 db                	xor    ebx,ebx
c0012a59:	83 ec 0c             	sub    esp,0xc
c0012a5c:	57                   	push   edi
c0012a5d:	e8 bc f0 ff ff       	call   c0011b1e <Virt::swapIDToSector(unsigned long)>
c0012a62:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012a65:	01 d8                	add    eax,ebx
c0012a67:	6a 01                	push   0x1
c0012a69:	31 d2                	xor    edx,edx
c0012a6b:	43                   	inc    ebx
c0012a6c:	52                   	push   edx
c0012a6d:	81 c5 00 02 00 00    	add    ebp,0x200
c0012a73:	50                   	push   eax
c0012a74:	0f be 05 d8 d6 02 c0 	movsx  eax,BYTE PTR ds:0xc002d6d8
c0012a7b:	ff 34 85 3c ec 02 c0 	push   DWORD PTR [eax*4-0x3ffd13c4]
c0012a82:	e8 0f 3c 00 00       	call   c0016696 <LogicalDisk::read(unsigned long long, int, void*)>
c0012a87:	83 c4 20             	add    esp,0x20
c0012a8a:	39 1d cc d6 02 c0    	cmp    DWORD PTR ds:0xc002d6cc,ebx
c0012a90:	7f c7                	jg     c0012a59 <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012a92:	a1 a8 e8 02 c0       	mov    eax,ds:0xc002e8a8
c0012a97:	48                   	dec    eax
c0012a98:	52                   	push   edx
c0012a99:	a3 a8 e8 02 c0       	mov    ds:0xc002e8a8,eax
c0012a9e:	50                   	push   eax
c0012a9f:	56                   	push   esi
c0012aa0:	68 41 aa 02 c0       	push   0xc002aa41
c0012aa5:	e8 19 03 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0012aaa:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012aad:	e8 4e f0 ff ff       	call   c0011b00 <Virt::freeSwapfilePage(unsigned long)>
c0012ab2:	e8 77 b3 00 00       	call   c001de2e <unlockScheduler()>
c0012ab7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012abb:	83 c4 10             	add    esp,0x10
c0012abe:	25 ff 0f 00 00       	and    eax,0xfff
c0012ac3:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012ac8:	77 14                	ja     c0012ade <VAS::tryLoadBackOffDisk(unsigned long)+0xf2>
c0012aca:	0f 20 d8             	mov    eax,cr3
c0012acd:	0f 22 d8             	mov    cr3,eax
c0012ad0:	b0 01                	mov    al,0x1
c0012ad2:	eb 02                	jmp    c0012ad6 <VAS::tryLoadBackOffDisk(unsigned long)+0xea>
c0012ad4:	31 c0                	xor    eax,eax
c0012ad6:	83 c4 0c             	add    esp,0xc
c0012ad9:	5b                   	pop    ebx
c0012ada:	5e                   	pop    esi
c0012adb:	5f                   	pop    edi
c0012adc:	5d                   	pop    ebp
c0012add:	c3                   	ret    
c0012ade:	83 ec 0c             	sub    esp,0xc
c0012ae1:	68 56 aa 02 c0       	push   0xc002aa56
c0012ae6:	e8 d8 02 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0012aeb:	83 c4 10             	add    esp,0x10
c0012aee:	eb da                	jmp    c0012aca <VAS::tryLoadBackOffDisk(unsigned long)+0xde>

c0012af0 <VAS::scanForEviction()>:
c0012af0:	57                   	push   edi
c0012af1:	56                   	push   esi
c0012af2:	53                   	push   ebx
c0012af3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012af7:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012afa:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012b00:	75 0e                	jne    c0012b10 <VAS::scanForEviction()+0x20>
c0012b02:	89 da                	mov    edx,ebx
c0012b04:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012b07:	c1 ea 16             	shr    edx,0x16
c0012b0a:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012b0e:	74 48                	je     c0012b58 <VAS::scanForEviction()+0x68>
c0012b10:	53                   	push   ebx
c0012b11:	56                   	push   esi
c0012b12:	e8 7f f3 ff ff       	call   c0011e96 <VAS::getPageTableEntry(unsigned long)>
c0012b17:	5a                   	pop    edx
c0012b18:	8b 38                	mov    edi,DWORD PTR [eax]
c0012b1a:	59                   	pop    ecx
c0012b1b:	89 fa                	mov    edx,edi
c0012b1d:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012b23:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012b29:	74 3d                	je     c0012b68 <VAS::scanForEviction()+0x78>
c0012b2b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012b31:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012b37:	76 2a                	jbe    c0012b63 <VAS::scanForEviction()+0x73>
c0012b39:	31 db                	xor    ebx,ebx
c0012b3b:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012b42:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012b48:	75 c6                	jne    c0012b10 <VAS::scanForEviction()+0x20>
c0012b4a:	89 da                	mov    edx,ebx
c0012b4c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012b4f:	c1 ea 16             	shr    edx,0x16
c0012b52:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012b56:	75 b8                	jne    c0012b10 <VAS::scanForEviction()+0x20>
c0012b58:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012b5e:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012b61:	eb 97                	jmp    c0012afa <VAS::scanForEviction()+0xa>
c0012b63:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012b66:	eb 92                	jmp    c0012afa <VAS::scanForEviction()+0xa>
c0012b68:	f7 c7 01 00 00 00    	test   edi,0x1
c0012b6e:	74 bb                	je     c0012b2b <VAS::scanForEviction()+0x3b>
c0012b70:	f7 c7 20 00 00 00    	test   edi,0x20
c0012b76:	74 0a                	je     c0012b82 <VAS::scanForEviction()+0x92>
c0012b78:	83 e7 df             	and    edi,0xffffffdf
c0012b7b:	89 38                	mov    DWORD PTR [eax],edi
c0012b7d:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012b80:	eb a9                	jmp    c0012b2b <VAS::scanForEviction()+0x3b>
c0012b82:	83 ec 08             	sub    esp,0x8
c0012b85:	53                   	push   ebx
c0012b86:	56                   	push   esi
c0012b87:	e8 9e fd ff ff       	call   c001292a <VAS::evict(unsigned long)>
c0012b8c:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012b93:	83 c4 10             	add    esp,0x10
c0012b96:	89 f8                	mov    eax,edi
c0012b98:	5b                   	pop    ebx
c0012b99:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b9e:	5e                   	pop    esi
c0012b9f:	5f                   	pop    edi
c0012ba0:	c3                   	ret    

c0012ba1 <mapVASFirstTime>:
c0012ba1:	55                   	push   ebp
c0012ba2:	57                   	push   edi
c0012ba3:	56                   	push   esi
c0012ba4:	53                   	push   ebx
c0012ba5:	83 ec 0c             	sub    esp,0xc
c0012ba8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012bad:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012bb0:	4a                   	dec    edx
c0012bb1:	0f 84 8e 00 00 00    	je     c0012c45 <mapVASFirstTime+0xa4>
c0012bb7:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012bba:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012bbd:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012bc2:	c1 e5 15             	shl    ebp,0x15
c0012bc5:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012bca:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012bd0:	29 eb                	sub    ebx,ebp
c0012bd2:	29 ee                	sub    esi,ebp
c0012bd4:	e8 de d2 ff ff       	call   c000feb7 <Phys::allocatePage()>
c0012bd9:	83 ec 0c             	sub    esp,0xc
c0012bdc:	68 03 04 00 00       	push   0x403
c0012be1:	6a 01                	push   0x1
c0012be3:	53                   	push   ebx
c0012be4:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012bea:	50                   	push   eax
c0012beb:	57                   	push   edi
c0012bec:	e8 1f f9 ff ff       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012bf1:	83 c4 20             	add    esp,0x20
c0012bf4:	39 f3                	cmp    ebx,esi
c0012bf6:	75 dc                	jne    c0012bd4 <mapVASFirstTime+0x33>
c0012bf8:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012bfd:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012c02:	29 ee                	sub    esi,ebp
c0012c04:	29 e8                	sub    eax,ebp
c0012c06:	89 c5                	mov    ebp,eax
c0012c08:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012c0c:	19 db                	sbb    ebx,ebx
c0012c0e:	e8 a4 d2 ff ff       	call   c000feb7 <Phys::allocatePage()>
c0012c13:	83 e3 04             	and    ebx,0x4
c0012c16:	83 ec 0c             	sub    esp,0xc
c0012c19:	81 c3 03 04 00 00    	add    ebx,0x403
c0012c1f:	53                   	push   ebx
c0012c20:	6a 01                	push   0x1
c0012c22:	56                   	push   esi
c0012c23:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012c29:	50                   	push   eax
c0012c2a:	57                   	push   edi
c0012c2b:	e8 e0 f8 ff ff       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c30:	83 c4 20             	add    esp,0x20
c0012c33:	39 f5                	cmp    ebp,esi
c0012c35:	75 d1                	jne    c0012c08 <mapVASFirstTime+0x67>
c0012c37:	0f 20 d8             	mov    eax,cr3
c0012c3a:	0f 22 d8             	mov    cr3,eax
c0012c3d:	83 c4 0c             	add    esp,0xc
c0012c40:	5b                   	pop    ebx
c0012c41:	5e                   	pop    esi
c0012c42:	5f                   	pop    edi
c0012c43:	5d                   	pop    ebp
c0012c44:	c3                   	ret    
c0012c45:	83 ec 0c             	sub    esp,0xc
c0012c48:	68 66 aa 02 c0       	push   0xc002aa66
c0012c4d:	e8 71 01 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0012c52:	83 c4 10             	add    esp,0x10
c0012c55:	83 c4 0c             	add    esp,0xc
c0012c58:	5b                   	pop    ebx
c0012c59:	5e                   	pop    esi
c0012c5a:	5f                   	pop    edi
c0012c5b:	5d                   	pop    ebp
c0012c5c:	c3                   	ret    

c0012c5d <__cxa_atexit>:
c0012c5d:	31 c0                	xor    eax,eax
c0012c5f:	c3                   	ret    

c0012c60 <__cxa_finalize>:
c0012c60:	c3                   	ret    

c0012c61 <__stack_chk_fail>:
c0012c61:	55                   	push   ebp
c0012c62:	89 e5                	mov    ebp,esp
c0012c64:	83 ec 14             	sub    esp,0x14
c0012c67:	68 7f aa 02 c0       	push   0xc002aa7f
c0012c6c:	e8 52 01 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0012c71:	58                   	pop    eax
c0012c72:	5a                   	pop    edx
c0012c73:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012c76:	68 cf aa 02 c0       	push   0xc002aacf
c0012c7b:	e8 43 01 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0012c80:	59                   	pop    ecx
c0012c81:	58                   	pop    eax
c0012c82:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c85:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012c88:	68 cf aa 02 c0       	push   0xc002aacf
c0012c8d:	e8 31 01 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0012c92:	5a                   	pop    edx
c0012c93:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c96:	59                   	pop    ecx
c0012c97:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c99:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012c9c:	68 cf aa 02 c0       	push   0xc002aacf
c0012ca1:	e8 1d 01 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0012ca6:	5a                   	pop    edx
c0012ca7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012caa:	59                   	pop    ecx
c0012cab:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cad:	8b 00                	mov    eax,DWORD PTR [eax]
c0012caf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012cb2:	68 cf aa 02 c0       	push   0xc002aacf
c0012cb7:	e8 07 01 00 00       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0012cbc:	c7 04 24 d7 aa 02 c0 	mov    DWORD PTR [esp],0xc002aad7
c0012cc3:	e8 c7 78 00 00       	call   c001a58f <Krnl::panic(char const*)>
c0012cc8:	83 c4 10             	add    esp,0x10
c0012ccb:	c9                   	leave  
c0012ccc:	c3                   	ret    

c0012ccd <__cxa_pure_virtual>:
c0012ccd:	83 ec 18             	sub    esp,0x18
c0012cd0:	68 ef aa 02 c0       	push   0xc002aaef
c0012cd5:	e8 b5 78 00 00       	call   c001a58f <Krnl::panic(char const*)>
c0012cda:	83 c4 1c             	add    esp,0x1c
c0012cdd:	c3                   	ret    

c0012cde <operator new[](unsigned long)>:
c0012cde:	e9 68 cb ff ff       	jmp    c000f84b <malloc>

c0012ce3 <operator delete(void*, unsigned long)>:
c0012ce3:	e9 83 cb ff ff       	jmp    c000f86b <rfree>

c0012ce8 <operator delete[](void*)>:
c0012ce8:	e9 7e cb ff ff       	jmp    c000f86b <rfree>

c0012ced <operator delete[](void*, unsigned long)>:
c0012ced:	e9 79 cb ff ff       	jmp    c000f86b <rfree>

c0012cf2 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012cf2:	57                   	push   edi
c0012cf3:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012cf8:	56                   	push   esi
c0012cf9:	be 04 ab 02 c0       	mov    esi,0xc002ab04
c0012cfe:	53                   	push   ebx
c0012cff:	83 ec 40             	sub    esp,0x40
c0012d02:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012d06:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012d0a:	fc                   	cld    
c0012d0b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d0d:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012d11:	83 f9 3e             	cmp    ecx,0x3e
c0012d14:	7e 05                	jle    c0012d1b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012d16:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012d1b:	89 df                	mov    edi,ebx
c0012d1d:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012d21:	eb 02                	jmp    c0012d25 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012d23:	89 c7                	mov    edi,eax
c0012d25:	31 d2                	xor    edx,edx
c0012d27:	46                   	inc    esi
c0012d28:	89 f8                	mov    eax,edi
c0012d2a:	f7 f1                	div    ecx
c0012d2c:	39 cf                	cmp    edi,ecx
c0012d2e:	73 f3                	jae    c0012d23 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012d30:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012d33:	eb 02                	jmp    c0012d37 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012d35:	89 c3                	mov    ebx,eax
c0012d37:	31 d2                	xor    edx,edx
c0012d39:	4e                   	dec    esi
c0012d3a:	89 d8                	mov    eax,ebx
c0012d3c:	f7 f1                	div    ecx
c0012d3e:	39 cb                	cmp    ebx,ecx
c0012d40:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012d44:	88 16                	mov    BYTE PTR [esi],dl
c0012d46:	73 ed                	jae    c0012d35 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012d48:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012d4c:	83 c4 40             	add    esp,0x40
c0012d4f:	5b                   	pop    ebx
c0012d50:	5e                   	pop    esi
c0012d51:	5f                   	pop    edi
c0012d52:	c3                   	ret    

c0012d53 <Dbg::logc(char)>:
c0012d53:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012d57:	ba fd 03 00 00       	mov    edx,0x3fd
c0012d5c:	ec                   	in     al,dx
c0012d5d:	a8 20                	test   al,0x20
c0012d5f:	74 fb                	je     c0012d5c <Dbg::logc(char)+0x9>
c0012d61:	ba f8 03 00 00       	mov    edx,0x3f8
c0012d66:	88 c8                	mov    al,cl
c0012d68:	ee                   	out    dx,al
c0012d69:	c3                   	ret    

c0012d6a <Dbg::logs(char*)>:
c0012d6a:	53                   	push   ebx
c0012d6b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012d6f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012d72:	84 c0                	test   al,al
c0012d74:	74 0f                	je     c0012d85 <Dbg::logs(char*)+0x1b>
c0012d76:	50                   	push   eax
c0012d77:	43                   	inc    ebx
c0012d78:	e8 d6 ff ff ff       	call   c0012d53 <Dbg::logc(char)>
c0012d7d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012d80:	5a                   	pop    edx
c0012d81:	84 c0                	test   al,al
c0012d83:	75 f1                	jne    c0012d76 <Dbg::logs(char*)+0xc>
c0012d85:	5b                   	pop    ebx
c0012d86:	c3                   	ret    

c0012d87 <Dbg::logWriteInt(unsigned int)>:
c0012d87:	83 ec 10             	sub    esp,0x10
c0012d8a:	6a 0a                	push   0xa
c0012d8c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012d90:	50                   	push   eax
c0012d91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d95:	e8 58 ff ff ff       	call   c0012cf2 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012d9a:	50                   	push   eax
c0012d9b:	e8 ca ff ff ff       	call   c0012d6a <Dbg::logs(char*)>
c0012da0:	83 c4 20             	add    esp,0x20
c0012da3:	c3                   	ret    

c0012da4 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012da4:	83 ec 10             	sub    esp,0x10
c0012da7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012dab:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012daf:	50                   	push   eax
c0012db0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012db4:	e8 39 ff ff ff       	call   c0012cf2 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012db9:	50                   	push   eax
c0012dba:	e8 ab ff ff ff       	call   c0012d6a <Dbg::logs(char*)>
c0012dbf:	83 c4 20             	add    esp,0x20
c0012dc2:	c3                   	ret    

c0012dc3 <Dbg::kprintf(char const*, ...)>:
c0012dc3:	55                   	push   ebp
c0012dc4:	57                   	push   edi
c0012dc5:	56                   	push   esi
c0012dc6:	53                   	push   ebx
c0012dc7:	83 ec 0c             	sub    esp,0xc
c0012dca:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012dce:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012dd2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012dd6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012dd9:	84 c0                	test   al,al
c0012ddb:	74 4a                	je     c0012e27 <Dbg::kprintf(char const*, ...)+0x64>
c0012ddd:	31 db                	xor    ebx,ebx
c0012ddf:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012de2:	3c 25                	cmp    al,0x25
c0012de4:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012de7:	0f 85 e4 00 00 00    	jne    c0012ed1 <Dbg::kprintf(char const*, ...)+0x10e>
c0012ded:	83 c3 02             	add    ebx,0x2
c0012df0:	8a 07                	mov    al,BYTE PTR [edi]
c0012df2:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012df5:	83 e8 25             	sub    eax,0x25
c0012df8:	3c 53                	cmp    al,0x53
c0012dfa:	0f 87 ba 00 00 00    	ja     c0012eba <Dbg::kprintf(char const*, ...)+0xf7>
c0012e00:	0f b6 c0             	movzx  eax,al
c0012e03:	ff 24 85 44 ab 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd54bc]
c0012e0a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e0e:	89 c8                	mov    eax,ecx
c0012e10:	83 c1 04             	add    ecx,0x4
c0012e13:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e17:	ff 30                	push   DWORD PTR [eax]
c0012e19:	e8 4c ff ff ff       	call   c0012d6a <Dbg::logs(char*)>
c0012e1e:	58                   	pop    eax
c0012e1f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012e23:	84 c0                	test   al,al
c0012e25:	75 b8                	jne    c0012ddf <Dbg::kprintf(char const*, ...)+0x1c>
c0012e27:	83 c4 0c             	add    esp,0xc
c0012e2a:	5b                   	pop    ebx
c0012e2b:	5e                   	pop    esi
c0012e2c:	5f                   	pop    edi
c0012e2d:	5d                   	pop    ebp
c0012e2e:	c3                   	ret    
c0012e2f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e33:	89 d0                	mov    eax,edx
c0012e35:	83 c2 04             	add    edx,0x4
c0012e38:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e3c:	ff 30                	push   DWORD PTR [eax]
c0012e3e:	e8 44 ff ff ff       	call   c0012d87 <Dbg::logWriteInt(unsigned int)>
c0012e43:	58                   	pop    eax
c0012e44:	eb d9                	jmp    c0012e1f <Dbg::kprintf(char const*, ...)+0x5c>
c0012e46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e4a:	89 d0                	mov    eax,edx
c0012e4c:	83 c2 04             	add    edx,0x4
c0012e4f:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012e52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e56:	50                   	push   eax
c0012e57:	e8 f7 fe ff ff       	call   c0012d53 <Dbg::logc(char)>
c0012e5c:	58                   	pop    eax
c0012e5d:	eb c0                	jmp    c0012e1f <Dbg::kprintf(char const*, ...)+0x5c>
c0012e5f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e63:	89 c8                	mov    eax,ecx
c0012e65:	83 c1 04             	add    ecx,0x4
c0012e68:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e6c:	ff 30                	push   DWORD PTR [eax]
c0012e6e:	e8 14 ff ff ff       	call   c0012d87 <Dbg::logWriteInt(unsigned int)>
c0012e73:	5f                   	pop    edi
c0012e74:	eb a9                	jmp    c0012e1f <Dbg::kprintf(char const*, ...)+0x5c>
c0012e76:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e7a:	89 c8                	mov    eax,ecx
c0012e7c:	83 c1 04             	add    ecx,0x4
c0012e7f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e83:	6a 10                	push   0x10
c0012e85:	ff 30                	push   DWORD PTR [eax]
c0012e87:	e8 18 ff ff ff       	call   c0012da4 <Dbg::logWriteIntBase(unsigned int, int)>
c0012e8c:	59                   	pop    ecx
c0012e8d:	5f                   	pop    edi
c0012e8e:	eb 8f                	jmp    c0012e1f <Dbg::kprintf(char const*, ...)+0x5c>
c0012e90:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e94:	89 d0                	mov    eax,edx
c0012e96:	83 c2 08             	add    edx,0x8
c0012e99:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e9d:	6a 10                	push   0x10
c0012e9f:	ff 30                	push   DWORD PTR [eax]
c0012ea1:	e8 fe fe ff ff       	call   c0012da4 <Dbg::logWriteIntBase(unsigned int, int)>
c0012ea6:	58                   	pop    eax
c0012ea7:	5a                   	pop    edx
c0012ea8:	e9 72 ff ff ff       	jmp    c0012e1f <Dbg::kprintf(char const*, ...)+0x5c>
c0012ead:	6a 25                	push   0x25
c0012eaf:	e8 9f fe ff ff       	call   c0012d53 <Dbg::logc(char)>
c0012eb4:	58                   	pop    eax
c0012eb5:	e9 65 ff ff ff       	jmp    c0012e1f <Dbg::kprintf(char const*, ...)+0x5c>
c0012eba:	6a 25                	push   0x25
c0012ebc:	e8 92 fe ff ff       	call   c0012d53 <Dbg::logc(char)>
c0012ec1:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012ec4:	50                   	push   eax
c0012ec5:	e8 89 fe ff ff       	call   c0012d53 <Dbg::logc(char)>
c0012eca:	5a                   	pop    edx
c0012ecb:	59                   	pop    ecx
c0012ecc:	e9 4e ff ff ff       	jmp    c0012e1f <Dbg::kprintf(char const*, ...)+0x5c>
c0012ed1:	50                   	push   eax
c0012ed2:	89 eb                	mov    ebx,ebp
c0012ed4:	e8 7a fe ff ff       	call   c0012d53 <Dbg::logc(char)>
c0012ed9:	89 fd                	mov    ebp,edi
c0012edb:	58                   	pop    eax
c0012edc:	e9 3e ff ff ff       	jmp    c0012e1f <Dbg::kprintf(char const*, ...)+0x5c>
c0012ee1:	90                   	nop

c0012ee2 <File::read(unsigned long long, void*, int*)>:
c0012ee2:	53                   	push   ebx
c0012ee3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ee7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012eeb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012ef2:	3c 19                	cmp    al,0x19
c0012ef4:	77 35                	ja     c0012f2b <File::read(unsigned long long, void*, int*)+0x49>
c0012ef6:	8b 04 85 40 ed 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd12c0]
c0012efd:	85 c0                	test   eax,eax
c0012eff:	74 2a                	je     c0012f2b <File::read(unsigned long long, void*, int*)+0x49>
c0012f01:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f07:	85 c0                	test   eax,eax
c0012f09:	74 20                	je     c0012f2b <File::read(unsigned long long, void*, int*)+0x49>
c0012f0b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f0f:	74 21                	je     c0012f32 <File::read(unsigned long long, void*, int*)+0x50>
c0012f11:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f13:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012f17:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012f1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012f25:	5b                   	pop    ebx
c0012f26:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012f29:	ff e0                	jmp    eax
c0012f2b:	b8 0b 00 00 00       	mov    eax,0xb
c0012f30:	eb 05                	jmp    c0012f37 <File::read(unsigned long long, void*, int*)+0x55>
c0012f32:	b8 05 00 00 00       	mov    eax,0x5
c0012f37:	5b                   	pop    ebx
c0012f38:	c3                   	ret    
c0012f39:	90                   	nop

c0012f3a <File::write(unsigned long long, void*, int*)>:
c0012f3a:	53                   	push   ebx
c0012f3b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f3f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f43:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012f4a:	3c 19                	cmp    al,0x19
c0012f4c:	77 35                	ja     c0012f83 <File::write(unsigned long long, void*, int*)+0x49>
c0012f4e:	8b 04 85 40 ed 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd12c0]
c0012f55:	85 c0                	test   eax,eax
c0012f57:	74 2a                	je     c0012f83 <File::write(unsigned long long, void*, int*)+0x49>
c0012f59:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f5f:	85 c0                	test   eax,eax
c0012f61:	74 20                	je     c0012f83 <File::write(unsigned long long, void*, int*)+0x49>
c0012f63:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f67:	74 21                	je     c0012f8a <File::write(unsigned long long, void*, int*)+0x50>
c0012f69:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f6b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012f6f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012f75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012f7d:	5b                   	pop    ebx
c0012f7e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012f81:	ff e0                	jmp    eax
c0012f83:	b8 0b 00 00 00       	mov    eax,0xb
c0012f88:	eb 05                	jmp    c0012f8f <File::write(unsigned long long, void*, int*)+0x55>
c0012f8a:	b8 05 00 00 00       	mov    eax,0x5
c0012f8f:	5b                   	pop    ebx
c0012f90:	c3                   	ret    
c0012f91:	90                   	nop

c0012f92 <Directory::read(unsigned long long, void*, int*)>:
c0012f92:	53                   	push   ebx
c0012f93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f97:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f9b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012fa2:	3c 19                	cmp    al,0x19
c0012fa4:	77 35                	ja     c0012fdb <Directory::read(unsigned long long, void*, int*)+0x49>
c0012fa6:	8b 04 85 40 ed 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd12c0]
c0012fad:	85 c0                	test   eax,eax
c0012faf:	74 2a                	je     c0012fdb <Directory::read(unsigned long long, void*, int*)+0x49>
c0012fb1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012fb7:	85 c0                	test   eax,eax
c0012fb9:	74 20                	je     c0012fdb <Directory::read(unsigned long long, void*, int*)+0x49>
c0012fbb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fbf:	74 21                	je     c0012fe2 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012fc1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012fc3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012fc7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012fcd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012fd1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012fd5:	5b                   	pop    ebx
c0012fd6:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012fd9:	ff e0                	jmp    eax
c0012fdb:	b8 0b 00 00 00       	mov    eax,0xb
c0012fe0:	eb 05                	jmp    c0012fe7 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012fe2:	b8 05 00 00 00       	mov    eax,0x5
c0012fe7:	5b                   	pop    ebx
c0012fe8:	c3                   	ret    
c0012fe9:	90                   	nop

c0012fea <Directory::write(unsigned long long, void*, int*)>:
c0012fea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012fee:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012ff5:	b8 0b 00 00 00       	mov    eax,0xb
c0012ffa:	80 fa 19             	cmp    dl,0x19
c0012ffd:	77 18                	ja     c0013017 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012fff:	8b 14 95 40 ed 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd12c0]
c0013006:	85 d2                	test   edx,edx
c0013008:	74 0d                	je     c0013017 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001300a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013011:	19 c0                	sbb    eax,eax
c0013013:	83 e0 0a             	and    eax,0xa
c0013016:	40                   	inc    eax
c0013017:	c3                   	ret    

c0013018 <File::isAtty()>:
c0013018:	31 c0                	xor    eax,eax
c001301a:	c3                   	ret    
c001301b:	90                   	nop

c001301c <Directory::isAtty()>:
c001301c:	31 c0                	xor    eax,eax
c001301e:	c3                   	ret    
c001301f:	90                   	nop

c0013020 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0013020:	b8 0a 00 00 00       	mov    eax,0xa
c0013025:	c3                   	ret    

c0013026 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0013026:	b8 0a 00 00 00       	mov    eax,0xa
c001302b:	c3                   	ret    

c001302c <Filesystem::getFileFirstSector(char const*)>:
c001302c:	31 c0                	xor    eax,eax
c001302e:	31 d2                	xor    edx,edx
c0013030:	c3                   	ret    
c0013031:	90                   	nop

c0013032 <File::~File()>:
c0013032:	83 ec 0c             	sub    esp,0xc
c0013035:	ba 04 ad 02 c0       	mov    edx,0xc002ad04
c001303a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001303e:	89 10                	mov    DWORD PTR [eax],edx
c0013040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013044:	83 ec 0c             	sub    esp,0xc
c0013047:	50                   	push   eax
c0013048:	e8 41 e7 ff ff       	call   c001178e <UnixFile::~UnixFile()>
c001304d:	83 c4 10             	add    esp,0x10
c0013050:	90                   	nop
c0013051:	83 c4 0c             	add    esp,0xc
c0013054:	c3                   	ret    
c0013055:	90                   	nop

c0013056 <File::~File()>:
c0013056:	83 ec 0c             	sub    esp,0xc
c0013059:	83 ec 0c             	sub    esp,0xc
c001305c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013060:	e8 cd ff ff ff       	call   c0013032 <File::~File()>
c0013065:	83 c4 10             	add    esp,0x10
c0013068:	83 ec 08             	sub    esp,0x8
c001306b:	68 14 01 00 00       	push   0x114
c0013070:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013074:	e8 6a fc ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0013079:	83 c4 10             	add    esp,0x10
c001307c:	83 c4 0c             	add    esp,0xc
c001307f:	c3                   	ret    

c0013080 <Directory::~Directory()>:
c0013080:	83 ec 0c             	sub    esp,0xc
c0013083:	ba 20 ad 02 c0       	mov    edx,0xc002ad20
c0013088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001308c:	89 10                	mov    DWORD PTR [eax],edx
c001308e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013092:	83 ec 0c             	sub    esp,0xc
c0013095:	50                   	push   eax
c0013096:	e8 f3 e6 ff ff       	call   c001178e <UnixFile::~UnixFile()>
c001309b:	83 c4 10             	add    esp,0x10
c001309e:	90                   	nop
c001309f:	83 c4 0c             	add    esp,0xc
c00130a2:	c3                   	ret    
c00130a3:	90                   	nop

c00130a4 <Directory::~Directory()>:
c00130a4:	83 ec 0c             	sub    esp,0xc
c00130a7:	83 ec 0c             	sub    esp,0xc
c00130aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130ae:	e8 cd ff ff ff       	call   c0013080 <Directory::~Directory()>
c00130b3:	83 c4 10             	add    esp,0x10
c00130b6:	83 ec 08             	sub    esp,0x8
c00130b9:	68 14 01 00 00       	push   0x114
c00130be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130c2:	e8 1c fc ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00130c7:	83 c4 10             	add    esp,0x10
c00130ca:	83 c4 0c             	add    esp,0xc
c00130cd:	c3                   	ret    

c00130ce <Filesystem::Filesystem()>:
c00130ce:	ba 9c ac 02 c0       	mov    edx,0xc002ac9c
c00130d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130d7:	89 10                	mov    DWORD PTR [eax],edx
c00130d9:	8b 15 b4 e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e8b4
c00130df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130e3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00130e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130ea:	a3 b4 e8 02 c0       	mov    ds:0xc002e8b4,eax
c00130ef:	90                   	nop
c00130f0:	c3                   	ret    
c00130f1:	90                   	nop

c00130f2 <Filesystem::~Filesystem()>:
c00130f2:	ba 9c ac 02 c0       	mov    edx,0xc002ac9c
c00130f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130fb:	89 10                	mov    DWORD PTR [eax],edx
c00130fd:	90                   	nop
c00130fe:	c3                   	ret    
c00130ff:	90                   	nop

c0013100 <Filesystem::~Filesystem()>:
c0013100:	83 ec 0c             	sub    esp,0xc
c0013103:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013107:	e8 e6 ff ff ff       	call   c00130f2 <Filesystem::~Filesystem()>
c001310c:	83 c4 04             	add    esp,0x4
c001310f:	83 ec 08             	sub    esp,0x8
c0013112:	6a 08                	push   0x8
c0013114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013118:	e8 c6 fb ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c001311d:	83 c4 10             	add    esp,0x10
c0013120:	83 c4 0c             	add    esp,0xc
c0013123:	c3                   	ret    

c0013124 <Fs::getcwd(Process*, char*, int)>:
c0013124:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013128:	31 c0                	xor    eax,eax
c001312a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001312d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0013131:	7d 15                	jge    c0013148 <Fs::getcwd(Process*, char*, int)+0x24>
c0013133:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013137:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001313e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0013141:	84 c9                	test   cl,cl
c0013143:	74 06                	je     c001314b <Fs::getcwd(Process*, char*, int)+0x27>
c0013145:	40                   	inc    eax
c0013146:	eb e2                	jmp    c001312a <Fs::getcwd(Process*, char*, int)+0x6>
c0013148:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001314b:	31 c0                	xor    eax,eax
c001314d:	c3                   	ret    

c001314e <Fs::initVFS()>:
c001314e:	83 ec 18             	sub    esp,0x18
c0013151:	6a 08                	push   0x8
c0013153:	e8 f3 c6 ff ff       	call   c000f84b <malloc>
c0013158:	89 04 24             	mov    DWORD PTR [esp],eax
c001315b:	e8 d4 df 00 00       	call   c0021134 <FAT::FAT()>
c0013160:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013167:	e8 df c6 ff ff       	call   c000f84b <malloc>
c001316c:	89 04 24             	mov    DWORD PTR [esp],eax
c001316f:	e8 18 f2 00 00       	call   c002238c <ISO9660::ISO9660()>
c0013174:	83 c4 1c             	add    esp,0x1c
c0013177:	c3                   	ret    

c0013178 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013178:	55                   	push   ebp
c0013179:	57                   	push   edi
c001317a:	56                   	push   esi
c001317b:	53                   	push   ebx
c001317c:	81 ec 10 04 00 00    	sub    esp,0x410
c0013182:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013189:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0013190:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013197:	68 00 04 00 00       	push   0x400
c001319c:	6a 00                	push   0x0
c001319e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00131a2:	56                   	push   esi
c00131a3:	e8 d8 d5 fe ff       	call   c0000780 <memset>
c00131a8:	83 c4 10             	add    esp,0x10
c00131ab:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00131af:	75 0b                	jne    c00131bc <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00131b1:	50                   	push   eax
c00131b2:	50                   	push   eax
c00131b3:	57                   	push   edi
c00131b4:	56                   	push   esi
c00131b5:	e8 82 d6 fe ff       	call   c000083c <strcpy>
c00131ba:	eb 41                	jmp    c00131fd <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c00131bc:	8a 07                	mov    al,BYTE PTR [edi]
c00131be:	3c 5c                	cmp    al,0x5c
c00131c0:	74 04                	je     c00131c6 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c00131c2:	3c 2f                	cmp    al,0x2f
c00131c4:	75 18                	jne    c00131de <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00131c6:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00131c9:	3c 60                	cmp    al,0x60
c00131cb:	7e 03                	jle    c00131d0 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00131cd:	83 e8 20             	sub    eax,0x20
c00131d0:	88 04 24             	mov    BYTE PTR [esp],al
c00131d3:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00131da:	50                   	push   eax
c00131db:	50                   	push   eax
c00131dc:	eb 18                	jmp    c00131f6 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00131de:	50                   	push   eax
c00131df:	50                   	push   eax
c00131e0:	55                   	push   ebp
c00131e1:	56                   	push   esi
c00131e2:	e8 55 d6 fe ff       	call   c000083c <strcpy>
c00131e7:	5a                   	pop    edx
c00131e8:	59                   	pop    ecx
c00131e9:	68 b1 c4 02 c0       	push   0xc002c4b1
c00131ee:	56                   	push   esi
c00131ef:	e8 88 d7 fe ff       	call   c000097c <strcat>
c00131f4:	5d                   	pop    ebp
c00131f5:	58                   	pop    eax
c00131f6:	57                   	push   edi
c00131f7:	56                   	push   esi
c00131f8:	e8 7f d7 fe ff       	call   c000097c <strcat>
c00131fd:	83 c4 10             	add    esp,0x10
c0013200:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013203:	3c 60                	cmp    al,0x60
c0013205:	7e 03                	jle    c001320a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013207:	83 e8 20             	sub    eax,0x20
c001320a:	88 04 24             	mov    BYTE PTR [esp],al
c001320d:	88 03                	mov    BYTE PTR [ebx],al
c001320f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013216:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001321c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0013220:	bf 03 00 00 00       	mov    edi,0x3
c0013225:	b8 03 00 00 00       	mov    eax,0x3
c001322a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c001322d:	84 d2                	test   dl,dl
c001322f:	0f 84 91 00 00 00    	je     c00132c6 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0013235:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013238:	80 fa 5c             	cmp    dl,0x5c
c001323b:	74 05                	je     c0013242 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c001323d:	80 fa 2f             	cmp    dl,0x2f
c0013240:	75 12                	jne    c0013254 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013242:	89 c5                	mov    ebp,eax
c0013244:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013249:	74 09                	je     c0013254 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001324b:	40                   	inc    eax
c001324c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0013250:	89 cf                	mov    edi,ecx
c0013252:	eb d6                	jmp    c001322a <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013254:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013259:	75 5b                	jne    c00132b6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001325b:	80 fa 2e             	cmp    dl,0x2e
c001325e:	75 56                	jne    c00132b6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013260:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013264:	74 19                	je     c001327f <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013266:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001326b:	74 53                	je     c00132c0 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001326d:	89 f9                	mov    ecx,edi
c001326f:	41                   	inc    ecx
c0013270:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013273:	80 fa 2f             	cmp    dl,0x2f
c0013276:	74 f7                	je     c001326f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013278:	80 fa 5c             	cmp    dl,0x5c
c001327b:	74 f2                	je     c001326f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001327d:	eb d1                	jmp    c0013250 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001327f:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013284:	74 3a                	je     c00132c0 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013286:	83 f8 03             	cmp    eax,0x3
c0013289:	74 c5                	je     c0013250 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001328b:	41                   	inc    ecx
c001328c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001328f:	80 fa 2f             	cmp    dl,0x2f
c0013292:	74 f7                	je     c001328b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013294:	80 fa 5c             	cmp    dl,0x5c
c0013297:	74 f2                	je     c001328b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013299:	48                   	dec    eax
c001329a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001329e:	75 06                	jne    c00132a6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00132a0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00132a4:	eb f3                	jmp    c0013299 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c00132a6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00132aa:	74 07                	je     c00132b3 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c00132ac:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00132b0:	48                   	dec    eax
c00132b1:	eb f3                	jmp    c00132a6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00132b3:	40                   	inc    eax
c00132b4:	eb 9a                	jmp    c0013250 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132b6:	80 fa 2f             	cmp    dl,0x2f
c00132b9:	74 95                	je     c0013250 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132bb:	80 fa 5c             	cmp    dl,0x5c
c00132be:	74 90                	je     c0013250 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132c0:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00132c3:	40                   	inc    eax
c00132c4:	eb 8a                	jmp    c0013250 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132c6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00132ca:	83 ec 0c             	sub    esp,0xc
c00132cd:	53                   	push   ebx
c00132ce:	e8 c9 d4 fe ff       	call   c000079c <strlen>
c00132d3:	83 c4 10             	add    esp,0x10
c00132d6:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00132db:	75 26                	jne    c0013303 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00132dd:	83 ec 0c             	sub    esp,0xc
c00132e0:	53                   	push   ebx
c00132e1:	e8 b6 d4 fe ff       	call   c000079c <strlen>
c00132e6:	83 c4 10             	add    esp,0x10
c00132e9:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00132ee:	74 26                	je     c0013316 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c00132f0:	83 ec 0c             	sub    esp,0xc
c00132f3:	53                   	push   ebx
c00132f4:	e8 a3 d4 fe ff       	call   c000079c <strlen>
c00132f9:	83 c4 10             	add    esp,0x10
c00132fc:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013301:	eb c7                	jmp    c00132ca <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013303:	83 ec 0c             	sub    esp,0xc
c0013306:	53                   	push   ebx
c0013307:	e8 90 d4 fe ff       	call   c000079c <strlen>
c001330c:	83 c4 10             	add    esp,0x10
c001330f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013314:	74 c7                	je     c00132dd <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013316:	81 c4 0c 04 00 00    	add    esp,0x40c
c001331c:	5b                   	pop    ebx
c001331d:	5e                   	pop    esi
c001331e:	5f                   	pop    edi
c001331f:	5d                   	pop    ebp
c0013320:	c3                   	ret    
c0013321:	90                   	nop

c0013322 <File::File(char const*, Process*)>:
c0013322:	83 ec 0c             	sub    esp,0xc
c0013325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013329:	83 ec 08             	sub    esp,0x8
c001332c:	6a 00                	push   0x0
c001332e:	50                   	push   eax
c001332f:	e8 78 e2 ff ff       	call   c00115ac <UnixFile::UnixFile(int)>
c0013334:	83 c4 10             	add    esp,0x10
c0013337:	ba 04 ad 02 c0       	mov    edx,0xc002ad04
c001333c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013340:	89 10                	mov    DWORD PTR [eax],edx
c0013342:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013346:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001334c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013350:	83 c0 0d             	add    eax,0xd
c0013353:	83 ec 04             	sub    esp,0x4
c0013356:	52                   	push   edx
c0013357:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001335b:	50                   	push   eax
c001335c:	e8 17 fe ff ff       	call   c0013178 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013361:	83 c4 10             	add    esp,0x10
c0013364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013368:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001336b:	8d 50 bf             	lea    edx,[eax-0x41]
c001336e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013372:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001337c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013380:	90                   	nop
c0013381:	83 c4 0c             	add    esp,0xc
c0013384:	c3                   	ret    
c0013385:	90                   	nop

c0013386 <File::open(FileOpenMode)>:
c0013386:	53                   	push   ebx
c0013387:	b8 0b 00 00 00       	mov    eax,0xb
c001338c:	83 ec 08             	sub    esp,0x8
c001338f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013393:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001339a:	80 fa 19             	cmp    dl,0x19
c001339d:	77 40                	ja     c00133df <File::open(FileOpenMode)+0x59>
c001339f:	8b 14 95 40 ed 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd12c0]
c00133a6:	85 d2                	test   edx,edx
c00133a8:	74 35                	je     c00133df <File::open(FileOpenMode)+0x59>
c00133aa:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00133b0:	85 d2                	test   edx,edx
c00133b2:	74 2b                	je     c00133df <File::open(FileOpenMode)+0x59>
c00133b4:	b8 06 00 00 00       	mov    eax,0x6
c00133b9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00133bd:	75 20                	jne    c00133df <File::open(FileOpenMode)+0x59>
c00133bf:	8b 02                	mov    eax,DWORD PTR [edx]
c00133c1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00133c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00133cb:	51                   	push   ecx
c00133cc:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00133cf:	51                   	push   ecx
c00133d0:	52                   	push   edx
c00133d1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00133d4:	83 c4 10             	add    esp,0x10
c00133d7:	85 c0                	test   eax,eax
c00133d9:	75 04                	jne    c00133df <File::open(FileOpenMode)+0x59>
c00133db:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00133df:	83 c4 08             	add    esp,0x8
c00133e2:	5b                   	pop    ebx
c00133e3:	c3                   	ret    

c00133e4 <File::close()>:
c00133e4:	53                   	push   ebx
c00133e5:	b8 0b 00 00 00       	mov    eax,0xb
c00133ea:	83 ec 08             	sub    esp,0x8
c00133ed:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00133f1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00133f8:	80 fa 19             	cmp    dl,0x19
c00133fb:	77 41                	ja     c001343e <File::close()+0x5a>
c00133fd:	8b 1c 95 40 ed 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd12c0]
c0013404:	85 db                	test   ebx,ebx
c0013406:	74 36                	je     c001343e <File::close()+0x5a>
c0013408:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001340f:	74 2d                	je     c001343e <File::close()+0x5a>
c0013411:	b8 05 00 00 00       	mov    eax,0x5
c0013416:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001341a:	74 22                	je     c001343e <File::close()+0x5a>
c001341c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013420:	8b 04 95 40 ed 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd12c0]
c0013427:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001342d:	53                   	push   ebx
c001342e:	53                   	push   ebx
c001342f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013431:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013437:	50                   	push   eax
c0013438:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c001343b:	83 c4 10             	add    esp,0x10
c001343e:	83 c4 08             	add    esp,0x8
c0013441:	5b                   	pop    ebx
c0013442:	c3                   	ret    
c0013443:	90                   	nop

c0013444 <File::seek(unsigned long long)>:
c0013444:	56                   	push   esi
c0013445:	53                   	push   ebx
c0013446:	b8 0b 00 00 00       	mov    eax,0xb
c001344b:	51                   	push   ecx
c001344c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013450:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013454:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001345b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001345f:	80 fa 19             	cmp    dl,0x19
c0013462:	77 31                	ja     c0013495 <File::seek(unsigned long long)+0x51>
c0013464:	8b 14 95 40 ed 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd12c0]
c001346b:	85 d2                	test   edx,edx
c001346d:	74 26                	je     c0013495 <File::seek(unsigned long long)+0x51>
c001346f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013475:	85 d2                	test   edx,edx
c0013477:	74 1c                	je     c0013495 <File::seek(unsigned long long)+0x51>
c0013479:	b8 05 00 00 00       	mov    eax,0x5
c001347e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013482:	74 11                	je     c0013495 <File::seek(unsigned long long)+0x51>
c0013484:	8b 02                	mov    eax,DWORD PTR [edx]
c0013486:	53                   	push   ebx
c0013487:	51                   	push   ecx
c0013488:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001348e:	52                   	push   edx
c001348f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013492:	83 c4 10             	add    esp,0x10
c0013495:	5a                   	pop    edx
c0013496:	5b                   	pop    ebx
c0013497:	5e                   	pop    esi
c0013498:	c3                   	ret    
c0013499:	90                   	nop

c001349a <File::tell(unsigned long long*)>:
c001349a:	83 ec 0c             	sub    esp,0xc
c001349d:	b8 0b 00 00 00       	mov    eax,0xb
c00134a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00134a6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00134ad:	80 fa 19             	cmp    dl,0x19
c00134b0:	77 34                	ja     c00134e6 <File::tell(unsigned long long*)+0x4c>
c00134b2:	8b 14 95 40 ed 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd12c0]
c00134b9:	85 d2                	test   edx,edx
c00134bb:	74 29                	je     c00134e6 <File::tell(unsigned long long*)+0x4c>
c00134bd:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00134c3:	85 d2                	test   edx,edx
c00134c5:	74 1f                	je     c00134e6 <File::tell(unsigned long long*)+0x4c>
c00134c7:	b8 05 00 00 00       	mov    eax,0x5
c00134cc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00134d0:	74 14                	je     c00134e6 <File::tell(unsigned long long*)+0x4c>
c00134d2:	50                   	push   eax
c00134d3:	8b 02                	mov    eax,DWORD PTR [edx]
c00134d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00134d9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00134df:	52                   	push   edx
c00134e0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00134e3:	83 c4 10             	add    esp,0x10
c00134e6:	83 c4 0c             	add    esp,0xc
c00134e9:	c3                   	ret    

c00134ea <File::rewind()>:
c00134ea:	83 ec 10             	sub    esp,0x10
c00134ed:	6a 00                	push   0x0
c00134ef:	6a 00                	push   0x0
c00134f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134f5:	e8 4a ff ff ff       	call   c0013444 <File::seek(unsigned long long)>
c00134fa:	83 c4 1c             	add    esp,0x1c
c00134fd:	c3                   	ret    

c00134fe <File::unlink()>:
c00134fe:	83 ec 0c             	sub    esp,0xc
c0013501:	b8 0b 00 00 00       	mov    eax,0xb
c0013506:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001350a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013511:	80 f9 19             	cmp    cl,0x19
c0013514:	77 2f                	ja     c0013545 <File::unlink()+0x47>
c0013516:	8b 0c 8d 40 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd12c0]
c001351d:	85 c9                	test   ecx,ecx
c001351f:	74 24                	je     c0013545 <File::unlink()+0x47>
c0013521:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013527:	85 c9                	test   ecx,ecx
c0013529:	74 1a                	je     c0013545 <File::unlink()+0x47>
c001352b:	b8 06 00 00 00       	mov    eax,0x6
c0013530:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013534:	75 0f                	jne    c0013545 <File::unlink()+0x47>
c0013536:	83 c2 0d             	add    edx,0xd
c0013539:	50                   	push   eax
c001353a:	50                   	push   eax
c001353b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001353d:	52                   	push   edx
c001353e:	51                   	push   ecx
c001353f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013542:	83 c4 10             	add    esp,0x10
c0013545:	83 c4 0c             	add    esp,0xc
c0013548:	c3                   	ret    
c0013549:	90                   	nop

c001354a <File::rename(char const*)>:
c001354a:	83 ec 0c             	sub    esp,0xc
c001354d:	b8 0b 00 00 00       	mov    eax,0xb
c0013552:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013556:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001355d:	80 f9 19             	cmp    cl,0x19
c0013560:	77 32                	ja     c0013594 <File::rename(char const*)+0x4a>
c0013562:	8b 0c 8d 40 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd12c0]
c0013569:	85 c9                	test   ecx,ecx
c001356b:	74 27                	je     c0013594 <File::rename(char const*)+0x4a>
c001356d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013573:	85 c9                	test   ecx,ecx
c0013575:	74 1d                	je     c0013594 <File::rename(char const*)+0x4a>
c0013577:	b8 06 00 00 00       	mov    eax,0x6
c001357c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013580:	75 12                	jne    c0013594 <File::rename(char const*)+0x4a>
c0013582:	83 c2 0d             	add    edx,0xd
c0013585:	50                   	push   eax
c0013586:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013588:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001358c:	52                   	push   edx
c001358d:	51                   	push   ecx
c001358e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013591:	83 c4 10             	add    esp,0x10
c0013594:	83 c4 0c             	add    esp,0xc
c0013597:	c3                   	ret    

c0013598 <File::chfatattr(unsigned char, unsigned char)>:
c0013598:	57                   	push   edi
c0013599:	b8 0b 00 00 00       	mov    eax,0xb
c001359e:	56                   	push   esi
c001359f:	53                   	push   ebx
c00135a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135a4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00135a8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135af:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00135b3:	80 f9 19             	cmp    cl,0x19
c00135b6:	77 37                	ja     c00135ef <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135b8:	8b 0c 8d 40 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd12c0]
c00135bf:	85 c9                	test   ecx,ecx
c00135c1:	74 2c                	je     c00135ef <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135c3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135c9:	85 c9                	test   ecx,ecx
c00135cb:	74 22                	je     c00135ef <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135cd:	b8 06 00 00 00       	mov    eax,0x6
c00135d2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135d6:	75 17                	jne    c00135ef <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135d8:	8b 39                	mov    edi,DWORD PTR [ecx]
c00135da:	89 f0                	mov    eax,esi
c00135dc:	83 c2 0d             	add    edx,0xd
c00135df:	0f b6 f0             	movzx  esi,al
c00135e2:	0f b6 db             	movzx  ebx,bl
c00135e5:	56                   	push   esi
c00135e6:	53                   	push   ebx
c00135e7:	52                   	push   edx
c00135e8:	51                   	push   ecx
c00135e9:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00135ec:	83 c4 10             	add    esp,0x10
c00135ef:	5b                   	pop    ebx
c00135f0:	5e                   	pop    esi
c00135f1:	5f                   	pop    edi
c00135f2:	c3                   	ret    
c00135f3:	90                   	nop

c00135f4 <File::exists()>:
c00135f4:	83 ec 0c             	sub    esp,0xc
c00135f7:	31 c0                	xor    eax,eax
c00135f9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135fd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013604:	80 f9 19             	cmp    cl,0x19
c0013607:	77 24                	ja     c001362d <File::exists()+0x39>
c0013609:	8b 0c 8d 40 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd12c0]
c0013610:	85 c9                	test   ecx,ecx
c0013612:	74 19                	je     c001362d <File::exists()+0x39>
c0013614:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001361a:	85 c9                	test   ecx,ecx
c001361c:	74 0f                	je     c001362d <File::exists()+0x39>
c001361e:	83 c2 0d             	add    edx,0xd
c0013621:	50                   	push   eax
c0013622:	50                   	push   eax
c0013623:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013625:	52                   	push   edx
c0013626:	51                   	push   ecx
c0013627:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001362a:	83 c4 10             	add    esp,0x10
c001362d:	83 c4 0c             	add    esp,0xc
c0013630:	c3                   	ret    
c0013631:	90                   	nop

c0013632 <File::stat(unsigned long long*, bool*)>:
c0013632:	56                   	push   esi
c0013633:	53                   	push   ebx
c0013634:	50                   	push   eax
c0013635:	b8 0b 00 00 00       	mov    eax,0xb
c001363a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001363e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013642:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013649:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001364d:	80 f9 19             	cmp    cl,0x19
c0013650:	77 3d                	ja     c001368f <File::stat(unsigned long long*, bool*)+0x5d>
c0013652:	8b 0c 8d 40 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd12c0]
c0013659:	85 c9                	test   ecx,ecx
c001365b:	74 32                	je     c001368f <File::stat(unsigned long long*, bool*)+0x5d>
c001365d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013663:	85 c9                	test   ecx,ecx
c0013665:	74 28                	je     c001368f <File::stat(unsigned long long*, bool*)+0x5d>
c0013667:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013669:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001366d:	74 13                	je     c0013682 <File::stat(unsigned long long*, bool*)+0x50>
c001366f:	83 ec 04             	sub    esp,0x4
c0013672:	56                   	push   esi
c0013673:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013679:	51                   	push   ecx
c001367a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001367d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013680:	eb 0a                	jmp    c001368c <File::stat(unsigned long long*, bool*)+0x5a>
c0013682:	53                   	push   ebx
c0013683:	83 c2 0d             	add    edx,0xd
c0013686:	56                   	push   esi
c0013687:	52                   	push   edx
c0013688:	51                   	push   ecx
c0013689:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001368c:	83 c4 10             	add    esp,0x10
c001368f:	5a                   	pop    edx
c0013690:	5b                   	pop    ebx
c0013691:	5e                   	pop    esi
c0013692:	c3                   	ret    

c0013693 <Fs::setcwd(Process*, char*)>:
c0013693:	55                   	push   ebp
c0013694:	57                   	push   edi
c0013695:	56                   	push   esi
c0013696:	53                   	push   ebx
c0013697:	81 ec 20 02 00 00    	sub    esp,0x220
c001369d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00136a4:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00136aa:	57                   	push   edi
c00136ab:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00136b2:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00136b6:	56                   	push   esi
c00136b7:	e8 bc fa ff ff       	call   c0013178 <Fs::standardiseFiles(char*, char const*, char const*)>
c00136bc:	89 34 24             	mov    DWORD PTR [esp],esi
c00136bf:	e8 d8 d0 fe ff       	call   c000079c <strlen>
c00136c4:	83 c4 10             	add    esp,0x10
c00136c7:	83 f8 02             	cmp    eax,0x2
c00136ca:	77 17                	ja     c00136e3 <Fs::setcwd(Process*, char*)+0x50>
c00136cc:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00136d1:	83 e8 41             	sub    eax,0x41
c00136d4:	83 f8 19             	cmp    eax,0x19
c00136d7:	76 24                	jbe    c00136fd <Fs::setcwd(Process*, char*)+0x6a>
c00136d9:	b8 03 00 00 00       	mov    eax,0x3
c00136de:	e9 e0 00 00 00       	jmp    c00137c3 <Fs::setcwd(Process*, char*)+0x130>
c00136e3:	83 ec 0c             	sub    esp,0xc
c00136e6:	56                   	push   esi
c00136e7:	e8 b0 d0 fe ff       	call   c000079c <strlen>
c00136ec:	83 c4 10             	add    esp,0x10
c00136ef:	83 f8 03             	cmp    eax,0x3
c00136f2:	75 34                	jne    c0013728 <Fs::setcwd(Process*, char*)+0x95>
c00136f4:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00136f9:	75 2d                	jne    c0013728 <Fs::setcwd(Process*, char*)+0x95>
c00136fb:	eb cf                	jmp    c00136cc <Fs::setcwd(Process*, char*)+0x39>
c00136fd:	8b 14 85 40 ed 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd12c0]
c0013704:	b8 05 00 00 00       	mov    eax,0x5
c0013709:	85 d2                	test   edx,edx
c001370b:	0f 84 b2 00 00 00    	je     c00137c3 <Fs::setcwd(Process*, char*)+0x130>
c0013711:	b8 06 00 00 00       	mov    eax,0x6
c0013716:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001371d:	0f 85 92 00 00 00    	jne    c00137b5 <Fs::setcwd(Process*, char*)+0x122>
c0013723:	e9 9b 00 00 00       	jmp    c00137c3 <Fs::setcwd(Process*, char*)+0x130>
c0013728:	83 ec 0c             	sub    esp,0xc
c001372b:	68 14 01 00 00       	push   0x114
c0013730:	e8 16 c1 ff ff       	call   c000f84b <malloc>
c0013735:	83 c4 0c             	add    esp,0xc
c0013738:	89 c3                	mov    ebx,eax
c001373a:	55                   	push   ebp
c001373b:	56                   	push   esi
c001373c:	50                   	push   eax
c001373d:	e8 e0 fb ff ff       	call   c0013322 <File::File(char const*, Process*)>
c0013742:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013747:	83 c4 0c             	add    esp,0xc
c001374a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001374e:	50                   	push   eax
c001374f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013753:	50                   	push   eax
c0013754:	53                   	push   ebx
c0013755:	e8 d8 fe ff ff       	call   c0013632 <File::stat(unsigned long long*, bool*)>
c001375a:	83 c4 10             	add    esp,0x10
c001375d:	83 f8 02             	cmp    eax,0x2
c0013760:	74 04                	je     c0013766 <Fs::setcwd(Process*, char*)+0xd3>
c0013762:	85 c0                	test   eax,eax
c0013764:	74 1c                	je     c0013782 <Fs::setcwd(Process*, char*)+0xef>
c0013766:	b8 01 00 00 00       	mov    eax,0x1
c001376b:	85 db                	test   ebx,ebx
c001376d:	74 54                	je     c00137c3 <Fs::setcwd(Process*, char*)+0x130>
c001376f:	83 ec 0c             	sub    esp,0xc
c0013772:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013774:	53                   	push   ebx
c0013775:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013778:	83 c4 10             	add    esp,0x10
c001377b:	b8 01 00 00 00       	mov    eax,0x1
c0013780:	eb 41                	jmp    c00137c3 <Fs::setcwd(Process*, char*)+0x130>
c0013782:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013787:	75 1c                	jne    c00137a5 <Fs::setcwd(Process*, char*)+0x112>
c0013789:	b8 02 00 00 00       	mov    eax,0x2
c001378e:	85 db                	test   ebx,ebx
c0013790:	74 31                	je     c00137c3 <Fs::setcwd(Process*, char*)+0x130>
c0013792:	83 ec 0c             	sub    esp,0xc
c0013795:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013797:	53                   	push   ebx
c0013798:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001379b:	83 c4 10             	add    esp,0x10
c001379e:	b8 02 00 00 00       	mov    eax,0x2
c00137a3:	eb 1e                	jmp    c00137c3 <Fs::setcwd(Process*, char*)+0x130>
c00137a5:	85 db                	test   ebx,ebx
c00137a7:	74 0c                	je     c00137b5 <Fs::setcwd(Process*, char*)+0x122>
c00137a9:	83 ec 0c             	sub    esp,0xc
c00137ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137ae:	53                   	push   ebx
c00137af:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137b2:	83 c4 10             	add    esp,0x10
c00137b5:	50                   	push   eax
c00137b6:	50                   	push   eax
c00137b7:	56                   	push   esi
c00137b8:	57                   	push   edi
c00137b9:	e8 7e d0 fe ff       	call   c000083c <strcpy>
c00137be:	83 c4 10             	add    esp,0x10
c00137c1:	31 c0                	xor    eax,eax
c00137c3:	81 c4 1c 02 00 00    	add    esp,0x21c
c00137c9:	5b                   	pop    ebx
c00137ca:	5e                   	pop    esi
c00137cb:	5f                   	pop    edi
c00137cc:	5d                   	pop    ebp
c00137cd:	c3                   	ret    

c00137ce <Directory::Directory(char const*, Process*)>:
c00137ce:	83 ec 0c             	sub    esp,0xc
c00137d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d5:	83 ec 08             	sub    esp,0x8
c00137d8:	6a 00                	push   0x0
c00137da:	50                   	push   eax
c00137db:	e8 cc dd ff ff       	call   c00115ac <UnixFile::UnixFile(int)>
c00137e0:	83 c4 10             	add    esp,0x10
c00137e3:	ba 20 ad 02 c0       	mov    edx,0xc002ad20
c00137e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ec:	89 10                	mov    DWORD PTR [eax],edx
c00137ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137f2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00137f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137fc:	83 c0 0d             	add    eax,0xd
c00137ff:	83 ec 04             	sub    esp,0x4
c0013802:	52                   	push   edx
c0013803:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013807:	50                   	push   eax
c0013808:	e8 6b f9 ff ff       	call   c0013178 <Fs::standardiseFiles(char*, char const*, char const*)>
c001380d:	83 c4 10             	add    esp,0x10
c0013810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013814:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013817:	8d 50 bf             	lea    edx,[eax-0x41]
c001381a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001381e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013828:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001382c:	90                   	nop
c001382d:	83 c4 0c             	add    esp,0xc
c0013830:	c3                   	ret    
c0013831:	90                   	nop

c0013832 <Directory::open()>:
c0013832:	53                   	push   ebx
c0013833:	b8 0b 00 00 00       	mov    eax,0xb
c0013838:	83 ec 08             	sub    esp,0x8
c001383b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001383f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013846:	80 fa 19             	cmp    dl,0x19
c0013849:	77 3d                	ja     c0013888 <Directory::open()+0x56>
c001384b:	8b 14 95 40 ed 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd12c0]
c0013852:	85 d2                	test   edx,edx
c0013854:	74 32                	je     c0013888 <Directory::open()+0x56>
c0013856:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001385c:	85 d2                	test   edx,edx
c001385e:	74 28                	je     c0013888 <Directory::open()+0x56>
c0013860:	b8 06 00 00 00       	mov    eax,0x6
c0013865:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013869:	75 1d                	jne    c0013888 <Directory::open()+0x56>
c001386b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013871:	50                   	push   eax
c0013872:	8b 02                	mov    eax,DWORD PTR [edx]
c0013874:	51                   	push   ecx
c0013875:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013878:	51                   	push   ecx
c0013879:	52                   	push   edx
c001387a:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001387d:	83 c4 10             	add    esp,0x10
c0013880:	85 c0                	test   eax,eax
c0013882:	75 04                	jne    c0013888 <Directory::open()+0x56>
c0013884:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013888:	83 c4 08             	add    esp,0x8
c001388b:	5b                   	pop    ebx
c001388c:	c3                   	ret    
c001388d:	90                   	nop

c001388e <Directory::close()>:
c001388e:	53                   	push   ebx
c001388f:	b8 0b 00 00 00       	mov    eax,0xb
c0013894:	83 ec 08             	sub    esp,0x8
c0013897:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001389b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00138a2:	80 fa 19             	cmp    dl,0x19
c00138a5:	77 41                	ja     c00138e8 <Directory::close()+0x5a>
c00138a7:	8b 1c 95 40 ed 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd12c0]
c00138ae:	85 db                	test   ebx,ebx
c00138b0:	74 36                	je     c00138e8 <Directory::close()+0x5a>
c00138b2:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00138b9:	74 2d                	je     c00138e8 <Directory::close()+0x5a>
c00138bb:	b8 05 00 00 00       	mov    eax,0x5
c00138c0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00138c4:	74 22                	je     c00138e8 <Directory::close()+0x5a>
c00138c6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00138ca:	8b 04 95 40 ed 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd12c0]
c00138d1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00138d7:	53                   	push   ebx
c00138d8:	53                   	push   ebx
c00138d9:	8b 10                	mov    edx,DWORD PTR [eax]
c00138db:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00138e1:	50                   	push   eax
c00138e2:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00138e5:	83 c4 10             	add    esp,0x10
c00138e8:	83 c4 08             	add    esp,0x8
c00138eb:	5b                   	pop    ebx
c00138ec:	c3                   	ret    
c00138ed:	90                   	nop

c00138ee <Directory::unlink()>:
c00138ee:	83 ec 0c             	sub    esp,0xc
c00138f1:	b8 0b 00 00 00       	mov    eax,0xb
c00138f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013901:	80 f9 19             	cmp    cl,0x19
c0013904:	77 2f                	ja     c0013935 <Directory::unlink()+0x47>
c0013906:	8b 0c 8d 40 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd12c0]
c001390d:	85 c9                	test   ecx,ecx
c001390f:	74 24                	je     c0013935 <Directory::unlink()+0x47>
c0013911:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013917:	85 c9                	test   ecx,ecx
c0013919:	74 1a                	je     c0013935 <Directory::unlink()+0x47>
c001391b:	b8 06 00 00 00       	mov    eax,0x6
c0013920:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013924:	75 0f                	jne    c0013935 <Directory::unlink()+0x47>
c0013926:	83 c2 0d             	add    edx,0xd
c0013929:	50                   	push   eax
c001392a:	50                   	push   eax
c001392b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001392d:	52                   	push   edx
c001392e:	51                   	push   ecx
c001392f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013932:	83 c4 10             	add    esp,0x10
c0013935:	83 c4 0c             	add    esp,0xc
c0013938:	c3                   	ret    
c0013939:	90                   	nop

c001393a <Directory::rename(char const*)>:
c001393a:	83 ec 0c             	sub    esp,0xc
c001393d:	b8 0b 00 00 00       	mov    eax,0xb
c0013942:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013946:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001394d:	80 f9 19             	cmp    cl,0x19
c0013950:	77 32                	ja     c0013984 <Directory::rename(char const*)+0x4a>
c0013952:	8b 0c 8d 40 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd12c0]
c0013959:	85 c9                	test   ecx,ecx
c001395b:	74 27                	je     c0013984 <Directory::rename(char const*)+0x4a>
c001395d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013963:	85 c9                	test   ecx,ecx
c0013965:	74 1d                	je     c0013984 <Directory::rename(char const*)+0x4a>
c0013967:	b8 06 00 00 00       	mov    eax,0x6
c001396c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013970:	75 12                	jne    c0013984 <Directory::rename(char const*)+0x4a>
c0013972:	83 c2 0d             	add    edx,0xd
c0013975:	50                   	push   eax
c0013976:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013978:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001397c:	52                   	push   edx
c001397d:	51                   	push   ecx
c001397e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013981:	83 c4 10             	add    esp,0x10
c0013984:	83 c4 0c             	add    esp,0xc
c0013987:	c3                   	ret    

c0013988 <Directory::exists()>:
c0013988:	83 ec 0c             	sub    esp,0xc
c001398b:	31 c0                	xor    eax,eax
c001398d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013991:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013998:	80 f9 19             	cmp    cl,0x19
c001399b:	77 24                	ja     c00139c1 <Directory::exists()+0x39>
c001399d:	8b 0c 8d 40 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd12c0]
c00139a4:	85 c9                	test   ecx,ecx
c00139a6:	74 19                	je     c00139c1 <Directory::exists()+0x39>
c00139a8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00139ae:	85 c9                	test   ecx,ecx
c00139b0:	74 0f                	je     c00139c1 <Directory::exists()+0x39>
c00139b2:	83 c2 0d             	add    edx,0xd
c00139b5:	50                   	push   eax
c00139b6:	50                   	push   eax
c00139b7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139b9:	52                   	push   edx
c00139ba:	51                   	push   ecx
c00139bb:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00139be:	83 c4 10             	add    esp,0x10
c00139c1:	83 c4 0c             	add    esp,0xc
c00139c4:	c3                   	ret    
c00139c5:	90                   	nop

c00139c6 <Directory::read(dirent*)>:
c00139c6:	83 ec 1c             	sub    esp,0x1c
c00139c9:	b8 0b 00 00 00       	mov    eax,0xb
c00139ce:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00139d2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00139d9:	80 fa 19             	cmp    dl,0x19
c00139dc:	77 30                	ja     c0013a0e <Directory::read(dirent*)+0x48>
c00139de:	8b 14 95 40 ed 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd12c0]
c00139e5:	85 d2                	test   edx,edx
c00139e7:	74 25                	je     c0013a0e <Directory::read(dirent*)+0x48>
c00139e9:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00139f0:	74 1c                	je     c0013a0e <Directory::read(dirent*)+0x48>
c00139f2:	83 ec 0c             	sub    esp,0xc
c00139f5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139f7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00139fb:	52                   	push   edx
c00139fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013a00:	6a 00                	push   0x0
c0013a02:	68 10 01 00 00       	push   0x110
c0013a07:	51                   	push   ecx
c0013a08:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013a0b:	83 c4 20             	add    esp,0x20
c0013a0e:	83 c4 1c             	add    esp,0x1c
c0013a11:	c3                   	ret    

c0013a12 <Directory::create()>:
c0013a12:	83 ec 0c             	sub    esp,0xc
c0013a15:	b8 0b 00 00 00       	mov    eax,0xb
c0013a1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a1e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a25:	80 f9 19             	cmp    cl,0x19
c0013a28:	77 2f                	ja     c0013a59 <Directory::create()+0x47>
c0013a2a:	8b 0c 8d 40 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd12c0]
c0013a31:	85 c9                	test   ecx,ecx
c0013a33:	74 24                	je     c0013a59 <Directory::create()+0x47>
c0013a35:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a3b:	85 c9                	test   ecx,ecx
c0013a3d:	74 1a                	je     c0013a59 <Directory::create()+0x47>
c0013a3f:	b8 06 00 00 00       	mov    eax,0x6
c0013a44:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a48:	75 0f                	jne    c0013a59 <Directory::create()+0x47>
c0013a4a:	83 c2 0d             	add    edx,0xd
c0013a4d:	50                   	push   eax
c0013a4e:	50                   	push   eax
c0013a4f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a51:	52                   	push   edx
c0013a52:	51                   	push   ecx
c0013a53:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013a56:	83 c4 10             	add    esp,0x10
c0013a59:	83 c4 0c             	add    esp,0xc
c0013a5c:	c3                   	ret    
c0013a5d:	90                   	nop

c0013a5e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013a5e:	b8 0a 00 00 00       	mov    eax,0xa
c0013a63:	c3                   	ret    

c0013a64 <Bus::Bus(char const*)>:
c0013a64:	83 ec 0c             	sub    esp,0xc
c0013a67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a6b:	83 ec 08             	sub    esp,0x8
c0013a6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a72:	50                   	push   eax
c0013a73:	e8 68 09 00 00       	call   c00143e0 <Device::Device(char const*)>
c0013a78:	83 c4 10             	add    esp,0x10
c0013a7b:	ba 3c ad 02 c0       	mov    edx,0xc002ad3c
c0013a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a84:	89 10                	mov    DWORD PTR [eax],edx
c0013a86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a8a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013a94:	90                   	nop
c0013a95:	83 c4 0c             	add    esp,0xc
c0013a98:	c3                   	ret    
c0013a99:	90                   	nop

c0013a9a <Bus::~Bus()>:
c0013a9a:	83 ec 0c             	sub    esp,0xc
c0013a9d:	ba 3c ad 02 c0       	mov    edx,0xc002ad3c
c0013aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aa6:	89 10                	mov    DWORD PTR [eax],edx
c0013aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aac:	83 ec 0c             	sub    esp,0xc
c0013aaf:	50                   	push   eax
c0013ab0:	e8 0d 06 00 00       	call   c00140c2 <Device::~Device()>
c0013ab5:	83 c4 10             	add    esp,0x10
c0013ab8:	90                   	nop
c0013ab9:	83 c4 0c             	add    esp,0xc
c0013abc:	c3                   	ret    
c0013abd:	90                   	nop

c0013abe <Bus::~Bus()>:
c0013abe:	83 ec 0c             	sub    esp,0xc
c0013ac1:	83 ec 0c             	sub    esp,0xc
c0013ac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ac8:	e8 cd ff ff ff       	call   c0013a9a <Bus::~Bus()>
c0013acd:	83 c4 10             	add    esp,0x10
c0013ad0:	83 ec 08             	sub    esp,0x8
c0013ad3:	68 58 01 00 00       	push   0x158
c0013ad8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013adc:	e8 02 f2 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0013ae1:	83 c4 10             	add    esp,0x10
c0013ae4:	83 c4 0c             	add    esp,0xc
c0013ae7:	c3                   	ret    

c0013ae8 <Buzzer::Buzzer(char const*)>:
c0013ae8:	83 ec 0c             	sub    esp,0xc
c0013aeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aef:	83 ec 08             	sub    esp,0x8
c0013af2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013af6:	50                   	push   eax
c0013af7:	e8 e4 08 00 00       	call   c00143e0 <Device::Device(char const*)>
c0013afc:	83 c4 10             	add    esp,0x10
c0013aff:	ba 68 ad 02 c0       	mov    edx,0xc002ad68
c0013b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b08:	89 10                	mov    DWORD PTR [eax],edx
c0013b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b0e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013b18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b1c:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013b26:	90                   	nop
c0013b27:	83 c4 0c             	add    esp,0xc
c0013b2a:	c3                   	ret    
c0013b2b:	90                   	nop

c0013b2c <Buzzer::~Buzzer()>:
c0013b2c:	83 ec 0c             	sub    esp,0xc
c0013b2f:	ba 68 ad 02 c0       	mov    edx,0xc002ad68
c0013b34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b38:	89 10                	mov    DWORD PTR [eax],edx
c0013b3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b3e:	83 ec 0c             	sub    esp,0xc
c0013b41:	50                   	push   eax
c0013b42:	e8 7b 05 00 00       	call   c00140c2 <Device::~Device()>
c0013b47:	83 c4 10             	add    esp,0x10
c0013b4a:	90                   	nop
c0013b4b:	83 c4 0c             	add    esp,0xc
c0013b4e:	c3                   	ret    
c0013b4f:	90                   	nop

c0013b50 <Buzzer::~Buzzer()>:
c0013b50:	83 ec 0c             	sub    esp,0xc
c0013b53:	83 ec 0c             	sub    esp,0xc
c0013b56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b5a:	e8 cd ff ff ff       	call   c0013b2c <Buzzer::~Buzzer()>
c0013b5f:	83 c4 10             	add    esp,0x10
c0013b62:	83 ec 08             	sub    esp,0x8
c0013b65:	68 5c 01 00 00       	push   0x15c
c0013b6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b6e:	e8 70 f1 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0013b73:	83 c4 10             	add    esp,0x10
c0013b76:	83 c4 0c             	add    esp,0xc
c0013b79:	c3                   	ret    

c0013b7a <Buzzer::stop()>:
c0013b7a:	83 ec 14             	sub    esp,0x14
c0013b7d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b81:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b83:	6a 00                	push   0x0
c0013b85:	50                   	push   eax
c0013b86:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013b89:	83 c4 1c             	add    esp,0x1c
c0013b8c:	c3                   	ret    

c0013b8d <beepThread(void*)>:
c0013b8d:	53                   	push   ebx
c0013b8e:	83 ec 08             	sub    esp,0x8
c0013b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013b95:	e8 94 a2 00 00       	call   c001de2e <unlockScheduler()>
c0013b9a:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013b9f:	52                   	push   edx
c0013ba0:	52                   	push   edx
c0013ba1:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013ba7:	52                   	push   edx
c0013ba8:	50                   	push   eax
c0013ba9:	e8 08 a8 00 00       	call   c001e3b6 <nanoSleep(unsigned long long)>
c0013bae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013bb1:	e8 c4 ff ff ff       	call   c0013b7a <Buzzer::stop()>
c0013bb6:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013bbe:	83 c4 18             	add    esp,0x18
c0013bc1:	5b                   	pop    ebx
c0013bc2:	e9 35 a7 00 00       	jmp    c001e2fc <blockTask(TaskState)>
c0013bc7:	90                   	nop

c0013bc8 <Buzzer::beep(int, int, bool)>:
c0013bc8:	57                   	push   edi
c0013bc9:	56                   	push   esi
c0013bca:	53                   	push   ebx
c0013bcb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013bcf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013bd3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013bd7:	52                   	push   edx
c0013bd8:	52                   	push   edx
c0013bd9:	8b 06                	mov    eax,DWORD PTR [esi]
c0013bdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bdf:	56                   	push   esi
c0013be0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013be3:	83 c4 10             	add    esp,0x10
c0013be6:	89 f8                	mov    eax,edi
c0013be8:	84 c0                	test   al,al
c0013bea:	74 1f                	je     c0013c0b <Buzzer::beep(int, int, bool)+0x43>
c0013bec:	50                   	push   eax
c0013bed:	50                   	push   eax
c0013bee:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013bf4:	99                   	cdq    
c0013bf5:	52                   	push   edx
c0013bf6:	50                   	push   eax
c0013bf7:	e8 ba a7 00 00       	call   c001e3b6 <nanoSleep(unsigned long long)>
c0013bfc:	83 c4 10             	add    esp,0x10
c0013bff:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013c03:	5b                   	pop    ebx
c0013c04:	5e                   	pop    esi
c0013c05:	5f                   	pop    edi
c0013c06:	e9 6f ff ff ff       	jmp    c0013b7a <Buzzer::stop()>
c0013c0b:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013c11:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0013c16:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013c1e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013c22:	c7 44 24 14 8d 3b 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013b8d
c0013c2a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013c2e:	5b                   	pop    ebx
c0013c2f:	5e                   	pop    esi
c0013c30:	5f                   	pop    edi
c0013c31:	e9 28 a3 00 00       	jmp    c001df5e <Process::createThread(void (*)(void*), void*, int)>

c0013c36 <User::loadClockSettings(int)>:
c0013c36:	53                   	push   ebx
c0013c37:	83 ec 14             	sub    esp,0x14
c0013c3a:	68 14 01 00 00       	push   0x114
c0013c3f:	e8 07 bc ff ff       	call   c000f84b <malloc>
c0013c44:	83 c4 0c             	add    esp,0xc
c0013c47:	89 c3                	mov    ebx,eax
c0013c49:	ff 35 94 1c 03 c0    	push   DWORD PTR ds:0xc0031c94
c0013c4f:	68 90 ad 02 c0       	push   0xc002ad90
c0013c54:	50                   	push   eax
c0013c55:	e8 c8 f6 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c0013c5a:	58                   	pop    eax
c0013c5b:	5a                   	pop    edx
c0013c5c:	6a 01                	push   0x1
c0013c5e:	53                   	push   ebx
c0013c5f:	e8 22 f7 ff ff       	call   c0013386 <File::open(FileOpenMode)>
c0013c64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c67:	e8 78 f7 ff ff       	call   c00133e4 <File::close()>
c0013c6c:	83 c4 10             	add    esp,0x10
c0013c6f:	85 db                	test   ebx,ebx
c0013c71:	74 0f                	je     c0013c82 <User::loadClockSettings(int)+0x4c>
c0013c73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c75:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013c79:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013c7c:	83 c4 08             	add    esp,0x8
c0013c7f:	5b                   	pop    ebx
c0013c80:	ff e0                	jmp    eax
c0013c82:	83 c4 08             	add    esp,0x8
c0013c85:	5b                   	pop    ebx
c0013c86:	c3                   	ret    
c0013c87:	90                   	nop

c0013c88 <Clock::Clock(char const*)>:
c0013c88:	83 ec 0c             	sub    esp,0xc
c0013c8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c8f:	83 ec 08             	sub    esp,0x8
c0013c92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c96:	50                   	push   eax
c0013c97:	e8 44 07 00 00       	call   c00143e0 <Device::Device(char const*)>
c0013c9c:	83 c4 10             	add    esp,0x10
c0013c9f:	ba b8 ad 02 c0       	mov    edx,0xc002adb8
c0013ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ca8:	89 10                	mov    DWORD PTR [eax],edx
c0013caa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cae:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013cb8:	90                   	nop
c0013cb9:	83 c4 0c             	add    esp,0xc
c0013cbc:	c3                   	ret    
c0013cbd:	90                   	nop

c0013cbe <Clock::~Clock()>:
c0013cbe:	83 ec 0c             	sub    esp,0xc
c0013cc1:	ba b8 ad 02 c0       	mov    edx,0xc002adb8
c0013cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cca:	89 10                	mov    DWORD PTR [eax],edx
c0013ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cd0:	83 ec 0c             	sub    esp,0xc
c0013cd3:	50                   	push   eax
c0013cd4:	e8 e9 03 00 00       	call   c00140c2 <Device::~Device()>
c0013cd9:	83 c4 10             	add    esp,0x10
c0013cdc:	90                   	nop
c0013cdd:	83 c4 0c             	add    esp,0xc
c0013ce0:	c3                   	ret    
c0013ce1:	90                   	nop

c0013ce2 <Clock::~Clock()>:
c0013ce2:	83 ec 0c             	sub    esp,0xc
c0013ce5:	83 ec 0c             	sub    esp,0xc
c0013ce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cec:	e8 cd ff ff ff       	call   c0013cbe <Clock::~Clock()>
c0013cf1:	83 c4 10             	add    esp,0x10
c0013cf4:	83 ec 08             	sub    esp,0x8
c0013cf7:	68 58 01 00 00       	push   0x158
c0013cfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d00:	e8 de ef ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0013d05:	83 c4 10             	add    esp,0x10
c0013d08:	83 c4 0c             	add    esp,0xc
c0013d0b:	c3                   	ret    

c0013d0c <Clock::timeInSecondsLocal()>:
c0013d0c:	53                   	push   ebx
c0013d0d:	83 ec 14             	sub    esp,0x14
c0013d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d14:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d16:	50                   	push   eax
c0013d17:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013d1a:	0f b6 0d bc e8 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e8bc
c0013d21:	03 0d c0 e8 02 c0    	add    ecx,DWORD PTR ds:0xc002e8c0
c0013d27:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013d2d:	89 cb                	mov    ebx,ecx
c0013d2f:	c1 fb 1f             	sar    ebx,0x1f
c0013d32:	01 c8                	add    eax,ecx
c0013d34:	11 da                	adc    edx,ebx
c0013d36:	83 c4 10             	add    esp,0x10
c0013d39:	31 c9                	xor    ecx,ecx
c0013d3b:	80 3d bd e8 02 c0 00 	cmp    BYTE PTR ds:0xc002e8bd,0x0
c0013d42:	74 05                	je     c0013d49 <Clock::timeInSecondsLocal()+0x3d>
c0013d44:	b9 08 07 00 00       	mov    ecx,0x708
c0013d49:	31 db                	xor    ebx,ebx
c0013d4b:	01 c8                	add    eax,ecx
c0013d4d:	11 da                	adc    edx,ebx
c0013d4f:	83 c4 08             	add    esp,0x8
c0013d52:	5b                   	pop    ebx
c0013d53:	c3                   	ret    

c0013d54 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013d54:	57                   	push   edi
c0013d55:	56                   	push   esi
c0013d56:	53                   	push   ebx
c0013d57:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013d5b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d5f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013d61:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d65:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013d68:	0f b6 05 bc e8 02 c0 	movzx  eax,BYTE PTR ds:0xc002e8bc
c0013d6f:	03 05 c0 e8 02 c0    	add    eax,DWORD PTR ds:0xc002e8c0
c0013d75:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013d7b:	99                   	cdq    
c0013d7c:	29 c6                	sub    esi,eax
c0013d7e:	19 d7                	sbb    edi,edx
c0013d80:	89 f0                	mov    eax,esi
c0013d82:	89 fa                	mov    edx,edi
c0013d84:	31 f6                	xor    esi,esi
c0013d86:	80 3d bd e8 02 c0 00 	cmp    BYTE PTR ds:0xc002e8bd,0x0
c0013d8d:	74 05                	je     c0013d94 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013d8f:	be 08 07 00 00       	mov    esi,0x708
c0013d94:	31 ff                	xor    edi,edi
c0013d96:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013d9a:	29 f0                	sub    eax,esi
c0013d9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013da0:	19 fa                	sbb    edx,edi
c0013da2:	89 d8                	mov    eax,ebx
c0013da4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013da8:	5b                   	pop    ebx
c0013da9:	5e                   	pop    esi
c0013daa:	5f                   	pop    edi
c0013dab:	ff e0                	jmp    eax

c0013dad <datetimeToSeconds(datetime_t)>:
c0013dad:	55                   	push   ebp
c0013dae:	57                   	push   edi
c0013daf:	56                   	push   esi
c0013db0:	53                   	push   ebx
c0013db1:	83 ec 14             	sub    esp,0x14
c0013db4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013db8:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013dbc:	89 d3                	mov    ebx,edx
c0013dbe:	0f b6 c6             	movzx  eax,dh
c0013dc1:	c1 eb 10             	shr    ebx,0x10
c0013dc4:	48                   	dec    eax
c0013dc5:	66 81 eb 6c 07       	sub    bx,0x76c
c0013dca:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013dce:	0f b6 f5             	movzx  esi,ch
c0013dd1:	89 cf                	mov    edi,ecx
c0013dd3:	6b f6 3c             	imul   esi,esi,0x3c
c0013dd6:	c1 ef 10             	shr    edi,0x10
c0013dd9:	0f b6 c9             	movzx  ecx,cl
c0013ddc:	89 f8                	mov    eax,edi
c0013dde:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013de4:	0f b6 f8             	movzx  edi,al
c0013de7:	0f b6 d2             	movzx  edx,dl
c0013dea:	01 fe                	add    esi,edi
c0013dec:	01 f1                	add    ecx,esi
c0013dee:	0f b7 f3             	movzx  esi,bx
c0013df1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013df5:	c1 f9 1f             	sar    ecx,0x1f
c0013df8:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013dfd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013e01:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013e06:	8b 0c 8d 00 ae 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5200]
c0013e0d:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013e11:	76 29                	jbe    c0013e3c <datetimeToSeconds(datetime_t)+0x8f>
c0013e13:	f6 c3 03             	test   bl,0x3
c0013e16:	75 24                	jne    c0013e3c <datetimeToSeconds(datetime_t)+0x8f>
c0013e18:	31 d2                	xor    edx,edx
c0013e1a:	bf 64 00 00 00       	mov    edi,0x64
c0013e1f:	89 d8                	mov    eax,ebx
c0013e21:	66 f7 f7             	div    di
c0013e24:	66 85 d2             	test   dx,dx
c0013e27:	75 12                	jne    c0013e3b <datetimeToSeconds(datetime_t)+0x8e>
c0013e29:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013e2f:	bf 90 01 00 00       	mov    edi,0x190
c0013e34:	99                   	cdq    
c0013e35:	f7 ff                	idiv   edi
c0013e37:	85 d2                	test   edx,edx
c0013e39:	75 01                	jne    c0013e3c <datetimeToSeconds(datetime_t)+0x8f>
c0013e3b:	41                   	inc    ecx
c0013e3c:	66 83 fb 46          	cmp    bx,0x46
c0013e40:	76 45                	jbe    c0013e87 <datetimeToSeconds(datetime_t)+0xda>
c0013e42:	bb 46 00 00 00       	mov    ebx,0x46
c0013e47:	bf 64 00 00 00       	mov    edi,0x64
c0013e4c:	bd 90 01 00 00       	mov    ebp,0x190
c0013e51:	b8 6d 01 00 00       	mov    eax,0x16d
c0013e56:	f6 c3 03             	test   bl,0x3
c0013e59:	75 23                	jne    c0013e7e <datetimeToSeconds(datetime_t)+0xd1>
c0013e5b:	89 d8                	mov    eax,ebx
c0013e5d:	99                   	cdq    
c0013e5e:	f7 ff                	idiv   edi
c0013e60:	b8 6e 01 00 00       	mov    eax,0x16e
c0013e65:	85 d2                	test   edx,edx
c0013e67:	75 15                	jne    c0013e7e <datetimeToSeconds(datetime_t)+0xd1>
c0013e69:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013e6f:	99                   	cdq    
c0013e70:	f7 fd                	idiv   ebp
c0013e72:	83 fa 01             	cmp    edx,0x1
c0013e75:	19 c0                	sbb    eax,eax
c0013e77:	f7 d0                	not    eax
c0013e79:	05 6e 01 00 00       	add    eax,0x16e
c0013e7e:	01 c1                	add    ecx,eax
c0013e80:	43                   	inc    ebx
c0013e81:	39 f3                	cmp    ebx,esi
c0013e83:	7c cc                	jl     c0013e51 <datetimeToSeconds(datetime_t)+0xa4>
c0013e85:	eb 35                	jmp    c0013ebc <datetimeToSeconds(datetime_t)+0x10f>
c0013e87:	74 33                	je     c0013ebc <datetimeToSeconds(datetime_t)+0x10f>
c0013e89:	b8 45 00 00 00       	mov    eax,0x45
c0013e8e:	89 c2                	mov    edx,eax
c0013e90:	83 e2 03             	and    edx,0x3
c0013e93:	39 f0                	cmp    eax,esi
c0013e95:	7e 0f                	jle    c0013ea6 <datetimeToSeconds(datetime_t)+0xf9>
c0013e97:	83 fa 01             	cmp    edx,0x1
c0013e9a:	19 d2                	sbb    edx,edx
c0013e9c:	48                   	dec    eax
c0013e9d:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013ea4:	eb e8                	jmp    c0013e8e <datetimeToSeconds(datetime_t)+0xe1>
c0013ea6:	b8 6d 01 00 00       	mov    eax,0x16d
c0013eab:	85 d2                	test   edx,edx
c0013ead:	75 0b                	jne    c0013eba <datetimeToSeconds(datetime_t)+0x10d>
c0013eaf:	66 83 fb 01          	cmp    bx,0x1
c0013eb3:	19 c0                	sbb    eax,eax
c0013eb5:	05 6e 01 00 00       	add    eax,0x16e
c0013eba:	29 c1                	sub    ecx,eax
c0013ebc:	b8 80 51 01 00       	mov    eax,0x15180
c0013ec1:	f7 e9                	imul   ecx
c0013ec3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013ec7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013ecb:	83 c4 14             	add    esp,0x14
c0013ece:	5b                   	pop    ebx
c0013ecf:	5e                   	pop    esi
c0013ed0:	5f                   	pop    edi
c0013ed1:	5d                   	pop    ebp
c0013ed2:	c3                   	ret    
c0013ed3:	90                   	nop

c0013ed4 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013ed4:	57                   	push   edi
c0013ed5:	56                   	push   esi
c0013ed6:	53                   	push   ebx
c0013ed7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013edb:	8b 06                	mov    eax,DWORD PTR [esi]
c0013edd:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013ee0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ee4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ee8:	e8 c0 fe ff ff       	call   c0013dad <datetimeToSeconds(datetime_t)>
c0013eed:	59                   	pop    ecx
c0013eee:	0f b6 0d bc e8 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e8bc
c0013ef5:	5b                   	pop    ebx
c0013ef6:	03 0d c0 e8 02 c0    	add    ecx,DWORD PTR ds:0xc002e8c0
c0013efc:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f02:	89 cb                	mov    ebx,ecx
c0013f04:	c1 fb 1f             	sar    ebx,0x1f
c0013f07:	29 c8                	sub    eax,ecx
c0013f09:	19 da                	sbb    edx,ebx
c0013f0b:	31 c9                	xor    ecx,ecx
c0013f0d:	80 3d bd e8 02 c0 00 	cmp    BYTE PTR ds:0xc002e8bd,0x0
c0013f14:	74 05                	je     c0013f1b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013f16:	b9 08 07 00 00       	mov    ecx,0x708
c0013f1b:	31 db                	xor    ebx,ebx
c0013f1d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013f21:	29 c8                	sub    eax,ecx
c0013f23:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f27:	19 da                	sbb    edx,ebx
c0013f29:	89 f8                	mov    eax,edi
c0013f2b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013f2f:	5b                   	pop    ebx
c0013f30:	5e                   	pop    esi
c0013f31:	5f                   	pop    edi
c0013f32:	ff e0                	jmp    eax

c0013f34 <secondsToDatetime(unsigned long long)>:
c0013f34:	55                   	push   ebp
c0013f35:	57                   	push   edi
c0013f36:	56                   	push   esi
c0013f37:	53                   	push   ebx
c0013f38:	83 ec 1c             	sub    esp,0x1c
c0013f3b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013f3f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013f43:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013f47:	6a 00                	push   0x0
c0013f49:	68 80 51 01 00       	push   0x15180
c0013f4e:	55                   	push   ebp
c0013f4f:	57                   	push   edi
c0013f50:	e8 4f 2c 01 00       	call   c0026ba4 <__udivdi3>
c0013f55:	83 c4 10             	add    esp,0x10
c0013f58:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013f5e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013f62:	6a 00                	push   0x0
c0013f64:	68 80 51 01 00       	push   0x15180
c0013f69:	55                   	push   ebp
c0013f6a:	57                   	push   edi
c0013f6b:	bf 10 0e 00 00       	mov    edi,0xe10
c0013f70:	e8 2f 2d 01 00       	call   c0026ca4 <__umoddi3>
c0013f75:	83 c4 10             	add    esp,0x10
c0013f78:	99                   	cdq    
c0013f79:	f7 ff                	idiv   edi
c0013f7b:	bf 3c 00 00 00       	mov    edi,0x3c
c0013f80:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013f83:	89 d0                	mov    eax,edx
c0013f85:	99                   	cdq    
c0013f86:	f7 ff                	idiv   edi
c0013f88:	85 db                	test   ebx,ebx
c0013f8a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013f8d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013f90:	79 11                	jns    c0013fa3 <secondsToDatetime(unsigned long long)+0x6f>
c0013f92:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013f96:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013f9c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013fa1:	eb 07                	jmp    c0013faa <secondsToDatetime(unsigned long long)+0x76>
c0013fa3:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013fa8:	89 d8                	mov    eax,ebx
c0013faa:	bf b4 05 00 00       	mov    edi,0x5b4
c0013faf:	99                   	cdq    
c0013fb0:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013fb5:	f7 f9                	idiv   ecx
c0013fb7:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013fbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013fc0:	31 d2                	xor    edx,edx
c0013fc2:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013fca:	01 c3                	add    ebx,eax
c0013fcc:	89 d8                	mov    eax,ebx
c0013fce:	f7 f1                	div    ecx
c0013fd0:	31 d2                	xor    edx,edx
c0013fd2:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013fd5:	89 d8                	mov    eax,ebx
c0013fd7:	f7 f7                	div    edi
c0013fd9:	31 d2                	xor    edx,edx
c0013fdb:	29 c1                	sub    ecx,eax
c0013fdd:	89 d8                	mov    eax,ebx
c0013fdf:	f7 f5                	div    ebp
c0013fe1:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013fe6:	29 c1                	sub    ecx,eax
c0013fe8:	31 d2                	xor    edx,edx
c0013fea:	89 c8                	mov    eax,ecx
c0013fec:	f7 f5                	div    ebp
c0013fee:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013ff3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ff7:	31 d2                	xor    edx,edx
c0013ff9:	89 c8                	mov    eax,ecx
c0013ffb:	f7 f5                	div    ebp
c0013ffd:	31 d2                	xor    edx,edx
c0013fff:	01 c3                	add    ebx,eax
c0014001:	89 c8                	mov    eax,ecx
c0014003:	f7 f7                	div    edi
c0014005:	bf 99 00 00 00       	mov    edi,0x99
c001400a:	29 c3                	sub    ebx,eax
c001400c:	31 d2                	xor    edx,edx
c001400e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0014016:	29 c3                	sub    ebx,eax
c0014018:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001401b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001401e:	bb 05 00 00 00       	mov    ebx,0x5
c0014023:	83 c1 02             	add    ecx,0x2
c0014026:	89 c8                	mov    eax,ecx
c0014028:	f7 f7                	div    edi
c001402a:	31 d2                	xor    edx,edx
c001402c:	89 c7                	mov    edi,eax
c001402e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0014034:	83 c0 02             	add    eax,0x2
c0014037:	f7 f3                	div    ebx
c0014039:	89 eb                	mov    ebx,ebp
c001403b:	29 c3                	sub    ebx,eax
c001403d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0014043:	88 1e                	mov    BYTE PTR [esi],bl
c0014045:	19 c0                	sbb    eax,eax
c0014047:	31 d2                	xor    edx,edx
c0014049:	83 e0 0c             	and    eax,0xc
c001404c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0014050:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014058:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001405c:	83 f9 01             	cmp    ecx,0x1
c001405f:	0f 96 c2             	setbe  dl
c0014062:	41                   	inc    ecx
c0014063:	01 d0                	add    eax,edx
c0014065:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014068:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001406c:	83 c4 1c             	add    esp,0x1c
c001406f:	89 f0                	mov    eax,esi
c0014071:	5b                   	pop    ebx
c0014072:	5e                   	pop    esi
c0014073:	5f                   	pop    edi
c0014074:	5d                   	pop    ebp
c0014075:	c2 04 00             	ret    0x4

c0014078 <Clock::timeInDatetimeLocal()>:
c0014078:	53                   	push   ebx
c0014079:	83 ec 14             	sub    esp,0x14
c001407c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014080:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014084:	e8 83 fc ff ff       	call   c0013d0c <Clock::timeInSecondsLocal()>
c0014089:	83 c4 0c             	add    esp,0xc
c001408c:	52                   	push   edx
c001408d:	50                   	push   eax
c001408e:	53                   	push   ebx
c001408f:	e8 a0 fe ff ff       	call   c0013f34 <secondsToDatetime(unsigned long long)>
c0014094:	89 d8                	mov    eax,ebx
c0014096:	83 c4 14             	add    esp,0x14
c0014099:	5b                   	pop    ebx
c001409a:	c2 04 00             	ret    0x4
c001409d:	90                   	nop

c001409e <Device::hibernate()>:
c001409e:	c3                   	ret    
c001409f:	90                   	nop

c00140a0 <Device::wake()>:
c00140a0:	c3                   	ret    
c00140a1:	90                   	nop

c00140a2 <Device::detect()>:
c00140a2:	c3                   	ret    
c00140a3:	90                   	nop

c00140a4 <Device::disableLegacy()>:
c00140a4:	c3                   	ret    
c00140a5:	90                   	nop

c00140a6 <Device::powerSaving(PowerSavingLevel)>:
c00140a6:	c3                   	ret    
c00140a7:	90                   	nop

c00140a8 <DriverlessDevice::close(int, int, void*)>:
c00140a8:	31 c0                	xor    eax,eax
c00140aa:	c3                   	ret    
c00140ab:	90                   	nop

c00140ac <DriverlessDevice::detect()>:
c00140ac:	c3                   	ret    
c00140ad:	90                   	nop

c00140ae <DriverlessDevice::open(int, int, void*)>:
c00140ae:	83 ec 18             	sub    esp,0x18
c00140b1:	68 30 ae 02 c0       	push   0xc002ae30
c00140b6:	e8 d4 64 00 00       	call   c001a58f <Krnl::panic(char const*)>
c00140bb:	83 c8 ff             	or     eax,0xffffffff
c00140be:	83 c4 1c             	add    esp,0x1c
c00140c1:	c3                   	ret    

c00140c2 <Device::~Device()>:
c00140c2:	ba 58 ae 02 c0       	mov    edx,0xc002ae58
c00140c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140cb:	89 10                	mov    DWORD PTR [eax],edx
c00140cd:	90                   	nop
c00140ce:	c3                   	ret    
c00140cf:	90                   	nop

c00140d0 <Device::~Device()>:
c00140d0:	83 ec 0c             	sub    esp,0xc
c00140d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00140d7:	e8 e6 ff ff ff       	call   c00140c2 <Device::~Device()>
c00140dc:	83 c4 04             	add    esp,0x4
c00140df:	83 ec 08             	sub    esp,0x8
c00140e2:	68 58 01 00 00       	push   0x158
c00140e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140eb:	e8 f3 eb ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00140f0:	83 c4 10             	add    esp,0x10
c00140f3:	83 c4 0c             	add    esp,0xc
c00140f6:	c3                   	ret    
c00140f7:	90                   	nop

c00140f8 <Device::findAndLoadDriver()>:
c00140f8:	c3                   	ret    
c00140f9:	90                   	nop

c00140fa <Device::preOpenPCI(PCIDeviceInfo)>:
c00140fa:	57                   	push   edi
c00140fb:	b9 09 00 00 00       	mov    ecx,0x9
c0014100:	56                   	push   esi
c0014101:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014105:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014109:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0014113:	81 c7 18 01 00 00    	add    edi,0x118
c0014119:	fc                   	cld    
c001411a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001411c:	5e                   	pop    esi
c001411d:	5f                   	pop    edi
c001411e:	c3                   	ret    
c001411f:	90                   	nop

c0014120 <Device::preOpenACPI(void*, char*, char*)>:
c0014120:	56                   	push   esi
c0014121:	53                   	push   ebx
c0014122:	83 ec 08             	sub    esp,0x8
c0014125:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014129:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001412d:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0014137:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001413b:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0014141:	6a 1e                	push   0x1e
c0014143:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0014149:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001414d:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0014153:	50                   	push   eax
c0014154:	e8 f3 c5 fe ff       	call   c000074c <memcpy>
c0014159:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001415d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014161:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0014169:	83 c4 14             	add    esp,0x14
c001416c:	5b                   	pop    ebx
c001416d:	5e                   	pop    esi
c001416e:	e9 d9 c5 fe ff       	jmp    c000074c <memcpy>
c0014173:	90                   	nop

c0014174 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014174:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014178:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001417d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014184:	75 0b                	jne    c0014191 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014186:	8b 00                	mov    eax,DWORD PTR [eax]
c0014188:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001418c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001418f:	eb 1e                	jmp    c00141af <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0014191:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0014196:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001419c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00141a2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00141a4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00141a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00141ac:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00141af:	ff e0                	jmp    eax
c00141b1:	90                   	nop

c00141b2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00141b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141b6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00141bb:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00141c2:	75 0b                	jne    c00141cf <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00141c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00141c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00141ca:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00141cd:	eb 1e                	jmp    c00141ed <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00141cf:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c00141d4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00141da:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00141e0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00141e2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00141e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00141ea:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00141ed:	ff e0                	jmp    eax
c00141ef:	90                   	nop

c00141f0 <Device::addChild(Device*)>:
c00141f0:	53                   	push   ebx
c00141f1:	83 ec 08             	sub    esp,0x8
c00141f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00141f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00141fc:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014202:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014208:	8b 13                	mov    edx,DWORD PTR [ebx]
c001420a:	85 d2                	test   edx,edx
c001420c:	74 04                	je     c0014212 <Device::addChild(Device*)+0x22>
c001420e:	89 d3                	mov    ebx,edx
c0014210:	eb f6                	jmp    c0014208 <Device::addChild(Device*)+0x18>
c0014212:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014215:	83 ec 0c             	sub    esp,0xc
c0014218:	6a 08                	push   0x8
c001421a:	e8 2c b6 ff ff       	call   c000f84b <malloc>
c001421f:	89 03                	mov    DWORD PTR [ebx],eax
c0014221:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014227:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001422e:	83 c4 18             	add    esp,0x18
c0014231:	5b                   	pop    ebx
c0014232:	c3                   	ret    
c0014233:	90                   	nop

c0014234 <Device::removeAllChildren()>:
c0014234:	56                   	push   esi
c0014235:	53                   	push   ebx
c0014236:	52                   	push   edx
c0014237:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001423b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0014241:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014244:	74 17                	je     c001425d <Device::removeAllChildren()+0x29>
c0014246:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014249:	85 c0                	test   eax,eax
c001424b:	74 0c                	je     c0014259 <Device::removeAllChildren()+0x25>
c001424d:	83 ec 0c             	sub    esp,0xc
c0014250:	8b 10                	mov    edx,DWORD PTR [eax]
c0014252:	50                   	push   eax
c0014253:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014256:	83 c4 10             	add    esp,0x10
c0014259:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001425b:	eb e4                	jmp    c0014241 <Device::removeAllChildren()+0xd>
c001425d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014263:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014269:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001426f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014276:	58                   	pop    eax
c0014277:	5b                   	pop    ebx
c0014278:	5e                   	pop    esi
c0014279:	c3                   	ret    

c001427a <Device::hibernateAll()>:
c001427a:	53                   	push   ebx
c001427b:	83 ec 14             	sub    esp,0x14
c001427e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014282:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014284:	53                   	push   ebx
c0014285:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014288:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001428e:	83 c4 10             	add    esp,0x10
c0014291:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014294:	74 0f                	je     c00142a5 <Device::hibernateAll()+0x2b>
c0014296:	83 ec 0c             	sub    esp,0xc
c0014299:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001429c:	e8 d9 ff ff ff       	call   c001427a <Device::hibernateAll()>
c00142a1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142a3:	eb e9                	jmp    c001428e <Device::hibernateAll()+0x14>
c00142a5:	83 c4 08             	add    esp,0x8
c00142a8:	5b                   	pop    ebx
c00142a9:	c3                   	ret    

c00142aa <Device::wakeAll()>:
c00142aa:	53                   	push   ebx
c00142ab:	83 ec 14             	sub    esp,0x14
c00142ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142b4:	53                   	push   ebx
c00142b5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00142b8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00142be:	83 c4 10             	add    esp,0x10
c00142c1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142c4:	74 0f                	je     c00142d5 <Device::wakeAll()+0x2b>
c00142c6:	83 ec 0c             	sub    esp,0xc
c00142c9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00142cc:	e8 d9 ff ff ff       	call   c00142aa <Device::wakeAll()>
c00142d1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142d3:	eb e9                	jmp    c00142be <Device::wakeAll()+0x14>
c00142d5:	83 c4 08             	add    esp,0x8
c00142d8:	5b                   	pop    ebx
c00142d9:	c3                   	ret    

c00142da <Device::detectAll()>:
c00142da:	53                   	push   ebx
c00142db:	83 ec 14             	sub    esp,0x14
c00142de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142e4:	53                   	push   ebx
c00142e5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00142e8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00142ee:	83 c4 10             	add    esp,0x10
c00142f1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142f4:	74 0f                	je     c0014305 <Device::detectAll()+0x2b>
c00142f6:	83 ec 0c             	sub    esp,0xc
c00142f9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00142fc:	e8 d9 ff ff ff       	call   c00142da <Device::detectAll()>
c0014301:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014303:	eb e9                	jmp    c00142ee <Device::detectAll()+0x14>
c0014305:	83 c4 08             	add    esp,0x8
c0014308:	5b                   	pop    ebx
c0014309:	c3                   	ret    

c001430a <Device::disableLegacyAll()>:
c001430a:	53                   	push   ebx
c001430b:	83 ec 14             	sub    esp,0x14
c001430e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014312:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014314:	53                   	push   ebx
c0014315:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014318:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001431e:	83 c4 10             	add    esp,0x10
c0014321:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014324:	74 0f                	je     c0014335 <Device::disableLegacyAll()+0x2b>
c0014326:	83 ec 0c             	sub    esp,0xc
c0014329:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001432c:	e8 d9 ff ff ff       	call   c001430a <Device::disableLegacyAll()>
c0014331:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014333:	eb e9                	jmp    c001431e <Device::disableLegacyAll()+0x14>
c0014335:	83 c4 08             	add    esp,0x8
c0014338:	5b                   	pop    ebx
c0014339:	c3                   	ret    

c001433a <Device::loadDriversForAll()>:
c001433a:	53                   	push   ebx
c001433b:	83 ec 08             	sub    esp,0x8
c001433e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014342:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014348:	8b 18                	mov    ebx,DWORD PTR [eax]
c001434a:	85 db                	test   ebx,ebx
c001434c:	74 12                	je     c0014360 <Device::loadDriversForAll()+0x26>
c001434e:	83 ec 0c             	sub    esp,0xc
c0014351:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014354:	e8 e1 ff ff ff       	call   c001433a <Device::loadDriversForAll()>
c0014359:	83 c4 10             	add    esp,0x10
c001435c:	89 d8                	mov    eax,ebx
c001435e:	eb e8                	jmp    c0014348 <Device::loadDriversForAll()+0xe>
c0014360:	83 c4 08             	add    esp,0x8
c0014363:	5b                   	pop    ebx
c0014364:	c3                   	ret    
c0014365:	90                   	nop

c0014366 <Device::closeAll()>:
c0014366:	53                   	push   ebx
c0014367:	83 ec 08             	sub    esp,0x8
c001436a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001436e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014370:	6a 00                	push   0x0
c0014372:	6a 00                	push   0x0
c0014374:	6a 00                	push   0x0
c0014376:	53                   	push   ebx
c0014377:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001437a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014380:	83 c4 10             	add    esp,0x10
c0014383:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014386:	74 0f                	je     c0014397 <Device::closeAll()+0x31>
c0014388:	83 ec 0c             	sub    esp,0xc
c001438b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001438e:	e8 d3 ff ff ff       	call   c0014366 <Device::closeAll()>
c0014393:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014395:	eb e9                	jmp    c0014380 <Device::closeAll()+0x1a>
c0014397:	83 c4 08             	add    esp,0x8
c001439a:	5b                   	pop    ebx
c001439b:	c3                   	ret    

c001439c <Device::powerSavingAll(PowerSavingLevel)>:
c001439c:	56                   	push   esi
c001439d:	53                   	push   ebx
c001439e:	83 ec 0c             	sub    esp,0xc
c00143a1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00143a5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00143a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143ab:	56                   	push   esi
c00143ac:	53                   	push   ebx
c00143ad:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00143b0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143b6:	83 c4 10             	add    esp,0x10
c00143b9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143bc:	74 0f                	je     c00143cd <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00143be:	52                   	push   edx
c00143bf:	52                   	push   edx
c00143c0:	56                   	push   esi
c00143c1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143c4:	e8 d3 ff ff ff       	call   c001439c <Device::powerSavingAll(PowerSavingLevel)>
c00143c9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143cb:	eb e9                	jmp    c00143b6 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00143cd:	58                   	pop    eax
c00143ce:	5b                   	pop    ebx
c00143cf:	5e                   	pop    esi
c00143d0:	c3                   	ret    
c00143d1:	90                   	nop

c00143d2 <Device::setName(char const*)>:
c00143d2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00143da:	e9 5d c4 fe ff       	jmp    c000083c <strcpy>
c00143df:	90                   	nop

c00143e0 <Device::Device(char const*)>:
c00143e0:	83 ec 1c             	sub    esp,0x1c
c00143e3:	ba 58 ae 02 c0       	mov    edx,0xc002ae58
c00143e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143ec:	89 10                	mov    DWORD PTR [eax],edx
c00143ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143f2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00143fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014400:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001440a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001440e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014418:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001441c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014426:	83 ec 08             	sub    esp,0x8
c0014429:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001442d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014431:	e8 9c ff ff ff       	call   c00143d2 <Device::setName(char const*)>
c0014436:	83 c4 10             	add    esp,0x10
c0014439:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014441:	83 ec 0c             	sub    esp,0xc
c0014444:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014448:	e8 fe b3 ff ff       	call   c000f84b <malloc>
c001444d:	83 c4 10             	add    esp,0x10
c0014450:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014456:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001445d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014461:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014467:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001446b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014471:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014477:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001447b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014481:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014488:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001448c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0014493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014497:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001449e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144a2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00144ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144b0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00144ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144be:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00144c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144cc:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00144d6:	90                   	nop
c00144d7:	83 c4 1c             	add    esp,0x1c
c00144da:	c3                   	ret    
c00144db:	90                   	nop

c00144dc <Device::getName()>:
c00144dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144e0:	05 d0 00 00 00       	add    eax,0xd0
c00144e5:	c3                   	ret    

c00144e6 <DriverlessDevice::DriverlessDevice(char const*)>:
c00144e6:	83 ec 0c             	sub    esp,0xc
c00144e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144ed:	83 ec 08             	sub    esp,0x8
c00144f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144f4:	50                   	push   eax
c00144f5:	e8 e6 fe ff ff       	call   c00143e0 <Device::Device(char const*)>
c00144fa:	83 c4 10             	add    esp,0x10
c00144fd:	ba 84 ae 02 c0       	mov    edx,0xc002ae84
c0014502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014506:	89 10                	mov    DWORD PTR [eax],edx
c0014508:	90                   	nop
c0014509:	83 c4 0c             	add    esp,0xc
c001450c:	c3                   	ret    
c001450d:	90                   	nop

c001450e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001450e:	57                   	push   edi
c001450f:	56                   	push   esi
c0014510:	53                   	push   ebx
c0014511:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014515:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014519:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001451d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014523:	75 0c                	jne    c0014531 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014525:	52                   	push   edx
c0014526:	52                   	push   edx
c0014527:	53                   	push   ebx
c0014528:	56                   	push   esi
c0014529:	e8 bc 45 01 00       	call   c0028aea <LinkedList<Device>::addElement(Device*)>
c001452e:	83 c4 10             	add    esp,0x10
c0014531:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014537:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001453a:	74 12                	je     c001454e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001453c:	50                   	push   eax
c001453d:	57                   	push   edi
c001453e:	56                   	push   esi
c001453f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014542:	e8 c7 ff ff ff       	call   c001450e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014547:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014549:	83 c4 10             	add    esp,0x10
c001454c:	eb e9                	jmp    c0014537 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001454e:	5b                   	pop    ebx
c001454f:	5e                   	pop    esi
c0014550:	5f                   	pop    edi
c0014551:	c3                   	ret    

c0014552 <getDevicesOfType(DeviceType)>:
c0014552:	53                   	push   ebx
c0014553:	83 ec 14             	sub    esp,0x14
c0014556:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001455a:	53                   	push   ebx
c001455b:	e8 66 46 01 00       	call   c0028bc6 <LinkedList<Device>::LinkedList()>
c0014560:	83 c4 0c             	add    esp,0xc
c0014563:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014567:	53                   	push   ebx
c0014568:	ff 35 28 e7 02 c0    	push   DWORD PTR ds:0xc002e728
c001456e:	e8 9b ff ff ff       	call   c001450e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014573:	89 d8                	mov    eax,ebx
c0014575:	83 c4 18             	add    esp,0x18
c0014578:	5b                   	pop    ebx
c0014579:	c2 04 00             	ret    0x4

c001457c <HardDiskController::HardDiskController(char const*)>:
c001457c:	83 ec 0c             	sub    esp,0xc
c001457f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014583:	83 ec 08             	sub    esp,0x8
c0014586:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001458a:	50                   	push   eax
c001458b:	e8 50 fe ff ff       	call   c00143e0 <Device::Device(char const*)>
c0014590:	83 c4 10             	add    esp,0x10
c0014593:	ba b0 ae 02 c0       	mov    edx,0xc002aeb0
c0014598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001459c:	89 10                	mov    DWORD PTR [eax],edx
c001459e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145a2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00145ac:	90                   	nop
c00145ad:	83 c4 0c             	add    esp,0xc
c00145b0:	c3                   	ret    
c00145b1:	90                   	nop

c00145b2 <HardDiskController::~HardDiskController()>:
c00145b2:	83 ec 0c             	sub    esp,0xc
c00145b5:	ba b0 ae 02 c0       	mov    edx,0xc002aeb0
c00145ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145be:	89 10                	mov    DWORD PTR [eax],edx
c00145c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145c4:	83 ec 0c             	sub    esp,0xc
c00145c7:	50                   	push   eax
c00145c8:	e8 f5 fa ff ff       	call   c00140c2 <Device::~Device()>
c00145cd:	83 c4 10             	add    esp,0x10
c00145d0:	90                   	nop
c00145d1:	83 c4 0c             	add    esp,0xc
c00145d4:	c3                   	ret    
c00145d5:	90                   	nop

c00145d6 <HardDiskController::~HardDiskController()>:
c00145d6:	83 ec 0c             	sub    esp,0xc
c00145d9:	83 ec 0c             	sub    esp,0xc
c00145dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145e0:	e8 cd ff ff ff       	call   c00145b2 <HardDiskController::~HardDiskController()>
c00145e5:	83 c4 10             	add    esp,0x10
c00145e8:	83 ec 08             	sub    esp,0x8
c00145eb:	68 58 01 00 00       	push   0x158
c00145f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145f4:	e8 ea e6 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00145f9:	83 c4 10             	add    esp,0x10
c00145fc:	83 c4 0c             	add    esp,0xc
c00145ff:	c3                   	ret    

c0014600 <PhysicalDisk::eject()>:
c0014600:	83 ec 18             	sub    esp,0x18
c0014603:	68 d4 ae 02 c0       	push   0xc002aed4
c0014608:	e8 b6 e7 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001460d:	83 c8 ff             	or     eax,0xffffffff
c0014610:	83 c4 1c             	add    esp,0x1c
c0014613:	c3                   	ret    

c0014614 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014614:	83 ec 0c             	sub    esp,0xc
c0014617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001461b:	83 ec 08             	sub    esp,0x8
c001461e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014622:	50                   	push   eax
c0014623:	e8 b8 fd ff ff       	call   c00143e0 <Device::Device(char const*)>
c0014628:	83 c4 10             	add    esp,0x10
c001462b:	ba 04 af 02 c0       	mov    edx,0xc002af04
c0014630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014634:	89 10                	mov    DWORD PTR [eax],edx
c0014636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001463a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014645:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001464c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014650:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001465a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001465e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014662:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001466c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014676:	90                   	nop
c0014677:	83 c4 0c             	add    esp,0xc
c001467a:	c3                   	ret    
c001467b:	90                   	nop

c001467c <PhysicalDisk::startCache()>:
c001467c:	56                   	push   esi
c001467d:	53                   	push   ebx
c001467e:	83 ec 10             	sub    esp,0x10
c0014681:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014685:	6a 44                	push   0x44
c0014687:	e8 bf b1 ff ff       	call   c000f84b <malloc>
c001468c:	89 c6                	mov    esi,eax
c001468e:	58                   	pop    eax
c001468f:	5a                   	pop    edx
c0014690:	53                   	push   ebx
c0014691:	56                   	push   esi
c0014692:	e8 31 28 00 00       	call   c0016ec8 <VCache::VCache(PhysicalDisk*)>
c0014697:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001469d:	83 c4 14             	add    esp,0x14
c00146a0:	5b                   	pop    ebx
c00146a1:	5e                   	pop    esi
c00146a2:	c3                   	ret    
c00146a3:	90                   	nop

c00146a4 <PhysicalDisk::~PhysicalDisk()>:
c00146a4:	83 ec 0c             	sub    esp,0xc
c00146a7:	ba 04 af 02 c0       	mov    edx,0xc002af04
c00146ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146b0:	89 10                	mov    DWORD PTR [eax],edx
c00146b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146b6:	83 ec 0c             	sub    esp,0xc
c00146b9:	50                   	push   eax
c00146ba:	e8 03 fa ff ff       	call   c00140c2 <Device::~Device()>
c00146bf:	83 c4 10             	add    esp,0x10
c00146c2:	90                   	nop
c00146c3:	83 c4 0c             	add    esp,0xc
c00146c6:	c3                   	ret    
c00146c7:	90                   	nop

c00146c8 <PhysicalDisk::~PhysicalDisk()>:
c00146c8:	83 ec 0c             	sub    esp,0xc
c00146cb:	83 ec 0c             	sub    esp,0xc
c00146ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146d2:	e8 cd ff ff ff       	call   c00146a4 <PhysicalDisk::~PhysicalDisk()>
c00146d7:	83 c4 10             	add    esp,0x10
c00146da:	83 ec 08             	sub    esp,0x8
c00146dd:	68 6c 01 00 00       	push   0x16c
c00146e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146e6:	e8 f8 e5 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00146eb:	83 c4 10             	add    esp,0x10
c00146ee:	83 c4 0c             	add    esp,0xc
c00146f1:	c3                   	ret    

c00146f2 <FPU::FPU(char const*)>:
c00146f2:	83 ec 0c             	sub    esp,0xc
c00146f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146f9:	83 ec 08             	sub    esp,0x8
c00146fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014700:	50                   	push   eax
c0014701:	e8 da fc ff ff       	call   c00143e0 <Device::Device(char const*)>
c0014706:	83 c4 10             	add    esp,0x10
c0014709:	ba 48 af 02 c0       	mov    edx,0xc002af48
c001470e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014712:	89 10                	mov    DWORD PTR [eax],edx
c0014714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014718:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014722:	90                   	nop
c0014723:	83 c4 0c             	add    esp,0xc
c0014726:	c3                   	ret    
c0014727:	90                   	nop

c0014728 <FPU::~FPU()>:
c0014728:	83 ec 0c             	sub    esp,0xc
c001472b:	ba 48 af 02 c0       	mov    edx,0xc002af48
c0014730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014734:	89 10                	mov    DWORD PTR [eax],edx
c0014736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001473a:	83 ec 0c             	sub    esp,0xc
c001473d:	50                   	push   eax
c001473e:	e8 7f f9 ff ff       	call   c00140c2 <Device::~Device()>
c0014743:	83 c4 10             	add    esp,0x10
c0014746:	90                   	nop
c0014747:	83 c4 0c             	add    esp,0xc
c001474a:	c3                   	ret    
c001474b:	90                   	nop

c001474c <FPU::~FPU()>:
c001474c:	83 ec 0c             	sub    esp,0xc
c001474f:	83 ec 0c             	sub    esp,0xc
c0014752:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014756:	e8 cd ff ff ff       	call   c0014728 <FPU::~FPU()>
c001475b:	83 c4 10             	add    esp,0x10
c001475e:	83 ec 08             	sub    esp,0x8
c0014761:	68 58 01 00 00       	push   0x158
c0014766:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001476a:	e8 74 e5 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c001476f:	83 c4 10             	add    esp,0x10
c0014772:	83 c4 0c             	add    esp,0xc
c0014775:	c3                   	ret    

c0014776 <setupFPU()>:
c0014776:	53                   	push   ebx
c0014777:	83 ec 08             	sub    esp,0x8
c001477a:	8b 15 28 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e728
c0014780:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014787:	74 19                	je     c00147a2 <setupFPU()+0x2c>
c0014789:	83 ec 0c             	sub    esp,0xc
c001478c:	68 58 01 00 00       	push   0x158
c0014791:	e8 b5 b0 ff ff       	call   c000f84b <malloc>
c0014796:	89 c3                	mov    ebx,eax
c0014798:	89 04 24             	mov    DWORD PTR [esp],eax
c001479b:	e8 86 0f 01 00       	call   c0025726 <AVX::AVX()>
c00147a0:	eb 5b                	jmp    c00147fd <setupFPU()+0x87>
c00147a2:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00147a8:	84 c0                	test   al,al
c00147aa:	79 19                	jns    c00147c5 <setupFPU()+0x4f>
c00147ac:	83 ec 0c             	sub    esp,0xc
c00147af:	68 58 01 00 00       	push   0x158
c00147b4:	e8 92 b0 ff ff       	call   c000f84b <malloc>
c00147b9:	89 c3                	mov    ebx,eax
c00147bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00147be:	e8 89 10 01 00       	call   c002584c <SSE::SSE()>
c00147c3:	eb 38                	jmp    c00147fd <setupFPU()+0x87>
c00147c5:	a8 20                	test   al,0x20
c00147c7:	74 19                	je     c00147e2 <setupFPU()+0x6c>
c00147c9:	83 ec 0c             	sub    esp,0xc
c00147cc:	68 58 01 00 00       	push   0x158
c00147d1:	e8 75 b0 ff ff       	call   c000f84b <malloc>
c00147d6:	89 c3                	mov    ebx,eax
c00147d8:	89 04 24             	mov    DWORD PTR [esp],eax
c00147db:	e8 d6 0f 01 00       	call   c00257b6 <MMX::MMX()>
c00147e0:	eb 1b                	jmp    c00147fd <setupFPU()+0x87>
c00147e2:	a8 10                	test   al,0x10
c00147e4:	74 1c                	je     c0014802 <setupFPU()+0x8c>
c00147e6:	83 ec 0c             	sub    esp,0xc
c00147e9:	68 58 01 00 00       	push   0x158
c00147ee:	e8 58 b0 ff ff       	call   c000f84b <malloc>
c00147f3:	89 c3                	mov    ebx,eax
c00147f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00147f8:	e8 dd 10 01 00       	call   c00258da <x87::x87()>
c00147fd:	83 c4 10             	add    esp,0x10
c0014800:	eb 24                	jmp    c0014826 <setupFPU()+0xb0>
c0014802:	83 e0 ef             	and    eax,0xffffffef
c0014805:	83 ec 0c             	sub    esp,0xc
c0014808:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001480e:	68 34 af 02 c0       	push   0xc002af34
c0014813:	e8 ab e5 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014818:	0f 20 c0             	mov    eax,cr0
c001481b:	83 c8 04             	or     eax,0x4
c001481e:	0f 22 c0             	mov    cr0,eax
c0014821:	31 db                	xor    ebx,ebx
c0014823:	83 c4 10             	add    esp,0x10
c0014826:	89 d8                	mov    eax,ebx
c0014828:	83 c4 08             	add    esp,0x8
c001482b:	5b                   	pop    ebx
c001482c:	c3                   	ret    
c001482d:	90                   	nop

c001482e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001482e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014832:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014836:	c1 e0 04             	shl    eax,0x4
c0014839:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001483d:	8d 50 10             	lea    edx,[eax+0x10]
c0014840:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014846:	74 08                	je     c0014850 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014848:	83 c0 04             	add    eax,0x4
c001484b:	39 d0                	cmp    eax,edx
c001484d:	75 f1                	jne    c0014840 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001484f:	c3                   	ret    
c0014850:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001485a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014864:	eb e2                	jmp    c0014848 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014866 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014866:	57                   	push   edi
c0014867:	31 c0                	xor    eax,eax
c0014869:	56                   	push   esi
c001486a:	53                   	push   ebx
c001486b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001486f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014873:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014877:	89 da                	mov    edx,ebx
c0014879:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001487d:	c1 e2 04             	shl    edx,0x4
c0014880:	01 ca                	add    edx,ecx
c0014882:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001488a:	74 16                	je     c00148a2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c001488c:	40                   	inc    eax
c001488d:	83 f8 04             	cmp    eax,0x4
c0014890:	75 f0                	jne    c0014882 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014892:	c7 44 24 10 78 af 02 c0 	mov    DWORD PTR [esp+0x10],0xc002af78
c001489a:	5b                   	pop    ebx
c001489b:	5e                   	pop    esi
c001489c:	5f                   	pop    edi
c001489d:	e9 ed 5c 00 00       	jmp    c001a58f <Krnl::panic(char const*)>
c00148a2:	8d 04 98             	lea    eax,[eax+ebx*4]
c00148a5:	8d 04 81             	lea    eax,[ecx+eax*4]
c00148a8:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00148ae:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00148b4:	5b                   	pop    ebx
c00148b5:	5e                   	pop    esi
c00148b6:	5f                   	pop    edi
c00148b7:	c3                   	ret    

c00148b8 <doubleFault(regs*, void*)>:
c00148b8:	55                   	push   ebp
c00148b9:	89 e5                	mov    ebp,esp
c00148bb:	83 ec 08             	sub    esp,0x8
c00148be:	83 ec 0c             	sub    esp,0xc
c00148c1:	68 b3 af 02 c0       	push   0xc002afb3
c00148c6:	e8 c4 5c 00 00       	call   c001a58f <Krnl::panic(char const*)>
c00148cb:	83 c4 10             	add    esp,0x10
c00148ce:	90                   	nop
c00148cf:	c9                   	leave  
c00148d0:	c3                   	ret    
c00148d1:	90                   	nop

c00148d2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00148d2:	56                   	push   esi
c00148d3:	53                   	push   ebx
c00148d4:	50                   	push   eax
c00148d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00148d9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00148dd:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00148e2:	75 35                	jne    c0014919 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00148e4:	8d 43 20             	lea    eax,[ebx+0x20]
c00148e7:	31 d2                	xor    edx,edx
c00148e9:	89 c1                	mov    ecx,eax
c00148eb:	c1 e1 04             	shl    ecx,0x4
c00148ee:	01 f1                	add    ecx,esi
c00148f0:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00148f8:	74 3e                	je     c0014938 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00148fa:	42                   	inc    edx
c00148fb:	83 fa 04             	cmp    edx,0x4
c00148fe:	75 f0                	jne    c00148f0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014900:	83 ec 0c             	sub    esp,0xc
c0014903:	68 f8 af 02 c0       	push   0xc002aff8
c0014908:	e8 82 5c 00 00       	call   c001a58f <Krnl::panic(char const*)>
c001490d:	83 c4 10             	add    esp,0x10
c0014910:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014915:	5a                   	pop    edx
c0014916:	5b                   	pop    ebx
c0014917:	5e                   	pop    esi
c0014918:	c3                   	ret    
c0014919:	83 ec 0c             	sub    esp,0xc
c001491c:	56                   	push   esi
c001491d:	e8 ba fb ff ff       	call   c00144dc <Device::getName()>
c0014922:	83 c4 10             	add    esp,0x10
c0014925:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014928:	75 ba                	jne    c00148e4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001492a:	83 fb 0f             	cmp    ebx,0xf
c001492d:	7f 29                	jg     c0014958 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001492f:	0f b6 9b 80 d9 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2680]
c0014936:	eb ac                	jmp    c00148e4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014938:	8d 04 82             	lea    eax,[edx+eax*4]
c001493b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001493f:	8d 04 86             	lea    eax,[esi+eax*4]
c0014942:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014948:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001494c:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014952:	89 d8                	mov    eax,ebx
c0014954:	5a                   	pop    edx
c0014955:	5b                   	pop    ebx
c0014956:	5e                   	pop    esi
c0014957:	c3                   	ret    
c0014958:	83 ec 0c             	sub    esp,0xc
c001495b:	68 c0 af 02 c0       	push   0xc002afc0
c0014960:	e8 2a 5c 00 00       	call   c001a58f <Krnl::panic(char const*)>
c0014965:	83 c4 10             	add    esp,0x10
c0014968:	e9 77 ff ff ff       	jmp    c00148e4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001496d:	90                   	nop

c001496e <InterruptController::clearAllHandlers(int, bool)>:
c001496e:	56                   	push   esi
c001496f:	53                   	push   ebx
c0014970:	52                   	push   edx
c0014971:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014975:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014979:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001497e:	75 61                	jne    c00149e1 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014980:	8d 46 20             	lea    eax,[esi+0x20]
c0014983:	c1 e6 04             	shl    esi,0x4
c0014986:	c1 e0 04             	shl    eax,0x4
c0014989:	01 de                	add    esi,ebx
c001498b:	01 d8                	add    eax,ebx
c001498d:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014997:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00149a1:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00149ab:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00149b5:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00149bf:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00149c9:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00149d3:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00149dd:	58                   	pop    eax
c00149de:	5b                   	pop    ebx
c00149df:	5e                   	pop    esi
c00149e0:	c3                   	ret    
c00149e1:	83 ec 0c             	sub    esp,0xc
c00149e4:	53                   	push   ebx
c00149e5:	e8 f2 fa ff ff       	call   c00144dc <Device::getName()>
c00149ea:	83 c4 10             	add    esp,0x10
c00149ed:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00149f0:	75 8e                	jne    c0014980 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00149f2:	83 fe 0f             	cmp    esi,0xf
c00149f5:	7f 09                	jg     c0014a00 <InterruptController::clearAllHandlers(int, bool)+0x92>
c00149f7:	0f b6 b6 80 d9 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2680]
c00149fe:	eb 80                	jmp    c0014980 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a00:	83 ec 0c             	sub    esp,0xc
c0014a03:	68 34 b0 02 c0       	push   0xc002b034
c0014a08:	e8 82 5b 00 00       	call   c001a58f <Krnl::panic(char const*)>
c0014a0d:	83 c4 10             	add    esp,0x10
c0014a10:	e9 6b ff ff ff       	jmp    c0014980 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a15:	90                   	nop

c0014a16 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014a16:	56                   	push   esi
c0014a17:	53                   	push   ebx
c0014a18:	52                   	push   edx
c0014a19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a1d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014a21:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a26:	75 3a                	jne    c0014a62 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014a28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a2c:	8d 50 20             	lea    edx,[eax+0x20]
c0014a2f:	c1 e2 04             	shl    edx,0x4
c0014a32:	8d 04 16             	lea    eax,[esi+edx*1]
c0014a35:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014a39:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014a3f:	74 0b                	je     c0014a4c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014a41:	83 c0 04             	add    eax,0x4
c0014a44:	39 d0                	cmp    eax,edx
c0014a46:	75 f1                	jne    c0014a39 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014a48:	58                   	pop    eax
c0014a49:	5b                   	pop    ebx
c0014a4a:	5e                   	pop    esi
c0014a4b:	c3                   	ret    
c0014a4c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014a56:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014a60:	eb df                	jmp    c0014a41 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014a62:	83 ec 0c             	sub    esp,0xc
c0014a65:	56                   	push   esi
c0014a66:	e8 71 fa ff ff       	call   c00144dc <Device::getName()>
c0014a6b:	83 c4 10             	add    esp,0x10
c0014a6e:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a71:	75 b5                	jne    c0014a28 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014a73:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014a78:	7f 11                	jg     c0014a8b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014a7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a7e:	0f b6 80 80 d9 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2680]
c0014a85:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a89:	eb 9d                	jmp    c0014a28 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014a8b:	83 ec 0c             	sub    esp,0xc
c0014a8e:	68 34 b0 02 c0       	push   0xc002b034
c0014a93:	e8 f7 5a 00 00       	call   c001a58f <Krnl::panic(char const*)>
c0014a98:	83 c4 10             	add    esp,0x10
c0014a9b:	eb 8b                	jmp    c0014a28 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014a9d <nmiHandler(regs*, void*)>:
c0014a9d:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0014aa2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014aa6:	e9 e9 a4 ff ff       	jmp    c000ef94 <Computer::handleNMI()>

c0014aab <int_handler>:
c0014aab:	55                   	push   ebp
c0014aac:	57                   	push   edi
c0014aad:	56                   	push   esi
c0014aae:	53                   	push   ebx
c0014aaf:	83 ec 0c             	sub    esp,0xc
c0014ab2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014ab6:	80 3d 84 12 03 c0 00 	cmp    BYTE PTR ds:0xc0031284,0x0
c0014abd:	74 0b                	je     c0014aca <int_handler+0x1f>
c0014abf:	fa                   	cli    
c0014ac0:	f4                   	hlt    
c0014ac1:	80 3d 84 12 03 c0 00 	cmp    BYTE PTR ds:0xc0031284,0x0
c0014ac8:	75 f5                	jne    c0014abf <int_handler+0x14>
c0014aca:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0014acf:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014ad2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014ad8:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014ade:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014ae1:	83 f8 17             	cmp    eax,0x17
c0014ae4:	77 13                	ja     c0014af9 <int_handler+0x4e>
c0014ae6:	83 ec 08             	sub    esp,0x8
c0014ae9:	8b 17                	mov    edx,DWORD PTR [edi]
c0014aeb:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014aee:	0f b6 c0             	movzx  eax,al
c0014af1:	50                   	push   eax
c0014af2:	57                   	push   edi
c0014af3:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014af6:	83 c4 10             	add    esp,0x10
c0014af9:	83 c3 15             	add    ebx,0x15
c0014afc:	c1 e3 04             	shl    ebx,0x4
c0014aff:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014b03:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014b0a:	31 db                	xor    ebx,ebx
c0014b0c:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014b10:	85 c0                	test   eax,eax
c0014b12:	74 13                	je     c0014b27 <int_handler+0x7c>
c0014b14:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014b17:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014b1b:	74 1c                	je     c0014b39 <int_handler+0x8e>
c0014b1d:	83 ec 08             	sub    esp,0x8
c0014b20:	52                   	push   edx
c0014b21:	56                   	push   esi
c0014b22:	ff d0                	call   eax
c0014b24:	83 c4 10             	add    esp,0x10
c0014b27:	43                   	inc    ebx
c0014b28:	83 fb 04             	cmp    ebx,0x4
c0014b2b:	75 df                	jne    c0014b0c <int_handler+0x61>
c0014b2d:	83 c4 0c             	add    esp,0xc
c0014b30:	31 c0                	xor    eax,eax
c0014b32:	5b                   	pop    ebx
c0014b33:	31 d2                	xor    edx,edx
c0014b35:	5e                   	pop    esi
c0014b36:	5f                   	pop    edi
c0014b37:	5d                   	pop    ebp
c0014b38:	c3                   	ret    
c0014b39:	83 ec 08             	sub    esp,0x8
c0014b3c:	52                   	push   edx
c0014b3d:	56                   	push   esi
c0014b3e:	ff d0                	call   eax
c0014b40:	83 c4 10             	add    esp,0x10
c0014b43:	83 c4 0c             	add    esp,0xc
c0014b46:	5b                   	pop    ebx
c0014b47:	5e                   	pop    esi
c0014b48:	5f                   	pop    edi
c0014b49:	5d                   	pop    ebp
c0014b4a:	c3                   	ret    
c0014b4b:	90                   	nop

c0014b4c <InterruptController::InterruptController(char const*)>:
c0014b4c:	83 ec 1c             	sub    esp,0x1c
c0014b4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b53:	83 ec 08             	sub    esp,0x8
c0014b56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b5a:	50                   	push   eax
c0014b5b:	e8 80 f8 ff ff       	call   c00143e0 <Device::Device(char const*)>
c0014b60:	83 c4 10             	add    esp,0x10
c0014b63:	ba f4 b2 02 c0       	mov    edx,0xc002b2f4
c0014b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b6c:	89 10                	mov    DWORD PTR [eax],edx
c0014b6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b72:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014b7c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014b84:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014b8c:	7f 5e                	jg     c0014bec <InterruptController::InterruptController(char const*)+0xa0>
c0014b8e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014b96:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014b9b:	7f 49                	jg     c0014be6 <InterruptController::InterruptController(char const*)+0x9a>
c0014b9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ba1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014ba5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014bac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014bb0:	01 ca                	add    edx,ecx
c0014bb2:	83 c2 54             	add    edx,0x54
c0014bb5:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014bbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bc1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014bc5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014bcc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014bd0:	01 ca                	add    edx,ecx
c0014bd2:	81 c2 54 04 00 00    	add    edx,0x454
c0014bd8:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014be0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014be4:	eb b0                	jmp    c0014b96 <InterruptController::InterruptController(char const*)+0x4a>
c0014be6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014bea:	eb 98                	jmp    c0014b84 <InterruptController::InterruptController(char const*)+0x38>
c0014bec:	90                   	nop
c0014bed:	83 c4 1c             	add    esp,0x1c
c0014bf0:	c3                   	ret    
c0014bf1:	90                   	nop

c0014bf2 <InterruptController::~InterruptController()>:
c0014bf2:	83 ec 0c             	sub    esp,0xc
c0014bf5:	ba f4 b2 02 c0       	mov    edx,0xc002b2f4
c0014bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014bfe:	89 10                	mov    DWORD PTR [eax],edx
c0014c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c04:	83 ec 0c             	sub    esp,0xc
c0014c07:	50                   	push   eax
c0014c08:	e8 b5 f4 ff ff       	call   c00140c2 <Device::~Device()>
c0014c0d:	83 c4 10             	add    esp,0x10
c0014c10:	90                   	nop
c0014c11:	83 c4 0c             	add    esp,0xc
c0014c14:	c3                   	ret    
c0014c15:	90                   	nop

c0014c16 <InterruptController::~InterruptController()>:
c0014c16:	83 ec 0c             	sub    esp,0xc
c0014c19:	83 ec 0c             	sub    esp,0xc
c0014c1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c20:	e8 cd ff ff ff       	call   c0014bf2 <InterruptController::~InterruptController()>
c0014c25:	83 c4 10             	add    esp,0x10
c0014c28:	83 ec 08             	sub    esp,0x8
c0014c2b:	68 58 21 00 00       	push   0x2158
c0014c30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c34:	e8 aa e0 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0014c39:	83 c4 10             	add    esp,0x10
c0014c3c:	83 c4 0c             	add    esp,0xc
c0014c3f:	c3                   	ret    

c0014c40 <displayDebugInfo(regs*)>:
c0014c40:	55                   	push   ebp
c0014c41:	57                   	push   edi
c0014c42:	56                   	push   esi
c0014c43:	53                   	push   ebx
c0014c44:	83 ec 24             	sub    esp,0x24
c0014c47:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014c4b:	0f 20 c2             	mov    edx,cr0
c0014c4e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014c52:	0f 20 d7             	mov    edi,cr2
c0014c55:	0f 20 de             	mov    esi,cr3
c0014c58:	0f 20 e5             	mov    ebp,cr4
c0014c5b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014c5e:	68 6e b0 02 c0       	push   0xc002b06e
c0014c63:	e8 5b e1 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014c68:	59                   	pop    ecx
c0014c69:	58                   	pop    eax
c0014c6a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014c6d:	68 79 b0 02 c0       	push   0xc002b079
c0014c72:	e8 4c e1 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014c77:	58                   	pop    eax
c0014c78:	5a                   	pop    edx
c0014c79:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014c7c:	68 84 b0 02 c0       	push   0xc002b084
c0014c81:	e8 3d e1 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014c86:	59                   	pop    ecx
c0014c87:	58                   	pop    eax
c0014c88:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014c8b:	68 8f b0 02 c0       	push   0xc002b08f
c0014c90:	e8 2e e1 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014c95:	58                   	pop    eax
c0014c96:	5a                   	pop    edx
c0014c97:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014c9a:	68 9a b0 02 c0       	push   0xc002b09a
c0014c9f:	e8 1f e1 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014ca4:	59                   	pop    ecx
c0014ca5:	58                   	pop    eax
c0014ca6:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014ca9:	68 a5 b0 02 c0       	push   0xc002b0a5
c0014cae:	e8 10 e1 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014cb3:	58                   	pop    eax
c0014cb4:	5a                   	pop    edx
c0014cb5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014cb8:	68 b0 b0 02 c0       	push   0xc002b0b0
c0014cbd:	e8 01 e1 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014cc2:	59                   	pop    ecx
c0014cc3:	58                   	pop    eax
c0014cc4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014cc7:	68 bb b0 02 c0       	push   0xc002b0bb
c0014ccc:	e8 f2 e0 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014cd1:	58                   	pop    eax
c0014cd2:	5a                   	pop    edx
c0014cd3:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014cd6:	68 c6 b0 02 c0       	push   0xc002b0c6
c0014cdb:	e8 e3 e0 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014ce0:	59                   	pop    ecx
c0014ce1:	58                   	pop    eax
c0014ce2:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014ce5:	68 d5 b0 02 c0       	push   0xc002b0d5
c0014cea:	e8 d4 e0 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014cef:	58                   	pop    eax
c0014cf0:	5a                   	pop    edx
c0014cf1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014cf4:	68 e0 b0 02 c0       	push   0xc002b0e0
c0014cf9:	e8 c5 e0 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014cfe:	59                   	pop    ecx
c0014cff:	58                   	pop    eax
c0014d00:	57                   	push   edi
c0014d01:	68 eb b0 02 c0       	push   0xc002b0eb
c0014d06:	e8 b8 e0 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014d0b:	58                   	pop    eax
c0014d0c:	5a                   	pop    edx
c0014d0d:	56                   	push   esi
c0014d0e:	68 f6 b0 02 c0       	push   0xc002b0f6
c0014d13:	e8 ab e0 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0014d18:	59                   	pop    ecx
c0014d19:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014d1e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d24:	e8 ed be ff ff       	call   c0010c16 <setActiveTerminal(VgaText*)>
c0014d29:	58                   	pop    eax
c0014d2a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014d2d:	5a                   	pop    edx
c0014d2e:	c1 e0 05             	shl    eax,0x5
c0014d31:	05 e0 d6 02 c0       	add    eax,0xc002d6e0
c0014d36:	50                   	push   eax
c0014d37:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014d3c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d42:	e8 5b c2 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014d47:	59                   	pop    ecx
c0014d48:	58                   	pop    eax
c0014d49:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014d4e:	68 01 b1 02 c0       	push   0xc002b101
c0014d53:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d59:	e8 44 c2 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014d5e:	58                   	pop    eax
c0014d5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d64:	5a                   	pop    edx
c0014d65:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014d68:	83 c0 0c             	add    eax,0xc
c0014d6b:	50                   	push   eax
c0014d6c:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014d71:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d77:	e8 26 c2 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014d7c:	59                   	pop    ecx
c0014d7d:	58                   	pop    eax
c0014d7e:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014d83:	68 0a b1 02 c0       	push   0xc002b10a
c0014d88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d8e:	e8 0f c2 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014d93:	58                   	pop    eax
c0014d94:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014d99:	5a                   	pop    edx
c0014d9a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014d9d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014da3:	e8 20 c2 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014da8:	59                   	pop    ecx
c0014da9:	58                   	pop    eax
c0014daa:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014daf:	68 12 b1 02 c0       	push   0xc002b112
c0014db4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dba:	e8 e3 c1 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014dbf:	58                   	pop    eax
c0014dc0:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014dc5:	5a                   	pop    edx
c0014dc6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014dc9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dcf:	e8 f4 c1 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014dd4:	59                   	pop    ecx
c0014dd5:	58                   	pop    eax
c0014dd6:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014ddb:	68 1a b1 02 c0       	push   0xc002b11a
c0014de0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014de6:	e8 b7 c1 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014deb:	58                   	pop    eax
c0014dec:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014df1:	5a                   	pop    edx
c0014df2:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014df5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dfb:	e8 c8 c1 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014e00:	59                   	pop    ecx
c0014e01:	58                   	pop    eax
c0014e02:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014e07:	68 22 b1 02 c0       	push   0xc002b122
c0014e0c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e12:	e8 8b c1 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014e17:	58                   	pop    eax
c0014e18:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014e1d:	5a                   	pop    edx
c0014e1e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014e21:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e27:	e8 9c c1 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014e2c:	59                   	pop    ecx
c0014e2d:	58                   	pop    eax
c0014e2e:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014e33:	68 2a b1 02 c0       	push   0xc002b12a
c0014e38:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e3e:	e8 5f c1 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014e43:	58                   	pop    eax
c0014e44:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014e49:	5a                   	pop    edx
c0014e4a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e4d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e53:	e8 70 c1 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014e58:	59                   	pop    ecx
c0014e59:	58                   	pop    eax
c0014e5a:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014e5f:	68 32 b1 02 c0       	push   0xc002b132
c0014e64:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e6a:	e8 33 c1 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014e6f:	58                   	pop    eax
c0014e70:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014e75:	5a                   	pop    edx
c0014e76:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014e79:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e7f:	e8 44 c1 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014e84:	59                   	pop    ecx
c0014e85:	58                   	pop    eax
c0014e86:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014e8b:	68 3a b1 02 c0       	push   0xc002b13a
c0014e90:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e96:	e8 07 c1 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014e9b:	58                   	pop    eax
c0014e9c:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014ea1:	5a                   	pop    edx
c0014ea2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014ea6:	52                   	push   edx
c0014ea7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ead:	e8 16 c1 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014eb2:	59                   	pop    ecx
c0014eb3:	58                   	pop    eax
c0014eb4:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014eb9:	68 43 b1 02 c0       	push   0xc002b143
c0014ebe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ec4:	e8 d9 c0 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014ec9:	58                   	pop    eax
c0014eca:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014ecf:	5a                   	pop    edx
c0014ed0:	57                   	push   edi
c0014ed1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ed7:	e8 ec c0 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014edc:	59                   	pop    ecx
c0014edd:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014ee2:	5f                   	pop    edi
c0014ee3:	68 4b b1 02 c0       	push   0xc002b14b
c0014ee8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eee:	e8 af c0 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014ef3:	58                   	pop    eax
c0014ef4:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014ef9:	5a                   	pop    edx
c0014efa:	56                   	push   esi
c0014efb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f01:	e8 c2 c0 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014f06:	59                   	pop    ecx
c0014f07:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014f0c:	5e                   	pop    esi
c0014f0d:	68 53 b1 02 c0       	push   0xc002b153
c0014f12:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f18:	e8 85 c0 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014f1d:	5f                   	pop    edi
c0014f1e:	58                   	pop    eax
c0014f1f:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014f24:	55                   	push   ebp
c0014f25:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f2b:	e8 98 c0 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014f30:	58                   	pop    eax
c0014f31:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014f36:	5a                   	pop    edx
c0014f37:	68 5b b1 02 c0       	push   0xc002b15b
c0014f3c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f42:	e8 5b c0 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014f47:	0f 21 c0             	mov    eax,db0
c0014f4a:	59                   	pop    ecx
c0014f4b:	5e                   	pop    esi
c0014f4c:	50                   	push   eax
c0014f4d:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014f52:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f58:	e8 6b c0 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014f5d:	5f                   	pop    edi
c0014f5e:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014f63:	5d                   	pop    ebp
c0014f64:	68 64 b1 02 c0       	push   0xc002b164
c0014f69:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f6f:	e8 2e c0 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014f74:	0f 21 c8             	mov    eax,db1
c0014f77:	5a                   	pop    edx
c0014f78:	59                   	pop    ecx
c0014f79:	50                   	push   eax
c0014f7a:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014f7f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f85:	e8 3e c0 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014f8a:	5e                   	pop    esi
c0014f8b:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014f90:	5f                   	pop    edi
c0014f91:	68 6c b1 02 c0       	push   0xc002b16c
c0014f96:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f9c:	e8 01 c0 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014fa1:	0f 21 d0             	mov    eax,db2
c0014fa4:	5d                   	pop    ebp
c0014fa5:	5a                   	pop    edx
c0014fa6:	50                   	push   eax
c0014fa7:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014fac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fb2:	e8 11 c0 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014fb7:	59                   	pop    ecx
c0014fb8:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014fbd:	5e                   	pop    esi
c0014fbe:	68 74 b1 02 c0       	push   0xc002b174
c0014fc3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fc9:	e8 d4 bf ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014fce:	0f 21 d8             	mov    eax,db3
c0014fd1:	5f                   	pop    edi
c0014fd2:	5d                   	pop    ebp
c0014fd3:	50                   	push   eax
c0014fd4:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014fd9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fdf:	e8 e4 bf ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0014fe4:	58                   	pop    eax
c0014fe5:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0014fea:	5a                   	pop    edx
c0014feb:	68 7c b1 02 c0       	push   0xc002b17c
c0014ff0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ff6:	e8 a7 bf ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0014ffb:	0f 21 f0             	mov    eax,db6
c0014ffe:	59                   	pop    ecx
c0014fff:	5e                   	pop    esi
c0015000:	50                   	push   eax
c0015001:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0015006:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001500c:	e8 b7 bf ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c0015011:	5f                   	pop    edi
c0015012:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0015017:	5d                   	pop    ebp
c0015018:	68 84 b1 02 c0       	push   0xc002b184
c001501d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015023:	e8 7a bf ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0015028:	0f 21 f8             	mov    eax,db7
c001502b:	5a                   	pop    edx
c001502c:	59                   	pop    ecx
c001502d:	50                   	push   eax
c001502e:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0015033:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015039:	e8 8a bf ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001503e:	5e                   	pop    esi
c001503f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015042:	e8 ed 86 00 00       	call   c001d734 <Thr::getDriverNameFromAddress(unsigned long)>
c0015047:	83 c4 10             	add    esp,0x10
c001504a:	85 c0                	test   eax,eax
c001504c:	74 7d                	je     c00150cb <displayDebugInfo(regs*)+0x48b>
c001504e:	89 c6                	mov    esi,eax
c0015050:	50                   	push   eax
c0015051:	50                   	push   eax
c0015052:	56                   	push   esi
c0015053:	68 8c b1 02 c0       	push   0xc002b18c
c0015058:	e8 66 dd ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001505d:	5a                   	pop    edx
c001505e:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0015063:	59                   	pop    ecx
c0015064:	68 9a b1 02 c0       	push   0xc002b19a
c0015069:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001506f:	e8 2e bf ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0015074:	5f                   	pop    edi
c0015075:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001507a:	5d                   	pop    ebp
c001507b:	56                   	push   esi
c001507c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015082:	e8 1b bf ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c0015087:	58                   	pop    eax
c0015088:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001508d:	5a                   	pop    edx
c001508e:	68 a6 b1 02 c0       	push   0xc002b1a6
c0015093:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015099:	e8 04 bf ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001509e:	59                   	pop    ecx
c001509f:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c00150a4:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00150aa:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00150ad:	e8 b9 86 00 00       	call   c001d76b <Thr::getDriverOffsetFromAddress(unsigned long)>
c00150b2:	5b                   	pop    ebx
c00150b3:	5d                   	pop    ebp
c00150b4:	50                   	push   eax
c00150b5:	57                   	push   edi
c00150b6:	e8 0d bf ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c00150bb:	58                   	pop    eax
c00150bc:	5a                   	pop    edx
c00150bd:	56                   	push   esi
c00150be:	68 b2 b1 02 c0       	push   0xc002b1b2
c00150c3:	e8 fb dc ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00150c8:	83 c4 10             	add    esp,0x10
c00150cb:	fa                   	cli    
c00150cc:	f4                   	hlt    
c00150cd:	eb fe                	jmp    c00150cd <displayDebugInfo(regs*)+0x48d>

c00150cf <x87EmulHandler(regs*, void*)>:
c00150cf:	83 ec 0c             	sub    esp,0xc
c00150d2:	0f 20 c2             	mov    edx,cr0
c00150d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150da:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c00150de:	75 4b                	jne    c001512b <x87EmulHandler(regs*, void*)+0x5c>
c00150e0:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c00150e5:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c00150eb:	85 c0                	test   eax,eax
c00150ed:	74 05                	je     c00150f4 <x87EmulHandler(regs*, void*)+0x25>
c00150ef:	83 e2 08             	and    edx,0x8
c00150f2:	75 17                	jne    c001510b <x87EmulHandler(regs*, void*)+0x3c>
c00150f4:	83 ec 0c             	sub    esp,0xc
c00150f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00150fb:	e8 92 aa 00 00       	call   c001fb92 <Vm::x87Handler(regs*)>
c0015100:	83 c4 10             	add    esp,0x10
c0015103:	84 c0                	test   al,al
c0015105:	74 24                	je     c001512b <x87EmulHandler(regs*, void*)+0x5c>
c0015107:	83 c4 0c             	add    esp,0xc
c001510a:	c3                   	ret    
c001510b:	83 ec 0c             	sub    esp,0xc
c001510e:	68 d8 b1 02 c0       	push   0xc002b1d8
c0015113:	e8 ab dc ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0015118:	0f 06                	clts   
c001511a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001511f:	83 c4 10             	add    esp,0x10
c0015122:	a3 c8 e8 02 c0       	mov    ds:0xc002e8c8,eax
c0015127:	83 c4 0c             	add    esp,0xc
c001512a:	c3                   	ret    
c001512b:	83 ec 0c             	sub    esp,0xc
c001512e:	68 c2 b1 02 c0       	push   0xc002b1c2
c0015133:	e8 8b dc ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0015138:	5a                   	pop    edx
c0015139:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001513d:	e8 fe fa ff ff       	call   c0014c40 <displayDebugInfo(regs*)>

c0015142 <gpFault(regs*, void*)>:
c0015142:	53                   	push   ebx
c0015143:	83 ec 14             	sub    esp,0x14
c0015146:	c7 05 c4 e8 02 c0 0f ef 01 c0 	mov    DWORD PTR ds:0xc002e8c4,0xc001ef0f
c0015150:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015154:	53                   	push   ebx
c0015155:	e8 b5 9d 00 00       	call   c001ef0f <Vm::faultHandler(regs*)>
c001515a:	83 c4 10             	add    esp,0x10
c001515d:	84 c0                	test   al,al
c001515f:	74 05                	je     c0015166 <gpFault(regs*, void*)+0x24>
c0015161:	83 c4 08             	add    esp,0x8
c0015164:	5b                   	pop    ebx
c0015165:	c3                   	ret    
c0015166:	83 ec 0c             	sub    esp,0xc
c0015169:	68 e5 b1 02 c0       	push   0xc002b1e5
c001516e:	e8 50 dc ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0015173:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015176:	e8 c5 fa ff ff       	call   c0014c40 <displayDebugInfo(regs*)>

c001517b <pgFault(regs*, void*)>:
c001517b:	83 ec 14             	sub    esp,0x14
c001517e:	0f 20 d0             	mov    eax,cr2
c0015181:	50                   	push   eax
c0015182:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015187:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001518a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0015190:	e8 57 d8 ff ff       	call   c00129ec <VAS::tryLoadBackOffDisk(unsigned long)>
c0015195:	83 c4 10             	add    esp,0x10
c0015198:	84 c0                	test   al,al
c001519a:	74 04                	je     c00151a0 <pgFault(regs*, void*)+0x25>
c001519c:	83 c4 0c             	add    esp,0xc
c001519f:	c3                   	ret    
c00151a0:	83 ec 0c             	sub    esp,0xc
c00151a3:	68 00 b2 02 c0       	push   0xc002b200
c00151a8:	e8 16 dc ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00151ad:	58                   	pop    eax
c00151ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151b2:	e8 89 fa ff ff       	call   c0014c40 <displayDebugInfo(regs*)>

c00151b7 <otherISRHandler(regs*, void*)>:
c00151b7:	53                   	push   ebx
c00151b8:	83 ec 0c             	sub    esp,0xc
c00151bb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00151bf:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00151c2:	50                   	push   eax
c00151c3:	50                   	push   eax
c00151c4:	68 0d b2 02 c0       	push   0xc002b20d
c00151c9:	e8 f5 db ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00151ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151d1:	e8 6a fa ff ff       	call   c0014c40 <displayDebugInfo(regs*)>

c00151d6 <opcodeFault(regs*, void*)>:
c00151d6:	55                   	push   ebp
c00151d7:	89 e5                	mov    ebp,esp
c00151d9:	56                   	push   esi
c00151da:	53                   	push   ebx
c00151db:	83 ec 40             	sub    esp,0x40
c00151de:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c00151e3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00151e9:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c00151ef:	84 c0                	test   al,al
c00151f1:	74 24                	je     c0015217 <opcodeFault(regs*, void*)+0x41>
c00151f3:	83 ec 0c             	sub    esp,0xc
c00151f6:	68 2c b2 02 c0       	push   0xc002b22c
c00151fb:	e8 c3 db ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0015200:	83 c4 10             	add    esp,0x10
c0015203:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015206:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015209:	8d 50 19             	lea    edx,[eax+0x19]
c001520c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001520f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015212:	e9 be 05 00 00       	jmp    c00157d5 <opcodeFault(regs*, void*)+0x5ff>
c0015217:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001521a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001521d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015220:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0015224:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0015228:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001522b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001522e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0015231:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015234:	8a 00                	mov    al,BYTE PTR [eax]
c0015236:	3c f0                	cmp    al,0xf0
c0015238:	75 17                	jne    c0015251 <opcodeFault(regs*, void*)+0x7b>
c001523a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001523d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015240:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015243:	8d 50 01             	lea    edx,[eax+0x1]
c0015246:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015249:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001524c:	e9 da 00 00 00       	jmp    c001532b <opcodeFault(regs*, void*)+0x155>
c0015251:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015254:	8a 00                	mov    al,BYTE PTR [eax]
c0015256:	3c f2                	cmp    al,0xf2
c0015258:	74 09                	je     c0015263 <opcodeFault(regs*, void*)+0x8d>
c001525a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001525d:	8a 00                	mov    al,BYTE PTR [eax]
c001525f:	3c f3                	cmp    al,0xf3
c0015261:	75 1b                	jne    c001527e <opcodeFault(regs*, void*)+0xa8>
c0015263:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015267:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001526a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001526d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015270:	8d 50 01             	lea    edx,[eax+0x1]
c0015273:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015276:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015279:	e9 ad 00 00 00       	jmp    c001532b <opcodeFault(regs*, void*)+0x155>
c001527e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015281:	8a 00                	mov    al,BYTE PTR [eax]
c0015283:	3c 66                	cmp    al,0x66
c0015285:	75 1f                	jne    c00152a6 <opcodeFault(regs*, void*)+0xd0>
c0015287:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001528b:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c001528f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015292:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015295:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015298:	8d 50 01             	lea    edx,[eax+0x1]
c001529b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001529e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152a1:	e9 85 00 00 00       	jmp    c001532b <opcodeFault(regs*, void*)+0x155>
c00152a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152a9:	8a 00                	mov    al,BYTE PTR [eax]
c00152ab:	3c 67                	cmp    al,0x67
c00152ad:	75 18                	jne    c00152c7 <opcodeFault(regs*, void*)+0xf1>
c00152af:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00152b3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152b9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152bc:	8d 50 01             	lea    edx,[eax+0x1]
c00152bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152c2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152c5:	eb 64                	jmp    c001532b <opcodeFault(regs*, void*)+0x155>
c00152c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ca:	8a 00                	mov    al,BYTE PTR [eax]
c00152cc:	3c 2e                	cmp    al,0x2e
c00152ce:	74 09                	je     c00152d9 <opcodeFault(regs*, void*)+0x103>
c00152d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152d3:	8a 00                	mov    al,BYTE PTR [eax]
c00152d5:	3c 3e                	cmp    al,0x3e
c00152d7:	75 18                	jne    c00152f1 <opcodeFault(regs*, void*)+0x11b>
c00152d9:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00152dd:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152e3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152e6:	8d 50 01             	lea    edx,[eax+0x1]
c00152e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ec:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152ef:	eb 3a                	jmp    c001532b <opcodeFault(regs*, void*)+0x155>
c00152f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f4:	8a 00                	mov    al,BYTE PTR [eax]
c00152f6:	3c 36                	cmp    al,0x36
c00152f8:	74 1b                	je     c0015315 <opcodeFault(regs*, void*)+0x13f>
c00152fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152fd:	8a 00                	mov    al,BYTE PTR [eax]
c00152ff:	3c 26                	cmp    al,0x26
c0015301:	74 12                	je     c0015315 <opcodeFault(regs*, void*)+0x13f>
c0015303:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015306:	8a 00                	mov    al,BYTE PTR [eax]
c0015308:	3c 64                	cmp    al,0x64
c001530a:	74 09                	je     c0015315 <opcodeFault(regs*, void*)+0x13f>
c001530c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001530f:	8a 00                	mov    al,BYTE PTR [eax]
c0015311:	3c 65                	cmp    al,0x65
c0015313:	75 16                	jne    c001532b <opcodeFault(regs*, void*)+0x155>
c0015315:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015319:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001531c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001531f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015322:	8d 50 01             	lea    edx,[eax+0x1]
c0015325:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015328:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001532b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001532e:	8a 00                	mov    al,BYTE PTR [eax]
c0015330:	3c 0f                	cmp    al,0xf
c0015332:	0f 85 ad 00 00 00    	jne    c00153e5 <opcodeFault(regs*, void*)+0x20f>
c0015338:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001533b:	40                   	inc    eax
c001533c:	8a 00                	mov    al,BYTE PTR [eax]
c001533e:	3c c2                	cmp    al,0xc2
c0015340:	74 0e                	je     c0015350 <opcodeFault(regs*, void*)+0x17a>
c0015342:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015345:	40                   	inc    eax
c0015346:	8a 00                	mov    al,BYTE PTR [eax]
c0015348:	3c c3                	cmp    al,0xc3
c001534a:	0f 85 95 00 00 00    	jne    c00153e5 <opcodeFault(regs*, void*)+0x20f>
c0015350:	83 ec 0c             	sub    esp,0xc
c0015353:	68 4f b2 02 c0       	push   0xc002b24f
c0015358:	e8 66 da ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001535d:	83 c4 10             	add    esp,0x10
c0015360:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015363:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015366:	8d 50 01             	lea    edx,[eax+0x1]
c0015369:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001536c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001536f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015372:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015375:	8a 00                	mov    al,BYTE PTR [eax]
c0015377:	8d 50 fe             	lea    edx,[eax-0x2]
c001537a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001537d:	88 10                	mov    BYTE PTR [eax],dl
c001537f:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015382:	50                   	push   eax
c0015383:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015386:	50                   	push   eax
c0015387:	8d 45 c4             	lea    eax,[ebp-0x3c]
c001538a:	50                   	push   eax
c001538b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001538e:	e8 c3 48 00 00       	call   c0019c56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015393:	83 c4 10             	add    esp,0x10
c0015396:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015399:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001539c:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001539f:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00153a2:	01 d0                	add    eax,edx
c00153a4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00153a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153aa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153ad:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00153b0:	48                   	dec    eax
c00153b1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00153b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b7:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00153ba:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c0:	83 ec 04             	sub    esp,0x4
c00153c3:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00153c6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00153c9:	50                   	push   eax
c00153ca:	e8 e5 ad fe ff       	call   c00001b4 <voodooXADD>
c00153cf:	83 c4 10             	add    esp,0x10
c00153d2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00153d5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00153d8:	01 c2                	add    edx,eax
c00153da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153dd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153e0:	e9 f0 03 00 00       	jmp    c00157d5 <opcodeFault(regs*, void*)+0x5ff>
c00153e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e8:	8a 00                	mov    al,BYTE PTR [eax]
c00153ea:	3c 0f                	cmp    al,0xf
c00153ec:	0f 85 8b 01 00 00    	jne    c001557d <opcodeFault(regs*, void*)+0x3a7>
c00153f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f5:	40                   	inc    eax
c00153f6:	8a 00                	mov    al,BYTE PTR [eax]
c00153f8:	3c c7                	cmp    al,0xc7
c00153fa:	0f 86 7d 01 00 00    	jbe    c001557d <opcodeFault(regs*, void*)+0x3a7>
c0015400:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015403:	40                   	inc    eax
c0015404:	8a 00                	mov    al,BYTE PTR [eax]
c0015406:	3c cf                	cmp    al,0xcf
c0015408:	0f 87 6f 01 00 00    	ja     c001557d <opcodeFault(regs*, void*)+0x3a7>
c001540e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015411:	40                   	inc    eax
c0015412:	8a 00                	mov    al,BYTE PTR [eax]
c0015414:	83 c0 38             	add    eax,0x38
c0015417:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001541a:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001541e:	75 0b                	jne    c001542b <opcodeFault(regs*, void*)+0x255>
c0015420:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015423:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015426:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015429:	eb 75                	jmp    c00154a0 <opcodeFault(regs*, void*)+0x2ca>
c001542b:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001542f:	75 0b                	jne    c001543c <opcodeFault(regs*, void*)+0x266>
c0015431:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015434:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015437:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001543a:	eb 64                	jmp    c00154a0 <opcodeFault(regs*, void*)+0x2ca>
c001543c:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015440:	75 0b                	jne    c001544d <opcodeFault(regs*, void*)+0x277>
c0015442:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015445:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015448:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001544b:	eb 53                	jmp    c00154a0 <opcodeFault(regs*, void*)+0x2ca>
c001544d:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015451:	75 0b                	jne    c001545e <opcodeFault(regs*, void*)+0x288>
c0015453:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015456:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015459:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001545c:	eb 42                	jmp    c00154a0 <opcodeFault(regs*, void*)+0x2ca>
c001545e:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015462:	75 0b                	jne    c001546f <opcodeFault(regs*, void*)+0x299>
c0015464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015467:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001546a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001546d:	eb 31                	jmp    c00154a0 <opcodeFault(regs*, void*)+0x2ca>
c001546f:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015473:	75 0b                	jne    c0015480 <opcodeFault(regs*, void*)+0x2aa>
c0015475:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015478:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001547b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001547e:	eb 20                	jmp    c00154a0 <opcodeFault(regs*, void*)+0x2ca>
c0015480:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015484:	75 0b                	jne    c0015491 <opcodeFault(regs*, void*)+0x2bb>
c0015486:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015489:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001548c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001548f:	eb 0f                	jmp    c00154a0 <opcodeFault(regs*, void*)+0x2ca>
c0015491:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015495:	75 09                	jne    c00154a0 <opcodeFault(regs*, void*)+0x2ca>
c0015497:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001549a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001549d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154a0:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00154a4:	74 10                	je     c00154b6 <opcodeFault(regs*, void*)+0x2e0>
c00154a6:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00154ad:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00154b4:	eb 2d                	jmp    c00154e3 <opcodeFault(regs*, void*)+0x30d>
c00154b6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00154b9:	c1 e0 18             	shl    eax,0x18
c00154bc:	89 c2                	mov    edx,eax
c00154be:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00154c1:	c1 e0 08             	shl    eax,0x8
c00154c4:	25 00 00 ff 00       	and    eax,0xff0000
c00154c9:	09 c2                	or     edx,eax
c00154cb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00154ce:	c1 e8 08             	shr    eax,0x8
c00154d1:	25 00 ff 00 00       	and    eax,0xff00
c00154d6:	09 c2                	or     edx,eax
c00154d8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00154db:	c1 e8 18             	shr    eax,0x18
c00154de:	09 d0                	or     eax,edx
c00154e0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154e3:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00154e7:	75 0b                	jne    c00154f4 <opcodeFault(regs*, void*)+0x31e>
c00154e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ec:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154ef:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00154f2:	eb 75                	jmp    c0015569 <opcodeFault(regs*, void*)+0x393>
c00154f4:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00154f8:	75 0b                	jne    c0015505 <opcodeFault(regs*, void*)+0x32f>
c00154fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154fd:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015500:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015503:	eb 64                	jmp    c0015569 <opcodeFault(regs*, void*)+0x393>
c0015505:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015509:	75 0b                	jne    c0015516 <opcodeFault(regs*, void*)+0x340>
c001550b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001550e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015511:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015514:	eb 53                	jmp    c0015569 <opcodeFault(regs*, void*)+0x393>
c0015516:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001551a:	75 0b                	jne    c0015527 <opcodeFault(regs*, void*)+0x351>
c001551c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001551f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015522:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015525:	eb 42                	jmp    c0015569 <opcodeFault(regs*, void*)+0x393>
c0015527:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001552b:	75 0b                	jne    c0015538 <opcodeFault(regs*, void*)+0x362>
c001552d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015530:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015533:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015536:	eb 31                	jmp    c0015569 <opcodeFault(regs*, void*)+0x393>
c0015538:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001553c:	75 0b                	jne    c0015549 <opcodeFault(regs*, void*)+0x373>
c001553e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015541:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015544:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015547:	eb 20                	jmp    c0015569 <opcodeFault(regs*, void*)+0x393>
c0015549:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001554d:	75 0b                	jne    c001555a <opcodeFault(regs*, void*)+0x384>
c001554f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015552:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015555:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015558:	eb 0f                	jmp    c0015569 <opcodeFault(regs*, void*)+0x393>
c001555a:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001555e:	75 09                	jne    c0015569 <opcodeFault(regs*, void*)+0x393>
c0015560:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015563:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015566:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001556c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001556f:	8d 50 02             	lea    edx,[eax+0x2]
c0015572:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015575:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015578:	e9 58 02 00 00       	jmp    c00157d5 <opcodeFault(regs*, void*)+0x5ff>
c001557d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015580:	8a 00                	mov    al,BYTE PTR [eax]
c0015582:	3c 0f                	cmp    al,0xf
c0015584:	0f 85 76 01 00 00    	jne    c0015700 <opcodeFault(regs*, void*)+0x52a>
c001558a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001558d:	40                   	inc    eax
c001558e:	8a 00                	mov    al,BYTE PTR [eax]
c0015590:	3c c7                	cmp    al,0xc7
c0015592:	0f 85 68 01 00 00    	jne    c0015700 <opcodeFault(regs*, void*)+0x52a>
c0015598:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001559b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001559e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00155a1:	8d 50 01             	lea    edx,[eax+0x1]
c00155a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00155aa:	8d 45 ba             	lea    eax,[ebp-0x46]
c00155ad:	50                   	push   eax
c00155ae:	8d 45 bb             	lea    eax,[ebp-0x45]
c00155b1:	50                   	push   eax
c00155b2:	8d 45 bc             	lea    eax,[ebp-0x44]
c00155b5:	50                   	push   eax
c00155b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00155b9:	e8 98 46 00 00       	call   c0019c56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00155be:	83 c4 10             	add    esp,0x10
c00155c1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00155c4:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00155c7:	83 f0 01             	xor    eax,0x1
c00155ca:	84 c0                	test   al,al
c00155cc:	0f 84 2e 01 00 00    	je     c0015700 <opcodeFault(regs*, void*)+0x52a>
c00155d2:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00155d5:	3c 01                	cmp    al,0x1
c00155d7:	0f 85 23 01 00 00    	jne    c0015700 <opcodeFault(regs*, void*)+0x52a>
c00155dd:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00155e0:	83 f0 01             	xor    eax,0x1
c00155e3:	84 c0                	test   al,al
c00155e5:	0f 84 15 01 00 00    	je     c0015700 <opcodeFault(regs*, void*)+0x52a>
c00155eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ee:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00155f1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00155f4:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00155fb:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00155fe:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015601:	89 c2                	mov    edx,eax
c0015603:	b8 00 00 00 00       	mov    eax,0x0
c0015608:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001560b:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001560e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015611:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015614:	ba 00 00 00 00       	mov    edx,0x0
c0015619:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001561c:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001561f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015622:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015625:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015628:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001562f:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015632:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015635:	89 c2                	mov    edx,eax
c0015637:	b8 00 00 00 00       	mov    eax,0x0
c001563c:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001563f:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015642:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015645:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015648:	ba 00 00 00 00       	mov    edx,0x0
c001564d:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015650:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015653:	e8 d4 87 00 00       	call   c001de2c <lockScheduler()>
c0015658:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001565b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001565e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015660:	89 c1                	mov    ecx,eax
c0015662:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015665:	89 cb                	mov    ebx,ecx
c0015667:	89 d0                	mov    eax,edx
c0015669:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c001566c:	89 c6                	mov    esi,eax
c001566e:	89 f0                	mov    eax,esi
c0015670:	09 d8                	or     eax,ebx
c0015672:	85 c0                	test   eax,eax
c0015674:	75 21                	jne    c0015697 <opcodeFault(regs*, void*)+0x4c1>
c0015676:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015679:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001567c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001567f:	89 01                	mov    DWORD PTR [ecx],eax
c0015681:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015684:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015687:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001568a:	83 c8 40             	or     eax,0x40
c001568d:	89 c2                	mov    edx,eax
c001568f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015692:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015695:	eb 3e                	jmp    c00156d5 <opcodeFault(regs*, void*)+0x4ff>
c0015697:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001569a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001569d:	8b 00                	mov    eax,DWORD PTR [eax]
c001569f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00156a2:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00156a5:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00156a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ab:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00156ae:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00156b1:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00156b4:	89 d0                	mov    eax,edx
c00156b6:	31 d2                	xor    edx,edx
c00156b8:	89 c3                	mov    ebx,eax
c00156ba:	89 d6                	mov    esi,edx
c00156bc:	89 da                	mov    edx,ebx
c00156be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c1:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00156c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00156ca:	83 e0 bf             	and    eax,0xffffffbf
c00156cd:	89 c2                	mov    edx,eax
c00156cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d2:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00156d5:	e8 54 87 00 00       	call   c001de2e <unlockScheduler()>
c00156da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156dd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156e0:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00156e3:	01 c2                	add    edx,eax
c00156e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156eb:	83 ec 0c             	sub    esp,0xc
c00156ee:	68 5e b2 02 c0       	push   0xc002b25e
c00156f3:	e8 cb d6 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00156f8:	83 c4 10             	add    esp,0x10
c00156fb:	e9 d5 00 00 00       	jmp    c00157d5 <opcodeFault(regs*, void*)+0x5ff>
c0015700:	83 ec 0c             	sub    esp,0xc
c0015703:	68 71 b2 02 c0       	push   0xc002b271
c0015708:	e8 b6 d6 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001570d:	83 c4 10             	add    esp,0x10
c0015710:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015713:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015716:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015719:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001571c:	c1 e0 04             	shl    eax,0x4
c001571f:	01 d0                	add    eax,edx
c0015721:	83 c0 03             	add    eax,0x3
c0015724:	8a 00                	mov    al,BYTE PTR [eax]
c0015726:	0f b6 d8             	movzx  ebx,al
c0015729:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001572f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015732:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015735:	c1 e0 04             	shl    eax,0x4
c0015738:	01 d0                	add    eax,edx
c001573a:	83 c0 02             	add    eax,0x2
c001573d:	8a 00                	mov    al,BYTE PTR [eax]
c001573f:	0f b6 c8             	movzx  ecx,al
c0015742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015745:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015748:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001574b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001574e:	c1 e0 04             	shl    eax,0x4
c0015751:	01 d0                	add    eax,edx
c0015753:	40                   	inc    eax
c0015754:	8a 00                	mov    al,BYTE PTR [eax]
c0015756:	0f b6 d0             	movzx  edx,al
c0015759:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001575c:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001575f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015762:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015765:	c1 e0 04             	shl    eax,0x4
c0015768:	01 f0                	add    eax,esi
c001576a:	8a 00                	mov    al,BYTE PTR [eax]
c001576c:	0f b6 c0             	movzx  eax,al
c001576f:	83 ec 0c             	sub    esp,0xc
c0015772:	53                   	push   ebx
c0015773:	51                   	push   ecx
c0015774:	52                   	push   edx
c0015775:	50                   	push   eax
c0015776:	68 84 b2 02 c0       	push   0xc002b284
c001577b:	e8 43 d6 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0015780:	83 c4 20             	add    esp,0x20
c0015783:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015786:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015789:	83 c0 03             	add    eax,0x3
c001578c:	8a 00                	mov    al,BYTE PTR [eax]
c001578e:	0f b6 d8             	movzx  ebx,al
c0015791:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015794:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015797:	83 c0 02             	add    eax,0x2
c001579a:	8a 00                	mov    al,BYTE PTR [eax]
c001579c:	0f b6 c8             	movzx  ecx,al
c001579f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157a5:	40                   	inc    eax
c00157a6:	8a 00                	mov    al,BYTE PTR [eax]
c00157a8:	0f b6 d0             	movzx  edx,al
c00157ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ae:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157b1:	8a 00                	mov    al,BYTE PTR [eax]
c00157b3:	0f b6 c0             	movzx  eax,al
c00157b6:	83 ec 0c             	sub    esp,0xc
c00157b9:	53                   	push   ebx
c00157ba:	51                   	push   ecx
c00157bb:	52                   	push   edx
c00157bc:	50                   	push   eax
c00157bd:	68 ac b2 02 c0       	push   0xc002b2ac
c00157c2:	e8 fc d5 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00157c7:	83 c4 20             	add    esp,0x20
c00157ca:	83 ec 0c             	sub    esp,0xc
c00157cd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00157d0:	e8 6b f4 ff ff       	call   c0014c40 <displayDebugInfo(regs*)>
c00157d5:	8d 65 f8             	lea    esp,[ebp-0x8]
c00157d8:	5b                   	pop    ebx
c00157d9:	5e                   	pop    esi
c00157da:	5d                   	pop    ebp
c00157db:	c3                   	ret    

c00157dc <displayProgramFault(char const*)>:
c00157dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157e1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157e4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00157ea:	85 c0                	test   eax,eax
c00157ec:	74 15                	je     c0015803 <displayProgramFault(char const*)+0x27>
c00157ee:	83 ec 0c             	sub    esp,0xc
c00157f1:	6a 04                	push   0x4
c00157f3:	6a 0f                	push   0xf
c00157f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00157f9:	50                   	push   eax
c00157fa:	e8 e5 b4 ff ff       	call   c0010ce4 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00157ff:	83 c4 1c             	add    esp,0x1c
c0015802:	c3                   	ret    
c0015803:	c3                   	ret    

c0015804 <setupInterruptController()>:
c0015804:	55                   	push   ebp
c0015805:	89 e5                	mov    ebp,esp
c0015807:	53                   	push   ebx
c0015808:	83 ec 24             	sub    esp,0x24
c001580b:	b8 00 00 00 00       	mov    eax,0x0
c0015810:	85 c0                	test   eax,eax
c0015812:	0f 95 c0             	setne  al
c0015815:	84 c0                	test   al,al
c0015817:	74 5b                	je     c0015874 <setupInterruptController()+0x70>
c0015819:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015820:	83 ec 0c             	sub    esp,0xc
c0015823:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015826:	e8 20 a0 ff ff       	call   c000f84b <malloc>
c001582b:	83 c4 10             	add    esp,0x10
c001582e:	89 c3                	mov    ebx,eax
c0015830:	83 ec 0c             	sub    esp,0xc
c0015833:	53                   	push   ebx
c0015834:	e8 df 02 01 00       	call   c0025b18 <APIC::APIC()>
c0015839:	83 c4 10             	add    esp,0x10
c001583c:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001583f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015842:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015845:	8b 00                	mov    eax,DWORD PTR [eax]
c0015847:	83 c0 08             	add    eax,0x8
c001584a:	8b 00                	mov    eax,DWORD PTR [eax]
c001584c:	6a 00                	push   0x0
c001584e:	6a 00                	push   0x0
c0015850:	6a 00                	push   0x0
c0015852:	52                   	push   edx
c0015853:	ff d0                	call   eax
c0015855:	83 c4 10             	add    esp,0x10
c0015858:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c001585d:	83 ec 08             	sub    esp,0x8
c0015860:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015863:	50                   	push   eax
c0015864:	e8 87 e9 ff ff       	call   c00141f0 <Device::addChild(Device*)>
c0015869:	83 c4 10             	add    esp,0x10
c001586c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001586f:	e9 89 03 00 00       	jmp    c0015bfd <setupInterruptController()+0x3f9>
c0015874:	a0 c0 10 03 c0       	mov    al,ds:0xc00310c0
c0015879:	84 c0                	test   al,al
c001587b:	75 24                	jne    c00158a1 <setupInterruptController()+0x9d>
c001587d:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0015882:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015888:	83 e2 fe             	and    edx,0xfffffffe
c001588b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015891:	83 ec 0c             	sub    esp,0xc
c0015894:	68 d1 b2 02 c0       	push   0xc002b2d1
c0015899:	e8 25 d5 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001589e:	83 c4 10             	add    esp,0x10
c00158a1:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c00158a6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00158ac:	83 e0 01             	and    eax,0x1
c00158af:	84 c0                	test   al,al
c00158b1:	0f 95 c0             	setne  al
c00158b4:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00158b7:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00158be:	83 ec 0c             	sub    esp,0xc
c00158c1:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00158c4:	e8 82 9f ff ff       	call   c000f84b <malloc>
c00158c9:	83 c4 10             	add    esp,0x10
c00158cc:	89 c3                	mov    ebx,eax
c00158ce:	83 ec 0c             	sub    esp,0xc
c00158d1:	53                   	push   ebx
c00158d2:	e8 99 07 01 00       	call   c0026070 <PIC::PIC()>
c00158d7:	83 c4 10             	add    esp,0x10
c00158da:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00158dd:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00158e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00158e5:	83 c0 08             	add    eax,0x8
c00158e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00158ea:	6a 00                	push   0x0
c00158ec:	6a 00                	push   0x0
c00158ee:	6a 00                	push   0x0
c00158f0:	52                   	push   edx
c00158f1:	ff d0                	call   eax
c00158f3:	83 c4 10             	add    esp,0x10
c00158f6:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00158fa:	74 73                	je     c001596f <setupInterruptController()+0x16b>
c00158fc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00158ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015902:	8b 00                	mov    eax,DWORD PTR [eax]
c0015904:	83 c0 0c             	add    eax,0xc
c0015907:	8b 00                	mov    eax,DWORD PTR [eax]
c0015909:	6a 00                	push   0x0
c001590b:	6a 00                	push   0x0
c001590d:	6a 00                	push   0x0
c001590f:	52                   	push   edx
c0015910:	ff d0                	call   eax
c0015912:	83 c4 10             	add    esp,0x10
c0015915:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015919:	74 15                	je     c0015930 <setupInterruptController()+0x12c>
c001591b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001591e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015920:	83 c0 04             	add    eax,0x4
c0015923:	8b 00                	mov    eax,DWORD PTR [eax]
c0015925:	83 ec 0c             	sub    esp,0xc
c0015928:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001592b:	ff d0                	call   eax
c001592d:	83 c4 10             	add    esp,0x10
c0015930:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015937:	83 ec 0c             	sub    esp,0xc
c001593a:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001593d:	e8 09 9f ff ff       	call   c000f84b <malloc>
c0015942:	83 c4 10             	add    esp,0x10
c0015945:	89 c3                	mov    ebx,eax
c0015947:	83 ec 0c             	sub    esp,0xc
c001594a:	53                   	push   ebx
c001594b:	e8 c8 01 01 00       	call   c0025b18 <APIC::APIC()>
c0015950:	83 c4 10             	add    esp,0x10
c0015953:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015956:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015959:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001595c:	8b 00                	mov    eax,DWORD PTR [eax]
c001595e:	83 c0 08             	add    eax,0x8
c0015961:	8b 00                	mov    eax,DWORD PTR [eax]
c0015963:	6a 00                	push   0x0
c0015965:	6a 00                	push   0x0
c0015967:	6a 00                	push   0x0
c0015969:	52                   	push   edx
c001596a:	ff d0                	call   eax
c001596c:	83 c4 10             	add    esp,0x10
c001596f:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0015974:	83 ec 08             	sub    esp,0x8
c0015977:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001597a:	50                   	push   eax
c001597b:	e8 70 e8 ff ff       	call   c00141f0 <Device::addChild(Device*)>
c0015980:	83 c4 10             	add    esp,0x10
c0015983:	c7 05 c8 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e8c8,0x0
c001598d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015990:	8b 00                	mov    eax,DWORD PTR [eax]
c0015992:	83 c0 24             	add    eax,0x24
c0015995:	8b 00                	mov    eax,DWORD PTR [eax]
c0015997:	6a 00                	push   0x0
c0015999:	68 b7 51 01 c0       	push   0xc00151b7
c001599e:	6a 00                	push   0x0
c00159a0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159a3:	ff d0                	call   eax
c00159a5:	83 c4 10             	add    esp,0x10
c00159a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00159ad:	83 c0 24             	add    eax,0x24
c00159b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00159b2:	6a 00                	push   0x0
c00159b4:	68 b7 51 01 c0       	push   0xc00151b7
c00159b9:	6a 01                	push   0x1
c00159bb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159be:	ff d0                	call   eax
c00159c0:	83 c4 10             	add    esp,0x10
c00159c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00159c8:	83 c0 24             	add    eax,0x24
c00159cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00159cd:	6a 00                	push   0x0
c00159cf:	68 9d 4a 01 c0       	push   0xc0014a9d
c00159d4:	6a 02                	push   0x2
c00159d6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159d9:	ff d0                	call   eax
c00159db:	83 c4 10             	add    esp,0x10
c00159de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00159e3:	83 c0 24             	add    eax,0x24
c00159e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00159e8:	6a 00                	push   0x0
c00159ea:	68 b7 51 01 c0       	push   0xc00151b7
c00159ef:	6a 03                	push   0x3
c00159f1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159f4:	ff d0                	call   eax
c00159f6:	83 c4 10             	add    esp,0x10
c00159f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00159fe:	83 c0 24             	add    eax,0x24
c0015a01:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a03:	6a 00                	push   0x0
c0015a05:	68 b7 51 01 c0       	push   0xc00151b7
c0015a0a:	6a 04                	push   0x4
c0015a0c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a0f:	ff d0                	call   eax
c0015a11:	83 c4 10             	add    esp,0x10
c0015a14:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a17:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a19:	83 c0 24             	add    eax,0x24
c0015a1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a1e:	6a 00                	push   0x0
c0015a20:	68 b7 51 01 c0       	push   0xc00151b7
c0015a25:	6a 05                	push   0x5
c0015a27:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a2a:	ff d0                	call   eax
c0015a2c:	83 c4 10             	add    esp,0x10
c0015a2f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a32:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a34:	83 c0 24             	add    eax,0x24
c0015a37:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a39:	6a 00                	push   0x0
c0015a3b:	68 d6 51 01 c0       	push   0xc00151d6
c0015a40:	6a 06                	push   0x6
c0015a42:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a45:	ff d0                	call   eax
c0015a47:	83 c4 10             	add    esp,0x10
c0015a4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a4f:	83 c0 24             	add    eax,0x24
c0015a52:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a54:	6a 00                	push   0x0
c0015a56:	68 cf 50 01 c0       	push   0xc00150cf
c0015a5b:	6a 07                	push   0x7
c0015a5d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a60:	ff d0                	call   eax
c0015a62:	83 c4 10             	add    esp,0x10
c0015a65:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a68:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a6a:	83 c0 24             	add    eax,0x24
c0015a6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a6f:	6a 00                	push   0x0
c0015a71:	68 b8 48 01 c0       	push   0xc00148b8
c0015a76:	6a 08                	push   0x8
c0015a78:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a7b:	ff d0                	call   eax
c0015a7d:	83 c4 10             	add    esp,0x10
c0015a80:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a83:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a85:	83 c0 24             	add    eax,0x24
c0015a88:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a8a:	6a 00                	push   0x0
c0015a8c:	68 b7 51 01 c0       	push   0xc00151b7
c0015a91:	6a 09                	push   0x9
c0015a93:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a96:	ff d0                	call   eax
c0015a98:	83 c4 10             	add    esp,0x10
c0015a9b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa0:	83 c0 24             	add    eax,0x24
c0015aa3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa5:	6a 00                	push   0x0
c0015aa7:	68 b7 51 01 c0       	push   0xc00151b7
c0015aac:	6a 0a                	push   0xa
c0015aae:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ab1:	ff d0                	call   eax
c0015ab3:	83 c4 10             	add    esp,0x10
c0015ab6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ab9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015abb:	83 c0 24             	add    eax,0x24
c0015abe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac0:	6a 00                	push   0x0
c0015ac2:	68 b7 51 01 c0       	push   0xc00151b7
c0015ac7:	6a 0b                	push   0xb
c0015ac9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015acc:	ff d0                	call   eax
c0015ace:	83 c4 10             	add    esp,0x10
c0015ad1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ad4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad6:	83 c0 24             	add    eax,0x24
c0015ad9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015adb:	6a 00                	push   0x0
c0015add:	68 b7 51 01 c0       	push   0xc00151b7
c0015ae2:	6a 0c                	push   0xc
c0015ae4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ae7:	ff d0                	call   eax
c0015ae9:	83 c4 10             	add    esp,0x10
c0015aec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aef:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af1:	83 c0 24             	add    eax,0x24
c0015af4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af6:	6a 00                	push   0x0
c0015af8:	68 42 51 01 c0       	push   0xc0015142
c0015afd:	6a 0d                	push   0xd
c0015aff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b02:	ff d0                	call   eax
c0015b04:	83 c4 10             	add    esp,0x10
c0015b07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b0c:	83 c0 24             	add    eax,0x24
c0015b0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b11:	6a 00                	push   0x0
c0015b13:	68 7b 51 01 c0       	push   0xc001517b
c0015b18:	6a 0e                	push   0xe
c0015b1a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b1d:	ff d0                	call   eax
c0015b1f:	83 c4 10             	add    esp,0x10
c0015b22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b25:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b27:	83 c0 24             	add    eax,0x24
c0015b2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b2c:	6a 00                	push   0x0
c0015b2e:	68 b7 51 01 c0       	push   0xc00151b7
c0015b33:	6a 0f                	push   0xf
c0015b35:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b38:	ff d0                	call   eax
c0015b3a:	83 c4 10             	add    esp,0x10
c0015b3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b40:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b42:	83 c0 24             	add    eax,0x24
c0015b45:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b47:	6a 00                	push   0x0
c0015b49:	68 b7 51 01 c0       	push   0xc00151b7
c0015b4e:	6a 10                	push   0x10
c0015b50:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b53:	ff d0                	call   eax
c0015b55:	83 c4 10             	add    esp,0x10
c0015b58:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b5d:	83 c0 24             	add    eax,0x24
c0015b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b62:	6a 00                	push   0x0
c0015b64:	68 b7 51 01 c0       	push   0xc00151b7
c0015b69:	6a 11                	push   0x11
c0015b6b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b6e:	ff d0                	call   eax
c0015b70:	83 c4 10             	add    esp,0x10
c0015b73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b76:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b78:	83 c0 24             	add    eax,0x24
c0015b7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b7d:	6a 00                	push   0x0
c0015b7f:	68 b7 51 01 c0       	push   0xc00151b7
c0015b84:	6a 12                	push   0x12
c0015b86:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b89:	ff d0                	call   eax
c0015b8b:	83 c4 10             	add    esp,0x10
c0015b8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b91:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b93:	83 c0 24             	add    eax,0x24
c0015b96:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b98:	6a 00                	push   0x0
c0015b9a:	68 b7 51 01 c0       	push   0xc00151b7
c0015b9f:	6a 13                	push   0x13
c0015ba1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ba4:	ff d0                	call   eax
c0015ba6:	83 c4 10             	add    esp,0x10
c0015ba9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bac:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bae:	83 c0 24             	add    eax,0x24
c0015bb1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb3:	6a 00                	push   0x0
c0015bb5:	68 b7 51 01 c0       	push   0xc00151b7
c0015bba:	6a 14                	push   0x14
c0015bbc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bbf:	ff d0                	call   eax
c0015bc1:	83 c4 10             	add    esp,0x10
c0015bc4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bc7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc9:	83 c0 24             	add    eax,0x24
c0015bcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bce:	6a 00                	push   0x0
c0015bd0:	68 b7 51 01 c0       	push   0xc00151b7
c0015bd5:	6a 1e                	push   0x1e
c0015bd7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bda:	ff d0                	call   eax
c0015bdc:	83 c4 10             	add    esp,0x10
c0015bdf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015be2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be4:	83 c0 24             	add    eax,0x24
c0015be7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be9:	6a 00                	push   0x0
c0015beb:	68 c2 c7 01 c0       	push   0xc001c7c2
c0015bf0:	6a 60                	push   0x60
c0015bf2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bf5:	ff d0                	call   eax
c0015bf7:	83 c4 10             	add    esp,0x10
c0015bfa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bfd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015c00:	c9                   	leave  
c0015c01:	c3                   	ret    

c0015c02 <InterruptController::convertLegacyIRQNumber(int)>:
c0015c02:	55                   	push   ebp
c0015c03:	89 e5                	mov    ebp,esp
c0015c05:	83 ec 08             	sub    esp,0x8
c0015c08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c0b:	83 ec 0c             	sub    esp,0xc
c0015c0e:	50                   	push   eax
c0015c0f:	e8 c8 e8 ff ff       	call   c00144dc <Device::getName()>
c0015c14:	83 c4 10             	add    esp,0x10
c0015c17:	8a 00                	mov    al,BYTE PTR [eax]
c0015c19:	3c 41                	cmp    al,0x41
c0015c1b:	0f 94 c0             	sete   al
c0015c1e:	84 c0                	test   al,al
c0015c20:	74 28                	je     c0015c4a <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015c22:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015c26:	7f 12                	jg     c0015c3a <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015c28:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015c2b:	05 80 d9 02 c0       	add    eax,0xc002d980
c0015c30:	8a 00                	mov    al,BYTE PTR [eax]
c0015c32:	0f b6 c0             	movzx  eax,al
c0015c35:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015c38:	eb 10                	jmp    c0015c4a <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015c3a:	83 ec 0c             	sub    esp,0xc
c0015c3d:	68 c0 af 02 c0       	push   0xc002afc0
c0015c42:	e8 48 49 00 00       	call   c001a58f <Krnl::panic(char const*)>
c0015c47:	83 c4 10             	add    esp,0x10
c0015c4a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015c4d:	c9                   	leave  
c0015c4e:	c3                   	ret    
c0015c4f:	90                   	nop

c0015c50 <startGUI(void*)>:
c0015c50:	55                   	push   ebp
c0015c51:	89 e5                	mov    ebp,esp
c0015c53:	53                   	push   ebx
c0015c54:	83 ec 04             	sub    esp,0x4
c0015c57:	e8 d2 81 00 00       	call   c001de2e <unlockScheduler()>
c0015c5c:	8b 1d 28 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e728
c0015c62:	83 ec 08             	sub    esp,0x8
c0015c65:	6a 01                	push   0x1
c0015c67:	68 34 b3 02 c0       	push   0xc002b334
c0015c6c:	e8 14 7b 00 00       	call   c001d785 <Thr::loadDLL(char const*, bool)>
c0015c71:	83 c4 10             	add    esp,0x10
c0015c74:	83 ec 08             	sub    esp,0x8
c0015c77:	53                   	push   ebx
c0015c78:	50                   	push   eax
c0015c79:	e8 3b 7d 00 00       	call   c001d9b9 <Thr::executeDLL(unsigned long, void*)>
c0015c7e:	83 c4 10             	add    esp,0x10
c0015c81:	8b 1d 28 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e728
c0015c87:	83 ec 08             	sub    esp,0x8
c0015c8a:	6a 01                	push   0x1
c0015c8c:	68 4e b3 02 c0       	push   0xc002b34e
c0015c91:	e8 ef 7a 00 00       	call   c001d785 <Thr::loadDLL(char const*, bool)>
c0015c96:	83 c4 10             	add    esp,0x10
c0015c99:	83 ec 08             	sub    esp,0x8
c0015c9c:	53                   	push   ebx
c0015c9d:	50                   	push   eax
c0015c9e:	e8 16 7d 00 00       	call   c001d9b9 <Thr::executeDLL(unsigned long, void*)>
c0015ca3:	83 c4 10             	add    esp,0x10
c0015ca6:	90                   	nop
c0015ca7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015caa:	c9                   	leave  
c0015cab:	c3                   	ret    

c0015cac <startGUIVESA(void*)>:
c0015cac:	55                   	push   ebp
c0015cad:	89 e5                	mov    ebp,esp
c0015caf:	53                   	push   ebx
c0015cb0:	83 ec 04             	sub    esp,0x4
c0015cb3:	e8 76 81 00 00       	call   c001de2e <unlockScheduler()>
c0015cb8:	8b 1d 28 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e728
c0015cbe:	83 ec 08             	sub    esp,0x8
c0015cc1:	6a 01                	push   0x1
c0015cc3:	68 68 b3 02 c0       	push   0xc002b368
c0015cc8:	e8 b8 7a 00 00       	call   c001d785 <Thr::loadDLL(char const*, bool)>
c0015ccd:	83 c4 10             	add    esp,0x10
c0015cd0:	83 ec 08             	sub    esp,0x8
c0015cd3:	53                   	push   ebx
c0015cd4:	50                   	push   eax
c0015cd5:	e8 df 7c 00 00       	call   c001d9b9 <Thr::executeDLL(unsigned long, void*)>
c0015cda:	83 c4 10             	add    esp,0x10
c0015cdd:	8b 1d 28 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e728
c0015ce3:	83 ec 08             	sub    esp,0x8
c0015ce6:	6a 01                	push   0x1
c0015ce8:	68 4e b3 02 c0       	push   0xc002b34e
c0015ced:	e8 93 7a 00 00       	call   c001d785 <Thr::loadDLL(char const*, bool)>
c0015cf2:	83 c4 10             	add    esp,0x10
c0015cf5:	83 ec 08             	sub    esp,0x8
c0015cf8:	53                   	push   ebx
c0015cf9:	50                   	push   eax
c0015cfa:	e8 ba 7c 00 00       	call   c001d9b9 <Thr::executeDLL(unsigned long, void*)>
c0015cff:	83 c4 10             	add    esp,0x10
c0015d02:	90                   	nop
c0015d03:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d06:	c9                   	leave  
c0015d07:	c3                   	ret    

c0015d08 <sendKeyToTerminal(unsigned char)>:
c0015d08:	55                   	push   ebp
c0015d09:	89 e5                	mov    ebp,esp
c0015d0b:	83 ec 28             	sub    esp,0x28
c0015d0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d11:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015d14:	a1 04 e8 02 c0       	mov    eax,ds:0xc002e804
c0015d19:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015d1d:	83 ec 08             	sub    esp,0x8
c0015d20:	52                   	push   edx
c0015d21:	50                   	push   eax
c0015d22:	e8 97 b4 ff ff       	call   c00111be <VgaText::receiveKey(unsigned char)>
c0015d27:	83 c4 10             	add    esp,0x10
c0015d2a:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015d2e:	75 41                	jne    c0015d71 <sendKeyToTerminal(unsigned char)+0x69>
c0015d30:	e8 1e 81 00 00       	call   c001de53 <lockStuff()>
c0015d35:	a1 e0 e8 02 c0       	mov    eax,ds:0xc002e8e0
c0015d3a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015d3d:	c7 05 e0 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e8e0,0x0
c0015d47:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015d4b:	74 1f                	je     c0015d6c <sendKeyToTerminal(unsigned char)+0x64>
c0015d4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d50:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015d53:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015d56:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015d59:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015d5c:	83 ec 0c             	sub    esp,0xc
c0015d5f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015d62:	e8 b0 87 00 00       	call   c001e517 <unblockTask(ThreadControlBlock*)>
c0015d67:	83 c4 10             	add    esp,0x10
c0015d6a:	eb db                	jmp    c0015d47 <sendKeyToTerminal(unsigned char)+0x3f>
c0015d6c:	e8 b6 84 00 00       	call   c001e227 <unlockStuff()>
c0015d71:	90                   	nop
c0015d72:	c9                   	leave  
c0015d73:	c3                   	ret    

c0015d74 <sendKeyboardToken(KeyboardToken)>:
c0015d74:	55                   	push   ebp
c0015d75:	89 e5                	mov    ebp,esp
c0015d77:	83 ec 18             	sub    esp,0x18
c0015d7a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015d7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d80:	0f b7 c0             	movzx  eax,ax
c0015d83:	83 f2 01             	xor    edx,0x1
c0015d86:	88 90 00 e9 02 c0    	mov    BYTE PTR [eax-0x3ffd1700],dl
c0015d8c:	a1 e8 e8 02 c0       	mov    eax,ds:0xc002e8e8
c0015d91:	85 c0                	test   eax,eax
c0015d93:	74 24                	je     c0015db9 <sendKeyboardToken(KeyboardToken)+0x45>
c0015d95:	8b 0d e8 e8 02 c0    	mov    ecx,DWORD PTR ds:0xc002e8e8
c0015d9b:	83 ec 04             	sub    esp,0x4
c0015d9e:	68 00 e9 02 c0       	push   0xc002e900
c0015da3:	83 ec 08             	sub    esp,0x8
c0015da6:	89 e2                	mov    edx,esp
c0015da8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dab:	89 02                	mov    DWORD PTR [edx],eax
c0015dad:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015db0:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015db4:	ff d1                	call   ecx
c0015db6:	83 c4 10             	add    esp,0x10
c0015db9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dbc:	66 3d 03 02          	cmp    ax,0x203
c0015dc0:	75 07                	jne    c0015dc9 <sendKeyboardToken(KeyboardToken)+0x55>
c0015dc2:	a0 00 ea 02 c0       	mov    al,ds:0xc002ea00
c0015dc7:	84 c0                	test   al,al
c0015dc9:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015dcd:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015dd0:	a0 08 ed 02 c0       	mov    al,ds:0xc002ed08
c0015dd5:	38 c2                	cmp    dl,al
c0015dd7:	74 1c                	je     c0015df5 <sendKeyboardToken(KeyboardToken)+0x81>
c0015dd9:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015ddc:	a2 08 ed 02 c0       	mov    ds:0xc002ed08,al
c0015de1:	a0 08 ed 02 c0       	mov    al,ds:0xc002ed08
c0015de6:	0f b6 c0             	movzx  eax,al
c0015de9:	83 ec 0c             	sub    esp,0xc
c0015dec:	50                   	push   eax
c0015ded:	e8 52 a7 ff ff       	call   c0010544 <setTerminalScrollLock(bool)>
c0015df2:	83 c4 10             	add    esp,0x10
c0015df5:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015df8:	84 c0                	test   al,al
c0015dfa:	0f 84 ae 00 00 00    	je     c0015eae <sendKeyboardToken(KeyboardToken)+0x13a>
c0015e00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e03:	66 3d 10 03          	cmp    ax,0x310
c0015e07:	75 06                	jne    c0015e0f <sendKeyboardToken(KeyboardToken)+0x9b>
c0015e09:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015e0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e12:	66 3d 11 03          	cmp    ax,0x311
c0015e16:	75 06                	jne    c0015e1e <sendKeyboardToken(KeyboardToken)+0xaa>
c0015e18:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015e1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e21:	66 3d 12 03          	cmp    ax,0x312
c0015e25:	75 06                	jne    c0015e2d <sendKeyboardToken(KeyboardToken)+0xb9>
c0015e27:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015e2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e30:	66 3d 13 03          	cmp    ax,0x313
c0015e34:	75 06                	jne    c0015e3c <sendKeyboardToken(KeyboardToken)+0xc8>
c0015e36:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015e3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e3f:	66 3d 14 03          	cmp    ax,0x314
c0015e43:	75 06                	jne    c0015e4b <sendKeyboardToken(KeyboardToken)+0xd7>
c0015e45:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015e4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e4e:	66 3d 15 03          	cmp    ax,0x315
c0015e52:	75 06                	jne    c0015e5a <sendKeyboardToken(KeyboardToken)+0xe6>
c0015e54:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015e5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e5d:	66 3d 16 03          	cmp    ax,0x316
c0015e61:	75 06                	jne    c0015e69 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015e63:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015e69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e6c:	66 3d 17 03          	cmp    ax,0x317
c0015e70:	75 06                	jne    c0015e78 <sendKeyboardToken(KeyboardToken)+0x104>
c0015e72:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015e78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e7b:	66 3d 18 03          	cmp    ax,0x318
c0015e7f:	75 06                	jne    c0015e87 <sendKeyboardToken(KeyboardToken)+0x113>
c0015e81:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015e87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e8a:	66 3d 19 03          	cmp    ax,0x319
c0015e8e:	75 06                	jne    c0015e96 <sendKeyboardToken(KeyboardToken)+0x122>
c0015e90:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015e96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e99:	66 3d 1a 03          	cmp    ax,0x31a
c0015e9d:	0f 85 c9 00 00 00    	jne    c0015f6c <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015ea3:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015ea9:	e9 be 00 00 00       	jmp    c0015f6c <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015eae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eb1:	66 3d 10 03          	cmp    ax,0x310
c0015eb5:	75 0a                	jne    c0015ec1 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015eb7:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015ebd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ec1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec4:	66 3d 11 03          	cmp    ax,0x311
c0015ec8:	75 0a                	jne    c0015ed4 <sendKeyboardToken(KeyboardToken)+0x160>
c0015eca:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015ed0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ed4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ed7:	66 3d 12 03          	cmp    ax,0x312
c0015edb:	75 0a                	jne    c0015ee7 <sendKeyboardToken(KeyboardToken)+0x173>
c0015edd:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015ee3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ee7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eea:	66 3d 13 03          	cmp    ax,0x313
c0015eee:	75 0a                	jne    c0015efa <sendKeyboardToken(KeyboardToken)+0x186>
c0015ef0:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015ef6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015efa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015efd:	66 3d 14 03          	cmp    ax,0x314
c0015f01:	75 0a                	jne    c0015f0d <sendKeyboardToken(KeyboardToken)+0x199>
c0015f03:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015f09:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f10:	66 3d 15 03          	cmp    ax,0x315
c0015f14:	75 0a                	jne    c0015f20 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015f16:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f1c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f23:	66 3d 16 03          	cmp    ax,0x316
c0015f27:	75 0a                	jne    c0015f33 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015f29:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015f2f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f36:	66 3d 17 03          	cmp    ax,0x317
c0015f3a:	75 0a                	jne    c0015f46 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015f3c:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015f42:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f49:	66 3d 18 03          	cmp    ax,0x318
c0015f4d:	75 0a                	jne    c0015f59 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015f4f:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015f55:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f5c:	66 3d 19 03          	cmp    ax,0x319
c0015f60:	75 0a                	jne    c0015f6c <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015f62:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015f68:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f6f:	66 3d 00 02          	cmp    ax,0x200
c0015f73:	75 2c                	jne    c0015fa1 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015f75:	a0 00 ed 02 c0       	mov    al,ds:0xc002ed00
c0015f7a:	83 f0 01             	xor    eax,0x1
c0015f7d:	84 c0                	test   al,al
c0015f7f:	74 20                	je     c0015fa1 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015f81:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0015f86:	6a 01                	push   0x1
c0015f88:	6a 00                	push   0x0
c0015f8a:	68 50 5c 01 c0       	push   0xc0015c50
c0015f8f:	50                   	push   eax
c0015f90:	e8 c9 7f 00 00       	call   c001df5e <Process::createThread(void (*)(void*), void*, int)>
c0015f95:	83 c4 10             	add    esp,0x10
c0015f98:	c6 05 00 ed 02 c0 01 	mov    BYTE PTR ds:0xc002ed00,0x1
c0015f9f:	eb 33                	jmp    c0015fd4 <sendKeyboardToken(KeyboardToken)+0x260>
c0015fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa4:	66 3d 01 02          	cmp    ax,0x201
c0015fa8:	75 2a                	jne    c0015fd4 <sendKeyboardToken(KeyboardToken)+0x260>
c0015faa:	a0 00 ed 02 c0       	mov    al,ds:0xc002ed00
c0015faf:	83 f0 01             	xor    eax,0x1
c0015fb2:	84 c0                	test   al,al
c0015fb4:	74 1e                	je     c0015fd4 <sendKeyboardToken(KeyboardToken)+0x260>
c0015fb6:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0015fbb:	6a 01                	push   0x1
c0015fbd:	6a 00                	push   0x0
c0015fbf:	68 ac 5c 01 c0       	push   0xc0015cac
c0015fc4:	50                   	push   eax
c0015fc5:	e8 94 7f 00 00       	call   c001df5e <Process::createThread(void (*)(void*), void*, int)>
c0015fca:	83 c4 10             	add    esp,0x10
c0015fcd:	c6 05 00 ed 02 c0 01 	mov    BYTE PTR ds:0xc002ed00,0x1
c0015fd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd7:	66 3d 1d 03          	cmp    ax,0x31d
c0015fdb:	75 06                	jne    c0015fe3 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015fdd:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015fe3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe6:	66 3d 1c 03          	cmp    ax,0x31c
c0015fea:	75 06                	jne    c0015ff2 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015fec:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015ff2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff5:	66 3d 1b 03          	cmp    ax,0x31b
c0015ff9:	75 06                	jne    c0016001 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015ffb:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0016001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016004:	66 3d 1e 03          	cmp    ax,0x31e
c0016008:	75 06                	jne    c0016010 <sendKeyboardToken(KeyboardToken)+0x29c>
c001600a:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0016010:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016013:	66 3d 1f 03          	cmp    ax,0x31f
c0016017:	75 06                	jne    c001601f <sendKeyboardToken(KeyboardToken)+0x2ab>
c0016019:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001601f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016022:	66 3d 1a 03          	cmp    ax,0x31a
c0016026:	75 06                	jne    c001602e <sendKeyboardToken(KeyboardToken)+0x2ba>
c0016028:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001602e:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0016032:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016035:	83 f0 01             	xor    eax,0x1
c0016038:	84 c0                	test   al,al
c001603a:	74 77                	je     c00160b3 <sendKeyboardToken(KeyboardToken)+0x33f>
c001603c:	a0 01 ea 02 c0       	mov    al,ds:0xc002ea01
c0016041:	84 c0                	test   al,al
c0016043:	74 41                	je     c0016086 <sendKeyboardToken(KeyboardToken)+0x312>
c0016045:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016049:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001604d:	74 2b                	je     c001607a <sendKeyboardToken(KeyboardToken)+0x306>
c001604f:	8b 15 04 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002ed04
c0016055:	89 d0                	mov    eax,edx
c0016057:	c1 e0 02             	shl    eax,0x2
c001605a:	01 d0                	add    eax,edx
c001605c:	01 c0                	add    eax,eax
c001605e:	a3 04 ed 02 c0       	mov    ds:0xc002ed04,eax
c0016063:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016066:	0f b7 c0             	movzx  eax,ax
c0016069:	8d 50 d0             	lea    edx,[eax-0x30]
c001606c:	a1 04 ed 02 c0       	mov    eax,ds:0xc002ed04
c0016071:	01 d0                	add    eax,edx
c0016073:	a3 04 ed 02 c0       	mov    ds:0xc002ed04,eax
c0016078:	eb 6d                	jmp    c00160e7 <sendKeyboardToken(KeyboardToken)+0x373>
c001607a:	c7 05 04 ed 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ed04,0x0
c0016084:	eb 61                	jmp    c00160e7 <sendKeyboardToken(KeyboardToken)+0x373>
c0016086:	a1 04 ed 02 c0       	mov    eax,ds:0xc002ed04
c001608b:	85 c0                	test   eax,eax
c001608d:	74 18                	je     c00160a7 <sendKeyboardToken(KeyboardToken)+0x333>
c001608f:	a1 04 ed 02 c0       	mov    eax,ds:0xc002ed04
c0016094:	0f b6 c0             	movzx  eax,al
c0016097:	83 ec 0c             	sub    esp,0xc
c001609a:	50                   	push   eax
c001609b:	e8 68 fc ff ff       	call   c0015d08 <sendKeyToTerminal(unsigned char)>
c00160a0:	83 c4 10             	add    esp,0x10
c00160a3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00160a7:	c7 05 04 ed 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ed04,0x0
c00160b1:	eb 34                	jmp    c00160e7 <sendKeyboardToken(KeyboardToken)+0x373>
c00160b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160b6:	66 3d 01 01          	cmp    ax,0x101
c00160ba:	75 2b                	jne    c00160e7 <sendKeyboardToken(KeyboardToken)+0x373>
c00160bc:	a1 04 ed 02 c0       	mov    eax,ds:0xc002ed04
c00160c1:	85 c0                	test   eax,eax
c00160c3:	74 18                	je     c00160dd <sendKeyboardToken(KeyboardToken)+0x369>
c00160c5:	a1 04 ed 02 c0       	mov    eax,ds:0xc002ed04
c00160ca:	0f b6 c0             	movzx  eax,al
c00160cd:	83 ec 0c             	sub    esp,0xc
c00160d0:	50                   	push   eax
c00160d1:	e8 32 fc ff ff       	call   c0015d08 <sendKeyToTerminal(unsigned char)>
c00160d6:	83 c4 10             	add    esp,0x10
c00160d9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00160dd:	c7 05 04 ed 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ed04,0x0
c00160e7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00160ea:	83 f0 01             	xor    eax,0x1
c00160ed:	84 c0                	test   al,al
c00160ef:	74 4c                	je     c001613d <sendKeyboardToken(KeyboardToken)+0x3c9>
c00160f1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00160f4:	83 f0 01             	xor    eax,0x1
c00160f7:	84 c0                	test   al,al
c00160f9:	74 42                	je     c001613d <sendKeyboardToken(KeyboardToken)+0x3c9>
c00160fb:	a0 00 ea 02 c0       	mov    al,ds:0xc002ea00
c0016100:	83 f0 01             	xor    eax,0x1
c0016103:	84 c0                	test   al,al
c0016105:	74 36                	je     c001613d <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016107:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001610a:	66 83 f8 1f          	cmp    ax,0x1f
c001610e:	76 09                	jbe    c0016119 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0016110:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016113:	66 83 f8 7e          	cmp    ax,0x7e
c0016117:	76 12                	jbe    c001612b <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016119:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001611c:	66 83 f8 0a          	cmp    ax,0xa
c0016120:	74 09                	je     c001612b <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016122:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016125:	66 83 f8 08          	cmp    ax,0x8
c0016129:	75 12                	jne    c001613d <sendKeyboardToken(KeyboardToken)+0x3c9>
c001612b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001612e:	0f b6 c0             	movzx  eax,al
c0016131:	83 ec 0c             	sub    esp,0xc
c0016134:	50                   	push   eax
c0016135:	e8 ce fb ff ff       	call   c0015d08 <sendKeyToTerminal(unsigned char)>
c001613a:	83 c4 10             	add    esp,0x10
c001613d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016140:	83 f0 01             	xor    eax,0x1
c0016143:	84 c0                	test   al,al
c0016145:	74 4f                	je     c0016196 <sendKeyboardToken(KeyboardToken)+0x422>
c0016147:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001614a:	83 f0 01             	xor    eax,0x1
c001614d:	84 c0                	test   al,al
c001614f:	74 45                	je     c0016196 <sendKeyboardToken(KeyboardToken)+0x422>
c0016151:	a0 00 ea 02 c0       	mov    al,ds:0xc002ea00
c0016156:	84 c0                	test   al,al
c0016158:	74 3c                	je     c0016196 <sendKeyboardToken(KeyboardToken)+0x422>
c001615a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001615d:	66 83 f8 3f          	cmp    ax,0x3f
c0016161:	76 33                	jbe    c0016196 <sendKeyboardToken(KeyboardToken)+0x422>
c0016163:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016166:	66 83 f8 7f          	cmp    ax,0x7f
c001616a:	77 2a                	ja     c0016196 <sendKeyboardToken(KeyboardToken)+0x422>
c001616c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001616f:	88 c2                	mov    dl,al
c0016171:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016174:	66 83 f8 5f          	cmp    ax,0x5f
c0016178:	76 04                	jbe    c001617e <sendKeyboardToken(KeyboardToken)+0x40a>
c001617a:	b0 20                	mov    al,0x20
c001617c:	eb 02                	jmp    c0016180 <sendKeyboardToken(KeyboardToken)+0x40c>
c001617e:	b0 00                	mov    al,0x0
c0016180:	29 c2                	sub    edx,eax
c0016182:	88 d0                	mov    al,dl
c0016184:	83 e8 40             	sub    eax,0x40
c0016187:	0f b6 c0             	movzx  eax,al
c001618a:	83 ec 0c             	sub    esp,0xc
c001618d:	50                   	push   eax
c001618e:	e8 75 fb ff ff       	call   c0015d08 <sendKeyToTerminal(unsigned char)>
c0016193:	83 c4 10             	add    esp,0x10
c0016196:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016199:	66 3d 00 03          	cmp    ax,0x300
c001619d:	75 0f                	jne    c00161ae <sendKeyboardToken(KeyboardToken)+0x43a>
c001619f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161a2:	83 f0 01             	xor    eax,0x1
c00161a5:	84 c0                	test   al,al
c00161a7:	74 05                	je     c00161ae <sendKeyboardToken(KeyboardToken)+0x43a>
c00161a9:	e8 0e ab ff ff       	call   c0010cbc <doTerminalCycle()>
c00161ae:	90                   	nop
c00161af:	c9                   	leave  
c00161b0:	c3                   	ret    

c00161b1 <clearInternalKeybuffer(VgaText*)>:
c00161b1:	55                   	push   ebp
c00161b2:	89 e5                	mov    ebp,esp
c00161b4:	83 ec 08             	sub    esp,0x8
c00161b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161ba:	05 98 01 00 00       	add    eax,0x198
c00161bf:	83 ec 0c             	sub    esp,0xc
c00161c2:	50                   	push   eax
c00161c3:	e8 d4 a5 fe ff       	call   c000079c <strlen>
c00161c8:	83 c4 10             	add    esp,0x10
c00161cb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00161ce:	81 c2 98 01 00 00    	add    edx,0x198
c00161d4:	83 ec 04             	sub    esp,0x4
c00161d7:	50                   	push   eax
c00161d8:	6a 00                	push   0x0
c00161da:	52                   	push   edx
c00161db:	e8 a0 a5 fe ff       	call   c0000780 <memset>
c00161e0:	83 c4 10             	add    esp,0x10
c00161e3:	90                   	nop
c00161e4:	c9                   	leave  
c00161e5:	c3                   	ret    

c00161e6 <readKeyboard(VgaText*, char*, unsigned long)>:
c00161e6:	55                   	push   ebp
c00161e7:	89 e5                	mov    ebp,esp
c00161e9:	83 ec 18             	sub    esp,0x18
c00161ec:	a1 e8 e8 02 c0       	mov    eax,ds:0xc002e8e8
c00161f1:	85 c0                	test   eax,eax
c00161f3:	74 2a                	je     c001621f <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c00161f5:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c00161fb:	8b 0d e8 e8 02 c0    	mov    ecx,DWORD PTR ds:0xc002e8e8
c0016201:	83 ec 04             	sub    esp,0x4
c0016204:	68 00 e9 02 c0       	push   0xc002e900
c0016209:	83 ec 08             	sub    esp,0x8
c001620c:	89 e2                	mov    edx,esp
c001620e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0016211:	89 02                	mov    DWORD PTR [edx],eax
c0016213:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0016216:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001621a:	ff d1                	call   ecx
c001621c:	83 c4 10             	add    esp,0x10
c001621f:	83 ec 0c             	sub    esp,0xc
c0016222:	68 83 b3 02 c0       	push   0xc002b383
c0016227:	e8 97 cb ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001622c:	83 c4 10             	add    esp,0x10
c001622f:	fb                   	sti    
c0016230:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016237:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001623b:	0f 84 8a 00 00 00    	je     c00162cb <readKeyboard(VgaText*, char*, unsigned long)+0xe5>
c0016241:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016244:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c001624a:	84 c0                	test   al,al
c001624c:	75 11                	jne    c001625f <readKeyboard(VgaText*, char*, unsigned long)+0x79>
c001624e:	e8 d9 7b 00 00       	call   c001de2c <lockScheduler()>
c0016253:	e8 4a 7f 00 00       	call   c001e1a2 <schedule()>
c0016258:	e8 d1 7b 00 00       	call   c001de2e <unlockScheduler()>
c001625d:	eb e2                	jmp    c0016241 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c001625f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016262:	8d 50 01             	lea    edx,[eax+0x1]
c0016265:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016268:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001626b:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0016271:	88 10                	mov    BYTE PTR [eax],dl
c0016273:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016276:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c001627c:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001627f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016282:	05 98 01 00 00       	add    eax,0x198
c0016287:	83 ec 0c             	sub    esp,0xc
c001628a:	50                   	push   eax
c001628b:	e8 0c a5 fe ff       	call   c000079c <strlen>
c0016290:	83 c4 10             	add    esp,0x10
c0016293:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016296:	81 c2 98 01 00 00    	add    edx,0x198
c001629c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001629f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162a2:	81 c2 98 01 00 00    	add    edx,0x198
c00162a8:	83 ec 04             	sub    esp,0x4
c00162ab:	50                   	push   eax
c00162ac:	51                   	push   ecx
c00162ad:	52                   	push   edx
c00162ae:	e8 d1 a3 fe ff       	call   c0000684 <memmove>
c00162b3:	83 c4 10             	add    esp,0x10
c00162b6:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00162b9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00162bc:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00162c0:	0f 85 71 ff ff ff    	jne    c0016237 <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c00162c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00162c9:	eb 03                	jmp    c00162ce <readKeyboard(VgaText*, char*, unsigned long)+0xe8>
c00162cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00162ce:	c9                   	leave  
c00162cf:	c3                   	ret    

c00162d0 <Keyboard::Keyboard(char const*)>:
c00162d0:	83 ec 0c             	sub    esp,0xc
c00162d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162d7:	83 ec 08             	sub    esp,0x8
c00162da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162de:	50                   	push   eax
c00162df:	e8 fc e0 ff ff       	call   c00143e0 <Device::Device(char const*)>
c00162e4:	83 c4 10             	add    esp,0x10
c00162e7:	ba a4 b3 02 c0       	mov    edx,0xc002b3a4
c00162ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162f0:	89 10                	mov    DWORD PTR [eax],edx
c00162f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162f6:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016300:	c6 05 e4 e8 02 c0 01 	mov    BYTE PTR ds:0xc002e8e4,0x1
c0016307:	90                   	nop
c0016308:	83 c4 0c             	add    esp,0xc
c001630b:	c3                   	ret    

c001630c <Keyboard::~Keyboard()>:
c001630c:	83 ec 0c             	sub    esp,0xc
c001630f:	ba a4 b3 02 c0       	mov    edx,0xc002b3a4
c0016314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016318:	89 10                	mov    DWORD PTR [eax],edx
c001631a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001631e:	83 ec 0c             	sub    esp,0xc
c0016321:	50                   	push   eax
c0016322:	e8 9b dd ff ff       	call   c00140c2 <Device::~Device()>
c0016327:	83 c4 10             	add    esp,0x10
c001632a:	90                   	nop
c001632b:	83 c4 0c             	add    esp,0xc
c001632e:	c3                   	ret    
c001632f:	90                   	nop

c0016330 <Keyboard::~Keyboard()>:
c0016330:	83 ec 0c             	sub    esp,0xc
c0016333:	83 ec 0c             	sub    esp,0xc
c0016336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001633a:	e8 cd ff ff ff       	call   c001630c <Keyboard::~Keyboard()>
c001633f:	83 c4 10             	add    esp,0x10
c0016342:	83 ec 08             	sub    esp,0x8
c0016345:	68 5c 01 00 00       	push   0x15c
c001634a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001634e:	e8 90 c9 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0016353:	83 c4 10             	add    esp,0x10
c0016356:	83 c4 0c             	add    esp,0xc
c0016359:	c3                   	ret    

c001635a <LogicalDisk::close(int, int, void*)>:
c001635a:	83 c8 ff             	or     eax,0xffffffff
c001635d:	c3                   	ret    

c001635e <LogicalDisk::~LogicalDisk()>:
c001635e:	83 ec 0c             	sub    esp,0xc
c0016361:	ba 54 b4 02 c0       	mov    edx,0xc002b454
c0016366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001636a:	89 10                	mov    DWORD PTR [eax],edx
c001636c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016370:	83 ec 0c             	sub    esp,0xc
c0016373:	50                   	push   eax
c0016374:	e8 49 dd ff ff       	call   c00140c2 <Device::~Device()>
c0016379:	83 c4 10             	add    esp,0x10
c001637c:	90                   	nop
c001637d:	83 c4 0c             	add    esp,0xc
c0016380:	c3                   	ret    
c0016381:	90                   	nop

c0016382 <LogicalDisk::~LogicalDisk()>:
c0016382:	83 ec 0c             	sub    esp,0xc
c0016385:	83 ec 0c             	sub    esp,0xc
c0016388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001638c:	e8 cd ff ff ff       	call   c001635e <LogicalDisk::~LogicalDisk()>
c0016391:	83 c4 10             	add    esp,0x10
c0016394:	83 ec 08             	sub    esp,0x8
c0016397:	68 74 01 00 00       	push   0x174
c001639c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163a0:	e8 3e c9 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00163a5:	83 c4 10             	add    esp,0x10
c00163a8:	83 c4 0c             	add    esp,0xc
c00163ab:	c3                   	ret    

c00163ac <LogicalDisk::open(int, int, void*)>:
c00163ac:	83 ec 18             	sub    esp,0x18
c00163af:	68 d0 b3 02 c0       	push   0xc002b3d0
c00163b4:	e8 d6 41 00 00       	call   c001a58f <Krnl::panic(char const*)>
c00163b9:	83 c8 ff             	or     eax,0xffffffff
c00163bc:	83 c4 1c             	add    esp,0x1c
c00163bf:	c3                   	ret    

c00163c0 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00163c0:	53                   	push   ebx
c00163c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00163c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00163c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163cd:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00163d3:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00163d9:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00163df:	77 10                	ja     c00163f1 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00163e1:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00163e7:	89 d3                	mov    ebx,edx
c00163e9:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00163ef:	72 05                	jb     c00163f6 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00163f1:	83 c8 ff             	or     eax,0xffffffff
c00163f4:	89 c2                	mov    edx,eax
c00163f6:	5b                   	pop    ebx
c00163f7:	c3                   	ret    

c00163f8 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00163f8:	56                   	push   esi
c00163f9:	83 c8 ff             	or     eax,0xffffffff
c00163fc:	53                   	push   ebx
c00163fd:	89 c2                	mov    edx,eax
c00163ff:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016403:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016407:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001640b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016411:	77 27                	ja     c001643a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016413:	89 d8                	mov    eax,ebx
c0016415:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001641b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016421:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016426:	89 c2                	mov    edx,eax
c0016428:	73 10                	jae    c001643a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001642a:	89 c8                	mov    eax,ecx
c001642c:	89 da                	mov    edx,ebx
c001642e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016434:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001643a:	5b                   	pop    ebx
c001643b:	5e                   	pop    esi
c001643c:	c3                   	ret    
c001643d:	90                   	nop

c001643e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001643e:	83 ec 1c             	sub    esp,0x1c
c0016441:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016445:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016449:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001644d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016451:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016455:	89 04 24             	mov    DWORD PTR [esp],eax
c0016458:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001645c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016460:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016464:	83 ec 08             	sub    esp,0x8
c0016467:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001646b:	50                   	push   eax
c001646c:	e8 6f df ff ff       	call   c00143e0 <Device::Device(char const*)>
c0016471:	83 c4 10             	add    esp,0x10
c0016474:	ba 54 b4 02 c0       	mov    edx,0xc002b454
c0016479:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001647d:	89 10                	mov    DWORD PTR [eax],edx
c001647f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016483:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001648a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001648e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016495:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016499:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00164a3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00164a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00164ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164af:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00164b5:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00164bb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00164bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00164c2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00164c6:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00164cc:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00164d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164d6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00164da:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00164e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164e4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00164ee:	90                   	nop
c00164ef:	83 c4 1c             	add    esp,0x1c
c00164f2:	c3                   	ret    
c00164f3:	90                   	nop

c00164f4 <LogicalDisk::assignDriveLetter()>:
c00164f4:	55                   	push   ebp
c00164f5:	57                   	push   edi
c00164f6:	56                   	push   esi
c00164f7:	53                   	push   ebx
c00164f8:	83 ec 14             	sub    esp,0x14
c00164fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00164ff:	8b 3d 20 ed 02 c0    	mov    edi,DWORD PTR ds:0xc002ed20
c0016505:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001650b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001650f:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016515:	8b 3d 24 ed 02 c0    	mov    edi,DWORD PTR ds:0xc002ed24
c001651b:	3c 01                	cmp    al,0x1
c001651d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016521:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016525:	19 c0                	sbb    eax,eax
c0016527:	83 e0 02             	and    eax,0x2
c001652a:	83 c0 41             	add    eax,0x41
c001652d:	0f be e8             	movsx  ebp,al
c0016530:	3c 43                	cmp    al,0x43
c0016532:	75 10                	jne    c0016544 <LogicalDisk::assignDriveLetter()+0x50>
c0016534:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001653b:	75 5d                	jne    c001659a <LogicalDisk::assignDriveLetter()+0xa6>
c001653d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016542:	75 56                	jne    c001659a <LogicalDisk::assignDriveLetter()+0xa6>
c0016544:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016547:	ba 01 00 00 00       	mov    edx,0x1
c001654c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016550:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016554:	d3 e2                	shl    edx,cl
c0016556:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001655a:	89 d7                	mov    edi,edx
c001655c:	89 d6                	mov    esi,edx
c001655e:	c1 ff 1f             	sar    edi,0x1f
c0016561:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016565:	21 f9                	and    ecx,edi
c0016567:	09 d1                	or     ecx,edx
c0016569:	75 2f                	jne    c001659a <LogicalDisk::assignDriveLetter()+0xa6>
c001656b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001656f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016573:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016579:	09 f2                	or     edx,esi
c001657b:	89 15 20 ed 02 c0    	mov    DWORD PTR ds:0xc002ed20,edx
c0016581:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016585:	09 fa                	or     edx,edi
c0016587:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001658b:	89 15 24 ed 02 c0    	mov    DWORD PTR ds:0xc002ed24,edx
c0016591:	89 1c bd 40 ed 02 c0 	mov    DWORD PTR [edi*4-0x3ffd12c0],ebx
c0016598:	eb 08                	jmp    c00165a2 <LogicalDisk::assignDriveLetter()+0xae>
c001659a:	45                   	inc    ebp
c001659b:	40                   	inc    eax
c001659c:	3c 5b                	cmp    al,0x5b
c001659e:	75 90                	jne    c0016530 <LogicalDisk::assignDriveLetter()+0x3c>
c00165a0:	31 c0                	xor    eax,eax
c00165a2:	83 c4 14             	add    esp,0x14
c00165a5:	5b                   	pop    ebx
c00165a6:	5e                   	pop    esi
c00165a7:	5f                   	pop    edi
c00165a8:	5d                   	pop    ebp
c00165a9:	c3                   	ret    

c00165aa <LogicalDisk::mount()>:
c00165aa:	56                   	push   esi
c00165ab:	53                   	push   ebx
c00165ac:	51                   	push   ecx
c00165ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00165b1:	8b 1d b4 e8 02 c0    	mov    ebx,DWORD PTR ds:0xc002e8b4
c00165b7:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00165c1:	85 db                	test   ebx,ebx
c00165c3:	74 50                	je     c0016615 <LogicalDisk::mount()+0x6b>
c00165c5:	e8 4d 78 00 00       	call   c001de17 <getIRQNestingLevel()>
c00165ca:	52                   	push   edx
c00165cb:	52                   	push   edx
c00165cc:	50                   	push   eax
c00165cd:	68 f4 b3 02 c0       	push   0xc002b3f4
c00165d2:	e8 ec c7 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00165d7:	83 c4 0c             	add    esp,0xc
c00165da:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00165e1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00165e3:	83 e8 41             	sub    eax,0x41
c00165e6:	50                   	push   eax
c00165e7:	56                   	push   esi
c00165e8:	53                   	push   ebx
c00165e9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00165ec:	83 c4 10             	add    esp,0x10
c00165ef:	84 c0                	test   al,al
c00165f1:	74 08                	je     c00165fb <LogicalDisk::mount()+0x51>
c00165f3:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00165f9:	eb 1c                	jmp    c0016617 <LogicalDisk::mount()+0x6d>
c00165fb:	e8 17 78 00 00       	call   c001de17 <getIRQNestingLevel()>
c0016600:	51                   	push   ecx
c0016601:	51                   	push   ecx
c0016602:	50                   	push   eax
c0016603:	68 0f b4 02 c0       	push   0xc002b40f
c0016608:	e8 b6 c7 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001660d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016610:	83 c4 10             	add    esp,0x10
c0016613:	eb ac                	jmp    c00165c1 <LogicalDisk::mount()+0x17>
c0016615:	31 c0                	xor    eax,eax
c0016617:	5a                   	pop    edx
c0016618:	5b                   	pop    ebx
c0016619:	5e                   	pop    esi
c001661a:	c3                   	ret    
c001661b:	90                   	nop

c001661c <LogicalDisk::unmount()>:
c001661c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016620:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001662a:	c3                   	ret    
c001662b:	90                   	nop

c001662c <LogicalDisk::eject()>:
c001662c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016630:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016636:	8b 10                	mov    edx,DWORD PTR [eax]
c0016638:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001663c:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001663f:	90                   	nop

c0016640 <LogicalDisk::unassignDriveLetter()>:
c0016640:	57                   	push   edi
c0016641:	56                   	push   esi
c0016642:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016646:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001664d:	84 c9                	test   cl,cl
c001664f:	75 0f                	jne    c0016660 <LogicalDisk::unassignDriveLetter()+0x20>
c0016651:	c7 44 24 0c 2a b4 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b42a
c0016659:	5e                   	pop    esi
c001665a:	5f                   	pop    edi
c001665b:	e9 2f 3f 00 00       	jmp    c001a58f <Krnl::panic(char const*)>
c0016660:	83 e9 41             	sub    ecx,0x41
c0016663:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001666a:	b8 01 00 00 00       	mov    eax,0x1
c001666f:	c7 04 8d 40 ed 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd12c0],0x0
c001667a:	d3 e0                	shl    eax,cl
c001667c:	89 c7                	mov    edi,eax
c001667e:	f7 d0                	not    eax
c0016680:	c1 ff 1f             	sar    edi,0x1f
c0016683:	21 05 20 ed 02 c0    	and    DWORD PTR ds:0xc002ed20,eax
c0016689:	89 fe                	mov    esi,edi
c001668b:	f7 d6                	not    esi
c001668d:	21 35 24 ed 02 c0    	and    DWORD PTR ds:0xc002ed24,esi
c0016693:	5e                   	pop    esi
c0016694:	5f                   	pop    edi
c0016695:	c3                   	ret    

c0016696 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016696:	57                   	push   edi
c0016697:	56                   	push   esi
c0016698:	53                   	push   ebx
c0016699:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001669d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166a1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00166a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166a9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00166af:	77 41                	ja     c00166f2 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00166b1:	99                   	cdq    
c00166b2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00166b8:	01 c8                	add    eax,ecx
c00166ba:	11 da                	adc    edx,ebx
c00166bc:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00166c2:	19 d7                	sbb    edi,edx
c00166c4:	72 33                	jb     c00166f9 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00166c6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00166cc:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00166d2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00166d6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00166da:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00166e0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00166e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00166ea:	5b                   	pop    ebx
c00166eb:	5e                   	pop    esi
c00166ec:	5f                   	pop    edi
c00166ed:	e9 fc 0a 00 00       	jmp    c00171ee <VCache::read(unsigned long long, int, void*)>
c00166f2:	b8 05 00 00 00       	mov    eax,0x5
c00166f7:	eb 05                	jmp    c00166fe <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00166f9:	b8 07 00 00 00       	mov    eax,0x7
c00166fe:	5b                   	pop    ebx
c00166ff:	5e                   	pop    esi
c0016700:	5f                   	pop    edi
c0016701:	c3                   	ret    

c0016702 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016702:	57                   	push   edi
c0016703:	56                   	push   esi
c0016704:	53                   	push   ebx
c0016705:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016709:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001670d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016711:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016715:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001671b:	77 41                	ja     c001675e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001671d:	99                   	cdq    
c001671e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016724:	01 c8                	add    eax,ecx
c0016726:	11 da                	adc    edx,ebx
c0016728:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001672e:	19 d7                	sbb    edi,edx
c0016730:	72 33                	jb     c0016765 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016732:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016738:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001673e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016742:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016746:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001674c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016752:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016756:	5b                   	pop    ebx
c0016757:	5e                   	pop    esi
c0016758:	5f                   	pop    edi
c0016759:	e9 9a 09 00 00       	jmp    c00170f8 <VCache::write(unsigned long long, int, void*)>
c001675e:	b8 05 00 00 00       	mov    eax,0x5
c0016763:	eb 05                	jmp    c001676a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016765:	b8 07 00 00 00       	mov    eax,0x7
c001676a:	5b                   	pop    ebx
c001676b:	5e                   	pop    esi
c001676c:	5f                   	pop    edi
c001676d:	c3                   	ret    

c001676e <Mouse::Mouse(char const*)>:
c001676e:	83 ec 0c             	sub    esp,0xc
c0016771:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016775:	83 ec 08             	sub    esp,0x8
c0016778:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001677c:	50                   	push   eax
c001677d:	e8 5e dc ff ff       	call   c00143e0 <Device::Device(char const*)>
c0016782:	83 c4 10             	add    esp,0x10
c0016785:	ba 80 b4 02 c0       	mov    edx,0xc002b480
c001678a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001678e:	89 10                	mov    DWORD PTR [eax],edx
c0016790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016794:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001679e:	90                   	nop
c001679f:	83 c4 0c             	add    esp,0xc
c00167a2:	c3                   	ret    
c00167a3:	90                   	nop

c00167a4 <Mouse::~Mouse()>:
c00167a4:	83 ec 0c             	sub    esp,0xc
c00167a7:	ba 80 b4 02 c0       	mov    edx,0xc002b480
c00167ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167b0:	89 10                	mov    DWORD PTR [eax],edx
c00167b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167b6:	83 ec 0c             	sub    esp,0xc
c00167b9:	50                   	push   eax
c00167ba:	e8 03 d9 ff ff       	call   c00140c2 <Device::~Device()>
c00167bf:	83 c4 10             	add    esp,0x10
c00167c2:	90                   	nop
c00167c3:	83 c4 0c             	add    esp,0xc
c00167c6:	c3                   	ret    
c00167c7:	90                   	nop

c00167c8 <Mouse::~Mouse()>:
c00167c8:	83 ec 0c             	sub    esp,0xc
c00167cb:	83 ec 0c             	sub    esp,0xc
c00167ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167d2:	e8 cd ff ff ff       	call   c00167a4 <Mouse::~Mouse()>
c00167d7:	83 c4 10             	add    esp,0x10
c00167da:	83 ec 08             	sub    esp,0x8
c00167dd:	68 58 01 00 00       	push   0x158
c00167e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167e6:	e8 f8 c4 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00167eb:	83 c4 10             	add    esp,0x10
c00167ee:	83 c4 0c             	add    esp,0xc
c00167f1:	c3                   	ret    

c00167f2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00167f2:	55                   	push   ebp
c00167f3:	57                   	push   edi
c00167f4:	56                   	push   esi
c00167f5:	53                   	push   ebx
c00167f6:	81 ec 20 01 00 00    	sub    esp,0x120
c00167fc:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c0016803:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001680a:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016811:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016818:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001681c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016820:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016824:	56                   	push   esi
c0016825:	68 a4 b4 02 c0       	push   0xc002b4a4
c001682a:	e8 94 c5 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001682f:	58                   	pop    eax
c0016830:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016837:	e8 a0 dc ff ff       	call   c00144dc <Device::getName()>
c001683c:	5a                   	pop    edx
c001683d:	59                   	pop    ecx
c001683e:	50                   	push   eax
c001683f:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0016843:	53                   	push   ebx
c0016844:	e8 f3 9f fe ff       	call   c000083c <strcpy>
c0016849:	5d                   	pop    ebp
c001684a:	58                   	pop    eax
c001684b:	68 d5 b4 02 c0       	push   0xc002b4d5
c0016850:	53                   	push   ebx
c0016851:	e8 26 a1 fe ff       	call   c000097c <strcat>
c0016856:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001685d:	e8 e9 8f ff ff       	call   c000f84b <malloc>
c0016862:	83 c4 0c             	add    esp,0xc
c0016865:	89 c5                	mov    ebp,eax
c0016867:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001686b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001686f:	57                   	push   edi
c0016870:	56                   	push   esi
c0016871:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016878:	53                   	push   ebx
c0016879:	50                   	push   eax
c001687a:	e8 bf fb ff ff       	call   c001643e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001687f:	83 c4 14             	add    esp,0x14
c0016882:	55                   	push   ebp
c0016883:	e8 6c fc ff ff       	call   c00164f4 <LogicalDisk::assignDriveLetter()>
c0016888:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001688b:	0f be d8             	movsx  ebx,al
c001688e:	e8 17 fd ff ff       	call   c00165aa <LogicalDisk::mount()>
c0016893:	58                   	pop    eax
c0016894:	5a                   	pop    edx
c0016895:	55                   	push   ebp
c0016896:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001689d:	e8 4e d9 ff ff       	call   c00141f0 <Device::addChild(Device*)>
c00168a2:	59                   	pop    ecx
c00168a3:	5e                   	pop    esi
c00168a4:	53                   	push   ebx
c00168a5:	68 e0 b4 02 c0       	push   0xc002b4e0
c00168aa:	e8 14 c5 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00168af:	81 c4 2c 01 00 00    	add    esp,0x12c
c00168b5:	5b                   	pop    ebx
c00168b6:	5e                   	pop    esi
c00168b7:	5f                   	pop    edi
c00168b8:	5d                   	pop    ebp
c00168b9:	c3                   	ret    

c00168ba <createPartitionsForDisk(PhysicalDisk*)>:
c00168ba:	55                   	push   ebp
c00168bb:	57                   	push   edi
c00168bc:	56                   	push   esi
c00168bd:	53                   	push   ebx
c00168be:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00168c4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00168cb:	81 bb 5c 01 00 00 00 02 00 00 	cmp    DWORD PTR [ebx+0x15c],0x200
c00168d5:	74 39                	je     c0016910 <createPartitionsForDisk(PhysicalDisk*)+0x56>
c00168d7:	83 ec 0c             	sub    esp,0xc
c00168da:	68 02 b5 02 c0       	push   0xc002b502
c00168df:	e8 df c4 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00168e4:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00168ea:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00168f0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00168f6:	0f a4 c2 0a          	shld   edx,eax,0xa
c00168fa:	89 f7                	mov    edi,esi
c00168fc:	c1 e0 0a             	shl    eax,0xa
c00168ff:	c1 ff 1f             	sar    edi,0x1f
c0016902:	57                   	push   edi
c0016903:	56                   	push   esi
c0016904:	52                   	push   edx
c0016905:	50                   	push   eax
c0016906:	e8 99 02 01 00       	call   c0026ba4 <__udivdi3>
c001690b:	e9 c5 00 00 00       	jmp    c00169d5 <createPartitionsForDisk(PhysicalDisk*)+0x11b>
c0016910:	83 ec 0c             	sub    esp,0xc
c0016913:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016915:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016919:	56                   	push   esi
c001691a:	6a 01                	push   0x1
c001691c:	6a 00                	push   0x0
c001691e:	6a 00                	push   0x0
c0016920:	53                   	push   ebx
c0016921:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016924:	83 c4 20             	add    esp,0x20
c0016927:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001692f:	75 0a                	jne    c001693b <createPartitionsForDisk(PhysicalDisk*)+0x81>
c0016931:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016939:	74 36                	je     c0016971 <createPartitionsForDisk(PhysicalDisk*)+0xb7>
c001693b:	83 ec 0c             	sub    esp,0xc
c001693e:	68 1e b5 02 c0       	push   0xc002b51e
c0016943:	e8 7b c4 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0016948:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001694e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016954:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001695a:	0f a4 c2 0a          	shld   edx,eax,0xa
c001695e:	89 f7                	mov    edi,esi
c0016960:	c1 e0 0a             	shl    eax,0xa
c0016963:	c1 ff 1f             	sar    edi,0x1f
c0016966:	57                   	push   edi
c0016967:	56                   	push   esi
c0016968:	52                   	push   edx
c0016969:	50                   	push   eax
c001696a:	e8 35 02 01 00       	call   c0026ba4 <__udivdi3>
c001696f:	eb 64                	jmp    c00169d5 <createPartitionsForDisk(PhysicalDisk*)+0x11b>
c0016971:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016978:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c001697f:	83 e1 7f             	and    ecx,0x7f
c0016982:	83 e0 7f             	and    eax,0x7f
c0016985:	01 c1                	add    ecx,eax
c0016987:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001698e:	83 e0 7f             	and    eax,0x7f
c0016991:	01 c1                	add    ecx,eax
c0016993:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001699a:	83 e0 7f             	and    eax,0x7f
c001699d:	00 c1                	add    cl,al
c001699f:	74 4b                	je     c00169ec <createPartitionsForDisk(PhysicalDisk*)+0x132>
c00169a1:	83 ec 0c             	sub    esp,0xc
c00169a4:	68 3a b5 02 c0       	push   0xc002b53a
c00169a9:	e8 15 c4 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00169ae:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00169b4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00169ba:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00169c0:	0f a4 c2 0a          	shld   edx,eax,0xa
c00169c4:	89 f7                	mov    edi,esi
c00169c6:	c1 e0 0a             	shl    eax,0xa
c00169c9:	c1 ff 1f             	sar    edi,0x1f
c00169cc:	57                   	push   edi
c00169cd:	56                   	push   esi
c00169ce:	52                   	push   edx
c00169cf:	50                   	push   eax
c00169d0:	e8 cf 01 01 00       	call   c0026ba4 <__udivdi3>
c00169d5:	83 c4 14             	add    esp,0x14
c00169d8:	52                   	push   edx
c00169d9:	50                   	push   eax
c00169da:	6a 00                	push   0x0
c00169dc:	6a 00                	push   0x0
c00169de:	53                   	push   ebx
c00169df:	e8 0e fe ff ff       	call   c00167f2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00169e4:	83 c4 20             	add    esp,0x20
c00169e7:	e9 95 01 00 00       	jmp    c0016b81 <createPartitionsForDisk(PhysicalDisk*)+0x2c7>
c00169ec:	89 f0                	mov    eax,esi
c00169ee:	31 f6                	xor    esi,esi
c00169f0:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00169f7:	75 02                	jne    c00169fb <createPartitionsForDisk(PhysicalDisk*)+0x141>
c00169f9:	89 f1                	mov    ecx,esi
c00169fb:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016a02:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016a09:	c1 e2 08             	shl    edx,0x8
c0016a0c:	c1 e7 10             	shl    edi,0x10
c0016a0f:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016a17:	09 fa                	or     edx,edi
c0016a19:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016a21:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016a28:	83 c0 10             	add    eax,0x10
c0016a2b:	09 fa                	or     edx,edi
c0016a2d:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016a34:	c1 e7 18             	shl    edi,0x18
c0016a37:	09 fa                	or     edx,edi
c0016a39:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016a40:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016a44:	c1 e7 10             	shl    edi,0x10
c0016a47:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016a4e:	c1 e2 08             	shl    edx,0x8
c0016a51:	09 fa                	or     edx,edi
c0016a53:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016a5a:	09 fa                	or     edx,edi
c0016a5c:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016a63:	c1 e7 18             	shl    edi,0x18
c0016a66:	09 fa                	or     edx,edi
c0016a68:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016a6c:	46                   	inc    esi
c0016a6d:	83 fe 04             	cmp    esi,0x4
c0016a70:	0f 85 7a ff ff ff    	jne    c00169f0 <createPartitionsForDisk(PhysicalDisk*)+0x136>
c0016a76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a7a:	83 f0 01             	xor    eax,0x1
c0016a7d:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016a81:	75 57                	jne    c0016ada <createPartitionsForDisk(PhysicalDisk*)+0x220>
c0016a83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a87:	83 f0 01             	xor    eax,0x1
c0016a8a:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016a8e:	75 4a                	jne    c0016ada <createPartitionsForDisk(PhysicalDisk*)+0x220>
c0016a90:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016a94:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016a9c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016aa4:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016aaa:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016ab0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016ab6:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016aba:	89 f7                	mov    edi,esi
c0016abc:	c1 e0 0a             	shl    eax,0xa
c0016abf:	c1 ff 1f             	sar    edi,0x1f
c0016ac2:	57                   	push   edi
c0016ac3:	56                   	push   esi
c0016ac4:	52                   	push   edx
c0016ac5:	50                   	push   eax
c0016ac6:	e8 d9 00 01 00       	call   c0026ba4 <__udivdi3>
c0016acb:	83 c4 10             	add    esp,0x10
c0016ace:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016ad2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016ad6:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016ada:	84 c9                	test   cl,cl
c0016adc:	74 53                	je     c0016b31 <createPartitionsForDisk(PhysicalDisk*)+0x277>
c0016ade:	0f b6 c9             	movzx  ecx,cl
c0016ae1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ae5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016ae9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016aed:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016af1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016af5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016af9:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016afd:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016b01:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b05:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016b09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016b0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016b11:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016b15:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016b19:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016b1d:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016b21:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016b25:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016b29:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016b2d:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016b31:	31 ed                	xor    ebp,ebp
c0016b33:	8b 44 ec 30          	mov    eax,DWORD PTR [esp+ebp*8+0x30]
c0016b37:	8b 54 ec 34          	mov    edx,DWORD PTR [esp+ebp*8+0x34]
c0016b3b:	89 d1                	mov    ecx,edx
c0016b3d:	09 c1                	or     ecx,eax
c0016b3f:	74 3a                	je     c0016b7b <createPartitionsForDisk(PhysicalDisk*)+0x2c1>
c0016b41:	8b 74 ec 10          	mov    esi,DWORD PTR [esp+ebp*8+0x10]
c0016b45:	8b 7c ec 14          	mov    edi,DWORD PTR [esp+ebp*8+0x14]
c0016b49:	89 f9                	mov    ecx,edi
c0016b4b:	09 f1                	or     ecx,esi
c0016b4d:	74 2c                	je     c0016b7b <createPartitionsForDisk(PhysicalDisk*)+0x2c1>
c0016b4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b53:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016b57:	83 ec 0c             	sub    esp,0xc
c0016b5a:	68 56 b5 02 c0       	push   0xc002b556
c0016b5f:	e8 5f c2 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0016b64:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016b68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b6c:	89 14 24             	mov    DWORD PTR [esp],edx
c0016b6f:	50                   	push   eax
c0016b70:	57                   	push   edi
c0016b71:	56                   	push   esi
c0016b72:	53                   	push   ebx
c0016b73:	e8 7a fc ff ff       	call   c00167f2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016b78:	83 c4 20             	add    esp,0x20
c0016b7b:	45                   	inc    ebp
c0016b7c:	83 fd 04             	cmp    ebp,0x4
c0016b7f:	75 b2                	jne    c0016b33 <createPartitionsForDisk(PhysicalDisk*)+0x279>
c0016b81:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016b87:	5b                   	pop    ebx
c0016b88:	5e                   	pop    esi
c0016b89:	5f                   	pop    edi
c0016b8a:	5d                   	pop    ebp
c0016b8b:	c3                   	ret    

c0016b8c <Serial::Serial(char const*)>:
c0016b8c:	83 ec 0c             	sub    esp,0xc
c0016b8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b93:	83 ec 08             	sub    esp,0x8
c0016b96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b9a:	50                   	push   eax
c0016b9b:	e8 40 d8 ff ff       	call   c00143e0 <Device::Device(char const*)>
c0016ba0:	83 c4 10             	add    esp,0x10
c0016ba3:	ba 7c b5 02 c0       	mov    edx,0xc002b57c
c0016ba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bac:	89 10                	mov    DWORD PTR [eax],edx
c0016bae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bb2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016bbc:	90                   	nop
c0016bbd:	83 c4 0c             	add    esp,0xc
c0016bc0:	c3                   	ret    
c0016bc1:	90                   	nop

c0016bc2 <Serial::~Serial()>:
c0016bc2:	83 ec 0c             	sub    esp,0xc
c0016bc5:	ba 7c b5 02 c0       	mov    edx,0xc002b57c
c0016bca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bce:	89 10                	mov    DWORD PTR [eax],edx
c0016bd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bd4:	83 ec 0c             	sub    esp,0xc
c0016bd7:	50                   	push   eax
c0016bd8:	e8 e5 d4 ff ff       	call   c00140c2 <Device::~Device()>
c0016bdd:	83 c4 10             	add    esp,0x10
c0016be0:	90                   	nop
c0016be1:	83 c4 0c             	add    esp,0xc
c0016be4:	c3                   	ret    
c0016be5:	90                   	nop

c0016be6 <Serial::~Serial()>:
c0016be6:	83 ec 0c             	sub    esp,0xc
c0016be9:	83 ec 0c             	sub    esp,0xc
c0016bec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bf0:	e8 cd ff ff ff       	call   c0016bc2 <Serial::~Serial()>
c0016bf5:	83 c4 10             	add    esp,0x10
c0016bf8:	83 ec 08             	sub    esp,0x8
c0016bfb:	68 58 01 00 00       	push   0x158
c0016c00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c04:	e8 da c0 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0016c09:	83 c4 10             	add    esp,0x10
c0016c0c:	83 c4 0c             	add    esp,0xc
c0016c0f:	c3                   	ret    

c0016c10 <Timer::Timer(char const*)>:
c0016c10:	83 ec 0c             	sub    esp,0xc
c0016c13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c17:	83 ec 08             	sub    esp,0x8
c0016c1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c1e:	50                   	push   eax
c0016c1f:	e8 bc d7 ff ff       	call   c00143e0 <Device::Device(char const*)>
c0016c24:	83 c4 10             	add    esp,0x10
c0016c27:	ba c0 b5 02 c0       	mov    edx,0xc002b5c0
c0016c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c30:	89 10                	mov    DWORD PTR [eax],edx
c0016c32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c36:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016c40:	90                   	nop
c0016c41:	83 c4 0c             	add    esp,0xc
c0016c44:	c3                   	ret    
c0016c45:	90                   	nop

c0016c46 <Timer::~Timer()>:
c0016c46:	83 ec 0c             	sub    esp,0xc
c0016c49:	ba c0 b5 02 c0       	mov    edx,0xc002b5c0
c0016c4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c52:	89 10                	mov    DWORD PTR [eax],edx
c0016c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c58:	83 ec 0c             	sub    esp,0xc
c0016c5b:	50                   	push   eax
c0016c5c:	e8 61 d4 ff ff       	call   c00140c2 <Device::~Device()>
c0016c61:	83 c4 10             	add    esp,0x10
c0016c64:	90                   	nop
c0016c65:	83 c4 0c             	add    esp,0xc
c0016c68:	c3                   	ret    
c0016c69:	90                   	nop

c0016c6a <Timer::~Timer()>:
c0016c6a:	83 ec 0c             	sub    esp,0xc
c0016c6d:	83 ec 0c             	sub    esp,0xc
c0016c70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c74:	e8 cd ff ff ff       	call   c0016c46 <Timer::~Timer()>
c0016c79:	83 c4 10             	add    esp,0x10
c0016c7c:	83 ec 08             	sub    esp,0x8
c0016c7f:	68 5c 01 00 00       	push   0x15c
c0016c84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c88:	e8 56 c0 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0016c8d:	83 c4 10             	add    esp,0x10
c0016c90:	83 c4 0c             	add    esp,0xc
c0016c93:	c3                   	ret    

c0016c94 <Timer::read()>:
c0016c94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c98:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016c9e:	c3                   	ret    

c0016c9f <timerHandler(unsigned long long)>:
c0016c9f:	55                   	push   ebp
c0016ca0:	57                   	push   edi
c0016ca1:	56                   	push   esi
c0016ca2:	53                   	push   ebx
c0016ca3:	83 ec 0c             	sub    esp,0xc
c0016ca6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016caa:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016cae:	01 35 b0 ed 02 c0    	add    DWORD PTR ds:0xc002edb0,esi
c0016cb4:	11 3d b4 ed 02 c0    	adc    DWORD PTR ds:0xc002edb4,edi
c0016cba:	80 3d 2d e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e72d,0x0
c0016cc1:	0f 84 07 01 00 00    	je     c0016dce <timerHandler(unsigned long long)+0x12f>
c0016cc7:	e8 87 71 00 00       	call   c001de53 <lockStuff()>
c0016ccc:	83 ec 0c             	sub    esp,0xc
c0016ccf:	68 7c 1c 03 c0       	push   0xc0031c7c
c0016cd4:	e8 45 1f 01 00       	call   c0028c1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016cd9:	c7 04 24 7c 1c 03 c0 	mov    DWORD PTR [esp],0xc0031c7c
c0016ce0:	89 c3                	mov    ebx,eax
c0016ce2:	e8 3f 1f 01 00       	call   c0028c26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016ce7:	83 c4 10             	add    esp,0x10
c0016cea:	84 c0                	test   al,al
c0016cec:	74 60                	je     c0016d4e <timerHandler(unsigned long long)+0xaf>
c0016cee:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016cf4:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016cf7:	85 c0                	test   eax,eax
c0016cf9:	0f 85 91 00 00 00    	jne    c0016d90 <timerHandler(unsigned long long)+0xf1>
c0016cff:	e9 be 00 00 00       	jmp    c0016dc2 <timerHandler(unsigned long long)+0x123>
c0016d04:	83 ec 0c             	sub    esp,0xc
c0016d07:	55                   	push   ebp
c0016d08:	e8 0a 78 00 00       	call   c001e517 <unblockTask(ThreadControlBlock*)>
c0016d0d:	83 c4 10             	add    esp,0x10
c0016d10:	39 eb                	cmp    ebx,ebp
c0016d12:	75 12                	jne    c0016d26 <timerHandler(unsigned long long)+0x87>
c0016d14:	83 ec 0c             	sub    esp,0xc
c0016d17:	68 7c 1c 03 c0       	push   0xc0031c7c
c0016d1c:	e8 fd 1e 01 00       	call   c0028c1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d21:	89 c3                	mov    ebx,eax
c0016d23:	83 c4 10             	add    esp,0x10
c0016d26:	83 ec 0c             	sub    esp,0xc
c0016d29:	68 7c 1c 03 c0       	push   0xc0031c7c
c0016d2e:	e8 f3 1e 01 00       	call   c0028c26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d33:	83 c4 10             	add    esp,0x10
c0016d36:	84 c0                	test   al,al
c0016d38:	75 b4                	jne    c0016cee <timerHandler(unsigned long long)+0x4f>
c0016d3a:	83 ec 0c             	sub    esp,0xc
c0016d3d:	68 7c 1c 03 c0       	push   0xc0031c7c
c0016d42:	e8 d7 1e 01 00       	call   c0028c1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d47:	83 c4 10             	add    esp,0x10
c0016d4a:	39 d8                	cmp    eax,ebx
c0016d4c:	74 a0                	je     c0016cee <timerHandler(unsigned long long)+0x4f>
c0016d4e:	83 ec 0c             	sub    esp,0xc
c0016d51:	68 7c 1c 03 c0       	push   0xc0031c7c
c0016d56:	e8 c3 1e 01 00       	call   c0028c1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d5b:	c7 04 24 7c 1c 03 c0 	mov    DWORD PTR [esp],0xc0031c7c
c0016d62:	89 c5                	mov    ebp,eax
c0016d64:	e8 d9 1e 01 00       	call   c0028c42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016d69:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016d6c:	83 c4 10             	add    esp,0x10
c0016d6f:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016d72:	39 15 b0 ed 02 c0    	cmp    DWORD PTR ds:0xc002edb0,edx
c0016d78:	a1 b4 ed 02 c0       	mov    eax,ds:0xc002edb4
c0016d7d:	19 c8                	sbb    eax,ecx
c0016d7f:	73 83                	jae    c0016d04 <timerHandler(unsigned long long)+0x65>
c0016d81:	50                   	push   eax
c0016d82:	50                   	push   eax
c0016d83:	55                   	push   ebp
c0016d84:	68 7c 1c 03 c0       	push   0xc0031c7c
c0016d89:	e8 62 1f 01 00       	call   c0028cf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016d8e:	eb 93                	jmp    c0016d23 <timerHandler(unsigned long long)+0x84>
c0016d90:	80 3d 2c e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e72c,0x0
c0016d97:	74 29                	je     c0016dc2 <timerHandler(unsigned long long)+0x123>
c0016d99:	39 c6                	cmp    esi,eax
c0016d9b:	bb 00 00 00 00       	mov    ebx,0x0
c0016da0:	19 df                	sbb    edi,ebx
c0016da2:	72 19                	jb     c0016dbd <timerHandler(unsigned long long)+0x11e>
c0016da4:	e8 83 70 00 00       	call   c001de2c <lockScheduler()>
c0016da9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016dae:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016db1:	e8 ec 73 00 00       	call   c001e1a2 <schedule()>
c0016db6:	e8 73 70 00 00       	call   c001de2e <unlockScheduler()>
c0016dbb:	eb 05                	jmp    c0016dc2 <timerHandler(unsigned long long)+0x123>
c0016dbd:	29 f0                	sub    eax,esi
c0016dbf:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016dc2:	83 c4 0c             	add    esp,0xc
c0016dc5:	5b                   	pop    ebx
c0016dc6:	5e                   	pop    esi
c0016dc7:	5f                   	pop    edi
c0016dc8:	5d                   	pop    ebp
c0016dc9:	e9 59 74 00 00       	jmp    c001e227 <unlockStuff()>
c0016dce:	83 c4 0c             	add    esp,0xc
c0016dd1:	5b                   	pop    ebx
c0016dd2:	5e                   	pop    esi
c0016dd3:	5f                   	pop    edi
c0016dd4:	5d                   	pop    ebp
c0016dd5:	c3                   	ret    

c0016dd6 <setupTimer(int)>:
c0016dd6:	57                   	push   edi
c0016dd7:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0016ddc:	56                   	push   esi
c0016ddd:	53                   	push   ebx
c0016dde:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016de2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016de8:	83 ec 0c             	sub    esp,0xc
c0016deb:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016df1:	e8 e6 d6 ff ff       	call   c00144dc <Device::getName()>
c0016df6:	83 c4 10             	add    esp,0x10
c0016df9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016dfc:	0f 85 8d 00 00 00    	jne    c0016e8f <setupTimer(int)+0xb9>
c0016e02:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0016e07:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016e0e:	74 7f                	je     c0016e8f <setupTimer(int)+0xb9>
c0016e10:	83 ec 0c             	sub    esp,0xc
c0016e13:	68 5c 01 00 00       	push   0x15c
c0016e18:	e8 2e 8a ff ff       	call   c000f84b <malloc>
c0016e1d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e20:	89 c3                	mov    ebx,eax
c0016e22:	e8 53 f9 00 00       	call   c002677a <PIT::PIT()>
c0016e27:	59                   	pop    ecx
c0016e28:	5f                   	pop    edi
c0016e29:	53                   	push   ebx
c0016e2a:	ff 35 28 e7 02 c0    	push   DWORD PTR ds:0xc002e728
c0016e30:	e8 bb d3 ff ff       	call   c00141f0 <Device::addChild(Device*)>
c0016e35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e37:	6a 00                	push   0x0
c0016e39:	6a 00                	push   0x0
c0016e3b:	56                   	push   esi
c0016e3c:	53                   	push   ebx
c0016e3d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016e40:	83 c4 14             	add    esp,0x14
c0016e43:	68 60 01 00 00       	push   0x160
c0016e48:	e8 fe 89 ff ff       	call   c000f84b <malloc>
c0016e4d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e50:	89 c7                	mov    edi,eax
c0016e52:	e8 d3 f7 00 00       	call   c002662a <APICTimer::APICTimer()>
c0016e57:	6a 00                	push   0x0
c0016e59:	6a 00                	push   0x0
c0016e5b:	56                   	push   esi
c0016e5c:	57                   	push   edi
c0016e5d:	e8 ca f6 00 00       	call   c002652c <APICTimer::open(int, int, void*)>
c0016e62:	83 c4 20             	add    esp,0x20
c0016e65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e67:	6a 00                	push   0x0
c0016e69:	6a 00                	push   0x0
c0016e6b:	6a 00                	push   0x0
c0016e6d:	53                   	push   ebx
c0016e6e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016e71:	58                   	pop    eax
c0016e72:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0016e77:	5a                   	pop    edx
c0016e78:	57                   	push   edi
c0016e79:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e7f:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016e85:	e8 66 d3 ff ff       	call   c00141f0 <Device::addChild(Device*)>
c0016e8a:	83 c4 10             	add    esp,0x10
c0016e8d:	eb 33                	jmp    c0016ec2 <setupTimer(int)+0xec>
c0016e8f:	83 ec 0c             	sub    esp,0xc
c0016e92:	68 5c 01 00 00       	push   0x15c
c0016e97:	e8 af 89 ff ff       	call   c000f84b <malloc>
c0016e9c:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e9f:	89 c3                	mov    ebx,eax
c0016ea1:	e8 d4 f8 00 00       	call   c002677a <PIT::PIT()>
c0016ea6:	58                   	pop    eax
c0016ea7:	5a                   	pop    edx
c0016ea8:	53                   	push   ebx
c0016ea9:	ff 35 28 e7 02 c0    	push   DWORD PTR ds:0xc002e728
c0016eaf:	e8 3c d3 ff ff       	call   c00141f0 <Device::addChild(Device*)>
c0016eb4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016eb6:	6a 00                	push   0x0
c0016eb8:	6a 00                	push   0x0
c0016eba:	56                   	push   esi
c0016ebb:	53                   	push   ebx
c0016ebc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016ebf:	83 c4 20             	add    esp,0x20
c0016ec2:	89 d8                	mov    eax,ebx
c0016ec4:	5b                   	pop    ebx
c0016ec5:	5e                   	pop    esi
c0016ec6:	5f                   	pop    edi
c0016ec7:	c3                   	ret    

c0016ec8 <VCache::VCache(PhysicalDisk*)>:
c0016ec8:	53                   	push   ebx
c0016ec9:	83 ec 18             	sub    esp,0x18
c0016ecc:	ba f0 b5 02 c0       	mov    edx,0xc002b5f0
c0016ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ed5:	89 10                	mov    DWORD PTR [eax],edx
c0016ed7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016edb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016ee2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ee6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016eed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ef1:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016ef8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016eff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f03:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016f0a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016f11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f15:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016f1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f20:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016f24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f28:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016f2f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016f36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f3a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016f3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f42:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016f46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f4a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016f4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f52:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016f59:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016f61:	83 ec 0c             	sub    esp,0xc
c0016f64:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f68:	e8 de 88 ff ff       	call   c000f84b <malloc>
c0016f6d:	83 c4 10             	add    esp,0x10
c0016f70:	89 c3                	mov    ebx,eax
c0016f72:	83 ec 0c             	sub    esp,0xc
c0016f75:	53                   	push   ebx
c0016f76:	e8 d1 6f 00 00       	call   c001df4c <Mutex::Mutex()>
c0016f7b:	83 c4 10             	add    esp,0x10
c0016f7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f82:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016f85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f89:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016f8d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016f90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f94:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016f9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f9f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016fa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fa9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016fac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fb0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016fb6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016fbc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016fc0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016fc3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016fc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fca:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016fce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fd2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016fd8:	05 00 01 00 00       	add    eax,0x100
c0016fdd:	c1 e0 04             	shl    eax,0x4
c0016fe0:	83 ec 0c             	sub    esp,0xc
c0016fe3:	50                   	push   eax
c0016fe4:	e8 62 88 ff ff       	call   c000f84b <malloc>
c0016fe9:	83 c4 10             	add    esp,0x10
c0016fec:	89 c2                	mov    edx,eax
c0016fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016ff5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff9:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017000:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017004:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017008:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001700c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017012:	c1 e0 07             	shl    eax,0x7
c0017015:	83 ec 0c             	sub    esp,0xc
c0017018:	50                   	push   eax
c0017019:	e8 2d 88 ff ff       	call   c000f84b <malloc>
c001701e:	83 c4 10             	add    esp,0x10
c0017021:	89 c2                	mov    edx,eax
c0017023:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017027:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001702a:	90                   	nop
c001702b:	83 c4 18             	add    esp,0x18
c001702e:	5b                   	pop    ebx
c001702f:	c3                   	ret    

c0017030 <VCache::invalidateReadBuffer()>:
c0017030:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017034:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001703a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001703e:	c3                   	ret    
c001703f:	90                   	nop

c0017040 <VCache::writeWriteBuffer()>:
c0017040:	53                   	push   ebx
c0017041:	83 ec 14             	sub    esp,0x14
c0017044:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017048:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001704b:	8b 10                	mov    edx,DWORD PTR [eax]
c001704d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017050:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017053:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0017056:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0017059:	50                   	push   eax
c001705a:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001705d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0017064:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001706b:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001706f:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0017076:	83 c4 28             	add    esp,0x28
c0017079:	5b                   	pop    ebx
c001707a:	c3                   	ret    
c001707b:	90                   	nop

c001707c <VCache::~VCache()>:
c001707c:	83 ec 0c             	sub    esp,0xc
c001707f:	ba f0 b5 02 c0       	mov    edx,0xc002b5f0
c0017084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017088:	89 10                	mov    DWORD PTR [eax],edx
c001708a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001708e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0017091:	84 c0                	test   al,al
c0017093:	74 0f                	je     c00170a4 <VCache::~VCache()+0x28>
c0017095:	83 ec 0c             	sub    esp,0xc
c0017098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001709c:	e8 9f ff ff ff       	call   c0017040 <VCache::writeWriteBuffer()>
c00170a1:	83 c4 10             	add    esp,0x10
c00170a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170a8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00170ab:	83 ec 0c             	sub    esp,0xc
c00170ae:	50                   	push   eax
c00170af:	e8 a7 87 ff ff       	call   c000f85b <free>
c00170b4:	83 c4 10             	add    esp,0x10
c00170b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170bb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00170be:	83 ec 0c             	sub    esp,0xc
c00170c1:	50                   	push   eax
c00170c2:	e8 94 87 ff ff       	call   c000f85b <free>
c00170c7:	83 c4 10             	add    esp,0x10
c00170ca:	90                   	nop
c00170cb:	83 c4 0c             	add    esp,0xc
c00170ce:	c3                   	ret    
c00170cf:	90                   	nop

c00170d0 <VCache::~VCache()>:
c00170d0:	83 ec 0c             	sub    esp,0xc
c00170d3:	83 ec 0c             	sub    esp,0xc
c00170d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170da:	e8 9d ff ff ff       	call   c001707c <VCache::~VCache()>
c00170df:	83 c4 10             	add    esp,0x10
c00170e2:	83 ec 08             	sub    esp,0x8
c00170e5:	6a 44                	push   0x44
c00170e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170eb:	e8 f3 bb ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00170f0:	83 c4 10             	add    esp,0x10
c00170f3:	83 c4 0c             	add    esp,0xc
c00170f6:	c3                   	ret    
c00170f7:	90                   	nop

c00170f8 <VCache::write(unsigned long long, int, void*)>:
c00170f8:	55                   	push   ebp
c00170f9:	57                   	push   edi
c00170fa:	56                   	push   esi
c00170fb:	53                   	push   ebx
c00170fc:	83 ec 28             	sub    esp,0x28
c00170ff:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017103:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017107:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001710b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001710f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017112:	e8 d1 72 00 00       	call   c001e3e8 <Semaphore::acquire()>
c0017117:	83 c4 10             	add    esp,0x10
c001711a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001711e:	74 0c                	je     c001712c <VCache::write(unsigned long long, int, void*)+0x34>
c0017120:	83 ec 0c             	sub    esp,0xc
c0017123:	53                   	push   ebx
c0017124:	e8 07 ff ff ff       	call   c0017030 <VCache::invalidateReadBuffer()>
c0017129:	83 c4 10             	add    esp,0x10
c001712c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017130:	74 66                	je     c0017198 <VCache::write(unsigned long long, int, void*)+0xa0>
c0017132:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017135:	99                   	cdq    
c0017136:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001713a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001713d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0017140:	89 c1                	mov    ecx,eax
c0017142:	89 d0                	mov    eax,edx
c0017144:	31 f1                	xor    ecx,esi
c0017146:	31 f8                	xor    eax,edi
c0017148:	89 ca                	mov    edx,ecx
c001714a:	09 c2                	or     edx,eax
c001714c:	75 3e                	jne    c001718c <VCache::write(unsigned long long, int, void*)+0x94>
c001714e:	83 fd 01             	cmp    ebp,0x1
c0017151:	75 39                	jne    c001718c <VCache::write(unsigned long long, int, void*)+0x94>
c0017153:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017156:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001715c:	51                   	push   ecx
c001715d:	50                   	push   eax
c001715e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017162:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0017166:	0f af c8             	imul   ecx,eax
c0017169:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c001716c:	51                   	push   ecx
c001716d:	e8 da 95 fe ff       	call   c000074c <memcpy>
c0017172:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017175:	83 c4 10             	add    esp,0x10
c0017178:	40                   	inc    eax
c0017179:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001717c:	83 c0 80             	add    eax,0xffffff80
c001717f:	75 57                	jne    c00171d8 <VCache::write(unsigned long long, int, void*)+0xe0>
c0017181:	83 ec 0c             	sub    esp,0xc
c0017184:	53                   	push   ebx
c0017185:	e8 b6 fe ff ff       	call   c0017040 <VCache::writeWriteBuffer()>
c001718a:	eb 34                	jmp    c00171c0 <VCache::write(unsigned long long, int, void*)+0xc8>
c001718c:	83 ec 0c             	sub    esp,0xc
c001718f:	53                   	push   ebx
c0017190:	e8 ab fe ff ff       	call   c0017040 <VCache::writeWriteBuffer()>
c0017195:	83 c4 10             	add    esp,0x10
c0017198:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001719b:	83 fd 7f             	cmp    ebp,0x7f
c001719e:	7f 25                	jg     c00171c5 <VCache::write(unsigned long long, int, void*)+0xcd>
c00171a0:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00171a3:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00171a6:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00171a9:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00171ad:	52                   	push   edx
c00171ae:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00171b4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00171b8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00171bb:	e8 8c 95 fe ff       	call   c000074c <memcpy>
c00171c0:	83 c4 10             	add    esp,0x10
c00171c3:	eb 13                	jmp    c00171d8 <VCache::write(unsigned long long, int, void*)+0xe0>
c00171c5:	83 ec 0c             	sub    esp,0xc
c00171c8:	8b 10                	mov    edx,DWORD PTR [eax]
c00171ca:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00171ce:	55                   	push   ebp
c00171cf:	57                   	push   edi
c00171d0:	56                   	push   esi
c00171d1:	50                   	push   eax
c00171d2:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00171d5:	83 c4 20             	add    esp,0x20
c00171d8:	83 ec 0c             	sub    esp,0xc
c00171db:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00171de:	e8 4b 78 00 00       	call   c001ea2e <Semaphore::release()>
c00171e3:	83 c4 2c             	add    esp,0x2c
c00171e6:	31 c0                	xor    eax,eax
c00171e8:	5b                   	pop    ebx
c00171e9:	5e                   	pop    esi
c00171ea:	5f                   	pop    edi
c00171eb:	5d                   	pop    ebp
c00171ec:	c3                   	ret    
c00171ed:	90                   	nop

c00171ee <VCache::read(unsigned long long, int, void*)>:
c00171ee:	55                   	push   ebp
c00171ef:	57                   	push   edi
c00171f0:	56                   	push   esi
c00171f1:	53                   	push   ebx
c00171f2:	83 ec 28             	sub    esp,0x28
c00171f5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00171f9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00171fd:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017201:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017205:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017209:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001720d:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017211:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017214:	e8 cf 71 00 00       	call   c001e3e8 <Semaphore::acquire()>
c0017219:	83 c4 10             	add    esp,0x10
c001721c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017220:	74 0c                	je     c001722e <VCache::read(unsigned long long, int, void*)+0x40>
c0017222:	83 ec 0c             	sub    esp,0xc
c0017225:	53                   	push   ebx
c0017226:	e8 15 fe ff ff       	call   c0017040 <VCache::writeWriteBuffer()>
c001722b:	83 c4 10             	add    esp,0x10
c001722e:	83 fe 01             	cmp    esi,0x1
c0017231:	0f 85 80 00 00 00    	jne    c00172b7 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017237:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001723a:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0017241:	75 74                	jne    c00172b7 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017243:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017246:	89 d1                	mov    ecx,edx
c0017248:	f7 d9                	neg    ecx
c001724a:	89 cf                	mov    edi,ecx
c001724c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017250:	c1 ff 1f             	sar    edi,0x1f
c0017253:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0017256:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001725a:	89 ce                	mov    esi,ecx
c001725c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017260:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0017264:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017268:	89 cf                	mov    edi,ecx
c001726a:	74 0a                	je     c0017276 <VCache::read(unsigned long long, int, void*)+0x88>
c001726c:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001726f:	75 05                	jne    c0017276 <VCache::read(unsigned long long, int, void*)+0x88>
c0017271:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0017274:	74 1c                	je     c0017292 <VCache::read(unsigned long long, int, void*)+0xa4>
c0017276:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001727a:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c001727d:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0017280:	83 ec 0c             	sub    esp,0xc
c0017283:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017285:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0017288:	52                   	push   edx
c0017289:	57                   	push   edi
c001728a:	56                   	push   esi
c001728b:	50                   	push   eax
c001728c:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001728f:	83 c4 20             	add    esp,0x20
c0017292:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017295:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001729b:	50                   	push   eax
c001729c:	52                   	push   edx
c001729d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00172a0:	48                   	dec    eax
c00172a1:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c00172a5:	0f af c2             	imul   eax,edx
c00172a8:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00172ab:	50                   	push   eax
c00172ac:	55                   	push   ebp
c00172ad:	e8 9a 94 fe ff       	call   c000074c <memcpy>
c00172b2:	83 c4 10             	add    esp,0x10
c00172b5:	eb 21                	jmp    c00172d8 <VCache::read(unsigned long long, int, void*)+0xea>
c00172b7:	83 ec 0c             	sub    esp,0xc
c00172ba:	53                   	push   ebx
c00172bb:	e8 70 fd ff ff       	call   c0017030 <VCache::invalidateReadBuffer()>
c00172c0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172c3:	8b 10                	mov    edx,DWORD PTR [eax]
c00172c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00172c8:	56                   	push   esi
c00172c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00172cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00172d1:	50                   	push   eax
c00172d2:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00172d5:	83 c4 20             	add    esp,0x20
c00172d8:	83 ec 0c             	sub    esp,0xc
c00172db:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172de:	e8 4b 77 00 00       	call   c001ea2e <Semaphore::release()>
c00172e3:	83 c4 2c             	add    esp,0x2c
c00172e6:	31 c0                	xor    eax,eax
c00172e8:	5b                   	pop    ebx
c00172e9:	5e                   	pop    esi
c00172ea:	5f                   	pop    edi
c00172eb:	5d                   	pop    ebp
c00172ec:	c3                   	ret    
c00172ed:	90                   	nop

c00172ee <Video::putrect(int, int, int, int, unsigned int)>:
c00172ee:	55                   	push   ebp
c00172ef:	57                   	push   edi
c00172f0:	56                   	push   esi
c00172f1:	53                   	push   ebx
c00172f2:	83 ec 1c             	sub    esp,0x1c
c00172f5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00172f9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00172fd:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017301:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017305:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001730d:	01 df                	add    edi,ebx
c001730f:	39 fb                	cmp    ebx,edi
c0017311:	7d 1f                	jge    c0017332 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017313:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017317:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001731b:	7d 12                	jge    c001732f <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001731d:	8b 16                	mov    edx,DWORD PTR [esi]
c001731f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017323:	53                   	push   ebx
c0017324:	55                   	push   ebp
c0017325:	45                   	inc    ebp
c0017326:	56                   	push   esi
c0017327:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001732a:	83 c4 10             	add    esp,0x10
c001732d:	eb e8                	jmp    c0017317 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001732f:	43                   	inc    ebx
c0017330:	eb dd                	jmp    c001730f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017332:	83 c4 1c             	add    esp,0x1c
c0017335:	5b                   	pop    ebx
c0017336:	5e                   	pop    esi
c0017337:	5f                   	pop    edi
c0017338:	5d                   	pop    ebp
c0017339:	c3                   	ret    

c001733a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001733a:	55                   	push   ebp
c001733b:	57                   	push   edi
c001733c:	31 ff                	xor    edi,edi
c001733e:	56                   	push   esi
c001733f:	53                   	push   ebx
c0017340:	83 ec 1c             	sub    esp,0x1c
c0017343:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017347:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001734b:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017352:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0017357:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001735b:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001735f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017363:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0017366:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001736a:	01 f9                	add    ecx,edi
c001736c:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017370:	7d 2f                	jge    c00173a1 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017372:	31 f6                	xor    esi,esi
c0017374:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017378:	01 f2                	add    edx,esi
c001737a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001737e:	7d 1a                	jge    c001739a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017380:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017383:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0017386:	46                   	inc    esi
c0017387:	51                   	push   ecx
c0017388:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001738c:	52                   	push   edx
c001738d:	55                   	push   ebp
c001738e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017391:	83 c4 10             	add    esp,0x10
c0017394:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017398:	eb da                	jmp    c0017374 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001739a:	47                   	inc    edi
c001739b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001739f:	eb c5                	jmp    c0017366 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00173a1:	83 c4 1c             	add    esp,0x1c
c00173a4:	5b                   	pop    ebx
c00173a5:	5e                   	pop    esi
c00173a6:	5f                   	pop    edi
c00173a7:	5d                   	pop    ebp
c00173a8:	c3                   	ret    
c00173a9:	90                   	nop

c00173aa <Video::blit(unsigned int*, int, int, int, int)>:
c00173aa:	55                   	push   ebp
c00173ab:	57                   	push   edi
c00173ac:	56                   	push   esi
c00173ad:	53                   	push   ebx
c00173ae:	83 ec 1c             	sub    esp,0x1c
c00173b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00173b5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00173b9:	85 c0                	test   eax,eax
c00173bb:	79 02                	jns    c00173bf <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00173bd:	31 c0                	xor    eax,eax
c00173bf:	c1 e0 02             	shl    eax,0x2
c00173c2:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00173c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173ca:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00173ce:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00173d2:	39 d8                	cmp    eax,ebx
c00173d4:	7e 49                	jle    c001741f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00173d6:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00173dc:	7c 41                	jl     c001741f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00173de:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00173e2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00173e6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00173ea:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00173ee:	39 f9                	cmp    ecx,edi
c00173f0:	7e 22                	jle    c0017414 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00173f2:	83 c5 04             	add    ebp,0x4
c00173f5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00173fb:	7c 14                	jl     c0017411 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00173fd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00173ff:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017402:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017406:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001740a:	56                   	push   esi
c001740b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001740e:	83 c4 10             	add    esp,0x10
c0017411:	47                   	inc    edi
c0017412:	eb d2                	jmp    c00173e6 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017414:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017418:	43                   	inc    ebx
c0017419:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001741d:	eb ab                	jmp    c00173ca <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001741f:	83 c4 1c             	add    esp,0x1c
c0017422:	5b                   	pop    ebx
c0017423:	5e                   	pop    esi
c0017424:	5f                   	pop    edi
c0017425:	5d                   	pop    ebp
c0017426:	c3                   	ret    
c0017427:	90                   	nop

c0017428 <Video::clearScreen(unsigned int)>:
c0017428:	57                   	push   edi
c0017429:	56                   	push   esi
c001742a:	53                   	push   ebx
c001742b:	31 db                	xor    ebx,ebx
c001742d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017431:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017437:	7e 1f                	jle    c0017458 <Video::clearScreen(unsigned int)+0x30>
c0017439:	31 ff                	xor    edi,edi
c001743b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017441:	7e 12                	jle    c0017455 <Video::clearScreen(unsigned int)+0x2d>
c0017443:	8b 06                	mov    eax,DWORD PTR [esi]
c0017445:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017449:	53                   	push   ebx
c001744a:	57                   	push   edi
c001744b:	47                   	inc    edi
c001744c:	56                   	push   esi
c001744d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017450:	83 c4 10             	add    esp,0x10
c0017453:	eb e6                	jmp    c001743b <Video::clearScreen(unsigned int)+0x13>
c0017455:	43                   	inc    ebx
c0017456:	eb d9                	jmp    c0017431 <Video::clearScreen(unsigned int)+0x9>
c0017458:	5b                   	pop    ebx
c0017459:	5e                   	pop    esi
c001745a:	5f                   	pop    edi
c001745b:	c3                   	ret    

c001745c <Video::putpixel(int, int, unsigned int)>:
c001745c:	c7 44 24 04 f8 b5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b5f8
c0017464:	e9 26 31 00 00       	jmp    c001a58f <Krnl::panic(char const*)>
c0017469:	90                   	nop

c001746a <Video::Video(char const*)>:
c001746a:	83 ec 0c             	sub    esp,0xc
c001746d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017471:	83 ec 08             	sub    esp,0x8
c0017474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017478:	50                   	push   eax
c0017479:	e8 62 cf ff ff       	call   c00143e0 <Device::Device(char const*)>
c001747e:	83 c4 10             	add    esp,0x10
c0017481:	ba 7c b6 02 c0       	mov    edx,0xc002b67c
c0017486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001748a:	89 10                	mov    DWORD PTR [eax],edx
c001748c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017490:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001749a:	90                   	nop
c001749b:	83 c4 0c             	add    esp,0xc
c001749e:	c3                   	ret    
c001749f:	90                   	nop

c00174a0 <Video::~Video()>:
c00174a0:	83 ec 0c             	sub    esp,0xc
c00174a3:	ba 7c b6 02 c0       	mov    edx,0xc002b67c
c00174a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174ac:	89 10                	mov    DWORD PTR [eax],edx
c00174ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174b2:	83 ec 0c             	sub    esp,0xc
c00174b5:	50                   	push   eax
c00174b6:	e8 07 cc ff ff       	call   c00140c2 <Device::~Device()>
c00174bb:	83 c4 10             	add    esp,0x10
c00174be:	90                   	nop
c00174bf:	83 c4 0c             	add    esp,0xc
c00174c2:	c3                   	ret    
c00174c3:	90                   	nop

c00174c4 <Video::~Video()>:
c00174c4:	83 ec 0c             	sub    esp,0xc
c00174c7:	83 ec 0c             	sub    esp,0xc
c00174ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174ce:	e8 cd ff ff ff       	call   c00174a0 <Video::~Video()>
c00174d3:	83 c4 10             	add    esp,0x10
c00174d6:	83 ec 08             	sub    esp,0x8
c00174d9:	68 64 01 00 00       	push   0x164
c00174de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174e2:	e8 fc b7 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00174e7:	83 c4 10             	add    esp,0x10
c00174ea:	83 c4 0c             	add    esp,0xc
c00174ed:	c3                   	ret    

c00174ee <Video::isMonochrome()>:
c00174ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174f2:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00174f8:	c3                   	ret    
c00174f9:	90                   	nop

c00174fa <Video::getWidth()>:
c00174fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174fe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017504:	c3                   	ret    
c0017505:	90                   	nop

c0017506 <Video::getHeight()>:
c0017506:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001750a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017510:	c3                   	ret    
c0017511:	90                   	nop

c0017512 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017512:	55                   	push   ebp
c0017513:	57                   	push   edi
c0017514:	56                   	push   esi
c0017515:	53                   	push   ebx
c0017516:	83 ec 2c             	sub    esp,0x2c
c0017519:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001751d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017521:	83 f8 01             	cmp    eax,0x1
c0017524:	19 c9                	sbb    ecx,ecx
c0017526:	31 db                	xor    ebx,ebx
c0017528:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001752c:	89 cd                	mov    ebp,ecx
c001752e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017536:	f7 d5                	not    ebp
c0017538:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001753e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017542:	01 d8                	add    eax,ebx
c0017544:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017548:	56                   	push   esi
c0017549:	e8 b8 ff ff ff       	call   c0017506 <Video::getHeight()>
c001754e:	59                   	pop    ecx
c001754f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017553:	7e 70                	jle    c00175c5 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017555:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017559:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001755d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017560:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017564:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017568:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001756f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017573:	89 f8                	mov    eax,edi
c0017575:	83 c0 20             	add    eax,0x20
c0017578:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001757c:	56                   	push   esi
c001757d:	e8 78 ff ff ff       	call   c00174fa <Video::getWidth()>
c0017582:	5a                   	pop    edx
c0017583:	39 c7                	cmp    edi,eax
c0017585:	7d 34                	jge    c00175bb <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017587:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001758c:	74 05                	je     c0017593 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001758e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017590:	55                   	push   ebp
c0017591:	eb 0d                	jmp    c00175a0 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017593:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017598:	74 12                	je     c00175ac <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001759a:	8b 06                	mov    eax,DWORD PTR [esi]
c001759c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00175a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00175a4:	57                   	push   edi
c00175a5:	56                   	push   esi
c00175a6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00175a9:	83 c4 10             	add    esp,0x10
c00175ac:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00175b0:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00175b4:	47                   	inc    edi
c00175b5:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00175b9:	75 c1                	jne    c001757c <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00175bb:	43                   	inc    ebx
c00175bc:	83 fb 20             	cmp    ebx,0x20
c00175bf:	0f 85 79 ff ff ff    	jne    c001753e <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00175c5:	83 c4 2c             	add    esp,0x2c
c00175c8:	5b                   	pop    ebx
c00175c9:	5e                   	pop    esi
c00175ca:	5f                   	pop    edi
c00175cb:	5d                   	pop    ebp
c00175cc:	c3                   	ret    
c00175cd:	90                   	nop

c00175ce <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00175ce:	55                   	push   ebp
c00175cf:	57                   	push   edi
c00175d0:	56                   	push   esi
c00175d1:	53                   	push   ebx
c00175d2:	83 ec 28             	sub    esp,0x28
c00175d5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00175d9:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00175dd:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00175e1:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00175e5:	c1 e7 08             	shl    edi,0x8
c00175e8:	01 c7                	add    edi,eax
c00175ea:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00175ee:	c1 e0 08             	shl    eax,0x8
c00175f1:	01 d0                	add    eax,edx
c00175f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175fb:	0f af c7             	imul   eax,edi
c00175fe:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017605:	50                   	push   eax
c0017606:	e8 40 82 ff ff       	call   c000f84b <malloc>
c001760b:	83 c4 10             	add    esp,0x10
c001760e:	89 c5                	mov    ebp,eax
c0017610:	85 c0                	test   eax,eax
c0017612:	75 15                	jne    c0017629 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017614:	83 ec 0c             	sub    esp,0xc
c0017617:	68 19 b6 02 c0       	push   0xc002b619
c001761c:	e8 a2 b7 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0017621:	83 c4 10             	add    esp,0x10
c0017624:	e9 1c 01 00 00       	jmp    c0017745 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017629:	be 12 00 00 00       	mov    esi,0x12
c001762e:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017632:	74 11                	je     c0017645 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017634:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0017638:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c001763c:	c1 fe 03             	sar    esi,0x3
c001763f:	0f af f0             	imul   esi,eax
c0017642:	83 c6 12             	add    esi,0x12
c0017645:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017649:	74 04                	je     c001764f <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c001764b:	85 ff                	test   edi,edi
c001764d:	75 12                	jne    c0017661 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c001764f:	83 ec 0c             	sub    esp,0xc
c0017652:	68 30 b6 02 c0       	push   0xc002b630
c0017657:	e8 67 b7 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001765c:	e9 ce 00 00 00       	jmp    c001772f <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017661:	52                   	push   edx
c0017662:	52                   	push   edx
c0017663:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017667:	50                   	push   eax
c0017668:	68 45 b6 02 c0       	push   0xc002b645
c001766d:	e8 51 b7 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0017672:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017676:	83 c4 10             	add    esp,0x10
c0017679:	80 fa 02             	cmp    dl,0x2
c001767c:	0f 85 98 00 00 00    	jne    c001771a <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017682:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017687:	75 10                	jne    c0017699 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017689:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001768d:	75 0a                	jne    c0017699 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001768f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017692:	83 e8 18             	sub    eax,0x18
c0017695:	a8 f7                	test   al,0xf7
c0017697:	74 0a                	je     c00176a3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017699:	83 ec 0c             	sub    esp,0xc
c001769c:	68 52 b6 02 c0       	push   0xc002b652
c00176a1:	eb 7f                	jmp    c0017722 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00176a3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00176ab:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00176b3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00176b7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00176bf:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00176c3:	75 0c                	jne    c00176d1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00176c5:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00176ca:	c1 e0 18             	shl    eax,0x18
c00176cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00176d1:	41                   	inc    ecx
c00176d2:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00176d7:	c1 e2 10             	shl    edx,0x10
c00176da:	89 d0                	mov    eax,edx
c00176dc:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00176e1:	c1 e2 08             	shl    edx,0x8
c00176e4:	09 c2                	or     edx,eax
c00176e6:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00176ea:	09 c2                	or     edx,eax
c00176ec:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00176f0:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00176f4:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00176f8:	c1 f8 03             	sar    eax,0x3
c00176fb:	01 c6                	add    esi,eax
c00176fd:	89 c8                	mov    eax,ecx
c00176ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017703:	39 c7                	cmp    edi,eax
c0017705:	7f b0                	jg     c00176b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017707:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001770b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001770f:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017712:	7e 22                	jle    c0017736 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017714:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0017718:	eb 99                	jmp    c00176b3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001771a:	50                   	push   eax
c001771b:	50                   	push   eax
c001771c:	52                   	push   edx
c001771d:	68 60 b6 02 c0       	push   0xc002b660
c0017722:	e8 9c b6 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0017727:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001772a:	e8 2c 81 ff ff       	call   c000f85b <free>
c001772f:	83 c4 10             	add    esp,0x10
c0017732:	31 ed                	xor    ebp,ebp
c0017734:	eb 0f                	jmp    c0017745 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017736:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001773a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001773d:	89 38                	mov    DWORD PTR [eax],edi
c001773f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017743:	89 08                	mov    DWORD PTR [eax],ecx
c0017745:	83 c4 1c             	add    esp,0x1c
c0017748:	89 e8                	mov    eax,ebp
c001774a:	5b                   	pop    ebx
c001774b:	5e                   	pop    esi
c001774c:	5f                   	pop    edi
c001774d:	5d                   	pop    ebp
c001774e:	c3                   	ret    
c001774f:	90                   	nop

c0017750 <Video::putTGA(int, int, unsigned char*, int)>:
c0017750:	55                   	push   ebp
c0017751:	57                   	push   edi
c0017752:	56                   	push   esi
c0017753:	53                   	push   ebx
c0017754:	83 ec 28             	sub    esp,0x28
c0017757:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001775b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001775f:	50                   	push   eax
c0017760:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017764:	50                   	push   eax
c0017765:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017769:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001776d:	56                   	push   esi
c001776e:	e8 5b fe ff ff       	call   c00175ce <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017773:	83 c4 20             	add    esp,0x20
c0017776:	85 c0                	test   eax,eax
c0017778:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001777c:	74 35                	je     c00177b3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001777e:	89 c7                	mov    edi,eax
c0017780:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017784:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017788:	39 d8                	cmp    eax,ebx
c001778a:	7e 27                	jle    c00177b3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001778c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017790:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017794:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017798:	39 e8                	cmp    eax,ebp
c001779a:	7e 14                	jle    c00177b0 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001779c:	8b 06                	mov    eax,DWORD PTR [esi]
c001779e:	83 c7 04             	add    edi,0x4
c00177a1:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00177a4:	53                   	push   ebx
c00177a5:	55                   	push   ebp
c00177a6:	45                   	inc    ebp
c00177a7:	56                   	push   esi
c00177a8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00177ab:	83 c4 10             	add    esp,0x10
c00177ae:	eb e0                	jmp    c0017790 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00177b0:	43                   	inc    ebx
c00177b1:	eb cd                	jmp    c0017780 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00177b3:	83 c4 1c             	add    esp,0x1c
c00177b6:	5b                   	pop    ebx
c00177b7:	5e                   	pop    esi
c00177b8:	5f                   	pop    edi
c00177b9:	5d                   	pop    ebp
c00177ba:	c3                   	ret    
c00177bb:	90                   	nop

c00177bc <ACPI::close(int, int, void*)>:
c00177bc:	83 ec 1c             	sub    esp,0x1c
c00177bf:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00177c7:	74 0a                	je     c00177d3 <ACPI::close(int, int, void*)+0x17>
c00177c9:	b8 00 00 00 00       	mov    eax,0x0
c00177ce:	e9 9a 00 00 00       	jmp    c001786d <ACPI::close(int, int, void*)+0xb1>
c00177d3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00177d8:	75 37                	jne    c0017811 <ACPI::close(int, int, void*)+0x55>
c00177da:	83 ec 0c             	sub    esp,0xc
c00177dd:	68 bc b6 02 c0       	push   0xc002b6bc
c00177e2:	e8 dc b5 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00177e7:	83 c4 10             	add    esp,0x10
c00177ea:	a1 e8 0d 03 c0       	mov    eax,ds:0xc0030de8
c00177ef:	85 c0                	test   eax,eax
c00177f1:	74 07                	je     c00177fa <ACPI::close(int, int, void*)+0x3e>
c00177f3:	a1 e8 0d 03 c0       	mov    eax,ds:0xc0030de8
c00177f8:	ff d0                	call   eax
c00177fa:	83 ec 0c             	sub    esp,0xc
c00177fd:	68 ec b7 02 c0       	push   0xc002b7ec
c0017802:	e8 88 2d 00 00       	call   c001a58f <Krnl::panic(char const*)>
c0017807:	83 c4 10             	add    esp,0x10
c001780a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001780f:	eb 5c                	jmp    c001786d <ACPI::close(int, int, void*)+0xb1>
c0017811:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017816:	75 50                	jne    c0017868 <ACPI::close(int, int, void*)+0xac>
c0017818:	a1 e4 0d 03 c0       	mov    eax,ds:0xc0030de4
c001781d:	85 c0                	test   eax,eax
c001781f:	74 07                	je     c0017828 <ACPI::close(int, int, void*)+0x6c>
c0017821:	a1 e4 0d 03 c0       	mov    eax,ds:0xc0030de4
c0017826:	ff d0                	call   eax
c0017828:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001782d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017832:	83 e0 02             	and    eax,0x2
c0017835:	74 1c                	je     c0017853 <ACPI::close(int, int, void*)+0x97>
c0017837:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001783e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017842:	89 c2                	mov    edx,eax
c0017844:	ec                   	in     al,dx
c0017845:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017849:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001784d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017851:	eb da                	jmp    c001782d <ACPI::close(int, int, void*)+0x71>
c0017853:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001785a:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001785f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017863:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017867:	ee                   	out    dx,al
c0017868:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001786d:	83 c4 1c             	add    esp,0x1c
c0017870:	c3                   	ret    

c0017871 <findRSDP()>:
c0017871:	83 ec 1c             	sub    esp,0x1c
c0017874:	83 ec 0c             	sub    esp,0xc
c0017877:	68 c9 b6 02 c0       	push   0xc002b6c9
c001787c:	e8 42 b5 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0017881:	83 c4 10             	add    esp,0x10
c0017884:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0017889:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001788f:	83 e0 04             	and    eax,0x4
c0017892:	84 c0                	test   al,al
c0017894:	75 07                	jne    c001789d <findRSDP()+0x2c>
c0017896:	b8 00 00 00 00       	mov    eax,0x0
c001789b:	eb 6a                	jmp    c0017907 <findRSDP()+0x96>
c001789d:	a1 74 e7 02 c0       	mov    eax,ds:0xc002e774
c00178a2:	3d ff 07 00 00       	cmp    eax,0x7ff
c00178a7:	7f 1b                	jg     c00178c4 <findRSDP()+0x53>
c00178a9:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c00178ae:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00178b4:	83 e2 fb             	and    edx,0xfffffffb
c00178b7:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00178bd:	b8 00 00 00 00       	mov    eax,0x0
c00178c2:	eb 43                	jmp    c0017907 <findRSDP()+0x96>
c00178c4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00178cc:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00178d4:	77 2c                	ja     c0017902 <findRSDP()+0x91>
c00178d6:	83 ec 04             	sub    esp,0x4
c00178d9:	6a 08                	push   0x8
c00178db:	68 d7 b6 02 c0       	push   0xc002b6d7
c00178e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00178e4:	e8 5f 8d fe ff       	call   c0000648 <memcmp>
c00178e9:	83 c4 10             	add    esp,0x10
c00178ec:	85 c0                	test   eax,eax
c00178ee:	0f 94 c0             	sete   al
c00178f1:	84 c0                	test   al,al
c00178f3:	74 06                	je     c00178fb <findRSDP()+0x8a>
c00178f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178f9:	eb 0c                	jmp    c0017907 <findRSDP()+0x96>
c00178fb:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017900:	eb ca                	jmp    c00178cc <findRSDP()+0x5b>
c0017902:	b8 00 00 00 00       	mov    eax,0x0
c0017907:	83 c4 1c             	add    esp,0x1c
c001790a:	c3                   	ret    

c001790b <loadACPITables(unsigned char*)>:
c001790b:	56                   	push   esi
c001790c:	53                   	push   ebx
c001790d:	83 ec 44             	sub    esp,0x44
c0017910:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0017915:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001791b:	83 e0 04             	and    eax,0x4
c001791e:	84 c0                	test   al,al
c0017920:	0f 84 05 02 00 00    	je     c0017b2b <loadACPITables(unsigned char*)+0x220>
c0017926:	a0 00 10 03 c0       	mov    al,ds:0xc0031000
c001792b:	84 c0                	test   al,al
c001792d:	74 75                	je     c00179a4 <loadACPITables(unsigned char*)+0x99>
c001792f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017933:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017937:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001793b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001793e:	83 e8 24             	sub    eax,0x24
c0017941:	c1 e8 03             	shr    eax,0x3
c0017944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017948:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017950:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017954:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017958:	0f 8d b2 00 00 00    	jge    c0017a10 <loadACPITables(unsigned char*)+0x105>
c001795e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017962:	83 c0 24             	add    eax,0x24
c0017965:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017969:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001796d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017971:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017975:	c1 e0 03             	shl    eax,0x3
c0017978:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c001797c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017980:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017983:	8b 00                	mov    eax,DWORD PTR [eax]
c0017985:	89 c1                	mov    ecx,eax
c0017987:	a1 ec 0d 03 c0       	mov    eax,ds:0xc0030dec
c001798c:	8d 50 01             	lea    edx,[eax+0x1]
c001798f:	89 15 ec 0d 03 c0    	mov    DWORD PTR ds:0xc0030dec,edx
c0017995:	89 ca                	mov    edx,ecx
c0017997:	89 14 c5 04 0e 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf1fc],edx
c001799e:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00179a2:	eb ac                	jmp    c0017950 <loadACPITables(unsigned char*)+0x45>
c00179a4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179a8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00179ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179b3:	83 e8 24             	sub    eax,0x24
c00179b6:	c1 e8 02             	shr    eax,0x2
c00179b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179bd:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00179c5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00179c9:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00179cd:	7d 41                	jge    c0017a10 <loadACPITables(unsigned char*)+0x105>
c00179cf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179d3:	83 c0 24             	add    eax,0x24
c00179d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00179da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00179de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00179e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00179e6:	c1 e0 02             	shl    eax,0x2
c00179e9:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00179ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00179f1:	8b 08                	mov    ecx,DWORD PTR [eax]
c00179f3:	a1 ec 0d 03 c0       	mov    eax,ds:0xc0030dec
c00179f8:	8d 50 01             	lea    edx,[eax+0x1]
c00179fb:	89 15 ec 0d 03 c0    	mov    DWORD PTR ds:0xc0030dec,edx
c0017a01:	89 ca                	mov    edx,ecx
c0017a03:	89 14 c5 04 0e 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf1fc],edx
c0017a0a:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017a0e:	eb b5                	jmp    c00179c5 <loadACPITables(unsigned char*)+0xba>
c0017a10:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017a18:	a1 ec 0d 03 c0       	mov    eax,ds:0xc0030dec
c0017a1d:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017a21:	0f 8d 05 01 00 00    	jge    c0017b2c <loadACPITables(unsigned char*)+0x221>
c0017a27:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a2b:	8b 04 c5 04 0e 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf1fc]
c0017a32:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a42:	25 ff 0f 00 00       	and    eax,0xfff
c0017a47:	89 c6                	mov    esi,eax
c0017a49:	e8 e0 a1 ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0017a4e:	89 c3                	mov    ebx,eax
c0017a50:	83 ec 0c             	sub    esp,0xc
c0017a53:	6a 01                	push   0x1
c0017a55:	e8 95 9f ff ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c0017a5a:	83 c4 10             	add    esp,0x10
c0017a5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017a61:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017a67:	83 ec 0c             	sub    esp,0xc
c0017a6a:	6a 01                	push   0x1
c0017a6c:	6a 01                	push   0x1
c0017a6e:	50                   	push   eax
c0017a6f:	52                   	push   edx
c0017a70:	53                   	push   ebx
c0017a71:	e8 9a aa ff ff       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017a76:	83 c4 20             	add    esp,0x20
c0017a79:	09 f0                	or     eax,esi
c0017a7b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a83:	c1 e0 03             	shl    eax,0x3
c0017a86:	05 00 0e 03 c0       	add    eax,0xc0030e00
c0017a8b:	83 ec 04             	sub    esp,0x4
c0017a8e:	6a 04                	push   0x4
c0017a90:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a94:	50                   	push   eax
c0017a95:	e8 b2 8c fe ff       	call   c000074c <memcpy>
c0017a9a:	83 c4 10             	add    esp,0x10
c0017a9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aa1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017aa4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017aa8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017aac:	05 00 10 00 00       	add    eax,0x1000
c0017ab1:	c1 e8 0c             	shr    eax,0xc
c0017ab4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017abc:	89 04 24             	mov    DWORD PTR [esp],eax
c0017abf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ac3:	25 ff 0f 00 00       	and    eax,0xfff
c0017ac8:	89 c6                	mov    esi,eax
c0017aca:	e8 5f a1 ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0017acf:	89 c3                	mov    ebx,eax
c0017ad1:	83 ec 0c             	sub    esp,0xc
c0017ad4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017ad8:	e8 12 9f ff ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c0017add:	83 c4 10             	add    esp,0x10
c0017ae0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ae4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017aea:	83 ec 0c             	sub    esp,0xc
c0017aed:	6a 01                	push   0x1
c0017aef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017af3:	50                   	push   eax
c0017af4:	52                   	push   edx
c0017af5:	53                   	push   ebx
c0017af6:	e8 15 aa ff ff       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017afb:	83 c4 20             	add    esp,0x20
c0017afe:	09 f0                	or     eax,esi
c0017b00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b04:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017b07:	83 ec 0c             	sub    esp,0xc
c0017b0a:	50                   	push   eax
c0017b0b:	e8 a5 a3 ff ff       	call   c0011eb5 <Virt::freeKernelVirtualPages(unsigned long)>
c0017b10:	83 c4 10             	add    esp,0x10
c0017b13:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b17:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017b1b:	89 14 c5 04 0e 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf1fc],edx
c0017b22:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017b26:	e9 ed fe ff ff       	jmp    c0017a18 <loadACPITables(unsigned char*)+0x10d>
c0017b2b:	90                   	nop
c0017b2c:	83 c4 44             	add    esp,0x44
c0017b2f:	5b                   	pop    ebx
c0017b30:	5e                   	pop    esi
c0017b31:	c3                   	ret    

c0017b32 <findRSDT(unsigned char*)>:
c0017b32:	56                   	push   esi
c0017b33:	53                   	push   ebx
c0017b34:	83 ec 44             	sub    esp,0x44
c0017b37:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0017b3c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017b42:	83 e0 04             	and    eax,0x4
c0017b45:	84 c0                	test   al,al
c0017b47:	75 0a                	jne    c0017b53 <findRSDT(unsigned char*)+0x21>
c0017b49:	b8 00 00 00 00       	mov    eax,0x0
c0017b4e:	e9 f7 00 00 00       	jmp    c0017c4a <findRSDT(unsigned char*)+0x118>
c0017b53:	83 ec 04             	sub    esp,0x4
c0017b56:	6a 24                	push   0x24
c0017b58:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017b5c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017b60:	50                   	push   eax
c0017b61:	e8 e6 8b fe ff       	call   c000074c <memcpy>
c0017b66:	83 c4 10             	add    esp,0x10
c0017b69:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017b6d:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017b71:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017b79:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017b7d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b81:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017b85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b89:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b8d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b91:	25 ff 0f 00 00       	and    eax,0xfff
c0017b96:	89 c6                	mov    esi,eax
c0017b98:	e8 91 a0 ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0017b9d:	89 c3                	mov    ebx,eax
c0017b9f:	83 ec 0c             	sub    esp,0xc
c0017ba2:	6a 02                	push   0x2
c0017ba4:	e8 46 9e ff ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c0017ba9:	83 c4 10             	add    esp,0x10
c0017bac:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017bb0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017bb6:	83 ec 0c             	sub    esp,0xc
c0017bb9:	6a 01                	push   0x1
c0017bbb:	6a 02                	push   0x2
c0017bbd:	50                   	push   eax
c0017bbe:	52                   	push   edx
c0017bbf:	53                   	push   ebx
c0017bc0:	e8 4b a9 ff ff       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017bc5:	83 c4 20             	add    esp,0x20
c0017bc8:	09 f0                	or     eax,esi
c0017bca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017bce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bd2:	25 ff 0f 00 00       	and    eax,0xfff
c0017bd7:	89 c6                	mov    esi,eax
c0017bd9:	e8 50 a0 ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0017bde:	89 c3                	mov    ebx,eax
c0017be0:	83 ec 0c             	sub    esp,0xc
c0017be3:	6a 02                	push   0x2
c0017be5:	e8 05 9e ff ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c0017bea:	83 c4 10             	add    esp,0x10
c0017bed:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017bf1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017bf7:	83 ec 0c             	sub    esp,0xc
c0017bfa:	6a 01                	push   0x1
c0017bfc:	6a 02                	push   0x2
c0017bfe:	50                   	push   eax
c0017bff:	52                   	push   edx
c0017c00:	53                   	push   ebx
c0017c01:	e8 0a a9 ff ff       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c06:	83 c4 20             	add    esp,0x20
c0017c09:	09 f0                	or     eax,esi
c0017c0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c0f:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017c14:	75 11                	jne    c0017c27 <findRSDT(unsigned char*)+0xf5>
c0017c16:	c6 05 00 10 03 c0 00 	mov    BYTE PTR ds:0xc0031000,0x0
c0017c1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c21:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c25:	eb 1f                	jmp    c0017c46 <findRSDT(unsigned char*)+0x114>
c0017c27:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017c2c:	75 11                	jne    c0017c3f <findRSDT(unsigned char*)+0x10d>
c0017c2e:	c6 05 00 10 03 c0 01 	mov    BYTE PTR ds:0xc0031000,0x1
c0017c35:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c39:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c3d:	eb 07                	jmp    c0017c46 <findRSDT(unsigned char*)+0x114>
c0017c3f:	b8 00 00 00 00       	mov    eax,0x0
c0017c44:	eb 04                	jmp    c0017c4a <findRSDT(unsigned char*)+0x118>
c0017c46:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017c4a:	83 c4 44             	add    esp,0x44
c0017c4d:	5b                   	pop    ebx
c0017c4e:	5e                   	pop    esi
c0017c4f:	c3                   	ret    

c0017c50 <findDataTable(unsigned char*, char*)>:
c0017c50:	83 ec 1c             	sub    esp,0x1c
c0017c53:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0017c58:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c5e:	83 e0 04             	and    eax,0x4
c0017c61:	84 c0                	test   al,al
c0017c63:	75 07                	jne    c0017c6c <findDataTable(unsigned char*, char*)+0x1c>
c0017c65:	b8 00 00 00 00       	mov    eax,0x0
c0017c6a:	eb 7c                	jmp    c0017ce8 <findDataTable(unsigned char*, char*)+0x98>
c0017c6c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017c74:	a1 ec 0d 03 c0       	mov    eax,ds:0xc0030dec
c0017c79:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017c7d:	7d 3a                	jge    c0017cb9 <findDataTable(unsigned char*, char*)+0x69>
c0017c7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c83:	c1 e0 03             	shl    eax,0x3
c0017c86:	05 00 0e 03 c0       	add    eax,0xc0030e00
c0017c8b:	83 ec 04             	sub    esp,0x4
c0017c8e:	6a 04                	push   0x4
c0017c90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c94:	50                   	push   eax
c0017c95:	e8 ae 89 fe ff       	call   c0000648 <memcmp>
c0017c9a:	83 c4 10             	add    esp,0x10
c0017c9d:	85 c0                	test   eax,eax
c0017c9f:	0f 94 c0             	sete   al
c0017ca2:	84 c0                	test   al,al
c0017ca4:	74 0d                	je     c0017cb3 <findDataTable(unsigned char*, char*)+0x63>
c0017ca6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017caa:	8b 04 c5 04 0e 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf1fc]
c0017cb1:	eb 35                	jmp    c0017ce8 <findDataTable(unsigned char*, char*)+0x98>
c0017cb3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017cb7:	eb bb                	jmp    c0017c74 <findDataTable(unsigned char*, char*)+0x24>
c0017cb9:	a0 00 10 03 c0       	mov    al,ds:0xc0031000
c0017cbe:	84 c0                	test   al,al
c0017cc0:	74 07                	je     c0017cc9 <findDataTable(unsigned char*, char*)+0x79>
c0017cc2:	b8 58 00 00 00       	mov    eax,0x58
c0017cc7:	eb 05                	jmp    c0017cce <findDataTable(unsigned char*, char*)+0x7e>
c0017cc9:	b8 52 00 00 00       	mov    eax,0x52
c0017cce:	83 ec 04             	sub    esp,0x4
c0017cd1:	50                   	push   eax
c0017cd2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017cd6:	68 10 b8 02 c0       	push   0xc002b810
c0017cdb:	e8 e3 b0 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0017ce0:	83 c4 10             	add    esp,0x10
c0017ce3:	b8 00 00 00 00       	mov    eax,0x0
c0017ce8:	83 c4 1c             	add    esp,0x1c
c0017ceb:	c3                   	ret    

c0017cec <scanMADT()>:
c0017cec:	53                   	push   ebx
c0017ced:	83 ec 38             	sub    esp,0x38
c0017cf0:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0017cf5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017cfb:	83 e0 04             	and    eax,0x4
c0017cfe:	84 c0                	test   al,al
c0017d00:	0f 84 63 04 00 00    	je     c0018169 <scanMADT()+0x47d>
c0017d06:	e8 66 fb ff ff       	call   c0017871 <findRSDP()>
c0017d0b:	a3 0c 10 03 c0       	mov    ds:0xc003100c,eax
c0017d10:	a1 0c 10 03 c0       	mov    eax,ds:0xc003100c
c0017d15:	85 c0                	test   eax,eax
c0017d17:	75 19                	jne    c0017d32 <scanMADT()+0x46>
c0017d19:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0017d1e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d24:	83 e2 fb             	and    edx,0xfffffffb
c0017d27:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d2d:	e9 3b 04 00 00       	jmp    c001816d <scanMADT()+0x481>
c0017d32:	a1 0c 10 03 c0       	mov    eax,ds:0xc003100c
c0017d37:	83 ec 0c             	sub    esp,0xc
c0017d3a:	50                   	push   eax
c0017d3b:	e8 f2 fd ff ff       	call   c0017b32 <findRSDT(unsigned char*)>
c0017d40:	83 c4 10             	add    esp,0x10
c0017d43:	a3 08 10 03 c0       	mov    ds:0xc0031008,eax
c0017d48:	a1 08 10 03 c0       	mov    eax,ds:0xc0031008
c0017d4d:	85 c0                	test   eax,eax
c0017d4f:	75 19                	jne    c0017d6a <scanMADT()+0x7e>
c0017d51:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0017d56:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d5c:	83 e2 fb             	and    edx,0xfffffffb
c0017d5f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d65:	e9 03 04 00 00       	jmp    c001816d <scanMADT()+0x481>
c0017d6a:	a1 08 10 03 c0       	mov    eax,ds:0xc0031008
c0017d6f:	83 ec 0c             	sub    esp,0xc
c0017d72:	50                   	push   eax
c0017d73:	e8 93 fb ff ff       	call   c001790b <loadACPITables(unsigned char*)>
c0017d78:	83 c4 10             	add    esp,0x10
c0017d7b:	a1 08 10 03 c0       	mov    eax,ds:0xc0031008
c0017d80:	83 ec 08             	sub    esp,0x8
c0017d83:	68 e0 b6 02 c0       	push   0xc002b6e0
c0017d88:	50                   	push   eax
c0017d89:	e8 c2 fe ff ff       	call   c0017c50 <findDataTable(unsigned char*, char*)>
c0017d8e:	83 c4 10             	add    esp,0x10
c0017d91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017d95:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017d9a:	75 19                	jne    c0017db5 <scanMADT()+0xc9>
c0017d9c:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0017da1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017da7:	83 e2 fe             	and    edx,0xfffffffe
c0017daa:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017db0:	e9 b8 03 00 00       	jmp    c001816d <scanMADT()+0x481>
c0017db5:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017dbd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017dc1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017dc4:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017dc8:	0f 87 9f 03 00 00    	ja     c001816d <scanMADT()+0x481>
c0017dce:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017dd6:	0f 87 91 03 00 00    	ja     c001816d <scanMADT()+0x481>
c0017ddc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017de0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017de4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017de8:	8d 50 01             	lea    edx,[eax+0x1]
c0017deb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017def:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017df3:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017df7:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017dfb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dff:	8d 50 01             	lea    edx,[eax+0x1]
c0017e02:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e06:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e0a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e0e:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017e12:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017e17:	0f 86 4f 03 00 00    	jbe    c001816c <scanMADT()+0x480>
c0017e1d:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017e22:	75 57                	jne    c0017e7b <scanMADT()+0x18f>
c0017e24:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e28:	8d 50 01             	lea    edx,[eax+0x1]
c0017e2b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e2f:	8a 15 00 12 03 c0    	mov    dl,BYTE PTR ds:0xc0031200
c0017e35:	0f b6 d2             	movzx  edx,dl
c0017e38:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e3c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017e40:	88 82 40 12 03 c0    	mov    BYTE PTR [edx-0x3ffcedc0],al
c0017e46:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e4a:	8d 50 01             	lea    edx,[eax+0x1]
c0017e4d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e51:	8a 15 00 12 03 c0    	mov    dl,BYTE PTR ds:0xc0031200
c0017e57:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017e5a:	88 0d 00 12 03 c0    	mov    BYTE PTR ds:0xc0031200,cl
c0017e60:	0f b6 d2             	movzx  edx,dl
c0017e63:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e67:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017e6b:	88 82 20 12 03 c0    	mov    BYTE PTR [edx-0x3ffcede0],al
c0017e71:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017e76:	e9 da 02 00 00       	jmp    c0018155 <scanMADT()+0x469>
c0017e7b:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017e80:	0f 85 14 01 00 00    	jne    c0017f9a <scanMADT()+0x2ae>
c0017e86:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e8a:	8d 50 01             	lea    edx,[eax+0x1]
c0017e8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e91:	8a 15 c0 10 03 c0    	mov    dl,BYTE PTR ds:0xc00310c0
c0017e97:	0f b6 d2             	movzx  edx,dl
c0017e9a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e9e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ea2:	88 82 e0 10 03 c0    	mov    BYTE PTR [edx-0x3ffcef20],al
c0017ea8:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017eac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017eb0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eb4:	01 d0                	add    eax,edx
c0017eb6:	83 c0 2c             	add    eax,0x2c
c0017eb9:	8a 00                	mov    al,BYTE PTR [eax]
c0017ebb:	0f b6 d0             	movzx  edx,al
c0017ebe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ec2:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ec5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ec9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017ecd:	0f b6 c0             	movzx  eax,al
c0017ed0:	c1 e0 08             	shl    eax,0x8
c0017ed3:	89 d1                	mov    ecx,edx
c0017ed5:	09 c1                	or     ecx,eax
c0017ed7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017edb:	8d 50 02             	lea    edx,[eax+0x2]
c0017ede:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ee2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ee6:	0f b6 c0             	movzx  eax,al
c0017ee9:	c1 e0 10             	shl    eax,0x10
c0017eec:	09 c1                	or     ecx,eax
c0017eee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ef2:	8d 50 03             	lea    edx,[eax+0x3]
c0017ef5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ef9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017efd:	0f b6 c0             	movzx  eax,al
c0017f00:	c1 e0 18             	shl    eax,0x18
c0017f03:	09 c1                	or     ecx,eax
c0017f05:	89 ca                	mov    edx,ecx
c0017f07:	a0 c0 10 03 c0       	mov    al,ds:0xc00310c0
c0017f0c:	0f b6 c0             	movzx  eax,al
c0017f0f:	89 14 85 00 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef00],edx
c0017f16:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f1b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f1f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f23:	01 d0                	add    eax,edx
c0017f25:	83 c0 2c             	add    eax,0x2c
c0017f28:	8a 00                	mov    al,BYTE PTR [eax]
c0017f2a:	0f b6 d0             	movzx  edx,al
c0017f2d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f31:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f34:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f38:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f3c:	0f b6 c0             	movzx  eax,al
c0017f3f:	c1 e0 08             	shl    eax,0x8
c0017f42:	89 d1                	mov    ecx,edx
c0017f44:	09 c1                	or     ecx,eax
c0017f46:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f4a:	8d 50 02             	lea    edx,[eax+0x2]
c0017f4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f51:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f55:	0f b6 c0             	movzx  eax,al
c0017f58:	c1 e0 10             	shl    eax,0x10
c0017f5b:	09 c1                	or     ecx,eax
c0017f5d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f61:	8d 50 03             	lea    edx,[eax+0x3]
c0017f64:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f68:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f6c:	0f b6 c0             	movzx  eax,al
c0017f6f:	c1 e0 18             	shl    eax,0x18
c0017f72:	09 c1                	or     ecx,eax
c0017f74:	89 ca                	mov    edx,ecx
c0017f76:	a0 c0 10 03 c0       	mov    al,ds:0xc00310c0
c0017f7b:	0f b6 c0             	movzx  eax,al
c0017f7e:	89 14 85 80 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee80],edx
c0017f85:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f8a:	a0 c0 10 03 c0       	mov    al,ds:0xc00310c0
c0017f8f:	40                   	inc    eax
c0017f90:	a2 c0 10 03 c0       	mov    ds:0xc00310c0,al
c0017f95:	e9 bb 01 00 00       	jmp    c0018155 <scanMADT()+0x469>
c0017f9a:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017f9f:	0f 85 e9 00 00 00    	jne    c001808e <scanMADT()+0x3a2>
c0017fa5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fa9:	8d 50 01             	lea    edx,[eax+0x1]
c0017fac:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fb0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fb4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fb8:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017fbc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fc0:	8d 50 01             	lea    edx,[eax+0x1]
c0017fc3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fcb:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fcf:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017fd3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fd7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fdb:	01 d0                	add    eax,edx
c0017fdd:	83 c0 2c             	add    eax,0x2c
c0017fe0:	8a 00                	mov    al,BYTE PTR [eax]
c0017fe2:	0f b6 d0             	movzx  edx,al
c0017fe5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fe9:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ff0:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017ff4:	0f b6 c0             	movzx  eax,al
c0017ff7:	c1 e0 08             	shl    eax,0x8
c0017ffa:	89 d1                	mov    ecx,edx
c0017ffc:	09 c1                	or     ecx,eax
c0017ffe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018002:	8d 50 02             	lea    edx,[eax+0x2]
c0018005:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018009:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001800d:	0f b6 c0             	movzx  eax,al
c0018010:	c1 e0 10             	shl    eax,0x10
c0018013:	09 c1                	or     ecx,eax
c0018015:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018019:	8d 50 03             	lea    edx,[eax+0x3]
c001801c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018020:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018024:	0f b6 c0             	movzx  eax,al
c0018027:	c1 e0 18             	shl    eax,0x18
c001802a:	09 c8                	or     eax,ecx
c001802c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018030:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018035:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018039:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001803d:	01 d0                	add    eax,edx
c001803f:	83 c0 2c             	add    eax,0x2c
c0018042:	8a 00                	mov    al,BYTE PTR [eax]
c0018044:	0f b6 c0             	movzx  eax,al
c0018047:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001804b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001804e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018052:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0018056:	0f b6 d2             	movzx  edx,dl
c0018059:	c1 e2 08             	shl    edx,0x8
c001805c:	09 d0                	or     eax,edx
c001805e:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0018063:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018068:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001806d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018071:	88 90 80 d9 02 c0    	mov    BYTE PTR [eax-0x3ffd2680],dl
c0018077:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001807c:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0018081:	66 89 84 12 a0 10 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcef60],ax
c0018089:	e9 c7 00 00 00       	jmp    c0018155 <scanMADT()+0x469>
c001808e:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0018093:	0f 85 b0 00 00 00    	jne    c0018149 <scanMADT()+0x45d>
c0018099:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001809d:	8d 50 01             	lea    edx,[eax+0x1]
c00180a0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180a8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180ac:	0f b6 c0             	movzx  eax,al
c00180af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00180b3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180bb:	01 d0                	add    eax,edx
c00180bd:	83 c0 2c             	add    eax,0x2c
c00180c0:	8a 00                	mov    al,BYTE PTR [eax]
c00180c2:	0f b6 d0             	movzx  edx,al
c00180c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180c9:	8d 48 01             	lea    ecx,[eax+0x1]
c00180cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180d0:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00180d4:	0f b6 c0             	movzx  eax,al
c00180d7:	c1 e0 08             	shl    eax,0x8
c00180da:	09 d0                	or     eax,edx
c00180dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00180e0:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00180e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180e9:	8d 50 01             	lea    edx,[eax+0x1]
c00180ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180f0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180f4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180f8:	0f b6 c0             	movzx  eax,al
c00180fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00180ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018103:	c1 e0 08             	shl    eax,0x8
c0018106:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001810a:	89 c1                	mov    ecx,eax
c001810c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018110:	c1 e0 18             	shl    eax,0x18
c0018113:	89 c3                	mov    ebx,eax
c0018115:	a1 10 10 03 c0       	mov    eax,ds:0xc0031010
c001811a:	8d 50 01             	lea    edx,[eax+0x1]
c001811d:	89 15 10 10 03 c0    	mov    DWORD PTR ds:0xc0031010,edx
c0018123:	09 d9                	or     ecx,ebx
c0018125:	89 ca                	mov    edx,ecx
c0018127:	89 14 85 20 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefe0],edx
c001812e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018132:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018136:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001813a:	68 40 b8 02 c0       	push   0xc002b840
c001813f:	e8 7f ac ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018144:	83 c4 10             	add    esp,0x10
c0018147:	eb 0c                	jmp    c0018155 <scanMADT()+0x469>
c0018149:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c001814e:	75 05                	jne    c0018155 <scanMADT()+0x469>
c0018150:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0018155:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001815a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001815e:	01 d0                	add    eax,edx
c0018160:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018164:	e9 54 fc ff ff       	jmp    c0017dbd <scanMADT()+0xd1>
c0018169:	90                   	nop
c001816a:	eb 01                	jmp    c001816d <scanMADT()+0x481>
c001816c:	90                   	nop
c001816d:	83 c4 38             	add    esp,0x38
c0018170:	5b                   	pop    ebx
c0018171:	c3                   	ret    

c0018172 <ACPI::ACPI()>:
c0018172:	83 ec 0c             	sub    esp,0xc
c0018175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018179:	83 ec 08             	sub    esp,0x8
c001817c:	68 e5 b6 02 c0       	push   0xc002b6e5
c0018181:	50                   	push   eax
c0018182:	e8 59 c2 ff ff       	call   c00143e0 <Device::Device(char const*)>
c0018187:	83 c4 10             	add    esp,0x10
c001818a:	ba b4 b8 02 c0       	mov    edx,0xc002b8b4
c001818f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018193:	89 10                	mov    DWORD PTR [eax],edx
c0018195:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018199:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00181a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181a4:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00181ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181b2:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00181bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181c0:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00181c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181cb:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00181d2:	e8 15 fb ff ff       	call   c0017cec <scanMADT()>
c00181d7:	90                   	nop
c00181d8:	83 c4 0c             	add    esp,0xc
c00181db:	c3                   	ret    

c00181dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00181dc:	83 ec 2c             	sub    esp,0x2c
c00181df:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00181e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00181e7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00181eb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00181ef:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00181f4:	88 d0                	mov    al,dl
c00181f6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00181fa:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00181ff:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018207:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001820b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018211:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0018215:	0f 8d 97 00 00 00    	jge    c00182b2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001821b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001821f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018223:	83 c2 2a             	add    edx,0x2a
c0018226:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001822a:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c001822f:	75 78                	jne    c00182a9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018231:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018235:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018239:	83 c2 2a             	add    edx,0x2a
c001823c:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018240:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0018244:	75 63                	jne    c00182a9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018246:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001824b:	74 3a                	je     c0018287 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c001824d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018251:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018255:	83 c2 2a             	add    edx,0x2a
c0018258:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001825c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018260:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018263:	39 c2                	cmp    edx,eax
c0018265:	74 10                	je     c0018277 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0018267:	83 ec 0c             	sub    esp,0xc
c001826a:	68 7c b8 02 c0       	push   0xc002b87c
c001826f:	e8 1b 23 00 00       	call   c001a58f <Krnl::panic(char const*)>
c0018274:	83 c4 10             	add    esp,0x10
c0018277:	83 ec 0c             	sub    esp,0xc
c001827a:	68 ea b6 02 c0       	push   0xc002b6ea
c001827f:	e8 0b 23 00 00       	call   c001a58f <Krnl::panic(char const*)>
c0018284:	83 c4 10             	add    esp,0x10
c0018287:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001828b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001828f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018293:	83 c2 2a             	add    edx,0x2a
c0018296:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001829a:	8b 02                	mov    eax,DWORD PTR [edx]
c001829c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001829f:	89 01                	mov    DWORD PTR [ecx],eax
c00182a1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00182a4:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00182a9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00182ad:	e9 55 ff ff ff       	jmp    c0018207 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00182b2:	90                   	nop
c00182b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182b7:	83 c4 2c             	add    esp,0x2c
c00182ba:	c2 04 00             	ret    0x4
c00182bd:	90                   	nop

c00182be <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00182be:	83 ec 1c             	sub    esp,0x1c
c00182c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00182c5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00182c9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00182cd:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00182d2:	88 c8                	mov    al,cl
c00182d4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00182d8:	88 d0                	mov    al,dl
c00182da:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00182de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182e2:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00182e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182ec:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00182ef:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00182f3:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00182f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182fb:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018301:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018305:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0018308:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001830c:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018311:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018315:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001831b:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001831f:	8d 48 01             	lea    ecx,[eax+0x1]
c0018322:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018326:	83 c2 2a             	add    edx,0x2a
c0018329:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001832d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018331:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018337:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001833b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001833e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018342:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0018346:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001834a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018350:	8d 50 01             	lea    edx,[eax+0x1]
c0018353:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018357:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001835d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018361:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018367:	3d 00 02 00 00       	cmp    eax,0x200
c001836c:	75 10                	jne    c001837e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c001836e:	83 ec 0c             	sub    esp,0xc
c0018371:	68 f9 b6 02 c0       	push   0xc002b6f9
c0018376:	e8 14 22 00 00       	call   c001a58f <Krnl::panic(char const*)>
c001837b:	83 c4 10             	add    esp,0x10
c001837e:	90                   	nop
c001837f:	83 c4 1c             	add    esp,0x1c
c0018382:	c3                   	ret    
c0018383:	90                   	nop

c0018384 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018384:	b8 00 00 00 00       	mov    eax,0x0
c0018389:	c3                   	ret    

c001838a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001838a:	83 ec 1c             	sub    esp,0x1c
c001838d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018391:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018394:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018398:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c001839d:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00183a2:	83 ec 08             	sub    esp,0x8
c00183a5:	52                   	push   edx
c00183a6:	50                   	push   eax
c00183a7:	e8 b4 6a ff ff       	call   c000ee60 <Computer::readCMOS(unsigned char)>
c00183ac:	83 c4 10             	add    esp,0x10
c00183af:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00183b3:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c00183b8:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00183bd:	83 ec 04             	sub    esp,0x4
c00183c0:	6a 01                	push   0x1
c00183c2:	52                   	push   edx
c00183c3:	50                   	push   eax
c00183c4:	e8 ad 6b ff ff       	call   c000ef76 <Computer::writeCMOS(unsigned char, unsigned char)>
c00183c9:	83 c4 10             	add    esp,0x10
c00183cc:	90                   	nop
c00183cd:	83 c4 1c             	add    esp,0x1c
c00183d0:	c3                   	ret    
c00183d1:	90                   	nop

c00183d2 <ACPI::open(int, int, void*)>:
c00183d2:	53                   	push   ebx
c00183d3:	83 ec 28             	sub    esp,0x28
c00183d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183da:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00183e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183e5:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00183ec:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c00183f1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00183f7:	83 e0 04             	and    eax,0x4
c00183fa:	84 c0                	test   al,al
c00183fc:	74 47                	je     c0018445 <ACPI::open(int, int, void*)+0x73>
c00183fe:	a1 08 10 03 c0       	mov    eax,ds:0xc0031008
c0018403:	83 ec 08             	sub    esp,0x8
c0018406:	68 16 b7 02 c0       	push   0xc002b716
c001840b:	50                   	push   eax
c001840c:	e8 3f f8 ff ff       	call   c0017c50 <findDataTable(unsigned char*, char*)>
c0018411:	83 c4 10             	add    esp,0x10
c0018414:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018418:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001841d:	74 26                	je     c0018445 <ACPI::open(int, int, void*)+0x73>
c001841f:	83 ec 0c             	sub    esp,0xc
c0018422:	68 1b b7 02 c0       	push   0xc002b71b
c0018427:	e8 97 a9 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001842c:	83 c4 10             	add    esp,0x10
c001842f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018433:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001843a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001843e:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018445:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c001844d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018451:	8a 00                	mov    al,BYTE PTR [eax]
c0018453:	3c 01                	cmp    al,0x1
c0018455:	75 28                	jne    c001847f <ACPI::open(int, int, void*)+0xad>
c0018457:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001845b:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018462:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018466:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001846d:	83 ec 0c             	sub    esp,0xc
c0018470:	68 2c b7 02 c0       	push   0xc002b72c
c0018475:	e8 49 a9 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001847a:	83 c4 10             	add    esp,0x10
c001847d:	eb 25                	jmp    c00184a4 <ACPI::open(int, int, void*)+0xd2>
c001847f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018483:	8a 00                	mov    al,BYTE PTR [eax]
c0018485:	3c 02                	cmp    al,0x2
c0018487:	75 1b                	jne    c00184a4 <ACPI::open(int, int, void*)+0xd2>
c0018489:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001848d:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018494:	83 ec 0c             	sub    esp,0xc
c0018497:	68 34 b7 02 c0       	push   0xc002b734
c001849c:	e8 22 a9 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00184a1:	83 c4 10             	add    esp,0x10
c00184a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184a8:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00184ae:	83 f0 01             	xor    eax,0x1
c00184b1:	84 c0                	test   al,al
c00184b3:	74 6a                	je     c001851f <ACPI::open(int, int, void*)+0x14d>
c00184b5:	83 ec 0c             	sub    esp,0xc
c00184b8:	68 3c b7 02 c0       	push   0xc002b73c
c00184bd:	e8 01 a9 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00184c2:	83 c4 10             	add    esp,0x10
c00184c5:	e8 86 7c fe ff       	call   c0000150 <manualPCIProbe>
c00184ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00184ce:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00184d3:	75 28                	jne    c00184fd <ACPI::open(int, int, void*)+0x12b>
c00184d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184d9:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184e4:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184eb:	83 ec 0c             	sub    esp,0xc
c00184ee:	68 4a b7 02 c0       	push   0xc002b74a
c00184f3:	e8 cb a8 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00184f8:	83 c4 10             	add    esp,0x10
c00184fb:	eb 22                	jmp    c001851f <ACPI::open(int, int, void*)+0x14d>
c00184fd:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c0018502:	75 1b                	jne    c001851f <ACPI::open(int, int, void*)+0x14d>
c0018504:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018508:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001850f:	83 ec 0c             	sub    esp,0xc
c0018512:	68 54 b7 02 c0       	push   0xc002b754
c0018517:	e8 a7 a8 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001851c:	83 c4 10             	add    esp,0x10
c001851f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018523:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018529:	84 c0                	test   al,al
c001852b:	74 13                	je     c0018540 <ACPI::open(int, int, void*)+0x16e>
c001852d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018531:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018537:	83 f0 01             	xor    eax,0x1
c001853a:	0f b6 c0             	movzx  eax,al
c001853d:	40                   	inc    eax
c001853e:	eb 05                	jmp    c0018545 <ACPI::open(int, int, void*)+0x173>
c0018540:	b8 00 00 00 00       	mov    eax,0x0
c0018545:	83 ec 08             	sub    esp,0x8
c0018548:	50                   	push   eax
c0018549:	68 5e b7 02 c0       	push   0xc002b75e
c001854e:	e8 70 a8 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018553:	83 c4 10             	add    esp,0x10
c0018556:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001855a:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018560:	84 c0                	test   al,al
c0018562:	74 67                	je     c00185cb <ACPI::open(int, int, void*)+0x1f9>
c0018564:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c001856c:	83 ec 0c             	sub    esp,0xc
c001856f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018573:	e8 d3 72 ff ff       	call   c000f84b <malloc>
c0018578:	83 c4 10             	add    esp,0x10
c001857b:	89 c3                	mov    ebx,eax
c001857d:	83 ec 0c             	sub    esp,0xc
c0018580:	53                   	push   ebx
c0018581:	e8 3e a5 00 00       	call   c0022ac4 <PCI::PCI()>
c0018586:	83 c4 10             	add    esp,0x10
c0018589:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001858d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018591:	83 ec 08             	sub    esp,0x8
c0018594:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018598:	50                   	push   eax
c0018599:	e8 52 bc ff ff       	call   c00141f0 <Device::addChild(Device*)>
c001859e:	83 c4 10             	add    esp,0x10
c00185a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00185a7:	83 c0 08             	add    eax,0x8
c00185aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00185ac:	6a 00                	push   0x0
c00185ae:	6a 00                	push   0x0
c00185b0:	6a 00                	push   0x0
c00185b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00185b6:	ff d0                	call   eax
c00185b8:	83 c4 10             	add    esp,0x10
c00185bb:	83 ec 0c             	sub    esp,0xc
c00185be:	68 67 b7 02 c0       	push   0xc002b767
c00185c3:	e8 fb a7 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00185c8:	83 c4 10             	add    esp,0x10
c00185cb:	83 ec 0c             	sub    esp,0xc
c00185ce:	68 72 b7 02 c0       	push   0xc002b772
c00185d3:	e8 36 47 00 00       	call   c001cd0e <Thr::loadKernelSymbolTable(char const*)>
c00185d8:	83 c4 10             	add    esp,0x10
c00185db:	83 ec 0c             	sub    esp,0xc
c00185de:	6a 0c                	push   0xc
c00185e0:	e8 4f 96 ff ff       	call   c0011c34 <Virt::setupPageSwapping(int)>
c00185e5:	83 c4 10             	add    esp,0x10
c00185e8:	8b 1d 28 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e728
c00185ee:	83 ec 08             	sub    esp,0x8
c00185f1:	6a 01                	push   0x1
c00185f3:	68 90 b7 02 c0       	push   0xc002b790
c00185f8:	e8 88 51 00 00       	call   c001d785 <Thr::loadDLL(char const*, bool)>
c00185fd:	83 c4 10             	add    esp,0x10
c0018600:	83 ec 08             	sub    esp,0x8
c0018603:	53                   	push   ebx
c0018604:	50                   	push   eax
c0018605:	e8 af 53 00 00       	call   c001d9b9 <Thr::executeDLL(unsigned long, void*)>
c001860a:	83 c4 10             	add    esp,0x10
c001860d:	8b 1d 28 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e728
c0018613:	83 ec 08             	sub    esp,0x8
c0018616:	6a 01                	push   0x1
c0018618:	68 ad b7 02 c0       	push   0xc002b7ad
c001861d:	e8 63 51 00 00       	call   c001d785 <Thr::loadDLL(char const*, bool)>
c0018622:	83 c4 10             	add    esp,0x10
c0018625:	83 ec 08             	sub    esp,0x8
c0018628:	53                   	push   ebx
c0018629:	50                   	push   eax
c001862a:	e8 8a 53 00 00       	call   c001d9b9 <Thr::executeDLL(unsigned long, void*)>
c001862f:	83 c4 10             	add    esp,0x10
c0018632:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0018637:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001863d:	83 e0 04             	and    eax,0x4
c0018640:	84 c0                	test   al,al
c0018642:	0f 84 d2 00 00 00    	je     c001871a <ACPI::open(int, int, void*)+0x348>
c0018648:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001864f:	83 ec 0c             	sub    esp,0xc
c0018652:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018656:	e8 f0 71 ff ff       	call   c000f84b <malloc>
c001865b:	83 c4 10             	add    esp,0x10
c001865e:	89 c3                	mov    ebx,eax
c0018660:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0018665:	83 ec 04             	sub    esp,0x4
c0018668:	50                   	push   eax
c0018669:	68 ca b7 02 c0       	push   0xc002b7ca
c001866e:	53                   	push   ebx
c001866f:	e8 ae ac ff ff       	call   c0013322 <File::File(char const*, Process*)>
c0018674:	83 c4 10             	add    esp,0x10
c0018677:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001867b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018680:	74 17                	je     c0018699 <ACPI::open(int, int, void*)+0x2c7>
c0018682:	83 ec 0c             	sub    esp,0xc
c0018685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018689:	e8 66 af ff ff       	call   c00135f4 <File::exists()>
c001868e:	83 c4 10             	add    esp,0x10
c0018691:	84 c0                	test   al,al
c0018693:	74 04                	je     c0018699 <ACPI::open(int, int, void*)+0x2c7>
c0018695:	b0 01                	mov    al,0x1
c0018697:	eb 02                	jmp    c001869b <ACPI::open(int, int, void*)+0x2c9>
c0018699:	b0 00                	mov    al,0x0
c001869b:	84 c0                	test   al,al
c001869d:	74 22                	je     c00186c1 <ACPI::open(int, int, void*)+0x2ef>
c001869f:	83 ec 08             	sub    esp,0x8
c00186a2:	6a 01                	push   0x1
c00186a4:	68 ca b7 02 c0       	push   0xc002b7ca
c00186a9:	e8 d7 50 00 00       	call   c001d785 <Thr::loadDLL(char const*, bool)>
c00186ae:	83 c4 10             	add    esp,0x10
c00186b1:	83 ec 08             	sub    esp,0x8
c00186b4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00186b8:	50                   	push   eax
c00186b9:	e8 fb 52 00 00       	call   c001d9b9 <Thr::executeDLL(unsigned long, void*)>
c00186be:	83 c4 10             	add    esp,0x10
c00186c1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186c6:	74 1e                	je     c00186e6 <ACPI::open(int, int, void*)+0x314>
c00186c8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186cd:	74 17                	je     c00186e6 <ACPI::open(int, int, void*)+0x314>
c00186cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00186d5:	83 c0 08             	add    eax,0x8
c00186d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00186da:	83 ec 0c             	sub    esp,0xc
c00186dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00186e1:	ff d0                	call   eax
c00186e3:	83 c4 10             	add    esp,0x10
c00186e6:	a1 08 10 03 c0       	mov    eax,ds:0xc0031008
c00186eb:	83 ec 08             	sub    esp,0x8
c00186ee:	68 e7 b7 02 c0       	push   0xc002b7e7
c00186f3:	50                   	push   eax
c00186f4:	e8 57 f5 ff ff       	call   c0017c50 <findDataTable(unsigned char*, char*)>
c00186f9:	83 c4 10             	add    esp,0x10
c00186fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018700:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018705:	74 13                	je     c001871a <ACPI::open(int, int, void*)+0x348>
c0018707:	83 ec 08             	sub    esp,0x8
c001870a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001870e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018712:	e8 73 fc ff ff       	call   c001838a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018717:	83 c4 10             	add    esp,0x10
c001871a:	b8 00 00 00 00       	mov    eax,0x0
c001871f:	83 c4 28             	add    esp,0x28
c0018722:	5b                   	pop    ebx
c0018723:	c3                   	ret    

c0018724 <ACPI::sleep()>:
c0018724:	83 ec 0c             	sub    esp,0xc
c0018727:	a1 e0 0d 03 c0       	mov    eax,ds:0xc0030de0
c001872c:	85 c0                	test   eax,eax
c001872e:	74 07                	je     c0018737 <ACPI::sleep()+0x13>
c0018730:	a1 e0 0d 03 c0       	mov    eax,ds:0xc0030de0
c0018735:	ff d0                	call   eax
c0018737:	90                   	nop
c0018738:	83 c4 0c             	add    esp,0xc
c001873b:	c3                   	ret    

c001873c <CPU::close(int, int, void*)>:
c001873c:	31 c0                	xor    eax,eax
c001873e:	c3                   	ret    
c001873f:	90                   	nop

c0018740 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018740:	55                   	push   ebp
c0018741:	57                   	push   edi
c0018742:	56                   	push   esi
c0018743:	53                   	push   ebx
c0018744:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018748:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001874c:	89 ce                	mov    esi,ecx
c001874e:	89 d5                	mov    ebp,edx
c0018750:	80 f9 04             	cmp    cl,0x4
c0018753:	75 28                	jne    c001877d <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018755:	8d 42 f9             	lea    eax,[edx-0x7]
c0018758:	3c 03                	cmp    al,0x3
c001875a:	0f 86 63 01 00 00    	jbe    c00188c3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018760:	80 fa 03             	cmp    dl,0x3
c0018763:	0f 84 5a 01 00 00    	je     c00188c3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018769:	8d 7a f2             	lea    edi,[edx-0xe]
c001876c:	b8 50 db 02 c0       	mov    eax,0xc002db50
c0018771:	89 fb                	mov    ebx,edi
c0018773:	80 fb 01             	cmp    bl,0x1
c0018776:	77 4e                	ja     c00187c6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018778:	e9 52 01 00 00       	jmp    c00188cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001877d:	80 f9 05             	cmp    cl,0x5
c0018780:	75 4d                	jne    c00187cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018782:	b8 60 db 02 c0       	mov    eax,0xc002db60
c0018787:	80 fa 03             	cmp    dl,0x3
c001878a:	0f 86 3f 01 00 00    	jbe    c00188cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018790:	8d 7a fa             	lea    edi,[edx-0x6]
c0018793:	b8 70 db 02 c0       	mov    eax,0xc002db70
c0018798:	89 fb                	mov    ebx,edi
c001879a:	80 fb 01             	cmp    bl,0x1
c001879d:	0f 86 2c 01 00 00    	jbe    c00188cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187a3:	b8 80 db 02 c0       	mov    eax,0xc002db80
c00187a8:	80 fa 08             	cmp    dl,0x8
c00187ab:	0f 84 1e 01 00 00    	je     c00188cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187b1:	89 d7                	mov    edi,edx
c00187b3:	b8 90 db 02 c0       	mov    eax,0xc002db90
c00187b8:	83 e7 fb             	and    edi,0xfffffffb
c00187bb:	89 fb                	mov    ebx,edi
c00187bd:	80 fb 09             	cmp    bl,0x9
c00187c0:	0f 84 09 01 00 00    	je     c00188cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187c6:	31 c0                	xor    eax,eax
c00187c8:	89 eb                	mov    ebx,ebp
c00187ca:	0f b6 fb             	movzx  edi,bl
c00187cd:	eb 30                	jmp    c00187ff <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00187cf:	31 c0                	xor    eax,eax
c00187d1:	80 f9 06             	cmp    cl,0x6
c00187d4:	75 f2                	jne    c00187c8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00187d6:	80 fa 0a             	cmp    dl,0xa
c00187d9:	77 ed                	ja     c00187c8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00187db:	bf de 05 00 00       	mov    edi,0x5de
c00187e0:	0f a3 d7             	bt     edi,edx
c00187e3:	73 e3                	jae    c00187c8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00187e5:	b8 a0 db 02 c0       	mov    eax,0xc002dba0
c00187ea:	e9 e0 00 00 00       	jmp    c00188cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187ef:	39 c7                	cmp    edi,eax
c00187f1:	0f 84 d3 00 00 00    	je     c00188ca <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00187f7:	40                   	inc    eax
c00187f8:	3d d0 00 00 00       	cmp    eax,0xd0
c00187fd:	74 09                	je     c0018808 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00187ff:	89 f3                	mov    ebx,esi
c0018801:	80 fb 0f             	cmp    bl,0xf
c0018804:	75 f1                	jne    c00187f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018806:	eb e7                	jmp    c00187ef <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018808:	80 f9 10             	cmp    cl,0x10
c001880b:	75 14                	jne    c0018821 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001880d:	8d 42 fc             	lea    eax,[edx-0x4]
c0018810:	83 e0 fb             	and    eax,0xfffffffb
c0018813:	3c 02                	cmp    al,0x2
c0018815:	76 34                	jbe    c001884b <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018817:	b8 ca bb 02 c0       	mov    eax,0xc002bbca
c001881c:	80 fa 02             	cmp    dl,0x2
c001881f:	eb 24                	jmp    c0018845 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018821:	80 f9 11             	cmp    cl,0x11
c0018824:	75 13                	jne    c0018839 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018826:	b8 ca bb 02 c0       	mov    eax,0xc002bbca
c001882b:	80 fa 03             	cmp    dl,0x3
c001882e:	0f 85 9b 00 00 00    	jne    c00188cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018834:	e9 91 00 00 00       	jmp    c00188ca <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018839:	80 f9 12             	cmp    cl,0x12
c001883c:	75 14                	jne    c0018852 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001883e:	b8 ca bb 02 c0       	mov    eax,0xc002bbca
c0018843:	fe ca                	dec    dl
c0018845:	0f 85 84 00 00 00    	jne    c00188cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001884b:	b8 c0 db 02 c0       	mov    eax,0xc002dbc0
c0018850:	eb 7d                	jmp    c00188cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018852:	80 f9 14             	cmp    cl,0x14
c0018855:	75 12                	jne    c0018869 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018857:	4a                   	dec    edx
c0018858:	b8 ca bb 02 c0       	mov    eax,0xc002bbca
c001885d:	80 fa 01             	cmp    dl,0x1
c0018860:	77 6d                	ja     c00188cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018862:	b8 d0 db 02 c0       	mov    eax,0xc002dbd0
c0018867:	eb 66                	jmp    c00188cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018869:	80 f9 15             	cmp    cl,0x15
c001886c:	75 31                	jne    c001889f <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001886e:	b8 e0 db 02 c0       	mov    eax,0xc002dbe0
c0018873:	80 fa 01             	cmp    dl,0x1
c0018876:	74 57                	je     c00188cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018878:	b8 ca bb 02 c0       	mov    eax,0xc002bbca
c001887d:	80 fa 13             	cmp    dl,0x13
c0018880:	76 0c                	jbe    c001888e <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018882:	80 fa 30             	cmp    dl,0x30
c0018885:	75 48                	jne    c00188cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018887:	b8 00 dc 02 c0       	mov    eax,0xc002dc00
c001888c:	eb 41                	jmp    c00188cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001888e:	b9 04 00 09 00       	mov    ecx,0x90004
c0018893:	0f a3 d1             	bt     ecx,edx
c0018896:	73 37                	jae    c00188cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018898:	b8 f0 db 02 c0       	mov    eax,0xc002dbf0
c001889d:	eb 30                	jmp    c00188cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001889f:	b8 ca bb 02 c0       	mov    eax,0xc002bbca
c00188a4:	80 f9 16             	cmp    cl,0x16
c00188a7:	75 26                	jne    c00188cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188a9:	b8 10 dc 02 c0       	mov    eax,0xc002dc10
c00188ae:	84 d2                	test   dl,dl
c00188b0:	74 1d                	je     c00188cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188b2:	b8 ca bb 02 c0       	mov    eax,0xc002bbca
c00188b7:	80 fa 30             	cmp    dl,0x30
c00188ba:	75 13                	jne    c00188cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188bc:	b8 20 dc 02 c0       	mov    eax,0xc002dc20
c00188c1:	eb 0c                	jmp    c00188cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188c3:	b8 40 db 02 c0       	mov    eax,0xc002db40
c00188c8:	eb 05                	jmp    c00188cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188ca:	b8 b0 db 02 c0       	mov    eax,0xc002dbb0
c00188cf:	5b                   	pop    ebx
c00188d0:	5e                   	pop    esi
c00188d1:	5f                   	pop    edi
c00188d2:	5d                   	pop    ebp
c00188d3:	c3                   	ret    

c00188d4 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00188d4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00188d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00188dc:	80 f9 04             	cmp    cl,0x4
c00188df:	75 6b                	jne    c001894c <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00188e1:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c00188e6:	80 fa 01             	cmp    dl,0x1
c00188e9:	0f 86 92 02 00 00    	jbe    c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188ef:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c00188f4:	80 fa 02             	cmp    dl,0x2
c00188f7:	0f 84 84 02 00 00    	je     c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188fd:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018902:	80 fa 03             	cmp    dl,0x3
c0018905:	0f 84 76 02 00 00    	je     c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001890b:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018910:	80 fa 04             	cmp    dl,0x4
c0018913:	0f 84 68 02 00 00    	je     c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018919:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c001891e:	80 fa 05             	cmp    dl,0x5
c0018921:	0f 84 5a 02 00 00    	je     c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018927:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c001892c:	80 fa 07             	cmp    dl,0x7
c001892f:	0f 84 4c 02 00 00    	je     c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018935:	83 ea 08             	sub    edx,0x8
c0018938:	b8 ca bb 02 c0       	mov    eax,0xc002bbca
c001893d:	80 fa 01             	cmp    dl,0x1
c0018940:	0f 87 3b 02 00 00    	ja     c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018946:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c001894b:	c3                   	ret    
c001894c:	80 f9 05             	cmp    cl,0x5
c001894f:	75 45                	jne    c0018996 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018951:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018954:	b8 00 da 02 c0       	mov    eax,0xc002da00
c0018959:	80 f9 02             	cmp    cl,0x2
c001895c:	0f 86 1f 02 00 00    	jbe    c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018962:	80 fa 04             	cmp    dl,0x4
c0018965:	0f 84 f3 01 00 00    	je     c0018b5e <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c001896b:	80 fa 07             	cmp    dl,0x7
c001896e:	0f 84 0d 02 00 00    	je     c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018974:	b8 10 da 02 c0       	mov    eax,0xc002da10
c0018979:	80 fa 08             	cmp    dl,0x8
c001897c:	0f 84 ff 01 00 00    	je     c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018982:	b8 ca bb 02 c0       	mov    eax,0xc002bbca
c0018987:	80 fa 09             	cmp    dl,0x9
c001898a:	0f 85 f1 01 00 00    	jne    c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018990:	b8 20 da 02 c0       	mov    eax,0xc002da20
c0018995:	c3                   	ret    
c0018996:	80 f9 06             	cmp    cl,0x6
c0018999:	0f 85 85 01 00 00    	jne    c0018b24 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001899f:	b8 30 da 02 c0       	mov    eax,0xc002da30
c00189a4:	80 fa 01             	cmp    dl,0x1
c00189a7:	0f 84 d4 01 00 00    	je     c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ad:	8d 42 fb             	lea    eax,[edx-0x5]
c00189b0:	3c 01                	cmp    al,0x1
c00189b2:	0f 86 ac 01 00 00    	jbe    c0018b64 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00189b8:	80 fa 03             	cmp    dl,0x3
c00189bb:	0f 84 a3 01 00 00    	je     c0018b64 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00189c1:	8d 4a f9             	lea    ecx,[edx-0x7]
c00189c4:	b8 50 da 02 c0       	mov    eax,0xc002da50
c00189c9:	80 f9 01             	cmp    cl,0x1
c00189cc:	0f 86 af 01 00 00    	jbe    c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189d2:	80 fa 09             	cmp    dl,0x9
c00189d5:	0f 84 8f 01 00 00    	je     c0018b6a <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00189db:	8d 4a f6             	lea    ecx,[edx-0xa]
c00189de:	80 f9 01             	cmp    cl,0x1
c00189e1:	0f 86 9a 01 00 00    	jbe    c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189e7:	b8 60 da 02 c0       	mov    eax,0xc002da60
c00189ec:	80 fa 0d             	cmp    dl,0xd
c00189ef:	0f 84 8c 01 00 00    	je     c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189f5:	b8 70 da 02 c0       	mov    eax,0xc002da70
c00189fa:	80 fa 0e             	cmp    dl,0xe
c00189fd:	0f 84 7e 01 00 00    	je     c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a03:	b8 80 da 02 c0       	mov    eax,0xc002da80
c0018a08:	80 fa 0f             	cmp    dl,0xf
c0018a0b:	0f 84 70 01 00 00    	je     c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a11:	b8 60 da 02 c0       	mov    eax,0xc002da60
c0018a16:	80 fa 15             	cmp    dl,0x15
c0018a19:	0f 84 62 01 00 00    	je     c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a1f:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018a22:	b8 80 da 02 c0       	mov    eax,0xc002da80
c0018a27:	80 f9 01             	cmp    cl,0x1
c0018a2a:	0f 86 51 01 00 00    	jbe    c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a30:	80 fa 1a             	cmp    dl,0x1a
c0018a33:	0f 84 37 01 00 00    	je     c0018b70 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018a39:	80 fa 1c             	cmp    dl,0x1c
c0018a3c:	0f 84 34 01 00 00    	je     c0018b76 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018a42:	80 fa 1d             	cmp    dl,0x1d
c0018a45:	0f 84 36 01 00 00    	je     c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a4b:	b8 b0 da 02 c0       	mov    eax,0xc002dab0
c0018a50:	80 fa 25             	cmp    dl,0x25
c0018a53:	0f 84 28 01 00 00    	je     c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a59:	8d 4a da             	lea    ecx,[edx-0x26]
c0018a5c:	b8 a0 da 02 c0       	mov    eax,0xc002daa0
c0018a61:	80 f9 01             	cmp    cl,0x1
c0018a64:	0f 86 17 01 00 00    	jbe    c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a6a:	b8 c0 da 02 c0       	mov    eax,0xc002dac0
c0018a6f:	80 fa 2a             	cmp    dl,0x2a
c0018a72:	0f 84 09 01 00 00    	je     c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a78:	b8 b0 da 02 c0       	mov    eax,0xc002dab0
c0018a7d:	80 fa 2c             	cmp    dl,0x2c
c0018a80:	0f 84 fb 00 00 00    	je     c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a86:	b8 c0 da 02 c0       	mov    eax,0xc002dac0
c0018a8b:	80 fa 2d             	cmp    dl,0x2d
c0018a8e:	0f 84 ed 00 00 00    	je     c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a94:	b8 90 da 02 c0       	mov    eax,0xc002da90
c0018a99:	80 fa 2e             	cmp    dl,0x2e
c0018a9c:	0f 84 df 00 00 00    	je     c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aa2:	b8 b0 da 02 c0       	mov    eax,0xc002dab0
c0018aa7:	80 fa 2f             	cmp    dl,0x2f
c0018aaa:	0f 84 d1 00 00 00    	je     c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ab0:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018ab3:	b8 a0 da 02 c0       	mov    eax,0xc002daa0
c0018ab8:	80 f9 01             	cmp    cl,0x1
c0018abb:	0f 86 c0 00 00 00    	jbe    c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ac1:	b8 d0 da 02 c0       	mov    eax,0xc002dad0
c0018ac6:	80 fa 37             	cmp    dl,0x37
c0018ac9:	0f 84 b2 00 00 00    	je     c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018acf:	b8 e0 da 02 c0       	mov    eax,0xc002dae0
c0018ad4:	80 fa 3a             	cmp    dl,0x3a
c0018ad7:	0f 84 a4 00 00 00    	je     c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018add:	b8 f0 da 02 c0       	mov    eax,0xc002daf0
c0018ae2:	80 fa 3c             	cmp    dl,0x3c
c0018ae5:	0f 84 96 00 00 00    	je     c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aeb:	b8 00 db 02 c0       	mov    eax,0xc002db00
c0018af0:	80 fa 3d             	cmp    dl,0x3d
c0018af3:	0f 84 88 00 00 00    	je     c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018af9:	b8 e0 da 02 c0       	mov    eax,0xc002dae0
c0018afe:	80 fa 3e             	cmp    dl,0x3e
c0018b01:	74 7e                	je     c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b03:	8d 42 bb             	lea    eax,[edx-0x45]
c0018b06:	3c 01                	cmp    al,0x1
c0018b08:	76 72                	jbe    c0018b7c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b0a:	80 fa 3f             	cmp    dl,0x3f
c0018b0d:	74 6d                	je     c0018b7c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b0f:	80 fa 4a             	cmp    dl,0x4a
c0018b12:	74 0a                	je     c0018b1e <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018b14:	b8 ca bb 02 c0       	mov    eax,0xc002bbca
c0018b19:	80 fa 4d             	cmp    dl,0x4d
c0018b1c:	75 63                	jne    c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b1e:	b8 d0 da 02 c0       	mov    eax,0xc002dad0
c0018b23:	c3                   	ret    
c0018b24:	b8 ca bb 02 c0       	mov    eax,0xc002bbca
c0018b29:	80 f9 0b             	cmp    cl,0xb
c0018b2c:	75 0a                	jne    c0018b38 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018b2e:	fe ca                	dec    dl
c0018b30:	75 4f                	jne    c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b32:	b8 10 db 02 c0       	mov    eax,0xc002db10
c0018b37:	c3                   	ret    
c0018b38:	80 f9 0f             	cmp    cl,0xf
c0018b3b:	75 44                	jne    c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b3d:	b8 20 db 02 c0       	mov    eax,0xc002db20
c0018b42:	80 fa 02             	cmp    dl,0x2
c0018b45:	76 3a                	jbe    c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b47:	8d 42 fd             	lea    eax,[edx-0x3]
c0018b4a:	3c 01                	cmp    al,0x1
c0018b4c:	76 0a                	jbe    c0018b58 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018b4e:	b8 ca bb 02 c0       	mov    eax,0xc002bbca
c0018b53:	80 fa 06             	cmp    dl,0x6
c0018b56:	75 29                	jne    c0018b81 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b58:	b8 30 db 02 c0       	mov    eax,0xc002db30
c0018b5d:	c3                   	ret    
c0018b5e:	b8 10 da 02 c0       	mov    eax,0xc002da10
c0018b63:	c3                   	ret    
c0018b64:	b8 40 da 02 c0       	mov    eax,0xc002da40
c0018b69:	c3                   	ret    
c0018b6a:	b8 60 da 02 c0       	mov    eax,0xc002da60
c0018b6f:	c3                   	ret    
c0018b70:	b8 90 da 02 c0       	mov    eax,0xc002da90
c0018b75:	c3                   	ret    
c0018b76:	b8 a0 da 02 c0       	mov    eax,0xc002daa0
c0018b7b:	c3                   	ret    
c0018b7c:	b8 f0 da 02 c0       	mov    eax,0xc002daf0
c0018b81:	c3                   	ret    

c0018b82 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018b82:	60                   	pusha  
c0018b83:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018b8f:	9c                   	pushf  
c0018b90:	fa                   	cli    
c0018b91:	0f 09                	wbinvd 
c0018b93:	0f 30                	wrmsr  
c0018b95:	9d                   	popf   
c0018b96:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018b9a:	89 02                	mov    DWORD PTR [edx],eax
c0018b9c:	61                   	popa   
c0018b9d:	c3                   	ret    

c0018b9e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018b9e:	60                   	pusha  
c0018b9f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018ba3:	9c                   	pushf  
c0018ba4:	fa                   	cli    
c0018ba5:	0f 09                	wbinvd 
c0018ba7:	31 c0                	xor    eax,eax
c0018ba9:	31 d2                	xor    edx,edx
c0018bab:	0f 32                	rdmsr  
c0018bad:	9d                   	popf   
c0018bae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018bb2:	89 02                	mov    DWORD PTR [edx],eax
c0018bb4:	61                   	popa   
c0018bb5:	c3                   	ret    

c0018bb6 <CPU::AMD_K6_writeback(int, int, int)>:
c0018bb6:	56                   	push   esi
c0018bb7:	53                   	push   ebx
c0018bb8:	83 ec 10             	sub    esp,0x10
c0018bbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018bbf:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018bc4:	75 5d                	jne    c0018c23 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018bc6:	83 f8 08             	cmp    eax,0x8
c0018bc9:	75 09                	jne    c0018bd4 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018bcb:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018bd0:	7e 13                	jle    c0018be5 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018bd2:	eb 30                	jmp    c0018c04 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018bd4:	83 f8 06             	cmp    eax,0x6
c0018bd7:	7c 4a                	jl     c0018c23 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018bd9:	83 f8 07             	cmp    eax,0x7
c0018bdc:	7e 07                	jle    c0018be5 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018bde:	83 f8 09             	cmp    eax,0x9
c0018be1:	74 21                	je     c0018c04 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018be3:	eb 3e                	jmp    c0018c23 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018be5:	89 e6                	mov    esi,esp
c0018be7:	8b 1d 68 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e768
c0018bed:	56                   	push   esi
c0018bee:	c1 eb 15             	shr    ebx,0x15
c0018bf1:	68 82 00 00 c0       	push   0xc0000082
c0018bf6:	83 e3 7e             	and    ebx,0x7e
c0018bf9:	e8 a0 ff ff ff       	call   c0018b9e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018bfe:	56                   	push   esi
c0018bff:	6a 00                	push   0x0
c0018c01:	53                   	push   ebx
c0018c02:	eb 12                	jmp    c0018c16 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018c04:	89 e3                	mov    ebx,esp
c0018c06:	53                   	push   ebx
c0018c07:	68 82 00 00 c0       	push   0xc0000082
c0018c0c:	e8 8d ff ff ff       	call   c0018b9e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c11:	53                   	push   ebx
c0018c12:	6a 00                	push   0x0
c0018c14:	6a 00                	push   0x0
c0018c16:	68 82 00 00 c0       	push   0xc0000082
c0018c1b:	e8 62 ff ff ff       	call   c0018b82 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018c20:	83 c4 18             	add    esp,0x18
c0018c23:	83 c4 10             	add    esp,0x10
c0018c26:	5b                   	pop    ebx
c0018c27:	5e                   	pop    esi
c0018c28:	c3                   	ret    
c0018c29:	90                   	nop

c0018c2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018c2a:	55                   	push   ebp
c0018c2b:	57                   	push   edi
c0018c2c:	56                   	push   esi
c0018c2d:	53                   	push   ebx
c0018c2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c32:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018c36:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018c3a:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018c3e:	39 05 40 dc 02 c0    	cmp    DWORD PTR ds:0xc002dc40,eax
c0018c44:	75 23                	jne    c0018c69 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018c46:	a1 6c 12 03 c0       	mov    eax,ds:0xc003126c
c0018c4b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018c4f:	89 06                	mov    DWORD PTR [esi],eax
c0018c51:	a1 68 12 03 c0       	mov    eax,ds:0xc0031268
c0018c56:	89 07                	mov    DWORD PTR [edi],eax
c0018c58:	a1 64 12 03 c0       	mov    eax,ds:0xc0031264
c0018c5d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018c60:	a1 60 12 03 c0       	mov    eax,ds:0xc0031260
c0018c65:	89 02                	mov    DWORD PTR [edx],eax
c0018c67:	eb 3f                	jmp    c0018ca8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018c69:	31 c9                	xor    ecx,ecx
c0018c6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c6f:	0f a2                	cpuid  
c0018c71:	89 06                	mov    DWORD PTR [esi],eax
c0018c73:	89 1f                	mov    DWORD PTR [edi],ebx
c0018c75:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018c79:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018c7c:	89 10                	mov    DWORD PTR [eax],edx
c0018c7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c82:	a3 40 dc 02 c0       	mov    ds:0xc002dc40,eax
c0018c87:	8b 06                	mov    eax,DWORD PTR [esi]
c0018c89:	a3 6c 12 03 c0       	mov    ds:0xc003126c,eax
c0018c8e:	8b 07                	mov    eax,DWORD PTR [edi]
c0018c90:	a3 68 12 03 c0       	mov    ds:0xc0031268,eax
c0018c95:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018c98:	a3 64 12 03 c0       	mov    ds:0xc0031264,eax
c0018c9d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018ca1:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ca3:	a3 60 12 03 c0       	mov    ds:0xc0031260,eax
c0018ca8:	5b                   	pop    ebx
c0018ca9:	5e                   	pop    esi
c0018caa:	5f                   	pop    edi
c0018cab:	5d                   	pop    ebp
c0018cac:	c3                   	ret    
c0018cad:	90                   	nop

c0018cae <CPU::cpuidCheckEDX(unsigned int)>:
c0018cae:	83 ec 10             	sub    esp,0x10
c0018cb1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cb5:	50                   	push   eax
c0018cb6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cba:	50                   	push   eax
c0018cbb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cbf:	50                   	push   eax
c0018cc0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cc4:	50                   	push   eax
c0018cc5:	6a 01                	push   0x1
c0018cc7:	e8 5e ff ff ff       	call   c0018c2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ccc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018cd0:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018cd4:	0f 95 c0             	setne  al
c0018cd7:	83 c4 24             	add    esp,0x24
c0018cda:	c3                   	ret    
c0018cdb:	90                   	nop

c0018cdc <CPU::cpuidCheckECX(unsigned int)>:
c0018cdc:	83 ec 10             	sub    esp,0x10
c0018cdf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ce3:	50                   	push   eax
c0018ce4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ce8:	50                   	push   eax
c0018ce9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ced:	50                   	push   eax
c0018cee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cf2:	50                   	push   eax
c0018cf3:	6a 01                	push   0x1
c0018cf5:	e8 30 ff ff ff       	call   c0018c2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018cfa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018cfe:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d02:	0f 95 c0             	setne  al
c0018d05:	83 c4 24             	add    esp,0x24
c0018d08:	c3                   	ret    
c0018d09:	90                   	nop

c0018d0a <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018d0a:	83 ec 10             	sub    esp,0x10
c0018d0d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d11:	50                   	push   eax
c0018d12:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d16:	50                   	push   eax
c0018d17:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d1b:	50                   	push   eax
c0018d1c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d20:	50                   	push   eax
c0018d21:	6a 07                	push   0x7
c0018d23:	e8 02 ff ff ff       	call   c0018c2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d28:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d2c:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018d30:	0f 95 c0             	setne  al
c0018d33:	83 c4 24             	add    esp,0x24
c0018d36:	c3                   	ret    
c0018d37:	90                   	nop

c0018d38 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018d38:	83 ec 10             	sub    esp,0x10
c0018d3b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d3f:	50                   	push   eax
c0018d40:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d44:	50                   	push   eax
c0018d45:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d49:	50                   	push   eax
c0018d4a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d4e:	50                   	push   eax
c0018d4f:	6a 07                	push   0x7
c0018d51:	e8 d4 fe ff ff       	call   c0018c2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d56:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d5a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d5e:	0f 95 c0             	setne  al
c0018d61:	83 c4 24             	add    esp,0x24
c0018d64:	c3                   	ret    
c0018d65:	90                   	nop

c0018d66 <CPU::CPU()>:
c0018d66:	83 ec 0c             	sub    esp,0xc
c0018d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d6d:	83 ec 08             	sub    esp,0x8
c0018d70:	68 ca bb 02 c0       	push   0xc002bbca
c0018d75:	50                   	push   eax
c0018d76:	e8 65 b6 ff ff       	call   c00143e0 <Device::Device(char const*)>
c0018d7b:	83 c4 10             	add    esp,0x10
c0018d7e:	ba a4 bc 02 c0       	mov    edx,0xc002bca4
c0018d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d87:	89 10                	mov    DWORD PTR [eax],edx
c0018d89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d8d:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018d97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d9b:	05 78 01 00 00       	add    eax,0x178
c0018da0:	83 ec 0c             	sub    esp,0xc
c0018da3:	50                   	push   eax
c0018da4:	e8 b7 62 ff ff       	call   c000f060 <GDT::GDT()>
c0018da9:	83 c4 10             	add    esp,0x10
c0018dac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018db0:	05 7c 09 00 00       	add    eax,0x97c
c0018db5:	83 ec 0c             	sub    esp,0xc
c0018db8:	50                   	push   eax
c0018db9:	e8 04 65 ff ff       	call   c000f2c2 <IDT::IDT()>
c0018dbe:	83 c4 10             	add    esp,0x10
c0018dc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dc5:	05 7c 11 00 00       	add    eax,0x117c
c0018dca:	83 ec 0c             	sub    esp,0xc
c0018dcd:	50                   	push   eax
c0018dce:	e8 4d 85 ff ff       	call   c0011320 <TSS::TSS()>
c0018dd3:	83 c4 10             	add    esp,0x10
c0018dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dda:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018de5:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018def:	90                   	nop
c0018df0:	83 c4 0c             	add    esp,0xc
c0018df3:	c3                   	ret    

c0018df4 <CPU::displayFeatures()>:
c0018df4:	53                   	push   ebx
c0018df5:	83 ec 10             	sub    esp,0x10
c0018df8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018dfc:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018e02:	68 d8 b8 02 c0       	push   0xc002b8d8
c0018e07:	e8 b7 9f ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018e0c:	59                   	pop    ecx
c0018e0d:	58                   	pop    eax
c0018e0e:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018e14:	50                   	push   eax
c0018e15:	68 e9 b8 02 c0       	push   0xc002b8e9
c0018e1a:	e8 a4 9f ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018e1f:	58                   	pop    eax
c0018e20:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e26:	5a                   	pop    edx
c0018e27:	c1 e8 0e             	shr    eax,0xe
c0018e2a:	0f b6 c0             	movzx  eax,al
c0018e2d:	50                   	push   eax
c0018e2e:	68 fa b8 02 c0       	push   0xc002b8fa
c0018e33:	e8 8b 9f ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018e38:	59                   	pop    ecx
c0018e39:	58                   	pop    eax
c0018e3a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e40:	66 c1 e8 06          	shr    ax,0x6
c0018e44:	0f b6 c0             	movzx  eax,al
c0018e47:	50                   	push   eax
c0018e48:	68 0b b9 02 c0       	push   0xc002b90b
c0018e4d:	e8 71 9f ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018e52:	c7 04 24 b8 bd 02 c0 	mov    DWORD PTR [esp],0xc002bdb8
c0018e59:	e8 65 9f ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018e5e:	83 c4 10             	add    esp,0x10
c0018e61:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c0018e66:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018e6d:	74 05                	je     c0018e74 <CPU::displayFeatures()+0x80>
c0018e6f:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c0018e74:	52                   	push   edx
c0018e75:	52                   	push   edx
c0018e76:	50                   	push   eax
c0018e77:	68 1c b9 02 c0       	push   0xc002b91c
c0018e7c:	e8 42 9f ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018e81:	83 c4 10             	add    esp,0x10
c0018e84:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c0018e89:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018e90:	78 05                	js     c0018e97 <CPU::displayFeatures()+0xa3>
c0018e92:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c0018e97:	51                   	push   ecx
c0018e98:	51                   	push   ecx
c0018e99:	50                   	push   eax
c0018e9a:	68 33 b9 02 c0       	push   0xc002b933
c0018e9f:	e8 1f 9f ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018ea4:	83 c4 10             	add    esp,0x10
c0018ea7:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c0018eac:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018eb3:	75 05                	jne    c0018eba <CPU::displayFeatures()+0xc6>
c0018eb5:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c0018eba:	52                   	push   edx
c0018ebb:	52                   	push   edx
c0018ebc:	50                   	push   eax
c0018ebd:	68 4a b9 02 c0       	push   0xc002b94a
c0018ec2:	e8 fc 9e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018ec7:	83 c4 10             	add    esp,0x10
c0018eca:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c0018ecf:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018ed6:	75 05                	jne    c0018edd <CPU::displayFeatures()+0xe9>
c0018ed8:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c0018edd:	51                   	push   ecx
c0018ede:	51                   	push   ecx
c0018edf:	50                   	push   eax
c0018ee0:	68 61 b9 02 c0       	push   0xc002b961
c0018ee5:	e8 d9 9e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018eea:	83 c4 10             	add    esp,0x10
c0018eed:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c0018ef2:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018ef9:	75 05                	jne    c0018f00 <CPU::displayFeatures()+0x10c>
c0018efb:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c0018f00:	52                   	push   edx
c0018f01:	52                   	push   edx
c0018f02:	50                   	push   eax
c0018f03:	68 78 b9 02 c0       	push   0xc002b978
c0018f08:	e8 b6 9e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018f0d:	83 c4 10             	add    esp,0x10
c0018f10:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c0018f15:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018f1c:	75 05                	jne    c0018f23 <CPU::displayFeatures()+0x12f>
c0018f1e:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c0018f23:	51                   	push   ecx
c0018f24:	51                   	push   ecx
c0018f25:	50                   	push   eax
c0018f26:	68 8f b9 02 c0       	push   0xc002b98f
c0018f2b:	e8 93 9e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018f30:	83 c4 10             	add    esp,0x10
c0018f33:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c0018f38:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018f3f:	75 05                	jne    c0018f46 <CPU::displayFeatures()+0x152>
c0018f41:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c0018f46:	52                   	push   edx
c0018f47:	52                   	push   edx
c0018f48:	50                   	push   eax
c0018f49:	68 a6 b9 02 c0       	push   0xc002b9a6
c0018f4e:	e8 70 9e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018f53:	83 c4 10             	add    esp,0x10
c0018f56:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c0018f5b:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018f62:	75 05                	jne    c0018f69 <CPU::displayFeatures()+0x175>
c0018f64:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c0018f69:	51                   	push   ecx
c0018f6a:	51                   	push   ecx
c0018f6b:	50                   	push   eax
c0018f6c:	68 bd b9 02 c0       	push   0xc002b9bd
c0018f71:	e8 4d 9e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018f76:	83 c4 10             	add    esp,0x10
c0018f79:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c0018f7e:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018f85:	75 05                	jne    c0018f8c <CPU::displayFeatures()+0x198>
c0018f87:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c0018f8c:	52                   	push   edx
c0018f8d:	52                   	push   edx
c0018f8e:	50                   	push   eax
c0018f8f:	68 d4 b9 02 c0       	push   0xc002b9d4
c0018f94:	e8 2a 9e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018f99:	83 c4 10             	add    esp,0x10
c0018f9c:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c0018fa1:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018fa8:	75 05                	jne    c0018faf <CPU::displayFeatures()+0x1bb>
c0018faa:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c0018faf:	51                   	push   ecx
c0018fb0:	51                   	push   ecx
c0018fb1:	50                   	push   eax
c0018fb2:	68 eb b9 02 c0       	push   0xc002b9eb
c0018fb7:	e8 07 9e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018fbc:	83 c4 10             	add    esp,0x10
c0018fbf:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c0018fc4:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018fcb:	75 05                	jne    c0018fd2 <CPU::displayFeatures()+0x1de>
c0018fcd:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c0018fd2:	52                   	push   edx
c0018fd3:	52                   	push   edx
c0018fd4:	50                   	push   eax
c0018fd5:	68 02 ba 02 c0       	push   0xc002ba02
c0018fda:	e8 e4 9d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0018fdf:	83 c4 10             	add    esp,0x10
c0018fe2:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c0018fe7:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018fee:	75 05                	jne    c0018ff5 <CPU::displayFeatures()+0x201>
c0018ff0:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c0018ff5:	51                   	push   ecx
c0018ff6:	51                   	push   ecx
c0018ff7:	50                   	push   eax
c0018ff8:	68 19 ba 02 c0       	push   0xc002ba19
c0018ffd:	e8 c1 9d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0019002:	83 c4 10             	add    esp,0x10
c0019005:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c001900a:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0019011:	75 05                	jne    c0019018 <CPU::displayFeatures()+0x224>
c0019013:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c0019018:	52                   	push   edx
c0019019:	52                   	push   edx
c001901a:	50                   	push   eax
c001901b:	68 30 ba 02 c0       	push   0xc002ba30
c0019020:	e8 9e 9d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0019025:	83 c4 10             	add    esp,0x10
c0019028:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c001902d:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0019034:	78 05                	js     c001903b <CPU::displayFeatures()+0x247>
c0019036:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c001903b:	51                   	push   ecx
c001903c:	51                   	push   ecx
c001903d:	50                   	push   eax
c001903e:	68 47 ba 02 c0       	push   0xc002ba47
c0019043:	e8 7b 9d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0019048:	83 c4 10             	add    esp,0x10
c001904b:	b8 12 a2 02 c0       	mov    eax,0xc002a212
c0019050:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0019057:	75 05                	jne    c001905e <CPU::displayFeatures()+0x26a>
c0019059:	b8 16 a2 02 c0       	mov    eax,0xc002a216
c001905e:	52                   	push   edx
c001905f:	52                   	push   edx
c0019060:	50                   	push   eax
c0019061:	68 5e ba 02 c0       	push   0xc002ba5e
c0019066:	e8 58 9d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001906b:	83 c4 18             	add    esp,0x18
c001906e:	5b                   	pop    ebx
c001906f:	c3                   	ret    

c0019070 <CPU::detectFeatures()>:
c0019070:	55                   	push   ebp
c0019071:	57                   	push   edi
c0019072:	56                   	push   esi
c0019073:	53                   	push   ebx
c0019074:	83 ec 50             	sub    esp,0x50
c0019077:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c001907b:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0019085:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001908c:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0019092:	6a 0d                	push   0xd
c0019094:	6a 00                	push   0x0
c0019096:	57                   	push   edi
c0019097:	e8 e4 76 fe ff       	call   c0000780 <memset>
c001909c:	83 c4 10             	add    esp,0x10
c001909f:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c00190a4:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00190ab:	0f 84 20 09 00 00    	je     c00199d1 <CPU::detectFeatures()+0x961>
c00190b1:	83 ec 0c             	sub    esp,0xc
c00190b4:	6a 10                	push   0x10
c00190b6:	e8 f3 fb ff ff       	call   c0018cae <CPU::cpuidCheckEDX(unsigned int)>
c00190bb:	83 e0 01             	and    eax,0x1
c00190be:	8d 14 00             	lea    edx,[eax+eax*1]
c00190c1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00190c7:	83 e0 fd             	and    eax,0xfffffffd
c00190ca:	09 d0                	or     eax,edx
c00190cc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00190d2:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00190d9:	e8 d0 fb ff ff       	call   c0018cae <CPU::cpuidCheckEDX(unsigned int)>
c00190de:	83 e0 01             	and    eax,0x1
c00190e1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00190e8:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00190ee:	83 e0 fb             	and    eax,0xfffffffb
c00190f1:	09 d0                	or     eax,edx
c00190f3:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00190f9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019100:	e8 a9 fb ff ff       	call   c0018cae <CPU::cpuidCheckEDX(unsigned int)>
c0019105:	83 e0 01             	and    eax,0x1
c0019108:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001910f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019115:	83 e0 f7             	and    eax,0xfffffff7
c0019118:	09 d0                	or     eax,edx
c001911a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019120:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019127:	e8 82 fb ff ff       	call   c0018cae <CPU::cpuidCheckEDX(unsigned int)>
c001912c:	83 e0 01             	and    eax,0x1
c001912f:	c1 e0 04             	shl    eax,0x4
c0019132:	88 c2                	mov    dl,al
c0019134:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001913a:	83 e0 ef             	and    eax,0xffffffef
c001913d:	09 d0                	or     eax,edx
c001913f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019145:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001914c:	e8 5d fb ff ff       	call   c0018cae <CPU::cpuidCheckEDX(unsigned int)>
c0019151:	83 e0 01             	and    eax,0x1
c0019154:	c1 e0 05             	shl    eax,0x5
c0019157:	88 c2                	mov    dl,al
c0019159:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001915f:	83 e0 df             	and    eax,0xffffffdf
c0019162:	09 d0                	or     eax,edx
c0019164:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001916a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0019171:	e8 38 fb ff ff       	call   c0018cae <CPU::cpuidCheckEDX(unsigned int)>
c0019176:	83 e0 01             	and    eax,0x1
c0019179:	8d 14 00             	lea    edx,[eax+eax*1]
c001917c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019182:	83 e0 fd             	and    eax,0xfffffffd
c0019185:	09 d0                	or     eax,edx
c0019187:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001918d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0019194:	e8 15 fb ff ff       	call   c0018cae <CPU::cpuidCheckEDX(unsigned int)>
c0019199:	83 e0 01             	and    eax,0x1
c001919c:	c1 e0 06             	shl    eax,0x6
c001919f:	88 c2                	mov    dl,al
c00191a1:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00191a7:	83 e0 bf             	and    eax,0xffffffbf
c00191aa:	09 d0                	or     eax,edx
c00191ac:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00191b2:	58                   	pop    eax
c00191b3:	8d 74 24 28          	lea    esi,[esp+0x28]
c00191b7:	56                   	push   esi
c00191b8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00191bc:	55                   	push   ebp
c00191bd:	8d 44 24 28          	lea    eax,[esp+0x28]
c00191c1:	50                   	push   eax
c00191c2:	8d 54 24 28          	lea    edx,[esp+0x28]
c00191c6:	52                   	push   edx
c00191c7:	6a 00                	push   0x0
c00191c9:	e8 5c fa ff ff       	call   c0018c2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00191ce:	83 c4 1c             	add    esp,0x1c
c00191d1:	6a 04                	push   0x4
c00191d3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00191d7:	50                   	push   eax
c00191d8:	57                   	push   edi
c00191d9:	e8 6e 75 fe ff       	call   c000074c <memcpy>
c00191de:	83 c4 0c             	add    esp,0xc
c00191e1:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00191e7:	6a 04                	push   0x4
c00191e9:	56                   	push   esi
c00191ea:	50                   	push   eax
c00191eb:	e8 5c 75 fe ff       	call   c000074c <memcpy>
c00191f0:	83 c4 0c             	add    esp,0xc
c00191f3:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00191f9:	6a 04                	push   0x4
c00191fb:	55                   	push   ebp
c00191fc:	50                   	push   eax
c00191fd:	e8 4a 75 fe ff       	call   c000074c <memcpy>
c0019202:	58                   	pop    eax
c0019203:	5a                   	pop    edx
c0019204:	68 75 ba 02 c0       	push   0xc002ba75
c0019209:	57                   	push   edi
c001920a:	e8 b9 76 fe ff       	call   c00008c8 <strcmp>
c001920f:	83 c4 10             	add    esp,0x10
c0019212:	85 c0                	test   eax,eax
c0019214:	75 0f                	jne    c0019225 <CPU::detectFeatures()+0x1b5>
c0019216:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019220:	e9 22 02 00 00       	jmp    c0019447 <CPU::detectFeatures()+0x3d7>
c0019225:	50                   	push   eax
c0019226:	50                   	push   eax
c0019227:	68 82 ba 02 c0       	push   0xc002ba82
c001922c:	57                   	push   edi
c001922d:	e8 96 76 fe ff       	call   c00008c8 <strcmp>
c0019232:	83 c4 10             	add    esp,0x10
c0019235:	85 c0                	test   eax,eax
c0019237:	74 dd                	je     c0019216 <CPU::detectFeatures()+0x1a6>
c0019239:	51                   	push   ecx
c001923a:	51                   	push   ecx
c001923b:	68 8f ba 02 c0       	push   0xc002ba8f
c0019240:	57                   	push   edi
c0019241:	e8 82 76 fe ff       	call   c00008c8 <strcmp>
c0019246:	83 c4 10             	add    esp,0x10
c0019249:	85 c0                	test   eax,eax
c001924b:	74 2a                	je     c0019277 <CPU::detectFeatures()+0x207>
c001924d:	52                   	push   edx
c001924e:	52                   	push   edx
c001924f:	68 9c ba 02 c0       	push   0xc002ba9c
c0019254:	57                   	push   edi
c0019255:	e8 6e 76 fe ff       	call   c00008c8 <strcmp>
c001925a:	83 c4 10             	add    esp,0x10
c001925d:	85 c0                	test   eax,eax
c001925f:	74 16                	je     c0019277 <CPU::detectFeatures()+0x207>
c0019261:	50                   	push   eax
c0019262:	50                   	push   eax
c0019263:	68 a9 ba 02 c0       	push   0xc002baa9
c0019268:	57                   	push   edi
c0019269:	e8 5a 76 fe ff       	call   c00008c8 <strcmp>
c001926e:	83 c4 10             	add    esp,0x10
c0019271:	85 c0                	test   eax,eax
c0019273:	74 48                	je     c00192bd <CPU::detectFeatures()+0x24d>
c0019275:	eb 0f                	jmp    c0019286 <CPU::detectFeatures()+0x216>
c0019277:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019281:	e9 c1 01 00 00       	jmp    c0019447 <CPU::detectFeatures()+0x3d7>
c0019286:	50                   	push   eax
c0019287:	50                   	push   eax
c0019288:	68 b6 ba 02 c0       	push   0xc002bab6
c001928d:	57                   	push   edi
c001928e:	e8 35 76 fe ff       	call   c00008c8 <strcmp>
c0019293:	83 c4 10             	add    esp,0x10
c0019296:	85 c0                	test   eax,eax
c0019298:	74 23                	je     c00192bd <CPU::detectFeatures()+0x24d>
c001929a:	50                   	push   eax
c001929b:	50                   	push   eax
c001929c:	68 c3 ba 02 c0       	push   0xc002bac3
c00192a1:	57                   	push   edi
c00192a2:	e8 21 76 fe ff       	call   c00008c8 <strcmp>
c00192a7:	83 c4 10             	add    esp,0x10
c00192aa:	85 c0                	test   eax,eax
c00192ac:	75 1e                	jne    c00192cc <CPU::detectFeatures()+0x25c>
c00192ae:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00192b8:	e9 8a 01 00 00       	jmp    c0019447 <CPU::detectFeatures()+0x3d7>
c00192bd:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00192c7:	e9 7b 01 00 00       	jmp    c0019447 <CPU::detectFeatures()+0x3d7>
c00192cc:	50                   	push   eax
c00192cd:	50                   	push   eax
c00192ce:	68 d0 ba 02 c0       	push   0xc002bad0
c00192d3:	57                   	push   edi
c00192d4:	e8 ef 75 fe ff       	call   c00008c8 <strcmp>
c00192d9:	83 c4 10             	add    esp,0x10
c00192dc:	85 c0                	test   eax,eax
c00192de:	75 0f                	jne    c00192ef <CPU::detectFeatures()+0x27f>
c00192e0:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00192ea:	e9 58 01 00 00       	jmp    c0019447 <CPU::detectFeatures()+0x3d7>
c00192ef:	50                   	push   eax
c00192f0:	50                   	push   eax
c00192f1:	68 8f ba 02 c0       	push   0xc002ba8f
c00192f6:	57                   	push   edi
c00192f7:	e8 cc 75 fe ff       	call   c00008c8 <strcmp>
c00192fc:	83 c4 10             	add    esp,0x10
c00192ff:	85 c0                	test   eax,eax
c0019301:	75 0f                	jne    c0019312 <CPU::detectFeatures()+0x2a2>
c0019303:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001930d:	e9 35 01 00 00       	jmp    c0019447 <CPU::detectFeatures()+0x3d7>
c0019312:	50                   	push   eax
c0019313:	50                   	push   eax
c0019314:	68 dd ba 02 c0       	push   0xc002badd
c0019319:	57                   	push   edi
c001931a:	e8 a9 75 fe ff       	call   c00008c8 <strcmp>
c001931f:	83 c4 10             	add    esp,0x10
c0019322:	85 c0                	test   eax,eax
c0019324:	75 0f                	jne    c0019335 <CPU::detectFeatures()+0x2c5>
c0019326:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019330:	e9 12 01 00 00       	jmp    c0019447 <CPU::detectFeatures()+0x3d7>
c0019335:	51                   	push   ecx
c0019336:	51                   	push   ecx
c0019337:	68 ea ba 02 c0       	push   0xc002baea
c001933c:	57                   	push   edi
c001933d:	e8 86 75 fe ff       	call   c00008c8 <strcmp>
c0019342:	83 c4 10             	add    esp,0x10
c0019345:	85 c0                	test   eax,eax
c0019347:	75 0f                	jne    c0019358 <CPU::detectFeatures()+0x2e8>
c0019349:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019353:	e9 ef 00 00 00       	jmp    c0019447 <CPU::detectFeatures()+0x3d7>
c0019358:	52                   	push   edx
c0019359:	52                   	push   edx
c001935a:	68 f7 ba 02 c0       	push   0xc002baf7
c001935f:	57                   	push   edi
c0019360:	e8 63 75 fe ff       	call   c00008c8 <strcmp>
c0019365:	83 c4 10             	add    esp,0x10
c0019368:	85 c0                	test   eax,eax
c001936a:	75 0f                	jne    c001937b <CPU::detectFeatures()+0x30b>
c001936c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019376:	e9 cc 00 00 00       	jmp    c0019447 <CPU::detectFeatures()+0x3d7>
c001937b:	50                   	push   eax
c001937c:	50                   	push   eax
c001937d:	68 04 bb 02 c0       	push   0xc002bb04
c0019382:	57                   	push   edi
c0019383:	e8 40 75 fe ff       	call   c00008c8 <strcmp>
c0019388:	83 c4 10             	add    esp,0x10
c001938b:	85 c0                	test   eax,eax
c001938d:	75 0f                	jne    c001939e <CPU::detectFeatures()+0x32e>
c001938f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019399:	e9 a9 00 00 00       	jmp    c0019447 <CPU::detectFeatures()+0x3d7>
c001939e:	50                   	push   eax
c001939f:	50                   	push   eax
c00193a0:	68 11 bb 02 c0       	push   0xc002bb11
c00193a5:	57                   	push   edi
c00193a6:	e8 1d 75 fe ff       	call   c00008c8 <strcmp>
c00193ab:	83 c4 10             	add    esp,0x10
c00193ae:	85 c0                	test   eax,eax
c00193b0:	75 0f                	jne    c00193c1 <CPU::detectFeatures()+0x351>
c00193b2:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00193bc:	e9 86 00 00 00       	jmp    c0019447 <CPU::detectFeatures()+0x3d7>
c00193c1:	50                   	push   eax
c00193c2:	50                   	push   eax
c00193c3:	68 1e bb 02 c0       	push   0xc002bb1e
c00193c8:	57                   	push   edi
c00193c9:	e8 fa 74 fe ff       	call   c00008c8 <strcmp>
c00193ce:	83 c4 10             	add    esp,0x10
c00193d1:	85 c0                	test   eax,eax
c00193d3:	75 0c                	jne    c00193e1 <CPU::detectFeatures()+0x371>
c00193d5:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00193df:	eb 66                	jmp    c0019447 <CPU::detectFeatures()+0x3d7>
c00193e1:	50                   	push   eax
c00193e2:	50                   	push   eax
c00193e3:	68 2b bb 02 c0       	push   0xc002bb2b
c00193e8:	57                   	push   edi
c00193e9:	e8 da 74 fe ff       	call   c00008c8 <strcmp>
c00193ee:	83 c4 10             	add    esp,0x10
c00193f1:	85 c0                	test   eax,eax
c00193f3:	75 0c                	jne    c0019401 <CPU::detectFeatures()+0x391>
c00193f5:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00193ff:	eb 46                	jmp    c0019447 <CPU::detectFeatures()+0x3d7>
c0019401:	50                   	push   eax
c0019402:	50                   	push   eax
c0019403:	68 38 bb 02 c0       	push   0xc002bb38
c0019408:	57                   	push   edi
c0019409:	e8 ba 74 fe ff       	call   c00008c8 <strcmp>
c001940e:	83 c4 10             	add    esp,0x10
c0019411:	85 c0                	test   eax,eax
c0019413:	74 e0                	je     c00193f5 <CPU::detectFeatures()+0x385>
c0019415:	50                   	push   eax
c0019416:	50                   	push   eax
c0019417:	68 45 bb 02 c0       	push   0xc002bb45
c001941c:	57                   	push   edi
c001941d:	e8 a6 74 fe ff       	call   c00008c8 <strcmp>
c0019422:	83 c4 10             	add    esp,0x10
c0019425:	85 c0                	test   eax,eax
c0019427:	74 cc                	je     c00193f5 <CPU::detectFeatures()+0x385>
c0019429:	51                   	push   ecx
c001942a:	51                   	push   ecx
c001942b:	68 52 bb 02 c0       	push   0xc002bb52
c0019430:	57                   	push   edi
c0019431:	e8 92 74 fe ff       	call   c00008c8 <strcmp>
c0019436:	83 c4 10             	add    esp,0x10
c0019439:	85 c0                	test   eax,eax
c001943b:	74 b8                	je     c00193f5 <CPU::detectFeatures()+0x385>
c001943d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019447:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001944c:	0f 86 be 00 00 00    	jbe    c0019510 <CPU::detectFeatures()+0x4a0>
c0019452:	83 ec 0c             	sub    esp,0xc
c0019455:	68 80 00 00 00       	push   0x80
c001945a:	e8 ab f8 ff ff       	call   c0018d0a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001945f:	83 e0 01             	and    eax,0x1
c0019462:	c1 e0 06             	shl    eax,0x6
c0019465:	88 c2                	mov    dl,al
c0019467:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001946d:	83 e0 bf             	and    eax,0xffffffbf
c0019470:	09 d0                	or     eax,edx
c0019472:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019478:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001947f:	e8 86 f8 ff ff       	call   c0018d0a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019484:	83 e0 01             	and    eax,0x1
c0019487:	c1 e0 04             	shl    eax,0x4
c001948a:	88 c2                	mov    dl,al
c001948c:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019492:	83 e0 ef             	and    eax,0xffffffef
c0019495:	09 d0                	or     eax,edx
c0019497:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001949d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00194a4:	e8 61 f8 ff ff       	call   c0018d0a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194a9:	c1 e0 07             	shl    eax,0x7
c00194ac:	88 c2                	mov    dl,al
c00194ae:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00194b4:	83 e0 7f             	and    eax,0x7f
c00194b7:	09 d0                	or     eax,edx
c00194b9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00194bf:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00194c6:	e8 6d f8 ff ff       	call   c0018d38 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00194cb:	83 e0 01             	and    eax,0x1
c00194ce:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00194d5:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00194db:	83 e0 f7             	and    eax,0xfffffff7
c00194de:	09 d0                	or     eax,edx
c00194e0:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00194e6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00194ed:	e8 46 f8 ff ff       	call   c0018d38 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00194f2:	83 c4 10             	add    esp,0x10
c00194f5:	83 e0 01             	and    eax,0x1
c00194f8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00194ff:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019505:	83 e0 fb             	and    eax,0xfffffffb
c0019508:	09 d0                	or     eax,edx
c001950a:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019510:	83 ec 0c             	sub    esp,0xc
c0019513:	56                   	push   esi
c0019514:	55                   	push   ebp
c0019515:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019519:	57                   	push   edi
c001951a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001951e:	50                   	push   eax
c001951f:	6a 01                	push   0x1
c0019521:	e8 04 f7 ff ff       	call   c0018c2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019526:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001952a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019530:	88 ca                	mov    dl,cl
c0019532:	83 e0 f0             	and    eax,0xfffffff0
c0019535:	83 e2 0f             	and    edx,0xf
c0019538:	09 d0                	or     eax,edx
c001953a:	88 ca                	mov    dl,cl
c001953c:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019542:	c0 ea 04             	shr    dl,0x4
c0019545:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019549:	0f b6 c2             	movzx  eax,dl
c001954c:	83 c4 20             	add    esp,0x20
c001954f:	c1 e0 06             	shl    eax,0x6
c0019552:	89 c5                	mov    ebp,eax
c0019554:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001955a:	66 25 3f c0          	and    ax,0xc03f
c001955e:	09 e8                	or     eax,ebp
c0019560:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019567:	89 c8                	mov    eax,ecx
c0019569:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001956f:	c1 e8 08             	shr    eax,0x8
c0019572:	83 e2 3f             	and    edx,0x3f
c0019575:	83 e0 0f             	and    eax,0xf
c0019578:	89 c5                	mov    ebp,eax
c001957a:	c1 e5 06             	shl    ebp,0x6
c001957d:	09 d5                	or     ebp,edx
c001957f:	89 ea                	mov    edx,ebp
c0019581:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019587:	88 c2                	mov    dl,al
c0019589:	c0 ea 02             	shr    dl,0x2
c001958c:	89 d5                	mov    ebp,edx
c001958e:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0019594:	83 e2 c0             	and    edx,0xffffffc0
c0019597:	09 d5                	or     ebp,edx
c0019599:	89 ea                	mov    edx,ebp
c001959b:	89 cd                	mov    ebp,ecx
c001959d:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00195a3:	c1 ed 0c             	shr    ebp,0xc
c00195a6:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00195ac:	83 e5 03             	and    ebp,0x3
c00195af:	83 e2 cf             	and    edx,0xffffffcf
c00195b2:	c1 e5 04             	shl    ebp,0x4
c00195b5:	09 d5                	or     ebp,edx
c00195b7:	3c 06                	cmp    al,0x6
c00195b9:	89 ea                	mov    edx,ebp
c00195bb:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00195c1:	74 04                	je     c00195c7 <CPU::detectFeatures()+0x557>
c00195c3:	3c 0f                	cmp    al,0xf
c00195c5:	75 5c                	jne    c0019623 <CPU::detectFeatures()+0x5b3>
c00195c7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00195cb:	89 cd                	mov    ebp,ecx
c00195cd:	c1 ed 10             	shr    ebp,0x10
c00195d0:	c1 e5 04             	shl    ebp,0x4
c00195d3:	09 ea                	or     edx,ebp
c00195d5:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00195db:	0f b6 d2             	movzx  edx,dl
c00195de:	66 81 e5 3f c0       	and    bp,0xc03f
c00195e3:	c1 e2 06             	shl    edx,0x6
c00195e6:	09 ea                	or     edx,ebp
c00195e8:	3c 0f                	cmp    al,0xf
c00195ea:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00195f1:	75 30                	jne    c0019623 <CPU::detectFeatures()+0x5b3>
c00195f3:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00195f9:	c1 e9 14             	shr    ecx,0x14
c00195fc:	83 e0 3f             	and    eax,0x3f
c00195ff:	83 c1 0f             	add    ecx,0xf
c0019602:	88 ca                	mov    dl,cl
c0019604:	c0 e9 02             	shr    cl,0x2
c0019607:	c1 e2 06             	shl    edx,0x6
c001960a:	09 d0                	or     eax,edx
c001960c:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019612:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019618:	83 e0 c0             	and    eax,0xffffffc0
c001961b:	09 c1                	or     ecx,eax
c001961d:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019623:	83 ec 0c             	sub    esp,0xc
c0019626:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001962d:	56                   	push   esi
c001962e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019632:	50                   	push   eax
c0019633:	57                   	push   edi
c0019634:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019638:	55                   	push   ebp
c0019639:	68 00 00 00 80       	push   0x80000000
c001963e:	e8 e7 f5 ff ff       	call   c0018c2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019643:	83 c4 20             	add    esp,0x20
c0019646:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001964e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019652:	76 1e                	jbe    c0019672 <CPU::detectFeatures()+0x602>
c0019654:	83 ec 0c             	sub    esp,0xc
c0019657:	56                   	push   esi
c0019658:	50                   	push   eax
c0019659:	57                   	push   edi
c001965a:	55                   	push   ebp
c001965b:	68 01 00 00 80       	push   0x80000001
c0019660:	e8 c5 f5 ff ff       	call   c0018c2a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019665:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001966f:	83 c4 20             	add    esp,0x20
c0019672:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019678:	83 f8 01             	cmp    eax,0x1
c001967b:	75 6f                	jne    c00196ec <CPU::detectFeatures()+0x67c>
c001967d:	51                   	push   ecx
c001967e:	51                   	push   ecx
c001967f:	68 5e bb 02 c0       	push   0xc002bb5e
c0019684:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019688:	56                   	push   esi
c0019689:	e8 ae 71 fe ff       	call   c000083c <strcpy>
c001968e:	5f                   	pop    edi
c001968f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019695:	5d                   	pop    ebp
c0019696:	66 c1 e8 06          	shr    ax,0x6
c001969a:	0f b6 c0             	movzx  eax,al
c001969d:	50                   	push   eax
c001969e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196a4:	c1 e8 0e             	shr    eax,0xe
c00196a7:	0f b6 c0             	movzx  eax,al
c00196aa:	50                   	push   eax
c00196ab:	e8 24 f2 ff ff       	call   c00188d4 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00196b0:	5a                   	pop    edx
c00196b1:	59                   	pop    ecx
c00196b2:	50                   	push   eax
c00196b3:	56                   	push   esi
c00196b4:	e8 c3 72 fe ff       	call   c000097c <strcat>
c00196b9:	5f                   	pop    edi
c00196ba:	5d                   	pop    ebp
c00196bb:	56                   	push   esi
c00196bc:	53                   	push   ebx
c00196bd:	e8 10 ad ff ff       	call   c00143d2 <Device::setName(char const*)>
c00196c2:	58                   	pop    eax
c00196c3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00196c9:	5a                   	pop    edx
c00196ca:	68 65 bb 02 c0       	push   0xc002bb65
c00196cf:	50                   	push   eax
c00196d0:	e8 f3 71 fe ff       	call   c00008c8 <strcmp>
c00196d5:	83 c4 10             	add    esp,0x10
c00196d8:	85 c0                	test   eax,eax
c00196da:	0f 85 71 03 00 00    	jne    c0019a51 <CPU::detectFeatures()+0x9e1>
c00196e0:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00196e7:	e9 65 03 00 00       	jmp    c0019a51 <CPU::detectFeatures()+0x9e1>
c00196ec:	83 f8 02             	cmp    eax,0x2
c00196ef:	0f 85 b5 00 00 00    	jne    c00197aa <CPU::detectFeatures()+0x73a>
c00196f5:	57                   	push   edi
c00196f6:	57                   	push   edi
c00196f7:	68 77 bb 02 c0       	push   0xc002bb77
c00196fc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019700:	56                   	push   esi
c0019701:	e8 36 71 fe ff       	call   c000083c <strcpy>
c0019706:	5d                   	pop    ebp
c0019707:	58                   	pop    eax
c0019708:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001970e:	66 c1 e8 06          	shr    ax,0x6
c0019712:	0f b6 c0             	movzx  eax,al
c0019715:	50                   	push   eax
c0019716:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001971c:	c1 e8 0e             	shr    eax,0xe
c001971f:	0f b6 c0             	movzx  eax,al
c0019722:	50                   	push   eax
c0019723:	e8 18 f0 ff ff       	call   c0018740 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019728:	5a                   	pop    edx
c0019729:	59                   	pop    ecx
c001972a:	50                   	push   eax
c001972b:	56                   	push   esi
c001972c:	e8 4b 72 fe ff       	call   c000097c <strcat>
c0019731:	5f                   	pop    edi
c0019732:	5d                   	pop    ebp
c0019733:	56                   	push   esi
c0019734:	53                   	push   ebx
c0019735:	e8 98 ac ff ff       	call   c00143d2 <Device::setName(char const*)>
c001973a:	58                   	pop    eax
c001973b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019741:	5a                   	pop    edx
c0019742:	68 7c bb 02 c0       	push   0xc002bb7c
c0019747:	50                   	push   eax
c0019748:	e8 7b 71 fe ff       	call   c00008c8 <strcmp>
c001974d:	83 c4 10             	add    esp,0x10
c0019750:	85 c0                	test   eax,eax
c0019752:	75 20                	jne    c0019774 <CPU::detectFeatures()+0x704>
c0019754:	8b 15 28 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e728
c001975a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019760:	a8 01                	test   al,0x1
c0019762:	74 10                	je     c0019774 <CPU::detectFeatures()+0x704>
c0019764:	83 e0 fe             	and    eax,0xfffffffe
c0019767:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001976d:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019774:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001977a:	c1 e8 0e             	shr    eax,0xe
c001977d:	3c 05                	cmp    al,0x5
c001977f:	0f 85 cc 02 00 00    	jne    c0019a51 <CPU::detectFeatures()+0x9e1>
c0019785:	56                   	push   esi
c0019786:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001978c:	83 e0 0f             	and    eax,0xf
c001978f:	50                   	push   eax
c0019790:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019796:	66 c1 e8 06          	shr    ax,0x6
c001979a:	0f b6 c0             	movzx  eax,al
c001979d:	50                   	push   eax
c001979e:	6a 05                	push   0x5
c00197a0:	e8 11 f4 ff ff       	call   c0018bb6 <CPU::AMD_K6_writeback(int, int, int)>
c00197a5:	e9 1f 02 00 00       	jmp    c00199c9 <CPU::detectFeatures()+0x959>
c00197aa:	8d 50 fd             	lea    edx,[eax-0x3]
c00197ad:	83 fa 01             	cmp    edx,0x1
c00197b0:	76 09                	jbe    c00197bb <CPU::detectFeatures()+0x74b>
c00197b2:	83 f8 06             	cmp    eax,0x6
c00197b5:	0f 85 91 01 00 00    	jne    c001994c <CPU::detectFeatures()+0x8dc>
c00197bb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00197c1:	c1 ea 0e             	shr    edx,0xe
c00197c4:	80 fa 05             	cmp    dl,0x5
c00197c7:	75 7b                	jne    c0019844 <CPU::detectFeatures()+0x7d4>
c00197c9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00197cf:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00197d4:	66 81 fa 00 01       	cmp    dx,0x100
c00197d9:	75 0c                	jne    c00197e7 <CPU::detectFeatures()+0x777>
c00197db:	51                   	push   ecx
c00197dc:	51                   	push   ecx
c00197dd:	68 83 bb 02 c0       	push   0xc002bb83
c00197e2:	e9 dc 01 00 00       	jmp    c00199c3 <CPU::detectFeatures()+0x953>
c00197e7:	66 81 fa 00 02       	cmp    dx,0x200
c00197ec:	75 0c                	jne    c00197fa <CPU::detectFeatures()+0x78a>
c00197ee:	52                   	push   edx
c00197ef:	52                   	push   edx
c00197f0:	68 96 bb 02 c0       	push   0xc002bb96
c00197f5:	e9 c9 01 00 00       	jmp    c00199c3 <CPU::detectFeatures()+0x953>
c00197fa:	66 81 fa 40 02       	cmp    dx,0x240
c00197ff:	75 0c                	jne    c001980d <CPU::detectFeatures()+0x79d>
c0019801:	50                   	push   eax
c0019802:	50                   	push   eax
c0019803:	68 a8 bb 02 c0       	push   0xc002bba8
c0019808:	e9 b6 01 00 00       	jmp    c00199c3 <CPU::detectFeatures()+0x953>
c001980d:	83 f8 06             	cmp    eax,0x6
c0019810:	75 0c                	jne    c001981e <CPU::detectFeatures()+0x7ae>
c0019812:	50                   	push   eax
c0019813:	50                   	push   eax
c0019814:	68 ba bb 02 c0       	push   0xc002bbba
c0019819:	e9 a5 01 00 00       	jmp    c00199c3 <CPU::detectFeatures()+0x953>
c001981e:	83 f8 04             	cmp    eax,0x4
c0019821:	75 0c                	jne    c001982f <CPU::detectFeatures()+0x7bf>
c0019823:	50                   	push   eax
c0019824:	50                   	push   eax
c0019825:	68 c6 bb 02 c0       	push   0xc002bbc6
c001982a:	e9 94 01 00 00       	jmp    c00199c3 <CPU::detectFeatures()+0x953>
c001982f:	83 f8 03             	cmp    eax,0x3
c0019832:	0f 85 19 02 00 00    	jne    c0019a51 <CPU::detectFeatures()+0x9e1>
c0019838:	50                   	push   eax
c0019839:	50                   	push   eax
c001983a:	68 ce bb 02 c0       	push   0xc002bbce
c001983f:	e9 7f 01 00 00       	jmp    c00199c3 <CPU::detectFeatures()+0x953>
c0019844:	80 fa 06             	cmp    dl,0x6
c0019847:	0f 85 db 00 00 00    	jne    c0019928 <CPU::detectFeatures()+0x8b8>
c001984d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019853:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019858:	66 81 fa 80 01       	cmp    dx,0x180
c001985d:	75 0c                	jne    c001986b <CPU::detectFeatures()+0x7fb>
c001985f:	50                   	push   eax
c0019860:	50                   	push   eax
c0019861:	68 d9 bb 02 c0       	push   0xc002bbd9
c0019866:	e9 58 01 00 00       	jmp    c00199c3 <CPU::detectFeatures()+0x953>
c001986b:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019871:	66 f7 c1 80 ff       	test   cx,0xff80
c0019876:	75 0c                	jne    c0019884 <CPU::detectFeatures()+0x814>
c0019878:	50                   	push   eax
c0019879:	50                   	push   eax
c001987a:	68 e9 bb 02 c0       	push   0xc002bbe9
c001987f:	e9 3f 01 00 00       	jmp    c00199c3 <CPU::detectFeatures()+0x953>
c0019884:	66 81 fa 40 02       	cmp    dx,0x240
c0019889:	75 0c                	jne    c0019897 <CPU::detectFeatures()+0x827>
c001988b:	55                   	push   ebp
c001988c:	55                   	push   ebp
c001988d:	68 f0 bb 02 c0       	push   0xc002bbf0
c0019892:	e9 2c 01 00 00       	jmp    c00199c3 <CPU::detectFeatures()+0x953>
c0019897:	66 81 fa 80 02       	cmp    dx,0x280
c001989c:	75 0c                	jne    c00198aa <CPU::detectFeatures()+0x83a>
c001989e:	57                   	push   edi
c001989f:	57                   	push   edi
c00198a0:	68 f9 bb 02 c0       	push   0xc002bbf9
c00198a5:	e9 19 01 00 00       	jmp    c00199c3 <CPU::detectFeatures()+0x953>
c00198aa:	66 81 fa 40 03       	cmp    dx,0x340
c00198af:	74 ed                	je     c001989e <CPU::detectFeatures()+0x82e>
c00198b1:	66 81 fa c0 03       	cmp    dx,0x3c0
c00198b6:	75 0c                	jne    c00198c4 <CPU::detectFeatures()+0x854>
c00198b8:	56                   	push   esi
c00198b9:	56                   	push   esi
c00198ba:	68 00 bc 02 c0       	push   0xc002bc00
c00198bf:	e9 ff 00 00 00       	jmp    c00199c3 <CPU::detectFeatures()+0x953>
c00198c4:	83 f8 06             	cmp    eax,0x6
c00198c7:	0f 84 45 ff ff ff    	je     c0019812 <CPU::detectFeatures()+0x7a2>
c00198cd:	83 f8 04             	cmp    eax,0x4
c00198d0:	0f 84 4d ff ff ff    	je     c0019823 <CPU::detectFeatures()+0x7b3>
c00198d6:	83 f8 03             	cmp    eax,0x3
c00198d9:	0f 85 72 01 00 00    	jne    c0019a51 <CPU::detectFeatures()+0x9e1>
c00198df:	51                   	push   ecx
c00198e0:	51                   	push   ecx
c00198e1:	68 09 bc 02 c0       	push   0xc002bc09
c00198e6:	53                   	push   ebx
c00198e7:	e8 e6 aa ff ff       	call   c00143d2 <Device::setName(char const*)>
c00198ec:	b1 c1                	mov    cl,0xc1
c00198ee:	88 c8                	mov    al,cl
c00198f0:	e6 22                	out    0x22,al
c00198f2:	e4 23                	in     al,0x23
c00198f4:	88 c2                	mov    dl,al
c00198f6:	88 c8                	mov    al,cl
c00198f8:	e6 22                	out    0x22,al
c00198fa:	88 d0                	mov    al,dl
c00198fc:	83 c8 10             	or     eax,0x10
c00198ff:	e6 23                	out    0x23,al
c0019901:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019908:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001990b:	89 d0                	mov    eax,edx
c001990d:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019913:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019917:	40                   	inc    eax
c0019918:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001991e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019923:	e9 a1 00 00 00       	jmp    c00199c9 <CPU::detectFeatures()+0x959>
c0019928:	83 f8 06             	cmp    eax,0x6
c001992b:	0f 84 e1 fe ff ff    	je     c0019812 <CPU::detectFeatures()+0x7a2>
c0019931:	83 f8 04             	cmp    eax,0x4
c0019934:	0f 84 e9 fe ff ff    	je     c0019823 <CPU::detectFeatures()+0x7b3>
c001993a:	83 f8 03             	cmp    eax,0x3
c001993d:	0f 85 0e 01 00 00    	jne    c0019a51 <CPU::detectFeatures()+0x9e1>
c0019943:	52                   	push   edx
c0019944:	52                   	push   edx
c0019945:	68 14 bc 02 c0       	push   0xc002bc14
c001994a:	eb 77                	jmp    c00199c3 <CPU::detectFeatures()+0x953>
c001994c:	83 f8 07             	cmp    eax,0x7
c001994f:	75 09                	jne    c001995a <CPU::detectFeatures()+0x8ea>
c0019951:	50                   	push   eax
c0019952:	50                   	push   eax
c0019953:	68 1e bc 02 c0       	push   0xc002bc1e
c0019958:	eb 69                	jmp    c00199c3 <CPU::detectFeatures()+0x953>
c001995a:	83 f8 0a             	cmp    eax,0xa
c001995d:	75 09                	jne    c0019968 <CPU::detectFeatures()+0x8f8>
c001995f:	50                   	push   eax
c0019960:	50                   	push   eax
c0019961:	68 29 bc 02 c0       	push   0xc002bc29
c0019966:	eb 5b                	jmp    c00199c3 <CPU::detectFeatures()+0x953>
c0019968:	83 f8 0b             	cmp    eax,0xb
c001996b:	75 09                	jne    c0019976 <CPU::detectFeatures()+0x906>
c001996d:	50                   	push   eax
c001996e:	50                   	push   eax
c001996f:	68 31 bc 02 c0       	push   0xc002bc31
c0019974:	eb 4d                	jmp    c00199c3 <CPU::detectFeatures()+0x953>
c0019976:	83 f8 08             	cmp    eax,0x8
c0019979:	75 09                	jne    c0019984 <CPU::detectFeatures()+0x914>
c001997b:	50                   	push   eax
c001997c:	50                   	push   eax
c001997d:	68 3a bc 02 c0       	push   0xc002bc3a
c0019982:	eb 3f                	jmp    c00199c3 <CPU::detectFeatures()+0x953>
c0019984:	83 f8 09             	cmp    eax,0x9
c0019987:	75 09                	jne    c0019992 <CPU::detectFeatures()+0x922>
c0019989:	50                   	push   eax
c001998a:	50                   	push   eax
c001998b:	68 42 bc 02 c0       	push   0xc002bc42
c0019990:	eb 31                	jmp    c00199c3 <CPU::detectFeatures()+0x953>
c0019992:	83 f8 05             	cmp    eax,0x5
c0019995:	75 09                	jne    c00199a0 <CPU::detectFeatures()+0x930>
c0019997:	50                   	push   eax
c0019998:	50                   	push   eax
c0019999:	68 4a bc 02 c0       	push   0xc002bc4a
c001999e:	eb 23                	jmp    c00199c3 <CPU::detectFeatures()+0x953>
c00199a0:	83 f8 0c             	cmp    eax,0xc
c00199a3:	75 09                	jne    c00199ae <CPU::detectFeatures()+0x93e>
c00199a5:	55                   	push   ebp
c00199a6:	55                   	push   ebp
c00199a7:	68 58 bc 02 c0       	push   0xc002bc58
c00199ac:	eb 15                	jmp    c00199c3 <CPU::detectFeatures()+0x953>
c00199ae:	83 f8 0d             	cmp    eax,0xd
c00199b1:	75 09                	jne    c00199bc <CPU::detectFeatures()+0x94c>
c00199b3:	57                   	push   edi
c00199b4:	57                   	push   edi
c00199b5:	68 63 bc 02 c0       	push   0xc002bc63
c00199ba:	eb 07                	jmp    c00199c3 <CPU::detectFeatures()+0x953>
c00199bc:	56                   	push   esi
c00199bd:	56                   	push   esi
c00199be:	68 77 bc 02 c0       	push   0xc002bc77
c00199c3:	53                   	push   ebx
c00199c4:	e8 09 aa ff ff       	call   c00143d2 <Device::setName(char const*)>
c00199c9:	83 c4 10             	add    esp,0x10
c00199cc:	e9 80 00 00 00       	jmp    c0019a51 <CPU::detectFeatures()+0x9e1>
c00199d1:	51                   	push   ecx
c00199d2:	51                   	push   ecx
c00199d3:	68 c3 ba 02 c0       	push   0xc002bac3
c00199d8:	57                   	push   edi
c00199d9:	e8 5e 6e fe ff       	call   c000083c <strcpy>
c00199de:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00199e8:	e8 c1 68 fe ff       	call   c00002ae <is486>
c00199ed:	83 c4 10             	add    esp,0x10
c00199f0:	85 c0                	test   eax,eax
c00199f2:	74 2b                	je     c0019a1f <CPU::detectFeatures()+0x9af>
c00199f4:	52                   	push   edx
c00199f5:	52                   	push   edx
c00199f6:	68 83 bc 02 c0       	push   0xc002bc83
c00199fb:	53                   	push   ebx
c00199fc:	e8 d1 a9 ff ff       	call   c00143d2 <Device::setName(char const*)>
c0019a01:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019a08:	0f 20 c0             	mov    eax,cr0
c0019a0b:	83 e0 14             	and    eax,0x14
c0019a0e:	83 c4 10             	add    esp,0x10
c0019a11:	83 f8 04             	cmp    eax,0x4
c0019a14:	75 1f                	jne    c0019a35 <CPU::detectFeatures()+0x9c5>
c0019a16:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019a1d:	eb 32                	jmp    c0019a51 <CPU::detectFeatures()+0x9e1>
c0019a1f:	50                   	push   eax
c0019a20:	50                   	push   eax
c0019a21:	68 8e bc 02 c0       	push   0xc002bc8e
c0019a26:	53                   	push   ebx
c0019a27:	e8 a6 a9 ff ff       	call   c00143d2 <Device::setName(char const*)>
c0019a2c:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019a33:	eb d3                	jmp    c0019a08 <CPU::detectFeatures()+0x998>
c0019a35:	e8 4f 68 fe ff       	call   c0000289 <hasLegacyFPU>
c0019a3a:	83 e0 01             	and    eax,0x1
c0019a3d:	8d 14 00             	lea    edx,[eax+eax*1]
c0019a40:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019a46:	83 e0 fd             	and    eax,0xfffffffd
c0019a49:	09 d0                	or     eax,edx
c0019a4b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019a51:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019a58:	83 c4 4c             	add    esp,0x4c
c0019a5b:	5b                   	pop    ebx
c0019a5c:	5e                   	pop    esi
c0019a5d:	5f                   	pop    edi
c0019a5e:	5d                   	pop    ebp
c0019a5f:	c3                   	ret    

c0019a60 <CPU::setupSMEP()>:
c0019a60:	0f 20 e0             	mov    eax,cr4
c0019a63:	0d 00 00 10 00       	or     eax,0x100000
c0019a68:	0f 22 e0             	mov    cr4,eax
c0019a6b:	c3                   	ret    

c0019a6c <CPU::setupUMIP()>:
c0019a6c:	0f 20 e0             	mov    eax,cr4
c0019a6f:	80 cc 08             	or     ah,0x8
c0019a72:	0f 22 e0             	mov    cr4,eax
c0019a75:	c3                   	ret    

c0019a76 <CPU::setupTSC()>:
c0019a76:	0f 20 e0             	mov    eax,cr4
c0019a79:	83 c8 04             	or     eax,0x4
c0019a7c:	0f 22 e0             	mov    cr4,eax
c0019a7f:	c3                   	ret    

c0019a80 <CPU::setupLargePages()>:
c0019a80:	0f 20 e0             	mov    eax,cr4
c0019a83:	83 c8 10             	or     eax,0x10
c0019a86:	0f 22 e0             	mov    cr4,eax
c0019a89:	c3                   	ret    

c0019a8a <CPU::setupPAT()>:
c0019a8a:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0019a8f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019a96:	74 2c                	je     c0019ac4 <CPU::setupPAT()+0x3a>
c0019a98:	53                   	push   ebx
c0019a99:	83 ec 10             	sub    esp,0x10
c0019a9c:	68 77 02 00 00       	push   0x277
c0019aa1:	50                   	push   eax
c0019aa2:	e8 49 53 ff ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c0019aa7:	83 e2 f8             	and    edx,0xfffffff8
c0019aaa:	83 ca 01             	or     edx,0x1
c0019aad:	52                   	push   edx
c0019aae:	50                   	push   eax
c0019aaf:	68 77 02 00 00       	push   0x277
c0019ab4:	ff 35 28 e7 02 c0    	push   DWORD PTR ds:0xc002e728
c0019aba:	e8 5d 53 ff ff       	call   c000ee1c <Computer::wrmsr(unsigned int, unsigned long long)>
c0019abf:	83 c4 28             	add    esp,0x28
c0019ac2:	5b                   	pop    ebx
c0019ac3:	c3                   	ret    
c0019ac4:	c3                   	ret    
c0019ac5:	90                   	nop

c0019ac6 <CPU::setupMTRR()>:
c0019ac6:	c3                   	ret    
c0019ac7:	90                   	nop

c0019ac8 <CPU::setupGlobalPages()>:
c0019ac8:	0f 20 e0             	mov    eax,cr4
c0019acb:	0c 80                	or     al,0x80
c0019acd:	0f 22 e0             	mov    cr4,eax
c0019ad0:	c3                   	ret    
c0019ad1:	90                   	nop

c0019ad2 <CPU::allowUsermodeDataAccess()>:
c0019ad2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ad6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019add:	74 03                	je     c0019ae2 <CPU::allowUsermodeDataAccess()+0x10>
c0019adf:	0f 01 cb             	stac   
c0019ae2:	c3                   	ret    
c0019ae3:	90                   	nop

c0019ae4 <CPU::prohibitUsermodeDataAccess()>:
c0019ae4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ae8:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019aef:	74 03                	je     c0019af4 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019af1:	0f 01 ca             	clac   
c0019af4:	c3                   	ret    
c0019af5:	90                   	nop

c0019af6 <CPU::setupSMAP()>:
c0019af6:	0f 20 e0             	mov    eax,cr4
c0019af9:	0d 00 00 20 00       	or     eax,0x200000
c0019afe:	0f 22 e0             	mov    cr4,eax
c0019b01:	eb e1                	jmp    c0019ae4 <CPU::prohibitUsermodeDataAccess()>
c0019b03:	90                   	nop

c0019b04 <CPU::setupFeatures()>:
c0019b04:	83 ec 0c             	sub    esp,0xc
c0019b07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b0b:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019b12:	74 07                	je     c0019b1b <CPU::setupFeatures()+0x17>
c0019b14:	52                   	push   edx
c0019b15:	e8 46 ff ff ff       	call   c0019a60 <CPU::setupSMEP()>
c0019b1a:	58                   	pop    eax
c0019b1b:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019b22:	74 07                	je     c0019b2b <CPU::setupFeatures()+0x27>
c0019b24:	52                   	push   edx
c0019b25:	e8 cc ff ff ff       	call   c0019af6 <CPU::setupSMAP()>
c0019b2a:	58                   	pop    eax
c0019b2b:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019b32:	74 07                	je     c0019b3b <CPU::setupFeatures()+0x37>
c0019b34:	52                   	push   edx
c0019b35:	e8 32 ff ff ff       	call   c0019a6c <CPU::setupUMIP()>
c0019b3a:	58                   	pop    eax
c0019b3b:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019b42:	74 07                	je     c0019b4b <CPU::setupFeatures()+0x47>
c0019b44:	52                   	push   edx
c0019b45:	e8 2c ff ff ff       	call   c0019a76 <CPU::setupTSC()>
c0019b4a:	58                   	pop    eax
c0019b4b:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019b52:	74 07                	je     c0019b5b <CPU::setupFeatures()+0x57>
c0019b54:	52                   	push   edx
c0019b55:	e8 26 ff ff ff       	call   c0019a80 <CPU::setupLargePages()>
c0019b5a:	59                   	pop    ecx
c0019b5b:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019b62:	74 07                	je     c0019b6b <CPU::setupFeatures()+0x67>
c0019b64:	52                   	push   edx
c0019b65:	e8 5e ff ff ff       	call   c0019ac8 <CPU::setupGlobalPages()>
c0019b6a:	58                   	pop    eax
c0019b6b:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019b72:	74 0c                	je     c0019b80 <CPU::setupFeatures()+0x7c>
c0019b74:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019b78:	83 c4 0c             	add    esp,0xc
c0019b7b:	e9 0a ff ff ff       	jmp    c0019a8a <CPU::setupPAT()>
c0019b80:	83 c4 0c             	add    esp,0xc
c0019b83:	c3                   	ret    

c0019b84 <CPU::open(int, int, void*)>:
c0019b84:	57                   	push   edi
c0019b85:	56                   	push   esi
c0019b86:	53                   	push   ebx
c0019b87:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019b8b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019b8f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019b95:	83 ec 0c             	sub    esp,0xc
c0019b98:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019b9e:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019ba4:	50                   	push   eax
c0019ba5:	e8 32 55 ff ff       	call   c000f0dc <GDT::setup()>
c0019baa:	83 c4 0c             	add    esp,0xc
c0019bad:	6a 00                	push   0x0
c0019baf:	68 ef be ad de       	push   0xdeadbeef
c0019bb4:	57                   	push   edi
c0019bb5:	e8 a6 77 ff ff       	call   c0011360 <TSS::setup(unsigned long, unsigned long)>
c0019bba:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019bbd:	e8 7e 77 ff ff       	call   c0011340 <TSS::flush()>
c0019bc2:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019bc8:	89 04 24             	mov    DWORD PTR [esp],eax
c0019bcb:	e8 68 57 ff ff       	call   c000f338 <IDT::setup()>
c0019bd0:	b8 00 04 00 00       	mov    eax,0x400
c0019bd5:	0f 23 f8             	mov    db7,eax
c0019bd8:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019be2:	e8 d0 62 ff ff       	call   c000feb7 <Phys::allocatePage()>
c0019be7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019bed:	89 30                	mov    DWORD PTR [eax],esi
c0019bef:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019bf5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019bf8:	58                   	pop    eax
c0019bf9:	5a                   	pop    edx
c0019bfa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c00:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019c04:	e8 eb 88 ff ff       	call   c00124f4 <VAS::setCPUSpecific(unsigned long)>
c0019c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c0c:	e8 5f f4 ff ff       	call   c0019070 <CPU::detectFeatures()>
c0019c11:	e8 ee bb ff ff       	call   c0015804 <setupInterruptController()>
c0019c16:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019c1c:	a1 40 e7 02 c0       	mov    eax,ds:0xc002e740
c0019c21:	83 e0 10             	and    eax,0x10
c0019c24:	83 f8 01             	cmp    eax,0x1
c0019c27:	19 c0                	sbb    eax,eax
c0019c29:	83 e0 46             	and    eax,0x46
c0019c2c:	83 c0 1e             	add    eax,0x1e
c0019c2f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c32:	e8 9f d1 ff ff       	call   c0016dd6 <setupTimer(int)>
c0019c37:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019c3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c40:	e8 bf fe ff ff       	call   c0019b04 <CPU::setupFeatures()>
c0019c45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c48:	e8 a7 f1 ff ff       	call   c0018df4 <CPU::displayFeatures()>
c0019c4d:	83 c4 10             	add    esp,0x10
c0019c50:	31 c0                	xor    eax,eax
c0019c52:	5b                   	pop    ebx
c0019c53:	5e                   	pop    esi
c0019c54:	5f                   	pop    edi
c0019c55:	c3                   	ret    

c0019c56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019c56:	57                   	push   edi
c0019c57:	56                   	push   esi
c0019c58:	53                   	push   ebx
c0019c59:	51                   	push   ecx
c0019c5a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019c5e:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019c61:	0f 02 c0             	lar    eax,ax
c0019c64:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019c67:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019c6b:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019c6e:	88 ca                	mov    dl,cl
c0019c70:	c0 ea 06             	shr    dl,0x6
c0019c73:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019c77:	89 ca                	mov    edx,ecx
c0019c79:	66 c1 ea 03          	shr    dx,0x3
c0019c7d:	83 e2 07             	and    edx,0x7
c0019c80:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019c85:	88 17                	mov    BYTE PTR [edi],dl
c0019c87:	0f 84 a6 01 00 00    	je     c0019e33 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019c8d:	83 e1 07             	and    ecx,0x7
c0019c90:	80 f9 04             	cmp    cl,0x4
c0019c93:	0f 84 98 00 00 00    	je     c0019d31 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019c99:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019c9e:	0f 95 c0             	setne  al
c0019ca1:	80 f9 05             	cmp    cl,0x5
c0019ca4:	0f 95 c2             	setne  dl
c0019ca7:	08 c2                	or     dl,al
c0019ca9:	74 79                	je     c0019d24 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019cab:	84 c9                	test   cl,cl
c0019cad:	75 05                	jne    c0019cb4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019caf:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019cb2:	eb 3c                	jmp    c0019cf0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cb4:	80 f9 01             	cmp    cl,0x1
c0019cb7:	75 05                	jne    c0019cbe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019cb9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019cbc:	eb 32                	jmp    c0019cf0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cbe:	80 f9 02             	cmp    cl,0x2
c0019cc1:	75 05                	jne    c0019cc8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019cc3:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019cc6:	eb 28                	jmp    c0019cf0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cc8:	31 c0                	xor    eax,eax
c0019cca:	80 f9 03             	cmp    cl,0x3
c0019ccd:	75 05                	jne    c0019cd4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019ccf:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019cd2:	eb 1c                	jmp    c0019cf0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cd4:	80 f9 05             	cmp    cl,0x5
c0019cd7:	75 05                	jne    c0019cde <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019cd9:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019cdc:	eb 12                	jmp    c0019cf0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cde:	80 f9 06             	cmp    cl,0x6
c0019ce1:	75 05                	jne    c0019ce8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019ce3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019ce6:	eb 08                	jmp    c0019cf0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ce8:	80 f9 07             	cmp    cl,0x7
c0019ceb:	75 03                	jne    c0019cf0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ced:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019cf0:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019cf5:	75 10                	jne    c0019d07 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019cf7:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019cfb:	b9 03 00 00 00       	mov    ecx,0x3
c0019d00:	01 d0                	add    eax,edx
c0019d02:	e9 37 01 00 00       	jmp    c0019e3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d07:	b9 02 00 00 00       	mov    ecx,0x2
c0019d0c:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019d11:	0f 85 27 01 00 00    	jne    c0019e3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d17:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019d1a:	b9 06 00 00 00       	mov    ecx,0x6
c0019d1f:	e9 1a 01 00 00       	jmp    c0019e3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d24:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019d27:	b9 06 00 00 00       	mov    ecx,0x6
c0019d2c:	e9 0f 01 00 00       	jmp    c0019e40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d31:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019d34:	88 ca                	mov    dl,cl
c0019d36:	c0 ea 06             	shr    dl,0x6
c0019d39:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019d3d:	89 ca                	mov    edx,ecx
c0019d3f:	66 c1 ea 03          	shr    dx,0x3
c0019d43:	83 e2 07             	and    edx,0x7
c0019d46:	80 e1 07             	and    cl,0x7
c0019d49:	75 05                	jne    c0019d50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019d4b:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019d4e:	eb 4c                	jmp    c0019d9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d50:	80 f9 01             	cmp    cl,0x1
c0019d53:	75 05                	jne    c0019d5a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019d55:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019d58:	eb 42                	jmp    c0019d9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d5a:	80 f9 02             	cmp    cl,0x2
c0019d5d:	75 05                	jne    c0019d64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019d5f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019d62:	eb 38                	jmp    c0019d9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d64:	80 f9 03             	cmp    cl,0x3
c0019d67:	75 05                	jne    c0019d6e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019d69:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019d6c:	eb 2e                	jmp    c0019d9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d6e:	80 f9 04             	cmp    cl,0x4
c0019d71:	75 12                	jne    c0019d85 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019d73:	f6 c4 60             	test   ah,0x60
c0019d76:	75 08                	jne    c0019d80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019d78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019d7b:	8d 78 14             	lea    edi,[eax+0x14]
c0019d7e:	eb 1c                	jmp    c0019d9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d80:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019d83:	eb 17                	jmp    c0019d9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d85:	80 f9 05             	cmp    cl,0x5
c0019d88:	75 05                	jne    c0019d8f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019d8a:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019d8d:	eb 0d                	jmp    c0019d9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d8f:	80 f9 06             	cmp    cl,0x6
c0019d92:	75 05                	jne    c0019d99 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019d94:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019d97:	eb 03                	jmp    c0019d9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d99:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019d9c:	84 d2                	test   dl,dl
c0019d9e:	75 05                	jne    c0019da5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019da0:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019da3:	eb 3c                	jmp    c0019de1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019da5:	80 fa 01             	cmp    dl,0x1
c0019da8:	75 05                	jne    c0019daf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019daa:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019dad:	eb 32                	jmp    c0019de1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019daf:	80 fa 02             	cmp    dl,0x2
c0019db2:	75 05                	jne    c0019db9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019db4:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019db7:	eb 28                	jmp    c0019de1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019db9:	80 fa 03             	cmp    dl,0x3
c0019dbc:	75 05                	jne    c0019dc3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019dbe:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019dc1:	eb 1e                	jmp    c0019de1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019dc3:	31 c0                	xor    eax,eax
c0019dc5:	80 fa 04             	cmp    dl,0x4
c0019dc8:	74 17                	je     c0019de1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019dca:	80 fa 05             	cmp    dl,0x5
c0019dcd:	75 05                	jne    c0019dd4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019dcf:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019dd2:	eb 0d                	jmp    c0019de1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019dd4:	80 fa 06             	cmp    dl,0x6
c0019dd7:	75 05                	jne    c0019dde <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019dd9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019ddc:	eb 03                	jmp    c0019de1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019dde:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019de1:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019de6:	0f 94 c2             	sete   dl
c0019de9:	80 f9 05             	cmp    cl,0x5
c0019dec:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019df0:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019df5:	d3 e0                	shl    eax,cl
c0019df7:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019dfb:	74 0a                	je     c0019e07 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019dfd:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e00:	b9 07 00 00 00       	mov    ecx,0x7
c0019e05:	eb 37                	jmp    c0019e3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e07:	01 f8                	add    eax,edi
c0019e09:	b9 03 00 00 00       	mov    ecx,0x3
c0019e0e:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e13:	74 2b                	je     c0019e40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e15:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019e1a:	75 0d                	jne    c0019e29 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019e1c:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019e20:	01 c8                	add    eax,ecx
c0019e22:	b9 04 00 00 00       	mov    ecx,0x4
c0019e27:	eb 17                	jmp    c0019e40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e29:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e2c:	b9 07 00 00 00       	mov    ecx,0x7
c0019e31:	eb 0d                	jmp    c0019e40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e33:	b9 02 00 00 00       	mov    ecx,0x2
c0019e38:	b2 01                	mov    dl,0x1
c0019e3a:	31 c0                	xor    eax,eax
c0019e3c:	eb 02                	jmp    c0019e40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e3e:	31 d2                	xor    edx,edx
c0019e40:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019e44:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019e46:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019e4a:	88 11                	mov    BYTE PTR [ecx],dl
c0019e4c:	5a                   	pop    edx
c0019e4d:	5b                   	pop    ebx
c0019e4e:	5e                   	pop    esi
c0019e4f:	5f                   	pop    edi
c0019e50:	c3                   	ret    

c0019e51 <Krnl::smpEntry()>:
c0019e51:	eb fe                	jmp    c0019e51 <Krnl::smpEntry()>

c0019e53 <Krnl::startCPU(int)>:
c0019e53:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0019e58:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019e5f:	0f 84 36 01 00 00    	je     c0019f9b <Krnl::startCPU(int)+0x148>
c0019e65:	53                   	push   ebx
c0019e66:	83 ec 08             	sub    esp,0x8
c0019e69:	e8 be 3f 00 00       	call   c001de2c <lockScheduler()>
c0019e6e:	52                   	push   edx
c0019e6f:	52                   	push   edx
c0019e70:	6a 1b                	push   0x1b
c0019e72:	ff 35 28 e7 02 c0    	push   DWORD PTR ds:0xc002e728
c0019e78:	e8 73 4f ff ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c0019e7d:	59                   	pop    ecx
c0019e7e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019e83:	89 c3                	mov    ebx,eax
c0019e85:	58                   	pop    eax
c0019e86:	53                   	push   ebx
c0019e87:	68 c8 bc 02 c0       	push   0xc002bcc8
c0019e8c:	e8 32 8f ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0019e91:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019e9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e9f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019ea9:	c1 e0 18             	shl    eax,0x18
c0019eac:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019eb2:	83 c4 10             	add    esp,0x10
c0019eb5:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019ebb:	09 c2                	or     edx,eax
c0019ebd:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019ec3:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019ec9:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019ecf:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019ed5:	80 cd c5             	or     ch,0xc5
c0019ed8:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019ede:	f3 90                	pause  
c0019ee0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019ee2:	0f ba e1 0c          	bt     ecx,0xc
c0019ee6:	72 f6                	jb     c0019ede <Krnl::startCPU(int)+0x8b>
c0019ee8:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019eee:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019ef4:	09 c1                	or     ecx,eax
c0019ef6:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019efc:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f02:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f08:	80 cd 85             	or     ch,0x85
c0019f0b:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f11:	f3 90                	pause  
c0019f13:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f15:	0f ba e1 0c          	bt     ecx,0xc
c0019f19:	72 f6                	jb     c0019f11 <Krnl::startCPU(int)+0xbe>
c0019f1b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f25:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f2b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f31:	09 c1                	or     ecx,eax
c0019f33:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f39:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f3f:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019f45:	81 c9 02 06 00 00    	or     ecx,0x602
c0019f4b:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f51:	f3 90                	pause  
c0019f53:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f55:	0f ba e1 0c          	bt     ecx,0xc
c0019f59:	72 f6                	jb     c0019f51 <Krnl::startCPU(int)+0xfe>
c0019f5b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f65:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f6b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f71:	09 c8                	or     eax,ecx
c0019f73:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019f79:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019f7f:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019f84:	0d 02 06 00 00       	or     eax,0x602
c0019f89:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019f8f:	f3 90                	pause  
c0019f91:	8b 02                	mov    eax,DWORD PTR [edx]
c0019f93:	0f ba e0 0c          	bt     eax,0xc
c0019f97:	72 f6                	jb     c0019f8f <Krnl::startCPU(int)+0x13c>
c0019f99:	eb fe                	jmp    c0019f99 <Krnl::startCPU(int)+0x146>
c0019f9b:	c3                   	ret    

c0019f9c <Krnl::startCPUs()>:
c0019f9c:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0019fa1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019fa7:	88 c2                	mov    dl,al
c0019fa9:	83 e2 0a             	and    edx,0xa
c0019fac:	80 fa 0a             	cmp    dl,0xa
c0019faf:	75 09                	jne    c0019fba <Krnl::startCPUs()+0x1e>
c0019fb1:	a8 01                	test   al,0x1
c0019fb3:	74 05                	je     c0019fba <Krnl::startCPUs()+0x1e>
c0019fb5:	e9 e1 61 fe ff       	jmp    c000019b <prepareTramp>
c0019fba:	c3                   	ret    
c0019fbb:	90                   	nop

c0019fbc <EnvVarContainer::getEnv(char const*)>:
c0019fbc:	57                   	push   edi
c0019fbd:	56                   	push   esi
c0019fbe:	53                   	push   ebx
c0019fbf:	31 db                	xor    ebx,ebx
c0019fc1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019fc5:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019fc7:	7e 2b                	jle    c0019ff4 <EnvVarContainer::getEnv(char const*)+0x38>
c0019fc9:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019fd0:	50                   	push   eax
c0019fd1:	50                   	push   eax
c0019fd2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019fd5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019fd8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019fdc:	e8 e7 68 fe ff       	call   c00008c8 <strcmp>
c0019fe1:	83 c4 10             	add    esp,0x10
c0019fe4:	85 c0                	test   eax,eax
c0019fe6:	75 09                	jne    c0019ff1 <EnvVarContainer::getEnv(char const*)+0x35>
c0019fe8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019feb:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019fef:	eb 05                	jmp    c0019ff6 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019ff1:	43                   	inc    ebx
c0019ff2:	eb d1                	jmp    c0019fc5 <EnvVarContainer::getEnv(char const*)+0x9>
c0019ff4:	31 c0                	xor    eax,eax
c0019ff6:	5b                   	pop    ebx
c0019ff7:	5e                   	pop    esi
c0019ff8:	5f                   	pop    edi
c0019ff9:	c3                   	ret    

c0019ffa <EnvVarContainer::setEnv(char const*, char const*)>:
c0019ffa:	57                   	push   edi
c0019ffb:	56                   	push   esi
c0019ffc:	53                   	push   ebx
c0019ffd:	83 ec 1c             	sub    esp,0x1c
c001a000:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a004:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a008:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a00c:	57                   	push   edi
c001a00d:	e8 8a 67 fe ff       	call   c000079c <strlen>
c001a012:	40                   	inc    eax
c001a013:	89 04 24             	mov    DWORD PTR [esp],eax
c001a016:	e8 30 58 ff ff       	call   c000f84b <malloc>
c001a01b:	89 34 24             	mov    DWORD PTR [esp],esi
c001a01e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a022:	e8 75 67 fe ff       	call   c000079c <strlen>
c001a027:	40                   	inc    eax
c001a028:	89 04 24             	mov    DWORD PTR [esp],eax
c001a02b:	e8 1b 58 ff ff       	call   c000f84b <malloc>
c001a030:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a033:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a037:	e8 60 67 fe ff       	call   c000079c <strlen>
c001a03c:	83 c4 0c             	add    esp,0xc
c001a03f:	40                   	inc    eax
c001a040:	50                   	push   eax
c001a041:	6a 00                	push   0x0
c001a043:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a047:	e8 34 67 fe ff       	call   c0000780 <memset>
c001a04c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a04f:	e8 48 67 fe ff       	call   c000079c <strlen>
c001a054:	83 c4 0c             	add    esp,0xc
c001a057:	40                   	inc    eax
c001a058:	50                   	push   eax
c001a059:	57                   	push   edi
c001a05a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a05e:	e8 e9 66 fe ff       	call   c000074c <memcpy>
c001a063:	89 34 24             	mov    DWORD PTR [esp],esi
c001a066:	e8 31 67 fe ff       	call   c000079c <strlen>
c001a06b:	83 c4 0c             	add    esp,0xc
c001a06e:	40                   	inc    eax
c001a06f:	50                   	push   eax
c001a070:	6a 00                	push   0x0
c001a072:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a076:	e8 05 67 fe ff       	call   c0000780 <memset>
c001a07b:	89 34 24             	mov    DWORD PTR [esp],esi
c001a07e:	e8 19 67 fe ff       	call   c000079c <strlen>
c001a083:	83 c4 0c             	add    esp,0xc
c001a086:	40                   	inc    eax
c001a087:	50                   	push   eax
c001a088:	56                   	push   esi
c001a089:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a08d:	e8 ba 66 fe ff       	call   c000074c <memcpy>
c001a092:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a094:	40                   	inc    eax
c001a095:	89 03                	mov    DWORD PTR [ebx],eax
c001a097:	c1 e0 03             	shl    eax,0x3
c001a09a:	5a                   	pop    edx
c001a09b:	59                   	pop    ecx
c001a09c:	50                   	push   eax
c001a09d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a0a0:	e8 92 57 ff ff       	call   c000f837 <realloc>
c001a0a5:	83 c4 0c             	add    esp,0xc
c001a0a8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a0ab:	6a 08                	push   0x8
c001a0ad:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a0b1:	52                   	push   edx
c001a0b2:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a0b4:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a0b8:	50                   	push   eax
c001a0b9:	e8 8e 66 fe ff       	call   c000074c <memcpy>
c001a0be:	83 c4 20             	add    esp,0x20
c001a0c1:	5b                   	pop    ebx
c001a0c2:	5e                   	pop    esi
c001a0c3:	5f                   	pop    edi
c001a0c4:	c3                   	ret    
c001a0c5:	90                   	nop

c001a0c6 <EnvVarContainer::deleteEnv(char const*)>:
c001a0c6:	c3                   	ret    
c001a0c7:	90                   	nop

c001a0c8 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a0c8:	55                   	push   ebp
c001a0c9:	57                   	push   edi
c001a0ca:	56                   	push   esi
c001a0cb:	53                   	push   ebx
c001a0cc:	81 ec 38 01 00 00    	sub    esp,0x138
c001a0d2:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a0d9:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a0e0:	68 14 01 00 00       	push   0x114
c001a0e5:	e8 61 57 ff ff       	call   c000f84b <malloc>
c001a0ea:	83 c4 0c             	add    esp,0xc
c001a0ed:	89 c7                	mov    edi,eax
c001a0ef:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a0f2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a0f9:	50                   	push   eax
c001a0fa:	e8 23 92 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001a0ff:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a102:	e8 ed 94 ff ff       	call   c00135f4 <File::exists()>
c001a107:	83 c4 10             	add    esp,0x10
c001a10a:	84 c0                	test   al,al
c001a10c:	75 31                	jne    c001a13f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a10e:	51                   	push   ecx
c001a10f:	51                   	push   ecx
c001a110:	6a 12                	push   0x12
c001a112:	57                   	push   edi
c001a113:	e8 6e 92 ff ff       	call   c0013386 <File::open(FileOpenMode)>
c001a118:	8b 07                	mov    eax,DWORD PTR [edi]
c001a11a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a11d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a120:	e8 77 66 fe ff       	call   c000079c <strlen>
c001a125:	5a                   	pop    edx
c001a126:	31 d2                	xor    edx,edx
c001a128:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a12c:	51                   	push   ecx
c001a12d:	55                   	push   ebp
c001a12e:	52                   	push   edx
c001a12f:	50                   	push   eax
c001a130:	57                   	push   edi
c001a131:	ff d3                	call   ebx
c001a133:	83 c4 14             	add    esp,0x14
c001a136:	57                   	push   edi
c001a137:	e8 a8 92 ff ff       	call   c00133e4 <File::close()>
c001a13c:	83 c4 10             	add    esp,0x10
c001a13f:	31 db                	xor    ebx,ebx
c001a141:	50                   	push   eax
c001a142:	31 ed                	xor    ebp,ebp
c001a144:	68 00 01 00 00       	push   0x100
c001a149:	6a 00                	push   0x0
c001a14b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a14f:	50                   	push   eax
c001a150:	e8 2b 66 fe ff       	call   c0000780 <memset>
c001a155:	58                   	pop    eax
c001a156:	5a                   	pop    edx
c001a157:	6a 01                	push   0x1
c001a159:	57                   	push   edi
c001a15a:	e8 27 92 ff ff       	call   c0013386 <File::open(FileOpenMode)>
c001a15f:	83 c4 10             	add    esp,0x10
c001a162:	83 ec 0c             	sub    esp,0xc
c001a165:	8b 07                	mov    eax,DWORD PTR [edi]
c001a167:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a16b:	51                   	push   ecx
c001a16c:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a170:	52                   	push   edx
c001a171:	6a 00                	push   0x0
c001a173:	6a 01                	push   0x1
c001a175:	57                   	push   edi
c001a176:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a179:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a17d:	83 c4 20             	add    esp,0x20
c001a180:	3c 0d                	cmp    al,0xd
c001a182:	0f 84 12 01 00 00    	je     c001a29a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a188:	85 db                	test   ebx,ebx
c001a18a:	0f 84 fd 00 00 00    	je     c001a28d <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a190:	3c 0a                	cmp    al,0xa
c001a192:	74 13                	je     c001a1a7 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a194:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a199:	74 0c                	je     c001a1a7 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a19b:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a1a1:	0f 8e e6 00 00 00    	jle    c001a28d <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a1a7:	83 ec 0c             	sub    esp,0xc
c001a1aa:	8d 53 01             	lea    edx,[ebx+0x1]
c001a1ad:	29 dd                	sub    ebp,ebx
c001a1af:	52                   	push   edx
c001a1b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a1b4:	e8 92 56 ff ff       	call   c000f84b <malloc>
c001a1b9:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a1bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a1c0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a1c3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a1c7:	e8 7f 56 ff ff       	call   c000f84b <malloc>
c001a1cc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a1d0:	83 c4 0c             	add    esp,0xc
c001a1d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a1d7:	52                   	push   edx
c001a1d8:	6a 00                	push   0x0
c001a1da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a1de:	e8 9d 65 fe ff       	call   c0000780 <memset>
c001a1e3:	83 c4 0c             	add    esp,0xc
c001a1e6:	53                   	push   ebx
c001a1e7:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a1eb:	55                   	push   ebp
c001a1ec:	01 eb                	add    ebx,ebp
c001a1ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a1f2:	e8 55 65 fe ff       	call   c000074c <memcpy>
c001a1f7:	83 c4 0c             	add    esp,0xc
c001a1fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a1fe:	51                   	push   ecx
c001a1ff:	6a 00                	push   0x0
c001a201:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a205:	e8 76 65 fe ff       	call   c0000780 <memset>
c001a20a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a20d:	e8 8a 65 fe ff       	call   c000079c <strlen>
c001a212:	83 c4 0c             	add    esp,0xc
c001a215:	50                   	push   eax
c001a216:	53                   	push   ebx
c001a217:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a21b:	e8 2c 65 fe ff       	call   c000074c <memcpy>
c001a220:	5b                   	pop    ebx
c001a221:	58                   	pop    eax
c001a222:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a226:	68 d9 bc 02 c0       	push   0xc002bcd9
c001a22b:	e8 93 8b ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001a230:	8b 06                	mov    eax,DWORD PTR [esi]
c001a232:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a235:	40                   	inc    eax
c001a236:	83 c4 10             	add    esp,0x10
c001a239:	89 06                	mov    DWORD PTR [esi],eax
c001a23b:	85 d2                	test   edx,edx
c001a23d:	75 0c                	jne    c001a24b <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a23f:	83 ec 0c             	sub    esp,0xc
c001a242:	6a 08                	push   0x8
c001a244:	e8 02 56 ff ff       	call   c000f84b <malloc>
c001a249:	eb 0c                	jmp    c001a257 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a24b:	c1 e0 03             	shl    eax,0x3
c001a24e:	51                   	push   ecx
c001a24f:	51                   	push   ecx
c001a250:	50                   	push   eax
c001a251:	52                   	push   edx
c001a252:	e8 e0 55 ff ff       	call   c000f837 <realloc>
c001a257:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a25a:	83 c4 10             	add    esp,0x10
c001a25d:	31 db                	xor    ebx,ebx
c001a25f:	52                   	push   edx
c001a260:	6a 08                	push   0x8
c001a262:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a266:	50                   	push   eax
c001a267:	8b 16                	mov    edx,DWORD PTR [esi]
c001a269:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a26c:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a270:	50                   	push   eax
c001a271:	e8 d6 64 fe ff       	call   c000074c <memcpy>
c001a276:	83 c4 0c             	add    esp,0xc
c001a279:	68 00 01 00 00       	push   0x100
c001a27e:	6a 00                	push   0x0
c001a280:	55                   	push   ebp
c001a281:	31 ed                	xor    ebp,ebp
c001a283:	e8 f8 64 fe ff       	call   c0000780 <memset>
c001a288:	83 c4 10             	add    esp,0x10
c001a28b:	eb 0d                	jmp    c001a29a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a28d:	3c 3d                	cmp    al,0x3d
c001a28f:	74 07                	je     c001a298 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a291:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a295:	45                   	inc    ebp
c001a296:	eb 02                	jmp    c001a29a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a298:	89 eb                	mov    ebx,ebp
c001a29a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a29f:	0f 85 bd fe ff ff    	jne    c001a162 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a2a5:	50                   	push   eax
c001a2a6:	50                   	push   eax
c001a2a7:	ff 36                	push   DWORD PTR [esi]
c001a2a9:	68 e7 bc 02 c0       	push   0xc002bce7
c001a2ae:	e8 10 8b ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001a2b3:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a2b9:	5b                   	pop    ebx
c001a2ba:	5e                   	pop    esi
c001a2bb:	5f                   	pop    edi
c001a2bc:	5d                   	pop    ebp
c001a2bd:	c3                   	ret    

c001a2be <EnvVarContainer::__loadSystem()>:
c001a2be:	83 ec 10             	sub    esp,0x10
c001a2c1:	68 60 dc 02 c0       	push   0xc002dc60
c001a2c6:	68 12 bd 02 c0       	push   0xc002bd12
c001a2cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2cf:	e8 f4 fd ff ff       	call   c001a0c8 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a2d4:	83 c4 1c             	add    esp,0x1c
c001a2d7:	c3                   	ret    

c001a2d8 <EnvVarContainer::__loadUser()>:
c001a2d8:	c3                   	ret    
c001a2d9:	90                   	nop

c001a2da <EnvVarContainer::EnvVarContainer(Process*)>:
c001a2da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2de:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a2e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a2ec:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a2ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a2fa:	90                   	nop
c001a2fb:	c3                   	ret    

c001a2fc <EnvVarContainer::~EnvVarContainer()>:
c001a2fc:	83 ec 0c             	sub    esp,0xc
c001a2ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a303:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a306:	85 c0                	test   eax,eax
c001a308:	74 1d                	je     c001a327 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a30a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a30e:	8b 00                	mov    eax,DWORD PTR [eax]
c001a310:	85 c0                	test   eax,eax
c001a312:	74 13                	je     c001a327 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a318:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a31b:	83 ec 0c             	sub    esp,0xc
c001a31e:	50                   	push   eax
c001a31f:	e8 37 55 ff ff       	call   c000f85b <free>
c001a324:	83 c4 10             	add    esp,0x10
c001a327:	90                   	nop
c001a328:	83 c4 0c             	add    esp,0xc
c001a32b:	c3                   	ret    

c001a32c <Krnl::getEnv(Process*, char const*)>:
c001a32c:	53                   	push   ebx
c001a32d:	83 ec 08             	sub    esp,0x8
c001a330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a334:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a338:	39 05 94 1c 03 c0    	cmp    DWORD PTR ds:0xc0031c94,eax
c001a33e:	74 04                	je     c001a344 <Krnl::getEnv(Process*, char const*)+0x18>
c001a340:	85 c0                	test   eax,eax
c001a342:	75 0b                	jne    c001a34f <Krnl::getEnv(Process*, char const*)+0x23>
c001a344:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a349:	85 c0                	test   eax,eax
c001a34b:	75 19                	jne    c001a366 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a34d:	eb 27                	jmp    c001a376 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a34f:	52                   	push   edx
c001a350:	52                   	push   edx
c001a351:	53                   	push   ebx
c001a352:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a358:	e8 5f fc ff ff       	call   c0019fbc <EnvVarContainer::getEnv(char const*)>
c001a35d:	83 c4 10             	add    esp,0x10
c001a360:	85 c0                	test   eax,eax
c001a362:	75 28                	jne    c001a38c <Krnl::getEnv(Process*, char const*)+0x60>
c001a364:	eb de                	jmp    c001a344 <Krnl::getEnv(Process*, char const*)+0x18>
c001a366:	52                   	push   edx
c001a367:	52                   	push   edx
c001a368:	53                   	push   ebx
c001a369:	50                   	push   eax
c001a36a:	e8 4d fc ff ff       	call   c0019fbc <EnvVarContainer::getEnv(char const*)>
c001a36f:	83 c4 10             	add    esp,0x10
c001a372:	85 c0                	test   eax,eax
c001a374:	75 16                	jne    c001a38c <Krnl::getEnv(Process*, char const*)+0x60>
c001a376:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a37a:	a1 78 12 03 c0       	mov    eax,ds:0xc0031278
c001a37f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a383:	83 c4 08             	add    esp,0x8
c001a386:	5b                   	pop    ebx
c001a387:	e9 30 fc ff ff       	jmp    c0019fbc <EnvVarContainer::getEnv(char const*)>
c001a38c:	83 c4 08             	add    esp,0x8
c001a38f:	5b                   	pop    ebx
c001a390:	c3                   	ret    

c001a391 <Krnl::setEnvSystem(char const*, char const*)>:
c001a391:	83 ec 10             	sub    esp,0x10
c001a394:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a398:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a39c:	ff 35 78 12 03 c0    	push   DWORD PTR ds:0xc0031278
c001a3a2:	e8 53 fc ff ff       	call   c0019ffa <EnvVarContainer::setEnv(char const*, char const*)>
c001a3a7:	83 c4 1c             	add    esp,0x1c
c001a3aa:	c3                   	ret    

c001a3ab <Krnl::setEnvUser(char const*, char const*)>:
c001a3ab:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a3b0:	85 c0                	test   eax,eax
c001a3b2:	74 15                	je     c001a3c9 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a3b4:	83 ec 10             	sub    esp,0x10
c001a3b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3bf:	50                   	push   eax
c001a3c0:	e8 35 fc ff ff       	call   c0019ffa <EnvVarContainer::setEnv(char const*, char const*)>
c001a3c5:	83 c4 1c             	add    esp,0x1c
c001a3c8:	c3                   	ret    
c001a3c9:	c3                   	ret    

c001a3ca <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a3ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3ce:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a3d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a3d8:	e9 1d fc ff ff       	jmp    c0019ffa <EnvVarContainer::setEnv(char const*, char const*)>

c001a3dd <Krnl::deleteEnvSystem(char const*)>:
c001a3dd:	c3                   	ret    

c001a3de <Krnl::deleteEnvUser(char const*)>:
c001a3de:	c3                   	ret    

c001a3df <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a3df:	c3                   	ret    

c001a3e0 <Krnl::newProcessEnv(Process*)>:
c001a3e0:	83 ec 28             	sub    esp,0x28
c001a3e3:	6a 0c                	push   0xc
c001a3e5:	e8 61 54 ff ff       	call   c000f84b <malloc>
c001a3ea:	5a                   	pop    edx
c001a3eb:	59                   	pop    ecx
c001a3ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a3f0:	50                   	push   eax
c001a3f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a3f5:	e8 e0 fe ff ff       	call   c001a2da <EnvVarContainer::EnvVarContainer(Process*)>
c001a3fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a3fe:	83 c4 2c             	add    esp,0x2c
c001a401:	c3                   	ret    

c001a402 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a402:	56                   	push   esi
c001a403:	53                   	push   ebx
c001a404:	83 ec 10             	sub    esp,0x10
c001a407:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a40b:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a411:	6a 0c                	push   0xc
c001a413:	e8 33 54 ff ff       	call   c000f84b <malloc>
c001a418:	89 c3                	mov    ebx,eax
c001a41a:	58                   	pop    eax
c001a41b:	5a                   	pop    edx
c001a41c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a420:	53                   	push   ebx
c001a421:	e8 b4 fe ff ff       	call   c001a2da <EnvVarContainer::EnvVarContainer(Process*)>
c001a426:	8b 06                	mov    eax,DWORD PTR [esi]
c001a428:	89 03                	mov    DWORD PTR [ebx],eax
c001a42a:	c1 e0 03             	shl    eax,0x3
c001a42d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a430:	e8 16 54 ff ff       	call   c000f84b <malloc>
c001a435:	83 c4 0c             	add    esp,0xc
c001a438:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a43b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a43d:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a444:	52                   	push   edx
c001a445:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a448:	50                   	push   eax
c001a449:	e8 fe 62 fe ff       	call   c000074c <memcpy>
c001a44e:	89 d8                	mov    eax,ebx
c001a450:	83 c4 14             	add    esp,0x14
c001a453:	5b                   	pop    ebx
c001a454:	5e                   	pop    esi
c001a455:	c3                   	ret    

c001a456 <Krnl::loadSystemEnv()>:
c001a456:	53                   	push   ebx
c001a457:	83 ec 14             	sub    esp,0x14
c001a45a:	6a 0c                	push   0xc
c001a45c:	e8 ea 53 ff ff       	call   c000f84b <malloc>
c001a461:	89 c3                	mov    ebx,eax
c001a463:	58                   	pop    eax
c001a464:	5a                   	pop    edx
c001a465:	ff 35 94 1c 03 c0    	push   DWORD PTR ds:0xc0031c94
c001a46b:	53                   	push   ebx
c001a46c:	e8 69 fe ff ff       	call   c001a2da <EnvVarContainer::EnvVarContainer(Process*)>
c001a471:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a474:	89 1d 78 12 03 c0    	mov    DWORD PTR ds:0xc0031278,ebx
c001a47a:	e8 3f fe ff ff       	call   c001a2be <EnvVarContainer::__loadSystem()>
c001a47f:	83 c4 18             	add    esp,0x18
c001a482:	5b                   	pop    ebx
c001a483:	c3                   	ret    

c001a484 <Krnl::loadUserEnv()>:
c001a484:	53                   	push   ebx
c001a485:	83 ec 14             	sub    esp,0x14
c001a488:	6a 0c                	push   0xc
c001a48a:	e8 bc 53 ff ff       	call   c000f84b <malloc>
c001a48f:	89 c3                	mov    ebx,eax
c001a491:	58                   	pop    eax
c001a492:	5a                   	pop    edx
c001a493:	ff 35 94 1c 03 c0    	push   DWORD PTR ds:0xc0031c94
c001a499:	53                   	push   ebx
c001a49a:	e8 3b fe ff ff       	call   c001a2da <EnvVarContainer::EnvVarContainer(Process*)>
c001a49f:	89 1d 74 12 03 c0    	mov    DWORD PTR ds:0xc0031274,ebx
c001a4a5:	83 c4 18             	add    esp,0x18
c001a4a8:	5b                   	pop    ebx
c001a4a9:	c3                   	ret    

c001a4aa <Krnl::flushEnv()>:
c001a4aa:	c3                   	ret    

c001a4ab <Krnl::getProcessTotalEnvCount(Process*)>:
c001a4ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4af:	8b 15 74 12 03 c0    	mov    edx,DWORD PTR ds:0xc0031274
c001a4b5:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a4bb:	a1 78 12 03 c0       	mov    eax,ds:0xc0031278
c001a4c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4c2:	03 01                	add    eax,DWORD PTR [ecx]
c001a4c4:	85 d2                	test   edx,edx
c001a4c6:	74 02                	je     c001a4ca <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a4c8:	03 02                	add    eax,DWORD PTR [edx]
c001a4ca:	c3                   	ret    

c001a4cb <Krnl::getProcessEnvPair(Process*, int)>:
c001a4cb:	57                   	push   edi
c001a4cc:	8b 0d 74 12 03 c0    	mov    ecx,DWORD PTR ds:0xc0031274
c001a4d2:	56                   	push   esi
c001a4d3:	85 c9                	test   ecx,ecx
c001a4d5:	53                   	push   ebx
c001a4d6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a4da:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a4de:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a4e4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a4e8:	8b 02                	mov    eax,DWORD PTR [edx]
c001a4ea:	75 47                	jne    c001a533 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a4ec:	39 c3                	cmp    ebx,eax
c001a4ee:	7c 47                	jl     c001a537 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a4f0:	8b 15 78 12 03 c0    	mov    edx,DWORD PTR ds:0xc0031278
c001a4f6:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a4f8:	01 c1                	add    ecx,eax
c001a4fa:	39 d9                	cmp    ecx,ebx
c001a4fc:	7e 6c                	jle    c001a56a <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a4fe:	51                   	push   ecx
c001a4ff:	89 d9                	mov    ecx,ebx
c001a501:	29 c1                	sub    ecx,eax
c001a503:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a506:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a50a:	53                   	push   ebx
c001a50b:	68 34 bd 02 c0       	push   0xc002bd34
c001a510:	e8 ae 88 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001a515:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a51b:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a51d:	a1 78 12 03 c0       	mov    eax,ds:0xc0031278
c001a522:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a525:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a529:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a52c:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a52f:	89 06                	mov    DWORD PTR [esi],eax
c001a531:	eb 51                	jmp    c001a584 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a533:	39 c3                	cmp    ebx,eax
c001a535:	7d 05                	jge    c001a53c <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a537:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a53a:	eb 20                	jmp    c001a55c <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a53c:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a53e:	8d 14 07             	lea    edx,[edi+eax*1]
c001a541:	39 da                	cmp    edx,ebx
c001a543:	7e 04                	jle    c001a549 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a545:	29 c3                	sub    ebx,eax
c001a547:	eb 10                	jmp    c001a559 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a549:	8b 0d 78 12 03 c0    	mov    ecx,DWORD PTR ds:0xc0031278
c001a54f:	03 11                	add    edx,DWORD PTR [ecx]
c001a551:	39 da                	cmp    edx,ebx
c001a553:	7e 15                	jle    c001a56a <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a555:	29 c3                	sub    ebx,eax
c001a557:	29 fb                	sub    ebx,edi
c001a559:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a55c:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a560:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a563:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a566:	89 06                	mov    DWORD PTR [esi],eax
c001a568:	eb 1d                	jmp    c001a587 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a56a:	83 ec 0c             	sub    esp,0xc
c001a56d:	68 48 bd 02 c0       	push   0xc002bd48
c001a572:	e8 18 00 00 00       	call   c001a58f <Krnl::panic(char const*)>
c001a577:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a57d:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a584:	83 c4 10             	add    esp,0x10
c001a587:	89 f0                	mov    eax,esi
c001a589:	5b                   	pop    ebx
c001a58a:	5e                   	pop    esi
c001a58b:	5f                   	pop    edi
c001a58c:	c2 04 00             	ret    0x4

c001a58f <Krnl::panic(char const*)>:
c001a58f:	55                   	push   ebp
c001a590:	89 e5                	mov    ebp,esp
c001a592:	53                   	push   ebx
c001a593:	83 ec 0c             	sub    esp,0xc
c001a596:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a599:	fa                   	cli    
c001a59a:	c6 05 84 12 03 c0 01 	mov    BYTE PTR ds:0xc0031284,0x1
c001a5a1:	53                   	push   ebx
c001a5a2:	c6 05 64 d6 02 c0 00 	mov    BYTE PTR ds:0xc002d664,0x0
c001a5a9:	68 62 bd 02 c0       	push   0xc002bd62
c001a5ae:	e8 10 88 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001a5b3:	58                   	pop    eax
c001a5b4:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a5b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5bf:	e8 52 66 ff ff       	call   c0010c16 <setActiveTerminal(VgaText*)>
c001a5c4:	83 c4 0c             	add    esp,0xc
c001a5c7:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a5cc:	6a 01                	push   0x1
c001a5ce:	6a 0f                	push   0xf
c001a5d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5d6:	e8 d9 60 ff ff       	call   c00106b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a5db:	58                   	pop    eax
c001a5dc:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a5e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5e7:	e8 70 68 ff ff       	call   c0010e5c <VgaText::clearScreen()>
c001a5ec:	58                   	pop    eax
c001a5ed:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a5f2:	5a                   	pop    edx
c001a5f3:	68 7b bd 02 c0       	push   0xc002bd7b
c001a5f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5fe:	e8 9f 69 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a603:	59                   	pop    ecx
c001a604:	58                   	pop    eax
c001a605:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a60a:	68 20 be 02 c0       	push   0xc002be20
c001a60f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a615:	e8 88 69 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a61a:	58                   	pop    eax
c001a61b:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a620:	5a                   	pop    edx
c001a621:	68 97 bd 02 c0       	push   0xc002bd97
c001a626:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a62c:	e8 71 69 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a631:	59                   	pop    ecx
c001a632:	58                   	pop    eax
c001a633:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a638:	53                   	push   ebx
c001a639:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a63f:	e8 5e 69 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a644:	58                   	pop    eax
c001a645:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a64a:	5a                   	pop    edx
c001a64b:	68 b7 bd 02 c0       	push   0xc002bdb7
c001a650:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a656:	e8 47 69 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a65b:	a1 80 12 03 c0       	mov    eax,ds:0xc0031280
c001a660:	83 c4 10             	add    esp,0x10
c001a663:	85 c0                	test   eax,eax
c001a665:	74 02                	je     c001a669 <Krnl::panic(char const*)+0xda>
c001a667:	ff d0                	call   eax
c001a669:	83 ec 0c             	sub    esp,0xc
c001a66c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a66f:	e8 c0 30 00 00       	call   c001d734 <Thr::getDriverNameFromAddress(unsigned long)>
c001a674:	83 c4 10             	add    esp,0x10
c001a677:	89 c3                	mov    ebx,eax
c001a679:	85 c0                	test   eax,eax
c001a67b:	0f 84 50 02 00 00    	je     c001a8d1 <Krnl::panic(char const*)+0x342>
c001a681:	83 ec 08             	sub    esp,0x8
c001a684:	8b 15 94 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c94
c001a68a:	68 5c be 02 c0       	push   0xc002be5c
c001a68f:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a695:	e8 08 69 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a69a:	58                   	pop    eax
c001a69b:	5a                   	pop    edx
c001a69c:	8b 15 94 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c94
c001a6a2:	68 97 bd 02 c0       	push   0xc002bd97
c001a6a7:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a6ad:	e8 f0 68 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a6b2:	59                   	pop    ecx
c001a6b3:	58                   	pop    eax
c001a6b4:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a6b9:	53                   	push   ebx
c001a6ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6c0:	e8 dd 68 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a6c5:	83 c4 10             	add    esp,0x10
c001a6c8:	83 ec 08             	sub    esp,0x8
c001a6cb:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a6d0:	68 b6 bd 02 c0       	push   0xc002bdb6
c001a6d5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6db:	e8 c2 68 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a6e0:	58                   	pop    eax
c001a6e1:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a6e6:	5a                   	pop    edx
c001a6e7:	68 b4 be 02 c0       	push   0xc002beb4
c001a6ec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6f2:	e8 ab 68 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a6f7:	59                   	pop    ecx
c001a6f8:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a6fd:	5b                   	pop    ebx
c001a6fe:	68 f4 be 02 c0       	push   0xc002bef4
c001a703:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a709:	e8 94 68 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a70e:	58                   	pop    eax
c001a70f:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a714:	5a                   	pop    edx
c001a715:	68 a2 bd 02 c0       	push   0xc002bda2
c001a71a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a720:	e8 7d 68 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a725:	59                   	pop    ecx
c001a726:	5b                   	pop    ebx
c001a727:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a72a:	68 ba bd 02 c0       	push   0xc002bdba
c001a72f:	e8 8f 86 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001a734:	58                   	pop    eax
c001a735:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a738:	5a                   	pop    edx
c001a739:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a73c:	68 c3 bd 02 c0       	push   0xc002bdc3
c001a741:	e8 7d 86 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001a746:	59                   	pop    ecx
c001a747:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a74a:	5b                   	pop    ebx
c001a74b:	8b 00                	mov    eax,DWORD PTR [eax]
c001a74d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a750:	68 cc bd 02 c0       	push   0xc002bdcc
c001a755:	e8 69 86 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001a75a:	58                   	pop    eax
c001a75b:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a760:	5a                   	pop    edx
c001a761:	68 38 bf 02 c0       	push   0xc002bf38
c001a766:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a76c:	e8 31 68 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a771:	59                   	pop    ecx
c001a772:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a777:	5b                   	pop    ebx
c001a778:	68 d5 bd 02 c0       	push   0xc002bdd5
c001a77d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a783:	e8 1a 68 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a788:	0f 20 c0             	mov    eax,cr0
c001a78b:	5a                   	pop    edx
c001a78c:	59                   	pop    ecx
c001a78d:	50                   	push   eax
c001a78e:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a793:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a799:	e8 2a 68 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001a79e:	5b                   	pop    ebx
c001a79f:	58                   	pop    eax
c001a7a0:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a7a5:	68 df bd 02 c0       	push   0xc002bddf
c001a7aa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7b0:	e8 ed 67 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a7b5:	0f 20 d0             	mov    eax,cr2
c001a7b8:	5a                   	pop    edx
c001a7b9:	59                   	pop    ecx
c001a7ba:	50                   	push   eax
c001a7bb:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a7c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7c6:	e8 fd 67 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001a7cb:	5b                   	pop    ebx
c001a7cc:	58                   	pop    eax
c001a7cd:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a7d2:	68 e9 bd 02 c0       	push   0xc002bde9
c001a7d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7dd:	e8 c0 67 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a7e2:	0f 20 d8             	mov    eax,cr3
c001a7e5:	5a                   	pop    edx
c001a7e6:	59                   	pop    ecx
c001a7e7:	50                   	push   eax
c001a7e8:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a7ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7f3:	e8 d0 67 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001a7f8:	5b                   	pop    ebx
c001a7f9:	58                   	pop    eax
c001a7fa:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a7ff:	68 fc bd 02 c0       	push   0xc002bdfc
c001a804:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a80a:	e8 93 67 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a80f:	0f 20 e0             	mov    eax,cr4
c001a812:	5a                   	pop    edx
c001a813:	59                   	pop    ecx
c001a814:	50                   	push   eax
c001a815:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a81a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a820:	e8 a3 67 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001a825:	5b                   	pop    ebx
c001a826:	58                   	pop    eax
c001a827:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a82c:	68 06 be 02 c0       	push   0xc002be06
c001a831:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a837:	e8 66 67 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a83c:	5a                   	pop    edx
c001a83d:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a842:	59                   	pop    ecx
c001a843:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a849:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a84c:	50                   	push   eax
c001a84d:	e8 76 67 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001a852:	5b                   	pop    ebx
c001a853:	58                   	pop    eax
c001a854:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a859:	68 1d be 02 c0       	push   0xc002be1d
c001a85e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a864:	e8 39 67 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a869:	5a                   	pop    edx
c001a86a:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a86f:	59                   	pop    ecx
c001a870:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a876:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a879:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a87c:	50                   	push   eax
c001a87d:	e8 46 67 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001a882:	5b                   	pop    ebx
c001a883:	58                   	pop    eax
c001a884:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a889:	68 1d be 02 c0       	push   0xc002be1d
c001a88e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a894:	e8 09 67 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a899:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a89e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a8a1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8a7:	8b 12                	mov    edx,DWORD PTR [edx]
c001a8a9:	59                   	pop    ecx
c001a8aa:	5b                   	pop    ebx
c001a8ab:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a8ae:	50                   	push   eax
c001a8af:	e8 14 67 ff ff       	call   c0010fc8 <VgaText::putx(unsigned int)>
c001a8b4:	83 c4 10             	add    esp,0x10
c001a8b7:	b2 fe                	mov    dl,0xfe
c001a8b9:	e4 60                	in     al,0x60
c001a8bb:	3c 1c                	cmp    al,0x1c
c001a8bd:	74 04                	je     c001a8c3 <Krnl::panic(char const*)+0x334>
c001a8bf:	3c 5a                	cmp    al,0x5a
c001a8c1:	75 f6                	jne    c001a8b9 <Krnl::panic(char const*)+0x32a>
c001a8c3:	e4 64                	in     al,0x64
c001a8c5:	a8 02                	test   al,0x2
c001a8c7:	75 fa                	jne    c001a8c3 <Krnl::panic(char const*)+0x334>
c001a8c9:	88 d0                	mov    al,dl
c001a8cb:	e6 64                	out    0x64,al
c001a8cd:	fa                   	cli    
c001a8ce:	f4                   	hlt    
c001a8cf:	eb e8                	jmp    c001a8b9 <Krnl::panic(char const*)+0x32a>
c001a8d1:	50                   	push   eax
c001a8d2:	50                   	push   eax
c001a8d3:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a8d8:	68 88 be 02 c0       	push   0xc002be88
c001a8dd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8e3:	e8 ba 66 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a8e8:	58                   	pop    eax
c001a8e9:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a8ee:	5a                   	pop    edx
c001a8ef:	68 97 bd 02 c0       	push   0xc002bd97
c001a8f4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8fa:	e8 a3 66 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a8ff:	59                   	pop    ecx
c001a900:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a905:	5b                   	pop    ebx
c001a906:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a909:	83 c0 0c             	add    eax,0xc
c001a90c:	50                   	push   eax
c001a90d:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001a912:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a918:	e8 85 66 ff ff       	call   c0010fa2 <VgaText::puts(char const*)>
c001a91d:	83 c4 10             	add    esp,0x10
c001a920:	e9 a3 fd ff ff       	jmp    c001a6c8 <Krnl::panic(char const*)+0x139>

c001a925 <Net::switchEndian16(unsigned short)>:
c001a925:	83 ec 04             	sub    esp,0x4
c001a928:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a92c:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a930:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a934:	c1 f8 08             	sar    eax,0x8
c001a937:	89 c2                	mov    edx,eax
c001a939:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a93d:	c1 e0 08             	shl    eax,0x8
c001a940:	09 d0                	or     eax,edx
c001a942:	83 c4 04             	add    esp,0x4
c001a945:	c3                   	ret    

c001a946 <Net::switchEndian32(unsigned int)>:
c001a946:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a94a:	c1 e8 18             	shr    eax,0x18
c001a94d:	89 c2                	mov    edx,eax
c001a94f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a953:	c1 e0 08             	shl    eax,0x8
c001a956:	25 00 00 ff 00       	and    eax,0xff0000
c001a95b:	09 c2                	or     edx,eax
c001a95d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a961:	c1 e8 08             	shr    eax,0x8
c001a964:	25 00 ff 00 00       	and    eax,0xff00
c001a969:	09 c2                	or     edx,eax
c001a96b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a96f:	c1 e0 18             	shl    eax,0x18
c001a972:	09 d0                	or     eax,edx
c001a974:	c3                   	ret    

c001a975 <Net::crc32Calc(unsigned char*, int)>:
c001a975:	83 ec 10             	sub    esp,0x10
c001a978:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a97d:	75 07                	jne    c001a986 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a97f:	b8 00 00 00 00       	mov    eax,0x0
c001a984:	eb 7c                	jmp    c001aa02 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a986:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a98b:	7f 07                	jg     c001a994 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a98d:	b8 00 00 00 00       	mov    eax,0x0
c001a992:	eb 6e                	jmp    c001aa02 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a994:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a99c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a9a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9a8:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a9ac:	7d 4e                	jge    c001a9fc <Net::crc32Calc(unsigned char*, int)+0x87>
c001a9ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a9b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a9b6:	01 d0                	add    eax,edx
c001a9b8:	8a 00                	mov    al,BYTE PTR [eax]
c001a9ba:	0f b6 c0             	movzx  eax,al
c001a9bd:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a9c1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a9c9:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a9ce:	7f 26                	jg     c001a9f6 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a9d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9d4:	83 e0 01             	and    eax,0x1
c001a9d7:	74 0d                	je     c001a9e6 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a9d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9dd:	d1 e8                	shr    eax,1
c001a9df:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a9e4:	eb 06                	jmp    c001a9ec <Net::crc32Calc(unsigned char*, int)+0x77>
c001a9e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9ea:	d1 e8                	shr    eax,1
c001a9ec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a9f0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a9f4:	eb d3                	jmp    c001a9c9 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a9f6:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a9fa:	eb a8                	jmp    c001a9a4 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a9fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa00:	f7 d0                	not    eax
c001aa02:	83 c4 10             	add    esp,0x10
c001aa05:	c3                   	ret    

c001aa06 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001aa06:	83 ec 1c             	sub    esp,0x1c
c001aa09:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aa11:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa19:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001aa1e:	7f 14                	jg     c001aa34 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001aa20:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa24:	8d 50 01             	lea    edx,[eax+0x1]
c001aa27:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa2b:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001aa2e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa32:	eb e5                	jmp    c001aa19 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001aa34:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa38:	8d 50 01             	lea    edx,[eax+0x1]
c001aa3b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa3f:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001aa42:	83 ec 04             	sub    esp,0x4
c001aa45:	6a 06                	push   0x6
c001aa47:	8d 44 24 36          	lea    eax,[esp+0x36]
c001aa4b:	50                   	push   eax
c001aa4c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aa50:	e8 f7 5c fe ff       	call   c000074c <memcpy>
c001aa55:	83 c4 10             	add    esp,0x10
c001aa58:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aa5d:	83 ec 04             	sub    esp,0x4
c001aa60:	6a 06                	push   0x6
c001aa62:	8d 44 24 30          	lea    eax,[esp+0x30]
c001aa66:	50                   	push   eax
c001aa67:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aa6b:	e8 dc 5c fe ff       	call   c000074c <memcpy>
c001aa70:	83 c4 10             	add    esp,0x10
c001aa73:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aa78:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa7c:	0f b7 c0             	movzx  eax,ax
c001aa7f:	c1 f8 08             	sar    eax,0x8
c001aa82:	89 c1                	mov    ecx,eax
c001aa84:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa88:	8d 50 01             	lea    edx,[eax+0x1]
c001aa8b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa8f:	88 ca                	mov    dl,cl
c001aa91:	88 10                	mov    BYTE PTR [eax],dl
c001aa93:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aa97:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa9b:	8d 48 01             	lea    ecx,[eax+0x1]
c001aa9e:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001aaa2:	88 10                	mov    BYTE PTR [eax],dl
c001aaa4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aaa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aaac:	83 ec 04             	sub    esp,0x4
c001aaaf:	52                   	push   edx
c001aab0:	50                   	push   eax
c001aab1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aab5:	e8 92 5c fe ff       	call   c000074c <memcpy>
c001aaba:	83 c4 10             	add    esp,0x10
c001aabd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aac1:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001aac5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aac9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001aacd:	83 ec 08             	sub    esp,0x8
c001aad0:	50                   	push   eax
c001aad1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001aad5:	e8 9b fe ff ff       	call   c001a975 <Net::crc32Calc(unsigned char*, int)>
c001aada:	83 c4 10             	add    esp,0x10
c001aadd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aae1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aae5:	c1 e8 18             	shr    eax,0x18
c001aae8:	89 c1                	mov    ecx,eax
c001aaea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaee:	8d 50 01             	lea    edx,[eax+0x1]
c001aaf1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aaf5:	88 ca                	mov    dl,cl
c001aaf7:	88 10                	mov    BYTE PTR [eax],dl
c001aaf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aafd:	c1 e8 10             	shr    eax,0x10
c001ab00:	89 c1                	mov    ecx,eax
c001ab02:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab06:	8d 50 01             	lea    edx,[eax+0x1]
c001ab09:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab0d:	88 ca                	mov    dl,cl
c001ab0f:	88 10                	mov    BYTE PTR [eax],dl
c001ab11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab15:	c1 e8 08             	shr    eax,0x8
c001ab18:	89 c1                	mov    ecx,eax
c001ab1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab1e:	8d 50 01             	lea    edx,[eax+0x1]
c001ab21:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab25:	88 ca                	mov    dl,cl
c001ab27:	88 10                	mov    BYTE PTR [eax],dl
c001ab29:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab2d:	8d 50 01             	lea    edx,[eax+0x1]
c001ab30:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab34:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ab38:	88 10                	mov    BYTE PTR [eax],dl
c001ab3a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab3e:	83 c4 1c             	add    esp,0x1c
c001ab41:	c3                   	ret    

c001ab42 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ab42:	83 ec 2c             	sub    esp,0x2c
c001ab45:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab49:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ab4d:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001ab52:	83 ec 04             	sub    esp,0x4
c001ab55:	6a 06                	push   0x6
c001ab57:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab5b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ab5f:	83 c0 0e             	add    eax,0xe
c001ab62:	50                   	push   eax
c001ab63:	e8 e4 5b fe ff       	call   c000074c <memcpy>
c001ab68:	83 c4 10             	add    esp,0x10
c001ab6b:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ab70:	83 ec 04             	sub    esp,0x4
c001ab73:	6a 06                	push   0x6
c001ab75:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ab7d:	83 c0 08             	add    eax,0x8
c001ab80:	50                   	push   eax
c001ab81:	e8 c6 5b fe ff       	call   c000074c <memcpy>
c001ab86:	83 c4 10             	add    esp,0x10
c001ab89:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ab8e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab92:	8d 50 01             	lea    edx,[eax+0x1]
c001ab95:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab99:	8a 00                	mov    al,BYTE PTR [eax]
c001ab9b:	0f b6 c0             	movzx  eax,al
c001ab9e:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001aba3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aba7:	8d 50 01             	lea    edx,[eax+0x1]
c001abaa:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001abae:	8a 00                	mov    al,BYTE PTR [eax]
c001abb0:	0f b6 c0             	movzx  eax,al
c001abb3:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001abb8:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001abbd:	c1 e0 08             	shl    eax,0x8
c001abc0:	89 c2                	mov    edx,eax
c001abc2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001abc6:	09 d0                	or     eax,edx
c001abc8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001abcc:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001abd0:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001abd5:	75 3a                	jne    c001ac11 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001abd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abdb:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001abde:	66 3d dc 05          	cmp    ax,0x5dc
c001abe2:	77 10                	ja     c001abf4 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001abe4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abe8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001abeb:	0f b7 c0             	movzx  eax,ax
c001abee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001abf2:	eb 1d                	jmp    c001ac11 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001abf4:	83 ec 0c             	sub    esp,0xc
c001abf7:	68 60 bf 02 c0       	push   0xc002bf60
c001abfc:	e8 c2 81 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001ac01:	83 c4 10             	add    esp,0x10
c001ac04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac08:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ac0c:	e9 c0 00 00 00       	jmp    c001acd1 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ac11:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ac15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac19:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac1b:	83 ec 04             	sub    esp,0x4
c001ac1e:	52                   	push   edx
c001ac1f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac23:	50                   	push   eax
c001ac24:	e8 23 5b fe ff       	call   c000074c <memcpy>
c001ac29:	83 c4 10             	add    esp,0x10
c001ac2c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac30:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ac34:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac38:	8d 50 01             	lea    edx,[eax+0x1]
c001ac3b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac3f:	8a 00                	mov    al,BYTE PTR [eax]
c001ac41:	0f b6 c0             	movzx  eax,al
c001ac44:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ac48:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac4c:	8d 50 01             	lea    edx,[eax+0x1]
c001ac4f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac53:	8a 00                	mov    al,BYTE PTR [eax]
c001ac55:	0f b6 c0             	movzx  eax,al
c001ac58:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ac5c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac60:	8d 50 01             	lea    edx,[eax+0x1]
c001ac63:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac67:	8a 00                	mov    al,BYTE PTR [eax]
c001ac69:	0f b6 c0             	movzx  eax,al
c001ac6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac70:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac74:	8d 50 01             	lea    edx,[eax+0x1]
c001ac77:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac7b:	8a 00                	mov    al,BYTE PTR [eax]
c001ac7d:	0f b6 c0             	movzx  eax,al
c001ac80:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ac88:	c1 e0 18             	shl    eax,0x18
c001ac8b:	89 c2                	mov    edx,eax
c001ac8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac91:	c1 e0 10             	shl    eax,0x10
c001ac94:	09 c2                	or     edx,eax
c001ac96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac9a:	c1 e0 08             	shl    eax,0x8
c001ac9d:	09 d0                	or     eax,edx
c001ac9f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001aca3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aca7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acab:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001acaf:	83 e8 04             	sub    eax,0x4
c001acb2:	83 ec 08             	sub    esp,0x8
c001acb5:	50                   	push   eax
c001acb6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001acba:	e8 b6 fc ff ff       	call   c001a975 <Net::crc32Calc(unsigned char*, int)>
c001acbf:	83 c4 10             	add    esp,0x10
c001acc2:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001acc6:	0f 94 c2             	sete   dl
c001acc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001accd:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001acd0:	90                   	nop
c001acd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acd5:	83 c4 2c             	add    esp,0x2c
c001acd8:	c2 04 00             	ret    0x4

c001acdb <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001acdb:	55                   	push   ebp
c001acdc:	57                   	push   edi
c001acdd:	56                   	push   esi
c001acde:	53                   	push   ebx
c001acdf:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ace5:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001acec:	8a 1e                	mov    bl,BYTE PTR [esi]
c001acee:	8d 6e 01             	lea    ebp,[esi+0x1]
c001acf1:	80 fb 40             	cmp    bl,0x40
c001acf4:	75 1b                	jne    c001ad11 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001acf6:	8a 16                	mov    dl,BYTE PTR [esi]
c001acf8:	84 d2                	test   dl,dl
c001acfa:	0f 84 f1 00 00 00    	je     c001adf1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad00:	8d 46 01             	lea    eax,[esi+0x1]
c001ad03:	80 fa 3a             	cmp    dl,0x3a
c001ad06:	74 04                	je     c001ad0c <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ad08:	89 c6                	mov    esi,eax
c001ad0a:	eb ea                	jmp    c001acf6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ad0c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ad0f:	89 c6                	mov    esi,eax
c001ad11:	50                   	push   eax
c001ad12:	6a 40                	push   0x40
c001ad14:	6a 00                	push   0x0
c001ad16:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad1a:	50                   	push   eax
c001ad1b:	e8 60 5a fe ff       	call   c0000780 <memset>
c001ad20:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ad27:	31 c0                	xor    eax,eax
c001ad29:	83 c4 10             	add    esp,0x10
c001ad2c:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ad2e:	84 c9                	test   cl,cl
c001ad30:	0f 84 bb 00 00 00    	je     c001adf1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad36:	3d c7 00 00 00       	cmp    eax,0xc7
c001ad3b:	0f 8f b0 00 00 00    	jg     c001adf1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad41:	80 f9 0a             	cmp    cl,0xa
c001ad44:	0f 85 98 00 00 00    	jne    c001ade2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ad4a:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ad4f:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ad53:	a8 df                	test   al,0xdf
c001ad55:	0f 94 c1             	sete   cl
c001ad58:	3c 23                	cmp    al,0x23
c001ad5a:	0f 94 c2             	sete   dl
c001ad5d:	08 d1                	or     cl,dl
c001ad5f:	75 4a                	jne    c001adab <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad61:	8d 50 f7             	lea    edx,[eax-0x9]
c001ad64:	80 fa 01             	cmp    dl,0x1
c001ad67:	76 42                	jbe    c001adab <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad69:	3c 5b                	cmp    al,0x5b
c001ad6b:	75 42                	jne    c001adaf <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ad6d:	80 fb 40             	cmp    bl,0x40
c001ad70:	75 39                	jne    c001adab <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad72:	83 ec 0c             	sub    esp,0xc
c001ad75:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ad79:	52                   	push   edx
c001ad7a:	e8 1d 5a fe ff       	call   c000079c <strlen>
c001ad7f:	83 c4 10             	add    esp,0x10
c001ad82:	83 f8 3f             	cmp    eax,0x3f
c001ad85:	77 6a                	ja     c001adf1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad87:	50                   	push   eax
c001ad88:	50                   	push   eax
c001ad89:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ad8d:	52                   	push   edx
c001ad8e:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ad92:	52                   	push   edx
c001ad93:	e8 a4 5a fe ff       	call   c000083c <strcpy>
c001ad98:	58                   	pop    eax
c001ad99:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ad9d:	52                   	push   edx
c001ad9e:	e8 f9 59 fe ff       	call   c000079c <strlen>
c001ada3:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ada8:	83 c4 10             	add    esp,0x10
c001adab:	31 d2                	xor    edx,edx
c001adad:	eb 3a                	jmp    c001ade9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001adaf:	80 fb 40             	cmp    bl,0x40
c001adb2:	74 06                	je     c001adba <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001adb4:	8d 44 24 58          	lea    eax,[esp+0x58]
c001adb8:	eb 20                	jmp    c001adda <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001adba:	50                   	push   eax
c001adbb:	50                   	push   eax
c001adbc:	55                   	push   ebp
c001adbd:	8d 44 24 24          	lea    eax,[esp+0x24]
c001adc1:	50                   	push   eax
c001adc2:	e8 01 5b fe ff       	call   c00008c8 <strcmp>
c001adc7:	83 c4 10             	add    esp,0x10
c001adca:	85 c0                	test   eax,eax
c001adcc:	75 dd                	jne    c001adab <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adce:	eb e4                	jmp    c001adb4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001add0:	8d 50 01             	lea    edx,[eax+0x1]
c001add3:	80 f9 3d             	cmp    cl,0x3d
c001add6:	74 1d                	je     c001adf5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001add8:	89 d0                	mov    eax,edx
c001adda:	8a 08                	mov    cl,BYTE PTR [eax]
c001addc:	84 c9                	test   cl,cl
c001adde:	75 f0                	jne    c001add0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ade0:	eb 0f                	jmp    c001adf1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ade2:	8d 50 01             	lea    edx,[eax+0x1]
c001ade5:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ade9:	47                   	inc    edi
c001adea:	89 d0                	mov    eax,edx
c001adec:	e9 3b ff ff ff       	jmp    c001ad2c <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001adf1:	31 c0                	xor    eax,eax
c001adf3:	eb 33                	jmp    c001ae28 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001adf5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001adf9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001adfc:	50                   	push   eax
c001adfd:	50                   	push   eax
c001adfe:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ae02:	50                   	push   eax
c001ae03:	56                   	push   esi
c001ae04:	e8 bf 5a fe ff       	call   c00008c8 <strcmp>
c001ae09:	83 c4 10             	add    esp,0x10
c001ae0c:	85 c0                	test   eax,eax
c001ae0e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae12:	75 97                	jne    c001adab <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae14:	51                   	push   ecx
c001ae15:	51                   	push   ecx
c001ae16:	52                   	push   edx
c001ae17:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ae1e:	e8 19 5a fe ff       	call   c000083c <strcpy>
c001ae23:	83 c4 10             	add    esp,0x10
c001ae26:	b0 01                	mov    al,0x1
c001ae28:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ae2e:	5b                   	pop    ebx
c001ae2f:	5e                   	pop    esi
c001ae30:	5f                   	pop    edi
c001ae31:	5d                   	pop    ebp
c001ae32:	c3                   	ret    

c001ae33 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ae33:	57                   	push   edi
c001ae34:	56                   	push   esi
c001ae35:	53                   	push   ebx
c001ae36:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ae3c:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ae43:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ae4a:	53                   	push   ebx
c001ae4b:	e8 4c 59 fe ff       	call   c000079c <strlen>
c001ae50:	89 34 24             	mov    DWORD PTR [esp],esi
c001ae53:	89 c7                	mov    edi,eax
c001ae55:	e8 42 59 fe ff       	call   c000079c <strlen>
c001ae5a:	83 c4 10             	add    esp,0x10
c001ae5d:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001ae61:	3d ff 00 00 00       	cmp    eax,0xff
c001ae66:	0f 87 d3 00 00 00    	ja     c001af3f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ae6c:	57                   	push   edi
c001ae6d:	57                   	push   edi
c001ae6e:	56                   	push   esi
c001ae6f:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001ae73:	56                   	push   esi
c001ae74:	e8 c3 59 fe ff       	call   c000083c <strcpy>
c001ae79:	58                   	pop    eax
c001ae7a:	5a                   	pop    edx
c001ae7b:	68 b1 c4 02 c0       	push   0xc002c4b1
c001ae80:	56                   	push   esi
c001ae81:	e8 f6 5a fe ff       	call   c000097c <strcat>
c001ae86:	59                   	pop    ecx
c001ae87:	5f                   	pop    edi
c001ae88:	53                   	push   ebx
c001ae89:	56                   	push   esi
c001ae8a:	e8 ed 5a fe ff       	call   c000097c <strcat>
c001ae8f:	58                   	pop    eax
c001ae90:	5a                   	pop    edx
c001ae91:	68 ac bf 02 c0       	push   0xc002bfac
c001ae96:	56                   	push   esi
c001ae97:	e8 e0 5a fe ff       	call   c000097c <strcat>
c001ae9c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001aea3:	e8 a3 49 ff ff       	call   c000f84b <malloc>
c001aea8:	83 c4 0c             	add    esp,0xc
c001aeab:	89 c3                	mov    ebx,eax
c001aead:	ff 35 94 1c 03 c0    	push   DWORD PTR ds:0xc0031c94
c001aeb3:	56                   	push   esi
c001aeb4:	50                   	push   eax
c001aeb5:	e8 68 84 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001aeba:	83 c4 10             	add    esp,0x10
c001aebd:	85 db                	test   ebx,ebx
c001aebf:	74 7e                	je     c001af3f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aec1:	51                   	push   ecx
c001aec2:	51                   	push   ecx
c001aec3:	6a 01                	push   0x1
c001aec5:	53                   	push   ebx
c001aec6:	e8 bb 84 ff ff       	call   c0013386 <File::open(FileOpenMode)>
c001aecb:	83 c4 10             	add    esp,0x10
c001aece:	85 c0                	test   eax,eax
c001aed0:	74 08                	je     c001aeda <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001aed2:	83 ec 0c             	sub    esp,0xc
c001aed5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aed7:	53                   	push   ebx
c001aed8:	eb 5f                	jmp    c001af39 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001aeda:	52                   	push   edx
c001aedb:	8d 44 24 17          	lea    eax,[esp+0x17]
c001aedf:	50                   	push   eax
c001aee0:	8d 44 24 20          	lea    eax,[esp+0x20]
c001aee4:	50                   	push   eax
c001aee5:	53                   	push   ebx
c001aee6:	e8 47 87 ff ff       	call   c0013632 <File::stat(unsigned long long*, bool*)>
c001aeeb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aeef:	83 c4 10             	add    esp,0x10
c001aef2:	89 c1                	mov    ecx,eax
c001aef4:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001aef8:	74 31                	je     c001af2b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001aefa:	83 ec 0c             	sub    esp,0xc
c001aefd:	50                   	push   eax
c001aefe:	e8 48 49 ff ff       	call   c000f84b <malloc>
c001af03:	89 c6                	mov    esi,eax
c001af05:	58                   	pop    eax
c001af06:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af08:	8d 54 24 20          	lea    edx,[esp+0x20]
c001af0c:	52                   	push   edx
c001af0d:	56                   	push   esi
c001af0e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af12:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af16:	53                   	push   ebx
c001af17:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af1a:	83 c4 20             	add    esp,0x20
c001af1d:	85 c0                	test   eax,eax
c001af1f:	75 0a                	jne    c001af2b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af25:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001af29:	74 18                	je     c001af43 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001af2b:	83 ec 0c             	sub    esp,0xc
c001af2e:	53                   	push   ebx
c001af2f:	e8 b0 84 ff ff       	call   c00133e4 <File::close()>
c001af34:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af39:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af3c:	83 c4 10             	add    esp,0x10
c001af3f:	31 c0                	xor    eax,eax
c001af41:	eb 3b                	jmp    c001af7e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001af43:	83 ec 0c             	sub    esp,0xc
c001af46:	53                   	push   ebx
c001af47:	e8 98 84 ff ff       	call   c00133e4 <File::close()>
c001af4c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af4e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af51:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af54:	83 c4 0c             	add    esp,0xc
c001af57:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af5e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af65:	56                   	push   esi
c001af66:	e8 70 fd ff ff       	call   c001acdb <Reg::findLineFromLoadedData(char*, char*, char*)>
c001af6b:	89 34 24             	mov    DWORD PTR [esp],esi
c001af6e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001af72:	e8 e4 48 ff ff       	call   c000f85b <free>
c001af77:	83 c4 10             	add    esp,0x10
c001af7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001af7e:	81 c4 20 01 00 00    	add    esp,0x120
c001af84:	5b                   	pop    ebx
c001af85:	5e                   	pop    esi
c001af86:	5f                   	pop    edi
c001af87:	c3                   	ret    

c001af88 <Reg::getLine(char*, char*, char*)>:
c001af88:	57                   	push   edi
c001af89:	56                   	push   esi
c001af8a:	53                   	push   ebx
c001af8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af8f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001af93:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001af97:	57                   	push   edi
c001af98:	56                   	push   esi
c001af99:	53                   	push   ebx
c001af9a:	68 b1 bf 02 c0       	push   0xc002bfb1
c001af9f:	e8 8f fe ff ff       	call   c001ae33 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001afa4:	83 c4 10             	add    esp,0x10
c001afa7:	84 c0                	test   al,al
c001afa9:	75 10                	jne    c001afbb <Reg::getLine(char*, char*, char*)+0x33>
c001afab:	57                   	push   edi
c001afac:	56                   	push   esi
c001afad:	53                   	push   ebx
c001afae:	68 d6 bf 02 c0       	push   0xc002bfd6
c001afb3:	e8 7b fe ff ff       	call   c001ae33 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001afb8:	83 c4 10             	add    esp,0x10
c001afbb:	5b                   	pop    ebx
c001afbc:	5e                   	pop    esi
c001afbd:	5f                   	pop    edi
c001afbe:	c3                   	ret    

c001afbf <Reg::readInt(char*, char*, int*)>:
c001afbf:	55                   	push   ebp
c001afc0:	57                   	push   edi
c001afc1:	56                   	push   esi
c001afc2:	53                   	push   ebx
c001afc3:	81 ec f0 00 00 00    	sub    esp,0xf0
c001afc9:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001afcd:	57                   	push   edi
c001afce:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001afd5:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001afdc:	e8 a7 ff ff ff       	call   c001af88 <Reg::getLine(char*, char*, char*)>
c001afe1:	83 c4 10             	add    esp,0x10
c001afe4:	84 c0                	test   al,al
c001afe6:	0f 84 b3 00 00 00    	je     c001b09f <Reg::readInt(char*, char*, int*)+0xe0>
c001afec:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001aff0:	80 fa 2b             	cmp    dl,0x2b
c001aff3:	74 0c                	je     c001b001 <Reg::readInt(char*, char*, int*)+0x42>
c001aff5:	80 fa 2d             	cmp    dl,0x2d
c001aff8:	75 0e                	jne    c001b008 <Reg::readInt(char*, char*, int*)+0x49>
c001affa:	ba 01 00 00 00       	mov    edx,0x1
c001afff:	eb 0b                	jmp    c001b00c <Reg::readInt(char*, char*, int*)+0x4d>
c001b001:	ba 01 00 00 00       	mov    edx,0x1
c001b006:	eb 02                	jmp    c001b00a <Reg::readInt(char*, char*, int*)+0x4b>
c001b008:	31 d2                	xor    edx,edx
c001b00a:	31 c0                	xor    eax,eax
c001b00c:	be 0a 00 00 00       	mov    esi,0xa
c001b011:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b016:	75 20                	jne    c001b038 <Reg::readInt(char*, char*, int*)+0x79>
c001b018:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b01c:	80 f9 78             	cmp    cl,0x78
c001b01f:	75 0a                	jne    c001b02b <Reg::readInt(char*, char*, int*)+0x6c>
c001b021:	83 c2 02             	add    edx,0x2
c001b024:	be 10 00 00 00       	mov    esi,0x10
c001b029:	eb 0d                	jmp    c001b038 <Reg::readInt(char*, char*, int*)+0x79>
c001b02b:	80 f9 62             	cmp    cl,0x62
c001b02e:	75 08                	jne    c001b038 <Reg::readInt(char*, char*, int*)+0x79>
c001b030:	83 c2 02             	add    edx,0x2
c001b033:	be 02 00 00 00       	mov    esi,0x2
c001b038:	01 d7                	add    edi,edx
c001b03a:	31 d2                	xor    edx,edx
c001b03c:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b03e:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b042:	80 fb 0d             	cmp    bl,0xd
c001b045:	0f 94 c3             	sete   bl
c001b048:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b04d:	0f 94 c1             	sete   cl
c001b050:	08 cb                	or     bl,cl
c001b052:	75 3a                	jne    c001b08e <Reg::readInt(char*, char*, int*)+0xcf>
c001b054:	0f af d6             	imul   edx,esi
c001b057:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b05c:	83 fe 10             	cmp    esi,0x10
c001b05f:	75 26                	jne    c001b087 <Reg::readInt(char*, char*, int*)+0xc8>
c001b061:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b065:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b068:	89 e9                	mov    ecx,ebp
c001b06a:	80 f9 05             	cmp    cl,0x5
c001b06d:	77 06                	ja     c001b075 <Reg::readInt(char*, char*, int*)+0xb6>
c001b06f:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b073:	eb 16                	jmp    c001b08b <Reg::readInt(char*, char*, int*)+0xcc>
c001b075:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b079:	83 e9 61             	sub    ecx,0x61
c001b07c:	80 f9 05             	cmp    cl,0x5
c001b07f:	77 06                	ja     c001b087 <Reg::readInt(char*, char*, int*)+0xc8>
c001b081:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b085:	eb 04                	jmp    c001b08b <Reg::readInt(char*, char*, int*)+0xcc>
c001b087:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b08b:	47                   	inc    edi
c001b08c:	eb ae                	jmp    c001b03c <Reg::readInt(char*, char*, int*)+0x7d>
c001b08e:	84 c0                	test   al,al
c001b090:	74 02                	je     c001b094 <Reg::readInt(char*, char*, int*)+0xd5>
c001b092:	f7 da                	neg    edx
c001b094:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b09b:	89 10                	mov    DWORD PTR [eax],edx
c001b09d:	88 d8                	mov    al,bl
c001b09f:	81 c4 ec 00 00 00    	add    esp,0xec
c001b0a5:	5b                   	pop    ebx
c001b0a6:	5e                   	pop    esi
c001b0a7:	5f                   	pop    edi
c001b0a8:	5d                   	pop    ebp
c001b0a9:	c3                   	ret    

c001b0aa <Reg::readString(char*, char*, char*, int)>:
c001b0aa:	57                   	push   edi
c001b0ab:	56                   	push   esi
c001b0ac:	53                   	push   ebx
c001b0ad:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b0b3:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b0ba:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b0be:	57                   	push   edi
c001b0bf:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b0c6:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b0cd:	e8 b6 fe ff ff       	call   c001af88 <Reg::getLine(char*, char*, char*)>
c001b0d2:	83 c4 10             	add    esp,0x10
c001b0d5:	89 c6                	mov    esi,eax
c001b0d7:	84 c0                	test   al,al
c001b0d9:	74 44                	je     c001b11f <Reg::readString(char*, char*, char*, int)+0x75>
c001b0db:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b0e2:	31 c0                	xor    eax,eax
c001b0e4:	4a                   	dec    edx
c001b0e5:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b0e8:	84 c9                	test   cl,cl
c001b0ea:	74 0f                	je     c001b0fb <Reg::readString(char*, char*, char*, int)+0x51>
c001b0ec:	39 c2                	cmp    edx,eax
c001b0ee:	7e 0b                	jle    c001b0fb <Reg::readString(char*, char*, char*, int)+0x51>
c001b0f0:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b0f3:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b0f8:	40                   	inc    eax
c001b0f9:	eb ea                	jmp    c001b0e5 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b0fb:	83 ec 0c             	sub    esp,0xc
c001b0fe:	53                   	push   ebx
c001b0ff:	e8 98 56 fe ff       	call   c000079c <strlen>
c001b104:	83 c4 10             	add    esp,0x10
c001b107:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b10c:	75 11                	jne    c001b11f <Reg::readString(char*, char*, char*, int)+0x75>
c001b10e:	83 ec 0c             	sub    esp,0xc
c001b111:	53                   	push   ebx
c001b112:	e8 85 56 fe ff       	call   c000079c <strlen>
c001b117:	83 c4 10             	add    esp,0x10
c001b11a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b11f:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b125:	89 f0                	mov    eax,esi
c001b127:	5b                   	pop    ebx
c001b128:	5e                   	pop    esi
c001b129:	5f                   	pop    edi
c001b12a:	c3                   	ret    

c001b12b <Reg::readBool(char*, char*, bool*)>:
c001b12b:	83 ec 20             	sub    esp,0x20
c001b12e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b132:	50                   	push   eax
c001b133:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b137:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b13b:	e8 7f fe ff ff       	call   c001afbf <Reg::readInt(char*, char*, int*)>
c001b140:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b145:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b149:	0f 95 02             	setne  BYTE PTR [edx]
c001b14c:	83 c4 2c             	add    esp,0x2c
c001b14f:	c3                   	ret    

c001b150 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b150:	53                   	push   ebx
c001b151:	83 ec 1c             	sub    esp,0x1c
c001b154:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b158:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b15c:	50                   	push   eax
c001b15d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b161:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b165:	e8 c1 ff ff ff       	call   c001b12b <Reg::readBool(char*, char*, bool*)>
c001b16a:	83 c4 10             	add    esp,0x10
c001b16d:	84 c0                	test   al,al
c001b16f:	74 04                	je     c001b175 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b171:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b175:	88 d8                	mov    al,bl
c001b177:	83 c4 18             	add    esp,0x18
c001b17a:	5b                   	pop    ebx
c001b17b:	c3                   	ret    

c001b17c <Reg::readIntWithDefault(char*, char*, int)>:
c001b17c:	53                   	push   ebx
c001b17d:	83 ec 1c             	sub    esp,0x1c
c001b180:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b184:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b188:	50                   	push   eax
c001b189:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b18d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b191:	e8 29 fe ff ff       	call   c001afbf <Reg::readInt(char*, char*, int*)>
c001b196:	83 c4 10             	add    esp,0x10
c001b199:	84 c0                	test   al,al
c001b19b:	74 04                	je     c001b1a1 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b19d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b1a1:	89 d8                	mov    eax,ebx
c001b1a3:	83 c4 18             	add    esp,0x18
c001b1a6:	5b                   	pop    ebx
c001b1a7:	c3                   	ret    

c001b1a8 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b1a8:	57                   	push   edi
c001b1a9:	56                   	push   esi
c001b1aa:	53                   	push   ebx
c001b1ab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b1af:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b1b3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b1b7:	56                   	push   esi
c001b1b8:	53                   	push   ebx
c001b1b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1c1:	e8 e4 fe ff ff       	call   c001b0aa <Reg::readString(char*, char*, char*, int)>
c001b1c6:	83 c4 10             	add    esp,0x10
c001b1c9:	84 c0                	test   al,al
c001b1cb:	75 1b                	jne    c001b1e8 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b1cd:	50                   	push   eax
c001b1ce:	56                   	push   esi
c001b1cf:	4e                   	dec    esi
c001b1d0:	6a 00                	push   0x0
c001b1d2:	53                   	push   ebx
c001b1d3:	e8 a8 55 fe ff       	call   c0000780 <memset>
c001b1d8:	83 c4 0c             	add    esp,0xc
c001b1db:	56                   	push   esi
c001b1dc:	57                   	push   edi
c001b1dd:	53                   	push   ebx
c001b1de:	89 fb                	mov    ebx,edi
c001b1e0:	e8 67 55 fe ff       	call   c000074c <memcpy>
c001b1e5:	83 c4 10             	add    esp,0x10
c001b1e8:	89 d8                	mov    eax,ebx
c001b1ea:	5b                   	pop    ebx
c001b1eb:	5e                   	pop    esi
c001b1ec:	5f                   	pop    edi
c001b1ed:	c3                   	ret    

c001b1ee <Sys::eject(regs*)>:
c001b1ee:	83 ec 0c             	sub    esp,0xc
c001b1f1:	83 ca ff             	or     edx,0xffffffff
c001b1f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1f8:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b1fb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b200:	83 e9 41             	sub    ecx,0x41
c001b203:	83 f9 19             	cmp    ecx,0x19
c001b206:	77 18                	ja     c001b220 <Sys::eject(regs*)+0x32>
c001b208:	8b 0c 8d 40 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd12c0]
c001b20f:	85 c9                	test   ecx,ecx
c001b211:	74 0d                	je     c001b220 <Sys::eject(regs*)+0x32>
c001b213:	83 ec 0c             	sub    esp,0xc
c001b216:	51                   	push   ecx
c001b217:	e8 10 b4 ff ff       	call   c001662c <LogicalDisk::eject()>
c001b21c:	83 c4 10             	add    esp,0x10
c001b21f:	99                   	cdq    
c001b220:	83 c4 0c             	add    esp,0xc
c001b223:	c3                   	ret    

c001b224 <Sys::exit(regs*)>:
c001b224:	83 ec 18             	sub    esp,0x18
c001b227:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b22b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b22e:	e8 0f 37 00 00       	call   c001e942 <terminateTask(int)>
c001b233:	83 c8 ff             	or     eax,0xffffffff
c001b236:	83 c4 1c             	add    esp,0x1c
c001b239:	89 c2                	mov    edx,eax
c001b23b:	c3                   	ret    

c001b23c <Sys::getCwd(regs*)>:
c001b23c:	83 ec 10             	sub    esp,0x10
c001b23f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b243:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b246:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b249:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b24e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b251:	e8 ce 7e ff ff       	call   c0013124 <Fs::getcwd(Process*, char*, int)>
c001b256:	83 c4 1c             	add    esp,0x1c
c001b259:	99                   	cdq    
c001b25a:	c3                   	ret    

c001b25b <Sys::getPID(regs*)>:
c001b25b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b260:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b263:	8b 00                	mov    eax,DWORD PTR [eax]
c001b265:	99                   	cdq    
c001b266:	c3                   	ret    

c001b267 <Sys::getRAMData(regs*)>:
c001b267:	8b 0d 74 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e774
c001b26d:	6b 05 70 e7 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e770,0x64
c001b274:	99                   	cdq    
c001b275:	f7 f9                	idiv   ecx
c001b277:	c1 e0 18             	shl    eax,0x18
c001b27a:	09 c8                	or     eax,ecx
c001b27c:	99                   	cdq    
c001b27d:	c3                   	ret    

c001b27e <Sys::getVGAPtr(regs*)>:
c001b27e:	56                   	push   esi
c001b27f:	53                   	push   ebx
c001b280:	83 ec 10             	sub    esp,0x10
c001b283:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b287:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b28a:	e8 ef 31 00 00       	call   c001e47e <Thr::processFromPID(int)>
c001b28f:	83 c4 10             	add    esp,0x10
c001b292:	89 c1                	mov    ecx,eax
c001b294:	b8 01 00 00 00       	mov    eax,0x1
c001b299:	85 c9                	test   ecx,ecx
c001b29b:	74 5d                	je     c001b2fa <Sys::getVGAPtr(regs*)+0x7c>
c001b29d:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b2a3:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c001b2a7:	74 0c                	je     c001b2b5 <Sys::getVGAPtr(regs*)+0x37>
c001b2a9:	83 ec 0c             	sub    esp,0xc
c001b2ac:	53                   	push   ebx
c001b2ad:	e8 64 59 ff ff       	call   c0010c16 <setActiveTerminal(VgaText*)>
c001b2b2:	83 c4 10             	add    esp,0x10
c001b2b5:	81 c3 82 00 00 00    	add    ebx,0x82
c001b2bb:	50                   	push   eax
c001b2bc:	68 a0 0f 00 00       	push   0xfa0
c001b2c1:	ff 73 8a             	push   DWORD PTR [ebx-0x76]
c001b2c4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b2c7:	e8 80 54 fe ff       	call   c000074c <memcpy>
c001b2cc:	8b 53 92             	mov    edx,DWORD PTR [ebx-0x6e]
c001b2cf:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b2d2:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b2d8:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b2db:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b2de:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b2e4:	58                   	pop    eax
c001b2e5:	5a                   	pop    edx
c001b2e6:	53                   	push   ebx
c001b2e7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b2ea:	05 a8 0f 00 00       	add    eax,0xfa8
c001b2ef:	50                   	push   eax
c001b2f0:	e8 47 55 fe ff       	call   c000083c <strcpy>
c001b2f5:	83 c4 10             	add    esp,0x10
c001b2f8:	31 c0                	xor    eax,eax
c001b2fa:	59                   	pop    ecx
c001b2fb:	31 d2                	xor    edx,edx
c001b2fd:	5b                   	pop    ebx
c001b2fe:	5e                   	pop    esi
c001b2ff:	c3                   	ret    

c001b300 <Sys::loadDLL(regs*)>:
c001b300:	56                   	push   esi
c001b301:	53                   	push   ebx
c001b302:	31 d2                	xor    edx,edx
c001b304:	51                   	push   ecx
c001b305:	b8 01 00 00 00       	mov    eax,0x1
c001b30a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b30e:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b312:	0f 84 8c 00 00 00    	je     c001b3a4 <Sys::loadDLL(regs*)+0xa4>
c001b318:	83 ec 0c             	sub    esp,0xc
c001b31b:	68 14 01 00 00       	push   0x114
c001b320:	e8 26 45 ff ff       	call   c000f84b <malloc>
c001b325:	83 c4 0c             	add    esp,0xc
c001b328:	89 c3                	mov    ebx,eax
c001b32a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b32f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b332:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b335:	53                   	push   ebx
c001b336:	e8 e7 7f ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001b33b:	83 c4 10             	add    esp,0x10
c001b33e:	31 d2                	xor    edx,edx
c001b340:	b8 02 00 00 00       	mov    eax,0x2
c001b345:	85 db                	test   ebx,ebx
c001b347:	74 5b                	je     c001b3a4 <Sys::loadDLL(regs*)+0xa4>
c001b349:	83 ec 0c             	sub    esp,0xc
c001b34c:	53                   	push   ebx
c001b34d:	e8 a2 82 ff ff       	call   c00135f4 <File::exists()>
c001b352:	83 c4 10             	add    esp,0x10
c001b355:	84 c0                	test   al,al
c001b357:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b359:	75 11                	jne    c001b36c <Sys::loadDLL(regs*)+0x6c>
c001b35b:	83 ec 0c             	sub    esp,0xc
c001b35e:	53                   	push   ebx
c001b35f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b362:	83 c4 10             	add    esp,0x10
c001b365:	b8 03 00 00 00       	mov    eax,0x3
c001b36a:	eb 36                	jmp    c001b3a2 <Sys::loadDLL(regs*)+0xa2>
c001b36c:	83 ec 0c             	sub    esp,0xc
c001b36f:	53                   	push   ebx
c001b370:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b373:	58                   	pop    eax
c001b374:	5a                   	pop    edx
c001b375:	6a 00                	push   0x0
c001b377:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b37a:	e8 06 24 00 00       	call   c001d785 <Thr::loadDLL(char const*, bool)>
c001b37f:	83 c4 10             	add    esp,0x10
c001b382:	89 c1                	mov    ecx,eax
c001b384:	31 d2                	xor    edx,edx
c001b386:	b8 04 00 00 00       	mov    eax,0x4
c001b38b:	85 c9                	test   ecx,ecx
c001b38d:	74 15                	je     c001b3a4 <Sys::loadDLL(regs*)+0xa4>
c001b38f:	53                   	push   ebx
c001b390:	53                   	push   ebx
c001b391:	ff 35 28 e7 02 c0    	push   DWORD PTR ds:0xc002e728
c001b397:	51                   	push   ecx
c001b398:	e8 1c 26 00 00       	call   c001d9b9 <Thr::executeDLL(unsigned long, void*)>
c001b39d:	83 c4 10             	add    esp,0x10
c001b3a0:	31 c0                	xor    eax,eax
c001b3a2:	31 d2                	xor    edx,edx
c001b3a4:	59                   	pop    ecx
c001b3a5:	5b                   	pop    ebx
c001b3a6:	5e                   	pop    esi
c001b3a7:	c3                   	ret    

c001b3a8 <Sys::read(regs*)>:
c001b3a8:	57                   	push   edi
c001b3a9:	56                   	push   esi
c001b3aa:	53                   	push   ebx
c001b3ab:	83 ec 10             	sub    esp,0x10
c001b3ae:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b3b2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3b5:	83 f8 02             	cmp    eax,0x2
c001b3b8:	77 10                	ja     c001b3ca <Sys::read(regs*)+0x22>
c001b3ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3bf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3c2:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b3c8:	eb 0e                	jmp    c001b3d8 <Sys::read(regs*)+0x30>
c001b3ca:	83 ec 0c             	sub    esp,0xc
c001b3cd:	50                   	push   eax
c001b3ce:	e8 c6 64 ff ff       	call   c0011899 <getFromFileDescriptor(int)>
c001b3d3:	83 c4 10             	add    esp,0x10
c001b3d6:	89 c1                	mov    ecx,eax
c001b3d8:	83 c8 ff             	or     eax,0xffffffff
c001b3db:	85 c9                	test   ecx,ecx
c001b3dd:	89 c2                	mov    edx,eax
c001b3df:	74 28                	je     c001b409 <Sys::read(regs*)+0x61>
c001b3e1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b3e9:	31 ff                	xor    edi,edi
c001b3eb:	83 ec 0c             	sub    esp,0xc
c001b3ee:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b3f0:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b3f4:	52                   	push   edx
c001b3f5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3f8:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b3fb:	57                   	push   edi
c001b3fc:	56                   	push   esi
c001b3fd:	51                   	push   ecx
c001b3fe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b401:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b405:	83 c4 20             	add    esp,0x20
c001b408:	99                   	cdq    
c001b409:	83 c4 10             	add    esp,0x10
c001b40c:	5b                   	pop    ebx
c001b40d:	5e                   	pop    esi
c001b40e:	5f                   	pop    edi
c001b40f:	c3                   	ret    

c001b410 <Sys::sbrk(regs*)>:
c001b410:	56                   	push   esi
c001b411:	53                   	push   ebx
c001b412:	50                   	push   eax
c001b413:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b418:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b41c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b41f:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b422:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b428:	85 db                	test   ebx,ebx
c001b42a:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b42d:	74 02                	je     c001b431 <Sys::sbrk(regs*)+0x21>
c001b42f:	79 06                	jns    c001b437 <Sys::sbrk(regs*)+0x27>
c001b431:	89 f0                	mov    eax,esi
c001b433:	31 d2                	xor    edx,edx
c001b435:	eb 2a                	jmp    c001b461 <Sys::sbrk(regs*)+0x51>
c001b437:	83 c8 ff             	or     eax,0xffffffff
c001b43a:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b440:	89 c2                	mov    edx,eax
c001b442:	77 1d                	ja     c001b461 <Sys::sbrk(regs*)+0x51>
c001b444:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b44a:	50                   	push   eax
c001b44b:	c1 ea 0c             	shr    edx,0xc
c001b44e:	68 07 0c 00 00       	push   0xc07
c001b453:	52                   	push   edx
c001b454:	51                   	push   ecx
c001b455:	e8 c2 6e ff ff       	call   c001231c <VAS::allocatePages(int, int)>
c001b45a:	89 f0                	mov    eax,esi
c001b45c:	31 d2                	xor    edx,edx
c001b45e:	83 c4 10             	add    esp,0x10
c001b461:	59                   	pop    ecx
c001b462:	5b                   	pop    ebx
c001b463:	5e                   	pop    esi
c001b464:	c3                   	ret    

c001b465 <Sys::setCwd(regs*)>:
c001b465:	83 ec 14             	sub    esp,0x14
c001b468:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b46c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b46f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b474:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b477:	e8 17 82 ff ff       	call   c0013693 <Fs::setcwd(Process*, char*)>
c001b47c:	83 c4 1c             	add    esp,0x1c
c001b47f:	99                   	cdq    
c001b480:	c3                   	ret    

c001b481 <Sys::setTime(regs*)>:
c001b481:	55                   	push   ebp
c001b482:	31 d2                	xor    edx,edx
c001b484:	57                   	push   edi
c001b485:	bf 18 00 00 00       	mov    edi,0x18
c001b48a:	56                   	push   esi
c001b48b:	53                   	push   ebx
c001b48c:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b491:	83 ec 30             	sub    esp,0x30
c001b494:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b498:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b49b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b49e:	f7 f3                	div    ebx
c001b4a0:	89 d6                	mov    esi,edx
c001b4a2:	31 d2                	xor    edx,edx
c001b4a4:	f7 f3                	div    ebx
c001b4a6:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b4a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b4ad:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b4b2:	31 d2                	xor    edx,edx
c001b4b4:	f7 f3                	div    ebx
c001b4b6:	31 d2                	xor    edx,edx
c001b4b8:	bb 0c 00 00 00       	mov    ebx,0xc
c001b4bd:	f7 f7                	div    edi
c001b4bf:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b4c2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b4c6:	0f b7 cd             	movzx  ecx,bp
c001b4c9:	56                   	push   esi
c001b4ca:	89 c7                	mov    edi,eax
c001b4cc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b4d0:	c1 e6 10             	shl    esi,0x10
c001b4d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4d7:	83 e7 1f             	and    edi,0x1f
c001b4da:	51                   	push   ecx
c001b4db:	47                   	inc    edi
c001b4dc:	c1 e8 05             	shr    eax,0x5
c001b4df:	31 d2                	xor    edx,edx
c001b4e1:	f7 f3                	div    ebx
c001b4e3:	31 db                	xor    ebx,ebx
c001b4e5:	52                   	push   edx
c001b4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b4ea:	57                   	push   edi
c001b4eb:	68 f1 bf 02 c0       	push   0xc002bff1
c001b4f0:	e8 ce 78 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001b4f5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b4f9:	89 f8                	mov    eax,edi
c001b4fb:	31 c9                	xor    ecx,ecx
c001b4fd:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b501:	88 c1                	mov    cl,al
c001b503:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b509:	88 d5                	mov    ch,dl
c001b50b:	c1 e0 10             	shl    eax,0x10
c001b50e:	0f b7 d1             	movzx  edx,cx
c001b511:	09 c2                	or     edx,eax
c001b513:	89 d8                	mov    eax,ebx
c001b515:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b51a:	09 f0                	or     eax,esi
c001b51c:	89 c3                	mov    ebx,eax
c001b51e:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b522:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b526:	83 c4 18             	add    esp,0x18
c001b529:	53                   	push   ebx
c001b52a:	52                   	push   edx
c001b52b:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b52f:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b533:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b537:	e8 71 88 ff ff       	call   c0013dad <datetimeToSeconds(datetime_t)>
c001b53c:	83 c4 0c             	add    esp,0xc
c001b53f:	52                   	push   edx
c001b540:	50                   	push   eax
c001b541:	56                   	push   esi
c001b542:	e8 ed 89 ff ff       	call   c0013f34 <secondsToDatetime(unsigned long long)>
c001b547:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b54b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b54f:	51                   	push   ecx
c001b550:	89 d6                	mov    esi,edx
c001b552:	51                   	push   ecx
c001b553:	c1 ee 10             	shr    esi,0x10
c001b556:	89 f3                	mov    ebx,esi
c001b558:	0f b6 f3             	movzx  esi,bl
c001b55b:	56                   	push   esi
c001b55c:	0f b6 f6             	movzx  esi,dh
c001b55f:	0f b6 d2             	movzx  edx,dl
c001b562:	56                   	push   esi
c001b563:	52                   	push   edx
c001b564:	89 c2                	mov    edx,eax
c001b566:	c1 ea 10             	shr    edx,0x10
c001b569:	52                   	push   edx
c001b56a:	0f b6 d4             	movzx  edx,ah
c001b56d:	0f b6 c0             	movzx  eax,al
c001b570:	52                   	push   edx
c001b571:	50                   	push   eax
c001b572:	68 0d c0 02 c0       	push   0xc002c00d
c001b577:	e8 47 78 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001b57c:	83 c4 2c             	add    esp,0x2c
c001b57f:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c001b584:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b588:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b58c:	53                   	push   ebx
c001b58d:	51                   	push   ecx
c001b58e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b594:	e8 3b 89 ff ff       	call   c0013ed4 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b599:	83 f0 01             	xor    eax,0x1
c001b59c:	31 d2                	xor    edx,edx
c001b59e:	0f b6 c0             	movzx  eax,al
c001b5a1:	83 c4 3c             	add    esp,0x3c
c001b5a4:	5b                   	pop    ebx
c001b5a5:	5e                   	pop    esi
c001b5a6:	5f                   	pop    edi
c001b5a7:	5d                   	pop    ebp
c001b5a8:	c3                   	ret    

c001b5a9 <Sys::timezone(regs*)>:
c001b5a9:	53                   	push   ebx
c001b5aa:	83 ec 08             	sub    esp,0x8
c001b5ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5b1:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b5b5:	75 17                	jne    c001b5ce <Sys::timezone(regs*)+0x25>
c001b5b7:	83 ec 0c             	sub    esp,0xc
c001b5ba:	68 29 c0 02 c0       	push   0xc002c029
c001b5bf:	e8 ff 77 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001b5c4:	83 c8 ff             	or     eax,0xffffffff
c001b5c7:	83 c4 10             	add    esp,0x10
c001b5ca:	89 c2                	mov    edx,eax
c001b5cc:	eb 20                	jmp    c001b5ee <Sys::timezone(regs*)+0x45>
c001b5ce:	83 ec 0c             	sub    esp,0xc
c001b5d1:	68 61 c0 02 c0       	push   0xc002c061
c001b5d6:	e8 e8 77 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001b5db:	58                   	pop    eax
c001b5dc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b5df:	e8 52 86 ff ff       	call   c0013c36 <User::loadClockSettings(int)>
c001b5e4:	83 c4 10             	add    esp,0x10
c001b5e7:	b8 01 00 00 00       	mov    eax,0x1
c001b5ec:	31 d2                	xor    edx,edx
c001b5ee:	83 c4 08             	add    esp,0x8
c001b5f1:	5b                   	pop    ebx
c001b5f2:	c3                   	ret    

c001b5f3 <Sys::write(regs*)>:
c001b5f3:	57                   	push   edi
c001b5f4:	56                   	push   esi
c001b5f5:	53                   	push   ebx
c001b5f6:	83 ec 10             	sub    esp,0x10
c001b5f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b5fd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b600:	83 f8 02             	cmp    eax,0x2
c001b603:	77 10                	ja     c001b615 <Sys::write(regs*)+0x22>
c001b605:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b60a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b60d:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b613:	eb 0e                	jmp    c001b623 <Sys::write(regs*)+0x30>
c001b615:	83 ec 0c             	sub    esp,0xc
c001b618:	50                   	push   eax
c001b619:	e8 7b 62 ff ff       	call   c0011899 <getFromFileDescriptor(int)>
c001b61e:	83 c4 10             	add    esp,0x10
c001b621:	89 c1                	mov    ecx,eax
c001b623:	83 c8 ff             	or     eax,0xffffffff
c001b626:	85 c9                	test   ecx,ecx
c001b628:	89 c2                	mov    edx,eax
c001b62a:	74 28                	je     c001b654 <Sys::write(regs*)+0x61>
c001b62c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b634:	31 ff                	xor    edi,edi
c001b636:	83 ec 0c             	sub    esp,0xc
c001b639:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b63b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b63f:	52                   	push   edx
c001b640:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b643:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b646:	57                   	push   edi
c001b647:	56                   	push   esi
c001b648:	51                   	push   ecx
c001b649:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b64c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b650:	83 c4 20             	add    esp,0x20
c001b653:	99                   	cdq    
c001b654:	83 c4 10             	add    esp,0x10
c001b657:	5b                   	pop    ebx
c001b658:	5e                   	pop    esi
c001b659:	5f                   	pop    edi
c001b65a:	c3                   	ret    

c001b65b <Sys::wsbe(regs*)>:
c001b65b:	57                   	push   edi
c001b65c:	b9 0b 00 00 00       	mov    ecx,0xb
c001b661:	56                   	push   esi
c001b662:	be a0 c0 02 c0       	mov    esi,0xc002c0a0
c001b667:	53                   	push   ebx
c001b668:	83 ec 30             	sub    esp,0x30
c001b66b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b66f:	fc                   	cld    
c001b670:	83 ec 0c             	sub    esp,0xc
c001b673:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b675:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b679:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b67e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b681:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b687:	8b 06                	mov    eax,DWORD PTR [esi]
c001b689:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b68c:	57                   	push   edi
c001b68d:	e8 0a 51 fe ff       	call   c000079c <strlen>
c001b692:	5a                   	pop    edx
c001b693:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b697:	52                   	push   edx
c001b698:	31 d2                	xor    edx,edx
c001b69a:	57                   	push   edi
c001b69b:	52                   	push   edx
c001b69c:	50                   	push   eax
c001b69d:	56                   	push   esi
c001b69e:	ff d3                	call   ebx
c001b6a0:	83 c4 14             	add    esp,0x14
c001b6a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b6a7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b6aa:	e8 93 32 00 00       	call   c001e942 <terminateTask(int)>
c001b6af:	83 c4 40             	add    esp,0x40
c001b6b2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b6b7:	5b                   	pop    ebx
c001b6b8:	31 d2                	xor    edx,edx
c001b6ba:	5e                   	pop    esi
c001b6bb:	5f                   	pop    edi
c001b6bc:	c3                   	ret    

c001b6bd <Sys::yield(regs*)>:
c001b6bd:	57                   	push   edi
c001b6be:	56                   	push   esi
c001b6bf:	53                   	push   ebx
c001b6c0:	e8 67 27 00 00       	call   c001de2c <lockScheduler()>
c001b6c5:	e8 d8 2a 00 00       	call   c001e1a2 <schedule()>
c001b6ca:	e8 5f 27 00 00       	call   c001de2e <unlockScheduler()>
c001b6cf:	8b 35 b0 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002edb0
c001b6d5:	8b 3d b4 ed 02 c0    	mov    edi,DWORD PTR ds:0xc002edb4
c001b6db:	89 f0                	mov    eax,esi
c001b6dd:	89 fb                	mov    ebx,edi
c001b6df:	89 f1                	mov    ecx,esi
c001b6e1:	c1 e0 07             	shl    eax,0x7
c001b6e4:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b6e8:	25 80 30 0f 00       	and    eax,0xf3080
c001b6ed:	c1 eb 17             	shr    ebx,0x17
c001b6f0:	31 c8                	xor    eax,ecx
c001b6f2:	89 da                	mov    edx,ebx
c001b6f4:	5b                   	pop    ebx
c001b6f5:	5e                   	pop    esi
c001b6f6:	5f                   	pop    edi
c001b6f7:	c3                   	ret    

c001b6f8 <sysCallSeekDir(regs*)>:
c001b6f8:	31 c0                	xor    eax,eax
c001b6fa:	31 d2                	xor    edx,edx
c001b6fc:	c3                   	ret    

c001b6fd <sysCallTellDir(regs*)>:
c001b6fd:	31 c0                	xor    eax,eax
c001b6ff:	31 d2                	xor    edx,edx
c001b701:	c3                   	ret    

c001b702 <sysCallVerify(regs*)>:
c001b702:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b706:	31 d2                	xor    edx,edx
c001b708:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b70b:	c3                   	ret    

c001b70c <sysFormatDisk(regs*)>:
c001b70c:	56                   	push   esi
c001b70d:	53                   	push   ebx
c001b70e:	53                   	push   ebx
c001b70f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b713:	8b 1d b4 e8 02 c0    	mov    ebx,DWORD PTR ds:0xc002e8b4
c001b719:	eb 25                	jmp    c001b740 <sysFormatDisk(regs*)+0x34>
c001b71b:	83 ec 0c             	sub    esp,0xc
c001b71e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b721:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b723:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b726:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b729:	50                   	push   eax
c001b72a:	ff 34 85 40 ed 02 c0 	push   DWORD PTR [eax*4-0x3ffd12c0]
c001b731:	53                   	push   ebx
c001b732:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b735:	83 c4 20             	add    esp,0x20
c001b738:	83 f8 08             	cmp    eax,0x8
c001b73b:	75 12                	jne    c001b74f <sysFormatDisk(regs*)+0x43>
c001b73d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b740:	85 db                	test   ebx,ebx
c001b742:	75 d7                	jne    c001b71b <sysFormatDisk(regs*)+0xf>
c001b744:	59                   	pop    ecx
c001b745:	b8 03 00 00 00       	mov    eax,0x3
c001b74a:	31 d2                	xor    edx,edx
c001b74c:	5b                   	pop    ebx
c001b74d:	5e                   	pop    esi
c001b74e:	c3                   	ret    
c001b74f:	85 c0                	test   eax,eax
c001b751:	74 1b                	je     c001b76e <sysFormatDisk(regs*)+0x62>
c001b753:	83 f8 09             	cmp    eax,0x9
c001b756:	74 0b                	je     c001b763 <sysFormatDisk(regs*)+0x57>
c001b758:	59                   	pop    ecx
c001b759:	b8 02 00 00 00       	mov    eax,0x2
c001b75e:	31 d2                	xor    edx,edx
c001b760:	5b                   	pop    ebx
c001b761:	5e                   	pop    esi
c001b762:	c3                   	ret    
c001b763:	59                   	pop    ecx
c001b764:	b8 01 00 00 00       	mov    eax,0x1
c001b769:	31 d2                	xor    edx,edx
c001b76b:	5b                   	pop    ebx
c001b76c:	5e                   	pop    esi
c001b76d:	c3                   	ret    
c001b76e:	59                   	pop    ecx
c001b76f:	31 c0                	xor    eax,eax
c001b771:	31 d2                	xor    edx,edx
c001b773:	5b                   	pop    ebx
c001b774:	5e                   	pop    esi
c001b775:	c3                   	ret    

c001b776 <sysSetDiskVolumeLabel(regs*)>:
c001b776:	56                   	push   esi
c001b777:	53                   	push   ebx
c001b778:	53                   	push   ebx
c001b779:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b77d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b780:	83 f8 19             	cmp    eax,0x19
c001b783:	77 29                	ja     c001b7ae <sysSetDiskVolumeLabel(regs*)+0x38>
c001b785:	8b 0c 85 40 ed 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd12c0]
c001b78c:	85 c9                	test   ecx,ecx
c001b78e:	74 1e                	je     c001b7ae <sysSetDiskVolumeLabel(regs*)+0x38>
c001b790:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b793:	85 d2                	test   edx,edx
c001b795:	74 17                	je     c001b7ae <sysSetDiskVolumeLabel(regs*)+0x38>
c001b797:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b79d:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b79f:	52                   	push   edx
c001b7a0:	50                   	push   eax
c001b7a1:	51                   	push   ecx
c001b7a2:	53                   	push   ebx
c001b7a3:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b7a6:	83 c4 10             	add    esp,0x10
c001b7a9:	99                   	cdq    
c001b7aa:	59                   	pop    ecx
c001b7ab:	5b                   	pop    ebx
c001b7ac:	5e                   	pop    esi
c001b7ad:	c3                   	ret    
c001b7ae:	59                   	pop    ecx
c001b7af:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7b4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7b9:	5b                   	pop    ebx
c001b7ba:	5e                   	pop    esi
c001b7bb:	c3                   	ret    

c001b7bc <sysGetDiskVolumeLabel(regs*)>:
c001b7bc:	57                   	push   edi
c001b7bd:	56                   	push   esi
c001b7be:	53                   	push   ebx
c001b7bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7c3:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b7c6:	83 fa 19             	cmp    edx,0x19
c001b7c9:	77 34                	ja     c001b7ff <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7cb:	8b 0c 95 40 ed 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd12c0]
c001b7d2:	85 c9                	test   ecx,ecx
c001b7d4:	74 29                	je     c001b7ff <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7d6:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b7d9:	85 db                	test   ebx,ebx
c001b7db:	74 22                	je     c001b7ff <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7dd:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b7e0:	85 c0                	test   eax,eax
c001b7e2:	74 1b                	je     c001b7ff <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7e4:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b7ea:	83 ec 0c             	sub    esp,0xc
c001b7ed:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b7ef:	50                   	push   eax
c001b7f0:	53                   	push   ebx
c001b7f1:	52                   	push   edx
c001b7f2:	51                   	push   ecx
c001b7f3:	56                   	push   esi
c001b7f4:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b7f7:	83 c4 20             	add    esp,0x20
c001b7fa:	99                   	cdq    
c001b7fb:	5b                   	pop    ebx
c001b7fc:	5e                   	pop    esi
c001b7fd:	5f                   	pop    edi
c001b7fe:	c3                   	ret    
c001b7ff:	5b                   	pop    ebx
c001b800:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b805:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b80a:	5e                   	pop    esi
c001b80b:	5f                   	pop    edi
c001b80c:	c3                   	ret    

c001b80d <sysShutdown(regs*)>:
c001b80d:	83 ec 0c             	sub    esp,0xc
c001b810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b814:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b817:	85 c0                	test   eax,eax
c001b819:	74 18                	je     c001b833 <sysShutdown(regs*)+0x26>
c001b81b:	83 f8 01             	cmp    eax,0x1
c001b81e:	74 38                	je     c001b858 <sysShutdown(regs*)+0x4b>
c001b820:	83 f8 02             	cmp    eax,0x2
c001b823:	74 24                	je     c001b849 <sysShutdown(regs*)+0x3c>
c001b825:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b82a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b82f:	83 c4 0c             	add    esp,0xc
c001b832:	c3                   	ret    
c001b833:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c001b838:	8b 10                	mov    edx,DWORD PTR [eax]
c001b83a:	6a 00                	push   0x0
c001b83c:	6a 00                	push   0x0
c001b83e:	6a 00                	push   0x0
c001b840:	50                   	push   eax
c001b841:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b844:	83 c4 10             	add    esp,0x10
c001b847:	eb dc                	jmp    c001b825 <sysShutdown(regs*)+0x18>
c001b849:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c001b84e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b850:	6a 00                	push   0x0
c001b852:	6a 00                	push   0x0
c001b854:	6a 01                	push   0x1
c001b856:	eb e8                	jmp    c001b840 <sysShutdown(regs*)+0x33>
c001b858:	a1 e0 0d 03 c0       	mov    eax,ds:0xc0030de0
c001b85d:	85 c0                	test   eax,eax
c001b85f:	74 02                	je     c001b863 <sysShutdown(regs*)+0x56>
c001b861:	ff d0                	call   eax
c001b863:	31 c0                	xor    eax,eax
c001b865:	31 d2                	xor    edx,edx
c001b867:	83 c4 0c             	add    esp,0xc
c001b86a:	c3                   	ret    

c001b86b <sysCallRealpath(regs*)>:
c001b86b:	83 ec 0c             	sub    esp,0xc
c001b86e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b872:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b875:	85 d2                	test   edx,edx
c001b877:	74 07                	je     c001b880 <sysCallRealpath(regs*)+0x15>
c001b879:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b87c:	85 c0                	test   eax,eax
c001b87e:	75 0b                	jne    c001b88b <sysCallRealpath(regs*)+0x20>
c001b880:	b8 01 00 00 00       	mov    eax,0x1
c001b885:	31 d2                	xor    edx,edx
c001b887:	83 c4 0c             	add    esp,0xc
c001b88a:	c3                   	ret    
c001b88b:	51                   	push   ecx
c001b88c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b892:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b895:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b89b:	51                   	push   ecx
c001b89c:	52                   	push   edx
c001b89d:	50                   	push   eax
c001b89e:	e8 d5 78 ff ff       	call   c0013178 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b8a3:	83 c4 10             	add    esp,0x10
c001b8a6:	31 c0                	xor    eax,eax
c001b8a8:	31 d2                	xor    edx,edx
c001b8aa:	83 c4 0c             	add    esp,0xc
c001b8ad:	c3                   	ret    

c001b8ae <sysCallGetArgc(regs*)>:
c001b8ae:	83 ec 14             	sub    esp,0x14
c001b8b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8b9:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b8bf:	68 cc c0 02 c0       	push   0xc002c0cc
c001b8c4:	e8 fa 74 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001b8c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8ce:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8d1:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b8d7:	83 c4 1c             	add    esp,0x1c
c001b8da:	99                   	cdq    
c001b8db:	c3                   	ret    

c001b8dc <sysCallReadDir(regs*)>:
c001b8dc:	53                   	push   ebx
c001b8dd:	83 ec 18             	sub    esp,0x18
c001b8e0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b8e4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b8e7:	83 f8 02             	cmp    eax,0x2
c001b8ea:	76 53                	jbe    c001b93f <sysCallReadDir(regs*)+0x63>
c001b8ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b8ef:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b8f5:	77 4f                	ja     c001b946 <sysCallReadDir(regs*)+0x6a>
c001b8f7:	83 ec 0c             	sub    esp,0xc
c001b8fa:	50                   	push   eax
c001b8fb:	e8 99 5f ff ff       	call   c0011899 <getFromFileDescriptor(int)>
c001b900:	83 c4 10             	add    esp,0x10
c001b903:	85 c0                	test   eax,eax
c001b905:	74 50                	je     c001b957 <sysCallReadDir(regs*)+0x7b>
c001b907:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b90f:	83 ec 0c             	sub    esp,0xc
c001b912:	8b 10                	mov    edx,DWORD PTR [eax]
c001b914:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b918:	51                   	push   ecx
c001b919:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b91c:	6a 00                	push   0x0
c001b91e:	68 10 01 00 00       	push   0x110
c001b923:	50                   	push   eax
c001b924:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b927:	83 c4 20             	add    esp,0x20
c001b92a:	85 c0                	test   eax,eax
c001b92c:	74 38                	je     c001b966 <sysCallReadDir(regs*)+0x8a>
c001b92e:	83 f8 07             	cmp    eax,0x7
c001b931:	74 0c                	je     c001b93f <sysCallReadDir(regs*)+0x63>
c001b933:	b8 02 00 00 00       	mov    eax,0x2
c001b938:	31 d2                	xor    edx,edx
c001b93a:	83 c4 18             	add    esp,0x18
c001b93d:	5b                   	pop    ebx
c001b93e:	c3                   	ret    
c001b93f:	b8 01 00 00 00       	mov    eax,0x1
c001b944:	eb f2                	jmp    c001b938 <sysCallReadDir(regs*)+0x5c>
c001b946:	83 ec 08             	sub    esp,0x8
c001b949:	52                   	push   edx
c001b94a:	68 ec c1 02 c0       	push   0xc002c1ec
c001b94f:	e8 6f 74 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001b954:	83 c4 10             	add    esp,0x10
c001b957:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b95c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b961:	83 c4 18             	add    esp,0x18
c001b964:	5b                   	pop    ebx
c001b965:	c3                   	ret    
c001b966:	31 c0                	xor    eax,eax
c001b968:	eb ce                	jmp    c001b938 <sysCallReadDir(regs*)+0x5c>

c001b96a <sysCallIsATTY(regs*)>:
c001b96a:	83 ec 0c             	sub    esp,0xc
c001b96d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b971:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b974:	83 f8 02             	cmp    eax,0x2
c001b977:	76 07                	jbe    c001b980 <sysCallIsATTY(regs*)+0x16>
c001b979:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b97e:	75 26                	jne    c001b9a6 <sysCallIsATTY(regs*)+0x3c>
c001b980:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b985:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b988:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b98e:	85 c0                	test   eax,eax
c001b990:	74 24                	je     c001b9b6 <sysCallIsATTY(regs*)+0x4c>
c001b992:	83 ec 0c             	sub    esp,0xc
c001b995:	8b 10                	mov    edx,DWORD PTR [eax]
c001b997:	50                   	push   eax
c001b998:	ff 12                	call   DWORD PTR [edx]
c001b99a:	31 d2                	xor    edx,edx
c001b99c:	0f b6 c0             	movzx  eax,al
c001b99f:	83 c4 10             	add    esp,0x10
c001b9a2:	83 c4 0c             	add    esp,0xc
c001b9a5:	c3                   	ret    
c001b9a6:	83 ec 0c             	sub    esp,0xc
c001b9a9:	50                   	push   eax
c001b9aa:	e8 ea 5e ff ff       	call   c0011899 <getFromFileDescriptor(int)>
c001b9af:	83 c4 10             	add    esp,0x10
c001b9b2:	85 c0                	test   eax,eax
c001b9b4:	75 dc                	jne    c001b992 <sysCallIsATTY(regs*)+0x28>
c001b9b6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9bb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9c0:	83 c4 0c             	add    esp,0xc
c001b9c3:	c3                   	ret    

c001b9c4 <sysCallSeek(regs*)>:
c001b9c4:	53                   	push   ebx
c001b9c5:	83 ec 08             	sub    esp,0x8
c001b9c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9cc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9cf:	83 f8 02             	cmp    eax,0x2
c001b9d2:	76 4a                	jbe    c001ba1e <sysCallSeek(regs*)+0x5a>
c001b9d4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b9d9:	77 32                	ja     c001ba0d <sysCallSeek(regs*)+0x49>
c001b9db:	83 ec 0c             	sub    esp,0xc
c001b9de:	50                   	push   eax
c001b9df:	e8 b5 5e ff ff       	call   c0011899 <getFromFileDescriptor(int)>
c001b9e4:	83 c4 0c             	add    esp,0xc
c001b9e7:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b9ea:	31 db                	xor    ebx,ebx
c001b9ec:	53                   	push   ebx
c001b9ed:	51                   	push   ecx
c001b9ee:	50                   	push   eax
c001b9ef:	e8 50 7a ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001b9f4:	83 c4 10             	add    esp,0x10
c001b9f7:	85 c0                	test   eax,eax
c001b9f9:	0f 95 c0             	setne  al
c001b9fc:	31 d2                	xor    edx,edx
c001b9fe:	0f b6 c0             	movzx  eax,al
c001ba01:	f7 d8                	neg    eax
c001ba03:	83 d2 00             	adc    edx,0x0
c001ba06:	83 c4 08             	add    esp,0x8
c001ba09:	f7 da                	neg    edx
c001ba0b:	5b                   	pop    ebx
c001ba0c:	c3                   	ret    
c001ba0d:	83 ec 08             	sub    esp,0x8
c001ba10:	50                   	push   eax
c001ba11:	68 d7 c0 02 c0       	push   0xc002c0d7
c001ba16:	e8 a8 73 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001ba1b:	83 c4 10             	add    esp,0x10
c001ba1e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba23:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba28:	83 c4 08             	add    esp,0x8
c001ba2b:	5b                   	pop    ebx
c001ba2c:	c3                   	ret    

c001ba2d <sysCallTell(regs*)>:
c001ba2d:	53                   	push   ebx
c001ba2e:	83 ec 08             	sub    esp,0x8
c001ba31:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba35:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba38:	83 f8 02             	cmp    eax,0x2
c001ba3b:	76 5e                	jbe    c001ba9b <sysCallTell(regs*)+0x6e>
c001ba3d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba42:	77 2d                	ja     c001ba71 <sysCallTell(regs*)+0x44>
c001ba44:	83 ec 0c             	sub    esp,0xc
c001ba47:	50                   	push   eax
c001ba48:	e8 4c 5e ff ff       	call   c0011899 <getFromFileDescriptor(int)>
c001ba4d:	5a                   	pop    edx
c001ba4e:	59                   	pop    ecx
c001ba4f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba52:	50                   	push   eax
c001ba53:	e8 42 7a ff ff       	call   c001349a <File::tell(unsigned long long*)>
c001ba58:	83 c4 10             	add    esp,0x10
c001ba5b:	85 c0                	test   eax,eax
c001ba5d:	0f 95 c0             	setne  al
c001ba60:	31 d2                	xor    edx,edx
c001ba62:	0f b6 c0             	movzx  eax,al
c001ba65:	f7 d8                	neg    eax
c001ba67:	83 d2 00             	adc    edx,0x0
c001ba6a:	83 c4 08             	add    esp,0x8
c001ba6d:	f7 da                	neg    edx
c001ba6f:	5b                   	pop    ebx
c001ba70:	c3                   	ret    
c001ba71:	83 ec 08             	sub    esp,0x8
c001ba74:	50                   	push   eax
c001ba75:	68 f1 c0 02 c0       	push   0xc002c0f1
c001ba7a:	e8 44 73 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001ba7f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ba82:	83 c4 10             	add    esp,0x10
c001ba85:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba8b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba92:	31 d2                	xor    edx,edx
c001ba94:	31 c0                	xor    eax,eax
c001ba96:	83 c4 08             	add    esp,0x8
c001ba99:	5b                   	pop    ebx
c001ba9a:	c3                   	ret    
c001ba9b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001baa0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001baa5:	83 c4 08             	add    esp,0x8
c001baa8:	5b                   	pop    ebx
c001baa9:	c3                   	ret    

c001baaa <sysCallSize(regs*)>:
c001baaa:	53                   	push   ebx
c001baab:	83 ec 18             	sub    esp,0x18
c001baae:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bab2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bab5:	83 f8 02             	cmp    eax,0x2
c001bab8:	76 64                	jbe    c001bb1e <sysCallSize(regs*)+0x74>
c001baba:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001babf:	77 33                	ja     c001baf4 <sysCallSize(regs*)+0x4a>
c001bac1:	83 ec 0c             	sub    esp,0xc
c001bac4:	50                   	push   eax
c001bac5:	e8 cf 5d ff ff       	call   c0011899 <getFromFileDescriptor(int)>
c001baca:	83 c4 0c             	add    esp,0xc
c001bacd:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bad1:	52                   	push   edx
c001bad2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bad5:	50                   	push   eax
c001bad6:	e8 57 7b ff ff       	call   c0013632 <File::stat(unsigned long long*, bool*)>
c001badb:	83 c4 10             	add    esp,0x10
c001bade:	85 c0                	test   eax,eax
c001bae0:	0f 95 c0             	setne  al
c001bae3:	31 d2                	xor    edx,edx
c001bae5:	0f b6 c0             	movzx  eax,al
c001bae8:	f7 d8                	neg    eax
c001baea:	83 d2 00             	adc    edx,0x0
c001baed:	83 c4 18             	add    esp,0x18
c001baf0:	f7 da                	neg    edx
c001baf2:	5b                   	pop    ebx
c001baf3:	c3                   	ret    
c001baf4:	83 ec 08             	sub    esp,0x8
c001baf7:	50                   	push   eax
c001baf8:	68 0b c1 02 c0       	push   0xc002c10b
c001bafd:	e8 c1 72 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001bb02:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb05:	83 c4 10             	add    esp,0x10
c001bb08:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb0e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb15:	31 d2                	xor    edx,edx
c001bb17:	31 c0                	xor    eax,eax
c001bb19:	83 c4 18             	add    esp,0x18
c001bb1c:	5b                   	pop    ebx
c001bb1d:	c3                   	ret    
c001bb1e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb23:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb28:	83 c4 18             	add    esp,0x18
c001bb2b:	5b                   	pop    ebx
c001bb2c:	c3                   	ret    

c001bb2d <sysCallSizeFromFilename(regs*)>:
c001bb2d:	57                   	push   edi
c001bb2e:	56                   	push   esi
c001bb2f:	53                   	push   ebx
c001bb30:	83 ec 20             	sub    esp,0x20
c001bb33:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb37:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bb3a:	83 fb 02             	cmp    ebx,0x2
c001bb3d:	0f 86 99 00 00 00    	jbe    c001bbdc <sysCallSizeFromFilename(regs*)+0xaf>
c001bb43:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bb49:	77 65                	ja     c001bbb0 <sysCallSizeFromFilename(regs*)+0x83>
c001bb4b:	83 ec 0c             	sub    esp,0xc
c001bb4e:	68 14 01 00 00       	push   0x114
c001bb53:	e8 f3 3c ff ff       	call   c000f84b <malloc>
c001bb58:	83 c4 0c             	add    esp,0xc
c001bb5b:	89 c6                	mov    esi,eax
c001bb5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb62:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb65:	53                   	push   ebx
c001bb66:	56                   	push   esi
c001bb67:	e8 b6 77 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001bb6c:	83 c4 0c             	add    esp,0xc
c001bb6f:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bb73:	50                   	push   eax
c001bb74:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bb77:	56                   	push   esi
c001bb78:	e8 b5 7a ff ff       	call   c0013632 <File::stat(unsigned long long*, bool*)>
c001bb7d:	83 c4 10             	add    esp,0x10
c001bb80:	85 f6                	test   esi,esi
c001bb82:	74 14                	je     c001bb98 <sysCallSizeFromFilename(regs*)+0x6b>
c001bb84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb88:	8b 16                	mov    edx,DWORD PTR [esi]
c001bb8a:	83 ec 0c             	sub    esp,0xc
c001bb8d:	56                   	push   esi
c001bb8e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb91:	83 c4 10             	add    esp,0x10
c001bb94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb98:	85 c0                	test   eax,eax
c001bb9a:	0f 95 c0             	setne  al
c001bb9d:	31 d2                	xor    edx,edx
c001bb9f:	0f b6 c0             	movzx  eax,al
c001bba2:	f7 d8                	neg    eax
c001bba4:	83 d2 00             	adc    edx,0x0
c001bba7:	83 c4 20             	add    esp,0x20
c001bbaa:	f7 da                	neg    edx
c001bbac:	5b                   	pop    ebx
c001bbad:	5e                   	pop    esi
c001bbae:	5f                   	pop    edi
c001bbaf:	c3                   	ret    
c001bbb0:	83 ec 08             	sub    esp,0x8
c001bbb3:	53                   	push   ebx
c001bbb4:	68 0b c1 02 c0       	push   0xc002c10b
c001bbb9:	e8 05 72 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001bbbe:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bbc1:	83 c4 10             	add    esp,0x10
c001bbc4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bbca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bbd1:	31 d2                	xor    edx,edx
c001bbd3:	83 c4 20             	add    esp,0x20
c001bbd6:	31 c0                	xor    eax,eax
c001bbd8:	5b                   	pop    ebx
c001bbd9:	5e                   	pop    esi
c001bbda:	5f                   	pop    edi
c001bbdb:	c3                   	ret    
c001bbdc:	83 c4 20             	add    esp,0x20
c001bbdf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbe4:	5b                   	pop    ebx
c001bbe5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbea:	5e                   	pop    esi
c001bbeb:	5f                   	pop    edi
c001bbec:	c3                   	ret    

c001bbed <sysCallClose(regs*)>:
c001bbed:	53                   	push   ebx
c001bbee:	83 ec 08             	sub    esp,0x8
c001bbf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbf5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bbf8:	83 f8 02             	cmp    eax,0x2
c001bbfb:	76 50                	jbe    c001bc4d <sysCallClose(regs*)+0x60>
c001bbfd:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bc02:	74 58                	je     c001bc5c <sysCallClose(regs*)+0x6f>
c001bc04:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc09:	74 60                	je     c001bc6b <sysCallClose(regs*)+0x7e>
c001bc0b:	77 2f                	ja     c001bc3c <sysCallClose(regs*)+0x4f>
c001bc0d:	83 ec 0c             	sub    esp,0xc
c001bc10:	50                   	push   eax
c001bc11:	e8 83 5c ff ff       	call   c0011899 <getFromFileDescriptor(int)>
c001bc16:	89 c3                	mov    ebx,eax
c001bc18:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc1b:	e8 c4 77 ff ff       	call   c00133e4 <File::close()>
c001bc20:	83 c4 10             	add    esp,0x10
c001bc23:	85 db                	test   ebx,ebx
c001bc25:	74 0c                	je     c001bc33 <sysCallClose(regs*)+0x46>
c001bc27:	83 ec 0c             	sub    esp,0xc
c001bc2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc2c:	53                   	push   ebx
c001bc2d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc30:	83 c4 10             	add    esp,0x10
c001bc33:	31 c0                	xor    eax,eax
c001bc35:	31 d2                	xor    edx,edx
c001bc37:	83 c4 08             	add    esp,0x8
c001bc3a:	5b                   	pop    ebx
c001bc3b:	c3                   	ret    
c001bc3c:	83 ec 08             	sub    esp,0x8
c001bc3f:	50                   	push   eax
c001bc40:	68 10 c2 02 c0       	push   0xc002c210
c001bc45:	e8 79 71 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001bc4a:	83 c4 10             	add    esp,0x10
c001bc4d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc52:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc57:	83 c4 08             	add    esp,0x8
c001bc5a:	5b                   	pop    ebx
c001bc5b:	c3                   	ret    
c001bc5c:	83 ec 0c             	sub    esp,0xc
c001bc5f:	68 26 c1 02 c0       	push   0xc002c126
c001bc64:	e8 5a 71 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001bc69:	eb c5                	jmp    c001bc30 <sysCallClose(regs*)+0x43>
c001bc6b:	83 ec 0c             	sub    esp,0xc
c001bc6e:	68 34 c1 02 c0       	push   0xc002c134
c001bc73:	eb ef                	jmp    c001bc64 <sysCallClose(regs*)+0x77>

c001bc75 <sysCallOpenDir(regs*)>:
c001bc75:	56                   	push   esi
c001bc76:	53                   	push   ebx
c001bc77:	53                   	push   ebx
c001bc78:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc7c:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bc7f:	85 f6                	test   esi,esi
c001bc81:	74 59                	je     c001bcdc <sysCallOpenDir(regs*)+0x67>
c001bc83:	83 ec 0c             	sub    esp,0xc
c001bc86:	68 14 01 00 00       	push   0x114
c001bc8b:	e8 bb 3b ff ff       	call   c000f84b <malloc>
c001bc90:	83 c4 0c             	add    esp,0xc
c001bc93:	89 c6                	mov    esi,eax
c001bc95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc9a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc9d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bca0:	56                   	push   esi
c001bca1:	e8 28 7b ff ff       	call   c00137ce <Directory::Directory(char const*, Process*)>
c001bca6:	83 c4 10             	add    esp,0x10
c001bca9:	85 f6                	test   esi,esi
c001bcab:	74 2f                	je     c001bcdc <sysCallOpenDir(regs*)+0x67>
c001bcad:	83 ec 0c             	sub    esp,0xc
c001bcb0:	56                   	push   esi
c001bcb1:	e8 7c 7b ff ff       	call   c0013832 <Directory::open()>
c001bcb6:	83 c4 10             	add    esp,0x10
c001bcb9:	85 c0                	test   eax,eax
c001bcbb:	75 1f                	jne    c001bcdc <sysCallOpenDir(regs*)+0x67>
c001bcbd:	83 ec 0c             	sub    esp,0xc
c001bcc0:	56                   	push   esi
c001bcc1:	e8 de 58 ff ff       	call   c00115a4 <UnixFile::getFileDescriptor()>
c001bcc6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bcc9:	83 c4 10             	add    esp,0x10
c001bccc:	89 02                	mov    DWORD PTR [edx],eax
c001bcce:	c1 f8 1f             	sar    eax,0x1f
c001bcd1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bcd4:	31 c0                	xor    eax,eax
c001bcd6:	59                   	pop    ecx
c001bcd7:	31 d2                	xor    edx,edx
c001bcd9:	5b                   	pop    ebx
c001bcda:	5e                   	pop    esi
c001bcdb:	c3                   	ret    
c001bcdc:	59                   	pop    ecx
c001bcdd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bce2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bce7:	5b                   	pop    ebx
c001bce8:	5e                   	pop    esi
c001bce9:	c3                   	ret    

c001bcea <sysCallCloseDir(regs*)>:
c001bcea:	53                   	push   ebx
c001bceb:	83 ec 08             	sub    esp,0x8
c001bcee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcf2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bcf5:	83 f8 02             	cmp    eax,0x2
c001bcf8:	76 47                	jbe    c001bd41 <sysCallCloseDir(regs*)+0x57>
c001bcfa:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bcff:	77 2f                	ja     c001bd30 <sysCallCloseDir(regs*)+0x46>
c001bd01:	83 ec 0c             	sub    esp,0xc
c001bd04:	50                   	push   eax
c001bd05:	e8 8f 5b ff ff       	call   c0011899 <getFromFileDescriptor(int)>
c001bd0a:	89 c3                	mov    ebx,eax
c001bd0c:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd0f:	e8 7a 7b ff ff       	call   c001388e <Directory::close()>
c001bd14:	83 c4 10             	add    esp,0x10
c001bd17:	85 db                	test   ebx,ebx
c001bd19:	74 0c                	je     c001bd27 <sysCallCloseDir(regs*)+0x3d>
c001bd1b:	83 ec 0c             	sub    esp,0xc
c001bd1e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd20:	53                   	push   ebx
c001bd21:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd24:	83 c4 10             	add    esp,0x10
c001bd27:	31 c0                	xor    eax,eax
c001bd29:	31 d2                	xor    edx,edx
c001bd2b:	83 c4 08             	add    esp,0x8
c001bd2e:	5b                   	pop    ebx
c001bd2f:	c3                   	ret    
c001bd30:	83 ec 08             	sub    esp,0x8
c001bd33:	50                   	push   eax
c001bd34:	68 38 c2 02 c0       	push   0xc002c238
c001bd39:	e8 85 70 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001bd3e:	83 c4 10             	add    esp,0x10
c001bd41:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd46:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd4b:	83 c4 08             	add    esp,0x8
c001bd4e:	5b                   	pop    ebx
c001bd4f:	c3                   	ret    

c001bd50 <sysCallMakeDir(regs*)>:
c001bd50:	56                   	push   esi
c001bd51:	53                   	push   ebx
c001bd52:	83 ec 10             	sub    esp,0x10
c001bd55:	68 14 01 00 00       	push   0x114
c001bd5a:	e8 ec 3a ff ff       	call   c000f84b <malloc>
c001bd5f:	83 c4 0c             	add    esp,0xc
c001bd62:	89 c3                	mov    ebx,eax
c001bd64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd69:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd6c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd70:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd73:	53                   	push   ebx
c001bd74:	e8 55 7a ff ff       	call   c00137ce <Directory::Directory(char const*, Process*)>
c001bd79:	83 c4 10             	add    esp,0x10
c001bd7c:	85 db                	test   ebx,ebx
c001bd7e:	74 32                	je     c001bdb2 <sysCallMakeDir(regs*)+0x62>
c001bd80:	83 ec 0c             	sub    esp,0xc
c001bd83:	53                   	push   ebx
c001bd84:	e8 89 7c ff ff       	call   c0013a12 <Directory::create()>
c001bd89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd8c:	89 c6                	mov    esi,eax
c001bd8e:	e8 fb 7a ff ff       	call   c001388e <Directory::close()>
c001bd93:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd95:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd98:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd9b:	83 c4 10             	add    esp,0x10
c001bd9e:	31 c0                	xor    eax,eax
c001bda0:	59                   	pop    ecx
c001bda1:	85 f6                	test   esi,esi
c001bda3:	5b                   	pop    ebx
c001bda4:	0f 95 c0             	setne  al
c001bda7:	5e                   	pop    esi
c001bda8:	31 d2                	xor    edx,edx
c001bdaa:	f7 d8                	neg    eax
c001bdac:	83 d2 00             	adc    edx,0x0
c001bdaf:	f7 da                	neg    edx
c001bdb1:	c3                   	ret    
c001bdb2:	59                   	pop    ecx
c001bdb3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdb8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdbd:	5b                   	pop    ebx
c001bdbe:	5e                   	pop    esi
c001bdbf:	c3                   	ret    

c001bdc0 <sysCallWait(regs*)>:
c001bdc0:	83 ec 10             	sub    esp,0x10
c001bdc3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bdc7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bdca:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bdcd:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bdd0:	e8 48 25 00 00       	call   c001e31d <waitTask(int, int*, int)>
c001bdd5:	83 c4 1c             	add    esp,0x1c
c001bdd8:	99                   	cdq    
c001bdd9:	c3                   	ret    

c001bdda <sysCallNotImpl(regs*)>:
c001bdda:	83 ec 18             	sub    esp,0x18
c001bddd:	68 42 c1 02 c0       	push   0xc002c142
c001bde2:	e8 a8 e7 ff ff       	call   c001a58f <Krnl::panic(char const*)>
c001bde7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdec:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdf1:	83 c4 1c             	add    esp,0x1c
c001bdf4:	c3                   	ret    

c001bdf5 <sysPanic(regs*)>:
c001bdf5:	83 ec 18             	sub    esp,0x18
c001bdf8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bdfc:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bdff:	e8 8b e7 ff ff       	call   c001a58f <Krnl::panic(char const*)>
c001be04:	c7 04 24 5c c1 02 c0 	mov    DWORD PTR [esp],0xc002c15c
c001be0b:	e8 7f e7 ff ff       	call   c001a58f <Krnl::panic(char const*)>
c001be10:	b8 01 00 00 00       	mov    eax,0x1
c001be15:	31 d2                	xor    edx,edx
c001be17:	83 c4 1c             	add    esp,0x1c
c001be1a:	c3                   	ret    

c001be1b <sysCallRmdir(regs*)>:
c001be1b:	56                   	push   esi
c001be1c:	53                   	push   ebx
c001be1d:	83 ec 20             	sub    esp,0x20
c001be20:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be24:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be27:	68 14 01 00 00       	push   0x114
c001be2c:	e8 1a 3a ff ff       	call   c000f84b <malloc>
c001be31:	83 c4 0c             	add    esp,0xc
c001be34:	89 c3                	mov    ebx,eax
c001be36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be3b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be3e:	56                   	push   esi
c001be3f:	53                   	push   ebx
c001be40:	e8 dd 74 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001be45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be48:	e8 b1 76 ff ff       	call   c00134fe <File::unlink()>
c001be4d:	83 c4 10             	add    esp,0x10
c001be50:	85 db                	test   ebx,ebx
c001be52:	74 14                	je     c001be68 <sysCallRmdir(regs*)+0x4d>
c001be54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be58:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be5a:	83 ec 0c             	sub    esp,0xc
c001be5d:	53                   	push   ebx
c001be5e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be61:	83 c4 10             	add    esp,0x10
c001be64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be68:	85 c0                	test   eax,eax
c001be6a:	0f 95 c0             	setne  al
c001be6d:	31 d2                	xor    edx,edx
c001be6f:	0f b6 c0             	movzx  eax,al
c001be72:	f7 d8                	neg    eax
c001be74:	83 d2 00             	adc    edx,0x0
c001be77:	83 c4 14             	add    esp,0x14
c001be7a:	f7 da                	neg    edx
c001be7c:	5b                   	pop    ebx
c001be7d:	5e                   	pop    esi
c001be7e:	c3                   	ret    

c001be7f <sysCallUnlink(regs*)>:
c001be7f:	56                   	push   esi
c001be80:	53                   	push   ebx
c001be81:	83 ec 20             	sub    esp,0x20
c001be84:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be88:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be8b:	68 14 01 00 00       	push   0x114
c001be90:	e8 b6 39 ff ff       	call   c000f84b <malloc>
c001be95:	83 c4 0c             	add    esp,0xc
c001be98:	89 c3                	mov    ebx,eax
c001be9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be9f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bea2:	56                   	push   esi
c001bea3:	53                   	push   ebx
c001bea4:	e8 79 74 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001bea9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001beac:	e8 4d 76 ff ff       	call   c00134fe <File::unlink()>
c001beb1:	83 c4 10             	add    esp,0x10
c001beb4:	85 db                	test   ebx,ebx
c001beb6:	74 14                	je     c001becc <sysCallUnlink(regs*)+0x4d>
c001beb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bebc:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bebe:	83 ec 0c             	sub    esp,0xc
c001bec1:	53                   	push   ebx
c001bec2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bec5:	83 c4 10             	add    esp,0x10
c001bec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001becc:	85 c0                	test   eax,eax
c001bece:	0f 95 c0             	setne  al
c001bed1:	31 d2                	xor    edx,edx
c001bed3:	0f b6 c0             	movzx  eax,al
c001bed6:	f7 d8                	neg    eax
c001bed8:	83 d2 00             	adc    edx,0x0
c001bedb:	83 c4 14             	add    esp,0x14
c001bede:	f7 da                	neg    edx
c001bee0:	5b                   	pop    ebx
c001bee1:	5e                   	pop    esi
c001bee2:	c3                   	ret    

c001bee3 <sysCallGetArgv(regs*)>:
c001bee3:	83 ec 0c             	sub    esp,0xc
c001bee6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001beea:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001beed:	85 c0                	test   eax,eax
c001beef:	78 2b                	js     c001bf1c <sysCallGetArgv(regs*)+0x39>
c001bef1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bef7:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001befa:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bf00:	7d 1a                	jge    c001bf1c <sysCallGetArgv(regs*)+0x39>
c001bf02:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bf09:	85 c0                	test   eax,eax
c001bf0b:	74 17                	je     c001bf24 <sysCallGetArgv(regs*)+0x41>
c001bf0d:	83 ec 08             	sub    esp,0x8
c001bf10:	50                   	push   eax
c001bf11:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bf14:	e8 23 49 fe ff       	call   c000083c <strcpy>
c001bf19:	83 c4 10             	add    esp,0x10
c001bf1c:	31 c0                	xor    eax,eax
c001bf1e:	31 d2                	xor    edx,edx
c001bf20:	83 c4 0c             	add    esp,0xc
c001bf23:	c3                   	ret    
c001bf24:	b8 01 00 00 00       	mov    eax,0x1
c001bf29:	31 d2                	xor    edx,edx
c001bf2b:	83 c4 0c             	add    esp,0xc
c001bf2e:	c3                   	ret    

c001bf2f <sysCallTTYName(regs*)>:
c001bf2f:	56                   	push   esi
c001bf30:	53                   	push   ebx
c001bf31:	53                   	push   ebx
c001bf32:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf36:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bf39:	85 c0                	test   eax,eax
c001bf3b:	74 5f                	je     c001bf9c <sysCallTTYName(regs*)+0x6d>
c001bf3d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bf40:	83 f8 02             	cmp    eax,0x2
c001bf43:	77 3e                	ja     c001bf83 <sysCallTTYName(regs*)+0x54>
c001bf45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf4a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf4d:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bf53:	85 db                	test   ebx,ebx
c001bf55:	74 45                	je     c001bf9c <sysCallTTYName(regs*)+0x6d>
c001bf57:	83 ec 0c             	sub    esp,0xc
c001bf5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf5c:	53                   	push   ebx
c001bf5d:	ff 10                	call   DWORD PTR [eax]
c001bf5f:	83 c4 10             	add    esp,0x10
c001bf62:	84 c0                	test   al,al
c001bf64:	74 41                	je     c001bfa7 <sysCallTTYName(regs*)+0x78>
c001bf66:	83 ec 08             	sub    esp,0x8
c001bf69:	81 c3 82 00 00 00    	add    ebx,0x82
c001bf6f:	53                   	push   ebx
c001bf70:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bf73:	e8 c4 48 fe ff       	call   c000083c <strcpy>
c001bf78:	83 c4 10             	add    esp,0x10
c001bf7b:	31 c0                	xor    eax,eax
c001bf7d:	59                   	pop    ecx
c001bf7e:	31 d2                	xor    edx,edx
c001bf80:	5b                   	pop    ebx
c001bf81:	5e                   	pop    esi
c001bf82:	c3                   	ret    
c001bf83:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bf88:	74 bb                	je     c001bf45 <sysCallTTYName(regs*)+0x16>
c001bf8a:	83 ec 0c             	sub    esp,0xc
c001bf8d:	50                   	push   eax
c001bf8e:	e8 06 59 ff ff       	call   c0011899 <getFromFileDescriptor(int)>
c001bf93:	83 c4 10             	add    esp,0x10
c001bf96:	89 c3                	mov    ebx,eax
c001bf98:	85 db                	test   ebx,ebx
c001bf9a:	75 bb                	jne    c001bf57 <sysCallTTYName(regs*)+0x28>
c001bf9c:	59                   	pop    ecx
c001bf9d:	b8 01 00 00 00       	mov    eax,0x1
c001bfa2:	31 d2                	xor    edx,edx
c001bfa4:	5b                   	pop    ebx
c001bfa5:	5e                   	pop    esi
c001bfa6:	c3                   	ret    
c001bfa7:	59                   	pop    ecx
c001bfa8:	b8 02 00 00 00       	mov    eax,0x2
c001bfad:	31 d2                	xor    edx,edx
c001bfaf:	5b                   	pop    ebx
c001bfb0:	5e                   	pop    esi
c001bfb1:	c3                   	ret    

c001bfb2 <sysCallUSleep(regs*)>:
c001bfb2:	83 ec 14             	sub    esp,0x14
c001bfb5:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bfba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bfbe:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bfc5:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bfc8:	01 ca                	add    edx,ecx
c001bfca:	52                   	push   edx
c001bfcb:	50                   	push   eax
c001bfcc:	e8 e5 23 00 00       	call   c001e3b6 <nanoSleep(unsigned long long)>
c001bfd1:	31 c0                	xor    eax,eax
c001bfd3:	31 d2                	xor    edx,edx
c001bfd5:	83 c4 1c             	add    esp,0x1c
c001bfd8:	c3                   	ret    

c001bfd9 <sysCallSpawn(regs*)>:
c001bfd9:	56                   	push   esi
c001bfda:	53                   	push   ebx
c001bfdb:	50                   	push   eax
c001bfdc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfe0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bfe3:	85 c0                	test   eax,eax
c001bfe5:	75 08                	jne    c001bfef <sysCallSpawn(regs*)+0x16>
c001bfe7:	59                   	pop    ecx
c001bfe8:	31 c0                	xor    eax,eax
c001bfea:	31 d2                	xor    edx,edx
c001bfec:	5b                   	pop    ebx
c001bfed:	5e                   	pop    esi
c001bfee:	c3                   	ret    
c001bfef:	83 ec 08             	sub    esp,0x8
c001bff2:	50                   	push   eax
c001bff3:	68 6b c1 02 c0       	push   0xc002c16b
c001bff8:	e8 c6 6d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001bffd:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001c004:	e8 42 38 ff ff       	call   c000f84b <malloc>
c001c009:	83 c4 10             	add    esp,0x10
c001c00c:	89 c6                	mov    esi,eax
c001c00e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c011:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c014:	85 c0                	test   eax,eax
c001c016:	75 32                	jne    c001c04a <sysCallSpawn(regs*)+0x71>
c001c018:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c01d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c020:	52                   	push   edx
c001c021:	50                   	push   eax
c001c022:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c025:	56                   	push   esi
c001c026:	e8 51 1a 00 00       	call   c001da7c <Process::Process(char const*, Process*, char**)>
c001c02b:	83 c4 10             	add    esp,0x10
c001c02e:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c035:	75 b0                	jne    c001bfe7 <sysCallSpawn(regs*)+0xe>
c001c037:	83 ec 0c             	sub    esp,0xc
c001c03a:	56                   	push   esi
c001c03b:	e8 24 20 00 00       	call   c001e064 <Process::createUserThread()>
c001c040:	8b 06                	mov    eax,DWORD PTR [esi]
c001c042:	83 c4 10             	add    esp,0x10
c001c045:	99                   	cdq    
c001c046:	59                   	pop    ecx
c001c047:	5b                   	pop    ebx
c001c048:	5e                   	pop    esi
c001c049:	c3                   	ret    
c001c04a:	31 c0                	xor    eax,eax
c001c04c:	eb d2                	jmp    c001c020 <sysCallSpawn(regs*)+0x47>

c001c04e <sysCallGetEnv(regs*)>:
c001c04e:	55                   	push   ebp
c001c04f:	57                   	push   edi
c001c050:	56                   	push   esi
c001c051:	53                   	push   ebx
c001c052:	83 ec 28             	sub    esp,0x28
c001c055:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c059:	68 79 c1 02 c0       	push   0xc002c179
c001c05e:	e8 60 6d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c063:	5f                   	pop    edi
c001c064:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c067:	5d                   	pop    ebp
c001c068:	53                   	push   ebx
c001c069:	68 a2 c4 02 c0       	push   0xc002c4a2
c001c06e:	e8 50 6d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c073:	58                   	pop    eax
c001c074:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c077:	5a                   	pop    edx
c001c078:	57                   	push   edi
c001c079:	68 82 c1 02 c0       	push   0xc002c182
c001c07e:	e8 40 6d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c083:	59                   	pop    ecx
c001c084:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c089:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c08c:	e8 1a e4 ff ff       	call   c001a4ab <Krnl::getProcessTotalEnvCount(Process*)>
c001c091:	5a                   	pop    edx
c001c092:	89 c5                	mov    ebp,eax
c001c094:	59                   	pop    ecx
c001c095:	50                   	push   eax
c001c096:	68 8c c1 02 c0       	push   0xc002c18c
c001c09b:	e8 23 6d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c0a0:	83 c4 10             	add    esp,0x10
c001c0a3:	39 ef                	cmp    edi,ebp
c001c0a5:	7c 15                	jl     c001c0bc <sysCallGetEnv(regs*)+0x6e>
c001c0a7:	85 db                	test   ebx,ebx
c001c0a9:	75 0c                	jne    c001c0b7 <sysCallGetEnv(regs*)+0x69>
c001c0ab:	83 c4 1c             	add    esp,0x1c
c001c0ae:	31 c0                	xor    eax,eax
c001c0b0:	5b                   	pop    ebx
c001c0b1:	31 d2                	xor    edx,edx
c001c0b3:	5e                   	pop    esi
c001c0b4:	5f                   	pop    edi
c001c0b5:	5d                   	pop    ebp
c001c0b6:	c3                   	ret    
c001c0b7:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c0ba:	eb ef                	jmp    c001c0ab <sysCallGetEnv(regs*)+0x5d>
c001c0bc:	83 ec 0c             	sub    esp,0xc
c001c0bf:	68 1b b5 02 c0       	push   0xc002b51b
c001c0c4:	e8 fa 6c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c0c9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c0cd:	83 c4 0c             	add    esp,0xc
c001c0d0:	57                   	push   edi
c001c0d1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c0d7:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c0da:	50                   	push   eax
c001c0db:	e8 eb e3 ff ff       	call   c001a4cb <Krnl::getProcessEnvPair(Process*, int)>
c001c0e0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c0e4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c0e8:	68 53 c5 02 c0       	push   0xc002c553
c001c0ed:	e8 d1 6c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c0f2:	83 c4 10             	add    esp,0x10
c001c0f5:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c0f8:	85 f6                	test   esi,esi
c001c0fa:	75 47                	jne    c001c143 <sysCallGetEnv(regs*)+0xf5>
c001c0fc:	83 ec 0c             	sub    esp,0xc
c001c0ff:	55                   	push   ebp
c001c100:	e8 97 46 fe ff       	call   c000079c <strlen>
c001c105:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c108:	89 c3                	mov    ebx,eax
c001c10a:	e8 8d 46 fe ff       	call   c000079c <strlen>
c001c10f:	5a                   	pop    edx
c001c110:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c114:	59                   	pop    ecx
c001c115:	50                   	push   eax
c001c116:	68 98 c1 02 c0       	push   0xc002c198
c001c11b:	e8 a3 6c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c120:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c123:	e8 74 46 fe ff       	call   c000079c <strlen>
c001c128:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c12b:	89 c3                	mov    ebx,eax
c001c12d:	e8 6a 46 fe ff       	call   c000079c <strlen>
c001c132:	83 c4 10             	add    esp,0x10
c001c135:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c139:	83 c4 1c             	add    esp,0x1c
c001c13c:	31 d2                	xor    edx,edx
c001c13e:	5b                   	pop    ebx
c001c13f:	5e                   	pop    esi
c001c140:	5f                   	pop    edi
c001c141:	5d                   	pop    ebp
c001c142:	c3                   	ret    
c001c143:	83 ec 0c             	sub    esp,0xc
c001c146:	68 6d c5 02 c0       	push   0xc002c56d
c001c14b:	e8 73 6c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c150:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c153:	58                   	pop    eax
c001c154:	5a                   	pop    edx
c001c155:	55                   	push   ebp
c001c156:	53                   	push   ebx
c001c157:	e8 e0 46 fe ff       	call   c000083c <strcpy>
c001c15c:	59                   	pop    ecx
c001c15d:	5e                   	pop    esi
c001c15e:	68 a2 c1 02 c0       	push   0xc002c1a2
c001c163:	53                   	push   ebx
c001c164:	e8 13 48 fe ff       	call   c000097c <strcat>
c001c169:	5d                   	pop    ebp
c001c16a:	58                   	pop    eax
c001c16b:	57                   	push   edi
c001c16c:	53                   	push   ebx
c001c16d:	e8 0a 48 fe ff       	call   c000097c <strcat>
c001c172:	c7 04 24 87 c5 02 c0 	mov    DWORD PTR [esp],0xc002c587
c001c179:	e8 45 6c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c17e:	83 c4 10             	add    esp,0x10
c001c181:	e9 25 ff ff ff       	jmp    c001c0ab <sysCallGetEnv(regs*)+0x5d>

c001c186 <sysAppSettings(regs*)>:
c001c186:	53                   	push   ebx
c001c187:	83 ec 08             	sub    esp,0x8
c001c18a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c18e:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c191:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c197:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c19c:	66 3d c0 09          	cmp    ax,0x9c0
c001c1a0:	75 2f                	jne    c001c1d1 <sysAppSettings(regs*)+0x4b>
c001c1a2:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c1a8:	83 e0 1f             	and    eax,0x1f
c001c1ab:	3c 01                	cmp    al,0x1
c001c1ad:	74 2e                	je     c001c1dd <sysAppSettings(regs*)+0x57>
c001c1af:	3c 07                	cmp    al,0x7
c001c1b1:	0f 84 bd 00 00 00    	je     c001c274 <sysAppSettings(regs*)+0xee>
c001c1b7:	84 c0                	test   al,al
c001c1b9:	0f 84 dc 00 00 00    	je     c001c29b <sysAppSettings(regs*)+0x115>
c001c1bf:	3c 08                	cmp    al,0x8
c001c1c1:	74 6d                	je     c001c230 <sysAppSettings(regs*)+0xaa>
c001c1c3:	0f b6 c0             	movzx  eax,al
c001c1c6:	83 c4 08             	add    esp,0x8
c001c1c9:	05 e8 03 00 00       	add    eax,0x3e8
c001c1ce:	5b                   	pop    ebx
c001c1cf:	99                   	cdq    
c001c1d0:	c3                   	ret    
c001c1d1:	b8 01 00 00 00       	mov    eax,0x1
c001c1d6:	31 d2                	xor    edx,edx
c001c1d8:	83 c4 08             	add    esp,0x8
c001c1db:	5b                   	pop    ebx
c001c1dc:	c3                   	ret    
c001c1dd:	51                   	push   ecx
c001c1de:	68 00 01 00 00       	push   0x100
c001c1e3:	6a 00                	push   0x0
c001c1e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1ea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1ed:	83 c0 0c             	add    eax,0xc
c001c1f0:	50                   	push   eax
c001c1f1:	e8 8a 45 fe ff       	call   c0000780 <memset>
c001c1f6:	83 c4 0c             	add    esp,0xc
c001c1f9:	68 ff 00 00 00       	push   0xff
c001c1fe:	53                   	push   ebx
c001c1ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c204:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c207:	83 c0 0c             	add    eax,0xc
c001c20a:	50                   	push   eax
c001c20b:	e8 3c 45 fe ff       	call   c000074c <memcpy>
c001c210:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c215:	5b                   	pop    ebx
c001c216:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c219:	5a                   	pop    edx
c001c21a:	8d 50 0c             	lea    edx,[eax+0xc]
c001c21d:	52                   	push   edx
c001c21e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c224:	e8 99 48 ff ff       	call   c0010ac2 <VgaText::setTitle(char*)>
c001c229:	83 c4 10             	add    esp,0x10
c001c22c:	31 c0                	xor    eax,eax
c001c22e:	eb a6                	jmp    c001c1d6 <sysAppSettings(regs*)+0x50>
c001c230:	83 ec 08             	sub    esp,0x8
c001c233:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c239:	83 e0 0f             	and    eax,0xf
c001c23c:	50                   	push   eax
c001c23d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c242:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c245:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c24b:	e8 64 48 ff ff       	call   c0010ab4 <VgaText::setTitleColour(VgaColour)>
c001c250:	58                   	pop    eax
c001c251:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c257:	5a                   	pop    edx
c001c258:	c1 e8 04             	shr    eax,0x4
c001c25b:	83 e0 0f             	and    eax,0xf
c001c25e:	50                   	push   eax
c001c25f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c264:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c267:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c26d:	e8 34 48 ff ff       	call   c0010aa6 <VgaText::setTitleTextColour(VgaColour)>
c001c272:	eb b5                	jmp    c001c229 <sysAppSettings(regs*)+0xa3>
c001c274:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c279:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c27c:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c282:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c288:	c0 e8 06             	shr    al,0x6
c001c28b:	83 e0 01             	and    eax,0x1
c001c28e:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c294:	31 c0                	xor    eax,eax
c001c296:	e9 3b ff ff ff       	jmp    c001c1d6 <sysAppSettings(regs*)+0x50>
c001c29b:	b8 02 00 00 00       	mov    eax,0x2
c001c2a0:	e9 31 ff ff ff       	jmp    c001c1d6 <sysAppSettings(regs*)+0x50>

c001c2a5 <sysSetFatAttrib(regs*)>:
c001c2a5:	57                   	push   edi
c001c2a6:	56                   	push   esi
c001c2a7:	53                   	push   ebx
c001c2a8:	83 ec 1c             	sub    esp,0x1c
c001c2ab:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c2af:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c2b2:	68 14 01 00 00       	push   0x114
c001c2b7:	e8 8f 35 ff ff       	call   c000f84b <malloc>
c001c2bc:	83 c4 0c             	add    esp,0xc
c001c2bf:	89 c3                	mov    ebx,eax
c001c2c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2c6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c2c9:	57                   	push   edi
c001c2ca:	53                   	push   ebx
c001c2cb:	e8 52 70 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001c2d0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c2d3:	83 c4 0c             	add    esp,0xc
c001c2d6:	0f b6 d4             	movzx  edx,ah
c001c2d9:	0f b6 c0             	movzx  eax,al
c001c2dc:	52                   	push   edx
c001c2dd:	50                   	push   eax
c001c2de:	53                   	push   ebx
c001c2df:	e8 b4 72 ff ff       	call   c0013598 <File::chfatattr(unsigned char, unsigned char)>
c001c2e4:	83 c4 10             	add    esp,0x10
c001c2e7:	85 db                	test   ebx,ebx
c001c2e9:	74 14                	je     c001c2ff <sysSetFatAttrib(regs*)+0x5a>
c001c2eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2ef:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c2f1:	83 ec 0c             	sub    esp,0xc
c001c2f4:	53                   	push   ebx
c001c2f5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c2f8:	83 c4 10             	add    esp,0x10
c001c2fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c2ff:	85 c0                	test   eax,eax
c001c301:	0f 95 c0             	setne  al
c001c304:	31 d2                	xor    edx,edx
c001c306:	0f b6 c0             	movzx  eax,al
c001c309:	f7 d8                	neg    eax
c001c30b:	83 d2 00             	adc    edx,0x0
c001c30e:	83 c4 10             	add    esp,0x10
c001c311:	f7 da                	neg    edx
c001c313:	5b                   	pop    ebx
c001c314:	5e                   	pop    esi
c001c315:	5f                   	pop    edi
c001c316:	c3                   	ret    

c001c317 <sysPipe(regs*)>:
c001c317:	57                   	push   edi
c001c318:	56                   	push   esi
c001c319:	53                   	push   ebx
c001c31a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c31e:	83 ec 0c             	sub    esp,0xc
c001c321:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c324:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c327:	6a 20                	push   0x20
c001c329:	e8 1d 35 ff ff       	call   c000f84b <malloc>
c001c32e:	89 c3                	mov    ebx,eax
c001c330:	58                   	pop    eax
c001c331:	5a                   	pop    edx
c001c332:	68 00 50 00 00       	push   0x5000
c001c337:	53                   	push   ebx
c001c338:	e8 2d 41 ff ff       	call   c001046a <Pipe::Pipe(int)>
c001c33d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c340:	e8 5f 52 ff ff       	call   c00115a4 <UnixFile::getFileDescriptor()>
c001c345:	89 07                	mov    DWORD PTR [edi],eax
c001c347:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c34a:	e8 55 52 ff ff       	call   c00115a4 <UnixFile::getFileDescriptor()>
c001c34f:	83 c4 10             	add    esp,0x10
c001c352:	89 06                	mov    DWORD PTR [esi],eax
c001c354:	31 d2                	xor    edx,edx
c001c356:	5b                   	pop    ebx
c001c357:	31 c0                	xor    eax,eax
c001c359:	5e                   	pop    esi
c001c35a:	5f                   	pop    edi
c001c35b:	c3                   	ret    

c001c35c <sysGetUnixTime(regs*)>:
c001c35c:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c001c361:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c367:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c36b:	e9 9c 79 ff ff       	jmp    c0013d0c <Clock::timeInSecondsLocal()>

c001c370 <string_ends_with(char const*, char const*)>:
c001c370:	57                   	push   edi
c001c371:	56                   	push   esi
c001c372:	53                   	push   ebx
c001c373:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c377:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c37b:	83 ec 0c             	sub    esp,0xc
c001c37e:	53                   	push   ebx
c001c37f:	e8 18 44 fe ff       	call   c000079c <strlen>
c001c384:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c387:	89 c6                	mov    esi,eax
c001c389:	e8 0e 44 fe ff       	call   c000079c <strlen>
c001c38e:	83 c4 10             	add    esp,0x10
c001c391:	39 c6                	cmp    esi,eax
c001c393:	7d 06                	jge    c001c39b <string_ends_with(char const*, char const*)+0x2b>
c001c395:	5b                   	pop    ebx
c001c396:	31 c0                	xor    eax,eax
c001c398:	5e                   	pop    esi
c001c399:	5f                   	pop    edi
c001c39a:	c3                   	ret    
c001c39b:	83 ec 08             	sub    esp,0x8
c001c39e:	29 c6                	sub    esi,eax
c001c3a0:	57                   	push   edi
c001c3a1:	01 f3                	add    ebx,esi
c001c3a3:	53                   	push   ebx
c001c3a4:	e8 1f 45 fe ff       	call   c00008c8 <strcmp>
c001c3a9:	83 c4 10             	add    esp,0x10
c001c3ac:	85 c0                	test   eax,eax
c001c3ae:	5b                   	pop    ebx
c001c3af:	0f 94 c0             	sete   al
c001c3b2:	5e                   	pop    esi
c001c3b3:	0f b6 c0             	movzx  eax,al
c001c3b6:	5f                   	pop    edi
c001c3b7:	c3                   	ret    

c001c3b8 <sysCallOpen(regs*)>:
c001c3b8:	56                   	push   esi
c001c3b9:	53                   	push   ebx
c001c3ba:	81 ec 04 01 00 00    	sub    esp,0x104
c001c3c0:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c3c7:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c3ca:	85 c9                	test   ecx,ecx
c001c3cc:	0f 84 b3 00 00 00    	je     c001c485 <sysCallOpen(regs*)+0xcd>
c001c3d2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c3d5:	85 c0                	test   eax,eax
c001c3d7:	0f 84 a8 00 00 00    	je     c001c485 <sysCallOpen(regs*)+0xcd>
c001c3dd:	52                   	push   edx
c001c3de:	68 a4 c1 02 c0       	push   0xc002c1a4
c001c3e3:	50                   	push   eax
c001c3e4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c3e8:	56                   	push   esi
c001c3e9:	e8 8a 6d ff ff       	call   c0013178 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c3ee:	89 34 24             	mov    DWORD PTR [esp],esi
c001c3f1:	e8 a6 43 fe ff       	call   c000079c <strlen>
c001c3f6:	83 c4 10             	add    esp,0x10
c001c3f9:	48                   	dec    eax
c001c3fa:	74 1d                	je     c001c419 <sysCallOpen(regs*)+0x61>
c001c3fc:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c3ff:	eb 0f                	jmp    c001c410 <sysCallOpen(regs*)+0x58>
c001c401:	80 fa 3a             	cmp    dl,0x3a
c001c404:	74 0f                	je     c001c415 <sysCallOpen(regs*)+0x5d>
c001c406:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c40a:	48                   	dec    eax
c001c40b:	74 0c                	je     c001c419 <sysCallOpen(regs*)+0x61>
c001c40d:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c410:	80 fa 2e             	cmp    dl,0x2e
c001c413:	75 ec                	jne    c001c401 <sysCallOpen(regs*)+0x49>
c001c415:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c419:	83 ec 08             	sub    esp,0x8
c001c41c:	68 a8 c1 02 c0       	push   0xc002c1a8
c001c421:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c424:	e8 47 ff ff ff       	call   c001c370 <string_ends_with(char const*, char const*)>
c001c429:	83 c4 10             	add    esp,0x10
c001c42c:	85 c0                	test   eax,eax
c001c42e:	75 17                	jne    c001c447 <sysCallOpen(regs*)+0x8f>
c001c430:	83 ec 08             	sub    esp,0x8
c001c433:	68 c9 c1 02 c0       	push   0xc002c1c9
c001c438:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c43b:	e8 30 ff ff ff       	call   c001c370 <string_ends_with(char const*, char const*)>
c001c440:	83 c4 10             	add    esp,0x10
c001c443:	85 c0                	test   eax,eax
c001c445:	74 51                	je     c001c498 <sysCallOpen(regs*)+0xe0>
c001c447:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c44a:	83 ec 08             	sub    esp,0x8
c001c44d:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c453:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c45a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c45d:	ff 30                	push   DWORD PTR [eax]
c001c45f:	68 ad c1 02 c0       	push   0xc002c1ad
c001c464:	e8 5a 69 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c469:	c7 04 24 bc c1 02 c0 	mov    DWORD PTR [esp],0xc002c1bc
c001c470:	e8 4e 69 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c475:	83 c4 10             	add    esp,0x10
c001c478:	81 c4 04 01 00 00    	add    esp,0x104
c001c47e:	31 c0                	xor    eax,eax
c001c480:	31 d2                	xor    edx,edx
c001c482:	5b                   	pop    ebx
c001c483:	5e                   	pop    esi
c001c484:	c3                   	ret    
c001c485:	81 c4 04 01 00 00    	add    esp,0x104
c001c48b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c490:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c495:	5b                   	pop    ebx
c001c496:	5e                   	pop    esi
c001c497:	c3                   	ret    
c001c498:	83 ec 08             	sub    esp,0x8
c001c49b:	68 a9 c1 02 c0       	push   0xc002c1a9
c001c4a0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4a3:	e8 20 44 fe ff       	call   c00008c8 <strcmp>
c001c4a8:	83 c4 10             	add    esp,0x10
c001c4ab:	85 c0                	test   eax,eax
c001c4ad:	74 98                	je     c001c447 <sysCallOpen(regs*)+0x8f>
c001c4af:	83 ec 08             	sub    esp,0x8
c001c4b2:	68 a8 c1 02 c0       	push   0xc002c1a8
c001c4b7:	56                   	push   esi
c001c4b8:	e8 b3 fe ff ff       	call   c001c370 <string_ends_with(char const*, char const*)>
c001c4bd:	83 c4 10             	add    esp,0x10
c001c4c0:	85 c0                	test   eax,eax
c001c4c2:	75 83                	jne    c001c447 <sysCallOpen(regs*)+0x8f>
c001c4c4:	83 ec 08             	sub    esp,0x8
c001c4c7:	68 ce c1 02 c0       	push   0xc002c1ce
c001c4cc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4cf:	e8 9c fe ff ff       	call   c001c370 <string_ends_with(char const*, char const*)>
c001c4d4:	83 c4 10             	add    esp,0x10
c001c4d7:	85 c0                	test   eax,eax
c001c4d9:	0f 85 d9 00 00 00    	jne    c001c5b8 <sysCallOpen(regs*)+0x200>
c001c4df:	83 ec 08             	sub    esp,0x8
c001c4e2:	68 d3 c1 02 c0       	push   0xc002c1d3
c001c4e7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4ea:	e8 81 fe ff ff       	call   c001c370 <string_ends_with(char const*, char const*)>
c001c4ef:	83 c4 10             	add    esp,0x10
c001c4f2:	85 c0                	test   eax,eax
c001c4f4:	0f 85 be 00 00 00    	jne    c001c5b8 <sysCallOpen(regs*)+0x200>
c001c4fa:	83 ec 08             	sub    esp,0x8
c001c4fd:	68 cf c1 02 c0       	push   0xc002c1cf
c001c502:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c505:	e8 be 43 fe ff       	call   c00008c8 <strcmp>
c001c50a:	83 c4 10             	add    esp,0x10
c001c50d:	85 c0                	test   eax,eax
c001c50f:	0f 84 a3 00 00 00    	je     c001c5b8 <sysCallOpen(regs*)+0x200>
c001c515:	83 ec 08             	sub    esp,0x8
c001c518:	68 ce c1 02 c0       	push   0xc002c1ce
c001c51d:	56                   	push   esi
c001c51e:	e8 4d fe ff ff       	call   c001c370 <string_ends_with(char const*, char const*)>
c001c523:	83 c4 10             	add    esp,0x10
c001c526:	85 c0                	test   eax,eax
c001c528:	0f 85 8a 00 00 00    	jne    c001c5b8 <sysCallOpen(regs*)+0x200>
c001c52e:	83 ec 0c             	sub    esp,0xc
c001c531:	68 14 01 00 00       	push   0x114
c001c536:	e8 10 33 ff ff       	call   c000f84b <malloc>
c001c53b:	83 c4 0c             	add    esp,0xc
c001c53e:	89 c6                	mov    esi,eax
c001c540:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c545:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c548:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c54b:	56                   	push   esi
c001c54c:	e8 d1 6d ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001c551:	83 c4 10             	add    esp,0x10
c001c554:	85 f6                	test   esi,esi
c001c556:	0f 84 29 ff ff ff    	je     c001c485 <sysCallOpen(regs*)+0xcd>
c001c55c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c55f:	0f b6 c2             	movzx  eax,dl
c001c562:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c565:	89 d0                	mov    eax,edx
c001c567:	83 e0 01             	and    eax,0x1
c001c56a:	f6 c2 02             	test   dl,0x2
c001c56d:	74 03                	je     c001c572 <sysCallOpen(regs*)+0x1ba>
c001c56f:	83 c8 02             	or     eax,0x2
c001c572:	f6 c2 04             	test   dl,0x4
c001c575:	74 03                	je     c001c57a <sysCallOpen(regs*)+0x1c2>
c001c577:	83 c8 04             	or     eax,0x4
c001c57a:	f6 c2 08             	test   dl,0x8
c001c57d:	74 03                	je     c001c582 <sysCallOpen(regs*)+0x1ca>
c001c57f:	83 c8 0a             	or     eax,0xa
c001c582:	83 e2 10             	and    edx,0x10
c001c585:	74 03                	je     c001c58a <sysCallOpen(regs*)+0x1d2>
c001c587:	83 c8 12             	or     eax,0x12
c001c58a:	83 ec 08             	sub    esp,0x8
c001c58d:	50                   	push   eax
c001c58e:	56                   	push   esi
c001c58f:	e8 f2 6d ff ff       	call   c0013386 <File::open(FileOpenMode)>
c001c594:	83 c4 10             	add    esp,0x10
c001c597:	85 c0                	test   eax,eax
c001c599:	0f 85 e6 fe ff ff    	jne    c001c485 <sysCallOpen(regs*)+0xcd>
c001c59f:	83 ec 0c             	sub    esp,0xc
c001c5a2:	56                   	push   esi
c001c5a3:	e8 fc 4f ff ff       	call   c00115a4 <UnixFile::getFileDescriptor()>
c001c5a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c5ab:	89 02                	mov    DWORD PTR [edx],eax
c001c5ad:	c1 f8 1f             	sar    eax,0x1f
c001c5b0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c5b3:	e9 bd fe ff ff       	jmp    c001c475 <sysCallOpen(regs*)+0xbd>
c001c5b8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c5bb:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c5c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c5c8:	e9 ab fe ff ff       	jmp    c001c478 <sysCallOpen(regs*)+0xc0>

c001c5cd <Sys::loadSyscalls()>:
c001c5cd:	c7 05 a0 12 03 c0 bd b6 01 c0 	mov    DWORD PTR ds:0xc00312a0,0xc001b6bd
c001c5d7:	c7 05 a4 12 03 c0 24 b2 01 c0 	mov    DWORD PTR ds:0xc00312a4,0xc001b224
c001c5e1:	c7 05 a8 12 03 c0 10 b4 01 c0 	mov    DWORD PTR ds:0xc00312a8,0xc001b410
c001c5eb:	c7 05 ac 12 03 c0 f3 b5 01 c0 	mov    DWORD PTR ds:0xc00312ac,0xc001b5f3
c001c5f5:	c7 05 b0 12 03 c0 a8 b3 01 c0 	mov    DWORD PTR ds:0xc00312b0,0xc001b3a8
c001c5ff:	c7 05 b4 12 03 c0 5b b2 01 c0 	mov    DWORD PTR ds:0xc00312b4,0xc001b25b
c001c609:	c7 05 b8 12 03 c0 3c b2 01 c0 	mov    DWORD PTR ds:0xc00312b8,0xc001b23c
c001c613:	c7 05 bc 12 03 c0 65 b4 01 c0 	mov    DWORD PTR ds:0xc00312bc,0xc001b465
c001c61d:	c7 05 c4 12 03 c0 ed bb 01 c0 	mov    DWORD PTR ds:0xc00312c4,0xc001bbed
c001c627:	c7 05 c0 12 03 c0 b8 c3 01 c0 	mov    DWORD PTR ds:0xc00312c0,0xc001c3b8
c001c631:	c7 05 c8 12 03 c0 75 bc 01 c0 	mov    DWORD PTR ds:0xc00312c8,0xc001bc75
c001c63b:	c7 05 cc 12 03 c0 dc b8 01 c0 	mov    DWORD PTR ds:0xc00312cc,0xc001b8dc
c001c645:	c7 05 d0 12 03 c0 f8 b6 01 c0 	mov    DWORD PTR ds:0xc00312d0,0xc001b6f8
c001c64f:	c7 05 d4 12 03 c0 fd b6 01 c0 	mov    DWORD PTR ds:0xc00312d4,0xc001b6fd
c001c659:	c7 05 d8 12 03 c0 50 bd 01 c0 	mov    DWORD PTR ds:0xc00312d8,0xc001bd50
c001c663:	c7 05 dc 12 03 c0 ea bc 01 c0 	mov    DWORD PTR ds:0xc00312dc,0xc001bcea
c001c66d:	c7 05 e0 12 03 c0 c4 b9 01 c0 	mov    DWORD PTR ds:0xc00312e0,0xc001b9c4
c001c677:	c7 05 e4 12 03 c0 2d ba 01 c0 	mov    DWORD PTR ds:0xc00312e4,0xc001ba2d
c001c681:	c7 05 e8 12 03 c0 aa ba 01 c0 	mov    DWORD PTR ds:0xc00312e8,0xc001baaa
c001c68b:	c7 05 ec 12 03 c0 02 b7 01 c0 	mov    DWORD PTR ds:0xc00312ec,0xc001b702
c001c695:	c7 05 f0 12 03 c0 c0 bd 01 c0 	mov    DWORD PTR ds:0xc00312f0,0xc001bdc0
c001c69f:	c7 05 f4 12 03 c0 da bd 01 c0 	mov    DWORD PTR ds:0xc00312f4,0xc001bdda
c001c6a9:	c7 05 f8 12 03 c0 da bd 01 c0 	mov    DWORD PTR ds:0xc00312f8,0xc001bdda
c001c6b3:	c7 05 fc 12 03 c0 1b be 01 c0 	mov    DWORD PTR ds:0xc00312fc,0xc001be1b
c001c6bd:	c7 05 00 13 03 c0 7f be 01 c0 	mov    DWORD PTR ds:0xc0031300,0xc001be7f
c001c6c7:	c7 05 04 13 03 c0 ae b8 01 c0 	mov    DWORD PTR ds:0xc0031304,0xc001b8ae
c001c6d1:	c7 05 08 13 03 c0 e3 be 01 c0 	mov    DWORD PTR ds:0xc0031308,0xc001bee3
c001c6db:	c7 05 0c 13 03 c0 6b b8 01 c0 	mov    DWORD PTR ds:0xc003130c,0xc001b86b
c001c6e5:	c7 05 10 13 03 c0 2f bf 01 c0 	mov    DWORD PTR ds:0xc0031310,0xc001bf2f
c001c6ef:	c7 05 14 13 03 c0 6a b9 01 c0 	mov    DWORD PTR ds:0xc0031314,0xc001b96a
c001c6f9:	c7 05 18 13 03 c0 b2 bf 01 c0 	mov    DWORD PTR ds:0xc0031318,0xc001bfb2
c001c703:	c7 05 1c 13 03 c0 2d bb 01 c0 	mov    DWORD PTR ds:0xc003131c,0xc001bb2d
c001c70d:	c7 05 20 13 03 c0 d9 bf 01 c0 	mov    DWORD PTR ds:0xc0031320,0xc001bfd9
c001c717:	c7 05 24 13 03 c0 4e c0 01 c0 	mov    DWORD PTR ds:0xc0031324,0xc001c04e
c001c721:	c7 05 28 13 03 c0 86 c1 01 c0 	mov    DWORD PTR ds:0xc0031328,0xc001c186
c001c72b:	c7 05 2c 13 03 c0 0c b7 01 c0 	mov    DWORD PTR ds:0xc003132c,0xc001b70c
c001c735:	c7 05 30 13 03 c0 76 b7 01 c0 	mov    DWORD PTR ds:0xc0031330,0xc001b776
c001c73f:	c7 05 34 13 03 c0 bc b7 01 c0 	mov    DWORD PTR ds:0xc0031334,0xc001b7bc
c001c749:	c7 05 38 13 03 c0 a5 c2 01 c0 	mov    DWORD PTR ds:0xc0031338,0xc001c2a5
c001c753:	c7 05 3c 13 03 c0 f5 bd 01 c0 	mov    DWORD PTR ds:0xc003133c,0xc001bdf5
c001c75d:	c7 05 40 13 03 c0 0d b8 01 c0 	mov    DWORD PTR ds:0xc0031340,0xc001b80d
c001c767:	c7 05 44 13 03 c0 17 c3 01 c0 	mov    DWORD PTR ds:0xc0031344,0xc001c317
c001c771:	c7 05 48 13 03 c0 5c c3 01 c0 	mov    DWORD PTR ds:0xc0031348,0xc001c35c
c001c77b:	c7 05 4c 13 03 c0 00 b3 01 c0 	mov    DWORD PTR ds:0xc003134c,0xc001b300
c001c785:	c7 05 50 13 03 c0 81 b4 01 c0 	mov    DWORD PTR ds:0xc0031350,0xc001b481
c001c78f:	c7 05 54 13 03 c0 a9 b5 01 c0 	mov    DWORD PTR ds:0xc0031354,0xc001b5a9
c001c799:	c7 05 58 13 03 c0 ee b1 01 c0 	mov    DWORD PTR ds:0xc0031358,0xc001b1ee
c001c7a3:	c7 05 5c 13 03 c0 5b b6 01 c0 	mov    DWORD PTR ds:0xc003135c,0xc001b65b
c001c7ad:	c7 05 60 13 03 c0 67 b2 01 c0 	mov    DWORD PTR ds:0xc0031360,0xc001b267
c001c7b7:	c7 05 64 13 03 c0 7e b2 01 c0 	mov    DWORD PTR ds:0xc0031364,0xc001b27e
c001c7c1:	c3                   	ret    

c001c7c2 <Sys::systemCall(regs*, void*)>:
c001c7c2:	53                   	push   ebx
c001c7c3:	83 ec 08             	sub    esp,0x8
c001c7c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c7ca:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c7cd:	83 f8 7f             	cmp    eax,0x7f
c001c7d0:	77 16                	ja     c001c7e8 <Sys::systemCall(regs*, void*)+0x26>
c001c7d2:	8b 14 85 a0 12 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffced60]
c001c7d9:	85 d2                	test   edx,edx
c001c7db:	74 0b                	je     c001c7e8 <Sys::systemCall(regs*, void*)+0x26>
c001c7dd:	83 ec 0c             	sub    esp,0xc
c001c7e0:	53                   	push   ebx
c001c7e1:	ff d2                	call   edx
c001c7e3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c7e6:	eb 0d                	jmp    c001c7f5 <Sys::systemCall(regs*, void*)+0x33>
c001c7e8:	52                   	push   edx
c001c7e9:	52                   	push   edx
c001c7ea:	50                   	push   eax
c001c7eb:	68 d8 c1 02 c0       	push   0xc002c1d8
c001c7f0:	e8 ce 65 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c7f5:	83 c4 10             	add    esp,0x10
c001c7f8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c7fd:	31 d2                	xor    edx,edx
c001c7ff:	83 c4 08             	add    esp,0x8
c001c802:	5b                   	pop    ebx
c001c803:	c3                   	ret    

c001c804 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c804:	55                   	push   ebp
c001c805:	57                   	push   edi
c001c806:	56                   	push   esi
c001c807:	53                   	push   ebx
c001c808:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c80e:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c815:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c81c:	85 c0                	test   eax,eax
c001c81e:	0f 95 c1             	setne  cl
c001c821:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c829:	0f 94 c2             	sete   dl
c001c82c:	84 d1                	test   cl,dl
c001c82e:	74 23                	je     c001c853 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c830:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c836:	74 1b                	je     c001c853 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c838:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c83e:	89 da                	mov    edx,ebx
c001c840:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c846:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c84c:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c853:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c85a:	05 ff 0f 00 00       	add    eax,0xfff
c001c85f:	83 ec 0c             	sub    esp,0xc
c001c862:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c866:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c86c:	c1 e8 0c             	shr    eax,0xc
c001c86f:	89 ef                	mov    edi,ebp
c001c871:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c875:	c1 ef 0c             	shr    edi,0xc
c001c878:	6a 01                	push   0x1
c001c87a:	e8 70 51 ff ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c001c87f:	89 c6                	mov    esi,eax
c001c881:	58                   	pop    eax
c001c882:	5a                   	pop    edx
c001c883:	57                   	push   edi
c001c884:	68 5b c2 02 c0       	push   0xc002c25b
c001c889:	e8 35 65 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c88e:	59                   	pop    ecx
c001c88f:	58                   	pop    eax
c001c890:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c894:	68 6d c2 02 c0       	push   0xc002c26d
c001c899:	e8 25 65 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c89e:	83 c4 10             	add    esp,0x10
c001c8a1:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c8a7:	0f 86 24 01 00 00    	jbe    c001c9d1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c8ad:	c1 e7 0c             	shl    edi,0xc
c001c8b0:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c8b3:	89 df                	mov    edi,ebx
c001c8b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8b9:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c8c0:	01 dd                	add    ebp,ebx
c001c8c2:	29 fd                	sub    ebp,edi
c001c8c4:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c8c8:	0f 84 01 01 00 00    	je     c001c9cf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c8ce:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c8d4:	76 05                	jbe    c001c8db <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c8d6:	bd 00 10 00 00       	mov    ebp,0x1000
c001c8db:	83 ec 0c             	sub    esp,0xc
c001c8de:	31 d2                	xor    edx,edx
c001c8e0:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c8e7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c8e9:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c8ed:	50                   	push   eax
c001c8ee:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c8f2:	50                   	push   eax
c001c8f3:	52                   	push   edx
c001c8f4:	55                   	push   ebp
c001c8f5:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c8fc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c8ff:	83 c4 20             	add    esp,0x20
c001c902:	85 c0                	test   eax,eax
c001c904:	74 0a                	je     c001c910 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c906:	53                   	push   ebx
c001c907:	53                   	push   ebx
c001c908:	50                   	push   eax
c001c909:	68 7f c2 02 c0       	push   0xc002c27f
c001c90e:	eb 0f                	jmp    c001c91f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c910:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c914:	74 20                	je     c001c936 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c916:	51                   	push   ecx
c001c917:	51                   	push   ecx
c001c918:	6a 00                	push   0x0
c001c91a:	68 aa c2 02 c0       	push   0xc002c2aa
c001c91f:	e8 9f 64 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001c924:	89 34 24             	mov    DWORD PTR [esp],esi
c001c927:	e8 89 55 ff ff       	call   c0011eb5 <Virt::freeKernelVirtualPages(unsigned long)>
c001c92c:	83 c4 10             	add    esp,0x10
c001c92f:	31 c0                	xor    eax,eax
c001c931:	e9 55 01 00 00       	jmp    c001ca8b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c936:	e8 f1 14 00 00       	call   c001de2c <lockScheduler()>
c001c93b:	e8 77 35 ff ff       	call   c000feb7 <Phys::allocatePage()>
c001c940:	6a 07                	push   0x7
c001c942:	89 c5                	mov    ebp,eax
c001c944:	56                   	push   esi
c001c945:	50                   	push   eax
c001c946:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c94b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c94e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c954:	e8 c3 58 ff ff       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c001c959:	83 c4 0c             	add    esp,0xc
c001c95c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c963:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c969:	6a 00                	push   0x0
c001c96b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c970:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c973:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c979:	e8 08 57 ff ff       	call   c0012086 <VAS::mapOtherVASIn(bool, VAS*)>
c001c97e:	58                   	pop    eax
c001c97f:	5a                   	pop    edx
c001c980:	68 07 0c 00 00       	push   0xc07
c001c985:	57                   	push   edi
c001c986:	81 c7 00 10 00 00    	add    edi,0x1000
c001c98c:	55                   	push   ebp
c001c98d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c994:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c99a:	6a 00                	push   0x0
c001c99c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9a1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9a4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9aa:	e8 27 5c ff ff       	call   c00125d6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c9af:	83 c4 1c             	add    esp,0x1c
c001c9b2:	68 00 10 00 00       	push   0x1000
c001c9b7:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c9bb:	50                   	push   eax
c001c9bc:	56                   	push   esi
c001c9bd:	e8 8a 3d fe ff       	call   c000074c <memcpy>
c001c9c2:	e8 67 14 00 00       	call   c001de2e <unlockScheduler()>
c001c9c7:	83 c4 10             	add    esp,0x10
c001c9ca:	e9 ea fe ff ff       	jmp    c001c8b9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c9cf:	89 fb                	mov    ebx,edi
c001c9d1:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c9d9:	0f 86 9e 00 00 00    	jbe    c001ca7d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c9df:	e8 48 14 00 00       	call   c001de2c <lockScheduler()>
c001c9e4:	51                   	push   ecx
c001c9e5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c9ec:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9f2:	6a 00                	push   0x0
c001c9f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9f9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9fc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca02:	e8 7f 56 ff ff       	call   c0012086 <VAS::mapOtherVASIn(bool, VAS*)>
c001ca07:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ca0b:	c1 e7 0c             	shl    edi,0xc
c001ca0e:	01 df                	add    edi,ebx
c001ca10:	83 c4 10             	add    esp,0x10
c001ca13:	39 fb                	cmp    ebx,edi
c001ca15:	74 61                	je     c001ca78 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001ca17:	e8 9b 34 ff ff       	call   c000feb7 <Phys::allocatePage()>
c001ca1c:	6a 07                	push   0x7
c001ca1e:	89 c5                	mov    ebp,eax
c001ca20:	56                   	push   esi
c001ca21:	50                   	push   eax
c001ca22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca27:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca2a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca30:	e8 e7 57 ff ff       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca35:	58                   	pop    eax
c001ca36:	5a                   	pop    edx
c001ca37:	68 07 0c 00 00       	push   0xc07
c001ca3c:	53                   	push   ebx
c001ca3d:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ca43:	55                   	push   ebp
c001ca44:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca4b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca51:	6a 00                	push   0x0
c001ca53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca58:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca5b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca61:	e8 70 5b ff ff       	call   c00125d6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca66:	83 c4 1c             	add    esp,0x1c
c001ca69:	68 00 10 00 00       	push   0x1000
c001ca6e:	6a 00                	push   0x0
c001ca70:	56                   	push   esi
c001ca71:	e8 0a 3d fe ff       	call   c0000780 <memset>
c001ca76:	eb 98                	jmp    c001ca10 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001ca78:	e8 b1 13 00 00       	call   c001de2e <unlockScheduler()>
c001ca7d:	83 ec 0c             	sub    esp,0xc
c001ca80:	56                   	push   esi
c001ca81:	e8 2f 54 ff ff       	call   c0011eb5 <Virt::freeKernelVirtualPages(unsigned long)>
c001ca86:	83 c4 10             	add    esp,0x10
c001ca89:	b0 01                	mov    al,0x1
c001ca8b:	81 c4 2c 10 00 00    	add    esp,0x102c
c001ca91:	5b                   	pop    ebx
c001ca92:	5e                   	pop    esi
c001ca93:	5f                   	pop    edi
c001ca94:	5d                   	pop    ebp
c001ca95:	c3                   	ret    

c001ca96 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001ca96:	55                   	push   ebp
c001ca97:	57                   	push   edi
c001ca98:	56                   	push   esi
c001ca99:	53                   	push   ebx
c001ca9a:	83 ec 48             	sub    esp,0x48
c001ca9d:	68 14 01 00 00       	push   0x114
c001caa2:	e8 a4 2d ff ff       	call   c000f84b <malloc>
c001caa7:	83 c4 0c             	add    esp,0xc
c001caaa:	89 c6                	mov    esi,eax
c001caac:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cab0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cab4:	50                   	push   eax
c001cab5:	e8 68 68 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001caba:	58                   	pop    eax
c001cabb:	5a                   	pop    edx
c001cabc:	6a 01                	push   0x1
c001cabe:	56                   	push   esi
c001cabf:	e8 c2 68 ff ff       	call   c0013386 <File::open(FileOpenMode)>
c001cac4:	83 c4 10             	add    esp,0x10
c001cac7:	85 c0                	test   eax,eax
c001cac9:	0f 85 47 01 00 00    	jne    c001cc16 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cacf:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cad7:	83 ec 0c             	sub    esp,0xc
c001cada:	6a 34                	push   0x34
c001cadc:	e8 6a 2d ff ff       	call   c000f84b <malloc>
c001cae1:	89 c3                	mov    ebx,eax
c001cae3:	58                   	pop    eax
c001cae4:	8b 06                	mov    eax,DWORD PTR [esi]
c001cae6:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001caea:	57                   	push   edi
c001caeb:	53                   	push   ebx
c001caec:	6a 00                	push   0x0
c001caee:	6a 34                	push   0x34
c001caf0:	56                   	push   esi
c001caf1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001caf4:	83 c4 20             	add    esp,0x20
c001caf7:	85 c0                	test   eax,eax
c001caf9:	0f 85 17 01 00 00    	jne    c001cc16 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001caff:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cb05:	0f 85 0b 01 00 00    	jne    c001cc16 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb0b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cb0e:	85 c0                	test   eax,eax
c001cb10:	0f 84 00 01 00 00    	je     c001cc16 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb16:	31 d2                	xor    edx,edx
c001cb18:	55                   	push   ebp
c001cb19:	52                   	push   edx
c001cb1a:	50                   	push   eax
c001cb1b:	56                   	push   esi
c001cb1c:	e8 23 69 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001cb21:	83 c4 10             	add    esp,0x10
c001cb24:	85 c0                	test   eax,eax
c001cb26:	0f 85 ea 00 00 00    	jne    c001cc16 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb2c:	83 ec 0c             	sub    esp,0xc
c001cb2f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cb32:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb36:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cb3a:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb3e:	0f af c2             	imul   eax,edx
c001cb41:	50                   	push   eax
c001cb42:	e8 04 2d ff ff       	call   c000f84b <malloc>
c001cb47:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb49:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb4d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb50:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb54:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb58:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb5c:	0f af c2             	imul   eax,edx
c001cb5f:	99                   	cdq    
c001cb60:	52                   	push   edx
c001cb61:	50                   	push   eax
c001cb62:	56                   	push   esi
c001cb63:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb66:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cb69:	83 c4 20             	add    esp,0x20
c001cb6c:	85 c0                	test   eax,eax
c001cb6e:	0f 84 a2 00 00 00    	je     c001cc16 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb74:	31 d2                	xor    edx,edx
c001cb76:	51                   	push   ecx
c001cb77:	52                   	push   edx
c001cb78:	50                   	push   eax
c001cb79:	56                   	push   esi
c001cb7a:	e8 c5 68 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001cb7f:	83 c4 10             	add    esp,0x10
c001cb82:	85 c0                	test   eax,eax
c001cb84:	0f 85 8c 00 00 00    	jne    c001cc16 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb8a:	83 ec 0c             	sub    esp,0xc
c001cb8d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb91:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb95:	31 ed                	xor    ebp,ebp
c001cb97:	0f af c2             	imul   eax,edx
c001cb9a:	50                   	push   eax
c001cb9b:	e8 ab 2c ff ff       	call   c000f84b <malloc>
c001cba0:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cba2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cba6:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cba9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbad:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cbb1:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cbb5:	0f af c2             	imul   eax,edx
c001cbb8:	99                   	cdq    
c001cbb9:	52                   	push   edx
c001cbba:	50                   	push   eax
c001cbbb:	56                   	push   esi
c001cbbc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbbf:	83 c4 20             	add    esp,0x20
c001cbc2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cbca:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cbce:	0f 86 80 00 00 00    	jbe    c001cc54 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cbd4:	0f b7 fd             	movzx  edi,bp
c001cbd7:	c1 e7 05             	shl    edi,0x5
c001cbda:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cbde:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cbe1:	75 6b                	jne    c001cc4e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cbe3:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cbe6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cbea:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cbed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cbf1:	52                   	push   edx
c001cbf2:	31 d2                	xor    edx,edx
c001cbf4:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cbf7:	52                   	push   edx
c001cbf8:	50                   	push   eax
c001cbf9:	56                   	push   esi
c001cbfa:	e8 45 68 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001cbff:	83 c4 10             	add    esp,0x10
c001cc02:	85 c0                	test   eax,eax
c001cc04:	74 17                	je     c001cc1d <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cc06:	83 ec 0c             	sub    esp,0xc
c001cc09:	68 d6 c2 02 c0       	push   0xc002c2d6
c001cc0e:	e8 b0 61 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001cc13:	83 c4 10             	add    esp,0x10
c001cc16:	31 c0                	xor    eax,eax
c001cc18:	e9 87 00 00 00       	jmp    c001cca4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cc1d:	83 ec 0c             	sub    esp,0xc
c001cc20:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cc23:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cc26:	50                   	push   eax
c001cc27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cc2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc2f:	56                   	push   esi
c001cc30:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cc34:	e8 cb fb ff ff       	call   c001c804 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cc39:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc3d:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cc41:	83 c4 20             	add    esp,0x20
c001cc44:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cc48:	73 04                	jae    c001cc4e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc4a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc4e:	45                   	inc    ebp
c001cc4f:	e9 76 ff ff ff       	jmp    c001cbca <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cc54:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cc58:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc60:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cc66:	83 ec 0c             	sub    esp,0xc
c001cc69:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cc6f:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cc74:	05 00 10 00 00       	add    eax,0x1000
c001cc79:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cc7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc80:	e8 d6 2b ff ff       	call   c000f85b <free>
c001cc85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc88:	e8 ce 2b ff ff       	call   c000f85b <free>
c001cc8d:	58                   	pop    eax
c001cc8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc92:	e8 c4 2b ff ff       	call   c000f85b <free>
c001cc97:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc9a:	e8 45 67 ff ff       	call   c00133e4 <File::close()>
c001cc9f:	83 c4 10             	add    esp,0x10
c001cca2:	b0 01                	mov    al,0x1
c001cca4:	83 c4 3c             	add    esp,0x3c
c001cca7:	5b                   	pop    ebx
c001cca8:	5e                   	pop    esi
c001cca9:	5f                   	pop    edi
c001ccaa:	5d                   	pop    ebp
c001ccab:	c3                   	ret    

c001ccac <Thr::runtimeReferenceHelper()>:
c001ccac:	83 ec 18             	sub    esp,0x18
c001ccaf:	68 de c2 02 c0       	push   0xc002c2de
c001ccb4:	e8 0a 61 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001ccb9:	fa                   	cli    
c001ccba:	83 c4 10             	add    esp,0x10
c001ccbd:	eb fe                	jmp    c001ccbd <Thr::runtimeReferenceHelper()+0x11>

c001ccbf <Thr::getAddressOfKernelSymbol(char const*)>:
c001ccbf:	57                   	push   edi
c001ccc0:	56                   	push   esi
c001ccc1:	53                   	push   ebx
c001ccc2:	31 db                	xor    ebx,ebx
c001ccc4:	39 1d 40 1c 03 c0    	cmp    DWORD PTR ds:0xc0031c40,ebx
c001ccca:	7e 3c                	jle    c001cd08 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cccc:	8b 34 9d c0 1b 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce440]
c001ccd3:	31 ff                	xor    edi,edi
c001ccd5:	39 3c 9d c0 1a 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce540],edi
c001ccdc:	7e 27                	jle    c001cd05 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001ccde:	50                   	push   eax
c001ccdf:	50                   	push   eax
c001cce0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cce4:	8b 06                	mov    eax,DWORD PTR [esi]
c001cce6:	03 04 9d 40 1b 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce4c0]
c001cced:	50                   	push   eax
c001ccee:	e8 d5 3b fe ff       	call   c00008c8 <strcmp>
c001ccf3:	83 c4 10             	add    esp,0x10
c001ccf6:	85 c0                	test   eax,eax
c001ccf8:	75 05                	jne    c001ccff <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001ccfa:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001ccfd:	eb 0b                	jmp    c001cd0a <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001ccff:	83 c6 10             	add    esi,0x10
c001cd02:	47                   	inc    edi
c001cd03:	eb d0                	jmp    c001ccd5 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cd05:	43                   	inc    ebx
c001cd06:	eb bc                	jmp    c001ccc4 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cd08:	31 c0                	xor    eax,eax
c001cd0a:	5b                   	pop    ebx
c001cd0b:	5e                   	pop    esi
c001cd0c:	5f                   	pop    edi
c001cd0d:	c3                   	ret    

c001cd0e <Thr::loadKernelSymbolTable(char const*)>:
c001cd0e:	55                   	push   ebp
c001cd0f:	57                   	push   edi
c001cd10:	56                   	push   esi
c001cd11:	53                   	push   ebx
c001cd12:	83 ec 68             	sub    esp,0x68
c001cd15:	8b 35 94 1c 03 c0    	mov    esi,DWORD PTR ds:0xc0031c94
c001cd1b:	68 14 01 00 00       	push   0x114
c001cd20:	e8 26 2b ff ff       	call   c000f84b <malloc>
c001cd25:	83 c4 0c             	add    esp,0xc
c001cd28:	89 c3                	mov    ebx,eax
c001cd2a:	56                   	push   esi
c001cd2b:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cd2f:	50                   	push   eax
c001cd30:	e8 ed 65 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001cd35:	5e                   	pop    esi
c001cd36:	5f                   	pop    edi
c001cd37:	6a 01                	push   0x1
c001cd39:	53                   	push   ebx
c001cd3a:	e8 47 66 ff ff       	call   c0013386 <File::open(FileOpenMode)>
c001cd3f:	83 c4 10             	add    esp,0x10
c001cd42:	85 c0                	test   eax,eax
c001cd44:	74 0a                	je     c001cd50 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cd46:	83 ec 0c             	sub    esp,0xc
c001cd49:	68 00 c3 02 c0       	push   0xc002c300
c001cd4e:	eb 34                	jmp    c001cd84 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cd50:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cd58:	83 ec 0c             	sub    esp,0xc
c001cd5b:	6a 34                	push   0x34
c001cd5d:	e8 e9 2a ff ff       	call   c000f84b <malloc>
c001cd62:	59                   	pop    ecx
c001cd63:	89 c7                	mov    edi,eax
c001cd65:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cd69:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd6b:	56                   	push   esi
c001cd6c:	57                   	push   edi
c001cd6d:	6a 00                	push   0x0
c001cd6f:	6a 34                	push   0x34
c001cd71:	53                   	push   ebx
c001cd72:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd75:	83 c4 20             	add    esp,0x20
c001cd78:	85 c0                	test   eax,eax
c001cd7a:	74 17                	je     c001cd93 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cd7c:	83 ec 0c             	sub    esp,0xc
c001cd7f:	68 17 c3 02 c0       	push   0xc002c317
c001cd84:	e8 06 d8 ff ff       	call   c001a58f <Krnl::panic(char const*)>
c001cd89:	83 c4 10             	add    esp,0x10
c001cd8c:	31 c0                	xor    eax,eax
c001cd8e:	e9 31 02 00 00       	jmp    c001cfc4 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cd93:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cd99:	75 e1                	jne    c001cd7c <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd9b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cd9e:	85 c0                	test   eax,eax
c001cda0:	74 da                	je     c001cd7c <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cda2:	52                   	push   edx
c001cda3:	31 d2                	xor    edx,edx
c001cda5:	52                   	push   edx
c001cda6:	50                   	push   eax
c001cda7:	53                   	push   ebx
c001cda8:	e8 97 66 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001cdad:	83 c4 10             	add    esp,0x10
c001cdb0:	85 c0                	test   eax,eax
c001cdb2:	75 c8                	jne    c001cd7c <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cdb4:	83 ec 0c             	sub    esp,0xc
c001cdb7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cdbb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdbf:	31 ed                	xor    ebp,ebp
c001cdc1:	0f af c2             	imul   eax,edx
c001cdc4:	50                   	push   eax
c001cdc5:	e8 81 2a ff ff       	call   c000f84b <malloc>
c001cdca:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cdcc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cdd0:	89 34 24             	mov    DWORD PTR [esp],esi
c001cdd3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cdd7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cddb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cddf:	0f af c2             	imul   eax,edx
c001cde2:	99                   	cdq    
c001cde3:	52                   	push   edx
c001cde4:	50                   	push   eax
c001cde5:	53                   	push   ebx
c001cde6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cde9:	83 c4 20             	add    esp,0x20
c001cdec:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cdf4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cdfc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ce04:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ce0c:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ce10:	0f 86 aa 00 00 00    	jbe    c001cec0 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001ce16:	0f b7 f5             	movzx  esi,bp
c001ce19:	6b f6 28             	imul   esi,esi,0x28
c001ce1c:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ce20:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ce23:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce27:	50                   	push   eax
c001ce28:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce2c:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ce30:	8b 16                	mov    edx,DWORD PTR [esi]
c001ce32:	6b c0 28             	imul   eax,eax,0x28
c001ce35:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ce39:	89 d0                	mov    eax,edx
c001ce3b:	31 d2                	xor    edx,edx
c001ce3d:	52                   	push   edx
c001ce3e:	50                   	push   eax
c001ce3f:	53                   	push   ebx
c001ce40:	e8 ff 65 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001ce45:	83 c4 0c             	add    esp,0xc
c001ce48:	6a 20                	push   0x20
c001ce4a:	6a 00                	push   0x0
c001ce4c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce50:	52                   	push   edx
c001ce51:	e8 2a 39 fe ff       	call   c0000780 <memset>
c001ce56:	58                   	pop    eax
c001ce57:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce59:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ce5d:	51                   	push   ecx
c001ce5e:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ce62:	52                   	push   edx
c001ce63:	6a 00                	push   0x0
c001ce65:	6a 1f                	push   0x1f
c001ce67:	53                   	push   ebx
c001ce68:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce6b:	83 c4 18             	add    esp,0x18
c001ce6e:	68 2e c3 02 c0       	push   0xc002c32e
c001ce73:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce77:	52                   	push   edx
c001ce78:	e8 4b 3a fe ff       	call   c00008c8 <strcmp>
c001ce7d:	83 c4 10             	add    esp,0x10
c001ce80:	85 c0                	test   eax,eax
c001ce82:	75 0f                	jne    c001ce93 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001ce84:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ce8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce93:	50                   	push   eax
c001ce94:	50                   	push   eax
c001ce95:	68 36 c3 02 c0       	push   0xc002c336
c001ce9a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ce9e:	50                   	push   eax
c001ce9f:	e8 24 3a fe ff       	call   c00008c8 <strcmp>
c001cea4:	83 c4 10             	add    esp,0x10
c001cea7:	85 c0                	test   eax,eax
c001cea9:	75 0f                	jne    c001ceba <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001ceab:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ceae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ceb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ceb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ceba:	45                   	inc    ebp
c001cebb:	e9 4c ff ff ff       	jmp    c001ce0c <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cec0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cec5:	75 10                	jne    c001ced7 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cec7:	83 ec 0c             	sub    esp,0xc
c001ceca:	68 3e c3 02 c0       	push   0xc002c33e
c001cecf:	e8 bb d6 ff ff       	call   c001a58f <Krnl::panic(char const*)>
c001ced4:	83 c4 10             	add    esp,0x10
c001ced7:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cedc:	75 10                	jne    c001ceee <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cede:	83 ec 0c             	sub    esp,0xc
c001cee1:	68 3e c3 02 c0       	push   0xc002c33e
c001cee6:	e8 a4 d6 ff ff       	call   c001a58f <Krnl::panic(char const*)>
c001ceeb:	83 c4 10             	add    esp,0x10
c001ceee:	31 d2                	xor    edx,edx
c001cef0:	50                   	push   eax
c001cef1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cef5:	52                   	push   edx
c001cef6:	50                   	push   eax
c001cef7:	53                   	push   ebx
c001cef8:	e8 47 65 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001cefd:	5a                   	pop    edx
c001cefe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cf02:	e8 44 29 ff ff       	call   c000f84b <malloc>
c001cf07:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cf0b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cf0f:	31 c9                	xor    ecx,ecx
c001cf11:	5e                   	pop    esi
c001cf12:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf14:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cf18:	55                   	push   ebp
c001cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf1d:	51                   	push   ecx
c001cf1e:	52                   	push   edx
c001cf1f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cf23:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cf27:	53                   	push   ebx
c001cf28:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf2b:	83 c4 14             	add    esp,0x14
c001cf2e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf32:	e8 14 29 ff ff       	call   c000f84b <malloc>
c001cf37:	89 c6                	mov    esi,eax
c001cf39:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf3b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf3e:	56                   	push   esi
c001cf3f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cf43:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cf47:	51                   	push   ecx
c001cf48:	52                   	push   edx
c001cf49:	53                   	push   ebx
c001cf4a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf4d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf51:	8b 15 40 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c40
c001cf57:	83 c4 1c             	add    esp,0x1c
c001cf5a:	c1 e8 04             	shr    eax,0x4
c001cf5d:	89 04 95 c0 1a 03 c0 	mov    DWORD PTR [edx*4-0x3ffce540],eax
c001cf64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf68:	31 d2                	xor    edx,edx
c001cf6a:	52                   	push   edx
c001cf6b:	50                   	push   eax
c001cf6c:	53                   	push   ebx
c001cf6d:	e8 d2 64 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001cf72:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cf74:	31 d2                	xor    edx,edx
c001cf76:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf79:	56                   	push   esi
c001cf7a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cf7e:	52                   	push   edx
c001cf7f:	50                   	push   eax
c001cf80:	53                   	push   ebx
c001cf81:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf84:	83 c4 14             	add    esp,0x14
c001cf87:	53                   	push   ebx
c001cf88:	e8 57 64 ff ff       	call   c00133e4 <File::close()>
c001cf8d:	5d                   	pop    ebp
c001cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf92:	e8 c4 28 ff ff       	call   c000f85b <free>
c001cf97:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf9a:	e8 bc 28 ff ff       	call   c000f85b <free>
c001cf9f:	a1 40 1c 03 c0       	mov    eax,ds:0xc0031c40
c001cfa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cfa8:	8d 50 01             	lea    edx,[eax+0x1]
c001cfab:	89 0c 85 c0 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce440],ecx
c001cfb2:	89 34 85 40 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4c0],esi
c001cfb9:	89 15 40 1c 03 c0    	mov    DWORD PTR ds:0xc0031c40,edx
c001cfbf:	83 c4 10             	add    esp,0x10
c001cfc2:	b0 01                	mov    al,0x1
c001cfc4:	83 c4 5c             	add    esp,0x5c
c001cfc7:	5b                   	pop    ebx
c001cfc8:	5e                   	pop    esi
c001cfc9:	5f                   	pop    edi
c001cfca:	5d                   	pop    ebp
c001cfcb:	c3                   	ret    

c001cfcc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cfcc:	55                   	push   ebp
c001cfcd:	57                   	push   edi
c001cfce:	56                   	push   esi
c001cfcf:	53                   	push   ebx
c001cfd0:	81 ec 68 03 00 00    	sub    esp,0x368
c001cfd6:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cfdd:	8b 1d 94 1c 03 c0    	mov    ebx,DWORD PTR ds:0xc0031c94
c001cfe3:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cfe7:	68 14 01 00 00       	push   0x114
c001cfec:	e8 5a 28 ff ff       	call   c000f84b <malloc>
c001cff1:	83 c4 0c             	add    esp,0xc
c001cff4:	89 c5                	mov    ebp,eax
c001cff6:	53                   	push   ebx
c001cff7:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cffe:	50                   	push   eax
c001cfff:	e8 1e 63 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001d004:	5e                   	pop    esi
c001d005:	5f                   	pop    edi
c001d006:	6a 01                	push   0x1
c001d008:	55                   	push   ebp
c001d009:	e8 78 63 ff ff       	call   c0013386 <File::open(FileOpenMode)>
c001d00e:	83 c4 10             	add    esp,0x10
c001d011:	85 c0                	test   eax,eax
c001d013:	0f 85 a7 06 00 00    	jne    c001d6c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d019:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d021:	83 ec 0c             	sub    esp,0xc
c001d024:	6a 34                	push   0x34
c001d026:	e8 20 28 ff ff       	call   c000f84b <malloc>
c001d02b:	5b                   	pop    ebx
c001d02c:	89 c7                	mov    edi,eax
c001d02e:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d032:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d035:	53                   	push   ebx
c001d036:	57                   	push   edi
c001d037:	6a 00                	push   0x0
c001d039:	6a 34                	push   0x34
c001d03b:	55                   	push   ebp
c001d03c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d03f:	83 c4 20             	add    esp,0x20
c001d042:	85 c0                	test   eax,eax
c001d044:	0f 85 76 06 00 00    	jne    c001d6c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d04a:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d050:	0f 85 6a 06 00 00    	jne    c001d6c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d056:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d059:	85 c0                	test   eax,eax
c001d05b:	0f 84 5f 06 00 00    	je     c001d6c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d061:	31 d2                	xor    edx,edx
c001d063:	51                   	push   ecx
c001d064:	52                   	push   edx
c001d065:	50                   	push   eax
c001d066:	55                   	push   ebp
c001d067:	e8 d8 63 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001d06c:	83 c4 10             	add    esp,0x10
c001d06f:	85 c0                	test   eax,eax
c001d071:	0f 85 49 06 00 00    	jne    c001d6c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d077:	83 ec 0c             	sub    esp,0xc
c001d07a:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d07d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d081:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d085:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d089:	0f af c2             	imul   eax,edx
c001d08c:	50                   	push   eax
c001d08d:	e8 b9 27 ff ff       	call   c000f84b <malloc>
c001d092:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d095:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d099:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d09c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d0a0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0a4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0a8:	0f af c2             	imul   eax,edx
c001d0ab:	99                   	cdq    
c001d0ac:	52                   	push   edx
c001d0ad:	50                   	push   eax
c001d0ae:	55                   	push   ebp
c001d0af:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0b2:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d0b5:	83 c4 20             	add    esp,0x20
c001d0b8:	85 c0                	test   eax,eax
c001d0ba:	0f 84 00 06 00 00    	je     c001d6c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d0c0:	52                   	push   edx
c001d0c1:	31 d2                	xor    edx,edx
c001d0c3:	52                   	push   edx
c001d0c4:	50                   	push   eax
c001d0c5:	55                   	push   ebp
c001d0c6:	e8 79 63 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001d0cb:	83 c4 10             	add    esp,0x10
c001d0ce:	85 c0                	test   eax,eax
c001d0d0:	0f 85 ea 05 00 00    	jne    c001d6c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d0d6:	83 ec 0c             	sub    esp,0xc
c001d0d9:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0dd:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d0e1:	31 f6                	xor    esi,esi
c001d0e3:	0f af c2             	imul   eax,edx
c001d0e6:	50                   	push   eax
c001d0e7:	e8 5f 27 ff ff       	call   c000f84b <malloc>
c001d0ec:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0ef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d0f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d0fa:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0fe:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d102:	0f af c2             	imul   eax,edx
c001d105:	99                   	cdq    
c001d106:	52                   	push   edx
c001d107:	50                   	push   eax
c001d108:	55                   	push   ebp
c001d109:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d10c:	83 c4 20             	add    esp,0x20
c001d10f:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d113:	0f 86 8a 00 00 00    	jbe    c001d1a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d119:	0f b7 de             	movzx  ebx,si
c001d11c:	c1 e3 05             	shl    ebx,0x5
c001d11f:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d123:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d126:	75 75                	jne    c001d19d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d128:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d12b:	31 d2                	xor    edx,edx
c001d12d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d131:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d134:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d138:	50                   	push   eax
c001d139:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d13c:	52                   	push   edx
c001d13d:	50                   	push   eax
c001d13e:	55                   	push   ebp
c001d13f:	e8 00 63 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001d144:	83 c4 10             	add    esp,0x10
c001d147:	85 c0                	test   eax,eax
c001d149:	0f 85 71 05 00 00    	jne    c001d6c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d14f:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d156:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d159:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d15d:	31 d2                	xor    edx,edx
c001d15f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d163:	83 ec 0c             	sub    esp,0xc
c001d166:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d16a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d171:	50                   	push   eax
c001d172:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d176:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d17a:	52                   	push   edx
c001d17b:	50                   	push   eax
c001d17c:	55                   	push   ebp
c001d17d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d180:	83 c4 1c             	add    esp,0x1c
c001d183:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d186:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d189:	50                   	push   eax
c001d18a:	6a 00                	push   0x0
c001d18c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d190:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d194:	50                   	push   eax
c001d195:	e8 e6 35 fe ff       	call   c0000780 <memset>
c001d19a:	83 c4 10             	add    esp,0x10
c001d19d:	46                   	inc    esi
c001d19e:	e9 6c ff ff ff       	jmp    c001d10f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d1a3:	53                   	push   ebx
c001d1a4:	31 db                	xor    ebx,ebx
c001d1a6:	68 00 01 00 00       	push   0x100
c001d1ab:	6a 00                	push   0x0
c001d1ad:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d1b1:	50                   	push   eax
c001d1b2:	e8 c9 35 fe ff       	call   c0000780 <memset>
c001d1b7:	83 c4 0c             	add    esp,0xc
c001d1ba:	68 00 01 00 00       	push   0x100
c001d1bf:	6a 00                	push   0x0
c001d1c1:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d1c8:	50                   	push   eax
c001d1c9:	e8 b2 35 fe ff       	call   c0000780 <memset>
c001d1ce:	83 c4 10             	add    esp,0x10
c001d1d1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d1d9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d1e1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d1e9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d1f1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d1f9:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d1fd:	0f 86 30 01 00 00    	jbe    c001d333 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d203:	0f b7 f3             	movzx  esi,bx
c001d206:	6b f6 28             	imul   esi,esi,0x28
c001d209:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d20d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d210:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d214:	52                   	push   edx
c001d215:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d219:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d21d:	8b 06                	mov    eax,DWORD PTR [esi]
c001d21f:	6b d2 28             	imul   edx,edx,0x28
c001d222:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d226:	31 d2                	xor    edx,edx
c001d228:	52                   	push   edx
c001d229:	50                   	push   eax
c001d22a:	55                   	push   ebp
c001d22b:	e8 14 62 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001d230:	83 c4 0c             	add    esp,0xc
c001d233:	6a 20                	push   0x20
c001d235:	6a 00                	push   0x0
c001d237:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d23e:	51                   	push   ecx
c001d23f:	e8 3c 35 fe ff       	call   c0000780 <memset>
c001d244:	59                   	pop    ecx
c001d245:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d248:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d24c:	52                   	push   edx
c001d24d:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d254:	51                   	push   ecx
c001d255:	6a 00                	push   0x0
c001d257:	6a 1f                	push   0x1f
c001d259:	55                   	push   ebp
c001d25a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d25d:	83 c4 1c             	add    esp,0x1c
c001d260:	6a 09                	push   0x9
c001d262:	68 58 c3 02 c0       	push   0xc002c358
c001d267:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d26e:	51                   	push   ecx
c001d26f:	e8 d4 33 fe ff       	call   c0000648 <memcmp>
c001d274:	83 c4 10             	add    esp,0x10
c001d277:	85 c0                	test   eax,eax
c001d279:	75 21                	jne    c001d29c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d27b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d27f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d283:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d287:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d28b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d28e:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d295:	89 d0                	mov    eax,edx
c001d297:	40                   	inc    eax
c001d298:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d29c:	50                   	push   eax
c001d29d:	6a 09                	push   0x9
c001d29f:	68 62 c3 02 c0       	push   0xc002c362
c001d2a4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2ab:	50                   	push   eax
c001d2ac:	e8 97 33 fe ff       	call   c0000648 <memcmp>
c001d2b1:	83 c4 10             	add    esp,0x10
c001d2b4:	85 c0                	test   eax,eax
c001d2b6:	75 21                	jne    c001d2d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d2b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d2c0:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d2c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d2c8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2cb:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d2d2:	89 d0                	mov    eax,edx
c001d2d4:	40                   	inc    eax
c001d2d5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2d9:	50                   	push   eax
c001d2da:	50                   	push   eax
c001d2db:	68 2e c3 02 c0       	push   0xc002c32e
c001d2e0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2e7:	50                   	push   eax
c001d2e8:	e8 db 35 fe ff       	call   c00008c8 <strcmp>
c001d2ed:	83 c4 10             	add    esp,0x10
c001d2f0:	85 c0                	test   eax,eax
c001d2f2:	75 0f                	jne    c001d303 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d2f4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d2fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d303:	50                   	push   eax
c001d304:	50                   	push   eax
c001d305:	68 36 c3 02 c0       	push   0xc002c336
c001d30a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d311:	50                   	push   eax
c001d312:	e8 b1 35 fe ff       	call   c00008c8 <strcmp>
c001d317:	83 c4 10             	add    esp,0x10
c001d31a:	85 c0                	test   eax,eax
c001d31c:	75 0f                	jne    c001d32d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d31e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d321:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d325:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d329:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d32d:	43                   	inc    ebx
c001d32e:	e9 c6 fe ff ff       	jmp    c001d1f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d333:	31 d2                	xor    edx,edx
c001d335:	50                   	push   eax
c001d336:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d33a:	52                   	push   edx
c001d33b:	50                   	push   eax
c001d33c:	55                   	push   ebp
c001d33d:	e8 02 61 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001d342:	58                   	pop    eax
c001d343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d347:	e8 ff 24 ff ff       	call   c000f84b <malloc>
c001d34c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d34f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d353:	31 d2                	xor    edx,edx
c001d355:	58                   	pop    eax
c001d356:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d35a:	53                   	push   ebx
c001d35b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d35f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d363:	52                   	push   edx
c001d364:	50                   	push   eax
c001d365:	55                   	push   ebp
c001d366:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d369:	83 c4 14             	add    esp,0x14
c001d36c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d370:	e8 d6 24 ff ff       	call   c000f84b <malloc>
c001d375:	31 d2                	xor    edx,edx
c001d377:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d37b:	83 c4 0c             	add    esp,0xc
c001d37e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d382:	52                   	push   edx
c001d383:	50                   	push   eax
c001d384:	55                   	push   ebp
c001d385:	e8 ba 60 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001d38a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d38d:	31 d2                	xor    edx,edx
c001d38f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d392:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d396:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d39a:	52                   	push   edx
c001d39b:	50                   	push   eax
c001d39c:	55                   	push   ebp
c001d39d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3a0:	83 c4 20             	add    esp,0x20
c001d3a3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d3ab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d3af:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d3b3:	0f 84 0b 03 00 00    	je     c001d6c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d3b9:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d3c0:	31 d2                	xor    edx,edx
c001d3c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d3c6:	c1 e8 03             	shr    eax,0x3
c001d3c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d3cd:	51                   	push   ecx
c001d3ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d3d2:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d3d6:	52                   	push   edx
c001d3d7:	50                   	push   eax
c001d3d8:	55                   	push   ebp
c001d3d9:	e8 66 60 ff ff       	call   c0013444 <File::seek(unsigned long long)>
c001d3de:	5b                   	pop    ebx
c001d3df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3e3:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d3ea:	e8 5c 24 ff ff       	call   c000f84b <malloc>
c001d3ef:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d3f6:	31 d2                	xor    edx,edx
c001d3f8:	5e                   	pop    esi
c001d3f9:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d3fd:	50                   	push   eax
c001d3fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d402:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d406:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d40d:	52                   	push   edx
c001d40e:	50                   	push   eax
c001d40f:	55                   	push   ebp
c001d410:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d413:	83 c4 20             	add    esp,0x20
c001d416:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d41e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d422:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d426:	0f 8d 7c 02 00 00    	jge    c001d6a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d42c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d434:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d439:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d43c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d440:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d444:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d448:	89 d8                	mov    eax,ebx
c001d44a:	c1 e8 08             	shr    eax,0x8
c001d44d:	89 c6                	mov    esi,eax
c001d44f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d453:	c1 e6 04             	shl    esi,0x4
c001d456:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d45a:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d45d:	85 d2                	test   edx,edx
c001d45f:	0f 85 bf 00 00 00    	jne    c001d524 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d465:	83 ec 0c             	sub    esp,0xc
c001d468:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d46c:	03 06                	add    eax,DWORD PTR [esi]
c001d46e:	50                   	push   eax
c001d46f:	e8 4b f8 ff ff       	call   c001ccbf <Thr::getAddressOfKernelSymbol(char const*)>
c001d474:	83 c4 10             	add    esp,0x10
c001d477:	89 c2                	mov    edx,eax
c001d479:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d47e:	85 c0                	test   eax,eax
c001d480:	0f 85 9e 00 00 00    	jne    c001d524 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d486:	83 ec 0c             	sub    esp,0xc
c001d489:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d48d:	03 06                	add    eax,DWORD PTR [esi]
c001d48f:	50                   	push   eax
c001d490:	e8 68 10 ff ff       	call   c000e4fd <Krnl::resolveCompatibilitySymbol(char*)>
c001d495:	83 c4 10             	add    esp,0x10
c001d498:	89 c2                	mov    edx,eax
c001d49a:	85 c0                	test   eax,eax
c001d49c:	0f 85 82 00 00 00    	jne    c001d524 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4a2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d4a6:	50                   	push   eax
c001d4a7:	50                   	push   eax
c001d4a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4ac:	03 06                	add    eax,DWORD PTR [esi]
c001d4ae:	50                   	push   eax
c001d4af:	68 6c c3 02 c0       	push   0xc002c36c
c001d4b4:	e8 0a 59 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001d4b9:	58                   	pop    eax
c001d4ba:	5a                   	pop    edx
c001d4bb:	68 86 c3 02 c0       	push   0xc002c386
c001d4c0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4c7:	50                   	push   eax
c001d4c8:	e8 6f 33 fe ff       	call   c000083c <strcpy>
c001d4cd:	59                   	pop    ecx
c001d4ce:	58                   	pop    eax
c001d4cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4d3:	03 06                	add    eax,DWORD PTR [esi]
c001d4d5:	50                   	push   eax
c001d4d6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4dd:	50                   	push   eax
c001d4de:	e8 99 34 fe ff       	call   c000097c <strcat>
c001d4e3:	58                   	pop    eax
c001d4e4:	5a                   	pop    edx
c001d4e5:	68 1c c4 02 c0       	push   0xc002c41c
c001d4ea:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4f1:	50                   	push   eax
c001d4f2:	e8 85 34 fe ff       	call   c000097c <strcat>
c001d4f7:	83 c4 10             	add    esp,0x10
c001d4fa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4ff:	0f 84 5d 01 00 00    	je     c001d662 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d505:	83 ec 0c             	sub    esp,0xc
c001d508:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d50f:	50                   	push   eax
c001d510:	e8 7a d0 ff ff       	call   c001a58f <Krnl::panic(char const*)>
c001d515:	83 c4 10             	add    esp,0x10
c001d518:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d51c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d520:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d524:	80 fb 01             	cmp    bl,0x1
c001d527:	0f 85 88 00 00 00    	jne    c001d5b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d52d:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d534:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d538:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d53c:	01 ce                	add    esi,ecx
c001d53e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d544:	0f 94 c0             	sete   al
c001d547:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d54d:	0f 94 c3             	sete   bl
c001d550:	09 c3                	or     ebx,eax
c001d552:	8b 06                	mov    eax,DWORD PTR [esi]
c001d554:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d559:	74 41                	je     c001d59c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d55b:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d55e:	84 db                	test   bl,bl
c001d560:	75 15                	jne    c001d577 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d562:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d566:	66 83 f8 0c          	cmp    ax,0xc
c001d56a:	76 05                	jbe    c001d571 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d56c:	b8 0c 00 00 00       	mov    eax,0xc
c001d571:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d575:	76 37                	jbe    c001d5ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d577:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d57b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d580:	0f 84 dc 00 00 00    	je     c001d662 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d586:	83 ec 0c             	sub    esp,0xc
c001d589:	68 9d c3 02 c0       	push   0xc002c39d
c001d58e:	e8 fc cf ff ff       	call   c001a58f <Krnl::panic(char const*)>
c001d593:	83 c4 10             	add    esp,0x10
c001d596:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d59a:	eb 12                	jmp    c001d5ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d59c:	01 c1                	add    ecx,eax
c001d59e:	84 db                	test   bl,bl
c001d5a0:	75 0c                	jne    c001d5ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d5a2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5a6:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5aa:	77 02                	ja     c001d5ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d5ac:	01 d1                	add    ecx,edx
c001d5ae:	89 0e                	mov    DWORD PTR [esi],ecx
c001d5b0:	e9 ea 00 00 00       	jmp    c001d69f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d5b5:	80 fb 02             	cmp    bl,0x2
c001d5b8:	75 7c                	jne    c001d636 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d5ba:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d5c1:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d5c5:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d5c9:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d5cf:	74 20                	je     c001d5f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d5d1:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d5d7:	74 18                	je     c001d5f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d5d9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5dd:	b9 0a 00 00 00       	mov    ecx,0xa
c001d5e2:	66 83 f8 0e          	cmp    ax,0xe
c001d5e6:	77 03                	ja     c001d5eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d5e8:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d5eb:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d5ef:	76 1f                	jbe    c001d610 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d5f1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d5f5:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5fa:	74 66                	je     c001d662 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d5fc:	83 ec 0c             	sub    esp,0xc
c001d5ff:	68 b9 c3 02 c0       	push   0xc002c3b9
c001d604:	e8 86 cf ff ff       	call   c001a58f <Krnl::panic(char const*)>
c001d609:	83 c4 10             	add    esp,0x10
c001d60c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d610:	8b 06                	mov    eax,DWORD PTR [esi]
c001d612:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d617:	74 13                	je     c001d62c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d619:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d61d:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d624:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d628:	01 c8                	add    eax,ecx
c001d62a:	eb 04                	jmp    c001d630 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d62c:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d630:	01 c2                	add    edx,eax
c001d632:	89 16                	mov    DWORD PTR [esi],edx
c001d634:	eb 69                	jmp    c001d69f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d636:	0f b6 db             	movzx  ebx,bl
c001d639:	50                   	push   eax
c001d63a:	50                   	push   eax
c001d63b:	53                   	push   ebx
c001d63c:	68 d5 c3 02 c0       	push   0xc002c3d5
c001d641:	e8 7d 57 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001d646:	83 c4 10             	add    esp,0x10
c001d649:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d64e:	74 12                	je     c001d662 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d650:	83 ec 0c             	sub    esp,0xc
c001d653:	68 e0 c3 02 c0       	push   0xc002c3e0
c001d658:	e8 32 cf ff ff       	call   c001a58f <Krnl::panic(char const*)>
c001d65d:	83 c4 10             	add    esp,0x10
c001d660:	eb 3d                	jmp    c001d69f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d662:	83 ec 0c             	sub    esp,0xc
c001d665:	55                   	push   ebp
c001d666:	e8 79 5d ff ff       	call   c00133e4 <File::close()>
c001d66b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d66e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d671:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d674:	59                   	pop    ecx
c001d675:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d679:	e8 dd 21 ff ff       	call   c000f85b <free>
c001d67e:	5b                   	pop    ebx
c001d67f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d683:	e8 d3 21 ff ff       	call   c000f85b <free>
c001d688:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d68b:	e8 cb 21 ff ff       	call   c000f85b <free>
c001d690:	5e                   	pop    esi
c001d691:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d695:	e8 c1 21 ff ff       	call   c000f85b <free>
c001d69a:	83 c4 10             	add    esp,0x10
c001d69d:	eb 21                	jmp    c001d6c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d69f:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d6a3:	e9 76 fd ff ff       	jmp    c001d41e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d6a8:	83 ec 0c             	sub    esp,0xc
c001d6ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d6af:	e8 a7 21 ff ff       	call   c000f85b <free>
c001d6b4:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d6b8:	83 c4 10             	add    esp,0x10
c001d6bb:	e9 eb fc ff ff       	jmp    c001d3ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d6c0:	31 c0                	xor    eax,eax
c001d6c2:	eb 33                	jmp    c001d6f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d6c4:	83 ec 0c             	sub    esp,0xc
c001d6c7:	55                   	push   ebp
c001d6c8:	e8 17 5d ff ff       	call   c00133e4 <File::close()>
c001d6cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d6d0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d6d3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d6d6:	58                   	pop    eax
c001d6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6db:	e8 7b 21 ff ff       	call   c000f85b <free>
c001d6e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6e3:	e8 73 21 ff ff       	call   c000f85b <free>
c001d6e8:	5a                   	pop    edx
c001d6e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6ed:	e8 69 21 ff ff       	call   c000f85b <free>
c001d6f2:	83 c4 10             	add    esp,0x10
c001d6f5:	b0 01                	mov    al,0x1
c001d6f7:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d6fd:	5b                   	pop    ebx
c001d6fe:	5e                   	pop    esi
c001d6ff:	5f                   	pop    edi
c001d700:	5d                   	pop    ebp
c001d701:	c3                   	ret    

c001d702 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d702:	56                   	push   esi
c001d703:	31 d2                	xor    edx,edx
c001d705:	53                   	push   ebx
c001d706:	8b 1d a0 14 03 c0    	mov    ebx,DWORD PTR ds:0xc00314a0
c001d70c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d710:	39 d3                	cmp    ebx,edx
c001d712:	7e 1b                	jle    c001d72f <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d714:	8b 04 95 c0 16 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffce940]
c001d71b:	39 c8                	cmp    eax,ecx
c001d71d:	77 0d                	ja     c001d72c <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d71f:	8b 34 95 c0 14 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffceb40]
c001d726:	01 c6                	add    esi,eax
c001d728:	39 ce                	cmp    esi,ecx
c001d72a:	77 05                	ja     c001d731 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d72c:	42                   	inc    edx
c001d72d:	eb e1                	jmp    c001d710 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d72f:	31 c0                	xor    eax,eax
c001d731:	5b                   	pop    ebx
c001d732:	5e                   	pop    esi
c001d733:	c3                   	ret    

c001d734 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d734:	53                   	push   ebx
c001d735:	31 c0                	xor    eax,eax
c001d737:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d73b:	8b 1d a0 14 03 c0    	mov    ebx,DWORD PTR ds:0xc00314a0
c001d741:	39 c3                	cmp    ebx,eax
c001d743:	7e 22                	jle    c001d767 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d745:	8b 14 85 c0 16 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce940]
c001d74c:	39 ca                	cmp    edx,ecx
c001d74e:	77 14                	ja     c001d764 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d750:	03 14 85 c0 14 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffceb40]
c001d757:	39 ca                	cmp    edx,ecx
c001d759:	76 09                	jbe    c001d764 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d75b:	8b 04 85 c0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce740]
c001d762:	eb 05                	jmp    c001d769 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d764:	40                   	inc    eax
c001d765:	eb da                	jmp    c001d741 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d767:	31 c0                	xor    eax,eax
c001d769:	5b                   	pop    ebx
c001d76a:	c3                   	ret    

c001d76b <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d76b:	53                   	push   ebx
c001d76c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d770:	53                   	push   ebx
c001d771:	e8 8c ff ff ff       	call   c001d702 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d776:	5a                   	pop    edx
c001d777:	31 d2                	xor    edx,edx
c001d779:	85 c0                	test   eax,eax
c001d77b:	74 04                	je     c001d781 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d77d:	89 da                	mov    edx,ebx
c001d77f:	29 c2                	sub    edx,eax
c001d781:	89 d0                	mov    eax,edx
c001d783:	5b                   	pop    ebx
c001d784:	c3                   	ret    

c001d785 <Thr::loadDLL(char const*, bool)>:
c001d785:	55                   	push   ebp
c001d786:	57                   	push   edi
c001d787:	56                   	push   esi
c001d788:	53                   	push   ebx
c001d789:	81 ec 34 01 00 00    	sub    esp,0x134
c001d78f:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d796:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d79d:	56                   	push   esi
c001d79e:	68 f8 c3 02 c0       	push   0xc002c3f8
c001d7a3:	e8 1b 56 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001d7a8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d7af:	e8 97 20 ff ff       	call   c000f84b <malloc>
c001d7b4:	83 c4 0c             	add    esp,0xc
c001d7b7:	89 c3                	mov    ebx,eax
c001d7b9:	ff 35 94 1c 03 c0    	push   DWORD PTR ds:0xc0031c94
c001d7bf:	56                   	push   esi
c001d7c0:	50                   	push   eax
c001d7c1:	e8 5c 5b ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001d7c6:	83 c4 10             	add    esp,0x10
c001d7c9:	85 db                	test   ebx,ebx
c001d7cb:	75 3c                	jne    c001d809 <Thr::loadDLL(char const*, bool)+0x84>
c001d7cd:	89 e8                	mov    eax,ebp
c001d7cf:	84 c0                	test   al,al
c001d7d1:	0f 84 d5 01 00 00    	je     c001d9ac <Thr::loadDLL(char const*, bool)+0x227>
c001d7d7:	57                   	push   edi
c001d7d8:	57                   	push   edi
c001d7d9:	68 09 c4 02 c0       	push   0xc002c409
c001d7de:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d7e2:	57                   	push   edi
c001d7e3:	e8 54 30 fe ff       	call   c000083c <strcpy>
c001d7e8:	58                   	pop    eax
c001d7e9:	5a                   	pop    edx
c001d7ea:	56                   	push   esi
c001d7eb:	57                   	push   edi
c001d7ec:	e8 8b 31 fe ff       	call   c000097c <strcat>
c001d7f1:	59                   	pop    ecx
c001d7f2:	58                   	pop    eax
c001d7f3:	68 1c c4 02 c0       	push   0xc002c41c
c001d7f8:	57                   	push   edi
c001d7f9:	e8 7e 31 fe ff       	call   c000097c <strcat>
c001d7fe:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d801:	e8 89 cd ff ff       	call   c001a58f <Krnl::panic(char const*)>
c001d806:	83 c4 10             	add    esp,0x10
c001d809:	51                   	push   ecx
c001d80a:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d80e:	50                   	push   eax
c001d80f:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d813:	50                   	push   eax
c001d814:	53                   	push   ebx
c001d815:	e8 18 5e ff ff       	call   c0013632 <File::stat(unsigned long long*, bool*)>
c001d81a:	83 c4 10             	add    esp,0x10
c001d81d:	85 db                	test   ebx,ebx
c001d81f:	74 0c                	je     c001d82d <Thr::loadDLL(char const*, bool)+0xa8>
c001d821:	83 ec 0c             	sub    esp,0xc
c001d824:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d826:	53                   	push   ebx
c001d827:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d82a:	83 c4 10             	add    esp,0x10
c001d82d:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d832:	75 0a                	jne    c001d83e <Thr::loadDLL(char const*, bool)+0xb9>
c001d834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d838:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d83c:	75 3c                	jne    c001d87a <Thr::loadDLL(char const*, bool)+0xf5>
c001d83e:	89 e8                	mov    eax,ebp
c001d840:	84 c0                	test   al,al
c001d842:	0f 84 4c 01 00 00    	je     c001d994 <Thr::loadDLL(char const*, bool)+0x20f>
c001d848:	51                   	push   ecx
c001d849:	51                   	push   ecx
c001d84a:	68 09 c4 02 c0       	push   0xc002c409
c001d84f:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d853:	53                   	push   ebx
c001d854:	e8 e3 2f fe ff       	call   c000083c <strcpy>
c001d859:	5f                   	pop    edi
c001d85a:	58                   	pop    eax
c001d85b:	56                   	push   esi
c001d85c:	53                   	push   ebx
c001d85d:	e8 1a 31 fe ff       	call   c000097c <strcat>
c001d862:	58                   	pop    eax
c001d863:	5a                   	pop    edx
c001d864:	68 1c c4 02 c0       	push   0xc002c41c
c001d869:	53                   	push   ebx
c001d86a:	e8 0d 31 fe ff       	call   c000097c <strcat>
c001d86f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d872:	e8 18 cd ff ff       	call   c001a58f <Krnl::panic(char const*)>
c001d877:	83 c4 10             	add    esp,0x10
c001d87a:	e8 af 43 ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c001d87f:	51                   	push   ecx
c001d880:	6a 03                	push   0x3
c001d882:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d886:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d88a:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d890:	83 d3 00             	adc    ebx,0x0
c001d893:	89 ca                	mov    edx,ecx
c001d895:	89 d1                	mov    ecx,edx
c001d897:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d89b:	51                   	push   ecx
c001d89c:	50                   	push   eax
c001d89d:	e8 7a 4a ff ff       	call   c001231c <VAS::allocatePages(int, int)>
c001d8a2:	5f                   	pop    edi
c001d8a3:	89 c3                	mov    ebx,eax
c001d8a5:	58                   	pop    eax
c001d8a6:	53                   	push   ebx
c001d8a7:	68 1e c4 02 c0       	push   0xc002c41e
c001d8ac:	e8 12 55 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001d8b1:	89 34 24             	mov    DWORD PTR [esp],esi
c001d8b4:	e8 e3 2e fe ff       	call   c000079c <strlen>
c001d8b9:	8b 3d a0 14 03 c0    	mov    edi,DWORD PTR ds:0xc00314a0
c001d8bf:	40                   	inc    eax
c001d8c0:	89 04 24             	mov    DWORD PTR [esp],eax
c001d8c3:	e8 83 1f ff ff       	call   c000f84b <malloc>
c001d8c8:	89 04 bd c0 18 03 c0 	mov    DWORD PTR [edi*4-0x3ffce740],eax
c001d8cf:	58                   	pop    eax
c001d8d0:	a1 a0 14 03 c0       	mov    eax,ds:0xc00314a0
c001d8d5:	5a                   	pop    edx
c001d8d6:	56                   	push   esi
c001d8d7:	ff 34 85 c0 18 03 c0 	push   DWORD PTR [eax*4-0x3ffce740]
c001d8de:	e8 59 2f fe ff       	call   c000083c <strcpy>
c001d8e3:	a1 a0 14 03 c0       	mov    eax,ds:0xc00314a0
c001d8e8:	8d 50 01             	lea    edx,[eax+0x1]
c001d8eb:	89 1c 85 c0 16 03 c0 	mov    DWORD PTR [eax*4-0x3ffce940],ebx
c001d8f2:	89 15 a0 14 03 c0    	mov    DWORD PTR ds:0xc00314a0,edx
c001d8f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d8fc:	83 c4 0c             	add    esp,0xc
c001d8ff:	89 14 85 c0 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffceb40],edx
c001d906:	6a 01                	push   0x1
c001d908:	53                   	push   ebx
c001d909:	56                   	push   esi
c001d90a:	e8 bd f6 ff ff       	call   c001cfcc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d90f:	83 c4 10             	add    esp,0x10
c001d912:	89 c7                	mov    edi,eax
c001d914:	84 c0                	test   al,al
c001d916:	0f 85 8c 00 00 00    	jne    c001d9a8 <Thr::loadDLL(char const*, bool)+0x223>
c001d91c:	89 e8                	mov    eax,ebp
c001d91e:	84 c0                	test   al,al
c001d920:	74 76                	je     c001d998 <Thr::loadDLL(char const*, bool)+0x213>
c001d922:	83 ec 0c             	sub    esp,0xc
c001d925:	68 2b c4 02 c0       	push   0xc002c42b
c001d92a:	e8 60 cc ff ff       	call   c001a58f <Krnl::panic(char const*)>
c001d92f:	83 c4 10             	add    esp,0x10
c001d932:	eb 64                	jmp    c001d998 <Thr::loadDLL(char const*, bool)+0x213>
c001d934:	e8 f5 42 ff ff       	call   c0011c2e <Virt::getAKernelVAS()>
c001d939:	89 f5                	mov    ebp,esi
c001d93b:	c1 e5 0c             	shl    ebp,0xc
c001d93e:	52                   	push   edx
c001d93f:	01 dd                	add    ebp,ebx
c001d941:	52                   	push   edx
c001d942:	55                   	push   ebp
c001d943:	50                   	push   eax
c001d944:	e8 4d 45 ff ff       	call   c0011e96 <VAS::getPageTableEntry(unsigned long)>
c001d949:	83 c4 10             	add    esp,0x10
c001d94c:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d94f:	75 0c                	jne    c001d95d <Thr::loadDLL(char const*, bool)+0x1d8>
c001d951:	83 ec 0c             	sub    esp,0xc
c001d954:	55                   	push   ebp
c001d955:	e8 d3 24 ff ff       	call   c000fe2d <Phys::freePage(unsigned long)>
c001d95a:	83 c4 10             	add    esp,0x10
c001d95d:	46                   	inc    esi
c001d95e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d962:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d966:	05 ff 0f 00 00       	add    eax,0xfff
c001d96b:	83 d2 00             	adc    edx,0x0
c001d96e:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d972:	c1 ea 0c             	shr    edx,0xc
c001d975:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d979:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d97d:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d981:	ba 00 00 00 00       	mov    edx,0x0
c001d986:	89 d0                	mov    eax,edx
c001d988:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d98c:	72 a6                	jb     c001d934 <Thr::loadDLL(char const*, bool)+0x1af>
c001d98e:	89 f8                	mov    eax,edi
c001d990:	84 c0                	test   al,al
c001d992:	75 18                	jne    c001d9ac <Thr::loadDLL(char const*, bool)+0x227>
c001d994:	31 db                	xor    ebx,ebx
c001d996:	eb 14                	jmp    c001d9ac <Thr::loadDLL(char const*, bool)+0x227>
c001d998:	83 ec 0c             	sub    esp,0xc
c001d99b:	68 4a c4 02 c0       	push   0xc002c44a
c001d9a0:	e8 ea cb ff ff       	call   c001a58f <Krnl::panic(char const*)>
c001d9a5:	83 c4 10             	add    esp,0x10
c001d9a8:	31 f6                	xor    esi,esi
c001d9aa:	eb b2                	jmp    c001d95e <Thr::loadDLL(char const*, bool)+0x1d9>
c001d9ac:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d9b2:	89 d8                	mov    eax,ebx
c001d9b4:	5b                   	pop    ebx
c001d9b5:	5e                   	pop    esi
c001d9b6:	5f                   	pop    edi
c001d9b7:	5d                   	pop    ebp
c001d9b8:	c3                   	ret    

c001d9b9 <Thr::executeDLL(unsigned long, void*)>:
c001d9b9:	56                   	push   esi
c001d9ba:	53                   	push   ebx
c001d9bb:	52                   	push   edx
c001d9bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d9c0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d9c4:	85 db                	test   ebx,ebx
c001d9c6:	75 10                	jne    c001d9d8 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d9c8:	83 ec 0c             	sub    esp,0xc
c001d9cb:	68 66 c4 02 c0       	push   0xc002c466
c001d9d0:	e8 ba cb ff ff       	call   c001a58f <Krnl::panic(char const*)>
c001d9d5:	83 c4 10             	add    esp,0x10
c001d9d8:	50                   	push   eax
c001d9d9:	50                   	push   eax
c001d9da:	53                   	push   ebx
c001d9db:	68 90 c4 02 c0       	push   0xc002c490
c001d9e0:	e8 de 53 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001d9e5:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d9e9:	89 d8                	mov    eax,ebx
c001d9eb:	83 c4 14             	add    esp,0x14
c001d9ee:	5b                   	pop    ebx
c001d9ef:	5e                   	pop    esi
c001d9f0:	ff e0                	jmp    eax

c001d9f2 <changeTSS>:
c001d9f2:	83 ec 14             	sub    esp,0x14
c001d9f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9fa:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d9fd:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001da02:	c1 e2 15             	shl    edx,0x15
c001da05:	29 d0                	sub    eax,edx
c001da07:	50                   	push   eax
c001da08:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c001da0d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001da13:	05 7c 11 00 00       	add    eax,0x117c
c001da18:	50                   	push   eax
c001da19:	e8 10 39 ff ff       	call   c001132e <TSS::setESP(unsigned long)>
c001da1e:	83 c4 1c             	add    esp,0x1c
c001da21:	c3                   	ret    

c001da22 <Process::addArgs(char**)>:
c001da22:	57                   	push   edi
c001da23:	56                   	push   esi
c001da24:	53                   	push   ebx
c001da25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da29:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001da2d:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001da37:	85 ff                	test   edi,edi
c001da39:	74 3d                	je     c001da78 <Process::addArgs(char**)+0x56>
c001da3b:	8b 07                	mov    eax,DWORD PTR [edi]
c001da3d:	85 c0                	test   eax,eax
c001da3f:	74 37                	je     c001da78 <Process::addArgs(char**)+0x56>
c001da41:	31 db                	xor    ebx,ebx
c001da43:	83 ec 0c             	sub    esp,0xc
c001da46:	50                   	push   eax
c001da47:	e8 50 2d fe ff       	call   c000079c <strlen>
c001da4c:	40                   	inc    eax
c001da4d:	89 04 24             	mov    DWORD PTR [esp],eax
c001da50:	e8 f6 1d ff ff       	call   c000f84b <malloc>
c001da55:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001da5c:	5a                   	pop    edx
c001da5d:	59                   	pop    ecx
c001da5e:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001da61:	43                   	inc    ebx
c001da62:	50                   	push   eax
c001da63:	e8 d4 2d fe ff       	call   c000083c <strcpy>
c001da68:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001da6e:	83 c4 10             	add    esp,0x10
c001da71:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001da74:	85 c0                	test   eax,eax
c001da76:	75 cb                	jne    c001da43 <Process::addArgs(char**)+0x21>
c001da78:	5b                   	pop    ebx
c001da79:	5e                   	pop    esi
c001da7a:	5f                   	pop    edi
c001da7b:	c3                   	ret    

c001da7c <Process::Process(char const*, Process*, char**)>:
c001da7c:	56                   	push   esi
c001da7d:	53                   	push   ebx
c001da7e:	83 ec 14             	sub    esp,0x14
c001da81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da85:	05 0c 02 00 00       	add    eax,0x20c
c001da8a:	bb 07 00 00 00       	mov    ebx,0x7
c001da8f:	89 c6                	mov    esi,eax
c001da91:	85 db                	test   ebx,ebx
c001da93:	78 12                	js     c001daa7 <Process::Process(char const*, Process*, char**)+0x2b>
c001da95:	83 ec 0c             	sub    esp,0xc
c001da98:	56                   	push   esi
c001da99:	e8 c4 b3 00 00       	call   c0028e62 <ThreadControlBlock::ThreadControlBlock()>
c001da9e:	83 c4 10             	add    esp,0x10
c001daa1:	83 c6 63             	add    esi,0x63
c001daa4:	4b                   	dec    ebx
c001daa5:	eb ea                	jmp    c001da91 <Process::Process(char const*, Process*, char**)+0x15>
c001daa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daab:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dab2:	83 ec 0c             	sub    esp,0xc
c001dab5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dab9:	e8 22 c9 ff ff       	call   c001a3e0 <Krnl::newProcessEnv(Process*)>
c001dabe:	83 c4 10             	add    esp,0x10
c001dac1:	89 c2                	mov    edx,eax
c001dac3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dac7:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dacd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dad1:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dada:	a1 b0 dc 02 c0       	mov    eax,ds:0xc002dcb0
c001dadf:	8d 50 01             	lea    edx,[eax+0x1]
c001dae2:	89 15 b0 dc 02 c0    	mov    DWORD PTR ds:0xc002dcb0,edx
c001dae8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001daec:	89 02                	mov    DWORD PTR [edx],eax
c001daee:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001daf6:	83 ec 0c             	sub    esp,0xc
c001daf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dafd:	e8 49 1d ff ff       	call   c000f84b <malloc>
c001db02:	83 c4 10             	add    esp,0x10
c001db05:	89 c3                	mov    ebx,eax
c001db07:	83 ec 08             	sub    esp,0x8
c001db0a:	6a 00                	push   0x0
c001db0c:	53                   	push   ebx
c001db0d:	e8 b2 4b ff ff       	call   c00126c4 <VAS::VAS(bool)>
c001db12:	83 c4 10             	add    esp,0x10
c001db15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db19:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001db1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db23:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001db2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db31:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001db35:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001db3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db3f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db45:	85 c0                	test   eax,eax
c001db47:	74 42                	je     c001db8b <Process::Process(char const*, Process*, char**)+0x10f>
c001db49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db4d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db53:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001db59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db5d:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001db63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db67:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db6d:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001db73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db77:	05 0c 01 00 00       	add    eax,0x10c
c001db7c:	83 ec 08             	sub    esp,0x8
c001db7f:	52                   	push   edx
c001db80:	50                   	push   eax
c001db81:	e8 b6 2c fe ff       	call   c000083c <strcpy>
c001db86:	83 c4 10             	add    esp,0x10
c001db89:	eb 63                	jmp    c001dbee <Process::Process(char const*, Process*, char**)+0x172>
c001db8b:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001db93:	83 ec 0c             	sub    esp,0xc
c001db96:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001db9a:	e8 ac 1c ff ff       	call   c000f84b <malloc>
c001db9f:	83 c4 10             	add    esp,0x10
c001dba2:	89 c3                	mov    ebx,eax
c001dba4:	83 ec 08             	sub    esp,0x8
c001dba7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbab:	53                   	push   ebx
c001dbac:	e8 5d 34 ff ff       	call   c001100e <VgaText::VgaText(char const*)>
c001dbb1:	83 c4 10             	add    esp,0x10
c001dbb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbb8:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dbbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbc2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dbc8:	83 ec 0c             	sub    esp,0xc
c001dbcb:	50                   	push   eax
c001dbcc:	e8 74 29 ff ff       	call   c0010545 <addToTerminalCycle(VgaText*)>
c001dbd1:	83 c4 10             	add    esp,0x10
c001dbd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbd8:	05 0c 01 00 00       	add    eax,0x10c
c001dbdd:	83 ec 08             	sub    esp,0x8
c001dbe0:	68 af c4 02 c0       	push   0xc002c4af
c001dbe5:	50                   	push   eax
c001dbe6:	e8 51 2c fe ff       	call   c000083c <strcpy>
c001dbeb:	83 c4 10             	add    esp,0x10
c001dbee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbf2:	83 c0 0c             	add    eax,0xc
c001dbf5:	83 ec 08             	sub    esp,0x8
c001dbf8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbfc:	50                   	push   eax
c001dbfd:	e8 3a 2c fe ff       	call   c000083c <strcpy>
c001dc02:	83 c4 10             	add    esp,0x10
c001dc05:	83 ec 08             	sub    esp,0x8
c001dc08:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dc0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc10:	e8 0d fe ff ff       	call   c001da22 <Process::addArgs(char**)>
c001dc15:	83 c4 10             	add    esp,0x10
c001dc18:	83 ec 08             	sub    esp,0x8
c001dc1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc23:	e8 6e ee ff ff       	call   c001ca96 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dc28:	83 c4 10             	add    esp,0x10
c001dc2b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dc2f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dc33:	83 f0 01             	xor    eax,0x1
c001dc36:	88 c2                	mov    dl,al
c001dc38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc3c:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dc42:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dc47:	83 ec 08             	sub    esp,0x8
c001dc4a:	50                   	push   eax
c001dc4b:	68 dc c5 02 c0       	push   0xc002c5dc
c001dc50:	e8 6e 51 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001dc55:	83 c4 10             	add    esp,0x10
c001dc58:	90                   	nop
c001dc59:	83 c4 14             	add    esp,0x14
c001dc5c:	5b                   	pop    ebx
c001dc5d:	5e                   	pop    esi
c001dc5e:	c3                   	ret    
c001dc5f:	90                   	nop

c001dc60 <Process::Process(bool, char const*, Process*, char**)>:
c001dc60:	56                   	push   esi
c001dc61:	53                   	push   ebx
c001dc62:	83 ec 24             	sub    esp,0x24
c001dc65:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dc69:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dc6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc71:	05 0c 02 00 00       	add    eax,0x20c
c001dc76:	bb 07 00 00 00       	mov    ebx,0x7
c001dc7b:	89 c6                	mov    esi,eax
c001dc7d:	85 db                	test   ebx,ebx
c001dc7f:	78 12                	js     c001dc93 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dc81:	83 ec 0c             	sub    esp,0xc
c001dc84:	56                   	push   esi
c001dc85:	e8 d8 b1 00 00       	call   c0028e62 <ThreadControlBlock::ThreadControlBlock()>
c001dc8a:	83 c4 10             	add    esp,0x10
c001dc8d:	83 c6 63             	add    esi,0x63
c001dc90:	4b                   	dec    ebx
c001dc91:	eb ea                	jmp    c001dc7d <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dc93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc97:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dc9e:	83 ec 0c             	sub    esp,0xc
c001dca1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dca5:	e8 36 c7 ff ff       	call   c001a3e0 <Krnl::newProcessEnv(Process*)>
c001dcaa:	83 c4 10             	add    esp,0x10
c001dcad:	89 c2                	mov    edx,eax
c001dcaf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcb3:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dcb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcbd:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dcc6:	a1 b0 dc 02 c0       	mov    eax,ds:0xc002dcb0
c001dccb:	8d 50 01             	lea    edx,[eax+0x1]
c001dcce:	89 15 b0 dc 02 c0    	mov    DWORD PTR ds:0xc002dcb0,edx
c001dcd4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dcd8:	89 02                	mov    DWORD PTR [edx],eax
c001dcda:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001dce2:	83 ec 0c             	sub    esp,0xc
c001dce5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dce9:	e8 5d 1b ff ff       	call   c000f84b <malloc>
c001dcee:	83 c4 10             	add    esp,0x10
c001dcf1:	89 c3                	mov    ebx,eax
c001dcf3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dcf8:	83 ec 08             	sub    esp,0x8
c001dcfb:	50                   	push   eax
c001dcfc:	53                   	push   ebx
c001dcfd:	e8 c2 49 ff ff       	call   c00126c4 <VAS::VAS(bool)>
c001dd02:	83 c4 10             	add    esp,0x10
c001dd05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd09:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dd0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd13:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dd1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd21:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dd25:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dd2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd2f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd35:	85 c0                	test   eax,eax
c001dd37:	74 42                	je     c001dd7b <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dd39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd3d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd43:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dd49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd4d:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dd53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd57:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd5d:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dd63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd67:	05 0c 01 00 00       	add    eax,0x10c
c001dd6c:	83 ec 08             	sub    esp,0x8
c001dd6f:	52                   	push   edx
c001dd70:	50                   	push   eax
c001dd71:	e8 c6 2a fe ff       	call   c000083c <strcpy>
c001dd76:	83 c4 10             	add    esp,0x10
c001dd79:	eb 63                	jmp    c001ddde <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dd7b:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001dd83:	83 ec 0c             	sub    esp,0xc
c001dd86:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dd8a:	e8 bc 1a ff ff       	call   c000f84b <malloc>
c001dd8f:	83 c4 10             	add    esp,0x10
c001dd92:	89 c3                	mov    ebx,eax
c001dd94:	83 ec 08             	sub    esp,0x8
c001dd97:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dd9b:	53                   	push   ebx
c001dd9c:	e8 6d 32 ff ff       	call   c001100e <VgaText::VgaText(char const*)>
c001dda1:	83 c4 10             	add    esp,0x10
c001dda4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dda8:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001ddae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddb2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ddb8:	83 ec 0c             	sub    esp,0xc
c001ddbb:	50                   	push   eax
c001ddbc:	e8 84 27 ff ff       	call   c0010545 <addToTerminalCycle(VgaText*)>
c001ddc1:	83 c4 10             	add    esp,0x10
c001ddc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddc8:	05 0c 01 00 00       	add    eax,0x10c
c001ddcd:	83 ec 08             	sub    esp,0x8
c001ddd0:	68 af c4 02 c0       	push   0xc002c4af
c001ddd5:	50                   	push   eax
c001ddd6:	e8 61 2a fe ff       	call   c000083c <strcpy>
c001dddb:	83 c4 10             	add    esp,0x10
c001ddde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dde2:	83 c0 0c             	add    eax,0xc
c001dde5:	83 ec 08             	sub    esp,0x8
c001dde8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ddec:	50                   	push   eax
c001dded:	e8 4a 2a fe ff       	call   c000083c <strcpy>
c001ddf2:	83 c4 10             	add    esp,0x10
c001ddf5:	83 ec 08             	sub    esp,0x8
c001ddf8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ddfc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de00:	e8 1d fc ff ff       	call   c001da22 <Process::addArgs(char**)>
c001de05:	83 c4 10             	add    esp,0x10
c001de08:	90                   	nop
c001de09:	83 c4 24             	add    esp,0x24
c001de0c:	5b                   	pop    ebx
c001de0d:	5e                   	pop    esi
c001de0e:	c3                   	ret    

c001de0f <disableIRQs()>:
c001de0f:	fa                   	cli    
c001de10:	ff 05 6c 1c 03 c0    	inc    DWORD PTR ds:0xc0031c6c
c001de16:	c3                   	ret    

c001de17 <getIRQNestingLevel()>:
c001de17:	a1 6c 1c 03 c0       	mov    eax,ds:0xc0031c6c
c001de1c:	c3                   	ret    

c001de1d <enableIRQs()>:
c001de1d:	a1 6c 1c 03 c0       	mov    eax,ds:0xc0031c6c
c001de22:	48                   	dec    eax
c001de23:	a3 6c 1c 03 c0       	mov    ds:0xc0031c6c,eax
c001de28:	75 01                	jne    c001de2b <enableIRQs()+0xe>
c001de2a:	fb                   	sti    
c001de2b:	c3                   	ret    

c001de2c <lockScheduler()>:
c001de2c:	eb e1                	jmp    c001de0f <disableIRQs()>

c001de2e <unlockScheduler()>:
c001de2e:	eb ed                	jmp    c001de1d <enableIRQs()>

c001de30 <userModeEntryPoint(void*)>:
c001de30:	83 ec 0c             	sub    esp,0xc
c001de33:	e8 f6 ff ff ff       	call   c001de2e <unlockScheduler()>
c001de38:	fb                   	sti    
c001de39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de3e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001de41:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001de47:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001de4b:	83 c4 0c             	add    esp,0xc
c001de4e:	e9 d7 24 fe ff       	jmp    c000032a <goToUsermode>

c001de53 <lockStuff()>:
c001de53:	e8 b7 ff ff ff       	call   c001de0f <disableIRQs()>
c001de58:	ff 05 68 1c 03 c0    	inc    DWORD PTR ds:0xc0031c68
c001de5e:	c3                   	ret    

c001de5f <taskStartupFunction>:
c001de5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de64:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001de67:	c3                   	ret    

c001de68 <updateTimeUsed()>:
c001de68:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c001de6d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001de73:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001de7a:	74 50                	je     c001decc <updateTimeUsed()+0x64>
c001de7c:	57                   	push   edi
c001de7d:	56                   	push   esi
c001de7e:	53                   	push   ebx
c001de7f:	0f 31                	rdtsc  
c001de81:	89 c1                	mov    ecx,eax
c001de83:	a3 a8 1c 03 c0       	mov    ds:0xc0031ca8,eax
c001de88:	2b 0d 98 1c 03 c0    	sub    ecx,DWORD PTR ds:0xc0031c98
c001de8e:	89 d3                	mov    ebx,edx
c001de90:	89 0d a0 1c 03 c0    	mov    DWORD PTR ds:0xc0031ca0,ecx
c001de96:	1b 1d 9c 1c 03 c0    	sbb    ebx,DWORD PTR ds:0xc0031c9c
c001de9c:	a3 98 1c 03 c0       	mov    ds:0xc0031c98,eax
c001dea1:	89 1d a4 1c 03 c0    	mov    DWORD PTR ds:0xc0031ca4,ebx
c001dea7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001deac:	89 15 ac 1c 03 c0    	mov    DWORD PTR ds:0xc0031cac,edx
c001deb2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001deb5:	89 15 9c 1c 03 c0    	mov    DWORD PTR ds:0xc0031c9c,edx
c001debb:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001debe:	01 f1                	add    ecx,esi
c001dec0:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001dec3:	11 fb                	adc    ebx,edi
c001dec5:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001dec8:	5b                   	pop    ebx
c001dec9:	5e                   	pop    esi
c001deca:	5f                   	pop    edi
c001decb:	c3                   	ret    
c001decc:	c3                   	ret    

c001decd <switchToThread(ThreadControlBlock*)>:
c001decd:	53                   	push   ebx
c001dece:	83 ec 08             	sub    esp,0x8
c001ded1:	a1 68 1c 03 c0       	mov    eax,ds:0xc0031c68
c001ded6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001deda:	85 c0                	test   eax,eax
c001dedc:	75 30                	jne    c001df0e <switchToThread(ThreadControlBlock*)+0x41>
c001dede:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001dee1:	3c ff                	cmp    al,0xff
c001dee3:	74 25                	je     c001df0a <switchToThread(ThreadControlBlock*)+0x3d>
c001dee5:	0f b6 d0             	movzx  edx,al
c001dee8:	b8 84 03 00 00       	mov    eax,0x384
c001deed:	29 d0                	sub    eax,edx
c001deef:	c1 e0 10             	shl    eax,0x10
c001def2:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001def5:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001def8:	e8 6b ff ff ff       	call   c001de68 <updateTimeUsed()>
c001defd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001df01:	83 c4 08             	add    esp,0x8
c001df04:	5b                   	pop    ebx
c001df05:	e9 58 24 fe ff       	jmp    c0000362 <switchToThreadASM>
c001df0a:	31 c0                	xor    eax,eax
c001df0c:	eb e7                	jmp    c001def5 <switchToThread(ThreadControlBlock*)+0x28>
c001df0e:	c7 05 64 1c 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031c64,0x1
c001df18:	83 c4 08             	add    esp,0x8
c001df1b:	5b                   	pop    ebx
c001df1c:	c3                   	ret    
c001df1d:	90                   	nop

c001df1e <Semaphore::Semaphore(int)>:
c001df1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001df26:	89 10                	mov    DWORD PTR [eax],edx
c001df28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df2c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001df33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df37:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001df3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df42:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001df49:	90                   	nop
c001df4a:	c3                   	ret    
c001df4b:	90                   	nop

c001df4c <Mutex::Mutex()>:
c001df4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df50:	6a 01                	push   0x1
c001df52:	50                   	push   eax
c001df53:	e8 c6 ff ff ff       	call   c001df1e <Semaphore::Semaphore(int)>
c001df58:	83 c4 08             	add    esp,0x8
c001df5b:	90                   	nop
c001df5c:	c3                   	ret    
c001df5d:	90                   	nop

c001df5e <Process::createThread(void (*)(void*), void*, int)>:
c001df5e:	55                   	push   ebp
c001df5f:	31 c9                	xor    ecx,ecx
c001df61:	57                   	push   edi
c001df62:	56                   	push   esi
c001df63:	53                   	push   ebx
c001df64:	83 ec 1c             	sub    esp,0x1c
c001df67:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df6b:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001df72:	89 f2                	mov    edx,esi
c001df74:	0f b7 c2             	movzx  eax,dx
c001df77:	83 e2 01             	and    edx,0x1
c001df7a:	74 16                	je     c001df92 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001df7c:	d1 f8                	sar    eax,1
c001df7e:	41                   	inc    ecx
c001df7f:	89 c2                	mov    edx,eax
c001df81:	83 f9 10             	cmp    ecx,0x10
c001df84:	75 ee                	jne    c001df74 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001df86:	83 c4 1c             	add    esp,0x1c
c001df89:	31 db                	xor    ebx,ebx
c001df8b:	89 d8                	mov    eax,ebx
c001df8d:	5b                   	pop    ebx
c001df8e:	5e                   	pop    esi
c001df8f:	5f                   	pop    edi
c001df90:	5d                   	pop    ebp
c001df91:	c3                   	ret    
c001df92:	b8 01 00 00 00       	mov    eax,0x1
c001df97:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001df9a:	d3 e0                	shl    eax,cl
c001df9c:	09 c6                	or     esi,eax
c001df9e:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001dfa1:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001dfa8:	89 c6                	mov    esi,eax
c001dfaa:	c1 e6 05             	shl    esi,0x5
c001dfad:	01 f0                	add    eax,esi
c001dfaf:	01 d8                	add    eax,ebx
c001dfb1:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001dfb8:	75 0a                	jne    c001dfc4 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001dfba:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001dfc4:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dfca:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001dfce:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001dfd1:	01 ca                	add    edx,ecx
c001dfd3:	83 ec 08             	sub    esp,0x8
c001dfd6:	89 d0                	mov    eax,edx
c001dfd8:	c1 e0 05             	shl    eax,0x5
c001dfdb:	01 d0                	add    eax,edx
c001dfdd:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001dfe1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dfe5:	01 d8                	add    eax,ebx
c001dfe7:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001dfed:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001dff3:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001dff9:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001dfff:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e005:	89 cd                	mov    ebp,ecx
c001e007:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001e00b:	f7 dd                	neg    ebp
c001e00d:	c1 e5 15             	shl    ebp,0x15
c001e010:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001e016:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001e01c:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e026:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001e02c:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e036:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e040:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e044:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001e04b:	53                   	push   ebx
c001e04c:	68 88 1c 03 c0       	push   0xc0031c88
c001e051:	e8 9a ac 00 00       	call   c0028cf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e056:	89 d8                	mov    eax,ebx
c001e058:	83 c4 10             	add    esp,0x10
c001e05b:	83 c4 1c             	add    esp,0x1c
c001e05e:	5b                   	pop    ebx
c001e05f:	5e                   	pop    esi
c001e060:	5f                   	pop    edi
c001e061:	5d                   	pop    ebp
c001e062:	c3                   	ret    
c001e063:	90                   	nop

c001e064 <Process::createUserThread()>:
c001e064:	83 ec 0c             	sub    esp,0xc
c001e067:	68 80 00 00 00       	push   0x80
c001e06c:	6a 00                	push   0x0
c001e06e:	68 30 de 01 c0       	push   0xc001de30
c001e073:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e077:	e8 e2 fe ff ff       	call   c001df5e <Process::createThread(void (*)(void*), void*, int)>
c001e07c:	83 c4 1c             	add    esp,0x1c
c001e07f:	c3                   	ret    

c001e080 <setupMultitasking(void (*)())>:
c001e080:	56                   	push   esi
c001e081:	53                   	push   ebx
c001e082:	51                   	push   ecx
c001e083:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e087:	eb 10                	jmp    c001e099 <setupMultitasking(void (*)())+0x19>
c001e089:	83 ec 0c             	sub    esp,0xc
c001e08c:	68 88 1c 03 c0       	push   0xc0031c88
c001e091:	e8 ac ab 00 00       	call   c0028c42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e096:	83 c4 10             	add    esp,0x10
c001e099:	83 ec 0c             	sub    esp,0xc
c001e09c:	68 88 1c 03 c0       	push   0xc0031c88
c001e0a1:	e8 80 ab 00 00       	call   c0028c26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e0a6:	83 c4 10             	add    esp,0x10
c001e0a9:	84 c0                	test   al,al
c001e0ab:	74 dc                	je     c001e089 <setupMultitasking(void (*)())+0x9>
c001e0ad:	83 ec 0c             	sub    esp,0xc
c001e0b0:	68 3f 07 00 00       	push   0x73f
c001e0b5:	e8 91 17 ff ff       	call   c000f84b <malloc>
c001e0ba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e0c1:	89 c3                	mov    ebx,eax
c001e0c3:	6a 00                	push   0x0
c001e0c5:	68 b3 c4 02 c0       	push   0xc002c4b3
c001e0ca:	6a 01                	push   0x1
c001e0cc:	50                   	push   eax
c001e0cd:	e8 8e fb ff ff       	call   c001dc60 <Process::Process(bool, char const*, Process*, char**)>
c001e0d2:	83 c4 18             	add    esp,0x18
c001e0d5:	89 1d 94 1c 03 c0    	mov    DWORD PTR ds:0xc0031c94,ebx
c001e0db:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e0e1:	68 04 c6 02 c0       	push   0xc002c604
c001e0e6:	e8 d8 4c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e0eb:	58                   	pop    eax
c001e0ec:	5a                   	pop    edx
c001e0ed:	6a 63                	push   0x63
c001e0ef:	68 38 c6 02 c0       	push   0xc002c638
c001e0f4:	e8 ca 4c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e0f9:	59                   	pop    ecx
c001e0fa:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e100:	e8 11 2b ff ff       	call   c0010c16 <setActiveTerminal(VgaText*)>
c001e105:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e10d:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e117:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e11d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e120:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e12a:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e130:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e136:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e140:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e14a:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e154:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e15a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e164:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e16a:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e174:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e17a:	58                   	pop    eax
c001e17b:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e181:	5a                   	pop    edx
c001e182:	68 af c4 02 c0       	push   0xc002c4af
c001e187:	50                   	push   eax
c001e188:	e8 af 26 fe ff       	call   c000083c <strcpy>
c001e18d:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e194:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e198:	83 c4 14             	add    esp,0x14
c001e19b:	5b                   	pop    ebx
c001e19c:	5e                   	pop    esi
c001e19d:	e9 b2 21 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e1a2 <schedule()>:
c001e1a2:	a1 68 1c 03 c0       	mov    eax,ds:0xc0031c68
c001e1a7:	85 c0                	test   eax,eax
c001e1a9:	74 0b                	je     c001e1b6 <schedule()+0x14>
c001e1ab:	c7 05 64 1c 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031c64,0x1
c001e1b5:	c3                   	ret    
c001e1b6:	53                   	push   ebx
c001e1b7:	83 ec 14             	sub    esp,0x14
c001e1ba:	68 88 1c 03 c0       	push   0xc0031c88
c001e1bf:	e8 62 aa 00 00       	call   c0028c26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e1c4:	83 c4 10             	add    esp,0x10
c001e1c7:	84 c0                	test   al,al
c001e1c9:	75 38                	jne    c001e203 <schedule()+0x61>
c001e1cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1d0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e1d3:	4a                   	dec    edx
c001e1d4:	74 32                	je     c001e208 <schedule()+0x66>
c001e1d6:	83 ec 0c             	sub    esp,0xc
c001e1d9:	68 88 1c 03 c0       	push   0xc0031c88
c001e1de:	e8 3b aa 00 00       	call   c0028c1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1e3:	c7 04 24 88 1c 03 c0 	mov    DWORD PTR [esp],0xc0031c88
c001e1ea:	89 c3                	mov    ebx,eax
c001e1ec:	e8 51 aa 00 00       	call   c0028c42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e1f1:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e1f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e1fb:	e8 cd fc ff ff       	call   c001decd <switchToThread(ThreadControlBlock*)>
c001e200:	83 c4 10             	add    esp,0x10
c001e203:	83 c4 08             	add    esp,0x8
c001e206:	5b                   	pop    ebx
c001e207:	c3                   	ret    
c001e208:	83 ec 08             	sub    esp,0x8
c001e20b:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e212:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e218:	68 88 1c 03 c0       	push   0xc0031c88
c001e21d:	e8 ce aa 00 00       	call   c0028cf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e222:	83 c4 10             	add    esp,0x10
c001e225:	eb af                	jmp    c001e1d6 <schedule()+0x34>

c001e227 <unlockStuff()>:
c001e227:	a1 68 1c 03 c0       	mov    eax,ds:0xc0031c68
c001e22c:	48                   	dec    eax
c001e22d:	a3 68 1c 03 c0       	mov    ds:0xc0031c68,eax
c001e232:	75 09                	jne    c001e23d <unlockStuff()+0x16>
c001e234:	a1 64 1c 03 c0       	mov    eax,ds:0xc0031c64
c001e239:	85 c0                	test   eax,eax
c001e23b:	75 05                	jne    c001e242 <unlockStuff()+0x1b>
c001e23d:	e9 db fb ff ff       	jmp    c001de1d <enableIRQs()>
c001e242:	83 ec 0c             	sub    esp,0xc
c001e245:	c7 05 64 1c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031c64,0x0
c001e24f:	e8 4e ff ff ff       	call   c001e1a2 <schedule()>
c001e254:	83 c4 0c             	add    esp,0xc
c001e257:	e9 c1 fb ff ff       	jmp    c001de1d <enableIRQs()>

c001e25c <Semaphore::tryAcquire()>:
c001e25c:	83 ec 0c             	sub    esp,0xc
c001e25f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e263:	e8 eb fb ff ff       	call   c001de53 <lockStuff()>
c001e268:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e26b:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e26d:	7c 0b                	jl     c001e27a <Semaphore::tryAcquire()+0x1e>
c001e26f:	e8 b3 ff ff ff       	call   c001e227 <unlockStuff()>
c001e274:	31 c0                	xor    eax,eax
c001e276:	83 c4 0c             	add    esp,0xc
c001e279:	c3                   	ret    
c001e27a:	42                   	inc    edx
c001e27b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e27e:	e8 a4 ff ff ff       	call   c001e227 <unlockStuff()>
c001e283:	b0 01                	mov    al,0x1
c001e285:	83 c4 0c             	add    esp,0xc
c001e288:	c3                   	ret    
c001e289:	90                   	nop

c001e28a <Semaphore::assertLocked(char const*)>:
c001e28a:	83 ec 0c             	sub    esp,0xc
c001e28d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e291:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e295:	e8 b9 fb ff ff       	call   c001de53 <lockStuff()>
c001e29a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e29c:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e29f:	7c 05                	jl     c001e2a6 <Semaphore::assertLocked(char const*)+0x1c>
c001e2a1:	83 c4 0c             	add    esp,0xc
c001e2a4:	eb 81                	jmp    c001e227 <unlockStuff()>
c001e2a6:	83 ec 0c             	sub    esp,0xc
c001e2a9:	52                   	push   edx
c001e2aa:	e8 e0 c2 ff ff       	call   c001a58f <Krnl::panic(char const*)>
c001e2af:	83 c4 10             	add    esp,0x10
c001e2b2:	83 c4 0c             	add    esp,0xc
c001e2b5:	e9 6d ff ff ff       	jmp    c001e227 <unlockStuff()>

c001e2ba <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e2ba:	83 ec 0c             	sub    esp,0xc
c001e2bd:	e8 55 fb ff ff       	call   c001de17 <getIRQNestingLevel()>
c001e2c2:	83 ec 08             	sub    esp,0x8
c001e2c5:	50                   	push   eax
c001e2c6:	68 5c c6 02 c0       	push   0xc002c65c
c001e2cb:	e8 f3 4a ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e2d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2d9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2dc:	e8 c1 fe ff ff       	call   c001e1a2 <schedule()>
c001e2e1:	e8 48 fb ff ff       	call   c001de2e <unlockScheduler()>
c001e2e6:	e8 2c fb ff ff       	call   c001de17 <getIRQNestingLevel()>
c001e2eb:	5a                   	pop    edx
c001e2ec:	59                   	pop    ecx
c001e2ed:	50                   	push   eax
c001e2ee:	68 90 c6 02 c0       	push   0xc002c690
c001e2f3:	e8 cb 4a ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e2f8:	83 c4 1c             	add    esp,0x1c
c001e2fb:	c3                   	ret    

c001e2fc <blockTask(TaskState)>:
c001e2fc:	83 ec 0c             	sub    esp,0xc
c001e2ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e303:	e8 24 fb ff ff       	call   c001de2c <lockScheduler()>
c001e308:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e30d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e310:	e8 8d fe ff ff       	call   c001e1a2 <schedule()>
c001e315:	83 c4 0c             	add    esp,0xc
c001e318:	e9 11 fb ff ff       	jmp    c001de2e <unlockScheduler()>

c001e31d <waitTask(int, int*, int)>:
c001e31d:	83 ec 18             	sub    esp,0x18
c001e320:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e325:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e329:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e32c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e330:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e335:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e338:	6a 07                	push   0x7
c001e33a:	e8 bd ff ff ff       	call   c001e2fc <blockTask(TaskState)>
c001e33f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e344:	83 c4 10             	add    esp,0x10
c001e347:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e34a:	85 d2                	test   edx,edx
c001e34c:	74 0a                	je     c001e358 <waitTask(int, int*, int)+0x3b>
c001e34e:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e351:	89 02                	mov    DWORD PTR [edx],eax
c001e353:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e358:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e35b:	83 c4 0c             	add    esp,0xc
c001e35e:	c3                   	ret    

c001e35f <nanoSleepUntil(unsigned long long)>:
c001e35f:	83 ec 0c             	sub    esp,0xc
c001e362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e366:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e36a:	3b 05 b0 ed 02 c0    	cmp    eax,DWORD PTR ds:0xc002edb0
c001e370:	89 d1                	mov    ecx,edx
c001e372:	1b 0d b4 ed 02 c0    	sbb    ecx,DWORD PTR ds:0xc002edb4
c001e378:	73 04                	jae    c001e37e <nanoSleepUntil(unsigned long long)+0x1f>
c001e37a:	83 c4 0c             	add    esp,0xc
c001e37d:	c3                   	ret    
c001e37e:	e8 d0 fa ff ff       	call   c001de53 <lockStuff()>
c001e383:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e389:	83 ec 08             	sub    esp,0x8
c001e38c:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e38f:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e392:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e398:	68 7c 1c 03 c0       	push   0xc0031c7c
c001e39d:	e8 4e a9 00 00       	call   c0028cf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e3a2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e3a9:	e8 4e ff ff ff       	call   c001e2fc <blockTask(TaskState)>
c001e3ae:	83 c4 1c             	add    esp,0x1c
c001e3b1:	e9 71 fe ff ff       	jmp    c001e227 <unlockStuff()>

c001e3b6 <nanoSleep(unsigned long long)>:
c001e3b6:	a1 b0 ed 02 c0       	mov    eax,ds:0xc002edb0
c001e3bb:	8b 15 b4 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002edb4
c001e3c1:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e3c5:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e3c9:	eb 94                	jmp    c001e35f <nanoSleepUntil(unsigned long long)>

c001e3cb <sleep(unsigned long long)>:
c001e3cb:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e3d3:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e3d8:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e3dc:	01 ca                	add    edx,ecx
c001e3de:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e3e2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e3e6:	eb ce                	jmp    c001e3b6 <nanoSleep(unsigned long long)>

c001e3e8 <Semaphore::acquire()>:
c001e3e8:	83 ec 0c             	sub    esp,0xc
c001e3eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3ef:	e8 5f fa ff ff       	call   c001de53 <lockStuff()>
c001e3f4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e3f7:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e3f9:	7d 0c                	jge    c001e407 <Semaphore::acquire()+0x1f>
c001e3fb:	42                   	inc    edx
c001e3fc:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e3ff:	83 c4 0c             	add    esp,0xc
c001e402:	e9 20 fe ff ff       	jmp    c001e227 <unlockStuff()>
c001e407:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e40d:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e414:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e417:	85 d2                	test   edx,edx
c001e419:	74 2a                	je     c001e445 <Semaphore::acquire()+0x5d>
c001e41b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e41e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e424:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e427:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e42d:	83 ec 0c             	sub    esp,0xc
c001e430:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e433:	6a 05                	push   0x5
c001e435:	e8 c2 fe ff ff       	call   c001e2fc <blockTask(TaskState)>
c001e43a:	83 c4 10             	add    esp,0x10
c001e43d:	83 c4 0c             	add    esp,0xc
c001e440:	e9 e2 fd ff ff       	jmp    c001e227 <unlockStuff()>
c001e445:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e44b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e44e:	eb d7                	jmp    c001e427 <Semaphore::acquire()+0x3f>

c001e450 <taskReturned>:
c001e450:	83 ec 18             	sub    esp,0x18
c001e453:	68 c4 c6 02 c0       	push   0xc002c6c4
c001e458:	e8 32 c1 ff ff       	call   c001a58f <Krnl::panic(char const*)>
c001e45d:	83 c4 10             	add    esp,0x10
c001e460:	83 ec 0c             	sub    esp,0xc
c001e463:	6a 02                	push   0x2
c001e465:	e8 92 fe ff ff       	call   c001e2fc <blockTask(TaskState)>
c001e46a:	e8 bd f9 ff ff       	call   c001de2c <lockScheduler()>
c001e46f:	e8 2e fd ff ff       	call   c001e1a2 <schedule()>
c001e474:	e8 b5 f9 ff ff       	call   c001de2e <unlockScheduler()>
c001e479:	83 c4 10             	add    esp,0x10
c001e47c:	eb e2                	jmp    c001e460 <taskReturned+0x10>

c001e47e <Thr::processFromPID(int)>:
c001e47e:	57                   	push   edi
c001e47f:	56                   	push   esi
c001e480:	53                   	push   ebx
c001e481:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e485:	83 ec 0c             	sub    esp,0xc
c001e488:	68 ba c4 02 c0       	push   0xc002c4ba
c001e48d:	e8 31 49 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e492:	e8 95 f9 ff ff       	call   c001de2c <lockScheduler()>
c001e497:	c7 04 24 88 1c 03 c0 	mov    DWORD PTR [esp],0xc0031c88
c001e49e:	e8 7b a7 00 00       	call   c0028c1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e4a3:	83 c4 10             	add    esp,0x10
c001e4a6:	89 c7                	mov    edi,eax
c001e4a8:	eb 14                	jmp    c001e4be <Thr::processFromPID(int)+0x40>
c001e4aa:	83 ec 0c             	sub    esp,0xc
c001e4ad:	68 88 1c 03 c0       	push   0xc0031c88
c001e4b2:	e8 67 a7 00 00       	call   c0028c1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e4b7:	83 c4 10             	add    esp,0x10
c001e4ba:	39 f8                	cmp    eax,edi
c001e4bc:	74 3e                	je     c001e4fc <Thr::processFromPID(int)+0x7e>
c001e4be:	83 ec 0c             	sub    esp,0xc
c001e4c1:	68 88 1c 03 c0       	push   0xc0031c88
c001e4c6:	e8 53 a7 00 00       	call   c0028c1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e4cb:	c7 04 24 88 1c 03 c0 	mov    DWORD PTR [esp],0xc0031c88
c001e4d2:	89 c3                	mov    ebx,eax
c001e4d4:	e8 69 a7 00 00       	call   c0028c42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e4d9:	58                   	pop    eax
c001e4da:	5a                   	pop    edx
c001e4db:	53                   	push   ebx
c001e4dc:	68 88 1c 03 c0       	push   0xc0031c88
c001e4e1:	e8 0a a8 00 00       	call   c0028cf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e4e6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4e9:	83 c4 10             	add    esp,0x10
c001e4ec:	39 30                	cmp    DWORD PTR [eax],esi
c001e4ee:	75 ba                	jne    c001e4aa <Thr::processFromPID(int)+0x2c>
c001e4f0:	e8 39 f9 ff ff       	call   c001de2e <unlockScheduler()>
c001e4f5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4f8:	5b                   	pop    ebx
c001e4f9:	5e                   	pop    esi
c001e4fa:	5f                   	pop    edi
c001e4fb:	c3                   	ret    
c001e4fc:	e8 2d f9 ff ff       	call   c001de2e <unlockScheduler()>
c001e501:	83 ec 0c             	sub    esp,0xc
c001e504:	68 d5 c4 02 c0       	push   0xc002c4d5
c001e509:	e8 b5 48 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e50e:	83 c4 10             	add    esp,0x10
c001e511:	31 c0                	xor    eax,eax
c001e513:	5b                   	pop    ebx
c001e514:	5e                   	pop    esi
c001e515:	5f                   	pop    edi
c001e516:	c3                   	ret    

c001e517 <unblockTask(ThreadControlBlock*)>:
c001e517:	53                   	push   ebx
c001e518:	83 ec 08             	sub    esp,0x8
c001e51b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e51f:	e8 08 f9 ff ff       	call   c001de2c <lockScheduler()>
c001e524:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e527:	85 c0                	test   eax,eax
c001e529:	74 5c                	je     c001e587 <unblockTask(ThreadControlBlock*)+0x70>
c001e52b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e52e:	48                   	dec    eax
c001e52f:	74 31                	je     c001e562 <unblockTask(ThreadControlBlock*)+0x4b>
c001e531:	83 ec 0c             	sub    esp,0xc
c001e534:	68 88 1c 03 c0       	push   0xc0031c88
c001e539:	e8 e0 a6 00 00       	call   c0028c1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e53e:	83 c4 10             	add    esp,0x10
c001e541:	85 c0                	test   eax,eax
c001e543:	75 17                	jne    c001e55c <unblockTask(ThreadControlBlock*)+0x45>
c001e545:	eb 65                	jmp    c001e5ac <unblockTask(ThreadControlBlock*)+0x95>
c001e547:	83 ec 08             	sub    esp,0x8
c001e54a:	50                   	push   eax
c001e54b:	68 88 1c 03 c0       	push   0xc0031c88
c001e550:	e8 af a9 00 00       	call   c0028f04 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e555:	83 c4 10             	add    esp,0x10
c001e558:	85 c0                	test   eax,eax
c001e55a:	74 50                	je     c001e5ac <unblockTask(ThreadControlBlock*)+0x95>
c001e55c:	39 c3                	cmp    ebx,eax
c001e55e:	75 e7                	jne    c001e547 <unblockTask(ThreadControlBlock*)+0x30>
c001e560:	eb 1c                	jmp    c001e57e <unblockTask(ThreadControlBlock*)+0x67>
c001e562:	83 ec 0c             	sub    esp,0xc
c001e565:	68 b4 c7 02 c0       	push   0xc002c7b4
c001e56a:	e8 54 48 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e56f:	c7 04 24 40 c7 02 c0 	mov    DWORD PTR [esp],0xc002c740
c001e576:	e8 48 48 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e57b:	83 c4 10             	add    esp,0x10
c001e57e:	83 c4 08             	add    esp,0x8
c001e581:	5b                   	pop    ebx
c001e582:	e9 a7 f8 ff ff       	jmp    c001de2e <unlockScheduler()>
c001e587:	83 ec 0c             	sub    esp,0xc
c001e58a:	68 f8 c6 02 c0       	push   0xc002c6f8
c001e58f:	e8 2f 48 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e594:	c7 04 24 40 c7 02 c0 	mov    DWORD PTR [esp],0xc002c740
c001e59b:	e8 23 48 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e5a0:	83 c4 10             	add    esp,0x10
c001e5a3:	83 c4 08             	add    esp,0x8
c001e5a6:	5b                   	pop    ebx
c001e5a7:	e9 82 f8 ff ff       	jmp    c001de2e <unlockScheduler()>
c001e5ac:	83 ec 08             	sub    esp,0x8
c001e5af:	53                   	push   ebx
c001e5b0:	68 88 1c 03 c0       	push   0xc0031c88
c001e5b5:	e8 36 a7 00 00       	call   c0028cf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e5ba:	83 c4 10             	add    esp,0x10
c001e5bd:	83 c4 08             	add    esp,0x8
c001e5c0:	5b                   	pop    ebx
c001e5c1:	e9 68 f8 ff ff       	jmp    c001de2e <unlockScheduler()>

c001e5c6 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e5c6:	55                   	push   ebp
c001e5c7:	57                   	push   edi
c001e5c8:	56                   	push   esi
c001e5c9:	53                   	push   ebx
c001e5ca:	83 ec 1c             	sub    esp,0x1c
c001e5cd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e5d1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5d4:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e5da:	85 ff                	test   edi,edi
c001e5dc:	7e 20                	jle    c001e5fe <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e5de:	31 f6                	xor    esi,esi
c001e5e0:	83 ec 0c             	sub    esp,0xc
c001e5e3:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e5ea:	46                   	inc    esi
c001e5eb:	e8 6b 12 ff ff       	call   c000f85b <free>
c001e5f0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5f3:	83 c4 10             	add    esp,0x10
c001e5f6:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e5fc:	7f e2                	jg     c001e5e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e5fe:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e608:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e60d:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e610:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e613:	d3 c0                	rol    eax,cl
c001e615:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e61c:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e61f:	89 f7                	mov    edi,esi
c001e621:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e629:	0f 85 74 01 00 00    	jne    c001e7a3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e62f:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e635:	85 ed                	test   ebp,ebp
c001e637:	74 1b                	je     c001e654 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e639:	83 ec 0c             	sub    esp,0xc
c001e63c:	55                   	push   ebp
c001e63d:	e8 ba bc ff ff       	call   c001a2fc <EnvVarContainer::~EnvVarContainer()>
c001e642:	59                   	pop    ecx
c001e643:	5e                   	pop    esi
c001e644:	6a 0c                	push   0xc
c001e646:	55                   	push   ebp
c001e647:	e8 97 46 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c001e64c:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e64f:	83 c4 10             	add    esp,0x10
c001e652:	89 f7                	mov    edi,esi
c001e654:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e65a:	85 c0                	test   eax,eax
c001e65c:	0f 84 aa 00 00 00    	je     c001e70c <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e662:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e665:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e669:	31 c9                	xor    ecx,ecx
c001e66b:	eb 10                	jmp    c001e67d <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e66d:	41                   	inc    ecx
c001e66e:	83 f9 10             	cmp    ecx,0x10
c001e671:	0f 84 95 00 00 00    	je     c001e70c <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e677:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e67d:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e684:	d3 fa                	sar    edx,cl
c001e686:	83 e2 01             	and    edx,0x1
c001e689:	74 e2                	je     c001e66d <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e68b:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e68e:	01 ca                	add    edx,ecx
c001e690:	89 d5                	mov    ebp,edx
c001e692:	c1 e5 05             	shl    ebp,0x5
c001e695:	01 ea                	add    edx,ebp
c001e697:	01 d0                	add    eax,edx
c001e699:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e69f:	83 fd 07             	cmp    ebp,0x7
c001e6a2:	75 c9                	jne    c001e66d <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e6a4:	05 40 02 00 00       	add    eax,0x240
c001e6a9:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e6ac:	83 fd ff             	cmp    ebp,0xffffffff
c001e6af:	0f 8c 08 01 00 00    	jl     c001e7bd <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e6b5:	0f 84 b9 01 00 00    	je     c001e874 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e6bb:	85 ed                	test   ebp,ebp
c001e6bd:	0f 84 a0 01 00 00    	je     c001e863 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e6c3:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e6c5:	75 a6                	jne    c001e66d <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e6c7:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e6cd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e6d1:	01 d0                	add    eax,edx
c001e6d3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e6d7:	83 ec 0c             	sub    esp,0xc
c001e6da:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e6e0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6e3:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e6e9:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e6f0:	50                   	push   eax
c001e6f1:	e8 21 fe ff ff       	call   c001e517 <unblockTask(ThreadControlBlock*)>
c001e6f6:	83 c4 10             	add    esp,0x10
c001e6f9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e6fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e700:	89 f7                	mov    edi,esi
c001e702:	41                   	inc    ecx
c001e703:	83 f9 10             	cmp    ecx,0x10
c001e706:	0f 85 6b ff ff ff    	jne    c001e677 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e70c:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e712:	85 c0                	test   eax,eax
c001e714:	74 5d                	je     c001e773 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e716:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e71c:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e722:	74 4f                	je     c001e773 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e724:	83 ec 0c             	sub    esp,0xc
c001e727:	68 88 1c 03 c0       	push   0xc0031c88
c001e72c:	e8 ed a4 00 00       	call   c0028c1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e731:	c7 04 24 88 1c 03 c0 	mov    DWORD PTR [esp],0xc0031c88
c001e738:	89 c7                	mov    edi,eax
c001e73a:	e8 e7 a4 00 00       	call   c0028c26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e73f:	83 c4 10             	add    esp,0x10
c001e742:	84 c0                	test   al,al
c001e744:	0f 84 e4 00 00 00    	je     c001e82e <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e74a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e74d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e753:	85 d2                	test   edx,edx
c001e755:	74 0f                	je     c001e766 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e757:	83 ec 0c             	sub    esp,0xc
c001e75a:	8b 02                	mov    eax,DWORD PTR [edx]
c001e75c:	52                   	push   edx
c001e75d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e760:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e763:	83 c4 10             	add    esp,0x10
c001e766:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e770:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e773:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e779:	85 db                	test   ebx,ebx
c001e77b:	74 16                	je     c001e793 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e77d:	83 ec 0c             	sub    esp,0xc
c001e780:	53                   	push   ebx
c001e781:	e8 2a 39 ff ff       	call   c00120b0 <VAS::~VAS()>
c001e786:	58                   	pop    eax
c001e787:	5a                   	pop    edx
c001e788:	6a 14                	push   0x14
c001e78a:	53                   	push   ebx
c001e78b:	e8 53 45 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c001e790:	83 c4 10             	add    esp,0x10
c001e793:	83 ec 0c             	sub    esp,0xc
c001e796:	68 ec c4 02 c0       	push   0xc002c4ec
c001e79b:	e8 23 46 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e7a0:	83 c4 10             	add    esp,0x10
c001e7a3:	83 ec 08             	sub    esp,0x8
c001e7a6:	68 3f 07 00 00       	push   0x73f
c001e7ab:	68 fa c4 02 c0       	push   0xc002c4fa
c001e7b0:	e8 0e 46 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e7b5:	83 c4 2c             	add    esp,0x2c
c001e7b8:	5b                   	pop    ebx
c001e7b9:	5e                   	pop    esi
c001e7ba:	5f                   	pop    edi
c001e7bb:	5d                   	pop    ebp
c001e7bc:	c3                   	ret    
c001e7bd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e7c1:	83 ec 0c             	sub    esp,0xc
c001e7c4:	68 f8 c7 02 c0       	push   0xc002c7f8
c001e7c9:	e8 c1 bd ff ff       	call   c001a58f <Krnl::panic(char const*)>
c001e7ce:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e7d1:	83 c4 10             	add    esp,0x10
c001e7d4:	89 f7                	mov    edi,esi
c001e7d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e7da:	e9 8e fe ff ff       	jmp    c001e66d <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e7df:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e7e5:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e7eb:	75 1c                	jne    c001e809 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e7ed:	83 ec 0c             	sub    esp,0xc
c001e7f0:	68 60 c8 02 c0       	push   0xc002c860
c001e7f5:	e8 c9 45 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e7fa:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e801:	e8 f6 fa ff ff       	call   c001e2fc <blockTask(TaskState)>
c001e806:	83 c4 10             	add    esp,0x10
c001e809:	83 ec 08             	sub    esp,0x8
c001e80c:	56                   	push   esi
c001e80d:	68 88 1c 03 c0       	push   0xc0031c88
c001e812:	e8 d9 a4 00 00       	call   c0028cf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e817:	c7 04 24 88 1c 03 c0 	mov    DWORD PTR [esp],0xc0031c88
c001e81e:	e8 fb a3 00 00       	call   c0028c1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e823:	83 c4 10             	add    esp,0x10
c001e826:	39 f8                	cmp    eax,edi
c001e828:	0f 84 1c ff ff ff    	je     c001e74a <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e82e:	83 ec 0c             	sub    esp,0xc
c001e831:	68 88 1c 03 c0       	push   0xc0031c88
c001e836:	e8 e3 a3 00 00       	call   c0028c1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e83b:	c7 04 24 88 1c 03 c0 	mov    DWORD PTR [esp],0xc0031c88
c001e842:	89 c6                	mov    esi,eax
c001e844:	e8 f9 a3 00 00       	call   c0028c42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e849:	83 c4 10             	add    esp,0x10
c001e84c:	39 f3                	cmp    ebx,esi
c001e84e:	74 b9                	je     c001e809 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e850:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e853:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e856:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e85c:	75 ab                	jne    c001e809 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e85e:	e9 7c ff ff ff       	jmp    c001e7df <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e863:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e867:	83 ec 0c             	sub    esp,0xc
c001e86a:	68 2c c8 02 c0       	push   0xc002c82c
c001e86f:	e9 55 ff ff ff       	jmp    c001e7c9 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e874:	8b 36                	mov    esi,DWORD PTR [esi]
c001e876:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e87a:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e87d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e880:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e886:	01 d7                	add    edi,edx
c001e888:	89 f8                	mov    eax,edi
c001e88a:	e9 44 fe ff ff       	jmp    c001e6d3 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e88f <cleanerTaskFunction(void*)>:
c001e88f:	53                   	push   ebx
c001e890:	83 ec 08             	sub    esp,0x8
c001e893:	e8 96 f5 ff ff       	call   c001de2e <unlockScheduler()>
c001e898:	e8 8f f5 ff ff       	call   c001de2c <lockScheduler()>
c001e89d:	80 3d 4c 1c 03 c0 00 	cmp    BYTE PTR ds:0xc0031c4c,0x0
c001e8a4:	0f 85 8e 00 00 00    	jne    c001e938 <cleanerTaskFunction(void*)+0xa9>
c001e8aa:	83 ec 0c             	sub    esp,0xc
c001e8ad:	6a 02                	push   0x2
c001e8af:	e8 06 fa ff ff       	call   c001e2ba <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e8b4:	83 c4 10             	add    esp,0x10
c001e8b7:	c6 05 4c 1c 03 c0 00 	mov    BYTE PTR ds:0xc0031c4c,0x0
c001e8be:	e8 90 f5 ff ff       	call   c001de53 <lockStuff()>
c001e8c3:	e8 64 f5 ff ff       	call   c001de2c <lockScheduler()>
c001e8c8:	83 ec 0c             	sub    esp,0xc
c001e8cb:	68 70 1c 03 c0       	push   0xc0031c70
c001e8d0:	e8 51 a3 00 00       	call   c0028c26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e8d5:	83 c4 10             	add    esp,0x10
c001e8d8:	84 c0                	test   al,al
c001e8da:	75 40                	jne    c001e91c <cleanerTaskFunction(void*)+0x8d>
c001e8dc:	83 ec 0c             	sub    esp,0xc
c001e8df:	68 70 1c 03 c0       	push   0xc0031c70
c001e8e4:	e8 35 a3 00 00       	call   c0028c1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8e9:	c7 04 24 70 1c 03 c0 	mov    DWORD PTR [esp],0xc0031c70
c001e8f0:	89 c3                	mov    ebx,eax
c001e8f2:	e8 4b a3 00 00       	call   c0028c42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e8f7:	c7 04 24 10 c5 02 c0 	mov    DWORD PTR [esp],0xc002c510
c001e8fe:	e8 c0 44 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e903:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e906:	e8 bb fc ff ff       	call   c001e5c6 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e90b:	c7 04 24 29 c5 02 c0 	mov    DWORD PTR [esp],0xc002c529
c001e912:	e8 ac 44 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e917:	83 c4 10             	add    esp,0x10
c001e91a:	eb ac                	jmp    c001e8c8 <cleanerTaskFunction(void*)+0x39>
c001e91c:	e8 0d f5 ff ff       	call   c001de2e <unlockScheduler()>
c001e921:	e8 01 f9 ff ff       	call   c001e227 <unlockStuff()>
c001e926:	e8 01 f5 ff ff       	call   c001de2c <lockScheduler()>
c001e92b:	80 3d 4c 1c 03 c0 00 	cmp    BYTE PTR ds:0xc0031c4c,0x0
c001e932:	0f 84 72 ff ff ff    	je     c001e8aa <cleanerTaskFunction(void*)+0x1b>
c001e938:	e8 f1 f4 ff ff       	call   c001de2e <unlockScheduler()>
c001e93d:	e9 75 ff ff ff       	jmp    c001e8b7 <cleanerTaskFunction(void*)+0x28>

c001e942 <terminateTask(int)>:
c001e942:	83 ec 14             	sub    esp,0x14
c001e945:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e94a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e94d:	83 c0 0c             	add    eax,0xc
c001e950:	50                   	push   eax
c001e951:	68 88 c8 02 c0       	push   0xc002c888
c001e956:	e8 68 44 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e95b:	e8 f3 f4 ff ff       	call   c001de53 <lockStuff()>
c001e960:	e8 c7 f4 ff ff       	call   c001de2c <lockScheduler()>
c001e965:	c7 04 24 3c c5 02 c0 	mov    DWORD PTR [esp],0xc002c53c
c001e96c:	e8 52 44 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e971:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e975:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e97a:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e97d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e982:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e985:	5a                   	pop    edx
c001e986:	59                   	pop    ecx
c001e987:	50                   	push   eax
c001e988:	68 70 1c 03 c0       	push   0xc0031c70
c001e98d:	e8 5e a3 00 00       	call   c0028cf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e992:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e997:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e99e:	c7 04 24 56 c5 02 c0 	mov    DWORD PTR [esp],0xc002c556
c001e9a5:	e8 19 44 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e9aa:	83 c4 10             	add    esp,0x10
c001e9ad:	a1 48 1c 03 c0       	mov    eax,ds:0xc0031c48
c001e9b2:	85 c0                	test   eax,eax
c001e9b4:	74 5a                	je     c001ea10 <terminateTask(int)+0xce>
c001e9b6:	83 ec 0c             	sub    esp,0xc
c001e9b9:	68 70 c5 02 c0       	push   0xc002c570
c001e9be:	e8 00 44 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e9c3:	58                   	pop    eax
c001e9c4:	c6 05 4c 1c 03 c0 01 	mov    BYTE PTR ds:0xc0031c4c,0x1
c001e9cb:	ff 35 48 1c 03 c0    	push   DWORD PTR ds:0xc0031c48
c001e9d1:	e8 41 fb ff ff       	call   c001e517 <unblockTask(ThreadControlBlock*)>
c001e9d6:	c7 04 24 8a c5 02 c0 	mov    DWORD PTR [esp],0xc002c58a
c001e9dd:	e8 e1 43 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e9e2:	83 c4 10             	add    esp,0x10
c001e9e5:	e8 44 f4 ff ff       	call   c001de2e <unlockScheduler()>
c001e9ea:	e8 38 f8 ff ff       	call   c001e227 <unlockStuff()>
c001e9ef:	83 ec 0c             	sub    esp,0xc
c001e9f2:	68 c2 c5 02 c0       	push   0xc002c5c2
c001e9f7:	e8 c7 43 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001e9fc:	83 c4 10             	add    esp,0x10
c001e9ff:	e8 28 f4 ff ff       	call   c001de2c <lockScheduler()>
c001ea04:	e8 99 f7 ff ff       	call   c001e1a2 <schedule()>
c001ea09:	e8 20 f4 ff ff       	call   c001de2e <unlockScheduler()>
c001ea0e:	eb ef                	jmp    c001e9ff <terminateTask(int)+0xbd>
c001ea10:	83 ec 0c             	sub    esp,0xc
c001ea13:	68 a4 c5 02 c0       	push   0xc002c5a4
c001ea18:	e8 a6 43 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001ea1d:	83 c4 10             	add    esp,0x10
c001ea20:	eb c3                	jmp    c001e9e5 <terminateTask(int)+0xa3>

c001ea22 <Thr::terminateFromIRQ(int)>:
c001ea22:	83 ec 18             	sub    esp,0x18
c001ea25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea29:	e8 14 ff ff ff       	call   c001e942 <terminateTask(int)>

c001ea2e <Semaphore::release()>:
c001ea2e:	83 ec 0c             	sub    esp,0xc
c001ea31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea35:	e8 19 f4 ff ff       	call   c001de53 <lockStuff()>
c001ea3a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001ea3d:	85 d2                	test   edx,edx
c001ea3f:	74 1a                	je     c001ea5b <Semaphore::release()+0x2d>
c001ea41:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001ea44:	83 ec 0c             	sub    esp,0xc
c001ea47:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ea4a:	52                   	push   edx
c001ea4b:	e8 c7 fa ff ff       	call   c001e517 <unblockTask(ThreadControlBlock*)>
c001ea50:	83 c4 10             	add    esp,0x10
c001ea53:	83 c4 0c             	add    esp,0xc
c001ea56:	e9 cc f7 ff ff       	jmp    c001e227 <unlockStuff()>
c001ea5b:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001ea5e:	83 c4 0c             	add    esp,0xc
c001ea61:	e9 c1 f7 ff ff       	jmp    c001e227 <unlockStuff()>

c001ea66 <__static_initialization_and_destruction_0(int, int)>:
c001ea66:	83 ec 0c             	sub    esp,0xc
c001ea69:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ea6e:	0f 85 88 00 00 00    	jne    c001eafc <__static_initialization_and_destruction_0(int, int)+0x96>
c001ea74:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ea7c:	75 7e                	jne    c001eafc <__static_initialization_and_destruction_0(int, int)+0x96>
c001ea7e:	83 ec 0c             	sub    esp,0xc
c001ea81:	68 88 1c 03 c0       	push   0xc0031c88
c001ea86:	e8 21 a4 00 00       	call   c0028eac <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea8b:	83 c4 10             	add    esp,0x10
c001ea8e:	83 ec 04             	sub    esp,0x4
c001ea91:	68 54 d6 02 c0       	push   0xc002d654
c001ea96:	68 88 1c 03 c0       	push   0xc0031c88
c001ea9b:	68 60 8e 02 c0       	push   0xc0028e60
c001eaa0:	e8 b8 41 ff ff       	call   c0012c5d <__cxa_atexit>
c001eaa5:	83 c4 10             	add    esp,0x10
c001eaa8:	83 ec 0c             	sub    esp,0xc
c001eaab:	68 7c 1c 03 c0       	push   0xc0031c7c
c001eab0:	e8 f7 a3 00 00       	call   c0028eac <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001eab5:	83 c4 10             	add    esp,0x10
c001eab8:	83 ec 04             	sub    esp,0x4
c001eabb:	68 54 d6 02 c0       	push   0xc002d654
c001eac0:	68 7c 1c 03 c0       	push   0xc0031c7c
c001eac5:	68 60 8e 02 c0       	push   0xc0028e60
c001eaca:	e8 8e 41 ff ff       	call   c0012c5d <__cxa_atexit>
c001eacf:	83 c4 10             	add    esp,0x10
c001ead2:	83 ec 0c             	sub    esp,0xc
c001ead5:	68 70 1c 03 c0       	push   0xc0031c70
c001eada:	e8 cd a3 00 00       	call   c0028eac <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001eadf:	83 c4 10             	add    esp,0x10
c001eae2:	83 ec 04             	sub    esp,0x4
c001eae5:	68 54 d6 02 c0       	push   0xc002d654
c001eaea:	68 70 1c 03 c0       	push   0xc0031c70
c001eaef:	68 60 8e 02 c0       	push   0xc0028e60
c001eaf4:	e8 64 41 ff ff       	call   c0012c5d <__cxa_atexit>
c001eaf9:	83 c4 10             	add    esp,0x10
c001eafc:	90                   	nop
c001eafd:	83 c4 0c             	add    esp,0xc
c001eb00:	c3                   	ret    

c001eb01 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001eb01:	83 ec 0c             	sub    esp,0xc
c001eb04:	83 ec 08             	sub    esp,0x8
c001eb07:	68 ff ff 00 00       	push   0xffff
c001eb0c:	6a 01                	push   0x1
c001eb0e:	e8 53 ff ff ff       	call   c001ea66 <__static_initialization_and_destruction_0(int, int)>
c001eb13:	83 c4 10             	add    esp,0x10
c001eb16:	83 c4 0c             	add    esp,0xc
c001eb19:	c3                   	ret    

c001eb1a <Vm::inbv(unsigned short)>:
c001eb1a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eb1e:	66 81 fa fe fe       	cmp    dx,0xfefe
c001eb23:	75 06                	jne    c001eb2b <Vm::inbv(unsigned short)+0x11>
c001eb25:	a0 cc 1c 03 c0       	mov    al,ds:0xc0031ccc
c001eb2a:	c3                   	ret    
c001eb2b:	ec                   	in     al,dx
c001eb2c:	c3                   	ret    

c001eb2d <Vm::outbv(unsigned short, unsigned char)>:
c001eb2d:	53                   	push   ebx
c001eb2e:	83 ec 08             	sub    esp,0x8
c001eb31:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eb35:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eb39:	66 81 fa fe fe       	cmp    dx,0xfefe
c001eb3e:	75 38                	jne    c001eb78 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001eb40:	0f b6 c3             	movzx  eax,bl
c001eb43:	51                   	push   ecx
c001eb44:	51                   	push   ecx
c001eb45:	50                   	push   eax
c001eb46:	68 a7 c8 02 c0       	push   0xc002c8a7
c001eb4b:	e8 73 42 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001eb50:	8b 15 cc 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031ccc
c001eb56:	83 c4 10             	add    esp,0x10
c001eb59:	8d 42 01             	lea    eax,[edx+0x1]
c001eb5c:	88 9a e0 1c 03 c0    	mov    BYTE PTR [edx-0x3ffce320],bl
c001eb62:	a3 cc 1c 03 c0       	mov    ds:0xc0031ccc,eax
c001eb67:	83 f8 20             	cmp    eax,0x20
c001eb6a:	75 0f                	jne    c001eb7b <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eb6c:	c7 05 cc 1c 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031ccc,0x1f
c001eb76:	eb 03                	jmp    c001eb7b <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eb78:	88 d8                	mov    al,bl
c001eb7a:	ee                   	out    dx,al
c001eb7b:	83 c4 08             	add    esp,0x8
c001eb7e:	5b                   	pop    ebx
c001eb7f:	c3                   	ret    

c001eb80 <Vm::realToLinear(unsigned short, unsigned short)>:
c001eb80:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eb85:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eb8a:	c1 e0 04             	shl    eax,0x4
c001eb8d:	01 d0                	add    eax,edx
c001eb8f:	c3                   	ret    

c001eb90 <Vm::getSegment(unsigned int)>:
c001eb90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb94:	c1 e8 10             	shr    eax,0x10
c001eb97:	c3                   	ret    

c001eb98 <Vm::getOffset(unsigned int)>:
c001eb98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb9c:	c3                   	ret    

c001eb9d <Vm::mainloop2()>:
c001eb9d:	83 ec 0c             	sub    esp,0xc
c001eba0:	e8 87 f2 ff ff       	call   c001de2c <lockScheduler()>
c001eba5:	83 ec 0c             	sub    esp,0xc
c001eba8:	c6 05 c5 1c 03 c0 01 	mov    BYTE PTR ds:0xc0031cc5,0x1
c001ebaf:	6a 02                	push   0x2
c001ebb1:	e8 04 f7 ff ff       	call   c001e2ba <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ebb6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ebbb:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ebbf:	52                   	push   edx
c001ebc0:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ebc4:	52                   	push   edx
c001ebc5:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001ebc9:	52                   	push   edx
c001ebca:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ebce:	50                   	push   eax
c001ebcf:	e8 26 17 fe ff       	call   c00002fa <goToVM86>
c001ebd4:	83 c4 2c             	add    esp,0x2c
c001ebd7:	c3                   	ret    

c001ebd8 <Vm::mainVm8086Loop(void*)>:
c001ebd8:	83 ec 0c             	sub    esp,0xc
c001ebdb:	e8 4e f2 ff ff       	call   c001de2e <unlockScheduler()>
c001ebe0:	83 c4 0c             	add    esp,0xc
c001ebe3:	eb b8                	jmp    c001eb9d <Vm::mainloop2()>

c001ebe5 <Vm::mainloop3(unsigned long)>:
c001ebe5:	53                   	push   ebx
c001ebe6:	83 ec 08             	sub    esp,0x8
c001ebe9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ebed:	e8 3a f2 ff ff       	call   c001de2c <lockScheduler()>
c001ebf2:	83 ec 0c             	sub    esp,0xc
c001ebf5:	89 1d c0 1c 03 c0    	mov    DWORD PTR ds:0xc0031cc0,ebx
c001ebfb:	6a 02                	push   0x2
c001ebfd:	c6 05 c4 1c 03 c0 01 	mov    BYTE PTR ds:0xc0031cc4,0x1
c001ec04:	e8 b1 f6 ff ff       	call   c001e2ba <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ec09:	83 c4 18             	add    esp,0x18
c001ec0c:	5b                   	pop    ebx
c001ec0d:	eb 8e                	jmp    c001eb9d <Vm::mainloop2()>

c001ec0f <Vm::initialise8086()>:
c001ec0f:	83 ec 0c             	sub    esp,0xc
c001ec12:	68 80 00 00 00       	push   0x80
c001ec17:	6a 00                	push   0x0
c001ec19:	68 d8 eb 01 c0       	push   0xc001ebd8
c001ec1e:	ff 35 94 1c 03 c0    	push   DWORD PTR ds:0xc0031c94
c001ec24:	e8 35 f3 ff ff       	call   c001df5e <Process::createThread(void (*)(void*), void*, int)>
c001ec29:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ec30:	a3 c8 1c 03 c0       	mov    ds:0xc0031cc8,eax
c001ec35:	68 00 01 00 00       	push   0x100
c001ec3a:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c001ec3f:	6a 00                	push   0x0
c001ec41:	6a 00                	push   0x0
c001ec43:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ec49:	e8 c2 38 ff ff       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ec4e:	83 c4 2c             	add    esp,0x2c
c001ec51:	c3                   	ret    

c001ec52 <Vm::finish8086()>:
c001ec52:	53                   	push   ebx
c001ec53:	83 ec 08             	sub    esp,0x8
c001ec56:	e8 d1 f1 ff ff       	call   c001de2c <lockScheduler()>
c001ec5b:	80 3d c4 1c 03 c0 00 	cmp    BYTE PTR ds:0xc0031cc4,0x0
c001ec62:	75 0c                	jne    c001ec70 <Vm::finish8086()+0x1e>
c001ec64:	e8 39 f5 ff ff       	call   c001e1a2 <schedule()>
c001ec69:	e8 c0 f1 ff ff       	call   c001de2e <unlockScheduler()>
c001ec6e:	eb e6                	jmp    c001ec56 <Vm::finish8086()+0x4>
c001ec70:	83 ec 0c             	sub    esp,0xc
c001ec73:	8b 1d c0 1c 03 c0    	mov    ebx,DWORD PTR ds:0xc0031cc0
c001ec79:	ff 35 c8 1c 03 c0    	push   DWORD PTR ds:0xc0031cc8
c001ec7f:	c6 05 c4 1c 03 c0 00 	mov    BYTE PTR ds:0xc0031cc4,0x0
c001ec86:	e8 8c f8 ff ff       	call   c001e517 <unblockTask(ThreadControlBlock*)>
c001ec8b:	e8 9e f1 ff ff       	call   c001de2e <unlockScheduler()>
c001ec90:	89 d8                	mov    eax,ebx
c001ec92:	83 c4 18             	add    esp,0x18
c001ec95:	5b                   	pop    ebx
c001ec96:	c3                   	ret    

c001ec97 <Vm::getOutput8086(unsigned char*)>:
c001ec97:	83 ec 10             	sub    esp,0x10
c001ec9a:	ff 35 cc 1c 03 c0    	push   DWORD PTR ds:0xc0031ccc
c001eca0:	68 e0 1c 03 c0       	push   0xc0031ce0
c001eca5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eca9:	e8 9e 1a fe ff       	call   c000074c <memcpy>
c001ecae:	a1 cc 1c 03 c0       	mov    eax,ds:0xc0031ccc
c001ecb3:	c7 05 cc 1c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031ccc,0x0
c001ecbd:	83 c4 1c             	add    esp,0x1c
c001ecc0:	c3                   	ret    

c001ecc1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ecc1:	55                   	push   ebp
c001ecc2:	57                   	push   edi
c001ecc3:	56                   	push   esi
c001ecc4:	53                   	push   ebx
c001ecc5:	83 ec 2c             	sub    esp,0x2c
c001ecc8:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001eccc:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ecd0:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ecd4:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ecd8:	e8 4f f1 ff ff       	call   c001de2c <lockScheduler()>
c001ecdd:	a0 c5 1c 03 c0       	mov    al,ds:0xc0031cc5
c001ece2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ece6:	84 c0                	test   al,al
c001ece8:	75 0c                	jne    c001ecf6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ecea:	e8 b3 f4 ff ff       	call   c001e1a2 <schedule()>
c001ecef:	e8 3a f1 ff ff       	call   c001de2e <unlockScheduler()>
c001ecf4:	eb e2                	jmp    c001ecd8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ecf6:	a1 c8 1c 03 c0       	mov    eax,ds:0xc0031cc8
c001ecfb:	c7 05 cc 1c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031ccc,0x0
c001ed05:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ed09:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ed0d:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ed11:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ed15:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ed19:	50                   	push   eax
c001ed1a:	6a 20                	push   0x20
c001ed1c:	6a 00                	push   0x0
c001ed1e:	68 e0 1c 03 c0       	push   0xc0031ce0
c001ed23:	e8 58 1a fe ff       	call   c0000780 <memset>
c001ed28:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ed2f:	e8 17 0b ff ff       	call   c000f84b <malloc>
c001ed34:	83 c4 0c             	add    esp,0xc
c001ed37:	89 c7                	mov    edi,eax
c001ed39:	ff 35 94 1c 03 c0    	push   DWORD PTR ds:0xc0031c94
c001ed3f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ed43:	50                   	push   eax
c001ed44:	e8 d9 45 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c001ed49:	83 c4 10             	add    esp,0x10
c001ed4c:	85 ff                	test   edi,edi
c001ed4e:	75 0a                	jne    c001ed5a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ed50:	83 ec 0c             	sub    esp,0xc
c001ed53:	68 c3 c8 02 c0       	push   0xc002c8c3
c001ed58:	eb 27                	jmp    c001ed81 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ed5a:	50                   	push   eax
c001ed5b:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ed5f:	50                   	push   eax
c001ed60:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ed64:	50                   	push   eax
c001ed65:	57                   	push   edi
c001ed66:	e8 c7 48 ff ff       	call   c0013632 <File::stat(unsigned long long*, bool*)>
c001ed6b:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ed70:	83 c4 10             	add    esp,0x10
c001ed73:	89 e8                	mov    eax,ebp
c001ed75:	84 c0                	test   al,al
c001ed77:	74 19                	je     c001ed92 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ed79:	83 ec 0c             	sub    esp,0xc
c001ed7c:	68 d7 c8 02 c0       	push   0xc002c8d7
c001ed81:	e8 09 b8 ff ff       	call   c001a58f <Krnl::panic(char const*)>
c001ed86:	31 ed                	xor    ebp,ebp
c001ed88:	e8 a1 f0 ff ff       	call   c001de2e <unlockScheduler()>
c001ed8d:	83 c4 10             	add    esp,0x10
c001ed90:	eb 75                	jmp    c001ee07 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ed92:	50                   	push   eax
c001ed93:	50                   	push   eax
c001ed94:	6a 01                	push   0x1
c001ed96:	57                   	push   edi
c001ed97:	e8 ea 45 ff ff       	call   c0013386 <File::open(FileOpenMode)>
c001ed9c:	83 c4 10             	add    esp,0x10
c001ed9f:	85 c0                	test   eax,eax
c001eda1:	74 17                	je     c001edba <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001eda3:	83 ec 0c             	sub    esp,0xc
c001eda6:	68 f0 c8 02 c0       	push   0xc002c8f0
c001edab:	e8 df b7 ff ff       	call   c001a58f <Krnl::panic(char const*)>
c001edb0:	e8 79 f0 ff ff       	call   c001de2e <unlockScheduler()>
c001edb5:	83 c4 10             	add    esp,0x10
c001edb8:	eb 4d                	jmp    c001ee07 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001edba:	0f b7 f6             	movzx  esi,si
c001edbd:	50                   	push   eax
c001edbe:	0f b7 db             	movzx  ebx,bx
c001edc1:	50                   	push   eax
c001edc2:	56                   	push   esi
c001edc3:	53                   	push   ebx
c001edc4:	e8 b7 fd ff ff       	call   c001eb80 <Vm::realToLinear(unsigned short, unsigned short)>
c001edc9:	5a                   	pop    edx
c001edca:	8b 17                	mov    edx,DWORD PTR [edi]
c001edcc:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001edd0:	51                   	push   ecx
c001edd1:	50                   	push   eax
c001edd2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001edd6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001edda:	57                   	push   edi
c001eddb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001edde:	83 c4 14             	add    esp,0x14
c001ede1:	57                   	push   edi
c001ede2:	e8 fd 45 ff ff       	call   c00133e4 <File::close()>
c001ede7:	c6 05 c5 1c 03 c0 00 	mov    BYTE PTR ds:0xc0031cc5,0x0
c001edee:	e8 3b f0 ff ff       	call   c001de2e <unlockScheduler()>
c001edf3:	59                   	pop    ecx
c001edf4:	ff 35 c8 1c 03 c0    	push   DWORD PTR ds:0xc0031cc8
c001edfa:	e8 18 f7 ff ff       	call   c001e517 <unblockTask(ThreadControlBlock*)>
c001edff:	83 c4 10             	add    esp,0x10
c001ee02:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ee07:	83 c4 2c             	add    esp,0x2c
c001ee0a:	89 e8                	mov    eax,ebp
c001ee0c:	5b                   	pop    ebx
c001ee0d:	5e                   	pop    esi
c001ee0e:	5f                   	pop    edi
c001ee0f:	5d                   	pop    ebp
c001ee10:	c3                   	ret    

c001ee11 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ee11:	57                   	push   edi
c001ee12:	56                   	push   esi
c001ee13:	53                   	push   ebx
c001ee14:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ee18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee1c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ee20:	83 e8 06             	sub    eax,0x6
c001ee23:	0f b7 c0             	movzx  eax,ax
c001ee26:	50                   	push   eax
c001ee27:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ee2c:	50                   	push   eax
c001ee2d:	e8 4e fd ff ff       	call   c001eb80 <Vm::realToLinear(unsigned short, unsigned short)>
c001ee32:	5a                   	pop    edx
c001ee33:	5e                   	pop    esi
c001ee34:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ee37:	8d 56 fa             	lea    edx,[esi-0x6]
c001ee3a:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ee40:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ee43:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ee46:	83 c2 02             	add    edx,0x2
c001ee49:	66 89 10             	mov    WORD PTR [eax],dx
c001ee4c:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ee4f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ee53:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ee56:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ee5a:	89 d6                	mov    esi,edx
c001ee5c:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ee62:	66 81 e6 ff fd       	and    si,0xfdff
c001ee67:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ee6b:	74 07                	je     c001ee74 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ee6d:	89 d6                	mov    esi,edx
c001ee6f:	66 81 ce 00 02       	or     si,0x200
c001ee74:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ee78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee7d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ee81:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ee89:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ee8c:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ee94:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ee97:	5b                   	pop    ebx
c001ee98:	5e                   	pop    esi
c001ee99:	5f                   	pop    edi
c001ee9a:	c3                   	ret    

c001ee9b <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ee9b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eea0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eea5:	c1 e0 04             	shl    eax,0x4
c001eea8:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001eeab:	c3                   	ret    

c001eeac <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001eeac:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eeb1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eeb6:	c1 e0 04             	shl    eax,0x4
c001eeb9:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001eebd:	c3                   	ret    

c001eebe <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001eebe:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eec3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eec8:	c1 e0 04             	shl    eax,0x4
c001eecb:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001eece:	c3                   	ret    

c001eecf <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001eecf:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eed4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eed9:	c1 e0 04             	shl    eax,0x4
c001eedc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eee0:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001eee3:	c3                   	ret    

c001eee4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001eee4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eee9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eeee:	c1 e0 04             	shl    eax,0x4
c001eef1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eef5:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001eef9:	c3                   	ret    

c001eefa <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001eefa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eeff:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ef04:	c1 e0 04             	shl    eax,0x4
c001ef07:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ef0b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ef0e:	c3                   	ret    

c001ef0f <Vm::faultHandler(regs*)>:
c001ef0f:	55                   	push   ebp
c001ef10:	57                   	push   edi
c001ef11:	56                   	push   esi
c001ef12:	53                   	push   ebx
c001ef13:	83 ec 1c             	sub    esp,0x1c
c001ef16:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ef1a:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ef1d:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ef20:	0f b7 c1             	movzx  eax,cx
c001ef23:	50                   	push   eax
c001ef24:	0f b7 c3             	movzx  eax,bx
c001ef27:	c1 e3 04             	shl    ebx,0x4
c001ef2a:	50                   	push   eax
c001ef2b:	e8 50 fc ff ff       	call   c001eb80 <Vm::realToLinear(unsigned short, unsigned short)>
c001ef30:	5a                   	pop    edx
c001ef31:	89 c5                	mov    ebp,eax
c001ef33:	5e                   	pop    esi
c001ef34:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ef38:	50                   	push   eax
c001ef39:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ef3d:	50                   	push   eax
c001ef3e:	e8 3d fc ff ff       	call   c001eb80 <Vm::realToLinear(unsigned short, unsigned short)>
c001ef43:	01 cb                	add    ebx,ecx
c001ef45:	89 c6                	mov    esi,eax
c001ef47:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ef4b:	50                   	push   eax
c001ef4c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef50:	50                   	push   eax
c001ef51:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ef55:	50                   	push   eax
c001ef56:	55                   	push   ebp
c001ef57:	53                   	push   ebx
c001ef58:	b3 06                	mov    bl,0x6
c001ef5a:	68 09 c9 02 c0       	push   0xc002c909
c001ef5f:	e8 5f 3e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001ef64:	83 c4 20             	add    esp,0x20
c001ef67:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ef6c:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ef71:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ef75:	3c 9d                	cmp    al,0x9d
c001ef77:	0f 84 d7 02 00 00    	je     c001f254 <Vm::faultHandler(regs*)+0x345>
c001ef7d:	0f 87 a3 00 00 00    	ja     c001f026 <Vm::faultHandler(regs*)+0x117>
c001ef83:	3c 66                	cmp    al,0x66
c001ef85:	0f 84 15 02 00 00    	je     c001f1a0 <Vm::faultHandler(regs*)+0x291>
c001ef8b:	77 5f                	ja     c001efec <Vm::faultHandler(regs*)+0xdd>
c001ef8d:	3c 36                	cmp    al,0x36
c001ef8f:	0f 84 f1 01 00 00    	je     c001f186 <Vm::faultHandler(regs*)+0x277>
c001ef95:	77 28                	ja     c001efbf <Vm::faultHandler(regs*)+0xb0>
c001ef97:	3c 26                	cmp    al,0x26
c001ef99:	0f 84 99 01 00 00    	je     c001f138 <Vm::faultHandler(regs*)+0x229>
c001ef9f:	3c 2e                	cmp    al,0x2e
c001efa1:	0f 85 3b 07 00 00    	jne    c001f6e2 <Vm::faultHandler(regs*)+0x7d3>
c001efa7:	83 ec 0c             	sub    esp,0xc
c001efaa:	31 db                	xor    ebx,ebx
c001efac:	68 1e c9 02 c0       	push   0xc002c91e
c001efb1:	e8 0d 3e ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001efb6:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efb9:	83 c4 10             	add    esp,0x10
c001efbc:	45                   	inc    ebp
c001efbd:	eb b2                	jmp    c001ef71 <Vm::faultHandler(regs*)+0x62>
c001efbf:	3c 64                	cmp    al,0x64
c001efc1:	0f 84 8b 01 00 00    	je     c001f152 <Vm::faultHandler(regs*)+0x243>
c001efc7:	0f 87 9f 01 00 00    	ja     c001f16c <Vm::faultHandler(regs*)+0x25d>
c001efcd:	3c 3e                	cmp    al,0x3e
c001efcf:	0f 85 0d 07 00 00    	jne    c001f6e2 <Vm::faultHandler(regs*)+0x7d3>
c001efd5:	83 ec 0c             	sub    esp,0xc
c001efd8:	b3 01                	mov    bl,0x1
c001efda:	68 22 c9 02 c0       	push   0xc002c922
c001efdf:	e8 df 3d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001efe4:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efe7:	83 c4 10             	add    esp,0x10
c001efea:	eb d0                	jmp    c001efbc <Vm::faultHandler(regs*)+0xad>
c001efec:	3c 6d                	cmp    al,0x6d
c001efee:	0f 84 af 03 00 00    	je     c001f3a3 <Vm::faultHandler(regs*)+0x494>
c001eff4:	77 15                	ja     c001f00b <Vm::faultHandler(regs*)+0xfc>
c001eff6:	3c 67                	cmp    al,0x67
c001eff8:	0f 84 bf 01 00 00    	je     c001f1bd <Vm::faultHandler(regs*)+0x2ae>
c001effe:	3c 6c                	cmp    al,0x6c
c001f000:	0f 84 3f 03 00 00    	je     c001f345 <Vm::faultHandler(regs*)+0x436>
c001f006:	e9 d7 06 00 00       	jmp    c001f6e2 <Vm::faultHandler(regs*)+0x7d3>
c001f00b:	3c 6f                	cmp    al,0x6f
c001f00d:	0f 84 a4 04 00 00    	je     c001f4b7 <Vm::faultHandler(regs*)+0x5a8>
c001f013:	0f 82 11 04 00 00    	jb     c001f42a <Vm::faultHandler(regs*)+0x51b>
c001f019:	3c 9c                	cmp    al,0x9c
c001f01b:	0f 84 ba 01 00 00    	je     c001f1db <Vm::faultHandler(regs*)+0x2cc>
c001f021:	e9 bc 06 00 00       	jmp    c001f6e2 <Vm::faultHandler(regs*)+0x7d3>
c001f026:	3c ec                	cmp    al,0xec
c001f028:	0f 84 24 06 00 00    	je     c001f652 <Vm::faultHandler(regs*)+0x743>
c001f02e:	0f 87 93 00 00 00    	ja     c001f0c7 <Vm::faultHandler(regs*)+0x1b8>
c001f034:	3c e4                	cmp    al,0xe4
c001f036:	0f 84 5c 05 00 00    	je     c001f598 <Vm::faultHandler(regs*)+0x689>
c001f03c:	77 6a                	ja     c001f0a8 <Vm::faultHandler(regs*)+0x199>
c001f03e:	3c cd                	cmp    al,0xcd
c001f040:	0f 84 7e 02 00 00    	je     c001f2c4 <Vm::faultHandler(regs*)+0x3b5>
c001f046:	3c cf                	cmp    al,0xcf
c001f048:	0f 85 94 06 00 00    	jne    c001f6e2 <Vm::faultHandler(regs*)+0x7d3>
c001f04e:	83 ec 0c             	sub    esp,0xc
c001f051:	68 66 c9 02 c0       	push   0xc002c966
c001f056:	e8 68 3d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f05b:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001f05e:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001f061:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001f065:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001f068:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001f06c:	0d 00 02 02 00       	or     eax,0x20200
c001f071:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f074:	56                   	push   esi
c001f075:	53                   	push   ebx
c001f076:	52                   	push   edx
c001f077:	68 6c c9 02 c0       	push   0xc002c96c
c001f07c:	e8 42 3d ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f081:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001f085:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f08b:	66 c1 e8 09          	shr    ax,0x9
c001f08f:	83 e0 01             	and    eax,0x1
c001f092:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f095:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f098:	83 c0 06             	add    eax,0x6
c001f09b:	25 ff ff 00 00       	and    eax,0xffff
c001f0a0:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f0a3:	e9 95 02 00 00       	jmp    c001f33d <Vm::faultHandler(regs*)+0x42e>
c001f0a8:	3c e6                	cmp    al,0xe6
c001f0aa:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f0ae:	0f 84 4e 05 00 00    	je     c001f602 <Vm::faultHandler(regs*)+0x6f3>
c001f0b4:	0f 82 0a 05 00 00    	jb     c001f5c4 <Vm::faultHandler(regs*)+0x6b5>
c001f0ba:	3c e7                	cmp    al,0xe7
c001f0bc:	0f 84 69 05 00 00    	je     c001f62b <Vm::faultHandler(regs*)+0x71c>
c001f0c2:	e9 1b 06 00 00       	jmp    c001f6e2 <Vm::faultHandler(regs*)+0x7d3>
c001f0c7:	3c ef                	cmp    al,0xef
c001f0c9:	0f 84 e6 05 00 00    	je     c001f6b5 <Vm::faultHandler(regs*)+0x7a6>
c001f0cf:	77 37                	ja     c001f108 <Vm::faultHandler(regs*)+0x1f9>
c001f0d1:	3c ed                	cmp    al,0xed
c001f0d3:	0f 84 a3 05 00 00    	je     c001f67c <Vm::faultHandler(regs*)+0x76d>
c001f0d9:	3c ee                	cmp    al,0xee
c001f0db:	0f 85 01 06 00 00    	jne    c001f6e2 <Vm::faultHandler(regs*)+0x7d3>
c001f0e1:	52                   	push   edx
c001f0e2:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f0e5:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f0e8:	68 07 ca 02 c0       	push   0xc002ca07
c001f0ed:	e8 d1 3c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f0f2:	59                   	pop    ecx
c001f0f3:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f0f7:	5b                   	pop    ebx
c001f0f8:	50                   	push   eax
c001f0f9:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f0fd:	50                   	push   eax
c001f0fe:	e8 2a fa ff ff       	call   c001eb2d <Vm::outbv(unsigned short, unsigned char)>
c001f103:	e9 a5 05 00 00       	jmp    c001f6ad <Vm::faultHandler(regs*)+0x79e>
c001f108:	3c fa                	cmp    al,0xfa
c001f10a:	0f 84 f7 01 00 00    	je     c001f307 <Vm::faultHandler(regs*)+0x3f8>
c001f110:	3c fb                	cmp    al,0xfb
c001f112:	0f 84 0a 02 00 00    	je     c001f322 <Vm::faultHandler(regs*)+0x413>
c001f118:	3c f3                	cmp    al,0xf3
c001f11a:	0f 85 c2 05 00 00    	jne    c001f6e2 <Vm::faultHandler(regs*)+0x7d3>
c001f120:	83 ec 0c             	sub    esp,0xc
c001f123:	68 3f c9 02 c0       	push   0xc002c93f
c001f128:	e8 96 3c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f12d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f130:	83 c4 10             	add    esp,0x10
c001f133:	e9 84 fe ff ff       	jmp    c001efbc <Vm::faultHandler(regs*)+0xad>
c001f138:	83 ec 0c             	sub    esp,0xc
c001f13b:	b3 02                	mov    bl,0x2
c001f13d:	68 1a c9 02 c0       	push   0xc002c91a
c001f142:	e8 7c 3c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f147:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f14a:	83 c4 10             	add    esp,0x10
c001f14d:	e9 6a fe ff ff       	jmp    c001efbc <Vm::faultHandler(regs*)+0xad>
c001f152:	83 ec 0c             	sub    esp,0xc
c001f155:	b3 03                	mov    bl,0x3
c001f157:	68 26 c9 02 c0       	push   0xc002c926
c001f15c:	e8 62 3c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f161:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f164:	83 c4 10             	add    esp,0x10
c001f167:	e9 50 fe ff ff       	jmp    c001efbc <Vm::faultHandler(regs*)+0xad>
c001f16c:	83 ec 0c             	sub    esp,0xc
c001f16f:	b3 04                	mov    bl,0x4
c001f171:	68 2a c9 02 c0       	push   0xc002c92a
c001f176:	e8 48 3c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f17b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f17e:	83 c4 10             	add    esp,0x10
c001f181:	e9 36 fe ff ff       	jmp    c001efbc <Vm::faultHandler(regs*)+0xad>
c001f186:	83 ec 0c             	sub    esp,0xc
c001f189:	b3 05                	mov    bl,0x5
c001f18b:	68 2e c9 02 c0       	push   0xc002c92e
c001f190:	e8 2e 3c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f195:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f198:	83 c4 10             	add    esp,0x10
c001f19b:	e9 1c fe ff ff       	jmp    c001efbc <Vm::faultHandler(regs*)+0xad>
c001f1a0:	83 ec 0c             	sub    esp,0xc
c001f1a3:	68 32 c9 02 c0       	push   0xc002c932
c001f1a8:	e8 16 3c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f1ad:	83 c4 10             	add    esp,0x10
c001f1b0:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f1b3:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f1b8:	e9 ff fd ff ff       	jmp    c001efbc <Vm::faultHandler(regs*)+0xad>
c001f1bd:	50                   	push   eax
c001f1be:	50                   	push   eax
c001f1bf:	6a 01                	push   0x1
c001f1c1:	68 37 c9 02 c0       	push   0xc002c937
c001f1c6:	e8 f8 3b ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f1cb:	83 c4 10             	add    esp,0x10
c001f1ce:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f1d1:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f1d6:	e9 e1 fd ff ff       	jmp    c001efbc <Vm::faultHandler(regs*)+0xad>
c001f1db:	83 ec 0c             	sub    esp,0xc
c001f1de:	68 45 c9 02 c0       	push   0xc002c945
c001f1e3:	e8 db 3b ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f1e8:	83 c4 10             	add    esp,0x10
c001f1eb:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f1ee:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f1f3:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f1f6:	74 2f                	je     c001f227 <Vm::faultHandler(regs*)+0x318>
c001f1f8:	83 ea 04             	sub    edx,0x4
c001f1fb:	25 ff 0d 00 00       	and    eax,0xdff
c001f200:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f206:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f209:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f20c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f212:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f216:	0f 84 bf 04 00 00    	je     c001f6db <Vm::faultHandler(regs*)+0x7cc>
c001f21c:	80 cc 02             	or     ah,0x2
c001f21f:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f222:	e9 b4 04 00 00       	jmp    c001f6db <Vm::faultHandler(regs*)+0x7cc>
c001f227:	83 ea 02             	sub    edx,0x2
c001f22a:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f230:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f233:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f237:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f23d:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f241:	74 05                	je     c001f248 <Vm::faultHandler(regs*)+0x339>
c001f243:	80 cc 02             	or     ah,0x2
c001f246:	eb 03                	jmp    c001f24b <Vm::faultHandler(regs*)+0x33c>
c001f248:	80 e4 fd             	and    ah,0xfd
c001f24b:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f24f:	e9 87 04 00 00       	jmp    c001f6db <Vm::faultHandler(regs*)+0x7cc>
c001f254:	83 ec 0c             	sub    esp,0xc
c001f257:	68 4c c9 02 c0       	push   0xc002c94c
c001f25c:	e8 62 3b ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f261:	83 c4 10             	add    esp,0x10
c001f264:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f269:	74 28                	je     c001f293 <Vm::faultHandler(regs*)+0x384>
c001f26b:	8b 06                	mov    eax,DWORD PTR [esi]
c001f26d:	25 ff 0d 00 00       	and    eax,0xdff
c001f272:	0d 00 02 02 00       	or     eax,0x20200
c001f277:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f27a:	8b 06                	mov    eax,DWORD PTR [esi]
c001f27c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f282:	c1 e8 09             	shr    eax,0x9
c001f285:	83 e0 01             	and    eax,0x1
c001f288:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f28b:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f28e:	83 c0 04             	add    eax,0x4
c001f291:	eb 24                	jmp    c001f2b7 <Vm::faultHandler(regs*)+0x3a8>
c001f293:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f296:	0d 00 02 02 00       	or     eax,0x20200
c001f29b:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f29e:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f2a1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f2a7:	66 c1 e8 09          	shr    ax,0x9
c001f2ab:	83 e0 01             	and    eax,0x1
c001f2ae:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f2b1:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f2b4:	83 c0 02             	add    eax,0x2
c001f2b7:	25 ff ff 00 00       	and    eax,0xffff
c001f2bc:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f2bf:	e9 17 04 00 00       	jmp    c001f6db <Vm::faultHandler(regs*)+0x7cc>
c001f2c4:	53                   	push   ebx
c001f2c5:	53                   	push   ebx
c001f2c6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f2ca:	50                   	push   eax
c001f2cb:	68 52 c9 02 c0       	push   0xc002c952
c001f2d0:	e8 ee 3a ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f2d5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f2d9:	83 c4 10             	add    esp,0x10
c001f2dc:	3c ee                	cmp    al,0xee
c001f2de:	75 10                	jne    c001f2f0 <Vm::faultHandler(regs*)+0x3e1>
c001f2e0:	83 ec 0c             	sub    esp,0xc
c001f2e3:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f2e6:	e8 fa f8 ff ff       	call   c001ebe5 <Vm::mainloop3(unsigned long)>
c001f2eb:	e9 c0 03 00 00       	jmp    c001f6b0 <Vm::faultHandler(regs*)+0x7a1>
c001f2f0:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f2f4:	83 ec 0c             	sub    esp,0xc
c001f2f7:	53                   	push   ebx
c001f2f8:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f2fc:	53                   	push   ebx
c001f2fd:	55                   	push   ebp
c001f2fe:	50                   	push   eax
c001f2ff:	57                   	push   edi
c001f300:	e8 0c fb ff ff       	call   c001ee11 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f305:	eb 36                	jmp    c001f33d <Vm::faultHandler(regs*)+0x42e>
c001f307:	83 ec 0c             	sub    esp,0xc
c001f30a:	68 5c c9 02 c0       	push   0xc002c95c
c001f30f:	e8 af 3a ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f314:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f319:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f31d:	e9 8b 03 00 00       	jmp    c001f6ad <Vm::faultHandler(regs*)+0x79e>
c001f322:	83 ec 0c             	sub    esp,0xc
c001f325:	68 61 c9 02 c0       	push   0xc002c961
c001f32a:	e8 94 3a ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f32f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f334:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f338:	e9 70 03 00 00       	jmp    c001f6ad <Vm::faultHandler(regs*)+0x79e>
c001f33d:	83 c4 20             	add    esp,0x20
c001f340:	e9 99 03 00 00       	jmp    c001f6de <Vm::faultHandler(regs*)+0x7cf>
c001f345:	83 ec 0c             	sub    esp,0xc
c001f348:	68 9f c9 02 c0       	push   0xc002c99f
c001f34d:	e8 71 3a ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f352:	83 c4 10             	add    esp,0x10
c001f355:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f358:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f35d:	74 0d                	je     c001f36c <Vm::faultHandler(regs*)+0x45d>
c001f35f:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f366:	0f 87 9e 01 00 00    	ja     c001f50a <Vm::faultHandler(regs*)+0x5fb>
c001f36c:	83 ec 0c             	sub    esp,0xc
c001f36f:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f373:	0f b7 db             	movzx  ebx,bx
c001f376:	50                   	push   eax
c001f377:	e8 9e f7 ff ff       	call   c001eb1a <Vm::inbv(unsigned short)>
c001f37c:	83 c4 0c             	add    esp,0xc
c001f37f:	0f b6 c0             	movzx  eax,al
c001f382:	50                   	push   eax
c001f383:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f387:	50                   	push   eax
c001f388:	53                   	push   ebx
c001f389:	e8 41 fb ff ff       	call   c001eecf <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f38e:	83 c4 10             	add    esp,0x10
c001f391:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f394:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f398:	74 03                	je     c001f39d <Vm::faultHandler(regs*)+0x48e>
c001f39a:	48                   	dec    eax
c001f39b:	eb 01                	jmp    c001f39e <Vm::faultHandler(regs*)+0x48f>
c001f39d:	40                   	inc    eax
c001f39e:	0f b7 c0             	movzx  eax,ax
c001f3a1:	eb 7f                	jmp    c001f422 <Vm::faultHandler(regs*)+0x513>
c001f3a3:	83 ec 0c             	sub    esp,0xc
c001f3a6:	68 d1 c9 02 c0       	push   0xc002c9d1
c001f3ab:	e8 13 3a ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f3b0:	83 c4 10             	add    esp,0x10
c001f3b3:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f3b6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f3bb:	74 0d                	je     c001f3ca <Vm::faultHandler(regs*)+0x4bb>
c001f3bd:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f3c4:	0f 87 40 01 00 00    	ja     c001f50a <Vm::faultHandler(regs*)+0x5fb>
c001f3ca:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f3cd:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f3d1:	0f b7 db             	movzx  ebx,bx
c001f3d4:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f3d9:	74 20                	je     c001f3fb <Vm::faultHandler(regs*)+0x4ec>
c001f3db:	ed                   	in     eax,dx
c001f3dc:	51                   	push   ecx
c001f3dd:	50                   	push   eax
c001f3de:	56                   	push   esi
c001f3df:	53                   	push   ebx
c001f3e0:	e8 15 fb ff ff       	call   c001eefa <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f3e5:	83 c4 10             	add    esp,0x10
c001f3e8:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f3eb:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f3ef:	74 05                	je     c001f3f6 <Vm::faultHandler(regs*)+0x4e7>
c001f3f1:	83 e8 04             	sub    eax,0x4
c001f3f4:	eb 27                	jmp    c001f41d <Vm::faultHandler(regs*)+0x50e>
c001f3f6:	83 c0 04             	add    eax,0x4
c001f3f9:	eb 22                	jmp    c001f41d <Vm::faultHandler(regs*)+0x50e>
c001f3fb:	66 ed                	in     ax,dx
c001f3fd:	0f b7 c0             	movzx  eax,ax
c001f400:	52                   	push   edx
c001f401:	50                   	push   eax
c001f402:	56                   	push   esi
c001f403:	53                   	push   ebx
c001f404:	e8 db fa ff ff       	call   c001eee4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f409:	83 c4 10             	add    esp,0x10
c001f40c:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f40f:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f413:	74 05                	je     c001f41a <Vm::faultHandler(regs*)+0x50b>
c001f415:	83 e8 02             	sub    eax,0x2
c001f418:	eb 03                	jmp    c001f41d <Vm::faultHandler(regs*)+0x50e>
c001f41a:	83 c0 02             	add    eax,0x2
c001f41d:	25 ff ff 00 00       	and    eax,0xffff
c001f422:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f425:	e9 b1 02 00 00       	jmp    c001f6db <Vm::faultHandler(regs*)+0x7cc>
c001f42a:	83 ec 0c             	sub    esp,0xc
c001f42d:	4b                   	dec    ebx
c001f42e:	68 d7 c9 02 c0       	push   0xc002c9d7
c001f433:	e8 8b 39 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f438:	83 c4 10             	add    esp,0x10
c001f43b:	80 fb 05             	cmp    bl,0x5
c001f43e:	77 0a                	ja     c001f44a <Vm::faultHandler(regs*)+0x53b>
c001f440:	0f b6 db             	movzx  ebx,bl
c001f443:	ff 24 9d 48 ca 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd35b8]
c001f44a:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f44e:	eb 1b                	jmp    c001f46b <Vm::faultHandler(regs*)+0x55c>
c001f450:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f454:	eb 15                	jmp    c001f46b <Vm::faultHandler(regs*)+0x55c>
c001f456:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f45a:	eb 0f                	jmp    c001f46b <Vm::faultHandler(regs*)+0x55c>
c001f45c:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f460:	eb 09                	jmp    c001f46b <Vm::faultHandler(regs*)+0x55c>
c001f462:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f465:	eb 04                	jmp    c001f46b <Vm::faultHandler(regs*)+0x55c>
c001f467:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f46b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f470:	74 0d                	je     c001f47f <Vm::faultHandler(regs*)+0x570>
c001f472:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f479:	0f 87 8b 00 00 00    	ja     c001f50a <Vm::faultHandler(regs*)+0x5fb>
c001f47f:	53                   	push   ebx
c001f480:	53                   	push   ebx
c001f481:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f485:	52                   	push   edx
c001f486:	50                   	push   eax
c001f487:	e8 0f fa ff ff       	call   c001ee9b <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f48c:	5e                   	pop    esi
c001f48d:	0f b6 c0             	movzx  eax,al
c001f490:	5d                   	pop    ebp
c001f491:	50                   	push   eax
c001f492:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f496:	50                   	push   eax
c001f497:	e8 91 f6 ff ff       	call   c001eb2d <Vm::outbv(unsigned short, unsigned char)>
c001f49c:	83 c4 10             	add    esp,0x10
c001f49f:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f4a2:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f4a6:	74 03                	je     c001f4ab <Vm::faultHandler(regs*)+0x59c>
c001f4a8:	48                   	dec    eax
c001f4a9:	eb 01                	jmp    c001f4ac <Vm::faultHandler(regs*)+0x59d>
c001f4ab:	40                   	inc    eax
c001f4ac:	0f b7 c0             	movzx  eax,ax
c001f4af:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f4b2:	e9 24 02 00 00       	jmp    c001f6db <Vm::faultHandler(regs*)+0x7cc>
c001f4b7:	83 ec 0c             	sub    esp,0xc
c001f4ba:	4b                   	dec    ebx
c001f4bb:	68 d7 c9 02 c0       	push   0xc002c9d7
c001f4c0:	e8 fe 38 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f4c5:	83 c4 10             	add    esp,0x10
c001f4c8:	80 fb 05             	cmp    bl,0x5
c001f4cb:	77 0a                	ja     c001f4d7 <Vm::faultHandler(regs*)+0x5c8>
c001f4cd:	0f b6 db             	movzx  ebx,bl
c001f4d0:	ff 24 9d 60 ca 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd35a0]
c001f4d7:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f4db:	eb 1b                	jmp    c001f4f8 <Vm::faultHandler(regs*)+0x5e9>
c001f4dd:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f4e1:	eb 15                	jmp    c001f4f8 <Vm::faultHandler(regs*)+0x5e9>
c001f4e3:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f4e7:	eb 0f                	jmp    c001f4f8 <Vm::faultHandler(regs*)+0x5e9>
c001f4e9:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f4ed:	eb 09                	jmp    c001f4f8 <Vm::faultHandler(regs*)+0x5e9>
c001f4ef:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f4f2:	eb 04                	jmp    c001f4f8 <Vm::faultHandler(regs*)+0x5e9>
c001f4f4:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f4f8:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f4fb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f500:	74 39                	je     c001f53b <Vm::faultHandler(regs*)+0x62c>
c001f502:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f508:	76 31                	jbe    c001f53b <Vm::faultHandler(regs*)+0x62c>
c001f50a:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f50e:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f512:	51                   	push   ecx
c001f513:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f517:	51                   	push   ecx
c001f518:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f51c:	51                   	push   ecx
c001f51d:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f521:	51                   	push   ecx
c001f522:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f526:	52                   	push   edx
c001f527:	50                   	push   eax
c001f528:	50                   	push   eax
c001f529:	68 a4 c9 02 c0       	push   0xc002c9a4
c001f52e:	e8 90 38 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f533:	83 c4 20             	add    esp,0x20
c001f536:	e9 fb 01 00 00       	jmp    c001f736 <Vm::faultHandler(regs*)+0x827>
c001f53b:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f53e:	0f b7 d3             	movzx  edx,bx
c001f541:	81 e6 00 04 00 00    	and    esi,0x400
c001f547:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f54a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f54f:	74 1d                	je     c001f56e <Vm::faultHandler(regs*)+0x65f>
c001f551:	51                   	push   ecx
c001f552:	51                   	push   ecx
c001f553:	52                   	push   edx
c001f554:	50                   	push   eax
c001f555:	e8 64 f9 ff ff       	call   c001eebe <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f55a:	83 c4 10             	add    esp,0x10
c001f55d:	89 ea                	mov    edx,ebp
c001f55f:	ef                   	out    dx,eax
c001f560:	85 f6                	test   esi,esi
c001f562:	74 05                	je     c001f569 <Vm::faultHandler(regs*)+0x65a>
c001f564:	83 eb 04             	sub    ebx,0x4
c001f567:	eb 21                	jmp    c001f58a <Vm::faultHandler(regs*)+0x67b>
c001f569:	83 c3 04             	add    ebx,0x4
c001f56c:	eb 1c                	jmp    c001f58a <Vm::faultHandler(regs*)+0x67b>
c001f56e:	51                   	push   ecx
c001f56f:	51                   	push   ecx
c001f570:	52                   	push   edx
c001f571:	50                   	push   eax
c001f572:	e8 35 f9 ff ff       	call   c001eeac <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f577:	83 c4 10             	add    esp,0x10
c001f57a:	89 ea                	mov    edx,ebp
c001f57c:	66 ef                	out    dx,ax
c001f57e:	85 f6                	test   esi,esi
c001f580:	74 05                	je     c001f587 <Vm::faultHandler(regs*)+0x678>
c001f582:	83 eb 02             	sub    ebx,0x2
c001f585:	eb 03                	jmp    c001f58a <Vm::faultHandler(regs*)+0x67b>
c001f587:	83 c3 02             	add    ebx,0x2
c001f58a:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f590:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f593:	e9 43 01 00 00       	jmp    c001f6db <Vm::faultHandler(regs*)+0x7cc>
c001f598:	53                   	push   ebx
c001f599:	53                   	push   ebx
c001f59a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f59e:	50                   	push   eax
c001f59f:	68 dd c9 02 c0       	push   0xc002c9dd
c001f5a4:	e8 1a 38 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f5a9:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f5b0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5b4:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5b7:	e8 5e f5 ff ff       	call   c001eb1a <Vm::inbv(unsigned short)>
c001f5bc:	0f b6 c0             	movzx  eax,al
c001f5bf:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f5c2:	eb 5e                	jmp    c001f622 <Vm::faultHandler(regs*)+0x713>
c001f5c4:	51                   	push   ecx
c001f5c5:	51                   	push   ecx
c001f5c6:	53                   	push   ebx
c001f5c7:	68 e3 c9 02 c0       	push   0xc002c9e3
c001f5cc:	e8 f2 37 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f5d1:	83 c4 10             	add    esp,0x10
c001f5d4:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5d9:	74 07                	je     c001f5e2 <Vm::faultHandler(regs*)+0x6d3>
c001f5db:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f5df:	ed                   	in     eax,dx
c001f5e0:	eb 14                	jmp    c001f5f6 <Vm::faultHandler(regs*)+0x6e7>
c001f5e2:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f5e5:	66 31 db             	xor    bx,bx
c001f5e8:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f5eb:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f5ef:	66 ed                	in     ax,dx
c001f5f1:	0f b7 c0             	movzx  eax,ax
c001f5f4:	09 d8                	or     eax,ebx
c001f5f6:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f5f9:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f5fd:	e9 dc 00 00 00       	jmp    c001f6de <Vm::faultHandler(regs*)+0x7cf>
c001f602:	50                   	push   eax
c001f603:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f606:	53                   	push   ebx
c001f607:	68 e9 c9 02 c0       	push   0xc002c9e9
c001f60c:	e8 b2 37 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f611:	58                   	pop    eax
c001f612:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f616:	5a                   	pop    edx
c001f617:	50                   	push   eax
c001f618:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f61c:	50                   	push   eax
c001f61d:	e8 0b f5 ff ff       	call   c001eb2d <Vm::outbv(unsigned short, unsigned char)>
c001f622:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f626:	e9 85 00 00 00       	jmp    c001f6b0 <Vm::faultHandler(regs*)+0x7a1>
c001f62b:	50                   	push   eax
c001f62c:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f62f:	53                   	push   ebx
c001f630:	68 f2 c9 02 c0       	push   0xc002c9f2
c001f635:	e8 89 37 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f63a:	83 c4 10             	add    esp,0x10
c001f63d:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f641:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f646:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f649:	74 03                	je     c001f64e <Vm::faultHandler(regs*)+0x73f>
c001f64b:	ef                   	out    dx,eax
c001f64c:	eb ab                	jmp    c001f5f9 <Vm::faultHandler(regs*)+0x6ea>
c001f64e:	66 ef                	out    dx,ax
c001f650:	eb a7                	jmp    c001f5f9 <Vm::faultHandler(regs*)+0x6ea>
c001f652:	55                   	push   ebp
c001f653:	55                   	push   ebp
c001f654:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f657:	68 fb c9 02 c0       	push   0xc002c9fb
c001f65c:	e8 62 37 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f661:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f668:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f66c:	89 04 24             	mov    DWORD PTR [esp],eax
c001f66f:	e8 a6 f4 ff ff       	call   c001eb1a <Vm::inbv(unsigned short)>
c001f674:	0f b6 c0             	movzx  eax,al
c001f677:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f67a:	eb 31                	jmp    c001f6ad <Vm::faultHandler(regs*)+0x79e>
c001f67c:	56                   	push   esi
c001f67d:	56                   	push   esi
c001f67e:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f681:	68 01 ca 02 c0       	push   0xc002ca01
c001f686:	e8 38 37 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f68b:	83 c4 10             	add    esp,0x10
c001f68e:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f691:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f696:	74 03                	je     c001f69b <Vm::faultHandler(regs*)+0x78c>
c001f698:	ed                   	in     eax,dx
c001f699:	eb 0d                	jmp    c001f6a8 <Vm::faultHandler(regs*)+0x799>
c001f69b:	66 ed                	in     ax,dx
c001f69d:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f6a0:	0f b7 c0             	movzx  eax,ax
c001f6a3:	66 31 d2             	xor    dx,dx
c001f6a6:	09 d0                	or     eax,edx
c001f6a8:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f6ab:	eb 2e                	jmp    c001f6db <Vm::faultHandler(regs*)+0x7cc>
c001f6ad:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6b0:	83 c4 10             	add    esp,0x10
c001f6b3:	eb 29                	jmp    c001f6de <Vm::faultHandler(regs*)+0x7cf>
c001f6b5:	50                   	push   eax
c001f6b6:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f6b9:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f6bc:	68 10 ca 02 c0       	push   0xc002ca10
c001f6c1:	e8 fd 36 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f6c6:	83 c4 10             	add    esp,0x10
c001f6c9:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f6cc:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f6d1:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f6d4:	74 03                	je     c001f6d9 <Vm::faultHandler(regs*)+0x7ca>
c001f6d6:	ef                   	out    dx,eax
c001f6d7:	eb 02                	jmp    c001f6db <Vm::faultHandler(regs*)+0x7cc>
c001f6d9:	66 ef                	out    dx,ax
c001f6db:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6de:	b0 01                	mov    al,0x1
c001f6e0:	eb 56                	jmp    c001f738 <Vm::faultHandler(regs*)+0x829>
c001f6e2:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f6e6:	51                   	push   ecx
c001f6e7:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f6eb:	51                   	push   ecx
c001f6ec:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f6f0:	51                   	push   ecx
c001f6f1:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f6f5:	51                   	push   ecx
c001f6f6:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f6fa:	52                   	push   edx
c001f6fb:	50                   	push   eax
c001f6fc:	50                   	push   eax
c001f6fd:	68 19 ca 02 c0       	push   0xc002ca19
c001f702:	e8 bc 36 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c001f707:	83 c4 20             	add    esp,0x20
c001f70a:	83 ec 0c             	sub    esp,0xc
c001f70d:	6a 60                	push   0x60
c001f70f:	e8 06 f4 ff ff       	call   c001eb1a <Vm::inbv(unsigned short)>
c001f714:	83 c4 10             	add    esp,0x10
c001f717:	3c 1c                	cmp    al,0x1c
c001f719:	74 04                	je     c001f71f <Vm::faultHandler(regs*)+0x810>
c001f71b:	3c 5a                	cmp    al,0x5a
c001f71d:	75 eb                	jne    c001f70a <Vm::faultHandler(regs*)+0x7fb>
c001f71f:	3c 1c                	cmp    al,0x1c
c001f721:	74 04                	je     c001f727 <Vm::faultHandler(regs*)+0x818>
c001f723:	3c 5a                	cmp    al,0x5a
c001f725:	75 0f                	jne    c001f736 <Vm::faultHandler(regs*)+0x827>
c001f727:	83 ec 0c             	sub    esp,0xc
c001f72a:	6a 60                	push   0x60
c001f72c:	e8 e9 f3 ff ff       	call   c001eb1a <Vm::inbv(unsigned short)>
c001f731:	83 c4 10             	add    esp,0x10
c001f734:	eb e9                	jmp    c001f71f <Vm::faultHandler(regs*)+0x810>
c001f736:	31 c0                	xor    eax,eax
c001f738:	83 c4 1c             	add    esp,0x1c
c001f73b:	5b                   	pop    ebx
c001f73c:	5e                   	pop    esi
c001f73d:	5f                   	pop    edi
c001f73e:	5d                   	pop    ebp
c001f73f:	c3                   	ret    

c001f740 <Vm::fpuInternalTo32(unsigned long long)>:
c001f740:	57                   	push   edi
c001f741:	56                   	push   esi
c001f742:	53                   	push   ebx
c001f743:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f74b:	89 d6                	mov    esi,edx
c001f74d:	89 d7                	mov    edi,edx
c001f74f:	89 c1                	mov    ecx,eax
c001f751:	c1 ef 14             	shr    edi,0x14
c001f754:	89 d3                	mov    ebx,edx
c001f756:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f75c:	31 d2                	xor    edx,edx
c001f75e:	89 f8                	mov    eax,edi
c001f760:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f766:	bf ff 00 00 00       	mov    edi,0xff
c001f76b:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f770:	83 d2 ff             	adc    edx,0xffffffff
c001f773:	39 c7                	cmp    edi,eax
c001f775:	bf 00 00 00 00       	mov    edi,0x0
c001f77a:	19 d7                	sbb    edi,edx
c001f77c:	72 15                	jb     c001f793 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f77e:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f782:	c1 e0 17             	shl    eax,0x17
c001f785:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f78b:	09 f1                	or     ecx,esi
c001f78d:	09 c1                	or     ecx,eax
c001f78f:	89 cf                	mov    edi,ecx
c001f791:	eb 02                	jmp    c001f795 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f793:	31 ff                	xor    edi,edi
c001f795:	89 f8                	mov    eax,edi
c001f797:	5b                   	pop    ebx
c001f798:	5e                   	pop    esi
c001f799:	5f                   	pop    edi
c001f79a:	c3                   	ret    

c001f79b <Vm::fpuInternalTo64(unsigned long long)>:
c001f79b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f79f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f7a3:	c3                   	ret    

c001f7a4 <Vm::fpu32ToInternal(unsigned int)>:
c001f7a4:	57                   	push   edi
c001f7a5:	31 ff                	xor    edi,edi
c001f7a7:	56                   	push   esi
c001f7a8:	53                   	push   ebx
c001f7a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f7ad:	89 cb                	mov    ebx,ecx
c001f7af:	89 ce                	mov    esi,ecx
c001f7b1:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f7b7:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f7bd:	c1 e9 17             	shr    ecx,0x17
c001f7c0:	89 f0                	mov    eax,esi
c001f7c2:	0f b6 d1             	movzx  edx,cl
c001f7c5:	81 c2 80 03 00 00    	add    edx,0x380
c001f7cb:	89 d1                	mov    ecx,edx
c001f7cd:	89 fa                	mov    edx,edi
c001f7cf:	c1 e1 14             	shl    ecx,0x14
c001f7d2:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f7d6:	c1 e0 1d             	shl    eax,0x1d
c001f7d9:	89 d7                	mov    edi,edx
c001f7db:	89 c6                	mov    esi,eax
c001f7dd:	89 ca                	mov    edx,ecx
c001f7df:	89 f0                	mov    eax,esi
c001f7e1:	09 fa                	or     edx,edi
c001f7e3:	09 da                	or     edx,ebx
c001f7e5:	5b                   	pop    ebx
c001f7e6:	5e                   	pop    esi
c001f7e7:	5f                   	pop    edi
c001f7e8:	c3                   	ret    

c001f7e9 <Vm::fpu64ToInternal(unsigned long long)>:
c001f7e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7ed:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f7f1:	c3                   	ret    

c001f7f2 <Vm::fpuFloatToLong(unsigned long long)>:
c001f7f2:	57                   	push   edi
c001f7f3:	31 c0                	xor    eax,eax
c001f7f5:	56                   	push   esi
c001f7f6:	31 d2                	xor    edx,edx
c001f7f8:	53                   	push   ebx
c001f7f9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f7fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f801:	89 d9                	mov    ecx,ebx
c001f803:	c1 e9 14             	shr    ecx,0x14
c001f806:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f80c:	89 cf                	mov    edi,ecx
c001f80e:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f814:	78 33                	js     c001f849 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f816:	89 d9                	mov    ecx,ebx
c001f818:	89 f0                	mov    eax,esi
c001f81a:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f820:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f826:	89 ca                	mov    edx,ecx
c001f828:	b9 34 00 00 00       	mov    ecx,0x34
c001f82d:	29 f9                	sub    ecx,edi
c001f82f:	0f ad d0             	shrd   eax,edx,cl
c001f832:	d3 fa                	sar    edx,cl
c001f834:	f6 c1 20             	test   cl,0x20
c001f837:	74 05                	je     c001f83e <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f839:	89 d0                	mov    eax,edx
c001f83b:	c1 fa 1f             	sar    edx,0x1f
c001f83e:	85 db                	test   ebx,ebx
c001f840:	79 07                	jns    c001f849 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f842:	f7 d8                	neg    eax
c001f844:	83 d2 00             	adc    edx,0x0
c001f847:	f7 da                	neg    edx
c001f849:	5b                   	pop    ebx
c001f84a:	5e                   	pop    esi
c001f84b:	5f                   	pop    edi
c001f84c:	c3                   	ret    

c001f84d <Vm::fpuULongToFloat(unsigned long long)>:
c001f84d:	57                   	push   edi
c001f84e:	31 c9                	xor    ecx,ecx
c001f850:	56                   	push   esi
c001f851:	53                   	push   ebx
c001f852:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f856:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f85a:	0f ba e7 14          	bt     edi,0x14
c001f85e:	72 07                	jb     c001f867 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f860:	01 f6                	add    esi,esi
c001f862:	11 ff                	adc    edi,edi
c001f864:	41                   	inc    ecx
c001f865:	eb f3                	jmp    c001f85a <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f867:	89 fa                	mov    edx,edi
c001f869:	89 f0                	mov    eax,esi
c001f86b:	bb 33 04 00 00       	mov    ebx,0x433
c001f870:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f876:	29 cb                	sub    ebx,ecx
c001f878:	89 d9                	mov    ecx,ebx
c001f87a:	5b                   	pop    ebx
c001f87b:	c1 e1 14             	shl    ecx,0x14
c001f87e:	5e                   	pop    esi
c001f87f:	09 ca                	or     edx,ecx
c001f881:	5f                   	pop    edi
c001f882:	c3                   	ret    

c001f883 <Vm::fpuLongToFloat(long long)>:
c001f883:	56                   	push   esi
c001f884:	31 c0                	xor    eax,eax
c001f886:	53                   	push   ebx
c001f887:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f88b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f88f:	39 c8                	cmp    eax,ecx
c001f891:	19 d8                	sbb    eax,ebx
c001f893:	7d 04                	jge    c001f899 <Vm::fpuLongToFloat(long long)+0x16>
c001f895:	31 f6                	xor    esi,esi
c001f897:	eb 0c                	jmp    c001f8a5 <Vm::fpuLongToFloat(long long)+0x22>
c001f899:	f7 d9                	neg    ecx
c001f89b:	be 01 00 00 00       	mov    esi,0x1
c001f8a0:	83 d3 00             	adc    ebx,0x0
c001f8a3:	f7 db                	neg    ebx
c001f8a5:	31 c0                	xor    eax,eax
c001f8a7:	0f ba e3 14          	bt     ebx,0x14
c001f8ab:	72 07                	jb     c001f8b4 <Vm::fpuLongToFloat(long long)+0x31>
c001f8ad:	01 c9                	add    ecx,ecx
c001f8af:	11 db                	adc    ebx,ebx
c001f8b1:	40                   	inc    eax
c001f8b2:	eb f3                	jmp    c001f8a7 <Vm::fpuLongToFloat(long long)+0x24>
c001f8b4:	ba 33 04 00 00       	mov    edx,0x433
c001f8b9:	29 c2                	sub    edx,eax
c001f8bb:	89 c8                	mov    eax,ecx
c001f8bd:	c1 e2 14             	shl    edx,0x14
c001f8c0:	89 d9                	mov    ecx,ebx
c001f8c2:	89 f3                	mov    ebx,esi
c001f8c4:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f8ca:	09 ca                	or     edx,ecx
c001f8cc:	84 db                	test   bl,bl
c001f8ce:	74 06                	je     c001f8d6 <Vm::fpuLongToFloat(long long)+0x53>
c001f8d0:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f8d6:	5b                   	pop    ebx
c001f8d7:	5e                   	pop    esi
c001f8d8:	c3                   	ret    

c001f8d9 <Vm::fpuGet0()>:
c001f8d9:	31 c0                	xor    eax,eax
c001f8db:	31 d2                	xor    edx,edx
c001f8dd:	c3                   	ret    

c001f8de <Vm::fpuGet1()>:
c001f8de:	b8 01 00 00 00       	mov    eax,0x1
c001f8e3:	31 d2                	xor    edx,edx
c001f8e5:	c3                   	ret    

c001f8e6 <Vm::fpuGetPi()>:
c001f8e6:	b8 03 00 00 00       	mov    eax,0x3
c001f8eb:	31 d2                	xor    edx,edx
c001f8ed:	c3                   	ret    

c001f8ee <Vm::fpuGetLog2E()>:
c001f8ee:	83 ec 18             	sub    esp,0x18
c001f8f1:	68 78 ca 02 c0       	push   0xc002ca78
c001f8f6:	e8 94 ac ff ff       	call   c001a58f <Krnl::panic(char const*)>
c001f8fb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f900:	31 d2                	xor    edx,edx
c001f902:	83 c4 1c             	add    esp,0x1c
c001f905:	c3                   	ret    

c001f906 <Vm::fpuGetLogE2()>:
c001f906:	83 ec 18             	sub    esp,0x18
c001f909:	68 84 ca 02 c0       	push   0xc002ca84
c001f90e:	e8 7c ac ff ff       	call   c001a58f <Krnl::panic(char const*)>
c001f913:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f918:	31 d2                	xor    edx,edx
c001f91a:	83 c4 1c             	add    esp,0x1c
c001f91d:	c3                   	ret    

c001f91e <Vm::fpuGetLog210()>:
c001f91e:	83 ec 18             	sub    esp,0x18
c001f921:	68 90 ca 02 c0       	push   0xc002ca90
c001f926:	e8 64 ac ff ff       	call   c001a58f <Krnl::panic(char const*)>
c001f92b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f930:	31 d2                	xor    edx,edx
c001f932:	83 c4 1c             	add    esp,0x1c
c001f935:	c3                   	ret    

c001f936 <Vm::fpuGetLog102()>:
c001f936:	83 ec 18             	sub    esp,0x18
c001f939:	68 9d ca 02 c0       	push   0xc002ca9d
c001f93e:	e8 4c ac ff ff       	call   c001a58f <Krnl::panic(char const*)>
c001f943:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f948:	31 d2                	xor    edx,edx
c001f94a:	83 c4 1c             	add    esp,0x1c
c001f94d:	c3                   	ret    

c001f94e <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f94e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f952:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f956:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f95a:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f95e:	0f 92 c0             	setb   al
c001f961:	c3                   	ret    

c001f962 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f962:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f96a:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f96e:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f972:	09 c2                	or     edx,eax
c001f974:	0f 94 c0             	sete   al
c001f977:	c3                   	ret    

c001f978 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f978:	57                   	push   edi
c001f979:	56                   	push   esi
c001f97a:	53                   	push   ebx
c001f97b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f97f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f983:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f987:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f98b:	57                   	push   edi
c001f98c:	56                   	push   esi
c001f98d:	53                   	push   ebx
c001f98e:	51                   	push   ecx
c001f98f:	e8 ce ff ff ff       	call   c001f962 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f994:	83 c4 10             	add    esp,0x10
c001f997:	88 c2                	mov    dl,al
c001f999:	31 c0                	xor    eax,eax
c001f99b:	84 d2                	test   dl,dl
c001f99d:	75 0c                	jne    c001f9ab <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f99f:	57                   	push   edi
c001f9a0:	56                   	push   esi
c001f9a1:	53                   	push   ebx
c001f9a2:	51                   	push   ecx
c001f9a3:	e8 a6 ff ff ff       	call   c001f94e <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f9a8:	83 c4 10             	add    esp,0x10
c001f9ab:	83 e0 01             	and    eax,0x1
c001f9ae:	5b                   	pop    ebx
c001f9af:	88 c1                	mov    cl,al
c001f9b1:	83 e2 01             	and    edx,0x1
c001f9b4:	a0 01 1d 03 c0       	mov    al,ds:0xc0031d01
c001f9b9:	c1 e2 06             	shl    edx,0x6
c001f9bc:	83 e0 ba             	and    eax,0xffffffba
c001f9bf:	5e                   	pop    esi
c001f9c0:	09 c8                	or     eax,ecx
c001f9c2:	5f                   	pop    edi
c001f9c3:	09 d0                	or     eax,edx
c001f9c5:	a2 01 1d 03 c0       	mov    ds:0xc0031d01,al
c001f9ca:	c3                   	ret    

c001f9cb <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f9cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f9d3:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f9d7:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f9db:	c3                   	ret    

c001f9dc <Vm::fpuAbs(unsigned long long)>:
c001f9dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f9e4:	c3                   	ret    

c001f9e5 <Vm::fpuChs(unsigned long long)>:
c001f9e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f9ed:	f7 d8                	neg    eax
c001f9ef:	83 d2 00             	adc    edx,0x0
c001f9f2:	f7 da                	neg    edx
c001f9f4:	c3                   	ret    

c001f9f5 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f9f5:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f9f9:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f9fe:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001fa02:	eb c7                	jmp    c001f9cb <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001fa04 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001fa04:	53                   	push   ebx
c001fa05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa09:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fa0d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fa11:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fa15:	0f af ca             	imul   ecx,edx
c001fa18:	0f af d8             	imul   ebx,eax
c001fa1b:	f7 e2                	mul    edx
c001fa1d:	01 d9                	add    ecx,ebx
c001fa1f:	5b                   	pop    ebx
c001fa20:	01 ca                	add    edx,ecx
c001fa22:	c3                   	ret    

c001fa23 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001fa23:	83 ec 0c             	sub    esp,0xc
c001fa26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa36:	e8 69 71 00 00       	call   c0026ba4 <__udivdi3>
c001fa3b:	83 c4 1c             	add    esp,0x1c
c001fa3e:	c3                   	ret    

c001fa3f <Vm::fpuSquare(unsigned long long)>:
c001fa3f:	50                   	push   eax
c001fa40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa44:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fa48:	52                   	push   edx
c001fa49:	50                   	push   eax
c001fa4a:	52                   	push   edx
c001fa4b:	50                   	push   eax
c001fa4c:	e8 b3 ff ff ff       	call   c001fa04 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fa51:	83 c4 14             	add    esp,0x14
c001fa54:	c3                   	ret    

c001fa55 <Vm::fpuGetReg(int)>:
c001fa55:	83 ec 0c             	sub    esp,0xc
c001fa58:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fa5d:	76 10                	jbe    c001fa6f <Vm::fpuGetReg(int)+0x1a>
c001fa5f:	83 ec 0c             	sub    esp,0xc
c001fa62:	68 aa ca 02 c0       	push   0xc002caaa
c001fa67:	e8 23 ab ff ff       	call   c001a58f <Krnl::panic(char const*)>
c001fa6c:	83 c4 10             	add    esp,0x10
c001fa6f:	a0 01 1d 03 c0       	mov    al,ds:0xc0031d01
c001fa74:	b9 08 00 00 00       	mov    ecx,0x8
c001fa79:	c0 e8 03             	shr    al,0x3
c001fa7c:	83 e0 07             	and    eax,0x7
c001fa7f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa83:	99                   	cdq    
c001fa84:	f7 f9                	idiv   ecx
c001fa86:	8b 04 d5 04 1d 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce2fc]
c001fa8d:	8b 14 d5 08 1d 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce2f8]
c001fa94:	83 c4 0c             	add    esp,0xc
c001fa97:	c3                   	ret    

c001fa98 <Vm::fpuSetReg(int, unsigned long long)>:
c001fa98:	57                   	push   edi
c001fa99:	56                   	push   esi
c001fa9a:	52                   	push   edx
c001fa9b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fa9f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001faa3:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001faa8:	76 10                	jbe    c001faba <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001faaa:	83 ec 0c             	sub    esp,0xc
c001faad:	68 bd ca 02 c0       	push   0xc002cabd
c001fab2:	e8 d8 aa ff ff       	call   c001a58f <Krnl::panic(char const*)>
c001fab7:	83 c4 10             	add    esp,0x10
c001faba:	a0 01 1d 03 c0       	mov    al,ds:0xc0031d01
c001fabf:	b9 08 00 00 00       	mov    ecx,0x8
c001fac4:	c0 e8 03             	shr    al,0x3
c001fac7:	83 e0 07             	and    eax,0x7
c001faca:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001face:	99                   	cdq    
c001facf:	f7 f9                	idiv   ecx
c001fad1:	89 34 d5 04 1d 03 c0 	mov    DWORD PTR [edx*8-0x3ffce2fc],esi
c001fad8:	89 3c d5 08 1d 03 c0 	mov    DWORD PTR [edx*8-0x3ffce2f8],edi
c001fadf:	58                   	pop    eax
c001fae0:	5e                   	pop    esi
c001fae1:	5f                   	pop    edi
c001fae2:	c3                   	ret    

c001fae3 <Vm::fpuPush(unsigned long long)>:
c001fae3:	a0 01 1d 03 c0       	mov    al,ds:0xc0031d01
c001fae8:	c0 e8 03             	shr    al,0x3
c001faeb:	83 e0 07             	and    eax,0x7
c001faee:	83 c0 07             	add    eax,0x7
c001faf1:	88 c2                	mov    dl,al
c001faf3:	83 e0 07             	and    eax,0x7
c001faf6:	83 e2 07             	and    edx,0x7
c001faf9:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fb00:	8a 15 01 1d 03 c0    	mov    dl,BYTE PTR ds:0xc0031d01
c001fb06:	83 e2 c7             	and    edx,0xffffffc7
c001fb09:	09 ca                	or     edx,ecx
c001fb0b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fb0f:	88 15 01 1d 03 c0    	mov    BYTE PTR ds:0xc0031d01,dl
c001fb15:	89 0c c5 08 1d 03 c0 	mov    DWORD PTR [eax*8-0x3ffce2f8],ecx
c001fb1c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fb20:	89 14 c5 04 1d 03 c0 	mov    DWORD PTR [eax*8-0x3ffce2fc],edx
c001fb27:	a1 44 1d 03 c0       	mov    eax,ds:0xc0031d44
c001fb2c:	83 f8 08             	cmp    eax,0x8
c001fb2f:	75 08                	jne    c001fb39 <Vm::fpuPush(unsigned long long)+0x56>
c001fb31:	80 0d 00 1d 03 c0 40 	or     BYTE PTR ds:0xc0031d00,0x40
c001fb38:	c3                   	ret    
c001fb39:	40                   	inc    eax
c001fb3a:	a3 44 1d 03 c0       	mov    ds:0xc0031d44,eax
c001fb3f:	c3                   	ret    

c001fb40 <Vm::fpuPop()>:
c001fb40:	8a 0d 01 1d 03 c0    	mov    cl,BYTE PTR ds:0xc0031d01
c001fb46:	53                   	push   ebx
c001fb47:	c0 e9 03             	shr    cl,0x3
c001fb4a:	8a 1d 01 1d 03 c0    	mov    bl,BYTE PTR ds:0xc0031d01
c001fb50:	83 e1 07             	and    ecx,0x7
c001fb53:	83 e3 c7             	and    ebx,0xffffffc7
c001fb56:	8b 04 cd 04 1d 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce2fc]
c001fb5d:	8b 14 cd 08 1d 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce2f8]
c001fb64:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fb6b:	83 e1 38             	and    ecx,0x38
c001fb6e:	09 d9                	or     ecx,ebx
c001fb70:	88 0d 01 1d 03 c0    	mov    BYTE PTR ds:0xc0031d01,cl
c001fb76:	8b 0d 44 1d 03 c0    	mov    ecx,DWORD PTR ds:0xc0031d44
c001fb7c:	85 c9                	test   ecx,ecx
c001fb7e:	74 09                	je     c001fb89 <Vm::fpuPop()+0x49>
c001fb80:	49                   	dec    ecx
c001fb81:	89 0d 44 1d 03 c0    	mov    DWORD PTR ds:0xc0031d44,ecx
c001fb87:	eb 07                	jmp    c001fb90 <Vm::fpuPop()+0x50>
c001fb89:	80 0d 00 1d 03 c0 40 	or     BYTE PTR ds:0xc0031d00,0x40
c001fb90:	5b                   	pop    ebx
c001fb91:	c3                   	ret    

c001fb92 <Vm::x87Handler(regs*)>:
c001fb92:	55                   	push   ebp
c001fb93:	57                   	push   edi
c001fb94:	56                   	push   esi
c001fb95:	53                   	push   ebx
c001fb96:	83 ec 1c             	sub    esp,0x1c
c001fb99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fb9d:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fba2:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fba5:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fbad:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fbb1:	50                   	push   eax
c001fbb2:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fbb6:	50                   	push   eax
c001fbb7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fbbb:	50                   	push   eax
c001fbbc:	53                   	push   ebx
c001fbbd:	e8 94 a0 ff ff       	call   c0019c56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fbc2:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fbc5:	83 c4 10             	add    esp,0x10
c001fbc8:	89 c6                	mov    esi,eax
c001fbca:	80 fa d9             	cmp    dl,0xd9
c001fbcd:	0f 85 52 01 00 00    	jne    c001fd25 <Vm::x87Handler(regs*)+0x193>
c001fbd3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbd7:	8d 50 20             	lea    edx,[eax+0x20]
c001fbda:	80 fa 0e             	cmp    dl,0xe
c001fbdd:	0f 87 86 00 00 00    	ja     c001fc69 <Vm::x87Handler(regs*)+0xd7>
c001fbe3:	0f b6 d2             	movzx  edx,dl
c001fbe6:	ff 24 95 d0 ca 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3530]
c001fbed:	e8 e7 fc ff ff       	call   c001f8d9 <Vm::fpuGet0()>
c001fbf2:	eb 05                	jmp    c001fbf9 <Vm::x87Handler(regs*)+0x67>
c001fbf4:	e8 e5 fc ff ff       	call   c001f8de <Vm::fpuGet1()>
c001fbf9:	57                   	push   edi
c001fbfa:	57                   	push   edi
c001fbfb:	52                   	push   edx
c001fbfc:	50                   	push   eax
c001fbfd:	e8 e1 fe ff ff       	call   c001fae3 <Vm::fpuPush(unsigned long long)>
c001fc02:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fc06:	83 c4 10             	add    esp,0x10
c001fc09:	b0 01                	mov    al,0x1
c001fc0b:	e9 e3 09 00 00       	jmp    c00205f3 <Vm::x87Handler(regs*)+0xa61>
c001fc10:	83 ec 0c             	sub    esp,0xc
c001fc13:	6a 00                	push   0x0
c001fc15:	e8 3b fe ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c001fc1a:	59                   	pop    ecx
c001fc1b:	5e                   	pop    esi
c001fc1c:	52                   	push   edx
c001fc1d:	50                   	push   eax
c001fc1e:	e8 c2 fd ff ff       	call   c001f9e5 <Vm::fpuChs(unsigned long long)>
c001fc23:	eb 13                	jmp    c001fc38 <Vm::x87Handler(regs*)+0xa6>
c001fc25:	83 ec 0c             	sub    esp,0xc
c001fc28:	6a 00                	push   0x0
c001fc2a:	e8 26 fe ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c001fc2f:	5f                   	pop    edi
c001fc30:	5d                   	pop    ebp
c001fc31:	52                   	push   edx
c001fc32:	50                   	push   eax
c001fc33:	e8 a4 fd ff ff       	call   c001f9dc <Vm::fpuAbs(unsigned long long)>
c001fc38:	83 c4 0c             	add    esp,0xc
c001fc3b:	52                   	push   edx
c001fc3c:	50                   	push   eax
c001fc3d:	6a 00                	push   0x0
c001fc3f:	e8 54 fe ff ff       	call   c001fa98 <Vm::fpuSetReg(int, unsigned long long)>
c001fc44:	eb bc                	jmp    c001fc02 <Vm::x87Handler(regs*)+0x70>
c001fc46:	e8 d3 fc ff ff       	call   c001f91e <Vm::fpuGetLog210()>
c001fc4b:	eb ac                	jmp    c001fbf9 <Vm::x87Handler(regs*)+0x67>
c001fc4d:	e8 9c fc ff ff       	call   c001f8ee <Vm::fpuGetLog2E()>
c001fc52:	eb a5                	jmp    c001fbf9 <Vm::x87Handler(regs*)+0x67>
c001fc54:	e8 8d fc ff ff       	call   c001f8e6 <Vm::fpuGetPi()>
c001fc59:	eb 9e                	jmp    c001fbf9 <Vm::x87Handler(regs*)+0x67>
c001fc5b:	e8 d6 fc ff ff       	call   c001f936 <Vm::fpuGetLog102()>
c001fc60:	eb 97                	jmp    c001fbf9 <Vm::x87Handler(regs*)+0x67>
c001fc62:	e8 9f fc ff ff       	call   c001f906 <Vm::fpuGetLogE2()>
c001fc67:	eb 90                	jmp    c001fbf9 <Vm::x87Handler(regs*)+0x67>
c001fc69:	8d 50 40             	lea    edx,[eax+0x40]
c001fc6c:	80 fa 07             	cmp    dl,0x7
c001fc6f:	77 15                	ja     c001fc86 <Vm::x87Handler(regs*)+0xf4>
c001fc71:	83 ec 0c             	sub    esp,0xc
c001fc74:	2d c0 00 00 00       	sub    eax,0xc0
c001fc79:	50                   	push   eax
c001fc7a:	e8 d6 fd ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c001fc7f:	59                   	pop    ecx
c001fc80:	5e                   	pop    esi
c001fc81:	e9 75 ff ff ff       	jmp    c001fbfb <Vm::x87Handler(regs*)+0x69>
c001fc86:	8d 50 38             	lea    edx,[eax+0x38]
c001fc89:	80 fa 07             	cmp    dl,0x7
c001fc8c:	77 3c                	ja     c001fcca <Vm::x87Handler(regs*)+0x138>
c001fc8e:	83 ec 0c             	sub    esp,0xc
c001fc91:	2d c8 00 00 00       	sub    eax,0xc8
c001fc96:	50                   	push   eax
c001fc97:	e8 b9 fd ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c001fc9c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fca3:	89 c6                	mov    esi,eax
c001fca5:	89 d7                	mov    edi,edx
c001fca7:	e8 a9 fd ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c001fcac:	83 c4 0c             	add    esp,0xc
c001fcaf:	52                   	push   edx
c001fcb0:	50                   	push   eax
c001fcb1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcb5:	2d c8 00 00 00       	sub    eax,0xc8
c001fcba:	50                   	push   eax
c001fcbb:	e8 d8 fd ff ff       	call   c001fa98 <Vm::fpuSetReg(int, unsigned long long)>
c001fcc0:	83 c4 0c             	add    esp,0xc
c001fcc3:	57                   	push   edi
c001fcc4:	56                   	push   esi
c001fcc5:	e9 73 ff ff ff       	jmp    c001fc3d <Vm::x87Handler(regs*)+0xab>
c001fcca:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcce:	84 d2                	test   dl,dl
c001fcd0:	75 0f                	jne    c001fce1 <Vm::x87Handler(regs*)+0x14f>
c001fcd2:	83 ec 0c             	sub    esp,0xc
c001fcd5:	ff 36                	push   DWORD PTR [esi]
c001fcd7:	e8 c8 fa ff ff       	call   c001f7a4 <Vm::fpu32ToInternal(unsigned int)>
c001fcdc:	e9 bf 00 00 00       	jmp    c001fda0 <Vm::x87Handler(regs*)+0x20e>
c001fce1:	80 fa 03             	cmp    dl,0x3
c001fce4:	75 13                	jne    c001fcf9 <Vm::x87Handler(regs*)+0x167>
c001fce6:	e8 55 fe ff ff       	call   c001fb40 <Vm::fpuPop()>
c001fceb:	55                   	push   ebp
c001fcec:	55                   	push   ebp
c001fced:	52                   	push   edx
c001fcee:	50                   	push   eax
c001fcef:	e8 4c fa ff ff       	call   c001f740 <Vm::fpuInternalTo32(unsigned long long)>
c001fcf4:	e9 88 00 00 00       	jmp    c001fd81 <Vm::x87Handler(regs*)+0x1ef>
c001fcf9:	80 fa 05             	cmp    dl,0x5
c001fcfc:	75 0e                	jne    c001fd0c <Vm::x87Handler(regs*)+0x17a>
c001fcfe:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fd01:	66 a3 02 1d 03 c0    	mov    ds:0xc0031d02,ax
c001fd07:	e9 df 00 00 00       	jmp    c001fdeb <Vm::x87Handler(regs*)+0x259>
c001fd0c:	31 c0                	xor    eax,eax
c001fd0e:	80 fa 07             	cmp    dl,0x7
c001fd11:	0f 85 dc 08 00 00    	jne    c00205f3 <Vm::x87Handler(regs*)+0xa61>
c001fd17:	66 a1 02 1d 03 c0    	mov    ax,ds:0xc0031d02
c001fd1d:	66 89 06             	mov    WORD PTR [esi],ax
c001fd20:	e9 c6 00 00 00       	jmp    c001fdeb <Vm::x87Handler(regs*)+0x259>
c001fd25:	80 fa d8             	cmp    dl,0xd8
c001fd28:	0f 84 c9 00 00 00    	je     c001fdf7 <Vm::x87Handler(regs*)+0x265>
c001fd2e:	80 fa dc             	cmp    dl,0xdc
c001fd31:	0f 84 0d 02 00 00    	je     c001ff44 <Vm::x87Handler(regs*)+0x3b2>
c001fd37:	80 fa de             	cmp    dl,0xde
c001fd3a:	0f 84 cd 02 00 00    	je     c002000d <Vm::x87Handler(regs*)+0x47b>
c001fd40:	80 fa dd             	cmp    dl,0xdd
c001fd43:	0f 84 5f 04 00 00    	je     c00201a8 <Vm::x87Handler(regs*)+0x616>
c001fd49:	80 fa da             	cmp    dl,0xda
c001fd4c:	0f 84 24 05 00 00    	je     c0020276 <Vm::x87Handler(regs*)+0x6e4>
c001fd52:	80 fa df             	cmp    dl,0xdf
c001fd55:	0f 84 68 05 00 00    	je     c00202c3 <Vm::x87Handler(regs*)+0x731>
c001fd5b:	31 c0                	xor    eax,eax
c001fd5d:	80 fa db             	cmp    dl,0xdb
c001fd60:	0f 85 8d 08 00 00    	jne    c00205f3 <Vm::x87Handler(regs*)+0xa61>
c001fd66:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd6a:	80 fa 03             	cmp    dl,0x3
c001fd6d:	0f 85 70 06 00 00    	jne    c00203e3 <Vm::x87Handler(regs*)+0x851>
c001fd73:	e8 c8 fd ff ff       	call   c001fb40 <Vm::fpuPop()>
c001fd78:	55                   	push   ebp
c001fd79:	55                   	push   ebp
c001fd7a:	52                   	push   edx
c001fd7b:	50                   	push   eax
c001fd7c:	e8 71 fa ff ff       	call   c001f7f2 <Vm::fpuFloatToLong(unsigned long long)>
c001fd81:	83 c4 10             	add    esp,0x10
c001fd84:	89 06                	mov    DWORD PTR [esi],eax
c001fd86:	eb 63                	jmp    c001fdeb <Vm::x87Handler(regs*)+0x259>
c001fd88:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd8c:	84 d2                	test   dl,dl
c001fd8e:	0f 85 e6 05 00 00    	jne    c002037a <Vm::x87Handler(regs*)+0x7e8>
c001fd94:	57                   	push   edi
c001fd95:	57                   	push   edi
c001fd96:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd99:	ff 36                	push   DWORD PTR [esi]
c001fd9b:	e8 49 fa ff ff       	call   c001f7e9 <Vm::fpu64ToInternal(unsigned long long)>
c001fda0:	5e                   	pop    esi
c001fda1:	5f                   	pop    edi
c001fda2:	52                   	push   edx
c001fda3:	50                   	push   eax
c001fda4:	e8 3a fd ff ff       	call   c001fae3 <Vm::fpuPush(unsigned long long)>
c001fda9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fdad:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fdb0:	e9 51 fe ff ff       	jmp    c001fc06 <Vm::x87Handler(regs*)+0x74>
c001fdb5:	80 fa 03             	cmp    dl,0x3
c001fdb8:	0f 85 d7 06 00 00    	jne    c0020495 <Vm::x87Handler(regs*)+0x903>
c001fdbe:	57                   	push   edi
c001fdbf:	57                   	push   edi
c001fdc0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fdc3:	ff 36                	push   DWORD PTR [esi]
c001fdc5:	e8 1f fa ff ff       	call   c001f7e9 <Vm::fpu64ToInternal(unsigned long long)>
c001fdca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdd1:	89 c6                	mov    esi,eax
c001fdd3:	89 d7                	mov    edi,edx
c001fdd5:	e8 7b fc ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c001fdda:	57                   	push   edi
c001fddb:	56                   	push   esi
c001fddc:	52                   	push   edx
c001fddd:	50                   	push   eax
c001fdde:	e8 95 fb ff ff       	call   c001f978 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fde3:	83 c4 20             	add    esp,0x20
c001fde6:	e8 55 fd ff ff       	call   c001fb40 <Vm::fpuPop()>
c001fdeb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fdef:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fdf2:	e9 12 fe ff ff       	jmp    c001fc09 <Vm::x87Handler(regs*)+0x77>
c001fdf7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdfb:	8d 50 40             	lea    edx,[eax+0x40]
c001fdfe:	80 fa 07             	cmp    dl,0x7
c001fe01:	77 29                	ja     c001fe2c <Vm::x87Handler(regs*)+0x29a>
c001fe03:	83 ec 0c             	sub    esp,0xc
c001fe06:	2d c0 00 00 00       	sub    eax,0xc0
c001fe0b:	50                   	push   eax
c001fe0c:	e8 44 fc ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c001fe11:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe18:	89 c6                	mov    esi,eax
c001fe1a:	89 d7                	mov    edi,edx
c001fe1c:	e8 34 fc ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c001fe21:	57                   	push   edi
c001fe22:	56                   	push   esi
c001fe23:	52                   	push   edx
c001fe24:	50                   	push   eax
c001fe25:	e8 a1 fb ff ff       	call   c001f9cb <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe2a:	eb 2f                	jmp    c001fe5b <Vm::x87Handler(regs*)+0x2c9>
c001fe2c:	8d 50 38             	lea    edx,[eax+0x38]
c001fe2f:	80 fa 07             	cmp    dl,0x7
c001fe32:	77 2f                	ja     c001fe63 <Vm::x87Handler(regs*)+0x2d1>
c001fe34:	83 ec 0c             	sub    esp,0xc
c001fe37:	2d c8 00 00 00       	sub    eax,0xc8
c001fe3c:	50                   	push   eax
c001fe3d:	e8 13 fc ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c001fe42:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe49:	89 c6                	mov    esi,eax
c001fe4b:	89 d7                	mov    edi,edx
c001fe4d:	e8 03 fc ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c001fe52:	57                   	push   edi
c001fe53:	56                   	push   esi
c001fe54:	52                   	push   edx
c001fe55:	50                   	push   eax
c001fe56:	e8 a9 fb ff ff       	call   c001fa04 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe5b:	83 c4 1c             	add    esp,0x1c
c001fe5e:	e9 d8 fd ff ff       	jmp    c001fc3b <Vm::x87Handler(regs*)+0xa9>
c001fe63:	8d 50 30             	lea    edx,[eax+0x30]
c001fe66:	80 fa 07             	cmp    dl,0x7
c001fe69:	77 0d                	ja     c001fe78 <Vm::x87Handler(regs*)+0x2e6>
c001fe6b:	83 ec 0c             	sub    esp,0xc
c001fe6e:	2d d0 00 00 00       	sub    eax,0xd0
c001fe73:	e9 99 03 00 00       	jmp    c0020211 <Vm::x87Handler(regs*)+0x67f>
c001fe78:	8d 50 28             	lea    edx,[eax+0x28]
c001fe7b:	80 fa 07             	cmp    dl,0x7
c001fe7e:	77 0d                	ja     c001fe8d <Vm::x87Handler(regs*)+0x2fb>
c001fe80:	83 ec 0c             	sub    esp,0xc
c001fe83:	2d d8 00 00 00       	sub    eax,0xd8
c001fe88:	e9 c0 03 00 00       	jmp    c002024d <Vm::x87Handler(regs*)+0x6bb>
c001fe8d:	8d 50 20             	lea    edx,[eax+0x20]
c001fe90:	80 fa 07             	cmp    dl,0x7
c001fe93:	77 1b                	ja     c001feb0 <Vm::x87Handler(regs*)+0x31e>
c001fe95:	83 ec 0c             	sub    esp,0xc
c001fe98:	2d e0 00 00 00       	sub    eax,0xe0
c001fe9d:	50                   	push   eax
c001fe9e:	e8 b2 fb ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c001fea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001feaa:	89 c6                	mov    esi,eax
c001feac:	89 d7                	mov    edi,edx
c001feae:	eb 22                	jmp    c001fed2 <Vm::x87Handler(regs*)+0x340>
c001feb0:	8d 50 18             	lea    edx,[eax+0x18]
c001feb3:	80 fa 07             	cmp    dl,0x7
c001feb6:	77 2d                	ja     c001fee5 <Vm::x87Handler(regs*)+0x353>
c001feb8:	83 ec 0c             	sub    esp,0xc
c001febb:	6a 00                	push   0x0
c001febd:	e8 93 fb ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c001fec2:	89 c6                	mov    esi,eax
c001fec4:	89 d7                	mov    edi,edx
c001fec6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feca:	2d e8 00 00 00       	sub    eax,0xe8
c001fecf:	89 04 24             	mov    DWORD PTR [esp],eax
c001fed2:	e8 7e fb ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c001fed7:	57                   	push   edi
c001fed8:	56                   	push   esi
c001fed9:	52                   	push   edx
c001feda:	50                   	push   eax
c001fedb:	e8 15 fb ff ff       	call   c001f9f5 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fee0:	e9 76 ff ff ff       	jmp    c001fe5b <Vm::x87Handler(regs*)+0x2c9>
c001fee5:	8d 50 10             	lea    edx,[eax+0x10]
c001fee8:	80 fa 07             	cmp    dl,0x7
c001feeb:	77 1b                	ja     c001ff08 <Vm::x87Handler(regs*)+0x376>
c001feed:	83 ec 0c             	sub    esp,0xc
c001fef0:	2d f0 00 00 00       	sub    eax,0xf0
c001fef5:	50                   	push   eax
c001fef6:	e8 5a fb ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c001fefb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff02:	89 c6                	mov    esi,eax
c001ff04:	89 d7                	mov    edi,edx
c001ff06:	eb 22                	jmp    c001ff2a <Vm::x87Handler(regs*)+0x398>
c001ff08:	3c f7                	cmp    al,0xf7
c001ff0a:	0f 86 d1 03 00 00    	jbe    c00202e1 <Vm::x87Handler(regs*)+0x74f>
c001ff10:	83 ec 0c             	sub    esp,0xc
c001ff13:	6a 00                	push   0x0
c001ff15:	e8 3b fb ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c001ff1a:	89 c6                	mov    esi,eax
c001ff1c:	89 d7                	mov    edi,edx
c001ff1e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff22:	2d f8 00 00 00       	sub    eax,0xf8
c001ff27:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff2a:	e8 26 fb ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c001ff2f:	57                   	push   edi
c001ff30:	56                   	push   esi
c001ff31:	52                   	push   edx
c001ff32:	50                   	push   eax
c001ff33:	e8 eb fa ff ff       	call   c001fa23 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ff38:	83 c4 1c             	add    esp,0x1c
c001ff3b:	52                   	push   edx
c001ff3c:	50                   	push   eax
c001ff3d:	6a 00                	push   0x0
c001ff3f:	e9 51 02 00 00       	jmp    c0020195 <Vm::x87Handler(regs*)+0x603>
c001ff44:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff48:	8d 50 40             	lea    edx,[eax+0x40]
c001ff4b:	80 fa 07             	cmp    dl,0x7
c001ff4e:	77 37                	ja     c001ff87 <Vm::x87Handler(regs*)+0x3f5>
c001ff50:	83 ec 0c             	sub    esp,0xc
c001ff53:	2d c0 00 00 00       	sub    eax,0xc0
c001ff58:	50                   	push   eax
c001ff59:	e8 f7 fa ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c001ff5e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff65:	89 c6                	mov    esi,eax
c001ff67:	89 d7                	mov    edi,edx
c001ff69:	e8 e7 fa ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c001ff6e:	57                   	push   edi
c001ff6f:	56                   	push   esi
c001ff70:	52                   	push   edx
c001ff71:	50                   	push   eax
c001ff72:	e8 54 fa ff ff       	call   c001f9cb <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff77:	83 c4 1c             	add    esp,0x1c
c001ff7a:	52                   	push   edx
c001ff7b:	50                   	push   eax
c001ff7c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff80:	2d c0 00 00 00       	sub    eax,0xc0
c001ff85:	eb 3d                	jmp    c001ffc4 <Vm::x87Handler(regs*)+0x432>
c001ff87:	8d 50 38             	lea    edx,[eax+0x38]
c001ff8a:	80 fa 07             	cmp    dl,0x7
c001ff8d:	77 3b                	ja     c001ffca <Vm::x87Handler(regs*)+0x438>
c001ff8f:	83 ec 0c             	sub    esp,0xc
c001ff92:	2d c8 00 00 00       	sub    eax,0xc8
c001ff97:	50                   	push   eax
c001ff98:	e8 b8 fa ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c001ff9d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffa4:	89 c6                	mov    esi,eax
c001ffa6:	89 d7                	mov    edi,edx
c001ffa8:	e8 a8 fa ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c001ffad:	57                   	push   edi
c001ffae:	56                   	push   esi
c001ffaf:	52                   	push   edx
c001ffb0:	50                   	push   eax
c001ffb1:	e8 4e fa ff ff       	call   c001fa04 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ffb6:	83 c4 1c             	add    esp,0x1c
c001ffb9:	52                   	push   edx
c001ffba:	50                   	push   eax
c001ffbb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffbf:	2d c8 00 00 00       	sub    eax,0xc8
c001ffc4:	50                   	push   eax
c001ffc5:	e9 75 fc ff ff       	jmp    c001fc3f <Vm::x87Handler(regs*)+0xad>
c001ffca:	83 c0 18             	add    eax,0x18
c001ffcd:	3c 07                	cmp    al,0x7
c001ffcf:	0f 87 3b 04 00 00    	ja     c0020410 <Vm::x87Handler(regs*)+0x87e>
c001ffd5:	83 ec 0c             	sub    esp,0xc
c001ffd8:	6a 00                	push   0x0
c001ffda:	e8 76 fa ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c001ffdf:	89 c6                	mov    esi,eax
c001ffe1:	89 d7                	mov    edi,edx
c001ffe3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffe7:	2d e8 00 00 00       	sub    eax,0xe8
c001ffec:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffef:	e8 61 fa ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c001fff4:	57                   	push   edi
c001fff5:	56                   	push   esi
c001fff6:	52                   	push   edx
c001fff7:	50                   	push   eax
c001fff8:	e8 f8 f9 ff ff       	call   c001f9f5 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fffd:	83 c4 1c             	add    esp,0x1c
c0020000:	52                   	push   edx
c0020001:	50                   	push   eax
c0020002:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020006:	2d e8 00 00 00       	sub    eax,0xe8
c002000b:	eb b7                	jmp    c001ffc4 <Vm::x87Handler(regs*)+0x432>
c002000d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020011:	8d 50 40             	lea    edx,[eax+0x40]
c0020014:	80 fa 07             	cmp    dl,0x7
c0020017:	77 3a                	ja     c0020053 <Vm::x87Handler(regs*)+0x4c1>
c0020019:	83 ec 0c             	sub    esp,0xc
c002001c:	2d c0 00 00 00       	sub    eax,0xc0
c0020021:	50                   	push   eax
c0020022:	e8 2e fa ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c0020027:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002002e:	89 c6                	mov    esi,eax
c0020030:	89 d7                	mov    edi,edx
c0020032:	e8 1e fa ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c0020037:	57                   	push   edi
c0020038:	56                   	push   esi
c0020039:	52                   	push   edx
c002003a:	50                   	push   eax
c002003b:	e8 8b f9 ff ff       	call   c001f9cb <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020040:	83 c4 1c             	add    esp,0x1c
c0020043:	52                   	push   edx
c0020044:	50                   	push   eax
c0020045:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020049:	2d c0 00 00 00       	sub    eax,0xc0
c002004e:	e9 9e 01 00 00       	jmp    c00201f1 <Vm::x87Handler(regs*)+0x65f>
c0020053:	8d 50 20             	lea    edx,[eax+0x20]
c0020056:	80 fa 07             	cmp    dl,0x7
c0020059:	77 3a                	ja     c0020095 <Vm::x87Handler(regs*)+0x503>
c002005b:	83 ec 0c             	sub    esp,0xc
c002005e:	2d e0 00 00 00       	sub    eax,0xe0
c0020063:	50                   	push   eax
c0020064:	e8 ec f9 ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c0020069:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020070:	89 c6                	mov    esi,eax
c0020072:	89 d7                	mov    edi,edx
c0020074:	e8 dc f9 ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c0020079:	57                   	push   edi
c002007a:	56                   	push   esi
c002007b:	52                   	push   edx
c002007c:	50                   	push   eax
c002007d:	e8 73 f9 ff ff       	call   c001f9f5 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020082:	83 c4 1c             	add    esp,0x1c
c0020085:	52                   	push   edx
c0020086:	50                   	push   eax
c0020087:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002008b:	2d e0 00 00 00       	sub    eax,0xe0
c0020090:	e9 5c 01 00 00       	jmp    c00201f1 <Vm::x87Handler(regs*)+0x65f>
c0020095:	8d 50 18             	lea    edx,[eax+0x18]
c0020098:	80 fa 07             	cmp    dl,0x7
c002009b:	77 3b                	ja     c00200d8 <Vm::x87Handler(regs*)+0x546>
c002009d:	83 ec 0c             	sub    esp,0xc
c00200a0:	6a 00                	push   0x0
c00200a2:	e8 ae f9 ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c00200a7:	89 c6                	mov    esi,eax
c00200a9:	89 d7                	mov    edi,edx
c00200ab:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200af:	2d e8 00 00 00       	sub    eax,0xe8
c00200b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00200b7:	e8 99 f9 ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c00200bc:	57                   	push   edi
c00200bd:	56                   	push   esi
c00200be:	52                   	push   edx
c00200bf:	50                   	push   eax
c00200c0:	e8 30 f9 ff ff       	call   c001f9f5 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00200c5:	83 c4 1c             	add    esp,0x1c
c00200c8:	52                   	push   edx
c00200c9:	50                   	push   eax
c00200ca:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200ce:	2d e8 00 00 00       	sub    eax,0xe8
c00200d3:	e9 19 01 00 00       	jmp    c00201f1 <Vm::x87Handler(regs*)+0x65f>
c00200d8:	8d 50 38             	lea    edx,[eax+0x38]
c00200db:	80 fa 07             	cmp    dl,0x7
c00200de:	77 37                	ja     c0020117 <Vm::x87Handler(regs*)+0x585>
c00200e0:	83 ec 0c             	sub    esp,0xc
c00200e3:	2d c8 00 00 00       	sub    eax,0xc8
c00200e8:	50                   	push   eax
c00200e9:	e8 67 f9 ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c00200ee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200f5:	89 c6                	mov    esi,eax
c00200f7:	89 d7                	mov    edi,edx
c00200f9:	e8 57 f9 ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c00200fe:	57                   	push   edi
c00200ff:	56                   	push   esi
c0020100:	52                   	push   edx
c0020101:	50                   	push   eax
c0020102:	e8 fd f8 ff ff       	call   c001fa04 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020107:	83 c4 1c             	add    esp,0x1c
c002010a:	52                   	push   edx
c002010b:	50                   	push   eax
c002010c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020110:	2d c8 00 00 00       	sub    eax,0xc8
c0020115:	eb 7d                	jmp    c0020194 <Vm::x87Handler(regs*)+0x602>
c0020117:	3c f7                	cmp    al,0xf7
c0020119:	76 38                	jbe    c0020153 <Vm::x87Handler(regs*)+0x5c1>
c002011b:	83 ec 0c             	sub    esp,0xc
c002011e:	6a 00                	push   0x0
c0020120:	e8 30 f9 ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c0020125:	89 c6                	mov    esi,eax
c0020127:	89 d7                	mov    edi,edx
c0020129:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002012d:	2d f8 00 00 00       	sub    eax,0xf8
c0020132:	89 04 24             	mov    DWORD PTR [esp],eax
c0020135:	e8 1b f9 ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c002013a:	57                   	push   edi
c002013b:	56                   	push   esi
c002013c:	52                   	push   edx
c002013d:	50                   	push   eax
c002013e:	e8 e0 f8 ff ff       	call   c001fa23 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020143:	83 c4 1c             	add    esp,0x1c
c0020146:	52                   	push   edx
c0020147:	50                   	push   eax
c0020148:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002014c:	2d f8 00 00 00       	sub    eax,0xf8
c0020151:	eb 41                	jmp    c0020194 <Vm::x87Handler(regs*)+0x602>
c0020153:	8d 50 10             	lea    edx,[eax+0x10]
c0020156:	80 fa 07             	cmp    dl,0x7
c0020159:	0f 87 5a 01 00 00    	ja     c00202b9 <Vm::x87Handler(regs*)+0x727>
c002015f:	83 ec 0c             	sub    esp,0xc
c0020162:	2d f0 00 00 00       	sub    eax,0xf0
c0020167:	50                   	push   eax
c0020168:	e8 e8 f8 ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c002016d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020174:	89 c6                	mov    esi,eax
c0020176:	89 d7                	mov    edi,edx
c0020178:	e8 d8 f8 ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c002017d:	57                   	push   edi
c002017e:	56                   	push   esi
c002017f:	52                   	push   edx
c0020180:	50                   	push   eax
c0020181:	e8 9d f8 ff ff       	call   c001fa23 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020186:	83 c4 1c             	add    esp,0x1c
c0020189:	52                   	push   edx
c002018a:	50                   	push   eax
c002018b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002018f:	2d f0 00 00 00       	sub    eax,0xf0
c0020194:	50                   	push   eax
c0020195:	e8 fe f8 ff ff       	call   c001fa98 <Vm::fpuSetReg(int, unsigned long long)>
c002019a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002019e:	e8 9d f9 ff ff       	call   c001fb40 <Vm::fpuPop()>
c00201a3:	e9 5e fa ff ff       	jmp    c001fc06 <Vm::x87Handler(regs*)+0x74>
c00201a8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201ac:	8d 50 30             	lea    edx,[eax+0x30]
c00201af:	80 fa 07             	cmp    dl,0x7
c00201b2:	77 1d                	ja     c00201d1 <Vm::x87Handler(regs*)+0x63f>
c00201b4:	83 ec 0c             	sub    esp,0xc
c00201b7:	6a 00                	push   0x0
c00201b9:	e8 97 f8 ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c00201be:	83 c4 0c             	add    esp,0xc
c00201c1:	52                   	push   edx
c00201c2:	50                   	push   eax
c00201c3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201c7:	2d d0 00 00 00       	sub    eax,0xd0
c00201cc:	e9 f3 fd ff ff       	jmp    c001ffc4 <Vm::x87Handler(regs*)+0x432>
c00201d1:	8d 50 28             	lea    edx,[eax+0x28]
c00201d4:	80 fa 07             	cmp    dl,0x7
c00201d7:	77 28                	ja     c0020201 <Vm::x87Handler(regs*)+0x66f>
c00201d9:	83 ec 0c             	sub    esp,0xc
c00201dc:	6a 00                	push   0x0
c00201de:	e8 72 f8 ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c00201e3:	83 c4 0c             	add    esp,0xc
c00201e6:	52                   	push   edx
c00201e7:	50                   	push   eax
c00201e8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201ec:	2d d8 00 00 00       	sub    eax,0xd8
c00201f1:	50                   	push   eax
c00201f2:	e8 a1 f8 ff ff       	call   c001fa98 <Vm::fpuSetReg(int, unsigned long long)>
c00201f7:	e8 44 f9 ff ff       	call   c001fb40 <Vm::fpuPop()>
c00201fc:	e9 01 fa ff ff       	jmp    c001fc02 <Vm::x87Handler(regs*)+0x70>
c0020201:	8d 50 20             	lea    edx,[eax+0x20]
c0020204:	80 fa 07             	cmp    dl,0x7
c0020207:	77 30                	ja     c0020239 <Vm::x87Handler(regs*)+0x6a7>
c0020209:	83 ec 0c             	sub    esp,0xc
c002020c:	2d e0 00 00 00       	sub    eax,0xe0
c0020211:	50                   	push   eax
c0020212:	e8 3e f8 ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c0020217:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002021e:	89 c6                	mov    esi,eax
c0020220:	89 d7                	mov    edi,edx
c0020222:	e8 2e f8 ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c0020227:	57                   	push   edi
c0020228:	56                   	push   esi
c0020229:	52                   	push   edx
c002022a:	50                   	push   eax
c002022b:	e8 48 f7 ff ff       	call   c001f978 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020230:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020234:	e9 54 02 00 00       	jmp    c002048d <Vm::x87Handler(regs*)+0x8fb>
c0020239:	8d 50 18             	lea    edx,[eax+0x18]
c002023c:	80 fa 07             	cmp    dl,0x7
c002023f:	0f 87 43 fb ff ff    	ja     c001fd88 <Vm::x87Handler(regs*)+0x1f6>
c0020245:	83 ec 0c             	sub    esp,0xc
c0020248:	2d e8 00 00 00       	sub    eax,0xe8
c002024d:	50                   	push   eax
c002024e:	e8 02 f8 ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c0020253:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002025a:	89 c6                	mov    esi,eax
c002025c:	89 d7                	mov    edi,edx
c002025e:	e8 f2 f7 ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c0020263:	57                   	push   edi
c0020264:	56                   	push   esi
c0020265:	52                   	push   edx
c0020266:	50                   	push   eax
c0020267:	e8 0c f7 ff ff       	call   c001f978 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002026c:	83 c4 20             	add    esp,0x20
c002026f:	e8 cc f8 ff ff       	call   c001fb40 <Vm::fpuPop()>
c0020274:	eb 62                	jmp    c00202d8 <Vm::x87Handler(regs*)+0x746>
c0020276:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c002027a:	0f 85 0f 01 00 00    	jne    c002038f <Vm::x87Handler(regs*)+0x7fd>
c0020280:	83 ec 0c             	sub    esp,0xc
c0020283:	6a 01                	push   0x1
c0020285:	e8 cb f7 ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c002028a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020291:	89 c6                	mov    esi,eax
c0020293:	89 d7                	mov    edi,edx
c0020295:	e8 bb f7 ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c002029a:	57                   	push   edi
c002029b:	56                   	push   esi
c002029c:	52                   	push   edx
c002029d:	50                   	push   eax
c002029e:	e8 d5 f6 ff ff       	call   c001f978 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00202a3:	83 c4 20             	add    esp,0x20
c00202a6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00202aa:	e8 91 f8 ff ff       	call   c001fb40 <Vm::fpuPop()>
c00202af:	e8 8c f8 ff ff       	call   c001fb40 <Vm::fpuPop()>
c00202b4:	e9 50 f9 ff ff       	jmp    c001fc09 <Vm::x87Handler(regs*)+0x77>
c00202b9:	3c d9                	cmp    al,0xd9
c00202bb:	0f 85 b5 02 00 00    	jne    c0020576 <Vm::x87Handler(regs*)+0x9e4>
c00202c1:	eb bd                	jmp    c0020280 <Vm::x87Handler(regs*)+0x6ee>
c00202c3:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c00202c7:	0f 85 ea 02 00 00    	jne    c00205b7 <Vm::x87Handler(regs*)+0xa25>
c00202cd:	0f b7 05 00 1d 03 c0 	movzx  eax,WORD PTR ds:0xc0031d00
c00202d4:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00202d8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00202dc:	e9 28 f9 ff ff       	jmp    c001fc09 <Vm::x87Handler(regs*)+0x77>
c00202e1:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202e5:	84 d2                	test   dl,dl
c00202e7:	75 0f                	jne    c00202f8 <Vm::x87Handler(regs*)+0x766>
c00202e9:	83 ec 0c             	sub    esp,0xc
c00202ec:	ff 36                	push   DWORD PTR [esi]
c00202ee:	e8 b1 f4 ff ff       	call   c001f7a4 <Vm::fpu32ToInternal(unsigned int)>
c00202f3:	e9 2c 01 00 00       	jmp    c0020424 <Vm::x87Handler(regs*)+0x892>
c00202f8:	80 fa 01             	cmp    dl,0x1
c00202fb:	75 0f                	jne    c002030c <Vm::x87Handler(regs*)+0x77a>
c00202fd:	83 ec 0c             	sub    esp,0xc
c0020300:	ff 36                	push   DWORD PTR [esi]
c0020302:	e8 9d f4 ff ff       	call   c001f7a4 <Vm::fpu32ToInternal(unsigned int)>
c0020307:	e9 81 02 00 00       	jmp    c002058d <Vm::x87Handler(regs*)+0x9fb>
c002030c:	80 fa 04             	cmp    dl,0x4
c002030f:	75 0f                	jne    c0020320 <Vm::x87Handler(regs*)+0x78e>
c0020311:	83 ec 0c             	sub    esp,0xc
c0020314:	ff 36                	push   DWORD PTR [esi]
c0020316:	e8 89 f4 ff ff       	call   c001f7a4 <Vm::fpu32ToInternal(unsigned int)>
c002031b:	e9 86 01 00 00       	jmp    c00204a6 <Vm::x87Handler(regs*)+0x914>
c0020320:	80 fa 05             	cmp    dl,0x5
c0020323:	75 1b                	jne    c0020340 <Vm::x87Handler(regs*)+0x7ae>
c0020325:	83 ec 0c             	sub    esp,0xc
c0020328:	6a 00                	push   0x0
c002032a:	e8 26 f7 ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c002032f:	89 c7                	mov    edi,eax
c0020331:	89 d5                	mov    ebp,edx
c0020333:	58                   	pop    eax
c0020334:	ff 36                	push   DWORD PTR [esi]
c0020336:	e8 69 f4 ff ff       	call   c001f7a4 <Vm::fpu32ToInternal(unsigned int)>
c002033b:	e9 a3 01 00 00       	jmp    c00204e3 <Vm::x87Handler(regs*)+0x951>
c0020340:	80 fa 06             	cmp    dl,0x6
c0020343:	75 0f                	jne    c0020354 <Vm::x87Handler(regs*)+0x7c2>
c0020345:	83 ec 0c             	sub    esp,0xc
c0020348:	ff 36                	push   DWORD PTR [esi]
c002034a:	e8 55 f4 ff ff       	call   c001f7a4 <Vm::fpu32ToInternal(unsigned int)>
c002034f:	e9 ae 01 00 00       	jmp    c0020502 <Vm::x87Handler(regs*)+0x970>
c0020354:	31 c0                	xor    eax,eax
c0020356:	80 fa 07             	cmp    dl,0x7
c0020359:	0f 85 94 02 00 00    	jne    c00205f3 <Vm::x87Handler(regs*)+0xa61>
c002035f:	83 ec 0c             	sub    esp,0xc
c0020362:	6a 00                	push   0x0
c0020364:	e8 ec f6 ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c0020369:	89 c7                	mov    edi,eax
c002036b:	89 d5                	mov    ebp,edx
c002036d:	58                   	pop    eax
c002036e:	ff 36                	push   DWORD PTR [esi]
c0020370:	e8 2f f4 ff ff       	call   c001f7a4 <Vm::fpu32ToInternal(unsigned int)>
c0020375:	e9 cb 01 00 00       	jmp    c0020545 <Vm::x87Handler(regs*)+0x9b3>
c002037a:	80 fa 03             	cmp    dl,0x3
c002037d:	0f 85 d3 01 00 00    	jne    c0020556 <Vm::x87Handler(regs*)+0x9c4>
c0020383:	e8 b8 f7 ff ff       	call   c001fb40 <Vm::fpuPop()>
c0020388:	51                   	push   ecx
c0020389:	51                   	push   ecx
c002038a:	e9 de 01 00 00       	jmp    c002056d <Vm::x87Handler(regs*)+0x9db>
c002038f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020393:	80 fa 01             	cmp    dl,0x1
c0020396:	75 09                	jne    c00203a1 <Vm::x87Handler(regs*)+0x80f>
c0020398:	57                   	push   edi
c0020399:	57                   	push   edi
c002039a:	8b 06                	mov    eax,DWORD PTR [esi]
c002039c:	e9 e3 01 00 00       	jmp    c0020584 <Vm::x87Handler(regs*)+0x9f2>
c00203a1:	80 fa 04             	cmp    dl,0x4
c00203a4:	75 12                	jne    c00203b8 <Vm::x87Handler(regs*)+0x826>
c00203a6:	31 d2                	xor    edx,edx
c00203a8:	51                   	push   ecx
c00203a9:	51                   	push   ecx
c00203aa:	8b 06                	mov    eax,DWORD PTR [esi]
c00203ac:	52                   	push   edx
c00203ad:	50                   	push   eax
c00203ae:	e8 d0 f4 ff ff       	call   c001f883 <Vm::fpuLongToFloat(long long)>
c00203b3:	e9 ee 00 00 00       	jmp    c00204a6 <Vm::x87Handler(regs*)+0x914>
c00203b8:	31 c0                	xor    eax,eax
c00203ba:	80 fa 07             	cmp    dl,0x7
c00203bd:	0f 85 30 02 00 00    	jne    c00205f3 <Vm::x87Handler(regs*)+0xa61>
c00203c3:	83 ec 0c             	sub    esp,0xc
c00203c6:	6a 00                	push   0x0
c00203c8:	e8 88 f6 ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c00203cd:	89 c7                	mov    edi,eax
c00203cf:	89 d5                	mov    ebp,edx
c00203d1:	58                   	pop    eax
c00203d2:	8b 06                	mov    eax,DWORD PTR [esi]
c00203d4:	5a                   	pop    edx
c00203d5:	31 d2                	xor    edx,edx
c00203d7:	52                   	push   edx
c00203d8:	50                   	push   eax
c00203d9:	e8 a5 f4 ff ff       	call   c001f883 <Vm::fpuLongToFloat(long long)>
c00203de:	e9 62 01 00 00       	jmp    c0020545 <Vm::x87Handler(regs*)+0x9b3>
c00203e3:	84 d2                	test   dl,dl
c00203e5:	75 0d                	jne    c00203f4 <Vm::x87Handler(regs*)+0x862>
c00203e7:	31 d2                	xor    edx,edx
c00203e9:	55                   	push   ebp
c00203ea:	55                   	push   ebp
c00203eb:	8b 06                	mov    eax,DWORD PTR [esi]
c00203ed:	52                   	push   edx
c00203ee:	50                   	push   eax
c00203ef:	e9 d3 01 00 00       	jmp    c00205c7 <Vm::x87Handler(regs*)+0xa35>
c00203f4:	31 c0                	xor    eax,eax
c00203f6:	80 fa 02             	cmp    dl,0x2
c00203f9:	0f 85 f4 01 00 00    	jne    c00205f3 <Vm::x87Handler(regs*)+0xa61>
c00203ff:	83 ec 0c             	sub    esp,0xc
c0020402:	6a 00                	push   0x0
c0020404:	e8 4c f6 ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c0020409:	59                   	pop    ecx
c002040a:	5f                   	pop    edi
c002040b:	e9 6a f9 ff ff       	jmp    c001fd7a <Vm::x87Handler(regs*)+0x1e8>
c0020410:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020414:	84 d2                	test   dl,dl
c0020416:	75 2a                	jne    c0020442 <Vm::x87Handler(regs*)+0x8b0>
c0020418:	50                   	push   eax
c0020419:	50                   	push   eax
c002041a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002041d:	ff 36                	push   DWORD PTR [esi]
c002041f:	e8 c5 f3 ff ff       	call   c001f7e9 <Vm::fpu64ToInternal(unsigned long long)>
c0020424:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002042b:	89 c6                	mov    esi,eax
c002042d:	89 d7                	mov    edi,edx
c002042f:	e8 21 f6 ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c0020434:	57                   	push   edi
c0020435:	56                   	push   esi
c0020436:	52                   	push   edx
c0020437:	50                   	push   eax
c0020438:	e8 8e f5 ff ff       	call   c001f9cb <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002043d:	e9 64 01 00 00       	jmp    c00205a6 <Vm::x87Handler(regs*)+0xa14>
c0020442:	80 fa 01             	cmp    dl,0x1
c0020445:	75 11                	jne    c0020458 <Vm::x87Handler(regs*)+0x8c6>
c0020447:	50                   	push   eax
c0020448:	50                   	push   eax
c0020449:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002044c:	ff 36                	push   DWORD PTR [esi]
c002044e:	e8 96 f3 ff ff       	call   c001f7e9 <Vm::fpu64ToInternal(unsigned long long)>
c0020453:	e9 35 01 00 00       	jmp    c002058d <Vm::x87Handler(regs*)+0x9fb>
c0020458:	80 fa 02             	cmp    dl,0x2
c002045b:	0f 85 54 f9 ff ff    	jne    c001fdb5 <Vm::x87Handler(regs*)+0x223>
c0020461:	55                   	push   ebp
c0020462:	55                   	push   ebp
c0020463:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020466:	ff 36                	push   DWORD PTR [esi]
c0020468:	e8 7c f3 ff ff       	call   c001f7e9 <Vm::fpu64ToInternal(unsigned long long)>
c002046d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020474:	89 c6                	mov    esi,eax
c0020476:	89 d7                	mov    edi,edx
c0020478:	e8 d8 f5 ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c002047d:	57                   	push   edi
c002047e:	56                   	push   esi
c002047f:	52                   	push   edx
c0020480:	50                   	push   eax
c0020481:	e8 f2 f4 ff ff       	call   c001f978 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020486:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002048a:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c002048d:	83 c4 20             	add    esp,0x20
c0020490:	e9 74 f7 ff ff       	jmp    c001fc09 <Vm::x87Handler(regs*)+0x77>
c0020495:	80 fa 04             	cmp    dl,0x4
c0020498:	75 2a                	jne    c00204c4 <Vm::x87Handler(regs*)+0x932>
c002049a:	51                   	push   ecx
c002049b:	51                   	push   ecx
c002049c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002049f:	ff 36                	push   DWORD PTR [esi]
c00204a1:	e8 43 f3 ff ff       	call   c001f7e9 <Vm::fpu64ToInternal(unsigned long long)>
c00204a6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204ad:	89 c6                	mov    esi,eax
c00204af:	89 d7                	mov    edi,edx
c00204b1:	e8 9f f5 ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c00204b6:	57                   	push   edi
c00204b7:	56                   	push   esi
c00204b8:	52                   	push   edx
c00204b9:	50                   	push   eax
c00204ba:	e8 36 f5 ff ff       	call   c001f9f5 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00204bf:	e9 e2 00 00 00       	jmp    c00205a6 <Vm::x87Handler(regs*)+0xa14>
c00204c4:	80 fa 05             	cmp    dl,0x5
c00204c7:	75 28                	jne    c00204f1 <Vm::x87Handler(regs*)+0x95f>
c00204c9:	83 ec 0c             	sub    esp,0xc
c00204cc:	6a 00                	push   0x0
c00204ce:	e8 82 f5 ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c00204d3:	89 c7                	mov    edi,eax
c00204d5:	89 d5                	mov    ebp,edx
c00204d7:	58                   	pop    eax
c00204d8:	5a                   	pop    edx
c00204d9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204dc:	ff 36                	push   DWORD PTR [esi]
c00204de:	e8 06 f3 ff ff       	call   c001f7e9 <Vm::fpu64ToInternal(unsigned long long)>
c00204e3:	83 c4 10             	add    esp,0x10
c00204e6:	55                   	push   ebp
c00204e7:	57                   	push   edi
c00204e8:	52                   	push   edx
c00204e9:	50                   	push   eax
c00204ea:	e8 06 f5 ff ff       	call   c001f9f5 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00204ef:	eb 60                	jmp    c0020551 <Vm::x87Handler(regs*)+0x9bf>
c00204f1:	80 fa 06             	cmp    dl,0x6
c00204f4:	75 2a                	jne    c0020520 <Vm::x87Handler(regs*)+0x98e>
c00204f6:	51                   	push   ecx
c00204f7:	51                   	push   ecx
c00204f8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204fb:	ff 36                	push   DWORD PTR [esi]
c00204fd:	e8 e7 f2 ff ff       	call   c001f7e9 <Vm::fpu64ToInternal(unsigned long long)>
c0020502:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020509:	89 c6                	mov    esi,eax
c002050b:	89 d7                	mov    edi,edx
c002050d:	e8 43 f5 ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c0020512:	57                   	push   edi
c0020513:	56                   	push   esi
c0020514:	52                   	push   edx
c0020515:	50                   	push   eax
c0020516:	e8 08 f5 ff ff       	call   c001fa23 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002051b:	e9 86 00 00 00       	jmp    c00205a6 <Vm::x87Handler(regs*)+0xa14>
c0020520:	31 c0                	xor    eax,eax
c0020522:	80 fa 07             	cmp    dl,0x7
c0020525:	0f 85 c8 00 00 00    	jne    c00205f3 <Vm::x87Handler(regs*)+0xa61>
c002052b:	83 ec 0c             	sub    esp,0xc
c002052e:	6a 00                	push   0x0
c0020530:	e8 20 f5 ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c0020535:	89 c7                	mov    edi,eax
c0020537:	89 d5                	mov    ebp,edx
c0020539:	58                   	pop    eax
c002053a:	5a                   	pop    edx
c002053b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002053e:	ff 36                	push   DWORD PTR [esi]
c0020540:	e8 a4 f2 ff ff       	call   c001f7e9 <Vm::fpu64ToInternal(unsigned long long)>
c0020545:	83 c4 10             	add    esp,0x10
c0020548:	55                   	push   ebp
c0020549:	57                   	push   edi
c002054a:	52                   	push   edx
c002054b:	50                   	push   eax
c002054c:	e8 d2 f4 ff ff       	call   c001fa23 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020551:	83 c4 0c             	add    esp,0xc
c0020554:	eb 53                	jmp    c00205a9 <Vm::x87Handler(regs*)+0xa17>
c0020556:	31 c0                	xor    eax,eax
c0020558:	80 fa 02             	cmp    dl,0x2
c002055b:	0f 85 92 00 00 00    	jne    c00205f3 <Vm::x87Handler(regs*)+0xa61>
c0020561:	83 ec 0c             	sub    esp,0xc
c0020564:	6a 00                	push   0x0
c0020566:	e8 ea f4 ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c002056b:	59                   	pop    ecx
c002056c:	5f                   	pop    edi
c002056d:	52                   	push   edx
c002056e:	50                   	push   eax
c002056f:	e8 27 f2 ff ff       	call   c001f79b <Vm::fpuInternalTo64(unsigned long long)>
c0020574:	eb 70                	jmp    c00205e6 <Vm::x87Handler(regs*)+0xa54>
c0020576:	31 c0                	xor    eax,eax
c0020578:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c002057d:	75 74                	jne    c00205f3 <Vm::x87Handler(regs*)+0xa61>
c002057f:	50                   	push   eax
c0020580:	50                   	push   eax
c0020581:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020584:	31 d2                	xor    edx,edx
c0020586:	52                   	push   edx
c0020587:	50                   	push   eax
c0020588:	e8 f6 f2 ff ff       	call   c001f883 <Vm::fpuLongToFloat(long long)>
c002058d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020594:	89 c6                	mov    esi,eax
c0020596:	89 d7                	mov    edi,edx
c0020598:	e8 b8 f4 ff ff       	call   c001fa55 <Vm::fpuGetReg(int)>
c002059d:	57                   	push   edi
c002059e:	56                   	push   esi
c002059f:	52                   	push   edx
c00205a0:	50                   	push   eax
c00205a1:	e8 5e f4 ff ff       	call   c001fa04 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00205a6:	83 c4 1c             	add    esp,0x1c
c00205a9:	52                   	push   edx
c00205aa:	50                   	push   eax
c00205ab:	6a 00                	push   0x0
c00205ad:	e8 e6 f4 ff ff       	call   c001fa98 <Vm::fpuSetReg(int, unsigned long long)>
c00205b2:	e9 f2 f7 ff ff       	jmp    c001fda9 <Vm::x87Handler(regs*)+0x217>
c00205b7:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00205bb:	80 fa 05             	cmp    dl,0x5
c00205be:	75 11                	jne    c00205d1 <Vm::x87Handler(regs*)+0xa3f>
c00205c0:	55                   	push   ebp
c00205c1:	55                   	push   ebp
c00205c2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00205c5:	ff 36                	push   DWORD PTR [esi]
c00205c7:	e8 81 f2 ff ff       	call   c001f84d <Vm::fpuULongToFloat(unsigned long long)>
c00205cc:	e9 cf f7 ff ff       	jmp    c001fda0 <Vm::x87Handler(regs*)+0x20e>
c00205d1:	31 c0                	xor    eax,eax
c00205d3:	80 fa 07             	cmp    dl,0x7
c00205d6:	75 1b                	jne    c00205f3 <Vm::x87Handler(regs*)+0xa61>
c00205d8:	e8 63 f5 ff ff       	call   c001fb40 <Vm::fpuPop()>
c00205dd:	51                   	push   ecx
c00205de:	51                   	push   ecx
c00205df:	52                   	push   edx
c00205e0:	50                   	push   eax
c00205e1:	e8 0c f2 ff ff       	call   c001f7f2 <Vm::fpuFloatToLong(unsigned long long)>
c00205e6:	83 c4 10             	add    esp,0x10
c00205e9:	89 06                	mov    DWORD PTR [esi],eax
c00205eb:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00205ee:	e9 f8 f7 ff ff       	jmp    c001fdeb <Vm::x87Handler(regs*)+0x259>
c00205f3:	83 c4 1c             	add    esp,0x1c
c00205f6:	5b                   	pop    ebx
c00205f7:	5e                   	pop    esi
c00205f8:	5f                   	pop    edi
c00205f9:	5d                   	pop    ebp
c00205fa:	c3                   	ret    

c00205fb <__static_initialization_and_destruction_0(int, int)>:
c00205fb:	83 ec 0c             	sub    esp,0xc
c00205fe:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020603:	75 1a                	jne    c002061f <__static_initialization_and_destruction_0(int, int)+0x24>
c0020605:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c002060d:	75 10                	jne    c002061f <__static_initialization_and_destruction_0(int, int)+0x24>
c002060f:	83 ec 0c             	sub    esp,0xc
c0020612:	68 00 1d 03 c0       	push   0xc0031d00
c0020617:	e8 f0 88 00 00       	call   c0028f0c <Vm::_FPUState::_FPUState()>
c002061c:	83 c4 10             	add    esp,0x10
c002061f:	90                   	nop
c0020620:	83 c4 0c             	add    esp,0xc
c0020623:	c3                   	ret    

c0020624 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020624:	83 ec 0c             	sub    esp,0xc
c0020627:	83 ec 08             	sub    esp,0x8
c002062a:	68 ff ff 00 00       	push   0xffff
c002062f:	6a 01                	push   0x1
c0020631:	e8 c5 ff ff ff       	call   c00205fb <__static_initialization_and_destruction_0(int, int)>
c0020636:	83 c4 10             	add    esp,0x10
c0020639:	83 c4 0c             	add    esp,0xc
c002063c:	c3                   	ret    
c002063d:	90                   	nop

c002063e <FAT::getName()>:
c002063e:	b8 0c cb 02 c0       	mov    eax,0xc002cb0c
c0020643:	c3                   	ret    

c0020644 <FAT::tell(void*, unsigned long long*)>:
c0020644:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020649:	75 06                	jne    c0020651 <FAT::tell(void*, unsigned long long*)+0xd>
c002064b:	b8 04 00 00 00       	mov    eax,0x4
c0020650:	c3                   	ret    
c0020651:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020656:	75 06                	jne    c002065e <FAT::tell(void*, unsigned long long*)+0x1a>
c0020658:	b8 04 00 00 00       	mov    eax,0x4
c002065d:	c3                   	ret    
c002065e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020662:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020665:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020668:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002066c:	89 01                	mov    DWORD PTR [ecx],eax
c002066e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020671:	b8 00 00 00 00       	mov    eax,0x0
c0020676:	c3                   	ret    
c0020677:	90                   	nop

c0020678 <FAT::stat(void*, unsigned long long*)>:
c0020678:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002067d:	75 06                	jne    c0020685 <FAT::stat(void*, unsigned long long*)+0xd>
c002067f:	b8 04 00 00 00       	mov    eax,0x4
c0020684:	c3                   	ret    
c0020685:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002068a:	75 06                	jne    c0020692 <FAT::stat(void*, unsigned long long*)+0x1a>
c002068c:	b8 04 00 00 00       	mov    eax,0x4
c0020691:	c3                   	ret    
c0020692:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020696:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020699:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002069c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00206a0:	89 01                	mov    DWORD PTR [ecx],eax
c00206a2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00206a5:	b8 00 00 00 00       	mov    eax,0x0
c00206aa:	c3                   	ret    
c00206ab:	90                   	nop

c00206ac <FAT::~FAT()>:
c00206ac:	83 ec 0c             	sub    esp,0xc
c00206af:	ba 9c cb 02 c0       	mov    edx,0xc002cb9c
c00206b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206b8:	89 10                	mov    DWORD PTR [eax],edx
c00206ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206be:	83 ec 0c             	sub    esp,0xc
c00206c1:	50                   	push   eax
c00206c2:	e8 2b 2a ff ff       	call   c00130f2 <Filesystem::~Filesystem()>
c00206c7:	83 c4 10             	add    esp,0x10
c00206ca:	90                   	nop
c00206cb:	83 c4 0c             	add    esp,0xc
c00206ce:	c3                   	ret    
c00206cf:	90                   	nop

c00206d0 <FAT::~FAT()>:
c00206d0:	83 ec 0c             	sub    esp,0xc
c00206d3:	83 ec 0c             	sub    esp,0xc
c00206d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206da:	e8 cd ff ff ff       	call   c00206ac <FAT::~FAT()>
c00206df:	83 c4 10             	add    esp,0x10
c00206e2:	83 ec 08             	sub    esp,0x8
c00206e5:	6a 08                	push   0x8
c00206e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206eb:	e8 f3 25 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00206f0:	83 c4 10             	add    esp,0x10
c00206f3:	83 c4 0c             	add    esp,0xc
c00206f6:	c3                   	ret    
c00206f7:	90                   	nop

c00206f8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00206f8:	83 ec 1c             	sub    esp,0x1c
c00206fb:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020702:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020707:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002070b:	8b 04 85 80 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce280]
c0020712:	83 f8 ff             	cmp    eax,0xffffffff
c0020715:	75 34                	jne    c002074b <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020717:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002071b:	88 c2                	mov    dl,al
c002071d:	a1 60 1d 03 c0       	mov    eax,ds:0xc0031d60
c0020722:	01 d0                	add    eax,edx
c0020724:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020728:	8b 15 60 1d 03 c0    	mov    edx,DWORD PTR ds:0xc0031d60
c002072e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020732:	89 14 85 80 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce280],edx
c0020739:	a1 60 1d 03 c0       	mov    eax,ds:0xc0031d60
c002073e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020742:	89 14 85 00 1e 03 c0 	mov    DWORD PTR [eax*4-0x3ffce200],edx
c0020749:	eb 17                	jmp    c0020762 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c002074b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002074f:	88 c2                	mov    dl,al
c0020751:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020755:	8b 04 85 80 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce280]
c002075c:	01 d0                	add    eax,edx
c002075e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020762:	83 ec 04             	sub    esp,0x4
c0020765:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020769:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002076d:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020771:	50                   	push   eax
c0020772:	e8 c9 65 fe ff       	call   c0006d40 <f_getlabel>
c0020777:	83 c4 10             	add    esp,0x10
c002077a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002077e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020783:	75 07                	jne    c002078c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020785:	b8 00 00 00 00       	mov    eax,0x0
c002078a:	eb 05                	jmp    c0020791 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c002078c:	b8 01 00 00 00       	mov    eax,0x1
c0020791:	83 c4 1c             	add    esp,0x1c
c0020794:	c3                   	ret    
c0020795:	90                   	nop

c0020796 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020796:	57                   	push   edi
c0020797:	83 ec 58             	sub    esp,0x58
c002079a:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00207a2:	8d 54 24 10          	lea    edx,[esp+0x10]
c00207a6:	b9 0f 00 00 00       	mov    ecx,0xf
c00207ab:	b8 00 00 00 00       	mov    eax,0x0
c00207b0:	fc                   	cld    
c00207b1:	89 d7                	mov    edi,edx
c00207b3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00207b5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00207b9:	8b 04 85 80 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce280]
c00207c0:	83 f8 ff             	cmp    eax,0xffffffff
c00207c3:	75 34                	jne    c00207f9 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00207c5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00207c9:	88 c2                	mov    dl,al
c00207cb:	a1 60 1d 03 c0       	mov    eax,ds:0xc0031d60
c00207d0:	01 d0                	add    eax,edx
c00207d2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207d6:	8b 15 60 1d 03 c0    	mov    edx,DWORD PTR ds:0xc0031d60
c00207dc:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00207e0:	89 14 85 80 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce280],edx
c00207e7:	a1 60 1d 03 c0       	mov    eax,ds:0xc0031d60
c00207ec:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00207f0:	89 14 85 00 1e 03 c0 	mov    DWORD PTR [eax*4-0x3ffce200],edx
c00207f7:	eb 17                	jmp    c0020810 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00207f9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00207fd:	88 c2                	mov    dl,al
c00207ff:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020803:	8b 04 85 80 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce280]
c002080a:	01 d0                	add    eax,edx
c002080c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020810:	83 ec 08             	sub    esp,0x8
c0020813:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020817:	8d 44 24 18          	lea    eax,[esp+0x18]
c002081b:	50                   	push   eax
c002081c:	e8 5b 01 fe ff       	call   c000097c <strcat>
c0020821:	83 c4 10             	add    esp,0x10
c0020824:	83 ec 0c             	sub    esp,0xc
c0020827:	8d 44 24 18          	lea    eax,[esp+0x18]
c002082b:	50                   	push   eax
c002082c:	e8 fd 66 fe ff       	call   c0006f2e <f_setlabel>
c0020831:	83 c4 10             	add    esp,0x10
c0020834:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020838:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c002083d:	75 07                	jne    c0020846 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c002083f:	b8 00 00 00 00       	mov    eax,0x0
c0020844:	eb 05                	jmp    c002084b <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020846:	b8 01 00 00 00       	mov    eax,0x1
c002084b:	83 c4 58             	add    esp,0x58
c002084e:	5f                   	pop    edi
c002084f:	c3                   	ret    

c0020850 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020850:	83 ec 2c             	sub    esp,0x2c
c0020853:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002085b:	83 ec 08             	sub    esp,0x8
c002085e:	68 30 cb 02 c0       	push   0xc002cb30
c0020863:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020867:	e8 5c 00 fe ff       	call   c00008c8 <strcmp>
c002086c:	83 c4 10             	add    esp,0x10
c002086f:	85 c0                	test   eax,eax
c0020871:	0f 94 c0             	sete   al
c0020874:	84 c0                	test   al,al
c0020876:	74 0d                	je     c0020885 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020878:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020880:	e9 a6 00 00 00       	jmp    c002092b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020885:	83 ec 08             	sub    esp,0x8
c0020888:	68 22 cb 02 c0       	push   0xc002cb22
c002088d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020891:	e8 32 00 fe ff       	call   c00008c8 <strcmp>
c0020896:	83 c4 10             	add    esp,0x10
c0020899:	85 c0                	test   eax,eax
c002089b:	0f 94 c0             	sete   al
c002089e:	84 c0                	test   al,al
c00208a0:	74 0a                	je     c00208ac <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00208a2:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00208aa:	eb 7f                	jmp    c002092b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00208ac:	83 ec 08             	sub    esp,0x8
c00208af:	68 28 cb 02 c0       	push   0xc002cb28
c00208b4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00208b8:	e8 0b 00 fe ff       	call   c00008c8 <strcmp>
c00208bd:	83 c4 10             	add    esp,0x10
c00208c0:	85 c0                	test   eax,eax
c00208c2:	0f 94 c0             	sete   al
c00208c5:	84 c0                	test   al,al
c00208c7:	74 0a                	je     c00208d3 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00208c9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00208d1:	eb 58                	jmp    c002092b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00208d3:	83 ec 08             	sub    esp,0x8
c00208d6:	68 6c 96 02 c0       	push   0xc002966c
c00208db:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00208df:	e8 e4 ff fd ff       	call   c00008c8 <strcmp>
c00208e4:	83 c4 10             	add    esp,0x10
c00208e7:	85 c0                	test   eax,eax
c00208e9:	0f 94 c0             	sete   al
c00208ec:	84 c0                	test   al,al
c00208ee:	74 0a                	je     c00208fa <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00208f0:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00208f8:	eb 31                	jmp    c002092b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00208fa:	83 ec 08             	sub    esp,0x8
c00208fd:	68 2e cb 02 c0       	push   0xc002cb2e
c0020902:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020906:	e8 bd ff fd ff       	call   c00008c8 <strcmp>
c002090b:	83 c4 10             	add    esp,0x10
c002090e:	85 c0                	test   eax,eax
c0020910:	0f 94 c0             	sete   al
c0020913:	84 c0                	test   al,al
c0020915:	74 0a                	je     c0020921 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020917:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c002091f:	eb 0a                	jmp    c002092b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020921:	b8 08 00 00 00       	mov    eax,0x8
c0020926:	e9 04 01 00 00       	jmp    c0020a2f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002092b:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020932:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020937:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002093b:	8b 04 85 80 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce280]
c0020942:	83 f8 ff             	cmp    eax,0xffffffff
c0020945:	75 34                	jne    c002097b <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020947:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002094b:	88 c2                	mov    dl,al
c002094d:	a1 60 1d 03 c0       	mov    eax,ds:0xc0031d60
c0020952:	01 d0                	add    eax,edx
c0020954:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020958:	8b 15 60 1d 03 c0    	mov    edx,DWORD PTR ds:0xc0031d60
c002095e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020962:	89 14 85 80 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce280],edx
c0020969:	a1 60 1d 03 c0       	mov    eax,ds:0xc0031d60
c002096e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020972:	89 14 85 00 1e 03 c0 	mov    DWORD PTR [eax*4-0x3ffce200],edx
c0020979:	eb 17                	jmp    c0020992 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c002097b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002097f:	88 c2                	mov    dl,al
c0020981:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020985:	8b 04 85 80 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce280]
c002098c:	01 d0                	add    eax,edx
c002098e:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020992:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020996:	88 04 24             	mov    BYTE PTR [esp],al
c0020999:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002099d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00209a1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00209a9:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00209ae:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00209b6:	83 ec 0c             	sub    esp,0xc
c00209b9:	68 00 20 00 00       	push   0x2000
c00209be:	e8 88 ee fe ff       	call   c000f84b <malloc>
c00209c3:	83 c4 10             	add    esp,0x10
c00209c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00209ca:	68 00 20 00 00       	push   0x2000
c00209cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00209d3:	8d 44 24 08          	lea    eax,[esp+0x8]
c00209d7:	50                   	push   eax
c00209d8:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00209dc:	50                   	push   eax
c00209dd:	e8 97 69 fe ff       	call   c0007379 <f_mkfs>
c00209e2:	83 c4 10             	add    esp,0x10
c00209e5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00209e9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00209ee:	75 07                	jne    c00209f7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00209f0:	b8 00 00 00 00       	mov    eax,0x0
c00209f5:	eb 38                	jmp    c0020a2f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00209f7:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00209fc:	75 17                	jne    c0020a15 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00209fe:	83 ec 0c             	sub    esp,0xc
c0020a01:	68 6c cb 02 c0       	push   0xc002cb6c
c0020a06:	e8 b8 23 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0020a0b:	83 c4 10             	add    esp,0x10
c0020a0e:	b8 09 00 00 00       	mov    eax,0x9
c0020a13:	eb 1a                	jmp    c0020a2f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020a15:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020a19:	83 ec 08             	sub    esp,0x8
c0020a1c:	50                   	push   eax
c0020a1d:	68 34 cb 02 c0       	push   0xc002cb34
c0020a22:	e8 9c 23 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0020a27:	83 c4 10             	add    esp,0x10
c0020a2a:	b8 01 00 00 00       	mov    eax,0x1
c0020a2f:	83 c4 2c             	add    esp,0x2c
c0020a32:	c3                   	ret    
c0020a33:	90                   	nop

c0020a34 <FAT::tryMount(LogicalDisk*, int)>:
c0020a34:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020a3a:	a1 60 1d 03 c0       	mov    eax,ds:0xc0031d60
c0020a3f:	83 f8 14             	cmp    eax,0x14
c0020a42:	75 17                	jne    c0020a5b <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020a44:	83 ec 0c             	sub    esp,0xc
c0020a47:	68 46 cb 02 c0       	push   0xc002cb46
c0020a4c:	e8 3e 9b ff ff       	call   c001a58f <Krnl::panic(char const*)>
c0020a51:	83 c4 10             	add    esp,0x10
c0020a54:	b0 00                	mov    al,0x0
c0020a56:	e9 d7 01 00 00       	jmp    c0020c32 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a5b:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020a62:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020a68:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020a6e:	3d 00 02 00 00       	cmp    eax,0x200
c0020a73:	74 07                	je     c0020a7c <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020a75:	b0 00                	mov    al,0x0
c0020a77:	e9 b6 01 00 00       	jmp    c0020c32 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a7c:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020a84:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a8b:	8b 04 85 80 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce280]
c0020a92:	83 f8 ff             	cmp    eax,0xffffffff
c0020a95:	74 07                	je     c0020a9e <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020a97:	b0 01                	mov    al,0x1
c0020a99:	e9 94 01 00 00       	jmp    c0020c32 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a9e:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020aa8:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020ab0:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020ab7:	88 c2                	mov    dl,al
c0020ab9:	a1 60 1d 03 c0       	mov    eax,ds:0xc0031d60
c0020abe:	01 d0                	add    eax,edx
c0020ac0:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020ac7:	8b 15 60 1d 03 c0    	mov    edx,DWORD PTR ds:0xc0031d60
c0020acd:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020ad4:	89 14 85 80 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce280],edx
c0020adb:	a1 60 1d 03 c0       	mov    eax,ds:0xc0031d60
c0020ae0:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020ae7:	89 14 85 00 1e 03 c0 	mov    DWORD PTR [eax*4-0x3ffce200],edx
c0020aee:	83 ec 0c             	sub    esp,0xc
c0020af1:	68 54 02 00 00       	push   0x254
c0020af6:	e8 50 ed fe ff       	call   c000f84b <malloc>
c0020afb:	83 c4 10             	add    esp,0x10
c0020afe:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020b05:	83 ec 04             	sub    esp,0x4
c0020b08:	6a 00                	push   0x0
c0020b0a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b11:	50                   	push   eax
c0020b12:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b19:	e8 19 44 fe ff       	call   c0004f37 <f_mount>
c0020b1e:	83 c4 10             	add    esp,0x10
c0020b21:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020b28:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020b30:	74 19                	je     c0020b4b <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020b32:	83 ec 0c             	sub    esp,0xc
c0020b35:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b3c:	e8 2a ed fe ff       	call   c000f86b <rfree>
c0020b41:	83 c4 10             	add    esp,0x10
c0020b44:	b0 00                	mov    al,0x0
c0020b46:	e9 e7 00 00 00       	jmp    c0020c32 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b4b:	83 ec 04             	sub    esp,0x4
c0020b4e:	68 00 01 00 00       	push   0x100
c0020b53:	6a 00                	push   0x0
c0020b55:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b5c:	50                   	push   eax
c0020b5d:	e8 1e fc fd ff       	call   c0000780 <memset>
c0020b62:	83 c4 10             	add    esp,0x10
c0020b65:	83 ec 08             	sub    esp,0x8
c0020b68:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b6f:	50                   	push   eax
c0020b70:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b77:	50                   	push   eax
c0020b78:	e8 ff fd fd ff       	call   c000097c <strcat>
c0020b7d:	83 c4 10             	add    esp,0x10
c0020b80:	83 ec 08             	sub    esp,0x8
c0020b83:	68 54 cb 02 c0       	push   0xc002cb54
c0020b88:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b8f:	50                   	push   eax
c0020b90:	e8 e7 fd fd ff       	call   c000097c <strcat>
c0020b95:	83 c4 10             	add    esp,0x10
c0020b98:	83 ec 04             	sub    esp,0x4
c0020b9b:	6a 01                	push   0x1
c0020b9d:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020ba4:	50                   	push   eax
c0020ba5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020ba9:	50                   	push   eax
c0020baa:	e8 ea 43 fe ff       	call   c0004f99 <f_open>
c0020baf:	83 c4 10             	add    esp,0x10
c0020bb2:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020bb9:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020bc0:	85 c0                	test   eax,eax
c0020bc2:	74 0a                	je     c0020bce <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020bc4:	78 2d                	js     c0020bf3 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020bc6:	83 e8 04             	sub    eax,0x4
c0020bc9:	83 f8 01             	cmp    eax,0x1
c0020bcc:	77 25                	ja     c0020bf3 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020bce:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020bd6:	83 ec 0c             	sub    esp,0xc
c0020bd9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020bdd:	50                   	push   eax
c0020bde:	e8 08 4f fe ff       	call   c0005aeb <f_close>
c0020be3:	83 c4 10             	add    esp,0x10
c0020be6:	90                   	nop
c0020be7:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020bef:	74 3a                	je     c0020c2b <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020bf1:	eb 2d                	jmp    c0020c20 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020bf3:	83 ec 0c             	sub    esp,0xc
c0020bf6:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020bfd:	e8 69 ec fe ff       	call   c000f86b <rfree>
c0020c02:	83 c4 10             	add    esp,0x10
c0020c05:	83 ec 04             	sub    esp,0x4
c0020c08:	6a 00                	push   0x0
c0020c0a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020c11:	50                   	push   eax
c0020c12:	6a 00                	push   0x0
c0020c14:	e8 1e 43 fe ff       	call   c0004f37 <f_mount>
c0020c19:	83 c4 10             	add    esp,0x10
c0020c1c:	b0 00                	mov    al,0x0
c0020c1e:	eb 12                	jmp    c0020c32 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020c20:	a1 60 1d 03 c0       	mov    eax,ds:0xc0031d60
c0020c25:	40                   	inc    eax
c0020c26:	a3 60 1d 03 c0       	mov    ds:0xc0031d60,eax
c0020c2b:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020c32:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020c38:	c3                   	ret    
c0020c39:	90                   	nop

c0020c3a <FAT::getFileFirstSector(char const*)>:
c0020c3a:	53                   	push   ebx
c0020c3b:	83 ec 28             	sub    esp,0x28
c0020c3e:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0020c46:	83 ec 0c             	sub    esp,0xc
c0020c49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c4d:	e8 f9 eb fe ff       	call   c000f84b <malloc>
c0020c52:	83 c4 10             	add    esp,0x10
c0020c55:	89 c3                	mov    ebx,eax
c0020c57:	a1 94 1c 03 c0       	mov    eax,ds:0xc0031c94
c0020c5c:	83 ec 04             	sub    esp,0x4
c0020c5f:	50                   	push   eax
c0020c60:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020c64:	53                   	push   ebx
c0020c65:	e8 b8 26 ff ff       	call   c0013322 <File::File(char const*, Process*)>
c0020c6a:	83 c4 10             	add    esp,0x10
c0020c6d:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020c71:	83 ec 08             	sub    esp,0x8
c0020c74:	6a 01                	push   0x1
c0020c76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020c7a:	e8 07 27 ff ff       	call   c0013386 <File::open(FileOpenMode)>
c0020c7f:	83 c4 10             	add    esp,0x10
c0020c82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020c86:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c88:	83 c0 0c             	add    eax,0xc
c0020c8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c8d:	83 ec 0c             	sub    esp,0xc
c0020c90:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020c94:	52                   	push   edx
c0020c95:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020c99:	52                   	push   edx
c0020c9a:	6a 00                	push   0x0
c0020c9c:	6a 04                	push   0x4
c0020c9e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020ca2:	ff d0                	call   eax
c0020ca4:	83 c4 20             	add    esp,0x20
c0020ca7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020cab:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020cb1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020cb5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020cb9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020cbc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020cbf:	83 ec 04             	sub    esp,0x4
c0020cc2:	52                   	push   edx
c0020cc3:	50                   	push   eax
c0020cc4:	68 5f cb 02 c0       	push   0xc002cb5f
c0020cc9:	e8 f5 20 ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0020cce:	83 c4 10             	add    esp,0x10
c0020cd1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020cd5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020cd8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020cdb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020cdf:	83 ec 0c             	sub    esp,0xc
c0020ce2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020ce6:	e8 f9 26 ff ff       	call   c00133e4 <File::close()>
c0020ceb:	83 c4 10             	add    esp,0x10
c0020cee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020cf2:	ba 00 00 00 00       	mov    edx,0x0
c0020cf7:	83 c4 28             	add    esp,0x28
c0020cfa:	5b                   	pop    ebx
c0020cfb:	c3                   	ret    

c0020cfc <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020cfc:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020d02:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020d0a:	74 0a                	je     c0020d16 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020d0c:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020d14:	75 0a                	jne    c0020d20 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020d16:	b8 04 00 00 00       	mov    eax,0x4
c0020d1b:	e9 db 00 00 00       	jmp    c0020dfb <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020d20:	83 ec 08             	sub    esp,0x8
c0020d23:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020d2a:	50                   	push   eax
c0020d2b:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020d32:	e8 be 53 fe ff       	call   c00060f5 <f_readdir>
c0020d37:	83 c4 10             	add    esp,0x10
c0020d3a:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020d41:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020d47:	83 ec 0c             	sub    esp,0xc
c0020d4a:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020d51:	83 c0 1a             	add    eax,0x1a
c0020d54:	50                   	push   eax
c0020d55:	e8 42 fa fd ff       	call   c000079c <strlen>
c0020d5a:	83 c4 10             	add    esp,0x10
c0020d5d:	ba 00 00 00 00       	mov    edx,0x0
c0020d62:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020d66:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020d6a:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020d71:	0f b6 c0             	movzx  eax,al
c0020d74:	83 e0 10             	and    eax,0x10
c0020d77:	74 07                	je     c0020d80 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020d79:	b8 02 00 00 00       	mov    eax,0x2
c0020d7e:	eb 05                	jmp    c0020d85 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020d80:	b8 01 00 00 00       	mov    eax,0x1
c0020d85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d89:	83 ec 08             	sub    esp,0x8
c0020d8c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020d93:	83 c0 1a             	add    eax,0x1a
c0020d96:	50                   	push   eax
c0020d97:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020d9b:	83 c0 10             	add    eax,0x10
c0020d9e:	50                   	push   eax
c0020d9f:	e8 98 fa fd ff       	call   c000083c <strcpy>
c0020da4:	83 c4 10             	add    esp,0x10
c0020da7:	83 ec 04             	sub    esp,0x4
c0020daa:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020db1:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020db5:	50                   	push   eax
c0020db6:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020dbd:	e8 8a f9 fd ff       	call   c000074c <memcpy>
c0020dc2:	83 c4 10             	add    esp,0x10
c0020dc5:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020dcc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020dd2:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020dd9:	84 c0                	test   al,al
c0020ddb:	75 07                	jne    c0020de4 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020ddd:	b8 07 00 00 00       	mov    eax,0x7
c0020de2:	eb 17                	jmp    c0020dfb <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020de4:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020deb:	85 c0                	test   eax,eax
c0020ded:	75 07                	jne    c0020df6 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020def:	b8 00 00 00 00       	mov    eax,0x0
c0020df4:	eb 05                	jmp    c0020dfb <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020df6:	b8 01 00 00 00       	mov    eax,0x1
c0020dfb:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020e01:	c3                   	ret    

c0020e02 <FAT::read(void*, unsigned long, void*, int*)>:
c0020e02:	83 ec 1c             	sub    esp,0x1c
c0020e05:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020e0a:	74 07                	je     c0020e13 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020e0c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020e11:	75 07                	jne    c0020e1a <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020e13:	b8 04 00 00 00       	mov    eax,0x4
c0020e18:	eb 3d                	jmp    c0020e57 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020e1a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020e1e:	50                   	push   eax
c0020e1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020e23:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020e27:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e2b:	e8 a5 45 fe ff       	call   c00053d5 <f_read>
c0020e30:	83 c4 10             	add    esp,0x10
c0020e33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e37:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e3b:	89 c2                	mov    edx,eax
c0020e3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020e41:	89 10                	mov    DWORD PTR [eax],edx
c0020e43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e47:	85 c0                	test   eax,eax
c0020e49:	75 07                	jne    c0020e52 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020e4b:	b8 00 00 00 00       	mov    eax,0x0
c0020e50:	eb 05                	jmp    c0020e57 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020e52:	b8 01 00 00 00       	mov    eax,0x1
c0020e57:	83 c4 1c             	add    esp,0x1c
c0020e5a:	c3                   	ret    
c0020e5b:	90                   	nop

c0020e5c <FAT::write(void*, unsigned long, void*, int*)>:
c0020e5c:	83 ec 1c             	sub    esp,0x1c
c0020e5f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020e64:	74 07                	je     c0020e6d <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020e66:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020e6b:	75 07                	jne    c0020e74 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020e6d:	b8 04 00 00 00       	mov    eax,0x4
c0020e72:	eb 3d                	jmp    c0020eb1 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020e74:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020e78:	50                   	push   eax
c0020e79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020e7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020e81:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e85:	e8 cb 47 fe ff       	call   c0005655 <f_write>
c0020e8a:	83 c4 10             	add    esp,0x10
c0020e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e95:	89 c2                	mov    edx,eax
c0020e97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020e9b:	89 10                	mov    DWORD PTR [eax],edx
c0020e9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ea1:	85 c0                	test   eax,eax
c0020ea3:	75 07                	jne    c0020eac <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020ea5:	b8 00 00 00 00       	mov    eax,0x0
c0020eaa:	eb 05                	jmp    c0020eb1 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020eac:	b8 01 00 00 00       	mov    eax,0x1
c0020eb1:	83 c4 1c             	add    esp,0x1c
c0020eb4:	c3                   	ret    
c0020eb5:	90                   	nop

c0020eb6 <FAT::close(void*)>:
c0020eb6:	83 ec 1c             	sub    esp,0x1c
c0020eb9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020ebe:	75 07                	jne    c0020ec7 <FAT::close(void*)+0x11>
c0020ec0:	b8 04 00 00 00       	mov    eax,0x4
c0020ec5:	eb 36                	jmp    c0020efd <FAT::close(void*)+0x47>
c0020ec7:	83 ec 0c             	sub    esp,0xc
c0020eca:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ece:	e8 18 4c fe ff       	call   c0005aeb <f_close>
c0020ed3:	83 c4 10             	add    esp,0x10
c0020ed6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020eda:	83 ec 0c             	sub    esp,0xc
c0020edd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ee1:	e8 75 e9 fe ff       	call   c000f85b <free>
c0020ee6:	83 c4 10             	add    esp,0x10
c0020ee9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020eed:	85 c0                	test   eax,eax
c0020eef:	75 07                	jne    c0020ef8 <FAT::close(void*)+0x42>
c0020ef1:	b8 00 00 00 00       	mov    eax,0x0
c0020ef6:	eb 05                	jmp    c0020efd <FAT::close(void*)+0x47>
c0020ef8:	b8 01 00 00 00       	mov    eax,0x1
c0020efd:	83 c4 1c             	add    esp,0x1c
c0020f00:	c3                   	ret    
c0020f01:	90                   	nop

c0020f02 <FAT::closeDir(void*)>:
c0020f02:	83 ec 1c             	sub    esp,0x1c
c0020f05:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020f0a:	75 07                	jne    c0020f13 <FAT::closeDir(void*)+0x11>
c0020f0c:	b8 04 00 00 00       	mov    eax,0x4
c0020f11:	eb 36                	jmp    c0020f49 <FAT::closeDir(void*)+0x47>
c0020f13:	83 ec 0c             	sub    esp,0xc
c0020f16:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f1a:	e8 b4 51 fe ff       	call   c00060d3 <f_closedir>
c0020f1f:	83 c4 10             	add    esp,0x10
c0020f22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020f26:	83 ec 0c             	sub    esp,0xc
c0020f29:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f2d:	e8 29 e9 fe ff       	call   c000f85b <free>
c0020f32:	83 c4 10             	add    esp,0x10
c0020f35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f39:	85 c0                	test   eax,eax
c0020f3b:	75 07                	jne    c0020f44 <FAT::closeDir(void*)+0x42>
c0020f3d:	b8 00 00 00 00       	mov    eax,0x0
c0020f42:	eb 05                	jmp    c0020f49 <FAT::closeDir(void*)+0x47>
c0020f44:	b8 01 00 00 00       	mov    eax,0x1
c0020f49:	83 c4 1c             	add    esp,0x1c
c0020f4c:	c3                   	ret    
c0020f4d:	90                   	nop

c0020f4e <FAT::seek(void*, unsigned long long)>:
c0020f4e:	83 ec 2c             	sub    esp,0x2c
c0020f51:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f55:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020f59:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020f5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020f61:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020f66:	75 07                	jne    c0020f6f <FAT::seek(void*, unsigned long long)+0x21>
c0020f68:	b8 04 00 00 00       	mov    eax,0x4
c0020f6d:	eb 2f                	jmp    c0020f9e <FAT::seek(void*, unsigned long long)+0x50>
c0020f6f:	83 ec 04             	sub    esp,0x4
c0020f72:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020f76:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020f7a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020f7e:	e8 97 4b fe ff       	call   c0005b1a <f_lseek>
c0020f83:	83 c4 10             	add    esp,0x10
c0020f86:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020f8a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020f8e:	85 c0                	test   eax,eax
c0020f90:	75 07                	jne    c0020f99 <FAT::seek(void*, unsigned long long)+0x4b>
c0020f92:	b8 00 00 00 00       	mov    eax,0x0
c0020f97:	eb 05                	jmp    c0020f9e <FAT::seek(void*, unsigned long long)+0x50>
c0020f99:	b8 01 00 00 00       	mov    eax,0x1
c0020f9e:	83 c4 2c             	add    esp,0x2c
c0020fa1:	c3                   	ret    

c0020fa2 <fatWrapperReadDisk>:
c0020fa2:	83 ec 1c             	sub    esp,0x1c
c0020fa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020fa9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020fad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020fb1:	89 04 24             	mov    DWORD PTR [esp],eax
c0020fb4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020fb8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020fbc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020fc1:	8b 04 85 40 ed 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd12c0]
c0020fc8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020fcc:	83 ec 0c             	sub    esp,0xc
c0020fcf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020fd3:	52                   	push   edx
c0020fd4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020fd8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020fdc:	50                   	push   eax
c0020fdd:	e8 b4 56 ff ff       	call   c0016696 <LogicalDisk::read(unsigned long long, int, void*)>
c0020fe2:	83 c4 20             	add    esp,0x20
c0020fe5:	83 c4 1c             	add    esp,0x1c
c0020fe8:	c3                   	ret    

c0020fe9 <fatWrapperWriteDisk>:
c0020fe9:	83 ec 1c             	sub    esp,0x1c
c0020fec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ff0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020ff4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020ff8:	89 04 24             	mov    DWORD PTR [esp],eax
c0020ffb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020fff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021003:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021008:	8b 04 85 40 ed 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd12c0]
c002100f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021013:	83 ec 0c             	sub    esp,0xc
c0021016:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002101a:	52                   	push   edx
c002101b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002101f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021023:	50                   	push   eax
c0021024:	e8 d9 56 ff ff       	call   c0016702 <LogicalDisk::write(unsigned long long, int, void*)>
c0021029:	83 c4 20             	add    esp,0x20
c002102c:	83 c4 1c             	add    esp,0x1c
c002102f:	c3                   	ret    

c0021030 <fatWrapperIoctl>:
c0021030:	53                   	push   ebx
c0021031:	83 ec 28             	sub    esp,0x28
c0021034:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021038:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002103c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021040:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021044:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0021049:	75 31                	jne    c002107c <fatWrapperIoctl+0x4c>
c002104b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002104f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021053:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021058:	8b 04 85 40 ed 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd12c0]
c002105f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021065:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002106b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002106f:	66 89 02             	mov    WORD PTR [edx],ax
c0021072:	b8 00 00 00 00       	mov    eax,0x0
c0021077:	e9 b2 00 00 00       	jmp    c002112e <fatWrapperIoctl+0xfe>
c002107c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0021081:	75 6a                	jne    c00210ed <fatWrapperIoctl+0xbd>
c0021083:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021087:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002108b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021090:	8b 04 85 40 ed 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd12c0]
c0021097:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002109d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00210a3:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00210a9:	89 c8                	mov    eax,ecx
c00210ab:	89 da                	mov    edx,ebx
c00210ad:	0f a4 c2 0a          	shld   edx,eax,0xa
c00210b1:	c1 e0 0a             	shl    eax,0xa
c00210b4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00210b9:	8b 0c 8d 40 ed 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd12c0]
c00210c0:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00210c6:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00210cc:	89 cb                	mov    ebx,ecx
c00210ce:	c1 fb 1f             	sar    ebx,0x1f
c00210d1:	53                   	push   ebx
c00210d2:	51                   	push   ecx
c00210d3:	52                   	push   edx
c00210d4:	50                   	push   eax
c00210d5:	e8 ca 5a 00 00       	call   c0026ba4 <__udivdi3>
c00210da:	83 c4 10             	add    esp,0x10
c00210dd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00210e1:	89 01                	mov    DWORD PTR [ecx],eax
c00210e3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00210e6:	b8 00 00 00 00       	mov    eax,0x0
c00210eb:	eb 41                	jmp    c002112e <fatWrapperIoctl+0xfe>
c00210ed:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00210f2:	75 07                	jne    c00210fb <fatWrapperIoctl+0xcb>
c00210f4:	b8 00 00 00 00       	mov    eax,0x0
c00210f9:	eb 33                	jmp    c002112e <fatWrapperIoctl+0xfe>
c00210fb:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0021100:	75 19                	jne    c002111b <fatWrapperIoctl+0xeb>
c0021102:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021106:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002110a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002110e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021114:	b8 00 00 00 00       	mov    eax,0x0
c0021119:	eb 13                	jmp    c002112e <fatWrapperIoctl+0xfe>
c002111b:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0021120:	75 07                	jne    c0021129 <fatWrapperIoctl+0xf9>
c0021122:	b8 00 00 00 00       	mov    eax,0x0
c0021127:	eb 05                	jmp    c002112e <fatWrapperIoctl+0xfe>
c0021129:	b8 04 00 00 00       	mov    eax,0x4
c002112e:	83 c4 28             	add    esp,0x28
c0021131:	5b                   	pop    ebx
c0021132:	c3                   	ret    
c0021133:	90                   	nop

c0021134 <FAT::FAT()>:
c0021134:	83 ec 1c             	sub    esp,0x1c
c0021137:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002113b:	83 ec 0c             	sub    esp,0xc
c002113e:	50                   	push   eax
c002113f:	e8 8a 1f ff ff       	call   c00130ce <Filesystem::Filesystem()>
c0021144:	83 c4 10             	add    esp,0x10
c0021147:	ba 9c cb 02 c0       	mov    edx,0xc002cb9c
c002114c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021150:	89 10                	mov    DWORD PTR [eax],edx
c0021152:	c7 05 60 1d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031d60,0x0
c002115c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021164:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0021169:	7f 15                	jg     c0021180 <FAT::FAT()+0x4c>
c002116b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002116f:	c7 04 85 80 1d 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce280],0xffffffff
c002117a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002117e:	eb e4                	jmp    c0021164 <FAT::FAT()+0x30>
c0021180:	90                   	nop
c0021181:	83 c4 1c             	add    esp,0x1c
c0021184:	c3                   	ret    
c0021185:	90                   	nop

c0021186 <FAT::fixFilepath(char*)>:
c0021186:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002118a:	8a 00                	mov    al,BYTE PTR [eax]
c002118c:	3c 40                	cmp    al,0x40
c002118e:	7e 2c                	jle    c00211bc <FAT::fixFilepath(char*)+0x36>
c0021190:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021194:	8a 00                	mov    al,BYTE PTR [eax]
c0021196:	83 e8 41             	sub    eax,0x41
c0021199:	88 c2                	mov    dl,al
c002119b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002119f:	88 10                	mov    BYTE PTR [eax],dl
c00211a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211a5:	8a 00                	mov    al,BYTE PTR [eax]
c00211a7:	0f be c0             	movsx  eax,al
c00211aa:	8b 04 85 80 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce280]
c00211b1:	83 c0 30             	add    eax,0x30
c00211b4:	88 c2                	mov    dl,al
c00211b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211ba:	88 10                	mov    BYTE PTR [eax],dl
c00211bc:	90                   	nop
c00211bd:	c3                   	ret    

c00211be <FAT::open(char const*, void**, FileOpenMode)>:
c00211be:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00211c4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00211cc:	74 0a                	je     c00211d8 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00211ce:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00211d6:	75 0a                	jne    c00211e2 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00211d8:	b8 04 00 00 00       	mov    eax,0x4
c00211dd:	e9 fd 00 00 00       	jmp    c00212df <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00211e2:	83 ec 08             	sub    esp,0x8
c00211e5:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00211ec:	8d 44 24 14          	lea    eax,[esp+0x14]
c00211f0:	50                   	push   eax
c00211f1:	e8 46 f6 fd ff       	call   c000083c <strcpy>
c00211f6:	83 c4 10             	add    esp,0x10
c00211f9:	83 ec 08             	sub    esp,0x8
c00211fc:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021200:	50                   	push   eax
c0021201:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021208:	e8 79 ff ff ff       	call   c0021186 <FAT::fixFilepath(char*)>
c002120d:	83 c4 10             	add    esp,0x10
c0021210:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021218:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002121f:	83 e0 01             	and    eax,0x1
c0021222:	74 08                	je     c002122c <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021224:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c002122c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021233:	83 e0 04             	and    eax,0x4
c0021236:	74 10                	je     c0021248 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021238:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021240:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021248:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002124f:	83 e0 02             	and    eax,0x2
c0021252:	74 08                	je     c002125c <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021254:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002125c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021263:	83 e0 08             	and    eax,0x8
c0021266:	74 08                	je     c0021270 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0021268:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021270:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021277:	83 e0 10             	and    eax,0x10
c002127a:	74 08                	je     c0021284 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c002127c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021284:	83 ec 0c             	sub    esp,0xc
c0021287:	68 50 02 00 00       	push   0x250
c002128c:	e8 ba e5 fe ff       	call   c000f84b <malloc>
c0021291:	83 c4 10             	add    esp,0x10
c0021294:	89 c2                	mov    edx,eax
c0021296:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002129d:	89 10                	mov    DWORD PTR [eax],edx
c002129f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00212a7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00212ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00212b0:	83 ec 04             	sub    esp,0x4
c00212b3:	52                   	push   edx
c00212b4:	8d 54 24 10          	lea    edx,[esp+0x10]
c00212b8:	52                   	push   edx
c00212b9:	50                   	push   eax
c00212ba:	e8 da 3c fe ff       	call   c0004f99 <f_open>
c00212bf:	83 c4 10             	add    esp,0x10
c00212c2:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00212c9:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00212d1:	74 07                	je     c00212da <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00212d3:	b8 01 00 00 00       	mov    eax,0x1
c00212d8:	eb 05                	jmp    c00212df <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00212da:	b8 00 00 00 00       	mov    eax,0x0
c00212df:	81 c4 1c 01 00 00    	add    esp,0x11c
c00212e5:	c3                   	ret    

c00212e6 <FAT::openDir(char const*, void**)>:
c00212e6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00212ec:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00212f4:	74 0a                	je     c0021300 <FAT::openDir(char const*, void**)+0x1a>
c00212f6:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00212fe:	75 07                	jne    c0021307 <FAT::openDir(char const*, void**)+0x21>
c0021300:	b8 04 00 00 00       	mov    eax,0x4
c0021305:	eb 7d                	jmp    c0021384 <FAT::openDir(char const*, void**)+0x9e>
c0021307:	83 ec 08             	sub    esp,0x8
c002130a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021311:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021315:	50                   	push   eax
c0021316:	e8 21 f5 fd ff       	call   c000083c <strcpy>
c002131b:	83 c4 10             	add    esp,0x10
c002131e:	83 ec 08             	sub    esp,0x8
c0021321:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021325:	50                   	push   eax
c0021326:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002132d:	e8 54 fe ff ff       	call   c0021186 <FAT::fixFilepath(char*)>
c0021332:	83 c4 10             	add    esp,0x10
c0021335:	83 ec 0c             	sub    esp,0xc
c0021338:	6a 4c                	push   0x4c
c002133a:	e8 0c e5 fe ff       	call   c000f84b <malloc>
c002133f:	83 c4 10             	add    esp,0x10
c0021342:	89 c2                	mov    edx,eax
c0021344:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002134b:	89 10                	mov    DWORD PTR [eax],edx
c002134d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021354:	8b 00                	mov    eax,DWORD PTR [eax]
c0021356:	83 ec 08             	sub    esp,0x8
c0021359:	8d 54 24 14          	lea    edx,[esp+0x14]
c002135d:	52                   	push   edx
c002135e:	50                   	push   eax
c002135f:	e8 6d 4c fe ff       	call   c0005fd1 <f_opendir>
c0021364:	83 c4 10             	add    esp,0x10
c0021367:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002136e:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021376:	74 07                	je     c002137f <FAT::openDir(char const*, void**)+0x99>
c0021378:	b8 01 00 00 00       	mov    eax,0x1
c002137d:	eb 05                	jmp    c0021384 <FAT::openDir(char const*, void**)+0x9e>
c002137f:	b8 00 00 00 00       	mov    eax,0x0
c0021384:	81 c4 1c 01 00 00    	add    esp,0x11c
c002138a:	c3                   	ret    
c002138b:	90                   	nop

c002138c <FAT::stat(char const*, unsigned long long*, bool*)>:
c002138c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021392:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002139a:	75 0a                	jne    c00213a6 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c002139c:	b8 04 00 00 00       	mov    eax,0x4
c00213a1:	e9 c9 00 00 00       	jmp    c002146f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00213a6:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00213ae:	75 0a                	jne    c00213ba <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00213b0:	b8 04 00 00 00       	mov    eax,0x4
c00213b5:	e9 b5 00 00 00       	jmp    c002146f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00213ba:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00213c2:	75 0a                	jne    c00213ce <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00213c4:	b8 04 00 00 00       	mov    eax,0x4
c00213c9:	e9 a1 00 00 00       	jmp    c002146f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00213ce:	83 ec 08             	sub    esp,0x8
c00213d1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00213d8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00213df:	50                   	push   eax
c00213e0:	e8 57 f4 fd ff       	call   c000083c <strcpy>
c00213e5:	83 c4 10             	add    esp,0x10
c00213e8:	83 ec 08             	sub    esp,0x8
c00213eb:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00213f2:	50                   	push   eax
c00213f3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00213fa:	e8 87 fd ff ff       	call   c0021186 <FAT::fixFilepath(char*)>
c00213ff:	83 c4 10             	add    esp,0x10
c0021402:	83 ec 08             	sub    esp,0x8
c0021405:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021409:	50                   	push   eax
c002140a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021411:	50                   	push   eax
c0021412:	e8 79 4d fe ff       	call   c0006190 <f_stat>
c0021417:	83 c4 10             	add    esp,0x10
c002141a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021421:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021428:	85 c0                	test   eax,eax
c002142a:	74 07                	je     c0021433 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c002142c:	83 f8 04             	cmp    eax,0x4
c002142f:	74 32                	je     c0021463 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021431:	eb 37                	jmp    c002146a <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021433:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021437:	0f b6 c0             	movzx  eax,al
c002143a:	83 e0 10             	and    eax,0x10
c002143d:	0f 95 c2             	setne  dl
c0021440:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021447:	88 10                	mov    BYTE PTR [eax],dl
c0021449:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002144c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021450:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021457:	89 01                	mov    DWORD PTR [ecx],eax
c0021459:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002145c:	b8 00 00 00 00       	mov    eax,0x0
c0021461:	eb 0c                	jmp    c002146f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021463:	b8 02 00 00 00       	mov    eax,0x2
c0021468:	eb 05                	jmp    c002146f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002146a:	b8 01 00 00 00       	mov    eax,0x1
c002146f:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021475:	c3                   	ret    

c0021476 <FAT::unlink(char const*)>:
c0021476:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002147c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021484:	75 07                	jne    c002148d <FAT::unlink(char const*)+0x17>
c0021486:	b8 04 00 00 00       	mov    eax,0x4
c002148b:	eb 5c                	jmp    c00214e9 <FAT::unlink(char const*)+0x73>
c002148d:	83 ec 08             	sub    esp,0x8
c0021490:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021497:	8d 44 24 18          	lea    eax,[esp+0x18]
c002149b:	50                   	push   eax
c002149c:	e8 9b f3 fd ff       	call   c000083c <strcpy>
c00214a1:	83 c4 10             	add    esp,0x10
c00214a4:	83 ec 08             	sub    esp,0x8
c00214a7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214ab:	50                   	push   eax
c00214ac:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00214b3:	e8 ce fc ff ff       	call   c0021186 <FAT::fixFilepath(char*)>
c00214b8:	83 c4 10             	add    esp,0x10
c00214bb:	83 ec 0c             	sub    esp,0xc
c00214be:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214c2:	50                   	push   eax
c00214c3:	e8 1a 50 fe ff       	call   c00064e2 <f_unlink>
c00214c8:	83 c4 10             	add    esp,0x10
c00214cb:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00214d2:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00214d9:	85 c0                	test   eax,eax
c00214db:	75 07                	jne    c00214e4 <FAT::unlink(char const*)+0x6e>
c00214dd:	b8 00 00 00 00       	mov    eax,0x0
c00214e2:	eb 05                	jmp    c00214e9 <FAT::unlink(char const*)+0x73>
c00214e4:	b8 01 00 00 00       	mov    eax,0x1
c00214e9:	81 c4 1c 01 00 00    	add    esp,0x11c
c00214ef:	c3                   	ret    

c00214f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00214f0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00214f6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00214fd:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021504:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021508:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002150c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021514:	75 0a                	jne    c0021520 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021516:	b8 04 00 00 00       	mov    eax,0x4
c002151b:	e9 1c 01 00 00       	jmp    c002163c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021520:	83 ec 08             	sub    esp,0x8
c0021523:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002152a:	8d 44 24 24          	lea    eax,[esp+0x24]
c002152e:	50                   	push   eax
c002152f:	e8 08 f3 fd ff       	call   c000083c <strcpy>
c0021534:	83 c4 10             	add    esp,0x10
c0021537:	83 ec 08             	sub    esp,0x8
c002153a:	8d 44 24 20          	lea    eax,[esp+0x20]
c002153e:	50                   	push   eax
c002153f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021546:	e8 3b fc ff ff       	call   c0021186 <FAT::fixFilepath(char*)>
c002154b:	83 c4 10             	add    esp,0x10
c002154e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021556:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c002155e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021563:	83 e0 01             	and    eax,0x1
c0021566:	74 08                	je     c0021570 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021568:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021570:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021575:	83 e0 02             	and    eax,0x2
c0021578:	74 08                	je     c0021582 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c002157a:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021582:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021587:	83 e0 04             	and    eax,0x4
c002158a:	74 08                	je     c0021594 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c002158c:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021594:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021599:	83 e0 08             	and    eax,0x8
c002159c:	74 08                	je     c00215a6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c002159e:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00215a6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00215ab:	83 e0 01             	and    eax,0x1
c00215ae:	74 08                	je     c00215b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00215b0:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00215b8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00215bd:	83 e0 02             	and    eax,0x2
c00215c0:	74 08                	je     c00215ca <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00215c2:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00215ca:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00215cf:	83 e0 04             	and    eax,0x4
c00215d2:	74 08                	je     c00215dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00215d4:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00215dc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00215e1:	83 e0 08             	and    eax,0x8
c00215e4:	74 08                	je     c00215ee <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00215e6:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00215ee:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00215f5:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00215fc:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021604:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c002160c:	83 ec 04             	sub    esp,0x4
c002160f:	52                   	push   edx
c0021610:	50                   	push   eax
c0021611:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021615:	50                   	push   eax
c0021616:	e8 69 55 fe ff       	call   c0006b84 <f_chmod>
c002161b:	83 c4 10             	add    esp,0x10
c002161e:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021625:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c002162c:	85 c0                	test   eax,eax
c002162e:	75 07                	jne    c0021637 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021630:	b8 00 00 00 00       	mov    eax,0x0
c0021635:	eb 05                	jmp    c002163c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021637:	b8 01 00 00 00       	mov    eax,0x1
c002163c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021642:	c3                   	ret    
c0021643:	90                   	nop

c0021644 <FAT::rename(char const*, char const*)>:
c0021644:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002164a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021652:	74 0a                	je     c002165e <FAT::rename(char const*, char const*)+0x1a>
c0021654:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c002165c:	75 0a                	jne    c0021668 <FAT::rename(char const*, char const*)+0x24>
c002165e:	b8 04 00 00 00       	mov    eax,0x4
c0021663:	e9 98 00 00 00       	jmp    c0021700 <FAT::rename(char const*, char const*)+0xbc>
c0021668:	83 ec 08             	sub    esp,0x8
c002166b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021672:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021679:	50                   	push   eax
c002167a:	e8 bd f1 fd ff       	call   c000083c <strcpy>
c002167f:	83 c4 10             	add    esp,0x10
c0021682:	83 ec 08             	sub    esp,0x8
c0021685:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c002168c:	50                   	push   eax
c002168d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021694:	e8 ed fa ff ff       	call   c0021186 <FAT::fixFilepath(char*)>
c0021699:	83 c4 10             	add    esp,0x10
c002169c:	83 ec 08             	sub    esp,0x8
c002169f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00216a6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00216aa:	50                   	push   eax
c00216ab:	e8 8c f1 fd ff       	call   c000083c <strcpy>
c00216b0:	83 c4 10             	add    esp,0x10
c00216b3:	83 ec 08             	sub    esp,0x8
c00216b6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00216ba:	50                   	push   eax
c00216bb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00216c2:	e8 bf fa ff ff       	call   c0021186 <FAT::fixFilepath(char*)>
c00216c7:	83 c4 10             	add    esp,0x10
c00216ca:	83 ec 08             	sub    esp,0x8
c00216cd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00216d1:	50                   	push   eax
c00216d2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00216d9:	50                   	push   eax
c00216da:	e8 b2 51 fe ff       	call   c0006891 <f_rename>
c00216df:	83 c4 10             	add    esp,0x10
c00216e2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00216e9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00216f0:	85 c0                	test   eax,eax
c00216f2:	75 07                	jne    c00216fb <FAT::rename(char const*, char const*)+0xb7>
c00216f4:	b8 00 00 00 00       	mov    eax,0x0
c00216f9:	eb 05                	jmp    c0021700 <FAT::rename(char const*, char const*)+0xbc>
c00216fb:	b8 01 00 00 00       	mov    eax,0x1
c0021700:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021706:	c3                   	ret    
c0021707:	90                   	nop

c0021708 <FAT::mkdir(char const*)>:
c0021708:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002170e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021716:	75 07                	jne    c002171f <FAT::mkdir(char const*)+0x17>
c0021718:	b8 04 00 00 00       	mov    eax,0x4
c002171d:	eb 5c                	jmp    c002177b <FAT::mkdir(char const*)+0x73>
c002171f:	83 ec 08             	sub    esp,0x8
c0021722:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021729:	8d 44 24 18          	lea    eax,[esp+0x18]
c002172d:	50                   	push   eax
c002172e:	e8 09 f1 fd ff       	call   c000083c <strcpy>
c0021733:	83 c4 10             	add    esp,0x10
c0021736:	83 ec 08             	sub    esp,0x8
c0021739:	8d 44 24 14          	lea    eax,[esp+0x14]
c002173d:	50                   	push   eax
c002173e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021745:	e8 3c fa ff ff       	call   c0021186 <FAT::fixFilepath(char*)>
c002174a:	83 c4 10             	add    esp,0x10
c002174d:	83 ec 0c             	sub    esp,0xc
c0021750:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021754:	50                   	push   eax
c0021755:	e8 0b 4f fe ff       	call   c0006665 <f_mkdir>
c002175a:	83 c4 10             	add    esp,0x10
c002175d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021764:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002176b:	85 c0                	test   eax,eax
c002176d:	75 07                	jne    c0021776 <FAT::mkdir(char const*)+0x6e>
c002176f:	b8 00 00 00 00       	mov    eax,0x0
c0021774:	eb 05                	jmp    c002177b <FAT::mkdir(char const*)+0x73>
c0021776:	b8 01 00 00 00       	mov    eax,0x1
c002177b:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021781:	c3                   	ret    

c0021782 <FAT::exists(char const*)>:
c0021782:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021788:	83 ec 08             	sub    esp,0x8
c002178b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021792:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021796:	50                   	push   eax
c0021797:	e8 a0 f0 fd ff       	call   c000083c <strcpy>
c002179c:	83 c4 10             	add    esp,0x10
c002179f:	83 ec 08             	sub    esp,0x8
c00217a2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00217a6:	50                   	push   eax
c00217a7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00217ae:	e8 d3 f9 ff ff       	call   c0021186 <FAT::fixFilepath(char*)>
c00217b3:	83 c4 10             	add    esp,0x10
c00217b6:	83 ec 08             	sub    esp,0x8
c00217b9:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00217c0:	50                   	push   eax
c00217c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00217c5:	50                   	push   eax
c00217c6:	e8 c5 49 fe ff       	call   c0006190 <f_stat>
c00217cb:	83 c4 10             	add    esp,0x10
c00217ce:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00217d5:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00217dc:	85 c0                	test   eax,eax
c00217de:	75 04                	jne    c00217e4 <FAT::exists(char const*)+0x62>
c00217e0:	b0 01                	mov    al,0x1
c00217e2:	eb 02                	jmp    c00217e6 <FAT::exists(char const*)+0x64>
c00217e4:	b0 00                	mov    al,0x0
c00217e6:	81 c4 2c 02 00 00    	add    esp,0x22c
c00217ec:	c3                   	ret    
c00217ed:	90                   	nop

c00217ee <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00217ee:	b8 08 00 00 00       	mov    eax,0x8
c00217f3:	c3                   	ret    

c00217f4 <ISO9660::seek(void*, unsigned long long)>:
c00217f4:	53                   	push   ebx
c00217f5:	b8 04 00 00 00       	mov    eax,0x4
c00217fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00217fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021802:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021806:	85 d2                	test   edx,edx
c0021808:	74 17                	je     c0021821 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002180a:	89 c8                	mov    eax,ecx
c002180c:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c002180f:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021812:	b8 01 00 00 00       	mov    eax,0x1
c0021817:	73 08                	jae    c0021821 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021819:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c002181c:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c002181f:	31 c0                	xor    eax,eax
c0021821:	5b                   	pop    ebx
c0021822:	c3                   	ret    
c0021823:	90                   	nop

c0021824 <ISO9660::tell(void*, unsigned long long*)>:
c0021824:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021828:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002182c:	85 d2                	test   edx,edx
c002182e:	74 12                	je     c0021842 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021830:	85 c0                	test   eax,eax
c0021832:	74 0e                	je     c0021842 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021834:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021837:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002183a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002183d:	89 10                	mov    DWORD PTR [eax],edx
c002183f:	31 c0                	xor    eax,eax
c0021841:	c3                   	ret    
c0021842:	b8 04 00 00 00       	mov    eax,0x4
c0021847:	c3                   	ret    

c0021848 <ISO9660::getName()>:
c0021848:	b8 fc cb 02 c0       	mov    eax,0xc002cbfc
c002184d:	c3                   	ret    

c002184e <ISO9660::stat(void*, unsigned long long*)>:
c002184e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021852:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021856:	85 d2                	test   edx,edx
c0021858:	74 12                	je     c002186c <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002185a:	85 c0                	test   eax,eax
c002185c:	74 0e                	je     c002186c <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002185e:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021861:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021864:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021867:	89 10                	mov    DWORD PTR [eax],edx
c0021869:	31 c0                	xor    eax,eax
c002186b:	c3                   	ret    
c002186c:	b8 04 00 00 00       	mov    eax,0x4
c0021871:	c3                   	ret    

c0021872 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021872:	b8 01 00 00 00       	mov    eax,0x1
c0021877:	c3                   	ret    

c0021878 <ISO9660::unlink(char const*)>:
c0021878:	b8 01 00 00 00       	mov    eax,0x1
c002187d:	c3                   	ret    

c002187e <ISO9660::write(void*, unsigned long, void*, int*)>:
c002187e:	b8 01 00 00 00       	mov    eax,0x1
c0021883:	c3                   	ret    

c0021884 <ISO9660::rename(char const*, char const*)>:
c0021884:	b8 01 00 00 00       	mov    eax,0x1
c0021889:	c3                   	ret    

c002188a <ISO9660::mkdir(char const*)>:
c002188a:	b8 01 00 00 00       	mov    eax,0x1
c002188f:	c3                   	ret    

c0021890 <ISO9660::close(void*)>:
c0021890:	83 ec 0c             	sub    esp,0xc
c0021893:	b8 04 00 00 00       	mov    eax,0x4
c0021898:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002189c:	85 d2                	test   edx,edx
c002189e:	74 0e                	je     c00218ae <ISO9660::close(void*)+0x1e>
c00218a0:	83 ec 0c             	sub    esp,0xc
c00218a3:	52                   	push   edx
c00218a4:	e8 b2 df fe ff       	call   c000f85b <free>
c00218a9:	83 c4 10             	add    esp,0x10
c00218ac:	31 c0                	xor    eax,eax
c00218ae:	83 c4 0c             	add    esp,0xc
c00218b1:	c3                   	ret    

c00218b2 <ISO9660::closeDir(void*)>:
c00218b2:	83 ec 0c             	sub    esp,0xc
c00218b5:	b8 04 00 00 00       	mov    eax,0x4
c00218ba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00218be:	85 d2                	test   edx,edx
c00218c0:	74 0e                	je     c00218d0 <ISO9660::closeDir(void*)+0x1e>
c00218c2:	83 ec 0c             	sub    esp,0xc
c00218c5:	52                   	push   edx
c00218c6:	e8 90 df fe ff       	call   c000f85b <free>
c00218cb:	83 c4 10             	add    esp,0x10
c00218ce:	31 c0                	xor    eax,eax
c00218d0:	83 c4 0c             	add    esp,0xc
c00218d3:	c3                   	ret    

c00218d4 <ISO9660::~ISO9660()>:
c00218d4:	83 ec 0c             	sub    esp,0xc
c00218d7:	ba 60 cc 02 c0       	mov    edx,0xc002cc60
c00218dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218e0:	89 10                	mov    DWORD PTR [eax],edx
c00218e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218e6:	83 ec 0c             	sub    esp,0xc
c00218e9:	50                   	push   eax
c00218ea:	e8 03 18 ff ff       	call   c00130f2 <Filesystem::~Filesystem()>
c00218ef:	83 c4 10             	add    esp,0x10
c00218f2:	90                   	nop
c00218f3:	83 c4 0c             	add    esp,0xc
c00218f6:	c3                   	ret    
c00218f7:	90                   	nop

c00218f8 <ISO9660::~ISO9660()>:
c00218f8:	83 ec 0c             	sub    esp,0xc
c00218fb:	83 ec 0c             	sub    esp,0xc
c00218fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021902:	e8 cd ff ff ff       	call   c00218d4 <ISO9660::~ISO9660()>
c0021907:	83 c4 10             	add    esp,0x10
c002190a:	83 ec 08             	sub    esp,0x8
c002190d:	6a 08                	push   0x8
c002190f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021913:	e8 cb 13 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0021918:	83 c4 10             	add    esp,0x10
c002191b:	83 c4 0c             	add    esp,0xc
c002191e:	c3                   	ret    

c002191f <__memmem(unsigned char*, int, unsigned char*, int)>:
c002191f:	55                   	push   ebp
c0021920:	31 c9                	xor    ecx,ecx
c0021922:	57                   	push   edi
c0021923:	56                   	push   esi
c0021924:	53                   	push   ebx
c0021925:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021929:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002192d:	89 eb                	mov    ebx,ebp
c002192f:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021933:	39 ce                	cmp    esi,ecx
c0021935:	7e 17                	jle    c002194e <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021937:	31 d2                	xor    edx,edx
c0021939:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c002193d:	7d 13                	jge    c0021952 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c002193f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021943:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021946:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021949:	75 0d                	jne    c0021958 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002194b:	42                   	inc    edx
c002194c:	eb eb                	jmp    c0021939 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c002194e:	31 c0                	xor    eax,eax
c0021950:	eb 0a                	jmp    c002195c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021952:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021956:	eb 04                	jmp    c002195c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021958:	41                   	inc    ecx
c0021959:	43                   	inc    ebx
c002195a:	eb d7                	jmp    c0021933 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c002195c:	5b                   	pop    ebx
c002195d:	5e                   	pop    esi
c002195e:	5f                   	pop    edi
c002195f:	5d                   	pop    ebp
c0021960:	c3                   	ret    

c0021961 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021961:	56                   	push   esi
c0021962:	53                   	push   ebx
c0021963:	52                   	push   edx
c0021964:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021968:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002196c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021970:	39 0d 60 1e 03 c0    	cmp    DWORD PTR ds:0xc0031e60,ecx
c0021976:	75 08                	jne    c0021980 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0021978:	38 05 b4 dc 02 c0    	cmp    BYTE PTR ds:0xc002dcb4,al
c002197e:	74 2b                	je     c00219ab <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021980:	83 ec 0c             	sub    esp,0xc
c0021983:	a2 b4 dc 02 c0       	mov    ds:0xc002dcb4,al
c0021988:	68 80 1e 03 c0       	push   0xc0031e80
c002198d:	0f be c0             	movsx  eax,al
c0021990:	6a 01                	push   0x1
c0021992:	89 0d 60 1e 03 c0    	mov    DWORD PTR ds:0xc0031e60,ecx
c0021998:	31 db                	xor    ebx,ebx
c002199a:	53                   	push   ebx
c002199b:	51                   	push   ecx
c002199c:	ff 34 85 3c ec 02 c0 	push   DWORD PTR [eax*4-0x3ffd13c4]
c00219a3:	e8 ee 4c ff ff       	call   c0016696 <LogicalDisk::read(unsigned long long, int, void*)>
c00219a8:	83 c4 20             	add    esp,0x20
c00219ab:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c00219b3:	c7 44 24 14 80 1e 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031e80
c00219bb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00219bf:	58                   	pop    eax
c00219c0:	5b                   	pop    ebx
c00219c1:	5e                   	pop    esi
c00219c2:	e9 85 ed fd ff       	jmp    c000074c <memcpy>
c00219c7:	90                   	nop

c00219c8 <ISO9660::tryMount(LogicalDisk*, int)>:
c00219c8:	81 ec 10 08 00 00    	sub    esp,0x810
c00219ce:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00219d5:	83 c0 41             	add    eax,0x41
c00219d8:	0f be c0             	movsx  eax,al
c00219db:	50                   	push   eax
c00219dc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00219e0:	50                   	push   eax
c00219e1:	6a 10                	push   0x10
c00219e3:	e8 79 ff ff ff       	call   c0021961 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219e8:	83 c4 10             	add    esp,0x10
c00219eb:	31 c0                	xor    eax,eax
c00219ed:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00219f2:	75 1d                	jne    c0021a11 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00219f4:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00219f9:	75 16                	jne    c0021a11 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00219fb:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021a00:	75 0f                	jne    c0021a11 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021a02:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021a07:	75 08                	jne    c0021a11 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021a09:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021a0e:	0f 94 c0             	sete   al
c0021a11:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021a17:	c3                   	ret    

c0021a18 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021a18:	55                   	push   ebp
c0021a19:	57                   	push   edi
c0021a1a:	56                   	push   esi
c0021a1b:	53                   	push   ebx
c0021a1c:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021a22:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021a29:	85 ed                	test   ebp,ebp
c0021a2b:	0f 84 d6 01 00 00    	je     c0021c07 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021a31:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021a39:	0f 84 c8 01 00 00    	je     c0021c07 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021a3f:	b8 01 00 00 00       	mov    eax,0x1
c0021a44:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021a48:	0f 85 be 01 00 00    	jne    c0021c0c <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021a4e:	31 d2                	xor    edx,edx
c0021a50:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021a57:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021a5a:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021a5d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021a61:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021a64:	89 04 24             	mov    DWORD PTR [esp],eax
c0021a67:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021a6b:	01 f0                	add    eax,esi
c0021a6d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021a70:	11 fa                	adc    edx,edi
c0021a72:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021a76:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021a7a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021a7e:	19 d1                	sbb    ecx,edx
c0021a80:	72 0a                	jb     c0021a8c <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021a82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021a8a:	eb 13                	jmp    c0021a9f <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a90:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021a94:	29 f0                	sub    eax,esi
c0021a96:	19 fa                	sbb    edx,edi
c0021a98:	89 04 24             	mov    DWORD PTR [esp],eax
c0021a9b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021a9f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021aa2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021aa5:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021aa9:	51                   	push   ecx
c0021aaa:	c1 e0 0b             	shl    eax,0xb
c0021aad:	01 c6                	add    esi,eax
c0021aaf:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021ab3:	11 d7                	adc    edi,edx
c0021ab5:	50                   	push   eax
c0021ab6:	89 fa                	mov    edx,edi
c0021ab8:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021abc:	89 f0                	mov    eax,esi
c0021abe:	53                   	push   ebx
c0021abf:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021ac3:	50                   	push   eax
c0021ac4:	e8 98 fe ff ff       	call   c0021961 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ac9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021acd:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021ad0:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0021ad4:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021ada:	83 c4 10             	add    esp,0x10
c0021add:	b8 00 08 00 00       	mov    eax,0x800
c0021ae2:	29 d0                	sub    eax,edx
c0021ae4:	39 c1                	cmp    ecx,eax
c0021ae6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0021aea:	83 d9 00             	sbb    ecx,0x0
c0021aed:	7d 1c                	jge    c0021b0b <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0021aef:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021af4:	75 12                	jne    c0021b08 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0021af6:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021afd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021b03:	e9 fb 00 00 00       	jmp    c0021c03 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021b08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021b0b:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021b0e:	31 d2                	xor    edx,edx
c0021b10:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021b14:	39 c2                	cmp    edx,eax
c0021b16:	7d 14                	jge    c0021b2c <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0021b18:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021b1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021b23:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021b26:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021b29:	42                   	inc    edx
c0021b2a:	eb e8                	jmp    c0021b14 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021b2c:	89 c3                	mov    ebx,eax
c0021b2e:	85 c0                	test   eax,eax
c0021b30:	79 02                	jns    c0021b34 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021b32:	31 db                	xor    ebx,ebx
c0021b34:	99                   	cdq    
c0021b35:	01 c3                	add    ebx,eax
c0021b37:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021b3e:	01 c6                	add    esi,eax
c0021b40:	11 d7                	adc    edi,edx
c0021b42:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021b46:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021b4a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021b4d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021b51:	29 c6                	sub    esi,eax
c0021b53:	19 d7                	sbb    edi,edx
c0021b55:	89 34 24             	mov    DWORD PTR [esp],esi
c0021b58:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021b5c:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021b61:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021b64:	b8 00 00 00 00       	mov    eax,0x0
c0021b69:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021b6d:	7d 3e                	jge    c0021bad <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021b6f:	52                   	push   edx
c0021b70:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021b74:	50                   	push   eax
c0021b75:	53                   	push   ebx
c0021b76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021b7a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021b7e:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021b82:	50                   	push   eax
c0021b83:	e8 d9 fd ff ff       	call   c0021961 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b88:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021b90:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021b95:	81 c3 00 08 00 00    	add    ebx,0x800
c0021b9b:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021ba3:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021ba8:	83 c4 10             	add    esp,0x10
c0021bab:	eb af                	jmp    c0021b5c <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021bad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bb1:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021bb4:	74 32                	je     c0021be8 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021bb6:	50                   	push   eax
c0021bb7:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021bbb:	50                   	push   eax
c0021bbc:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021bc0:	50                   	push   eax
c0021bc1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021bc5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021bc9:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021bcd:	56                   	push   esi
c0021bce:	e8 8e fd ff ff       	call   c0021961 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021bd3:	83 c4 0c             	add    esp,0xc
c0021bd6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021bda:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021bde:	50                   	push   eax
c0021bdf:	53                   	push   ebx
c0021be0:	e8 67 eb fd ff       	call   c000074c <memcpy>
c0021be5:	83 c4 10             	add    esp,0x10
c0021be8:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021bef:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021bf3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021bf7:	89 38                	mov    DWORD PTR [eax],edi
c0021bf9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021bfd:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021c00:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021c03:	31 c0                	xor    eax,eax
c0021c05:	eb 05                	jmp    c0021c0c <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021c07:	b8 04 00 00 00       	mov    eax,0x4
c0021c0c:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021c12:	5b                   	pop    ebx
c0021c13:	5e                   	pop    esi
c0021c14:	5f                   	pop    edi
c0021c15:	5d                   	pop    ebp
c0021c16:	c3                   	ret    
c0021c17:	90                   	nop

c0021c18 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021c18:	55                   	push   ebp
c0021c19:	57                   	push   edi
c0021c1a:	56                   	push   esi
c0021c1b:	53                   	push   ebx
c0021c1c:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021c22:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021c29:	85 f6                	test   esi,esi
c0021c2b:	0f 84 64 02 00 00    	je     c0021e95 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021c31:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021c39:	0f 84 56 02 00 00    	je     c0021e95 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021c3f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021c42:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021c45:	75 0a                	jne    c0021c51 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021c47:	b8 07 00 00 00       	mov    eax,0x7
c0021c4c:	e9 49 02 00 00       	jmp    c0021e9a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021c51:	50                   	push   eax
c0021c52:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021c56:	50                   	push   eax
c0021c57:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021c5e:	53                   	push   ebx
c0021c5f:	8b 06                	mov    eax,DWORD PTR [esi]
c0021c61:	c1 e0 0b             	shl    eax,0xb
c0021c64:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021c67:	c1 e8 0b             	shr    eax,0xb
c0021c6a:	50                   	push   eax
c0021c6b:	e8 f1 fc ff ff       	call   c0021961 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c70:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021c73:	83 c4 10             	add    esp,0x10
c0021c76:	89 c1                	mov    ecx,eax
c0021c78:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021c7b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021c81:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021c84:	84 db                	test   bl,bl
c0021c86:	0f 85 90 00 00 00    	jne    c0021d1c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021c8c:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021c92:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021c98:	29 c7                	sub    edi,eax
c0021c9a:	89 fb                	mov    ebx,edi
c0021c9c:	c1 fb 1f             	sar    ebx,0x1f
c0021c9f:	01 f8                	add    eax,edi
c0021ca1:	11 da                	adc    edx,ebx
c0021ca3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021ca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021cab:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021cae:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021cb1:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021cb4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021cb7:	89 04 24             	mov    DWORD PTR [esp],eax
c0021cba:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021cbe:	89 d8                	mov    eax,ebx
c0021cc0:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021cc3:	ba 00 00 00 00       	mov    edx,0x0
c0021cc8:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021ccc:	b8 00 00 00 00       	mov    eax,0x0
c0021cd1:	73 0b                	jae    c0021cde <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021cd3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021cd6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021cda:	29 f8                	sub    eax,edi
c0021cdc:	19 da                	sbb    edx,ebx
c0021cde:	89 d3                	mov    ebx,edx
c0021ce0:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021ce3:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021ce6:	09 c3                	or     ebx,eax
c0021ce8:	0f 84 59 ff ff ff    	je     c0021c47 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021cee:	55                   	push   ebp
c0021cef:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021cf3:	50                   	push   eax
c0021cf4:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021cfb:	53                   	push   ebx
c0021cfc:	8b 06                	mov    eax,DWORD PTR [esi]
c0021cfe:	c1 e0 0b             	shl    eax,0xb
c0021d01:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021d05:	c1 e8 0b             	shr    eax,0xb
c0021d08:	50                   	push   eax
c0021d09:	e8 53 fc ff ff       	call   c0021961 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d0e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021d11:	83 c4 10             	add    esp,0x10
c0021d14:	25 ff 07 00 00       	and    eax,0x7ff
c0021d19:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021d1c:	57                   	push   edi
c0021d1d:	6a 28                	push   0x28
c0021d1f:	6a 00                	push   0x0
c0021d21:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021d25:	50                   	push   eax
c0021d26:	e8 55 ea fd ff       	call   c0000780 <memset>
c0021d2b:	31 d2                	xor    edx,edx
c0021d2d:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021d30:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021d36:	89 f8                	mov    eax,edi
c0021d38:	83 c0 21             	add    eax,0x21
c0021d3b:	83 d2 00             	adc    edx,0x0
c0021d3e:	89 c7                	mov    edi,eax
c0021d40:	89 d5                	mov    ebp,edx
c0021d42:	83 c4 10             	add    esp,0x10
c0021d45:	31 c9                	xor    ecx,ecx
c0021d47:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021d4e:	83 f9 28             	cmp    ecx,0x28
c0021d51:	88 04 24             	mov    BYTE PTR [esp],al
c0021d54:	0f 94 c2             	sete   dl
c0021d57:	88 d0                	mov    al,dl
c0021d59:	ba ff 07 00 00       	mov    edx,0x7ff
c0021d5e:	39 fa                	cmp    edx,edi
c0021d60:	ba 00 00 00 00       	mov    edx,0x0
c0021d65:	19 ea                	sbb    edx,ebp
c0021d67:	0f 92 c2             	setb   dl
c0021d6a:	09 c2                	or     edx,eax
c0021d6c:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021d70:	0f 94 c0             	sete   al
c0021d73:	08 d0                	or     al,dl
c0021d75:	75 16                	jne    c0021d8d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021d77:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021d7b:	74 10                	je     c0021d8d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021d7d:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021d80:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021d84:	41                   	inc    ecx
c0021d85:	83 c7 01             	add    edi,0x1
c0021d88:	83 d5 00             	adc    ebp,0x0
c0021d8b:	eb ba                	jmp    c0021d47 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021d8d:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021d94:	83 ec 0c             	sub    esp,0xc
c0021d97:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021d9b:	57                   	push   edi
c0021d9c:	e8 fb e9 fd ff       	call   c000079c <strlen>
c0021da1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021da9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021dad:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021db4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021db7:	5a                   	pop    edx
c0021db8:	25 ff 07 00 00       	and    eax,0x7ff
c0021dbd:	01 c8                	add    eax,ecx
c0021dbf:	59                   	pop    ecx
c0021dc0:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021dc6:	83 e0 02             	and    eax,0x2
c0021dc9:	3c 01                	cmp    al,0x1
c0021dcb:	19 c0                	sbb    eax,eax
c0021dcd:	83 c0 02             	add    eax,0x2
c0021dd0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021dd4:	57                   	push   edi
c0021dd5:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021dd9:	50                   	push   eax
c0021dda:	e8 5d ea fd ff       	call   c000083c <strcpy>
c0021ddf:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021de3:	83 c4 10             	add    esp,0x10
c0021de6:	84 c0                	test   al,al
c0021de8:	75 21                	jne    c0021e0b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021dea:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021df2:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021dfa:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021e02:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021e09:	eb 28                	jmp    c0021e33 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021e0b:	fe c8                	dec    al
c0021e0d:	75 24                	jne    c0021e33 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021e0f:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021e17:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021e1f:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021e27:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021e2e:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021e33:	0f b6 fb             	movzx  edi,bl
c0021e36:	31 db                	xor    ebx,ebx
c0021e38:	50                   	push   eax
c0021e39:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021e40:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021e44:	50                   	push   eax
c0021e45:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021e4c:	e8 fb e8 fd ff       	call   c000074c <memcpy>
c0021e51:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021e58:	89 f9                	mov    ecx,edi
c0021e5a:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021e60:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021e63:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021e66:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021e69:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021e6c:	83 c4 10             	add    esp,0x10
c0021e6f:	39 c7                	cmp    edi,eax
c0021e71:	89 df                	mov    edi,ebx
c0021e73:	19 d7                	sbb    edi,edx
c0021e75:	72 10                	jb     c0021e87 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021e77:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021e7e:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021e85:	eb 0a                	jmp    c0021e91 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021e87:	29 c8                	sub    eax,ecx
c0021e89:	19 da                	sbb    edx,ebx
c0021e8b:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021e8e:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021e91:	31 c0                	xor    eax,eax
c0021e93:	eb 05                	jmp    c0021e9a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021e95:	b8 04 00 00 00       	mov    eax,0x4
c0021e9a:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021ea0:	5b                   	pop    ebx
c0021ea1:	5e                   	pop    esi
c0021ea2:	5f                   	pop    edi
c0021ea3:	5d                   	pop    ebp
c0021ea4:	c3                   	ret    

c0021ea5 <readRoot(unsigned int*, unsigned int*, char)>:
c0021ea5:	81 ec 40 08 00 00    	sub    esp,0x840
c0021eab:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021eb3:	50                   	push   eax
c0021eb4:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021eb8:	50                   	push   eax
c0021eb9:	6a 10                	push   0x10
c0021ebb:	e8 a1 fa ff ff       	call   c0021961 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ec0:	83 c4 0c             	add    esp,0xc
c0021ec3:	6a 22                	push   0x22
c0021ec5:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021ecc:	50                   	push   eax
c0021ecd:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021ed1:	50                   	push   eax
c0021ed2:	e8 75 e8 fd ff       	call   c000074c <memcpy>
c0021ed7:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021ede:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021ee2:	89 10                	mov    DWORD PTR [eax],edx
c0021ee4:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021eeb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021eef:	89 10                	mov    DWORD PTR [eax],edx
c0021ef1:	b0 01                	mov    al,0x1
c0021ef3:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021ef9:	c3                   	ret    

c0021efa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021efa:	55                   	push   ebp
c0021efb:	57                   	push   edi
c0021efc:	56                   	push   esi
c0021efd:	53                   	push   ebx
c0021efe:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021f04:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021f0b:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021f12:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021f16:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021f1a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021f1e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021f22:	75 03                	jne    c0021f27 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021f24:	83 c3 02             	add    ebx,0x2
c0021f27:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021f2a:	75 03                	jne    c0021f2f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021f2c:	43                   	inc    ebx
c0021f2d:	eb f8                	jmp    c0021f27 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021f2f:	51                   	push   ecx
c0021f30:	68 00 01 00 00       	push   0x100
c0021f35:	6a 00                	push   0x0
c0021f37:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f3b:	50                   	push   eax
c0021f3c:	e8 3f e8 fd ff       	call   c0000780 <memset>
c0021f41:	83 c4 10             	add    esp,0x10
c0021f44:	31 d2                	xor    edx,edx
c0021f46:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021f49:	84 c0                	test   al,al
c0021f4b:	74 21                	je     c0021f6e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021f4d:	3c 2f                	cmp    al,0x2f
c0021f4f:	75 0b                	jne    c0021f5c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021f51:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021f55:	bd 01 00 00 00       	mov    ebp,0x1
c0021f5a:	eb 14                	jmp    c0021f70 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021f5c:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021f5f:	80 f9 19             	cmp    cl,0x19
c0021f62:	77 03                	ja     c0021f67 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021f64:	83 e8 20             	sub    eax,0x20
c0021f67:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021f6b:	42                   	inc    edx
c0021f6c:	eb d8                	jmp    c0021f46 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021f6e:	31 ed                	xor    ebp,ebp
c0021f70:	83 ec 0c             	sub    esp,0xc
c0021f73:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021f7a:	e8 cc d8 fe ff       	call   c000f84b <malloc>
c0021f7f:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021f86:	89 c6                	mov    esi,eax
c0021f88:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021f8e:	c1 ef 0b             	shr    edi,0xb
c0021f91:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021f98:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021f9c:	83 c4 10             	add    esp,0x10
c0021f9f:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021fa4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021fa8:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021faf:	74 28                	je     c0021fd9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021fb1:	52                   	push   edx
c0021fb2:	57                   	push   edi
c0021fb3:	50                   	push   eax
c0021fb4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021fb8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021fbf:	e8 9d f9 ff ff       	call   c0021961 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021fc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021fc8:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021fcf:	05 00 08 00 00       	add    eax,0x800
c0021fd4:	83 c4 10             	add    esp,0x10
c0021fd7:	eb cb                	jmp    c0021fa4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021fd9:	83 ec 0c             	sub    esp,0xc
c0021fdc:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021fe0:	57                   	push   edi
c0021fe1:	e8 b6 e7 fd ff       	call   c000079c <strlen>
c0021fe6:	50                   	push   eax
c0021fe7:	57                   	push   edi
c0021fe8:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021fef:	56                   	push   esi
c0021ff0:	e8 2a f9 ff ff       	call   c002191f <__memmem(unsigned char*, int, unsigned char*, int)>
c0021ff5:	83 c4 20             	add    esp,0x20
c0021ff8:	85 c0                	test   eax,eax
c0021ffa:	75 13                	jne    c002200f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021ffc:	83 ec 0c             	sub    esp,0xc
c0021fff:	56                   	push   esi
c0022000:	e8 56 d8 fe ff       	call   c000f85b <free>
c0022005:	83 c4 10             	add    esp,0x10
c0022008:	31 c0                	xor    eax,eax
c002200a:	e9 b3 00 00 00       	jmp    c00220c2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002200f:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0022013:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0022017:	c1 e7 08             	shl    edi,0x8
c002201a:	c1 e2 10             	shl    edx,0x10
c002201d:	09 d7                	or     edi,edx
c002201f:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0022023:	09 d7                	or     edi,edx
c0022025:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0022029:	c1 e2 18             	shl    edx,0x18
c002202c:	09 d7                	or     edi,edx
c002202e:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0022032:	89 d1                	mov    ecx,edx
c0022034:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0022038:	c1 e1 08             	shl    ecx,0x8
c002203b:	c1 e2 10             	shl    edx,0x10
c002203e:	09 ca                	or     edx,ecx
c0022040:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0022044:	09 ca                	or     edx,ecx
c0022046:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c002204a:	c1 e1 18             	shl    ecx,0x18
c002204d:	09 ca                	or     edx,ecx
c002204f:	89 e9                	mov    ecx,ebp
c0022051:	84 c9                	test   cl,cl
c0022053:	74 3c                	je     c0022091 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0022055:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0022059:	83 ec 0c             	sub    esp,0xc
c002205c:	56                   	push   esi
c002205d:	e8 f9 d7 fe ff       	call   c000f85b <free>
c0022062:	83 c4 0c             	add    esp,0xc
c0022065:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002206c:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0022071:	50                   	push   eax
c0022072:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022079:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022080:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022084:	52                   	push   edx
c0022085:	57                   	push   edi
c0022086:	53                   	push   ebx
c0022087:	e8 6e fe ff ff       	call   c0021efa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002208c:	83 c4 20             	add    esp,0x20
c002208f:	eb 31                	jmp    c00220c2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0022091:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0022094:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c002209b:	d0 e8                	shr    al,1
c002209d:	89 3b                	mov    DWORD PTR [ebx],edi
c002209f:	83 e0 01             	and    eax,0x1
c00220a2:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00220a9:	83 ec 0c             	sub    esp,0xc
c00220ac:	89 13                	mov    DWORD PTR [ebx],edx
c00220ae:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00220b5:	89 03                	mov    DWORD PTR [ebx],eax
c00220b7:	56                   	push   esi
c00220b8:	e8 9e d7 fe ff       	call   c000f85b <free>
c00220bd:	83 c4 10             	add    esp,0x10
c00220c0:	b0 01                	mov    al,0x1
c00220c2:	81 c4 1c 01 00 00    	add    esp,0x11c
c00220c8:	5b                   	pop    ebx
c00220c9:	5e                   	pop    esi
c00220ca:	5f                   	pop    edi
c00220cb:	5d                   	pop    ebp
c00220cc:	c3                   	ret    

c00220cd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00220cd:	55                   	push   ebp
c00220ce:	57                   	push   edi
c00220cf:	56                   	push   esi
c00220d0:	53                   	push   ebx
c00220d1:	83 ec 20             	sub    esp,0x20
c00220d4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00220d8:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00220dc:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00220e0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00220e8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00220f0:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00220f5:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00220fb:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0022101:	57                   	push   edi
c0022102:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022106:	50                   	push   eax
c0022107:	8d 44 24 14          	lea    eax,[esp+0x14]
c002210b:	50                   	push   eax
c002210c:	e8 94 fd ff ff       	call   c0021ea5 <readRoot(unsigned int*, unsigned int*, char)>
c0022111:	5a                   	pop    edx
c0022112:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022116:	e8 81 e6 fd ff       	call   c000079c <strlen>
c002211b:	83 c4 10             	add    esp,0x10
c002211e:	83 f8 03             	cmp    eax,0x3
c0022121:	77 17                	ja     c002213a <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0022123:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022127:	89 03                	mov    DWORD PTR [ebx],eax
c0022129:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002212d:	89 06                	mov    DWORD PTR [esi],eax
c002212f:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0022136:	b0 01                	mov    al,0x1
c0022138:	eb 19                	jmp    c0022153 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c002213a:	50                   	push   eax
c002213b:	55                   	push   ebp
c002213c:	57                   	push   edi
c002213d:	56                   	push   esi
c002213e:	53                   	push   ebx
c002213f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022143:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022147:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002214b:	e8 aa fd ff ff       	call   c0021efa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022150:	83 c4 20             	add    esp,0x20
c0022153:	83 c4 1c             	add    esp,0x1c
c0022156:	5b                   	pop    ebx
c0022157:	5e                   	pop    esi
c0022158:	5f                   	pop    edi
c0022159:	5d                   	pop    ebp
c002215a:	c3                   	ret    
c002215b:	90                   	nop

c002215c <ISO9660::open(char const*, void**, FileOpenMode)>:
c002215c:	57                   	push   edi
c002215d:	56                   	push   esi
c002215e:	53                   	push   ebx
c002215f:	83 ec 10             	sub    esp,0x10
c0022162:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022166:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002216a:	85 ff                	test   edi,edi
c002216c:	0f 84 9d 00 00 00    	je     c002220f <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022172:	85 f6                	test   esi,esi
c0022174:	0f 84 95 00 00 00    	je     c002220f <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002217a:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c002217f:	74 17                	je     c0022198 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0022181:	83 ec 0c             	sub    esp,0xc
c0022184:	68 17 cc 02 c0       	push   0xc002cc17
c0022189:	e8 35 0c ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c002218e:	83 c4 10             	add    esp,0x10
c0022191:	b8 03 00 00 00       	mov    eax,0x3
c0022196:	eb 7c                	jmp    c0022214 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022198:	83 ec 0c             	sub    esp,0xc
c002219b:	6a 1c                	push   0x1c
c002219d:	e8 a9 d6 fe ff       	call   c000f84b <malloc>
c00221a2:	89 07                	mov    DWORD PTR [edi],eax
c00221a4:	89 c3                	mov    ebx,eax
c00221a6:	58                   	pop    eax
c00221a7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00221ab:	50                   	push   eax
c00221ac:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00221af:	50                   	push   eax
c00221b0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221b4:	50                   	push   eax
c00221b5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221b9:	50                   	push   eax
c00221ba:	56                   	push   esi
c00221bb:	e8 0d ff ff ff       	call   c00220cd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00221c0:	83 c4 20             	add    esp,0x20
c00221c3:	84 c0                	test   al,al
c00221c5:	74 07                	je     c00221ce <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c00221c7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00221cc:	74 0b                	je     c00221d9 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c00221ce:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00221d2:	b8 01 00 00 00       	mov    eax,0x1
c00221d7:	eb 3b                	jmp    c0022214 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00221d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221dd:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00221e1:	89 03                	mov    DWORD PTR [ebx],eax
c00221e3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00221ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00221f5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00221fc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00221ff:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022206:	8a 06                	mov    al,BYTE PTR [esi]
c0022208:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002220b:	31 c0                	xor    eax,eax
c002220d:	eb 05                	jmp    c0022214 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002220f:	b8 04 00 00 00       	mov    eax,0x4
c0022214:	83 c4 10             	add    esp,0x10
c0022217:	5b                   	pop    ebx
c0022218:	5e                   	pop    esi
c0022219:	5f                   	pop    edi
c002221a:	c3                   	ret    
c002221b:	90                   	nop

c002221c <ISO9660::exists(char const*)>:
c002221c:	83 ec 28             	sub    esp,0x28
c002221f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022223:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022227:	52                   	push   edx
c0022228:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002222b:	52                   	push   edx
c002222c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022230:	52                   	push   edx
c0022231:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022235:	52                   	push   edx
c0022236:	50                   	push   eax
c0022237:	e8 91 fe ff ff       	call   c00220cd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002223c:	83 c4 3c             	add    esp,0x3c
c002223f:	c3                   	ret    

c0022240 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022240:	56                   	push   esi
c0022241:	53                   	push   ebx
c0022242:	83 ec 14             	sub    esp,0x14
c0022245:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022249:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002224d:	85 db                	test   ebx,ebx
c002224f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022253:	0f 94 c2             	sete   dl
c0022256:	85 f6                	test   esi,esi
c0022258:	0f 94 c0             	sete   al
c002225b:	08 c2                	or     dl,al
c002225d:	75 68                	jne    c00222c7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002225f:	85 c9                	test   ecx,ecx
c0022261:	74 64                	je     c00222c7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022263:	83 ec 0c             	sub    esp,0xc
c0022266:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022269:	8d 44 24 18          	lea    eax,[esp+0x18]
c002226d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022273:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002227a:	50                   	push   eax
c002227b:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c002227e:	50                   	push   eax
c002227f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022283:	50                   	push   eax
c0022284:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022288:	50                   	push   eax
c0022289:	51                   	push   ecx
c002228a:	e8 3e fe ff ff       	call   c00220cd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002228f:	83 c4 20             	add    esp,0x20
c0022292:	ba 01 00 00 00       	mov    edx,0x1
c0022297:	84 c0                	test   al,al
c0022299:	74 31                	je     c00222cc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002229b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002229f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00222a6:	89 03                	mov    DWORD PTR [ebx],eax
c00222a8:	ba 00 00 00 00       	mov    edx,0x0
c00222ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00222b1:	85 c0                	test   eax,eax
c00222b3:	0f 95 06             	setne  BYTE PTR [esi]
c00222b6:	74 14                	je     c00222cc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00222b8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00222be:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00222c5:	eb 05                	jmp    c00222cc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00222c7:	ba 04 00 00 00       	mov    edx,0x4
c00222cc:	83 c4 14             	add    esp,0x14
c00222cf:	89 d0                	mov    eax,edx
c00222d1:	5b                   	pop    ebx
c00222d2:	5e                   	pop    esi
c00222d3:	c3                   	ret    

c00222d4 <ISO9660::openDir(char const*, void**)>:
c00222d4:	57                   	push   edi
c00222d5:	56                   	push   esi
c00222d6:	53                   	push   ebx
c00222d7:	83 ec 10             	sub    esp,0x10
c00222da:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00222de:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00222e2:	85 ff                	test   edi,edi
c00222e4:	0f 84 95 00 00 00    	je     c002237f <ISO9660::openDir(char const*, void**)+0xab>
c00222ea:	85 f6                	test   esi,esi
c00222ec:	0f 84 8d 00 00 00    	je     c002237f <ISO9660::openDir(char const*, void**)+0xab>
c00222f2:	83 ec 0c             	sub    esp,0xc
c00222f5:	6a 1c                	push   0x1c
c00222f7:	e8 4f d5 fe ff       	call   c000f84b <malloc>
c00222fc:	89 07                	mov    DWORD PTR [edi],eax
c00222fe:	89 c3                	mov    ebx,eax
c0022300:	59                   	pop    ecx
c0022301:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022305:	50                   	push   eax
c0022306:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022309:	50                   	push   eax
c002230a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002230e:	50                   	push   eax
c002230f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022313:	50                   	push   eax
c0022314:	56                   	push   esi
c0022315:	e8 b3 fd ff ff       	call   c00220cd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002231a:	83 c4 20             	add    esp,0x20
c002231d:	84 c0                	test   al,al
c002231f:	74 07                	je     c0022328 <ISO9660::openDir(char const*, void**)+0x54>
c0022321:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022326:	75 21                	jne    c0022349 <ISO9660::openDir(char const*, void**)+0x75>
c0022328:	0f b6 c0             	movzx  eax,al
c002232b:	52                   	push   edx
c002232c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022330:	50                   	push   eax
c0022331:	68 3d cc 02 c0       	push   0xc002cc3d
c0022336:	e8 88 0a ff ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c002233b:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002233f:	83 c4 10             	add    esp,0x10
c0022342:	b8 01 00 00 00       	mov    eax,0x1
c0022347:	eb 3b                	jmp    c0022384 <ISO9660::openDir(char const*, void**)+0xb0>
c0022349:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002234d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022351:	89 03                	mov    DWORD PTR [ebx],eax
c0022353:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002235a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002235e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022365:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002236c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002236f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022376:	8a 06                	mov    al,BYTE PTR [esi]
c0022378:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002237b:	31 c0                	xor    eax,eax
c002237d:	eb 05                	jmp    c0022384 <ISO9660::openDir(char const*, void**)+0xb0>
c002237f:	b8 04 00 00 00       	mov    eax,0x4
c0022384:	83 c4 10             	add    esp,0x10
c0022387:	5b                   	pop    ebx
c0022388:	5e                   	pop    esi
c0022389:	5f                   	pop    edi
c002238a:	c3                   	ret    
c002238b:	90                   	nop

c002238c <ISO9660::ISO9660()>:
c002238c:	83 ec 0c             	sub    esp,0xc
c002238f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022393:	83 ec 0c             	sub    esp,0xc
c0022396:	50                   	push   eax
c0022397:	e8 32 0d ff ff       	call   c00130ce <Filesystem::Filesystem()>
c002239c:	83 c4 10             	add    esp,0x10
c002239f:	ba 60 cc 02 c0       	mov    edx,0xc002cc60
c00223a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223a8:	89 10                	mov    DWORD PTR [eax],edx
c00223aa:	90                   	nop
c00223ab:	83 c4 0c             	add    esp,0xc
c00223ae:	c3                   	ret    
c00223af:	90                   	nop

c00223b0 <SoundChannel::~SoundChannel()>:
c00223b0:	83 ec 0c             	sub    esp,0xc
c00223b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223b7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00223ba:	83 ec 0c             	sub    esp,0xc
c00223bd:	50                   	push   eax
c00223be:	e8 98 d4 fe ff       	call   c000f85b <free>
c00223c3:	83 c4 10             	add    esp,0x10
c00223c6:	90                   	nop
c00223c7:	83 c4 0c             	add    esp,0xc
c00223ca:	c3                   	ret    
c00223cb:	90                   	nop

c00223cc <SoundChannel::setSpeed(float)>:
c00223cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00223d4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00223d7:	c3                   	ret    

c00223d8 <SoundChannel::getSpeed()>:
c00223d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223dc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00223df:	c3                   	ret    

c00223e0 <SoundChannel::setVolume(int)>:
c00223e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00223e4:	83 f8 64             	cmp    eax,0x64
c00223e7:	7e 05                	jle    c00223ee <SoundChannel::setVolume(int)+0xe>
c00223e9:	b8 64 00 00 00       	mov    eax,0x64
c00223ee:	85 c0                	test   eax,eax
c00223f0:	79 02                	jns    c00223f4 <SoundChannel::setVolume(int)+0x14>
c00223f2:	31 c0                	xor    eax,eax
c00223f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00223f8:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00223fb:	c3                   	ret    

c00223fc <SoundChannel::getVolume()>:
c00223fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022400:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022403:	c3                   	ret    

c0022404 <SoundChannel::pause()>:
c0022404:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022408:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c002240c:	c3                   	ret    
c002240d:	90                   	nop

c002240e <SoundChannel::SoundChannel(int, int, int, int)>:
c002240e:	83 ec 1c             	sub    esp,0x1c
c0022411:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022415:	e8 ea ff ff ff       	call   c0022404 <SoundChannel::pause()>
c002241a:	83 c4 04             	add    esp,0x4
c002241d:	6a 50                	push   0x50
c002241f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022423:	e8 b8 ff ff ff       	call   c00223e0 <SoundChannel::setVolume(int)>
c0022428:	83 c4 08             	add    esp,0x8
c002242b:	a1 dc cc 02 c0       	mov    eax,ds:0xc002ccdc
c0022430:	50                   	push   eax
c0022431:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022435:	e8 92 ff ff ff       	call   c00223cc <SoundChannel::setSpeed(float)>
c002243a:	83 c4 08             	add    esp,0x8
c002243d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022441:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022445:	89 10                	mov    DWORD PTR [eax],edx
c0022447:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002244b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002244f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022452:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022456:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002245a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002245d:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022462:	75 23                	jne    c0022487 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022464:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022468:	8b 10                	mov    edx,DWORD PTR [eax]
c002246a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002246e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022471:	0f af c2             	imul   eax,edx
c0022474:	85 c0                	test   eax,eax
c0022476:	79 03                	jns    c002247b <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022478:	83 c0 03             	add    eax,0x3
c002247b:	c1 f8 02             	sar    eax,0x2
c002247e:	05 a0 0f 00 00       	add    eax,0xfa0
c0022483:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022487:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002248b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002248f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022492:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022496:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c002249d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224a1:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00224a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224ac:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00224af:	c1 e0 02             	shl    eax,0x2
c00224b2:	83 ec 0c             	sub    esp,0xc
c00224b5:	50                   	push   eax
c00224b6:	e8 90 d3 fe ff       	call   c000f84b <malloc>
c00224bb:	83 c4 10             	add    esp,0x10
c00224be:	89 c2                	mov    edx,eax
c00224c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224c4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00224c7:	83 ec 04             	sub    esp,0x4
c00224ca:	8d 44 24 08          	lea    eax,[esp+0x8]
c00224ce:	50                   	push   eax
c00224cf:	6a 01                	push   0x1
c00224d1:	6a 04                	push   0x4
c00224d3:	e8 cf 66 fe ff       	call   c0008ba7 <src_new>
c00224d8:	83 c4 10             	add    esp,0x10
c00224db:	89 c2                	mov    edx,eax
c00224dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224e1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00224e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224e8:	85 c0                	test   eax,eax
c00224ea:	74 10                	je     c00224fc <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00224ec:	83 ec 0c             	sub    esp,0xc
c00224ef:	68 c0 cc 02 c0       	push   0xc002ccc0
c00224f4:	e8 96 80 ff ff       	call   c001a58f <Krnl::panic(char const*)>
c00224f9:	83 c4 10             	add    esp,0x10
c00224fc:	a0 80 2a 03 c0       	mov    al,ds:0xc0032a80
c0022501:	83 f0 01             	xor    eax,0x1
c0022504:	84 c0                	test   al,al
c0022506:	74 57                	je     c002255f <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022508:	a1 e0 cc 02 c0       	mov    eax,ds:0xc002cce0
c002250d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022511:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022519:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022521:	7f 35                	jg     c0022558 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022523:	83 ec 0c             	sub    esp,0xc
c0022526:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002252a:	e8 a0 4f 00 00       	call   c00274cf <__floatsisf>
c002252f:	83 c4 10             	add    esp,0x10
c0022532:	8b 15 e0 cc 02 c0    	mov    edx,DWORD PTR ds:0xc002cce0
c0022538:	83 ec 08             	sub    esp,0x8
c002253b:	52                   	push   edx
c002253c:	50                   	push   eax
c002253d:	e8 9f 4b 00 00       	call   c00270e1 <__mulsf3>
c0022542:	83 c4 10             	add    esp,0x10
c0022545:	89 c2                	mov    edx,eax
c0022547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002254b:	89 14 85 80 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd980],edx
c0022552:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022556:	eb c1                	jmp    c0022519 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022558:	c6 05 80 2a 03 c0 01 	mov    BYTE PTR ds:0xc0032a80,0x1
c002255f:	90                   	nop
c0022560:	83 c4 1c             	add    esp,0x1c
c0022563:	c3                   	ret    

c0022564 <SoundChannel::play()>:
c0022564:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022568:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c002256c:	c3                   	ret    
c002256d:	90                   	nop

c002256e <SoundChannel::paused()>:
c002256e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022572:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022575:	c3                   	ret    

c0022576 <SoundChannel::getSampleRate()>:
c0022576:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002257a:	8b 00                	mov    eax,DWORD PTR [eax]
c002257c:	c3                   	ret    
c002257d:	90                   	nop

c002257e <SoundChannel::getBits()>:
c002257e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022582:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022585:	c3                   	ret    

c0022586 <SoundChannel::getBufferUsed()>:
c0022586:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002258a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c002258d:	c3                   	ret    

c002258e <SoundChannel::getBufferSize()>:
c002258e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022592:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022595:	c3                   	ret    

c0022596 <SoundChannel::unbuffer(float*, int, int)>:
c0022596:	56                   	push   esi
c0022597:	53                   	push   ebx
c0022598:	83 ec 40             	sub    esp,0x40
c002259b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c002259f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00225a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00225a6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00225a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00225ad:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00225b1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00225b5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00225b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00225bd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00225c1:	e8 09 4f 00 00       	call   c00274cf <__floatsisf>
c00225c6:	5a                   	pop    edx
c00225c7:	89 c6                	mov    esi,eax
c00225c9:	ff 33                	push   DWORD PTR [ebx]
c00225cb:	e8 ff 4e 00 00       	call   c00274cf <__floatsisf>
c00225d0:	59                   	pop    ecx
c00225d1:	5a                   	pop    edx
c00225d2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00225d5:	50                   	push   eax
c00225d6:	e8 06 4b 00 00       	call   c00270e1 <__mulsf3>
c00225db:	59                   	pop    ecx
c00225dc:	5a                   	pop    edx
c00225dd:	50                   	push   eax
c00225de:	56                   	push   esi
c00225df:	e8 c0 4c 00 00       	call   c00272a4 <__divsf3>
c00225e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00225e7:	e8 b3 61 00 00       	call   c002879f <__extendsfdf2>
c00225ec:	59                   	pop    ecx
c00225ed:	5e                   	pop    esi
c00225ee:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00225f2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00225f6:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00225fe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022602:	50                   	push   eax
c0022603:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022606:	e8 91 61 fe ff       	call   c000879c <src_process>
c002260b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002260f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022612:	83 c4 0c             	add    esp,0xc
c0022615:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022618:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c002261b:	29 d0                	sub    eax,edx
c002261d:	c1 e0 02             	shl    eax,0x2
c0022620:	50                   	push   eax
c0022621:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022624:	50                   	push   eax
c0022625:	51                   	push   ecx
c0022626:	e8 59 e0 fd ff       	call   c0000684 <memmove>
c002262b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002262f:	83 c4 44             	add    esp,0x44
c0022632:	5b                   	pop    ebx
c0022633:	5e                   	pop    esi
c0022634:	c3                   	ret    
c0022635:	90                   	nop

c0022636 <SoundChannel::buffer8(unsigned char*, int)>:
c0022636:	55                   	push   ebp
c0022637:	57                   	push   edi
c0022638:	56                   	push   esi
c0022639:	53                   	push   ebx
c002263a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002263e:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022642:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022645:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022649:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002264c:	74 7a                	je     c00226c8 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002264e:	85 ff                	test   edi,edi
c0022650:	7e 76                	jle    c00226c8 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022652:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022656:	8d 70 01             	lea    esi,[eax+0x1]
c0022659:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002265c:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002265f:	8b 1c 9d 80 26 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd980]
c0022666:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022669:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002266c:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002266f:	74 5e                	je     c00226cf <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022671:	83 ff 01             	cmp    edi,0x1
c0022674:	74 4b                	je     c00226c1 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022676:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c002267a:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002267d:	8d 70 01             	lea    esi,[eax+0x1]
c0022680:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022683:	8b 1c 9d 80 26 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd980]
c002268a:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002268d:	b8 02 00 00 00       	mov    eax,0x2
c0022692:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022695:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022698:	75 23                	jne    c00226bd <SoundChannel::buffer8(unsigned char*, int)+0x87>
c002269a:	eb 27                	jmp    c00226c3 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002269c:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00226a1:	8d 71 01             	lea    esi,[ecx+0x1]
c00226a4:	40                   	inc    eax
c00226a5:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00226a8:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00226ab:	8b 1c 9d 80 26 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd980]
c00226b2:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00226b5:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00226b8:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00226bb:	74 06                	je     c00226c3 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00226bd:	39 c7                	cmp    edi,eax
c00226bf:	75 db                	jne    c002269c <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00226c1:	89 f8                	mov    eax,edi
c00226c3:	5b                   	pop    ebx
c00226c4:	5e                   	pop    esi
c00226c5:	5f                   	pop    edi
c00226c6:	5d                   	pop    ebp
c00226c7:	c3                   	ret    
c00226c8:	5b                   	pop    ebx
c00226c9:	31 c0                	xor    eax,eax
c00226cb:	5e                   	pop    esi
c00226cc:	5f                   	pop    edi
c00226cd:	5d                   	pop    ebp
c00226ce:	c3                   	ret    
c00226cf:	b8 01 00 00 00       	mov    eax,0x1
c00226d4:	eb ed                	jmp    c00226c3 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00226d6 <SoundDevice::SoundDevice(char const*)>:
c00226d6:	83 ec 1c             	sub    esp,0x1c
c00226d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00226dd:	83 ec 08             	sub    esp,0x8
c00226e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00226e4:	50                   	push   eax
c00226e5:	e8 f6 1c ff ff       	call   c00143e0 <Device::Device(char const*)>
c00226ea:	83 c4 10             	add    esp,0x10
c00226ed:	ba ec cc 02 c0       	mov    edx,0xc002ccec
c00226f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00226f6:	89 10                	mov    DWORD PTR [eax],edx
c00226f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00226fc:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022706:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002270a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022714:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002271c:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022721:	7f 19                	jg     c002273c <SoundDevice::SoundDevice(char const*)+0x66>
c0022723:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022727:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002272b:	83 c2 54             	add    edx,0x54
c002272e:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022736:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002273a:	eb e0                	jmp    c002271c <SoundDevice::SoundDevice(char const*)+0x46>
c002273c:	90                   	nop
c002273d:	83 c4 1c             	add    esp,0x1c
c0022740:	c3                   	ret    
c0022741:	90                   	nop

c0022742 <SoundDevice::~SoundDevice()>:
c0022742:	53                   	push   ebx
c0022743:	83 ec 18             	sub    esp,0x18
c0022746:	ba ec cc 02 c0       	mov    edx,0xc002ccec
c002274b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002274f:	89 10                	mov    DWORD PTR [eax],edx
c0022751:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022759:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002275e:	7f 46                	jg     c00227a6 <SoundDevice::~SoundDevice()+0x64>
c0022760:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022764:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022768:	83 c2 54             	add    edx,0x54
c002276b:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c002276f:	85 c0                	test   eax,eax
c0022771:	74 2d                	je     c00227a0 <SoundDevice::~SoundDevice()+0x5e>
c0022773:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022777:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002277b:	83 c2 54             	add    edx,0x54
c002277e:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022782:	85 db                	test   ebx,ebx
c0022784:	74 1a                	je     c00227a0 <SoundDevice::~SoundDevice()+0x5e>
c0022786:	83 ec 0c             	sub    esp,0xc
c0022789:	53                   	push   ebx
c002278a:	e8 21 fc ff ff       	call   c00223b0 <SoundChannel::~SoundChannel()>
c002278f:	83 c4 10             	add    esp,0x10
c0022792:	83 ec 08             	sub    esp,0x8
c0022795:	6a 2c                	push   0x2c
c0022797:	53                   	push   ebx
c0022798:	e8 46 05 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c002279d:	83 c4 10             	add    esp,0x10
c00227a0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00227a4:	eb b3                	jmp    c0022759 <SoundDevice::~SoundDevice()+0x17>
c00227a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227aa:	83 ec 0c             	sub    esp,0xc
c00227ad:	50                   	push   eax
c00227ae:	e8 0f 19 ff ff       	call   c00140c2 <Device::~Device()>
c00227b3:	83 c4 10             	add    esp,0x10
c00227b6:	90                   	nop
c00227b7:	83 c4 18             	add    esp,0x18
c00227ba:	5b                   	pop    ebx
c00227bb:	c3                   	ret    

c00227bc <SoundDevice::~SoundDevice()>:
c00227bc:	83 ec 0c             	sub    esp,0xc
c00227bf:	83 ec 0c             	sub    esp,0xc
c00227c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00227c6:	e8 77 ff ff ff       	call   c0022742 <SoundDevice::~SoundDevice()>
c00227cb:	83 c4 10             	add    esp,0x10
c00227ce:	83 ec 08             	sub    esp,0x8
c00227d1:	68 e4 01 00 00       	push   0x1e4
c00227d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00227da:	e8 04 05 ff ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00227df:	83 c4 10             	add    esp,0x10
c00227e2:	83 c4 0c             	add    esp,0xc
c00227e5:	c3                   	ret    

c00227e6 <SoundDevice::getFreeChannelNum()>:
c00227e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00227ea:	31 c0                	xor    eax,eax
c00227ec:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00227f4:	74 09                	je     c00227ff <SoundDevice::getFreeChannelNum()+0x19>
c00227f6:	40                   	inc    eax
c00227f7:	83 f8 20             	cmp    eax,0x20
c00227fa:	75 f0                	jne    c00227ec <SoundDevice::getFreeChannelNum()+0x6>
c00227fc:	83 c8 ff             	or     eax,0xffffffff
c00227ff:	c3                   	ret    

c0022800 <SoundDevice::addChannel(SoundChannel*)>:
c0022800:	56                   	push   esi
c0022801:	53                   	push   ebx
c0022802:	51                   	push   ecx
c0022803:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022807:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002280b:	53                   	push   ebx
c002280c:	e8 d5 ff ff ff       	call   c00227e6 <SoundDevice::getFreeChannelNum()>
c0022811:	5a                   	pop    edx
c0022812:	83 f8 ff             	cmp    eax,0xffffffff
c0022815:	74 51                	je     c0022868 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022817:	85 f6                	test   esi,esi
c0022819:	74 4d                	je     c0022868 <SoundDevice::addChannel(SoundChannel*)+0x68>
c002281b:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022822:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022829:	75 30                	jne    c002285b <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002282b:	83 ec 0c             	sub    esp,0xc
c002282e:	56                   	push   esi
c002282f:	e8 42 fd ff ff       	call   c0022576 <SoundChannel::getSampleRate()>
c0022834:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002283a:	89 34 24             	mov    DWORD PTR [esp],esi
c002283d:	e8 3c fd ff ff       	call   c002257e <SoundChannel::getBits()>
c0022842:	83 c4 0c             	add    esp,0xc
c0022845:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002284b:	8b 13                	mov    edx,DWORD PTR [ebx]
c002284d:	50                   	push   eax
c002284e:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022854:	53                   	push   ebx
c0022855:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022858:	83 c4 10             	add    esp,0x10
c002285b:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022861:	b8 01 00 00 00       	mov    eax,0x1
c0022866:	eb 03                	jmp    c002286b <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022868:	83 c8 ff             	or     eax,0xffffffff
c002286b:	5a                   	pop    edx
c002286c:	5b                   	pop    ebx
c002286d:	5e                   	pop    esi
c002286e:	c3                   	ret    
c002286f:	90                   	nop

c0022870 <SoundDevice::removeChannel(int)>:
c0022870:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022874:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022878:	83 fa 1f             	cmp    edx,0x1f
c002287b:	77 23                	ja     c00228a0 <SoundDevice::removeChannel(int)+0x30>
c002287d:	8d 14 90             	lea    edx,[eax+edx*4]
c0022880:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022887:	74 17                	je     c00228a0 <SoundDevice::removeChannel(int)+0x30>
c0022889:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022893:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022899:	75 05                	jne    c00228a0 <SoundDevice::removeChannel(int)+0x30>
c002289b:	8b 00                	mov    eax,DWORD PTR [eax]
c002289d:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c00228a0:	c3                   	ret    
c00228a1:	90                   	nop

c00228a2 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00228a2:	57                   	push   edi
c00228a3:	56                   	push   esi
c00228a4:	53                   	push   ebx
c00228a5:	31 db                	xor    ebx,ebx
c00228a7:	83 ec 10             	sub    esp,0x10
c00228aa:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00228ae:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00228b2:	0f 8d cb 00 00 00    	jge    c0022983 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00228b8:	83 ec 0c             	sub    esp,0xc
c00228bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00228bf:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00228c2:	e8 d8 5e 00 00       	call   c002879f <__extendsfdf2>
c00228c7:	83 c4 10             	add    esp,0x10
c00228ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00228ce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00228d2:	68 00 00 f0 3f       	push   0x3ff00000
c00228d7:	6a 00                	push   0x0
c00228d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228e1:	e8 45 4e 00 00       	call   c002772b <__adddf3>
c00228e6:	83 c4 10             	add    esp,0x10
c00228e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00228ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00228f1:	68 00 00 e0 3f       	push   0x3fe00000
c00228f6:	6a 00                	push   0x0
c00228f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022900:	e8 a3 54 00 00       	call   c0027da8 <__muldf3>
c0022905:	83 c4 10             	add    esp,0x10
c0022908:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002290c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022910:	68 00 00 60 40       	push   0x40600000
c0022915:	6a 00                	push   0x0
c0022917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002291b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002291f:	e8 84 54 00 00       	call   c0027da8 <__muldf3>
c0022924:	59                   	pop    ecx
c0022925:	5f                   	pop    edi
c0022926:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002292a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002292e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022932:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022936:	e8 40 5d 00 00       	call   c002867b <__truncdfsf2>
c002293b:	5a                   	pop    edx
c002293c:	89 c7                	mov    edi,eax
c002293e:	59                   	pop    ecx
c002293f:	68 00 00 fe 42       	push   0x42fe0000
c0022944:	50                   	push   eax
c0022945:	e8 db 4d 00 00       	call   c0027725 <__gesf2>
c002294a:	83 c4 10             	add    esp,0x10
c002294d:	85 c0                	test   eax,eax
c002294f:	78 06                	js     c0022957 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022951:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022955:	eb 26                	jmp    c002297d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022957:	50                   	push   eax
c0022958:	50                   	push   eax
c0022959:	6a 00                	push   0x0
c002295b:	57                   	push   edi
c002295c:	e8 c8 4d 00 00       	call   c0027729 <__lesf2>
c0022961:	83 c4 10             	add    esp,0x10
c0022964:	85 c0                	test   eax,eax
c0022966:	7f 06                	jg     c002296e <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022968:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c002296c:	eb 0f                	jmp    c002297d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002296e:	83 ec 0c             	sub    esp,0xc
c0022971:	57                   	push   edi
c0022972:	e8 c5 5e 00 00       	call   c002883c <lrintf>
c0022977:	83 c4 10             	add    esp,0x10
c002297a:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002297d:	43                   	inc    ebx
c002297e:	e9 2b ff ff ff       	jmp    c00228ae <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022983:	83 c4 10             	add    esp,0x10
c0022986:	5b                   	pop    ebx
c0022987:	5e                   	pop    esi
c0022988:	5f                   	pop    edi
c0022989:	c3                   	ret    

c002298a <SoundDevice::getAudio(int, float*, float*)>:
c002298a:	55                   	push   ebp
c002298b:	57                   	push   edi
c002298c:	56                   	push   esi
c002298d:	53                   	push   ebx
c002298e:	31 db                	xor    ebx,ebx
c0022990:	83 ec 20             	sub    esp,0x20
c0022993:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022997:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002299b:	c1 e0 02             	shl    eax,0x2
c002299e:	50                   	push   eax
c002299f:	6a 00                	push   0x0
c00229a1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00229a5:	e8 d6 dd fd ff       	call   c0000780 <memset>
c00229aa:	83 c4 10             	add    esp,0x10
c00229ad:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00229b1:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00229b8:	85 c0                	test   eax,eax
c00229ba:	0f 84 d7 00 00 00    	je     c0022a97 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00229c0:	83 ec 0c             	sub    esp,0xc
c00229c3:	50                   	push   eax
c00229c4:	e8 a5 fb ff ff       	call   c002256e <SoundChannel::paused()>
c00229c9:	83 c4 10             	add    esp,0x10
c00229cc:	84 c0                	test   al,al
c00229ce:	0f 85 c3 00 00 00    	jne    c0022a97 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00229d4:	83 ec 0c             	sub    esp,0xc
c00229d7:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00229de:	e8 19 fa ff ff       	call   c00223fc <SoundChannel::getVolume()>
c00229e3:	83 c4 10             	add    esp,0x10
c00229e6:	85 c0                	test   eax,eax
c00229e8:	0f 84 a9 00 00 00    	je     c0022a97 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00229ee:	83 ec 0c             	sub    esp,0xc
c00229f1:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00229f8:	e8 ff f9 ff ff       	call   c00223fc <SoundChannel::getVolume()>
c00229fd:	83 ec 0c             	sub    esp,0xc
c0022a00:	50                   	push   eax
c0022a01:	e8 c9 4a 00 00       	call   c00274cf <__floatsisf>
c0022a06:	59                   	pop    ecx
c0022a07:	5d                   	pop    ebp
c0022a08:	31 ed                	xor    ebp,ebp
c0022a0a:	68 00 00 c8 42       	push   0x42c80000
c0022a0f:	50                   	push   eax
c0022a10:	e8 8f 48 00 00       	call   c00272a4 <__divsf3>
c0022a15:	83 c4 10             	add    esp,0x10
c0022a18:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022a1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022a20:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022a26:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022a2a:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022a31:	e8 60 fb ff ff       	call   c0022596 <SoundChannel::unbuffer(float*, int, int)>
c0022a36:	83 c4 20             	add    esp,0x20
c0022a39:	89 c1                	mov    ecx,eax
c0022a3b:	39 cd                	cmp    ebp,ecx
c0022a3d:	7d 52                	jge    c0022a91 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022a3f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022a43:	50                   	push   eax
c0022a44:	50                   	push   eax
c0022a45:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0022a49:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022a4c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022a50:	e8 8c 46 00 00       	call   c00270e1 <__mulsf3>
c0022a55:	5a                   	pop    edx
c0022a56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022a5a:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022a60:	e8 6a 4a 00 00       	call   c00274cf <__floatsisf>
c0022a65:	59                   	pop    ecx
c0022a66:	5a                   	pop    edx
c0022a67:	50                   	push   eax
c0022a68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a6c:	e8 33 48 00 00       	call   c00272a4 <__divsf3>
c0022a71:	59                   	pop    ecx
c0022a72:	5a                   	pop    edx
c0022a73:	50                   	push   eax
c0022a74:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022a78:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022a7b:	e8 3e 43 00 00       	call   c0026dbe <__addsf3>
c0022a80:	83 c4 10             	add    esp,0x10
c0022a83:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022a87:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0022a8b:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022a8e:	45                   	inc    ebp
c0022a8f:	eb aa                	jmp    c0022a3b <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022a91:	39 cf                	cmp    edi,ecx
c0022a93:	7e 02                	jle    c0022a97 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022a95:	89 cf                	mov    edi,ecx
c0022a97:	43                   	inc    ebx
c0022a98:	83 fb 20             	cmp    ebx,0x20
c0022a9b:	0f 85 10 ff ff ff    	jne    c00229b1 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022aa1:	83 c4 1c             	add    esp,0x1c
c0022aa4:	89 f8                	mov    eax,edi
c0022aa6:	5b                   	pop    ebx
c0022aa7:	5e                   	pop    esi
c0022aa8:	5f                   	pop    edi
c0022aa9:	5d                   	pop    ebp
c0022aaa:	c3                   	ret    
c0022aab:	90                   	nop

c0022aac <PCI::open(int, int, void*)>:
c0022aac:	83 ec 18             	sub    esp,0x18
c0022aaf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022ab3:	8b 10                	mov    edx,DWORD PTR [eax]
c0022ab5:	50                   	push   eax
c0022ab6:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022ab9:	31 c0                	xor    eax,eax
c0022abb:	83 c4 1c             	add    esp,0x1c
c0022abe:	c3                   	ret    
c0022abf:	90                   	nop

c0022ac0 <PCI::close(int, int, void*)>:
c0022ac0:	31 c0                	xor    eax,eax
c0022ac2:	c3                   	ret    
c0022ac3:	90                   	nop

c0022ac4 <PCI::PCI()>:
c0022ac4:	83 ec 0c             	sub    esp,0xc
c0022ac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022acb:	83 ec 08             	sub    esp,0x8
c0022ace:	68 1c cd 02 c0       	push   0xc002cd1c
c0022ad3:	50                   	push   eax
c0022ad4:	e8 8b 0f ff ff       	call   c0013a64 <Bus::Bus(char const*)>
c0022ad9:	83 c4 10             	add    esp,0x10
c0022adc:	ba 88 cd 02 c0       	mov    edx,0xc002cd88
c0022ae1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ae5:	89 10                	mov    DWORD PTR [eax],edx
c0022ae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aeb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022af1:	0f b6 d0             	movzx  edx,al
c0022af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022af8:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b03:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022b09:	0f b6 d0             	movzx  edx,al
c0022b0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b10:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022b15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b19:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022b1f:	8d 50 01             	lea    edx,[eax+0x1]
c0022b22:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022b26:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022b2c:	0f b6 d0             	movzx  edx,al
c0022b2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b33:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022b37:	83 c9 c0             	or     ecx,0xffffffc0
c0022b3a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022b3e:	90                   	nop
c0022b3f:	83 c4 0c             	add    esp,0xc
c0022b42:	c3                   	ret    
c0022b43:	90                   	nop

c0022b44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022b44:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022b48:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022b4d:	89 ca                	mov    edx,ecx
c0022b4f:	c1 e0 10             	shl    eax,0x10
c0022b52:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022b58:	09 d0                	or     eax,edx
c0022b5a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022b5f:	c1 e2 08             	shl    edx,0x8
c0022b62:	09 d0                	or     eax,edx
c0022b64:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022b69:	c1 e2 0b             	shl    edx,0xb
c0022b6c:	09 d0                	or     eax,edx
c0022b6e:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b73:	0d 00 00 00 80       	or     eax,0x80000000
c0022b78:	ef                   	out    dx,eax
c0022b79:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b7e:	ed                   	in     eax,dx
c0022b7f:	83 e1 02             	and    ecx,0x2
c0022b82:	0f b6 c9             	movzx  ecx,cl
c0022b85:	c1 e1 03             	shl    ecx,0x3
c0022b88:	d3 e8                	shr    eax,cl
c0022b8a:	c3                   	ret    
c0022b8b:	90                   	nop

c0022b8c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022b8c:	6a 00                	push   0x0
c0022b8e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b93:	50                   	push   eax
c0022b94:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b99:	50                   	push   eax
c0022b9a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b9f:	50                   	push   eax
c0022ba0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ba4:	e8 9b ff ff ff       	call   c0022b44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ba9:	83 c4 14             	add    esp,0x14
c0022bac:	c3                   	ret    
c0022bad:	90                   	nop

c0022bae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022bae:	6a 0e                	push   0xe
c0022bb0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022bb5:	50                   	push   eax
c0022bb6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022bbb:	50                   	push   eax
c0022bbc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022bc1:	50                   	push   eax
c0022bc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022bc6:	e8 79 ff ff ff       	call   c0022b44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bcb:	83 c4 14             	add    esp,0x14
c0022bce:	0f b6 c0             	movzx  eax,al
c0022bd1:	c3                   	ret    

c0022bd2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022bd2:	55                   	push   ebp
c0022bd3:	57                   	push   edi
c0022bd4:	56                   	push   esi
c0022bd5:	53                   	push   ebx
c0022bd6:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022bdb:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022be0:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022be5:	6a 0a                	push   0xa
c0022be7:	56                   	push   esi
c0022be8:	55                   	push   ebp
c0022be9:	57                   	push   edi
c0022bea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022bee:	e8 51 ff ff ff       	call   c0022b44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bf3:	6a 0a                	push   0xa
c0022bf5:	89 c3                	mov    ebx,eax
c0022bf7:	56                   	push   esi
c0022bf8:	0f b6 db             	movzx  ebx,bl
c0022bfb:	55                   	push   ebp
c0022bfc:	57                   	push   edi
c0022bfd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022c01:	e8 3e ff ff ff       	call   c0022b44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c06:	83 c4 28             	add    esp,0x28
c0022c09:	25 00 ff 00 00       	and    eax,0xff00
c0022c0e:	09 d8                	or     eax,ebx
c0022c10:	5b                   	pop    ebx
c0022c11:	5e                   	pop    esi
c0022c12:	5f                   	pop    edi
c0022c13:	5d                   	pop    ebp
c0022c14:	c3                   	ret    
c0022c15:	90                   	nop

c0022c16 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022c16:	6a 08                	push   0x8
c0022c18:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022c1d:	50                   	push   eax
c0022c1e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022c23:	50                   	push   eax
c0022c24:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022c29:	50                   	push   eax
c0022c2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022c2e:	e8 11 ff ff ff       	call   c0022b44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c33:	83 c4 14             	add    esp,0x14
c0022c36:	0f b6 c4             	movzx  eax,ah
c0022c39:	c3                   	ret    

c0022c3a <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022c3a:	6a 08                	push   0x8
c0022c3c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022c41:	50                   	push   eax
c0022c42:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022c47:	50                   	push   eax
c0022c48:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022c4d:	50                   	push   eax
c0022c4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022c52:	e8 ed fe ff ff       	call   c0022b44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c57:	83 c4 14             	add    esp,0x14
c0022c5a:	c3                   	ret    
c0022c5b:	90                   	nop

c0022c5c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022c5c:	6a 3c                	push   0x3c
c0022c5e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022c63:	50                   	push   eax
c0022c64:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022c69:	50                   	push   eax
c0022c6a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022c6f:	50                   	push   eax
c0022c70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022c74:	e8 cb fe ff ff       	call   c0022b44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c79:	83 c4 14             	add    esp,0x14
c0022c7c:	c3                   	ret    
c0022c7d:	90                   	nop

c0022c7e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022c7e:	6a 18                	push   0x18
c0022c80:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022c85:	50                   	push   eax
c0022c86:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022c8b:	50                   	push   eax
c0022c8c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022c91:	50                   	push   eax
c0022c92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022c96:	e8 a9 fe ff ff       	call   c0022b44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c9b:	83 c4 14             	add    esp,0x14
c0022c9e:	0f b6 c4             	movzx  eax,ah
c0022ca1:	c3                   	ret    

c0022ca2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022ca2:	55                   	push   ebp
c0022ca3:	57                   	push   edi
c0022ca4:	56                   	push   esi
c0022ca5:	53                   	push   ebx
c0022ca6:	50                   	push   eax
c0022ca7:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022cab:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022cb0:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022cb5:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022cba:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022cc1:	8d 43 12             	lea    eax,[ebx+0x12]
c0022cc4:	83 c3 10             	add    ebx,0x10
c0022cc7:	0f b6 c0             	movzx  eax,al
c0022cca:	0f b6 db             	movzx  ebx,bl
c0022ccd:	50                   	push   eax
c0022cce:	51                   	push   ecx
c0022ccf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022cd3:	57                   	push   edi
c0022cd4:	55                   	push   ebp
c0022cd5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022cd9:	e8 66 fe ff ff       	call   c0022b44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022cde:	53                   	push   ebx
c0022cdf:	89 c6                	mov    esi,eax
c0022ce1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022ce5:	c1 e6 10             	shl    esi,0x10
c0022ce8:	51                   	push   ecx
c0022ce9:	57                   	push   edi
c0022cea:	55                   	push   ebp
c0022ceb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022cef:	e8 50 fe ff ff       	call   c0022b44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022cf4:	83 c4 2c             	add    esp,0x2c
c0022cf7:	0f b7 c0             	movzx  eax,ax
c0022cfa:	5b                   	pop    ebx
c0022cfb:	09 f0                	or     eax,esi
c0022cfd:	5e                   	pop    esi
c0022cfe:	5f                   	pop    edi
c0022cff:	5d                   	pop    ebp
c0022d00:	c3                   	ret    
c0022d01:	90                   	nop

c0022d02 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022d02:	53                   	push   ebx
c0022d03:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022d08:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022d0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022d11:	c1 e1 10             	shl    ecx,0x10
c0022d14:	25 fc 00 00 00       	and    eax,0xfc
c0022d19:	09 c1                	or     ecx,eax
c0022d1b:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022d20:	c1 e0 08             	shl    eax,0x8
c0022d23:	09 c1                	or     ecx,eax
c0022d25:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022d2a:	c1 e0 0b             	shl    eax,0xb
c0022d2d:	09 c1                	or     ecx,eax
c0022d2f:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022d35:	89 c8                	mov    eax,ecx
c0022d37:	ef                   	out    dx,eax
c0022d38:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022d3d:	ed                   	in     eax,dx
c0022d3e:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022d43:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022d48:	74 0a                	je     c0022d54 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022d4a:	0f b7 d8             	movzx  ebx,ax
c0022d4d:	89 d0                	mov    eax,edx
c0022d4f:	c1 e0 10             	shl    eax,0x10
c0022d52:	eb 05                	jmp    c0022d59 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022d54:	66 31 c0             	xor    ax,ax
c0022d57:	89 d3                	mov    ebx,edx
c0022d59:	09 c3                	or     ebx,eax
c0022d5b:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022d60:	89 c8                	mov    eax,ecx
c0022d62:	ef                   	out    dx,eax
c0022d63:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022d68:	89 d8                	mov    eax,ebx
c0022d6a:	ef                   	out    dx,eax
c0022d6b:	5b                   	pop    ebx
c0022d6c:	c3                   	ret    
c0022d6d:	90                   	nop

c0022d6e <PCI::checkBus(unsigned char)>:
c0022d6e:	56                   	push   esi
c0022d6f:	53                   	push   ebx
c0022d70:	31 db                	xor    ebx,ebx
c0022d72:	51                   	push   ecx
c0022d73:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022d78:	52                   	push   edx
c0022d79:	53                   	push   ebx
c0022d7a:	43                   	inc    ebx
c0022d7b:	56                   	push   esi
c0022d7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d80:	e8 2b 03 00 00       	call   c00230b0 <PCI::checkDevice(unsigned char, unsigned char)>
c0022d85:	83 c4 10             	add    esp,0x10
c0022d88:	83 fb 20             	cmp    ebx,0x20
c0022d8b:	75 eb                	jne    c0022d78 <PCI::checkBus(unsigned char)+0xa>
c0022d8d:	58                   	pop    eax
c0022d8e:	5b                   	pop    ebx
c0022d8f:	5e                   	pop    esi
c0022d90:	c3                   	ret    
c0022d91:	90                   	nop

c0022d92 <PCI::foundDevice(PCIDeviceInfo)>:
c0022d92:	55                   	push   ebp
c0022d93:	57                   	push   edi
c0022d94:	56                   	push   esi
c0022d95:	53                   	push   ebx
c0022d96:	83 ec 1c             	sub    esp,0x1c
c0022d99:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022d9d:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022da3:	0f 84 52 01 00 00    	je     c0022efb <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022da9:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022dad:	66 81 f9 06 04       	cmp    cx,0x406
c0022db2:	75 2c                	jne    c0022de0 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022db4:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022db9:	50                   	push   eax
c0022dba:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022dbf:	50                   	push   eax
c0022dc0:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022dc5:	50                   	push   eax
c0022dc6:	56                   	push   esi
c0022dc7:	e8 b2 fe ff ff       	call   c0022c7e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022dcc:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022dd0:	0f b6 c0             	movzx  eax,al
c0022dd3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022dd7:	83 c4 2c             	add    esp,0x2c
c0022dda:	5b                   	pop    ebx
c0022ddb:	5e                   	pop    esi
c0022ddc:	5f                   	pop    edi
c0022ddd:	5d                   	pop    ebp
c0022dde:	eb 8e                	jmp    c0022d6e <PCI::checkBus(unsigned char)>
c0022de0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022de4:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022dea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022dee:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022df2:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022df6:	88 d3                	mov    bl,dl
c0022df8:	85 c0                	test   eax,eax
c0022dfa:	74 33                	je     c0022e2f <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022dfc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022dff:	85 d2                	test   edx,edx
c0022e01:	74 28                	je     c0022e2b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022e03:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022e09:	31 ef                	xor    edi,ebp
c0022e0b:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022e11:	75 18                	jne    c0022e2b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022e13:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022e17:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022e1d:	75 0c                	jne    c0022e2b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022e1f:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022e25:	0f 84 d0 00 00 00    	je     c0022efb <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022e2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e2d:	eb c9                	jmp    c0022df8 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022e2f:	66 81 f9 01 06       	cmp    cx,0x601
c0022e34:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022e38:	75 19                	jne    c0022e53 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022e3a:	83 ec 0c             	sub    esp,0xc
c0022e3d:	68 64 01 00 00       	push   0x164
c0022e42:	e8 04 ca fe ff       	call   c000f84b <malloc>
c0022e47:	89 c5                	mov    ebp,eax
c0022e49:	89 04 24             	mov    DWORD PTR [esp],eax
c0022e4c:	e8 95 0f 00 00       	call   c0023de6 <SATABus::SATABus()>
c0022e51:	eb 1e                	jmp    c0022e71 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022e53:	66 81 f9 01 01       	cmp    cx,0x101
c0022e58:	75 60                	jne    c0022eba <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022e5a:	83 ec 0c             	sub    esp,0xc
c0022e5d:	68 70 02 00 00       	push   0x270
c0022e62:	e8 e4 c9 fe ff       	call   c000f84b <malloc>
c0022e67:	89 c5                	mov    ebp,eax
c0022e69:	89 04 24             	mov    DWORD PTR [esp],eax
c0022e6c:	e8 03 03 00 00       	call   c0023174 <IDE::IDE()>
c0022e71:	58                   	pop    eax
c0022e72:	5a                   	pop    edx
c0022e73:	55                   	push   ebp
c0022e74:	56                   	push   esi
c0022e75:	e8 76 13 ff ff       	call   c00141f0 <Device::addChild(Device*)>
c0022e7a:	83 ec 1c             	sub    esp,0x1c
c0022e7d:	b9 09 00 00 00       	mov    ecx,0x9
c0022e82:	fc                   	cld    
c0022e83:	89 e7                	mov    edi,esp
c0022e85:	89 de                	mov    esi,ebx
c0022e87:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022e89:	55                   	push   ebp
c0022e8a:	e8 6b 12 ff ff       	call   c00140fa <Device::preOpenPCI(PCIDeviceInfo)>
c0022e8f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022e92:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022e96:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022e9e:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022ea6:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022eae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022eb1:	83 c4 4c             	add    esp,0x4c
c0022eb4:	5b                   	pop    ebx
c0022eb5:	5e                   	pop    esi
c0022eb6:	5f                   	pop    edi
c0022eb7:	5d                   	pop    ebp
c0022eb8:	ff e0                	jmp    eax
c0022eba:	83 ec 0c             	sub    esp,0xc
c0022ebd:	68 58 01 00 00       	push   0x158
c0022ec2:	e8 84 c9 fe ff       	call   c000f84b <malloc>
c0022ec7:	89 c5                	mov    ebp,eax
c0022ec9:	58                   	pop    eax
c0022eca:	5a                   	pop    edx
c0022ecb:	68 24 cd 02 c0       	push   0xc002cd24
c0022ed0:	55                   	push   ebp
c0022ed1:	e8 10 16 ff ff       	call   c00144e6 <DriverlessDevice::DriverlessDevice(char const*)>
c0022ed6:	59                   	pop    ecx
c0022ed7:	5f                   	pop    edi
c0022ed8:	55                   	push   ebp
c0022ed9:	56                   	push   esi
c0022eda:	e8 11 13 ff ff       	call   c00141f0 <Device::addChild(Device*)>
c0022edf:	b9 09 00 00 00       	mov    ecx,0x9
c0022ee4:	fc                   	cld    
c0022ee5:	89 df                	mov    edi,ebx
c0022ee7:	89 de                	mov    esi,ebx
c0022ee9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022eeb:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022eef:	83 c4 2c             	add    esp,0x2c
c0022ef2:	5b                   	pop    ebx
c0022ef3:	5e                   	pop    esi
c0022ef4:	5f                   	pop    edi
c0022ef5:	5d                   	pop    ebp
c0022ef6:	e9 ff 11 ff ff       	jmp    c00140fa <Device::preOpenPCI(PCIDeviceInfo)>
c0022efb:	83 c4 1c             	add    esp,0x1c
c0022efe:	5b                   	pop    ebx
c0022eff:	5e                   	pop    esi
c0022f00:	5f                   	pop    edi
c0022f01:	5d                   	pop    ebp
c0022f02:	c3                   	ret    
c0022f03:	90                   	nop

c0022f04 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022f04:	55                   	push   ebp
c0022f05:	57                   	push   edi
c0022f06:	56                   	push   esi
c0022f07:	53                   	push   ebx
c0022f08:	83 ec 5c             	sub    esp,0x5c
c0022f0b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022f0f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022f13:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022f17:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022f1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022f20:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022f24:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022f29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022f2d:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022f32:	6a 0c                	push   0xc
c0022f34:	55                   	push   ebp
c0022f35:	53                   	push   ebx
c0022f36:	57                   	push   edi
c0022f37:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022f3e:	e8 01 fc ff ff       	call   c0022b44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f43:	55                   	push   ebp
c0022f44:	53                   	push   ebx
c0022f45:	57                   	push   edi
c0022f46:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022f4d:	e8 80 fc ff ff       	call   c0022bd2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022f52:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022f57:	83 c4 24             	add    esp,0x24
c0022f5a:	55                   	push   ebp
c0022f5b:	53                   	push   ebx
c0022f5c:	57                   	push   edi
c0022f5d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022f61:	e8 f6 fc ff ff       	call   c0022c5c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022f66:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022f6a:	6a 3c                	push   0x3c
c0022f6c:	55                   	push   ebp
c0022f6d:	53                   	push   ebx
c0022f6e:	57                   	push   edi
c0022f6f:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022f76:	e8 c9 fb ff ff       	call   c0022b44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f7b:	0f b6 c4             	movzx  eax,ah
c0022f7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022f82:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022f86:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022f8a:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0022f8f:	83 c4 24             	add    esp,0x24
c0022f92:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022f98:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022f9f:	74 6c                	je     c002300d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022fa1:	31 f6                	xor    esi,esi
c0022fa3:	8b 15 28 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e728
c0022fa9:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022faf:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022fb5:	7e 56                	jle    c002300d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022fb7:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022fba:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022fc1:	39 cb                	cmp    ebx,ecx
c0022fc3:	75 45                	jne    c002300a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022fc5:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022fcc:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022fd0:	75 38                	jne    c002300a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022fd2:	83 ec 0c             	sub    esp,0xc
c0022fd5:	68 3e cd 02 c0       	push   0xc002cd3e
c0022fda:	e8 e4 fd fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0022fdf:	8b 15 28 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e728
c0022fe5:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022feb:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022ff3:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022ff7:	52                   	push   edx
c0022ff8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022ffc:	53                   	push   ebx
c0022ffd:	68 63 cd 02 c0       	push   0xc002cd63
c0023002:	e8 bc fd fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023007:	83 c4 20             	add    esp,0x20
c002300a:	46                   	inc    esi
c002300b:	eb 96                	jmp    c0022fa3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c002300d:	31 d2                	xor    edx,edx
c002300f:	83 ec 0c             	sub    esp,0xc
c0023012:	55                   	push   ebp
c0023013:	53                   	push   ebx
c0023014:	57                   	push   edi
c0023015:	52                   	push   edx
c0023016:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002301a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0023021:	e8 7c fc ff ff       	call   c0022ca2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023026:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c002302a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002302e:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0023032:	42                   	inc    edx
c0023033:	83 c4 20             	add    esp,0x20
c0023036:	83 fa 06             	cmp    edx,0x6
c0023039:	75 d4                	jne    c002300f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c002303b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002303f:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0023043:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0023047:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c002304b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002304f:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0023053:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0023058:	86 e0                	xchg   al,ah
c002305a:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c002305f:	55                   	push   ebp
c0023060:	53                   	push   ebx
c0023061:	57                   	push   edi
c0023062:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0023066:	e8 ab fb ff ff       	call   c0022c16 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002306b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002306f:	55                   	push   ebp
c0023070:	53                   	push   ebx
c0023071:	57                   	push   edi
c0023072:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0023079:	e8 0e fb ff ff       	call   c0022b8c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002307e:	83 ec 0c             	sub    esp,0xc
c0023081:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0023086:	b9 09 00 00 00       	mov    ecx,0x9
c002308b:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c002308f:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0023093:	fc                   	cld    
c0023094:	89 e7                	mov    edi,esp
c0023096:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023098:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002309f:	e8 ee fc ff ff       	call   c0022d92 <PCI::foundDevice(PCIDeviceInfo)>
c00230a4:	81 c4 8c 00 00 00    	add    esp,0x8c
c00230aa:	5b                   	pop    ebx
c00230ab:	5e                   	pop    esi
c00230ac:	5f                   	pop    edi
c00230ad:	5d                   	pop    ebp
c00230ae:	c3                   	ret    
c00230af:	90                   	nop

c00230b0 <PCI::checkDevice(unsigned char, unsigned char)>:
c00230b0:	55                   	push   ebp
c00230b1:	57                   	push   edi
c00230b2:	56                   	push   esi
c00230b3:	53                   	push   ebx
c00230b4:	83 ec 0c             	sub    esp,0xc
c00230b7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00230bb:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00230c0:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00230c5:	6a 00                	push   0x0
c00230c7:	56                   	push   esi
c00230c8:	57                   	push   edi
c00230c9:	55                   	push   ebp
c00230ca:	e8 bd fa ff ff       	call   c0022b8c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00230cf:	6a 00                	push   0x0
c00230d1:	56                   	push   esi
c00230d2:	57                   	push   edi
c00230d3:	55                   	push   ebp
c00230d4:	e8 2b fe ff ff       	call   c0022f04 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00230d9:	83 c4 20             	add    esp,0x20
c00230dc:	6a 00                	push   0x0
c00230de:	56                   	push   esi
c00230df:	57                   	push   edi
c00230e0:	55                   	push   ebp
c00230e1:	e8 c8 fa ff ff       	call   c0022bae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00230e6:	83 c4 10             	add    esp,0x10
c00230e9:	84 c0                	test   al,al
c00230eb:	79 27                	jns    c0023114 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00230ed:	bb 01 00 00 00       	mov    ebx,0x1
c00230f2:	53                   	push   ebx
c00230f3:	56                   	push   esi
c00230f4:	57                   	push   edi
c00230f5:	55                   	push   ebp
c00230f6:	e8 91 fa ff ff       	call   c0022b8c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00230fb:	83 c4 10             	add    esp,0x10
c00230fe:	66 40                	inc    ax
c0023100:	74 0c                	je     c002310e <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0023102:	53                   	push   ebx
c0023103:	56                   	push   esi
c0023104:	57                   	push   edi
c0023105:	55                   	push   ebp
c0023106:	e8 f9 fd ff ff       	call   c0022f04 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002310b:	83 c4 10             	add    esp,0x10
c002310e:	43                   	inc    ebx
c002310f:	83 fb 08             	cmp    ebx,0x8
c0023112:	75 de                	jne    c00230f2 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0023114:	83 c4 0c             	add    esp,0xc
c0023117:	5b                   	pop    ebx
c0023118:	5e                   	pop    esi
c0023119:	5f                   	pop    edi
c002311a:	5d                   	pop    ebp
c002311b:	c3                   	ret    

c002311c <PCI::detect()>:
c002311c:	56                   	push   esi
c002311d:	53                   	push   ebx
c002311e:	53                   	push   ebx
c002311f:	31 db                	xor    ebx,ebx
c0023121:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023125:	6a 00                	push   0x0
c0023127:	6a 00                	push   0x0
c0023129:	6a 00                	push   0x0
c002312b:	56                   	push   esi
c002312c:	e8 7d fa ff ff       	call   c0022bae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023131:	83 c4 10             	add    esp,0x10
c0023134:	a8 80                	test   al,0x80
c0023136:	75 21                	jne    c0023159 <PCI::detect()+0x3d>
c0023138:	51                   	push   ecx
c0023139:	51                   	push   ecx
c002313a:	6a 00                	push   0x0
c002313c:	56                   	push   esi
c002313d:	e8 2c fc ff ff       	call   c0022d6e <PCI::checkBus(unsigned char)>
c0023142:	83 c4 10             	add    esp,0x10
c0023145:	eb 24                	jmp    c002316b <PCI::detect()+0x4f>
c0023147:	52                   	push   edx
c0023148:	52                   	push   edx
c0023149:	53                   	push   ebx
c002314a:	43                   	inc    ebx
c002314b:	56                   	push   esi
c002314c:	e8 1d fc ff ff       	call   c0022d6e <PCI::checkBus(unsigned char)>
c0023151:	83 c4 10             	add    esp,0x10
c0023154:	83 fb 08             	cmp    ebx,0x8
c0023157:	74 12                	je     c002316b <PCI::detect()+0x4f>
c0023159:	53                   	push   ebx
c002315a:	6a 00                	push   0x0
c002315c:	6a 00                	push   0x0
c002315e:	56                   	push   esi
c002315f:	e8 28 fa ff ff       	call   c0022b8c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023164:	83 c4 10             	add    esp,0x10
c0023167:	66 40                	inc    ax
c0023169:	74 dc                	je     c0023147 <PCI::detect()+0x2b>
c002316b:	58                   	pop    eax
c002316c:	5b                   	pop    ebx
c002316d:	5e                   	pop    esi
c002316e:	c3                   	ret    
c002316f:	90                   	nop

c0023170 <IDE::close(int, int, void*)>:
c0023170:	83 c8 ff             	or     eax,0xffffffff
c0023173:	c3                   	ret    

c0023174 <IDE::IDE()>:
c0023174:	83 ec 0c             	sub    esp,0xc
c0023177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002317b:	83 ec 08             	sub    esp,0x8
c002317e:	68 ac cd 02 c0       	push   0xc002cdac
c0023183:	50                   	push   eax
c0023184:	e8 f3 13 ff ff       	call   c001457c <HardDiskController::HardDiskController(char const*)>
c0023189:	83 c4 10             	add    esp,0x10
c002318c:	ba ec cf 02 c0       	mov    edx,0xc002cfec
c0023191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023195:	89 10                	mov    DWORD PTR [eax],edx
c0023197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002319b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00231a2:	90                   	nop
c00231a3:	83 c4 0c             	add    esp,0xc
c00231a6:	c3                   	ret    
c00231a7:	90                   	nop

c00231a8 <IDE::prepareInterrupt(unsigned char)>:
c00231a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00231ad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00231b1:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00231b9:	c3                   	ret    

c00231ba <selectDrive(unsigned char, unsigned char)>:
c00231ba:	c3                   	ret    
c00231bb:	90                   	nop

c00231bc <IDE::getBase(unsigned char)>:
c00231bc:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00231c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00231c5:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00231cd:	c3                   	ret    

c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00231ce:	55                   	push   ebp
c00231cf:	57                   	push   edi
c00231d0:	56                   	push   esi
c00231d1:	53                   	push   ebx
c00231d2:	83 ec 1c             	sub    esp,0x1c
c00231d5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00231d9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00231dd:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00231e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00231e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00231e8:	80 f9 03             	cmp    cl,0x3
c00231eb:	77 51                	ja     c002323e <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00231ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00231f1:	0f b6 f2             	movzx  esi,dl
c00231f4:	0f b6 db             	movzx  ebx,bl
c00231f7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00231fa:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00231fe:	83 ca 80             	or     edx,0xffffff80
c0023201:	0f b6 d2             	movzx  edx,dl
c0023204:	52                   	push   edx
c0023205:	6a 0c                	push   0xc
c0023207:	56                   	push   esi
c0023208:	57                   	push   edi
c0023209:	e8 c0 ff ff ff       	call   c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c002320e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023213:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023217:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002321b:	ee                   	out    dx,al
c002321c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023221:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023225:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023229:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002322d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023235:	83 c4 2c             	add    esp,0x2c
c0023238:	5b                   	pop    ebx
c0023239:	5e                   	pop    esi
c002323a:	5f                   	pop    edi
c002323b:	5d                   	pop    ebp
c002323c:	eb 90                	jmp    c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c002323e:	80 fb 07             	cmp    bl,0x7
c0023241:	77 12                	ja     c0023255 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023243:	0f b6 d2             	movzx  edx,dl
c0023246:	0f b6 db             	movzx  ebx,bl
c0023249:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023251:	89 da                	mov    edx,ebx
c0023253:	eb 2f                	jmp    c0023284 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023255:	80 fb 0d             	cmp    bl,0xd
c0023258:	77 13                	ja     c002326d <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002325a:	0f b6 d2             	movzx  edx,dl
c002325d:	0f b6 db             	movzx  ebx,bl
c0023260:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023267:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002326b:	eb 17                	jmp    c0023284 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002326d:	80 fb 15             	cmp    bl,0x15
c0023270:	77 13                	ja     c0023285 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023272:	0f b6 d2             	movzx  edx,dl
c0023275:	0f b6 db             	movzx  ebx,bl
c0023278:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023280:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023284:	ee                   	out    dx,al
c0023285:	83 c4 1c             	add    esp,0x1c
c0023288:	5b                   	pop    ebx
c0023289:	5e                   	pop    esi
c002328a:	5f                   	pop    edi
c002328b:	5d                   	pop    ebp
c002328c:	c3                   	ret    
c002328d:	90                   	nop

c002328e <IDE::read(unsigned char, unsigned char)>:
c002328e:	55                   	push   ebp
c002328f:	57                   	push   edi
c0023290:	56                   	push   esi
c0023291:	53                   	push   ebx
c0023292:	83 ec 1c             	sub    esp,0x1c
c0023295:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023299:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002329d:	8d 43 f8             	lea    eax,[ebx-0x8]
c00232a0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00232a4:	3c 03                	cmp    al,0x3
c00232a6:	77 43                	ja     c00232eb <IDE::read(unsigned char, unsigned char)+0x5d>
c00232a8:	0f b6 f2             	movzx  esi,dl
c00232ab:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00232ae:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00232b2:	83 c8 80             	or     eax,0xffffff80
c00232b5:	0f b6 c0             	movzx  eax,al
c00232b8:	50                   	push   eax
c00232b9:	6a 0c                	push   0xc
c00232bb:	56                   	push   esi
c00232bc:	57                   	push   edi
c00232bd:	e8 0c ff ff ff       	call   c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00232c2:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00232c7:	0f b6 c3             	movzx  eax,bl
c00232ca:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00232ce:	ec                   	in     al,dx
c00232cf:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00232d3:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00232d8:	52                   	push   edx
c00232d9:	6a 0c                	push   0xc
c00232db:	56                   	push   esi
c00232dc:	57                   	push   edi
c00232dd:	e8 ec fe ff ff       	call   c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00232e2:	83 c4 20             	add    esp,0x20
c00232e5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00232e9:	eb 49                	jmp    c0023334 <IDE::read(unsigned char, unsigned char)+0xa6>
c00232eb:	80 fb 07             	cmp    bl,0x7
c00232ee:	77 12                	ja     c0023302 <IDE::read(unsigned char, unsigned char)+0x74>
c00232f0:	0f b6 d2             	movzx  edx,dl
c00232f3:	0f b6 c3             	movzx  eax,bl
c00232f6:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00232fe:	89 c2                	mov    edx,eax
c0023300:	eb 31                	jmp    c0023333 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023302:	80 fb 0d             	cmp    bl,0xd
c0023305:	77 13                	ja     c002331a <IDE::read(unsigned char, unsigned char)+0x8c>
c0023307:	0f b6 d2             	movzx  edx,dl
c002330a:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023311:	0f b6 d3             	movzx  edx,bl
c0023314:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023318:	eb 19                	jmp    c0023333 <IDE::read(unsigned char, unsigned char)+0xa5>
c002331a:	31 c0                	xor    eax,eax
c002331c:	80 fb 15             	cmp    bl,0x15
c002331f:	77 13                	ja     c0023334 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023321:	0f b6 d2             	movzx  edx,dl
c0023324:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c002332c:	0f b6 d3             	movzx  edx,bl
c002332f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023333:	ec                   	in     al,dx
c0023334:	83 c4 1c             	add    esp,0x1c
c0023337:	5b                   	pop    ebx
c0023338:	5e                   	pop    esi
c0023339:	5f                   	pop    edi
c002333a:	5d                   	pop    ebp
c002333b:	c3                   	ret    

c002333c <IDE::waitInterrupt(unsigned char)>:
c002333c:	55                   	push   ebp
c002333d:	57                   	push   edi
c002333e:	56                   	push   esi
c002333f:	53                   	push   ebx
c0023340:	31 db                	xor    ebx,ebx
c0023342:	83 ec 0c             	sub    esp,0xc
c0023345:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023349:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002334e:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023356:	89 e8                	mov    eax,ebp
c0023358:	84 c0                	test   al,al
c002335a:	75 34                	jne    c0023390 <IDE::waitInterrupt(unsigned char)+0x54>
c002335c:	52                   	push   edx
c002335d:	6a 0c                	push   0xc
c002335f:	56                   	push   esi
c0023360:	57                   	push   edi
c0023361:	e8 28 ff ff ff       	call   c002328e <IDE::read(unsigned char, unsigned char)>
c0023366:	83 c4 10             	add    esp,0x10
c0023369:	a8 01                	test   al,0x1
c002336b:	75 2b                	jne    c0023398 <IDE::waitInterrupt(unsigned char)+0x5c>
c002336d:	f6 c3 04             	test   bl,0x4
c0023370:	75 16                	jne    c0023388 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023372:	83 fb 32             	cmp    ebx,0x32
c0023375:	7e 11                	jle    c0023388 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023377:	50                   	push   eax
c0023378:	50                   	push   eax
c0023379:	6a 00                	push   0x0
c002337b:	68 80 96 98 00       	push   0x989680
c0023380:	e8 31 b0 ff ff       	call   c001e3b6 <nanoSleep(unsigned long long)>
c0023385:	83 c4 10             	add    esp,0x10
c0023388:	83 fb 3c             	cmp    ebx,0x3c
c002338b:	74 0b                	je     c0023398 <IDE::waitInterrupt(unsigned char)+0x5c>
c002338d:	43                   	inc    ebx
c002338e:	eb be                	jmp    c002334e <IDE::waitInterrupt(unsigned char)+0x12>
c0023390:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023398:	83 c4 0c             	add    esp,0xc
c002339b:	89 e8                	mov    eax,ebp
c002339d:	5b                   	pop    ebx
c002339e:	5e                   	pop    esi
c002339f:	5f                   	pop    edi
c00233a0:	5d                   	pop    ebp
c00233a1:	c3                   	ret    

c00233a2 <ideChannel0IRQHandler(regs*, void*)>:
c00233a2:	83 ec 10             	sub    esp,0x10
c00233a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00233a9:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00233b0:	6a 07                	push   0x7
c00233b2:	6a 00                	push   0x0
c00233b4:	50                   	push   eax
c00233b5:	e8 d4 fe ff ff       	call   c002328e <IDE::read(unsigned char, unsigned char)>
c00233ba:	83 c4 1c             	add    esp,0x1c
c00233bd:	c3                   	ret    

c00233be <ideChannel1IRQHandler(regs*, void*)>:
c00233be:	83 ec 10             	sub    esp,0x10
c00233c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00233c5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00233cc:	6a 07                	push   0x7
c00233ce:	6a 01                	push   0x1
c00233d0:	50                   	push   eax
c00233d1:	e8 b8 fe ff ff       	call   c002328e <IDE::read(unsigned char, unsigned char)>
c00233d6:	83 c4 1c             	add    esp,0x1c
c00233d9:	c3                   	ret    

c00233da <IDE::enableIRQs(unsigned char, bool)>:
c00233da:	57                   	push   edi
c00233db:	56                   	push   esi
c00233dc:	be 04 00 00 00       	mov    esi,0x4
c00233e1:	53                   	push   ebx
c00233e2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00233e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00233eb:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00233f0:	0f 94 c0             	sete   al
c00233f3:	d1 e0                	shl    eax,1
c00233f5:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00233fc:	0f b6 c0             	movzx  eax,al
c00233ff:	50                   	push   eax
c0023400:	6a 0c                	push   0xc
c0023402:	57                   	push   edi
c0023403:	53                   	push   ebx
c0023404:	e8 c5 fd ff ff       	call   c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023409:	83 c4 10             	add    esp,0x10
c002340c:	50                   	push   eax
c002340d:	6a 0c                	push   0xc
c002340f:	57                   	push   edi
c0023410:	53                   	push   ebx
c0023411:	e8 78 fe ff ff       	call   c002328e <IDE::read(unsigned char, unsigned char)>
c0023416:	83 c4 10             	add    esp,0x10
c0023419:	4e                   	dec    esi
c002341a:	75 f0                	jne    c002340c <IDE::enableIRQs(unsigned char, bool)+0x32>
c002341c:	5b                   	pop    ebx
c002341d:	5e                   	pop    esi
c002341e:	5f                   	pop    edi
c002341f:	c3                   	ret    

c0023420 <IDE::open(int, int, void*)>:
c0023420:	55                   	push   ebp
c0023421:	57                   	push   edi
c0023422:	56                   	push   esi
c0023423:	53                   	push   ebx
c0023424:	83 ec 1c             	sub    esp,0x1c
c0023427:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002342b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023434:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002343d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023444:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002344b:	0f 85 b0 02 00 00    	jne    c0023701 <IDE::open(int, int, void*)+0x2e1>
c0023451:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023457:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c002345b:	83 e0 7f             	and    eax,0x7f
c002345e:	3c 05                	cmp    al,0x5
c0023460:	74 04                	je     c0023466 <IDE::open(int, int, void*)+0x46>
c0023462:	3c 0f                	cmp    al,0xf
c0023464:	75 32                	jne    c0023498 <IDE::open(int, int, void*)+0x78>
c0023466:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002346c:	83 e0 fc             	and    eax,0xfffffffc
c002346f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023476:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002347c:	83 e0 fc             	and    eax,0xfffffffc
c002347f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023486:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002348c:	83 e0 fc             	and    eax,0xfffffffc
c002348f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023496:	eb 14                	jmp    c00234ac <IDE::open(int, int, void*)+0x8c>
c0023498:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00234a2:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00234ac:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00234b3:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00234ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00234be:	89 c6                	mov    esi,eax
c00234c0:	bf f8 0c 00 00       	mov    edi,0xcf8
c00234c5:	c1 e6 10             	shl    esi,0x10
c00234c8:	89 e8                	mov    eax,ebp
c00234ca:	89 fa                	mov    edx,edi
c00234cc:	c1 e0 0b             	shl    eax,0xb
c00234cf:	09 f0                	or     eax,esi
c00234d1:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00234d8:	c1 e6 08             	shl    esi,0x8
c00234db:	09 c6                	or     esi,eax
c00234dd:	89 f0                	mov    eax,esi
c00234df:	0d 08 00 00 80       	or     eax,0x80000008
c00234e4:	ef                   	out    dx,eax
c00234e5:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00234ea:	89 ca                	mov    edx,ecx
c00234ec:	ed                   	in     eax,dx
c00234ed:	c1 e8 10             	shr    eax,0x10
c00234f0:	3d ff ff 00 00       	cmp    eax,0xffff
c00234f5:	0f 84 f5 00 00 00    	je     c00235f0 <IDE::open(int, int, void*)+0x1d0>
c00234fb:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023501:	89 fa                	mov    edx,edi
c0023503:	89 f0                	mov    eax,esi
c0023505:	ef                   	out    dx,eax
c0023506:	b0 fe                	mov    al,0xfe
c0023508:	89 ca                	mov    edx,ecx
c002350a:	ee                   	out    dx,al
c002350b:	89 f0                	mov    eax,esi
c002350d:	89 fa                	mov    edx,edi
c002350f:	ef                   	out    dx,eax
c0023510:	89 ca                	mov    edx,ecx
c0023512:	ed                   	in     eax,dx
c0023513:	3c fe                	cmp    al,0xfe
c0023515:	0f 85 a9 00 00 00    	jne    c00235c4 <IDE::open(int, int, void*)+0x1a4>
c002351b:	8b 15 28 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e728
c0023521:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023528:	74 33                	je     c002355d <IDE::open(int, int, void*)+0x13d>
c002352a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023530:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023534:	40                   	inc    eax
c0023535:	83 ec 0c             	sub    esp,0xc
c0023538:	0f b6 c0             	movzx  eax,al
c002353b:	50                   	push   eax
c002353c:	55                   	push   ebp
c002353d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023541:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023547:	51                   	push   ecx
c0023548:	e8 8f 4c ff ff       	call   c00181dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002354d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023552:	83 c4 1c             	add    esp,0x1c
c0023555:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002355b:	eb 0a                	jmp    c0023567 <IDE::open(int, int, void*)+0x147>
c002355d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023567:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002356e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023575:	c1 e1 10             	shl    ecx,0x10
c0023578:	c1 e0 08             	shl    eax,0x8
c002357b:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023580:	09 c1                	or     ecx,eax
c0023582:	89 fa                	mov    edx,edi
c0023584:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002358b:	c1 e0 0b             	shl    eax,0xb
c002358e:	09 c1                	or     ecx,eax
c0023590:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023596:	89 c8                	mov    eax,ecx
c0023598:	ef                   	out    dx,eax
c0023599:	be fc 0c 00 00       	mov    esi,0xcfc
c002359e:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00235a4:	89 f2                	mov    edx,esi
c00235a6:	ee                   	out    dx,al
c00235a7:	89 c8                	mov    eax,ecx
c00235a9:	89 fa                	mov    edx,edi
c00235ab:	ef                   	out    dx,eax
c00235ac:	89 f2                	mov    edx,esi
c00235ae:	ed                   	in     eax,dx
c00235af:	0f b6 c0             	movzx  eax,al
c00235b2:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00235b8:	74 46                	je     c0023600 <IDE::open(int, int, void*)+0x1e0>
c00235ba:	83 ec 0c             	sub    esp,0xc
c00235bd:	68 c4 cd 02 c0       	push   0xc002cdc4
c00235c2:	eb 34                	jmp    c00235f8 <IDE::open(int, int, void*)+0x1d8>
c00235c4:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00235cd:	75 17                	jne    c00235e6 <IDE::open(int, int, void*)+0x1c6>
c00235cf:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00235d4:	74 07                	je     c00235dd <IDE::open(int, int, void*)+0x1bd>
c00235d6:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00235db:	75 09                	jne    c00235e6 <IDE::open(int, int, void*)+0x1c6>
c00235dd:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00235e4:	eb 1a                	jmp    c0023600 <IDE::open(int, int, void*)+0x1e0>
c00235e6:	83 ec 0c             	sub    esp,0xc
c00235e9:	68 cc cd 02 c0       	push   0xc002cdcc
c00235ee:	eb 08                	jmp    c00235f8 <IDE::open(int, int, void*)+0x1d8>
c00235f0:	83 ec 0c             	sub    esp,0xc
c00235f3:	68 fd cd 02 c0       	push   0xc002cdfd
c00235f8:	e8 92 6f ff ff       	call   c001a58f <Krnl::panic(char const*)>
c00235fd:	83 c4 10             	add    esp,0x10
c0023600:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023607:	79 1a                	jns    c0023623 <IDE::open(int, int, void*)+0x203>
c0023609:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002360f:	83 e0 fc             	and    eax,0xfffffffc
c0023612:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023619:	83 c0 08             	add    eax,0x8
c002361c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023623:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023629:	89 c2                	mov    edx,eax
c002362b:	83 e2 0f             	and    edx,0xf
c002362e:	66 83 fa 08          	cmp    dx,0x8
c0023632:	75 0a                	jne    c002363e <IDE::open(int, int, void*)+0x21e>
c0023634:	83 e8 02             	sub    eax,0x2
c0023637:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002363e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023644:	89 c2                	mov    edx,eax
c0023646:	83 e2 0f             	and    edx,0xf
c0023649:	66 83 fa 08          	cmp    dx,0x8
c002364d:	75 0a                	jne    c0023659 <IDE::open(int, int, void*)+0x239>
c002364f:	83 e8 02             	sub    eax,0x2
c0023652:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023659:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023660:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023667:	89 d0                	mov    eax,edx
c0023669:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002366c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023670:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023674:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023677:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002367c:	0f b6 c9             	movzx  ecx,cl
c002367f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023686:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023689:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002368d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023691:	8d 50 02             	lea    edx,[eax+0x2]
c0023694:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023699:	0f b6 d2             	movzx  edx,dl
c002369c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00236a2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00236a5:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00236a9:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00236ad:	8d 48 03             	lea    ecx,[eax+0x3]
c00236b0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00236b5:	0f b6 c9             	movzx  ecx,cl
c00236b8:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00236be:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00236c1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00236c5:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00236c9:	8d 50 04             	lea    edx,[eax+0x4]
c00236cc:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00236d2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00236d7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00236de:	66 85 f6             	test   si,si
c00236e1:	74 3e                	je     c0023721 <IDE::open(int, int, void*)+0x301>
c00236e3:	0f b6 d2             	movzx  edx,dl
c00236e6:	83 c0 05             	add    eax,0x5
c00236e9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00236ec:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00236f0:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00236f4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00236fa:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00236ff:	eb 20                	jmp    c0023721 <IDE::open(int, int, void*)+0x301>
c0023701:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002370b:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023715:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002371c:	e9 02 ff ff ff       	jmp    c0023623 <IDE::open(int, int, void*)+0x203>
c0023721:	52                   	push   edx
c0023722:	52                   	push   edx
c0023723:	6a 00                	push   0x0
c0023725:	53                   	push   ebx
c0023726:	e8 7d fa ff ff       	call   c00231a8 <IDE::prepareInterrupt(unsigned char)>
c002372b:	59                   	pop    ecx
c002372c:	5e                   	pop    esi
c002372d:	6a 01                	push   0x1
c002372f:	53                   	push   ebx
c0023730:	e8 73 fa ff ff       	call   c00231a8 <IDE::prepareInterrupt(unsigned char)>
c0023735:	83 c4 0c             	add    esp,0xc
c0023738:	6a 00                	push   0x0
c002373a:	6a 00                	push   0x0
c002373c:	53                   	push   ebx
c002373d:	e8 98 fc ff ff       	call   c00233da <IDE::enableIRQs(unsigned char, bool)>
c0023742:	83 c4 0c             	add    esp,0xc
c0023745:	6a 00                	push   0x0
c0023747:	6a 01                	push   0x1
c0023749:	53                   	push   ebx
c002374a:	e8 8b fc ff ff       	call   c00233da <IDE::enableIRQs(unsigned char, bool)>
c002374f:	83 c4 10             	add    esp,0x10
c0023752:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023759:	74 40                	je     c002379b <IDE::open(int, int, void*)+0x37b>
c002375b:	83 ec 0c             	sub    esp,0xc
c002375e:	68 27 ce 02 c0       	push   0xc002ce27
c0023763:	e8 5b f6 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023768:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002376b:	6a 01                	push   0x1
c002376d:	68 a2 33 02 c0       	push   0xc00233a2
c0023772:	6a 0e                	push   0xe
c0023774:	53                   	push   ebx
c0023775:	e8 fa 09 ff ff       	call   c0014174 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002377a:	83 c4 14             	add    esp,0x14
c002377d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023783:	53                   	push   ebx
c0023784:	6a 01                	push   0x1
c0023786:	68 be 33 02 c0       	push   0xc00233be
c002378b:	6a 0f                	push   0xf
c002378d:	53                   	push   ebx
c002378e:	e8 e1 09 ff ff       	call   c0014174 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023793:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023799:	eb 4a                	jmp    c00237e5 <IDE::open(int, int, void*)+0x3c5>
c002379b:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00237a5:	50                   	push   eax
c00237a6:	6a 0f                	push   0xf
c00237a8:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00237ae:	68 43 ce 02 c0       	push   0xc002ce43
c00237b3:	e8 0b f6 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00237b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00237bb:	6a 00                	push   0x0
c00237bd:	68 a2 33 02 c0       	push   0xc00233a2
c00237c2:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00237c8:	53                   	push   ebx
c00237c9:	e8 a6 09 ff ff       	call   c0014174 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00237ce:	83 c4 14             	add    esp,0x14
c00237d1:	53                   	push   ebx
c00237d2:	6a 00                	push   0x0
c00237d4:	68 be 33 02 c0       	push   0xc00233be
c00237d9:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00237df:	53                   	push   ebx
c00237e0:	e8 8f 09 ff ff       	call   c0014174 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00237e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00237e7:	83 c4 20             	add    esp,0x20
c00237ea:	83 ec 0c             	sub    esp,0xc
c00237ed:	53                   	push   ebx
c00237ee:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00237f1:	83 c4 0c             	add    esp,0xc
c00237f4:	6a 07                	push   0x7
c00237f6:	6a 00                	push   0x0
c00237f8:	53                   	push   ebx
c00237f9:	e8 90 fa ff ff       	call   c002328e <IDE::read(unsigned char, unsigned char)>
c00237fe:	83 c4 0c             	add    esp,0xc
c0023801:	6a 07                	push   0x7
c0023803:	6a 01                	push   0x1
c0023805:	53                   	push   ebx
c0023806:	e8 83 fa ff ff       	call   c002328e <IDE::read(unsigned char, unsigned char)>
c002380b:	83 c4 0c             	add    esp,0xc
c002380e:	6a 01                	push   0x1
c0023810:	6a 00                	push   0x0
c0023812:	53                   	push   ebx
c0023813:	e8 c2 fb ff ff       	call   c00233da <IDE::enableIRQs(unsigned char, bool)>
c0023818:	83 c4 0c             	add    esp,0xc
c002381b:	6a 01                	push   0x1
c002381d:	6a 01                	push   0x1
c002381f:	53                   	push   ebx
c0023820:	e8 b5 fb ff ff       	call   c00233da <IDE::enableIRQs(unsigned char, bool)>
c0023825:	83 c4 2c             	add    esp,0x2c
c0023828:	31 c0                	xor    eax,eax
c002382a:	5b                   	pop    ebx
c002382b:	5e                   	pop    esi
c002382c:	5f                   	pop    edi
c002382d:	5d                   	pop    ebp
c002382e:	c3                   	ret    
c002382f:	90                   	nop

c0023830 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023830:	55                   	push   ebp
c0023831:	57                   	push   edi
c0023832:	56                   	push   esi
c0023833:	53                   	push   ebx
c0023834:	83 ec 1c             	sub    esp,0x1c
c0023837:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002383b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002383f:	8d 50 f8             	lea    edx,[eax-0x8]
c0023842:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023846:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002384a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002384e:	80 fa 03             	cmp    dl,0x3
c0023851:	77 5d                	ja     c00238b0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023853:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023857:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002385b:	0f b6 db             	movzx  ebx,bl
c002385e:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023861:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023865:	83 ca 80             	or     edx,0xffffff80
c0023868:	0f b6 d2             	movzx  edx,dl
c002386b:	52                   	push   edx
c002386c:	6a 0c                	push   0xc
c002386e:	53                   	push   ebx
c002386f:	56                   	push   esi
c0023870:	e8 59 f9 ff ff       	call   c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023875:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002387a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002387e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023882:	0f b6 c0             	movzx  eax,al
c0023885:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023889:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002388b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023890:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023894:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023898:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002389c:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00238a4:	83 c4 2c             	add    esp,0x2c
c00238a7:	5b                   	pop    ebx
c00238a8:	5e                   	pop    esi
c00238a9:	5f                   	pop    edi
c00238aa:	5d                   	pop    ebp
c00238ab:	e9 1e f9 ff ff       	jmp    c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238b0:	3c 07                	cmp    al,0x7
c00238b2:	77 10                	ja     c00238c4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00238b4:	0f b6 db             	movzx  ebx,bl
c00238b7:	0f b6 d0             	movzx  edx,al
c00238ba:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00238c2:	eb 2d                	jmp    c00238f1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00238c4:	3c 0d                	cmp    al,0xd
c00238c6:	77 13                	ja     c00238db <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00238c8:	0f b6 db             	movzx  ebx,bl
c00238cb:	0f b6 c0             	movzx  eax,al
c00238ce:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00238d5:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00238d9:	eb 16                	jmp    c00238f1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00238db:	3c 15                	cmp    al,0x15
c00238dd:	77 14                	ja     c00238f3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00238df:	0f b6 db             	movzx  ebx,bl
c00238e2:	0f b6 c0             	movzx  eax,al
c00238e5:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00238ed:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00238f1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00238f3:	83 c4 1c             	add    esp,0x1c
c00238f6:	5b                   	pop    ebx
c00238f7:	5e                   	pop    esi
c00238f8:	5f                   	pop    edi
c00238f9:	5d                   	pop    ebp
c00238fa:	c3                   	ret    
c00238fb:	90                   	nop

c00238fc <IDE::detect()>:
c00238fc:	55                   	push   ebp
c00238fd:	57                   	push   edi
c00238fe:	56                   	push   esi
c00238ff:	53                   	push   ebx
c0023900:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023906:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002390d:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023914:	0f 85 be 02 00 00    	jne    c0023bd8 <IDE::detect()+0x2dc>
c002391a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023921:	31 f6                	xor    esi,esi
c0023923:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002392b:	31 ed                	xor    ebp,ebp
c002392d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023931:	c1 e0 06             	shl    eax,0x6
c0023934:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002393c:	89 e8                	mov    eax,ebp
c002393e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023942:	c1 e0 04             	shl    eax,0x4
c0023945:	83 c8 a0             	or     eax,0xffffffa0
c0023948:	0f b6 c0             	movzx  eax,al
c002394b:	50                   	push   eax
c002394c:	6a 06                	push   0x6
c002394e:	56                   	push   esi
c002394f:	53                   	push   ebx
c0023950:	e8 79 f8 ff ff       	call   c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023955:	83 c4 0c             	add    esp,0xc
c0023958:	6a 0c                	push   0xc
c002395a:	56                   	push   esi
c002395b:	53                   	push   ebx
c002395c:	e8 2d f9 ff ff       	call   c002328e <IDE::read(unsigned char, unsigned char)>
c0023961:	83 c4 0c             	add    esp,0xc
c0023964:	6a 0c                	push   0xc
c0023966:	56                   	push   esi
c0023967:	53                   	push   ebx
c0023968:	e8 21 f9 ff ff       	call   c002328e <IDE::read(unsigned char, unsigned char)>
c002396d:	83 c4 0c             	add    esp,0xc
c0023970:	6a 0c                	push   0xc
c0023972:	56                   	push   esi
c0023973:	53                   	push   ebx
c0023974:	e8 15 f9 ff ff       	call   c002328e <IDE::read(unsigned char, unsigned char)>
c0023979:	83 c4 0c             	add    esp,0xc
c002397c:	6a 0c                	push   0xc
c002397e:	56                   	push   esi
c002397f:	53                   	push   ebx
c0023980:	e8 09 f9 ff ff       	call   c002328e <IDE::read(unsigned char, unsigned char)>
c0023985:	68 ec 00 00 00       	push   0xec
c002398a:	6a 07                	push   0x7
c002398c:	56                   	push   esi
c002398d:	53                   	push   ebx
c002398e:	e8 3b f8 ff ff       	call   c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023993:	83 c4 1c             	add    esp,0x1c
c0023996:	6a 0c                	push   0xc
c0023998:	56                   	push   esi
c0023999:	53                   	push   ebx
c002399a:	e8 ef f8 ff ff       	call   c002328e <IDE::read(unsigned char, unsigned char)>
c002399f:	83 c4 0c             	add    esp,0xc
c00239a2:	6a 0c                	push   0xc
c00239a4:	56                   	push   esi
c00239a5:	53                   	push   ebx
c00239a6:	e8 e3 f8 ff ff       	call   c002328e <IDE::read(unsigned char, unsigned char)>
c00239ab:	83 c4 0c             	add    esp,0xc
c00239ae:	6a 0c                	push   0xc
c00239b0:	56                   	push   esi
c00239b1:	53                   	push   ebx
c00239b2:	e8 d7 f8 ff ff       	call   c002328e <IDE::read(unsigned char, unsigned char)>
c00239b7:	83 c4 0c             	add    esp,0xc
c00239ba:	6a 0c                	push   0xc
c00239bc:	56                   	push   esi
c00239bd:	53                   	push   ebx
c00239be:	e8 cb f8 ff ff       	call   c002328e <IDE::read(unsigned char, unsigned char)>
c00239c3:	83 c4 0c             	add    esp,0xc
c00239c6:	6a 0c                	push   0xc
c00239c8:	56                   	push   esi
c00239c9:	53                   	push   ebx
c00239ca:	e8 bf f8 ff ff       	call   c002328e <IDE::read(unsigned char, unsigned char)>
c00239cf:	83 c4 10             	add    esp,0x10
c00239d2:	84 c0                	test   al,al
c00239d4:	0f 84 8b 01 00 00    	je     c0023b65 <IDE::detect()+0x269>
c00239da:	31 ff                	xor    edi,edi
c00239dc:	50                   	push   eax
c00239dd:	6a 0c                	push   0xc
c00239df:	56                   	push   esi
c00239e0:	53                   	push   ebx
c00239e1:	e8 a8 f8 ff ff       	call   c002328e <IDE::read(unsigned char, unsigned char)>
c00239e6:	83 c4 10             	add    esp,0x10
c00239e9:	a8 01                	test   al,0x1
c00239eb:	0f 85 8e 01 00 00    	jne    c0023b7f <IDE::detect()+0x283>
c00239f1:	84 c0                	test   al,al
c00239f3:	78 04                	js     c00239f9 <IDE::detect()+0xfd>
c00239f5:	a8 08                	test   al,0x8
c00239f7:	75 27                	jne    c0023a20 <IDE::detect()+0x124>
c00239f9:	47                   	inc    edi
c00239fa:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023a00:	7e da                	jle    c00239dc <IDE::detect()+0xe0>
c0023a02:	50                   	push   eax
c0023a03:	50                   	push   eax
c0023a04:	6a 00                	push   0x0
c0023a06:	68 40 4b 4c 00       	push   0x4c4b40
c0023a0b:	e8 a6 a9 ff ff       	call   c001e3b6 <nanoSleep(unsigned long long)>
c0023a10:	83 c4 10             	add    esp,0x10
c0023a13:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023a19:	75 c1                	jne    c00239dc <IDE::detect()+0xe0>
c0023a1b:	e9 5f 01 00 00       	jmp    c0023b7f <IDE::detect()+0x283>
c0023a20:	31 c9                	xor    ecx,ecx
c0023a22:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023a26:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023a2a:	83 ec 0c             	sub    esp,0xc
c0023a2d:	68 80 00 00 00       	push   0x80
c0023a32:	57                   	push   edi
c0023a33:	6a 00                	push   0x0
c0023a35:	56                   	push   esi
c0023a36:	53                   	push   ebx
c0023a37:	e8 f4 fd ff ff       	call   c0023830 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023a3c:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023a41:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023a45:	89 d1                	mov    ecx,edx
c0023a47:	c1 e0 06             	shl    eax,0x6
c0023a4a:	01 d8                	add    eax,ebx
c0023a4c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023a53:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023a5a:	89 f2                	mov    edx,esi
c0023a5c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023a62:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023a66:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023a6c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023a70:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023a77:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023a7f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023a86:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023a8e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023a94:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023a9b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023aa1:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023aa5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023aa9:	83 c4 20             	add    esp,0x20
c0023aac:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023aaf:	83 c0 02             	add    eax,0x2
c0023ab2:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023ab8:	83 c7 02             	add    edi,0x2
c0023abb:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023abe:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023ac4:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023ac8:	75 e2                	jne    c0023aac <IDE::detect()+0x1b0>
c0023aca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023ace:	c1 e0 06             	shl    eax,0x6
c0023ad1:	01 d8                	add    eax,ebx
c0023ad3:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023ad9:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023ae0:	66 c1 ea 09          	shr    dx,0x9
c0023ae4:	83 e2 01             	and    edx,0x1
c0023ae7:	84 c9                	test   cl,cl
c0023ae9:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023aef:	75 2f                	jne    c0023b20 <IDE::detect()+0x224>
c0023af1:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0023af7:	85 c0                	test   eax,eax
c0023af9:	74 66                	je     c0023b61 <IDE::detect()+0x265>
c0023afb:	50                   	push   eax
c0023afc:	55                   	push   ebp
c0023afd:	56                   	push   esi
c0023afe:	68 5f ce 02 c0       	push   0xc002ce5f
c0023b03:	e8 bb f2 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023b08:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023b0f:	e8 37 bd fe ff       	call   c000f84b <malloc>
c0023b14:	89 c7                	mov    edi,eax
c0023b16:	89 04 24             	mov    DWORD PTR [esp],eax
c0023b19:	e8 78 06 00 00       	call   c0024196 <ATA::ATA()>
c0023b1e:	eb 28                	jmp    c0023b48 <IDE::detect()+0x24c>
c0023b20:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023b26:	55                   	push   ebp
c0023b27:	56                   	push   esi
c0023b28:	68 8e ce 02 c0       	push   0xc002ce8e
c0023b2d:	e8 91 f2 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023b32:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023b39:	e8 0d bd fe ff       	call   c000f84b <malloc>
c0023b3e:	89 c7                	mov    edi,eax
c0023b40:	89 04 24             	mov    DWORD PTR [esp],eax
c0023b43:	e8 8e 0c 00 00       	call   c00247d6 <ATAPI::ATAPI()>
c0023b48:	5a                   	pop    edx
c0023b49:	59                   	pop    ecx
c0023b4a:	57                   	push   edi
c0023b4b:	53                   	push   ebx
c0023b4c:	e8 9f 06 ff ff       	call   c00141f0 <Device::addChild(Device*)>
c0023b51:	8b 07                	mov    eax,DWORD PTR [edi]
c0023b53:	53                   	push   ebx
c0023b54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023b58:	6a 00                	push   0x0
c0023b5a:	57                   	push   edi
c0023b5b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023b5e:	83 c4 20             	add    esp,0x20
c0023b61:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023b65:	4d                   	dec    ebp
c0023b66:	74 0a                	je     c0023b72 <IDE::detect()+0x276>
c0023b68:	bd 01 00 00 00       	mov    ebp,0x1
c0023b6d:	e9 bb fd ff ff       	jmp    c002392d <IDE::detect()+0x31>
c0023b72:	4e                   	dec    esi
c0023b73:	74 63                	je     c0023bd8 <IDE::detect()+0x2dc>
c0023b75:	be 01 00 00 00       	mov    esi,0x1
c0023b7a:	e9 ac fd ff ff       	jmp    c002392b <IDE::detect()+0x2f>
c0023b7f:	50                   	push   eax
c0023b80:	6a 04                	push   0x4
c0023b82:	56                   	push   esi
c0023b83:	53                   	push   ebx
c0023b84:	e8 05 f7 ff ff       	call   c002328e <IDE::read(unsigned char, unsigned char)>
c0023b89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023b8d:	83 c4 0c             	add    esp,0xc
c0023b90:	6a 05                	push   0x5
c0023b92:	56                   	push   esi
c0023b93:	53                   	push   ebx
c0023b94:	e8 f5 f6 ff ff       	call   c002328e <IDE::read(unsigned char, unsigned char)>
c0023b99:	83 c4 10             	add    esp,0x10
c0023b9c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023ba0:	80 fa 14             	cmp    dl,0x14
c0023ba3:	75 04                	jne    c0023ba9 <IDE::detect()+0x2ad>
c0023ba5:	3c eb                	cmp    al,0xeb
c0023ba7:	eb 07                	jmp    c0023bb0 <IDE::detect()+0x2b4>
c0023ba9:	3c 96                	cmp    al,0x96
c0023bab:	75 b8                	jne    c0023b65 <IDE::detect()+0x269>
c0023bad:	80 fa 69             	cmp    dl,0x69
c0023bb0:	75 b3                	jne    c0023b65 <IDE::detect()+0x269>
c0023bb2:	68 a1 00 00 00       	push   0xa1
c0023bb7:	6a 07                	push   0x7
c0023bb9:	56                   	push   esi
c0023bba:	53                   	push   ebx
c0023bbb:	e8 0e f6 ff ff       	call   c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023bc0:	5f                   	pop    edi
c0023bc1:	58                   	pop    eax
c0023bc2:	6a 00                	push   0x0
c0023bc4:	68 40 42 0f 00       	push   0xf4240
c0023bc9:	e8 e8 a7 ff ff       	call   c001e3b6 <nanoSleep(unsigned long long)>
c0023bce:	83 c4 10             	add    esp,0x10
c0023bd1:	b1 01                	mov    cl,0x1
c0023bd3:	e9 4a fe ff ff       	jmp    c0023a22 <IDE::detect()+0x126>
c0023bd8:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023bde:	5b                   	pop    ebx
c0023bdf:	5e                   	pop    esi
c0023be0:	5f                   	pop    edi
c0023be1:	5d                   	pop    ebp
c0023be2:	c3                   	ret    
c0023be3:	90                   	nop

c0023be4 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023be4:	55                   	push   ebp
c0023be5:	57                   	push   edi
c0023be6:	56                   	push   esi
c0023be7:	53                   	push   ebx
c0023be8:	83 ec 1c             	sub    esp,0x1c
c0023beb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023bef:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023bf3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023bf7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023bfb:	88 c3                	mov    bl,al
c0023bfd:	84 c0                	test   al,al
c0023bff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023c03:	0f 84 67 01 00 00    	je     c0023d70 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023c09:	83 ec 0c             	sub    esp,0xc
c0023c0c:	68 bf ce 02 c0       	push   0xc002cebf
c0023c11:	e8 ad f1 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023c16:	83 c4 10             	add    esp,0x10
c0023c19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023c1d:	3c 01                	cmp    al,0x1
c0023c1f:	75 17                	jne    c0023c38 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023c21:	83 ec 0c             	sub    esp,0xc
c0023c24:	b3 13                	mov    bl,0x13
c0023c26:	68 cb ce 02 c0       	push   0xc002cecb
c0023c2b:	e8 93 f1 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023c30:	83 c4 10             	add    esp,0x10
c0023c33:	e9 25 01 00 00       	jmp    c0023d5d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c38:	3c 02                	cmp    al,0x2
c0023c3a:	0f 85 ef 00 00 00    	jne    c0023d2f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023c40:	d1 e6                	shl    esi,1
c0023c42:	09 ee                	or     esi,ebp
c0023c44:	52                   	push   edx
c0023c45:	89 f0                	mov    eax,esi
c0023c47:	6a 01                	push   0x1
c0023c49:	0f b6 f0             	movzx  esi,al
c0023c4c:	c1 e6 06             	shl    esi,0x6
c0023c4f:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023c57:	50                   	push   eax
c0023c58:	57                   	push   edi
c0023c59:	e8 30 f6 ff ff       	call   c002328e <IDE::read(unsigned char, unsigned char)>
c0023c5e:	83 c4 10             	add    esp,0x10
c0023c61:	89 c6                	mov    esi,eax
c0023c63:	a8 01                	test   al,0x1
c0023c65:	74 12                	je     c0023c79 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023c67:	83 ec 0c             	sub    esp,0xc
c0023c6a:	b3 07                	mov    bl,0x7
c0023c6c:	68 e0 ce 02 c0       	push   0xc002cee0
c0023c71:	e8 4d f1 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023c76:	83 c4 10             	add    esp,0x10
c0023c79:	f7 c6 02 00 00 00    	test   esi,0x2
c0023c7f:	74 12                	je     c0023c93 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023c81:	83 ec 0c             	sub    esp,0xc
c0023c84:	b3 03                	mov    bl,0x3
c0023c86:	68 fe ce 02 c0       	push   0xc002cefe
c0023c8b:	e8 33 f1 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023c90:	83 c4 10             	add    esp,0x10
c0023c93:	f7 c6 04 00 00 00    	test   esi,0x4
c0023c99:	74 12                	je     c0023cad <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023c9b:	83 ec 0c             	sub    esp,0xc
c0023c9e:	b3 14                	mov    bl,0x14
c0023ca0:	68 1e cf 02 c0       	push   0xc002cf1e
c0023ca5:	e8 19 f1 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023caa:	83 c4 10             	add    esp,0x10
c0023cad:	f7 c6 08 00 00 00    	test   esi,0x8
c0023cb3:	74 12                	je     c0023cc7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023cb5:	83 ec 0c             	sub    esp,0xc
c0023cb8:	b3 03                	mov    bl,0x3
c0023cba:	68 fe ce 02 c0       	push   0xc002cefe
c0023cbf:	e8 ff f0 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023cc4:	83 c4 10             	add    esp,0x10
c0023cc7:	f7 c6 10 00 00 00    	test   esi,0x10
c0023ccd:	74 12                	je     c0023ce1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023ccf:	83 ec 0c             	sub    esp,0xc
c0023cd2:	b3 15                	mov    bl,0x15
c0023cd4:	68 36 cf 02 c0       	push   0xc002cf36
c0023cd9:	e8 e5 f0 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023cde:	83 c4 10             	add    esp,0x10
c0023ce1:	f7 c6 20 00 00 00    	test   esi,0x20
c0023ce7:	74 12                	je     c0023cfb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023ce9:	83 ec 0c             	sub    esp,0xc
c0023cec:	b3 03                	mov    bl,0x3
c0023cee:	68 fe ce 02 c0       	push   0xc002cefe
c0023cf3:	e8 cb f0 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023cf8:	83 c4 10             	add    esp,0x10
c0023cfb:	f7 c6 40 00 00 00    	test   esi,0x40
c0023d01:	74 12                	je     c0023d15 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023d03:	83 ec 0c             	sub    esp,0xc
c0023d06:	b3 16                	mov    bl,0x16
c0023d08:	68 50 cf 02 c0       	push   0xc002cf50
c0023d0d:	e8 b1 f0 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023d12:	83 c4 10             	add    esp,0x10
c0023d15:	89 f0                	mov    eax,esi
c0023d17:	84 c0                	test   al,al
c0023d19:	79 42                	jns    c0023d5d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023d1b:	83 ec 0c             	sub    esp,0xc
c0023d1e:	b3 0d                	mov    bl,0xd
c0023d20:	68 71 cf 02 c0       	push   0xc002cf71
c0023d25:	e8 99 f0 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023d2a:	83 c4 10             	add    esp,0x10
c0023d2d:	eb 2e                	jmp    c0023d5d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023d2f:	3c 03                	cmp    al,0x3
c0023d31:	75 14                	jne    c0023d47 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023d33:	83 ec 0c             	sub    esp,0xc
c0023d36:	b3 17                	mov    bl,0x17
c0023d38:	68 85 cf 02 c0       	push   0xc002cf85
c0023d3d:	e8 81 f0 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023d42:	83 c4 10             	add    esp,0x10
c0023d45:	eb 16                	jmp    c0023d5d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023d47:	3c 04                	cmp    al,0x4
c0023d49:	75 12                	jne    c0023d5d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023d4b:	83 ec 0c             	sub    esp,0xc
c0023d4e:	b3 08                	mov    bl,0x8
c0023d50:	68 9b cf 02 c0       	push   0xc002cf9b
c0023d55:	e8 69 f0 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023d5a:	83 c4 10             	add    esp,0x10
c0023d5d:	50                   	push   eax
c0023d5e:	50                   	push   eax
c0023d5f:	0f b6 c3             	movzx  eax,bl
c0023d62:	50                   	push   eax
c0023d63:	68 b3 cf 02 c0       	push   0xc002cfb3
c0023d68:	e8 56 f0 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023d6d:	83 c4 10             	add    esp,0x10
c0023d70:	83 c4 1c             	add    esp,0x1c
c0023d73:	88 d8                	mov    al,bl
c0023d75:	5b                   	pop    ebx
c0023d76:	5e                   	pop    esi
c0023d77:	5f                   	pop    edi
c0023d78:	5d                   	pop    ebp
c0023d79:	c3                   	ret    

c0023d7a <IDE::polling(unsigned char, unsigned int)>:
c0023d7a:	57                   	push   edi
c0023d7b:	56                   	push   esi
c0023d7c:	53                   	push   ebx
c0023d7d:	bb 04 00 00 00       	mov    ebx,0x4
c0023d82:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023d86:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023d8b:	52                   	push   edx
c0023d8c:	6a 0c                	push   0xc
c0023d8e:	56                   	push   esi
c0023d8f:	57                   	push   edi
c0023d90:	e8 f9 f4 ff ff       	call   c002328e <IDE::read(unsigned char, unsigned char)>
c0023d95:	83 c4 10             	add    esp,0x10
c0023d98:	4b                   	dec    ebx
c0023d99:	75 f0                	jne    c0023d8b <IDE::polling(unsigned char, unsigned int)+0x11>
c0023d9b:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023da0:	50                   	push   eax
c0023da1:	6a 0c                	push   0xc
c0023da3:	56                   	push   esi
c0023da4:	57                   	push   edi
c0023da5:	e8 e4 f4 ff ff       	call   c002328e <IDE::read(unsigned char, unsigned char)>
c0023daa:	83 c4 10             	add    esp,0x10
c0023dad:	a8 01                	test   al,0x1
c0023daf:	74 12                	je     c0023dc3 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023db1:	83 ec 0c             	sub    esp,0xc
c0023db4:	68 cd cf 02 c0       	push   0xc002cfcd
c0023db9:	e8 05 f0 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023dbe:	83 c4 10             	add    esp,0x10
c0023dc1:	eb 17                	jmp    c0023dda <IDE::polling(unsigned char, unsigned int)+0x60>
c0023dc3:	a8 20                	test   al,0x20
c0023dc5:	75 0f                	jne    c0023dd6 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023dc7:	4b                   	dec    ebx
c0023dc8:	74 10                	je     c0023dda <IDE::polling(unsigned char, unsigned int)+0x60>
c0023dca:	84 c0                	test   al,al
c0023dcc:	78 d2                	js     c0023da0 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023dce:	a8 08                	test   al,0x8
c0023dd0:	74 ce                	je     c0023da0 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023dd2:	31 c0                	xor    eax,eax
c0023dd4:	eb 06                	jmp    c0023ddc <IDE::polling(unsigned char, unsigned int)+0x62>
c0023dd6:	b0 01                	mov    al,0x1
c0023dd8:	eb 02                	jmp    c0023ddc <IDE::polling(unsigned char, unsigned int)+0x62>
c0023dda:	b0 02                	mov    al,0x2
c0023ddc:	5b                   	pop    ebx
c0023ddd:	5e                   	pop    esi
c0023dde:	5f                   	pop    edi
c0023ddf:	c3                   	ret    

c0023de0 <SATABus::close(int, int, void*)>:
c0023de0:	31 c0                	xor    eax,eax
c0023de2:	c3                   	ret    
c0023de3:	90                   	nop

c0023de4 <SATABus::detect()>:
c0023de4:	c3                   	ret    
c0023de5:	90                   	nop

c0023de6 <SATABus::SATABus()>:
c0023de6:	83 ec 0c             	sub    esp,0xc
c0023de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ded:	83 ec 08             	sub    esp,0x8
c0023df0:	68 10 d0 02 c0       	push   0xc002d010
c0023df5:	50                   	push   eax
c0023df6:	e8 81 07 ff ff       	call   c001457c <HardDiskController::HardDiskController(char const*)>
c0023dfb:	83 c4 10             	add    esp,0x10
c0023dfe:	ba cc d0 02 c0       	mov    edx,0xc002d0cc
c0023e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e07:	89 10                	mov    DWORD PTR [eax],edx
c0023e09:	83 ec 0c             	sub    esp,0xc
c0023e0c:	6a 50                	push   0x50
c0023e0e:	e8 89 c1 fe ff       	call   c000ff9c <Phys::allocateContiguousPages(int)>
c0023e13:	83 c4 10             	add    esp,0x10
c0023e16:	89 c2                	mov    edx,eax
c0023e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e1c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023e22:	83 ec 0c             	sub    esp,0xc
c0023e25:	6a 50                	push   0x50
c0023e27:	e8 c3 db fe ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c0023e2c:	83 c4 10             	add    esp,0x10
c0023e2f:	89 c2                	mov    edx,eax
c0023e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e35:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023e3b:	e8 ee dd fe ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0023e40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023e44:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023e4a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023e4e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023e54:	83 ec 0c             	sub    esp,0xc
c0023e57:	6a 03                	push   0x3
c0023e59:	6a 50                	push   0x50
c0023e5b:	51                   	push   ecx
c0023e5c:	52                   	push   edx
c0023e5d:	50                   	push   eax
c0023e5e:	e8 ad e6 fe ff       	call   c0012510 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023e63:	83 c4 20             	add    esp,0x20
c0023e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e6a:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023e70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e74:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023e7a:	83 ec 04             	sub    esp,0x4
c0023e7d:	52                   	push   edx
c0023e7e:	50                   	push   eax
c0023e7f:	68 34 d0 02 c0       	push   0xc002d034
c0023e84:	e8 3a ef fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0023e89:	83 c4 10             	add    esp,0x10
c0023e8c:	90                   	nop
c0023e8d:	83 c4 0c             	add    esp,0xc
c0023e90:	c3                   	ret    
c0023e91:	90                   	nop

c0023e92 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023e92:	83 ec 0c             	sub    esp,0xc
c0023e95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023e99:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023e9c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023e9f:	09 c2                	or     edx,eax
c0023ea1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ea5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023eab:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023ead:	31 c0                	xor    eax,eax
c0023eaf:	c1 e9 08             	shr    ecx,0x8
c0023eb2:	83 e1 0f             	and    ecx,0xf
c0023eb5:	39 c8                	cmp    eax,ecx
c0023eb7:	74 0a                	je     c0023ec3 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023eb9:	f6 c2 01             	test   dl,0x1
c0023ebc:	74 18                	je     c0023ed6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023ebe:	d1 ea                	shr    edx,1
c0023ec0:	40                   	inc    eax
c0023ec1:	eb f2                	jmp    c0023eb5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023ec3:	83 ec 0c             	sub    esp,0xc
c0023ec6:	68 58 d0 02 c0       	push   0xc002d058
c0023ecb:	e8 bf 66 ff ff       	call   c001a58f <Krnl::panic(char const*)>
c0023ed0:	83 c4 10             	add    esp,0x10
c0023ed3:	83 c8 ff             	or     eax,0xffffffff
c0023ed6:	83 c4 0c             	add    esp,0xc
c0023ed9:	c3                   	ret    

c0023eda <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023eda:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023ede:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023ee1:	89 c2                	mov    edx,eax
c0023ee3:	c1 ea 08             	shr    edx,0x8
c0023ee6:	83 e2 0f             	and    edx,0xf
c0023ee9:	fe ca                	dec    dl
c0023eeb:	75 31                	jne    c0023f1e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023eed:	83 e0 0f             	and    eax,0xf
c0023ef0:	3c 03                	cmp    al,0x3
c0023ef2:	75 2a                	jne    c0023f1e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023ef4:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023ef7:	b8 02 00 00 00       	mov    eax,0x2
c0023efc:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023f02:	74 1c                	je     c0023f20 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023f04:	b8 04 00 00 00       	mov    eax,0x4
c0023f09:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023f0f:	74 0f                	je     c0023f20 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023f11:	31 c0                	xor    eax,eax
c0023f13:	83 fa 03             	cmp    edx,0x3
c0023f16:	0f 94 c0             	sete   al
c0023f19:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023f1d:	c3                   	ret    
c0023f1e:	31 c0                	xor    eax,eax
c0023f20:	c3                   	ret    
c0023f21:	90                   	nop

c0023f22 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023f22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023f26:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023f29:	0f ba e2 0f          	bt     edx,0xf
c0023f2d:	72 f7                	jb     c0023f26 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023f2f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023f32:	83 ca 10             	or     edx,0x10
c0023f35:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023f38:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023f3b:	83 ca 01             	or     edx,0x1
c0023f3e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023f41:	c3                   	ret    

c0023f42 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023f42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023f46:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023f49:	83 e2 fe             	and    edx,0xfffffffe
c0023f4c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023f4f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023f52:	83 e2 ef             	and    edx,0xffffffef
c0023f55:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023f58:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023f5b:	0f ba e2 0e          	bt     edx,0xe
c0023f5f:	72 f7                	jb     c0023f58 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023f61:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023f64:	0f ba e2 0f          	bt     edx,0xf
c0023f68:	72 ee                	jb     c0023f58 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023f6a:	c3                   	ret    
c0023f6b:	90                   	nop

c0023f6c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023f6c:	55                   	push   ebp
c0023f6d:	57                   	push   edi
c0023f6e:	56                   	push   esi
c0023f6f:	53                   	push   ebx
c0023f70:	83 ec 1c             	sub    esp,0x1c
c0023f73:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023f77:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023f7b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023f7f:	53                   	push   ebx
c0023f80:	89 fd                	mov    ebp,edi
c0023f82:	56                   	push   esi
c0023f83:	c1 e5 0a             	shl    ebp,0xa
c0023f86:	e8 b7 ff ff ff       	call   c0023f42 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023f8b:	83 ec 0c             	sub    esp,0xc
c0023f8e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023f94:	01 e8                	add    eax,ebp
c0023f96:	89 03                	mov    DWORD PTR [ebx],eax
c0023f98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023f9a:	68 00 04 00 00       	push   0x400
c0023f9f:	6a 00                	push   0x0
c0023fa1:	50                   	push   eax
c0023fa2:	e8 d9 c7 fd ff       	call   c0000780 <memset>
c0023fa7:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023fad:	89 fa                	mov    edx,edi
c0023faf:	01 e8                	add    eax,ebp
c0023fb1:	c1 e7 0d             	shl    edi,0xd
c0023fb4:	89 03                	mov    DWORD PTR [ebx],eax
c0023fb6:	c1 e2 08             	shl    edx,0x8
c0023fb9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023fc0:	81 c2 00 80 00 00    	add    edx,0x8000
c0023fc6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023fca:	89 d0                	mov    eax,edx
c0023fcc:	83 c4 1c             	add    esp,0x1c
c0023fcf:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023fd5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023fd8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023fdb:	68 00 01 00 00       	push   0x100
c0023fe0:	6a 00                	push   0x0
c0023fe2:	50                   	push   eax
c0023fe3:	e8 98 c7 fd ff       	call   c0000780 <memset>
c0023fe8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023fec:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023ff2:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023ff8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023ffc:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023fff:	83 c4 10             	add    esp,0x10
c0024002:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0024009:	31 ff                	xor    edi,edi
c002400b:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0024011:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0024017:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002401b:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024021:	83 c5 20             	add    ebp,0x20
c0024024:	01 f8                	add    eax,edi
c0024026:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024029:	52                   	push   edx
c002402a:	68 00 01 00 00       	push   0x100
c002402f:	6a 00                	push   0x0
c0024031:	50                   	push   eax
c0024032:	e8 49 c7 fd ff       	call   c0000780 <memset>
c0024037:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002403b:	83 c4 10             	add    esp,0x10
c002403e:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0024044:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002404b:	01 f8                	add    eax,edi
c002404d:	81 c7 00 01 00 00    	add    edi,0x100
c0024053:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024056:	81 ff 00 20 00 00    	cmp    edi,0x2000
c002405c:	75 b3                	jne    c0024011 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c002405e:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0024062:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0024066:	83 c4 1c             	add    esp,0x1c
c0024069:	5b                   	pop    ebx
c002406a:	5e                   	pop    esi
c002406b:	5f                   	pop    edi
c002406c:	5d                   	pop    ebp
c002406d:	e9 b0 fe ff ff       	jmp    c0023f22 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0024072 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0024072:	55                   	push   ebp
c0024073:	57                   	push   edi
c0024074:	56                   	push   esi
c0024075:	53                   	push   ebx
c0024076:	31 db                	xor    ebx,ebx
c0024078:	83 ec 0c             	sub    esp,0xc
c002407b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002407f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024083:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0024086:	f7 c7 01 00 00 00    	test   edi,0x1
c002408c:	0f 84 aa 00 00 00    	je     c002413c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024092:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024096:	89 d8                	mov    eax,ebx
c0024098:	c1 e0 07             	shl    eax,0x7
c002409b:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c00240a2:	55                   	push   ebp
c00240a3:	56                   	push   esi
c00240a4:	e8 31 fe ff ff       	call   c0023eda <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c00240a9:	5a                   	pop    edx
c00240aa:	83 f8 01             	cmp    eax,0x1
c00240ad:	59                   	pop    ecx
c00240ae:	75 30                	jne    c00240e0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c00240b0:	50                   	push   eax
c00240b1:	50                   	push   eax
c00240b2:	53                   	push   ebx
c00240b3:	68 7d d0 02 c0       	push   0xc002d07d
c00240b8:	e8 06 ed fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00240bd:	83 c4 0c             	add    esp,0xc
c00240c0:	53                   	push   ebx
c00240c1:	55                   	push   ebp
c00240c2:	56                   	push   esi
c00240c3:	e8 a4 fe ff ff       	call   c0023f6c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00240c8:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00240cf:	e8 77 b7 fe ff       	call   c000f84b <malloc>
c00240d4:	89 c5                	mov    ebp,eax
c00240d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00240d9:	e8 60 0d 00 00       	call   c0024e3e <SATA::SATA()>
c00240de:	eb 33                	jmp    c0024113 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c00240e0:	83 f8 04             	cmp    eax,0x4
c00240e3:	75 47                	jne    c002412c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c00240e5:	50                   	push   eax
c00240e6:	50                   	push   eax
c00240e7:	53                   	push   ebx
c00240e8:	68 94 d0 02 c0       	push   0xc002d094
c00240ed:	e8 d1 ec fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c00240f2:	83 c4 0c             	add    esp,0xc
c00240f5:	53                   	push   ebx
c00240f6:	55                   	push   ebp
c00240f7:	56                   	push   esi
c00240f8:	e8 6f fe ff ff       	call   c0023f6c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00240fd:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024104:	e8 42 b7 fe ff       	call   c000f84b <malloc>
c0024109:	89 c5                	mov    ebp,eax
c002410b:	89 04 24             	mov    DWORD PTR [esp],eax
c002410e:	e8 d7 10 00 00       	call   c00251ea <SATAPI::SATAPI()>
c0024113:	5a                   	pop    edx
c0024114:	59                   	pop    ecx
c0024115:	55                   	push   ebp
c0024116:	56                   	push   esi
c0024117:	e8 d4 00 ff ff       	call   c00141f0 <Device::addChild(Device*)>
c002411c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002411f:	56                   	push   esi
c0024120:	6a 00                	push   0x0
c0024122:	53                   	push   ebx
c0024123:	55                   	push   ebp
c0024124:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024127:	83 c4 20             	add    esp,0x20
c002412a:	eb 10                	jmp    c002413c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c002412c:	50                   	push   eax
c002412d:	50                   	push   eax
c002412e:	53                   	push   ebx
c002412f:	68 ad d0 02 c0       	push   0xc002d0ad
c0024134:	e8 8a ec fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0024139:	83 c4 10             	add    esp,0x10
c002413c:	d1 ef                	shr    edi,1
c002413e:	43                   	inc    ebx
c002413f:	83 fb 20             	cmp    ebx,0x20
c0024142:	0f 85 3e ff ff ff    	jne    c0024086 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0024148:	83 c4 0c             	add    esp,0xc
c002414b:	5b                   	pop    ebx
c002414c:	5e                   	pop    esi
c002414d:	5f                   	pop    edi
c002414e:	5d                   	pop    ebp
c002414f:	c3                   	ret    

c0024150 <SATABus::open(int, int, void*)>:
c0024150:	83 ec 14             	sub    esp,0x14
c0024153:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024157:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c002415d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024163:	52                   	push   edx
c0024164:	50                   	push   eax
c0024165:	e8 08 ff ff ff       	call   c0024072 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002416a:	31 c0                	xor    eax,eax
c002416c:	83 c4 1c             	add    esp,0x1c
c002416f:	c3                   	ret    

c0024170 <ATA::close(int, int, void*)>:
c0024170:	83 ec 0c             	sub    esp,0xc
c0024173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024177:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002417d:	85 c0                	test   eax,eax
c002417f:	74 0c                	je     c002418d <ATA::close(int, int, void*)+0x1d>
c0024181:	83 ec 0c             	sub    esp,0xc
c0024184:	8b 10                	mov    edx,DWORD PTR [eax]
c0024186:	50                   	push   eax
c0024187:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002418a:	83 c4 10             	add    esp,0x10
c002418d:	31 c0                	xor    eax,eax
c002418f:	83 c4 0c             	add    esp,0xc
c0024192:	c3                   	ret    
c0024193:	90                   	nop

c0024194 <ATA::powerSaving(PowerSavingLevel)>:
c0024194:	c3                   	ret    
c0024195:	90                   	nop

c0024196 <ATA::ATA()>:
c0024196:	83 ec 0c             	sub    esp,0xc
c0024199:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002419d:	83 ec 04             	sub    esp,0x4
c00241a0:	68 00 02 00 00       	push   0x200
c00241a5:	68 95 d1 02 c0       	push   0xc002d195
c00241aa:	50                   	push   eax
c00241ab:	e8 64 04 ff ff       	call   c0014614 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00241b0:	83 c4 10             	add    esp,0x10
c00241b3:	ba 18 d1 02 c0       	mov    edx,0xc002d118
c00241b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241bc:	89 10                	mov    DWORD PTR [eax],edx
c00241be:	90                   	nop
c00241bf:	83 c4 0c             	add    esp,0xc
c00241c2:	c3                   	ret    
c00241c3:	90                   	nop

c00241c4 <ATA::flush(bool)>:
c00241c4:	53                   	push   ebx
c00241c5:	83 ec 08             	sub    esp,0x8
c00241c8:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00241cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00241d1:	19 c0                	sbb    eax,eax
c00241d3:	83 e0 fd             	and    eax,0xfffffffd
c00241d6:	05 ea 00 00 00       	add    eax,0xea
c00241db:	50                   	push   eax
c00241dc:	6a 07                	push   0x7
c00241de:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241e5:	50                   	push   eax
c00241e6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241ec:	e8 dd ef ff ff       	call   c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241f1:	83 c4 0c             	add    esp,0xc
c00241f4:	6a 00                	push   0x0
c00241f6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241fd:	50                   	push   eax
c00241fe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024204:	e8 71 fb ff ff       	call   c0023d7a <IDE::polling(unsigned char, unsigned int)>
c0024209:	83 c4 18             	add    esp,0x18
c002420c:	5b                   	pop    ebx
c002420d:	c3                   	ret    

c002420e <ATA::readyForCommand()>:
c002420e:	56                   	push   esi
c002420f:	53                   	push   ebx
c0024210:	31 db                	xor    ebx,ebx
c0024212:	50                   	push   eax
c0024213:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024217:	50                   	push   eax
c0024218:	6a 0c                	push   0xc
c002421a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024221:	50                   	push   eax
c0024222:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024228:	e8 61 f0 ff ff       	call   c002328e <IDE::read(unsigned char, unsigned char)>
c002422d:	83 c4 10             	add    esp,0x10
c0024230:	a8 88                	test   al,0x88
c0024232:	74 23                	je     c0024257 <ATA::readyForCommand()+0x49>
c0024234:	43                   	inc    ebx
c0024235:	83 fb 63             	cmp    ebx,0x63
c0024238:	7e dd                	jle    c0024217 <ATA::readyForCommand()+0x9>
c002423a:	51                   	push   ecx
c002423b:	51                   	push   ecx
c002423c:	6a 00                	push   0x0
c002423e:	68 40 42 0f 00       	push   0xf4240
c0024243:	e8 6e a1 ff ff       	call   c001e3b6 <nanoSleep(unsigned long long)>
c0024248:	83 c4 10             	add    esp,0x10
c002424b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024251:	75 c4                	jne    c0024217 <ATA::readyForCommand()+0x9>
c0024253:	31 c0                	xor    eax,eax
c0024255:	eb 02                	jmp    c0024259 <ATA::readyForCommand()+0x4b>
c0024257:	b0 01                	mov    al,0x1
c0024259:	5a                   	pop    edx
c002425a:	5b                   	pop    ebx
c002425b:	5e                   	pop    esi
c002425c:	c3                   	ret    
c002425d:	90                   	nop

c002425e <ATA::access(unsigned long long, int, void*, bool)>:
c002425e:	55                   	push   ebp
c002425f:	57                   	push   edi
c0024260:	56                   	push   esi
c0024261:	53                   	push   ebx
c0024262:	83 ec 2c             	sub    esp,0x2c
c0024265:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024269:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002426d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024271:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024275:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024279:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002427d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024281:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024287:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002428b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024291:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024295:	c1 e0 06             	shl    eax,0x6
c0024298:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00242a0:	74 5d                	je     c00242ff <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00242a2:	89 fa                	mov    edx,edi
c00242a4:	89 f0                	mov    eax,esi
c00242a6:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00242aa:	c1 ea 1c             	shr    edx,0x1c
c00242ad:	89 d1                	mov    ecx,edx
c00242af:	09 c1                	or     ecx,eax
c00242b1:	74 25                	je     c00242d8 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00242b3:	31 ed                	xor    ebp,ebp
c00242b5:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00242bc:	89 fa                	mov    edx,edi
c00242be:	89 f0                	mov    eax,esi
c00242c0:	0f ad d0             	shrd   eax,edx,cl
c00242c3:	d3 ea                	shr    edx,cl
c00242c5:	f6 c1 20             	test   cl,0x20
c00242c8:	74 02                	je     c00242cc <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00242ca:	89 d0                	mov    eax,edx
c00242cc:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00242d0:	45                   	inc    ebp
c00242d1:	83 fd 06             	cmp    ebp,0x6
c00242d4:	75 df                	jne    c00242b5 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00242d6:	eb 76                	jmp    c002434e <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00242d8:	89 f0                	mov    eax,esi
c00242da:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00242df:	89 fa                	mov    edx,edi
c00242e1:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00242e8:	0f ac d0 10          	shrd   eax,edx,0x10
c00242ec:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00242f1:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00242f5:	c1 ee 18             	shr    esi,0x18
c00242f8:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00242fd:	eb 56                	jmp    c0024355 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00242ff:	6a 00                	push   0x0
c0024301:	6a 3f                	push   0x3f
c0024303:	57                   	push   edi
c0024304:	56                   	push   esi
c0024305:	e8 9a 29 00 00       	call   c0026ca4 <__umoddi3>
c002430a:	83 c4 10             	add    esp,0x10
c002430d:	40                   	inc    eax
c002430e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024312:	6a 00                	push   0x0
c0024314:	68 f0 03 00 00       	push   0x3f0
c0024319:	57                   	push   edi
c002431a:	56                   	push   esi
c002431b:	e8 84 28 00 00       	call   c0026ba4 <__udivdi3>
c0024320:	83 c4 10             	add    esp,0x10
c0024323:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024328:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002432f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024334:	6a 00                	push   0x0
c0024336:	6a 3f                	push   0x3f
c0024338:	57                   	push   edi
c0024339:	56                   	push   esi
c002433a:	e8 65 28 00 00       	call   c0026ba4 <__udivdi3>
c002433f:	83 c4 10             	add    esp,0x10
c0024342:	89 c6                	mov    esi,eax
c0024344:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024349:	83 e6 0f             	and    esi,0xf
c002434c:	eb 07                	jmp    c0024355 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002434e:	31 f6                	xor    esi,esi
c0024350:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024355:	bf 01 00 00 00       	mov    edi,0x1
c002435a:	50                   	push   eax
c002435b:	6a 00                	push   0x0
c002435d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024364:	50                   	push   eax
c0024365:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024369:	e8 6c f0 ff ff       	call   c00233da <IDE::enableIRQs(unsigned char, bool)>
c002436e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024371:	e8 98 fe ff ff       	call   c002420e <ATA::readyForCommand()>
c0024376:	83 c4 10             	add    esp,0x10
c0024379:	84 c0                	test   al,al
c002437b:	0f 84 5a 02 00 00    	je     c00245db <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024381:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024387:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002438d:	c1 e0 04             	shl    eax,0x4
c0024390:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024397:	09 c6                	or     esi,eax
c0024399:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c002439e:	75 05                	jne    c00243a5 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00243a0:	83 ce a0             	or     esi,0xffffffa0
c00243a3:	eb 03                	jmp    c00243a8 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00243a5:	83 ce e0             	or     esi,0xffffffe0
c00243a8:	89 f0                	mov    eax,esi
c00243aa:	0f b6 f0             	movzx  esi,al
c00243ad:	56                   	push   esi
c00243ae:	6a 06                	push   0x6
c00243b0:	51                   	push   ecx
c00243b1:	52                   	push   edx
c00243b2:	e8 17 ee ff ff       	call   c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243b7:	83 c4 10             	add    esp,0x10
c00243ba:	6a 00                	push   0x0
c00243bc:	6a 01                	push   0x1
c00243be:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243c5:	50                   	push   eax
c00243c6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243cc:	e8 fd ed ff ff       	call   c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243d1:	83 c4 10             	add    esp,0x10
c00243d4:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00243d9:	75 6e                	jne    c0024449 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00243db:	6a 00                	push   0x0
c00243dd:	6a 08                	push   0x8
c00243df:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243e6:	50                   	push   eax
c00243e7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243ed:	e8 dc ed ff ff       	call   c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243f2:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00243f7:	50                   	push   eax
c00243f8:	6a 09                	push   0x9
c00243fa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024401:	50                   	push   eax
c0024402:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024408:	e8 c1 ed ff ff       	call   c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c002440d:	83 c4 20             	add    esp,0x20
c0024410:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024415:	50                   	push   eax
c0024416:	6a 0a                	push   0xa
c0024418:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002441f:	50                   	push   eax
c0024420:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024426:	e8 a3 ed ff ff       	call   c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c002442b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024430:	50                   	push   eax
c0024431:	6a 0b                	push   0xb
c0024433:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002443a:	50                   	push   eax
c002443b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024441:	e8 88 ed ff ff       	call   c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024446:	83 c4 20             	add    esp,0x20
c0024449:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002444e:	50                   	push   eax
c002444f:	6a 02                	push   0x2
c0024451:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024458:	50                   	push   eax
c0024459:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002445f:	e8 6a ed ff ff       	call   c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024464:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024469:	50                   	push   eax
c002446a:	6a 03                	push   0x3
c002446c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024473:	50                   	push   eax
c0024474:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002447a:	e8 4f ed ff ff       	call   c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c002447f:	83 c4 20             	add    esp,0x20
c0024482:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024487:	50                   	push   eax
c0024488:	6a 04                	push   0x4
c002448a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024491:	50                   	push   eax
c0024492:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024498:	e8 31 ed ff ff       	call   c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c002449d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00244a2:	50                   	push   eax
c00244a3:	6a 05                	push   0x5
c00244a5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00244ac:	50                   	push   eax
c00244ad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00244b3:	e8 16 ed ff ff       	call   c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244b8:	83 c4 20             	add    esp,0x20
c00244bb:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00244c0:	0f 94 c0             	sete   al
c00244c3:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00244c8:	74 09                	je     c00244d3 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00244ca:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00244d1:	eb 07                	jmp    c00244da <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00244d3:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00244da:	0f b6 c0             	movzx  eax,al
c00244dd:	50                   	push   eax
c00244de:	6a 07                	push   0x7
c00244e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00244e7:	50                   	push   eax
c00244e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00244ee:	e8 db ec ff ff       	call   c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244f3:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00244f7:	83 c4 10             	add    esp,0x10
c00244fa:	85 f6                	test   esi,esi
c00244fc:	0f 84 ba 00 00 00    	je     c00245bc <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024502:	50                   	push   eax
c0024503:	6a 01                	push   0x1
c0024505:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002450c:	50                   	push   eax
c002450d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024513:	e8 62 f8 ff ff       	call   c0023d7a <IDE::polling(unsigned char, unsigned int)>
c0024518:	83 c4 10             	add    esp,0x10
c002451b:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024521:	84 c0                	test   al,al
c0024523:	74 2c                	je     c0024551 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024525:	0f b6 f8             	movzx  edi,al
c0024528:	0f b6 d2             	movzx  edx,dl
c002452b:	57                   	push   edi
c002452c:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024533:	50                   	push   eax
c0024534:	52                   	push   edx
c0024535:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002453b:	e8 a4 f6 ff ff       	call   c0023be4 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024540:	c7 04 24 f0 d0 02 c0 	mov    DWORD PTR [esp],0xc002d0f0
c0024547:	e8 77 e8 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c002454c:	e9 87 00 00 00       	jmp    c00245d8 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024551:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024556:	74 33                	je     c002458b <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024558:	31 ed                	xor    ebp,ebp
c002455a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002455e:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024562:	50                   	push   eax
c0024563:	50                   	push   eax
c0024564:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002456b:	50                   	push   eax
c002456c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024572:	e8 45 ec ff ff       	call   c00231bc <IDE::getBase(unsigned char)>
c0024577:	89 c2                	mov    edx,eax
c0024579:	89 f8                	mov    eax,edi
c002457b:	66 ef                	out    dx,ax
c002457d:	45                   	inc    ebp
c002457e:	83 c4 10             	add    esp,0x10
c0024581:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024587:	75 d1                	jne    c002455a <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024589:	eb 23                	jmp    c00245ae <ATA::access(unsigned long long, int, void*, bool)+0x350>
c002458b:	0f b6 d2             	movzx  edx,dl
c002458e:	51                   	push   ecx
c002458f:	51                   	push   ecx
c0024590:	52                   	push   edx
c0024591:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024597:	e8 20 ec ff ff       	call   c00231bc <IDE::getBase(unsigned char)>
c002459c:	b9 00 01 00 00       	mov    ecx,0x100
c00245a1:	89 c2                	mov    edx,eax
c00245a3:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00245a7:	fc                   	cld    
c00245a8:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00245ab:	83 c4 10             	add    esp,0x10
c00245ae:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00245b6:	4e                   	dec    esi
c00245b7:	e9 3e ff ff ff       	jmp    c00244fa <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00245bc:	31 ff                	xor    edi,edi
c00245be:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00245c3:	74 16                	je     c00245db <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00245c5:	50                   	push   eax
c00245c6:	50                   	push   eax
c00245c7:	31 c0                	xor    eax,eax
c00245c9:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00245ce:	0f 94 c0             	sete   al
c00245d1:	50                   	push   eax
c00245d2:	53                   	push   ebx
c00245d3:	e8 ec fb ff ff       	call   c00241c4 <ATA::flush(bool)>
c00245d8:	83 c4 10             	add    esp,0x10
c00245db:	83 c4 2c             	add    esp,0x2c
c00245de:	89 f8                	mov    eax,edi
c00245e0:	5b                   	pop    ebx
c00245e1:	5e                   	pop    esi
c00245e2:	5f                   	pop    edi
c00245e3:	5d                   	pop    ebp
c00245e4:	c3                   	ret    
c00245e5:	90                   	nop

c00245e6 <ATA::read(unsigned long long, int, void*)>:
c00245e6:	57                   	push   edi
c00245e7:	b8 04 00 00 00       	mov    eax,0x4
c00245ec:	56                   	push   esi
c00245ed:	53                   	push   ebx
c00245ee:	83 ec 10             	sub    esp,0x10
c00245f1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00245f5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00245f9:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00245fc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024600:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024604:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002460a:	77 3b                	ja     c0024647 <ATA::read(unsigned long long, int, void*)+0x61>
c002460c:	b8 06 00 00 00       	mov    eax,0x6
c0024611:	85 d2                	test   edx,edx
c0024613:	74 32                	je     c0024647 <ATA::read(unsigned long long, int, void*)+0x61>
c0024615:	50                   	push   eax
c0024616:	50                   	push   eax
c0024617:	6a 00                	push   0x0
c0024619:	52                   	push   edx
c002461a:	53                   	push   ebx
c002461b:	57                   	push   edi
c002461c:	56                   	push   esi
c002461d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024621:	e8 38 fc ff ff       	call   c002425e <ATA::access(unsigned long long, int, void*, bool)>
c0024626:	83 c4 20             	add    esp,0x20
c0024629:	85 c0                	test   eax,eax
c002462b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002462f:	75 11                	jne    c0024642 <ATA::read(unsigned long long, int, void*)+0x5c>
c0024631:	01 1d 88 2a 03 c0    	add    DWORD PTR ds:0xc0032a88,ebx
c0024637:	e8 bc c2 fe ff       	call   c00108f8 <VgaText::updateDiskUsage()>
c002463c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024640:	eb 05                	jmp    c0024647 <ATA::read(unsigned long long, int, void*)+0x61>
c0024642:	b8 01 00 00 00       	mov    eax,0x1
c0024647:	83 c4 10             	add    esp,0x10
c002464a:	5b                   	pop    ebx
c002464b:	5e                   	pop    esi
c002464c:	5f                   	pop    edi
c002464d:	c3                   	ret    

c002464e <ATA::write(unsigned long long, int, void*)>:
c002464e:	57                   	push   edi
c002464f:	b8 04 00 00 00       	mov    eax,0x4
c0024654:	56                   	push   esi
c0024655:	53                   	push   ebx
c0024656:	83 ec 10             	sub    esp,0x10
c0024659:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002465d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024661:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024664:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024668:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002466c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024672:	77 3b                	ja     c00246af <ATA::write(unsigned long long, int, void*)+0x61>
c0024674:	b8 06 00 00 00       	mov    eax,0x6
c0024679:	85 d2                	test   edx,edx
c002467b:	74 32                	je     c00246af <ATA::write(unsigned long long, int, void*)+0x61>
c002467d:	50                   	push   eax
c002467e:	50                   	push   eax
c002467f:	6a 01                	push   0x1
c0024681:	52                   	push   edx
c0024682:	53                   	push   ebx
c0024683:	57                   	push   edi
c0024684:	56                   	push   esi
c0024685:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024689:	e8 d0 fb ff ff       	call   c002425e <ATA::access(unsigned long long, int, void*, bool)>
c002468e:	83 c4 20             	add    esp,0x20
c0024691:	85 c0                	test   eax,eax
c0024693:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024697:	75 11                	jne    c00246aa <ATA::write(unsigned long long, int, void*)+0x5c>
c0024699:	01 1d 84 2a 03 c0    	add    DWORD PTR ds:0xc0032a84,ebx
c002469f:	e8 54 c2 fe ff       	call   c00108f8 <VgaText::updateDiskUsage()>
c00246a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00246a8:	eb 05                	jmp    c00246af <ATA::write(unsigned long long, int, void*)+0x61>
c00246aa:	b8 01 00 00 00       	mov    eax,0x1
c00246af:	83 c4 10             	add    esp,0x10
c00246b2:	5b                   	pop    ebx
c00246b3:	5e                   	pop    esi
c00246b4:	5f                   	pop    edi
c00246b5:	c3                   	ret    

c00246b6 <ATA::detectCHS()>:
c00246b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00246ba:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00246c0:	c1 e0 06             	shl    eax,0x6
c00246c3:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00246c9:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00246d3:	c7 44 24 04 fb d0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002d0fb
c00246db:	e9 af 5e ff ff       	jmp    c001a58f <Krnl::panic(char const*)>

c00246e0 <ATA::open(int, int, void*)>:
c00246e0:	53                   	push   ebx
c00246e1:	83 ec 08             	sub    esp,0x8
c00246e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00246e8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00246ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00246f0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00246f6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00246fc:	c1 e0 06             	shl    eax,0x6
c00246ff:	01 d0                	add    eax,edx
c0024701:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024708:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002470e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024715:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002471f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024725:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002472c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024733:	75 0c                	jne    c0024741 <ATA::open(int, int, void*)+0x61>
c0024735:	83 ec 0c             	sub    esp,0xc
c0024738:	53                   	push   ebx
c0024739:	e8 78 ff ff ff       	call   c00246b6 <ATA::detectCHS()>
c002473e:	83 c4 10             	add    esp,0x10
c0024741:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024747:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002474d:	c1 e0 06             	shl    eax,0x6
c0024750:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024757:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024761:	d1 e8                	shr    eax,1
c0024763:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024769:	6a 04                	push   0x4
c002476b:	6a 0c                	push   0xc
c002476d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024774:	50                   	push   eax
c0024775:	52                   	push   edx
c0024776:	e8 53 ea ff ff       	call   c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c002477b:	90                   	nop
c002477c:	90                   	nop
c002477d:	6a 00                	push   0x0
c002477f:	6a 0c                	push   0xc
c0024781:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024788:	50                   	push   eax
c0024789:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002478f:	e8 3a ea ff ff       	call   c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024794:	83 c4 14             	add    esp,0x14
c0024797:	53                   	push   ebx
c0024798:	e8 df fe fe ff       	call   c001467c <PhysicalDisk::startCache()>
c002479d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00247a0:	e8 15 21 ff ff       	call   c00168ba <createPartitionsForDisk(PhysicalDisk*)>
c00247a5:	31 c0                	xor    eax,eax
c00247a7:	83 c4 18             	add    esp,0x18
c00247aa:	5b                   	pop    ebx
c00247ab:	c3                   	ret    

c00247ac <ATAPI::write(unsigned long long, int, void*)>:
c00247ac:	b8 03 00 00 00       	mov    eax,0x3
c00247b1:	c3                   	ret    

c00247b2 <ATAPI::close(int, int, void*)>:
c00247b2:	83 ec 0c             	sub    esp,0xc
c00247b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247b9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00247bf:	85 c0                	test   eax,eax
c00247c1:	74 0c                	je     c00247cf <ATAPI::close(int, int, void*)+0x1d>
c00247c3:	83 ec 0c             	sub    esp,0xc
c00247c6:	8b 10                	mov    edx,DWORD PTR [eax]
c00247c8:	50                   	push   eax
c00247c9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00247cc:	83 c4 10             	add    esp,0x10
c00247cf:	31 c0                	xor    eax,eax
c00247d1:	83 c4 0c             	add    esp,0xc
c00247d4:	c3                   	ret    
c00247d5:	90                   	nop

c00247d6 <ATAPI::ATAPI()>:
c00247d6:	83 ec 0c             	sub    esp,0xc
c00247d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247dd:	83 ec 04             	sub    esp,0x4
c00247e0:	68 00 08 00 00       	push   0x800
c00247e5:	68 35 d2 02 c0       	push   0xc002d235
c00247ea:	50                   	push   eax
c00247eb:	e8 24 fe fe ff       	call   c0014614 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00247f0:	83 c4 10             	add    esp,0x10
c00247f3:	ba 50 d1 02 c0       	mov    edx,0xc002d150
c00247f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247fc:	89 10                	mov    DWORD PTR [eax],edx
c00247fe:	90                   	nop
c00247ff:	83 c4 0c             	add    esp,0xc
c0024802:	c3                   	ret    
c0024803:	90                   	nop

c0024804 <ATAPI::readyForCommand()>:
c0024804:	56                   	push   esi
c0024805:	53                   	push   ebx
c0024806:	31 db                	xor    ebx,ebx
c0024808:	50                   	push   eax
c0024809:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002480d:	50                   	push   eax
c002480e:	6a 0c                	push   0xc
c0024810:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024817:	50                   	push   eax
c0024818:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002481e:	e8 6b ea ff ff       	call   c002328e <IDE::read(unsigned char, unsigned char)>
c0024823:	83 c4 10             	add    esp,0x10
c0024826:	a8 88                	test   al,0x88
c0024828:	74 23                	je     c002484d <ATAPI::readyForCommand()+0x49>
c002482a:	43                   	inc    ebx
c002482b:	83 fb 63             	cmp    ebx,0x63
c002482e:	7e dd                	jle    c002480d <ATAPI::readyForCommand()+0x9>
c0024830:	51                   	push   ecx
c0024831:	51                   	push   ecx
c0024832:	6a 00                	push   0x0
c0024834:	68 40 42 0f 00       	push   0xf4240
c0024839:	e8 78 9b ff ff       	call   c001e3b6 <nanoSleep(unsigned long long)>
c002483e:	83 c4 10             	add    esp,0x10
c0024841:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024847:	75 c4                	jne    c002480d <ATAPI::readyForCommand()+0x9>
c0024849:	31 c0                	xor    eax,eax
c002484b:	eb 02                	jmp    c002484f <ATAPI::readyForCommand()+0x4b>
c002484d:	b0 01                	mov    al,0x1
c002484f:	5a                   	pop    edx
c0024850:	5b                   	pop    ebx
c0024851:	5e                   	pop    esi
c0024852:	c3                   	ret    
c0024853:	90                   	nop

c0024854 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024854:	55                   	push   ebp
c0024855:	57                   	push   edi
c0024856:	56                   	push   esi
c0024857:	53                   	push   ebx
c0024858:	83 ec 20             	sub    esp,0x20
c002485b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002485f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024863:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024867:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002486b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002486f:	6a 01                	push   0x1
c0024871:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024878:	50                   	push   eax
c0024879:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002487f:	e8 56 eb ff ff       	call   c00233da <IDE::enableIRQs(unsigned char, bool)>
c0024884:	5e                   	pop    esi
c0024885:	58                   	pop    eax
c0024886:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002488d:	50                   	push   eax
c002488e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024894:	e8 0f e9 ff ff       	call   c00231a8 <IDE::prepareInterrupt(unsigned char)>
c0024899:	89 3c 24             	mov    DWORD PTR [esp],edi
c002489c:	e8 63 ff ff ff       	call   c0024804 <ATAPI::readyForCommand()>
c00248a1:	83 c4 10             	add    esp,0x10
c00248a4:	84 c0                	test   al,al
c00248a6:	75 0a                	jne    c00248b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00248a8:	bb 01 00 00 00       	mov    ebx,0x1
c00248ad:	e9 57 02 00 00       	jmp    c0024b09 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00248b2:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00248b8:	c1 e0 04             	shl    eax,0x4
c00248bb:	0f b6 c0             	movzx  eax,al
c00248be:	50                   	push   eax
c00248bf:	6a 06                	push   0x6
c00248c1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248c8:	50                   	push   eax
c00248c9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248cf:	e8 fa e8 ff ff       	call   c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00248d4:	6a 00                	push   0x0
c00248d6:	6a 01                	push   0x1
c00248d8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248df:	50                   	push   eax
c00248e0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248e6:	e8 e3 e8 ff ff       	call   c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00248eb:	83 c4 20             	add    esp,0x20
c00248ee:	0f b6 c3             	movzx  eax,bl
c00248f1:	0f b6 df             	movzx  ebx,bh
c00248f4:	50                   	push   eax
c00248f5:	6a 04                	push   0x4
c00248f7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248fe:	50                   	push   eax
c00248ff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024905:	e8 c4 e8 ff ff       	call   c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c002490a:	53                   	push   ebx
c002490b:	6a 05                	push   0x5
c002490d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024914:	50                   	push   eax
c0024915:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002491b:	e8 ae e8 ff ff       	call   c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024920:	83 c4 20             	add    esp,0x20
c0024923:	68 a0 00 00 00       	push   0xa0
c0024928:	6a 07                	push   0x7
c002492a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024931:	50                   	push   eax
c0024932:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024938:	e8 91 e8 ff ff       	call   c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c002493d:	83 c4 0c             	add    esp,0xc
c0024940:	6a 01                	push   0x1
c0024942:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024949:	50                   	push   eax
c002494a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024950:	e8 25 f4 ff ff       	call   c0023d7a <IDE::polling(unsigned char, unsigned int)>
c0024955:	83 c4 10             	add    esp,0x10
c0024958:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c002495e:	84 c0                	test   al,al
c0024960:	74 23                	je     c0024985 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024962:	0f b6 d8             	movzx  ebx,al
c0024965:	0f b6 d2             	movzx  edx,dl
c0024968:	53                   	push   ebx
c0024969:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024970:	50                   	push   eax
c0024971:	52                   	push   edx
c0024972:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024978:	e8 67 f2 ff ff       	call   c0023be4 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002497d:	83 c4 10             	add    esp,0x10
c0024980:	e9 84 01 00 00       	jmp    c0024b09 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024985:	0f b6 d2             	movzx  edx,dl
c0024988:	53                   	push   ebx
c0024989:	53                   	push   ebx
c002498a:	52                   	push   edx
c002498b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024991:	e8 26 e8 ff ff       	call   c00231bc <IDE::getBase(unsigned char)>
c0024996:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002499a:	b9 06 00 00 00       	mov    ecx,0x6
c002499f:	89 c2                	mov    edx,eax
c00249a1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00249a4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00249a8:	83 c4 10             	add    esp,0x10
c00249ab:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00249b1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00249b8:	85 db                	test   ebx,ebx
c00249ba:	0f 84 ec 00 00 00    	je     c0024aac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00249c0:	51                   	push   ecx
c00249c1:	51                   	push   ecx
c00249c2:	52                   	push   edx
c00249c3:	50                   	push   eax
c00249c4:	e8 73 e9 ff ff       	call   c002333c <IDE::waitInterrupt(unsigned char)>
c00249c9:	83 c4 10             	add    esp,0x10
c00249cc:	84 c0                	test   al,al
c00249ce:	0f 84 d4 fe ff ff    	je     c00248a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00249d4:	56                   	push   esi
c00249d5:	56                   	push   esi
c00249d6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00249dd:	50                   	push   eax
c00249de:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249e4:	e8 bf e7 ff ff       	call   c00231a8 <IDE::prepareInterrupt(unsigned char)>
c00249e9:	83 c4 0c             	add    esp,0xc
c00249ec:	6a 04                	push   0x4
c00249ee:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00249f5:	50                   	push   eax
c00249f6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249fc:	e8 8d e8 ff ff       	call   c002328e <IDE::read(unsigned char, unsigned char)>
c0024a01:	83 c4 0c             	add    esp,0xc
c0024a04:	89 c6                	mov    esi,eax
c0024a06:	6a 05                	push   0x5
c0024a08:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024a0f:	50                   	push   eax
c0024a10:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a16:	e8 73 e8 ff ff       	call   c002328e <IDE::read(unsigned char, unsigned char)>
c0024a1b:	89 f1                	mov    ecx,esi
c0024a1d:	0f b6 c0             	movzx  eax,al
c0024a20:	0f b6 f1             	movzx  esi,cl
c0024a23:	c1 e0 08             	shl    eax,0x8
c0024a26:	09 c6                	or     esi,eax
c0024a28:	d1 fe                	sar    esi,1
c0024a2a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024a2e:	83 c4 10             	add    esp,0x10
c0024a31:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024a36:	74 41                	je     c0024a79 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024a38:	31 c9                	xor    ecx,ecx
c0024a3a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024a40:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024a47:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024a4b:	75 0a                	jne    c0024a57 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024a4d:	01 c9                	add    ecx,ecx
c0024a4f:	01 cd                	add    ebp,ecx
c0024a51:	4b                   	dec    ebx
c0024a52:	e9 54 ff ff ff       	jmp    c00249ab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024a57:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024a5c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024a60:	51                   	push   ecx
c0024a61:	51                   	push   ecx
c0024a62:	52                   	push   edx
c0024a63:	50                   	push   eax
c0024a64:	e8 53 e7 ff ff       	call   c00231bc <IDE::getBase(unsigned char)>
c0024a69:	89 c2                	mov    edx,eax
c0024a6b:	89 f0                	mov    eax,esi
c0024a6d:	66 ef                	out    dx,ax
c0024a6f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024a73:	83 c4 10             	add    esp,0x10
c0024a76:	41                   	inc    ecx
c0024a77:	eb c1                	jmp    c0024a3a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024a79:	31 f6                	xor    esi,esi
c0024a7b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024a81:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024a88:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024a8c:	75 06                	jne    c0024a94 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024a8e:	01 f6                	add    esi,esi
c0024a90:	01 f5                	add    ebp,esi
c0024a92:	eb bd                	jmp    c0024a51 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024a94:	51                   	push   ecx
c0024a95:	51                   	push   ecx
c0024a96:	52                   	push   edx
c0024a97:	50                   	push   eax
c0024a98:	e8 1f e7 ff ff       	call   c00231bc <IDE::getBase(unsigned char)>
c0024a9d:	89 c2                	mov    edx,eax
c0024a9f:	66 ed                	in     ax,dx
c0024aa1:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024aa6:	83 c4 10             	add    esp,0x10
c0024aa9:	46                   	inc    esi
c0024aaa:	eb cf                	jmp    c0024a7b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024aac:	51                   	push   ecx
c0024aad:	51                   	push   ecx
c0024aae:	52                   	push   edx
c0024aaf:	50                   	push   eax
c0024ab0:	e8 87 e8 ff ff       	call   c002333c <IDE::waitInterrupt(unsigned char)>
c0024ab5:	83 c4 10             	add    esp,0x10
c0024ab8:	84 c0                	test   al,al
c0024aba:	0f 84 e8 fd ff ff    	je     c00248a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024ac0:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024ac5:	52                   	push   edx
c0024ac6:	52                   	push   edx
c0024ac7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ace:	50                   	push   eax
c0024acf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ad5:	e8 ce e6 ff ff       	call   c00231a8 <IDE::prepareInterrupt(unsigned char)>
c0024ada:	83 c4 10             	add    esp,0x10
c0024add:	50                   	push   eax
c0024ade:	50                   	push   eax
c0024adf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ae6:	50                   	push   eax
c0024ae7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024aed:	e8 ca e6 ff ff       	call   c00231bc <IDE::getBase(unsigned char)>
c0024af2:	8d 50 07             	lea    edx,[eax+0x7]
c0024af5:	ec                   	in     al,dx
c0024af6:	83 c4 10             	add    esp,0x10
c0024af9:	a8 88                	test   al,0x88
c0024afb:	74 0a                	je     c0024b07 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024afd:	4b                   	dec    ebx
c0024afe:	75 dd                	jne    c0024add <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024b00:	bb 02 00 00 00       	mov    ebx,0x2
c0024b05:	eb 02                	jmp    c0024b09 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024b07:	31 db                	xor    ebx,ebx
c0024b09:	83 c4 1c             	add    esp,0x1c
c0024b0c:	89 d8                	mov    eax,ebx
c0024b0e:	5b                   	pop    ebx
c0024b0f:	5e                   	pop    esi
c0024b10:	5f                   	pop    edi
c0024b11:	5d                   	pop    ebp
c0024b12:	c3                   	ret    
c0024b13:	90                   	nop

c0024b14 <ATAPI::diskRemoved()>:
c0024b14:	83 ec 18             	sub    esp,0x18
c0024b17:	68 41 d2 02 c0       	push   0xc002d241
c0024b1c:	e8 a2 e2 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0024b21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024b25:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024b2c:	83 c4 1c             	add    esp,0x1c
c0024b2f:	c3                   	ret    

c0024b30 <ATAPI::eject()>:
c0024b30:	57                   	push   edi
c0024b31:	b9 03 00 00 00       	mov    ecx,0x3
c0024b36:	53                   	push   ebx
c0024b37:	83 ec 14             	sub    esp,0x14
c0024b3a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024b3e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024b42:	fc                   	cld    
c0024b43:	31 c0                	xor    eax,eax
c0024b45:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024b47:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024b4c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024b51:	50                   	push   eax
c0024b52:	50                   	push   eax
c0024b53:	6a 00                	push   0x0
c0024b55:	6a 00                	push   0x0
c0024b57:	6a 00                	push   0x0
c0024b59:	6a 02                	push   0x2
c0024b5b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024b5f:	50                   	push   eax
c0024b60:	53                   	push   ebx
c0024b61:	e8 ee fc ff ff       	call   c0024854 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024b66:	83 c4 14             	add    esp,0x14
c0024b69:	53                   	push   ebx
c0024b6a:	e8 a5 ff ff ff       	call   c0024b14 <ATAPI::diskRemoved()>
c0024b6f:	83 c4 24             	add    esp,0x24
c0024b72:	31 c0                	xor    eax,eax
c0024b74:	5b                   	pop    ebx
c0024b75:	5f                   	pop    edi
c0024b76:	c3                   	ret    
c0024b77:	90                   	nop

c0024b78 <ATAPI::diskInserted()>:
c0024b78:	53                   	push   ebx
c0024b79:	83 ec 14             	sub    esp,0x14
c0024b7c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024b80:	68 58 d2 02 c0       	push   0xc002d258
c0024b85:	e8 39 e2 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0024b8a:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024b91:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024b94:	e8 e3 fa fe ff       	call   c001467c <PhysicalDisk::startCache()>
c0024b99:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024b9d:	83 c4 18             	add    esp,0x18
c0024ba0:	5b                   	pop    ebx
c0024ba1:	e9 14 1d ff ff       	jmp    c00168ba <createPartitionsForDisk(PhysicalDisk*)>

c0024ba6 <ATAPI::detectMedia()>:
c0024ba6:	56                   	push   esi
c0024ba7:	53                   	push   ebx
c0024ba8:	83 ec 28             	sub    esp,0x28
c0024bab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024baf:	6a 0c                	push   0xc
c0024bb1:	6a 00                	push   0x0
c0024bb3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024bb7:	56                   	push   esi
c0024bb8:	e8 c3 bb fd ff       	call   c0000780 <memset>
c0024bbd:	58                   	pop    eax
c0024bbe:	5a                   	pop    edx
c0024bbf:	6a 00                	push   0x0
c0024bc1:	6a 00                	push   0x0
c0024bc3:	6a 00                	push   0x0
c0024bc5:	6a 00                	push   0x0
c0024bc7:	56                   	push   esi
c0024bc8:	53                   	push   ebx
c0024bc9:	e8 86 fc ff ff       	call   c0024854 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024bce:	83 c4 1c             	add    esp,0x1c
c0024bd1:	6a 0c                	push   0xc
c0024bd3:	6a 00                	push   0x0
c0024bd5:	56                   	push   esi
c0024bd6:	e8 a5 bb fd ff       	call   c0000780 <memset>
c0024bdb:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024be0:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024be5:	59                   	pop    ecx
c0024be6:	58                   	pop    eax
c0024be7:	6a 01                	push   0x1
c0024be9:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024bed:	50                   	push   eax
c0024bee:	6a 00                	push   0x0
c0024bf0:	6a 12                	push   0x12
c0024bf2:	56                   	push   esi
c0024bf3:	53                   	push   ebx
c0024bf4:	e8 5b fc ff ff       	call   c0024854 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024bf9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024bfd:	83 c4 20             	add    esp,0x20
c0024c00:	83 e0 7f             	and    eax,0x7f
c0024c03:	3c 70                	cmp    al,0x70
c0024c05:	74 15                	je     c0024c1c <ATAPI::detectMedia()+0x76>
c0024c07:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024c0e:	75 0c                	jne    c0024c1c <ATAPI::detectMedia()+0x76>
c0024c10:	83 ec 0c             	sub    esp,0xc
c0024c13:	53                   	push   ebx
c0024c14:	e8 5f ff ff ff       	call   c0024b78 <ATAPI::diskInserted()>
c0024c19:	83 c4 10             	add    esp,0x10
c0024c1c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024c20:	83 e0 0f             	and    eax,0xf
c0024c23:	3c 02                	cmp    al,0x2
c0024c25:	75 1b                	jne    c0024c42 <ATAPI::detectMedia()+0x9c>
c0024c27:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024c2c:	75 2d                	jne    c0024c5b <ATAPI::detectMedia()+0xb5>
c0024c2e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024c35:	74 24                	je     c0024c5b <ATAPI::detectMedia()+0xb5>
c0024c37:	83 ec 0c             	sub    esp,0xc
c0024c3a:	53                   	push   ebx
c0024c3b:	e8 d4 fe ff ff       	call   c0024b14 <ATAPI::diskRemoved()>
c0024c40:	eb 16                	jmp    c0024c58 <ATAPI::detectMedia()+0xb2>
c0024c42:	84 c0                	test   al,al
c0024c44:	75 15                	jne    c0024c5b <ATAPI::detectMedia()+0xb5>
c0024c46:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024c4d:	75 0c                	jne    c0024c5b <ATAPI::detectMedia()+0xb5>
c0024c4f:	83 ec 0c             	sub    esp,0xc
c0024c52:	53                   	push   ebx
c0024c53:	e8 20 ff ff ff       	call   c0024b78 <ATAPI::diskInserted()>
c0024c58:	83 c4 10             	add    esp,0x10
c0024c5b:	83 c4 24             	add    esp,0x24
c0024c5e:	5b                   	pop    ebx
c0024c5f:	5e                   	pop    esi
c0024c60:	c3                   	ret    
c0024c61:	90                   	nop

c0024c62 <ATAPI::open(int, int, void*)>:
c0024c62:	53                   	push   ebx
c0024c63:	83 ec 08             	sub    esp,0x8
c0024c66:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024c6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024c6e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024c72:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024c78:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024c7e:	c1 e0 06             	shl    eax,0x6
c0024c81:	01 d0                	add    eax,edx
c0024c83:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024c8a:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024c90:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024c97:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024ca1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024ca7:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024cae:	6a 04                	push   0x4
c0024cb0:	6a 0c                	push   0xc
c0024cb2:	51                   	push   ecx
c0024cb3:	52                   	push   edx
c0024cb4:	e8 15 e5 ff ff       	call   c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024cb9:	90                   	nop
c0024cba:	90                   	nop
c0024cbb:	6a 00                	push   0x0
c0024cbd:	6a 0c                	push   0xc
c0024cbf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024cc6:	50                   	push   eax
c0024cc7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ccd:	e8 fc e4 ff ff       	call   c00231ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024cd2:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024cd9:	83 c4 14             	add    esp,0x14
c0024cdc:	53                   	push   ebx
c0024cdd:	e8 c4 fe ff ff       	call   c0024ba6 <ATAPI::detectMedia()>
c0024ce2:	31 c0                	xor    eax,eax
c0024ce4:	83 c4 18             	add    esp,0x18
c0024ce7:	5b                   	pop    ebx
c0024ce8:	c3                   	ret    
c0024ce9:	90                   	nop

c0024cea <ATAPI::read(unsigned long long, int, void*)>:
c0024cea:	55                   	push   ebp
c0024ceb:	57                   	push   edi
c0024cec:	56                   	push   esi
c0024ced:	53                   	push   ebx
c0024cee:	83 ec 1c             	sub    esp,0x1c
c0024cf1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024cf5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024cf9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024cfd:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024d04:	74 41                	je     c0024d47 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024d06:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024d0a:	b9 03 00 00 00       	mov    ecx,0x3
c0024d0f:	fc                   	cld    
c0024d10:	31 c0                	xor    eax,eax
c0024d12:	86 fb                	xchg   bl,bh
c0024d14:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024d16:	c1 c3 10             	rol    ebx,0x10
c0024d19:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024d1e:	89 e8                	mov    eax,ebp
c0024d20:	86 fb                	xchg   bl,bh
c0024d22:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024d26:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024d2a:	50                   	push   eax
c0024d2b:	50                   	push   eax
c0024d2c:	55                   	push   ebp
c0024d2d:	c1 e5 0b             	shl    ebp,0xb
c0024d30:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024d34:	6a 00                	push   0x0
c0024d36:	55                   	push   ebp
c0024d37:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024d3b:	50                   	push   eax
c0024d3c:	56                   	push   esi
c0024d3d:	e8 12 fb ff ff       	call   c0024854 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024d42:	83 c4 20             	add    esp,0x20
c0024d45:	eb 1a                	jmp    c0024d61 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024d47:	83 ec 0c             	sub    esp,0xc
c0024d4a:	56                   	push   esi
c0024d4b:	e8 56 fe ff ff       	call   c0024ba6 <ATAPI::detectMedia()>
c0024d50:	83 c4 10             	add    esp,0x10
c0024d53:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024d5a:	75 aa                	jne    c0024d06 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024d5c:	b8 02 00 00 00       	mov    eax,0x2
c0024d61:	83 c4 1c             	add    esp,0x1c
c0024d64:	5b                   	pop    ebx
c0024d65:	5e                   	pop    esi
c0024d66:	5f                   	pop    edi
c0024d67:	5d                   	pop    ebp
c0024d68:	c3                   	ret    
c0024d69:	90                   	nop

c0024d6a <SATA::close(int, int, void*)>:
c0024d6a:	83 ec 0c             	sub    esp,0xc
c0024d6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d71:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024d77:	85 c0                	test   eax,eax
c0024d79:	74 0c                	je     c0024d87 <SATA::close(int, int, void*)+0x1d>
c0024d7b:	83 ec 0c             	sub    esp,0xc
c0024d7e:	8b 10                	mov    edx,DWORD PTR [eax]
c0024d80:	50                   	push   eax
c0024d81:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024d84:	83 c4 10             	add    esp,0x10
c0024d87:	31 c0                	xor    eax,eax
c0024d89:	83 c4 0c             	add    esp,0xc
c0024d8c:	c3                   	ret    
c0024d8d:	90                   	nop

c0024d8e <SATA::powerSaving(PowerSavingLevel)>:
c0024d8e:	c3                   	ret    
c0024d8f:	90                   	nop

c0024d90 <SATA::open(int, int, void*)>:
c0024d90:	56                   	push   esi
c0024d91:	53                   	push   ebx
c0024d92:	50                   	push   eax
c0024d93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024d97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d9b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024da5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024dab:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024db5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024db9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024dc3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024dc9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024dd0:	e8 e2 b0 fe ff       	call   c000feb7 <Phys::allocatePage()>
c0024dd5:	89 c6                	mov    esi,eax
c0024dd7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024ddd:	81 c6 00 10 00 00    	add    esi,0x1000
c0024de3:	e8 cf b0 fe ff       	call   c000feb7 <Phys::allocatePage()>
c0024de8:	39 c6                	cmp    esi,eax
c0024dea:	74 10                	je     c0024dfc <SATA::open(int, int, void*)+0x6c>
c0024dec:	83 ec 0c             	sub    esp,0xc
c0024def:	68 80 d1 02 c0       	push   0xc002d180
c0024df4:	e8 96 57 ff ff       	call   c001a58f <Krnl::panic(char const*)>
c0024df9:	83 c4 10             	add    esp,0x10
c0024dfc:	83 ec 0c             	sub    esp,0xc
c0024dff:	6a 02                	push   0x2
c0024e01:	e8 e9 cb fe ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c0024e06:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024e0c:	e8 1d ce fe ff       	call   c0011c2e <Virt::getAKernelVAS()>
c0024e11:	6a 03                	push   0x3
c0024e13:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024e19:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024e1f:	50                   	push   eax
c0024e20:	e8 f7 d3 fe ff       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c0024e25:	83 c4 14             	add    esp,0x14
c0024e28:	53                   	push   ebx
c0024e29:	e8 4e f8 fe ff       	call   c001467c <PhysicalDisk::startCache()>
c0024e2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024e31:	e8 84 1a ff ff       	call   c00168ba <createPartitionsForDisk(PhysicalDisk*)>
c0024e36:	83 c4 14             	add    esp,0x14
c0024e39:	31 c0                	xor    eax,eax
c0024e3b:	5b                   	pop    ebx
c0024e3c:	5e                   	pop    esi
c0024e3d:	c3                   	ret    

c0024e3e <SATA::SATA()>:
c0024e3e:	83 ec 0c             	sub    esp,0xc
c0024e41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e45:	83 ec 04             	sub    esp,0x4
c0024e48:	68 00 02 00 00       	push   0x200
c0024e4d:	68 94 d1 02 c0       	push   0xc002d194
c0024e52:	50                   	push   eax
c0024e53:	e8 bc f7 fe ff       	call   c0014614 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024e58:	83 c4 10             	add    esp,0x10
c0024e5b:	ba 04 d2 02 c0       	mov    edx,0xc002d204
c0024e60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e64:	89 10                	mov    DWORD PTR [eax],edx
c0024e66:	90                   	nop
c0024e67:	83 c4 0c             	add    esp,0xc
c0024e6a:	c3                   	ret    
c0024e6b:	90                   	nop

c0024e6c <SATA::access(unsigned long long, int, void*, bool)>:
c0024e6c:	55                   	push   ebp
c0024e6d:	57                   	push   edi
c0024e6e:	56                   	push   esi
c0024e6f:	53                   	push   ebx
c0024e70:	83 ec 2c             	sub    esp,0x2c
c0024e73:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024e77:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024e7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024e7f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024e83:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024e87:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024e8c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024e90:	7e 10                	jle    c0024ea2 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024e92:	83 ec 0c             	sub    esp,0xc
c0024e95:	68 a4 d1 02 c0       	push   0xc002d1a4
c0024e9a:	e8 f0 56 ff ff       	call   c001a58f <Krnl::panic(char const*)>
c0024e9f:	83 c4 10             	add    esp,0x10
c0024ea2:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024ea8:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024eae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024eb4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024eb8:	89 f0                	mov    eax,esi
c0024eba:	c1 e0 07             	shl    eax,0x7
c0024ebd:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024ec1:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024ecb:	53                   	push   ebx
c0024ecc:	8d 46 02             	lea    eax,[esi+0x2]
c0024ecf:	53                   	push   ebx
c0024ed0:	c1 e0 07             	shl    eax,0x7
c0024ed3:	bb 01 00 00 00       	mov    ebx,0x1
c0024ed8:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024edc:	50                   	push   eax
c0024edd:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024ee3:	e8 aa ef ff ff       	call   c0023e92 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024ee8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024eec:	83 c4 10             	add    esp,0x10
c0024eef:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024ef4:	0f 84 ce 01 00 00    	je     c00250c8 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024efa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024efe:	c1 e0 09             	shl    eax,0x9
c0024f01:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024f06:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024f0a:	74 17                	je     c0024f23 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024f0c:	51                   	push   ecx
c0024f0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024f11:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024f15:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024f1b:	e8 2c b8 fd ff       	call   c000074c <memcpy>
c0024f20:	83 c4 10             	add    esp,0x10
c0024f23:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024f29:	8d 46 02             	lea    eax,[esi+0x2]
c0024f2c:	c1 e0 07             	shl    eax,0x7
c0024f2f:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024f33:	8b 00                	mov    eax,DWORD PTR [eax]
c0024f35:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024f3b:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024f41:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024f45:	c1 e1 05             	shl    ecx,0x5
c0024f48:	01 c8                	add    eax,ecx
c0024f4a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024f4e:	8a 18                	mov    bl,BYTE PTR [eax]
c0024f50:	83 e1 01             	and    ecx,0x1
c0024f53:	83 e3 bf             	and    ebx,0xffffffbf
c0024f56:	c1 e1 06             	shl    ecx,0x6
c0024f59:	09 d9                	or     ecx,ebx
c0024f5b:	88 08                	mov    BYTE PTR [eax],cl
c0024f5d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024f5f:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024f65:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024f6b:	89 08                	mov    DWORD PTR [eax],ecx
c0024f6d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024f73:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024f79:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024f7f:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024f82:	52                   	push   edx
c0024f83:	68 90 00 00 00       	push   0x90
c0024f88:	6a 00                	push   0x0
c0024f8a:	53                   	push   ebx
c0024f8b:	e8 f0 b7 fd ff       	call   c0000780 <memset>
c0024f90:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024f96:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024f9a:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024fa0:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024fa4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024fa8:	83 c4 10             	add    esp,0x10
c0024fab:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024fae:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024fb4:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024fba:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024fbf:	09 c8                	or     eax,ecx
c0024fc1:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024fc7:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024fca:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024fd1:	66 25 00 7f          	and    ax,0x7f00
c0024fd5:	66 0d 27 80          	or     ax,0x8027
c0024fd9:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024fde:	66 89 03             	mov    WORD PTR [ebx],ax
c0024fe1:	19 c0                	sbb    eax,eax
c0024fe3:	83 e0 f0             	and    eax,0xfffffff0
c0024fe6:	83 c0 35             	add    eax,0x35
c0024fe9:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024fec:	89 f8                	mov    eax,edi
c0024fee:	c1 e8 10             	shr    eax,0x10
c0024ff1:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024ff4:	89 f8                	mov    eax,edi
c0024ff6:	c1 e8 18             	shr    eax,0x18
c0024ff9:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024ffc:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0025000:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025003:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025007:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002500a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002500e:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025012:	89 f3                	mov    ebx,esi
c0025014:	31 c0                	xor    eax,eax
c0025016:	c1 e3 07             	shl    ebx,0x7
c0025019:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c002501d:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0025023:	80 e1 88             	and    cl,0x88
c0025026:	74 0a                	je     c0025032 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0025028:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002502d:	74 0a                	je     c0025039 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c002502f:	40                   	inc    eax
c0025030:	eb eb                	jmp    c002501d <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0025032:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025037:	75 0a                	jne    c0025043 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0025039:	83 ec 0c             	sub    esp,0xc
c002503c:	68 dd d1 02 c0       	push   0xc002d1dd
c0025041:	eb 56                	jmp    c0025099 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0025043:	b8 01 00 00 00       	mov    eax,0x1
c0025048:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c002504c:	c1 e6 07             	shl    esi,0x7
c002504f:	d3 e0                	shl    eax,cl
c0025051:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0025055:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c002505b:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0025061:	85 c8                	test   eax,ecx
c0025063:	74 20                	je     c0025085 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0025065:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c002506b:	0f ba e1 1e          	bt     ecx,0x1e
c002506f:	73 ea                	jae    c002505b <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0025071:	83 ec 0c             	sub    esp,0xc
c0025074:	31 db                	xor    ebx,ebx
c0025076:	68 eb d1 02 c0       	push   0xc002d1eb
c002507b:	e8 0f 55 ff ff       	call   c001a58f <Krnl::panic(char const*)>
c0025080:	83 c4 10             	add    esp,0x10
c0025083:	eb 43                	jmp    c00250c8 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0025085:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c002508b:	0f ba e0 1e          	bt     eax,0x1e
c002508f:	73 17                	jae    c00250a8 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0025091:	83 ec 0c             	sub    esp,0xc
c0025094:	68 eb d1 02 c0       	push   0xc002d1eb
c0025099:	e8 f1 54 ff ff       	call   c001a58f <Krnl::panic(char const*)>
c002509e:	bb 01 00 00 00       	mov    ebx,0x1
c00250a3:	83 c4 10             	add    esp,0x10
c00250a6:	eb 20                	jmp    c00250c8 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c00250a8:	31 db                	xor    ebx,ebx
c00250aa:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c00250af:	75 17                	jne    c00250c8 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c00250b1:	50                   	push   eax
c00250b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00250b6:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c00250bc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00250c0:	e8 87 b6 fd ff       	call   c000074c <memcpy>
c00250c5:	83 c4 10             	add    esp,0x10
c00250c8:	83 c4 2c             	add    esp,0x2c
c00250cb:	89 d8                	mov    eax,ebx
c00250cd:	5b                   	pop    ebx
c00250ce:	5e                   	pop    esi
c00250cf:	5f                   	pop    edi
c00250d0:	5d                   	pop    ebp
c00250d1:	c3                   	ret    

c00250d2 <SATA::read(unsigned long long, int, void*)>:
c00250d2:	57                   	push   edi
c00250d3:	b8 04 00 00 00       	mov    eax,0x4
c00250d8:	56                   	push   esi
c00250d9:	53                   	push   ebx
c00250da:	83 ec 10             	sub    esp,0x10
c00250dd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00250e1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00250e5:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00250e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00250ec:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00250f0:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00250f6:	77 3b                	ja     c0025133 <SATA::read(unsigned long long, int, void*)+0x61>
c00250f8:	b8 06 00 00 00       	mov    eax,0x6
c00250fd:	85 d2                	test   edx,edx
c00250ff:	74 32                	je     c0025133 <SATA::read(unsigned long long, int, void*)+0x61>
c0025101:	50                   	push   eax
c0025102:	50                   	push   eax
c0025103:	6a 00                	push   0x0
c0025105:	52                   	push   edx
c0025106:	53                   	push   ebx
c0025107:	57                   	push   edi
c0025108:	56                   	push   esi
c0025109:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002510d:	e8 5a fd ff ff       	call   c0024e6c <SATA::access(unsigned long long, int, void*, bool)>
c0025112:	83 c4 20             	add    esp,0x20
c0025115:	85 c0                	test   eax,eax
c0025117:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002511b:	75 11                	jne    c002512e <SATA::read(unsigned long long, int, void*)+0x5c>
c002511d:	01 1d 88 2a 03 c0    	add    DWORD PTR ds:0xc0032a88,ebx
c0025123:	e8 d0 b7 fe ff       	call   c00108f8 <VgaText::updateDiskUsage()>
c0025128:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002512c:	eb 05                	jmp    c0025133 <SATA::read(unsigned long long, int, void*)+0x61>
c002512e:	b8 01 00 00 00       	mov    eax,0x1
c0025133:	83 c4 10             	add    esp,0x10
c0025136:	5b                   	pop    ebx
c0025137:	5e                   	pop    esi
c0025138:	5f                   	pop    edi
c0025139:	c3                   	ret    

c002513a <SATA::write(unsigned long long, int, void*)>:
c002513a:	55                   	push   ebp
c002513b:	b8 04 00 00 00       	mov    eax,0x4
c0025140:	57                   	push   edi
c0025141:	56                   	push   esi
c0025142:	53                   	push   ebx
c0025143:	83 ec 1c             	sub    esp,0x1c
c0025146:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002514a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002514e:	8d 75 ff             	lea    esi,[ebp-0x1]
c0025151:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0025155:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0025159:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002515f:	77 56                	ja     c00251b7 <SATA::write(unsigned long long, int, void*)+0x7d>
c0025161:	b8 06 00 00 00       	mov    eax,0x6
c0025166:	85 ff                	test   edi,edi
c0025168:	74 4d                	je     c00251b7 <SATA::write(unsigned long long, int, void*)+0x7d>
c002516a:	89 ee                	mov    esi,ebp
c002516c:	c1 e6 09             	shl    esi,0x9
c002516f:	01 fe                	add    esi,edi
c0025171:	89 c8                	mov    eax,ecx
c0025173:	89 da                	mov    edx,ebx
c0025175:	83 c0 01             	add    eax,0x1
c0025178:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002517c:	83 d2 00             	adc    edx,0x0
c002517f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025183:	50                   	push   eax
c0025184:	50                   	push   eax
c0025185:	6a 01                	push   0x1
c0025187:	57                   	push   edi
c0025188:	81 c7 00 02 00 00    	add    edi,0x200
c002518e:	6a 01                	push   0x1
c0025190:	53                   	push   ebx
c0025191:	51                   	push   ecx
c0025192:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025196:	e8 d1 fc ff ff       	call   c0024e6c <SATA::access(unsigned long long, int, void*, bool)>
c002519b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002519f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00251a3:	83 c4 20             	add    esp,0x20
c00251a6:	39 f7                	cmp    edi,esi
c00251a8:	75 c7                	jne    c0025171 <SATA::write(unsigned long long, int, void*)+0x37>
c00251aa:	01 2d 84 2a 03 c0    	add    DWORD PTR ds:0xc0032a84,ebp
c00251b0:	e8 43 b7 fe ff       	call   c00108f8 <VgaText::updateDiskUsage()>
c00251b5:	31 c0                	xor    eax,eax
c00251b7:	83 c4 1c             	add    esp,0x1c
c00251ba:	5b                   	pop    ebx
c00251bb:	5e                   	pop    esi
c00251bc:	5f                   	pop    edi
c00251bd:	5d                   	pop    ebp
c00251be:	c3                   	ret    
c00251bf:	90                   	nop

c00251c0 <SATAPI::write(unsigned long long, int, void*)>:
c00251c0:	b8 03 00 00 00       	mov    eax,0x3
c00251c5:	c3                   	ret    

c00251c6 <SATAPI::close(int, int, void*)>:
c00251c6:	83 ec 0c             	sub    esp,0xc
c00251c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251cd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00251d3:	85 c0                	test   eax,eax
c00251d5:	74 0c                	je     c00251e3 <SATAPI::close(int, int, void*)+0x1d>
c00251d7:	83 ec 0c             	sub    esp,0xc
c00251da:	8b 10                	mov    edx,DWORD PTR [eax]
c00251dc:	50                   	push   eax
c00251dd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00251e0:	83 c4 10             	add    esp,0x10
c00251e3:	31 c0                	xor    eax,eax
c00251e5:	83 c4 0c             	add    esp,0xc
c00251e8:	c3                   	ret    
c00251e9:	90                   	nop

c00251ea <SATAPI::SATAPI()>:
c00251ea:	83 ec 0c             	sub    esp,0xc
c00251ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251f1:	83 ec 04             	sub    esp,0x4
c00251f4:	68 00 08 00 00       	push   0x800
c00251f9:	68 34 d2 02 c0       	push   0xc002d234
c00251fe:	50                   	push   eax
c00251ff:	e8 10 f4 fe ff       	call   c0014614 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025204:	83 c4 10             	add    esp,0x10
c0025207:	ba e0 d2 02 c0       	mov    edx,0xc002d2e0
c002520c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025210:	89 10                	mov    DWORD PTR [eax],edx
c0025212:	90                   	nop
c0025213:	83 c4 0c             	add    esp,0xc
c0025216:	c3                   	ret    
c0025217:	90                   	nop

c0025218 <SATAPI::diskRemoved()>:
c0025218:	83 ec 18             	sub    esp,0x18
c002521b:	68 40 d2 02 c0       	push   0xc002d240
c0025220:	e8 9e db fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0025225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025229:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025230:	83 c4 1c             	add    esp,0x1c
c0025233:	c3                   	ret    

c0025234 <SATAPI::diskInserted()>:
c0025234:	53                   	push   ebx
c0025235:	83 ec 14             	sub    esp,0x14
c0025238:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002523c:	68 57 d2 02 c0       	push   0xc002d257
c0025241:	e8 7d db fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0025246:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c002524d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025250:	e8 27 f4 fe ff       	call   c001467c <PhysicalDisk::startCache()>
c0025255:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025259:	83 c4 18             	add    esp,0x18
c002525c:	5b                   	pop    ebx
c002525d:	e9 58 16 ff ff       	jmp    c00168ba <createPartitionsForDisk(PhysicalDisk*)>

c0025262 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025262:	55                   	push   ebp
c0025263:	57                   	push   edi
c0025264:	56                   	push   esi
c0025265:	53                   	push   ebx
c0025266:	83 ec 24             	sub    esp,0x24
c0025269:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002526d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025271:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0025277:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002527b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002527f:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0025285:	8d 5f 02             	lea    ebx,[edi+0x2]
c0025288:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002528e:	c1 e3 07             	shl    ebx,0x7
c0025291:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025295:	89 f8                	mov    eax,edi
c0025297:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002529b:	c1 e0 07             	shl    eax,0x7
c002529e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00252a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00252a6:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00252b0:	53                   	push   ebx
c00252b1:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c00252b7:	e8 d6 eb ff ff       	call   c0023e92 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00252bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00252c0:	83 c4 10             	add    esp,0x10
c00252c3:	b8 01 00 00 00       	mov    eax,0x1
c00252c8:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00252cd:	0f 84 8a 01 00 00    	je     c002545d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00252d3:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00252d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00252db:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00252e1:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00252e7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00252eb:	c1 e1 05             	shl    ecx,0x5
c00252ee:	01 c8                	add    eax,ecx
c00252f0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00252f2:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00252f8:	81 c9 25 00 01 00    	or     ecx,0x10025
c00252fe:	89 08                	mov    DWORD PTR [eax],ecx
c0025300:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025306:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002530c:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025312:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025315:	52                   	push   edx
c0025316:	68 90 00 00 00       	push   0x90
c002531b:	6a 00                	push   0x0
c002531d:	53                   	push   ebx
c002531e:	e8 5d b4 fd ff       	call   c0000780 <memset>
c0025323:	83 c4 0c             	add    esp,0xc
c0025326:	8d 43 40             	lea    eax,[ebx+0x40]
c0025329:	6a 0c                	push   0xc
c002532b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002532f:	50                   	push   eax
c0025330:	e8 17 b4 fd ff       	call   c000074c <memcpy>
c0025335:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c002533b:	89 ea                	mov    edx,ebp
c002533d:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025343:	c1 ea 18             	shr    edx,0x18
c0025346:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002534a:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002534d:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025350:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025354:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002535a:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025360:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025365:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c0025369:	09 c8                	or     eax,ecx
c002536b:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002536f:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025375:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025378:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c002537f:	66 25 00 7f          	and    ax,0x7f00
c0025383:	66 0d 27 80          	or     ax,0x8027
c0025387:	66 89 03             	mov    WORD PTR [ebx],ax
c002538a:	89 e8                	mov    eax,ebp
c002538c:	c1 e8 10             	shr    eax,0x10
c002538f:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025392:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0025396:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025399:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002539d:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00253a0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00253a4:	83 c4 10             	add    esp,0x10
c00253a7:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00253ab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00253af:	31 c0                	xor    eax,eax
c00253b1:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00253b7:	80 e1 88             	and    cl,0x88
c00253ba:	74 0a                	je     c00253c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c00253bc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00253c1:	74 0a                	je     c00253cd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00253c3:	40                   	inc    eax
c00253c4:	eb eb                	jmp    c00253b1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c00253c6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00253cb:	75 0f                	jne    c00253dc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c00253cd:	83 ec 0c             	sub    esp,0xc
c00253d0:	68 dd d1 02 c0       	push   0xc002d1dd
c00253d5:	e8 b5 51 ff ff       	call   c001a58f <Krnl::panic(char const*)>
c00253da:	eb 3a                	jmp    c0025416 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00253dc:	b8 01 00 00 00       	mov    eax,0x1
c00253e1:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00253e5:	c1 e7 07             	shl    edi,0x7
c00253e8:	d3 e0                	shl    eax,cl
c00253ea:	03 3c 24             	add    edi,DWORD PTR [esp]
c00253ed:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c00253f3:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c00253f9:	85 d0                	test   eax,edx
c00253fb:	74 23                	je     c0025420 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c00253fd:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0025403:	0f ba e2 1e          	bt     edx,0x1e
c0025407:	73 ea                	jae    c00253f3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0025409:	83 ec 0c             	sub    esp,0xc
c002540c:	68 6f d2 02 c0       	push   0xc002d26f
c0025411:	e8 ad d9 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0025416:	83 c4 10             	add    esp,0x10
c0025419:	b8 01 00 00 00       	mov    eax,0x1
c002541e:	eb 3d                	jmp    c002545d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025420:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0025426:	0f ba e0 1e          	bt     eax,0x1e
c002542a:	73 0a                	jae    c0025436 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c002542c:	83 ec 0c             	sub    esp,0xc
c002542f:	68 82 d2 02 c0       	push   0xc002d282
c0025434:	eb db                	jmp    c0025411 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0025436:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c002543b:	74 1e                	je     c002545b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c002543d:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0025442:	74 17                	je     c002545b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025444:	50                   	push   eax
c0025445:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025449:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c002544f:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0025453:	e8 f4 b2 fd ff       	call   c000074c <memcpy>
c0025458:	83 c4 10             	add    esp,0x10
c002545b:	31 c0                	xor    eax,eax
c002545d:	83 c4 1c             	add    esp,0x1c
c0025460:	5b                   	pop    ebx
c0025461:	5e                   	pop    esi
c0025462:	5f                   	pop    edi
c0025463:	5d                   	pop    ebp
c0025464:	c3                   	ret    
c0025465:	90                   	nop

c0025466 <SATAPI::eject()>:
c0025466:	57                   	push   edi
c0025467:	b9 03 00 00 00       	mov    ecx,0x3
c002546c:	53                   	push   ebx
c002546d:	83 ec 14             	sub    esp,0x14
c0025470:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025474:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025478:	fc                   	cld    
c0025479:	31 c0                	xor    eax,eax
c002547b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002547d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025482:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025487:	50                   	push   eax
c0025488:	6a 00                	push   0x0
c002548a:	6a 00                	push   0x0
c002548c:	6a 00                	push   0x0
c002548e:	6a 00                	push   0x0
c0025490:	6a 02                	push   0x2
c0025492:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025496:	50                   	push   eax
c0025497:	53                   	push   ebx
c0025498:	e8 c5 fd ff ff       	call   c0025262 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002549d:	83 c4 14             	add    esp,0x14
c00254a0:	53                   	push   ebx
c00254a1:	e8 72 fd ff ff       	call   c0025218 <SATAPI::diskRemoved()>
c00254a6:	83 c4 24             	add    esp,0x24
c00254a9:	31 c0                	xor    eax,eax
c00254ab:	5b                   	pop    ebx
c00254ac:	5f                   	pop    edi
c00254ad:	c3                   	ret    

c00254ae <SATAPI::detectMedia()>:
c00254ae:	56                   	push   esi
c00254af:	53                   	push   ebx
c00254b0:	83 ec 28             	sub    esp,0x28
c00254b3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00254b7:	6a 0c                	push   0xc
c00254b9:	6a 00                	push   0x0
c00254bb:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00254bf:	56                   	push   esi
c00254c0:	e8 bb b2 fd ff       	call   c0000780 <memset>
c00254c5:	83 c4 0c             	add    esp,0xc
c00254c8:	6a 00                	push   0x0
c00254ca:	6a 00                	push   0x0
c00254cc:	6a 00                	push   0x0
c00254ce:	6a 00                	push   0x0
c00254d0:	6a 00                	push   0x0
c00254d2:	56                   	push   esi
c00254d3:	53                   	push   ebx
c00254d4:	e8 89 fd ff ff       	call   c0025262 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00254d9:	83 c4 1c             	add    esp,0x1c
c00254dc:	6a 0c                	push   0xc
c00254de:	6a 00                	push   0x0
c00254e0:	56                   	push   esi
c00254e1:	e8 9a b2 fd ff       	call   c0000780 <memset>
c00254e6:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00254eb:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00254f0:	83 c4 0c             	add    esp,0xc
c00254f3:	6a 01                	push   0x1
c00254f5:	8d 44 24 16          	lea    eax,[esp+0x16]
c00254f9:	50                   	push   eax
c00254fa:	6a 00                	push   0x0
c00254fc:	6a 00                	push   0x0
c00254fe:	6a 12                	push   0x12
c0025500:	56                   	push   esi
c0025501:	53                   	push   ebx
c0025502:	e8 5b fd ff ff       	call   c0025262 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025507:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002550b:	83 c4 20             	add    esp,0x20
c002550e:	83 e0 7f             	and    eax,0x7f
c0025511:	3c 70                	cmp    al,0x70
c0025513:	74 15                	je     c002552a <SATAPI::detectMedia()+0x7c>
c0025515:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002551c:	75 0c                	jne    c002552a <SATAPI::detectMedia()+0x7c>
c002551e:	83 ec 0c             	sub    esp,0xc
c0025521:	53                   	push   ebx
c0025522:	e8 0d fd ff ff       	call   c0025234 <SATAPI::diskInserted()>
c0025527:	83 c4 10             	add    esp,0x10
c002552a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002552e:	83 e0 0f             	and    eax,0xf
c0025531:	3c 02                	cmp    al,0x2
c0025533:	75 1b                	jne    c0025550 <SATAPI::detectMedia()+0xa2>
c0025535:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002553a:	75 2d                	jne    c0025569 <SATAPI::detectMedia()+0xbb>
c002553c:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025543:	74 24                	je     c0025569 <SATAPI::detectMedia()+0xbb>
c0025545:	83 ec 0c             	sub    esp,0xc
c0025548:	53                   	push   ebx
c0025549:	e8 ca fc ff ff       	call   c0025218 <SATAPI::diskRemoved()>
c002554e:	eb 16                	jmp    c0025566 <SATAPI::detectMedia()+0xb8>
c0025550:	84 c0                	test   al,al
c0025552:	75 15                	jne    c0025569 <SATAPI::detectMedia()+0xbb>
c0025554:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002555b:	75 0c                	jne    c0025569 <SATAPI::detectMedia()+0xbb>
c002555d:	83 ec 0c             	sub    esp,0xc
c0025560:	53                   	push   ebx
c0025561:	e8 ce fc ff ff       	call   c0025234 <SATAPI::diskInserted()>
c0025566:	83 c4 10             	add    esp,0x10
c0025569:	83 c4 24             	add    esp,0x24
c002556c:	5b                   	pop    ebx
c002556d:	5e                   	pop    esi
c002556e:	c3                   	ret    
c002556f:	90                   	nop

c0025570 <SATAPI::open(int, int, void*)>:
c0025570:	56                   	push   esi
c0025571:	53                   	push   ebx
c0025572:	50                   	push   eax
c0025573:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025577:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002557b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025585:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002558b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025595:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025599:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00255a3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00255a9:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00255b0:	e8 02 a9 fe ff       	call   c000feb7 <Phys::allocatePage()>
c00255b5:	89 c6                	mov    esi,eax
c00255b7:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00255bd:	81 c6 00 10 00 00    	add    esi,0x1000
c00255c3:	e8 ef a8 fe ff       	call   c000feb7 <Phys::allocatePage()>
c00255c8:	39 c6                	cmp    esi,eax
c00255ca:	74 10                	je     c00255dc <SATAPI::open(int, int, void*)+0x6c>
c00255cc:	83 ec 0c             	sub    esp,0xc
c00255cf:	68 97 d2 02 c0       	push   0xc002d297
c00255d4:	e8 b6 4f ff ff       	call   c001a58f <Krnl::panic(char const*)>
c00255d9:	83 c4 10             	add    esp,0x10
c00255dc:	83 ec 0c             	sub    esp,0xc
c00255df:	6a 02                	push   0x2
c00255e1:	e8 09 c4 fe ff       	call   c00119ef <Virt::allocateKernelVirtualPages(int)>
c00255e6:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00255ec:	e8 3d c6 fe ff       	call   c0011c2e <Virt::getAKernelVAS()>
c00255f1:	6a 03                	push   0x3
c00255f3:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00255f9:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00255ff:	50                   	push   eax
c0025600:	e8 17 cc fe ff       	call   c001221c <VAS::mapPage(unsigned long, unsigned long, int)>
c0025605:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002560c:	83 c4 14             	add    esp,0x14
c002560f:	53                   	push   ebx
c0025610:	e8 99 fe ff ff       	call   c00254ae <SATAPI::detectMedia()>
c0025615:	83 c4 14             	add    esp,0x14
c0025618:	31 c0                	xor    eax,eax
c002561a:	5b                   	pop    ebx
c002561b:	5e                   	pop    esi
c002561c:	c3                   	ret    
c002561d:	90                   	nop

c002561e <SATAPI::read(unsigned long long, int, void*)>:
c002561e:	55                   	push   ebp
c002561f:	57                   	push   edi
c0025620:	56                   	push   esi
c0025621:	53                   	push   ebx
c0025622:	83 ec 1c             	sub    esp,0x1c
c0025625:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025629:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002562d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025631:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025638:	74 19                	je     c0025653 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002563a:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c002563f:	7e 2e                	jle    c002566f <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025641:	83 ec 0c             	sub    esp,0xc
c0025644:	68 ad d2 02 c0       	push   0xc002d2ad
c0025649:	e8 41 4f ff ff       	call   c001a58f <Krnl::panic(char const*)>
c002564e:	83 c4 10             	add    esp,0x10
c0025651:	eb 1c                	jmp    c002566f <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025653:	83 ec 0c             	sub    esp,0xc
c0025656:	55                   	push   ebp
c0025657:	e8 52 fe ff ff       	call   c00254ae <SATAPI::detectMedia()>
c002565c:	83 c4 10             	add    esp,0x10
c002565f:	b8 02 00 00 00       	mov    eax,0x2
c0025664:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002566b:	75 cd                	jne    c002563a <SATAPI::read(unsigned long long, int, void*)+0x1c>
c002566d:	eb 49                	jmp    c00256b8 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c002566f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025673:	b9 03 00 00 00       	mov    ecx,0x3
c0025678:	fc                   	cld    
c0025679:	31 c0                	xor    eax,eax
c002567b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002567d:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025682:	89 d8                	mov    eax,ebx
c0025684:	86 e0                	xchg   al,ah
c0025686:	c1 c0 10             	rol    eax,0x10
c0025689:	86 e0                	xchg   al,ah
c002568b:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c002568f:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025693:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025697:	50                   	push   eax
c0025698:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002569c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00256a0:	56                   	push   esi
c00256a1:	53                   	push   ebx
c00256a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00256a6:	c1 e0 0b             	shl    eax,0xb
c00256a9:	50                   	push   eax
c00256aa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00256ae:	50                   	push   eax
c00256af:	55                   	push   ebp
c00256b0:	e8 ad fb ff ff       	call   c0025262 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00256b5:	83 c4 20             	add    esp,0x20
c00256b8:	83 c4 1c             	add    esp,0x1c
c00256bb:	5b                   	pop    ebx
c00256bc:	5e                   	pop    esi
c00256bd:	5f                   	pop    edi
c00256be:	5d                   	pop    ebp
c00256bf:	c3                   	ret    

c00256c0 <AVX::open(int, int, void*)>:
c00256c0:	83 ec 0c             	sub    esp,0xc
c00256c3:	e8 40 11 00 00       	call   c0026808 <avxInit>
c00256c8:	b8 00 00 00 00       	mov    eax,0x0
c00256cd:	83 c4 0c             	add    esp,0xc
c00256d0:	c3                   	ret    
c00256d1:	90                   	nop

c00256d2 <AVX::close(int, int, void*)>:
c00256d2:	83 ec 0c             	sub    esp,0xc
c00256d5:	e8 2f 11 00 00       	call   c0026809 <avxClose>
c00256da:	b8 00 00 00 00       	mov    eax,0x0
c00256df:	83 c4 0c             	add    esp,0xc
c00256e2:	c3                   	ret    
c00256e3:	90                   	nop

c00256e4 <AVX::available()>:
c00256e4:	83 ec 0c             	sub    esp,0xc
c00256e7:	e8 14 11 00 00       	call   c0026800 <avxDetect>
c00256ec:	85 c0                	test   eax,eax
c00256ee:	0f 95 c0             	setne  al
c00256f1:	83 c4 0c             	add    esp,0xc
c00256f4:	c3                   	ret    
c00256f5:	90                   	nop

c00256f6 <AVX::save(void*)>:
c00256f6:	83 ec 0c             	sub    esp,0xc
c00256f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256fd:	83 ec 0c             	sub    esp,0xc
c0025700:	50                   	push   eax
c0025701:	e8 00 11 00 00       	call   c0026806 <avxSave>
c0025706:	83 c4 10             	add    esp,0x10
c0025709:	90                   	nop
c002570a:	83 c4 0c             	add    esp,0xc
c002570d:	c3                   	ret    

c002570e <AVX::load(void*)>:
c002570e:	83 ec 0c             	sub    esp,0xc
c0025711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025715:	83 ec 0c             	sub    esp,0xc
c0025718:	50                   	push   eax
c0025719:	e8 e9 10 00 00       	call   c0026807 <avxLoad>
c002571e:	83 c4 10             	add    esp,0x10
c0025721:	90                   	nop
c0025722:	83 c4 0c             	add    esp,0xc
c0025725:	c3                   	ret    

c0025726 <AVX::AVX()>:
c0025726:	83 ec 0c             	sub    esp,0xc
c0025729:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002572d:	83 ec 08             	sub    esp,0x8
c0025730:	68 10 d3 02 c0       	push   0xc002d310
c0025735:	50                   	push   eax
c0025736:	e8 b7 ef fe ff       	call   c00146f2 <FPU::FPU(char const*)>
c002573b:	83 c4 10             	add    esp,0x10
c002573e:	ba 20 d3 02 c0       	mov    edx,0xc002d320
c0025743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025747:	89 10                	mov    DWORD PTR [eax],edx
c0025749:	90                   	nop
c002574a:	83 c4 0c             	add    esp,0xc
c002574d:	c3                   	ret    

c002574e <MMX::available()>:
c002574e:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0025753:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025759:	83 e0 20             	and    eax,0x20
c002575c:	84 c0                	test   al,al
c002575e:	0f 95 c0             	setne  al
c0025761:	c3                   	ret    

c0025762 <MMX::open(int, int, void*)>:
c0025762:	83 ec 0c             	sub    esp,0xc
c0025765:	e8 28 11 00 00       	call   c0026892 <x87Init>
c002576a:	b8 00 00 00 00       	mov    eax,0x0
c002576f:	83 c4 0c             	add    esp,0xc
c0025772:	c3                   	ret    
c0025773:	90                   	nop

c0025774 <MMX::close(int, int, void*)>:
c0025774:	83 ec 0c             	sub    esp,0xc
c0025777:	e8 30 11 00 00       	call   c00268ac <x87Close>
c002577c:	b8 00 00 00 00       	mov    eax,0x0
c0025781:	83 c4 0c             	add    esp,0xc
c0025784:	c3                   	ret    
c0025785:	90                   	nop

c0025786 <MMX::save(void*)>:
c0025786:	83 ec 0c             	sub    esp,0xc
c0025789:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002578d:	83 ec 0c             	sub    esp,0xc
c0025790:	50                   	push   eax
c0025791:	e8 eb 10 00 00       	call   c0026881 <x87Save>
c0025796:	83 c4 10             	add    esp,0x10
c0025799:	90                   	nop
c002579a:	83 c4 0c             	add    esp,0xc
c002579d:	c3                   	ret    

c002579e <MMX::load(void*)>:
c002579e:	83 ec 0c             	sub    esp,0xc
c00257a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00257a5:	83 ec 0c             	sub    esp,0xc
c00257a8:	50                   	push   eax
c00257a9:	e8 dc 10 00 00       	call   c002688a <x87Load>
c00257ae:	83 c4 10             	add    esp,0x10
c00257b1:	90                   	nop
c00257b2:	83 c4 0c             	add    esp,0xc
c00257b5:	c3                   	ret    

c00257b6 <MMX::MMX()>:
c00257b6:	83 ec 0c             	sub    esp,0xc
c00257b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257bd:	83 ec 08             	sub    esp,0x8
c00257c0:	68 50 d3 02 c0       	push   0xc002d350
c00257c5:	50                   	push   eax
c00257c6:	e8 27 ef fe ff       	call   c00146f2 <FPU::FPU(char const*)>
c00257cb:	83 c4 10             	add    esp,0x10
c00257ce:	ba 60 d3 02 c0       	mov    edx,0xc002d360
c00257d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257d7:	89 10                	mov    DWORD PTR [eax],edx
c00257d9:	90                   	nop
c00257da:	83 c4 0c             	add    esp,0xc
c00257dd:	c3                   	ret    

c00257de <SSE::open(int, int, void*)>:
c00257de:	83 ec 0c             	sub    esp,0xc
c00257e1:	e8 5e 10 00 00       	call   c0026844 <sseInit>
c00257e6:	b8 00 00 00 00       	mov    eax,0x0
c00257eb:	83 c4 0c             	add    esp,0xc
c00257ee:	c3                   	ret    
c00257ef:	90                   	nop

c00257f0 <SSE::close(int, int, void*)>:
c00257f0:	83 ec 0c             	sub    esp,0xc
c00257f3:	e8 5c 10 00 00       	call   c0026854 <sseClose>
c00257f8:	b8 00 00 00 00       	mov    eax,0x0
c00257fd:	83 c4 0c             	add    esp,0xc
c0025800:	c3                   	ret    
c0025801:	90                   	nop

c0025802 <SSE::available()>:
c0025802:	83 ec 1c             	sub    esp,0x1c
c0025805:	e8 16 10 00 00       	call   c0026820 <absolutelyNoChanceInHell>
c002580a:	85 c0                	test   eax,eax
c002580c:	0f 95 c0             	setne  al
c002580f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025813:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025817:	83 c4 1c             	add    esp,0x1c
c002581a:	c3                   	ret    
c002581b:	90                   	nop

c002581c <SSE::save(void*)>:
c002581c:	83 ec 0c             	sub    esp,0xc
c002581f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025823:	83 ec 0c             	sub    esp,0xc
c0025826:	50                   	push   eax
c0025827:	e8 0c 10 00 00       	call   c0026838 <sseSave>
c002582c:	83 c4 10             	add    esp,0x10
c002582f:	90                   	nop
c0025830:	83 c4 0c             	add    esp,0xc
c0025833:	c3                   	ret    

c0025834 <SSE::load(void*)>:
c0025834:	83 ec 0c             	sub    esp,0xc
c0025837:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002583b:	83 ec 0c             	sub    esp,0xc
c002583e:	50                   	push   eax
c002583f:	e8 fa 0f 00 00       	call   c002683e <sseLoad>
c0025844:	83 c4 10             	add    esp,0x10
c0025847:	90                   	nop
c0025848:	83 c4 0c             	add    esp,0xc
c002584b:	c3                   	ret    

c002584c <SSE::SSE()>:
c002584c:	83 ec 0c             	sub    esp,0xc
c002584f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025853:	83 ec 08             	sub    esp,0x8
c0025856:	68 90 d3 02 c0       	push   0xc002d390
c002585b:	50                   	push   eax
c002585c:	e8 91 ee fe ff       	call   c00146f2 <FPU::FPU(char const*)>
c0025861:	83 c4 10             	add    esp,0x10
c0025864:	ba a0 d3 02 c0       	mov    edx,0xc002d3a0
c0025869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002586d:	89 10                	mov    DWORD PTR [eax],edx
c002586f:	90                   	nop
c0025870:	83 c4 0c             	add    esp,0xc
c0025873:	c3                   	ret    

c0025874 <x87::open(int, int, void*)>:
c0025874:	83 ec 0c             	sub    esp,0xc
c0025877:	e8 16 10 00 00       	call   c0026892 <x87Init>
c002587c:	b8 00 00 00 00       	mov    eax,0x0
c0025881:	83 c4 0c             	add    esp,0xc
c0025884:	c3                   	ret    
c0025885:	90                   	nop

c0025886 <x87::close(int, int, void*)>:
c0025886:	83 ec 0c             	sub    esp,0xc
c0025889:	e8 1e 10 00 00       	call   c00268ac <x87Close>
c002588e:	b8 00 00 00 00       	mov    eax,0x0
c0025893:	83 c4 0c             	add    esp,0xc
c0025896:	c3                   	ret    
c0025897:	90                   	nop

c0025898 <x87::available()>:
c0025898:	83 ec 0c             	sub    esp,0xc
c002589b:	e8 c6 0f 00 00       	call   c0026866 <x87Detect>
c00258a0:	85 c0                	test   eax,eax
c00258a2:	0f 95 c0             	setne  al
c00258a5:	83 c4 0c             	add    esp,0xc
c00258a8:	c3                   	ret    
c00258a9:	90                   	nop

c00258aa <x87::save(void*)>:
c00258aa:	83 ec 0c             	sub    esp,0xc
c00258ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00258b1:	83 ec 0c             	sub    esp,0xc
c00258b4:	50                   	push   eax
c00258b5:	e8 c7 0f 00 00       	call   c0026881 <x87Save>
c00258ba:	83 c4 10             	add    esp,0x10
c00258bd:	90                   	nop
c00258be:	83 c4 0c             	add    esp,0xc
c00258c1:	c3                   	ret    

c00258c2 <x87::load(void*)>:
c00258c2:	83 ec 0c             	sub    esp,0xc
c00258c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00258c9:	83 ec 0c             	sub    esp,0xc
c00258cc:	50                   	push   eax
c00258cd:	e8 b8 0f 00 00       	call   c002688a <x87Load>
c00258d2:	83 c4 10             	add    esp,0x10
c00258d5:	90                   	nop
c00258d6:	83 c4 0c             	add    esp,0xc
c00258d9:	c3                   	ret    

c00258da <x87::x87()>:
c00258da:	83 ec 0c             	sub    esp,0xc
c00258dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258e1:	83 ec 08             	sub    esp,0x8
c00258e4:	68 d0 d3 02 c0       	push   0xc002d3d0
c00258e9:	50                   	push   eax
c00258ea:	e8 03 ee fe ff       	call   c00146f2 <FPU::FPU(char const*)>
c00258ef:	83 c4 10             	add    esp,0x10
c00258f2:	ba e0 d3 02 c0       	mov    edx,0xc002d3e0
c00258f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258fb:	89 10                	mov    DWORD PTR [eax],edx
c00258fd:	90                   	nop
c00258fe:	83 c4 0c             	add    esp,0xc
c0025901:	c3                   	ret    

c0025902 <APIC::disable()>:
c0025902:	90                   	nop
c0025903:	c3                   	ret    

c0025904 <APIC::close(int, int, void*)>:
c0025904:	55                   	push   ebp
c0025905:	89 e5                	mov    ebp,esp
c0025907:	83 ec 08             	sub    esp,0x8
c002590a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002590d:	8b 00                	mov    eax,DWORD PTR [eax]
c002590f:	83 c0 3c             	add    eax,0x3c
c0025912:	8b 00                	mov    eax,DWORD PTR [eax]
c0025914:	83 ec 0c             	sub    esp,0xc
c0025917:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002591a:	ff d0                	call   eax
c002591c:	83 c4 10             	add    esp,0x10
c002591f:	b8 00 00 00 00       	mov    eax,0x0
c0025924:	c9                   	leave  
c0025925:	c3                   	ret    

c0025926 <IOAPIC::close(int, int, void*)>:
c0025926:	b8 00 00 00 00       	mov    eax,0x0
c002592b:	c3                   	ret    

c002592c <APIC::io_wait()>:
c002592c:	eb 00                	jmp    c002592e <APIC::io_wait()+0x2>
c002592e:	eb 00                	jmp    c0025930 <APIC::io_wait()+0x4>
c0025930:	90                   	nop
c0025931:	c3                   	ret    

c0025932 <APIC::getBase()>:
c0025932:	55                   	push   ebp
c0025933:	89 e5                	mov    ebp,esp
c0025935:	83 ec 18             	sub    esp,0x18
c0025938:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c002593d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025943:	83 e0 08             	and    eax,0x8
c0025946:	84 c0                	test   al,al
c0025948:	75 07                	jne    c0025951 <APIC::getBase()+0x1f>
c002594a:	b8 00 00 00 00       	mov    eax,0x0
c002594f:	eb 21                	jmp    c0025972 <APIC::getBase()+0x40>
c0025951:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0025956:	83 ec 08             	sub    esp,0x8
c0025959:	6a 1b                	push   0x1b
c002595b:	50                   	push   eax
c002595c:	e8 8f 94 fe ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c0025961:	83 c4 10             	add    esp,0x10
c0025964:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025967:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002596a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002596d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025972:	c9                   	leave  
c0025973:	c3                   	ret    

c0025974 <APIC::eoi(unsigned char)>:
c0025974:	55                   	push   ebp
c0025975:	89 e5                	mov    ebp,esp
c0025977:	83 ec 28             	sub    esp,0x28
c002597a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002597d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025980:	83 ec 0c             	sub    esp,0xc
c0025983:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025986:	e8 a7 ff ff ff       	call   c0025932 <APIC::getBase()>
c002598b:	83 c4 10             	add    esp,0x10
c002598e:	05 b0 00 00 00       	add    eax,0xb0
c0025993:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025996:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025999:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002599f:	90                   	nop
c00259a0:	c9                   	leave  
c00259a1:	c3                   	ret    

c00259a2 <APIC::open(int, int, void*)>:
c00259a2:	55                   	push   ebp
c00259a3:	89 e5                	mov    ebp,esp
c00259a5:	57                   	push   edi
c00259a6:	56                   	push   esi
c00259a7:	53                   	push   ebx
c00259a8:	83 ec 2c             	sub    esp,0x2c
c00259ab:	83 ec 0c             	sub    esp,0xc
c00259ae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259b1:	e8 7c ff ff ff       	call   c0025932 <APIC::getBase()>
c00259b6:	83 c4 10             	add    esp,0x10
c00259b9:	89 c2                	mov    edx,eax
c00259bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259be:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00259c4:	0f b6 f8             	movzx  edi,al
c00259c7:	89 d0                	mov    eax,edx
c00259c9:	ba 00 00 00 00       	mov    edx,0x0
c00259ce:	89 c1                	mov    ecx,eax
c00259d0:	80 e5 ff             	and    ch,0xff
c00259d3:	89 cb                	mov    ebx,ecx
c00259d5:	0f b6 f2             	movzx  esi,dl
c00259d8:	89 d8                	mov    eax,ebx
c00259da:	89 f2                	mov    edx,esi
c00259dc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00259df:	8d 5f 08             	lea    ebx,[edi+0x8]
c00259e2:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00259e6:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00259ea:	83 e0 00             	and    eax,0x0
c00259ed:	09 d0                	or     eax,edx
c00259ef:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00259f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259f6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00259fc:	8d 50 01             	lea    edx,[eax+0x1]
c00259ff:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025a02:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025a08:	0f b6 d0             	movzx  edx,al
c0025a0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a0e:	83 c2 08             	add    edx,0x8
c0025a11:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025a15:	0f b6 c9             	movzx  ecx,cl
c0025a18:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025a1e:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025a22:	83 ec 0c             	sub    esp,0xc
c0025a25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a28:	e8 05 ff ff ff       	call   c0025932 <APIC::getBase()>
c0025a2d:	83 c4 10             	add    esp,0x10
c0025a30:	05 f0 00 00 00       	add    eax,0xf0
c0025a35:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025a38:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025a3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a3d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025a40:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025a47:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025a4e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025a51:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025a54:	89 10                	mov    DWORD PTR [eax],edx
c0025a56:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025a5d:	a1 10 10 03 c0       	mov    eax,ds:0xc0031010
c0025a62:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025a65:	7d 7c                	jge    c0025ae3 <APIC::open(int, int, void*)+0x141>
c0025a67:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025a6a:	8b 04 85 20 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefe0]
c0025a71:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025a74:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025a77:	8b 04 85 20 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefe0]
c0025a7e:	c1 e8 08             	shr    eax,0x8
c0025a81:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025a85:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025a88:	8b 04 85 20 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefe0]
c0025a8f:	c1 e8 18             	shr    eax,0x18
c0025a92:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025a95:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025a99:	75 40                	jne    c0025adb <APIC::open(int, int, void*)+0x139>
c0025a9b:	83 ec 0c             	sub    esp,0xc
c0025a9e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025aa1:	e8 8c fe ff ff       	call   c0025932 <APIC::getBase()>
c0025aa6:	83 c4 10             	add    esp,0x10
c0025aa9:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025aad:	75 07                	jne    c0025ab6 <APIC::open(int, int, void*)+0x114>
c0025aaf:	ba 60 03 00 00       	mov    edx,0x360
c0025ab4:	eb 05                	jmp    c0025abb <APIC::open(int, int, void*)+0x119>
c0025ab6:	ba 50 03 00 00       	mov    edx,0x350
c0025abb:	01 d0                	add    eax,edx
c0025abd:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025ac0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025ac3:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ac5:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025ac8:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025acf:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025ad3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025ad6:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025ad9:	89 10                	mov    DWORD PTR [eax],edx
c0025adb:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025ade:	e9 7a ff ff ff       	jmp    c0025a5d <APIC::open(int, int, void*)+0xbb>
c0025ae3:	b8 00 00 00 00       	mov    eax,0x0
c0025ae8:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025aeb:	5b                   	pop    ebx
c0025aec:	5e                   	pop    esi
c0025aed:	5f                   	pop    edi
c0025aee:	5d                   	pop    ebp
c0025aef:	c3                   	ret    

c0025af0 <IOAPIC::IOAPIC()>:
c0025af0:	83 ec 0c             	sub    esp,0xc
c0025af3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025af7:	83 ec 08             	sub    esp,0x8
c0025afa:	68 10 d4 02 c0       	push   0xc002d410
c0025aff:	50                   	push   eax
c0025b00:	e8 db e8 fe ff       	call   c00143e0 <Device::Device(char const*)>
c0025b05:	83 c4 10             	add    esp,0x10
c0025b08:	ba 38 d5 02 c0       	mov    edx,0xc002d538
c0025b0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b11:	89 10                	mov    DWORD PTR [eax],edx
c0025b13:	90                   	nop
c0025b14:	83 c4 0c             	add    esp,0xc
c0025b17:	c3                   	ret    

c0025b18 <APIC::APIC()>:
c0025b18:	53                   	push   ebx
c0025b19:	83 ec 18             	sub    esp,0x18
c0025b1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025b20:	83 ec 08             	sub    esp,0x8
c0025b23:	68 18 d4 02 c0       	push   0xc002d418
c0025b28:	50                   	push   eax
c0025b29:	e8 1e f0 fe ff       	call   c0014b4c <InterruptController::InterruptController(char const*)>
c0025b2e:	83 c4 10             	add    esp,0x10
c0025b31:	ba f0 d4 02 c0       	mov    edx,0xc002d4f0
c0025b36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025b3a:	89 10                	mov    DWORD PTR [eax],edx
c0025b3c:	a0 e0 2a 03 c0       	mov    al,ds:0xc0032ae0
c0025b41:	83 f0 01             	xor    eax,0x1
c0025b44:	84 c0                	test   al,al
c0025b46:	0f 84 a1 00 00 00    	je     c0025bed <APIC::APIC()+0xd5>
c0025b4c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025b51:	a0 c0 10 03 c0       	mov    al,ds:0xc00310c0
c0025b56:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025b5a:	0f 83 86 00 00 00    	jae    c0025be6 <APIC::APIC()+0xce>
c0025b60:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025b68:	83 ec 0c             	sub    esp,0xc
c0025b6b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025b6f:	e8 d7 9c fe ff       	call   c000f84b <malloc>
c0025b74:	83 c4 10             	add    esp,0x10
c0025b77:	89 c3                	mov    ebx,eax
c0025b79:	83 ec 0c             	sub    esp,0xc
c0025b7c:	53                   	push   ebx
c0025b7d:	e8 6e ff ff ff       	call   c0025af0 <IOAPIC::IOAPIC()>
c0025b82:	83 c4 10             	add    esp,0x10
c0025b85:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025b89:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025b8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025b92:	89 14 85 c0 2a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd540],edx
c0025b99:	a1 a0 2a 03 c0       	mov    eax,ds:0xc0032aa0
c0025b9e:	40                   	inc    eax
c0025b9f:	a3 a0 2a 03 c0       	mov    ds:0xc0032aa0,eax
c0025ba4:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0025ba9:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025baf:	83 ec 08             	sub    esp,0x8
c0025bb2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025bb6:	50                   	push   eax
c0025bb7:	e8 34 e6 fe ff       	call   c00141f0 <Device::addChild(Device*)>
c0025bbc:	83 c4 10             	add    esp,0x10
c0025bbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025bc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0025bc5:	83 c0 08             	add    eax,0x8
c0025bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0025bca:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025bcf:	6a 00                	push   0x0
c0025bd1:	6a 00                	push   0x0
c0025bd3:	52                   	push   edx
c0025bd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025bd8:	ff d0                	call   eax
c0025bda:	83 c4 10             	add    esp,0x10
c0025bdd:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025be1:	e9 6b ff ff ff       	jmp    c0025b51 <APIC::APIC()+0x39>
c0025be6:	c6 05 e0 2a 03 c0 01 	mov    BYTE PTR ds:0xc0032ae0,0x1
c0025bed:	90                   	nop
c0025bee:	83 c4 18             	add    esp,0x18
c0025bf1:	5b                   	pop    ebx
c0025bf2:	c3                   	ret    
c0025bf3:	90                   	nop

c0025bf4 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025bf4:	55                   	push   ebp
c0025bf5:	89 e5                	mov    ebp,esp
c0025bf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bfa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025c00:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025c03:	72 1d                	jb     c0025c22 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025c05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c08:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025c0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c11:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025c17:	01 d0                	add    eax,edx
c0025c19:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025c1c:	73 04                	jae    c0025c22 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025c1e:	b0 01                	mov    al,0x1
c0025c20:	eb 02                	jmp    c0025c24 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025c22:	b0 00                	mov    al,0x0
c0025c24:	5d                   	pop    ebp
c0025c25:	c3                   	ret    

c0025c26 <IOAPIC::read(int)>:
c0025c26:	55                   	push   ebp
c0025c27:	89 e5                	mov    ebp,esp
c0025c29:	83 ec 10             	sub    esp,0x10
c0025c2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c2f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025c35:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025c38:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c3b:	0f b6 d0             	movzx  edx,al
c0025c3e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c41:	89 10                	mov    DWORD PTR [eax],edx
c0025c43:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c46:	83 c0 10             	add    eax,0x10
c0025c49:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c4b:	c9                   	leave  
c0025c4c:	c3                   	ret    
c0025c4d:	90                   	nop

c0025c4e <IOAPIC::open(int, int, void*)>:
c0025c4e:	55                   	push   ebp
c0025c4f:	89 e5                	mov    ebp,esp
c0025c51:	57                   	push   edi
c0025c52:	56                   	push   esi
c0025c53:	53                   	push   ebx
c0025c54:	83 ec 0c             	sub    esp,0xc
c0025c57:	83 ec 0c             	sub    esp,0xc
c0025c5a:	68 43 d4 02 c0       	push   0xc002d443
c0025c5f:	e8 5f d1 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0025c64:	83 c4 10             	add    esp,0x10
c0025c67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c6a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025c6d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025c73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c76:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025c7c:	8b 14 85 00 11 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcef00]
c0025c83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c86:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025c8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c8f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025c95:	8b 14 85 80 11 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcee80]
c0025c9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c9f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025ca5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ca8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025cae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025cb1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025cb7:	0f b6 f8             	movzx  edi,al
c0025cba:	89 d0                	mov    eax,edx
c0025cbc:	ba 00 00 00 00       	mov    edx,0x0
c0025cc1:	89 c1                	mov    ecx,eax
c0025cc3:	80 e5 ff             	and    ch,0xff
c0025cc6:	89 cb                	mov    ebx,ecx
c0025cc8:	0f b6 f2             	movzx  esi,dl
c0025ccb:	89 d8                	mov    eax,ebx
c0025ccd:	89 f2                	mov    edx,esi
c0025ccf:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025cd2:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025cd5:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025cd9:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025cdd:	83 e0 00             	and    eax,0x0
c0025ce0:	09 d0                	or     eax,edx
c0025ce2:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025ce6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ce9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025cef:	8d 50 01             	lea    edx,[eax+0x1]
c0025cf2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025cf5:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025cfb:	0f b6 d0             	movzx  edx,al
c0025cfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d01:	83 c2 08             	add    edx,0x8
c0025d04:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025d08:	0f b6 c9             	movzx  ecx,cl
c0025d0b:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025d11:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025d15:	83 ec 08             	sub    esp,0x8
c0025d18:	6a 01                	push   0x1
c0025d1a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d1d:	e8 04 ff ff ff       	call   c0025c26 <IOAPIC::read(int)>
c0025d22:	83 c4 10             	add    esp,0x10
c0025d25:	c1 f8 10             	sar    eax,0x10
c0025d28:	0f b6 c0             	movzx  eax,al
c0025d2b:	8d 50 01             	lea    edx,[eax+0x1]
c0025d2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d31:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025d37:	b8 00 00 00 00       	mov    eax,0x0
c0025d3c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025d3f:	5b                   	pop    ebx
c0025d40:	5e                   	pop    esi
c0025d41:	5f                   	pop    edi
c0025d42:	5d                   	pop    ebp
c0025d43:	c3                   	ret    

c0025d44 <IOAPIC::write(int, int)>:
c0025d44:	55                   	push   ebp
c0025d45:	89 e5                	mov    ebp,esp
c0025d47:	83 ec 10             	sub    esp,0x10
c0025d4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d4d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025d53:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025d56:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d59:	0f b6 d0             	movzx  edx,al
c0025d5c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025d5f:	89 10                	mov    DWORD PTR [eax],edx
c0025d61:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025d64:	8d 50 10             	lea    edx,[eax+0x10]
c0025d67:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025d6a:	89 02                	mov    DWORD PTR [edx],eax
c0025d6c:	90                   	nop
c0025d6d:	c9                   	leave  
c0025d6e:	c3                   	ret    
c0025d6f:	90                   	nop

c0025d70 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025d70:	55                   	push   ebp
c0025d71:	89 e5                	mov    ebp,esp
c0025d73:	53                   	push   ebx
c0025d74:	83 ec 2c             	sub    esp,0x2c
c0025d77:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d7a:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025d7d:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025d80:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025d83:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025d86:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025d89:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025d8c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025d8f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025d92:	88 d8                	mov    al,bl
c0025d94:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025d97:	88 c8                	mov    al,cl
c0025d99:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025d9c:	88 d0                	mov    al,dl
c0025d9e:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025da1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025da5:	83 c0 08             	add    eax,0x8
c0025da8:	01 c0                	add    eax,eax
c0025daa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025dad:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025db1:	83 c0 08             	add    eax,0x8
c0025db4:	01 c0                	add    eax,eax
c0025db6:	40                   	inc    eax
c0025db7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025dba:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025dbd:	50                   	push   eax
c0025dbe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025dc1:	e8 60 fe ff ff       	call   c0025c26 <IOAPIC::read(int)>
c0025dc6:	83 c4 08             	add    esp,0x8
c0025dc9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025dcc:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025dd3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025dd6:	c1 e0 18             	shl    eax,0x18
c0025dd9:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025ddc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025ddf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025de2:	52                   	push   edx
c0025de3:	50                   	push   eax
c0025de4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025de7:	e8 58 ff ff ff       	call   c0025d44 <IOAPIC::write(int, int)>
c0025dec:	83 c4 0c             	add    esp,0xc
c0025def:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025df2:	50                   	push   eax
c0025df3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025df6:	e8 2b fe ff ff       	call   c0025c26 <IOAPIC::read(int)>
c0025dfb:	83 c4 08             	add    esp,0x8
c0025dfe:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025e01:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025e08:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025e0f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025e16:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025e1a:	74 09                	je     c0025e25 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025e1c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025e23:	eb 07                	jmp    c0025e2c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025e25:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025e2c:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025e30:	74 09                	je     c0025e3b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025e32:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025e39:	eb 07                	jmp    c0025e42 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025e3b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025e42:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025e49:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025e4d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025e50:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025e53:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025e56:	52                   	push   edx
c0025e57:	50                   	push   eax
c0025e58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e5b:	e8 e4 fe ff ff       	call   c0025d44 <IOAPIC::write(int, int)>
c0025e60:	83 c4 0c             	add    esp,0xc
c0025e63:	90                   	nop
c0025e64:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025e67:	c9                   	leave  
c0025e68:	c3                   	ret    
c0025e69:	90                   	nop

c0025e6a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025e6a:	55                   	push   ebp
c0025e6b:	89 e5                	mov    ebp,esp
c0025e6d:	57                   	push   edi
c0025e6e:	56                   	push   esi
c0025e6f:	53                   	push   ebx
c0025e70:	83 ec 2c             	sub    esp,0x2c
c0025e73:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025e76:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025e79:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025e7d:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025e81:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025e85:	74 5a                	je     c0025ee1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025e87:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025e8b:	7f 44                	jg     c0025ed1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025e8d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e90:	05 80 d9 02 c0       	add    eax,0xc002d980
c0025e95:	8a 00                	mov    al,BYTE PTR [eax]
c0025e97:	0f b6 c0             	movzx  eax,al
c0025e9a:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025e9d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ea0:	66 8b 84 00 a0 10 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcef60]
c0025ea8:	0f b7 c0             	movzx  eax,ax
c0025eab:	83 e0 02             	and    eax,0x2
c0025eae:	85 c0                	test   eax,eax
c0025eb0:	74 04                	je     c0025eb6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025eb2:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025eb6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025eb9:	66 8b 84 00 a0 10 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcef60]
c0025ec1:	0f b7 c0             	movzx  eax,ax
c0025ec4:	83 e0 08             	and    eax,0x8
c0025ec7:	85 c0                	test   eax,eax
c0025ec9:	74 16                	je     c0025ee1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025ecb:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025ecf:	eb 10                	jmp    c0025ee1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025ed1:	83 ec 0c             	sub    esp,0xc
c0025ed4:	68 54 d4 02 c0       	push   0xc002d454
c0025ed9:	e8 b1 46 ff ff       	call   c001a58f <Krnl::panic(char const*)>
c0025ede:	83 c4 10             	add    esp,0x10
c0025ee1:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025ee5:	a1 a0 2a 03 c0       	mov    eax,ds:0xc0032aa0
c0025eea:	83 ec 08             	sub    esp,0x8
c0025eed:	50                   	push   eax
c0025eee:	68 8c d4 02 c0       	push   0xc002d48c
c0025ef3:	e8 cb ce fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0025ef8:	83 c4 10             	add    esp,0x10
c0025efb:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025f02:	a1 a0 2a 03 c0       	mov    eax,ds:0xc0032aa0
c0025f07:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025f0a:	7d 67                	jge    c0025f73 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025f0c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025f0f:	8b 04 85 c0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd540]
c0025f16:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025f19:	83 ec 08             	sub    esp,0x8
c0025f1c:	52                   	push   edx
c0025f1d:	50                   	push   eax
c0025f1e:	e8 d1 fc ff ff       	call   c0025bf4 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025f23:	83 c4 10             	add    esp,0x10
c0025f26:	84 c0                	test   al,al
c0025f28:	74 44                	je     c0025f6e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025f2a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025f2d:	8b 1c 85 c0 2a 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd540]
c0025f34:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025f38:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025f3b:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025f3f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f42:	83 c0 20             	add    eax,0x20
c0025f45:	0f b6 f0             	movzx  esi,al
c0025f48:	b8 00 00 00 00       	mov    eax,0x0
c0025f4d:	99                   	cdq    
c0025f4e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025f51:	0f b6 c9             	movzx  ecx,cl
c0025f54:	83 ec 04             	sub    esp,0x4
c0025f57:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025f5a:	57                   	push   edi
c0025f5b:	56                   	push   esi
c0025f5c:	52                   	push   edx
c0025f5d:	50                   	push   eax
c0025f5e:	51                   	push   ecx
c0025f5f:	53                   	push   ebx
c0025f60:	e8 0b fe ff ff       	call   c0025d70 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025f65:	83 c4 20             	add    esp,0x20
c0025f68:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025f6c:	eb 05                	jmp    c0025f73 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025f6e:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025f71:	eb 8f                	jmp    c0025f02 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025f73:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025f76:	83 f0 01             	xor    eax,0x1
c0025f79:	84 c0                	test   al,al
c0025f7b:	74 10                	je     c0025f8d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025f7d:	83 ec 0c             	sub    esp,0xc
c0025f80:	68 a3 d4 02 c0       	push   0xc002d4a3
c0025f85:	e8 05 46 ff ff       	call   c001a58f <Krnl::panic(char const*)>
c0025f8a:	83 c4 10             	add    esp,0x10
c0025f8d:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025f91:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025f98:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025f9c:	7f 65                	jg     c0026003 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025f9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025fa1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025fa4:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025fab:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025fae:	01 ca                	add    edx,ecx
c0025fb0:	83 c2 54             	add    edx,0x54
c0025fb3:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025fb7:	85 c0                	test   eax,eax
c0025fb9:	75 43                	jne    c0025ffe <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025fbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025fbe:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025fc1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025fc8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025fcb:	01 ca                	add    edx,ecx
c0025fcd:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025fd0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025fd3:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025fd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025fda:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025fdd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025fe4:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025fe7:	01 ca                	add    edx,ecx
c0025fe9:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025fef:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025ff2:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025ff6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ff9:	83 e8 20             	sub    eax,0x20
c0025ffc:	eb 1a                	jmp    c0026018 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025ffe:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0026001:	eb 95                	jmp    c0025f98 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0026003:	83 ec 0c             	sub    esp,0xc
c0026006:	68 b0 d4 02 c0       	push   0xc002d4b0
c002600b:	e8 7f 45 ff ff       	call   c001a58f <Krnl::panic(char const*)>
c0026010:	83 c4 10             	add    esp,0x10
c0026013:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026018:	8d 65 f4             	lea    esp,[ebp-0xc]
c002601b:	5b                   	pop    ebx
c002601c:	5e                   	pop    esi
c002601d:	5f                   	pop    edi
c002601e:	5d                   	pop    ebp
c002601f:	c3                   	ret    

c0026020 <PIC::disable()>:
c0026020:	55                   	push   ebp
c0026021:	89 e5                	mov    ebp,esp
c0026023:	83 ec 10             	sub    esp,0x10
c0026026:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c002602c:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0026030:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026033:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026037:	ee                   	out    dx,al
c0026038:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c002603e:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0026042:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026045:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0026049:	ee                   	out    dx,al
c002604a:	90                   	nop
c002604b:	c9                   	leave  
c002604c:	c3                   	ret    
c002604d:	90                   	nop

c002604e <PIC::close(int, int, void*)>:
c002604e:	55                   	push   ebp
c002604f:	89 e5                	mov    ebp,esp
c0026051:	83 ec 08             	sub    esp,0x8
c0026054:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026057:	8b 00                	mov    eax,DWORD PTR [eax]
c0026059:	83 c0 3c             	add    eax,0x3c
c002605c:	8b 00                	mov    eax,DWORD PTR [eax]
c002605e:	83 ec 0c             	sub    esp,0xc
c0026061:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026064:	ff d0                	call   eax
c0026066:	83 c4 10             	add    esp,0x10
c0026069:	b8 00 00 00 00       	mov    eax,0x0
c002606e:	c9                   	leave  
c002606f:	c3                   	ret    

c0026070 <PIC::PIC()>:
c0026070:	83 ec 0c             	sub    esp,0xc
c0026073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026077:	83 ec 08             	sub    esp,0x8
c002607a:	68 5c d5 02 c0       	push   0xc002d55c
c002607f:	50                   	push   eax
c0026080:	e8 c7 ea fe ff       	call   c0014b4c <InterruptController::InterruptController(char const*)>
c0026085:	83 c4 10             	add    esp,0x10
c0026088:	ba 88 d5 02 c0       	mov    edx,0xc002d588
c002608d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026091:	89 10                	mov    DWORD PTR [eax],edx
c0026093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026097:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002609d:	0f b6 d0             	movzx  edx,al
c00260a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260a4:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00260ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260af:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00260b5:	0f b6 d0             	movzx  edx,al
c00260b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260bc:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00260c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260c5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00260cb:	8d 50 01             	lea    edx,[eax+0x1]
c00260ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00260d2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00260d8:	0f b6 d0             	movzx  edx,al
c00260db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260df:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00260e3:	83 e1 3f             	and    ecx,0x3f
c00260e6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00260ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260ee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00260f4:	0f b6 d0             	movzx  edx,al
c00260f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260fb:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0026102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026106:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002610c:	0f b6 d0             	movzx  edx,al
c002610f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026113:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002611c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026122:	8d 50 01             	lea    edx,[eax+0x1]
c0026125:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026129:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002612f:	0f b6 d0             	movzx  edx,al
c0026132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026136:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002613a:	83 e1 3f             	and    ecx,0x3f
c002613d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026141:	90                   	nop
c0026142:	83 c4 0c             	add    esp,0xc
c0026145:	c3                   	ret    

c0026146 <PIC::ioWait()>:
c0026146:	eb 00                	jmp    c0026148 <PIC::ioWait()+0x2>
c0026148:	eb 00                	jmp    c002614a <PIC::ioWait()+0x4>
c002614a:	90                   	nop
c002614b:	c3                   	ret    

c002614c <PIC::getIRQReg(int)>:
c002614c:	55                   	push   ebp
c002614d:	89 e5                	mov    ebp,esp
c002614f:	83 ec 10             	sub    esp,0x10
c0026152:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026155:	0f b6 c0             	movzx  eax,al
c0026158:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002615e:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026161:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026164:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026168:	ee                   	out    dx,al
c0026169:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002616c:	0f b6 c0             	movzx  eax,al
c002616f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026175:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026178:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002617b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002617f:	ee                   	out    dx,al
c0026180:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026186:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002618a:	89 c2                	mov    edx,eax
c002618c:	ec                   	in     al,dx
c002618d:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026190:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026193:	0f b6 c0             	movzx  eax,al
c0026196:	c1 e0 08             	shl    eax,0x8
c0026199:	89 c1                	mov    ecx,eax
c002619b:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00261a1:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00261a5:	89 c2                	mov    edx,eax
c00261a7:	ec                   	in     al,dx
c00261a8:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00261ab:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00261ae:	0f b6 c0             	movzx  eax,al
c00261b1:	09 c8                	or     eax,ecx
c00261b3:	c9                   	leave  
c00261b4:	c3                   	ret    
c00261b5:	90                   	nop

c00261b6 <PIC::eoi(unsigned char)>:
c00261b6:	55                   	push   ebp
c00261b7:	89 e5                	mov    ebp,esp
c00261b9:	83 ec 14             	sub    esp,0x14
c00261bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00261bf:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00261c2:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00261c6:	75 1e                	jne    c00261e6 <PIC::eoi(unsigned char)+0x30>
c00261c8:	6a 0b                	push   0xb
c00261ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261cd:	e8 7a ff ff ff       	call   c002614c <PIC::getIRQReg(int)>
c00261d2:	83 c4 08             	add    esp,0x8
c00261d5:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00261d9:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00261dd:	25 80 00 00 00       	and    eax,0x80
c00261e2:	85 c0                	test   eax,eax
c00261e4:	74 5f                	je     c0026245 <PIC::eoi(unsigned char)+0x8f>
c00261e6:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00261ea:	75 2d                	jne    c0026219 <PIC::eoi(unsigned char)+0x63>
c00261ec:	6a 0b                	push   0xb
c00261ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261f1:	e8 56 ff ff ff       	call   c002614c <PIC::getIRQReg(int)>
c00261f6:	83 c4 08             	add    esp,0x8
c00261f9:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00261fd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026200:	66 85 c0             	test   ax,ax
c0026203:	78 14                	js     c0026219 <PIC::eoi(unsigned char)+0x63>
c0026205:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c002620b:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c002620f:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026212:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026216:	ee                   	out    dx,al
c0026217:	eb 2d                	jmp    c0026246 <PIC::eoi(unsigned char)+0x90>
c0026219:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002621d:	76 12                	jbe    c0026231 <PIC::eoi(unsigned char)+0x7b>
c002621f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026225:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026229:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002622c:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026230:	ee                   	out    dx,al
c0026231:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026237:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002623b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002623e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026242:	ee                   	out    dx,al
c0026243:	eb 01                	jmp    c0026246 <PIC::eoi(unsigned char)+0x90>
c0026245:	90                   	nop
c0026246:	c9                   	leave  
c0026247:	c3                   	ret    

c0026248 <PIC::remap()>:
c0026248:	55                   	push   ebp
c0026249:	89 e5                	mov    ebp,esp
c002624b:	83 ec 48             	sub    esp,0x48
c002624e:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026255:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002625c:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026262:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026265:	89 c2                	mov    edx,eax
c0026267:	ec                   	in     al,dx
c0026268:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002626b:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c002626e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026271:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026277:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002627a:	89 c2                	mov    edx,eax
c002627c:	ec                   	in     al,dx
c002627d:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026280:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026283:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026286:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002628c:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026290:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026293:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026296:	ee                   	out    dx,al
c0026297:	83 ec 0c             	sub    esp,0xc
c002629a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002629d:	e8 a4 fe ff ff       	call   c0026146 <PIC::ioWait()>
c00262a2:	83 c4 10             	add    esp,0x10
c00262a5:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00262ab:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00262af:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00262b2:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00262b5:	ee                   	out    dx,al
c00262b6:	83 ec 0c             	sub    esp,0xc
c00262b9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262bc:	e8 85 fe ff ff       	call   c0026146 <PIC::ioWait()>
c00262c1:	83 c4 10             	add    esp,0x10
c00262c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00262c7:	0f b6 c0             	movzx  eax,al
c00262ca:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00262d0:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00262d3:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00262d6:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00262d9:	ee                   	out    dx,al
c00262da:	83 ec 0c             	sub    esp,0xc
c00262dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262e0:	e8 61 fe ff ff       	call   c0026146 <PIC::ioWait()>
c00262e5:	83 c4 10             	add    esp,0x10
c00262e8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00262eb:	0f b6 c0             	movzx  eax,al
c00262ee:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00262f4:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00262f7:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00262fa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00262fd:	ee                   	out    dx,al
c00262fe:	83 ec 0c             	sub    esp,0xc
c0026301:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026304:	e8 3d fe ff ff       	call   c0026146 <PIC::ioWait()>
c0026309:	83 c4 10             	add    esp,0x10
c002630c:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026312:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026316:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026319:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c002631c:	ee                   	out    dx,al
c002631d:	83 ec 0c             	sub    esp,0xc
c0026320:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026323:	e8 1e fe ff ff       	call   c0026146 <PIC::ioWait()>
c0026328:	83 c4 10             	add    esp,0x10
c002632b:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026331:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026335:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026338:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002633b:	ee                   	out    dx,al
c002633c:	83 ec 0c             	sub    esp,0xc
c002633f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026342:	e8 ff fd ff ff       	call   c0026146 <PIC::ioWait()>
c0026347:	83 c4 10             	add    esp,0x10
c002634a:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026350:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026354:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026357:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002635a:	ee                   	out    dx,al
c002635b:	83 ec 0c             	sub    esp,0xc
c002635e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026361:	e8 e0 fd ff ff       	call   c0026146 <PIC::ioWait()>
c0026366:	83 c4 10             	add    esp,0x10
c0026369:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c002636f:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026373:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026376:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026379:	ee                   	out    dx,al
c002637a:	83 ec 0c             	sub    esp,0xc
c002637d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026380:	e8 c1 fd ff ff       	call   c0026146 <PIC::ioWait()>
c0026385:	83 c4 10             	add    esp,0x10
c0026388:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c002638c:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026392:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026395:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026398:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002639b:	ee                   	out    dx,al
c002639c:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00263a0:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00263a6:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00263a9:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00263ac:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00263af:	ee                   	out    dx,al
c00263b0:	90                   	nop
c00263b1:	c9                   	leave  
c00263b2:	c3                   	ret    
c00263b3:	90                   	nop

c00263b4 <PIC::open(int, int, void*)>:
c00263b4:	55                   	push   ebp
c00263b5:	89 e5                	mov    ebp,esp
c00263b7:	83 ec 18             	sub    esp,0x18
c00263ba:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00263c0:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00263c4:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00263c7:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00263cb:	ee                   	out    dx,al
c00263cc:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00263d2:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00263d6:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00263d9:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00263dd:	ee                   	out    dx,al
c00263de:	83 ec 0c             	sub    esp,0xc
c00263e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263e4:	e8 5f fe ff ff       	call   c0026248 <PIC::remap()>
c00263e9:	83 c4 10             	add    esp,0x10
c00263ec:	b8 00 00 00 00       	mov    eax,0x0
c00263f1:	c9                   	leave  
c00263f2:	c3                   	ret    
c00263f3:	90                   	nop

c00263f4 <APICTimer::close(int, int, void*)>:
c00263f4:	b8 00 00 00 00       	mov    eax,0x0
c00263f9:	c3                   	ret    

c00263fa <apicTimerHandler(regs*, void*)>:
c00263fa:	83 ec 0c             	sub    esp,0xc
c00263fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026401:	8b 00                	mov    eax,DWORD PTR [eax]
c0026403:	99                   	cdq    
c0026404:	52                   	push   edx
c0026405:	50                   	push   eax
c0026406:	6a 00                	push   0x0
c0026408:	68 00 ca 9a 3b       	push   0x3b9aca00
c002640d:	e8 92 07 00 00       	call   c0026ba4 <__udivdi3>
c0026412:	83 c4 10             	add    esp,0x10
c0026415:	83 ec 08             	sub    esp,0x8
c0026418:	52                   	push   edx
c0026419:	50                   	push   eax
c002641a:	e8 80 08 ff ff       	call   c0016c9f <timerHandler(unsigned long long)>
c002641f:	83 c4 10             	add    esp,0x10
c0026422:	90                   	nop
c0026423:	83 c4 0c             	add    esp,0xc
c0026426:	c3                   	ret    
c0026427:	90                   	nop

c0026428 <APICTimer::write(int)>:
c0026428:	53                   	push   ebx
c0026429:	83 ec 28             	sub    esp,0x28
c002642c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026430:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026434:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002643a:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c002643f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026445:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002644b:	83 ec 0c             	sub    esp,0xc
c002644e:	50                   	push   eax
c002644f:	e8 de f4 ff ff       	call   c0025932 <APIC::getBase()>
c0026454:	83 c4 10             	add    esp,0x10
c0026457:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002645b:	a1 b0 ed 02 c0       	mov    eax,ds:0xc002edb0
c0026460:	8b 15 b4 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002edb4
c0026466:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002646a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002646e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026472:	05 e0 03 00 00       	add    eax,0x3e0
c0026477:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002647d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026481:	05 80 03 00 00       	add    eax,0x380
c0026486:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c002648c:	fb                   	sti    
c002648d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026491:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026495:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c002649a:	83 d2 00             	adc    edx,0x0
c002649d:	89 c1                	mov    ecx,eax
c002649f:	89 d3                	mov    ebx,edx
c00264a1:	a1 b0 ed 02 c0       	mov    eax,ds:0xc002edb0
c00264a6:	8b 15 b4 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002edb4
c00264ac:	39 c8                	cmp    eax,ecx
c00264ae:	89 d0                	mov    eax,edx
c00264b0:	19 d8                	sbb    eax,ebx
c00264b2:	73 02                	jae    c00264b6 <APICTimer::write(int)+0x8e>
c00264b4:	eb d7                	jmp    c002648d <APICTimer::write(int)+0x65>
c00264b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00264ba:	05 20 03 00 00       	add    eax,0x320
c00264bf:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00264c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00264c9:	05 90 03 00 00       	add    eax,0x390
c00264ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00264d0:	f7 d0                	not    eax
c00264d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00264d6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00264da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264de:	ba 00 00 00 00       	mov    edx,0x0
c00264e3:	f7 f3                	div    ebx
c00264e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00264e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00264ed:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00264f3:	0d 00 00 02 00       	or     eax,0x20000
c00264f8:	89 c2                	mov    edx,eax
c00264fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00264fe:	05 20 03 00 00       	add    eax,0x320
c0026503:	89 10                	mov    DWORD PTR [eax],edx
c0026505:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026509:	05 e0 03 00 00       	add    eax,0x3e0
c002650e:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026514:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026518:	05 80 03 00 00       	add    eax,0x380
c002651d:	89 c2                	mov    edx,eax
c002651f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026523:	89 02                	mov    DWORD PTR [edx],eax
c0026525:	90                   	nop
c0026526:	83 c4 28             	add    esp,0x28
c0026529:	5b                   	pop    ebx
c002652a:	c3                   	ret    
c002652b:	90                   	nop

c002652c <APICTimer::open(int, int, void*)>:
c002652c:	57                   	push   edi
c002652d:	56                   	push   esi
c002652e:	53                   	push   ebx
c002652f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026533:	8b 00                	mov    eax,DWORD PTR [eax]
c0026535:	83 c0 24             	add    eax,0x24
c0026538:	8b 00                	mov    eax,DWORD PTR [eax]
c002653a:	83 ec 08             	sub    esp,0x8
c002653d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026541:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026545:	ff d0                	call   eax
c0026547:	83 c4 10             	add    esp,0x10
c002654a:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c002654f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026555:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002655b:	83 ec 0c             	sub    esp,0xc
c002655e:	50                   	push   eax
c002655f:	e8 ce f3 ff ff       	call   c0025932 <APIC::getBase()>
c0026564:	83 c4 10             	add    esp,0x10
c0026567:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c002656d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026571:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026577:	0f b6 f8             	movzx  edi,al
c002657a:	89 d0                	mov    eax,edx
c002657c:	ba 00 00 00 00       	mov    edx,0x0
c0026581:	89 c1                	mov    ecx,eax
c0026583:	80 e5 ff             	and    ch,0xff
c0026586:	89 cb                	mov    ebx,ecx
c0026588:	0f b6 f2             	movzx  esi,dl
c002658b:	89 d8                	mov    eax,ebx
c002658d:	89 f2                	mov    edx,esi
c002658f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026593:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026596:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002659a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002659e:	83 e0 00             	and    eax,0x0
c00265a1:	09 d0                	or     eax,edx
c00265a3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00265a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265ab:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00265b1:	8d 50 01             	lea    edx,[eax+0x1]
c00265b4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00265b8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00265be:	0f b6 d0             	movzx  edx,al
c00265c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265c5:	83 c2 08             	add    edx,0x8
c00265c8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00265cc:	0f b6 c9             	movzx  ecx,cl
c00265cf:	81 c9 00 00 01 00    	or     ecx,0x10000
c00265d5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00265d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265dd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00265e1:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00265e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00265ef:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00265f5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00265f9:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00265ff:	83 ec 0c             	sub    esp,0xc
c0026602:	51                   	push   ecx
c0026603:	6a 01                	push   0x1
c0026605:	68 fa 63 02 c0       	push   0xc00263fa
c002660a:	52                   	push   edx
c002660b:	50                   	push   eax
c002660c:	e8 63 db fe ff       	call   c0014174 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026611:	83 c4 20             	add    esp,0x20
c0026614:	89 c2                	mov    edx,eax
c0026616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002661a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026620:	b8 00 00 00 00       	mov    eax,0x0
c0026625:	5b                   	pop    ebx
c0026626:	5e                   	pop    esi
c0026627:	5f                   	pop    edi
c0026628:	c3                   	ret    
c0026629:	90                   	nop

c002662a <APICTimer::APICTimer()>:
c002662a:	83 ec 0c             	sub    esp,0xc
c002662d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026631:	83 ec 08             	sub    esp,0x8
c0026634:	68 c8 d5 02 c0       	push   0xc002d5c8
c0026639:	50                   	push   eax
c002663a:	e8 d1 05 ff ff       	call   c0016c10 <Timer::Timer(char const*)>
c002663f:	83 c4 10             	add    esp,0x10
c0026642:	ba dc d5 02 c0       	mov    edx,0xc002d5dc
c0026647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002664b:	89 10                	mov    DWORD PTR [eax],edx
c002664d:	90                   	nop
c002664e:	83 c4 0c             	add    esp,0xc
c0026651:	c3                   	ret    

c0026652 <PIT::write(int)>:
c0026652:	83 ec 10             	sub    esp,0x10
c0026655:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026659:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002665d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026667:	a3 e4 2a 03 c0       	mov    ds:0xc0032ae4,eax
c002666c:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026671:	99                   	cdq    
c0026672:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026676:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002667a:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026681:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026686:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002668a:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002668f:	ee                   	out    dx,al
c0026690:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026694:	0f b6 c0             	movzx  eax,al
c0026697:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002669e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00266a2:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00266a6:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00266ab:	ee                   	out    dx,al
c00266ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00266b0:	c1 f8 08             	sar    eax,0x8
c00266b3:	0f b6 c0             	movzx  eax,al
c00266b6:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00266bd:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00266c1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00266c5:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00266ca:	ee                   	out    dx,al
c00266cb:	90                   	nop
c00266cc:	83 c4 10             	add    esp,0x10
c00266cf:	c3                   	ret    

c00266d0 <pitHandler(regs*, void*)>:
c00266d0:	83 ec 0c             	sub    esp,0xc
c00266d3:	a1 e4 2a 03 c0       	mov    eax,ds:0xc0032ae4
c00266d8:	99                   	cdq    
c00266d9:	52                   	push   edx
c00266da:	50                   	push   eax
c00266db:	6a 00                	push   0x0
c00266dd:	68 00 ca 9a 3b       	push   0x3b9aca00
c00266e2:	e8 bd 04 00 00       	call   c0026ba4 <__udivdi3>
c00266e7:	83 c4 10             	add    esp,0x10
c00266ea:	83 ec 08             	sub    esp,0x8
c00266ed:	52                   	push   edx
c00266ee:	50                   	push   eax
c00266ef:	e8 ab 05 ff ff       	call   c0016c9f <timerHandler(unsigned long long)>
c00266f4:	83 c4 10             	add    esp,0x10
c00266f7:	90                   	nop
c00266f8:	83 c4 0c             	add    esp,0xc
c00266fb:	c3                   	ret    

c00266fc <PIT::open(int, int, void*)>:
c00266fc:	83 ec 0c             	sub    esp,0xc
c00266ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026703:	8b 00                	mov    eax,DWORD PTR [eax]
c0026705:	83 c0 24             	add    eax,0x24
c0026708:	8b 00                	mov    eax,DWORD PTR [eax]
c002670a:	83 ec 08             	sub    esp,0x8
c002670d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026711:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026715:	ff d0                	call   eax
c0026717:	83 c4 10             	add    esp,0x10
c002671a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002671e:	83 ec 0c             	sub    esp,0xc
c0026721:	6a 00                	push   0x0
c0026723:	6a 01                	push   0x1
c0026725:	68 d0 66 02 c0       	push   0xc00266d0
c002672a:	6a 00                	push   0x0
c002672c:	50                   	push   eax
c002672d:	e8 42 da fe ff       	call   c0014174 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026732:	83 c4 20             	add    esp,0x20
c0026735:	89 c2                	mov    edx,eax
c0026737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002673b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026741:	b8 00 00 00 00       	mov    eax,0x0
c0026746:	83 c4 0c             	add    esp,0xc
c0026749:	c3                   	ret    

c002674a <PIT::close(int, int, void*)>:
c002674a:	83 ec 0c             	sub    esp,0xc
c002674d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026751:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002675b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002675f:	6a 01                	push   0x1
c0026761:	68 d0 66 02 c0       	push   0xc00266d0
c0026766:	6a 00                	push   0x0
c0026768:	50                   	push   eax
c0026769:	e8 44 da fe ff       	call   c00141b2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002676e:	83 c4 10             	add    esp,0x10
c0026771:	b8 00 00 00 00       	mov    eax,0x0
c0026776:	83 c4 0c             	add    esp,0xc
c0026779:	c3                   	ret    

c002677a <PIT::PIT()>:
c002677a:	83 ec 0c             	sub    esp,0xc
c002677d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026781:	83 ec 08             	sub    esp,0x8
c0026784:	68 04 d6 02 c0       	push   0xc002d604
c0026789:	50                   	push   eax
c002678a:	e8 81 04 ff ff       	call   c0016c10 <Timer::Timer(char const*)>
c002678f:	83 c4 10             	add    esp,0x10
c0026792:	ba 2c d6 02 c0       	mov    edx,0xc002d62c
c0026797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002679b:	89 10                	mov    DWORD PTR [eax],edx
c002679d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267a1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00267a7:	0f b6 d0             	movzx  edx,al
c00267aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267ae:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00267b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00267bf:	0f b6 d0             	movzx  edx,al
c00267c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267c6:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00267cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267cf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00267d5:	8d 50 01             	lea    edx,[eax+0x1]
c00267d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00267dc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00267e2:	0f b6 d0             	movzx  edx,al
c00267e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267e9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00267ed:	83 e1 3f             	and    ecx,0x3f
c00267f0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00267f4:	90                   	nop
c00267f5:	83 c4 0c             	add    esp,0xc
c00267f8:	c3                   	ret    
c00267f9:	66 90                	xchg   ax,ax
c00267fb:	66 90                	xchg   ax,ax
c00267fd:	66 90                	xchg   ax,ax
c00267ff:	90                   	nop

c0026800 <avxDetect>:
c0026800:	b8 00 00 00 00       	mov    eax,0x0
c0026805:	c3                   	ret    

c0026806 <avxSave>:
c0026806:	c3                   	ret    

c0026807 <avxLoad>:
c0026807:	c3                   	ret    

c0026808 <avxInit>:
c0026808:	c3                   	ret    

c0026809 <avxClose>:
c0026809:	c3                   	ret    

c002680a <wouldSheSayYes>:
c002680a:	c3                   	ret    
c002680b:	49                   	dec    ecx
c002680c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026810:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026814:	75 20                	jne    c0026836 <sseDetect.noSSE+0x1>
c0026816:	4e                   	dec    esi
c0026817:	79 61                	jns    c002687a <x87Detect+0x14>
c0026819:	68 2e 2e 2e 00       	push   0x2e2e2e
c002681e:	66 90                	xchg   ax,ax

c0026820 <absolutelyNoChanceInHell>:
c0026820:	b8 01 00 00 00       	mov    eax,0x1
c0026825:	0f a2                	cpuid  
c0026827:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002682d:	74 06                	je     c0026835 <sseDetect.noSSE>
c002682f:	b8 01 00 00 00       	mov    eax,0x1
c0026834:	c3                   	ret    

c0026835 <sseDetect.noSSE>:
c0026835:	31 c0                	xor    eax,eax
c0026837:	c3                   	ret    

c0026838 <sseSave>:
c0026838:	0f ae 44 24 04       	fxsave [esp+0x4]
c002683d:	c3                   	ret    

c002683e <sseLoad>:
c002683e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026843:	c3                   	ret    

c0026844 <sseInit>:
c0026844:	e8 49 00 00 00       	call   c0026892 <x87Init>
c0026849:	0f 20 e0             	mov    eax,cr4
c002684c:	66 0d 00 06          	or     ax,0x600
c0026850:	0f 22 e0             	mov    cr4,eax
c0026853:	c3                   	ret    

c0026854 <sseClose>:
c0026854:	c3                   	ret    
c0026855:	66 90                	xchg   ax,ax
c0026857:	66 90                	xchg   ax,ax
c0026859:	66 90                	xchg   ax,ax
c002685b:	66 90                	xchg   ax,ax
c002685d:	66 90                	xchg   ax,ax
c002685f:	90                   	nop

c0026860 <value_37F>:
c0026860:	7f 03                	jg     c0026865 <value_37A+0x1>

c0026862 <value_37E>:
c0026862:	7e 03                	jle    c0026867 <x87Detect+0x1>

c0026864 <value_37A>:
c0026864:	7a 03                	jp     c0026869 <x87Detect+0x3>

c0026866 <x87Detect>:
c0026866:	b8 01 00 00 00       	mov    eax,0x1
c002686b:	0f a2                	cpuid  
c002686d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026873:	74 06                	je     c002687b <x87Detect.nox87>
c0026875:	b8 01 00 00 00       	mov    eax,0x1
c002687a:	c3                   	ret    

c002687b <x87Detect.nox87>:
c002687b:	b8 00 00 00 00       	mov    eax,0x0
c0026880:	c3                   	ret    

c0026881 <x87Save>:
c0026881:	55                   	push   ebp
c0026882:	89 e5                	mov    ebp,esp
c0026884:	9b dd 75 08          	fsave  [ebp+0x8]
c0026888:	c9                   	leave  
c0026889:	c3                   	ret    

c002688a <x87Load>:
c002688a:	55                   	push   ebp
c002688b:	89 e5                	mov    ebp,esp
c002688d:	dd 65 08             	frstor [ebp+0x8]
c0026890:	c9                   	leave  
c0026891:	c3                   	ret    

c0026892 <x87Init>:
c0026892:	9b db e3             	finit  
c0026895:	0f 20 c0             	mov    eax,cr0
c0026898:	66 25 fb ff          	and    ax,0xfffb
c002689c:	66 0d 22 00          	or     ax,0x22
c00268a0:	0f 22 c0             	mov    cr0,eax
c00268a3:	0f 06                	clts   
c00268a5:	d9 2d 64 68 02 c0    	fldcw  WORD PTR ds:0xc0026864
c00268ab:	c3                   	ret    

c00268ac <x87Close>:
c00268ac:	c3                   	ret    
c00268ad:	66 90                	xchg   ax,ax
c00268af:	90                   	nop

c00268b0 <__do_global_ctors_aux>:
c00268b0:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c00268b5:	83 f8 ff             	cmp    eax,0xffffffff
c00268b8:	74 1a                	je     c00268d4 <__do_global_ctors_aux+0x24>
c00268ba:	55                   	push   ebp
c00268bb:	89 e5                	mov    ebp,esp
c00268bd:	53                   	push   ebx
c00268be:	52                   	push   edx
c00268bf:	bb 08 94 02 c0       	mov    ebx,0xc0029408
c00268c4:	ff d0                	call   eax
c00268c6:	83 eb 04             	sub    ebx,0x4
c00268c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00268cb:	83 f8 ff             	cmp    eax,0xffffffff
c00268ce:	75 f4                	jne    c00268c4 <__do_global_ctors_aux+0x14>
c00268d0:	58                   	pop    eax
c00268d1:	5b                   	pop    ebx
c00268d2:	5d                   	pop    ebp
c00268d3:	c3                   	ret    
c00268d4:	c3                   	ret    
c00268d5:	66 90                	xchg   ax,ax
c00268d7:	90                   	nop

c00268d8 <__divdi3>:
c00268d8:	55                   	push   ebp
c00268d9:	57                   	push   edi
c00268da:	56                   	push   esi
c00268db:	53                   	push   ebx
c00268dc:	83 ec 1c             	sub    esp,0x1c
c00268df:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00268e3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00268e7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00268ea:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00268ee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00268f2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00268f6:	85 db                	test   ebx,ebx
c00268f8:	0f 88 8e 00 00 00    	js     c002698c <__divdi3+0xb4>
c00268fe:	89 dd                	mov    ebp,ebx
c0026900:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026908:	89 d3                	mov    ebx,edx
c002690a:	85 d2                	test   edx,edx
c002690c:	79 0d                	jns    c002691b <__divdi3+0x43>
c002690e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026912:	f7 d8                	neg    eax
c0026914:	83 d2 00             	adc    edx,0x0
c0026917:	f7 da                	neg    edx
c0026919:	89 d3                	mov    ebx,edx
c002691b:	89 c7                	mov    edi,eax
c002691d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026920:	85 db                	test   ebx,ebx
c0026922:	75 48                	jne    c002696c <__divdi3+0x94>
c0026924:	39 ef                	cmp    edi,ebp
c0026926:	76 24                	jbe    c002694c <__divdi3+0x74>
c0026928:	89 ea                	mov    edx,ebp
c002692a:	f7 f7                	div    edi
c002692c:	89 c1                	mov    ecx,eax
c002692e:	31 f6                	xor    esi,esi
c0026930:	89 c8                	mov    eax,ecx
c0026932:	89 f2                	mov    edx,esi
c0026934:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026938:	85 c9                	test   ecx,ecx
c002693a:	74 07                	je     c0026943 <__divdi3+0x6b>
c002693c:	f7 d8                	neg    eax
c002693e:	83 d2 00             	adc    edx,0x0
c0026941:	f7 da                	neg    edx
c0026943:	83 c4 1c             	add    esp,0x1c
c0026946:	5b                   	pop    ebx
c0026947:	5e                   	pop    esi
c0026948:	5f                   	pop    edi
c0026949:	5d                   	pop    ebp
c002694a:	c3                   	ret    
c002694b:	90                   	nop
c002694c:	85 ff                	test   edi,edi
c002694e:	75 0b                	jne    c002695b <__divdi3+0x83>
c0026950:	b8 01 00 00 00       	mov    eax,0x1
c0026955:	31 d2                	xor    edx,edx
c0026957:	f7 f3                	div    ebx
c0026959:	89 c7                	mov    edi,eax
c002695b:	31 d2                	xor    edx,edx
c002695d:	89 e8                	mov    eax,ebp
c002695f:	f7 f7                	div    edi
c0026961:	89 c6                	mov    esi,eax
c0026963:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026966:	f7 f7                	div    edi
c0026968:	89 c1                	mov    ecx,eax
c002696a:	eb c4                	jmp    c0026930 <__divdi3+0x58>
c002696c:	39 eb                	cmp    ebx,ebp
c002696e:	77 3c                	ja     c00269ac <__divdi3+0xd4>
c0026970:	0f bd f3             	bsr    esi,ebx
c0026973:	83 f6 1f             	xor    esi,0x1f
c0026976:	75 40                	jne    c00269b8 <__divdi3+0xe0>
c0026978:	39 eb                	cmp    ebx,ebp
c002697a:	72 09                	jb     c0026985 <__divdi3+0xad>
c002697c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002697f:	0f 87 97 00 00 00    	ja     c0026a1c <__divdi3+0x144>
c0026985:	b9 01 00 00 00       	mov    ecx,0x1
c002698a:	eb a4                	jmp    c0026930 <__divdi3+0x58>
c002698c:	f7 d9                	neg    ecx
c002698e:	83 d3 00             	adc    ebx,0x0
c0026991:	f7 db                	neg    ebx
c0026993:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026996:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002699a:	89 dd                	mov    ebp,ebx
c002699c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00269a4:	e9 5f ff ff ff       	jmp    c0026908 <__divdi3+0x30>
c00269a9:	8d 76 00             	lea    esi,[esi+0x0]
c00269ac:	31 f6                	xor    esi,esi
c00269ae:	31 c9                	xor    ecx,ecx
c00269b0:	e9 7b ff ff ff       	jmp    c0026930 <__divdi3+0x58>
c00269b5:	8d 76 00             	lea    esi,[esi+0x0]
c00269b8:	b8 20 00 00 00       	mov    eax,0x20
c00269bd:	29 f0                	sub    eax,esi
c00269bf:	89 f1                	mov    ecx,esi
c00269c1:	d3 e3                	shl    ebx,cl
c00269c3:	89 fa                	mov    edx,edi
c00269c5:	88 c1                	mov    cl,al
c00269c7:	d3 ea                	shr    edx,cl
c00269c9:	09 da                	or     edx,ebx
c00269cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00269cf:	89 f1                	mov    ecx,esi
c00269d1:	d3 e7                	shl    edi,cl
c00269d3:	89 eb                	mov    ebx,ebp
c00269d5:	88 c1                	mov    cl,al
c00269d7:	d3 eb                	shr    ebx,cl
c00269d9:	89 f1                	mov    ecx,esi
c00269db:	d3 e5                	shl    ebp,cl
c00269dd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00269e0:	88 c1                	mov    cl,al
c00269e2:	d3 ea                	shr    edx,cl
c00269e4:	09 d5                	or     ebp,edx
c00269e6:	89 e8                	mov    eax,ebp
c00269e8:	89 da                	mov    edx,ebx
c00269ea:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00269ee:	89 d3                	mov    ebx,edx
c00269f0:	89 c5                	mov    ebp,eax
c00269f2:	f7 e7                	mul    edi
c00269f4:	39 d3                	cmp    ebx,edx
c00269f6:	72 18                	jb     c0026a10 <__divdi3+0x138>
c00269f8:	74 0a                	je     c0026a04 <__divdi3+0x12c>
c00269fa:	89 e9                	mov    ecx,ebp
c00269fc:	31 f6                	xor    esi,esi
c00269fe:	e9 2d ff ff ff       	jmp    c0026930 <__divdi3+0x58>
c0026a03:	90                   	nop
c0026a04:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026a07:	89 f1                	mov    ecx,esi
c0026a09:	d3 e7                	shl    edi,cl
c0026a0b:	39 c7                	cmp    edi,eax
c0026a0d:	73 eb                	jae    c00269fa <__divdi3+0x122>
c0026a0f:	90                   	nop
c0026a10:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026a13:	31 f6                	xor    esi,esi
c0026a15:	e9 16 ff ff ff       	jmp    c0026930 <__divdi3+0x58>
c0026a1a:	66 90                	xchg   ax,ax
c0026a1c:	31 c9                	xor    ecx,ecx
c0026a1e:	e9 0d ff ff ff       	jmp    c0026930 <__divdi3+0x58>
c0026a23:	90                   	nop

c0026a24 <__moddi3>:
c0026a24:	55                   	push   ebp
c0026a25:	57                   	push   edi
c0026a26:	56                   	push   esi
c0026a27:	53                   	push   ebx
c0026a28:	83 ec 2c             	sub    esp,0x2c
c0026a2b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026a2f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026a33:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026a37:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026a3b:	85 db                	test   ebx,ebx
c0026a3d:	0f 88 85 00 00 00    	js     c0026ac8 <__moddi3+0xa4>
c0026a43:	89 de                	mov    esi,ebx
c0026a45:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026a4d:	89 d7                	mov    edi,edx
c0026a4f:	85 d2                	test   edx,edx
c0026a51:	79 09                	jns    c0026a5c <__moddi3+0x38>
c0026a53:	f7 d8                	neg    eax
c0026a55:	83 d2 00             	adc    edx,0x0
c0026a58:	f7 da                	neg    edx
c0026a5a:	89 d7                	mov    edi,edx
c0026a5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026a60:	89 cd                	mov    ebp,ecx
c0026a62:	85 ff                	test   edi,edi
c0026a64:	75 52                	jne    c0026ab8 <__moddi3+0x94>
c0026a66:	89 c3                	mov    ebx,eax
c0026a68:	39 f0                	cmp    eax,esi
c0026a6a:	76 24                	jbe    c0026a90 <__moddi3+0x6c>
c0026a6c:	89 c8                	mov    eax,ecx
c0026a6e:	89 f2                	mov    edx,esi
c0026a70:	f7 f3                	div    ebx
c0026a72:	89 d6                	mov    esi,edx
c0026a74:	89 f0                	mov    eax,esi
c0026a76:	31 d2                	xor    edx,edx
c0026a78:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026a7c:	85 c9                	test   ecx,ecx
c0026a7e:	74 07                	je     c0026a87 <__moddi3+0x63>
c0026a80:	f7 d8                	neg    eax
c0026a82:	83 d2 00             	adc    edx,0x0
c0026a85:	f7 da                	neg    edx
c0026a87:	83 c4 2c             	add    esp,0x2c
c0026a8a:	5b                   	pop    ebx
c0026a8b:	5e                   	pop    esi
c0026a8c:	5f                   	pop    edi
c0026a8d:	5d                   	pop    ebp
c0026a8e:	c3                   	ret    
c0026a8f:	90                   	nop
c0026a90:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026a94:	85 db                	test   ebx,ebx
c0026a96:	75 0d                	jne    c0026aa5 <__moddi3+0x81>
c0026a98:	b8 01 00 00 00       	mov    eax,0x1
c0026a9d:	31 d2                	xor    edx,edx
c0026a9f:	f7 f7                	div    edi
c0026aa1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026aa5:	89 f0                	mov    eax,esi
c0026aa7:	31 d2                	xor    edx,edx
c0026aa9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026aad:	f7 f7                	div    edi
c0026aaf:	89 e8                	mov    eax,ebp
c0026ab1:	f7 f7                	div    edi
c0026ab3:	89 d6                	mov    esi,edx
c0026ab5:	eb bd                	jmp    c0026a74 <__moddi3+0x50>
c0026ab7:	90                   	nop
c0026ab8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026abc:	39 f7                	cmp    edi,esi
c0026abe:	76 20                	jbe    c0026ae0 <__moddi3+0xbc>
c0026ac0:	89 c8                	mov    eax,ecx
c0026ac2:	89 f2                	mov    edx,esi
c0026ac4:	eb b2                	jmp    c0026a78 <__moddi3+0x54>
c0026ac6:	66 90                	xchg   ax,ax
c0026ac8:	f7 d9                	neg    ecx
c0026aca:	83 d3 00             	adc    ebx,0x0
c0026acd:	f7 db                	neg    ebx
c0026acf:	89 de                	mov    esi,ebx
c0026ad1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026ad9:	e9 6f ff ff ff       	jmp    c0026a4d <__moddi3+0x29>
c0026ade:	66 90                	xchg   ax,ax
c0026ae0:	0f bd c7             	bsr    eax,edi
c0026ae3:	83 f0 1f             	xor    eax,0x1f
c0026ae6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026aea:	75 24                	jne    c0026b10 <__moddi3+0xec>
c0026aec:	39 f7                	cmp    edi,esi
c0026aee:	72 06                	jb     c0026af6 <__moddi3+0xd2>
c0026af0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026af4:	77 0c                	ja     c0026b02 <__moddi3+0xde>
c0026af6:	89 e9                	mov    ecx,ebp
c0026af8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026afc:	19 fe                	sbb    esi,edi
c0026afe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026b02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026b06:	89 f2                	mov    edx,esi
c0026b08:	e9 6b ff ff ff       	jmp    c0026a78 <__moddi3+0x54>
c0026b0d:	8d 76 00             	lea    esi,[esi+0x0]
c0026b10:	b8 20 00 00 00       	mov    eax,0x20
c0026b15:	89 c2                	mov    edx,eax
c0026b17:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026b1b:	29 da                	sub    edx,ebx
c0026b1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026b21:	88 d9                	mov    cl,bl
c0026b23:	d3 e7                	shl    edi,cl
c0026b25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026b29:	88 d1                	mov    cl,dl
c0026b2b:	d3 e8                	shr    eax,cl
c0026b2d:	09 c7                	or     edi,eax
c0026b2f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026b33:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026b37:	89 d8                	mov    eax,ebx
c0026b39:	88 d9                	mov    cl,bl
c0026b3b:	d3 e7                	shl    edi,cl
c0026b3d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b41:	89 f3                	mov    ebx,esi
c0026b43:	88 d1                	mov    cl,dl
c0026b45:	d3 eb                	shr    ebx,cl
c0026b47:	89 c7                	mov    edi,eax
c0026b49:	88 c1                	mov    cl,al
c0026b4b:	d3 e6                	shl    esi,cl
c0026b4d:	89 e8                	mov    eax,ebp
c0026b4f:	88 d1                	mov    cl,dl
c0026b51:	d3 e8                	shr    eax,cl
c0026b53:	09 f0                	or     eax,esi
c0026b55:	89 f9                	mov    ecx,edi
c0026b57:	d3 e5                	shl    ebp,cl
c0026b59:	89 da                	mov    edx,ebx
c0026b5b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026b5f:	89 d3                	mov    ebx,edx
c0026b61:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b65:	89 c6                	mov    esi,eax
c0026b67:	89 d1                	mov    ecx,edx
c0026b69:	39 d3                	cmp    ebx,edx
c0026b6b:	72 27                	jb     c0026b94 <__moddi3+0x170>
c0026b6d:	74 21                	je     c0026b90 <__moddi3+0x16c>
c0026b6f:	29 f5                	sub    ebp,esi
c0026b71:	19 cb                	sbb    ebx,ecx
c0026b73:	89 de                	mov    esi,ebx
c0026b75:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026b79:	d3 e6                	shl    esi,cl
c0026b7b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026b7f:	89 f9                	mov    ecx,edi
c0026b81:	d3 ed                	shr    ebp,cl
c0026b83:	09 ee                	or     esi,ebp
c0026b85:	89 f0                	mov    eax,esi
c0026b87:	d3 eb                	shr    ebx,cl
c0026b89:	89 da                	mov    edx,ebx
c0026b8b:	e9 e8 fe ff ff       	jmp    c0026a78 <__moddi3+0x54>
c0026b90:	39 c5                	cmp    ebp,eax
c0026b92:	73 db                	jae    c0026b6f <__moddi3+0x14b>
c0026b94:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026b98:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026b9c:	89 d1                	mov    ecx,edx
c0026b9e:	89 c6                	mov    esi,eax
c0026ba0:	eb cd                	jmp    c0026b6f <__moddi3+0x14b>
c0026ba2:	66 90                	xchg   ax,ax

c0026ba4 <__udivdi3>:
c0026ba4:	55                   	push   ebp
c0026ba5:	57                   	push   edi
c0026ba6:	56                   	push   esi
c0026ba7:	53                   	push   ebx
c0026ba8:	83 ec 1c             	sub    esp,0x1c
c0026bab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026baf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026bb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026bb7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026bbb:	85 d2                	test   edx,edx
c0026bbd:	75 41                	jne    c0026c00 <__udivdi3+0x5c>
c0026bbf:	39 f7                	cmp    edi,esi
c0026bc1:	76 15                	jbe    c0026bd8 <__udivdi3+0x34>
c0026bc3:	89 e8                	mov    eax,ebp
c0026bc5:	89 f2                	mov    edx,esi
c0026bc7:	f7 f7                	div    edi
c0026bc9:	31 db                	xor    ebx,ebx
c0026bcb:	89 da                	mov    edx,ebx
c0026bcd:	83 c4 1c             	add    esp,0x1c
c0026bd0:	5b                   	pop    ebx
c0026bd1:	5e                   	pop    esi
c0026bd2:	5f                   	pop    edi
c0026bd3:	5d                   	pop    ebp
c0026bd4:	c3                   	ret    
c0026bd5:	8d 76 00             	lea    esi,[esi+0x0]
c0026bd8:	89 f9                	mov    ecx,edi
c0026bda:	85 ff                	test   edi,edi
c0026bdc:	75 0b                	jne    c0026be9 <__udivdi3+0x45>
c0026bde:	b8 01 00 00 00       	mov    eax,0x1
c0026be3:	31 d2                	xor    edx,edx
c0026be5:	f7 f7                	div    edi
c0026be7:	89 c1                	mov    ecx,eax
c0026be9:	31 d2                	xor    edx,edx
c0026beb:	89 f0                	mov    eax,esi
c0026bed:	f7 f1                	div    ecx
c0026bef:	89 c3                	mov    ebx,eax
c0026bf1:	89 e8                	mov    eax,ebp
c0026bf3:	f7 f1                	div    ecx
c0026bf5:	89 da                	mov    edx,ebx
c0026bf7:	83 c4 1c             	add    esp,0x1c
c0026bfa:	5b                   	pop    ebx
c0026bfb:	5e                   	pop    esi
c0026bfc:	5f                   	pop    edi
c0026bfd:	5d                   	pop    ebp
c0026bfe:	c3                   	ret    
c0026bff:	90                   	nop
c0026c00:	39 f2                	cmp    edx,esi
c0026c02:	77 1c                	ja     c0026c20 <__udivdi3+0x7c>
c0026c04:	0f bd da             	bsr    ebx,edx
c0026c07:	83 f3 1f             	xor    ebx,0x1f
c0026c0a:	75 24                	jne    c0026c30 <__udivdi3+0x8c>
c0026c0c:	39 f2                	cmp    edx,esi
c0026c0e:	72 08                	jb     c0026c18 <__udivdi3+0x74>
c0026c10:	39 ef                	cmp    edi,ebp
c0026c12:	0f 87 84 00 00 00    	ja     c0026c9c <__udivdi3+0xf8>
c0026c18:	b8 01 00 00 00       	mov    eax,0x1
c0026c1d:	eb ac                	jmp    c0026bcb <__udivdi3+0x27>
c0026c1f:	90                   	nop
c0026c20:	31 db                	xor    ebx,ebx
c0026c22:	31 c0                	xor    eax,eax
c0026c24:	89 da                	mov    edx,ebx
c0026c26:	83 c4 1c             	add    esp,0x1c
c0026c29:	5b                   	pop    ebx
c0026c2a:	5e                   	pop    esi
c0026c2b:	5f                   	pop    edi
c0026c2c:	5d                   	pop    ebp
c0026c2d:	c3                   	ret    
c0026c2e:	66 90                	xchg   ax,ax
c0026c30:	b8 20 00 00 00       	mov    eax,0x20
c0026c35:	29 d8                	sub    eax,ebx
c0026c37:	88 d9                	mov    cl,bl
c0026c39:	d3 e2                	shl    edx,cl
c0026c3b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026c3f:	89 fa                	mov    edx,edi
c0026c41:	88 c1                	mov    cl,al
c0026c43:	d3 ea                	shr    edx,cl
c0026c45:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026c49:	09 d1                	or     ecx,edx
c0026c4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026c4f:	88 d9                	mov    cl,bl
c0026c51:	d3 e7                	shl    edi,cl
c0026c53:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026c57:	89 f7                	mov    edi,esi
c0026c59:	88 c1                	mov    cl,al
c0026c5b:	d3 ef                	shr    edi,cl
c0026c5d:	88 d9                	mov    cl,bl
c0026c5f:	d3 e6                	shl    esi,cl
c0026c61:	89 ea                	mov    edx,ebp
c0026c63:	88 c1                	mov    cl,al
c0026c65:	d3 ea                	shr    edx,cl
c0026c67:	09 d6                	or     esi,edx
c0026c69:	89 f0                	mov    eax,esi
c0026c6b:	89 fa                	mov    edx,edi
c0026c6d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026c71:	89 d7                	mov    edi,edx
c0026c73:	89 c6                	mov    esi,eax
c0026c75:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026c79:	39 d7                	cmp    edi,edx
c0026c7b:	72 13                	jb     c0026c90 <__udivdi3+0xec>
c0026c7d:	74 09                	je     c0026c88 <__udivdi3+0xe4>
c0026c7f:	89 f0                	mov    eax,esi
c0026c81:	31 db                	xor    ebx,ebx
c0026c83:	e9 43 ff ff ff       	jmp    c0026bcb <__udivdi3+0x27>
c0026c88:	88 d9                	mov    cl,bl
c0026c8a:	d3 e5                	shl    ebp,cl
c0026c8c:	39 c5                	cmp    ebp,eax
c0026c8e:	73 ef                	jae    c0026c7f <__udivdi3+0xdb>
c0026c90:	8d 46 ff             	lea    eax,[esi-0x1]
c0026c93:	31 db                	xor    ebx,ebx
c0026c95:	e9 31 ff ff ff       	jmp    c0026bcb <__udivdi3+0x27>
c0026c9a:	66 90                	xchg   ax,ax
c0026c9c:	31 c0                	xor    eax,eax
c0026c9e:	e9 28 ff ff ff       	jmp    c0026bcb <__udivdi3+0x27>
c0026ca3:	90                   	nop

c0026ca4 <__umoddi3>:
c0026ca4:	55                   	push   ebp
c0026ca5:	57                   	push   edi
c0026ca6:	56                   	push   esi
c0026ca7:	53                   	push   ebx
c0026ca8:	83 ec 1c             	sub    esp,0x1c
c0026cab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026caf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026cb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026cb7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026cbb:	89 da                	mov    edx,ebx
c0026cbd:	85 c0                	test   eax,eax
c0026cbf:	75 37                	jne    c0026cf8 <__umoddi3+0x54>
c0026cc1:	39 df                	cmp    edi,ebx
c0026cc3:	76 13                	jbe    c0026cd8 <__umoddi3+0x34>
c0026cc5:	89 f0                	mov    eax,esi
c0026cc7:	f7 f7                	div    edi
c0026cc9:	89 d0                	mov    eax,edx
c0026ccb:	31 d2                	xor    edx,edx
c0026ccd:	83 c4 1c             	add    esp,0x1c
c0026cd0:	5b                   	pop    ebx
c0026cd1:	5e                   	pop    esi
c0026cd2:	5f                   	pop    edi
c0026cd3:	5d                   	pop    ebp
c0026cd4:	c3                   	ret    
c0026cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0026cd8:	89 fd                	mov    ebp,edi
c0026cda:	85 ff                	test   edi,edi
c0026cdc:	75 0b                	jne    c0026ce9 <__umoddi3+0x45>
c0026cde:	b8 01 00 00 00       	mov    eax,0x1
c0026ce3:	31 d2                	xor    edx,edx
c0026ce5:	f7 f7                	div    edi
c0026ce7:	89 c5                	mov    ebp,eax
c0026ce9:	89 d8                	mov    eax,ebx
c0026ceb:	31 d2                	xor    edx,edx
c0026ced:	f7 f5                	div    ebp
c0026cef:	89 f0                	mov    eax,esi
c0026cf1:	f7 f5                	div    ebp
c0026cf3:	89 d0                	mov    eax,edx
c0026cf5:	eb d4                	jmp    c0026ccb <__umoddi3+0x27>
c0026cf7:	90                   	nop
c0026cf8:	89 f1                	mov    ecx,esi
c0026cfa:	39 d8                	cmp    eax,ebx
c0026cfc:	76 0a                	jbe    c0026d08 <__umoddi3+0x64>
c0026cfe:	89 f0                	mov    eax,esi
c0026d00:	83 c4 1c             	add    esp,0x1c
c0026d03:	5b                   	pop    ebx
c0026d04:	5e                   	pop    esi
c0026d05:	5f                   	pop    edi
c0026d06:	5d                   	pop    ebp
c0026d07:	c3                   	ret    
c0026d08:	0f bd e8             	bsr    ebp,eax
c0026d0b:	83 f5 1f             	xor    ebp,0x1f
c0026d0e:	75 1c                	jne    c0026d2c <__umoddi3+0x88>
c0026d10:	39 d8                	cmp    eax,ebx
c0026d12:	72 04                	jb     c0026d18 <__umoddi3+0x74>
c0026d14:	39 f7                	cmp    edi,esi
c0026d16:	77 08                	ja     c0026d20 <__umoddi3+0x7c>
c0026d18:	89 da                	mov    edx,ebx
c0026d1a:	29 fe                	sub    esi,edi
c0026d1c:	19 c2                	sbb    edx,eax
c0026d1e:	89 f1                	mov    ecx,esi
c0026d20:	89 c8                	mov    eax,ecx
c0026d22:	83 c4 1c             	add    esp,0x1c
c0026d25:	5b                   	pop    ebx
c0026d26:	5e                   	pop    esi
c0026d27:	5f                   	pop    edi
c0026d28:	5d                   	pop    ebp
c0026d29:	c3                   	ret    
c0026d2a:	66 90                	xchg   ax,ax
c0026d2c:	ba 20 00 00 00       	mov    edx,0x20
c0026d31:	29 ea                	sub    edx,ebp
c0026d33:	89 e9                	mov    ecx,ebp
c0026d35:	d3 e0                	shl    eax,cl
c0026d37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026d3b:	89 f8                	mov    eax,edi
c0026d3d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026d41:	88 d1                	mov    cl,dl
c0026d43:	d3 e8                	shr    eax,cl
c0026d45:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026d49:	09 c1                	or     ecx,eax
c0026d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026d4f:	89 e9                	mov    ecx,ebp
c0026d51:	d3 e7                	shl    edi,cl
c0026d53:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026d57:	89 d8                	mov    eax,ebx
c0026d59:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026d5d:	88 d1                	mov    cl,dl
c0026d5f:	d3 e8                	shr    eax,cl
c0026d61:	89 c7                	mov    edi,eax
c0026d63:	89 e9                	mov    ecx,ebp
c0026d65:	d3 e3                	shl    ebx,cl
c0026d67:	89 f0                	mov    eax,esi
c0026d69:	88 d1                	mov    cl,dl
c0026d6b:	d3 e8                	shr    eax,cl
c0026d6d:	09 d8                	or     eax,ebx
c0026d6f:	89 e9                	mov    ecx,ebp
c0026d71:	d3 e6                	shl    esi,cl
c0026d73:	89 f3                	mov    ebx,esi
c0026d75:	89 fa                	mov    edx,edi
c0026d77:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026d7b:	89 d1                	mov    ecx,edx
c0026d7d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026d81:	89 c6                	mov    esi,eax
c0026d83:	89 d7                	mov    edi,edx
c0026d85:	39 d1                	cmp    ecx,edx
c0026d87:	72 27                	jb     c0026db0 <__umoddi3+0x10c>
c0026d89:	74 21                	je     c0026dac <__umoddi3+0x108>
c0026d8b:	89 ca                	mov    edx,ecx
c0026d8d:	29 f3                	sub    ebx,esi
c0026d8f:	19 fa                	sbb    edx,edi
c0026d91:	89 d0                	mov    eax,edx
c0026d93:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026d97:	d3 e0                	shl    eax,cl
c0026d99:	89 e9                	mov    ecx,ebp
c0026d9b:	d3 eb                	shr    ebx,cl
c0026d9d:	09 d8                	or     eax,ebx
c0026d9f:	d3 ea                	shr    edx,cl
c0026da1:	83 c4 1c             	add    esp,0x1c
c0026da4:	5b                   	pop    ebx
c0026da5:	5e                   	pop    esi
c0026da6:	5f                   	pop    edi
c0026da7:	5d                   	pop    ebp
c0026da8:	c3                   	ret    
c0026da9:	8d 76 00             	lea    esi,[esi+0x0]
c0026dac:	39 c3                	cmp    ebx,eax
c0026dae:	73 db                	jae    c0026d8b <__umoddi3+0xe7>
c0026db0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026db4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026db8:	89 d7                	mov    edi,edx
c0026dba:	89 c6                	mov    esi,eax
c0026dbc:	eb cd                	jmp    c0026d8b <__umoddi3+0xe7>

c0026dbe <__addsf3>:
c0026dbe:	55                   	push   ebp
c0026dbf:	89 e5                	mov    ebp,esp
c0026dc1:	57                   	push   edi
c0026dc2:	56                   	push   esi
c0026dc3:	53                   	push   ebx
c0026dc4:	83 ec 08             	sub    esp,0x8
c0026dc7:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026dca:	89 fa                	mov    edx,edi
c0026dcc:	89 f8                	mov    eax,edi
c0026dce:	c1 f8 17             	sar    eax,0x17
c0026dd1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026dd4:	c1 e2 08             	shl    edx,0x8
c0026dd7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026ddd:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026de0:	89 de                	mov    esi,ebx
c0026de2:	c1 fe 17             	sar    esi,0x17
c0026de5:	c1 e3 08             	shl    ebx,0x8
c0026de8:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026dee:	31 f0                	xor    eax,esi
c0026df0:	0f 88 3b 01 00 00    	js     c0026f31 <__addsf3+0x173>
c0026df6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026df9:	29 f1                	sub    ecx,esi
c0026dfb:	85 c9                	test   ecx,ecx
c0026dfd:	7e 54                	jle    c0026e53 <__addsf3+0x95>
c0026dff:	89 f0                	mov    eax,esi
c0026e01:	84 c0                	test   al,al
c0026e03:	75 10                	jne    c0026e15 <__addsf3+0x57>
c0026e05:	85 db                	test   ebx,ebx
c0026e07:	0f 84 aa 02 00 00    	je     c00270b7 <__addsf3+0x2f9>
c0026e0d:	49                   	dec    ecx
c0026e0e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026e11:	74 38                	je     c0026e4b <__addsf3+0x8d>
c0026e13:	eb 13                	jmp    c0026e28 <__addsf3+0x6a>
c0026e15:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e18:	f7 d0                	not    eax
c0026e1a:	84 c0                	test   al,al
c0026e1c:	0f 84 95 02 00 00    	je     c00270b7 <__addsf3+0x2f9>
c0026e22:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026e28:	83 f9 1f             	cmp    ecx,0x1f
c0026e2b:	0f 8f 86 02 00 00    	jg     c00270b7 <__addsf3+0x2f9>
c0026e31:	89 de                	mov    esi,ebx
c0026e33:	d3 ee                	shr    esi,cl
c0026e35:	b8 20 00 00 00       	mov    eax,0x20
c0026e3a:	29 c8                	sub    eax,ecx
c0026e3c:	89 c1                	mov    ecx,eax
c0026e3e:	d3 e3                	shl    ebx,cl
c0026e40:	31 c0                	xor    eax,eax
c0026e42:	85 db                	test   ebx,ebx
c0026e44:	0f 95 c0             	setne  al
c0026e47:	09 f0                	or     eax,esi
c0026e49:	01 d0                	add    eax,edx
c0026e4b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e4e:	e9 b6 00 00 00       	jmp    c0026f09 <__addsf3+0x14b>
c0026e53:	74 5c                	je     c0026eb1 <__addsf3+0xf3>
c0026e55:	89 f1                	mov    ecx,esi
c0026e57:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026e5a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e5d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026e61:	75 14                	jne    c0026e77 <__addsf3+0xb9>
c0026e63:	85 d2                	test   edx,edx
c0026e65:	0f 84 4c 02 00 00    	je     c00270b7 <__addsf3+0x2f9>
c0026e6b:	49                   	dec    ecx
c0026e6c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026e6f:	0f 84 94 00 00 00    	je     c0026f09 <__addsf3+0x14b>
c0026e75:	eb 12                	jmp    c0026e89 <__addsf3+0xcb>
c0026e77:	89 f0                	mov    eax,esi
c0026e79:	f7 d0                	not    eax
c0026e7b:	84 c0                	test   al,al
c0026e7d:	0f 84 34 02 00 00    	je     c00270b7 <__addsf3+0x2f9>
c0026e83:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026e89:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e8c:	83 f9 1f             	cmp    ecx,0x1f
c0026e8f:	0f 8f 22 02 00 00    	jg     c00270b7 <__addsf3+0x2f9>
c0026e95:	89 d7                	mov    edi,edx
c0026e97:	d3 ef                	shr    edi,cl
c0026e99:	b8 20 00 00 00       	mov    eax,0x20
c0026e9e:	29 c8                	sub    eax,ecx
c0026ea0:	89 c1                	mov    ecx,eax
c0026ea2:	d3 e2                	shl    edx,cl
c0026ea4:	31 c0                	xor    eax,eax
c0026ea6:	85 d2                	test   edx,edx
c0026ea8:	0f 95 c0             	setne  al
c0026eab:	09 f8                	or     eax,edi
c0026ead:	01 d8                	add    eax,ebx
c0026eaf:	eb 58                	jmp    c0026f09 <__addsf3+0x14b>
c0026eb1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026eb4:	8d 70 01             	lea    esi,[eax+0x1]
c0026eb7:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026ebd:	75 32                	jne    c0026ef1 <__addsf3+0x133>
c0026ebf:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026ec3:	75 1f                	jne    c0026ee4 <__addsf3+0x126>
c0026ec5:	85 d2                	test   edx,edx
c0026ec7:	0f 84 e0 01 00 00    	je     c00270ad <__addsf3+0x2ef>
c0026ecd:	85 db                	test   ebx,ebx
c0026ecf:	0f 84 e2 01 00 00    	je     c00270b7 <__addsf3+0x2f9>
c0026ed5:	89 d0                	mov    eax,edx
c0026ed7:	01 d8                	add    eax,ebx
c0026ed9:	0f 89 a9 01 00 00    	jns    c0027088 <__addsf3+0x2ca>
c0026edf:	e9 9d 01 00 00       	jmp    c0027081 <__addsf3+0x2c3>
c0026ee4:	85 d2                	test   edx,edx
c0026ee6:	0f 85 cb 01 00 00    	jne    c00270b7 <__addsf3+0x2f9>
c0026eec:	e9 bc 01 00 00       	jmp    c00270ad <__addsf3+0x2ef>
c0026ef1:	31 c0                	xor    eax,eax
c0026ef3:	89 f1                	mov    ecx,esi
c0026ef5:	f7 d1                	not    ecx
c0026ef7:	84 c9                	test   cl,cl
c0026ef9:	0f 84 90 01 00 00    	je     c002708f <__addsf3+0x2d1>
c0026eff:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026f02:	d1 e8                	shr    eax,1
c0026f04:	e9 86 01 00 00       	jmp    c002708f <__addsf3+0x2d1>
c0026f09:	85 c0                	test   eax,eax
c0026f0b:	0f 89 7e 01 00 00    	jns    c002708f <__addsf3+0x2d1>
c0026f11:	46                   	inc    esi
c0026f12:	89 f2                	mov    edx,esi
c0026f14:	f7 d2                	not    edx
c0026f16:	84 d2                	test   dl,dl
c0026f18:	0f 84 6f 01 00 00    	je     c002708d <__addsf3+0x2cf>
c0026f1e:	89 c2                	mov    edx,eax
c0026f20:	83 e2 01             	and    edx,0x1
c0026f23:	d1 e8                	shr    eax,1
c0026f25:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026f2a:	09 d0                	or     eax,edx
c0026f2c:	e9 5e 01 00 00       	jmp    c002708f <__addsf3+0x2d1>
c0026f31:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026f35:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026f38:	89 f0                	mov    eax,esi
c0026f3a:	0f b6 c0             	movzx  eax,al
c0026f3d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026f40:	29 c1                	sub    ecx,eax
c0026f42:	85 c9                	test   ecx,ecx
c0026f44:	7e 55                	jle    c0026f9b <__addsf3+0x1dd>
c0026f46:	85 c0                	test   eax,eax
c0026f48:	75 11                	jne    c0026f5b <__addsf3+0x19d>
c0026f4a:	85 db                	test   ebx,ebx
c0026f4c:	0f 84 65 01 00 00    	je     c00270b7 <__addsf3+0x2f9>
c0026f52:	49                   	dec    ecx
c0026f53:	75 19                	jne    c0026f6e <__addsf3+0x1b0>
c0026f55:	89 d0                	mov    eax,edx
c0026f57:	29 d8                	sub    eax,ebx
c0026f59:	eb 38                	jmp    c0026f93 <__addsf3+0x1d5>
c0026f5b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026f5e:	f7 d0                	not    eax
c0026f60:	84 c0                	test   al,al
c0026f62:	0f 84 4f 01 00 00    	je     c00270b7 <__addsf3+0x2f9>
c0026f68:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026f6e:	83 f9 1f             	cmp    ecx,0x1f
c0026f71:	0f 8f 40 01 00 00    	jg     c00270b7 <__addsf3+0x2f9>
c0026f77:	89 de                	mov    esi,ebx
c0026f79:	d3 ee                	shr    esi,cl
c0026f7b:	b8 20 00 00 00       	mov    eax,0x20
c0026f80:	29 c8                	sub    eax,ecx
c0026f82:	89 c1                	mov    ecx,eax
c0026f84:	d3 e3                	shl    ebx,cl
c0026f86:	31 c0                	xor    eax,eax
c0026f88:	85 db                	test   ebx,ebx
c0026f8a:	0f 95 c0             	setne  al
c0026f8d:	09 f0                	or     eax,esi
c0026f8f:	29 c2                	sub    edx,eax
c0026f91:	89 d0                	mov    eax,edx
c0026f93:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f96:	e9 af 00 00 00       	jmp    c002704a <__addsf3+0x28c>
c0026f9b:	74 5c                	je     c0026ff9 <__addsf3+0x23b>
c0026f9d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026fa0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026fa3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026fa7:	75 14                	jne    c0026fbd <__addsf3+0x1ff>
c0026fa9:	85 d2                	test   edx,edx
c0026fab:	0f 84 06 01 00 00    	je     c00270b7 <__addsf3+0x2f9>
c0026fb1:	48                   	dec    eax
c0026fb2:	75 1b                	jne    c0026fcf <__addsf3+0x211>
c0026fb4:	89 d8                	mov    eax,ebx
c0026fb6:	29 d0                	sub    eax,edx
c0026fb8:	e9 8d 00 00 00       	jmp    c002704a <__addsf3+0x28c>
c0026fbd:	89 f1                	mov    ecx,esi
c0026fbf:	f7 d1                	not    ecx
c0026fc1:	84 c9                	test   cl,cl
c0026fc3:	0f 84 ee 00 00 00    	je     c00270b7 <__addsf3+0x2f9>
c0026fc9:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026fcf:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026fd2:	83 f8 1f             	cmp    eax,0x1f
c0026fd5:	0f 8f dc 00 00 00    	jg     c00270b7 <__addsf3+0x2f9>
c0026fdb:	89 d7                	mov    edi,edx
c0026fdd:	88 c1                	mov    cl,al
c0026fdf:	d3 ef                	shr    edi,cl
c0026fe1:	b9 20 00 00 00       	mov    ecx,0x20
c0026fe6:	29 c1                	sub    ecx,eax
c0026fe8:	d3 e2                	shl    edx,cl
c0026fea:	31 c0                	xor    eax,eax
c0026fec:	85 d2                	test   edx,edx
c0026fee:	0f 95 c0             	setne  al
c0026ff1:	09 f8                	or     eax,edi
c0026ff3:	29 c3                	sub    ebx,eax
c0026ff5:	89 d8                	mov    eax,ebx
c0026ff7:	eb 51                	jmp    c002704a <__addsf3+0x28c>
c0026ff9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026ffc:	40                   	inc    eax
c0026ffd:	a8 fe                	test   al,0xfe
c0026fff:	75 3d                	jne    c002703e <__addsf3+0x280>
c0027001:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027005:	0f 85 a7 00 00 00    	jne    c00270b2 <__addsf3+0x2f4>
c002700b:	85 d2                	test   edx,edx
c002700d:	75 12                	jne    c0027021 <__addsf3+0x263>
c002700f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027012:	85 db                	test   ebx,ebx
c0027014:	0f 85 9d 00 00 00    	jne    c00270b7 <__addsf3+0x2f9>
c002701a:	31 ff                	xor    edi,edi
c002701c:	e9 96 00 00 00       	jmp    c00270b7 <__addsf3+0x2f9>
c0027021:	85 db                	test   ebx,ebx
c0027023:	0f 84 8e 00 00 00    	je     c00270b7 <__addsf3+0x2f9>
c0027029:	89 d0                	mov    eax,edx
c002702b:	29 d8                	sub    eax,ebx
c002702d:	79 06                	jns    c0027035 <__addsf3+0x277>
c002702f:	89 d8                	mov    eax,ebx
c0027031:	29 d0                	sub    eax,edx
c0027033:	eb 5a                	jmp    c002708f <__addsf3+0x2d1>
c0027035:	bf 00 00 00 00       	mov    edi,0x0
c002703a:	74 7b                	je     c00270b7 <__addsf3+0x2f9>
c002703c:	eb 4a                	jmp    c0027088 <__addsf3+0x2ca>
c002703e:	89 d0                	mov    eax,edx
c0027040:	29 d8                	sub    eax,ebx
c0027042:	79 12                	jns    c0027056 <__addsf3+0x298>
c0027044:	89 d8                	mov    eax,ebx
c0027046:	29 d0                	sub    eax,edx
c0027048:	eb 09                	jmp    c0027053 <__addsf3+0x295>
c002704a:	85 c0                	test   eax,eax
c002704c:	79 41                	jns    c002708f <__addsf3+0x2d1>
c002704e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027053:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027056:	31 f6                	xor    esi,esi
c0027058:	85 c0                	test   eax,eax
c002705a:	74 33                	je     c002708f <__addsf3+0x2d1>
c002705c:	0f bd c8             	bsr    ecx,eax
c002705f:	83 f1 1f             	xor    ecx,0x1f
c0027062:	d3 e0                	shl    eax,cl
c0027064:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0027068:	39 ca                	cmp    edx,ecx
c002706a:	7f 10                	jg     c002707c <__addsf3+0x2be>
c002706c:	29 d1                	sub    ecx,edx
c002706e:	41                   	inc    ecx
c002706f:	d3 e8                	shr    eax,cl
c0027071:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027074:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c002707a:	eb 13                	jmp    c002708f <__addsf3+0x2d1>
c002707c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002707f:	29 ce                	sub    esi,ecx
c0027081:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027086:	eb 07                	jmp    c002708f <__addsf3+0x2d1>
c0027088:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002708b:	eb 02                	jmp    c002708f <__addsf3+0x2d1>
c002708d:	31 c0                	xor    eax,eax
c002708f:	89 c2                	mov    edx,eax
c0027091:	c1 ea 08             	shr    edx,0x8
c0027094:	a8 7f                	test   al,0x7f
c0027096:	0f 95 c1             	setne  cl
c0027099:	09 d1                	or     ecx,edx
c002709b:	83 e1 01             	and    ecx,0x1
c002709e:	c1 e8 07             	shr    eax,0x7
c00270a1:	21 c8                	and    eax,ecx
c00270a3:	c1 e6 17             	shl    esi,0x17
c00270a6:	09 d6                	or     esi,edx
c00270a8:	8d 3c 30             	lea    edi,[eax+esi*1]
c00270ab:	eb 0a                	jmp    c00270b7 <__addsf3+0x2f9>
c00270ad:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00270b0:	eb 05                	jmp    c00270b7 <__addsf3+0x2f9>
c00270b2:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c00270b7:	89 f8                	mov    eax,edi
c00270b9:	5a                   	pop    edx
c00270ba:	59                   	pop    ecx
c00270bb:	5b                   	pop    ebx
c00270bc:	5e                   	pop    esi
c00270bd:	5f                   	pop    edi
c00270be:	5d                   	pop    ebp
c00270bf:	c3                   	ret    

c00270c0 <__subsf3>:
c00270c0:	55                   	push   ebp
c00270c1:	89 e5                	mov    ebp,esp
c00270c3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00270c6:	05 00 00 00 80       	add    eax,0x80000000
c00270cb:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00270ce:	5d                   	pop    ebp
c00270cf:	e9 ea fc ff ff       	jmp    c0026dbe <__addsf3>

c00270d4 <__negsf2>:
c00270d4:	55                   	push   ebp
c00270d5:	89 e5                	mov    ebp,esp
c00270d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00270da:	05 00 00 00 80       	add    eax,0x80000000
c00270df:	5d                   	pop    ebp
c00270e0:	c3                   	ret    

c00270e1 <__mulsf3>:
c00270e1:	55                   	push   ebp
c00270e2:	89 e5                	mov    ebp,esp
c00270e4:	57                   	push   edi
c00270e5:	56                   	push   esi
c00270e6:	53                   	push   ebx
c00270e7:	83 ec 1c             	sub    esp,0x1c
c00270ea:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00270ed:	89 f0                	mov    eax,esi
c00270ef:	89 f1                	mov    ecx,esi
c00270f1:	c1 f9 17             	sar    ecx,0x17
c00270f4:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00270f7:	c1 e0 08             	shl    eax,0x8
c00270fa:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00270ff:	89 c1                	mov    ecx,eax
c0027101:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027104:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027107:	89 c7                	mov    edi,eax
c0027109:	c1 ff 17             	sar    edi,0x17
c002710c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027110:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027113:	89 f8                	mov    eax,edi
c0027115:	0f b6 c0             	movzx  eax,al
c0027118:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c002711b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c002711f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027122:	42                   	inc    edx
c0027123:	80 e2 fe             	and    dl,0xfe
c0027126:	75 7b                	jne    c00271a3 <__mulsf3+0xc2>
c0027128:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002712c:	74 54                	je     c0027182 <__mulsf3+0xa1>
c002712e:	85 c9                	test   ecx,ecx
c0027130:	0f 85 64 01 00 00    	jne    c002729a <__mulsf3+0x1b9>
c0027136:	8d 57 01             	lea    edx,[edi+0x1]
c0027139:	80 e2 fe             	and    dl,0xfe
c002713c:	75 1f                	jne    c002715d <__mulsf3+0x7c>
c002713e:	85 c0                	test   eax,eax
c0027140:	b8 00 00 00 00       	mov    eax,0x0
c0027145:	74 29                	je     c0027170 <__mulsf3+0x8f>
c0027147:	53                   	push   ebx
c0027148:	53                   	push   ebx
c0027149:	50                   	push   eax
c002714a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002714d:	e8 96 05 00 00       	call   c00276e8 <__nesf2>
c0027152:	83 c4 10             	add    esp,0x10
c0027155:	85 c0                	test   eax,eax
c0027157:	0f 85 3a 01 00 00    	jne    c0027297 <__mulsf3+0x1b6>
c002715d:	85 ff                	test   edi,edi
c002715f:	0f 89 35 01 00 00    	jns    c002729a <__mulsf3+0x1b9>
c0027165:	81 c6 00 00 00 80    	add    esi,0x80000000
c002716b:	e9 2a 01 00 00       	jmp    c002729a <__mulsf3+0x1b9>
c0027170:	51                   	push   ecx
c0027171:	51                   	push   ecx
c0027172:	50                   	push   eax
c0027173:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027176:	e8 6d 05 00 00       	call   c00276e8 <__nesf2>
c002717b:	83 c4 10             	add    esp,0x10
c002717e:	85 c0                	test   eax,eax
c0027180:	eb 15                	jmp    c0027197 <__mulsf3+0xb6>
c0027182:	85 c9                	test   ecx,ecx
c0027184:	74 0b                	je     c0027191 <__mulsf3+0xb0>
c0027186:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027189:	01 c9                	add    ecx,ecx
c002718b:	78 16                	js     c00271a3 <__mulsf3+0xc2>
c002718d:	89 d3                	mov    ebx,edx
c002718f:	eb f5                	jmp    c0027186 <__mulsf3+0xa5>
c0027191:	89 f8                	mov    eax,edi
c0027193:	f7 d0                	not    eax
c0027195:	84 c0                	test   al,al
c0027197:	75 c4                	jne    c002715d <__mulsf3+0x7c>
c0027199:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c002719e:	e9 f7 00 00 00       	jmp    c002729a <__mulsf3+0x1b9>
c00271a3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00271a6:	c1 e6 08             	shl    esi,0x8
c00271a9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00271af:	8d 57 01             	lea    edx,[edi+0x1]
c00271b2:	80 e2 fe             	and    dl,0xfe
c00271b5:	75 63                	jne    c002721a <__mulsf3+0x139>
c00271b7:	85 c0                	test   eax,eax
c00271b9:	74 2f                	je     c00271ea <__mulsf3+0x109>
c00271bb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00271bf:	0f 89 d2 00 00 00    	jns    c0027297 <__mulsf3+0x1b6>
c00271c5:	52                   	push   edx
c00271c6:	52                   	push   edx
c00271c7:	6a 00                	push   0x0
c00271c9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271cc:	e8 dc 04 00 00       	call   c00276ad <__eqsf2>
c00271d1:	83 c4 10             	add    esp,0x10
c00271d4:	85 c0                	test   eax,eax
c00271d6:	0f 85 bb 00 00 00    	jne    c0027297 <__mulsf3+0x1b6>
c00271dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00271df:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00271e5:	e9 b0 00 00 00       	jmp    c002729a <__mulsf3+0x1b9>
c00271ea:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00271ed:	50                   	push   eax
c00271ee:	50                   	push   eax
c00271ef:	6a 00                	push   0x0
c00271f1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271f4:	e8 b4 04 00 00       	call   c00276ad <__eqsf2>
c00271f9:	83 c4 10             	add    esp,0x10
c00271fc:	85 c0                	test   eax,eax
c00271fe:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027201:	75 0c                	jne    c002720f <__mulsf3+0x12e>
c0027203:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027207:	0f 89 8a 00 00 00    	jns    c0027297 <__mulsf3+0x1b6>
c002720d:	eb cd                	jmp    c00271dc <__mulsf3+0xfb>
c002720f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027212:	01 f6                	add    esi,esi
c0027214:	78 04                	js     c002721a <__mulsf3+0x139>
c0027216:	89 c3                	mov    ebx,eax
c0027218:	eb f5                	jmp    c002720f <__mulsf3+0x12e>
c002721a:	89 c8                	mov    eax,ecx
c002721c:	0d 00 00 00 80       	or     eax,0x80000000
c0027221:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027227:	f7 e6                	mul    esi
c0027229:	85 c0                	test   eax,eax
c002722b:	0f 95 c0             	setne  al
c002722e:	0f b6 c0             	movzx  eax,al
c0027231:	09 c2                	or     edx,eax
c0027233:	78 03                	js     c0027238 <__mulsf3+0x157>
c0027235:	01 d2                	add    edx,edx
c0027237:	4b                   	dec    ebx
c0027238:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c002723e:	7f 22                	jg     c0027262 <__mulsf3+0x181>
c0027240:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027246:	85 db                	test   ebx,ebx
c0027248:	7f 23                	jg     c002726d <__mulsf3+0x18c>
c002724a:	83 fb e9             	cmp    ebx,0xffffffe9
c002724d:	7c 1a                	jl     c0027269 <__mulsf3+0x188>
c002724f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027255:	b9 01 00 00 00       	mov    ecx,0x1
c002725a:	29 d9                	sub    ecx,ebx
c002725c:	d3 ea                	shr    edx,cl
c002725e:	31 db                	xor    ebx,ebx
c0027260:	eb 0b                	jmp    c002726d <__mulsf3+0x18c>
c0027262:	bb ff 00 00 00       	mov    ebx,0xff
c0027267:	eb 02                	jmp    c002726b <__mulsf3+0x18a>
c0027269:	31 db                	xor    ebx,ebx
c002726b:	31 d2                	xor    edx,edx
c002726d:	89 d0                	mov    eax,edx
c002726f:	c1 e8 08             	shr    eax,0x8
c0027272:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027275:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002727b:	09 fb                	or     ebx,edi
c002727d:	c1 e3 17             	shl    ebx,0x17
c0027280:	09 c3                	or     ebx,eax
c0027282:	f6 c2 7f             	test   dl,0x7f
c0027285:	0f 95 c1             	setne  cl
c0027288:	09 c8                	or     eax,ecx
c002728a:	83 e0 01             	and    eax,0x1
c002728d:	c1 ea 07             	shr    edx,0x7
c0027290:	21 c2                	and    edx,eax
c0027292:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027295:	eb 03                	jmp    c002729a <__mulsf3+0x1b9>
c0027297:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c002729a:	89 f0                	mov    eax,esi
c002729c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002729f:	5b                   	pop    ebx
c00272a0:	5e                   	pop    esi
c00272a1:	5f                   	pop    edi
c00272a2:	5d                   	pop    ebp
c00272a3:	c3                   	ret    

c00272a4 <__divsf3>:
c00272a4:	55                   	push   ebp
c00272a5:	89 e5                	mov    ebp,esp
c00272a7:	57                   	push   edi
c00272a8:	56                   	push   esi
c00272a9:	53                   	push   ebx
c00272aa:	83 ec 1c             	sub    esp,0x1c
c00272ad:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00272b0:	89 d8                	mov    eax,ebx
c00272b2:	89 d9                	mov    ecx,ebx
c00272b4:	c1 f9 17             	sar    ecx,0x17
c00272b7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00272ba:	c1 e0 08             	shl    eax,0x8
c00272bd:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00272c2:	89 c1                	mov    ecx,eax
c00272c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00272c7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00272ca:	89 c7                	mov    edi,eax
c00272cc:	c1 ff 17             	sar    edi,0x17
c00272cf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00272d3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00272d6:	89 f8                	mov    eax,edi
c00272d8:	0f b6 c0             	movzx  eax,al
c00272db:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00272de:	29 c6                	sub    esi,eax
c00272e0:	83 c6 7f             	add    esi,0x7f
c00272e3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00272e6:	42                   	inc    edx
c00272e7:	80 e2 fe             	and    dl,0xfe
c00272ea:	0f 85 9c 00 00 00    	jne    c002738c <__divsf3+0xe8>
c00272f0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00272f4:	74 33                	je     c0027329 <__divsf3+0x85>
c00272f6:	85 c9                	test   ecx,ecx
c00272f8:	0f 85 c7 01 00 00    	jne    c00274c5 <__divsf3+0x221>
c00272fe:	8d 57 01             	lea    edx,[edi+0x1]
c0027301:	80 e2 fe             	and    dl,0xfe
c0027304:	75 2f                	jne    c0027335 <__divsf3+0x91>
c0027306:	85 c0                	test   eax,eax
c0027308:	74 2b                	je     c0027335 <__divsf3+0x91>
c002730a:	51                   	push   ecx
c002730b:	51                   	push   ecx
c002730c:	6a 00                	push   0x0
c002730e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027311:	e8 d2 03 00 00       	call   c00276e8 <__nesf2>
c0027316:	83 c4 10             	add    esp,0x10
c0027319:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002731c:	85 c0                	test   eax,eax
c002731e:	0f 85 a1 01 00 00    	jne    c00274c5 <__divsf3+0x221>
c0027324:	e9 92 01 00 00       	jmp    c00274bb <__divsf3+0x217>
c0027329:	85 c9                	test   ecx,ecx
c002732b:	75 1b                	jne    c0027348 <__divsf3+0xa4>
c002732d:	8d 57 01             	lea    edx,[edi+0x1]
c0027330:	80 e2 fe             	and    dl,0xfe
c0027333:	74 1e                	je     c0027353 <__divsf3+0xaf>
c0027335:	85 ff                	test   edi,edi
c0027337:	0f 89 88 01 00 00    	jns    c00274c5 <__divsf3+0x221>
c002733d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027343:	e9 7d 01 00 00       	jmp    c00274c5 <__divsf3+0x221>
c0027348:	8d 56 ff             	lea    edx,[esi-0x1]
c002734b:	01 c9                	add    ecx,ecx
c002734d:	78 3d                	js     c002738c <__divsf3+0xe8>
c002734f:	89 d6                	mov    esi,edx
c0027351:	eb f5                	jmp    c0027348 <__divsf3+0xa4>
c0027353:	85 c0                	test   eax,eax
c0027355:	b8 00 00 00 00       	mov    eax,0x0
c002735a:	74 18                	je     c0027374 <__divsf3+0xd0>
c002735c:	52                   	push   edx
c002735d:	52                   	push   edx
c002735e:	50                   	push   eax
c002735f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027362:	e8 81 03 00 00       	call   c00276e8 <__nesf2>
c0027367:	83 c4 10             	add    esp,0x10
c002736a:	85 c0                	test   eax,eax
c002736c:	0f 85 50 01 00 00    	jne    c00274c2 <__divsf3+0x21e>
c0027372:	eb c1                	jmp    c0027335 <__divsf3+0x91>
c0027374:	56                   	push   esi
c0027375:	56                   	push   esi
c0027376:	50                   	push   eax
c0027377:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002737a:	e8 69 03 00 00       	call   c00276e8 <__nesf2>
c002737f:	83 c4 10             	add    esp,0x10
c0027382:	85 c0                	test   eax,eax
c0027384:	0f 84 31 01 00 00    	je     c00274bb <__divsf3+0x217>
c002738a:	eb a9                	jmp    c0027335 <__divsf3+0x91>
c002738c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c002738f:	c1 e3 08             	shl    ebx,0x8
c0027392:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027398:	8d 57 01             	lea    edx,[edi+0x1]
c002739b:	80 e2 fe             	and    dl,0xfe
c002739e:	75 71                	jne    c0027411 <__divsf3+0x16d>
c00273a0:	85 c0                	test   eax,eax
c00273a2:	ba 00 00 00 00       	mov    edx,0x0
c00273a7:	74 2f                	je     c00273d8 <__divsf3+0x134>
c00273a9:	51                   	push   ecx
c00273aa:	51                   	push   ecx
c00273ab:	52                   	push   edx
c00273ac:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00273af:	e8 f9 02 00 00       	call   c00276ad <__eqsf2>
c00273b4:	83 c4 10             	add    esp,0x10
c00273b7:	85 c0                	test   eax,eax
c00273b9:	0f 85 03 01 00 00    	jne    c00274c2 <__divsf3+0x21e>
c00273bf:	31 d2                	xor    edx,edx
c00273c1:	89 d3                	mov    ebx,edx
c00273c3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00273c6:	31 f8                	xor    eax,edi
c00273c8:	0f 89 f7 00 00 00    	jns    c00274c5 <__divsf3+0x221>
c00273ce:	bb 00 00 00 80       	mov    ebx,0x80000000
c00273d3:	e9 ed 00 00 00       	jmp    c00274c5 <__divsf3+0x221>
c00273d8:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00273db:	50                   	push   eax
c00273dc:	50                   	push   eax
c00273dd:	52                   	push   edx
c00273de:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00273e1:	e8 c7 02 00 00       	call   c00276ad <__eqsf2>
c00273e6:	83 c4 10             	add    esp,0x10
c00273e9:	85 c0                	test   eax,eax
c00273eb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00273ee:	75 16                	jne    c0027406 <__divsf3+0x162>
c00273f0:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00273f3:	31 fb                	xor    ebx,edi
c00273f5:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00273fb:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027401:	e9 bf 00 00 00       	jmp    c00274c5 <__divsf3+0x221>
c0027406:	8d 46 01             	lea    eax,[esi+0x1]
c0027409:	01 db                	add    ebx,ebx
c002740b:	78 04                	js     c0027411 <__divsf3+0x16d>
c002740d:	89 c6                	mov    esi,eax
c002740f:	eb f5                	jmp    c0027406 <__divsf3+0x162>
c0027411:	89 c8                	mov    eax,ecx
c0027413:	0d 00 00 00 80       	or     eax,0x80000000
c0027418:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002741e:	31 d2                	xor    edx,edx
c0027420:	39 d8                	cmp    eax,ebx
c0027422:	72 07                	jb     c002742b <__divsf3+0x187>
c0027424:	29 d8                	sub    eax,ebx
c0027426:	ba 01 00 00 00       	mov    edx,0x1
c002742b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027432:	01 d2                	add    edx,edx
c0027434:	89 c1                	mov    ecx,eax
c0027436:	01 c0                	add    eax,eax
c0027438:	85 c9                	test   ecx,ecx
c002743a:	78 04                	js     c0027440 <__divsf3+0x19c>
c002743c:	39 c3                	cmp    ebx,eax
c002743e:	77 05                	ja     c0027445 <__divsf3+0x1a1>
c0027440:	29 d8                	sub    eax,ebx
c0027442:	83 ca 01             	or     edx,0x1
c0027445:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027448:	75 e8                	jne    c0027432 <__divsf3+0x18e>
c002744a:	85 c0                	test   eax,eax
c002744c:	0f 95 c0             	setne  al
c002744f:	0f b6 c0             	movzx  eax,al
c0027452:	c1 e2 06             	shl    edx,0x6
c0027455:	09 c2                	or     edx,eax
c0027457:	78 03                	js     c002745c <__divsf3+0x1b8>
c0027459:	01 d2                	add    edx,edx
c002745b:	4e                   	dec    esi
c002745c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027462:	7f 22                	jg     c0027486 <__divsf3+0x1e2>
c0027464:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002746a:	85 f6                	test   esi,esi
c002746c:	7f 23                	jg     c0027491 <__divsf3+0x1ed>
c002746e:	83 fe e9             	cmp    esi,0xffffffe9
c0027471:	7c 1a                	jl     c002748d <__divsf3+0x1e9>
c0027473:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027479:	b9 01 00 00 00       	mov    ecx,0x1
c002747e:	29 f1                	sub    ecx,esi
c0027480:	d3 ea                	shr    edx,cl
c0027482:	31 f6                	xor    esi,esi
c0027484:	eb 0b                	jmp    c0027491 <__divsf3+0x1ed>
c0027486:	be ff 00 00 00       	mov    esi,0xff
c002748b:	eb 02                	jmp    c002748f <__divsf3+0x1eb>
c002748d:	31 f6                	xor    esi,esi
c002748f:	31 d2                	xor    edx,edx
c0027491:	89 d0                	mov    eax,edx
c0027493:	c1 e8 08             	shr    eax,0x8
c0027496:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027499:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002749f:	09 fe                	or     esi,edi
c00274a1:	c1 e6 17             	shl    esi,0x17
c00274a4:	09 c6                	or     esi,eax
c00274a6:	f6 c2 7f             	test   dl,0x7f
c00274a9:	0f 95 c1             	setne  cl
c00274ac:	09 c8                	or     eax,ecx
c00274ae:	83 e0 01             	and    eax,0x1
c00274b1:	c1 ea 07             	shr    edx,0x7
c00274b4:	21 c2                	and    edx,eax
c00274b6:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00274b9:	eb 0a                	jmp    c00274c5 <__divsf3+0x221>
c00274bb:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00274c0:	eb 03                	jmp    c00274c5 <__divsf3+0x221>
c00274c2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00274c5:	89 d8                	mov    eax,ebx
c00274c7:	8d 65 f4             	lea    esp,[ebp-0xc]
c00274ca:	5b                   	pop    ebx
c00274cb:	5e                   	pop    esi
c00274cc:	5f                   	pop    edi
c00274cd:	5d                   	pop    ebp
c00274ce:	c3                   	ret    

c00274cf <__floatsisf>:
c00274cf:	55                   	push   ebp
c00274d0:	89 e5                	mov    ebp,esp
c00274d2:	53                   	push   ebx
c00274d3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00274d6:	85 d2                	test   edx,edx
c00274d8:	7e 2b                	jle    c0027505 <__floatsisf+0x36>
c00274da:	0f bd ca             	bsr    ecx,edx
c00274dd:	83 f1 1f             	xor    ecx,0x1f
c00274e0:	d3 e2                	shl    edx,cl
c00274e2:	89 d0                	mov    eax,edx
c00274e4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00274e9:	89 c3                	mov    ebx,eax
c00274eb:	c1 eb 08             	shr    ebx,0x8
c00274ee:	80 e2 7f             	and    dl,0x7f
c00274f1:	0f 95 c2             	setne  dl
c00274f4:	09 da                	or     edx,ebx
c00274f6:	83 e2 01             	and    edx,0x1
c00274f9:	c1 e8 07             	shr    eax,0x7
c00274fc:	21 c2                	and    edx,eax
c00274fe:	b8 9e 00 00 00       	mov    eax,0x9e
c0027503:	eb 32                	jmp    c0027537 <__floatsisf+0x68>
c0027505:	b8 00 00 00 00       	mov    eax,0x0
c002750a:	74 34                	je     c0027540 <__floatsisf+0x71>
c002750c:	f7 da                	neg    edx
c002750e:	0f bd ca             	bsr    ecx,edx
c0027511:	83 f1 1f             	xor    ecx,0x1f
c0027514:	d3 e2                	shl    edx,cl
c0027516:	89 d0                	mov    eax,edx
c0027518:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002751d:	89 c3                	mov    ebx,eax
c002751f:	c1 eb 08             	shr    ebx,0x8
c0027522:	80 e2 7f             	and    dl,0x7f
c0027525:	0f 95 c2             	setne  dl
c0027528:	09 da                	or     edx,ebx
c002752a:	83 e2 01             	and    edx,0x1
c002752d:	c1 e8 07             	shr    eax,0x7
c0027530:	21 c2                	and    edx,eax
c0027532:	b8 9e 01 00 00       	mov    eax,0x19e
c0027537:	29 c8                	sub    eax,ecx
c0027539:	c1 e0 17             	shl    eax,0x17
c002753c:	09 d8                	or     eax,ebx
c002753e:	01 d0                	add    eax,edx
c0027540:	5b                   	pop    ebx
c0027541:	5d                   	pop    ebp
c0027542:	c3                   	ret    

c0027543 <__floatunsisf>:
c0027543:	55                   	push   ebp
c0027544:	89 e5                	mov    ebp,esp
c0027546:	53                   	push   ebx
c0027547:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002754a:	31 c0                	xor    eax,eax
c002754c:	85 d2                	test   edx,edx
c002754e:	74 32                	je     c0027582 <__floatunsisf+0x3f>
c0027550:	0f bd ca             	bsr    ecx,edx
c0027553:	83 f1 1f             	xor    ecx,0x1f
c0027556:	d3 e2                	shl    edx,cl
c0027558:	89 d0                	mov    eax,edx
c002755a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002755f:	89 c3                	mov    ebx,eax
c0027561:	c1 eb 08             	shr    ebx,0x8
c0027564:	80 e2 7f             	and    dl,0x7f
c0027567:	0f 95 c2             	setne  dl
c002756a:	09 da                	or     edx,ebx
c002756c:	83 e2 01             	and    edx,0x1
c002756f:	c1 e8 07             	shr    eax,0x7
c0027572:	21 c2                	and    edx,eax
c0027574:	b8 9e 00 00 00       	mov    eax,0x9e
c0027579:	29 c8                	sub    eax,ecx
c002757b:	c1 e0 17             	shl    eax,0x17
c002757e:	09 d8                	or     eax,ebx
c0027580:	01 d0                	add    eax,edx
c0027582:	5b                   	pop    ebx
c0027583:	5d                   	pop    ebp
c0027584:	c3                   	ret    

c0027585 <__fixsfsi>:
c0027585:	55                   	push   ebp
c0027586:	89 e5                	mov    ebp,esp
c0027588:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002758b:	89 d1                	mov    ecx,edx
c002758d:	c1 e1 08             	shl    ecx,0x8
c0027590:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027596:	c1 fa 17             	sar    edx,0x17
c0027599:	78 1c                	js     c00275b7 <__fixsfsi+0x32>
c002759b:	83 ea 7f             	sub    edx,0x7f
c002759e:	31 c0                	xor    eax,eax
c00275a0:	83 fa 1e             	cmp    edx,0x1e
c00275a3:	77 40                	ja     c00275e5 <__fixsfsi+0x60>
c00275a5:	89 c8                	mov    eax,ecx
c00275a7:	0d 00 00 00 80       	or     eax,0x80000000
c00275ac:	b9 1f 00 00 00       	mov    ecx,0x1f
c00275b1:	29 d1                	sub    ecx,edx
c00275b3:	d3 e8                	shr    eax,cl
c00275b5:	eb 2e                	jmp    c00275e5 <__fixsfsi+0x60>
c00275b7:	31 c0                	xor    eax,eax
c00275b9:	81 c2 81 00 00 00    	add    edx,0x81
c00275bf:	78 24                	js     c00275e5 <__fixsfsi+0x60>
c00275c1:	83 fa 1e             	cmp    edx,0x1e
c00275c4:	7e 09                	jle    c00275cf <__fixsfsi+0x4a>
c00275c6:	83 fa 1f             	cmp    edx,0x1f
c00275c9:	75 18                	jne    c00275e3 <__fixsfsi+0x5e>
c00275cb:	85 c9                	test   ecx,ecx
c00275cd:	75 14                	jne    c00275e3 <__fixsfsi+0x5e>
c00275cf:	89 c8                	mov    eax,ecx
c00275d1:	0d 00 00 00 80       	or     eax,0x80000000
c00275d6:	b9 1f 00 00 00       	mov    ecx,0x1f
c00275db:	29 d1                	sub    ecx,edx
c00275dd:	d3 e8                	shr    eax,cl
c00275df:	f7 d8                	neg    eax
c00275e1:	eb 02                	jmp    c00275e5 <__fixsfsi+0x60>
c00275e3:	31 c0                	xor    eax,eax
c00275e5:	5d                   	pop    ebp
c00275e6:	c3                   	ret    

c00275e7 <__fixunssfsi>:
c00275e7:	55                   	push   ebp
c00275e8:	89 e5                	mov    ebp,esp
c00275ea:	53                   	push   ebx
c00275eb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00275ee:	89 d3                	mov    ebx,edx
c00275f0:	c1 fb 17             	sar    ebx,0x17
c00275f3:	83 eb 7f             	sub    ebx,0x7f
c00275f6:	31 c0                	xor    eax,eax
c00275f8:	83 fb 1f             	cmp    ebx,0x1f
c00275fb:	77 18                	ja     c0027615 <__fixunssfsi+0x2e>
c00275fd:	89 d0                	mov    eax,edx
c00275ff:	c1 e0 08             	shl    eax,0x8
c0027602:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027607:	0d 00 00 00 80       	or     eax,0x80000000
c002760c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027611:	29 d9                	sub    ecx,ebx
c0027613:	d3 e8                	shr    eax,cl
c0027615:	5b                   	pop    ebx
c0027616:	5d                   	pop    ebp
c0027617:	c3                   	ret    

c0027618 <__cmpsf2>:
c0027618:	55                   	push   ebp
c0027619:	89 e5                	mov    ebp,esp
c002761b:	57                   	push   edi
c002761c:	56                   	push   esi
c002761d:	53                   	push   ebx
c002761e:	83 ec 24             	sub    esp,0x24
c0027621:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027624:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027627:	e8 4f 10 00 00       	call   c002867b <__truncdfsf2>
c002762c:	5a                   	pop    edx
c002762d:	59                   	pop    ecx
c002762e:	89 c3                	mov    ebx,eax
c0027630:	c1 e8 17             	shr    eax,0x17
c0027633:	0f b6 f0             	movzx  esi,al
c0027636:	89 d8                	mov    eax,ebx
c0027638:	c1 e8 1f             	shr    eax,0x1f
c002763b:	31 c6                	xor    esi,eax
c002763d:	c1 e3 08             	shl    ebx,0x8
c0027640:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027643:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027646:	e8 30 10 00 00       	call   c002867b <__truncdfsf2>
c002764b:	83 c4 10             	add    esp,0x10
c002764e:	89 c1                	mov    ecx,eax
c0027650:	c1 e9 17             	shr    ecx,0x17
c0027653:	0f b6 c9             	movzx  ecx,cl
c0027656:	89 c7                	mov    edi,eax
c0027658:	c1 ef 1f             	shr    edi,0x1f
c002765b:	89 ca                	mov    edx,ecx
c002765d:	31 fa                	xor    edx,edi
c002765f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027662:	c1 e0 08             	shl    eax,0x8
c0027665:	89 c2                	mov    edx,eax
c0027667:	89 d8                	mov    eax,ebx
c0027669:	09 d0                	or     eax,edx
c002766b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027670:	09 f0                	or     eax,esi
c0027672:	75 08                	jne    c002767c <__cmpsf2+0x64>
c0027674:	31 c0                	xor    eax,eax
c0027676:	39 f9                	cmp    ecx,edi
c0027678:	75 0c                	jne    c0027686 <__cmpsf2+0x6e>
c002767a:	eb 29                	jmp    c00276a5 <__cmpsf2+0x8d>
c002767c:	b8 01 00 00 00       	mov    eax,0x1
c0027681:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027684:	7f 1f                	jg     c00276a5 <__cmpsf2+0x8d>
c0027686:	83 c8 ff             	or     eax,0xffffffff
c0027689:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002768c:	7c 17                	jl     c00276a5 <__cmpsf2+0x8d>
c002768e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027694:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002769a:	b8 01 00 00 00       	mov    eax,0x1
c002769f:	39 d3                	cmp    ebx,edx
c00276a1:	77 02                	ja     c00276a5 <__cmpsf2+0x8d>
c00276a3:	19 c0                	sbb    eax,eax
c00276a5:	8d 65 f4             	lea    esp,[ebp-0xc]
c00276a8:	5b                   	pop    ebx
c00276a9:	5e                   	pop    esi
c00276aa:	5f                   	pop    edi
c00276ab:	5d                   	pop    ebp
c00276ac:	c3                   	ret    

c00276ad <__eqsf2>:
c00276ad:	55                   	push   ebp
c00276ae:	89 e5                	mov    ebp,esp
c00276b0:	83 ec 24             	sub    esp,0x24
c00276b3:	6a 01                	push   0x1
c00276b5:	83 ec 0c             	sub    esp,0xc
c00276b8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00276bb:	e8 df 10 00 00       	call   c002879f <__extendsfdf2>
c00276c0:	83 c4 10             	add    esp,0x10
c00276c3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00276c6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00276c9:	52                   	push   edx
c00276ca:	50                   	push   eax
c00276cb:	50                   	push   eax
c00276cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00276cf:	e8 cb 10 00 00       	call   c002879f <__extendsfdf2>
c00276d4:	59                   	pop    ecx
c00276d5:	59                   	pop    ecx
c00276d6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00276d9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00276dc:	52                   	push   edx
c00276dd:	50                   	push   eax
c00276de:	e8 35 ff ff ff       	call   c0027618 <__cmpsf2>
c00276e3:	83 c4 20             	add    esp,0x20
c00276e6:	c9                   	leave  
c00276e7:	c3                   	ret    

c00276e8 <__nesf2>:
c00276e8:	eb c3                	jmp    c00276ad <__eqsf2>

c00276ea <__gtsf2>:
c00276ea:	55                   	push   ebp
c00276eb:	89 e5                	mov    ebp,esp
c00276ed:	83 ec 24             	sub    esp,0x24
c00276f0:	6a ff                	push   0xffffffff
c00276f2:	83 ec 0c             	sub    esp,0xc
c00276f5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00276f8:	e8 a2 10 00 00       	call   c002879f <__extendsfdf2>
c00276fd:	83 c4 10             	add    esp,0x10
c0027700:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027703:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027706:	52                   	push   edx
c0027707:	50                   	push   eax
c0027708:	50                   	push   eax
c0027709:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002770c:	e8 8e 10 00 00       	call   c002879f <__extendsfdf2>
c0027711:	59                   	pop    ecx
c0027712:	59                   	pop    ecx
c0027713:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027716:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027719:	52                   	push   edx
c002771a:	50                   	push   eax
c002771b:	e8 f8 fe ff ff       	call   c0027618 <__cmpsf2>
c0027720:	83 c4 20             	add    esp,0x20
c0027723:	c9                   	leave  
c0027724:	c3                   	ret    

c0027725 <__gesf2>:
c0027725:	eb c3                	jmp    c00276ea <__gtsf2>

c0027727 <__ltsf2>:
c0027727:	eb 84                	jmp    c00276ad <__eqsf2>

c0027729 <__lesf2>:
c0027729:	eb 82                	jmp    c00276ad <__eqsf2>

c002772b <__adddf3>:
c002772b:	55                   	push   ebp
c002772c:	89 e5                	mov    ebp,esp
c002772e:	57                   	push   edi
c002772f:	56                   	push   esi
c0027730:	53                   	push   ebx
c0027731:	83 ec 24             	sub    esp,0x24
c0027734:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027737:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002773a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002773d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027740:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027743:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027746:	89 c8                	mov    eax,ecx
c0027748:	89 ce                	mov    esi,ecx
c002774a:	c1 fe 14             	sar    esi,0x14
c002774d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027750:	89 fb                	mov    ebx,edi
c0027752:	89 fa                	mov    edx,edi
c0027754:	c1 e2 0b             	shl    edx,0xb
c0027757:	c1 e0 0b             	shl    eax,0xb
c002775a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002775f:	c1 eb 15             	shr    ebx,0x15
c0027762:	09 d8                	or     eax,ebx
c0027764:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027767:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002776a:	c1 fe 14             	sar    esi,0x14
c002776d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027770:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027773:	89 f3                	mov    ebx,esi
c0027775:	c1 e3 0b             	shl    ebx,0xb
c0027778:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002777b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002777e:	c1 e3 0b             	shl    ebx,0xb
c0027781:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027787:	c1 ee 15             	shr    esi,0x15
c002778a:	09 f3                	or     ebx,esi
c002778c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c002778f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027792:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027795:	0f 88 5f 02 00 00    	js     c00279fa <__adddf3+0x2cf>
c002779b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002779e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00277a1:	85 db                	test   ebx,ebx
c00277a3:	0f 8e c7 00 00 00    	jle    c0027870 <__adddf3+0x145>
c00277a9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00277b0:	75 1a                	jne    c00277cc <__adddf3+0xa1>
c00277b2:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00277b5:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00277b8:	0f 84 b2 05 00 00    	je     c0027d70 <__adddf3+0x645>
c00277be:	4b                   	dec    ebx
c00277bf:	75 23                	jne    c00277e4 <__adddf3+0xb9>
c00277c1:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00277c4:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00277c7:	e9 99 00 00 00       	jmp    c0027865 <__adddf3+0x13a>
c00277cc:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00277cf:	f7 d6                	not    esi
c00277d1:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00277d7:	0f 84 93 05 00 00    	je     c0027d70 <__adddf3+0x645>
c00277dd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00277e4:	83 fb 1f             	cmp    ebx,0x1f
c00277e7:	7e 42                	jle    c002782b <__adddf3+0x100>
c00277e9:	83 fb 3f             	cmp    ebx,0x3f
c00277ec:	0f 8f 7e 05 00 00    	jg     c0027d70 <__adddf3+0x645>
c00277f2:	83 e3 1f             	and    ebx,0x1f
c00277f5:	89 d9                	mov    ecx,ebx
c00277f7:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00277fa:	d3 ef                	shr    edi,cl
c00277fc:	31 db                	xor    ebx,ebx
c00277fe:	85 c9                	test   ecx,ecx
c0027800:	74 15                	je     c0027817 <__adddf3+0xec>
c0027802:	be 20 00 00 00       	mov    esi,0x20
c0027807:	29 ce                	sub    esi,ecx
c0027809:	89 f1                	mov    ecx,esi
c002780b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002780e:	d3 e6                	shl    esi,cl
c0027810:	31 db                	xor    ebx,ebx
c0027812:	85 f6                	test   esi,esi
c0027814:	0f 95 c3             	setne  bl
c0027817:	31 c9                	xor    ecx,ecx
c0027819:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002781d:	0f 95 c1             	setne  cl
c0027820:	09 cf                	or     edi,ecx
c0027822:	09 fb                	or     ebx,edi
c0027824:	01 da                	add    edx,ebx
c0027826:	83 d0 00             	adc    eax,0x0
c0027829:	eb 3a                	jmp    c0027865 <__adddf3+0x13a>
c002782b:	bf 20 00 00 00       	mov    edi,0x20
c0027830:	29 df                	sub    edi,ebx
c0027832:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027835:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027838:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002783b:	d3 e6                	shl    esi,cl
c002783d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027840:	88 d9                	mov    cl,bl
c0027842:	d3 ef                	shr    edi,cl
c0027844:	09 fe                	or     esi,edi
c0027846:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027849:	88 d9                	mov    cl,bl
c002784b:	d3 ef                	shr    edi,cl
c002784d:	89 fb                	mov    ebx,edi
c002784f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027852:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027855:	d3 e7                	shl    edi,cl
c0027857:	85 ff                	test   edi,edi
c0027859:	0f 95 c1             	setne  cl
c002785c:	0f b6 c9             	movzx  ecx,cl
c002785f:	09 ce                	or     esi,ecx
c0027861:	01 f2                	add    edx,esi
c0027863:	11 d8                	adc    eax,ebx
c0027865:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027868:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002786b:	e9 52 01 00 00       	jmp    c00279c2 <__adddf3+0x297>
c0027870:	0f 84 d5 00 00 00    	je     c002794b <__adddf3+0x220>
c0027876:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027879:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c002787c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002787f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027882:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027889:	75 20                	jne    c00278ab <__adddf3+0x180>
c002788b:	89 d6                	mov    esi,edx
c002788d:	09 c6                	or     esi,eax
c002788f:	0f 84 db 04 00 00    	je     c0027d70 <__adddf3+0x645>
c0027895:	4b                   	dec    ebx
c0027896:	75 29                	jne    c00278c1 <__adddf3+0x196>
c0027898:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002789b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002789e:	01 d1                	add    ecx,edx
c00278a0:	11 c6                	adc    esi,eax
c00278a2:	89 f0                	mov    eax,esi
c00278a4:	89 ca                	mov    edx,ecx
c00278a6:	e9 17 01 00 00       	jmp    c00279c2 <__adddf3+0x297>
c00278ab:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00278ae:	f7 d6                	not    esi
c00278b0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00278b6:	0f 84 b4 04 00 00    	je     c0027d70 <__adddf3+0x645>
c00278bc:	0d 00 00 00 80       	or     eax,0x80000000
c00278c1:	83 fb 1f             	cmp    ebx,0x1f
c00278c4:	7e 48                	jle    c002790e <__adddf3+0x1e3>
c00278c6:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278c9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278cc:	83 fb 3f             	cmp    ebx,0x3f
c00278cf:	0f 8f 9b 04 00 00    	jg     c0027d70 <__adddf3+0x645>
c00278d5:	83 e3 1f             	and    ebx,0x1f
c00278d8:	89 d9                	mov    ecx,ebx
c00278da:	89 c7                	mov    edi,eax
c00278dc:	d3 ef                	shr    edi,cl
c00278de:	31 db                	xor    ebx,ebx
c00278e0:	85 c9                	test   ecx,ecx
c00278e2:	74 12                	je     c00278f6 <__adddf3+0x1cb>
c00278e4:	be 20 00 00 00       	mov    esi,0x20
c00278e9:	29 ce                	sub    esi,ecx
c00278eb:	89 f1                	mov    ecx,esi
c00278ed:	d3 e0                	shl    eax,cl
c00278ef:	31 db                	xor    ebx,ebx
c00278f1:	85 c0                	test   eax,eax
c00278f3:	0f 95 c3             	setne  bl
c00278f6:	31 c0                	xor    eax,eax
c00278f8:	85 d2                	test   edx,edx
c00278fa:	0f 95 c0             	setne  al
c00278fd:	09 c7                	or     edi,eax
c00278ff:	09 fb                	or     ebx,edi
c0027901:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027904:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027907:	01 da                	add    edx,ebx
c0027909:	83 d6 00             	adc    esi,0x0
c002790c:	eb 39                	jmp    c0027947 <__adddf3+0x21c>
c002790e:	be 20 00 00 00       	mov    esi,0x20
c0027913:	29 de                	sub    esi,ebx
c0027915:	89 c7                	mov    edi,eax
c0027917:	89 f1                	mov    ecx,esi
c0027919:	d3 e7                	shl    edi,cl
c002791b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002791e:	89 d7                	mov    edi,edx
c0027920:	88 d9                	mov    cl,bl
c0027922:	d3 ef                	shr    edi,cl
c0027924:	89 f9                	mov    ecx,edi
c0027926:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027929:	09 cf                	or     edi,ecx
c002792b:	88 d9                	mov    cl,bl
c002792d:	d3 e8                	shr    eax,cl
c002792f:	89 f1                	mov    ecx,esi
c0027931:	d3 e2                	shl    edx,cl
c0027933:	85 d2                	test   edx,edx
c0027935:	0f 95 c2             	setne  dl
c0027938:	0f b6 d2             	movzx  edx,dl
c002793b:	09 d7                	or     edi,edx
c002793d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027940:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027943:	01 fa                	add    edx,edi
c0027945:	11 c6                	adc    esi,eax
c0027947:	89 f0                	mov    eax,esi
c0027949:	eb 77                	jmp    c00279c2 <__adddf3+0x297>
c002794b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002794e:	46                   	inc    esi
c002794f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027952:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027958:	75 41                	jne    c002799b <__adddf3+0x270>
c002795a:	89 d3                	mov    ebx,edx
c002795c:	09 c3                	or     ebx,eax
c002795e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027965:	75 27                	jne    c002798e <__adddf3+0x263>
c0027967:	85 db                	test   ebx,ebx
c0027969:	0f 84 fb 03 00 00    	je     c0027d6a <__adddf3+0x63f>
c002796f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027972:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027975:	0f 84 f5 03 00 00    	je     c0027d70 <__adddf3+0x645>
c002797b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002797e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027981:	85 c0                	test   eax,eax
c0027983:	0f 89 91 03 00 00    	jns    c0027d1a <__adddf3+0x5ef>
c0027989:	e9 85 03 00 00       	jmp    c0027d13 <__adddf3+0x5e8>
c002798e:	85 db                	test   ebx,ebx
c0027990:	0f 85 da 03 00 00    	jne    c0027d70 <__adddf3+0x645>
c0027996:	e9 cf 03 00 00       	jmp    c0027d6a <__adddf3+0x63f>
c002799b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002799e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00279a1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00279a4:	f7 d1                	not    ecx
c00279a6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00279ac:	0f 84 70 03 00 00    	je     c0027d22 <__adddf3+0x5f7>
c00279b2:	d1 ea                	shr    edx,1
c00279b4:	89 c1                	mov    ecx,eax
c00279b6:	c1 e1 1f             	shl    ecx,0x1f
c00279b9:	09 ca                	or     edx,ecx
c00279bb:	d1 e8                	shr    eax,1
c00279bd:	e9 6f 03 00 00       	jmp    c0027d31 <__adddf3+0x606>
c00279c2:	85 c0                	test   eax,eax
c00279c4:	0f 89 67 03 00 00    	jns    c0027d31 <__adddf3+0x606>
c00279ca:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00279cd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00279d0:	f7 d1                	not    ecx
c00279d2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00279d8:	0f 84 44 03 00 00    	je     c0027d22 <__adddf3+0x5f7>
c00279de:	89 d1                	mov    ecx,edx
c00279e0:	d1 e9                	shr    ecx,1
c00279e2:	83 e2 01             	and    edx,0x1
c00279e5:	09 ca                	or     edx,ecx
c00279e7:	89 c1                	mov    ecx,eax
c00279e9:	c1 e1 1f             	shl    ecx,0x1f
c00279ec:	09 ca                	or     edx,ecx
c00279ee:	d1 e8                	shr    eax,1
c00279f0:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00279f5:	e9 37 03 00 00       	jmp    c0027d31 <__adddf3+0x606>
c00279fa:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00279fd:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027a03:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027a06:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027a09:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027a0f:	29 de                	sub    esi,ebx
c0027a11:	85 f6                	test   esi,esi
c0027a13:	0f 8e bd 00 00 00    	jle    c0027ad6 <__adddf3+0x3ab>
c0027a19:	85 db                	test   ebx,ebx
c0027a1b:	75 17                	jne    c0027a34 <__adddf3+0x309>
c0027a1d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027a20:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027a23:	0f 84 47 03 00 00    	je     c0027d70 <__adddf3+0x645>
c0027a29:	4e                   	dec    esi
c0027a2a:	75 20                	jne    c0027a4c <__adddf3+0x321>
c0027a2c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027a2f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027a32:	eb 5b                	jmp    c0027a8f <__adddf3+0x364>
c0027a34:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027a37:	f7 d3                	not    ebx
c0027a39:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027a3f:	0f 84 2b 03 00 00    	je     c0027d70 <__adddf3+0x645>
c0027a45:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027a4c:	83 fe 1f             	cmp    esi,0x1f
c0027a4f:	7e 49                	jle    c0027a9a <__adddf3+0x36f>
c0027a51:	83 fe 3f             	cmp    esi,0x3f
c0027a54:	0f 8f 16 03 00 00    	jg     c0027d70 <__adddf3+0x645>
c0027a5a:	83 e6 1f             	and    esi,0x1f
c0027a5d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027a60:	89 f1                	mov    ecx,esi
c0027a62:	d3 ef                	shr    edi,cl
c0027a64:	31 db                	xor    ebx,ebx
c0027a66:	85 f6                	test   esi,esi
c0027a68:	74 13                	je     c0027a7d <__adddf3+0x352>
c0027a6a:	b9 20 00 00 00       	mov    ecx,0x20
c0027a6f:	29 f1                	sub    ecx,esi
c0027a71:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a74:	d3 e6                	shl    esi,cl
c0027a76:	31 db                	xor    ebx,ebx
c0027a78:	85 f6                	test   esi,esi
c0027a7a:	0f 95 c3             	setne  bl
c0027a7d:	31 c9                	xor    ecx,ecx
c0027a7f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027a83:	0f 95 c1             	setne  cl
c0027a86:	09 cf                	or     edi,ecx
c0027a88:	09 fb                	or     ebx,edi
c0027a8a:	29 da                	sub    edx,ebx
c0027a8c:	83 d8 00             	sbb    eax,0x0
c0027a8f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a92:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027a95:	e9 aa 01 00 00       	jmp    c0027c44 <__adddf3+0x519>
c0027a9a:	bf 20 00 00 00       	mov    edi,0x20
c0027a9f:	29 f7                	sub    edi,esi
c0027aa1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027aa4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027aa7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027aaa:	d3 e3                	shl    ebx,cl
c0027aac:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027aaf:	89 f1                	mov    ecx,esi
c0027ab1:	d3 ef                	shr    edi,cl
c0027ab3:	09 fb                	or     ebx,edi
c0027ab5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027ab8:	89 f1                	mov    ecx,esi
c0027aba:	d3 ef                	shr    edi,cl
c0027abc:	89 fe                	mov    esi,edi
c0027abe:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027ac1:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027ac4:	d3 e7                	shl    edi,cl
c0027ac6:	85 ff                	test   edi,edi
c0027ac8:	0f 95 c1             	setne  cl
c0027acb:	0f b6 c9             	movzx  ecx,cl
c0027ace:	09 cb                	or     ebx,ecx
c0027ad0:	29 da                	sub    edx,ebx
c0027ad2:	19 f0                	sbb    eax,esi
c0027ad4:	eb b9                	jmp    c0027a8f <__adddf3+0x364>
c0027ad6:	0f 84 cd 00 00 00    	je     c0027ba9 <__adddf3+0x47e>
c0027adc:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027adf:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027ae2:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027ae5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027ae9:	75 1b                	jne    c0027b06 <__adddf3+0x3db>
c0027aeb:	89 d6                	mov    esi,edx
c0027aed:	09 c6                	or     esi,eax
c0027aef:	0f 84 7b 02 00 00    	je     c0027d70 <__adddf3+0x645>
c0027af5:	4b                   	dec    ebx
c0027af6:	75 24                	jne    c0027b1c <__adddf3+0x3f1>
c0027af8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027afb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027afe:	29 d1                	sub    ecx,edx
c0027b00:	19 c6                	sbb    esi,eax
c0027b02:	89 ca                	mov    edx,ecx
c0027b04:	eb 61                	jmp    c0027b67 <__adddf3+0x43c>
c0027b06:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027b09:	f7 d6                	not    esi
c0027b0b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027b11:	0f 84 59 02 00 00    	je     c0027d70 <__adddf3+0x645>
c0027b17:	0d 00 00 00 80       	or     eax,0x80000000
c0027b1c:	83 fb 1f             	cmp    ebx,0x1f
c0027b1f:	7e 4d                	jle    c0027b6e <__adddf3+0x443>
c0027b21:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027b24:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027b27:	83 fb 3f             	cmp    ebx,0x3f
c0027b2a:	0f 8f 40 02 00 00    	jg     c0027d70 <__adddf3+0x645>
c0027b30:	83 e3 1f             	and    ebx,0x1f
c0027b33:	89 d9                	mov    ecx,ebx
c0027b35:	89 c7                	mov    edi,eax
c0027b37:	d3 ef                	shr    edi,cl
c0027b39:	31 db                	xor    ebx,ebx
c0027b3b:	85 c9                	test   ecx,ecx
c0027b3d:	74 12                	je     c0027b51 <__adddf3+0x426>
c0027b3f:	be 20 00 00 00       	mov    esi,0x20
c0027b44:	29 ce                	sub    esi,ecx
c0027b46:	89 f1                	mov    ecx,esi
c0027b48:	d3 e0                	shl    eax,cl
c0027b4a:	31 db                	xor    ebx,ebx
c0027b4c:	85 c0                	test   eax,eax
c0027b4e:	0f 95 c3             	setne  bl
c0027b51:	31 c0                	xor    eax,eax
c0027b53:	85 d2                	test   edx,edx
c0027b55:	0f 95 c0             	setne  al
c0027b58:	09 c7                	or     edi,eax
c0027b5a:	09 fb                	or     ebx,edi
c0027b5c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027b5f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027b62:	29 da                	sub    edx,ebx
c0027b64:	83 de 00             	sbb    esi,0x0
c0027b67:	89 f0                	mov    eax,esi
c0027b69:	e9 d6 00 00 00       	jmp    c0027c44 <__adddf3+0x519>
c0027b6e:	be 20 00 00 00       	mov    esi,0x20
c0027b73:	29 de                	sub    esi,ebx
c0027b75:	89 c7                	mov    edi,eax
c0027b77:	89 f1                	mov    ecx,esi
c0027b79:	d3 e7                	shl    edi,cl
c0027b7b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027b7e:	89 d7                	mov    edi,edx
c0027b80:	88 d9                	mov    cl,bl
c0027b82:	d3 ef                	shr    edi,cl
c0027b84:	89 f9                	mov    ecx,edi
c0027b86:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b89:	09 cf                	or     edi,ecx
c0027b8b:	88 d9                	mov    cl,bl
c0027b8d:	d3 e8                	shr    eax,cl
c0027b8f:	89 f1                	mov    ecx,esi
c0027b91:	d3 e2                	shl    edx,cl
c0027b93:	85 d2                	test   edx,edx
c0027b95:	0f 95 c2             	setne  dl
c0027b98:	0f b6 d2             	movzx  edx,dl
c0027b9b:	09 d7                	or     edi,edx
c0027b9d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ba0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027ba3:	29 fa                	sub    edx,edi
c0027ba5:	19 c6                	sbb    esi,eax
c0027ba7:	eb be                	jmp    c0027b67 <__adddf3+0x43c>
c0027ba9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027bac:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027baf:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027bb5:	75 6a                	jne    c0027c21 <__adddf3+0x4f6>
c0027bb7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027bbb:	75 58                	jne    c0027c15 <__adddf3+0x4ea>
c0027bbd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027bc0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027bc3:	89 d6                	mov    esi,edx
c0027bc5:	09 c6                	or     esi,eax
c0027bc7:	75 17                	jne    c0027be0 <__adddf3+0x4b5>
c0027bc9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027bcc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027bcf:	85 db                	test   ebx,ebx
c0027bd1:	0f 85 99 01 00 00    	jne    c0027d70 <__adddf3+0x645>
c0027bd7:	31 ff                	xor    edi,edi
c0027bd9:	31 c9                	xor    ecx,ecx
c0027bdb:	e9 90 01 00 00       	jmp    c0027d70 <__adddf3+0x645>
c0027be0:	85 db                	test   ebx,ebx
c0027be2:	0f 84 88 01 00 00    	je     c0027d70 <__adddf3+0x645>
c0027be8:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027beb:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027bee:	85 c0                	test   eax,eax
c0027bf0:	79 10                	jns    c0027c02 <__adddf3+0x4d7>
c0027bf2:	31 c9                	xor    ecx,ecx
c0027bf4:	f7 da                	neg    edx
c0027bf6:	0f 95 c1             	setne  cl
c0027bf9:	01 c8                	add    eax,ecx
c0027bfb:	f7 d8                	neg    eax
c0027bfd:	e9 2f 01 00 00       	jmp    c0027d31 <__adddf3+0x606>
c0027c02:	31 ff                	xor    edi,edi
c0027c04:	31 c9                	xor    ecx,ecx
c0027c06:	89 c3                	mov    ebx,eax
c0027c08:	09 d3                	or     ebx,edx
c0027c0a:	0f 84 60 01 00 00    	je     c0027d70 <__adddf3+0x645>
c0027c10:	e9 05 01 00 00       	jmp    c0027d1a <__adddf3+0x5ef>
c0027c15:	31 ff                	xor    edi,edi
c0027c17:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027c1c:	e9 4f 01 00 00       	jmp    c0027d70 <__adddf3+0x645>
c0027c21:	89 c1                	mov    ecx,eax
c0027c23:	89 d0                	mov    eax,edx
c0027c25:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027c28:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027c2b:	89 ca                	mov    edx,ecx
c0027c2d:	85 c9                	test   ecx,ecx
c0027c2f:	79 2c                	jns    c0027c5d <__adddf3+0x532>
c0027c31:	31 c9                	xor    ecx,ecx
c0027c33:	f7 d8                	neg    eax
c0027c35:	0f 95 c1             	setne  cl
c0027c38:	01 ca                	add    edx,ecx
c0027c3a:	f7 da                	neg    edx
c0027c3c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027c3f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027c42:	eb 19                	jmp    c0027c5d <__adddf3+0x532>
c0027c44:	85 c0                	test   eax,eax
c0027c46:	0f 89 e5 00 00 00    	jns    c0027d31 <__adddf3+0x606>
c0027c4c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027c51:	89 c1                	mov    ecx,eax
c0027c53:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027c56:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027c59:	89 d0                	mov    eax,edx
c0027c5b:	89 ca                	mov    edx,ecx
c0027c5d:	85 d2                	test   edx,edx
c0027c5f:	74 59                	je     c0027cba <__adddf3+0x58f>
c0027c61:	0f bd da             	bsr    ebx,edx
c0027c64:	83 f3 1f             	xor    ebx,0x1f
c0027c67:	88 d9                	mov    cl,bl
c0027c69:	d3 e2                	shl    edx,cl
c0027c6b:	bf 20 00 00 00       	mov    edi,0x20
c0027c70:	89 f9                	mov    ecx,edi
c0027c72:	29 d9                	sub    ecx,ebx
c0027c74:	89 c6                	mov    esi,eax
c0027c76:	d3 ee                	shr    esi,cl
c0027c78:	09 d6                	or     esi,edx
c0027c7a:	88 d9                	mov    cl,bl
c0027c7c:	d3 e0                	shl    eax,cl
c0027c7e:	89 c2                	mov    edx,eax
c0027c80:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c83:	25 ff 07 00 00       	and    eax,0x7ff
c0027c88:	39 d8                	cmp    eax,ebx
c0027c8a:	7f 22                	jg     c0027cae <__adddf3+0x583>
c0027c8c:	29 c3                	sub    ebx,eax
c0027c8e:	43                   	inc    ebx
c0027c8f:	88 d9                	mov    cl,bl
c0027c91:	d3 ea                	shr    edx,cl
c0027c93:	29 df                	sub    edi,ebx
c0027c95:	89 f9                	mov    ecx,edi
c0027c97:	89 f0                	mov    eax,esi
c0027c99:	d3 e0                	shl    eax,cl
c0027c9b:	09 c2                	or     edx,eax
c0027c9d:	89 f0                	mov    eax,esi
c0027c9f:	88 d9                	mov    cl,bl
c0027ca1:	d3 e8                	shr    eax,cl
c0027ca3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ca6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027cac:	eb 6f                	jmp    c0027d1d <__adddf3+0x5f2>
c0027cae:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027cb1:	29 d8                	sub    eax,ebx
c0027cb3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cb6:	89 f0                	mov    eax,esi
c0027cb8:	eb 59                	jmp    c0027d13 <__adddf3+0x5e8>
c0027cba:	85 c0                	test   eax,eax
c0027cbc:	74 6a                	je     c0027d28 <__adddf3+0x5fd>
c0027cbe:	0f bd c8             	bsr    ecx,eax
c0027cc1:	83 f1 1f             	xor    ecx,0x1f
c0027cc4:	d3 e0                	shl    eax,cl
c0027cc6:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027cc9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027ccf:	83 c1 20             	add    ecx,0x20
c0027cd2:	39 cb                	cmp    ebx,ecx
c0027cd4:	7f 35                	jg     c0027d0b <__adddf3+0x5e0>
c0027cd6:	29 d9                	sub    ecx,ebx
c0027cd8:	8d 71 01             	lea    esi,[ecx+0x1]
c0027cdb:	83 fe 1f             	cmp    esi,0x1f
c0027cde:	7e 09                	jle    c0027ce9 <__adddf3+0x5be>
c0027ce0:	83 e9 1f             	sub    ecx,0x1f
c0027ce3:	d3 e8                	shr    eax,cl
c0027ce5:	89 c3                	mov    ebx,eax
c0027ce7:	eb 11                	jmp    c0027cfa <__adddf3+0x5cf>
c0027ce9:	b9 20 00 00 00       	mov    ecx,0x20
c0027cee:	29 f1                	sub    ecx,esi
c0027cf0:	89 c3                	mov    ebx,eax
c0027cf2:	d3 e3                	shl    ebx,cl
c0027cf4:	89 f1                	mov    ecx,esi
c0027cf6:	d3 e8                	shr    eax,cl
c0027cf8:	89 c2                	mov    edx,eax
c0027cfa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027cfd:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027d02:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d05:	89 d0                	mov    eax,edx
c0027d07:	89 da                	mov    edx,ebx
c0027d09:	eb 26                	jmp    c0027d31 <__adddf3+0x606>
c0027d0b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d0e:	29 cf                	sub    edi,ecx
c0027d10:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027d13:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027d18:	eb 17                	jmp    c0027d31 <__adddf3+0x606>
c0027d1a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d1d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027d20:	eb 0f                	jmp    c0027d31 <__adddf3+0x606>
c0027d22:	31 d2                	xor    edx,edx
c0027d24:	31 c0                	xor    eax,eax
c0027d26:	eb 09                	jmp    c0027d31 <__adddf3+0x606>
c0027d28:	89 c2                	mov    edx,eax
c0027d2a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027d31:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d34:	c1 e1 14             	shl    ecx,0x14
c0027d37:	89 c3                	mov    ebx,eax
c0027d39:	c1 eb 0b             	shr    ebx,0xb
c0027d3c:	09 d9                	or     ecx,ebx
c0027d3e:	89 d3                	mov    ebx,edx
c0027d40:	c1 eb 0b             	shr    ebx,0xb
c0027d43:	c1 e0 15             	shl    eax,0x15
c0027d46:	09 d8                	or     eax,ebx
c0027d48:	89 c7                	mov    edi,eax
c0027d4a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027d50:	0f 95 c0             	setne  al
c0027d53:	89 c6                	mov    esi,eax
c0027d55:	09 f3                	or     ebx,esi
c0027d57:	83 e3 01             	and    ebx,0x1
c0027d5a:	c1 ea 0a             	shr    edx,0xa
c0027d5d:	21 da                	and    edx,ebx
c0027d5f:	89 f8                	mov    eax,edi
c0027d61:	01 d0                	add    eax,edx
c0027d63:	83 d1 00             	adc    ecx,0x0
c0027d66:	89 c7                	mov    edi,eax
c0027d68:	eb 06                	jmp    c0027d70 <__adddf3+0x645>
c0027d6a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027d6d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027d70:	89 f8                	mov    eax,edi
c0027d72:	89 ca                	mov    edx,ecx
c0027d74:	83 c4 24             	add    esp,0x24
c0027d77:	5b                   	pop    ebx
c0027d78:	5e                   	pop    esi
c0027d79:	5f                   	pop    edi
c0027d7a:	5d                   	pop    ebp
c0027d7b:	c3                   	ret    

c0027d7c <__subdf3>:
c0027d7c:	55                   	push   ebp
c0027d7d:	89 e5                	mov    ebp,esp
c0027d7f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027d82:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027d85:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027d8b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027d8e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027d91:	5d                   	pop    ebp
c0027d92:	e9 94 f9 ff ff       	jmp    c002772b <__adddf3>

c0027d97 <__negdf2>:
c0027d97:	55                   	push   ebp
c0027d98:	89 e5                	mov    ebp,esp
c0027d9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027d9d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027da0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027da6:	5d                   	pop    ebp
c0027da7:	c3                   	ret    

c0027da8 <__muldf3>:
c0027da8:	55                   	push   ebp
c0027da9:	89 e5                	mov    ebp,esp
c0027dab:	57                   	push   edi
c0027dac:	56                   	push   esi
c0027dad:	53                   	push   ebx
c0027dae:	83 ec 24             	sub    esp,0x24
c0027db1:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027db4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027db7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027dba:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027dbd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027dc0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027dc3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027dc6:	89 c8                	mov    eax,ecx
c0027dc8:	c1 f8 14             	sar    eax,0x14
c0027dcb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027dce:	89 f8                	mov    eax,edi
c0027dd0:	89 fb                	mov    ebx,edi
c0027dd2:	c1 e3 0b             	shl    ebx,0xb
c0027dd5:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027dd8:	c1 e1 0b             	shl    ecx,0xb
c0027ddb:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027de1:	c1 e8 15             	shr    eax,0x15
c0027de4:	09 c1                	or     ecx,eax
c0027de6:	89 d6                	mov    esi,edx
c0027de8:	89 d0                	mov    eax,edx
c0027dea:	c1 f8 14             	sar    eax,0x14
c0027ded:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027df0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027df3:	89 c3                	mov    ebx,eax
c0027df5:	c1 e3 0b             	shl    ebx,0xb
c0027df8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027dfb:	c1 e6 0b             	shl    esi,0xb
c0027dfe:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027e04:	c1 e8 15             	shr    eax,0x15
c0027e07:	09 c6                	or     esi,eax
c0027e09:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e0c:	25 ff 07 00 00       	and    eax,0x7ff
c0027e11:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027e14:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027e17:	25 ff 07 00 00       	and    eax,0x7ff
c0027e1c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027e1f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027e22:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027e25:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027e2c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e2f:	40                   	inc    eax
c0027e30:	a9 fe 07 00 00       	test   eax,0x7fe
c0027e35:	0f 85 8d 00 00 00    	jne    c0027ec8 <__muldf3+0x120>
c0027e3b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e3e:	09 c8                	or     eax,ecx
c0027e40:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027e44:	74 44                	je     c0027e8a <__muldf3+0xe2>
c0027e46:	85 c0                	test   eax,eax
c0027e48:	0f 85 31 02 00 00    	jne    c002807f <__muldf3+0x2d7>
c0027e4e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027e51:	40                   	inc    eax
c0027e52:	a9 fe 07 00 00       	test   eax,0x7fe
c0027e57:	75 13                	jne    c0027e6c <__muldf3+0xc4>
c0027e59:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027e5c:	09 f1                	or     ecx,esi
c0027e5e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027e62:	74 22                	je     c0027e86 <__muldf3+0xde>
c0027e64:	85 c9                	test   ecx,ecx
c0027e66:	0f 85 0d 02 00 00    	jne    c0028079 <__muldf3+0x2d1>
c0027e6c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027e70:	0f 89 09 02 00 00    	jns    c002807f <__muldf3+0x2d7>
c0027e76:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027e79:	05 00 00 00 80       	add    eax,0x80000000
c0027e7e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e81:	e9 f9 01 00 00       	jmp    c002807f <__muldf3+0x2d7>
c0027e86:	85 c9                	test   ecx,ecx
c0027e88:	eb 2e                	jmp    c0027eb8 <__muldf3+0x110>
c0027e8a:	85 c0                	test   eax,eax
c0027e8c:	74 20                	je     c0027eae <__muldf3+0x106>
c0027e8e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027e91:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e94:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027e97:	c1 ef 1f             	shr    edi,0x1f
c0027e9a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027e9d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027ea0:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027ea3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027ea6:	09 f9                	or     ecx,edi
c0027ea8:	78 1e                	js     c0027ec8 <__muldf3+0x120>
c0027eaa:	89 c3                	mov    ebx,eax
c0027eac:	eb e0                	jmp    c0027e8e <__muldf3+0xe6>
c0027eae:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027eb1:	f7 d0                	not    eax
c0027eb3:	a9 ff 07 00 00       	test   eax,0x7ff
c0027eb8:	75 b2                	jne    c0027e6c <__muldf3+0xc4>
c0027eba:	31 ff                	xor    edi,edi
c0027ebc:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027ec3:	e9 b7 01 00 00       	jmp    c002807f <__muldf3+0x2d7>
c0027ec8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ecb:	40                   	inc    eax
c0027ecc:	a9 fe 07 00 00       	test   eax,0x7fe
c0027ed1:	75 57                	jne    c0027f2a <__muldf3+0x182>
c0027ed3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027ed6:	09 f0                	or     eax,esi
c0027ed8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027edc:	74 23                	je     c0027f01 <__muldf3+0x159>
c0027ede:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027ee2:	0f 89 91 01 00 00    	jns    c0028079 <__muldf3+0x2d1>
c0027ee8:	85 c0                	test   eax,eax
c0027eea:	0f 85 89 01 00 00    	jne    c0028079 <__muldf3+0x2d1>
c0027ef0:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027ef3:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027ef9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027efc:	e9 7e 01 00 00       	jmp    c002807f <__muldf3+0x2d7>
c0027f01:	85 c0                	test   eax,eax
c0027f03:	75 0c                	jne    c0027f11 <__muldf3+0x169>
c0027f05:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027f09:	0f 89 6a 01 00 00    	jns    c0028079 <__muldf3+0x2d1>
c0027f0f:	eb df                	jmp    c0027ef0 <__muldf3+0x148>
c0027f11:	01 f6                	add    esi,esi
c0027f13:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027f16:	c1 ea 1f             	shr    edx,0x1f
c0027f19:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027f1c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027f1f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027f22:	09 d6                	or     esi,edx
c0027f24:	78 04                	js     c0027f2a <__muldf3+0x182>
c0027f26:	89 c3                	mov    ebx,eax
c0027f28:	eb e7                	jmp    c0027f11 <__muldf3+0x169>
c0027f2a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027f30:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027f36:	89 c8                	mov    eax,ecx
c0027f38:	f7 e6                	mul    esi
c0027f3a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027f3d:	89 c7                	mov    edi,eax
c0027f3f:	89 c8                	mov    eax,ecx
c0027f41:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027f44:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027f47:	89 c1                	mov    ecx,eax
c0027f49:	89 f0                	mov    eax,esi
c0027f4b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027f4e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027f51:	89 c6                	mov    esi,eax
c0027f53:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f56:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027f59:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027f5c:	31 c0                	xor    eax,eax
c0027f5e:	01 f1                	add    ecx,esi
c0027f60:	0f 92 c0             	setb   al
c0027f63:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027f66:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027f69:	83 d6 00             	adc    esi,0x0
c0027f6c:	01 c7                	add    edi,eax
c0027f6e:	83 d6 00             	adc    esi,0x0
c0027f71:	01 ca                	add    edx,ecx
c0027f73:	0f 92 c1             	setb   cl
c0027f76:	0f b6 c9             	movzx  ecx,cl
c0027f79:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027f7c:	83 d6 00             	adc    esi,0x0
c0027f7f:	01 cf                	add    edi,ecx
c0027f81:	83 d6 00             	adc    esi,0x0
c0027f84:	31 c9                	xor    ecx,ecx
c0027f86:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027f89:	0f 95 c1             	setne  cl
c0027f8c:	09 cf                	or     edi,ecx
c0027f8e:	85 f6                	test   esi,esi
c0027f90:	78 0c                	js     c0027f9e <__muldf3+0x1f6>
c0027f92:	01 f6                	add    esi,esi
c0027f94:	89 f8                	mov    eax,edi
c0027f96:	c1 e8 1f             	shr    eax,0x1f
c0027f99:	09 c6                	or     esi,eax
c0027f9b:	01 ff                	add    edi,edi
c0027f9d:	4b                   	dec    ebx
c0027f9e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027fa4:	0f 8f 85 00 00 00    	jg     c002802f <__muldf3+0x287>
c0027faa:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027fb0:	85 db                	test   ebx,ebx
c0027fb2:	0f 8f 84 00 00 00    	jg     c002803c <__muldf3+0x294>
c0027fb8:	83 fb cc             	cmp    ebx,0xffffffcc
c0027fbb:	7c 79                	jl     c0028036 <__muldf3+0x28e>
c0027fbd:	ba 01 00 00 00       	mov    edx,0x1
c0027fc2:	29 da                	sub    edx,ebx
c0027fc4:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027fca:	83 fa 1f             	cmp    edx,0x1f
c0027fcd:	7e 30                	jle    c0027fff <__muldf3+0x257>
c0027fcf:	83 fa 20             	cmp    edx,0x20
c0027fd2:	75 0b                	jne    c0027fdf <__muldf3+0x237>
c0027fd4:	31 c0                	xor    eax,eax
c0027fd6:	85 ff                	test   edi,edi
c0027fd8:	0f 95 c0             	setne  al
c0027fdb:	89 c7                	mov    edi,eax
c0027fdd:	eb 1a                	jmp    c0027ff9 <__muldf3+0x251>
c0027fdf:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027fe2:	89 f0                	mov    eax,esi
c0027fe4:	d3 e0                	shl    eax,cl
c0027fe6:	09 f8                	or     eax,edi
c0027fe8:	0f 95 c0             	setne  al
c0027feb:	0f b6 c0             	movzx  eax,al
c0027fee:	89 c7                	mov    edi,eax
c0027ff0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027ff5:	29 d9                	sub    ecx,ebx
c0027ff7:	d3 ee                	shr    esi,cl
c0027ff9:	09 f7                	or     edi,esi
c0027ffb:	31 db                	xor    ebx,ebx
c0027ffd:	eb 3b                	jmp    c002803a <__muldf3+0x292>
c0027fff:	83 c3 1f             	add    ebx,0x1f
c0028002:	89 f0                	mov    eax,esi
c0028004:	88 d9                	mov    cl,bl
c0028006:	d3 e0                	shl    eax,cl
c0028008:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002800b:	89 f8                	mov    eax,edi
c002800d:	88 d1                	mov    cl,dl
c002800f:	d3 e8                	shr    eax,cl
c0028011:	89 c1                	mov    ecx,eax
c0028013:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028016:	09 c8                	or     eax,ecx
c0028018:	88 d9                	mov    cl,bl
c002801a:	d3 e7                	shl    edi,cl
c002801c:	31 db                	xor    ebx,ebx
c002801e:	85 ff                	test   edi,edi
c0028020:	0f 95 c3             	setne  bl
c0028023:	89 df                	mov    edi,ebx
c0028025:	09 c7                	or     edi,eax
c0028027:	88 d1                	mov    cl,dl
c0028029:	d3 ee                	shr    esi,cl
c002802b:	31 db                	xor    ebx,ebx
c002802d:	eb 0d                	jmp    c002803c <__muldf3+0x294>
c002802f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028034:	eb 02                	jmp    c0028038 <__muldf3+0x290>
c0028036:	31 db                	xor    ebx,ebx
c0028038:	31 ff                	xor    edi,edi
c002803a:	31 f6                	xor    esi,esi
c002803c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002803f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028042:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028047:	09 c3                	or     ebx,eax
c0028049:	c1 e3 14             	shl    ebx,0x14
c002804c:	89 f0                	mov    eax,esi
c002804e:	c1 e8 0b             	shr    eax,0xb
c0028051:	09 c3                	or     ebx,eax
c0028053:	89 f8                	mov    eax,edi
c0028055:	c1 e8 0b             	shr    eax,0xb
c0028058:	c1 e6 15             	shl    esi,0x15
c002805b:	09 c6                	or     esi,eax
c002805d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0028063:	0f 95 c1             	setne  cl
c0028066:	09 c8                	or     eax,ecx
c0028068:	83 e0 01             	and    eax,0x1
c002806b:	c1 ef 0a             	shr    edi,0xa
c002806e:	21 c7                	and    edi,eax
c0028070:	01 f7                	add    edi,esi
c0028072:	83 d3 00             	adc    ebx,0x0
c0028075:	89 da                	mov    edx,ebx
c0028077:	eb 03                	jmp    c002807c <__muldf3+0x2d4>
c0028079:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002807c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002807f:	89 f8                	mov    eax,edi
c0028081:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028084:	83 c4 24             	add    esp,0x24
c0028087:	5b                   	pop    ebx
c0028088:	5e                   	pop    esi
c0028089:	5f                   	pop    edi
c002808a:	5d                   	pop    ebp
c002808b:	c3                   	ret    

c002808c <__divdf3>:
c002808c:	55                   	push   ebp
c002808d:	89 e5                	mov    ebp,esp
c002808f:	57                   	push   edi
c0028090:	56                   	push   esi
c0028091:	53                   	push   ebx
c0028092:	83 ec 2c             	sub    esp,0x2c
c0028095:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028098:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002809b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002809e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00280a1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00280a4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00280a7:	89 ce                	mov    esi,ecx
c00280a9:	89 c8                	mov    eax,ecx
c00280ab:	c1 f8 14             	sar    eax,0x14
c00280ae:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00280b1:	89 f8                	mov    eax,edi
c00280b3:	89 fb                	mov    ebx,edi
c00280b5:	c1 e3 0b             	shl    ebx,0xb
c00280b8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00280bb:	c1 e6 0b             	shl    esi,0xb
c00280be:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00280c4:	c1 e8 15             	shr    eax,0x15
c00280c7:	09 c6                	or     esi,eax
c00280c9:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c00280cc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00280cf:	89 c2                	mov    edx,eax
c00280d1:	c1 fa 14             	sar    edx,0x14
c00280d4:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00280d7:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00280da:	89 de                	mov    esi,ebx
c00280dc:	c1 e6 0b             	shl    esi,0xb
c00280df:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00280e2:	c1 e0 0b             	shl    eax,0xb
c00280e5:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00280ea:	c1 eb 15             	shr    ebx,0x15
c00280ed:	09 d8                	or     eax,ebx
c00280ef:	89 c2                	mov    edx,eax
c00280f1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00280f4:	25 ff 07 00 00       	and    eax,0x7ff
c00280f9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00280fc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00280ff:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028105:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028108:	29 d8                	sub    eax,ebx
c002810a:	05 ff 03 00 00       	add    eax,0x3ff
c002810f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028112:	46                   	inc    esi
c0028113:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028119:	0f 85 a5 00 00 00    	jne    c00281c4 <__divdf3+0x138>
c002811f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028122:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028125:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028129:	74 2a                	je     c0028155 <__divdf3+0xc9>
c002812b:	85 f6                	test   esi,esi
c002812d:	0f 85 cc 02 00 00    	jne    c00283ff <__divdf3+0x373>
c0028133:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028136:	40                   	inc    eax
c0028137:	a9 fe 07 00 00       	test   eax,0x7fe
c002813c:	75 26                	jne    c0028164 <__divdf3+0xd8>
c002813e:	85 db                	test   ebx,ebx
c0028140:	74 22                	je     c0028164 <__divdf3+0xd8>
c0028142:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028145:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028148:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002814b:	09 d0                	or     eax,edx
c002814d:	0f 85 ac 02 00 00    	jne    c00283ff <__divdf3+0x373>
c0028153:	eb 63                	jmp    c00281b8 <__divdf3+0x12c>
c0028155:	85 f6                	test   esi,esi
c0028157:	75 22                	jne    c002817b <__divdf3+0xef>
c0028159:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002815c:	40                   	inc    eax
c002815d:	a9 fe 07 00 00       	test   eax,0x7fe
c0028162:	74 36                	je     c002819a <__divdf3+0x10e>
c0028164:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028168:	0f 89 91 02 00 00    	jns    c00283ff <__divdf3+0x373>
c002816e:	89 f8                	mov    eax,edi
c0028170:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028176:	e9 80 02 00 00       	jmp    c00283fb <__divdf3+0x36f>
c002817b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002817e:	01 f6                	add    esi,esi
c0028180:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028183:	c1 ef 1f             	shr    edi,0x1f
c0028186:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028189:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c002818c:	8d 48 ff             	lea    ecx,[eax-0x1]
c002818f:	09 f7                	or     edi,esi
c0028191:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028194:	78 2e                	js     c00281c4 <__divdf3+0x138>
c0028196:	89 c8                	mov    eax,ecx
c0028198:	eb e1                	jmp    c002817b <__divdf3+0xef>
c002819a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002819d:	09 d0                	or     eax,edx
c002819f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00281a3:	74 0f                	je     c00281b4 <__divdf3+0x128>
c00281a5:	85 c0                	test   eax,eax
c00281a7:	74 bb                	je     c0028164 <__divdf3+0xd8>
c00281a9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00281ac:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00281af:	e9 4b 02 00 00       	jmp    c00283ff <__divdf3+0x373>
c00281b4:	85 c0                	test   eax,eax
c00281b6:	75 ac                	jne    c0028164 <__divdf3+0xd8>
c00281b8:	31 ff                	xor    edi,edi
c00281ba:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00281bf:	e9 3b 02 00 00       	jmp    c00283ff <__divdf3+0x373>
c00281c4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00281c7:	8d 4f 01             	lea    ecx,[edi+0x1]
c00281ca:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00281d0:	75 6b                	jne    c002823d <__divdf3+0x1b1>
c00281d2:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00281d5:	09 d6                	or     esi,edx
c00281d7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00281db:	74 28                	je     c0028205 <__divdf3+0x179>
c00281dd:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00281e0:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00281e3:	85 f6                	test   esi,esi
c00281e5:	0f 85 14 02 00 00    	jne    c00283ff <__divdf3+0x373>
c00281eb:	31 ff                	xor    edi,edi
c00281ed:	31 c9                	xor    ecx,ecx
c00281ef:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00281f2:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00281f5:	0f 89 04 02 00 00    	jns    c00283ff <__divdf3+0x373>
c00281fb:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028200:	e9 fa 01 00 00       	jmp    c00283ff <__divdf3+0x373>
c0028205:	85 f6                	test   esi,esi
c0028207:	75 1b                	jne    c0028224 <__divdf3+0x198>
c0028209:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002820c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002820f:	25 00 00 00 80       	and    eax,0x80000000
c0028214:	31 c9                	xor    ecx,ecx
c0028216:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c002821b:	89 cf                	mov    edi,ecx
c002821d:	89 c1                	mov    ecx,eax
c002821f:	e9 db 01 00 00       	jmp    c00283ff <__divdf3+0x373>
c0028224:	01 d2                	add    edx,edx
c0028226:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028229:	c1 eb 1f             	shr    ebx,0x1f
c002822c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002822f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028232:	8d 48 01             	lea    ecx,[eax+0x1]
c0028235:	09 da                	or     edx,ebx
c0028237:	78 04                	js     c002823d <__divdf3+0x1b1>
c0028239:	89 c8                	mov    eax,ecx
c002823b:	eb e7                	jmp    c0028224 <__divdf3+0x198>
c002823d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028240:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028246:	81 ca 00 00 00 80    	or     edx,0x80000000
c002824c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c002824f:	39 d6                	cmp    esi,edx
c0028251:	77 0d                	ja     c0028260 <__divdf3+0x1d4>
c0028253:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028256:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028259:	72 1b                	jb     c0028276 <__divdf3+0x1ea>
c002825b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c002825e:	75 16                	jne    c0028276 <__divdf3+0x1ea>
c0028260:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028263:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028266:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028269:	83 de 00             	sbb    esi,0x0
c002826c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c002826f:	ba 01 00 00 00       	mov    edx,0x1
c0028274:	eb 02                	jmp    c0028278 <__divdf3+0x1ec>
c0028276:	31 d2                	xor    edx,edx
c0028278:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c002827f:	31 ff                	xor    edi,edi
c0028281:	01 ff                	add    edi,edi
c0028283:	89 d1                	mov    ecx,edx
c0028285:	c1 e9 1f             	shr    ecx,0x1f
c0028288:	09 cf                	or     edi,ecx
c002828a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c002828d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028290:	89 da                	mov    edx,ebx
c0028292:	89 f3                	mov    ebx,esi
c0028294:	8d 34 36             	lea    esi,[esi+esi*1]
c0028297:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002829a:	c1 e9 1f             	shr    ecx,0x1f
c002829d:	09 ce                	or     esi,ecx
c002829f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00282a2:	01 c9                	add    ecx,ecx
c00282a4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00282a7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00282aa:	85 db                	test   ebx,ebx
c00282ac:	78 29                	js     c00282d7 <__divdf3+0x24b>
c00282ae:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00282b1:	72 07                	jb     c00282ba <__divdf3+0x22e>
c00282b3:	75 3c                	jne    c00282f1 <__divdf3+0x265>
c00282b5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00282b8:	77 37                	ja     c00282f1 <__divdf3+0x265>
c00282ba:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00282bd:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00282c0:	31 d2                	xor    edx,edx
c00282c2:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00282c5:	0f 97 c2             	seta   dl
c00282c8:	29 d6                	sub    esi,edx
c00282ca:	89 d9                	mov    ecx,ebx
c00282cc:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00282cf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00282d2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00282d5:	eb 17                	jmp    c00282ee <__divdf3+0x262>
c00282d7:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00282da:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00282dd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00282e0:	0f 97 c1             	seta   cl
c00282e3:	0f b6 c9             	movzx  ecx,cl
c00282e6:	29 ce                	sub    esi,ecx
c00282e8:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00282eb:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00282ee:	83 ca 01             	or     edx,0x1
c00282f1:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00282f4:	75 8b                	jne    c0028281 <__divdf3+0x1f5>
c00282f6:	c1 e7 09             	shl    edi,0x9
c00282f9:	89 d1                	mov    ecx,edx
c00282fb:	c1 e9 17             	shr    ecx,0x17
c00282fe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028301:	09 f3                	or     ebx,esi
c0028303:	0f 95 c3             	setne  bl
c0028306:	0f b6 db             	movzx  ebx,bl
c0028309:	c1 e2 09             	shl    edx,0x9
c002830c:	09 d3                	or     ebx,edx
c002830e:	89 ca                	mov    edx,ecx
c0028310:	09 fa                	or     edx,edi
c0028312:	78 0c                	js     c0028320 <__divdf3+0x294>
c0028314:	01 d2                	add    edx,edx
c0028316:	89 d9                	mov    ecx,ebx
c0028318:	c1 e9 1f             	shr    ecx,0x1f
c002831b:	09 ca                	or     edx,ecx
c002831d:	01 db                	add    ebx,ebx
c002831f:	48                   	dec    eax
c0028320:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028325:	0f 8f 83 00 00 00    	jg     c00283ae <__divdf3+0x322>
c002832b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028331:	85 c0                	test   eax,eax
c0028333:	0f 8f 82 00 00 00    	jg     c00283bb <__divdf3+0x32f>
c0028339:	83 f8 cc             	cmp    eax,0xffffffcc
c002833c:	7c 77                	jl     c00283b5 <__divdf3+0x329>
c002833e:	be 01 00 00 00       	mov    esi,0x1
c0028343:	29 c6                	sub    esi,eax
c0028345:	81 ca 00 00 00 80    	or     edx,0x80000000
c002834b:	83 fe 1f             	cmp    esi,0x1f
c002834e:	7e 2f                	jle    c002837f <__divdf3+0x2f3>
c0028350:	83 fe 20             	cmp    esi,0x20
c0028353:	75 0a                	jne    c002835f <__divdf3+0x2d3>
c0028355:	85 db                	test   ebx,ebx
c0028357:	0f 95 c3             	setne  bl
c002835a:	0f b6 db             	movzx  ebx,bl
c002835d:	eb 1a                	jmp    c0028379 <__divdf3+0x2ed>
c002835f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028362:	89 d7                	mov    edi,edx
c0028364:	d3 e7                	shl    edi,cl
c0028366:	89 f9                	mov    ecx,edi
c0028368:	09 d9                	or     ecx,ebx
c002836a:	0f 95 c3             	setne  bl
c002836d:	0f b6 db             	movzx  ebx,bl
c0028370:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028375:	29 c1                	sub    ecx,eax
c0028377:	d3 ea                	shr    edx,cl
c0028379:	09 d3                	or     ebx,edx
c002837b:	31 c0                	xor    eax,eax
c002837d:	eb 3a                	jmp    c00283b9 <__divdf3+0x32d>
c002837f:	83 c0 1f             	add    eax,0x1f
c0028382:	89 d7                	mov    edi,edx
c0028384:	88 c1                	mov    cl,al
c0028386:	d3 e7                	shl    edi,cl
c0028388:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002838b:	89 df                	mov    edi,ebx
c002838d:	89 f1                	mov    ecx,esi
c002838f:	d3 ef                	shr    edi,cl
c0028391:	89 f9                	mov    ecx,edi
c0028393:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028396:	09 cf                	or     edi,ecx
c0028398:	88 c1                	mov    cl,al
c002839a:	d3 e3                	shl    ebx,cl
c002839c:	85 db                	test   ebx,ebx
c002839e:	0f 95 c3             	setne  bl
c00283a1:	0f b6 db             	movzx  ebx,bl
c00283a4:	09 fb                	or     ebx,edi
c00283a6:	89 f1                	mov    ecx,esi
c00283a8:	d3 ea                	shr    edx,cl
c00283aa:	31 c0                	xor    eax,eax
c00283ac:	eb 0d                	jmp    c00283bb <__divdf3+0x32f>
c00283ae:	b8 ff 07 00 00       	mov    eax,0x7ff
c00283b3:	eb 02                	jmp    c00283b7 <__divdf3+0x32b>
c00283b5:	31 c0                	xor    eax,eax
c00283b7:	31 db                	xor    ebx,ebx
c00283b9:	31 d2                	xor    edx,edx
c00283bb:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00283be:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00283c1:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00283c7:	09 c8                	or     eax,ecx
c00283c9:	c1 e0 14             	shl    eax,0x14
c00283cc:	89 d1                	mov    ecx,edx
c00283ce:	c1 e9 0b             	shr    ecx,0xb
c00283d1:	09 c8                	or     eax,ecx
c00283d3:	89 c6                	mov    esi,eax
c00283d5:	89 d9                	mov    ecx,ebx
c00283d7:	c1 e9 0b             	shr    ecx,0xb
c00283da:	c1 e2 15             	shl    edx,0x15
c00283dd:	09 ca                	or     edx,ecx
c00283df:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00283e5:	0f 95 c0             	setne  al
c00283e8:	09 c1                	or     ecx,eax
c00283ea:	83 e1 01             	and    ecx,0x1
c00283ed:	c1 eb 0a             	shr    ebx,0xa
c00283f0:	21 cb                	and    ebx,ecx
c00283f2:	01 d3                	add    ebx,edx
c00283f4:	89 d8                	mov    eax,ebx
c00283f6:	83 d6 00             	adc    esi,0x0
c00283f9:	89 f2                	mov    edx,esi
c00283fb:	89 c7                	mov    edi,eax
c00283fd:	89 d1                	mov    ecx,edx
c00283ff:	89 f8                	mov    eax,edi
c0028401:	89 ca                	mov    edx,ecx
c0028403:	83 c4 2c             	add    esp,0x2c
c0028406:	5b                   	pop    ebx
c0028407:	5e                   	pop    esi
c0028408:	5f                   	pop    edi
c0028409:	5d                   	pop    ebp
c002840a:	c3                   	ret    

c002840b <__floatsidf>:
c002840b:	55                   	push   ebp
c002840c:	89 e5                	mov    ebp,esp
c002840e:	56                   	push   esi
c002840f:	53                   	push   ebx
c0028410:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028413:	85 db                	test   ebx,ebx
c0028415:	7e 15                	jle    c002842c <__floatsidf+0x21>
c0028417:	0f bd cb             	bsr    ecx,ebx
c002841a:	83 f1 1f             	xor    ecx,0x1f
c002841d:	d3 e3                	shl    ebx,cl
c002841f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028425:	b8 1e 04 00 00       	mov    eax,0x41e
c002842a:	eb 21                	jmp    c002844d <__floatsidf+0x42>
c002842c:	b8 00 00 00 00       	mov    eax,0x0
c0028431:	ba 00 00 00 00       	mov    edx,0x0
c0028436:	74 2a                	je     c0028462 <__floatsidf+0x57>
c0028438:	f7 db                	neg    ebx
c002843a:	0f bd cb             	bsr    ecx,ebx
c002843d:	83 f1 1f             	xor    ecx,0x1f
c0028440:	d3 e3                	shl    ebx,cl
c0028442:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028448:	b8 1e 0c 00 00       	mov    eax,0xc1e
c002844d:	29 c8                	sub    eax,ecx
c002844f:	c1 e0 14             	shl    eax,0x14
c0028452:	89 c1                	mov    ecx,eax
c0028454:	89 de                	mov    esi,ebx
c0028456:	c1 ee 0b             	shr    esi,0xb
c0028459:	09 f1                	or     ecx,esi
c002845b:	89 ca                	mov    edx,ecx
c002845d:	c1 e3 15             	shl    ebx,0x15
c0028460:	89 d8                	mov    eax,ebx
c0028462:	5b                   	pop    ebx
c0028463:	5e                   	pop    esi
c0028464:	5d                   	pop    ebp
c0028465:	c3                   	ret    

c0028466 <__floatunsidf>:
c0028466:	55                   	push   ebp
c0028467:	89 e5                	mov    ebp,esp
c0028469:	56                   	push   esi
c002846a:	53                   	push   ebx
c002846b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002846e:	85 db                	test   ebx,ebx
c0028470:	74 2a                	je     c002849c <__floatunsidf+0x36>
c0028472:	0f bd cb             	bsr    ecx,ebx
c0028475:	83 f1 1f             	xor    ecx,0x1f
c0028478:	d3 e3                	shl    ebx,cl
c002847a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028480:	b8 1e 04 00 00       	mov    eax,0x41e
c0028485:	29 c8                	sub    eax,ecx
c0028487:	c1 e0 14             	shl    eax,0x14
c002848a:	89 c1                	mov    ecx,eax
c002848c:	89 de                	mov    esi,ebx
c002848e:	c1 ee 0b             	shr    esi,0xb
c0028491:	09 f1                	or     ecx,esi
c0028493:	89 ca                	mov    edx,ecx
c0028495:	c1 e3 15             	shl    ebx,0x15
c0028498:	89 d8                	mov    eax,ebx
c002849a:	eb 04                	jmp    c00284a0 <__floatunsidf+0x3a>
c002849c:	31 c0                	xor    eax,eax
c002849e:	31 d2                	xor    edx,edx
c00284a0:	5b                   	pop    ebx
c00284a1:	5e                   	pop    esi
c00284a2:	5d                   	pop    ebp
c00284a3:	c3                   	ret    

c00284a4 <__fixdfsi>:
c00284a4:	55                   	push   ebp
c00284a5:	89 e5                	mov    ebp,esp
c00284a7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00284aa:	89 d1                	mov    ecx,edx
c00284ac:	c1 e1 0b             	shl    ecx,0xb
c00284af:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00284b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00284b8:	c1 e8 15             	shr    eax,0x15
c00284bb:	09 c1                	or     ecx,eax
c00284bd:	c1 fa 14             	sar    edx,0x14
c00284c0:	78 1f                	js     c00284e1 <__fixdfsi+0x3d>
c00284c2:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00284c8:	31 c0                	xor    eax,eax
c00284ca:	83 fa 1e             	cmp    edx,0x1e
c00284cd:	77 40                	ja     c002850f <__fixdfsi+0x6b>
c00284cf:	89 c8                	mov    eax,ecx
c00284d1:	0d 00 00 00 80       	or     eax,0x80000000
c00284d6:	b9 1f 00 00 00       	mov    ecx,0x1f
c00284db:	29 d1                	sub    ecx,edx
c00284dd:	d3 e8                	shr    eax,cl
c00284df:	eb 2e                	jmp    c002850f <__fixdfsi+0x6b>
c00284e1:	31 c0                	xor    eax,eax
c00284e3:	81 c2 01 04 00 00    	add    edx,0x401
c00284e9:	78 24                	js     c002850f <__fixdfsi+0x6b>
c00284eb:	83 fa 1e             	cmp    edx,0x1e
c00284ee:	7e 09                	jle    c00284f9 <__fixdfsi+0x55>
c00284f0:	83 fa 1f             	cmp    edx,0x1f
c00284f3:	75 18                	jne    c002850d <__fixdfsi+0x69>
c00284f5:	85 c9                	test   ecx,ecx
c00284f7:	75 14                	jne    c002850d <__fixdfsi+0x69>
c00284f9:	89 c8                	mov    eax,ecx
c00284fb:	0d 00 00 00 80       	or     eax,0x80000000
c0028500:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028505:	29 d1                	sub    ecx,edx
c0028507:	d3 e8                	shr    eax,cl
c0028509:	f7 d8                	neg    eax
c002850b:	eb 02                	jmp    c002850f <__fixdfsi+0x6b>
c002850d:	31 c0                	xor    eax,eax
c002850f:	5d                   	pop    ebp
c0028510:	c3                   	ret    

c0028511 <__fixunsdfsi>:
c0028511:	55                   	push   ebp
c0028512:	89 e5                	mov    ebp,esp
c0028514:	53                   	push   ebx
c0028515:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028518:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002851b:	89 d3                	mov    ebx,edx
c002851d:	c1 fb 14             	sar    ebx,0x14
c0028520:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028526:	31 c0                	xor    eax,eax
c0028528:	83 fb 1f             	cmp    ebx,0x1f
c002852b:	77 1d                	ja     c002854a <__fixunsdfsi+0x39>
c002852d:	89 d0                	mov    eax,edx
c002852f:	c1 e0 0b             	shl    eax,0xb
c0028532:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028537:	c1 e9 15             	shr    ecx,0x15
c002853a:	09 c8                	or     eax,ecx
c002853c:	0d 00 00 00 80       	or     eax,0x80000000
c0028541:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028546:	29 d9                	sub    ecx,ebx
c0028548:	d3 e8                	shr    eax,cl
c002854a:	5b                   	pop    ebx
c002854b:	5d                   	pop    ebp
c002854c:	c3                   	ret    

c002854d <__cmpdf2>:
c002854d:	55                   	push   ebp
c002854e:	89 e5                	mov    ebp,esp
c0028550:	57                   	push   edi
c0028551:	56                   	push   esi
c0028552:	53                   	push   ebx
c0028553:	83 ec 0c             	sub    esp,0xc
c0028556:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028559:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002855c:	89 ca                	mov    edx,ecx
c002855e:	c1 ea 14             	shr    edx,0x14
c0028561:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028567:	89 cb                	mov    ebx,ecx
c0028569:	c1 fb 1f             	sar    ebx,0x1f
c002856c:	31 da                	xor    edx,ebx
c002856e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028571:	89 df                	mov    edi,ebx
c0028573:	c1 e7 0b             	shl    edi,0xb
c0028576:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028579:	c1 e1 0b             	shl    ecx,0xb
c002857c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028582:	c1 eb 15             	shr    ebx,0x15
c0028585:	09 d9                	or     ecx,ebx
c0028587:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c002858a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002858d:	89 ce                	mov    esi,ecx
c002858f:	c1 ee 14             	shr    esi,0x14
c0028592:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028598:	89 cb                	mov    ebx,ecx
c002859a:	c1 fb 1f             	sar    ebx,0x1f
c002859d:	31 de                	xor    esi,ebx
c002859f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00285a2:	89 df                	mov    edi,ebx
c00285a4:	c1 e7 0b             	shl    edi,0xb
c00285a7:	c1 e1 0b             	shl    ecx,0xb
c00285aa:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00285b0:	c1 eb 15             	shr    ebx,0x15
c00285b3:	09 d9                	or     ecx,ebx
c00285b5:	89 d3                	mov    ebx,edx
c00285b7:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00285bd:	43                   	inc    ebx
c00285be:	83 fb 01             	cmp    ebx,0x1
c00285c1:	77 08                	ja     c00285cb <__cmpdf2+0x7e>
c00285c3:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00285c6:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00285c9:	75 68                	jne    c0028633 <__cmpdf2+0xe6>
c00285cb:	89 f3                	mov    ebx,esi
c00285cd:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00285d3:	43                   	inc    ebx
c00285d4:	83 fb 01             	cmp    ebx,0x1
c00285d7:	77 06                	ja     c00285df <__cmpdf2+0x92>
c00285d9:	89 fb                	mov    ebx,edi
c00285db:	09 cb                	or     ebx,ecx
c00285dd:	75 54                	jne    c0028633 <__cmpdf2+0xe6>
c00285df:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00285e2:	09 f8                	or     eax,edi
c00285e4:	09 c8                	or     eax,ecx
c00285e6:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00285e9:	75 12                	jne    c00285fd <__cmpdf2+0xb0>
c00285eb:	8d 42 01             	lea    eax,[edx+0x1]
c00285ee:	83 f8 01             	cmp    eax,0x1
c00285f1:	77 0a                	ja     c00285fd <__cmpdf2+0xb0>
c00285f3:	8d 5e 01             	lea    ebx,[esi+0x1]
c00285f6:	31 c0                	xor    eax,eax
c00285f8:	83 fb 01             	cmp    ebx,0x1
c00285fb:	76 36                	jbe    c0028633 <__cmpdf2+0xe6>
c00285fd:	b8 01 00 00 00       	mov    eax,0x1
c0028602:	39 f2                	cmp    edx,esi
c0028604:	7f 2d                	jg     c0028633 <__cmpdf2+0xe6>
c0028606:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002860b:	7c 26                	jl     c0028633 <__cmpdf2+0xe6>
c002860d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028610:	77 07                	ja     c0028619 <__cmpdf2+0xcc>
c0028612:	72 16                	jb     c002862a <__cmpdf2+0xdd>
c0028614:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028617:	76 0a                	jbe    c0028623 <__cmpdf2+0xd6>
c0028619:	89 d0                	mov    eax,edx
c002861b:	c1 f8 1f             	sar    eax,0x1f
c002861e:	83 c8 01             	or     eax,0x1
c0028621:	eb 10                	jmp    c0028633 <__cmpdf2+0xe6>
c0028623:	b8 00 00 00 00       	mov    eax,0x0
c0028628:	73 09                	jae    c0028633 <__cmpdf2+0xe6>
c002862a:	89 d0                	mov    eax,edx
c002862c:	c1 f8 1f             	sar    eax,0x1f
c002862f:	83 e0 02             	and    eax,0x2
c0028632:	48                   	dec    eax
c0028633:	83 c4 0c             	add    esp,0xc
c0028636:	5b                   	pop    ebx
c0028637:	5e                   	pop    esi
c0028638:	5f                   	pop    edi
c0028639:	5d                   	pop    ebp
c002863a:	c3                   	ret    

c002863b <__eqdf2>:
c002863b:	55                   	push   ebp
c002863c:	89 e5                	mov    ebp,esp
c002863e:	50                   	push   eax
c002863f:	6a 01                	push   0x1
c0028641:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028644:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028647:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002864a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002864d:	e8 fb fe ff ff       	call   c002854d <__cmpdf2>
c0028652:	83 c4 18             	add    esp,0x18
c0028655:	c9                   	leave  
c0028656:	c3                   	ret    

c0028657 <__nedf2>:
c0028657:	eb e2                	jmp    c002863b <__eqdf2>

c0028659 <__gtdf2>:
c0028659:	55                   	push   ebp
c002865a:	89 e5                	mov    ebp,esp
c002865c:	50                   	push   eax
c002865d:	6a ff                	push   0xffffffff
c002865f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028662:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028665:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028668:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002866b:	e8 dd fe ff ff       	call   c002854d <__cmpdf2>
c0028670:	83 c4 18             	add    esp,0x18
c0028673:	c9                   	leave  
c0028674:	c3                   	ret    

c0028675 <__gedf2>:
c0028675:	eb e2                	jmp    c0028659 <__gtdf2>

c0028677 <__ltdf2>:
c0028677:	eb c2                	jmp    c002863b <__eqdf2>

c0028679 <__ledf2>:
c0028679:	eb c0                	jmp    c002863b <__eqdf2>

c002867b <__truncdfsf2>:
c002867b:	55                   	push   ebp
c002867c:	89 e5                	mov    ebp,esp
c002867e:	57                   	push   edi
c002867f:	56                   	push   esi
c0028680:	53                   	push   ebx
c0028681:	83 ec 0c             	sub    esp,0xc
c0028684:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028687:	89 d1                	mov    ecx,edx
c0028689:	c1 f9 14             	sar    ecx,0x14
c002868c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002868f:	89 df                	mov    edi,ebx
c0028691:	c1 e7 0b             	shl    edi,0xb
c0028694:	89 d0                	mov    eax,edx
c0028696:	c1 e0 0b             	shl    eax,0xb
c0028699:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002869e:	c1 eb 15             	shr    ebx,0x15
c00286a1:	09 d8                	or     eax,ebx
c00286a3:	89 cb                	mov    ebx,ecx
c00286a5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00286ab:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00286b1:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00286b7:	0f 86 9e 00 00 00    	jbe    c002875b <__truncdfsf2+0xe0>
c00286bd:	85 db                	test   ebx,ebx
c00286bf:	75 0a                	jne    c00286cb <__truncdfsf2+0x50>
c00286c1:	c1 fa 17             	sar    edx,0x17
c00286c4:	30 d2                	xor    dl,dl
c00286c6:	e9 84 00 00 00       	jmp    c002874f <__truncdfsf2+0xd4>
c00286cb:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00286d1:	83 fe 83             	cmp    esi,0xffffff83
c00286d4:	7d 4b                	jge    c0028721 <__truncdfsf2+0xa6>
c00286d6:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00286db:	29 f1                	sub    ecx,esi
c00286dd:	83 f9 1f             	cmp    ecx,0x1f
c00286e0:	7f 6b                	jg     c002874d <__truncdfsf2+0xd2>
c00286e2:	0d 00 00 00 80       	or     eax,0x80000000
c00286e7:	89 c3                	mov    ebx,eax
c00286e9:	d3 eb                	shr    ebx,cl
c00286eb:	be 01 00 00 00       	mov    esi,0x1
c00286f0:	d3 e6                	shl    esi,cl
c00286f2:	4e                   	dec    esi
c00286f3:	21 f0                	and    eax,esi
c00286f5:	09 f8                	or     eax,edi
c00286f7:	0f 95 c0             	setne  al
c00286fa:	0f b6 c0             	movzx  eax,al
c00286fd:	09 c3                	or     ebx,eax
c00286ff:	89 d9                	mov    ecx,ebx
c0028701:	c1 e9 08             	shr    ecx,0x8
c0028704:	f6 c3 7f             	test   bl,0x7f
c0028707:	0f 95 c0             	setne  al
c002870a:	09 c8                	or     eax,ecx
c002870c:	83 e0 01             	and    eax,0x1
c002870f:	c1 eb 07             	shr    ebx,0x7
c0028712:	21 c3                	and    ebx,eax
c0028714:	81 e2 00 00 00 80    	and    edx,0x80000000
c002871a:	09 d1                	or     ecx,edx
c002871c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002871f:	eb 76                	jmp    c0028797 <__truncdfsf2+0x11c>
c0028721:	83 c6 80             	add    esi,0xffffff80
c0028724:	7e 1d                	jle    c0028743 <__truncdfsf2+0xc8>
c0028726:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002872c:	75 0b                	jne    c0028739 <__truncdfsf2+0xbe>
c002872e:	09 f8                	or     eax,edi
c0028730:	74 09                	je     c002873b <__truncdfsf2+0xc0>
c0028732:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028737:	eb 02                	jmp    c002873b <__truncdfsf2+0xc0>
c0028739:	31 c0                	xor    eax,eax
c002873b:	c1 fa 17             	sar    edx,0x17
c002873e:	80 ca ff             	or     dl,0xff
c0028741:	eb 0e                	jmp    c0028751 <__truncdfsf2+0xd6>
c0028743:	c1 fa 1f             	sar    edx,0x1f
c0028746:	c1 e2 08             	shl    edx,0x8
c0028749:	09 ca                	or     edx,ecx
c002874b:	eb 04                	jmp    c0028751 <__truncdfsf2+0xd6>
c002874d:	31 d2                	xor    edx,edx
c002874f:	31 c0                	xor    eax,eax
c0028751:	c1 e2 17             	shl    edx,0x17
c0028754:	c1 e8 08             	shr    eax,0x8
c0028757:	09 d0                	or     eax,edx
c0028759:	eb 3c                	jmp    c0028797 <__truncdfsf2+0x11c>
c002875b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028761:	89 ca                	mov    edx,ecx
c0028763:	c1 fa 0b             	sar    edx,0xb
c0028766:	c1 e2 08             	shl    edx,0x8
c0028769:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002876c:	31 db                	xor    ebx,ebx
c002876e:	85 ff                	test   edi,edi
c0028770:	0f 95 c3             	setne  bl
c0028773:	09 d8                	or     eax,ebx
c0028775:	89 c3                	mov    ebx,eax
c0028777:	c1 eb 08             	shr    ebx,0x8
c002877a:	a8 7f                	test   al,0x7f
c002877c:	0f 95 c2             	setne  dl
c002877f:	89 d6                	mov    esi,edx
c0028781:	09 de                	or     esi,ebx
c0028783:	83 e6 01             	and    esi,0x1
c0028786:	c1 e8 07             	shr    eax,0x7
c0028789:	21 f0                	and    eax,esi
c002878b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002878e:	09 ca                	or     edx,ecx
c0028790:	c1 e2 17             	shl    edx,0x17
c0028793:	09 da                	or     edx,ebx
c0028795:	01 d0                	add    eax,edx
c0028797:	83 c4 0c             	add    esp,0xc
c002879a:	5b                   	pop    ebx
c002879b:	5e                   	pop    esi
c002879c:	5f                   	pop    edi
c002879d:	5d                   	pop    ebp
c002879e:	c3                   	ret    

c002879f <__extendsfdf2>:
c002879f:	55                   	push   ebp
c00287a0:	89 e5                	mov    ebp,esp
c00287a2:	57                   	push   edi
c00287a3:	56                   	push   esi
c00287a4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00287a7:	89 d1                	mov    ecx,edx
c00287a9:	c1 f9 17             	sar    ecx,0x17
c00287ac:	c1 e2 08             	shl    edx,0x8
c00287af:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00287b5:	89 c8                	mov    eax,ecx
c00287b7:	80 e4 f8             	and    ah,0xf8
c00287ba:	8d 71 01             	lea    esi,[ecx+0x1]
c00287bd:	81 e6 fe 00 00 00    	and    esi,0xfe
c00287c3:	75 27                	jne    c00287ec <__extendsfdf2+0x4d>
c00287c5:	81 e1 ff 00 00 00    	and    ecx,0xff
c00287cb:	75 18                	jne    c00287e5 <__extendsfdf2+0x46>
c00287cd:	85 d2                	test   edx,edx
c00287cf:	74 20                	je     c00287f1 <__extendsfdf2+0x52>
c00287d1:	41                   	inc    ecx
c00287d2:	01 d2                	add    edx,edx
c00287d4:	79 fb                	jns    c00287d1 <__extendsfdf2+0x32>
c00287d6:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00287dc:	29 c8                	sub    eax,ecx
c00287de:	05 81 03 00 00       	add    eax,0x381
c00287e3:	eb 0c                	jmp    c00287f1 <__extendsfdf2+0x52>
c00287e5:	05 00 07 00 00       	add    eax,0x700
c00287ea:	eb 05                	jmp    c00287f1 <__extendsfdf2+0x52>
c00287ec:	05 80 03 00 00       	add    eax,0x380
c00287f1:	c1 e0 14             	shl    eax,0x14
c00287f4:	89 c1                	mov    ecx,eax
c00287f6:	89 d0                	mov    eax,edx
c00287f8:	c1 e8 0b             	shr    eax,0xb
c00287fb:	09 c1                	or     ecx,eax
c00287fd:	c1 e2 15             	shl    edx,0x15
c0028800:	89 d0                	mov    eax,edx
c0028802:	89 ca                	mov    edx,ecx
c0028804:	5e                   	pop    esi
c0028805:	5f                   	pop    edi
c0028806:	5d                   	pop    ebp
c0028807:	c3                   	ret    
c0028808:	66 90                	xchg   ax,ax
c002880a:	66 90                	xchg   ax,ax
c002880c:	66 90                	xchg   ax,ax
c002880e:	66 90                	xchg   ax,ax

c0028810 <fabs>:
c0028810:	83 ec 0c             	sub    esp,0xc
c0028813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028817:	89 04 24             	mov    DWORD PTR [esp],eax
c002881a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002881e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028823:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028827:	dd 04 24             	fld    QWORD PTR [esp]
c002882a:	83 c4 0c             	add    esp,0xc
c002882d:	c3                   	ret    
c002882e:	66 90                	xchg   ax,ax

c0028830 <lrint>:
c0028830:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028834:	83 ec 04             	sub    esp,0x4
c0028837:	db 1c 24             	fistp  DWORD PTR [esp]
c002883a:	58                   	pop    eax
c002883b:	c3                   	ret    

c002883c <lrintf>:
c002883c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028840:	83 ec 04             	sub    esp,0x4
c0028843:	db 1c 24             	fistp  DWORD PTR [esp]
c0028846:	58                   	pop    eax
c0028847:	c3                   	ret    

Disassembly of section .init:

c0028848 <_init>:
c0028848:	55                   	push   ebp
c0028849:	89 e5                	mov    ebp,esp
c002884b:	e8 c8 78 fd ff       	call   c0000118 <frame_dummy>
c0028850:	e8 5b e0 ff ff       	call   c00268b0 <__do_global_ctors_aux>
c0028855:	5d                   	pop    ebp
c0028856:	c3                   	ret    

Disassembly of section .fini:

c0028857 <_fini>:
c0028857:	55                   	push   ebp
c0028858:	89 e5                	mov    ebp,esp
c002885a:	e8 49 78 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002885f:	5d                   	pop    ebp
c0028860:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028862 <Computer::~Computer()>:
c0028862:	83 ec 0c             	sub    esp,0xc
c0028865:	ba a8 a3 02 c0       	mov    edx,0xc002a3a8
c002886a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886e:	89 10                	mov    DWORD PTR [eax],edx
c0028870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028874:	83 ec 0c             	sub    esp,0xc
c0028877:	50                   	push   eax
c0028878:	e8 45 b8 fe ff       	call   c00140c2 <Device::~Device()>
c002887d:	83 c4 10             	add    esp,0x10
c0028880:	90                   	nop
c0028881:	83 c4 0c             	add    esp,0xc
c0028884:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028886 <Computer::~Computer()>:
c0028886:	83 ec 0c             	sub    esp,0xc
c0028889:	83 ec 0c             	sub    esp,0xc
c002888c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028890:	e8 cd ff ff ff       	call   c0028862 <Computer::~Computer()>
c0028895:	83 c4 10             	add    esp,0x10
c0028898:	83 ec 08             	sub    esp,0x8
c002889b:	68 ec 01 00 00       	push   0x1ec
c00288a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288a4:	e8 3a a4 fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00288a9:	83 c4 10             	add    esp,0x10
c00288ac:	83 c4 0c             	add    esp,0xc
c00288af:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00288b0 <idleCommon()>:
c00288b0:	83 ec 0c             	sub    esp,0xc
c00288b3:	e8 74 55 ff ff       	call   c001de2c <lockScheduler()>
c00288b8:	e8 e5 58 ff ff       	call   c001e1a2 <schedule()>
c00288bd:	83 c4 0c             	add    esp,0xc
c00288c0:	e9 69 55 ff ff       	jmp    c001de2e <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00288c6 <LinkedList<UnixFile>::~LinkedList()>:
c00288c6:	90                   	nop
c00288c7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00288c8 <LinkedList<UnixFile>::LinkedList()>:
c00288c8:	83 ec 0c             	sub    esp,0xc
c00288cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00288e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288e4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00288eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028904:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002890b:	83 ec 0c             	sub    esp,0xc
c002890e:	68 66 a6 02 c0       	push   0xc002a666
c0028913:	e8 ab a4 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0028918:	83 c4 10             	add    esp,0x10
c002891b:	90                   	nop
c002891c:	83 c4 0c             	add    esp,0xc
c002891f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028920 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028920:	83 ec 0c             	sub    esp,0xc
c0028923:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028928:	75 10                	jne    c002893a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002892a:	83 ec 0c             	sub    esp,0xc
c002892d:	68 80 a6 02 c0       	push   0xc002a680
c0028932:	e8 58 1c ff ff       	call   c001a58f <Krnl::panic(char const*)>
c0028937:	83 c4 10             	add    esp,0x10
c002893a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002893e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028940:	85 c0                	test   eax,eax
c0028942:	74 34                	je     c0028978 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028948:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002894b:	85 c0                	test   eax,eax
c002894d:	74 29                	je     c0028978 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002894f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028953:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028956:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002895a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002895d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028961:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028965:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002896c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002896f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028976:	eb 65                	jmp    c00289dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002897c:	8b 00                	mov    eax,DWORD PTR [eax]
c002897e:	85 c0                	test   eax,eax
c0028980:	75 4b                	jne    c00289cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028986:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028989:	85 c0                	test   eax,eax
c002898b:	75 40                	jne    c00289cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002898d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028991:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028995:	89 10                	mov    DWORD PTR [eax],edx
c0028997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002899b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002899f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00289a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289a9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00289b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289b7:	85 c0                	test   eax,eax
c00289b9:	74 22                	je     c00289dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00289bb:	83 ec 0c             	sub    esp,0xc
c00289be:	68 a2 a6 02 c0       	push   0xc002a6a2
c00289c3:	e8 c7 1b ff ff       	call   c001a58f <Krnl::panic(char const*)>
c00289c8:	83 c4 10             	add    esp,0x10
c00289cb:	eb 10                	jmp    c00289dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00289cd:	83 ec 0c             	sub    esp,0xc
c00289d0:	68 ac a6 02 c0       	push   0xc002a6ac
c00289d5:	e8 b5 1b ff ff       	call   c001a58f <Krnl::panic(char const*)>
c00289da:	83 c4 10             	add    esp,0x10
c00289dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289e4:	8d 50 01             	lea    edx,[eax+0x1]
c00289e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289eb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00289ee:	90                   	nop
c00289ef:	83 c4 0c             	add    esp,0xc
c00289f2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00289f4 <LinkedList<UnixFile>::getFirstElement()>:
c00289f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00289fa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00289fc <LinkedList<UnixFile>::removeFirst()>:
c00289fc:	83 ec 0c             	sub    esp,0xc
c00289ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a03:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a05:	85 c0                	test   eax,eax
c0028a07:	75 12                	jne    c0028a1b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028a09:	83 ec 0c             	sub    esp,0xc
c0028a0c:	68 b8 a6 02 c0       	push   0xc002a6b8
c0028a11:	e8 79 1b ff ff       	call   c001a58f <Krnl::panic(char const*)>
c0028a16:	83 c4 10             	add    esp,0x10
c0028a19:	eb 7e                	jmp    c0028a99 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028a1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a22:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a25:	85 c0                	test   eax,eax
c0028a27:	74 10                	je     c0028a39 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028a29:	83 ec 0c             	sub    esp,0xc
c0028a2c:	68 03 a7 02 c0       	push   0xc002a703
c0028a31:	e8 59 1b ff ff       	call   c001a58f <Krnl::panic(char const*)>
c0028a36:	83 c4 10             	add    esp,0x10
c0028a39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a3f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a42:	85 c0                	test   eax,eax
c0028a44:	75 33                	jne    c0028a79 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028a46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a54:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a5f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a62:	83 f8 01             	cmp    eax,0x1
c0028a65:	74 21                	je     c0028a88 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028a67:	83 ec 0c             	sub    esp,0xc
c0028a6a:	68 dc a6 02 c0       	push   0xc002a6dc
c0028a6f:	e8 1b 1b ff ff       	call   c001a58f <Krnl::panic(char const*)>
c0028a74:	83 c4 10             	add    esp,0x10
c0028a77:	eb 0f                	jmp    c0028a88 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028a79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a7f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028a82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a86:	89 10                	mov    DWORD PTR [eax],edx
c0028a88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a8c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a8f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028a92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a96:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a99:	83 c4 0c             	add    esp,0xc
c0028a9c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0028a9e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0028a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028aa2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028aa5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028aa6 <DriverlessDevice::~DriverlessDevice()>:
c0028aa6:	ba 84 ae 02 c0       	mov    edx,0xc002ae84
c0028aab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aaf:	89 10                	mov    DWORD PTR [eax],edx
c0028ab1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ab5:	50                   	push   eax
c0028ab6:	e8 07 b6 fe ff       	call   c00140c2 <Device::~Device()>
c0028abb:	83 c4 04             	add    esp,0x4
c0028abe:	90                   	nop
c0028abf:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028ac0 <DriverlessDevice::~DriverlessDevice()>:
c0028ac0:	83 ec 0c             	sub    esp,0xc
c0028ac3:	83 ec 0c             	sub    esp,0xc
c0028ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028aca:	e8 d7 ff ff ff       	call   c0028aa6 <DriverlessDevice::~DriverlessDevice()>
c0028acf:	83 c4 10             	add    esp,0x10
c0028ad2:	83 ec 08             	sub    esp,0x8
c0028ad5:	68 58 01 00 00       	push   0x158
c0028ada:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ade:	e8 00 a2 fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0028ae3:	83 c4 10             	add    esp,0x10
c0028ae6:	83 c4 0c             	add    esp,0xc
c0028ae9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028aea <LinkedList<Device>::addElement(Device*)>:
c0028aea:	83 ec 0c             	sub    esp,0xc
c0028aed:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028af2:	75 10                	jne    c0028b04 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028af4:	83 ec 0c             	sub    esp,0xc
c0028af7:	68 80 a6 02 c0       	push   0xc002a680
c0028afc:	e8 8e 1a ff ff       	call   c001a58f <Krnl::panic(char const*)>
c0028b01:	83 c4 10             	add    esp,0x10
c0028b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b08:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b0a:	85 c0                	test   eax,eax
c0028b0c:	74 3a                	je     c0028b48 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028b0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b12:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b15:	85 c0                	test   eax,eax
c0028b17:	74 2f                	je     c0028b48 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b1d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b20:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b24:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028b2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b2e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b32:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b39:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b3c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028b46:	eb 68                	jmp    c0028bb0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b4e:	85 c0                	test   eax,eax
c0028b50:	75 4e                	jne    c0028ba0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b59:	85 c0                	test   eax,eax
c0028b5b:	75 43                	jne    c0028ba0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028b5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b61:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b65:	89 10                	mov    DWORD PTR [eax],edx
c0028b67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b6b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b6f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b79:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028b83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b87:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b8a:	85 c0                	test   eax,eax
c0028b8c:	74 22                	je     c0028bb0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028b8e:	83 ec 0c             	sub    esp,0xc
c0028b91:	68 a2 a6 02 c0       	push   0xc002a6a2
c0028b96:	e8 f4 19 ff ff       	call   c001a58f <Krnl::panic(char const*)>
c0028b9b:	83 c4 10             	add    esp,0x10
c0028b9e:	eb 10                	jmp    c0028bb0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028ba0:	83 ec 0c             	sub    esp,0xc
c0028ba3:	68 ac a6 02 c0       	push   0xc002a6ac
c0028ba8:	e8 e2 19 ff ff       	call   c001a58f <Krnl::panic(char const*)>
c0028bad:	83 c4 10             	add    esp,0x10
c0028bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bb7:	8d 50 01             	lea    edx,[eax+0x1]
c0028bba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bbe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028bc1:	90                   	nop
c0028bc2:	83 c4 0c             	add    esp,0xc
c0028bc5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028bc6 <LinkedList<Device>::LinkedList()>:
c0028bc6:	83 ec 0c             	sub    esp,0xc
c0028bc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bcd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028bde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028be9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028bf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028bfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c02:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028c09:	83 ec 0c             	sub    esp,0xc
c0028c0c:	68 66 a6 02 c0       	push   0xc002a666
c0028c11:	e8 ad a1 fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0028c16:	83 c4 10             	add    esp,0x10
c0028c19:	90                   	nop
c0028c1a:	83 c4 0c             	add    esp,0xc
c0028c1d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028c1e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028c1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c22:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c24:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028c26 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028c26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c2c:	85 c0                	test   eax,eax
c0028c2e:	75 0e                	jne    c0028c3e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028c30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c37:	85 c0                	test   eax,eax
c0028c39:	75 03                	jne    c0028c3e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028c3b:	b0 01                	mov    al,0x1
c0028c3d:	c3                   	ret    
c0028c3e:	b0 00                	mov    al,0x0
c0028c40:	90                   	nop
c0028c41:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028c42 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028c42:	83 ec 0c             	sub    esp,0xc
c0028c45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c49:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c4b:	85 c0                	test   eax,eax
c0028c4d:	75 15                	jne    c0028c64 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028c4f:	83 ec 0c             	sub    esp,0xc
c0028c52:	68 b8 a6 02 c0       	push   0xc002a6b8
c0028c57:	e8 33 19 ff ff       	call   c001a58f <Krnl::panic(char const*)>
c0028c5c:	83 c4 10             	add    esp,0x10
c0028c5f:	e9 88 00 00 00       	jmp    c0028cec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028c64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c6b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028c6e:	85 c0                	test   eax,eax
c0028c70:	0f 95 c0             	setne  al
c0028c73:	84 c0                	test   al,al
c0028c75:	74 10                	je     c0028c87 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028c77:	83 ec 0c             	sub    esp,0xc
c0028c7a:	68 03 a7 02 c0       	push   0xc002a703
c0028c7f:	e8 0b 19 ff ff       	call   c001a58f <Krnl::panic(char const*)>
c0028c84:	83 c4 10             	add    esp,0x10
c0028c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c8d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028c90:	85 c0                	test   eax,eax
c0028c92:	0f 94 c0             	sete   al
c0028c95:	84 c0                	test   al,al
c0028c97:	74 33                	je     c0028ccc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c9d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ca7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cb2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028cb5:	83 f8 01             	cmp    eax,0x1
c0028cb8:	74 21                	je     c0028cdb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028cba:	83 ec 0c             	sub    esp,0xc
c0028cbd:	68 dc a6 02 c0       	push   0xc002a6dc
c0028cc2:	e8 c8 18 ff ff       	call   c001a58f <Krnl::panic(char const*)>
c0028cc7:	83 c4 10             	add    esp,0x10
c0028cca:	eb 0f                	jmp    c0028cdb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0028cd2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cd9:	89 10                	mov    DWORD PTR [eax],edx
c0028cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cdf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ce2:	8d 50 ff             	lea    edx,[eax-0x1]
c0028ce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028cec:	83 c4 0c             	add    esp,0xc
c0028cef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028cf0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028cf0:	83 ec 0c             	sub    esp,0xc
c0028cf3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028cf8:	75 10                	jne    c0028d0a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028cfa:	83 ec 0c             	sub    esp,0xc
c0028cfd:	68 80 a6 02 c0       	push   0xc002a680
c0028d02:	e8 88 18 ff ff       	call   c001a58f <Krnl::panic(char const*)>
c0028d07:	83 c4 10             	add    esp,0x10
c0028d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d10:	85 c0                	test   eax,eax
c0028d12:	74 34                	je     c0028d48 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028d14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d1b:	85 c0                	test   eax,eax
c0028d1d:	74 29                	je     c0028d48 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d26:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d2a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d31:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d35:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d3f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028d46:	eb 65                	jmp    c0028dad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d4e:	85 c0                	test   eax,eax
c0028d50:	75 4b                	jne    c0028d9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d59:	85 c0                	test   eax,eax
c0028d5b:	75 40                	jne    c0028d9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028d5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d61:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d65:	89 10                	mov    DWORD PTR [eax],edx
c0028d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d6b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d6f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d79:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028d87:	85 c0                	test   eax,eax
c0028d89:	74 22                	je     c0028dad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028d8b:	83 ec 0c             	sub    esp,0xc
c0028d8e:	68 a2 a6 02 c0       	push   0xc002a6a2
c0028d93:	e8 f7 17 ff ff       	call   c001a58f <Krnl::panic(char const*)>
c0028d98:	83 c4 10             	add    esp,0x10
c0028d9b:	eb 10                	jmp    c0028dad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028d9d:	83 ec 0c             	sub    esp,0xc
c0028da0:	68 ac a6 02 c0       	push   0xc002a6ac
c0028da5:	e8 e5 17 ff ff       	call   c001a58f <Krnl::panic(char const*)>
c0028daa:	83 c4 10             	add    esp,0x10
c0028dad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028db1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028db4:	8d 50 01             	lea    edx,[eax+0x1]
c0028db7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dbb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028dbe:	90                   	nop
c0028dbf:	83 c4 0c             	add    esp,0xc
c0028dc2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028dc4 <ACPI::~ACPI()>:
c0028dc4:	83 ec 0c             	sub    esp,0xc
c0028dc7:	ba b4 b8 02 c0       	mov    edx,0xc002b8b4
c0028dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dd0:	89 10                	mov    DWORD PTR [eax],edx
c0028dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dd6:	83 ec 0c             	sub    esp,0xc
c0028dd9:	50                   	push   eax
c0028dda:	e8 e3 b2 fe ff       	call   c00140c2 <Device::~Device()>
c0028ddf:	83 c4 10             	add    esp,0x10
c0028de2:	90                   	nop
c0028de3:	83 c4 0c             	add    esp,0xc
c0028de6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028de8 <ACPI::~ACPI()>:
c0028de8:	83 ec 0c             	sub    esp,0xc
c0028deb:	83 ec 0c             	sub    esp,0xc
c0028dee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028df2:	e8 cd ff ff ff       	call   c0028dc4 <ACPI::~ACPI()>
c0028df7:	83 c4 10             	add    esp,0x10
c0028dfa:	83 ec 08             	sub    esp,0x8
c0028dfd:	68 68 12 00 00       	push   0x1268
c0028e02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e06:	e8 d8 9e fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0028e0b:	83 c4 10             	add    esp,0x10
c0028e0e:	83 c4 0c             	add    esp,0xc
c0028e11:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028e12 <CPU::~CPU()>:
c0028e12:	83 ec 0c             	sub    esp,0xc
c0028e15:	ba a4 bc 02 c0       	mov    edx,0xc002bca4
c0028e1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e1e:	89 10                	mov    DWORD PTR [eax],edx
c0028e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e24:	83 ec 0c             	sub    esp,0xc
c0028e27:	50                   	push   eax
c0028e28:	e8 95 b2 fe ff       	call   c00140c2 <Device::~Device()>
c0028e2d:	83 c4 10             	add    esp,0x10
c0028e30:	90                   	nop
c0028e31:	83 c4 0c             	add    esp,0xc
c0028e34:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028e36 <CPU::~CPU()>:
c0028e36:	83 ec 0c             	sub    esp,0xc
c0028e39:	83 ec 0c             	sub    esp,0xc
c0028e3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e40:	e8 cd ff ff ff       	call   c0028e12 <CPU::~CPU()>
c0028e45:	83 c4 10             	add    esp,0x10
c0028e48:	83 ec 08             	sub    esp,0x8
c0028e4b:	68 98 11 00 00       	push   0x1198
c0028e50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e54:	e8 8a 9e fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0028e59:	83 c4 10             	add    esp,0x10
c0028e5c:	83 c4 0c             	add    esp,0xc
c0028e5f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028e60 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028e60:	90                   	nop
c0028e61:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028e62 <ThreadControlBlock::ThreadControlBlock()>:
c0028e62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e66:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028e6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e71:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028e78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e7c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028e83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e87:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028e8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e92:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0028e99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e9d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028ea1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ea5:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028ea9:	90                   	nop
c0028eaa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028eac <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028eac:	83 ec 0c             	sub    esp,0xc
c0028eaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028eb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ebd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ec8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ed3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ed9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028edd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028eef:	83 ec 0c             	sub    esp,0xc
c0028ef2:	68 66 a6 02 c0       	push   0xc002a666
c0028ef7:	e8 c7 9e fe ff       	call   c0012dc3 <Dbg::kprintf(char const*, ...)>
c0028efc:	83 c4 10             	add    esp,0x10
c0028eff:	90                   	nop
c0028f00:	83 c4 0c             	add    esp,0xc
c0028f03:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028f04 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028f04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028f08:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028f0b:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028f0c <Vm::_FPUState::_FPUState()>:
c0028f0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028f10:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028f17:	90                   	nop
c0028f18:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028f1a <PCI::~PCI()>:
c0028f1a:	83 ec 0c             	sub    esp,0xc
c0028f1d:	ba 88 cd 02 c0       	mov    edx,0xc002cd88
c0028f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f26:	89 10                	mov    DWORD PTR [eax],edx
c0028f28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f2c:	83 ec 0c             	sub    esp,0xc
c0028f2f:	50                   	push   eax
c0028f30:	e8 65 ab fe ff       	call   c0013a9a <Bus::~Bus()>
c0028f35:	83 c4 10             	add    esp,0x10
c0028f38:	90                   	nop
c0028f39:	83 c4 0c             	add    esp,0xc
c0028f3c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028f3e <PCI::~PCI()>:
c0028f3e:	83 ec 0c             	sub    esp,0xc
c0028f41:	83 ec 0c             	sub    esp,0xc
c0028f44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f48:	e8 cd ff ff ff       	call   c0028f1a <PCI::~PCI()>
c0028f4d:	83 c4 10             	add    esp,0x10
c0028f50:	83 ec 08             	sub    esp,0x8
c0028f53:	68 58 01 00 00       	push   0x158
c0028f58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f5c:	e8 82 9d fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0028f61:	83 c4 10             	add    esp,0x10
c0028f64:	83 c4 0c             	add    esp,0xc
c0028f67:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028f68 <IDE::~IDE()>:
c0028f68:	83 ec 0c             	sub    esp,0xc
c0028f6b:	ba ec cf 02 c0       	mov    edx,0xc002cfec
c0028f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f74:	89 10                	mov    DWORD PTR [eax],edx
c0028f76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f7a:	83 ec 0c             	sub    esp,0xc
c0028f7d:	50                   	push   eax
c0028f7e:	e8 2f b6 fe ff       	call   c00145b2 <HardDiskController::~HardDiskController()>
c0028f83:	83 c4 10             	add    esp,0x10
c0028f86:	90                   	nop
c0028f87:	83 c4 0c             	add    esp,0xc
c0028f8a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028f8c <IDE::~IDE()>:
c0028f8c:	83 ec 0c             	sub    esp,0xc
c0028f8f:	83 ec 0c             	sub    esp,0xc
c0028f92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f96:	e8 cd ff ff ff       	call   c0028f68 <IDE::~IDE()>
c0028f9b:	83 c4 10             	add    esp,0x10
c0028f9e:	83 ec 08             	sub    esp,0x8
c0028fa1:	68 70 02 00 00       	push   0x270
c0028fa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028faa:	e8 34 9d fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0028faf:	83 c4 10             	add    esp,0x10
c0028fb2:	83 c4 0c             	add    esp,0xc
c0028fb5:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028fb6 <SATABus::~SATABus()>:
c0028fb6:	83 ec 0c             	sub    esp,0xc
c0028fb9:	ba cc d0 02 c0       	mov    edx,0xc002d0cc
c0028fbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc2:	89 10                	mov    DWORD PTR [eax],edx
c0028fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc8:	83 ec 0c             	sub    esp,0xc
c0028fcb:	50                   	push   eax
c0028fcc:	e8 e1 b5 fe ff       	call   c00145b2 <HardDiskController::~HardDiskController()>
c0028fd1:	83 c4 10             	add    esp,0x10
c0028fd4:	90                   	nop
c0028fd5:	83 c4 0c             	add    esp,0xc
c0028fd8:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028fda <SATABus::~SATABus()>:
c0028fda:	83 ec 0c             	sub    esp,0xc
c0028fdd:	83 ec 0c             	sub    esp,0xc
c0028fe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fe4:	e8 cd ff ff ff       	call   c0028fb6 <SATABus::~SATABus()>
c0028fe9:	83 c4 10             	add    esp,0x10
c0028fec:	83 ec 08             	sub    esp,0x8
c0028fef:	68 64 01 00 00       	push   0x164
c0028ff4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ff8:	e8 e6 9c fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0028ffd:	83 c4 10             	add    esp,0x10
c0029000:	83 c4 0c             	add    esp,0xc
c0029003:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0029004 <ATA::~ATA()>:
c0029004:	83 ec 0c             	sub    esp,0xc
c0029007:	ba 18 d1 02 c0       	mov    edx,0xc002d118
c002900c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029010:	89 10                	mov    DWORD PTR [eax],edx
c0029012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029016:	83 ec 0c             	sub    esp,0xc
c0029019:	50                   	push   eax
c002901a:	e8 85 b6 fe ff       	call   c00146a4 <PhysicalDisk::~PhysicalDisk()>
c002901f:	83 c4 10             	add    esp,0x10
c0029022:	90                   	nop
c0029023:	83 c4 0c             	add    esp,0xc
c0029026:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029028 <ATA::~ATA()>:
c0029028:	83 ec 0c             	sub    esp,0xc
c002902b:	83 ec 0c             	sub    esp,0xc
c002902e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029032:	e8 cd ff ff ff       	call   c0029004 <ATA::~ATA()>
c0029037:	83 c4 10             	add    esp,0x10
c002903a:	83 ec 08             	sub    esp,0x8
c002903d:	68 7c 01 00 00       	push   0x17c
c0029042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029046:	e8 98 9c fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c002904b:	83 c4 10             	add    esp,0x10
c002904e:	83 c4 0c             	add    esp,0xc
c0029051:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029052 <ATAPI::~ATAPI()>:
c0029052:	83 ec 0c             	sub    esp,0xc
c0029055:	ba 50 d1 02 c0       	mov    edx,0xc002d150
c002905a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002905e:	89 10                	mov    DWORD PTR [eax],edx
c0029060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029064:	83 ec 0c             	sub    esp,0xc
c0029067:	50                   	push   eax
c0029068:	e8 37 b6 fe ff       	call   c00146a4 <PhysicalDisk::~PhysicalDisk()>
c002906d:	83 c4 10             	add    esp,0x10
c0029070:	90                   	nop
c0029071:	83 c4 0c             	add    esp,0xc
c0029074:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029076 <ATAPI::~ATAPI()>:
c0029076:	83 ec 0c             	sub    esp,0xc
c0029079:	83 ec 0c             	sub    esp,0xc
c002907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029080:	e8 cd ff ff ff       	call   c0029052 <ATAPI::~ATAPI()>
c0029085:	83 c4 10             	add    esp,0x10
c0029088:	83 ec 08             	sub    esp,0x8
c002908b:	68 80 01 00 00       	push   0x180
c0029090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029094:	e8 4a 9c fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0029099:	83 c4 10             	add    esp,0x10
c002909c:	83 c4 0c             	add    esp,0xc
c002909f:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00290a0 <SATA::~SATA()>:
c00290a0:	83 ec 0c             	sub    esp,0xc
c00290a3:	ba 04 d2 02 c0       	mov    edx,0xc002d204
c00290a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ac:	89 10                	mov    DWORD PTR [eax],edx
c00290ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b2:	83 ec 0c             	sub    esp,0xc
c00290b5:	50                   	push   eax
c00290b6:	e8 e9 b5 fe ff       	call   c00146a4 <PhysicalDisk::~PhysicalDisk()>
c00290bb:	83 c4 10             	add    esp,0x10
c00290be:	90                   	nop
c00290bf:	83 c4 0c             	add    esp,0xc
c00290c2:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00290c4 <SATA::~SATA()>:
c00290c4:	83 ec 0c             	sub    esp,0xc
c00290c7:	83 ec 0c             	sub    esp,0xc
c00290ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290ce:	e8 cd ff ff ff       	call   c00290a0 <SATA::~SATA()>
c00290d3:	83 c4 10             	add    esp,0x10
c00290d6:	83 ec 08             	sub    esp,0x8
c00290d9:	68 7c 01 00 00       	push   0x17c
c00290de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290e2:	e8 fc 9b fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00290e7:	83 c4 10             	add    esp,0x10
c00290ea:	83 c4 0c             	add    esp,0xc
c00290ed:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00290ee <SATAPI::~SATAPI()>:
c00290ee:	83 ec 0c             	sub    esp,0xc
c00290f1:	ba e0 d2 02 c0       	mov    edx,0xc002d2e0
c00290f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290fa:	89 10                	mov    DWORD PTR [eax],edx
c00290fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029100:	83 ec 0c             	sub    esp,0xc
c0029103:	50                   	push   eax
c0029104:	e8 9b b5 fe ff       	call   c00146a4 <PhysicalDisk::~PhysicalDisk()>
c0029109:	83 c4 10             	add    esp,0x10
c002910c:	90                   	nop
c002910d:	83 c4 0c             	add    esp,0xc
c0029110:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029112 <SATAPI::~SATAPI()>:
c0029112:	83 ec 0c             	sub    esp,0xc
c0029115:	83 ec 0c             	sub    esp,0xc
c0029118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002911c:	e8 cd ff ff ff       	call   c00290ee <SATAPI::~SATAPI()>
c0029121:	83 c4 10             	add    esp,0x10
c0029124:	83 ec 08             	sub    esp,0x8
c0029127:	68 80 01 00 00       	push   0x180
c002912c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029130:	e8 ae 9b fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0029135:	83 c4 10             	add    esp,0x10
c0029138:	83 c4 0c             	add    esp,0xc
c002913b:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c002913c <AVX::~AVX()>:
c002913c:	83 ec 0c             	sub    esp,0xc
c002913f:	ba 20 d3 02 c0       	mov    edx,0xc002d320
c0029144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029148:	89 10                	mov    DWORD PTR [eax],edx
c002914a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002914e:	83 ec 0c             	sub    esp,0xc
c0029151:	50                   	push   eax
c0029152:	e8 d1 b5 fe ff       	call   c0014728 <FPU::~FPU()>
c0029157:	83 c4 10             	add    esp,0x10
c002915a:	90                   	nop
c002915b:	83 c4 0c             	add    esp,0xc
c002915e:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029160 <AVX::~AVX()>:
c0029160:	83 ec 0c             	sub    esp,0xc
c0029163:	83 ec 0c             	sub    esp,0xc
c0029166:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002916a:	e8 cd ff ff ff       	call   c002913c <AVX::~AVX()>
c002916f:	83 c4 10             	add    esp,0x10
c0029172:	83 ec 08             	sub    esp,0x8
c0029175:	68 58 01 00 00       	push   0x158
c002917a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002917e:	e8 60 9b fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0029183:	83 c4 10             	add    esp,0x10
c0029186:	83 c4 0c             	add    esp,0xc
c0029189:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002918a <MMX::~MMX()>:
c002918a:	83 ec 0c             	sub    esp,0xc
c002918d:	ba 60 d3 02 c0       	mov    edx,0xc002d360
c0029192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029196:	89 10                	mov    DWORD PTR [eax],edx
c0029198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002919c:	83 ec 0c             	sub    esp,0xc
c002919f:	50                   	push   eax
c00291a0:	e8 83 b5 fe ff       	call   c0014728 <FPU::~FPU()>
c00291a5:	83 c4 10             	add    esp,0x10
c00291a8:	90                   	nop
c00291a9:	83 c4 0c             	add    esp,0xc
c00291ac:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00291ae <MMX::~MMX()>:
c00291ae:	83 ec 0c             	sub    esp,0xc
c00291b1:	83 ec 0c             	sub    esp,0xc
c00291b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291b8:	e8 cd ff ff ff       	call   c002918a <MMX::~MMX()>
c00291bd:	83 c4 10             	add    esp,0x10
c00291c0:	83 ec 08             	sub    esp,0x8
c00291c3:	68 58 01 00 00       	push   0x158
c00291c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291cc:	e8 12 9b fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00291d1:	83 c4 10             	add    esp,0x10
c00291d4:	83 c4 0c             	add    esp,0xc
c00291d7:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00291d8 <SSE::~SSE()>:
c00291d8:	83 ec 0c             	sub    esp,0xc
c00291db:	ba a0 d3 02 c0       	mov    edx,0xc002d3a0
c00291e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e4:	89 10                	mov    DWORD PTR [eax],edx
c00291e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ea:	83 ec 0c             	sub    esp,0xc
c00291ed:	50                   	push   eax
c00291ee:	e8 35 b5 fe ff       	call   c0014728 <FPU::~FPU()>
c00291f3:	83 c4 10             	add    esp,0x10
c00291f6:	90                   	nop
c00291f7:	83 c4 0c             	add    esp,0xc
c00291fa:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00291fc <SSE::~SSE()>:
c00291fc:	83 ec 0c             	sub    esp,0xc
c00291ff:	83 ec 0c             	sub    esp,0xc
c0029202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029206:	e8 cd ff ff ff       	call   c00291d8 <SSE::~SSE()>
c002920b:	83 c4 10             	add    esp,0x10
c002920e:	83 ec 08             	sub    esp,0x8
c0029211:	68 58 01 00 00       	push   0x158
c0029216:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002921a:	e8 c4 9a fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c002921f:	83 c4 10             	add    esp,0x10
c0029222:	83 c4 0c             	add    esp,0xc
c0029225:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029226 <x87::~x87()>:
c0029226:	83 ec 0c             	sub    esp,0xc
c0029229:	ba e0 d3 02 c0       	mov    edx,0xc002d3e0
c002922e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029232:	89 10                	mov    DWORD PTR [eax],edx
c0029234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029238:	83 ec 0c             	sub    esp,0xc
c002923b:	50                   	push   eax
c002923c:	e8 e7 b4 fe ff       	call   c0014728 <FPU::~FPU()>
c0029241:	83 c4 10             	add    esp,0x10
c0029244:	90                   	nop
c0029245:	83 c4 0c             	add    esp,0xc
c0029248:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002924a <x87::~x87()>:
c002924a:	83 ec 0c             	sub    esp,0xc
c002924d:	83 ec 0c             	sub    esp,0xc
c0029250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029254:	e8 cd ff ff ff       	call   c0029226 <x87::~x87()>
c0029259:	83 c4 10             	add    esp,0x10
c002925c:	83 ec 08             	sub    esp,0x8
c002925f:	68 58 01 00 00       	push   0x158
c0029264:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029268:	e8 76 9a fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c002926d:	83 c4 10             	add    esp,0x10
c0029270:	83 c4 0c             	add    esp,0xc
c0029273:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029274 <IOAPIC::~IOAPIC()>:
c0029274:	83 ec 0c             	sub    esp,0xc
c0029277:	ba 38 d5 02 c0       	mov    edx,0xc002d538
c002927c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029280:	89 10                	mov    DWORD PTR [eax],edx
c0029282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029286:	83 ec 0c             	sub    esp,0xc
c0029289:	50                   	push   eax
c002928a:	e8 33 ae fe ff       	call   c00140c2 <Device::~Device()>
c002928f:	83 c4 10             	add    esp,0x10
c0029292:	90                   	nop
c0029293:	83 c4 0c             	add    esp,0xc
c0029296:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029298 <IOAPIC::~IOAPIC()>:
c0029298:	83 ec 0c             	sub    esp,0xc
c002929b:	83 ec 0c             	sub    esp,0xc
c002929e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292a2:	e8 cd ff ff ff       	call   c0029274 <IOAPIC::~IOAPIC()>
c00292a7:	83 c4 10             	add    esp,0x10
c00292aa:	83 ec 08             	sub    esp,0x8
c00292ad:	68 68 01 00 00       	push   0x168
c00292b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292b6:	e8 28 9a fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00292bb:	83 c4 10             	add    esp,0x10
c00292be:	83 c4 0c             	add    esp,0xc
c00292c1:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00292c2 <APIC::~APIC()>:
c00292c2:	83 ec 0c             	sub    esp,0xc
c00292c5:	ba f0 d4 02 c0       	mov    edx,0xc002d4f0
c00292ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292ce:	89 10                	mov    DWORD PTR [eax],edx
c00292d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292d4:	83 ec 0c             	sub    esp,0xc
c00292d7:	50                   	push   eax
c00292d8:	e8 15 b9 fe ff       	call   c0014bf2 <InterruptController::~InterruptController()>
c00292dd:	83 c4 10             	add    esp,0x10
c00292e0:	90                   	nop
c00292e1:	83 c4 0c             	add    esp,0xc
c00292e4:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00292e6 <APIC::~APIC()>:
c00292e6:	83 ec 0c             	sub    esp,0xc
c00292e9:	83 ec 0c             	sub    esp,0xc
c00292ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292f0:	e8 cd ff ff ff       	call   c00292c2 <APIC::~APIC()>
c00292f5:	83 c4 10             	add    esp,0x10
c00292f8:	83 ec 08             	sub    esp,0x8
c00292fb:	68 58 21 00 00       	push   0x2158
c0029300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029304:	e8 da 99 fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0029309:	83 c4 10             	add    esp,0x10
c002930c:	83 c4 0c             	add    esp,0xc
c002930f:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029310 <PIC::~PIC()>:
c0029310:	83 ec 0c             	sub    esp,0xc
c0029313:	ba 88 d5 02 c0       	mov    edx,0xc002d588
c0029318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002931c:	89 10                	mov    DWORD PTR [eax],edx
c002931e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029322:	83 ec 0c             	sub    esp,0xc
c0029325:	50                   	push   eax
c0029326:	e8 c7 b8 fe ff       	call   c0014bf2 <InterruptController::~InterruptController()>
c002932b:	83 c4 10             	add    esp,0x10
c002932e:	90                   	nop
c002932f:	83 c4 0c             	add    esp,0xc
c0029332:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029334 <PIC::~PIC()>:
c0029334:	83 ec 0c             	sub    esp,0xc
c0029337:	83 ec 0c             	sub    esp,0xc
c002933a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002933e:	e8 cd ff ff ff       	call   c0029310 <PIC::~PIC()>
c0029343:	83 c4 10             	add    esp,0x10
c0029346:	83 ec 08             	sub    esp,0x8
c0029349:	68 58 21 00 00       	push   0x2158
c002934e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029352:	e8 8c 99 fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c0029357:	83 c4 10             	add    esp,0x10
c002935a:	83 c4 0c             	add    esp,0xc
c002935d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002935e <APICTimer::~APICTimer()>:
c002935e:	83 ec 0c             	sub    esp,0xc
c0029361:	ba dc d5 02 c0       	mov    edx,0xc002d5dc
c0029366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002936a:	89 10                	mov    DWORD PTR [eax],edx
c002936c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029370:	83 ec 0c             	sub    esp,0xc
c0029373:	50                   	push   eax
c0029374:	e8 cd d8 fe ff       	call   c0016c46 <Timer::~Timer()>
c0029379:	83 c4 10             	add    esp,0x10
c002937c:	90                   	nop
c002937d:	83 c4 0c             	add    esp,0xc
c0029380:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029382 <APICTimer::~APICTimer()>:
c0029382:	83 ec 0c             	sub    esp,0xc
c0029385:	83 ec 0c             	sub    esp,0xc
c0029388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002938c:	e8 cd ff ff ff       	call   c002935e <APICTimer::~APICTimer()>
c0029391:	83 c4 10             	add    esp,0x10
c0029394:	83 ec 08             	sub    esp,0x8
c0029397:	68 60 01 00 00       	push   0x160
c002939c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293a0:	e8 3e 99 fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00293a5:	83 c4 10             	add    esp,0x10
c00293a8:	83 c4 0c             	add    esp,0xc
c00293ab:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00293ac <PIT::~PIT()>:
c00293ac:	83 ec 0c             	sub    esp,0xc
c00293af:	ba 2c d6 02 c0       	mov    edx,0xc002d62c
c00293b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293b8:	89 10                	mov    DWORD PTR [eax],edx
c00293ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293be:	83 ec 0c             	sub    esp,0xc
c00293c1:	50                   	push   eax
c00293c2:	e8 7f d8 fe ff       	call   c0016c46 <Timer::~Timer()>
c00293c7:	83 c4 10             	add    esp,0x10
c00293ca:	90                   	nop
c00293cb:	83 c4 0c             	add    esp,0xc
c00293ce:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00293d0 <PIT::~PIT()>:
c00293d0:	83 ec 0c             	sub    esp,0xc
c00293d3:	83 ec 0c             	sub    esp,0xc
c00293d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293da:	e8 cd ff ff ff       	call   c00293ac <PIT::~PIT()>
c00293df:	83 c4 10             	add    esp,0x10
c00293e2:	83 ec 08             	sub    esp,0x8
c00293e5:	68 5c 01 00 00       	push   0x15c
c00293ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293ee:	e8 f0 98 fe ff       	call   c0012ce3 <operator delete(void*, unsigned long)>
c00293f3:	83 c4 10             	add    esp,0x10
c00293f6:	83 c4 0c             	add    esp,0xc
c00293f9:	c3                   	ret    
