
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0f fa 00 00       	call   c000fa2f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 13 8a 02 00       	call   c0028a38 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 8c 96 02 c0       	mov    ebx,0xc002968c
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 98 96 02 c0    	cmp    ebx,0xc0029698
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 db 02 c0       	mov    eax,0xc002db98
c0000049:	3d 98 db 02 c0       	cmp    eax,0xc002db98
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 db 02 c0       	push   0xc002db98
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 db 02 c0       	mov    eax,0xc002db98
c0000075:	2d 98 db 02 c0       	sub    eax,0xc002db98
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 db 02 c0       	push   0xc002db98
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c8 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e1c8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb a0 96 02 c0       	mov    ebx,0xc00296a0
c00000bb:	81 eb 9c 96 02 c0    	sub    ebx,0xc002969c
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 9c 96 02 c0       	mov    esi,0xc002969c
c00000ca:	a1 cc e1 02 c0       	mov    eax,ds:0xc002e1cc
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 cc e1 02 c0       	mov    ds:0xc002e1cc,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 cc e1 02 c0       	mov    eax,ds:0xc002e1cc
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 db 02 c0       	push   0xc002db98
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c8 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e1c8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 d0 e1 02 c0       	push   0xc002e1d0
c000012c:	68 98 db 02 c0       	push   0xc002db98
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 19 d4 01 00       	call   c001d7bc <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 7c 23 01 00       	call   c0012737 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 f7 d3 01 00       	call   c001d7bc <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 9f d8 01 00       	call   c001dc83 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 c4 de 01 00       	call   c001e2b1 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 10 e6 02 c0 	lgdtd  ds:0xc002e610
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 e5 40 01 00       	call   c00146c7 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 15 e1 00 00       	jmp    c000e760 <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 e8 e1 02 c0       	mov    ds:0xc002e1e8,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 e8 e1 02 c0    	mov    DWORD PTR ds:0xc002e1e8,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d e8 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e1e8
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 c0 96 02 c0 02 	test   BYTE PTR [edx-0x3ffd6940],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 c0 96 02 c0 01 	test   BYTE PTR [edx-0x3ffd6940],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 c0 96 02 c0 08 	test   BYTE PTR [edx-0x3ffd6940],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 c0 96 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6940],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 c0 96 02 c0 01 	test   BYTE PTR [edx-0x3ffd6940],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 00 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e200
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 00 e2 02 c0    	mov    DWORD PTR ds:0xc002e200,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 04 e2 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1dfc]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 04 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1dfc],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 00 e2 02 c0    	mov    DWORD PTR ds:0xc002e200,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 2c e2 02 c0    	cmp    DWORD PTR ds:0xc002e22c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 3c e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e23c
c0000e38:	c7 42 0c 34 e2 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e234
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 3c e2 02 c0    	mov    DWORD PTR ds:0xc002e23c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 2c e2 02 c0    	mov    DWORD PTR ds:0xc002e22c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 00 e2 02 c0 02 	test   BYTE PTR ds:0xc002e200,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 ab e7 00 00       	call   c000f6c4 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 ed e6 00 00       	call   c000f6c4 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 d7 e6 00 00       	call   c000f6c4 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 b3 e6 00 00       	call   c000f6c4 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 00 e2 02 c0    	mov    edi,DWORD PTR ds:0xc002e200
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 04 e2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1dfc]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 04 e2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1dfc],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 34 e2 02 c0 	lea    edx,[eax*8-0x3ffd1dcc]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 40 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e240
c00011ba:	81 fb 34 e2 02 c0    	cmp    ebx,0xc002e234
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 34 e2 02 c0       	cmp    eax,0xc002e234
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 30 e2 02 c0    	cmp    DWORD PTR ds:0xc002e230,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 3c e2 02 c0       	mov    ds:0xc002e23c,eax
c00011f6:	a3 40 e2 02 c0       	mov    ds:0xc002e240,eax
c00011fb:	a3 30 e2 02 c0       	mov    ds:0xc002e230,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 34 e2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e234
c0001209:	c7 40 0c 34 e2 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e234
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 40 e2 02 c0       	mov    ds:0xc002e240,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 34 e2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e234
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 f8 e1 02 c0 	lea    ebp,[edx*4-0x3ffd1e08]
c000125a:	8b 14 95 00 e2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e00]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 00 e2 02 c0 	lea    ecx,[edx*4-0x3ffd1e00]
c0001275:	8b 14 95 00 e2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e00]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 34 e5 02 c0 	or     DWORD PTR [edi*4-0x3ffd1acc],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 34 e2 02 c0 	lea    eax,[eax*8-0x3ffd1dcc]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 3c e2 02 c0    	mov    DWORD PTR ds:0xc002e23c,ecx
c000132f:	89 0d 40 e2 02 c0    	mov    DWORD PTR ds:0xc002e240,ecx
c0001335:	c7 41 08 34 e2 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e234
c000133c:	c7 41 0c 34 e2 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e234
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 2c e2 02 c0 	lea    edx,[ecx*8-0x3ffd1dd4]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 34 e5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1acc]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 34 e5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1acc]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 2c e2 02 c0 	lea    edx,[eax*4-0x3ffd1dd4]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 34 e5 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1acc],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 3c e2 02 c0    	mov    DWORD PTR ds:0xc002e23c,edi
c0001402:	89 3d 40 e2 02 c0    	mov    DWORD PTR ds:0xc002e240,edi
c0001408:	c7 47 08 34 e2 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e234
c000140f:	c7 47 0c 34 e2 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e234
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 30 e2 02 c0    	mov    DWORD PTR ds:0xc002e230,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 2c e2 02 c0       	mov    eax,ds:0xc002e22c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 2c e2 02 c0    	mov    DWORD PTR ds:0xc002e22c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 00 e2 02 c0       	mov    edx,0xc002e200
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 00 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e200,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 54 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e554
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 54 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e554,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 54 e5 02 c0    	mov    DWORD PTR ds:0xc002e554,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 2c e2 02 c0    	cmp    DWORD PTR ds:0xc002e22c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 2c e2 02 c0    	mov    DWORD PTR ds:0xc002e22c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 00 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e200,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 5c e5 02 c0    	push   DWORD PTR ds:0xc002e55c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 00 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e200,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 5c e5 02 c0       	mov    eax,ds:0xc002e55c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 2c e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e22c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 2c e2 02 c0       	mov    eax,ds:0xc002e22c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 04 e2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1dfc]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 34 e2 02 c0       	mov    eax,0xc002e234
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 2c e5 02 c0       	cmp    eax,0xc002e52c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 50 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e550
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 64 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e564
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 74 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e574
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 c4 97 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd683c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 00 e2 02 c0       	mov    eax,ds:0xc002e200
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 00 e2 02 c0       	mov    ds:0xc002e200,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 44 e5 02 c0    	mov    DWORD PTR ds:0xc002e544,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 48 e5 02 c0    	mov    DWORD PTR ds:0xc002e548,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 4c e5 02 c0    	mov    DWORD PTR ds:0xc002e54c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 54 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e554,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 a0 fc 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0360]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 b6 f1 01 00       	jmp    c0020da8 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 a0 fc 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0360]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 e7 f1 01 00       	jmp    c0020def <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 a0 fc 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0360]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 0f f2 01 00       	jmp    c0020e36 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 8a 4e 02 00       	call   c0026d94 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 e0 98 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6720]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 e0 98 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6720]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba e0 97 02 c0       	mov    edx,0xc00297e0
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 00 99 02 c0       	mov    edx,0xc0029900
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 94 ca 02 c0       	mov    edx,0xc002ca94
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 0c 99 02 c0       	mov    edx,0xc002990c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba f0 98 02 c0       	mov    edx,0xc00298f0
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 a0 e5 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1a60]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 80 e5 02 c0    	mov    ax,ds:0xc002e580
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 80 e5 02 c0    	mov    ds:0xc002e580,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 87 3c 02 00       	call   c0026d94 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 6b 50 00 00       	call   c0008690 <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 fd 4f 00 00       	call   c00086a6 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 12 99 02 c0       	mov    eax,0xc0029912
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 7e 48 00 00       	call   c00086bd <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 60 98 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd67a0]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 1b 99 02 c0       	mov    eax,0xc002991b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 54 48 00 00       	call   c00087b9 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 e0 98 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6720]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 30 47 00 00       	call   c00087b9 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 17 47 00 00       	call   c00087b9 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 44 46 00 00       	call   c00087b9 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 31 46 00 00       	call   c00087b9 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 52 26 02 00       	call   c0026d94 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba f0 98 02 c0       	mov    edx,0xc00298f0
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba e0 97 02 c0       	mov    edx,0xc00297e0
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba f0 97 02 c0       	mov    edx,0xc00297f0
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 7c 3a 00 00       	call   c000874d <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 a0 e5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1a60]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 a0 e5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1a60],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 d9 36 00 00       	call   c0008690 <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 2a 33 00 00       	call   c00086a6 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 26 2d 00 00       	call   c0008690 <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 65 2c 00 00       	call   c00086a6 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 19 10 02 00       	call   c0026d94 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 ff 0f 02 00       	call   c0026d94 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 c1 26 00 00       	call   c0008690 <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 38 26 00 00       	call   c00086a6 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 a4 25 00 00       	call   c0008690 <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 66 25 00 00       	call   c00086a6 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 11 25 00 00       	call   c0008690 <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 d5 24 00 00       	call   c00086a6 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 b6 21 00 00       	call   c0008690 <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 93 20 00 00       	call   c00086a6 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 2e 20 00 00       	call   c0008690 <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 c5 1f 00 00       	call   c00086a6 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 f9 1d 00 00       	call   c0008690 <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 76 1b 00 00       	call   c00086a6 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 11 1b 00 00       	call   c0008690 <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 94 1a 00 00       	call   c00086a6 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 38 1a 00 00       	call   c0008690 <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 b5 19 00 00       	call   c00086a6 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 39 19 00 00       	call   c000874d <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 37 98 02 c0       	mov    eax,0xc0029837
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 cd 17 00 00       	call   c00087b9 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 c4 16 00 00       	call   c00086bd <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 30 98 02 c0       	mov    eax,0xc0029830
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_expand>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 3c             	sub    esp,0x3c
c0007160:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007164:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007168:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000716c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007170:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007174:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007178:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000717c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007180:	89 d8                	mov    eax,ebx
c0007182:	e8 a3 b1 ff ff       	call   c000232a <validate>
c0007187:	89 c5                	mov    ebp,eax
c0007189:	85 c0                	test   eax,eax
c000718b:	0f 85 f4 01 00 00    	jne    c0007385 <f_expand+0x22c>
c0007191:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007195:	85 ed                	test   ebp,ebp
c0007197:	0f 85 e8 01 00 00    	jne    c0007385 <f_expand+0x22c>
c000719d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00071a1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00071a5:	75 0a                	jne    c00071b1 <f_expand+0x58>
c00071a7:	bd 07 00 00 00       	mov    ebp,0x7
c00071ac:	e9 d4 01 00 00       	jmp    c0007385 <f_expand+0x22c>
c00071b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00071b4:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00071b7:	75 ee                	jne    c00071a7 <f_expand+0x4e>
c00071b9:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00071bd:	74 e8                	je     c00071a7 <f_expand+0x4e>
c00071bf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00071c3:	8a 0e                	mov    cl,BYTE PTR [esi]
c00071c5:	80 f9 04             	cmp    cl,0x4
c00071c8:	74 07                	je     c00071d1 <f_expand+0x78>
c00071ca:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00071cf:	77 d6                	ja     c00071a7 <f_expand+0x4e>
c00071d1:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00071d5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00071d9:	c1 e0 09             	shl    eax,0x9
c00071dc:	8d 50 ff             	lea    edx,[eax-0x1]
c00071df:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c00071e3:	0f 95 c2             	setne  dl
c00071e6:	0f b6 d2             	movzx  edx,dl
c00071e9:	89 d7                	mov    edi,edx
c00071eb:	31 d2                	xor    edx,edx
c00071ed:	52                   	push   edx
c00071ee:	50                   	push   eax
c00071ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00071f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00071f7:	e8 98 fb 01 00       	call   c0026d94 <__udivdi3>
c00071fc:	83 c4 10             	add    esp,0x10
c00071ff:	01 f8                	add    eax,edi
c0007201:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007205:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0007208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000720c:	83 ff 01             	cmp    edi,0x1
c000720f:	76 05                	jbe    c0007216 <f_expand+0xbd>
c0007211:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007214:	77 05                	ja     c000721b <f_expand+0xc2>
c0007216:	bf 02 00 00 00       	mov    edi,0x2
c000721b:	80 f9 04             	cmp    cl,0x4
c000721e:	75 19                	jne    c0007239 <f_expand+0xe0>
c0007220:	89 f0                	mov    eax,esi
c0007222:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007226:	89 fa                	mov    edx,edi
c0007228:	e8 f3 b9 ff ff       	call   c0002c20 <find_bitmap>
c000722d:	89 c6                	mov    esi,eax
c000722f:	85 c0                	test   eax,eax
c0007231:	0f 84 70 ff ff ff    	je     c00071a7 <f_expand+0x4e>
c0007237:	eb 7f                	jmp    c00072b8 <f_expand+0x15f>
c0007239:	89 fe                	mov    esi,edi
c000723b:	89 f9                	mov    ecx,edi
c000723d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007245:	89 ca                	mov    edx,ecx
c0007247:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000724b:	89 d8                	mov    eax,ebx
c000724d:	e8 3b bd ff ff       	call   c0002f8d <get_fat>
c0007252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007256:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000725a:	41                   	inc    ecx
c000725b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000725f:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007262:	77 05                	ja     c0007269 <f_expand+0x110>
c0007264:	b9 02 00 00 00       	mov    ecx,0x2
c0007269:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c000726e:	74 3e                	je     c00072ae <f_expand+0x155>
c0007270:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0007275:	75 0a                	jne    c0007281 <f_expand+0x128>
c0007277:	bd 01 00 00 00       	mov    ebp,0x1
c000727c:	e9 04 01 00 00       	jmp    c0007385 <f_expand+0x22c>
c0007281:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007286:	75 13                	jne    c000729b <f_expand+0x142>
c0007288:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000728c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007290:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c0007294:	75 0f                	jne    c00072a5 <f_expand+0x14c>
c0007296:	e9 ce 00 00 00       	jmp    c0007369 <f_expand+0x210>
c000729b:	89 ce                	mov    esi,ecx
c000729d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072a5:	39 f9                	cmp    ecx,edi
c00072a7:	75 9c                	jne    c0007245 <f_expand+0xec>
c00072a9:	e9 f9 fe ff ff       	jmp    c00071a7 <f_expand+0x4e>
c00072ae:	bd 02 00 00 00       	mov    ebp,0x2
c00072b3:	e9 cd 00 00 00       	jmp    c0007385 <f_expand+0x22c>
c00072b8:	83 f8 ff             	cmp    eax,0xffffffff
c00072bb:	74 ba                	je     c0007277 <f_expand+0x11e>
c00072bd:	8d 7e ff             	lea    edi,[esi-0x1]
c00072c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00072c4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00072c8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072cd:	74 51                	je     c0007320 <f_expand+0x1c7>
c00072cf:	83 ec 0c             	sub    esp,0xc
c00072d2:	89 f2                	mov    edx,esi
c00072d4:	6a 01                	push   0x1
c00072d6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00072da:	e8 f4 b9 ff ff       	call   c0002cd3 <change_bitmap>
c00072df:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00072e3:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c00072e7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00072eb:	83 c4 10             	add    esp,0x10
c00072ee:	85 c0                	test   eax,eax
c00072f0:	74 2e                	je     c0007320 <f_expand+0x1c7>
c00072f2:	eb 71                	jmp    c0007365 <f_expand+0x20c>
c00072f4:	83 c9 ff             	or     ecx,0xffffffff
c00072f7:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00072fc:	74 03                	je     c0007301 <f_expand+0x1a8>
c00072fe:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007301:	89 fa                	mov    edx,edi
c0007303:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007307:	e8 7c ba ff ff       	call   c0002d88 <put_fat>
c000730c:	85 c0                	test   eax,eax
c000730e:	75 55                	jne    c0007365 <f_expand+0x20c>
c0007310:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007314:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0007318:	47                   	inc    edi
c0007319:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000731e:	75 d4                	jne    c00072f4 <f_expand+0x19b>
c0007320:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007324:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007328:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000732d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007330:	74 53                	je     c0007385 <f_expand+0x22c>
c0007332:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007335:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0007339:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c000733d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007341:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007345:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0007348:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000734b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000734e:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007351:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007354:	39 ca                	cmp    edx,ecx
c0007356:	77 2d                	ja     c0007385 <f_expand+0x22c>
c0007358:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c000735c:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007360:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007363:	eb 20                	jmp    c0007385 <f_expand+0x22c>
c0007365:	89 c5                	mov    ebp,eax
c0007367:	eb 1c                	jmp    c0007385 <f_expand+0x22c>
c0007369:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000736e:	74 0c                	je     c000737c <f_expand+0x223>
c0007370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007374:	89 f7                	mov    edi,esi
c0007376:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000737a:	eb 9d                	jmp    c0007319 <f_expand+0x1c0>
c000737c:	8d 46 ff             	lea    eax,[esi-0x1]
c000737f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007383:	eb 9b                	jmp    c0007320 <f_expand+0x1c7>
c0007385:	83 c4 3c             	add    esp,0x3c
c0007388:	89 e8                	mov    eax,ebp
c000738a:	5b                   	pop    ebx
c000738b:	5e                   	pop    esi
c000738c:	5f                   	pop    edi
c000738d:	5d                   	pop    ebp
c000738e:	c3                   	ret    

c000738f <f_forward>:
c000738f:	55                   	push   ebp
c0007390:	57                   	push   edi
c0007391:	56                   	push   esi
c0007392:	53                   	push   ebx
c0007393:	83 ec 2c             	sub    esp,0x2c
c0007396:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000739a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000739e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00073a4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00073a8:	89 d8                	mov    eax,ebx
c00073aa:	e8 7b af ff ff       	call   c000232a <validate>
c00073af:	89 c5                	mov    ebp,eax
c00073b1:	85 c0                	test   eax,eax
c00073b3:	0f 85 aa 01 00 00    	jne    c0007563 <f_forward+0x1d4>
c00073b9:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00073bd:	85 ed                	test   ebp,ebp
c00073bf:	0f 85 9e 01 00 00    	jne    c0007563 <f_forward+0x1d4>
c00073c5:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00073c9:	0f 84 8f 01 00 00    	je     c000755e <f_forward+0x1cf>
c00073cf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00073d2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00073d5:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00073d8:	bf 00 00 00 00       	mov    edi,0x0
c00073dd:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00073e0:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00073e4:	89 d1                	mov    ecx,edx
c00073e6:	19 f9                	sbb    ecx,edi
c00073e8:	0f 83 cf 00 00 00    	jae    c00074bd <f_forward+0x12e>
c00073ee:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00073f2:	e9 c6 00 00 00       	jmp    c00074bd <f_forward+0x12e>
c00073f7:	50                   	push   eax
c00073f8:	50                   	push   eax
c00073f9:	6a 00                	push   0x0
c00073fb:	6a 00                	push   0x0
c00073fd:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007401:	83 c4 10             	add    esp,0x10
c0007404:	85 c0                	test   eax,eax
c0007406:	0f 84 57 01 00 00    	je     c0007563 <f_forward+0x1d4>
c000740c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000740f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007416:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000741a:	89 d7                	mov    edi,edx
c000741c:	8d 4e ff             	lea    ecx,[esi-0x1]
c000741f:	89 c6                	mov    esi,eax
c0007421:	0f ac fe 09          	shrd   esi,edi,0x9
c0007425:	21 ce                	and    esi,ecx
c0007427:	89 c1                	mov    ecx,eax
c0007429:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000742f:	0f 84 98 00 00 00    	je     c00074cd <f_forward+0x13e>
c0007435:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007439:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000743c:	89 c8                	mov    eax,ecx
c000743e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007442:	e8 79 aa ff ff       	call   c0001ec0 <clst2sect>
c0007447:	89 d7                	mov    edi,edx
c0007449:	09 c7                	or     edi,eax
c000744b:	0f 84 9e 00 00 00    	je     c00074ef <f_forward+0x160>
c0007451:	31 ff                	xor    edi,edi
c0007453:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007456:	01 c6                	add    esi,eax
c0007458:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000745c:	11 d7                	adc    edi,edx
c000745e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007461:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007464:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007468:	39 fa                	cmp    edx,edi
c000746a:	0f 85 a2 00 00 00    	jne    c0007512 <f_forward+0x183>
c0007470:	39 f0                	cmp    eax,esi
c0007472:	0f 85 9a 00 00 00    	jne    c0007512 <f_forward+0x183>
c0007478:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000747b:	ba 00 02 00 00       	mov    edx,0x200
c0007480:	25 ff 01 00 00       	and    eax,0x1ff
c0007485:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007489:	29 c2                	sub    edx,eax
c000748b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000748e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007491:	39 d1                	cmp    ecx,edx
c0007493:	76 02                	jbe    c0007497 <f_forward+0x108>
c0007495:	89 d1                	mov    ecx,edx
c0007497:	8d 73 50             	lea    esi,[ebx+0x50]
c000749a:	52                   	push   edx
c000749b:	01 c6                	add    esi,eax
c000749d:	52                   	push   edx
c000749e:	51                   	push   ecx
c000749f:	56                   	push   esi
c00074a0:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00074a4:	83 c4 10             	add    esp,0x10
c00074a7:	85 c0                	test   eax,eax
c00074a9:	74 44                	je     c00074ef <f_forward+0x160>
c00074ab:	31 ff                	xor    edi,edi
c00074ad:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00074b0:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00074b3:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00074b7:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00074bb:	01 07                	add    DWORD PTR [edi],eax
c00074bd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00074c2:	0f 85 2f ff ff ff    	jne    c00073f7 <f_forward+0x68>
c00074c8:	e9 96 00 00 00       	jmp    c0007563 <f_forward+0x1d4>
c00074cd:	85 f6                	test   esi,esi
c00074cf:	0f 85 60 ff ff ff    	jne    c0007435 <f_forward+0xa6>
c00074d5:	89 d7                	mov    edi,edx
c00074d7:	09 c7                	or     edi,eax
c00074d9:	75 05                	jne    c00074e0 <f_forward+0x151>
c00074db:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00074de:	eb 0a                	jmp    c00074ea <f_forward+0x15b>
c00074e0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00074e3:	89 d8                	mov    eax,ebx
c00074e5:	e8 a3 ba ff ff       	call   c0002f8d <get_fat>
c00074ea:	83 f8 01             	cmp    eax,0x1
c00074ed:	77 0b                	ja     c00074fa <f_forward+0x16b>
c00074ef:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00074f3:	bd 02 00 00 00       	mov    ebp,0x2
c00074f8:	eb 69                	jmp    c0007563 <f_forward+0x1d4>
c00074fa:	83 f8 ff             	cmp    eax,0xffffffff
c00074fd:	75 0b                	jne    c000750a <f_forward+0x17b>
c00074ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007503:	bd 01 00 00 00       	mov    ebp,0x1
c0007508:	eb 59                	jmp    c0007563 <f_forward+0x1d4>
c000750a:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000750d:	e9 23 ff ff ff       	jmp    c0007435 <f_forward+0xa6>
c0007512:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007516:	79 20                	jns    c0007538 <f_forward+0x1a9>
c0007518:	83 ec 0c             	sub    esp,0xc
c000751b:	6a 01                	push   0x1
c000751d:	52                   	push   edx
c000751e:	50                   	push   eax
c000751f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007523:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007527:	50                   	push   eax
c0007528:	e8 c5 a6 ff ff       	call   c0001bf2 <disk_write>
c000752d:	83 c4 20             	add    esp,0x20
c0007530:	85 c0                	test   eax,eax
c0007532:	75 cb                	jne    c00074ff <f_forward+0x170>
c0007534:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007538:	83 ec 0c             	sub    esp,0xc
c000753b:	6a 01                	push   0x1
c000753d:	57                   	push   edi
c000753e:	56                   	push   esi
c000753f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007543:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007547:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000754b:	50                   	push   eax
c000754c:	e8 8b a6 ff ff       	call   c0001bdc <disk_read>
c0007551:	83 c4 20             	add    esp,0x20
c0007554:	85 c0                	test   eax,eax
c0007556:	0f 84 1c ff ff ff    	je     c0007478 <f_forward+0xe9>
c000755c:	eb a1                	jmp    c00074ff <f_forward+0x170>
c000755e:	bd 07 00 00 00       	mov    ebp,0x7
c0007563:	83 c4 2c             	add    esp,0x2c
c0007566:	89 e8                	mov    eax,ebp
c0007568:	5b                   	pop    ebx
c0007569:	5e                   	pop    esi
c000756a:	5f                   	pop    edi
c000756b:	5d                   	pop    ebp
c000756c:	c3                   	ret    

c000756d <f_mkfs>:
c000756d:	55                   	push   ebp
c000756e:	57                   	push   edi
c000756f:	56                   	push   esi
c0007570:	53                   	push   ebx
c0007571:	bb 0b 00 00 00       	mov    ebx,0xb
c0007576:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000757c:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007583:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000758a:	e8 7a ac ff ff       	call   c0002209 <get_ldnumber>
c000758f:	85 c0                	test   eax,eax
c0007591:	0f 88 ec 10 00 00    	js     c0008683 <f_mkfs+0x1116>
c0007597:	8b 14 85 a0 e5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1a60]
c000759e:	85 d2                	test   edx,edx
c00075a0:	74 03                	je     c00075a5 <f_mkfs+0x38>
c00075a2:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00075a5:	85 f6                	test   esi,esi
c00075a7:	75 05                	jne    c00075ae <f_mkfs+0x41>
c00075a9:	be 20 98 02 c0       	mov    esi,0xc0029820
c00075ae:	83 ec 0c             	sub    esp,0xc
c00075b1:	0f b6 c0             	movzx  eax,al
c00075b4:	bb 03 00 00 00       	mov    ebx,0x3
c00075b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00075bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075c1:	e8 13 a6 ff ff       	call   c0001bd9 <disk_initialize>
c00075c6:	83 c4 10             	add    esp,0x10
c00075c9:	a8 01                	test   al,0x1
c00075cb:	0f 85 b2 10 00 00    	jne    c0008683 <f_mkfs+0x1116>
c00075d1:	bb 0a 00 00 00       	mov    ebx,0xa
c00075d6:	a8 04                	test   al,0x4
c00075d8:	0f 85 a5 10 00 00    	jne    c0008683 <f_mkfs+0x1116>
c00075de:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00075e1:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00075e5:	85 c0                	test   eax,eax
c00075e7:	75 20                	jne    c0007609 <f_mkfs+0x9c>
c00075e9:	51                   	push   ecx
c00075ea:	8d 44 24 78          	lea    eax,[esp+0x78]
c00075ee:	50                   	push   eax
c00075ef:	6a 03                	push   0x3
c00075f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f5:	e8 0e a6 ff ff       	call   c0001c08 <disk_ioctl>
c00075fa:	83 c4 10             	add    esp,0x10
c00075fd:	85 c0                	test   eax,eax
c00075ff:	74 08                	je     c0007609 <f_mkfs+0x9c>
c0007601:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007609:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000760d:	8d 42 ff             	lea    eax,[edx-0x1]
c0007610:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007615:	77 04                	ja     c000761b <f_mkfs+0xae>
c0007617:	85 c2                	test   edx,eax
c0007619:	74 08                	je     c0007623 <f_mkfs+0xb6>
c000761b:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007623:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007626:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000762a:	48                   	dec    eax
c000762b:	3c 01                	cmp    al,0x1
c000762d:	76 05                	jbe    c0007634 <f_mkfs+0xc7>
c000762f:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007634:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007637:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000763b:	48                   	dec    eax
c000763c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007641:	77 07                	ja     c000764a <f_mkfs+0xdd>
c0007643:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007648:	74 08                	je     c0007652 <f_mkfs+0xe5>
c000764a:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007652:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007655:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000765b:	77 07                	ja     c0007664 <f_mkfs+0xf7>
c000765d:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007660:	85 d8                	test   eax,ebx
c0007662:	74 02                	je     c0007666 <f_mkfs+0xf9>
c0007664:	31 db                	xor    ebx,ebx
c0007666:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007671:	77 0a                	ja     c000767d <f_mkfs+0x110>
c0007673:	bb 11 00 00 00       	mov    ebx,0x11
c0007678:	e9 06 10 00 00       	jmp    c0008683 <f_mkfs+0x1116>
c000767d:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007684:	8b 36                	mov    esi,DWORD PTR [esi]
c0007686:	85 ed                	test   ebp,ebp
c0007688:	75 1e                	jne    c00076a8 <f_mkfs+0x13b>
c000768a:	83 ec 0c             	sub    esp,0xc
c000768d:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007694:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007699:	50                   	push   eax
c000769a:	e8 f1 0f 00 00       	call   c0008690 <ff_memalloc>
c000769f:	83 c4 10             	add    esp,0x10
c00076a2:	89 c5                	mov    ebp,eax
c00076a4:	85 c0                	test   eax,eax
c00076a6:	74 cb                	je     c0007673 <f_mkfs+0x106>
c00076a8:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00076b0:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00076b8:	52                   	push   edx
c00076b9:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00076bd:	50                   	push   eax
c00076be:	6a 01                	push   0x1
c00076c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00076c4:	e8 3f a5 ff ff       	call   c0001c08 <disk_ioctl>
c00076c9:	83 c4 10             	add    esp,0x10
c00076cc:	85 c0                	test   eax,eax
c00076ce:	0f 85 4a 0f 00 00    	jne    c000861e <f_mkfs+0x10b1>
c00076d4:	89 f1                	mov    ecx,esi
c00076d6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00076de:	83 e1 0f             	and    ecx,0xf
c00076e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00076e9:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00076ed:	83 e6 08             	and    esi,0x8
c00076f0:	75 56                	jne    c0007748 <f_mkfs+0x1db>
c00076f2:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00076f6:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00076fa:	83 ff 00             	cmp    edi,0x0
c00076fd:	76 20                	jbe    c000771f <f_mkfs+0x1b2>
c00076ff:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007704:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000770c:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007712:	83 d7 ff             	adc    edi,0xffffffff
c0007715:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007719:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000771d:	eb 21                	jmp    c0007740 <f_mkfs+0x1d3>
c000771f:	ba 3f 00 00 00       	mov    edx,0x3f
c0007724:	39 f2                	cmp    edx,esi
c0007726:	19 f8                	sbb    eax,edi
c0007728:	73 1e                	jae    c0007748 <f_mkfs+0x1db>
c000772a:	83 c6 c1             	add    esi,0xffffffc1
c000772d:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007735:	83 d7 ff             	adc    edi,0xffffffff
c0007738:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000773c:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007740:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007748:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000774c:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007750:	89 04 24             	mov    DWORD PTR [esp],eax
c0007753:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007757:	31 c0                	xor    eax,eax
c0007759:	ba 7f 00 00 00       	mov    edx,0x7f
c000775e:	89 c7                	mov    edi,eax
c0007760:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007763:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007767:	0f 83 c5 0a 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c000776d:	89 df                	mov    edi,ebx
c000776f:	c1 ef 09             	shr    edi,0x9
c0007772:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007776:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000777d:	c1 ef 09             	shr    edi,0x9
c0007780:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007785:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007789:	74 29                	je     c00077b4 <f_mkfs+0x247>
c000778b:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007791:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007796:	0f 97 c2             	seta   dl
c0007799:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c000779c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00077a0:	0f 92 c0             	setb   al
c00077a3:	08 c2                	or     dl,al
c00077a5:	75 5b                	jne    c0007802 <f_mkfs+0x295>
c00077a7:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00077ab:	83 e0 07             	and    eax,0x7
c00077ae:	3c 04                	cmp    al,0x4
c00077b0:	74 50                	je     c0007802 <f_mkfs+0x295>
c00077b2:	eb 1b                	jmp    c00077cf <f_mkfs+0x262>
c00077b4:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00077b9:	0f 87 73 0a 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c00077bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00077c5:	76 08                	jbe    c00077cf <f_mkfs+0x262>
c00077c7:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00077cf:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00077d3:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00077d7:	83 e0 01             	and    eax,0x1
c00077da:	80 e1 02             	and    cl,0x2
c00077dd:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00077e1:	74 0d                	je     c00077f0 <f_mkfs+0x283>
c00077e3:	84 c0                	test   al,al
c00077e5:	0f 84 53 09 00 00    	je     c000813e <f_mkfs+0xbd1>
c00077eb:	e9 12 08 00 00       	jmp    c0008002 <f_mkfs+0xa95>
c00077f0:	bb 13 00 00 00       	mov    ebx,0x13
c00077f5:	84 c0                	test   al,al
c00077f7:	0f 85 05 08 00 00    	jne    c0008002 <f_mkfs+0xa95>
c00077fd:	e9 39 0e 00 00       	jmp    c000863b <f_mkfs+0x10ce>
c0007802:	31 c0                	xor    eax,eax
c0007804:	ba ff 0f 00 00       	mov    edx,0xfff
c0007809:	89 c7                	mov    edi,eax
c000780b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000780e:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007812:	0f 83 1a 0a 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c0007818:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000781e:	77 39                	ja     c0007859 <f_mkfs+0x2ec>
c0007820:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007825:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000782d:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007830:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007834:	73 08                	jae    c000783e <f_mkfs+0x2d1>
c0007836:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000783e:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007843:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007846:	b8 00 00 00 00       	mov    eax,0x0
c000784b:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000784f:	73 08                	jae    c0007859 <f_mkfs+0x2ec>
c0007851:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000785d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007861:	83 c0 20             	add    eax,0x20
c0007864:	83 d2 00             	adc    edx,0x0
c0007867:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000786b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000786f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007873:	31 d2                	xor    edx,edx
c0007875:	31 ff                	xor    edi,edi
c0007877:	52                   	push   edx
c0007878:	89 fb                	mov    ebx,edi
c000787a:	50                   	push   eax
c000787b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000787f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007883:	e8 0c f5 01 00       	call   c0026d94 <__udivdi3>
c0007888:	83 c4 10             	add    esp,0x10
c000788b:	c1 e0 02             	shl    eax,0x2
c000788e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007892:	05 07 02 00 00       	add    eax,0x207
c0007897:	89 f1                	mov    ecx,esi
c0007899:	c1 e8 09             	shr    eax,0x9
c000789c:	83 c1 ff             	add    ecx,0xffffffff
c000789f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00078a3:	83 d3 ff             	adc    ebx,0xffffffff
c00078a6:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00078aa:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00078ae:	31 d2                	xor    edx,edx
c00078b0:	01 c8                	add    eax,ecx
c00078b2:	11 da                	adc    edx,ebx
c00078b4:	89 c1                	mov    ecx,eax
c00078b6:	f7 de                	neg    esi
c00078b8:	89 d0                	mov    eax,edx
c00078ba:	83 d7 00             	adc    edi,0x0
c00078bd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00078c1:	f7 df                	neg    edi
c00078c3:	21 f1                	and    ecx,esi
c00078c5:	21 f8                	and    eax,edi
c00078c7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00078cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00078cf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00078d3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00078d7:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00078db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00078de:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00078e2:	0f ac d0 01          	shrd   eax,edx,0x1
c00078e6:	89 df                	mov    edi,ebx
c00078e8:	d1 ea                	shr    edx,1
c00078ea:	39 c1                	cmp    ecx,eax
c00078ec:	19 d7                	sbb    edi,edx
c00078ee:	0f 83 3e 09 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c00078f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00078f8:	31 d2                	xor    edx,edx
c00078fa:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00078fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007902:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007906:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007909:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000790d:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007911:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007915:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007919:	83 f8 0f             	cmp    eax,0xf
c000791c:	0f 86 10 09 00 00    	jbe    c0008232 <f_mkfs+0xcc5>
c0007922:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000792a:	0f 87 02 09 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c0007930:	31 d2                	xor    edx,edx
c0007932:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007936:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000793e:	83 c0 07             	add    eax,0x7
c0007941:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007949:	c1 e8 03             	shr    eax,0x3
c000794c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007953:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007957:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000795b:	c1 e0 09             	shl    eax,0x9
c000795e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007962:	48                   	dec    eax
c0007963:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007967:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000796b:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000796f:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007973:	31 d2                	xor    edx,edx
c0007975:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007979:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007980:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007984:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007989:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000798d:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007991:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007995:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007999:	31 ff                	xor    edi,edi
c000799b:	31 f6                	xor    esi,esi
c000799d:	31 db                	xor    ebx,ebx
c000799f:	85 ff                	test   edi,edi
c00079a1:	74 05                	je     c00079a8 <f_mkfs+0x43b>
c00079a3:	4f                   	dec    edi
c00079a4:	74 44                	je     c00079ea <f_mkfs+0x47d>
c00079a6:	eb 4f                	jmp    c00079f7 <f_mkfs+0x48a>
c00079a8:	83 ec 0c             	sub    esp,0xc
c00079ab:	0f b7 c3             	movzx  eax,bx
c00079ae:	50                   	push   eax
c00079af:	e8 05 0e 00 00       	call   c00087b9 <ff_wtoupper>
c00079b4:	83 c4 10             	add    esp,0x10
c00079b7:	89 c1                	mov    ecx,eax
c00079b9:	8d 53 01             	lea    edx,[ebx+0x1]
c00079bc:	66 39 c3             	cmp    bx,ax
c00079bf:	75 3e                	jne    c00079ff <f_mkfs+0x492>
c00079c1:	be 01 00 00 00       	mov    esi,0x1
c00079c6:	89 df                	mov    edi,ebx
c00079c8:	66 01 f7             	add    di,si
c00079cb:	75 07                	jne    c00079d4 <f_mkfs+0x467>
c00079cd:	83 fe 7f             	cmp    esi,0x7f
c00079d0:	77 31                	ja     c0007a03 <f_mkfs+0x496>
c00079d2:	eb 16                	jmp    c00079ea <f_mkfs+0x47d>
c00079d4:	83 ec 0c             	sub    esp,0xc
c00079d7:	0f b7 ff             	movzx  edi,di
c00079da:	57                   	push   edi
c00079db:	e8 d9 0d 00 00       	call   c00087b9 <ff_wtoupper>
c00079e0:	83 c4 10             	add    esp,0x10
c00079e3:	39 c7                	cmp    edi,eax
c00079e5:	75 e6                	jne    c00079cd <f_mkfs+0x460>
c00079e7:	46                   	inc    esi
c00079e8:	eb dc                	jmp    c00079c6 <f_mkfs+0x459>
c00079ea:	31 c0                	xor    eax,eax
c00079ec:	89 d9                	mov    ecx,ebx
c00079ee:	4e                   	dec    esi
c00079ef:	0f 95 c0             	setne  al
c00079f2:	43                   	inc    ebx
c00079f3:	89 c7                	mov    edi,eax
c00079f5:	eb 14                	jmp    c0007a0b <f_mkfs+0x49e>
c00079f7:	89 f1                	mov    ecx,esi
c00079f9:	01 f3                	add    ebx,esi
c00079fb:	31 ff                	xor    edi,edi
c00079fd:	eb 0c                	jmp    c0007a0b <f_mkfs+0x49e>
c00079ff:	89 d3                	mov    ebx,edx
c0007a01:	eb 08                	jmp    c0007a0b <f_mkfs+0x49e>
c0007a03:	bf 02 00 00 00       	mov    edi,0x2
c0007a08:	83 c9 ff             	or     ecx,0xffffffff
c0007a0b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a12:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007a16:	0f b6 c1             	movzx  eax,cl
c0007a19:	e8 04 a7 ff ff       	call   c0002122 <xsum32>
c0007a1e:	66 c1 e9 08          	shr    cx,0x8
c0007a22:	89 c2                	mov    edx,eax
c0007a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a27:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007a2b:	0f b7 c1             	movzx  eax,cx
c0007a2e:	e8 ef a6 ff ff       	call   c0002122 <xsum32>
c0007a33:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007a38:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007a3c:	66 85 db             	test   bx,bx
c0007a3f:	74 1f                	je     c0007a60 <f_mkfs+0x4f3>
c0007a41:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a44:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007a4b:	83 c0 02             	add    eax,0x2
c0007a4e:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007a54:	39 c2                	cmp    edx,eax
c0007a56:	74 08                	je     c0007a60 <f_mkfs+0x4f3>
c0007a58:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a5b:	e9 3f ff ff ff       	jmp    c000799f <f_mkfs+0x432>
c0007a60:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a63:	83 ec 0c             	sub    esp,0xc
c0007a66:	05 01 02 00 00       	add    eax,0x201
c0007a6b:	c1 e8 09             	shr    eax,0x9
c0007a6e:	50                   	push   eax
c0007a6f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007a73:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007a77:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007a7b:	55                   	push   ebp
c0007a7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a80:	e8 6d a1 ff ff       	call   c0001bf2 <disk_write>
c0007a85:	83 c4 20             	add    esp,0x20
c0007a88:	85 c0                	test   eax,eax
c0007a8a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007a8d:	0f 85 8b 0b 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007a93:	89 d0                	mov    eax,edx
c0007a95:	31 d2                	xor    edx,edx
c0007a97:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007a9b:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007a9f:	66 85 db             	test   bx,bx
c0007aa2:	74 04                	je     c0007aa8 <f_mkfs+0x53b>
c0007aa4:	31 c0                	xor    eax,eax
c0007aa6:	eb b0                	jmp    c0007a58 <f_mkfs+0x4eb>
c0007aa8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007aac:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007ab0:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007ab4:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007aba:	31 d2                	xor    edx,edx
c0007abc:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007ac7:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007acb:	c1 eb 09             	shr    ebx,0x9
c0007ace:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007ad5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007ad9:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007add:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ae1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007ae5:	8d 70 01             	lea    esi,[eax+0x1]
c0007ae8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007aec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007af0:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007af7:	31 d2                	xor    edx,edx
c0007af9:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007afe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b01:	89 c1                	mov    ecx,eax
c0007b03:	89 e8                	mov    eax,ebp
c0007b05:	e8 b1 a1 ff ff       	call   c0001cbb <mem_set>
c0007b0a:	31 c0                	xor    eax,eax
c0007b0c:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007b0f:	76 10                	jbe    c0007b21 <f_mkfs+0x5b4>
c0007b11:	83 fe 07             	cmp    esi,0x7
c0007b14:	76 0b                	jbe    c0007b21 <f_mkfs+0x5b4>
c0007b16:	40                   	inc    eax
c0007b17:	83 ee 08             	sub    esi,0x8
c0007b1a:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007b1f:	eb eb                	jmp    c0007b0c <f_mkfs+0x59f>
c0007b21:	b2 01                	mov    dl,0x1
c0007b23:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007b27:	85 f6                	test   esi,esi
c0007b29:	74 0c                	je     c0007b37 <f_mkfs+0x5ca>
c0007b2b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007b2e:	76 07                	jbe    c0007b37 <f_mkfs+0x5ca>
c0007b30:	08 11                	or     BYTE PTR [ecx],dl
c0007b32:	4e                   	dec    esi
c0007b33:	d1 e2                	shl    edx,1
c0007b35:	eb f0                	jmp    c0007b27 <f_mkfs+0x5ba>
c0007b37:	89 df                	mov    edi,ebx
c0007b39:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007b3d:	76 04                	jbe    c0007b43 <f_mkfs+0x5d6>
c0007b3f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007b43:	83 ec 0c             	sub    esp,0xc
c0007b46:	57                   	push   edi
c0007b47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007b4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007b4f:	55                   	push   ebp
c0007b50:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b54:	e8 99 a0 ff ff       	call   c0001bf2 <disk_write>
c0007b59:	83 c4 20             	add    esp,0x20
c0007b5c:	85 c0                	test   eax,eax
c0007b5e:	0f 85 ba 0a 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007b64:	31 d2                	xor    edx,edx
c0007b66:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007b6a:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007b6e:	29 fb                	sub    ebx,edi
c0007b70:	0f 85 7a ff ff ff    	jne    c0007af0 <f_mkfs+0x583>
c0007b76:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007b7a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007b82:	31 f6                	xor    esi,esi
c0007b84:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007b88:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b8b:	31 d2                	xor    edx,edx
c0007b8d:	89 e8                	mov    eax,ebp
c0007b8f:	e8 27 a1 ff ff       	call   c0001cbb <mem_set>
c0007b94:	31 c9                	xor    ecx,ecx
c0007b96:	85 db                	test   ebx,ebx
c0007b98:	75 40                	jne    c0007bda <f_mkfs+0x66d>
c0007b9a:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007b9f:	89 e8                	mov    eax,ebp
c0007ba1:	bb 02 00 00 00       	mov    ebx,0x2
c0007ba6:	e8 f2 a0 ff ff       	call   c0001c9d <st_dword>
c0007bab:	8d 45 04             	lea    eax,[ebp+0x4]
c0007bae:	83 ca ff             	or     edx,0xffffffff
c0007bb1:	e8 e7 a0 ff ff       	call   c0001c9d <st_dword>
c0007bb6:	b9 08 00 00 00       	mov    ecx,0x8
c0007bbb:	eb 1d                	jmp    c0007bda <f_mkfs+0x66d>
c0007bbd:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007bc0:	76 3b                	jbe    c0007bfd <f_mkfs+0x690>
c0007bc2:	43                   	inc    ebx
c0007bc3:	83 fe 01             	cmp    esi,0x1
c0007bc6:	89 da                	mov    edx,ebx
c0007bc8:	77 03                	ja     c0007bcd <f_mkfs+0x660>
c0007bca:	83 ca ff             	or     edx,0xffffffff
c0007bcd:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007bd1:	4e                   	dec    esi
c0007bd2:	e8 c6 a0 ff ff       	call   c0001c9d <st_dword>
c0007bd7:	83 c1 04             	add    ecx,0x4
c0007bda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bde:	85 f6                	test   esi,esi
c0007be0:	75 db                	jne    c0007bbd <f_mkfs+0x650>
c0007be2:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007be7:	77 14                	ja     c0007bfd <f_mkfs+0x690>
c0007be9:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007bed:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007bf4:	85 f6                	test   esi,esi
c0007bf6:	74 05                	je     c0007bfd <f_mkfs+0x690>
c0007bf8:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007bfb:	77 dd                	ja     c0007bda <f_mkfs+0x66d>
c0007bfd:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007c01:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007c05:	39 cf                	cmp    edi,ecx
c0007c07:	76 02                	jbe    c0007c0b <f_mkfs+0x69e>
c0007c09:	89 cf                	mov    edi,ecx
c0007c0b:	83 ec 0c             	sub    esp,0xc
c0007c0e:	57                   	push   edi
c0007c0f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007c13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007c17:	55                   	push   ebp
c0007c18:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c1c:	e8 d1 9f ff ff       	call   c0001bf2 <disk_write>
c0007c21:	83 c4 20             	add    esp,0x20
c0007c24:	85 c0                	test   eax,eax
c0007c26:	0f 85 f2 09 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007c2c:	31 d2                	xor    edx,edx
c0007c2e:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007c32:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007c36:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007c3a:	0f 85 48 ff ff ff    	jne    c0007b88 <f_mkfs+0x61b>
c0007c40:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c43:	31 d2                	xor    edx,edx
c0007c45:	89 e8                	mov    eax,ebp
c0007c47:	31 ff                	xor    edi,edi
c0007c49:	e8 6d a0 ff ff       	call   c0001cbb <mem_set>
c0007c4e:	8d 45 34             	lea    eax,[ebp+0x34]
c0007c51:	ba 02 00 00 00       	mov    edx,0x2
c0007c56:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007c5a:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007c5e:	e8 3a a0 ff ff       	call   c0001c9d <st_dword>
c0007c63:	8d 45 38             	lea    eax,[ebp+0x38]
c0007c66:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007c6a:	e8 2e a0 ff ff       	call   c0001c9d <st_dword>
c0007c6f:	8d 45 44             	lea    eax,[ebp+0x44]
c0007c72:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007c76:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007c7a:	e8 1e a0 ff ff       	call   c0001c9d <st_dword>
c0007c7f:	8d 45 54             	lea    eax,[ebp+0x54]
c0007c82:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007c86:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c8a:	83 c2 02             	add    edx,0x2
c0007c8d:	e8 0b a0 ff ff       	call   c0001c9d <st_dword>
c0007c92:	8d 45 58             	lea    eax,[ebp+0x58]
c0007c95:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007c99:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007c9d:	e8 fb 9f ff ff       	call   c0001c9d <st_dword>
c0007ca2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ca6:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007cab:	89 c6                	mov    esi,eax
c0007cad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cb1:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007cb5:	89 04 24             	mov    DWORD PTR [esp],eax
c0007cb8:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007cbc:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007cbf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007cc3:	39 cb                	cmp    ebx,ecx
c0007cc5:	76 02                	jbe    c0007cc9 <f_mkfs+0x75c>
c0007cc7:	89 cb                	mov    ebx,ecx
c0007cc9:	83 ec 0c             	sub    esp,0xc
c0007ccc:	53                   	push   ebx
c0007ccd:	57                   	push   edi
c0007cce:	56                   	push   esi
c0007ccf:	55                   	push   ebp
c0007cd0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cd4:	e8 19 9f ff ff       	call   c0001bf2 <disk_write>
c0007cd9:	83 c4 20             	add    esp,0x20
c0007cdc:	85 c0                	test   eax,eax
c0007cde:	0f 85 3a 09 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007ce4:	31 d2                	xor    edx,edx
c0007ce6:	b9 00 02 00 00       	mov    ecx,0x200
c0007ceb:	89 e8                	mov    eax,ebp
c0007ced:	e8 c9 9f ff ff       	call   c0001cbb <mem_set>
c0007cf2:	31 d2                	xor    edx,edx
c0007cf4:	01 de                	add    esi,ebx
c0007cf6:	11 d7                	adc    edi,edx
c0007cf8:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007cfb:	75 bf                	jne    c0007cbc <f_mkfs+0x74f>
c0007cfd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007d01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007d05:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007d0d:	b9 00 02 00 00       	mov    ecx,0x200
c0007d12:	31 d2                	xor    edx,edx
c0007d14:	89 e8                	mov    eax,ebp
c0007d16:	e8 a0 9f ff ff       	call   c0001cbb <mem_set>
c0007d1b:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d20:	ba 00 99 02 c0       	mov    edx,0xc0029900
c0007d25:	89 e8                	mov    eax,ebp
c0007d27:	e8 7a 9f ff ff       	call   c0001ca6 <mem_cpy>
c0007d2c:	8d 45 40             	lea    eax,[ebp+0x40]
c0007d2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007d33:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007d37:	e8 64 9f ff ff       	call   c0001ca0 <st_qword>
c0007d3c:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007d40:	8d 45 48             	lea    eax,[ebp+0x48]
c0007d43:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007d47:	e8 54 9f ff ff       	call   c0001ca0 <st_qword>
c0007d4c:	8d 45 50             	lea    eax,[ebp+0x50]
c0007d4f:	ba 20 00 00 00       	mov    edx,0x20
c0007d54:	e8 44 9f ff ff       	call   c0001c9d <st_dword>
c0007d59:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007d5d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007d61:	e8 37 9f ff ff       	call   c0001c9d <st_dword>
c0007d66:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007d6a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007d6e:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007d72:	e8 26 9f ff ff       	call   c0001c9d <st_dword>
c0007d77:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007d7a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007d7e:	e8 1a 9f ff ff       	call   c0001c9d <st_dword>
c0007d83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007d87:	8d 50 02             	lea    edx,[eax+0x2]
c0007d8a:	8d 45 60             	lea    eax,[ebp+0x60]
c0007d8d:	e8 0b 9f ff ff       	call   c0001c9d <st_dword>
c0007d92:	8d 45 64             	lea    eax,[ebp+0x64]
c0007d95:	ba 00 00 21 50       	mov    edx,0x50210000
c0007d9a:	e8 fe 9e ff ff       	call   c0001c9d <st_dword>
c0007d9f:	8d 45 68             	lea    eax,[ebp+0x68]
c0007da2:	ba 00 01 00 00       	mov    edx,0x100
c0007da7:	e8 ed 9e ff ff       	call   c0001c99 <st_word>
c0007dac:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007db0:	b8 0a 00 00 00       	mov    eax,0xa
c0007db5:	48                   	dec    eax
c0007db6:	74 05                	je     c0007dbd <f_mkfs+0x850>
c0007db8:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007dbb:	eb f8                	jmp    c0007db5 <f_mkfs+0x848>
c0007dbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc1:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007dc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dc9:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007dcd:	74 05                	je     c0007dd4 <f_mkfs+0x867>
c0007dcf:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007dd2:	eb f5                	jmp    c0007dc9 <f_mkfs+0x85c>
c0007dd4:	8d 45 78             	lea    eax,[ebp+0x78]
c0007dd7:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ddc:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007de2:	31 db                	xor    ebx,ebx
c0007de4:	e8 b0 9e ff ff       	call   c0001c99 <st_word>
c0007de9:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007def:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007df4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007df7:	e8 9d 9e ff ff       	call   c0001c99 <st_word>
c0007dfc:	31 c9                	xor    ecx,ecx
c0007dfe:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007e01:	83 f8 01             	cmp    eax,0x1
c0007e04:	76 13                	jbe    c0007e19 <f_mkfs+0x8ac>
c0007e06:	83 f9 70             	cmp    ecx,0x70
c0007e09:	74 0e                	je     c0007e19 <f_mkfs+0x8ac>
c0007e0b:	89 da                	mov    edx,ebx
c0007e0d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007e12:	e8 0b a3 ff ff       	call   c0002122 <xsum32>
c0007e17:	89 c3                	mov    ebx,eax
c0007e19:	41                   	inc    ecx
c0007e1a:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e20:	75 dc                	jne    c0007dfe <f_mkfs+0x891>
c0007e22:	89 f0                	mov    eax,esi
c0007e24:	89 fa                	mov    edx,edi
c0007e26:	83 c0 01             	add    eax,0x1
c0007e29:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e2d:	83 d2 00             	adc    edx,0x0
c0007e30:	83 ec 0c             	sub    esp,0xc
c0007e33:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007e37:	6a 01                	push   0x1
c0007e39:	57                   	push   edi
c0007e3a:	56                   	push   esi
c0007e3b:	55                   	push   ebp
c0007e3c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e40:	e8 ad 9d ff ff       	call   c0001bf2 <disk_write>
c0007e45:	83 c4 20             	add    esp,0x20
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	0f 85 ce 07 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	b9 00 02 00 00       	mov    ecx,0x200
c0007e57:	89 e8                	mov    eax,ebp
c0007e59:	e8 5d 9e ff ff       	call   c0001cbb <mem_set>
c0007e5e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007e63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e66:	e8 2e 9e ff ff       	call   c0001c99 <st_word>
c0007e6b:	89 f0                	mov    eax,esi
c0007e6d:	89 fa                	mov    edx,edi
c0007e6f:	83 c0 09             	add    eax,0x9
c0007e72:	83 d2 00             	adc    edx,0x0
c0007e75:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e78:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007e7c:	31 c9                	xor    ecx,ecx
c0007e7e:	41                   	inc    ecx
c0007e7f:	89 da                	mov    edx,ebx
c0007e81:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e86:	e8 97 a2 ff ff       	call   c0002122 <xsum32>
c0007e8b:	89 c3                	mov    ebx,eax
c0007e8d:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e93:	75 e9                	jne    c0007e7e <f_mkfs+0x911>
c0007e95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e99:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ea4:	83 d2 00             	adc    edx,0x0
c0007ea7:	83 ec 0c             	sub    esp,0xc
c0007eaa:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007eae:	6a 01                	push   0x1
c0007eb0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007eb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007eb8:	55                   	push   ebp
c0007eb9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ebd:	e8 30 9d ff ff       	call   c0001bf2 <disk_write>
c0007ec2:	83 c4 20             	add    esp,0x20
c0007ec5:	85 c0                	test   eax,eax
c0007ec7:	0f 85 51 07 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007ecd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ed1:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ed5:	75 09                	jne    c0007ee0 <f_mkfs+0x973>
c0007ed7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007eda:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ede:	74 12                	je     c0007ef2 <f_mkfs+0x985>
c0007ee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ee4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ee8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007eec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ef0:	eb 8a                	jmp    c0007e7c <f_mkfs+0x90f>
c0007ef2:	31 d2                	xor    edx,edx
c0007ef4:	b9 00 02 00 00       	mov    ecx,0x200
c0007ef9:	89 e8                	mov    eax,ebp
c0007efb:	e8 bb 9d ff ff       	call   c0001cbb <mem_set>
c0007f00:	83 c6 0b             	add    esi,0xb
c0007f03:	83 d7 00             	adc    edi,0x0
c0007f06:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007f0a:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007f0e:	31 c9                	xor    ecx,ecx
c0007f10:	41                   	inc    ecx
c0007f11:	89 da                	mov    edx,ebx
c0007f13:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007f18:	e8 05 a2 ff ff       	call   c0002122 <xsum32>
c0007f1d:	89 c3                	mov    ebx,eax
c0007f1f:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007f25:	75 e9                	jne    c0007f10 <f_mkfs+0x9a3>
c0007f27:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007f2a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007f2e:	83 c6 01             	add    esi,0x1
c0007f31:	83 d7 00             	adc    edi,0x0
c0007f34:	83 ec 0c             	sub    esp,0xc
c0007f37:	6a 01                	push   0x1
c0007f39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007f3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007f41:	55                   	push   ebp
c0007f42:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f46:	e8 a7 9c ff ff       	call   c0001bf2 <disk_write>
c0007f4b:	83 c4 20             	add    esp,0x20
c0007f4e:	85 c0                	test   eax,eax
c0007f50:	0f 85 c8 06 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007f56:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007f5a:	75 06                	jne    c0007f62 <f_mkfs+0x9f5>
c0007f5c:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007f60:	74 09                	je     c0007f6b <f_mkfs+0x9fe>
c0007f62:	89 34 24             	mov    DWORD PTR [esp],esi
c0007f65:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007f69:	eb a3                	jmp    c0007f0e <f_mkfs+0x9a1>
c0007f6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007f6f:	89 da                	mov    edx,ebx
c0007f71:	01 e8                	add    eax,ebp
c0007f73:	e8 25 9d ff ff       	call   c0001c9d <st_dword>
c0007f78:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007f7d:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007f85:	75 e4                	jne    c0007f6b <f_mkfs+0x9fe>
c0007f87:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007f8a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007f8e:	83 c6 02             	add    esi,0x2
c0007f91:	83 d7 00             	adc    edi,0x0
c0007f94:	83 ec 0c             	sub    esp,0xc
c0007f97:	6a 01                	push   0x1
c0007f99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007f9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007fa1:	55                   	push   ebp
c0007fa2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fa6:	e8 47 9c ff ff       	call   c0001bf2 <disk_write>
c0007fab:	83 c4 20             	add    esp,0x20
c0007fae:	85 c0                	test   eax,eax
c0007fb0:	0f 85 68 06 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007fb6:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007fbb:	74 0d                	je     c0007fca <f_mkfs+0xa5d>
c0007fbd:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007fc5:	e9 43 fd ff ff       	jmp    c0007d0d <f_mkfs+0x7a0>
c0007fca:	b1 07                	mov    cl,0x7
c0007fcc:	e9 e3 05 00 00       	jmp    c00085b4 <f_mkfs+0x1047>
c0007fd1:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007fd6:	0f 85 4f 02 00 00    	jne    c000822b <f_mkfs+0xcbe>
c0007fdc:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007fe1:	0f 86 22 02 00 00    	jbe    c0008209 <f_mkfs+0xc9c>
c0007fe7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fec:	0f 85 81 06 00 00    	jne    c0008673 <f_mkfs+0x1106>
c0007ff2:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ff5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ff9:	83 f8 40             	cmp    eax,0x40
c0007ffc:	0f 87 51 06 00 00    	ja     c0008653 <f_mkfs+0x10e6>
c0008002:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008006:	85 ff                	test   edi,edi
c0008008:	75 1c                	jne    c0008026 <f_mkfs+0xab9>
c000800a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000800d:	ba 00 98 02 c0       	mov    edx,0xc0029800
c0008012:	c1 e9 0c             	shr    ecx,0xc
c0008015:	bf 01 00 00 00       	mov    edi,0x1
c000801a:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000801d:	66 85 c0             	test   ax,ax
c0008020:	0f 85 95 01 00 00    	jne    c00081bb <f_mkfs+0xc4e>
c0008026:	31 d2                	xor    edx,edx
c0008028:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000802b:	f7 f7                	div    edi
c000802d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008032:	0f 86 95 01 00 00    	jbe    c00081cd <f_mkfs+0xc60>
c0008038:	83 c0 02             	add    eax,0x2
c000803b:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0008040:	01 c0                	add    eax,eax
c0008042:	05 ff 01 00 00       	add    eax,0x1ff
c0008047:	be 01 00 00 00       	mov    esi,0x1
c000804c:	c1 e8 09             	shr    eax,0x9
c000804f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0008053:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008057:	c1 e0 05             	shl    eax,0x5
c000805a:	c1 e8 09             	shr    eax,0x9
c000805d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0008061:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0008066:	31 d2                	xor    edx,edx
c0008068:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000806c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0008070:	89 f0                	mov    eax,esi
c0008072:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0008076:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c000807a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000807e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0008082:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008086:	31 d2                	xor    edx,edx
c0008088:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c000808d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0008091:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0008095:	31 db                	xor    ebx,ebx
c0008097:	01 c8                	add    eax,ecx
c0008099:	11 da                	adc    edx,ebx
c000809b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000809f:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c00080a3:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c00080a7:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00080ab:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c00080af:	f7 da                	neg    edx
c00080b1:	21 d1                	and    ecx,edx
c00080b3:	29 d9                	sub    ecx,ebx
c00080b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080ba:	0f 85 20 01 00 00    	jne    c00081e0 <f_mkfs+0xc73>
c00080c0:	31 db                	xor    ebx,ebx
c00080c2:	01 ce                	add    esi,ecx
c00080c4:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c00080c8:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c00080cc:	31 d2                	xor    edx,edx
c00080ce:	89 f8                	mov    eax,edi
c00080d0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00080d4:	c1 e0 04             	shl    eax,0x4
c00080d7:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00080db:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00080df:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c00080e3:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c00080e7:	39 04 24             	cmp    DWORD PTR [esp],eax
c00080ea:	19 d3                	sbb    ebx,edx
c00080ec:	0f 82 40 01 00 00    	jb     c0008232 <f_mkfs+0xcc5>
c00080f2:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00080f5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080f9:	89 c8                	mov    eax,ecx
c00080fb:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008100:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008104:	29 f0                	sub    eax,esi
c0008106:	29 d0                	sub    eax,edx
c0008108:	31 d2                	xor    edx,edx
c000810a:	f7 f7                	div    edi
c000810c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008111:	89 c3                	mov    ebx,eax
c0008113:	0f 85 b8 fe ff ff    	jne    c0007fd1 <f_mkfs+0xa64>
c0008119:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000811e:	0f 87 1d 01 00 00    	ja     c0008241 <f_mkfs+0xcd4>
c0008124:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008129:	0f 85 03 01 00 00    	jne    c0008232 <f_mkfs+0xcc5>
c000812f:	83 ff 01             	cmp    edi,0x1
c0008132:	0f 86 fa 00 00 00    	jbe    c0008232 <f_mkfs+0xcc5>
c0008138:	d1 ef                	shr    edi,1
c000813a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000813e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008142:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008145:	85 db                	test   ebx,ebx
c0008147:	75 2d                	jne    c0008176 <f_mkfs+0xc09>
c0008149:	89 cb                	mov    ebx,ecx
c000814b:	ba 10 98 02 c0       	mov    edx,0xc0029810
c0008150:	c1 eb 11             	shr    ebx,0x11
c0008153:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000815b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000815e:	66 85 c0             	test   ax,ax
c0008161:	74 11                	je     c0008174 <f_mkfs+0xc07>
c0008163:	83 c2 02             	add    edx,0x2
c0008166:	39 d8                	cmp    eax,ebx
c0008168:	77 0a                	ja     c0008174 <f_mkfs+0xc07>
c000816a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000816e:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0008172:	eb e7                	jmp    c000815b <f_mkfs+0xbee>
c0008174:	31 db                	xor    ebx,ebx
c0008176:	31 d2                	xor    edx,edx
c0008178:	89 c8                	mov    eax,ecx
c000817a:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c000817e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0008185:	2d f6 ff 00 00       	sub    eax,0xfff6
c000818a:	c1 ea 09             	shr    edx,0x9
c000818d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0008192:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0008196:	0f 87 96 00 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c000819c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00081a0:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00081a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00081ac:	be 20 00 00 00       	mov    esi,0x20
c00081b1:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00081b6:	e9 a6 fe ff ff       	jmp    c0008061 <f_mkfs+0xaf4>
c00081bb:	83 c2 02             	add    edx,0x2
c00081be:	39 c8                	cmp    eax,ecx
c00081c0:	0f 87 60 fe ff ff    	ja     c0008026 <f_mkfs+0xab9>
c00081c6:	01 ff                	add    edi,edi
c00081c8:	e9 4d fe ff ff       	jmp    c000801a <f_mkfs+0xaad>
c00081cd:	8d 04 40             	lea    eax,[eax+eax*2]
c00081d0:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c00081d5:	40                   	inc    eax
c00081d6:	d1 e8                	shr    eax,1
c00081d8:	83 c0 03             	add    eax,0x3
c00081db:	e9 62 fe ff ff       	jmp    c0008042 <f_mkfs+0xad5>
c00081e0:	31 d2                	xor    edx,edx
c00081e2:	89 c8                	mov    eax,ecx
c00081e4:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c00081e8:	85 d2                	test   edx,edx
c00081ea:	74 0c                	je     c00081f8 <f_mkfs+0xc8b>
c00081ec:	49                   	dec    ecx
c00081ed:	46                   	inc    esi
c00081ee:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00081f3:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c00081f8:	89 c8                	mov    eax,ecx
c00081fa:	31 d2                	xor    edx,edx
c00081fc:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008200:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008204:	e9 c3 fe ff ff       	jmp    c00080cc <f_mkfs+0xb5f>
c0008209:	3d f5 0f 00 00       	cmp    eax,0xff5
c000820e:	77 31                	ja     c0008241 <f_mkfs+0xcd4>
c0008210:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008215:	75 1b                	jne    c0008232 <f_mkfs+0xcc5>
c0008217:	8d 04 3f             	lea    eax,[edi+edi*1]
c000821a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000821e:	3d 80 00 00 00       	cmp    eax,0x80
c0008223:	0f 86 d9 fd ff ff    	jbe    c0008002 <f_mkfs+0xa95>
c0008229:	eb 07                	jmp    c0008232 <f_mkfs+0xcc5>
c000822b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008230:	76 0a                	jbe    c000823c <f_mkfs+0xccf>
c0008232:	bb 0e 00 00 00       	mov    ebx,0xe
c0008237:	e9 ff 03 00 00       	jmp    c000863b <f_mkfs+0x10ce>
c000823c:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008241:	31 d2                	xor    edx,edx
c0008243:	b9 00 02 00 00       	mov    ecx,0x200
c0008248:	89 e8                	mov    eax,ebp
c000824a:	e8 6c 9a ff ff       	call   c0001cbb <mem_set>
c000824f:	b9 0b 00 00 00       	mov    ecx,0xb
c0008254:	ba 22 99 02 c0       	mov    edx,0xc0029922
c0008259:	89 e8                	mov    eax,ebp
c000825b:	e8 46 9a ff ff       	call   c0001ca6 <mem_cpy>
c0008260:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008263:	ba 00 02 00 00       	mov    edx,0x200
c0008268:	e8 2c 9a ff ff       	call   c0001c99 <st_word>
c000826d:	89 f8                	mov    eax,edi
c000826f:	0f b7 d6             	movzx  edx,si
c0008272:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008275:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008278:	e8 1c 9a ff ff       	call   c0001c99 <st_word>
c000827d:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008281:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008286:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008289:	75 08                	jne    c0008293 <f_mkfs+0xd26>
c000828b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008293:	8d 45 11             	lea    eax,[ebp+0x11]
c0008296:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000829a:	e8 fa 99 ff ff       	call   c0001c99 <st_word>
c000829f:	b8 ff ff 00 00       	mov    eax,0xffff
c00082a4:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00082a8:	39 d0                	cmp    eax,edx
c00082aa:	b8 00 00 00 00       	mov    eax,0x0
c00082af:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00082b3:	72 0a                	jb     c00082bf <f_mkfs+0xd52>
c00082b5:	8d 45 13             	lea    eax,[ebp+0x13]
c00082b8:	e8 dc 99 ff ff       	call   c0001c99 <st_word>
c00082bd:	eb 08                	jmp    c00082c7 <f_mkfs+0xd5a>
c00082bf:	8d 45 20             	lea    eax,[ebp+0x20]
c00082c2:	e8 d6 99 ff ff       	call   c0001c9d <st_dword>
c00082c7:	8d 45 18             	lea    eax,[ebp+0x18]
c00082ca:	ba 3f 00 00 00       	mov    edx,0x3f
c00082cf:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00082d3:	e8 c1 99 ff ff       	call   c0001c99 <st_word>
c00082d8:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00082db:	ba ff 00 00 00       	mov    edx,0xff
c00082e0:	e8 b4 99 ff ff       	call   c0001c99 <st_word>
c00082e5:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00082e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00082ec:	e8 ac 99 ff ff       	call   c0001c9d <st_dword>
c00082f1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f6:	75 57                	jne    c000834f <f_mkfs+0xde2>
c00082f8:	8d 45 43             	lea    eax,[ebp+0x43]
c00082fb:	ba 00 00 21 50       	mov    edx,0x50210000
c0008300:	e8 98 99 ff ff       	call   c0001c9d <st_dword>
c0008305:	8d 45 24             	lea    eax,[ebp+0x24]
c0008308:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000830c:	e8 8c 99 ff ff       	call   c0001c9d <st_dword>
c0008311:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008314:	ba 02 00 00 00       	mov    edx,0x2
c0008319:	e8 7f 99 ff ff       	call   c0001c9d <st_dword>
c000831e:	8d 45 30             	lea    eax,[ebp+0x30]
c0008321:	ba 01 00 00 00       	mov    edx,0x1
c0008326:	e8 6e 99 ff ff       	call   c0001c99 <st_word>
c000832b:	8d 45 32             	lea    eax,[ebp+0x32]
c000832e:	ba 06 00 00 00       	mov    edx,0x6
c0008333:	e8 61 99 ff ff       	call   c0001c99 <st_word>
c0008338:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c000833c:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008340:	8d 45 47             	lea    eax,[ebp+0x47]
c0008343:	b9 13 00 00 00       	mov    ecx,0x13
c0008348:	ba 2e 99 02 c0       	mov    edx,0xc002992e
c000834d:	eb 2f                	jmp    c000837e <f_mkfs+0xe11>
c000834f:	8d 45 27             	lea    eax,[ebp+0x27]
c0008352:	ba 00 00 21 50       	mov    edx,0x50210000
c0008357:	e8 41 99 ff ff       	call   c0001c9d <st_dword>
c000835c:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008361:	8d 45 16             	lea    eax,[ebp+0x16]
c0008364:	e8 30 99 ff ff       	call   c0001c99 <st_word>
c0008369:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c000836d:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008371:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008374:	b9 13 00 00 00       	mov    ecx,0x13
c0008379:	ba 42 99 02 c0       	mov    edx,0xc0029942
c000837e:	e8 23 99 ff ff       	call   c0001ca6 <mem_cpy>
c0008383:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008389:	ba 55 aa 00 00       	mov    edx,0xaa55
c000838e:	89 f0                	mov    eax,esi
c0008390:	e8 04 99 ff ff       	call   c0001c99 <st_word>
c0008395:	83 ec 0c             	sub    esp,0xc
c0008398:	6a 01                	push   0x1
c000839a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000839e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00083a2:	55                   	push   ebp
c00083a3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a7:	e8 46 98 ff ff       	call   c0001bf2 <disk_write>
c00083ac:	83 c4 20             	add    esp,0x20
c00083af:	85 c0                	test   eax,eax
c00083b1:	0f 85 67 02 00 00    	jne    c000861e <f_mkfs+0x10b1>
c00083b7:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083bc:	0f 85 b7 00 00 00    	jne    c0008479 <f_mkfs+0xf0c>
c00083c2:	83 ec 0c             	sub    esp,0xc
c00083c5:	6a 01                	push   0x1
c00083c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00083cf:	83 c0 06             	add    eax,0x6
c00083d2:	83 d2 00             	adc    edx,0x0
c00083d5:	52                   	push   edx
c00083d6:	50                   	push   eax
c00083d7:	55                   	push   ebp
c00083d8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083dc:	e8 11 98 ff ff       	call   c0001bf2 <disk_write>
c00083e1:	83 c4 20             	add    esp,0x20
c00083e4:	b9 00 02 00 00       	mov    ecx,0x200
c00083e9:	31 d2                	xor    edx,edx
c00083eb:	89 e8                	mov    eax,ebp
c00083ed:	e8 c9 98 ff ff       	call   c0001cbb <mem_set>
c00083f2:	ba 52 52 61 41       	mov    edx,0x41615252
c00083f7:	89 e8                	mov    eax,ebp
c00083f9:	e8 9f 98 ff ff       	call   c0001c9d <st_dword>
c00083fe:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008404:	ba 72 72 41 61       	mov    edx,0x61417272
c0008409:	e8 8f 98 ff ff       	call   c0001c9d <st_dword>
c000840e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008411:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008417:	e8 81 98 ff ff       	call   c0001c9d <st_dword>
c000841c:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008422:	ba 02 00 00 00       	mov    edx,0x2
c0008427:	e8 71 98 ff ff       	call   c0001c9d <st_dword>
c000842c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008431:	89 f0                	mov    eax,esi
c0008433:	e8 61 98 ff ff       	call   c0001c99 <st_word>
c0008438:	83 ec 0c             	sub    esp,0xc
c000843b:	6a 01                	push   0x1
c000843d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008441:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008445:	83 c0 07             	add    eax,0x7
c0008448:	83 d2 00             	adc    edx,0x0
c000844b:	52                   	push   edx
c000844c:	50                   	push   eax
c000844d:	55                   	push   ebp
c000844e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008452:	e8 9b 97 ff ff       	call   c0001bf2 <disk_write>
c0008457:	83 c4 14             	add    esp,0x14
c000845a:	6a 01                	push   0x1
c000845c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008460:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008464:	83 c0 01             	add    eax,0x1
c0008467:	83 d2 00             	adc    edx,0x0
c000846a:	52                   	push   edx
c000846b:	50                   	push   eax
c000846c:	55                   	push   ebp
c000846d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008471:	e8 7c 97 ff ff       	call   c0001bf2 <disk_write>
c0008476:	83 c4 20             	add    esp,0x20
c0008479:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008480:	31 d2                	xor    edx,edx
c0008482:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008488:	31 db                	xor    ebx,ebx
c000848a:	89 e8                	mov    eax,ebp
c000848c:	e8 2a 98 ff ff       	call   c0001cbb <mem_set>
c0008491:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008496:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000849d:	0f 94 c3             	sete   bl
c00084a0:	4b                   	dec    ebx
c00084a1:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00084a7:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00084ad:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084b2:	75 21                	jne    c00084d5 <f_mkfs+0xf68>
c00084b4:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00084b9:	89 e8                	mov    eax,ebp
c00084bb:	e8 dd 97 ff ff       	call   c0001c9d <st_dword>
c00084c0:	8d 45 04             	lea    eax,[ebp+0x4]
c00084c3:	83 ca ff             	or     edx,0xffffffff
c00084c6:	e8 d2 97 ff ff       	call   c0001c9d <st_dword>
c00084cb:	8d 45 08             	lea    eax,[ebp+0x8]
c00084ce:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00084d3:	eb 04                	jmp    c00084d9 <f_mkfs+0xf6c>
c00084d5:	89 da                	mov    edx,ebx
c00084d7:	89 e8                	mov    eax,ebp
c00084d9:	e8 bf 97 ff ff       	call   c0001c9d <st_dword>
c00084de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00084e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00084e6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00084ea:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00084ee:	39 ce                	cmp    esi,ecx
c00084f0:	76 02                	jbe    c00084f4 <f_mkfs+0xf87>
c00084f2:	89 ce                	mov    esi,ecx
c00084f4:	83 ec 0c             	sub    esp,0xc
c00084f7:	56                   	push   esi
c00084f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00084fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008500:	55                   	push   ebp
c0008501:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008505:	e8 e8 96 ff ff       	call   c0001bf2 <disk_write>
c000850a:	83 c4 20             	add    esp,0x20
c000850d:	85 c0                	test   eax,eax
c000850f:	0f 85 09 01 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0008515:	31 d2                	xor    edx,edx
c0008517:	b9 00 02 00 00       	mov    ecx,0x200
c000851c:	89 e8                	mov    eax,ebp
c000851e:	e8 98 97 ff ff       	call   c0001cbb <mem_set>
c0008523:	31 d2                	xor    edx,edx
c0008525:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008529:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000852d:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008531:	75 b3                	jne    c00084e6 <f_mkfs+0xf79>
c0008533:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008536:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000853d:	40                   	inc    eax
c000853e:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008542:	0f 87 65 ff ff ff    	ja     c00084ad <f_mkfs+0xf40>
c0008548:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000854d:	74 04                	je     c0008553 <f_mkfs+0xfe6>
c000854f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008553:	89 fb                	mov    ebx,edi
c0008555:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008559:	76 04                	jbe    c000855f <f_mkfs+0xff2>
c000855b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000855f:	83 ec 0c             	sub    esp,0xc
c0008562:	53                   	push   ebx
c0008563:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008567:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000856b:	55                   	push   ebp
c000856c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008570:	e8 7d 96 ff ff       	call   c0001bf2 <disk_write>
c0008575:	83 c4 20             	add    esp,0x20
c0008578:	85 c0                	test   eax,eax
c000857a:	0f 85 9e 00 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0008580:	31 d2                	xor    edx,edx
c0008582:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008586:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000858a:	29 df                	sub    edi,ebx
c000858c:	75 c5                	jne    c0008553 <f_mkfs+0xfe6>
c000858e:	b1 0c                	mov    cl,0xc
c0008590:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008595:	74 1d                	je     c00085b4 <f_mkfs+0x1047>
c0008597:	b8 ff ff 00 00       	mov    eax,0xffff
c000859c:	b1 06                	mov    cl,0x6
c000859e:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00085a2:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00085a6:	72 0c                	jb     c00085b4 <f_mkfs+0x1047>
c00085a8:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00085ad:	0f 94 c1             	sete   cl
c00085b0:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00085b4:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00085b9:	75 4c                	jne    c0008607 <f_mkfs+0x109a>
c00085bb:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00085bf:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00085c3:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00085ca:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00085d1:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00085dc:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00085e7:	0f b6 c9             	movzx  ecx,cl
c00085ea:	83 ec 0c             	sub    esp,0xc
c00085ed:	55                   	push   ebp
c00085ee:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00085f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085f9:	e8 f9 bf ff ff       	call   c00045f7 <create_partition>
c00085fe:	83 c4 10             	add    esp,0x10
c0008601:	89 c3                	mov    ebx,eax
c0008603:	85 c0                	test   eax,eax
c0008605:	75 34                	jne    c000863b <f_mkfs+0x10ce>
c0008607:	31 db                	xor    ebx,ebx
c0008609:	50                   	push   eax
c000860a:	6a 00                	push   0x0
c000860c:	6a 00                	push   0x0
c000860e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008612:	e8 f1 95 ff ff       	call   c0001c08 <disk_ioctl>
c0008617:	83 c4 10             	add    esp,0x10
c000861a:	85 c0                	test   eax,eax
c000861c:	74 1d                	je     c000863b <f_mkfs+0x10ce>
c000861e:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008626:	75 0c                	jne    c0008634 <f_mkfs+0x10c7>
c0008628:	83 ec 0c             	sub    esp,0xc
c000862b:	55                   	push   ebp
c000862c:	e8 75 00 00 00       	call   c00086a6 <ff_memfree>
c0008631:	83 c4 10             	add    esp,0x10
c0008634:	bb 01 00 00 00       	mov    ebx,0x1
c0008639:	eb 48                	jmp    c0008683 <f_mkfs+0x1116>
c000863b:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008643:	75 3e                	jne    c0008683 <f_mkfs+0x1116>
c0008645:	83 ec 0c             	sub    esp,0xc
c0008648:	55                   	push   ebp
c0008649:	e8 58 00 00 00       	call   c00086a6 <ff_memfree>
c000864e:	83 c4 10             	add    esp,0x10
c0008651:	eb 30                	jmp    c0008683 <f_mkfs+0x1116>
c0008653:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008658:	0f 85 eb fa ff ff    	jne    c0008149 <f_mkfs+0xbdc>
c000865e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008662:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008668:	0f 86 b8 f9 ff ff    	jbe    c0008026 <f_mkfs+0xab9>
c000866e:	e9 bf fb ff ff       	jmp    c0008232 <f_mkfs+0xcc5>
c0008673:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008678:	0f 85 c0 fa ff ff    	jne    c000813e <f_mkfs+0xbd1>
c000867e:	e9 af fb ff ff       	jmp    c0008232 <f_mkfs+0xcc5>
c0008683:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008689:	89 d8                	mov    eax,ebx
c000868b:	5b                   	pop    ebx
c000868c:	5e                   	pop    esi
c000868d:	5f                   	pop    edi
c000868e:	5d                   	pop    ebp
c000868f:	c3                   	ret    

c0008690 <ff_memalloc>:
c0008690:	83 ec 0c             	sub    esp,0xc
c0008693:	83 ec 0c             	sub    esp,0xc
c0008696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000869a:	e8 ca 72 00 00       	call   c000f969 <malloc>
c000869f:	83 c4 10             	add    esp,0x10
c00086a2:	83 c4 0c             	add    esp,0xc
c00086a5:	c3                   	ret    

c00086a6 <ff_memfree>:
c00086a6:	83 ec 0c             	sub    esp,0xc
c00086a9:	83 ec 0c             	sub    esp,0xc
c00086ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00086b0:	e8 c4 72 00 00       	call   c000f979 <free>
c00086b5:	83 c4 10             	add    esp,0x10
c00086b8:	90                   	nop
c00086b9:	83 c4 0c             	add    esp,0xc
c00086bc:	c3                   	ret    

c00086bd <ff_uni2oem>:
c00086bd:	83 ec 14             	sub    esp,0x14
c00086c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00086c4:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086c8:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00086cf:	c7 44 24 0c 60 9c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029c60
c00086d7:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00086dc:	77 0b                	ja     c00086e9 <ff_uni2oem+0x2c>
c00086de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00086e2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00086e7:	eb 5b                	jmp    c0008744 <ff_uni2oem+0x87>
c00086e9:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00086f1:	77 51                	ja     c0008744 <ff_uni2oem+0x87>
c00086f3:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086f9:	75 49                	jne    c0008744 <ff_uni2oem+0x87>
c00086fb:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008702:	eb 0b                	jmp    c000870f <ff_uni2oem+0x52>
c0008704:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008709:	40                   	inc    eax
c000870a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000870f:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008715:	77 1b                	ja     c0008732 <ff_uni2oem+0x75>
c0008717:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000871c:	01 c0                	add    eax,eax
c000871e:	89 c2                	mov    edx,eax
c0008720:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008724:	01 d0                	add    eax,edx
c0008726:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008729:	0f b7 c0             	movzx  eax,ax
c000872c:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008730:	75 d2                	jne    c0008704 <ff_uni2oem+0x47>
c0008732:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008737:	83 e8 80             	sub    eax,0xffffff80
c000873a:	25 ff 00 00 00       	and    eax,0xff
c000873f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008744:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008749:	83 c4 14             	add    esp,0x14
c000874c:	c3                   	ret    

c000874d <ff_oem2uni>:
c000874d:	83 ec 18             	sub    esp,0x18
c0008750:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008758:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000875d:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008761:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008768:	c7 44 24 10 60 9c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029c60
c0008770:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008776:	77 0b                	ja     c0008783 <ff_oem2uni+0x36>
c0008778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000877c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008781:	eb 2d                	jmp    c00087b0 <ff_oem2uni+0x63>
c0008783:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008789:	75 25                	jne    c00087b0 <ff_oem2uni+0x63>
c000878b:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008792:	77 1c                	ja     c00087b0 <ff_oem2uni+0x63>
c0008794:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008799:	05 80 ff ff 7f       	add    eax,0x7fffff80
c000879e:	01 c0                	add    eax,eax
c00087a0:	89 c2                	mov    edx,eax
c00087a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00087a6:	01 d0                	add    eax,edx
c00087a8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087ab:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00087b0:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00087b5:	83 c4 18             	add    esp,0x18
c00087b8:	c3                   	ret    

c00087b9 <ff_wtoupper>:
c00087b9:	83 ec 10             	sub    esp,0x10
c00087bc:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00087c4:	0f 87 3e 01 00 00    	ja     c0008908 <ff_wtoupper+0x14f>
c00087ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087ce:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087d3:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00087da:	77 07                	ja     c00087e3 <ff_wtoupper+0x2a>
c00087dc:	b8 60 9a 02 c0       	mov    eax,0xc0029a60
c00087e1:	eb 05                	jmp    c00087e8 <ff_wtoupper+0x2f>
c00087e3:	b8 a0 99 02 c0       	mov    eax,0xc00299a0
c00087e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087f0:	8d 50 02             	lea    edx,[eax+0x2]
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087fa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00087ff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008805:	0f 84 f4 00 00 00    	je     c00088ff <ff_wtoupper+0x146>
c000880b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008810:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008815:	0f 82 e4 00 00 00    	jb     c00088ff <ff_wtoupper+0x146>
c000881b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000881f:	8d 50 02             	lea    edx,[eax+0x2]
c0008822:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008826:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008829:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000882e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008833:	66 c1 e8 08          	shr    ax,0x8
c0008837:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000883c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008843:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008848:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000884d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008852:	01 ca                	add    edx,ecx
c0008854:	39 d0                	cmp    eax,edx
c0008856:	0f 8d 86 00 00 00    	jge    c00088e2 <ff_wtoupper+0x129>
c000885c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008861:	83 f8 08             	cmp    eax,0x8
c0008864:	0f 87 94 00 00 00    	ja     c00088fe <ff_wtoupper+0x145>
c000886a:	8b 04 85 60 99 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd66a0]
c0008871:	ff e0                	jmp    eax
c0008873:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008878:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000887d:	29 c2                	sub    edx,eax
c000887f:	89 d0                	mov    eax,edx
c0008881:	01 c0                	add    eax,eax
c0008883:	89 c2                	mov    edx,eax
c0008885:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008889:	01 d0                	add    eax,edx
c000888b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000888e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008893:	eb 4b                	jmp    c00088e0 <ff_wtoupper+0x127>
c0008895:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000889a:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000889e:	83 e0 01             	and    eax,0x1
c00088a1:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00088a6:	eb 38                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088a8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00088ae:	eb 30                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088b0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00088b6:	eb 28                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088b8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00088be:	eb 20                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088c0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00088c6:	eb 18                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088c8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00088ce:	eb 10                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088d0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00088d6:	eb 08                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088d8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00088df:	90                   	nop
c00088e0:	eb 1c                	jmp    c00088fe <ff_wtoupper+0x145>
c00088e2:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00088e8:	0f 85 fe fe ff ff    	jne    c00087ec <ff_wtoupper+0x33>
c00088ee:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00088f3:	01 c0                	add    eax,eax
c00088f5:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00088f9:	e9 ee fe ff ff       	jmp    c00087ec <ff_wtoupper+0x33>
c00088fe:	90                   	nop
c00088ff:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008904:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008908:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000890c:	83 c4 10             	add    esp,0x10
c000890f:	c3                   	ret    

c0008910 <psrc_set_converter>:
c0008910:	56                   	push   esi
c0008911:	89 d6                	mov    esi,edx
c0008913:	53                   	push   ebx
c0008914:	89 c3                	mov    ebx,eax
c0008916:	83 ec 0c             	sub    esp,0xc
c0008919:	52                   	push   edx
c000891a:	50                   	push   eax
c000891b:	e8 6f 55 00 00       	call   c000de8f <sinc_set_converter>
c0008920:	83 c4 10             	add    esp,0x10
c0008923:	85 c0                	test   eax,eax
c0008925:	74 25                	je     c000894c <psrc_set_converter+0x3c>
c0008927:	50                   	push   eax
c0008928:	50                   	push   eax
c0008929:	56                   	push   esi
c000892a:	53                   	push   ebx
c000892b:	e8 17 5d 00 00       	call   c000e647 <zoh_set_converter>
c0008930:	83 c4 10             	add    esp,0x10
c0008933:	85 c0                	test   eax,eax
c0008935:	74 15                	je     c000894c <psrc_set_converter+0x3c>
c0008937:	51                   	push   ecx
c0008938:	51                   	push   ecx
c0008939:	56                   	push   esi
c000893a:	53                   	push   ebx
c000893b:	e8 0f 11 00 00       	call   c0009a4f <linear_set_converter>
c0008940:	83 c4 10             	add    esp,0x10
c0008943:	ba 0a 00 00 00       	mov    edx,0xa
c0008948:	85 c0                	test   eax,eax
c000894a:	75 02                	jne    c000894e <psrc_set_converter+0x3e>
c000894c:	31 d2                	xor    edx,edx
c000894e:	89 d0                	mov    eax,edx
c0008950:	5a                   	pop    edx
c0008951:	5b                   	pop    ebx
c0008952:	5e                   	pop    esi
c0008953:	c3                   	ret    

c0008954 <src_delete>:
c0008954:	53                   	push   ebx
c0008955:	83 ec 08             	sub    esp,0x8
c0008958:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000895c:	85 db                	test   ebx,ebx
c000895e:	74 29                	je     c0008989 <src_delete+0x35>
c0008960:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008963:	85 c0                	test   eax,eax
c0008965:	74 0c                	je     c0008973 <src_delete+0x1f>
c0008967:	83 ec 0c             	sub    esp,0xc
c000896a:	50                   	push   eax
c000896b:	e8 09 70 00 00       	call   c000f979 <free>
c0008970:	83 c4 10             	add    esp,0x10
c0008973:	50                   	push   eax
c0008974:	6a 3c                	push   0x3c
c0008976:	6a 00                	push   0x0
c0008978:	53                   	push   ebx
c0008979:	e8 d2 7d ff ff       	call   c0000750 <memset>
c000897e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008981:	e8 f3 6f 00 00       	call   c000f979 <free>
c0008986:	83 c4 10             	add    esp,0x10
c0008989:	31 c0                	xor    eax,eax
c000898b:	83 c4 08             	add    esp,0x8
c000898e:	5b                   	pop    ebx
c000898f:	c3                   	ret    

c0008990 <src_process>:
c0008990:	55                   	push   ebp
c0008991:	57                   	push   edi
c0008992:	56                   	push   esi
c0008993:	53                   	push   ebx
c0008994:	83 ec 1c             	sub    esp,0x1c
c0008997:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000899b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000899f:	85 ed                	test   ebp,ebp
c00089a1:	0f 84 6f 01 00 00    	je     c0008b16 <src_process+0x186>
c00089a7:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00089ab:	0f 84 6c 01 00 00    	je     c0008b1d <src_process+0x18d>
c00089b1:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00089b5:	0f 84 62 01 00 00    	je     c0008b1d <src_process+0x18d>
c00089bb:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00089c2:	0f 85 5c 01 00 00    	jne    c0008b24 <src_process+0x194>
c00089c8:	85 db                	test   ebx,ebx
c00089ca:	0f 84 5b 01 00 00    	je     c0008b2b <src_process+0x19b>
c00089d0:	8b 33                	mov    esi,DWORD PTR [ebx]
c00089d2:	85 f6                	test   esi,esi
c00089d4:	0f 84 58 01 00 00    	je     c0008b32 <src_process+0x1a2>
c00089da:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00089dd:	85 ff                	test   edi,edi
c00089df:	0f 84 4d 01 00 00    	je     c0008b32 <src_process+0x1a2>
c00089e5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00089e8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00089eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00089f3:	68 00 00 70 3f       	push   0x3f700000
c00089f8:	6a 00                	push   0x0
c00089fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00089fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a02:	e8 60 fe 01 00       	call   c0028867 <__ltdf2>
c0008a07:	83 c4 10             	add    esp,0x10
c0008a0a:	85 c0                	test   eax,eax
c0008a0c:	0f 88 27 01 00 00    	js     c0008b39 <src_process+0x1a9>
c0008a12:	68 00 00 70 40       	push   0x40700000
c0008a17:	6a 00                	push   0x0
c0008a19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a21:	e8 23 fe 01 00       	call   c0028849 <__gtdf2>
c0008a26:	83 c4 10             	add    esp,0x10
c0008a29:	85 c0                	test   eax,eax
c0008a2b:	0f 8f 08 01 00 00    	jg     c0008b39 <src_process+0x1a9>
c0008a31:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008a35:	79 07                	jns    c0008a3e <src_process+0xae>
c0008a37:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008a3e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008a41:	85 c0                	test   eax,eax
c0008a43:	79 50                	jns    c0008a95 <src_process+0x105>
c0008a45:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008a4c:	39 fe                	cmp    esi,edi
c0008a4e:	72 37                	jb     c0008a87 <src_process+0xf7>
c0008a50:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008a57:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008a5e:	68 00 00 70 3f       	push   0x3f700000
c0008a63:	6a 00                	push   0x0
c0008a65:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008a68:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008a6b:	e8 f7 fd 01 00       	call   c0028867 <__ltdf2>
c0008a70:	83 c4 10             	add    esp,0x10
c0008a73:	85 c0                	test   eax,eax
c0008a75:	79 37                	jns    c0008aae <src_process+0x11e>
c0008a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008a7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008a7f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008a82:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008a85:	eb 27                	jmp    c0008aae <src_process+0x11e>
c0008a87:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008a8a:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008a8e:	8d 04 86             	lea    eax,[esi+eax*4]
c0008a91:	39 c7                	cmp    edi,eax
c0008a93:	eb 0d                	jmp    c0008aa2 <src_process+0x112>
c0008a95:	39 fe                	cmp    esi,edi
c0008a97:	72 ee                	jb     c0008a87 <src_process+0xf7>
c0008a99:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008a9d:	8d 04 87             	lea    eax,[edi+eax*4]
c0008aa0:	39 c6                	cmp    esi,eax
c0008aa2:	73 ac                	jae    c0008a50 <src_process+0xc0>
c0008aa4:	b8 10 00 00 00       	mov    eax,0x10
c0008aa9:	e9 90 00 00 00       	jmp    c0008b3e <src_process+0x1ae>
c0008aae:	83 ec 10             	sub    esp,0x10
c0008ab1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008ab4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008ab7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008aba:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008abd:	e8 aa f4 01 00       	call   c0027f6c <__subdf3>
c0008ac2:	83 c4 18             	add    esp,0x18
c0008ac5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ac9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008acd:	52                   	push   edx
c0008ace:	50                   	push   eax
c0008acf:	e8 2c ff 01 00       	call   c0028a00 <fabs>
c0008ad4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ad8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008adc:	83 c4 10             	add    esp,0x10
c0008adf:	68 af 03 d2 3c       	push   0x3cd203af
c0008ae4:	68 16 56 e7 9e       	push   0x9ee75616
c0008ae9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008aed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008af1:	e8 71 fd 01 00       	call   c0028867 <__ltdf2>
c0008af6:	83 c4 10             	add    esp,0x10
c0008af9:	85 c0                	test   eax,eax
c0008afb:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008aff:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008b03:	79 05                	jns    c0008b0a <src_process+0x17a>
c0008b05:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c0008b08:	eb 03                	jmp    c0008b0d <src_process+0x17d>
c0008b0a:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008b0d:	83 c4 1c             	add    esp,0x1c
c0008b10:	5b                   	pop    ebx
c0008b11:	5e                   	pop    esi
c0008b12:	5f                   	pop    edi
c0008b13:	5d                   	pop    ebp
c0008b14:	ff e0                	jmp    eax
c0008b16:	b8 02 00 00 00       	mov    eax,0x2
c0008b1b:	eb 21                	jmp    c0008b3e <src_process+0x1ae>
c0008b1d:	b8 07 00 00 00       	mov    eax,0x7
c0008b22:	eb 1a                	jmp    c0008b3e <src_process+0x1ae>
c0008b24:	b8 12 00 00 00       	mov    eax,0x12
c0008b29:	eb 13                	jmp    c0008b3e <src_process+0x1ae>
c0008b2b:	b8 03 00 00 00       	mov    eax,0x3
c0008b30:	eb 0c                	jmp    c0008b3e <src_process+0x1ae>
c0008b32:	b8 04 00 00 00       	mov    eax,0x4
c0008b37:	eb 05                	jmp    c0008b3e <src_process+0x1ae>
c0008b39:	b8 06 00 00 00       	mov    eax,0x6
c0008b3e:	83 c4 1c             	add    esp,0x1c
c0008b41:	5b                   	pop    ebx
c0008b42:	5e                   	pop    esi
c0008b43:	5f                   	pop    edi
c0008b44:	5d                   	pop    ebp
c0008b45:	c3                   	ret    

c0008b46 <src_callback_read>:
c0008b46:	55                   	push   ebp
c0008b47:	57                   	push   edi
c0008b48:	56                   	push   esi
c0008b49:	53                   	push   ebx
c0008b4a:	83 ec 3c             	sub    esp,0x3c
c0008b4d:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008b51:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008b55:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008b59:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008b5d:	85 ed                	test   ebp,ebp
c0008b5f:	0f 8e 52 01 00 00    	jle    c0008cb7 <src_callback_read+0x171>
c0008b65:	85 db                	test   ebx,ebx
c0008b67:	0f 84 4a 01 00 00    	je     c0008cb7 <src_callback_read+0x171>
c0008b6d:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008b74:	74 0c                	je     c0008b82 <src_callback_read+0x3c>
c0008b76:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008b7d:	e9 35 01 00 00       	jmp    c0008cb7 <src_callback_read+0x171>
c0008b82:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008b86:	75 0c                	jne    c0008b94 <src_callback_read+0x4e>
c0008b88:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008b8f:	e9 23 01 00 00       	jmp    c0008cb7 <src_callback_read+0x171>
c0008b94:	51                   	push   ecx
c0008b95:	6a 24                	push   0x24
c0008b97:	6a 00                	push   0x0
c0008b99:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008b9d:	50                   	push   eax
c0008b9e:	e8 ad 7b ff ff       	call   c0000750 <memset>
c0008ba3:	83 c4 10             	add    esp,0x10
c0008ba6:	68 00 00 70 3f       	push   0x3f700000
c0008bab:	6a 00                	push   0x0
c0008bad:	57                   	push   edi
c0008bae:	56                   	push   esi
c0008baf:	e8 b3 fc 01 00       	call   c0028867 <__ltdf2>
c0008bb4:	83 c4 10             	add    esp,0x10
c0008bb7:	85 c0                	test   eax,eax
c0008bb9:	78 3e                	js     c0008bf9 <src_callback_read+0xb3>
c0008bbb:	68 00 00 70 40       	push   0x40700000
c0008bc0:	6a 00                	push   0x0
c0008bc2:	57                   	push   edi
c0008bc3:	56                   	push   esi
c0008bc4:	e8 80 fc 01 00       	call   c0028849 <__gtdf2>
c0008bc9:	83 c4 10             	add    esp,0x10
c0008bcc:	85 c0                	test   eax,eax
c0008bce:	7f 29                	jg     c0008bf9 <src_callback_read+0xb3>
c0008bd0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008bd4:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0008bd8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bdc:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008be0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008be3:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0008be7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008beb:	31 f6                	xor    esi,esi
c0008bed:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0008bf0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008bf4:	e9 97 00 00 00       	jmp    c0008c90 <src_callback_read+0x14a>
c0008bf9:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008c00:	e9 b2 00 00 00       	jmp    c0008cb7 <src_callback_read+0x171>
c0008c05:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008c09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c0d:	52                   	push   edx
c0008c0e:	52                   	push   edx
c0008c0f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008c13:	50                   	push   eax
c0008c14:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008c17:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008c1a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008c1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008c22:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008c26:	83 c4 10             	add    esp,0x10
c0008c29:	85 c0                	test   eax,eax
c0008c2b:	75 08                	jne    c0008c35 <src_callback_read+0xef>
c0008c2d:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008c35:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008c3c:	50                   	push   eax
c0008c3d:	50                   	push   eax
c0008c3e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008c42:	50                   	push   eax
c0008c43:	53                   	push   ebx
c0008c44:	e8 47 fd ff ff       	call   c0008990 <src_process>
c0008c49:	83 c4 10             	add    esp,0x10
c0008c4c:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c53:	85 c0                	test   eax,eax
c0008c55:	75 49                	jne    c0008ca0 <src_callback_read+0x15a>
c0008c57:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008c5b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008c5e:	89 f9                	mov    ecx,edi
c0008c60:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008c64:	0f af ca             	imul   ecx,edx
c0008c67:	c1 e1 02             	shl    ecx,0x2
c0008c6a:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008c6e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008c72:	0f af d1             	imul   edx,ecx
c0008c75:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008c79:	c1 e2 02             	shl    edx,0x2
c0008c7c:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008c80:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008c83:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008c88:	74 12                	je     c0008c9c <src_callback_read+0x156>
c0008c8a:	39 d5                	cmp    ebp,edx
c0008c8c:	7e 14                	jle    c0008ca2 <src_callback_read+0x15c>
c0008c8e:	89 d6                	mov    esi,edx
c0008c90:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008c95:	75 9e                	jne    c0008c35 <src_callback_read+0xef>
c0008c97:	e9 69 ff ff ff       	jmp    c0008c05 <src_callback_read+0xbf>
c0008c9c:	85 c9                	test   ecx,ecx
c0008c9e:	75 ea                	jne    c0008c8a <src_callback_read+0x144>
c0008ca0:	89 f2                	mov    edx,esi
c0008ca2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008ca6:	85 c0                	test   eax,eax
c0008ca8:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008cab:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008caf:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008cb2:	74 05                	je     c0008cb9 <src_callback_read+0x173>
c0008cb4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008cb7:	31 d2                	xor    edx,edx
c0008cb9:	83 c4 3c             	add    esp,0x3c
c0008cbc:	89 d0                	mov    eax,edx
c0008cbe:	5b                   	pop    ebx
c0008cbf:	5e                   	pop    esi
c0008cc0:	5f                   	pop    edi
c0008cc1:	5d                   	pop    ebp
c0008cc2:	c3                   	ret    

c0008cc3 <src_set_ratio>:
c0008cc3:	57                   	push   edi
c0008cc4:	ba 02 00 00 00       	mov    edx,0x2
c0008cc9:	56                   	push   esi
c0008cca:	53                   	push   ebx
c0008ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ccf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008cd3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008cd7:	85 db                	test   ebx,ebx
c0008cd9:	74 4c                	je     c0008d27 <src_set_ratio+0x64>
c0008cdb:	ba 07 00 00 00       	mov    edx,0x7
c0008ce0:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ce4:	74 41                	je     c0008d27 <src_set_ratio+0x64>
c0008ce6:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008cea:	74 3b                	je     c0008d27 <src_set_ratio+0x64>
c0008cec:	68 00 00 70 3f       	push   0x3f700000
c0008cf1:	6a 00                	push   0x0
c0008cf3:	57                   	push   edi
c0008cf4:	56                   	push   esi
c0008cf5:	e8 6d fb 01 00       	call   c0028867 <__ltdf2>
c0008cfa:	83 c4 10             	add    esp,0x10
c0008cfd:	ba 06 00 00 00       	mov    edx,0x6
c0008d02:	85 c0                	test   eax,eax
c0008d04:	78 21                	js     c0008d27 <src_set_ratio+0x64>
c0008d06:	68 00 00 70 40       	push   0x40700000
c0008d0b:	6a 00                	push   0x0
c0008d0d:	57                   	push   edi
c0008d0e:	56                   	push   esi
c0008d0f:	e8 35 fb 01 00       	call   c0028849 <__gtdf2>
c0008d14:	83 c4 10             	add    esp,0x10
c0008d17:	ba 06 00 00 00       	mov    edx,0x6
c0008d1c:	85 c0                	test   eax,eax
c0008d1e:	7f 07                	jg     c0008d27 <src_set_ratio+0x64>
c0008d20:	89 33                	mov    DWORD PTR [ebx],esi
c0008d22:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008d25:	31 d2                	xor    edx,edx
c0008d27:	5b                   	pop    ebx
c0008d28:	89 d0                	mov    eax,edx
c0008d2a:	5e                   	pop    esi
c0008d2b:	5f                   	pop    edi
c0008d2c:	c3                   	ret    

c0008d2d <src_get_channels>:
c0008d2d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d31:	b8 02 00 00 00       	mov    eax,0x2
c0008d36:	85 d2                	test   edx,edx
c0008d38:	74 14                	je     c0008d4e <src_get_channels+0x21>
c0008d3a:	b8 07 00 00 00       	mov    eax,0x7
c0008d3f:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008d43:	74 09                	je     c0008d4e <src_get_channels+0x21>
c0008d45:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008d49:	74 03                	je     c0008d4e <src_get_channels+0x21>
c0008d4b:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008d4e:	c3                   	ret    

c0008d4f <src_reset>:
c0008d4f:	53                   	push   ebx
c0008d50:	b8 02 00 00 00       	mov    eax,0x2
c0008d55:	83 ec 08             	sub    esp,0x8
c0008d58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008d5c:	85 db                	test   ebx,ebx
c0008d5e:	74 36                	je     c0008d96 <src_reset+0x47>
c0008d60:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008d63:	85 c0                	test   eax,eax
c0008d65:	74 09                	je     c0008d70 <src_reset+0x21>
c0008d67:	83 ec 0c             	sub    esp,0xc
c0008d6a:	53                   	push   ebx
c0008d6b:	ff d0                	call   eax
c0008d6d:	83 c4 10             	add    esp,0x10
c0008d70:	31 c0                	xor    eax,eax
c0008d72:	31 d2                	xor    edx,edx
c0008d74:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008d77:	89 03                	mov    DWORD PTR [ebx],eax
c0008d79:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008d7c:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008d7f:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008d86:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008d8d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008d94:	31 c0                	xor    eax,eax
c0008d96:	83 c4 08             	add    esp,0x8
c0008d99:	5b                   	pop    ebx
c0008d9a:	c3                   	ret    

c0008d9b <src_new>:
c0008d9b:	57                   	push   edi
c0008d9c:	56                   	push   esi
c0008d9d:	53                   	push   ebx
c0008d9e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008da2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008da6:	85 f6                	test   esi,esi
c0008da8:	74 73                	je     c0008e1d <src_new+0x82>
c0008daa:	85 ff                	test   edi,edi
c0008dac:	7f 08                	jg     c0008db6 <src_new+0x1b>
c0008dae:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008db4:	eb 1e                	jmp    c0008dd4 <src_new+0x39>
c0008db6:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008dbc:	50                   	push   eax
c0008dbd:	50                   	push   eax
c0008dbe:	6a 3c                	push   0x3c
c0008dc0:	6a 01                	push   0x1
c0008dc2:	e8 d2 6b 00 00       	call   c000f999 <calloc>
c0008dc7:	83 c4 10             	add    esp,0x10
c0008dca:	89 c3                	mov    ebx,eax
c0008dcc:	85 c0                	test   eax,eax
c0008dce:	75 10                	jne    c0008de0 <src_new+0x45>
c0008dd0:	85 f6                	test   esi,esi
c0008dd2:	75 04                	jne    c0008dd8 <src_new+0x3d>
c0008dd4:	31 db                	xor    ebx,ebx
c0008dd6:	eb 4b                	jmp    c0008e23 <src_new+0x88>
c0008dd8:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008dde:	eb 43                	jmp    c0008e23 <src_new+0x88>
c0008de0:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008de3:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008dea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008dee:	e8 1d fb ff ff       	call   c0008910 <psrc_set_converter>
c0008df3:	85 c0                	test   eax,eax
c0008df5:	74 18                	je     c0008e0f <src_new+0x74>
c0008df7:	85 f6                	test   esi,esi
c0008df9:	74 06                	je     c0008e01 <src_new+0x66>
c0008dfb:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008e01:	83 ec 0c             	sub    esp,0xc
c0008e04:	53                   	push   ebx
c0008e05:	31 db                	xor    ebx,ebx
c0008e07:	e8 6d 6b 00 00       	call   c000f979 <free>
c0008e0c:	83 c4 10             	add    esp,0x10
c0008e0f:	83 ec 0c             	sub    esp,0xc
c0008e12:	53                   	push   ebx
c0008e13:	e8 37 ff ff ff       	call   c0008d4f <src_reset>
c0008e18:	83 c4 10             	add    esp,0x10
c0008e1b:	eb 06                	jmp    c0008e23 <src_new+0x88>
c0008e1d:	85 ff                	test   edi,edi
c0008e1f:	7f 9b                	jg     c0008dbc <src_new+0x21>
c0008e21:	eb b1                	jmp    c0008dd4 <src_new+0x39>
c0008e23:	89 d8                	mov    eax,ebx
c0008e25:	5b                   	pop    ebx
c0008e26:	5e                   	pop    esi
c0008e27:	5f                   	pop    edi
c0008e28:	c3                   	ret    

c0008e29 <src_callback_new>:
c0008e29:	56                   	push   esi
c0008e2a:	53                   	push   ebx
c0008e2b:	53                   	push   ebx
c0008e2c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008e30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008e34:	85 f6                	test   esi,esi
c0008e36:	75 0e                	jne    c0008e46 <src_callback_new+0x1d>
c0008e38:	31 db                	xor    ebx,ebx
c0008e3a:	85 c0                	test   eax,eax
c0008e3c:	74 47                	je     c0008e85 <src_callback_new+0x5c>
c0008e3e:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008e44:	eb 3f                	jmp    c0008e85 <src_callback_new+0x5c>
c0008e46:	85 c0                	test   eax,eax
c0008e48:	74 06                	je     c0008e50 <src_callback_new+0x27>
c0008e4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008e50:	51                   	push   ecx
c0008e51:	50                   	push   eax
c0008e52:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e5a:	e8 3c ff ff ff       	call   c0008d9b <src_new>
c0008e5f:	83 c4 10             	add    esp,0x10
c0008e62:	89 c3                	mov    ebx,eax
c0008e64:	85 c0                	test   eax,eax
c0008e66:	74 1d                	je     c0008e85 <src_callback_new+0x5c>
c0008e68:	83 ec 0c             	sub    esp,0xc
c0008e6b:	50                   	push   eax
c0008e6c:	e8 de fe ff ff       	call   c0008d4f <src_reset>
c0008e71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e75:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008e7c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008e7f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008e82:	83 c4 10             	add    esp,0x10
c0008e85:	89 d8                	mov    eax,ebx
c0008e87:	5a                   	pop    edx
c0008e88:	5b                   	pop    ebx
c0008e89:	5e                   	pop    esi
c0008e8a:	c3                   	ret    

c0008e8b <src_get_name>:
c0008e8b:	53                   	push   ebx
c0008e8c:	83 ec 14             	sub    esp,0x14
c0008e8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008e93:	53                   	push   ebx
c0008e94:	e8 d0 4f 00 00       	call   c000de69 <sinc_get_name>
c0008e99:	83 c4 10             	add    esp,0x10
c0008e9c:	85 c0                	test   eax,eax
c0008e9e:	75 1d                	jne    c0008ebd <src_get_name+0x32>
c0008ea0:	83 ec 0c             	sub    esp,0xc
c0008ea3:	53                   	push   ebx
c0008ea4:	e8 80 57 00 00       	call   c000e629 <zoh_get_name>
c0008ea9:	83 c4 10             	add    esp,0x10
c0008eac:	85 c0                	test   eax,eax
c0008eae:	75 0d                	jne    c0008ebd <src_get_name+0x32>
c0008eb0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008eb4:	83 c4 08             	add    esp,0x8
c0008eb7:	5b                   	pop    ebx
c0008eb8:	e9 74 0b 00 00       	jmp    c0009a31 <linear_get_name>
c0008ebd:	83 c4 08             	add    esp,0x8
c0008ec0:	5b                   	pop    ebx
c0008ec1:	c3                   	ret    

c0008ec2 <src_get_description>:
c0008ec2:	53                   	push   ebx
c0008ec3:	83 ec 14             	sub    esp,0x14
c0008ec6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008eca:	53                   	push   ebx
c0008ecb:	e8 ac 4f 00 00       	call   c000de7c <sinc_get_description>
c0008ed0:	83 c4 10             	add    esp,0x10
c0008ed3:	85 c0                	test   eax,eax
c0008ed5:	75 1d                	jne    c0008ef4 <src_get_description+0x32>
c0008ed7:	83 ec 0c             	sub    esp,0xc
c0008eda:	53                   	push   ebx
c0008edb:	e8 58 57 00 00       	call   c000e638 <zoh_get_description>
c0008ee0:	83 c4 10             	add    esp,0x10
c0008ee3:	85 c0                	test   eax,eax
c0008ee5:	75 0d                	jne    c0008ef4 <src_get_description+0x32>
c0008ee7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008eeb:	83 c4 08             	add    esp,0x8
c0008eee:	5b                   	pop    ebx
c0008eef:	e9 4c 0b 00 00       	jmp    c0009a40 <linear_get_description>
c0008ef4:	83 c4 08             	add    esp,0x8
c0008ef7:	5b                   	pop    ebx
c0008ef8:	c3                   	ret    

c0008ef9 <src_get_version>:
c0008ef9:	b8 60 9d 02 c0       	mov    eax,0xc0029d60
c0008efe:	c3                   	ret    

c0008eff <src_is_valid_ratio>:
c0008eff:	83 ec 1c             	sub    esp,0x1c
c0008f02:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f0a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	68 00 00 70 3f       	push   0x3f700000
c0008f17:	6a 00                	push   0x0
c0008f19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	e8 41 f9 01 00       	call   c0028867 <__ltdf2>
c0008f26:	83 c4 10             	add    esp,0x10
c0008f29:	31 d2                	xor    edx,edx
c0008f2b:	85 c0                	test   eax,eax
c0008f2d:	78 1e                	js     c0008f4d <src_is_valid_ratio+0x4e>
c0008f2f:	68 00 00 70 40       	push   0x40700000
c0008f34:	6a 00                	push   0x0
c0008f36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3e:	e8 06 f9 01 00       	call   c0028849 <__gtdf2>
c0008f43:	31 d2                	xor    edx,edx
c0008f45:	83 c4 10             	add    esp,0x10
c0008f48:	85 c0                	test   eax,eax
c0008f4a:	0f 9e c2             	setle  dl
c0008f4d:	89 d0                	mov    eax,edx
c0008f4f:	83 c4 1c             	add    esp,0x1c
c0008f52:	c3                   	ret    

c0008f53 <src_error>:
c0008f53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008f57:	31 c0                	xor    eax,eax
c0008f59:	85 d2                	test   edx,edx
c0008f5b:	74 03                	je     c0008f60 <src_error+0xd>
c0008f5d:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008f60:	c3                   	ret    

c0008f61 <src_strerror>:
c0008f61:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008f65:	31 c0                	xor    eax,eax
c0008f67:	83 fa 17             	cmp    edx,0x17
c0008f6a:	77 07                	ja     c0008f73 <src_strerror+0x12>
c0008f6c:	8b 04 95 c0 a1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5e40]
c0008f73:	c3                   	ret    

c0008f74 <src_simple>:
c0008f74:	56                   	push   esi
c0008f75:	53                   	push   ebx
c0008f76:	83 ec 18             	sub    esp,0x18
c0008f79:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f7d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008f81:	50                   	push   eax
c0008f82:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008f86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008f8a:	e8 0c fe ff ff       	call   c0008d9b <src_new>
c0008f8f:	83 c4 10             	add    esp,0x10
c0008f92:	85 c0                	test   eax,eax
c0008f94:	75 06                	jne    c0008f9c <src_simple+0x28>
c0008f96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008f9a:	eb 25                	jmp    c0008fc1 <src_simple+0x4d>
c0008f9c:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008fa3:	89 c3                	mov    ebx,eax
c0008fa5:	50                   	push   eax
c0008fa6:	50                   	push   eax
c0008fa7:	56                   	push   esi
c0008fa8:	53                   	push   ebx
c0008fa9:	e8 e2 f9 ff ff       	call   c0008990 <src_process>
c0008fae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008fb1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fb5:	e8 9a f9 ff ff       	call   c0008954 <src_delete>
c0008fba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fbe:	83 c4 10             	add    esp,0x10
c0008fc1:	83 c4 14             	add    esp,0x14
c0008fc4:	5b                   	pop    ebx
c0008fc5:	5e                   	pop    esi
c0008fc6:	c3                   	ret    

c0008fc7 <src_short_to_float_array>:
c0008fc7:	53                   	push   ebx
c0008fc8:	83 ec 18             	sub    esp,0x18
c0008fcb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008fcf:	85 db                	test   ebx,ebx
c0008fd1:	74 54                	je     c0009027 <src_short_to_float_array+0x60>
c0008fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fd7:	4b                   	dec    ebx
c0008fd8:	83 ec 0c             	sub    esp,0xc
c0008fdb:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008fdf:	50                   	push   eax
c0008fe0:	e8 16 f6 01 00       	call   c00285fb <__floatsidf>
c0008fe5:	83 c4 10             	add    esp,0x10
c0008fe8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ff0:	68 00 00 00 3f       	push   0x3f000000
c0008ff5:	6a 00                	push   0x0
c0008ff7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ffb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fff:	e8 94 ef 01 00       	call   c0027f98 <__muldf3>
c0009004:	59                   	pop    ecx
c0009005:	59                   	pop    ecx
c0009006:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000900a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000900e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009012:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009016:	e8 50 f8 01 00       	call   c002886b <__truncdfsf2>
c000901b:	83 c4 10             	add    esp,0x10
c000901e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009022:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0009025:	eb a8                	jmp    c0008fcf <src_short_to_float_array+0x8>
c0009027:	83 c4 18             	add    esp,0x18
c000902a:	5b                   	pop    ebx
c000902b:	c3                   	ret    

c000902c <src_float_to_short_array>:
c000902c:	56                   	push   esi
c000902d:	53                   	push   ebx
c000902e:	83 ec 14             	sub    esp,0x14
c0009031:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009035:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0009039:	85 db                	test   ebx,ebx
c000903b:	0f 84 a4 00 00 00    	je     c00090e5 <src_float_to_short_array+0xb9>
c0009041:	83 ec 0c             	sub    esp,0xc
c0009044:	4b                   	dec    ebx
c0009045:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009049:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c000904c:	e8 3e f9 01 00       	call   c002898f <__extendsfdf2>
c0009051:	83 c4 10             	add    esp,0x10
c0009054:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009058:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000905c:	68 00 00 e0 41       	push   0x41e00000
c0009061:	6a 00                	push   0x0
c0009063:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009067:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000906b:	e8 28 ef 01 00       	call   c0027f98 <__muldf3>
c0009070:	83 c4 10             	add    esp,0x10
c0009073:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009077:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000907b:	68 ff ff df 41       	push   0x41dfffff
c0009080:	68 00 00 c0 ff       	push   0xffc00000
c0009085:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009089:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000908d:	e8 d3 f7 01 00       	call   c0028865 <__gedf2>
c0009092:	83 c4 10             	add    esp,0x10
c0009095:	85 c0                	test   eax,eax
c0009097:	78 08                	js     c00090a1 <src_float_to_short_array+0x75>
c0009099:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c000909f:	eb 98                	jmp    c0009039 <src_float_to_short_array+0xd>
c00090a1:	68 00 00 e0 c1       	push   0xc1e00000
c00090a6:	6a 00                	push   0x0
c00090a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b0:	e8 b4 f7 01 00       	call   c0028869 <__ledf2>
c00090b5:	83 c4 10             	add    esp,0x10
c00090b8:	85 c0                	test   eax,eax
c00090ba:	7f 0b                	jg     c00090c7 <src_float_to_short_array+0x9b>
c00090bc:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c00090c2:	e9 72 ff ff ff       	jmp    c0009039 <src_float_to_short_array+0xd>
c00090c7:	50                   	push   eax
c00090c8:	50                   	push   eax
c00090c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090d1:	e8 4a f9 01 00       	call   c0028a20 <lrint>
c00090d6:	83 c4 10             	add    esp,0x10
c00090d9:	c1 f8 10             	sar    eax,0x10
c00090dc:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00090e0:	e9 54 ff ff ff       	jmp    c0009039 <src_float_to_short_array+0xd>
c00090e5:	83 c4 14             	add    esp,0x14
c00090e8:	5b                   	pop    ebx
c00090e9:	5e                   	pop    esi
c00090ea:	c3                   	ret    

c00090eb <src_int_to_float_array>:
c00090eb:	53                   	push   ebx
c00090ec:	83 ec 18             	sub    esp,0x18
c00090ef:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00090f3:	85 db                	test   ebx,ebx
c00090f5:	74 52                	je     c0009149 <src_int_to_float_array+0x5e>
c00090f7:	83 ec 0c             	sub    esp,0xc
c00090fa:	4b                   	dec    ebx
c00090fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00090ff:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0009102:	e8 f4 f4 01 00       	call   c00285fb <__floatsidf>
c0009107:	83 c4 10             	add    esp,0x10
c000910a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000910e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009112:	68 00 00 00 3e       	push   0x3e000000
c0009117:	6a 00                	push   0x0
c0009119:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000911d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009121:	e8 72 ee 01 00       	call   c0027f98 <__muldf3>
c0009126:	59                   	pop    ecx
c0009127:	59                   	pop    ecx
c0009128:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000912c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009138:	e8 2e f7 01 00       	call   c002886b <__truncdfsf2>
c000913d:	83 c4 10             	add    esp,0x10
c0009140:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009144:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0009147:	eb aa                	jmp    c00090f3 <src_int_to_float_array+0x8>
c0009149:	83 c4 18             	add    esp,0x18
c000914c:	5b                   	pop    ebx
c000914d:	c3                   	ret    

c000914e <src_float_to_int_array>:
c000914e:	56                   	push   esi
c000914f:	53                   	push   ebx
c0009150:	83 ec 14             	sub    esp,0x14
c0009153:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009157:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000915b:	85 db                	test   ebx,ebx
c000915d:	0f 84 a2 00 00 00    	je     c0009205 <src_float_to_int_array+0xb7>
c0009163:	83 ec 0c             	sub    esp,0xc
c0009166:	4b                   	dec    ebx
c0009167:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000916b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c000916e:	e8 1c f8 01 00       	call   c002898f <__extendsfdf2>
c0009173:	83 c4 10             	add    esp,0x10
c0009176:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000917a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000917e:	68 00 00 e0 41       	push   0x41e00000
c0009183:	6a 00                	push   0x0
c0009185:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009189:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000918d:	e8 06 ee 01 00       	call   c0027f98 <__muldf3>
c0009192:	83 c4 10             	add    esp,0x10
c0009195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000919d:	68 ff ff df 41       	push   0x41dfffff
c00091a2:	68 00 00 c0 ff       	push   0xffc00000
c00091a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091af:	e8 b1 f6 01 00       	call   c0028865 <__gedf2>
c00091b4:	83 c4 10             	add    esp,0x10
c00091b7:	85 c0                	test   eax,eax
c00091b9:	78 09                	js     c00091c4 <src_float_to_int_array+0x76>
c00091bb:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c00091c2:	eb 97                	jmp    c000915b <src_float_to_int_array+0xd>
c00091c4:	68 00 00 e0 c1       	push   0xc1e00000
c00091c9:	6a 00                	push   0x0
c00091cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091d3:	e8 91 f6 01 00       	call   c0028869 <__ledf2>
c00091d8:	83 c4 10             	add    esp,0x10
c00091db:	85 c0                	test   eax,eax
c00091dd:	7f 0c                	jg     c00091eb <src_float_to_int_array+0x9d>
c00091df:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c00091e6:	e9 70 ff ff ff       	jmp    c000915b <src_float_to_int_array+0xd>
c00091eb:	50                   	push   eax
c00091ec:	50                   	push   eax
c00091ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f5:	e8 26 f8 01 00       	call   c0028a20 <lrint>
c00091fa:	83 c4 10             	add    esp,0x10
c00091fd:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009200:	e9 56 ff ff ff       	jmp    c000915b <src_float_to_int_array+0xd>
c0009205:	83 c4 14             	add    esp,0x14
c0009208:	5b                   	pop    ebx
c0009209:	5e                   	pop    esi
c000920a:	c3                   	ret    

c000920b <linear_vari_process>:
c000920b:	55                   	push   ebp
c000920c:	31 d2                	xor    edx,edx
c000920e:	57                   	push   edi
c000920f:	56                   	push   esi
c0009210:	53                   	push   ebx
c0009211:	83 ec 3c             	sub    esp,0x3c
c0009214:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0009218:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000921c:	0f 8e d3 07 00 00    	jle    c00099f5 <linear_vari_process+0x7ea>
c0009222:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009226:	ba 05 00 00 00       	mov    edx,0x5
c000922b:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000922e:	85 db                	test   ebx,ebx
c0009230:	0f 84 bf 07 00 00    	je     c00099f5 <linear_vari_process+0x7ea>
c0009236:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009239:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000923d:	74 19                	je     c0009258 <linear_vari_process+0x4d>
c000923f:	31 d2                	xor    edx,edx
c0009241:	39 c2                	cmp    edx,eax
c0009243:	7d 0c                	jge    c0009251 <linear_vari_process+0x46>
c0009245:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009247:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000924a:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000924e:	42                   	inc    edx
c000924f:	eb f0                	jmp    c0009241 <linear_vari_process+0x36>
c0009251:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009258:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000925b:	0f af d0             	imul   edx,eax
c000925e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009261:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009265:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000926c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000926f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009276:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000927a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000927d:	8b 00                	mov    eax,DWORD PTR [eax]
c000927f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009283:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009287:	68 00 00 70 3f       	push   0x3f700000
c000928c:	6a 00                	push   0x0
c000928e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009296:	e8 cc f5 01 00       	call   c0028867 <__ltdf2>
c000929b:	83 c4 10             	add    esp,0x10
c000929e:	ba 16 00 00 00       	mov    edx,0x16
c00092a3:	85 c0                	test   eax,eax
c00092a5:	0f 88 4a 07 00 00    	js     c00099f5 <linear_vari_process+0x7ea>
c00092ab:	68 00 00 70 40       	push   0x40700000
c00092b0:	6a 00                	push   0x0
c00092b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092ba:	e8 8a f5 01 00       	call   c0028849 <__gtdf2>
c00092bf:	83 c4 10             	add    esp,0x10
c00092c2:	ba 16 00 00 00       	mov    edx,0x16
c00092c7:	85 c0                	test   eax,eax
c00092c9:	0f 8f 26 07 00 00    	jg     c00099f5 <linear_vari_process+0x7ea>
c00092cf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092d3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00092d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00092d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092e1:	68 00 00 f0 3f       	push   0x3ff00000
c00092e6:	6a 00                	push   0x0
c00092e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092f0:	e8 72 f5 01 00       	call   c0028867 <__ltdf2>
c00092f5:	83 c4 10             	add    esp,0x10
c00092f8:	85 c0                	test   eax,eax
c00092fa:	0f 89 89 02 00 00    	jns    c0009589 <linear_vari_process+0x37e>
c0009300:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009303:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0009306:	0f 8d 7d 02 00 00    	jge    c0009589 <linear_vari_process+0x37e>
c000930c:	83 ec 0c             	sub    esp,0xc
c000930f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009312:	e8 e4 f2 01 00       	call   c00285fb <__floatsidf>
c0009317:	83 c4 10             	add    esp,0x10
c000931a:	89 04 24             	mov    DWORD PTR [esp],eax
c000931d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009321:	68 00 00 f0 3f       	push   0x3ff00000
c0009326:	6a 00                	push   0x0
c0009328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000932c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009330:	e8 e6 e5 01 00       	call   c002791b <__adddf3>
c0009335:	83 c4 10             	add    esp,0x10
c0009338:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000933c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009340:	52                   	push   edx
c0009341:	50                   	push   eax
c0009342:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000934a:	e8 49 ec 01 00       	call   c0027f98 <__muldf3>
c000934f:	5d                   	pop    ebp
c0009350:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009354:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009358:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000935b:	e8 9b f2 01 00       	call   c00285fb <__floatsidf>
c0009360:	83 c4 10             	add    esp,0x10
c0009363:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009367:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000936b:	52                   	push   edx
c000936c:	50                   	push   eax
c000936d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009371:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009375:	e8 a1 e5 01 00       	call   c002791b <__adddf3>
c000937a:	59                   	pop    ecx
c000937b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000937f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009383:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009386:	e8 70 f2 01 00       	call   c00285fb <__floatsidf>
c000938b:	83 c4 10             	add    esp,0x10
c000938e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009392:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009396:	52                   	push   edx
c0009397:	50                   	push   eax
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093a0:	e8 c0 f4 01 00       	call   c0028865 <__gedf2>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	85 c0                	test   eax,eax
c00093aa:	0f 89 d9 01 00 00    	jns    c0009589 <linear_vari_process+0x37e>
c00093b0:	85 ff                	test   edi,edi
c00093b2:	0f 8e f4 00 00 00    	jle    c00094ac <linear_vari_process+0x2a1>
c00093b8:	83 ec 10             	sub    esp,0x10
c00093bb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00093be:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00093c1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00093c5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00093c8:	ff 30                	push   DWORD PTR [eax]
c00093ca:	e8 9d eb 01 00       	call   c0027f6c <__subdf3>
c00093cf:	83 c4 18             	add    esp,0x18
c00093d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093da:	52                   	push   edx
c00093db:	50                   	push   eax
c00093dc:	e8 1f f6 01 00       	call   c0028a00 <fabs>
c00093e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00093f1:	68 23 42 92 0c       	push   0xc924223
c00093f6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093fe:	e8 46 f4 01 00       	call   c0028849 <__gtdf2>
c0009403:	83 c4 10             	add    esp,0x10
c0009406:	85 c0                	test   eax,eax
c0009408:	0f 8e 9e 00 00 00    	jle    c00094ac <linear_vari_process+0x2a1>
c000940e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009412:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009415:	8b 00                	mov    eax,DWORD PTR [eax]
c0009417:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000941b:	89 04 24             	mov    DWORD PTR [esp],eax
c000941e:	52                   	push   edx
c000941f:	50                   	push   eax
c0009420:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009423:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009426:	e8 41 eb 01 00       	call   c0027f6c <__subdf3>
c000942b:	59                   	pop    ecx
c000942c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009430:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009434:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009437:	e8 bf f1 01 00       	call   c00285fb <__floatsidf>
c000943c:	83 c4 10             	add    esp,0x10
c000943f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009443:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009447:	52                   	push   edx
c0009448:	50                   	push   eax
c0009449:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009451:	e8 42 eb 01 00       	call   c0027f98 <__muldf3>
c0009456:	5f                   	pop    edi
c0009457:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000945b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000945f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009462:	e8 94 f1 01 00       	call   c00285fb <__floatsidf>
c0009467:	83 c4 10             	add    esp,0x10
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	52                   	push   edx
c0009473:	50                   	push   eax
c0009474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947c:	e8 fb ed 01 00       	call   c002827c <__divdf3>
c0009481:	83 c4 10             	add    esp,0x10
c0009484:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009488:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000948c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009490:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000949c:	e8 7a e4 01 00       	call   c002791b <__adddf3>
c00094a1:	83 c4 10             	add    esp,0x10
c00094a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ac:	31 ff                	xor    edi,edi
c00094ae:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00094b1:	0f 8e 9d 00 00 00    	jle    c0009554 <linear_vari_process+0x349>
c00094b7:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00094ba:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00094be:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00094c1:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00094c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00094c8:	8b 06                	mov    eax,DWORD PTR [esi]
c00094ca:	52                   	push   edx
c00094cb:	52                   	push   edx
c00094cc:	55                   	push   ebp
c00094cd:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00094d0:	47                   	inc    edi
c00094d1:	e8 da dd 01 00       	call   c00272b0 <__subsf3>
c00094d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00094d9:	e8 b1 f4 01 00       	call   c002898f <__extendsfdf2>
c00094de:	83 c4 10             	add    esp,0x10
c00094e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094e5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f9:	e8 9a ea 01 00       	call   c0027f98 <__muldf3>
c00094fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009501:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009505:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009509:	e8 81 f4 01 00       	call   c002898f <__extendsfdf2>
c000950e:	83 c4 10             	add    esp,0x10
c0009511:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009515:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009519:	52                   	push   edx
c000951a:	50                   	push   eax
c000951b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000951f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009523:	e8 f3 e3 01 00       	call   c002791b <__adddf3>
c0009528:	59                   	pop    ecx
c0009529:	5d                   	pop    ebp
c000952a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000952e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009532:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009536:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000953a:	e8 2c f3 01 00       	call   c002886b <__truncdfsf2>
c000953f:	83 c4 10             	add    esp,0x10
c0009542:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009545:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009549:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000954c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000954f:	e9 5a ff ff ff       	jmp    c00094ae <linear_vari_process+0x2a3>
c0009554:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009558:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000955c:	68 00 00 f0 3f       	push   0x3ff00000
c0009561:	6a 00                	push   0x0
c0009563:	e8 14 ed 01 00       	call   c002827c <__divdf3>
c0009568:	83 c4 10             	add    esp,0x10
c000956b:	89 04 24             	mov    DWORD PTR [esp],eax
c000956e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009578:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000957c:	e8 9a e3 01 00       	call   c002791b <__adddf3>
c0009581:	83 c4 10             	add    esp,0x10
c0009584:	e9 50 fd ff ff       	jmp    c00092d9 <linear_vari_process+0xce>
c0009589:	50                   	push   eax
c000958a:	50                   	push   eax
c000958b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000958f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009593:	e8 88 f4 01 00       	call   c0028a20 <lrint>
c0009598:	83 ec 0c             	sub    esp,0xc
c000959b:	50                   	push   eax
c000959c:	e8 5a f0 01 00       	call   c00285fb <__floatsidf>
c00095a1:	83 c4 10             	add    esp,0x10
c00095a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095ac:	52                   	push   edx
c00095ad:	50                   	push   eax
c00095ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095b6:	e8 b1 e9 01 00       	call   c0027f6c <__subdf3>
c00095bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00095bf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00095c3:	83 c4 20             	add    esp,0x20
c00095c6:	6a 00                	push   0x0
c00095c8:	6a 00                	push   0x0
c00095ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095d2:	e8 90 f2 01 00       	call   c0028867 <__ltdf2>
c00095d7:	83 c4 10             	add    esp,0x10
c00095da:	85 c0                	test   eax,eax
c00095dc:	79 1e                	jns    c00095fc <linear_vari_process+0x3f1>
c00095de:	68 00 00 f0 3f       	push   0x3ff00000
c00095e3:	6a 00                	push   0x0
c00095e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095ed:	e8 29 e3 01 00       	call   c002791b <__adddf3>
c00095f2:	83 c4 10             	add    esp,0x10
c00095f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00095f8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00095fc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00095ff:	83 ec 10             	sub    esp,0x10
c0009602:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000960a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000960e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009612:	e8 55 e9 01 00       	call   c0027f6c <__subdf3>
c0009617:	83 c4 18             	add    esp,0x18
c000961a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000961e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009622:	52                   	push   edx
c0009623:	50                   	push   eax
c0009624:	e8 f7 f3 01 00       	call   c0028a20 <lrint>
c0009629:	83 c4 10             	add    esp,0x10
c000962c:	0f af f8             	imul   edi,eax
c000962f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009632:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009635:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009638:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000963b:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000963e:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009642:	0f 8d 13 03 00 00    	jge    c000995b <linear_vari_process+0x750>
c0009648:	83 ec 0c             	sub    esp,0xc
c000964b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000964e:	e8 a8 ef 01 00       	call   c00285fb <__floatsidf>
c0009653:	83 c4 10             	add    esp,0x10
c0009656:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000965a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000965e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009662:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000966a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000966e:	e8 25 e9 01 00       	call   c0027f98 <__muldf3>
c0009673:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000967a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000967e:	e8 78 ef 01 00       	call   c00285fb <__floatsidf>
c0009683:	83 c4 10             	add    esp,0x10
c0009686:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000968a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000968e:	52                   	push   edx
c000968f:	50                   	push   eax
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	e8 7e e2 01 00       	call   c002791b <__adddf3>
c000969d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00096a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00096a4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096a8:	e8 4e ef 01 00       	call   c00285fb <__floatsidf>
c00096ad:	83 c4 10             	add    esp,0x10
c00096b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00096b4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096b8:	52                   	push   edx
c00096b9:	50                   	push   eax
c00096ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c2:	e8 a0 f1 01 00       	call   c0028867 <__ltdf2>
c00096c7:	83 c4 10             	add    esp,0x10
c00096ca:	85 c0                	test   eax,eax
c00096cc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096d0:	0f 89 85 02 00 00    	jns    c000995b <linear_vari_process+0x750>
c00096d6:	85 c9                	test   ecx,ecx
c00096d8:	0f 8e f5 00 00 00    	jle    c00097d3 <linear_vari_process+0x5c8>
c00096de:	83 ec 10             	sub    esp,0x10
c00096e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00096e4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00096e7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00096eb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00096ee:	ff 30                	push   DWORD PTR [eax]
c00096f0:	e8 77 e8 01 00       	call   c0027f6c <__subdf3>
c00096f5:	83 c4 18             	add    esp,0x18
c00096f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096fc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009700:	52                   	push   edx
c0009701:	50                   	push   eax
c0009702:	e8 f9 f2 01 00       	call   c0028a00 <fabs>
c0009707:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000970b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000970f:	83 c4 10             	add    esp,0x10
c0009712:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009717:	68 23 42 92 0c       	push   0xc924223
c000971c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009720:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009724:	e8 20 f1 01 00       	call   c0028849 <__gtdf2>
c0009729:	83 c4 10             	add    esp,0x10
c000972c:	85 c0                	test   eax,eax
c000972e:	0f 8e 9f 00 00 00    	jle    c00097d3 <linear_vari_process+0x5c8>
c0009734:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009738:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000973b:	8b 00                	mov    eax,DWORD PTR [eax]
c000973d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009741:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000974a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000974d:	e8 1a e8 01 00       	call   c0027f6c <__subdf3>
c0009752:	5f                   	pop    edi
c0009753:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009757:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000975b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000975e:	e8 98 ee 01 00       	call   c00285fb <__floatsidf>
c0009763:	83 c4 10             	add    esp,0x10
c0009766:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000976a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000976e:	52                   	push   edx
c000976f:	50                   	push   eax
c0009770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009778:	e8 1b e8 01 00       	call   c0027f98 <__muldf3>
c000977d:	5d                   	pop    ebp
c000977e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009782:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009786:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009789:	e8 6d ee 01 00       	call   c00285fb <__floatsidf>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009795:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009799:	52                   	push   edx
c000979a:	50                   	push   eax
c000979b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000979f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097a3:	e8 d4 ea 01 00       	call   c002827c <__divdf3>
c00097a8:	83 c4 10             	add    esp,0x10
c00097ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00097af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00097b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00097b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00097bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097c3:	e8 53 e1 01 00       	call   c002791b <__adddf3>
c00097c8:	83 c4 10             	add    esp,0x10
c00097cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00097cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00097d3:	31 ff                	xor    edi,edi
c00097d5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00097d8:	39 f8                	cmp    eax,edi
c00097da:	0f 8e ac 00 00 00    	jle    c000988c <linear_vari_process+0x681>
c00097e0:	8b 16                	mov    edx,DWORD PTR [esi]
c00097e2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00097e5:	29 c1                	sub    ecx,eax
c00097e7:	89 c8                	mov    eax,ecx
c00097e9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00097ec:	01 f8                	add    eax,edi
c00097ee:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00097f2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00097f5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097fc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097ff:	51                   	push   ecx
c0009800:	01 f8                	add    eax,edi
c0009802:	51                   	push   ecx
c0009803:	47                   	inc    edi
c0009804:	55                   	push   ebp
c0009805:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009808:	e8 a3 da 01 00       	call   c00272b0 <__subsf3>
c000980d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009810:	e8 7a f1 01 00       	call   c002898f <__extendsfdf2>
c0009815:	83 c4 10             	add    esp,0x10
c0009818:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000981c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009820:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009824:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009828:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000982c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009830:	e8 63 e7 01 00       	call   c0027f98 <__muldf3>
c0009835:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009838:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000983c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009840:	e8 4a f1 01 00       	call   c002898f <__extendsfdf2>
c0009845:	83 c4 10             	add    esp,0x10
c0009848:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000984c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009850:	52                   	push   edx
c0009851:	50                   	push   eax
c0009852:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009856:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000985a:	e8 bc e0 01 00       	call   c002791b <__adddf3>
c000985f:	5d                   	pop    ebp
c0009860:	59                   	pop    ecx
c0009861:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009865:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009869:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000986d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009871:	e8 f5 ef 01 00       	call   c002886b <__truncdfsf2>
c0009876:	83 c4 10             	add    esp,0x10
c0009879:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000987d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009881:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009884:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009887:	e9 49 ff ff ff       	jmp    c00097d5 <linear_vari_process+0x5ca>
c000988c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009890:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009894:	68 00 00 f0 3f       	push   0x3ff00000
c0009899:	6a 00                	push   0x0
c000989b:	e8 dc e9 01 00       	call   c002827c <__divdf3>
c00098a0:	83 c4 10             	add    esp,0x10
c00098a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ab:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00098af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00098b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098bb:	e8 5b e0 01 00       	call   c002791b <__adddf3>
c00098c0:	59                   	pop    ecx
c00098c1:	5f                   	pop    edi
c00098c2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00098c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00098ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d2:	e8 49 f1 01 00       	call   c0028a20 <lrint>
c00098d7:	83 ec 0c             	sub    esp,0xc
c00098da:	50                   	push   eax
c00098db:	e8 1b ed 01 00       	call   c00285fb <__floatsidf>
c00098e0:	83 c4 10             	add    esp,0x10
c00098e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00098e7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00098eb:	52                   	push   edx
c00098ec:	50                   	push   eax
c00098ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098f5:	e8 72 e6 01 00       	call   c0027f6c <__subdf3>
c00098fa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098fe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009902:	83 c4 20             	add    esp,0x20
c0009905:	6a 00                	push   0x0
c0009907:	6a 00                	push   0x0
c0009909:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000990d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009911:	e8 51 ef 01 00       	call   c0028867 <__ltdf2>
c0009916:	83 c4 10             	add    esp,0x10
c0009919:	85 c0                	test   eax,eax
c000991b:	79 1e                	jns    c000993b <linear_vari_process+0x730>
c000991d:	68 00 00 f0 3f       	push   0x3ff00000
c0009922:	6a 00                	push   0x0
c0009924:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009928:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000992c:	e8 ea df 01 00       	call   c002791b <__adddf3>
c0009931:	83 c4 10             	add    esp,0x10
c0009934:	89 04 24             	mov    DWORD PTR [esp],eax
c0009937:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000993b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000993e:	83 ec 10             	sub    esp,0x10
c0009941:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009945:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009949:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000994d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009951:	e8 16 e6 01 00       	call   c0027f6c <__subdf3>
c0009956:	e9 bc fc ff ff       	jmp    c0009617 <linear_vari_process+0x40c>
c000995b:	39 fd                	cmp    ebp,edi
c000995d:	7d 38                	jge    c0009997 <linear_vari_process+0x78c>
c000995f:	83 ec 0c             	sub    esp,0xc
c0009962:	89 f8                	mov    eax,edi
c0009964:	29 e8                	sub    eax,ebp
c0009966:	99                   	cdq    
c0009967:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000996a:	50                   	push   eax
c000996b:	e8 8b ec 01 00       	call   c00285fb <__floatsidf>
c0009970:	83 c4 10             	add    esp,0x10
c0009973:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009977:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000997b:	52                   	push   edx
c000997c:	50                   	push   eax
c000997d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009981:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009985:	e8 91 df 01 00       	call   c002791b <__adddf3>
c000998a:	83 c4 10             	add    esp,0x10
c000998d:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009990:	89 04 24             	mov    DWORD PTR [esp],eax
c0009993:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009997:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000999b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000999e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00099a2:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00099a5:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00099a8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00099ab:	85 c0                	test   eax,eax
c00099ad:	7f 29                	jg     c00099d8 <linear_vari_process+0x7cd>
c00099af:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00099b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00099bb:	89 01                	mov    DWORD PTR [ecx],eax
c00099bd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00099c0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00099c3:	99                   	cdq    
c00099c4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00099c7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00099ca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00099cd:	99                   	cdq    
c00099ce:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00099d1:	31 d2                	xor    edx,edx
c00099d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00099d6:	eb 1d                	jmp    c00099f5 <linear_vari_process+0x7ea>
c00099d8:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00099db:	31 d2                	xor    edx,edx
c00099dd:	29 c8                	sub    eax,ecx
c00099df:	c1 e0 02             	shl    eax,0x2
c00099e2:	39 d1                	cmp    ecx,edx
c00099e4:	7e c9                	jle    c00099af <linear_vari_process+0x7a4>
c00099e6:	8b 3e                	mov    edi,DWORD PTR [esi]
c00099e8:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00099eb:	83 c0 04             	add    eax,0x4
c00099ee:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00099f2:	42                   	inc    edx
c00099f3:	eb ed                	jmp    c00099e2 <linear_vari_process+0x7d7>
c00099f5:	83 c4 3c             	add    esp,0x3c
c00099f8:	89 d0                	mov    eax,edx
c00099fa:	5b                   	pop    ebx
c00099fb:	5e                   	pop    esi
c00099fc:	5f                   	pop    edi
c00099fd:	5d                   	pop    ebp
c00099fe:	c3                   	ret    

c00099ff <linear_reset>:
c00099ff:	83 ec 0c             	sub    esp,0xc
c0009a02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a06:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0009a09:	85 c0                	test   eax,eax
c0009a0b:	74 20                	je     c0009a2d <linear_reset+0x2e>
c0009a0d:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009a10:	83 c0 1c             	add    eax,0x1c
c0009a13:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009a16:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009a1d:	c1 e2 02             	shl    edx,0x2
c0009a20:	51                   	push   ecx
c0009a21:	52                   	push   edx
c0009a22:	6a 00                	push   0x0
c0009a24:	50                   	push   eax
c0009a25:	e8 26 6d ff ff       	call   c0000750 <memset>
c0009a2a:	83 c4 10             	add    esp,0x10
c0009a2d:	83 c4 0c             	add    esp,0xc
c0009a30:	c3                   	ret    

c0009a31 <linear_get_name>:
c0009a31:	31 c0                	xor    eax,eax
c0009a33:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009a38:	75 05                	jne    c0009a3f <linear_get_name+0xe>
c0009a3a:	b8 20 a2 02 c0       	mov    eax,0xc002a220
c0009a3f:	c3                   	ret    

c0009a40 <linear_get_description>:
c0009a40:	31 c0                	xor    eax,eax
c0009a42:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009a47:	75 05                	jne    c0009a4e <linear_get_description+0xe>
c0009a49:	b8 34 a2 02 c0       	mov    eax,0xc002a234
c0009a4e:	c3                   	ret    

c0009a4f <linear_set_converter>:
c0009a4f:	53                   	push   ebx
c0009a50:	b8 0a 00 00 00       	mov    eax,0xa
c0009a55:	83 ec 08             	sub    esp,0x8
c0009a58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009a5c:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009a61:	75 6e                	jne    c0009ad1 <linear_set_converter+0x82>
c0009a63:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009a66:	85 c0                	test   eax,eax
c0009a68:	74 13                	je     c0009a7d <linear_set_converter+0x2e>
c0009a6a:	83 ec 0c             	sub    esp,0xc
c0009a6d:	50                   	push   eax
c0009a6e:	e8 06 5f 00 00       	call   c000f979 <free>
c0009a73:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009a7a:	83 c4 10             	add    esp,0x10
c0009a7d:	50                   	push   eax
c0009a7e:	50                   	push   eax
c0009a7f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009a82:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009a89:	50                   	push   eax
c0009a8a:	6a 01                	push   0x1
c0009a8c:	e8 08 5f 00 00       	call   c000f999 <calloc>
c0009a91:	83 c4 10             	add    esp,0x10
c0009a94:	89 c2                	mov    edx,eax
c0009a96:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009a99:	85 d2                	test   edx,edx
c0009a9b:	b8 01 00 00 00       	mov    eax,0x1
c0009aa0:	74 2f                	je     c0009ad1 <linear_set_converter+0x82>
c0009aa2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009aa5:	83 ec 0c             	sub    esp,0xc
c0009aa8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009aab:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009ab1:	c7 43 24 0b 92 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000920b
c0009ab8:	c7 43 20 0b 92 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000920b
c0009abf:	c7 43 28 ff 99 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00099ff
c0009ac6:	53                   	push   ebx
c0009ac7:	e8 33 ff ff ff       	call   c00099ff <linear_reset>
c0009acc:	83 c4 10             	add    esp,0x10
c0009acf:	31 c0                	xor    eax,eax
c0009ad1:	83 c4 08             	add    esp,0x8
c0009ad4:	5b                   	pop    ebx
c0009ad5:	c3                   	ret    

c0009ad6 <int_to_fp>:
c0009ad6:	c1 e0 0c             	shl    eax,0xc
c0009ad9:	c3                   	ret    

c0009ada <fp_to_int>:
c0009ada:	c1 f8 0c             	sar    eax,0xc
c0009add:	c3                   	ret    

c0009ade <fp_fraction_part>:
c0009ade:	25 ff 0f 00 00       	and    eax,0xfff
c0009ae3:	c3                   	ret    

c0009ae4 <fp_to_double>:
c0009ae4:	83 ec 1c             	sub    esp,0x1c
c0009ae7:	e8 f2 ff ff ff       	call   c0009ade <fp_fraction_part>
c0009aec:	83 ec 0c             	sub    esp,0xc
c0009aef:	50                   	push   eax
c0009af0:	e8 06 eb 01 00       	call   c00285fb <__floatsidf>
c0009af5:	83 c4 10             	add    esp,0x10
c0009af8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009afc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009b00:	68 00 00 30 3f       	push   0x3f300000
c0009b05:	6a 00                	push   0x0
c0009b07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b0f:	e8 84 e4 01 00       	call   c0027f98 <__muldf3>
c0009b14:	83 c4 2c             	add    esp,0x2c
c0009b17:	c3                   	ret    

c0009b18 <calc_output_single>:
c0009b18:	55                   	push   ebp
c0009b19:	57                   	push   edi
c0009b1a:	56                   	push   esi
c0009b1b:	89 c6                	mov    esi,eax
c0009b1d:	53                   	push   ebx
c0009b1e:	89 d3                	mov    ebx,edx
c0009b20:	83 ec 4c             	sub    esp,0x4c
c0009b23:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009b27:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009b2a:	e8 a7 ff ff ff       	call   c0009ad6 <int_to_fp>
c0009b2f:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009b32:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b36:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009b3a:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009b3e:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009b41:	99                   	cdq    
c0009b42:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009b4a:	f7 fb                	idiv   ebx
c0009b4c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009b54:	89 da                	mov    edx,ebx
c0009b56:	0f af d0             	imul   edx,eax
c0009b59:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009b61:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009b65:	29 c2                	sub    edx,eax
c0009b67:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b6e:	83 c5 04             	add    ebp,0x4
c0009b71:	e8 6e ff ff ff       	call   c0009ae4 <fp_to_double>
c0009b76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009b7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b82:	e8 53 ff ff ff       	call   c0009ada <fp_to_int>
c0009b87:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009b8a:	52                   	push   edx
c0009b8b:	52                   	push   edx
c0009b8c:	51                   	push   ecx
c0009b8d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009b91:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009b95:	e8 16 d7 01 00       	call   c00272b0 <__subsf3>
c0009b9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b9d:	e8 ed ed 01 00       	call   c002898f <__extendsfdf2>
c0009ba2:	83 c4 10             	add    esp,0x10
c0009ba5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009ba9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009bad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009bb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009bb5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bb9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bbd:	e8 d6 e3 01 00       	call   c0027f98 <__muldf3>
c0009bc2:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009bc6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bca:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009bcd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bd1:	e8 b9 ed 01 00       	call   c002898f <__extendsfdf2>
c0009bd6:	83 c4 10             	add    esp,0x10
c0009bd9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009bdd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009be1:	52                   	push   edx
c0009be2:	50                   	push   eax
c0009be3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009be7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009beb:	e8 2b dd 01 00       	call   c002791b <__adddf3>
c0009bf0:	59                   	pop    ecx
c0009bf1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009bf5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009bf9:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009bff:	e8 8b ed 01 00       	call   c002898f <__extendsfdf2>
c0009c04:	83 c4 10             	add    esp,0x10
c0009c07:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c0b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c0f:	52                   	push   edx
c0009c10:	50                   	push   eax
c0009c11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c19:	e8 7a e3 01 00       	call   c0027f98 <__muldf3>
c0009c1e:	83 c4 10             	add    esp,0x10
c0009c21:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c25:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c29:	52                   	push   edx
c0009c2a:	50                   	push   eax
c0009c2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c33:	e8 e3 dc 01 00       	call   c002791b <__adddf3>
c0009c38:	83 c4 10             	add    esp,0x10
c0009c3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c43:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009c47:	0f 89 1d ff ff ff    	jns    c0009b6a <calc_output_single+0x52>
c0009c4d:	89 d9                	mov    ecx,ebx
c0009c4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009c53:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009c57:	89 dd                	mov    ebp,ebx
c0009c59:	29 c8                	sub    eax,ecx
c0009c5b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009c63:	99                   	cdq    
c0009c64:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c6c:	f7 fb                	idiv   ebx
c0009c6e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009c72:	0f af e8             	imul   ebp,eax
c0009c75:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009c79:	01 cd                	add    ebp,ecx
c0009c7b:	8d 34 86             	lea    esi,[esi+eax*4]
c0009c7e:	89 e8                	mov    eax,ebp
c0009c80:	83 ee 04             	sub    esi,0x4
c0009c83:	e8 5c fe ff ff       	call   c0009ae4 <fp_to_double>
c0009c88:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009c90:	89 e8                	mov    eax,ebp
c0009c92:	29 dd                	sub    ebp,ebx
c0009c94:	e8 41 fe ff ff       	call   c0009ada <fp_to_int>
c0009c99:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009c9c:	52                   	push   edx
c0009c9d:	52                   	push   edx
c0009c9e:	51                   	push   ecx
c0009c9f:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009ca3:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009ca7:	e8 04 d6 01 00       	call   c00272b0 <__subsf3>
c0009cac:	89 04 24             	mov    DWORD PTR [esp],eax
c0009caf:	e8 db ec 01 00       	call   c002898f <__extendsfdf2>
c0009cb4:	83 c4 10             	add    esp,0x10
c0009cb7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cbb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ccb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ccf:	e8 c4 e2 01 00       	call   c0027f98 <__muldf3>
c0009cd4:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009cd8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cdc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009cdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ce3:	e8 a7 ec 01 00       	call   c002898f <__extendsfdf2>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf3:	52                   	push   edx
c0009cf4:	50                   	push   eax
c0009cf5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009cf9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009cfd:	e8 19 dc 01 00       	call   c002791b <__adddf3>
c0009d02:	59                   	pop    ecx
c0009d03:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009d07:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009d0b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009d11:	e8 79 ec 01 00       	call   c002898f <__extendsfdf2>
c0009d16:	83 c4 10             	add    esp,0x10
c0009d19:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d1d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d21:	52                   	push   edx
c0009d22:	50                   	push   eax
c0009d23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009d27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009d2b:	e8 68 e2 01 00       	call   c0027f98 <__muldf3>
c0009d30:	83 c4 10             	add    esp,0x10
c0009d33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d37:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d3b:	52                   	push   edx
c0009d3c:	50                   	push   eax
c0009d3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d45:	e8 d1 db 01 00       	call   c002791b <__adddf3>
c0009d4a:	83 c4 10             	add    esp,0x10
c0009d4d:	85 ed                	test   ebp,ebp
c0009d4f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d53:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d57:	0f 8f 21 ff ff ff    	jg     c0009c7e <calc_output_single+0x166>
c0009d5d:	52                   	push   edx
c0009d5e:	50                   	push   eax
c0009d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d67:	e8 af db 01 00       	call   c002791b <__adddf3>
c0009d6c:	83 c4 5c             	add    esp,0x5c
c0009d6f:	5b                   	pop    ebx
c0009d70:	5e                   	pop    esi
c0009d71:	5f                   	pop    edi
c0009d72:	5d                   	pop    ebp
c0009d73:	c3                   	ret    

c0009d74 <calc_output_stereo>:
c0009d74:	55                   	push   ebp
c0009d75:	89 cd                	mov    ebp,ecx
c0009d77:	57                   	push   edi
c0009d78:	56                   	push   esi
c0009d79:	53                   	push   ebx
c0009d7a:	89 c3                	mov    ebx,eax
c0009d7c:	83 ec 6c             	sub    esp,0x6c
c0009d7f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d83:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009d8a:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009d91:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d95:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d99:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009d9c:	e8 35 fd ff ff       	call   c0009ad6 <int_to_fp>
c0009da1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009da9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dad:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009db5:	29 c8                	sub    eax,ecx
c0009db7:	99                   	cdq    
c0009db8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009dbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009dc0:	0f af d0             	imul   edx,eax
c0009dc3:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009dc6:	31 d2                	xor    edx,edx
c0009dc8:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009dcc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009dd0:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009dd3:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009dd7:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009dda:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009dde:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009de2:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009de5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009dea:	29 c1                	sub    ecx,eax
c0009dec:	31 c0                	xor    eax,eax
c0009dee:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009df1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009df5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009df9:	83 c7 08             	add    edi,0x8
c0009dfc:	e8 e3 fc ff ff       	call   c0009ae4 <fp_to_double>
c0009e01:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009e05:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009e09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e0d:	e8 c8 fc ff ff       	call   c0009ada <fp_to_int>
c0009e12:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009e15:	52                   	push   edx
c0009e16:	52                   	push   edx
c0009e17:	51                   	push   ecx
c0009e18:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009e1c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009e20:	e8 8b d4 01 00       	call   c00272b0 <__subsf3>
c0009e25:	89 04 24             	mov    DWORD PTR [esp],eax
c0009e28:	e8 62 eb 01 00       	call   c002898f <__extendsfdf2>
c0009e2d:	83 c4 10             	add    esp,0x10
c0009e30:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009e34:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009e38:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009e3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009e40:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009e44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009e48:	e8 4b e1 01 00       	call   c0027f98 <__muldf3>
c0009e4d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009e51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009e55:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e58:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009e5c:	e8 2e eb 01 00       	call   c002898f <__extendsfdf2>
c0009e61:	83 c4 10             	add    esp,0x10
c0009e64:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009e68:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009e6c:	52                   	push   edx
c0009e6d:	50                   	push   eax
c0009e6e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009e72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009e76:	e8 a0 da 01 00       	call   c002791b <__adddf3>
c0009e7b:	59                   	pop    ecx
c0009e7c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009e80:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009e84:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009e8a:	e8 00 eb 01 00       	call   c002898f <__extendsfdf2>
c0009e8f:	83 c4 10             	add    esp,0x10
c0009e92:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009e96:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009e9a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009e9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ea2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ea6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009eaa:	e8 e9 e0 01 00       	call   c0027f98 <__muldf3>
c0009eaf:	83 c4 10             	add    esp,0x10
c0009eb2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009eb6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009eba:	52                   	push   edx
c0009ebb:	50                   	push   eax
c0009ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec4:	e8 52 da 01 00       	call   c002791b <__adddf3>
c0009ec9:	59                   	pop    ecx
c0009eca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ece:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009ed2:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ed8:	e8 b2 ea 01 00       	call   c002898f <__extendsfdf2>
c0009edd:	83 c4 10             	add    esp,0x10
c0009ee0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ee4:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ee8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009eec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ef0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ef4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ef8:	e8 9b e0 01 00       	call   c0027f98 <__muldf3>
c0009efd:	83 c4 10             	add    esp,0x10
c0009f00:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009f04:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009f08:	52                   	push   edx
c0009f09:	50                   	push   eax
c0009f0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f12:	e8 04 da 01 00       	call   c002791b <__adddf3>
c0009f17:	83 c4 10             	add    esp,0x10
c0009f1a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f1e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009f22:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009f26:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009f2a:	0f 89 c5 fe ff ff    	jns    c0009df5 <calc_output_stereo+0x81>
c0009f30:	29 e9                	sub    ecx,ebp
c0009f32:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009f3a:	29 c8                	sub    eax,ecx
c0009f3c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009f44:	99                   	cdq    
c0009f45:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f49:	31 d2                	xor    edx,edx
c0009f4b:	0f af f8             	imul   edi,eax
c0009f4e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f52:	40                   	inc    eax
c0009f53:	01 cf                	add    edi,ecx
c0009f55:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009f5a:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009f5e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009f66:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009f69:	31 c0                	xor    eax,eax
c0009f6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f6f:	89 f8                	mov    eax,edi
c0009f71:	83 eb 08             	sub    ebx,0x8
c0009f74:	e8 6b fb ff ff       	call   c0009ae4 <fp_to_double>
c0009f79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f81:	89 f8                	mov    eax,edi
c0009f83:	e8 52 fb ff ff       	call   c0009ada <fp_to_int>
c0009f88:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009f8b:	52                   	push   edx
c0009f8c:	52                   	push   edx
c0009f8d:	55                   	push   ebp
c0009f8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009f92:	e8 19 d3 01 00       	call   c00272b0 <__subsf3>
c0009f97:	89 04 24             	mov    DWORD PTR [esp],eax
c0009f9a:	e8 f0 e9 01 00       	call   c002898f <__extendsfdf2>
c0009f9f:	83 c4 10             	add    esp,0x10
c0009fa2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fa6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009faa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009fae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009fb2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009fb6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009fba:	e8 d9 df 01 00       	call   c0027f98 <__muldf3>
c0009fbf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009fc2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009fc6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009fca:	e8 c0 e9 01 00       	call   c002898f <__extendsfdf2>
c0009fcf:	83 c4 10             	add    esp,0x10
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	52                   	push   edx
c0009fdb:	50                   	push   eax
c0009fdc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fe0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fe4:	e8 32 d9 01 00       	call   c002791b <__adddf3>
c0009fe9:	59                   	pop    ecx
c0009fea:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009fee:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009ff2:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009ff8:	e8 92 e9 01 00       	call   c002898f <__extendsfdf2>
c0009ffd:	83 c4 10             	add    esp,0x10
c000a000:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a004:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a008:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a00c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a010:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a014:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a018:	e8 7b df 01 00       	call   c0027f98 <__muldf3>
c000a01d:	83 c4 10             	add    esp,0x10
c000a020:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a024:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a028:	52                   	push   edx
c000a029:	50                   	push   eax
c000a02a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a02e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a032:	e8 e4 d8 01 00       	call   c002791b <__adddf3>
c000a037:	5d                   	pop    ebp
c000a038:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a03c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a040:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a046:	e8 44 e9 01 00       	call   c002898f <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a052:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a056:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a05a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a05e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a062:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a066:	e8 2d df 01 00       	call   c0027f98 <__muldf3>
c000a06b:	83 c4 10             	add    esp,0x10
c000a06e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a072:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a076:	52                   	push   edx
c000a077:	50                   	push   eax
c000a078:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a07c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a080:	e8 96 d8 01 00       	call   c002791b <__adddf3>
c000a085:	83 c4 10             	add    esp,0x10
c000a088:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c000a08c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a090:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a094:	85 ff                	test   edi,edi
c000a096:	0f 8f d3 fe ff ff    	jg     c0009f6f <calc_output_stereo+0x1fb>
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ac:	e8 6a d8 01 00       	call   c002791b <__adddf3>
c000a0b1:	83 c4 10             	add    esp,0x10
c000a0b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a0b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a0bc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0cc:	e8 c7 de 01 00       	call   c0027f98 <__muldf3>
c000a0d1:	59                   	pop    ecx
c000a0d2:	5b                   	pop    ebx
c000a0d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a0d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a0db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0e3:	e8 83 e7 01 00       	call   c002886b <__truncdfsf2>
c000a0e8:	83 c4 10             	add    esp,0x10
c000a0eb:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c000a0f2:	89 03                	mov    DWORD PTR [ebx],eax
c000a0f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a100:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a104:	e8 12 d8 01 00       	call   c002791b <__adddf3>
c000a109:	83 c4 10             	add    esp,0x10
c000a10c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a110:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a114:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a118:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a11c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a120:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a124:	e8 6f de 01 00       	call   c0027f98 <__muldf3>
c000a129:	5e                   	pop    esi
c000a12a:	5f                   	pop    edi
c000a12b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a12f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a133:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a13b:	e8 2b e7 01 00       	call   c002886b <__truncdfsf2>
c000a140:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c000a147:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a14a:	83 c4 7c             	add    esp,0x7c
c000a14d:	5b                   	pop    ebx
c000a14e:	5e                   	pop    esi
c000a14f:	5f                   	pop    edi
c000a150:	5d                   	pop    ebp
c000a151:	c3                   	ret    

c000a152 <calc_output_quad>:
c000a152:	55                   	push   ebp
c000a153:	57                   	push   edi
c000a154:	56                   	push   esi
c000a155:	89 c6                	mov    esi,eax
c000a157:	53                   	push   ebx
c000a158:	83 ec 7c             	sub    esp,0x7c
c000a15b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a15f:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000a163:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000a16a:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000a171:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a175:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a179:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000a17c:	e8 55 f9 ff ff       	call   c0009ad6 <int_to_fp>
c000a181:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000a184:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000a187:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a18b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a18f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a193:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000a197:	99                   	cdq    
c000a198:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000a19c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1a0:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c000a1a3:	31 d2                	xor    edx,edx
c000a1a5:	0f af d8             	imul   ebx,eax
c000a1a8:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000a1b0:	0f af c7             	imul   eax,edi
c000a1b3:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c000a1b7:	29 c1                	sub    ecx,eax
c000a1b9:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000a1c1:	31 c0                	xor    eax,eax
c000a1c3:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c000a1c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a1ca:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a1ce:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a1d2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a1d6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a1da:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a1de:	89 d8                	mov    eax,ebx
c000a1e0:	83 c7 10             	add    edi,0x10
c000a1e3:	e8 fc f8 ff ff       	call   c0009ae4 <fp_to_double>
c000a1e8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1f0:	89 d8                	mov    eax,ebx
c000a1f2:	e8 e3 f8 ff ff       	call   c0009ada <fp_to_int>
c000a1f7:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c000a1fb:	52                   	push   edx
c000a1fc:	52                   	push   edx
c000a1fd:	51                   	push   ecx
c000a1fe:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a202:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a206:	e8 a5 d0 01 00       	call   c00272b0 <__subsf3>
c000a20b:	89 04 24             	mov    DWORD PTR [esp],eax
c000a20e:	e8 7c e7 01 00       	call   c002898f <__extendsfdf2>
c000a213:	83 c4 10             	add    esp,0x10
c000a216:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a21a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a21e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a226:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a22a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a22e:	e8 65 dd 01 00       	call   c0027f98 <__muldf3>
c000a233:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a237:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a23b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a23e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a242:	e8 48 e7 01 00       	call   c002898f <__extendsfdf2>
c000a247:	83 c4 10             	add    esp,0x10
c000a24a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a24e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a252:	52                   	push   edx
c000a253:	50                   	push   eax
c000a254:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a258:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a25c:	e8 ba d6 01 00       	call   c002791b <__adddf3>
c000a261:	59                   	pop    ecx
c000a262:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a266:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a26a:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a270:	e8 1a e7 01 00       	call   c002898f <__extendsfdf2>
c000a275:	83 c4 10             	add    esp,0x10
c000a278:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a27c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a288:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a28c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a290:	e8 03 dd 01 00       	call   c0027f98 <__muldf3>
c000a295:	83 c4 10             	add    esp,0x10
c000a298:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a0:	52                   	push   edx
c000a2a1:	50                   	push   eax
c000a2a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a2a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a2aa:	e8 6c d6 01 00       	call   c002791b <__adddf3>
c000a2af:	59                   	pop    ecx
c000a2b0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a2b4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a2b8:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a2be:	e8 cc e6 01 00       	call   c002898f <__extendsfdf2>
c000a2c3:	83 c4 10             	add    esp,0x10
c000a2c6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ca:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2de:	e8 b5 dc 01 00       	call   c0027f98 <__muldf3>
c000a2e3:	83 c4 10             	add    esp,0x10
c000a2e6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ea:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ee:	52                   	push   edx
c000a2ef:	50                   	push   eax
c000a2f0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a2f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a2f8:	e8 1e d6 01 00       	call   c002791b <__adddf3>
c000a2fd:	59                   	pop    ecx
c000a2fe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a302:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a306:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a30c:	e8 7e e6 01 00       	call   c002898f <__extendsfdf2>
c000a311:	83 c4 10             	add    esp,0x10
c000a314:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a318:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a31c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a324:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a328:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a32c:	e8 67 dc 01 00       	call   c0027f98 <__muldf3>
c000a331:	83 c4 10             	add    esp,0x10
c000a334:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a338:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33c:	52                   	push   edx
c000a33d:	50                   	push   eax
c000a33e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a342:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a346:	e8 d0 d5 01 00       	call   c002791b <__adddf3>
c000a34b:	59                   	pop    ecx
c000a34c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a350:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a354:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a35a:	e8 30 e6 01 00       	call   c002898f <__extendsfdf2>
c000a35f:	83 c4 10             	add    esp,0x10
c000a362:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a366:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a36a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a36e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a372:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a376:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a37a:	e8 19 dc 01 00       	call   c0027f98 <__muldf3>
c000a37f:	83 c4 10             	add    esp,0x10
c000a382:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a386:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38a:	52                   	push   edx
c000a38b:	50                   	push   eax
c000a38c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a390:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a394:	e8 82 d5 01 00       	call   c002791b <__adddf3>
c000a399:	83 c4 10             	add    esp,0x10
c000a39c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a3a0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a3a4:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3a8:	0f 89 30 fe ff ff    	jns    c000a1de <calc_output_quad+0x8c>
c000a3ae:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a3b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a3b6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a3ba:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a3be:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a3c6:	29 c8                	sub    eax,ecx
c000a3c8:	99                   	cdq    
c000a3c9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a3cd:	31 d2                	xor    edx,edx
c000a3cf:	0f af d8             	imul   ebx,eax
c000a3d2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a3d6:	40                   	inc    eax
c000a3d7:	01 cb                	add    ebx,ecx
c000a3d9:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a3de:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a3e2:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a3e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a3ea:	8d 34 86             	lea    esi,[esi+eax*4]
c000a3ed:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a3f5:	31 c0                	xor    eax,eax
c000a3f7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a3fb:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a3ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a403:	89 d8                	mov    eax,ebx
c000a405:	83 ee 10             	sub    esi,0x10
c000a408:	e8 d7 f6 ff ff       	call   c0009ae4 <fp_to_double>
c000a40d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a411:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a415:	89 d8                	mov    eax,ebx
c000a417:	e8 be f6 ff ff       	call   c0009ada <fp_to_int>
c000a41c:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a420:	52                   	push   edx
c000a421:	52                   	push   edx
c000a422:	57                   	push   edi
c000a423:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a427:	e8 84 ce 01 00       	call   c00272b0 <__subsf3>
c000a42c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a42f:	e8 5b e5 01 00       	call   c002898f <__extendsfdf2>
c000a434:	83 c4 10             	add    esp,0x10
c000a437:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a43b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a43f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a443:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a447:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a44b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a44f:	e8 44 db 01 00       	call   c0027f98 <__muldf3>
c000a454:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a457:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a45b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a45f:	e8 2b e5 01 00       	call   c002898f <__extendsfdf2>
c000a464:	83 c4 10             	add    esp,0x10
c000a467:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a46b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a46f:	52                   	push   edx
c000a470:	50                   	push   eax
c000a471:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a475:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a479:	e8 9d d4 01 00       	call   c002791b <__adddf3>
c000a47e:	59                   	pop    ecx
c000a47f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a483:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a487:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a48d:	e8 fd e4 01 00       	call   c002898f <__extendsfdf2>
c000a492:	83 c4 10             	add    esp,0x10
c000a495:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a499:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a49d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4a5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4ad:	e8 e6 da 01 00       	call   c0027f98 <__muldf3>
c000a4b2:	83 c4 10             	add    esp,0x10
c000a4b5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4b9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4bd:	52                   	push   edx
c000a4be:	50                   	push   eax
c000a4bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a4c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a4c7:	e8 4f d4 01 00       	call   c002791b <__adddf3>
c000a4cc:	5f                   	pop    edi
c000a4cd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a4d1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a4d5:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a4db:	e8 af e4 01 00       	call   c002898f <__extendsfdf2>
c000a4e0:	83 c4 10             	add    esp,0x10
c000a4e3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4e7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4fb:	e8 98 da 01 00       	call   c0027f98 <__muldf3>
c000a500:	83 c4 10             	add    esp,0x10
c000a503:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a507:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a50b:	52                   	push   edx
c000a50c:	50                   	push   eax
c000a50d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a511:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a515:	e8 01 d4 01 00       	call   c002791b <__adddf3>
c000a51a:	59                   	pop    ecx
c000a51b:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a51f:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a523:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a529:	e8 61 e4 01 00       	call   c002898f <__extendsfdf2>
c000a52e:	83 c4 10             	add    esp,0x10
c000a531:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a535:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a539:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a53d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a541:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a545:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a549:	e8 4a da 01 00       	call   c0027f98 <__muldf3>
c000a54e:	83 c4 10             	add    esp,0x10
c000a551:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a555:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a559:	52                   	push   edx
c000a55a:	50                   	push   eax
c000a55b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a55f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a563:	e8 b3 d3 01 00       	call   c002791b <__adddf3>
c000a568:	5f                   	pop    edi
c000a569:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a56d:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a571:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a577:	e8 13 e4 01 00       	call   c002898f <__extendsfdf2>
c000a57c:	83 c4 10             	add    esp,0x10
c000a57f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a583:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a58b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a58f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a593:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a597:	e8 fc d9 01 00       	call   c0027f98 <__muldf3>
c000a59c:	83 c4 10             	add    esp,0x10
c000a59f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a7:	52                   	push   edx
c000a5a8:	50                   	push   eax
c000a5a9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a5ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a5b1:	e8 65 d3 01 00       	call   c002791b <__adddf3>
c000a5b6:	83 c4 10             	add    esp,0x10
c000a5b9:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a5bd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a5c1:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a5c5:	85 db                	test   ebx,ebx
c000a5c7:	0f 8f 36 fe ff ff    	jg     c000a403 <calc_output_quad+0x2b1>
c000a5cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5dd:	e8 39 d3 01 00       	call   c002791b <__adddf3>
c000a5e2:	83 c4 10             	add    esp,0x10
c000a5e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a5e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a5ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5fd:	e8 96 d9 01 00       	call   c0027f98 <__muldf3>
c000a602:	59                   	pop    ecx
c000a603:	5b                   	pop    ebx
c000a604:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a608:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a60c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a610:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a614:	e8 52 e2 01 00       	call   c002886b <__truncdfsf2>
c000a619:	83 c4 10             	add    esp,0x10
c000a61c:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a623:	89 06                	mov    DWORD PTR [esi],eax
c000a625:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a629:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a62d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a631:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a635:	e8 e1 d2 01 00       	call   c002791b <__adddf3>
c000a63a:	83 c4 10             	add    esp,0x10
c000a63d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a641:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a655:	e8 3e d9 01 00       	call   c0027f98 <__muldf3>
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a660:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a664:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a668:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a66c:	e8 fa e1 01 00       	call   c002886b <__truncdfsf2>
c000a671:	83 c4 10             	add    esp,0x10
c000a674:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a67b:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a67e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a682:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a686:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a68a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a68e:	e8 88 d2 01 00       	call   c002791b <__adddf3>
c000a693:	83 c4 10             	add    esp,0x10
c000a696:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a69a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a69e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ae:	e8 e5 d8 01 00       	call   c0027f98 <__muldf3>
c000a6b3:	5d                   	pop    ebp
c000a6b4:	59                   	pop    ecx
c000a6b5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a6b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a6bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6c5:	e8 a1 e1 01 00       	call   c002886b <__truncdfsf2>
c000a6ca:	83 c4 10             	add    esp,0x10
c000a6cd:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a6d4:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a6d7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6e7:	e8 2f d2 01 00       	call   c002791b <__adddf3>
c000a6ec:	83 c4 10             	add    esp,0x10
c000a6ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a707:	e8 8c d8 01 00       	call   c0027f98 <__muldf3>
c000a70c:	5b                   	pop    ebx
c000a70d:	5e                   	pop    esi
c000a70e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a712:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a716:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a71a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a71e:	e8 48 e1 01 00       	call   c002886b <__truncdfsf2>
c000a723:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a72a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a72d:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a733:	5b                   	pop    ebx
c000a734:	5e                   	pop    esi
c000a735:	5f                   	pop    edi
c000a736:	5d                   	pop    ebp
c000a737:	c3                   	ret    

c000a738 <calc_output_hex>:
c000a738:	55                   	push   ebp
c000a739:	89 cd                	mov    ebp,ecx
c000a73b:	57                   	push   edi
c000a73c:	56                   	push   esi
c000a73d:	53                   	push   ebx
c000a73e:	89 c3                	mov    ebx,eax
c000a740:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a746:	89 14 24             	mov    DWORD PTR [esp],edx
c000a749:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a750:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a757:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a75b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a75f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a762:	e8 6f f3 ff ff       	call   c0009ad6 <int_to_fp>
c000a767:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a76a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a76e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a771:	29 c8                	sub    eax,ecx
c000a773:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a777:	99                   	cdq    
c000a778:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a780:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a783:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a78b:	0f af f8             	imul   edi,eax
c000a78e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a791:	01 cf                	add    edi,ecx
c000a793:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a797:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a79a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a79e:	0f af c2             	imul   eax,edx
c000a7a1:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a7a5:	29 c1                	sub    ecx,eax
c000a7a7:	31 d2                	xor    edx,edx
c000a7a9:	31 c0                	xor    eax,eax
c000a7ab:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a7ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a7b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a7b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a7ba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a7be:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a7c2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a7c6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a7ca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a7ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a7d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a7d6:	89 f8                	mov    eax,edi
c000a7d8:	e8 07 f3 ff ff       	call   c0009ae4 <fp_to_double>
c000a7dd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7e5:	89 f8                	mov    eax,edi
c000a7e7:	e8 ee f2 ff ff       	call   c0009ada <fp_to_int>
c000a7ec:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a7f0:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a7f3:	52                   	push   edx
c000a7f4:	52                   	push   edx
c000a7f5:	51                   	push   ecx
c000a7f6:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a7fa:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a801:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a805:	e8 a6 ca 01 00       	call   c00272b0 <__subsf3>
c000a80a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a80d:	e8 7d e1 01 00       	call   c002898f <__extendsfdf2>
c000a812:	83 c4 10             	add    esp,0x10
c000a815:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a819:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a81d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a825:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a829:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a82d:	e8 66 d7 01 00       	call   c0027f98 <__muldf3>
c000a832:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a836:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a83a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a83d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a841:	e8 49 e1 01 00       	call   c002898f <__extendsfdf2>
c000a846:	83 c4 10             	add    esp,0x10
c000a849:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a84d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a851:	52                   	push   edx
c000a852:	50                   	push   eax
c000a853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a857:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a85b:	e8 bb d0 01 00       	call   c002791b <__adddf3>
c000a860:	59                   	pop    ecx
c000a861:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a865:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a869:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a86f:	e8 1b e1 01 00       	call   c002898f <__extendsfdf2>
c000a874:	83 c4 10             	add    esp,0x10
c000a877:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a87b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a87f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a883:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a887:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a88b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a88f:	e8 04 d7 01 00       	call   c0027f98 <__muldf3>
c000a894:	83 c4 10             	add    esp,0x10
c000a897:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a89b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a89f:	52                   	push   edx
c000a8a0:	50                   	push   eax
c000a8a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8a9:	e8 6d d0 01 00       	call   c002791b <__adddf3>
c000a8ae:	59                   	pop    ecx
c000a8af:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a8b3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a8b7:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a8bd:	e8 cd e0 01 00       	call   c002898f <__extendsfdf2>
c000a8c2:	83 c4 10             	add    esp,0x10
c000a8c5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a8c9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8d5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a8d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a8dd:	e8 b6 d6 01 00       	call   c0027f98 <__muldf3>
c000a8e2:	83 c4 10             	add    esp,0x10
c000a8e5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a8e9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a8ed:	52                   	push   edx
c000a8ee:	50                   	push   eax
c000a8ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a8f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a8f7:	e8 1f d0 01 00       	call   c002791b <__adddf3>
c000a8fc:	59                   	pop    ecx
c000a8fd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a901:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a905:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a90b:	e8 7f e0 01 00       	call   c002898f <__extendsfdf2>
c000a910:	83 c4 10             	add    esp,0x10
c000a913:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a917:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a91b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a923:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a927:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a92b:	e8 68 d6 01 00       	call   c0027f98 <__muldf3>
c000a930:	83 c4 10             	add    esp,0x10
c000a933:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a937:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a93b:	52                   	push   edx
c000a93c:	50                   	push   eax
c000a93d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a941:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a945:	e8 d1 cf 01 00       	call   c002791b <__adddf3>
c000a94a:	59                   	pop    ecx
c000a94b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a94f:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a953:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a959:	e8 31 e0 01 00       	call   c002898f <__extendsfdf2>
c000a95e:	83 c4 10             	add    esp,0x10
c000a961:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a965:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a969:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a971:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a975:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a979:	e8 1a d6 01 00       	call   c0027f98 <__muldf3>
c000a97e:	83 c4 10             	add    esp,0x10
c000a981:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a985:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a989:	52                   	push   edx
c000a98a:	50                   	push   eax
c000a98b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a98f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a993:	e8 83 cf 01 00       	call   c002791b <__adddf3>
c000a998:	59                   	pop    ecx
c000a999:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a99d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a9a1:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a9a7:	e8 e3 df 01 00       	call   c002898f <__extendsfdf2>
c000a9ac:	83 c4 10             	add    esp,0x10
c000a9af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a9b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a9b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9bf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9c7:	e8 cc d5 01 00       	call   c0027f98 <__muldf3>
c000a9cc:	83 c4 10             	add    esp,0x10
c000a9cf:	83 c6 18             	add    esi,0x18
c000a9d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a9d6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a9da:	52                   	push   edx
c000a9db:	50                   	push   eax
c000a9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a9e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a9e4:	e8 32 cf 01 00       	call   c002791b <__adddf3>
c000a9e9:	59                   	pop    ecx
c000a9ea:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a9ee:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a9f2:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a9f8:	e8 92 df 01 00       	call   c002898f <__extendsfdf2>
c000a9fd:	83 c4 10             	add    esp,0x10
c000aa00:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000aa04:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000aa08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa18:	e8 7b d5 01 00       	call   c0027f98 <__muldf3>
c000aa1d:	83 c4 10             	add    esp,0x10
c000aa20:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aa24:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aa28:	52                   	push   edx
c000aa29:	50                   	push   eax
c000aa2a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa2e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa32:	e8 e4 ce 01 00       	call   c002791b <__adddf3>
c000aa37:	83 c4 10             	add    esp,0x10
c000aa3a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000aa3e:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000aa42:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000aa45:	0f 89 8b fd ff ff    	jns    c000a7d6 <calc_output_hex+0x9e>
c000aa4b:	31 f6                	xor    esi,esi
c000aa4d:	31 ff                	xor    edi,edi
c000aa4f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000aa53:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000aa56:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000aa5a:	29 e9                	sub    ecx,ebp
c000aa5c:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000aa60:	29 c8                	sub    eax,ecx
c000aa62:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000aa65:	99                   	cdq    
c000aa66:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000aa6a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000aa6d:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000aa71:	0f af e8             	imul   ebp,eax
c000aa74:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000aa78:	40                   	inc    eax
c000aa79:	01 cd                	add    ebp,ecx
c000aa7b:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000aa80:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000aa84:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000aa88:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000aa8c:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000aa8f:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000aa93:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000aa97:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000aa9b:	89 e8                	mov    eax,ebp
c000aa9d:	e8 42 f0 ff ff       	call   c0009ae4 <fp_to_double>
c000aaa2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaa6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaaa:	89 e8                	mov    eax,ebp
c000aaac:	e8 29 f0 ff ff       	call   c0009ada <fp_to_int>
c000aab1:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000aab5:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000aab8:	52                   	push   edx
c000aab9:	52                   	push   edx
c000aaba:	51                   	push   ecx
c000aabb:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000aac2:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000aac9:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000aacd:	e8 de c7 01 00       	call   c00272b0 <__subsf3>
c000aad2:	89 04 24             	mov    DWORD PTR [esp],eax
c000aad5:	e8 b5 de 01 00       	call   c002898f <__extendsfdf2>
c000aada:	83 c4 10             	add    esp,0x10
c000aadd:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aae1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aae5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aae9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaed:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaf1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaf5:	e8 9e d4 01 00       	call   c0027f98 <__muldf3>
c000aafa:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000ab01:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ab05:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ab08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab0c:	e8 7e de 01 00       	call   c002898f <__extendsfdf2>
c000ab11:	83 c4 10             	add    esp,0x10
c000ab14:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab18:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab1c:	52                   	push   edx
c000ab1d:	50                   	push   eax
c000ab1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab26:	e8 f0 cd 01 00       	call   c002791b <__adddf3>
c000ab2b:	59                   	pop    ecx
c000ab2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ab30:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab34:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000ab3a:	e8 50 de 01 00       	call   c002898f <__extendsfdf2>
c000ab3f:	83 c4 10             	add    esp,0x10
c000ab42:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab46:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab52:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ab56:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ab5a:	e8 39 d4 01 00       	call   c0027f98 <__muldf3>
c000ab5f:	83 c4 10             	add    esp,0x10
c000ab62:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab66:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab6a:	52                   	push   edx
c000ab6b:	50                   	push   eax
c000ab6c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ab70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ab74:	e8 a2 cd 01 00       	call   c002791b <__adddf3>
c000ab79:	59                   	pop    ecx
c000ab7a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ab7e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ab82:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000ab88:	e8 02 de 01 00       	call   c002898f <__extendsfdf2>
c000ab8d:	83 c4 10             	add    esp,0x10
c000ab90:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab94:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aba0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aba4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aba8:	e8 eb d3 01 00       	call   c0027f98 <__muldf3>
c000abad:	83 c4 10             	add    esp,0x10
c000abb0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000abb4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000abb8:	52                   	push   edx
c000abb9:	50                   	push   eax
c000abba:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000abbe:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000abc2:	e8 54 cd 01 00       	call   c002791b <__adddf3>
c000abc7:	59                   	pop    ecx
c000abc8:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000abcc:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000abd0:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000abd6:	e8 b4 dd 01 00       	call   c002898f <__extendsfdf2>
c000abdb:	83 c4 10             	add    esp,0x10
c000abde:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000abe2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000abe6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abee:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000abf2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000abf6:	e8 9d d3 01 00       	call   c0027f98 <__muldf3>
c000abfb:	83 c4 10             	add    esp,0x10
c000abfe:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac02:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac06:	52                   	push   edx
c000ac07:	50                   	push   eax
c000ac08:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ac0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ac10:	e8 06 cd 01 00       	call   c002791b <__adddf3>
c000ac15:	59                   	pop    ecx
c000ac16:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000ac1a:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000ac1e:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000ac24:	e8 66 dd 01 00       	call   c002898f <__extendsfdf2>
c000ac29:	83 c4 10             	add    esp,0x10
c000ac2c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac30:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac3c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac44:	e8 4f d3 01 00       	call   c0027f98 <__muldf3>
c000ac49:	83 c4 10             	add    esp,0x10
c000ac4c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac50:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac54:	52                   	push   edx
c000ac55:	50                   	push   eax
c000ac56:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ac5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ac5e:	e8 b8 cc 01 00       	call   c002791b <__adddf3>
c000ac63:	59                   	pop    ecx
c000ac64:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000ac68:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000ac6c:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000ac72:	e8 18 dd 01 00       	call   c002898f <__extendsfdf2>
c000ac77:	83 c4 10             	add    esp,0x10
c000ac7a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac7e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac8a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac92:	e8 01 d3 01 00       	call   c0027f98 <__muldf3>
c000ac97:	83 c4 10             	add    esp,0x10
c000ac9a:	83 eb 18             	sub    ebx,0x18
c000ac9d:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aca1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aca5:	52                   	push   edx
c000aca6:	50                   	push   eax
c000aca7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000acab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000acaf:	e8 67 cc 01 00       	call   c002791b <__adddf3>
c000acb4:	59                   	pop    ecx
c000acb5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000acb9:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000acbd:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000acc3:	e8 c7 dc 01 00       	call   c002898f <__extendsfdf2>
c000acc8:	83 c4 10             	add    esp,0x10
c000accb:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000accf:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000acd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acdb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000acdf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ace3:	e8 b0 d2 01 00       	call   c0027f98 <__muldf3>
c000ace8:	83 c4 10             	add    esp,0x10
c000aceb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acef:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000acf3:	52                   	push   edx
c000acf4:	50                   	push   eax
c000acf5:	57                   	push   edi
c000acf6:	56                   	push   esi
c000acf7:	e8 1f cc 01 00       	call   c002791b <__adddf3>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	89 c6                	mov    esi,eax
c000ad01:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ad04:	89 d7                	mov    edi,edx
c000ad06:	85 ed                	test   ebp,ebp
c000ad08:	0f 8f 8d fd ff ff    	jg     c000aa9b <calc_output_hex+0x363>
c000ad0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad1e:	e8 f8 cb 01 00       	call   c002791b <__adddf3>
c000ad23:	83 c4 10             	add    esp,0x10
c000ad26:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad29:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ad2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad3d:	e8 56 d2 01 00       	call   c0027f98 <__muldf3>
c000ad42:	59                   	pop    ecx
c000ad43:	5b                   	pop    ebx
c000ad44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad54:	e8 12 db 01 00       	call   c002886b <__truncdfsf2>
c000ad59:	83 c4 10             	add    esp,0x10
c000ad5c:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ad63:	89 03                	mov    DWORD PTR [ebx],eax
c000ad65:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ad69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ad6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ad71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ad75:	e8 a1 cb 01 00       	call   c002791b <__adddf3>
c000ad7a:	83 c4 10             	add    esp,0x10
c000ad7d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad80:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ad84:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad94:	e8 ff d1 01 00       	call   c0027f98 <__muldf3>
c000ad99:	5d                   	pop    ebp
c000ad9a:	59                   	pop    ecx
c000ad9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ada3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ada7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adab:	e8 bb da 01 00       	call   c002886b <__truncdfsf2>
c000adb0:	83 c4 10             	add    esp,0x10
c000adb3:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000adba:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000adbd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000adc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000adc5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adcd:	e8 49 cb 01 00       	call   c002791b <__adddf3>
c000add2:	83 c4 10             	add    esp,0x10
c000add5:	89 04 24             	mov    DWORD PTR [esp],eax
c000add8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000addc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adec:	e8 a7 d1 01 00       	call   c0027f98 <__muldf3>
c000adf1:	5b                   	pop    ebx
c000adf2:	5d                   	pop    ebp
c000adf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000adf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adfb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae03:	e8 63 da 01 00       	call   c002886b <__truncdfsf2>
c000ae08:	83 c4 10             	add    esp,0x10
c000ae0b:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ae12:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ae15:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ae19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ae1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ae21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ae25:	e8 f1 ca 01 00       	call   c002791b <__adddf3>
c000ae2a:	83 c4 10             	add    esp,0x10
c000ae2d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae30:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ae34:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae44:	e8 4f d1 01 00       	call   c0027f98 <__muldf3>
c000ae49:	59                   	pop    ecx
c000ae4a:	5b                   	pop    ebx
c000ae4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ae53:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae5b:	e8 0b da 01 00       	call   c002886b <__truncdfsf2>
c000ae60:	83 c4 10             	add    esp,0x10
c000ae63:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ae6a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ae6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae7d:	e8 99 ca 01 00       	call   c002791b <__adddf3>
c000ae82:	83 c4 10             	add    esp,0x10
c000ae85:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae88:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ae8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae9c:	e8 f7 d0 01 00       	call   c0027f98 <__muldf3>
c000aea1:	5d                   	pop    ebp
c000aea2:	59                   	pop    ecx
c000aea3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aea7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aeab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeb3:	e8 b3 d9 01 00       	call   c002886b <__truncdfsf2>
c000aeb8:	83 c4 10             	add    esp,0x10
c000aebb:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aec2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aec5:	57                   	push   edi
c000aec6:	56                   	push   esi
c000aec7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aecb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aecf:	e8 47 ca 01 00       	call   c002791b <__adddf3>
c000aed4:	83 c4 10             	add    esp,0x10
c000aed7:	89 04 24             	mov    DWORD PTR [esp],eax
c000aeda:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aede:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeee:	e8 a5 d0 01 00       	call   c0027f98 <__muldf3>
c000aef3:	5b                   	pop    ebx
c000aef4:	5e                   	pop    esi
c000aef5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aef9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aefd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000af01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000af05:	e8 61 d9 01 00       	call   c002886b <__truncdfsf2>
c000af0a:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000af11:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000af14:	81 c4 9c 00 00 00    	add    esp,0x9c
c000af1a:	5b                   	pop    ebx
c000af1b:	5e                   	pop    esi
c000af1c:	5f                   	pop    edi
c000af1d:	5d                   	pop    ebp
c000af1e:	c3                   	ret    

c000af1f <sinc_reset>:
c000af1f:	56                   	push   esi
c000af20:	53                   	push   ebx
c000af21:	51                   	push   ecx
c000af22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af26:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000af29:	85 db                	test   ebx,ebx
c000af2b:	74 59                	je     c000af86 <sinc_reset+0x67>
c000af2d:	31 d2                	xor    edx,edx
c000af2f:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000af36:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000af39:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000af3c:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000af43:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000af4a:	31 c0                	xor    eax,eax
c000af4c:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000af52:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000af55:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000af58:	52                   	push   edx
c000af59:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000af5c:	c1 e0 02             	shl    eax,0x2
c000af5f:	50                   	push   eax
c000af60:	6a 00                	push   0x0
c000af62:	56                   	push   esi
c000af63:	e8 e8 57 ff ff       	call   c0000750 <memset>
c000af68:	83 c4 0c             	add    esp,0xc
c000af6b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000af6e:	c1 e0 02             	shl    eax,0x2
c000af71:	50                   	push   eax
c000af72:	68 aa 00 00 00       	push   0xaa
c000af77:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000af7a:	8d 04 86             	lea    eax,[esi+eax*4]
c000af7d:	50                   	push   eax
c000af7e:	e8 cd 57 ff ff       	call   c0000750 <memset>
c000af83:	83 c4 10             	add    esp,0x10
c000af86:	58                   	pop    eax
c000af87:	5b                   	pop    ebx
c000af88:	5e                   	pop    esi
c000af89:	c3                   	ret    

c000af8a <calc_output_multi>:
c000af8a:	55                   	push   ebp
c000af8b:	57                   	push   edi
c000af8c:	56                   	push   esi
c000af8d:	89 c6                	mov    esi,eax
c000af8f:	53                   	push   ebx
c000af90:	83 ec 4c             	sub    esp,0x4c
c000af93:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000af97:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000af9b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000af9f:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000afa3:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000afa7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000afab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000afaf:	8d 46 44             	lea    eax,[esi+0x44]
c000afb2:	89 04 24             	mov    DWORD PTR [esp],eax
c000afb5:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000afbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000afbf:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000afc2:	e8 0f eb ff ff       	call   c0009ad6 <int_to_fp>
c000afc7:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000afca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000afce:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000afd2:	99                   	cdq    
c000afd3:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000afd7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000afdb:	0f af d0             	imul   edx,eax
c000afde:	0f af c3             	imul   eax,ebx
c000afe1:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000afe5:	29 c1                	sub    ecx,eax
c000afe7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000afeb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000afef:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000aff6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000affa:	57                   	push   edi
c000affb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afff:	6a 00                	push   0x0
c000b001:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b005:	e8 46 57 ff ff       	call   c0000750 <memset>
c000b00a:	83 c4 10             	add    esp,0x10
c000b00d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b011:	89 df                	mov    edi,ebx
c000b013:	e8 cc ea ff ff       	call   c0009ae4 <fp_to_double>
c000b018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b01c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b020:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b024:	e8 b1 ea ff ff       	call   c0009ada <fp_to_int>
c000b029:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b02c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b02f:	51                   	push   ecx
c000b030:	51                   	push   ecx
c000b031:	55                   	push   ebp
c000b032:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b036:	e8 75 c2 01 00       	call   c00272b0 <__subsf3>
c000b03b:	89 04 24             	mov    DWORD PTR [esp],eax
c000b03e:	e8 4c d9 01 00       	call   c002898f <__extendsfdf2>
c000b043:	83 c4 10             	add    esp,0x10
c000b046:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b04a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b04e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b052:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b056:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b05a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b05e:	e8 35 cf 01 00       	call   c0027f98 <__muldf3>
c000b063:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b066:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b06a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b06e:	e8 1c d9 01 00       	call   c002898f <__extendsfdf2>
c000b073:	83 c4 10             	add    esp,0x10
c000b076:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b07a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07e:	52                   	push   edx
c000b07f:	50                   	push   eax
c000b080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b088:	e8 8e c8 01 00       	call   c002791b <__adddf3>
c000b08d:	83 c4 10             	add    esp,0x10
c000b090:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b094:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b098:	89 f8                	mov    eax,edi
c000b09a:	b9 08 00 00 00       	mov    ecx,0x8
c000b09f:	99                   	cdq    
c000b0a0:	f7 f9                	idiv   ecx
c000b0a2:	4a                   	dec    edx
c000b0a3:	83 fa 06             	cmp    edx,0x6
c000b0a6:	77 07                	ja     c000b0af <calc_output_multi+0x125>
c000b0a8:	ff 24 95 64 a2 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5d9c]
c000b0af:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b2:	4f                   	dec    edi
c000b0b3:	83 ec 0c             	sub    esp,0xc
c000b0b6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0bd:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0c8:	e8 c2 d8 01 00       	call   c002898f <__extendsfdf2>
c000b0cd:	83 c4 10             	add    esp,0x10
c000b0d0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	e8 ab ce 01 00       	call   c0027f98 <__muldf3>
c000b0ed:	83 c4 10             	add    esp,0x10
c000b0f0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0f8:	52                   	push   edx
c000b0f9:	50                   	push   eax
c000b0fa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0fd:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b100:	e8 16 c8 01 00       	call   c002791b <__adddf3>
c000b105:	83 c4 10             	add    esp,0x10
c000b108:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b10e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b111:	4f                   	dec    edi
c000b112:	83 ec 0c             	sub    esp,0xc
c000b115:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b118:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b11c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b123:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b127:	e8 63 d8 01 00       	call   c002898f <__extendsfdf2>
c000b12c:	83 c4 10             	add    esp,0x10
c000b12f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b133:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	e8 4c ce 01 00       	call   c0027f98 <__muldf3>
c000b14c:	83 c4 10             	add    esp,0x10
c000b14f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b153:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b157:	52                   	push   edx
c000b158:	50                   	push   eax
c000b159:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b15c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b15f:	e8 b7 c7 01 00       	call   c002791b <__adddf3>
c000b164:	83 c4 10             	add    esp,0x10
c000b167:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b16d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b170:	4f                   	dec    edi
c000b171:	83 ec 0c             	sub    esp,0xc
c000b174:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b177:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b17b:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b182:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b186:	e8 04 d8 01 00       	call   c002898f <__extendsfdf2>
c000b18b:	83 c4 10             	add    esp,0x10
c000b18e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b192:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b196:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b1a2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b1a6:	e8 ed cd 01 00       	call   c0027f98 <__muldf3>
c000b1ab:	83 c4 10             	add    esp,0x10
c000b1ae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b1b2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b1b6:	52                   	push   edx
c000b1b7:	50                   	push   eax
c000b1b8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1bb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1be:	e8 58 c7 01 00       	call   c002791b <__adddf3>
c000b1c3:	83 c4 10             	add    esp,0x10
c000b1c6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1c9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1cc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b1cf:	4f                   	dec    edi
c000b1d0:	83 ec 0c             	sub    esp,0xc
c000b1d3:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1da:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1e1:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1e5:	e8 a5 d7 01 00       	call   c002898f <__extendsfdf2>
c000b1ea:	83 c4 10             	add    esp,0x10
c000b1ed:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b1f1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b1f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1fd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b201:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b205:	e8 8e cd 01 00       	call   c0027f98 <__muldf3>
c000b20a:	83 c4 10             	add    esp,0x10
c000b20d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b211:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b215:	52                   	push   edx
c000b216:	50                   	push   eax
c000b217:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b21a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b21d:	e8 f9 c6 01 00       	call   c002791b <__adddf3>
c000b222:	83 c4 10             	add    esp,0x10
c000b225:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b228:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b22b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b22e:	4f                   	dec    edi
c000b22f:	83 ec 0c             	sub    esp,0xc
c000b232:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b235:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b239:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b240:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b244:	e8 46 d7 01 00       	call   c002898f <__extendsfdf2>
c000b249:	83 c4 10             	add    esp,0x10
c000b24c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b250:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b258:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b25c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b260:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b264:	e8 2f cd 01 00       	call   c0027f98 <__muldf3>
c000b269:	83 c4 10             	add    esp,0x10
c000b26c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b270:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b274:	52                   	push   edx
c000b275:	50                   	push   eax
c000b276:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b279:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b27c:	e8 9a c6 01 00       	call   c002791b <__adddf3>
c000b281:	83 c4 10             	add    esp,0x10
c000b284:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b287:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b28a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b28d:	4f                   	dec    edi
c000b28e:	83 ec 0c             	sub    esp,0xc
c000b291:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b294:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b298:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b29f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2a3:	e8 e7 d6 01 00       	call   c002898f <__extendsfdf2>
c000b2a8:	83 c4 10             	add    esp,0x10
c000b2ab:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b2af:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b2b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b2bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b2c3:	e8 d0 cc 01 00       	call   c0027f98 <__muldf3>
c000b2c8:	83 c4 10             	add    esp,0x10
c000b2cb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b2cf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b2d3:	52                   	push   edx
c000b2d4:	50                   	push   eax
c000b2d5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2d8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2db:	e8 3b c6 01 00       	call   c002791b <__adddf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2e6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2e9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b2ec:	4f                   	dec    edi
c000b2ed:	83 ec 0c             	sub    esp,0xc
c000b2f0:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2f7:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2fe:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b302:	e8 88 d6 01 00       	call   c002898f <__extendsfdf2>
c000b307:	83 c4 10             	add    esp,0x10
c000b30a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b30e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b312:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b316:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b31a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b31e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b322:	e8 71 cc 01 00       	call   c0027f98 <__muldf3>
c000b327:	83 c4 10             	add    esp,0x10
c000b32a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b32e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b332:	52                   	push   edx
c000b333:	50                   	push   eax
c000b334:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b337:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b33a:	e8 dc c5 01 00       	call   c002791b <__adddf3>
c000b33f:	83 c4 10             	add    esp,0x10
c000b342:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b345:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b348:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b34b:	4f                   	dec    edi
c000b34c:	83 ec 0c             	sub    esp,0xc
c000b34f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b352:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b356:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b35d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b361:	e8 29 d6 01 00       	call   c002898f <__extendsfdf2>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b36d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b371:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b375:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b379:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b37d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b381:	e8 12 cc 01 00       	call   c0027f98 <__muldf3>
c000b386:	83 c4 10             	add    esp,0x10
c000b389:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b38d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b391:	52                   	push   edx
c000b392:	50                   	push   eax
c000b393:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b396:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b399:	e8 7d c5 01 00       	call   c002791b <__adddf3>
c000b39e:	83 c4 10             	add    esp,0x10
c000b3a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3a7:	85 ff                	test   edi,edi
c000b3a9:	0f 8f e9 fc ff ff    	jg     c000b098 <calc_output_multi+0x10e>
c000b3af:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b3b3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b3b7:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b3bb:	0f 89 4c fc ff ff    	jns    c000b00d <calc_output_multi+0x83>
c000b3c1:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b3c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b3c9:	29 c8                	sub    eax,ecx
c000b3cb:	99                   	cdq    
c000b3cc:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b3d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b3d4:	0f af d0             	imul   edx,eax
c000b3d7:	40                   	inc    eax
c000b3d8:	01 d1                	add    ecx,edx
c000b3da:	0f af c3             	imul   eax,ebx
c000b3dd:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b3e1:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b3e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3e8:	55                   	push   ebp
c000b3e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3ed:	6a 00                	push   0x0
c000b3ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b3f3:	e8 58 53 ff ff       	call   c0000750 <memset>
c000b3f8:	83 c4 10             	add    esp,0x10
c000b3fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b3ff:	e8 e0 e6 ff ff       	call   c0009ae4 <fp_to_double>
c000b404:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b40c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b410:	e8 c5 e6 ff ff       	call   c0009ada <fp_to_int>
c000b415:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b418:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b41b:	57                   	push   edi
c000b41c:	57                   	push   edi
c000b41d:	89 df                	mov    edi,ebx
c000b41f:	55                   	push   ebp
c000b420:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b424:	e8 87 be 01 00       	call   c00272b0 <__subsf3>
c000b429:	89 04 24             	mov    DWORD PTR [esp],eax
c000b42c:	e8 5e d5 01 00       	call   c002898f <__extendsfdf2>
c000b431:	83 c4 10             	add    esp,0x10
c000b434:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b438:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b43c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b444:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b44c:	e8 47 cb 01 00       	call   c0027f98 <__muldf3>
c000b451:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b454:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b458:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b45c:	e8 2e d5 01 00       	call   c002898f <__extendsfdf2>
c000b461:	83 c4 10             	add    esp,0x10
c000b464:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b468:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46c:	52                   	push   edx
c000b46d:	50                   	push   eax
c000b46e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b476:	e8 a0 c4 01 00       	call   c002791b <__adddf3>
c000b47b:	83 c4 10             	add    esp,0x10
c000b47e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b482:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b486:	89 f8                	mov    eax,edi
c000b488:	b9 08 00 00 00       	mov    ecx,0x8
c000b48d:	99                   	cdq    
c000b48e:	f7 f9                	idiv   ecx
c000b490:	4a                   	dec    edx
c000b491:	83 fa 06             	cmp    edx,0x6
c000b494:	77 07                	ja     c000b49d <calc_output_multi+0x513>
c000b496:	ff 24 95 80 a2 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5d80]
c000b49d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a1:	4f                   	dec    edi
c000b4a2:	83 ec 0c             	sub    esp,0xc
c000b4a5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4ac:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4b3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4b7:	e8 d3 d4 01 00       	call   c002898f <__extendsfdf2>
c000b4bc:	83 c4 10             	add    esp,0x10
c000b4bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4d7:	e8 bc ca 01 00       	call   c0027f98 <__muldf3>
c000b4dc:	83 c4 10             	add    esp,0x10
c000b4df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4e7:	52                   	push   edx
c000b4e8:	50                   	push   eax
c000b4e9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4ec:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4ef:	e8 27 c4 01 00       	call   c002791b <__adddf3>
c000b4f4:	83 c4 10             	add    esp,0x10
c000b4f7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4fa:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b501:	4f                   	dec    edi
c000b502:	83 ec 0c             	sub    esp,0xc
c000b505:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b508:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b50c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b513:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b517:	e8 73 d4 01 00       	call   c002898f <__extendsfdf2>
c000b51c:	83 c4 10             	add    esp,0x10
c000b51f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b523:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b527:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b533:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b537:	e8 5c ca 01 00       	call   c0027f98 <__muldf3>
c000b53c:	83 c4 10             	add    esp,0x10
c000b53f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b543:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b547:	52                   	push   edx
c000b548:	50                   	push   eax
c000b549:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b54c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b54f:	e8 c7 c3 01 00       	call   c002791b <__adddf3>
c000b554:	83 c4 10             	add    esp,0x10
c000b557:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b55a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b55d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b561:	4f                   	dec    edi
c000b562:	83 ec 0c             	sub    esp,0xc
c000b565:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b568:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b56c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b573:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b577:	e8 13 d4 01 00       	call   c002898f <__extendsfdf2>
c000b57c:	83 c4 10             	add    esp,0x10
c000b57f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b583:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b587:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b593:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b597:	e8 fc c9 01 00       	call   c0027f98 <__muldf3>
c000b59c:	83 c4 10             	add    esp,0x10
c000b59f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b5a7:	52                   	push   edx
c000b5a8:	50                   	push   eax
c000b5a9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b5ac:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b5af:	e8 67 c3 01 00       	call   c002791b <__adddf3>
c000b5b4:	83 c4 10             	add    esp,0x10
c000b5b7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b5ba:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5c1:	4f                   	dec    edi
c000b5c2:	83 ec 0c             	sub    esp,0xc
c000b5c5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b5c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b5cc:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b5d3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b5d7:	e8 b3 d3 01 00       	call   c002898f <__extendsfdf2>
c000b5dc:	83 c4 10             	add    esp,0x10
c000b5df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b5f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b5f7:	e8 9c c9 01 00       	call   c0027f98 <__muldf3>
c000b5fc:	83 c4 10             	add    esp,0x10
c000b5ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b603:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b607:	52                   	push   edx
c000b608:	50                   	push   eax
c000b609:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b60c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b60f:	e8 07 c3 01 00       	call   c002791b <__adddf3>
c000b614:	83 c4 10             	add    esp,0x10
c000b617:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b61a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b61d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b621:	4f                   	dec    edi
c000b622:	83 ec 0c             	sub    esp,0xc
c000b625:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b628:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b62c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b633:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b637:	e8 53 d3 01 00       	call   c002898f <__extendsfdf2>
c000b63c:	83 c4 10             	add    esp,0x10
c000b63f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b643:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b647:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b653:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b657:	e8 3c c9 01 00       	call   c0027f98 <__muldf3>
c000b65c:	83 c4 10             	add    esp,0x10
c000b65f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b663:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b667:	52                   	push   edx
c000b668:	50                   	push   eax
c000b669:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b66c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b66f:	e8 a7 c2 01 00       	call   c002791b <__adddf3>
c000b674:	83 c4 10             	add    esp,0x10
c000b677:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b67a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b67d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b681:	4f                   	dec    edi
c000b682:	83 ec 0c             	sub    esp,0xc
c000b685:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b688:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b68c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b693:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b697:	e8 f3 d2 01 00       	call   c002898f <__extendsfdf2>
c000b69c:	83 c4 10             	add    esp,0x10
c000b69f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b6a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b6a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6b7:	e8 dc c8 01 00       	call   c0027f98 <__muldf3>
c000b6bc:	83 c4 10             	add    esp,0x10
c000b6bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b6c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b6c7:	52                   	push   edx
c000b6c8:	50                   	push   eax
c000b6c9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b6cc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b6cf:	e8 47 c2 01 00       	call   c002791b <__adddf3>
c000b6d4:	83 c4 10             	add    esp,0x10
c000b6d7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b6da:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b6dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6e1:	4f                   	dec    edi
c000b6e2:	83 ec 0c             	sub    esp,0xc
c000b6e5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b6e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b6ec:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b6f3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b6f7:	e8 93 d2 01 00       	call   c002898f <__extendsfdf2>
c000b6fc:	83 c4 10             	add    esp,0x10
c000b6ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b703:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b707:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b70b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b70f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b713:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b717:	e8 7c c8 01 00       	call   c0027f98 <__muldf3>
c000b71c:	83 c4 10             	add    esp,0x10
c000b71f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b723:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b727:	52                   	push   edx
c000b728:	50                   	push   eax
c000b729:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b72c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b72f:	e8 e7 c1 01 00       	call   c002791b <__adddf3>
c000b734:	83 c4 10             	add    esp,0x10
c000b737:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b73a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b73d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b741:	4f                   	dec    edi
c000b742:	83 ec 0c             	sub    esp,0xc
c000b745:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b748:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b74c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b753:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b757:	e8 33 d2 01 00       	call   c002898f <__extendsfdf2>
c000b75c:	83 c4 10             	add    esp,0x10
c000b75f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b763:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b767:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b76b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b76f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b773:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b777:	e8 1c c8 01 00       	call   c0027f98 <__muldf3>
c000b77c:	83 c4 10             	add    esp,0x10
c000b77f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b783:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b787:	52                   	push   edx
c000b788:	50                   	push   eax
c000b789:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b78c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b78f:	e8 87 c1 01 00       	call   c002791b <__adddf3>
c000b794:	83 c4 10             	add    esp,0x10
c000b797:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b79a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b79d:	85 ff                	test   edi,edi
c000b79f:	0f 8f e1 fc ff ff    	jg     c000b486 <calc_output_multi+0x4fc>
c000b7a5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b7a9:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b7ad:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b7b1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b7b6:	0f 8f 3f fc ff ff    	jg     c000b3fb <calc_output_multi+0x471>
c000b7bc:	be 08 00 00 00       	mov    esi,0x8
c000b7c1:	89 d8                	mov    eax,ebx
c000b7c3:	99                   	cdq    
c000b7c4:	f7 fe                	idiv   esi
c000b7c6:	4a                   	dec    edx
c000b7c7:	83 fa 06             	cmp    edx,0x6
c000b7ca:	77 07                	ja     c000b7d3 <calc_output_multi+0x849>
c000b7cc:	ff 24 95 9c a2 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5d64]
c000b7d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7d7:	4b                   	dec    ebx
c000b7d8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7dc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7e3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7e7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7ea:	e8 2c c1 01 00       	call   c002791b <__adddf3>
c000b7ef:	83 c4 10             	add    esp,0x10
c000b7f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b806:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b80a:	e8 89 c7 01 00       	call   c0027f98 <__muldf3>
c000b80f:	5d                   	pop    ebp
c000b810:	59                   	pop    ecx
c000b811:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b815:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b819:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b81d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b821:	e8 45 d0 01 00       	call   c002886b <__truncdfsf2>
c000b826:	83 c4 10             	add    esp,0x10
c000b829:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b82d:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b830:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b834:	4b                   	dec    ebx
c000b835:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b839:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b840:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b844:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b847:	e8 cf c0 01 00       	call   c002791b <__adddf3>
c000b84c:	83 c4 10             	add    esp,0x10
c000b84f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b853:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b857:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b85b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b85f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b863:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b867:	e8 2c c7 01 00       	call   c0027f98 <__muldf3>
c000b86c:	59                   	pop    ecx
c000b86d:	5f                   	pop    edi
c000b86e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b872:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b876:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b87a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b87e:	e8 e8 cf 01 00       	call   c002886b <__truncdfsf2>
c000b883:	83 c4 10             	add    esp,0x10
c000b886:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b88a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b88d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b891:	4b                   	dec    ebx
c000b892:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b896:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b899:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b89d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b8a1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b8a4:	e8 72 c0 01 00       	call   c002791b <__adddf3>
c000b8a9:	83 c4 10             	add    esp,0x10
c000b8ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8c4:	e8 cf c6 01 00       	call   c0027f98 <__muldf3>
c000b8c9:	5f                   	pop    edi
c000b8ca:	5d                   	pop    ebp
c000b8cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8db:	e8 8b cf 01 00       	call   c002886b <__truncdfsf2>
c000b8e0:	83 c4 10             	add    esp,0x10
c000b8e3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b8e7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b8ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8ee:	4b                   	dec    ebx
c000b8ef:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b8f3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b8f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b8fa:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b8fe:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b901:	e8 15 c0 01 00       	call   c002791b <__adddf3>
c000b906:	83 c4 10             	add    esp,0x10
c000b909:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b90d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b911:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b91d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b921:	e8 72 c6 01 00       	call   c0027f98 <__muldf3>
c000b926:	5d                   	pop    ebp
c000b927:	59                   	pop    ecx
c000b928:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b92c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b930:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b934:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b938:	e8 2e cf 01 00       	call   c002886b <__truncdfsf2>
c000b93d:	83 c4 10             	add    esp,0x10
c000b940:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b944:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b947:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b94b:	4b                   	dec    ebx
c000b94c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b950:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b953:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b957:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b95b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b95e:	e8 b8 bf 01 00       	call   c002791b <__adddf3>
c000b963:	83 c4 10             	add    esp,0x10
c000b966:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b96a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b96e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97e:	e8 15 c6 01 00       	call   c0027f98 <__muldf3>
c000b983:	59                   	pop    ecx
c000b984:	5f                   	pop    edi
c000b985:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b989:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b98d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b991:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b995:	e8 d1 ce 01 00       	call   c002886b <__truncdfsf2>
c000b99a:	83 c4 10             	add    esp,0x10
c000b99d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b9a1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b9a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9a8:	4b                   	dec    ebx
c000b9a9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b9ad:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b9b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9b4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b9b8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b9bb:	e8 5b bf 01 00       	call   c002791b <__adddf3>
c000b9c0:	83 c4 10             	add    esp,0x10
c000b9c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b9c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b9cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9db:	e8 b8 c5 01 00       	call   c0027f98 <__muldf3>
c000b9e0:	5f                   	pop    edi
c000b9e1:	5d                   	pop    ebp
c000b9e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b9e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9f2:	e8 74 ce 01 00       	call   c002886b <__truncdfsf2>
c000b9f7:	83 c4 10             	add    esp,0x10
c000b9fa:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b9fe:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000ba01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba05:	4b                   	dec    ebx
c000ba06:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba0a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba11:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba15:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba18:	e8 fe be 01 00       	call   c002791b <__adddf3>
c000ba1d:	83 c4 10             	add    esp,0x10
c000ba20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba38:	e8 5b c5 01 00       	call   c0027f98 <__muldf3>
c000ba3d:	5d                   	pop    ebp
c000ba3e:	59                   	pop    ecx
c000ba3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba43:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba4f:	e8 17 ce 01 00       	call   c002886b <__truncdfsf2>
c000ba54:	83 c4 10             	add    esp,0x10
c000ba57:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000ba5b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000ba5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba62:	4b                   	dec    ebx
c000ba63:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba67:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba6e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba72:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba75:	e8 a1 be 01 00       	call   c002791b <__adddf3>
c000ba7a:	83 c4 10             	add    esp,0x10
c000ba7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba81:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba95:	e8 fe c4 01 00       	call   c0027f98 <__muldf3>
c000ba9a:	59                   	pop    ecx
c000ba9b:	5f                   	pop    edi
c000ba9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000baa0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000baa4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baa8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baac:	e8 ba cd 01 00       	call   c002886b <__truncdfsf2>
c000bab1:	83 c4 10             	add    esp,0x10
c000bab4:	85 db                	test   ebx,ebx
c000bab6:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000baba:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000babd:	0f 8f fe fc ff ff    	jg     c000b7c1 <calc_output_multi+0x837>
c000bac3:	83 c4 4c             	add    esp,0x4c
c000bac6:	5b                   	pop    ebx
c000bac7:	5e                   	pop    esi
c000bac8:	5f                   	pop    edi
c000bac9:	5d                   	pop    ebp
c000baca:	c3                   	ret    

c000bacb <double_to_fp>:
c000bacb:	83 ec 0c             	sub    esp,0xc
c000bace:	68 00 00 b0 40       	push   0x40b00000
c000bad3:	6a 00                	push   0x0
c000bad5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000badd:	e8 b6 c4 01 00       	call   c0027f98 <__muldf3>
c000bae2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bae6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000baea:	83 c4 1c             	add    esp,0x1c
c000baed:	e9 2e cf 01 00       	jmp    c0028a20 <lrint>

c000baf2 <prepare_data>:
c000baf2:	55                   	push   ebp
c000baf3:	57                   	push   edi
c000baf4:	56                   	push   esi
c000baf5:	53                   	push   ebx
c000baf6:	83 ec 1c             	sub    esp,0x1c
c000baf9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000bafd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bb01:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000bb05:	0f 89 57 01 00 00    	jns    c000bc62 <prepare_data+0x170>
c000bb0b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000bb0e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000bb11:	85 d2                	test   edx,edx
c000bb13:	75 0d                	jne    c000bb22 <prepare_data+0x30>
c000bb15:	8d 14 36             	lea    edx,[esi+esi*1]
c000bb18:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000bb1b:	29 d0                	sub    eax,edx
c000bb1d:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000bb20:	eb 44                	jmp    c000bb66 <prepare_data+0x74>
c000bb22:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000bb25:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000bb28:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000bb2b:	39 c1                	cmp    ecx,eax
c000bb2d:	7d 04                	jge    c000bb33 <prepare_data+0x41>
c000bb2f:	29 d0                	sub    eax,edx
c000bb31:	eb 2d                	jmp    c000bb60 <prepare_data+0x6e>
c000bb33:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000bb39:	29 d7                	sub    edi,edx
c000bb3b:	01 f7                	add    edi,esi
c000bb3d:	51                   	push   ecx
c000bb3e:	29 f2                	sub    edx,esi
c000bb40:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000bb47:	8d 14 90             	lea    edx,[eax+edx*4]
c000bb4a:	51                   	push   ecx
c000bb4b:	52                   	push   edx
c000bb4c:	50                   	push   eax
c000bb4d:	e8 36 4b ff ff       	call   c0000688 <memmove>
c000bb52:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000bb55:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000bb58:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000bb5b:	29 f0                	sub    eax,esi
c000bb5d:	83 c4 10             	add    esp,0x10
c000bb60:	29 f0                	sub    eax,esi
c000bb62:	79 02                	jns    c000bb66 <prepare_data+0x74>
c000bb64:	31 c0                	xor    eax,eax
c000bb66:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000bb69:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000bb6c:	29 ef                	sub    edi,ebp
c000bb6e:	39 c7                	cmp    edi,eax
c000bb70:	7e 02                	jle    c000bb74 <prepare_data+0x82>
c000bb72:	89 c7                	mov    edi,eax
c000bb74:	89 f8                	mov    eax,edi
c000bb76:	99                   	cdq    
c000bb77:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb7a:	b8 15 00 00 00       	mov    eax,0x15
c000bb7f:	29 d7                	sub    edi,edx
c000bb81:	0f 88 dd 00 00 00    	js     c000bc64 <prepare_data+0x172>
c000bb87:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000bb8a:	8d 14 39             	lea    edx,[ecx+edi*1]
c000bb8d:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000bb90:	0f 8f ce 00 00 00    	jg     c000bc64 <prepare_data+0x172>
c000bb96:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000bb9c:	50                   	push   eax
c000bb9d:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000bba4:	50                   	push   eax
c000bba5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bba9:	8b 00                	mov    eax,DWORD PTR [eax]
c000bbab:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000bbae:	50                   	push   eax
c000bbaf:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bbb2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bbb6:	50                   	push   eax
c000bbb7:	e8 8a 4a ff ff       	call   c0000646 <memcpy>
c000bbbc:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000bbbf:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000bbc2:	01 fd                	add    ebp,edi
c000bbc4:	01 f9                	add    ecx,edi
c000bbc6:	83 c4 10             	add    esp,0x10
c000bbc9:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000bbcc:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000bbcf:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000bbd2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bbd6:	0f 85 86 00 00 00    	jne    c000bc62 <prepare_data+0x170>
c000bbdc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000bbdf:	89 e8                	mov    eax,ebp
c000bbe1:	8d 3c 36             	lea    edi,[esi+esi*1]
c000bbe4:	29 c8                	sub    eax,ecx
c000bbe6:	39 f8                	cmp    eax,edi
c000bbe8:	7d 78                	jge    c000bc62 <prepare_data+0x170>
c000bbea:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bbee:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000bbf2:	74 6e                	je     c000bc62 <prepare_data+0x170>
c000bbf4:	8d 7e 04             	lea    edi,[esi+0x4]
c000bbf7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000bbfb:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000bbfe:	29 ef                	sub    edi,ebp
c000bc00:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000bc04:	7c 29                	jl     c000bc2f <prepare_data+0x13d>
c000bc06:	8d 3c 30             	lea    edi,[eax+esi*1]
c000bc09:	29 f1                	sub    ecx,esi
c000bc0b:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000bc12:	55                   	push   ebp
c000bc13:	50                   	push   eax
c000bc14:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bc17:	50                   	push   eax
c000bc18:	52                   	push   edx
c000bc19:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc1d:	e8 66 4a ff ff       	call   c0000688 <memmove>
c000bc22:	83 c4 10             	add    esp,0x10
c000bc25:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000bc28:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000bc2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bc2f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bc32:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bc35:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000bc38:	83 c6 05             	add    esi,0x5
c000bc3b:	78 07                	js     c000bc44 <prepare_data+0x152>
c000bc3d:	8d 3c 30             	lea    edi,[eax+esi*1]
c000bc40:	39 cf                	cmp    edi,ecx
c000bc42:	7e 04                	jle    c000bc48 <prepare_data+0x156>
c000bc44:	89 ce                	mov    esi,ecx
c000bc46:	29 c6                	sub    esi,eax
c000bc48:	8d 04 82             	lea    eax,[edx+eax*4]
c000bc4b:	51                   	push   ecx
c000bc4c:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000bc53:	51                   	push   ecx
c000bc54:	6a 00                	push   0x0
c000bc56:	50                   	push   eax
c000bc57:	e8 f4 4a ff ff       	call   c0000750 <memset>
c000bc5c:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000bc5f:	83 c4 10             	add    esp,0x10
c000bc62:	31 c0                	xor    eax,eax
c000bc64:	83 c4 1c             	add    esp,0x1c
c000bc67:	5b                   	pop    ebx
c000bc68:	5e                   	pop    esi
c000bc69:	5f                   	pop    edi
c000bc6a:	5d                   	pop    ebp
c000bc6b:	c3                   	ret    

c000bc6c <sinc_multichan_vari_process>:
c000bc6c:	55                   	push   ebp
c000bc6d:	ba 05 00 00 00       	mov    edx,0x5
c000bc72:	57                   	push   edi
c000bc73:	56                   	push   esi
c000bc74:	53                   	push   ebx
c000bc75:	83 ec 4c             	sub    esp,0x4c
c000bc78:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000bc7c:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000bc80:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000bc83:	85 db                	test   ebx,ebx
c000bc85:	0f 84 9b 06 00 00    	je     c000c326 <sinc_multichan_vari_process+0x6ba>
c000bc8b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000bc8e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc91:	0f af c5             	imul   eax,ebp
c000bc94:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bc97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bc9a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bca1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bca8:	0f af c5             	imul   eax,ebp
c000bcab:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bcae:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bcb1:	8b 06                	mov    eax,DWORD PTR [esi]
c000bcb3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bcb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcbb:	68 00 00 70 3f       	push   0x3f700000
c000bcc0:	6a 00                	push   0x0
c000bcc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcca:	e8 98 cb 01 00       	call   c0028867 <__ltdf2>
c000bccf:	83 c4 10             	add    esp,0x10
c000bcd2:	ba 16 00 00 00       	mov    edx,0x16
c000bcd7:	85 c0                	test   eax,eax
c000bcd9:	0f 88 47 06 00 00    	js     c000c326 <sinc_multichan_vari_process+0x6ba>
c000bcdf:	68 00 00 70 40       	push   0x40700000
c000bce4:	6a 00                	push   0x0
c000bce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcee:	e8 56 cb 01 00       	call   c0028849 <__gtdf2>
c000bcf3:	83 c4 10             	add    esp,0x10
c000bcf6:	ba 16 00 00 00       	mov    edx,0x16
c000bcfb:	85 c0                	test   eax,eax
c000bcfd:	0f 8f 23 06 00 00    	jg     c000c326 <sinc_multichan_vari_process+0x6ba>
c000bd03:	83 ec 0c             	sub    esp,0xc
c000bd06:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bd09:	e8 ed c8 01 00       	call   c00285fb <__floatsidf>
c000bd0e:	83 c4 10             	add    esp,0x10
c000bd11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd19:	68 00 00 00 40       	push   0x40000000
c000bd1e:	6a 00                	push   0x0
c000bd20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd28:	e8 ee bb 01 00       	call   c002791b <__adddf3>
c000bd2d:	59                   	pop    ecx
c000bd2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bd32:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd36:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd39:	e8 bd c8 01 00       	call   c00285fb <__floatsidf>
c000bd3e:	83 c4 10             	add    esp,0x10
c000bd41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd45:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd49:	52                   	push   edx
c000bd4a:	50                   	push   eax
c000bd4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd53:	e8 24 c5 01 00       	call   c002827c <__divdf3>
c000bd58:	83 c4 10             	add    esp,0x10
c000bd5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd63:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bd66:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bd69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd81:	e8 c3 ca 01 00       	call   c0028849 <__gtdf2>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	85 c0                	test   eax,eax
c000bd8b:	7e 2d                	jle    c000bdba <sinc_multichan_vari_process+0x14e>
c000bd8d:	68 00 00 f0 3f       	push   0x3ff00000
c000bd92:	6a 00                	push   0x0
c000bd94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd9c:	e8 c6 ca 01 00       	call   c0028867 <__ltdf2>
c000bda1:	83 c4 10             	add    esp,0x10
c000bda4:	85 c0                	test   eax,eax
c000bda6:	79 4d                	jns    c000bdf5 <sinc_multichan_vari_process+0x189>
c000bda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bdb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bdb4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bdb8:	eb 1b                	jmp    c000bdd5 <sinc_multichan_vari_process+0x169>
c000bdba:	68 00 00 f0 3f       	push   0x3ff00000
c000bdbf:	6a 00                	push   0x0
c000bdc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bdc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bdc9:	e8 99 ca 01 00       	call   c0028867 <__ltdf2>
c000bdce:	83 c4 10             	add    esp,0x10
c000bdd1:	85 c0                	test   eax,eax
c000bdd3:	79 20                	jns    c000bdf5 <sinc_multichan_vari_process+0x189>
c000bdd5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bddd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bde1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bde5:	e8 92 c4 01 00       	call   c002827c <__divdf3>
c000bdea:	83 c4 10             	add    esp,0x10
c000bded:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bdf1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bdf5:	50                   	push   eax
c000bdf6:	50                   	push   eax
c000bdf7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdff:	e8 1c cc 01 00       	call   c0028a20 <lrint>
c000be04:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000be07:	40                   	inc    eax
c000be08:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be0c:	0f af c5             	imul   eax,ebp
c000be0f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000be13:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000be16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1a:	58                   	pop    eax
c000be1b:	5a                   	pop    edx
c000be1c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be24:	e8 f7 cb 01 00       	call   c0028a20 <lrint>
c000be29:	83 ec 0c             	sub    esp,0xc
c000be2c:	50                   	push   eax
c000be2d:	e8 c9 c7 01 00       	call   c00285fb <__floatsidf>
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be39:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be3d:	52                   	push   edx
c000be3e:	50                   	push   eax
c000be3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be47:	e8 20 c1 01 00       	call   c0027f6c <__subdf3>
c000be4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be54:	83 c4 20             	add    esp,0x20
c000be57:	6a 00                	push   0x0
c000be59:	6a 00                	push   0x0
c000be5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be63:	e8 ff c9 01 00       	call   c0028867 <__ltdf2>
c000be68:	83 c4 10             	add    esp,0x10
c000be6b:	85 c0                	test   eax,eax
c000be6d:	79 1f                	jns    c000be8e <sinc_multichan_vari_process+0x222>
c000be6f:	68 00 00 f0 3f       	push   0x3ff00000
c000be74:	6a 00                	push   0x0
c000be76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7e:	e8 98 ba 01 00       	call   c002791b <__adddf3>
c000be83:	83 c4 10             	add    esp,0x10
c000be86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be8e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be91:	83 ec 10             	sub    esp,0x10
c000be94:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be98:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bea3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bea7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000beab:	e8 bc c0 01 00       	call   c0027f6c <__subdf3>
c000beb0:	83 c4 18             	add    esp,0x18
c000beb3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000beb7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bebb:	52                   	push   edx
c000bebc:	50                   	push   eax
c000bebd:	e8 5e cb 01 00       	call   c0028a20 <lrint>
c000bec2:	0f af e8             	imul   ebp,eax
c000bec5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bec9:	01 e8                	add    eax,ebp
c000becb:	99                   	cdq    
c000becc:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000becf:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bed2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bed6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000beda:	68 00 00 f0 3f       	push   0x3ff00000
c000bedf:	6a 00                	push   0x0
c000bee1:	e8 96 c3 01 00       	call   c002827c <__divdf3>
c000bee6:	83 c4 10             	add    esp,0x10
c000bee9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bef6:	68 23 42 92 0c       	push   0xc924223
c000befb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000beff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf03:	e8 13 ba 01 00       	call   c002791b <__adddf3>
c000bf08:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bf0c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bf10:	83 c4 20             	add    esp,0x20
c000bf13:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bf1b:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bf23:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bf26:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bf29:	7d 50                	jge    c000bf7b <sinc_multichan_vari_process+0x30f>
c000bf2b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bf2e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bf31:	01 c8                	add    eax,ecx
c000bf33:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bf36:	99                   	cdq    
c000bf37:	f7 f9                	idiv   ecx
c000bf39:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bf3d:	7d 0c                	jge    c000bf4b <sinc_multichan_vari_process+0x2df>
c000bf3f:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bf42:	85 ed                	test   ebp,ebp
c000bf44:	79 6b                	jns    c000bfb1 <sinc_multichan_vari_process+0x345>
c000bf46:	e9 e6 00 00 00       	jmp    c000c031 <sinc_multichan_vari_process+0x3c5>
c000bf4b:	50                   	push   eax
c000bf4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bf50:	57                   	push   edi
c000bf51:	53                   	push   ebx
c000bf52:	e8 9b fb ff ff       	call   c000baf2 <prepare_data>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	89 c2                	mov    edx,eax
c000bf5c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bf5f:	85 c0                	test   eax,eax
c000bf61:	0f 85 bf 03 00 00    	jne    c000c326 <sinc_multichan_vari_process+0x6ba>
c000bf67:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bf6a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bf6d:	01 c8                	add    eax,ecx
c000bf6f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bf72:	99                   	cdq    
c000bf73:	f7 f9                	idiv   ecx
c000bf75:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bf79:	7c c4                	jl     c000bf3f <sinc_multichan_vari_process+0x2d3>
c000bf7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bf83:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bf86:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bf89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf8d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bf91:	89 06                	mov    DWORD PTR [esi],eax
c000bf93:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bf96:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bf99:	99                   	cdq    
c000bf9a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bf9d:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bfa0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bfa3:	99                   	cdq    
c000bfa4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bfa7:	31 d2                	xor    edx,edx
c000bfa9:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bfac:	e9 75 03 00 00       	jmp    c000c326 <sinc_multichan_vari_process+0x6ba>
c000bfb1:	83 ec 0c             	sub    esp,0xc
c000bfb4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bfb7:	e8 3f c6 01 00       	call   c00285fb <__floatsidf>
c000bfbc:	83 c4 10             	add    esp,0x10
c000bfbf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bfc3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bfc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfd7:	e8 3f b9 01 00       	call   c002791b <__adddf3>
c000bfdc:	83 c4 10             	add    esp,0x10
c000bfdf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bfe3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bfe7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bff3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bff7:	e8 1f b9 01 00       	call   c002791b <__adddf3>
c000bffc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bfff:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c003:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c007:	e8 ef c5 01 00       	call   c00285fb <__floatsidf>
c000c00c:	83 c4 10             	add    esp,0x10
c000c00f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c013:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c017:	52                   	push   edx
c000c018:	50                   	push   eax
c000c019:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c01d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c021:	e8 3f c8 01 00       	call   c0028865 <__gedf2>
c000c026:	83 c4 10             	add    esp,0x10
c000c029:	85 c0                	test   eax,eax
c000c02b:	0f 89 4a ff ff ff    	jns    c000bf7b <sinc_multichan_vari_process+0x30f>
c000c031:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c035:	0f 8e ed 00 00 00    	jle    c000c128 <sinc_multichan_vari_process+0x4bc>
c000c03b:	83 ec 10             	sub    esp,0x10
c000c03e:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000c041:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000c044:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000c047:	ff 36                	push   DWORD PTR [esi]
c000c049:	e8 1e bf 01 00       	call   c0027f6c <__subdf3>
c000c04e:	83 c4 18             	add    esp,0x18
c000c051:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c055:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c059:	52                   	push   edx
c000c05a:	50                   	push   eax
c000c05b:	e8 a0 c9 01 00       	call   c0028a00 <fabs>
c000c060:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c064:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c068:	83 c4 10             	add    esp,0x10
c000c06b:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c070:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c075:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c079:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c07d:	e8 c7 c7 01 00       	call   c0028849 <__gtdf2>
c000c082:	83 c4 10             	add    esp,0x10
c000c085:	85 c0                	test   eax,eax
c000c087:	0f 8e 9b 00 00 00    	jle    c000c128 <sinc_multichan_vari_process+0x4bc>
c000c08d:	8b 06                	mov    eax,DWORD PTR [esi]
c000c08f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000c092:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c096:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c09a:	52                   	push   edx
c000c09b:	50                   	push   eax
c000c09c:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000c09f:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000c0a2:	e8 c5 be 01 00       	call   c0027f6c <__subdf3>
c000c0a7:	59                   	pop    ecx
c000c0a8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0ac:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c0b0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c0b3:	e8 43 c5 01 00       	call   c00285fb <__floatsidf>
c000c0b8:	83 c4 10             	add    esp,0x10
c000c0bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0c3:	52                   	push   edx
c000c0c4:	50                   	push   eax
c000c0c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0cd:	e8 c6 be 01 00       	call   c0027f98 <__muldf3>
c000c0d2:	5d                   	pop    ebp
c000c0d3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0d7:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c0db:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c0de:	e8 18 c5 01 00       	call   c00285fb <__floatsidf>
c000c0e3:	83 c4 10             	add    esp,0x10
c000c0e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0ee:	52                   	push   edx
c000c0ef:	50                   	push   eax
c000c0f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0f8:	e8 7f c1 01 00       	call   c002827c <__divdf3>
c000c0fd:	83 c4 10             	add    esp,0x10
c000c100:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c104:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c10c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c110:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c114:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c118:	e8 fe b7 01 00       	call   c002791b <__adddf3>
c000c11d:	83 c4 10             	add    esp,0x10
c000c120:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c124:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c128:	83 ec 0c             	sub    esp,0xc
c000c12b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c12e:	e8 c8 c4 01 00       	call   c00285fb <__floatsidf>
c000c133:	83 c4 10             	add    esp,0x10
c000c136:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c13a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c13e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c14a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c14e:	e8 14 c7 01 00       	call   c0028867 <__ltdf2>
c000c153:	83 c4 10             	add    esp,0x10
c000c156:	85 c0                	test   eax,eax
c000c158:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c15c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c160:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c164:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c168:	78 10                	js     c000c17a <sinc_multichan_vari_process+0x50e>
c000c16a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c16e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c172:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c176:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c17a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c17e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c182:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c186:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c18a:	e8 09 be 01 00       	call   c0027f98 <__muldf3>
c000c18f:	59                   	pop    ecx
c000c190:	5d                   	pop    ebp
c000c191:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c195:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c199:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c19d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c1a1:	e8 25 f9 ff ff       	call   c000bacb <double_to_fp>
c000c1a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1aa:	89 c5                	mov    ebp,eax
c000c1ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1b8:	e8 db bd 01 00       	call   c0027f98 <__muldf3>
c000c1bd:	83 c4 18             	add    esp,0x18
c000c1c0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c1c4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1c8:	52                   	push   edx
c000c1c9:	50                   	push   eax
c000c1ca:	e8 fc f8 ff ff       	call   c000bacb <double_to_fp>
c000c1cf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c1d2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c1d6:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c1d9:	8d 04 90             	lea    eax,[eax+edx*4]
c000c1dc:	50                   	push   eax
c000c1dd:	50                   	push   eax
c000c1de:	50                   	push   eax
c000c1df:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1e2:	e8 14 c4 01 00       	call   c00285fb <__floatsidf>
c000c1e7:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c1eb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000c1ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1ff:	e8 78 c0 01 00       	call   c002827c <__divdf3>
c000c204:	83 c4 1c             	add    esp,0x1c
c000c207:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c20b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c20f:	52                   	push   edx
c000c210:	89 ea                	mov    edx,ebp
c000c212:	50                   	push   eax
c000c213:	89 d8                	mov    eax,ebx
c000c215:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c218:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c21c:	e8 69 ed ff ff       	call   c000af8a <calc_output_multi>
c000c221:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c224:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c227:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c22b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c22f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c233:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c237:	e8 40 c0 01 00       	call   c002827c <__divdf3>
c000c23c:	83 c4 10             	add    esp,0x10
c000c23f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c243:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c253:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c257:	e8 bf b6 01 00       	call   c002791b <__adddf3>
c000c25c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c260:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c264:	83 c4 28             	add    esp,0x28
c000c267:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26f:	e8 ac c7 01 00       	call   c0028a20 <lrint>
c000c274:	83 ec 0c             	sub    esp,0xc
c000c277:	50                   	push   eax
c000c278:	e8 7e c3 01 00       	call   c00285fb <__floatsidf>
c000c27d:	83 c4 10             	add    esp,0x10
c000c280:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c284:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c288:	52                   	push   edx
c000c289:	50                   	push   eax
c000c28a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c28e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c292:	e8 d5 bc 01 00       	call   c0027f6c <__subdf3>
c000c297:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c29b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29f:	83 c4 20             	add    esp,0x20
c000c2a2:	6a 00                	push   0x0
c000c2a4:	6a 00                	push   0x0
c000c2a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ae:	e8 b4 c5 01 00       	call   c0028867 <__ltdf2>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	85 c0                	test   eax,eax
c000c2b8:	79 20                	jns    c000c2da <sinc_multichan_vari_process+0x66e>
c000c2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ca:	e8 4c b6 01 00       	call   c002791b <__adddf3>
c000c2cf:	83 c4 10             	add    esp,0x10
c000c2d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c2da:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c2dd:	83 ec 10             	sub    esp,0x10
c000c2e0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c2e4:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c2e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c2f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c2f7:	e8 70 bc 01 00       	call   c0027f6c <__subdf3>
c000c2fc:	83 c4 18             	add    esp,0x18
c000c2ff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c303:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c307:	52                   	push   edx
c000c308:	50                   	push   eax
c000c309:	e8 12 c7 01 00       	call   c0028a20 <lrint>
c000c30e:	0f af e8             	imul   ebp,eax
c000c311:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c315:	83 c4 10             	add    esp,0x10
c000c318:	01 e8                	add    eax,ebp
c000c31a:	99                   	cdq    
c000c31b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c31e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c321:	e9 fd fb ff ff       	jmp    c000bf23 <sinc_multichan_vari_process+0x2b7>
c000c326:	83 c4 4c             	add    esp,0x4c
c000c329:	89 d0                	mov    eax,edx
c000c32b:	5b                   	pop    ebx
c000c32c:	5e                   	pop    esi
c000c32d:	5f                   	pop    edi
c000c32e:	5d                   	pop    ebp
c000c32f:	c3                   	ret    

c000c330 <sinc_hex_vari_process>:
c000c330:	55                   	push   ebp
c000c331:	ba 05 00 00 00       	mov    edx,0x5
c000c336:	57                   	push   edi
c000c337:	56                   	push   esi
c000c338:	53                   	push   ebx
c000c339:	83 ec 4c             	sub    esp,0x4c
c000c33c:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c340:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c344:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c347:	85 db                	test   ebx,ebx
c000c349:	0f 84 9c 06 00 00    	je     c000c9eb <sinc_hex_vari_process+0x6bb>
c000c34f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c352:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c355:	0f af c7             	imul   eax,edi
c000c358:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c35b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c35e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c365:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c36c:	0f af c7             	imul   eax,edi
c000c36f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c372:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c375:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c378:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c37c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c380:	68 00 00 70 3f       	push   0x3f700000
c000c385:	6a 00                	push   0x0
c000c387:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c38f:	e8 d3 c4 01 00       	call   c0028867 <__ltdf2>
c000c394:	83 c4 10             	add    esp,0x10
c000c397:	ba 16 00 00 00       	mov    edx,0x16
c000c39c:	85 c0                	test   eax,eax
c000c39e:	0f 88 47 06 00 00    	js     c000c9eb <sinc_hex_vari_process+0x6bb>
c000c3a4:	68 00 00 70 40       	push   0x40700000
c000c3a9:	6a 00                	push   0x0
c000c3ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b3:	e8 91 c4 01 00       	call   c0028849 <__gtdf2>
c000c3b8:	83 c4 10             	add    esp,0x10
c000c3bb:	ba 16 00 00 00       	mov    edx,0x16
c000c3c0:	85 c0                	test   eax,eax
c000c3c2:	0f 8f 23 06 00 00    	jg     c000c9eb <sinc_hex_vari_process+0x6bb>
c000c3c8:	83 ec 0c             	sub    esp,0xc
c000c3cb:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c3ce:	e8 28 c2 01 00       	call   c00285fb <__floatsidf>
c000c3d3:	83 c4 10             	add    esp,0x10
c000c3d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c3da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c3de:	68 00 00 00 40       	push   0x40000000
c000c3e3:	6a 00                	push   0x0
c000c3e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3ed:	e8 29 b5 01 00       	call   c002791b <__adddf3>
c000c3f2:	59                   	pop    ecx
c000c3f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c3f7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c3fb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3fe:	e8 f8 c1 01 00       	call   c00285fb <__floatsidf>
c000c403:	83 c4 10             	add    esp,0x10
c000c406:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c40a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c40e:	52                   	push   edx
c000c40f:	50                   	push   eax
c000c410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c418:	e8 5f be 01 00       	call   c002827c <__divdf3>
c000c41d:	83 c4 10             	add    esp,0x10
c000c420:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c424:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c428:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c42b:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c42e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c432:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c436:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c43a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c43e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c442:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c446:	e8 fe c3 01 00       	call   c0028849 <__gtdf2>
c000c44b:	83 c4 10             	add    esp,0x10
c000c44e:	85 c0                	test   eax,eax
c000c450:	7e 2d                	jle    c000c47f <sinc_hex_vari_process+0x14f>
c000c452:	68 00 00 f0 3f       	push   0x3ff00000
c000c457:	6a 00                	push   0x0
c000c459:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c45d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c461:	e8 01 c4 01 00       	call   c0028867 <__ltdf2>
c000c466:	83 c4 10             	add    esp,0x10
c000c469:	85 c0                	test   eax,eax
c000c46b:	79 4d                	jns    c000c4ba <sinc_hex_vari_process+0x18a>
c000c46d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c471:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c475:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c479:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c47d:	eb 1b                	jmp    c000c49a <sinc_hex_vari_process+0x16a>
c000c47f:	68 00 00 f0 3f       	push   0x3ff00000
c000c484:	6a 00                	push   0x0
c000c486:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c48a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c48e:	e8 d4 c3 01 00       	call   c0028867 <__ltdf2>
c000c493:	83 c4 10             	add    esp,0x10
c000c496:	85 c0                	test   eax,eax
c000c498:	79 20                	jns    c000c4ba <sinc_hex_vari_process+0x18a>
c000c49a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c49e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c4a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4aa:	e8 cd bd 01 00       	call   c002827c <__divdf3>
c000c4af:	83 c4 10             	add    esp,0x10
c000c4b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4b6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c4ba:	50                   	push   eax
c000c4bb:	50                   	push   eax
c000c4bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4c4:	e8 57 c5 01 00       	call   c0028a20 <lrint>
c000c4c9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c4cc:	40                   	inc    eax
c000c4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4d1:	0f af c7             	imul   eax,edi
c000c4d4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c4d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4df:	58                   	pop    eax
c000c4e0:	5a                   	pop    edx
c000c4e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4e9:	e8 32 c5 01 00       	call   c0028a20 <lrint>
c000c4ee:	83 ec 0c             	sub    esp,0xc
c000c4f1:	50                   	push   eax
c000c4f2:	e8 04 c1 01 00       	call   c00285fb <__floatsidf>
c000c4f7:	83 c4 10             	add    esp,0x10
c000c4fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4fe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c502:	52                   	push   edx
c000c503:	50                   	push   eax
c000c504:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c508:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c50c:	e8 5b ba 01 00       	call   c0027f6c <__subdf3>
c000c511:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c515:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c519:	83 c4 20             	add    esp,0x20
c000c51c:	6a 00                	push   0x0
c000c51e:	6a 00                	push   0x0
c000c520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c528:	e8 3a c3 01 00       	call   c0028867 <__ltdf2>
c000c52d:	83 c4 10             	add    esp,0x10
c000c530:	85 c0                	test   eax,eax
c000c532:	79 1f                	jns    c000c553 <sinc_hex_vari_process+0x223>
c000c534:	68 00 00 f0 3f       	push   0x3ff00000
c000c539:	6a 00                	push   0x0
c000c53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c53f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c543:	e8 d3 b3 01 00       	call   c002791b <__adddf3>
c000c548:	83 c4 10             	add    esp,0x10
c000c54b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c54f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c553:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c556:	83 ec 10             	sub    esp,0x10
c000c559:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c55d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c568:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c56c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c570:	e8 f7 b9 01 00       	call   c0027f6c <__subdf3>
c000c575:	83 c4 18             	add    esp,0x18
c000c578:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c57c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	e8 99 c4 01 00       	call   c0028a20 <lrint>
c000c587:	0f af f8             	imul   edi,eax
c000c58a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c58e:	01 f8                	add    eax,edi
c000c590:	99                   	cdq    
c000c591:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c594:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c597:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c59b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c59f:	68 00 00 f0 3f       	push   0x3ff00000
c000c5a4:	6a 00                	push   0x0
c000c5a6:	e8 d1 bc 01 00       	call   c002827c <__divdf3>
c000c5ab:	83 c4 10             	add    esp,0x10
c000c5ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c5bb:	68 23 42 92 0c       	push   0xc924223
c000c5c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c5c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c5c8:	e8 4e b3 01 00       	call   c002791b <__adddf3>
c000c5cd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c5d1:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c5d5:	83 c4 20             	add    esp,0x20
c000c5d8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c5e0:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c5e8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c5eb:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c5ee:	7d 50                	jge    c000c640 <sinc_hex_vari_process+0x310>
c000c5f0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c5f3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c5f6:	01 c8                	add    eax,ecx
c000c5f8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c5fb:	99                   	cdq    
c000c5fc:	f7 f9                	idiv   ecx
c000c5fe:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c602:	7d 0c                	jge    c000c610 <sinc_hex_vari_process+0x2e0>
c000c604:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c607:	85 ff                	test   edi,edi
c000c609:	79 6c                	jns    c000c677 <sinc_hex_vari_process+0x347>
c000c60b:	e9 e7 00 00 00       	jmp    c000c6f7 <sinc_hex_vari_process+0x3c7>
c000c610:	50                   	push   eax
c000c611:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c615:	56                   	push   esi
c000c616:	53                   	push   ebx
c000c617:	e8 d6 f4 ff ff       	call   c000baf2 <prepare_data>
c000c61c:	83 c4 10             	add    esp,0x10
c000c61f:	89 c2                	mov    edx,eax
c000c621:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c624:	85 c0                	test   eax,eax
c000c626:	0f 85 bf 03 00 00    	jne    c000c9eb <sinc_hex_vari_process+0x6bb>
c000c62c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c62f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c632:	01 c8                	add    eax,ecx
c000c634:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c637:	99                   	cdq    
c000c638:	f7 f9                	idiv   ecx
c000c63a:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c63e:	7c c4                	jl     c000c604 <sinc_hex_vari_process+0x2d4>
c000c640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c644:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c648:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c64b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c652:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c656:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c659:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c65c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c65f:	99                   	cdq    
c000c660:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c663:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c666:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c669:	99                   	cdq    
c000c66a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c66d:	31 d2                	xor    edx,edx
c000c66f:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c672:	e9 74 03 00 00       	jmp    c000c9eb <sinc_hex_vari_process+0x6bb>
c000c677:	83 ec 0c             	sub    esp,0xc
c000c67a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c67d:	e8 79 bf 01 00       	call   c00285fb <__floatsidf>
c000c682:	83 c4 10             	add    esp,0x10
c000c685:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c689:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c68d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c691:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c695:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c699:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c69d:	e8 79 b2 01 00       	call   c002791b <__adddf3>
c000c6a2:	83 c4 10             	add    esp,0x10
c000c6a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c6a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c6ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6bd:	e8 59 b2 01 00       	call   c002791b <__adddf3>
c000c6c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c6c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6c9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6cd:	e8 29 bf 01 00       	call   c00285fb <__floatsidf>
c000c6d2:	83 c4 10             	add    esp,0x10
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	50                   	push   eax
c000c6df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6e7:	e8 79 c1 01 00       	call   c0028865 <__gedf2>
c000c6ec:	83 c4 10             	add    esp,0x10
c000c6ef:	85 c0                	test   eax,eax
c000c6f1:	0f 89 49 ff ff ff    	jns    c000c640 <sinc_hex_vari_process+0x310>
c000c6f7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c6fb:	0f 8e ef 00 00 00    	jle    c000c7f0 <sinc_hex_vari_process+0x4c0>
c000c701:	83 ec 10             	sub    esp,0x10
c000c704:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c707:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c70a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c70d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c710:	e8 57 b8 01 00       	call   c0027f6c <__subdf3>
c000c715:	83 c4 18             	add    esp,0x18
c000c718:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c71c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c720:	52                   	push   edx
c000c721:	50                   	push   eax
c000c722:	e8 d9 c2 01 00       	call   c0028a00 <fabs>
c000c727:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c72b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c72f:	83 c4 10             	add    esp,0x10
c000c732:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c737:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c73c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c740:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c744:	e8 00 c1 01 00       	call   c0028849 <__gtdf2>
c000c749:	83 c4 10             	add    esp,0x10
c000c74c:	85 c0                	test   eax,eax
c000c74e:	0f 8e 9c 00 00 00    	jle    c000c7f0 <sinc_hex_vari_process+0x4c0>
c000c754:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c757:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c75a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c75e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c762:	52                   	push   edx
c000c763:	50                   	push   eax
c000c764:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c767:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c76a:	e8 fd b7 01 00       	call   c0027f6c <__subdf3>
c000c76f:	59                   	pop    ecx
c000c770:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c774:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c778:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c77b:	e8 7b be 01 00       	call   c00285fb <__floatsidf>
c000c780:	83 c4 10             	add    esp,0x10
c000c783:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c787:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c78b:	52                   	push   edx
c000c78c:	50                   	push   eax
c000c78d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c791:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c795:	e8 fe b7 01 00       	call   c0027f98 <__muldf3>
c000c79a:	5f                   	pop    edi
c000c79b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c79f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c7a3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c7a6:	e8 50 be 01 00       	call   c00285fb <__floatsidf>
c000c7ab:	83 c4 10             	add    esp,0x10
c000c7ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7b6:	52                   	push   edx
c000c7b7:	50                   	push   eax
c000c7b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7c0:	e8 b7 ba 01 00       	call   c002827c <__divdf3>
c000c7c5:	83 c4 10             	add    esp,0x10
c000c7c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7e0:	e8 36 b1 01 00       	call   c002791b <__adddf3>
c000c7e5:	83 c4 10             	add    esp,0x10
c000c7e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c7ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c7f0:	83 ec 0c             	sub    esp,0xc
c000c7f3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c7f6:	e8 00 be 01 00       	call   c00285fb <__floatsidf>
c000c7fb:	83 c4 10             	add    esp,0x10
c000c7fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c802:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c80a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c816:	e8 4c c0 01 00       	call   c0028867 <__ltdf2>
c000c81b:	83 c4 10             	add    esp,0x10
c000c81e:	85 c0                	test   eax,eax
c000c820:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c824:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c828:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c82c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c830:	78 10                	js     c000c842 <sinc_hex_vari_process+0x512>
c000c832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c836:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c83a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c83e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c842:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c846:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c84a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c84e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c852:	e8 41 b7 01 00       	call   c0027f98 <__muldf3>
c000c857:	59                   	pop    ecx
c000c858:	5f                   	pop    edi
c000c859:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c85d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c861:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c865:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c869:	e8 5d f2 ff ff       	call   c000bacb <double_to_fp>
c000c86e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c872:	89 c7                	mov    edi,eax
c000c874:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c878:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c87c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c880:	e8 13 b7 01 00       	call   c0027f98 <__muldf3>
c000c885:	83 c4 18             	add    esp,0x18
c000c888:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c88c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c890:	52                   	push   edx
c000c891:	50                   	push   eax
c000c892:	e8 34 f2 ff ff       	call   c000bacb <double_to_fp>
c000c897:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c89a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c89e:	83 c4 0c             	add    esp,0xc
c000c8a1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c8a4:	8d 04 90             	lea    eax,[eax+edx*4]
c000c8a7:	50                   	push   eax
c000c8a8:	50                   	push   eax
c000c8a9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8ac:	e8 4a bd 01 00       	call   c00285fb <__floatsidf>
c000c8b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c8b5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c8b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c9:	e8 ae b9 01 00       	call   c002827c <__divdf3>
c000c8ce:	83 c4 18             	add    esp,0x18
c000c8d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c8d9:	52                   	push   edx
c000c8da:	89 fa                	mov    edx,edi
c000c8dc:	50                   	push   eax
c000c8dd:	89 d8                	mov    eax,ebx
c000c8df:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c8e3:	e8 50 de ff ff       	call   c000a738 <calc_output_hex>
c000c8e8:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c8ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c8f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c8fc:	e8 7b b9 01 00       	call   c002827c <__divdf3>
c000c901:	83 c4 10             	add    esp,0x10
c000c904:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c908:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c90c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c914:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c918:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c91c:	e8 fa af 01 00       	call   c002791b <__adddf3>
c000c921:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c925:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c929:	83 c4 18             	add    esp,0x18
c000c92c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c930:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c934:	e8 e7 c0 01 00       	call   c0028a20 <lrint>
c000c939:	83 ec 0c             	sub    esp,0xc
c000c93c:	50                   	push   eax
c000c93d:	e8 b9 bc 01 00       	call   c00285fb <__floatsidf>
c000c942:	83 c4 10             	add    esp,0x10
c000c945:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c949:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c94d:	52                   	push   edx
c000c94e:	50                   	push   eax
c000c94f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c953:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c957:	e8 10 b6 01 00       	call   c0027f6c <__subdf3>
c000c95c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c960:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c964:	83 c4 20             	add    esp,0x20
c000c967:	6a 00                	push   0x0
c000c969:	6a 00                	push   0x0
c000c96b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c96f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c973:	e8 ef be 01 00       	call   c0028867 <__ltdf2>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	85 c0                	test   eax,eax
c000c97d:	79 20                	jns    c000c99f <sinc_hex_vari_process+0x66f>
c000c97f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c983:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c987:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c98b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c98f:	e8 87 af 01 00       	call   c002791b <__adddf3>
c000c994:	83 c4 10             	add    esp,0x10
c000c997:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c99b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c99f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9a2:	83 ec 10             	sub    esp,0x10
c000c9a5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c9a9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9b4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9bc:	e8 ab b5 01 00       	call   c0027f6c <__subdf3>
c000c9c1:	83 c4 18             	add    esp,0x18
c000c9c4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9cc:	52                   	push   edx
c000c9cd:	50                   	push   eax
c000c9ce:	e8 4d c0 01 00       	call   c0028a20 <lrint>
c000c9d3:	0f af f8             	imul   edi,eax
c000c9d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c9da:	83 c4 10             	add    esp,0x10
c000c9dd:	01 f8                	add    eax,edi
c000c9df:	99                   	cdq    
c000c9e0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c9e3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c9e6:	e9 fd fb ff ff       	jmp    c000c5e8 <sinc_hex_vari_process+0x2b8>
c000c9eb:	83 c4 4c             	add    esp,0x4c
c000c9ee:	89 d0                	mov    eax,edx
c000c9f0:	5b                   	pop    ebx
c000c9f1:	5e                   	pop    esi
c000c9f2:	5f                   	pop    edi
c000c9f3:	5d                   	pop    ebp
c000c9f4:	c3                   	ret    

c000c9f5 <sinc_quad_vari_process>:
c000c9f5:	55                   	push   ebp
c000c9f6:	ba 05 00 00 00       	mov    edx,0x5
c000c9fb:	57                   	push   edi
c000c9fc:	56                   	push   esi
c000c9fd:	53                   	push   ebx
c000c9fe:	83 ec 4c             	sub    esp,0x4c
c000ca01:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ca05:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ca09:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ca0c:	85 db                	test   ebx,ebx
c000ca0e:	0f 84 9c 06 00 00    	je     c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ca14:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ca17:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca1a:	0f af c7             	imul   eax,edi
c000ca1d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ca20:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ca23:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ca2a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ca31:	0f af c7             	imul   eax,edi
c000ca34:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ca37:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ca3a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ca3d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca41:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca45:	68 00 00 70 3f       	push   0x3f700000
c000ca4a:	6a 00                	push   0x0
c000ca4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca54:	e8 0e be 01 00       	call   c0028867 <__ltdf2>
c000ca59:	83 c4 10             	add    esp,0x10
c000ca5c:	ba 16 00 00 00       	mov    edx,0x16
c000ca61:	85 c0                	test   eax,eax
c000ca63:	0f 88 47 06 00 00    	js     c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ca69:	68 00 00 70 40       	push   0x40700000
c000ca6e:	6a 00                	push   0x0
c000ca70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca78:	e8 cc bd 01 00       	call   c0028849 <__gtdf2>
c000ca7d:	83 c4 10             	add    esp,0x10
c000ca80:	ba 16 00 00 00       	mov    edx,0x16
c000ca85:	85 c0                	test   eax,eax
c000ca87:	0f 8f 23 06 00 00    	jg     c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ca8d:	83 ec 0c             	sub    esp,0xc
c000ca90:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ca93:	e8 63 bb 01 00       	call   c00285fb <__floatsidf>
c000ca98:	83 c4 10             	add    esp,0x10
c000ca9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000caa3:	68 00 00 00 40       	push   0x40000000
c000caa8:	6a 00                	push   0x0
c000caaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000caae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cab2:	e8 64 ae 01 00       	call   c002791b <__adddf3>
c000cab7:	59                   	pop    ecx
c000cab8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cabc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cac0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cac3:	e8 33 bb 01 00       	call   c00285fb <__floatsidf>
c000cac8:	83 c4 10             	add    esp,0x10
c000cacb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cacf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cad3:	52                   	push   edx
c000cad4:	50                   	push   eax
c000cad5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cad9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cadd:	e8 9a b7 01 00       	call   c002827c <__divdf3>
c000cae2:	83 c4 10             	add    esp,0x10
c000cae5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cae9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000caed:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000caf0:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000caf3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000caf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cafb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000caff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb0b:	e8 39 bd 01 00       	call   c0028849 <__gtdf2>
c000cb10:	83 c4 10             	add    esp,0x10
c000cb13:	85 c0                	test   eax,eax
c000cb15:	7e 2d                	jle    c000cb44 <sinc_quad_vari_process+0x14f>
c000cb17:	68 00 00 f0 3f       	push   0x3ff00000
c000cb1c:	6a 00                	push   0x0
c000cb1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb26:	e8 3c bd 01 00       	call   c0028867 <__ltdf2>
c000cb2b:	83 c4 10             	add    esp,0x10
c000cb2e:	85 c0                	test   eax,eax
c000cb30:	79 4d                	jns    c000cb7f <sinc_quad_vari_process+0x18a>
c000cb32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cb42:	eb 1b                	jmp    c000cb5f <sinc_quad_vari_process+0x16a>
c000cb44:	68 00 00 f0 3f       	push   0x3ff00000
c000cb49:	6a 00                	push   0x0
c000cb4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb53:	e8 0f bd 01 00       	call   c0028867 <__ltdf2>
c000cb58:	83 c4 10             	add    esp,0x10
c000cb5b:	85 c0                	test   eax,eax
c000cb5d:	79 20                	jns    c000cb7f <sinc_quad_vari_process+0x18a>
c000cb5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6f:	e8 08 b7 01 00       	call   c002827c <__divdf3>
c000cb74:	83 c4 10             	add    esp,0x10
c000cb77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cb7b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cb7f:	50                   	push   eax
c000cb80:	50                   	push   eax
c000cb81:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb85:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb89:	e8 92 be 01 00       	call   c0028a20 <lrint>
c000cb8e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000cb91:	40                   	inc    eax
c000cb92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb96:	0f af c7             	imul   eax,edi
c000cb99:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000cb9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cba0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba4:	58                   	pop    eax
c000cba5:	5a                   	pop    edx
c000cba6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbaa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbae:	e8 6d be 01 00       	call   c0028a20 <lrint>
c000cbb3:	83 ec 0c             	sub    esp,0xc
c000cbb6:	50                   	push   eax
c000cbb7:	e8 3f ba 01 00       	call   c00285fb <__floatsidf>
c000cbbc:	83 c4 10             	add    esp,0x10
c000cbbf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbc3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbc7:	52                   	push   edx
c000cbc8:	50                   	push   eax
c000cbc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbcd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbd1:	e8 96 b3 01 00       	call   c0027f6c <__subdf3>
c000cbd6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbda:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbde:	83 c4 20             	add    esp,0x20
c000cbe1:	6a 00                	push   0x0
c000cbe3:	6a 00                	push   0x0
c000cbe5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbe9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbed:	e8 75 bc 01 00       	call   c0028867 <__ltdf2>
c000cbf2:	83 c4 10             	add    esp,0x10
c000cbf5:	85 c0                	test   eax,eax
c000cbf7:	79 1f                	jns    c000cc18 <sinc_quad_vari_process+0x223>
c000cbf9:	68 00 00 f0 3f       	push   0x3ff00000
c000cbfe:	6a 00                	push   0x0
c000cc00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc08:	e8 0e ad 01 00       	call   c002791b <__adddf3>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc18:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc1b:	83 ec 10             	sub    esp,0x10
c000cc1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cc22:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc35:	e8 32 b3 01 00       	call   c0027f6c <__subdf3>
c000cc3a:	83 c4 18             	add    esp,0x18
c000cc3d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	e8 d4 bd 01 00       	call   c0028a20 <lrint>
c000cc4c:	0f af f8             	imul   edi,eax
c000cc4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc53:	01 f8                	add    eax,edi
c000cc55:	99                   	cdq    
c000cc56:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc59:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc5c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc64:	68 00 00 f0 3f       	push   0x3ff00000
c000cc69:	6a 00                	push   0x0
c000cc6b:	e8 0c b6 01 00       	call   c002827c <__divdf3>
c000cc70:	83 c4 10             	add    esp,0x10
c000cc73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc77:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cc80:	68 23 42 92 0c       	push   0xc924223
c000cc85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc8d:	e8 89 ac 01 00       	call   c002791b <__adddf3>
c000cc92:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cc96:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cc9a:	83 c4 20             	add    esp,0x20
c000cc9d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cca5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ccad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ccb0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ccb3:	7d 50                	jge    c000cd05 <sinc_quad_vari_process+0x310>
c000ccb5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccb8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ccbb:	01 c8                	add    eax,ecx
c000ccbd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ccc0:	99                   	cdq    
c000ccc1:	f7 f9                	idiv   ecx
c000ccc3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ccc7:	7d 0c                	jge    c000ccd5 <sinc_quad_vari_process+0x2e0>
c000ccc9:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cccc:	85 ff                	test   edi,edi
c000ccce:	79 6c                	jns    c000cd3c <sinc_quad_vari_process+0x347>
c000ccd0:	e9 e7 00 00 00       	jmp    c000cdbc <sinc_quad_vari_process+0x3c7>
c000ccd5:	50                   	push   eax
c000ccd6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ccda:	56                   	push   esi
c000ccdb:	53                   	push   ebx
c000ccdc:	e8 11 ee ff ff       	call   c000baf2 <prepare_data>
c000cce1:	83 c4 10             	add    esp,0x10
c000cce4:	89 c2                	mov    edx,eax
c000cce6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cce9:	85 c0                	test   eax,eax
c000cceb:	0f 85 bf 03 00 00    	jne    c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ccf1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccf4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ccf7:	01 c8                	add    eax,ecx
c000ccf9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ccfc:	99                   	cdq    
c000ccfd:	f7 f9                	idiv   ecx
c000ccff:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cd03:	7c c4                	jl     c000ccc9 <sinc_quad_vari_process+0x2d4>
c000cd05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd09:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd0d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cd10:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd17:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cd1b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cd1e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cd21:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cd24:	99                   	cdq    
c000cd25:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd28:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cd2b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cd2e:	99                   	cdq    
c000cd2f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd32:	31 d2                	xor    edx,edx
c000cd34:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cd37:	e9 74 03 00 00       	jmp    c000d0b0 <sinc_quad_vari_process+0x6bb>
c000cd3c:	83 ec 0c             	sub    esp,0xc
c000cd3f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cd42:	e8 b4 b8 01 00       	call   c00285fb <__floatsidf>
c000cd47:	83 c4 10             	add    esp,0x10
c000cd4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd4e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cd56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cd5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd62:	e8 b4 ab 01 00       	call   c002791b <__adddf3>
c000cd67:	83 c4 10             	add    esp,0x10
c000cd6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd72:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd82:	e8 94 ab 01 00       	call   c002791b <__adddf3>
c000cd87:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cd8a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd8e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd92:	e8 64 b8 01 00       	call   c00285fb <__floatsidf>
c000cd97:	83 c4 10             	add    esp,0x10
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	50                   	push   eax
c000cda4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cda8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdac:	e8 b4 ba 01 00       	call   c0028865 <__gedf2>
c000cdb1:	83 c4 10             	add    esp,0x10
c000cdb4:	85 c0                	test   eax,eax
c000cdb6:	0f 89 49 ff ff ff    	jns    c000cd05 <sinc_quad_vari_process+0x310>
c000cdbc:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cdc0:	0f 8e ef 00 00 00    	jle    c000ceb5 <sinc_quad_vari_process+0x4c0>
c000cdc6:	83 ec 10             	sub    esp,0x10
c000cdc9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cdcc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cdcf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cdd2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cdd5:	e8 92 b1 01 00       	call   c0027f6c <__subdf3>
c000cdda:	83 c4 18             	add    esp,0x18
c000cddd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cde1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cde5:	52                   	push   edx
c000cde6:	50                   	push   eax
c000cde7:	e8 14 bc 01 00       	call   c0028a00 <fabs>
c000cdec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdf0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdf4:	83 c4 10             	add    esp,0x10
c000cdf7:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cdfc:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000ce01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce09:	e8 3b ba 01 00       	call   c0028849 <__gtdf2>
c000ce0e:	83 c4 10             	add    esp,0x10
c000ce11:	85 c0                	test   eax,eax
c000ce13:	0f 8e 9c 00 00 00    	jle    c000ceb5 <sinc_quad_vari_process+0x4c0>
c000ce19:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce1c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ce1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce23:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ce27:	52                   	push   edx
c000ce28:	50                   	push   eax
c000ce29:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce2c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce2f:	e8 38 b1 01 00       	call   c0027f6c <__subdf3>
c000ce34:	59                   	pop    ecx
c000ce35:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ce39:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ce3d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ce40:	e8 b6 b7 01 00       	call   c00285fb <__floatsidf>
c000ce45:	83 c4 10             	add    esp,0x10
c000ce48:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce4c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce50:	52                   	push   edx
c000ce51:	50                   	push   eax
c000ce52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce5a:	e8 39 b1 01 00       	call   c0027f98 <__muldf3>
c000ce5f:	5f                   	pop    edi
c000ce60:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ce64:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ce68:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ce6b:	e8 8b b7 01 00       	call   c00285fb <__floatsidf>
c000ce70:	83 c4 10             	add    esp,0x10
c000ce73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce77:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce7b:	52                   	push   edx
c000ce7c:	50                   	push   eax
c000ce7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce85:	e8 f2 b3 01 00       	call   c002827c <__divdf3>
c000ce8a:	83 c4 10             	add    esp,0x10
c000ce8d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ce91:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ce95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cea1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cea5:	e8 71 aa 01 00       	call   c002791b <__adddf3>
c000ceaa:	83 c4 10             	add    esp,0x10
c000cead:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ceb1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ceb5:	83 ec 0c             	sub    esp,0xc
c000ceb8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cebb:	e8 3b b7 01 00       	call   c00285fb <__floatsidf>
c000cec0:	83 c4 10             	add    esp,0x10
c000cec3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cec7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cecb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cecf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedb:	e8 87 b9 01 00       	call   c0028867 <__ltdf2>
c000cee0:	83 c4 10             	add    esp,0x10
c000cee3:	85 c0                	test   eax,eax
c000cee5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cee9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ceed:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000cef1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cef5:	78 10                	js     c000cf07 <sinc_quad_vari_process+0x512>
c000cef7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cefb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ceff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cf03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cf07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf0f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf17:	e8 7c b0 01 00       	call   c0027f98 <__muldf3>
c000cf1c:	59                   	pop    ecx
c000cf1d:	5f                   	pop    edi
c000cf1e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf2e:	e8 98 eb ff ff       	call   c000bacb <double_to_fp>
c000cf33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf37:	89 c7                	mov    edi,eax
c000cf39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf3d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf45:	e8 4e b0 01 00       	call   c0027f98 <__muldf3>
c000cf4a:	83 c4 18             	add    esp,0x18
c000cf4d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cf51:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cf55:	52                   	push   edx
c000cf56:	50                   	push   eax
c000cf57:	e8 6f eb ff ff       	call   c000bacb <double_to_fp>
c000cf5c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cf5f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cf63:	83 c4 0c             	add    esp,0xc
c000cf66:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cf69:	8d 04 90             	lea    eax,[eax+edx*4]
c000cf6c:	50                   	push   eax
c000cf6d:	50                   	push   eax
c000cf6e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf71:	e8 85 b6 01 00       	call   c00285fb <__floatsidf>
c000cf76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cf7a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cf7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf8e:	e8 e9 b2 01 00       	call   c002827c <__divdf3>
c000cf93:	83 c4 18             	add    esp,0x18
c000cf96:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf9e:	52                   	push   edx
c000cf9f:	89 fa                	mov    edx,edi
c000cfa1:	50                   	push   eax
c000cfa2:	89 d8                	mov    eax,ebx
c000cfa4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cfa8:	e8 a5 d1 ff ff       	call   c000a152 <calc_output_quad>
c000cfad:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cfb1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cfb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cfb9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfc1:	e8 b6 b2 01 00       	call   c002827c <__divdf3>
c000cfc6:	83 c4 10             	add    esp,0x10
c000cfc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cfcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cfd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfd9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfdd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfe1:	e8 35 a9 01 00       	call   c002791b <__adddf3>
c000cfe6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cfea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cfee:	83 c4 18             	add    esp,0x18
c000cff1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff9:	e8 22 ba 01 00       	call   c0028a20 <lrint>
c000cffe:	83 ec 0c             	sub    esp,0xc
c000d001:	50                   	push   eax
c000d002:	e8 f4 b5 01 00       	call   c00285fb <__floatsidf>
c000d007:	83 c4 10             	add    esp,0x10
c000d00a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d012:	52                   	push   edx
c000d013:	50                   	push   eax
c000d014:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d018:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d01c:	e8 4b af 01 00       	call   c0027f6c <__subdf3>
c000d021:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d025:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d029:	83 c4 20             	add    esp,0x20
c000d02c:	6a 00                	push   0x0
c000d02e:	6a 00                	push   0x0
c000d030:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d034:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d038:	e8 2a b8 01 00       	call   c0028867 <__ltdf2>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	85 c0                	test   eax,eax
c000d042:	79 20                	jns    c000d064 <sinc_quad_vari_process+0x66f>
c000d044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d04c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d050:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d054:	e8 c2 a8 01 00       	call   c002791b <__adddf3>
c000d059:	83 c4 10             	add    esp,0x10
c000d05c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d060:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d064:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d067:	83 ec 10             	sub    esp,0x10
c000d06a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d06e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d071:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d075:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d079:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d07d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d081:	e8 e6 ae 01 00       	call   c0027f6c <__subdf3>
c000d086:	83 c4 18             	add    esp,0x18
c000d089:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d08d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d091:	52                   	push   edx
c000d092:	50                   	push   eax
c000d093:	e8 88 b9 01 00       	call   c0028a20 <lrint>
c000d098:	0f af f8             	imul   edi,eax
c000d09b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d09f:	83 c4 10             	add    esp,0x10
c000d0a2:	01 f8                	add    eax,edi
c000d0a4:	99                   	cdq    
c000d0a5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0a8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0ab:	e9 fd fb ff ff       	jmp    c000ccad <sinc_quad_vari_process+0x2b8>
c000d0b0:	83 c4 4c             	add    esp,0x4c
c000d0b3:	89 d0                	mov    eax,edx
c000d0b5:	5b                   	pop    ebx
c000d0b6:	5e                   	pop    esi
c000d0b7:	5f                   	pop    edi
c000d0b8:	5d                   	pop    ebp
c000d0b9:	c3                   	ret    

c000d0ba <sinc_stereo_vari_process>:
c000d0ba:	55                   	push   ebp
c000d0bb:	ba 05 00 00 00       	mov    edx,0x5
c000d0c0:	57                   	push   edi
c000d0c1:	56                   	push   esi
c000d0c2:	53                   	push   ebx
c000d0c3:	83 ec 4c             	sub    esp,0x4c
c000d0c6:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d0ca:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d0ce:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d0d1:	85 db                	test   ebx,ebx
c000d0d3:	0f 84 9c 06 00 00    	je     c000d775 <sinc_stereo_vari_process+0x6bb>
c000d0d9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d0dc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0df:	0f af c7             	imul   eax,edi
c000d0e2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d0e5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d0e8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d0ef:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d0f6:	0f af c7             	imul   eax,edi
c000d0f9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d0fc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d0ff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d102:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d106:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d10a:	68 00 00 70 3f       	push   0x3f700000
c000d10f:	6a 00                	push   0x0
c000d111:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d115:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d119:	e8 49 b7 01 00       	call   c0028867 <__ltdf2>
c000d11e:	83 c4 10             	add    esp,0x10
c000d121:	ba 16 00 00 00       	mov    edx,0x16
c000d126:	85 c0                	test   eax,eax
c000d128:	0f 88 47 06 00 00    	js     c000d775 <sinc_stereo_vari_process+0x6bb>
c000d12e:	68 00 00 70 40       	push   0x40700000
c000d133:	6a 00                	push   0x0
c000d135:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d139:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d13d:	e8 07 b7 01 00       	call   c0028849 <__gtdf2>
c000d142:	83 c4 10             	add    esp,0x10
c000d145:	ba 16 00 00 00       	mov    edx,0x16
c000d14a:	85 c0                	test   eax,eax
c000d14c:	0f 8f 23 06 00 00    	jg     c000d775 <sinc_stereo_vari_process+0x6bb>
c000d152:	83 ec 0c             	sub    esp,0xc
c000d155:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d158:	e8 9e b4 01 00       	call   c00285fb <__floatsidf>
c000d15d:	83 c4 10             	add    esp,0x10
c000d160:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d164:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d168:	68 00 00 00 40       	push   0x40000000
c000d16d:	6a 00                	push   0x0
c000d16f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d173:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d177:	e8 9f a7 01 00       	call   c002791b <__adddf3>
c000d17c:	59                   	pop    ecx
c000d17d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d181:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d185:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d188:	e8 6e b4 01 00       	call   c00285fb <__floatsidf>
c000d18d:	83 c4 10             	add    esp,0x10
c000d190:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d194:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d198:	52                   	push   edx
c000d199:	50                   	push   eax
c000d19a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d19e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1a2:	e8 d5 b0 01 00       	call   c002827c <__divdf3>
c000d1a7:	83 c4 10             	add    esp,0x10
c000d1aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d1ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d1b2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d1b5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d1b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d1c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1d0:	e8 74 b6 01 00       	call   c0028849 <__gtdf2>
c000d1d5:	83 c4 10             	add    esp,0x10
c000d1d8:	85 c0                	test   eax,eax
c000d1da:	7e 2d                	jle    c000d209 <sinc_stereo_vari_process+0x14f>
c000d1dc:	68 00 00 f0 3f       	push   0x3ff00000
c000d1e1:	6a 00                	push   0x0
c000d1e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1eb:	e8 77 b6 01 00       	call   c0028867 <__ltdf2>
c000d1f0:	83 c4 10             	add    esp,0x10
c000d1f3:	85 c0                	test   eax,eax
c000d1f5:	79 4d                	jns    c000d244 <sinc_stereo_vari_process+0x18a>
c000d1f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d203:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d207:	eb 1b                	jmp    c000d224 <sinc_stereo_vari_process+0x16a>
c000d209:	68 00 00 f0 3f       	push   0x3ff00000
c000d20e:	6a 00                	push   0x0
c000d210:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d218:	e8 4a b6 01 00       	call   c0028867 <__ltdf2>
c000d21d:	83 c4 10             	add    esp,0x10
c000d220:	85 c0                	test   eax,eax
c000d222:	79 20                	jns    c000d244 <sinc_stereo_vari_process+0x18a>
c000d224:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d228:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d22c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d230:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d234:	e8 43 b0 01 00       	call   c002827c <__divdf3>
c000d239:	83 c4 10             	add    esp,0x10
c000d23c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d240:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d244:	50                   	push   eax
c000d245:	50                   	push   eax
c000d246:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d24a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d24e:	e8 cd b7 01 00       	call   c0028a20 <lrint>
c000d253:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d256:	40                   	inc    eax
c000d257:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d25b:	0f af c7             	imul   eax,edi
c000d25e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d262:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d265:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d269:	58                   	pop    eax
c000d26a:	5a                   	pop    edx
c000d26b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d26f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d273:	e8 a8 b7 01 00       	call   c0028a20 <lrint>
c000d278:	83 ec 0c             	sub    esp,0xc
c000d27b:	50                   	push   eax
c000d27c:	e8 7a b3 01 00       	call   c00285fb <__floatsidf>
c000d281:	83 c4 10             	add    esp,0x10
c000d284:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d288:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d28c:	52                   	push   edx
c000d28d:	50                   	push   eax
c000d28e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d292:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d296:	e8 d1 ac 01 00       	call   c0027f6c <__subdf3>
c000d29b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d29f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2a3:	83 c4 20             	add    esp,0x20
c000d2a6:	6a 00                	push   0x0
c000d2a8:	6a 00                	push   0x0
c000d2aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2b2:	e8 b0 b5 01 00       	call   c0028867 <__ltdf2>
c000d2b7:	83 c4 10             	add    esp,0x10
c000d2ba:	85 c0                	test   eax,eax
c000d2bc:	79 1f                	jns    c000d2dd <sinc_stereo_vari_process+0x223>
c000d2be:	68 00 00 f0 3f       	push   0x3ff00000
c000d2c3:	6a 00                	push   0x0
c000d2c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2cd:	e8 49 a6 01 00       	call   c002791b <__adddf3>
c000d2d2:	83 c4 10             	add    esp,0x10
c000d2d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2dd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2e0:	83 ec 10             	sub    esp,0x10
c000d2e3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2fa:	e8 6d ac 01 00       	call   c0027f6c <__subdf3>
c000d2ff:	83 c4 18             	add    esp,0x18
c000d302:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d306:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	e8 0f b7 01 00       	call   c0028a20 <lrint>
c000d311:	0f af f8             	imul   edi,eax
c000d314:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d318:	01 f8                	add    eax,edi
c000d31a:	99                   	cdq    
c000d31b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d31e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d321:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d325:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d329:	68 00 00 f0 3f       	push   0x3ff00000
c000d32e:	6a 00                	push   0x0
c000d330:	e8 47 af 01 00       	call   c002827c <__divdf3>
c000d335:	83 c4 10             	add    esp,0x10
c000d338:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d33c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d340:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d345:	68 23 42 92 0c       	push   0xc924223
c000d34a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d34e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d352:	e8 c4 a5 01 00       	call   c002791b <__adddf3>
c000d357:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d35b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d35f:	83 c4 20             	add    esp,0x20
c000d362:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d36a:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d372:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d375:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d378:	7d 50                	jge    c000d3ca <sinc_stereo_vari_process+0x310>
c000d37a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d37d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d380:	01 c8                	add    eax,ecx
c000d382:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d385:	99                   	cdq    
c000d386:	f7 f9                	idiv   ecx
c000d388:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d38c:	7d 0c                	jge    c000d39a <sinc_stereo_vari_process+0x2e0>
c000d38e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d391:	85 ff                	test   edi,edi
c000d393:	79 6c                	jns    c000d401 <sinc_stereo_vari_process+0x347>
c000d395:	e9 e7 00 00 00       	jmp    c000d481 <sinc_stereo_vari_process+0x3c7>
c000d39a:	50                   	push   eax
c000d39b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d39f:	56                   	push   esi
c000d3a0:	53                   	push   ebx
c000d3a1:	e8 4c e7 ff ff       	call   c000baf2 <prepare_data>
c000d3a6:	83 c4 10             	add    esp,0x10
c000d3a9:	89 c2                	mov    edx,eax
c000d3ab:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d3ae:	85 c0                	test   eax,eax
c000d3b0:	0f 85 bf 03 00 00    	jne    c000d775 <sinc_stereo_vari_process+0x6bb>
c000d3b6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d3b9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d3bc:	01 c8                	add    eax,ecx
c000d3be:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d3c1:	99                   	cdq    
c000d3c2:	f7 f9                	idiv   ecx
c000d3c4:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d3c8:	7c c4                	jl     c000d38e <sinc_stereo_vari_process+0x2d4>
c000d3ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d3ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d3d2:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d3d5:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d3d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d3e0:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d3e3:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d3e6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d3e9:	99                   	cdq    
c000d3ea:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d3ed:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d3f0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d3f3:	99                   	cdq    
c000d3f4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d3f7:	31 d2                	xor    edx,edx
c000d3f9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d3fc:	e9 74 03 00 00       	jmp    c000d775 <sinc_stereo_vari_process+0x6bb>
c000d401:	83 ec 0c             	sub    esp,0xc
c000d404:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d407:	e8 ef b1 01 00       	call   c00285fb <__floatsidf>
c000d40c:	83 c4 10             	add    esp,0x10
c000d40f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d413:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d417:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d41b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d41f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d423:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d427:	e8 ef a4 01 00       	call   c002791b <__adddf3>
c000d42c:	83 c4 10             	add    esp,0x10
c000d42f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d433:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d437:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d43b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d43f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d443:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d447:	e8 cf a4 01 00       	call   c002791b <__adddf3>
c000d44c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d44f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d453:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d457:	e8 9f b1 01 00       	call   c00285fb <__floatsidf>
c000d45c:	83 c4 10             	add    esp,0x10
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	50                   	push   eax
c000d469:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d46d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d471:	e8 ef b3 01 00       	call   c0028865 <__gedf2>
c000d476:	83 c4 10             	add    esp,0x10
c000d479:	85 c0                	test   eax,eax
c000d47b:	0f 89 49 ff ff ff    	jns    c000d3ca <sinc_stereo_vari_process+0x310>
c000d481:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d485:	0f 8e ef 00 00 00    	jle    c000d57a <sinc_stereo_vari_process+0x4c0>
c000d48b:	83 ec 10             	sub    esp,0x10
c000d48e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d491:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d494:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d497:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d49a:	e8 cd aa 01 00       	call   c0027f6c <__subdf3>
c000d49f:	83 c4 18             	add    esp,0x18
c000d4a2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4aa:	52                   	push   edx
c000d4ab:	50                   	push   eax
c000d4ac:	e8 4f b5 01 00       	call   c0028a00 <fabs>
c000d4b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d4b5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d4b9:	83 c4 10             	add    esp,0x10
c000d4bc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d4c1:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d4c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ce:	e8 76 b3 01 00       	call   c0028849 <__gtdf2>
c000d4d3:	83 c4 10             	add    esp,0x10
c000d4d6:	85 c0                	test   eax,eax
c000d4d8:	0f 8e 9c 00 00 00    	jle    c000d57a <sinc_stereo_vari_process+0x4c0>
c000d4de:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d4e1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d4e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d4e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d4ec:	52                   	push   edx
c000d4ed:	50                   	push   eax
c000d4ee:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d4f1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d4f4:	e8 73 aa 01 00       	call   c0027f6c <__subdf3>
c000d4f9:	59                   	pop    ecx
c000d4fa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d4fe:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d502:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d505:	e8 f1 b0 01 00       	call   c00285fb <__floatsidf>
c000d50a:	83 c4 10             	add    esp,0x10
c000d50d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d511:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d515:	52                   	push   edx
c000d516:	50                   	push   eax
c000d517:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d51b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d51f:	e8 74 aa 01 00       	call   c0027f98 <__muldf3>
c000d524:	5f                   	pop    edi
c000d525:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d529:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d52d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d530:	e8 c6 b0 01 00       	call   c00285fb <__floatsidf>
c000d535:	83 c4 10             	add    esp,0x10
c000d538:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d53c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d540:	52                   	push   edx
c000d541:	50                   	push   eax
c000d542:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d546:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d54a:	e8 2d ad 01 00       	call   c002827c <__divdf3>
c000d54f:	83 c4 10             	add    esp,0x10
c000d552:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d556:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d55a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d55e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d562:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d566:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d56a:	e8 ac a3 01 00       	call   c002791b <__adddf3>
c000d56f:	83 c4 10             	add    esp,0x10
c000d572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d576:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d57a:	83 ec 0c             	sub    esp,0xc
c000d57d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d580:	e8 76 b0 01 00       	call   c00285fb <__floatsidf>
c000d585:	83 c4 10             	add    esp,0x10
c000d588:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d58c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a0:	e8 c2 b2 01 00       	call   c0028867 <__ltdf2>
c000d5a5:	83 c4 10             	add    esp,0x10
c000d5a8:	85 c0                	test   eax,eax
c000d5aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5ae:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d5b2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d5b6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d5ba:	78 10                	js     c000d5cc <sinc_stereo_vari_process+0x512>
c000d5bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d5c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d5c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d5c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d5cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5dc:	e8 b7 a9 01 00       	call   c0027f98 <__muldf3>
c000d5e1:	59                   	pop    ecx
c000d5e2:	5f                   	pop    edi
c000d5e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d5ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d5f3:	e8 d3 e4 ff ff       	call   c000bacb <double_to_fp>
c000d5f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5fc:	89 c7                	mov    edi,eax
c000d5fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d602:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d606:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d60a:	e8 89 a9 01 00       	call   c0027f98 <__muldf3>
c000d60f:	83 c4 18             	add    esp,0x18
c000d612:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d616:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d61a:	52                   	push   edx
c000d61b:	50                   	push   eax
c000d61c:	e8 aa e4 ff ff       	call   c000bacb <double_to_fp>
c000d621:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d624:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d628:	83 c4 0c             	add    esp,0xc
c000d62b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d62e:	8d 04 90             	lea    eax,[eax+edx*4]
c000d631:	50                   	push   eax
c000d632:	50                   	push   eax
c000d633:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d636:	e8 c0 af 01 00       	call   c00285fb <__floatsidf>
c000d63b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d63f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d643:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d647:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d64b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d64f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d653:	e8 24 ac 01 00       	call   c002827c <__divdf3>
c000d658:	83 c4 18             	add    esp,0x18
c000d65b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d65f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d663:	52                   	push   edx
c000d664:	89 fa                	mov    edx,edi
c000d666:	50                   	push   eax
c000d667:	89 d8                	mov    eax,ebx
c000d669:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d66d:	e8 02 c7 ff ff       	call   c0009d74 <calc_output_stereo>
c000d672:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d676:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d67a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d67e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d682:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d686:	e8 f1 ab 01 00       	call   c002827c <__divdf3>
c000d68b:	83 c4 10             	add    esp,0x10
c000d68e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d692:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d69a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d69e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6a6:	e8 70 a2 01 00       	call   c002791b <__adddf3>
c000d6ab:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d6af:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d6b3:	83 c4 18             	add    esp,0x18
c000d6b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d6ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d6be:	e8 5d b3 01 00       	call   c0028a20 <lrint>
c000d6c3:	83 ec 0c             	sub    esp,0xc
c000d6c6:	50                   	push   eax
c000d6c7:	e8 2f af 01 00       	call   c00285fb <__floatsidf>
c000d6cc:	83 c4 10             	add    esp,0x10
c000d6cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d7:	52                   	push   edx
c000d6d8:	50                   	push   eax
c000d6d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6e1:	e8 86 a8 01 00       	call   c0027f6c <__subdf3>
c000d6e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6ee:	83 c4 20             	add    esp,0x20
c000d6f1:	6a 00                	push   0x0
c000d6f3:	6a 00                	push   0x0
c000d6f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6fd:	e8 65 b1 01 00       	call   c0028867 <__ltdf2>
c000d702:	83 c4 10             	add    esp,0x10
c000d705:	85 c0                	test   eax,eax
c000d707:	79 20                	jns    c000d729 <sinc_stereo_vari_process+0x66f>
c000d709:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d70d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d711:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d715:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d719:	e8 fd a1 01 00       	call   c002791b <__adddf3>
c000d71e:	83 c4 10             	add    esp,0x10
c000d721:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d725:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d729:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d72c:	83 ec 10             	sub    esp,0x10
c000d72f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d733:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d73a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d73e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d742:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d746:	e8 21 a8 01 00       	call   c0027f6c <__subdf3>
c000d74b:	83 c4 18             	add    esp,0x18
c000d74e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d752:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d756:	52                   	push   edx
c000d757:	50                   	push   eax
c000d758:	e8 c3 b2 01 00       	call   c0028a20 <lrint>
c000d75d:	0f af f8             	imul   edi,eax
c000d760:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d764:	83 c4 10             	add    esp,0x10
c000d767:	01 f8                	add    eax,edi
c000d769:	99                   	cdq    
c000d76a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d76d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d770:	e9 fd fb ff ff       	jmp    c000d372 <sinc_stereo_vari_process+0x2b8>
c000d775:	83 c4 4c             	add    esp,0x4c
c000d778:	89 d0                	mov    eax,edx
c000d77a:	5b                   	pop    ebx
c000d77b:	5e                   	pop    esi
c000d77c:	5f                   	pop    edi
c000d77d:	5d                   	pop    ebp
c000d77e:	c3                   	ret    

c000d77f <sinc_mono_vari_process>:
c000d77f:	55                   	push   ebp
c000d780:	ba 05 00 00 00       	mov    edx,0x5
c000d785:	57                   	push   edi
c000d786:	56                   	push   esi
c000d787:	53                   	push   ebx
c000d788:	83 ec 4c             	sub    esp,0x4c
c000d78b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d78f:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d793:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d796:	85 db                	test   ebx,ebx
c000d798:	0f 84 c1 06 00 00    	je     c000de5f <sinc_mono_vari_process+0x6e0>
c000d79e:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d7a1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7a4:	0f af c7             	imul   eax,edi
c000d7a7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d7aa:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d7ad:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d7b4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d7bb:	0f af c7             	imul   eax,edi
c000d7be:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d7c1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d7c5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d7c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7d2:	68 00 00 70 3f       	push   0x3f700000
c000d7d7:	6a 00                	push   0x0
c000d7d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7e1:	e8 81 b0 01 00       	call   c0028867 <__ltdf2>
c000d7e6:	83 c4 10             	add    esp,0x10
c000d7e9:	ba 16 00 00 00       	mov    edx,0x16
c000d7ee:	85 c0                	test   eax,eax
c000d7f0:	0f 88 69 06 00 00    	js     c000de5f <sinc_mono_vari_process+0x6e0>
c000d7f6:	68 00 00 70 40       	push   0x40700000
c000d7fb:	6a 00                	push   0x0
c000d7fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d801:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d805:	e8 3f b0 01 00       	call   c0028849 <__gtdf2>
c000d80a:	83 c4 10             	add    esp,0x10
c000d80d:	ba 16 00 00 00       	mov    edx,0x16
c000d812:	85 c0                	test   eax,eax
c000d814:	0f 8f 45 06 00 00    	jg     c000de5f <sinc_mono_vari_process+0x6e0>
c000d81a:	83 ec 0c             	sub    esp,0xc
c000d81d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d820:	e8 d6 ad 01 00       	call   c00285fb <__floatsidf>
c000d825:	83 c4 10             	add    esp,0x10
c000d828:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d82c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d830:	68 00 00 00 40       	push   0x40000000
c000d835:	6a 00                	push   0x0
c000d837:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d83b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d83f:	e8 d7 a0 01 00       	call   c002791b <__adddf3>
c000d844:	59                   	pop    ecx
c000d845:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d849:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d84d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d850:	e8 a6 ad 01 00       	call   c00285fb <__floatsidf>
c000d855:	83 c4 10             	add    esp,0x10
c000d858:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d85c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d860:	52                   	push   edx
c000d861:	50                   	push   eax
c000d862:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d866:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d86a:	e8 0d aa 01 00       	call   c002827c <__divdf3>
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d876:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d87a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d87d:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d880:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d884:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d888:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d88c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d890:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d894:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d898:	e8 ac af 01 00       	call   c0028849 <__gtdf2>
c000d89d:	83 c4 10             	add    esp,0x10
c000d8a0:	85 c0                	test   eax,eax
c000d8a2:	7e 2d                	jle    c000d8d1 <sinc_mono_vari_process+0x152>
c000d8a4:	68 00 00 f0 3f       	push   0x3ff00000
c000d8a9:	6a 00                	push   0x0
c000d8ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8b3:	e8 af af 01 00       	call   c0028867 <__ltdf2>
c000d8b8:	83 c4 10             	add    esp,0x10
c000d8bb:	85 c0                	test   eax,eax
c000d8bd:	79 4d                	jns    c000d90c <sinc_mono_vari_process+0x18d>
c000d8bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d8cf:	eb 1b                	jmp    c000d8ec <sinc_mono_vari_process+0x16d>
c000d8d1:	68 00 00 f0 3f       	push   0x3ff00000
c000d8d6:	6a 00                	push   0x0
c000d8d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8e0:	e8 82 af 01 00       	call   c0028867 <__ltdf2>
c000d8e5:	83 c4 10             	add    esp,0x10
c000d8e8:	85 c0                	test   eax,eax
c000d8ea:	79 20                	jns    c000d90c <sinc_mono_vari_process+0x18d>
c000d8ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8fc:	e8 7b a9 01 00       	call   c002827c <__divdf3>
c000d901:	83 c4 10             	add    esp,0x10
c000d904:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d908:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d90c:	50                   	push   eax
c000d90d:	50                   	push   eax
c000d90e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d912:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d916:	e8 05 b1 01 00       	call   c0028a20 <lrint>
c000d91b:	40                   	inc    eax
c000d91c:	0f af c7             	imul   eax,edi
c000d91f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d923:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d927:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d92a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d92d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d931:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d935:	58                   	pop    eax
c000d936:	5a                   	pop    edx
c000d937:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d93b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d93f:	e8 dc b0 01 00       	call   c0028a20 <lrint>
c000d944:	83 ec 0c             	sub    esp,0xc
c000d947:	50                   	push   eax
c000d948:	e8 ae ac 01 00       	call   c00285fb <__floatsidf>
c000d94d:	83 c4 10             	add    esp,0x10
c000d950:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d954:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d958:	52                   	push   edx
c000d959:	50                   	push   eax
c000d95a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d962:	e8 05 a6 01 00       	call   c0027f6c <__subdf3>
c000d967:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d96b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d96f:	83 c4 20             	add    esp,0x20
c000d972:	6a 00                	push   0x0
c000d974:	6a 00                	push   0x0
c000d976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d97a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d97e:	e8 e4 ae 01 00       	call   c0028867 <__ltdf2>
c000d983:	83 c4 10             	add    esp,0x10
c000d986:	85 c0                	test   eax,eax
c000d988:	79 1f                	jns    c000d9a9 <sinc_mono_vari_process+0x22a>
c000d98a:	68 00 00 f0 3f       	push   0x3ff00000
c000d98f:	6a 00                	push   0x0
c000d991:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d995:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d999:	e8 7d 9f 01 00       	call   c002791b <__adddf3>
c000d99e:	83 c4 10             	add    esp,0x10
c000d9a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9a9:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9ac:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9af:	83 ec 10             	sub    esp,0x10
c000d9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9c2:	e8 a5 a5 01 00       	call   c0027f6c <__subdf3>
c000d9c7:	83 c4 18             	add    esp,0x18
c000d9ca:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d9ce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d9d2:	52                   	push   edx
c000d9d3:	50                   	push   eax
c000d9d4:	e8 47 b0 01 00       	call   c0028a20 <lrint>
c000d9d9:	0f af f8             	imul   edi,eax
c000d9dc:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d9df:	31 ff                	xor    edi,edi
c000d9e1:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d9e6:	99                   	cdq    
c000d9e7:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d9ea:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d9ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d9f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d9f5:	55                   	push   ebp
c000d9f6:	57                   	push   edi
c000d9f7:	e8 80 a8 01 00       	call   c002827c <__divdf3>
c000d9fc:	83 c4 10             	add    esp,0x10
c000d9ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da03:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da07:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000da0c:	68 23 42 92 0c       	push   0xc924223
c000da11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da19:	e8 fd 9e 01 00       	call   c002791b <__adddf3>
c000da1e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000da22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000da26:	83 c4 20             	add    esp,0x20
c000da29:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000da2d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000da31:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000da34:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000da37:	7d 54                	jge    c000da8d <sinc_mono_vari_process+0x30e>
c000da39:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000da3c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000da3f:	01 c8                	add    eax,ecx
c000da41:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000da44:	99                   	cdq    
c000da45:	f7 f9                	idiv   ecx
c000da47:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000da4b:	7d 0c                	jge    c000da59 <sinc_mono_vari_process+0x2da>
c000da4d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000da50:	85 ff                	test   edi,edi
c000da52:	79 73                	jns    c000dac7 <sinc_mono_vari_process+0x348>
c000da54:	e9 ee 00 00 00       	jmp    c000db47 <sinc_mono_vari_process+0x3c8>
c000da59:	50                   	push   eax
c000da5a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000da5e:	56                   	push   esi
c000da5f:	53                   	push   ebx
c000da60:	e8 8d e0 ff ff       	call   c000baf2 <prepare_data>
c000da65:	89 c2                	mov    edx,eax
c000da67:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000da6b:	83 c4 10             	add    esp,0x10
c000da6e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000da71:	85 d2                	test   edx,edx
c000da73:	0f 85 e6 03 00 00    	jne    c000de5f <sinc_mono_vari_process+0x6e0>
c000da79:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000da7c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000da7f:	01 c8                	add    eax,ecx
c000da81:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000da84:	99                   	cdq    
c000da85:	f7 f9                	idiv   ecx
c000da87:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000da8b:	7c c0                	jl     c000da4d <sinc_mono_vari_process+0x2ce>
c000da8d:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000da91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000da95:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000da99:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000da9c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000da9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daa3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000daa7:	89 01                	mov    DWORD PTR [ecx],eax
c000daa9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000daac:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000daaf:	99                   	cdq    
c000dab0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000dab3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000dab6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000dab9:	99                   	cdq    
c000daba:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000dabd:	31 d2                	xor    edx,edx
c000dabf:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000dac2:	e9 98 03 00 00       	jmp    c000de5f <sinc_mono_vari_process+0x6e0>
c000dac7:	83 ec 0c             	sub    esp,0xc
c000daca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000dacd:	e8 29 ab 01 00       	call   c00285fb <__floatsidf>
c000dad2:	83 c4 10             	add    esp,0x10
c000dad5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dad9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dadd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dae1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dae5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dae9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000daed:	e8 29 9e 01 00       	call   c002791b <__adddf3>
c000daf2:	83 c4 10             	add    esp,0x10
c000daf5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000daf9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dafd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000db01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000db05:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db0d:	e8 09 9e 01 00       	call   c002791b <__adddf3>
c000db12:	89 3c 24             	mov    DWORD PTR [esp],edi
c000db15:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db19:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db1d:	e8 d9 aa 01 00       	call   c00285fb <__floatsidf>
c000db22:	83 c4 10             	add    esp,0x10
c000db25:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000db29:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000db2d:	52                   	push   edx
c000db2e:	50                   	push   eax
c000db2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db37:	e8 0d ad 01 00       	call   c0028849 <__gtdf2>
c000db3c:	83 c4 10             	add    esp,0x10
c000db3f:	85 c0                	test   eax,eax
c000db41:	0f 8f 46 ff ff ff    	jg     c000da8d <sinc_mono_vari_process+0x30e>
c000db47:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000db4b:	0f 8e f5 00 00 00    	jle    c000dc46 <sinc_mono_vari_process+0x4c7>
c000db51:	83 ec 10             	sub    esp,0x10
c000db54:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000db57:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000db5a:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000db5e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000db61:	ff 30                	push   DWORD PTR [eax]
c000db63:	e8 04 a4 01 00       	call   c0027f6c <__subdf3>
c000db68:	83 c4 18             	add    esp,0x18
c000db6b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000db6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000db73:	52                   	push   edx
c000db74:	50                   	push   eax
c000db75:	e8 86 ae 01 00       	call   c0028a00 <fabs>
c000db7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db82:	83 c4 10             	add    esp,0x10
c000db85:	68 df 7c db 3d       	push   0x3ddb7cdf
c000db8a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000db8f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db93:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db97:	e8 ad ac 01 00       	call   c0028849 <__gtdf2>
c000db9c:	83 c4 10             	add    esp,0x10
c000db9f:	85 c0                	test   eax,eax
c000dba1:	0f 8e 9f 00 00 00    	jle    c000dc46 <sinc_mono_vari_process+0x4c7>
c000dba7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000dbab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dbae:	8b 00                	mov    eax,DWORD PTR [eax]
c000dbb0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbb4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbb8:	52                   	push   edx
c000dbb9:	50                   	push   eax
c000dbba:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dbbd:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dbc0:	e8 a7 a3 01 00       	call   c0027f6c <__subdf3>
c000dbc5:	5f                   	pop    edi
c000dbc6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dbca:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000dbce:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dbd1:	e8 25 aa 01 00       	call   c00285fb <__floatsidf>
c000dbd6:	83 c4 10             	add    esp,0x10
c000dbd9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dbdd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dbe1:	52                   	push   edx
c000dbe2:	50                   	push   eax
c000dbe3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbe7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbeb:	e8 a8 a3 01 00       	call   c0027f98 <__muldf3>
c000dbf0:	5d                   	pop    ebp
c000dbf1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dbf5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000dbf9:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dbfc:	e8 fa a9 01 00       	call   c00285fb <__floatsidf>
c000dc01:	83 c4 10             	add    esp,0x10
c000dc04:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc08:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc0c:	52                   	push   edx
c000dc0d:	50                   	push   eax
c000dc0e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc16:	e8 61 a6 01 00       	call   c002827c <__divdf3>
c000dc1b:	83 c4 10             	add    esp,0x10
c000dc1e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dc22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dc26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc2e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc36:	e8 e0 9c 01 00       	call   c002791b <__adddf3>
c000dc3b:	83 c4 10             	add    esp,0x10
c000dc3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc42:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dc46:	83 ec 0c             	sub    esp,0xc
c000dc49:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dc4c:	e8 aa a9 01 00       	call   c00285fb <__floatsidf>
c000dc51:	83 c4 10             	add    esp,0x10
c000dc54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc6c:	e8 f6 ab 01 00       	call   c0028867 <__ltdf2>
c000dc71:	83 c4 10             	add    esp,0x10
c000dc74:	85 c0                	test   eax,eax
c000dc76:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000dc7a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000dc7e:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000dc82:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000dc86:	78 10                	js     c000dc98 <sinc_mono_vari_process+0x519>
c000dc88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dc8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dc90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dc94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dc98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dca0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dca4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dca8:	e8 eb a2 01 00       	call   c0027f98 <__muldf3>
c000dcad:	59                   	pop    ecx
c000dcae:	5f                   	pop    edi
c000dcaf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dcb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dcb7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dcbb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dcbf:	e8 07 de ff ff       	call   c000bacb <double_to_fp>
c000dcc4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dcc8:	89 c7                	mov    edi,eax
c000dcca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dcce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dcd2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dcd6:	e8 bd a2 01 00       	call   c0027f98 <__muldf3>
c000dcdb:	83 c4 18             	add    esp,0x18
c000dcde:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dce2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dce6:	52                   	push   edx
c000dce7:	50                   	push   eax
c000dce8:	e8 de dd ff ff       	call   c000bacb <double_to_fp>
c000dced:	83 ec 0c             	sub    esp,0xc
c000dcf0:	89 c5                	mov    ebp,eax
c000dcf2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dcf5:	e8 01 a9 01 00       	call   c00285fb <__floatsidf>
c000dcfa:	83 c4 10             	add    esp,0x10
c000dcfd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd01:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dd05:	52                   	push   edx
c000dd06:	50                   	push   eax
c000dd07:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd0f:	e8 68 a5 01 00       	call   c002827c <__divdf3>
c000dd14:	83 c4 10             	add    esp,0x10
c000dd17:	89 e9                	mov    ecx,ebp
c000dd19:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd1d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dd21:	89 d8                	mov    eax,ebx
c000dd23:	89 fa                	mov    edx,edi
c000dd25:	e8 ee bd ff ff       	call   c0009b18 <calc_output_single>
c000dd2a:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dd2d:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dd30:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dd34:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dd38:	52                   	push   edx
c000dd39:	50                   	push   eax
c000dd3a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dd3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dd42:	e8 51 a2 01 00       	call   c0027f98 <__muldf3>
c000dd47:	59                   	pop    ecx
c000dd48:	59                   	pop    ecx
c000dd49:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dd4d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd51:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd59:	e8 0d ab 01 00       	call   c002886b <__truncdfsf2>
c000dd5e:	83 c4 10             	add    esp,0x10
c000dd61:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000dd64:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000dd67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dd6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dd6f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dd73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dd77:	e8 00 a5 01 00       	call   c002827c <__divdf3>
c000dd7c:	83 c4 10             	add    esp,0x10
c000dd7f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dd83:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dd87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd97:	e8 7f 9b 01 00       	call   c002791b <__adddf3>
c000dd9c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dda0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dda4:	83 c4 18             	add    esp,0x18
c000dda7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ddab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ddaf:	e8 6c ac 01 00       	call   c0028a20 <lrint>
c000ddb4:	83 ec 0c             	sub    esp,0xc
c000ddb7:	50                   	push   eax
c000ddb8:	e8 3e a8 01 00       	call   c00285fb <__floatsidf>
c000ddbd:	83 c4 10             	add    esp,0x10
c000ddc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ddc4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ddc8:	52                   	push   edx
c000ddc9:	50                   	push   eax
c000ddca:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ddce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ddd2:	e8 95 a1 01 00       	call   c0027f6c <__subdf3>
c000ddd7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dddb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dddf:	83 c4 20             	add    esp,0x20
c000dde2:	6a 00                	push   0x0
c000dde4:	6a 00                	push   0x0
c000dde6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddee:	e8 74 aa 01 00       	call   c0028867 <__ltdf2>
c000ddf3:	83 c4 10             	add    esp,0x10
c000ddf6:	85 c0                	test   eax,eax
c000ddf8:	79 20                	jns    c000de1a <sinc_mono_vari_process+0x69b>
c000ddfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de0a:	e8 0c 9b 01 00       	call   c002791b <__adddf3>
c000de0f:	83 c4 10             	add    esp,0x10
c000de12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000de1a:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000de1d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000de20:	83 ec 10             	sub    esp,0x10
c000de23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de33:	e8 34 a1 01 00       	call   c0027f6c <__subdf3>
c000de38:	83 c4 18             	add    esp,0x18
c000de3b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000de3f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de43:	52                   	push   edx
c000de44:	50                   	push   eax
c000de45:	e8 d6 ab 01 00       	call   c0028a20 <lrint>
c000de4a:	83 c4 10             	add    esp,0x10
c000de4d:	0f af f8             	imul   edi,eax
c000de50:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000de53:	99                   	cdq    
c000de54:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000de57:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000de5a:	e9 d2 fb ff ff       	jmp    c000da31 <sinc_mono_vari_process+0x2b2>
c000de5f:	83 c4 4c             	add    esp,0x4c
c000de62:	89 d0                	mov    eax,edx
c000de64:	5b                   	pop    ebx
c000de65:	5e                   	pop    esi
c000de66:	5f                   	pop    edi
c000de67:	5d                   	pop    ebp
c000de68:	c3                   	ret    

c000de69 <sinc_get_name>:
c000de69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000de6d:	31 c0                	xor    eax,eax
c000de6f:	83 fa 02             	cmp    edx,0x2
c000de72:	77 07                	ja     c000de7b <sinc_get_name+0x12>
c000de74:	8b 04 95 c4 a2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5d3c]
c000de7b:	c3                   	ret    

c000de7c <sinc_get_description>:
c000de7c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000de80:	31 c0                	xor    eax,eax
c000de82:	83 fa 02             	cmp    edx,0x2
c000de85:	77 07                	ja     c000de8e <sinc_get_description+0x12>
c000de87:	8b 04 95 b8 a2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5d48]
c000de8e:	c3                   	ret    

c000de8f <sinc_set_converter>:
c000de8f:	53                   	push   ebx
c000de90:	81 ec 58 08 00 00    	sub    esp,0x858
c000de96:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000de9d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dea0:	85 c0                	test   eax,eax
c000dea2:	74 13                	je     c000deb7 <sinc_set_converter+0x28>
c000dea4:	83 ec 0c             	sub    esp,0xc
c000dea7:	50                   	push   eax
c000dea8:	e8 cc 1a 00 00       	call   c000f979 <free>
c000dead:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000deb4:	83 c4 10             	add    esp,0x10
c000deb7:	50                   	push   eax
c000deb8:	68 44 08 00 00       	push   0x844
c000debd:	6a 00                	push   0x0
c000debf:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dec3:	50                   	push   eax
c000dec4:	e8 87 28 ff ff       	call   c0000750 <memset>
c000dec9:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000decc:	83 c4 10             	add    esp,0x10
c000decf:	b8 0b 00 00 00       	mov    eax,0xb
c000ded4:	81 fa 80 00 00 00    	cmp    edx,0x80
c000deda:	7f 6e                	jg     c000df4a <sinc_set_converter+0xbb>
c000dedc:	83 fa 01             	cmp    edx,0x1
c000dedf:	75 10                	jne    c000def1 <sinc_set_converter+0x62>
c000dee1:	c7 43 24 7f d7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d77f
c000dee8:	c7 43 20 7f d7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d77f
c000deef:	eb 4d                	jmp    c000df3e <sinc_set_converter+0xaf>
c000def1:	83 fa 02             	cmp    edx,0x2
c000def4:	75 10                	jne    c000df06 <sinc_set_converter+0x77>
c000def6:	c7 43 24 ba d0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d0ba
c000defd:	c7 43 20 ba d0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d0ba
c000df04:	eb 38                	jmp    c000df3e <sinc_set_converter+0xaf>
c000df06:	83 fa 04             	cmp    edx,0x4
c000df09:	75 10                	jne    c000df1b <sinc_set_converter+0x8c>
c000df0b:	c7 43 24 f5 c9 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c9f5
c000df12:	c7 43 20 f5 c9 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c9f5
c000df19:	eb 23                	jmp    c000df3e <sinc_set_converter+0xaf>
c000df1b:	83 fa 06             	cmp    edx,0x6
c000df1e:	75 10                	jne    c000df30 <sinc_set_converter+0xa1>
c000df20:	c7 43 24 30 c3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c330
c000df27:	c7 43 20 30 c3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c330
c000df2e:	eb 0e                	jmp    c000df3e <sinc_set_converter+0xaf>
c000df30:	c7 43 24 6c bc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bc6c
c000df37:	c7 43 20 6c bc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bc6c
c000df3e:	c7 43 28 1f af 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000af1f
c000df45:	b8 0a 00 00 00       	mov    eax,0xa
c000df4a:	81 c4 58 08 00 00    	add    esp,0x858
c000df50:	5b                   	pop    ebx
c000df51:	c3                   	ret    

c000df52 <zoh_vari_process>:
c000df52:	55                   	push   ebp
c000df53:	31 d2                	xor    edx,edx
c000df55:	57                   	push   edi
c000df56:	56                   	push   esi
c000df57:	53                   	push   ebx
c000df58:	83 ec 3c             	sub    esp,0x3c
c000df5b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000df5f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000df63:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000df67:	0f 8e 80 06 00 00    	jle    c000e5ed <zoh_vari_process+0x69b>
c000df6d:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000df70:	ba 05 00 00 00       	mov    edx,0x5
c000df75:	85 db                	test   ebx,ebx
c000df77:	0f 84 70 06 00 00    	je     c000e5ed <zoh_vari_process+0x69b>
c000df7d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000df80:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000df84:	74 19                	je     c000df9f <zoh_vari_process+0x4d>
c000df86:	31 d2                	xor    edx,edx
c000df88:	39 c2                	cmp    edx,eax
c000df8a:	7d 0c                	jge    c000df98 <zoh_vari_process+0x46>
c000df8c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000df8e:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000df91:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000df95:	42                   	inc    edx
c000df96:	eb f0                	jmp    c000df88 <zoh_vari_process+0x36>
c000df98:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000df9f:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dfa2:	0f af d0             	imul   edx,eax
c000dfa5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dfa8:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dfac:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dfb3:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dfb6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dfbd:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dfc0:	8b 07                	mov    eax,DWORD PTR [edi]
c000dfc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	68 00 00 70 3f       	push   0x3f700000
c000dfcf:	6a 00                	push   0x0
c000dfd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfd9:	e8 89 a8 01 00       	call   c0028867 <__ltdf2>
c000dfde:	83 c4 10             	add    esp,0x10
c000dfe1:	ba 16 00 00 00       	mov    edx,0x16
c000dfe6:	85 c0                	test   eax,eax
c000dfe8:	0f 88 ff 05 00 00    	js     c000e5ed <zoh_vari_process+0x69b>
c000dfee:	68 00 00 70 40       	push   0x40700000
c000dff3:	6a 00                	push   0x0
c000dff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dffd:	e8 47 a8 01 00       	call   c0028849 <__gtdf2>
c000e002:	83 c4 10             	add    esp,0x10
c000e005:	ba 16 00 00 00       	mov    edx,0x16
c000e00a:	85 c0                	test   eax,eax
c000e00c:	0f 8f db 05 00 00    	jg     c000e5ed <zoh_vari_process+0x69b>
c000e012:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e015:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000e018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e01c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e020:	68 00 00 f0 3f       	push   0x3ff00000
c000e025:	6a 00                	push   0x0
c000e027:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02f:	e8 33 a8 01 00       	call   c0028867 <__ltdf2>
c000e034:	83 c4 10             	add    esp,0x10
c000e037:	85 c0                	test   eax,eax
c000e039:	0f 89 da 01 00 00    	jns    c000e219 <zoh_vari_process+0x2c7>
c000e03f:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000e042:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000e045:	0f 8d ce 01 00 00    	jge    c000e219 <zoh_vari_process+0x2c7>
c000e04b:	83 ec 0c             	sub    esp,0xc
c000e04e:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e051:	e8 a5 a5 01 00       	call   c00285fb <__floatsidf>
c000e056:	83 c4 10             	add    esp,0x10
c000e059:	89 04 24             	mov    DWORD PTR [esp],eax
c000e05c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e068:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e070:	e8 23 9f 01 00       	call   c0027f98 <__muldf3>
c000e075:	59                   	pop    ecx
c000e076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e07a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e07e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000e081:	e8 75 a5 01 00       	call   c00285fb <__floatsidf>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e08d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e091:	52                   	push   edx
c000e092:	50                   	push   eax
c000e093:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e097:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e09b:	e8 7b 98 01 00       	call   c002791b <__adddf3>
c000e0a0:	59                   	pop    ecx
c000e0a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e0a5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e0a9:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000e0ac:	e8 4a a5 01 00       	call   c00285fb <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	52                   	push   edx
c000e0bd:	50                   	push   eax
c000e0be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c6:	e8 9a a7 01 00       	call   c0028865 <__gedf2>
c000e0cb:	83 c4 10             	add    esp,0x10
c000e0ce:	85 c0                	test   eax,eax
c000e0d0:	0f 89 43 01 00 00    	jns    c000e219 <zoh_vari_process+0x2c7>
c000e0d6:	85 ed                	test   ebp,ebp
c000e0d8:	0f 8e ec 00 00 00    	jle    c000e1ca <zoh_vari_process+0x278>
c000e0de:	83 ec 10             	sub    esp,0x10
c000e0e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e0e4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e0e7:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e0ea:	ff 37                	push   DWORD PTR [edi]
c000e0ec:	e8 7b 9e 01 00       	call   c0027f6c <__subdf3>
c000e0f1:	83 c4 18             	add    esp,0x18
c000e0f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e0f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e0fc:	52                   	push   edx
c000e0fd:	50                   	push   eax
c000e0fe:	e8 fd a8 01 00       	call   c0028a00 <fabs>
c000e103:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e107:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e10b:	83 c4 10             	add    esp,0x10
c000e10e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e113:	68 23 42 92 0c       	push   0xc924223
c000e118:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e11c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e120:	e8 24 a7 01 00       	call   c0028849 <__gtdf2>
c000e125:	83 c4 10             	add    esp,0x10
c000e128:	85 c0                	test   eax,eax
c000e12a:	0f 8e 9a 00 00 00    	jle    c000e1ca <zoh_vari_process+0x278>
c000e130:	8b 07                	mov    eax,DWORD PTR [edi]
c000e132:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e135:	89 04 24             	mov    DWORD PTR [esp],eax
c000e138:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e13c:	52                   	push   edx
c000e13d:	50                   	push   eax
c000e13e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e141:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e144:	e8 23 9e 01 00       	call   c0027f6c <__subdf3>
c000e149:	59                   	pop    ecx
c000e14a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e14e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e152:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e155:	e8 a1 a4 01 00       	call   c00285fb <__floatsidf>
c000e15a:	83 c4 10             	add    esp,0x10
c000e15d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e161:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e165:	52                   	push   edx
c000e166:	50                   	push   eax
c000e167:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e16b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e16f:	e8 24 9e 01 00       	call   c0027f98 <__muldf3>
c000e174:	5d                   	pop    ebp
c000e175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e179:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e17d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e180:	e8 76 a4 01 00       	call   c00285fb <__floatsidf>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e18c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e190:	52                   	push   edx
c000e191:	50                   	push   eax
c000e192:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e196:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e19a:	e8 dd a0 01 00       	call   c002827c <__divdf3>
c000e19f:	83 c4 10             	add    esp,0x10
c000e1a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e1ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e1b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e1b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e1ba:	e8 5c 97 01 00       	call   c002791b <__adddf3>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1ca:	31 c0                	xor    eax,eax
c000e1cc:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000e1cf:	7e 13                	jle    c000e1e4 <zoh_vari_process+0x292>
c000e1d1:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000e1d5:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e1d8:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000e1db:	40                   	inc    eax
c000e1dc:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000e1df:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e1e2:	eb e8                	jmp    c000e1cc <zoh_vari_process+0x27a>
c000e1e4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e1e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e1ec:	68 00 00 f0 3f       	push   0x3ff00000
c000e1f1:	6a 00                	push   0x0
c000e1f3:	e8 84 a0 01 00       	call   c002827c <__divdf3>
c000e1f8:	83 c4 10             	add    esp,0x10
c000e1fb:	89 04 24             	mov    DWORD PTR [esp],eax
c000e1fe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e202:	52                   	push   edx
c000e203:	50                   	push   eax
c000e204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e208:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20c:	e8 0a 97 01 00       	call   c002791b <__adddf3>
c000e211:	83 c4 10             	add    esp,0x10
c000e214:	e9 ff fd ff ff       	jmp    c000e018 <zoh_vari_process+0xc6>
c000e219:	55                   	push   ebp
c000e21a:	55                   	push   ebp
c000e21b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e223:	e8 f8 a7 01 00       	call   c0028a20 <lrint>
c000e228:	83 ec 0c             	sub    esp,0xc
c000e22b:	50                   	push   eax
c000e22c:	e8 ca a3 01 00       	call   c00285fb <__floatsidf>
c000e231:	83 c4 10             	add    esp,0x10
c000e234:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e238:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e23c:	52                   	push   edx
c000e23d:	50                   	push   eax
c000e23e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e242:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e246:	e8 21 9d 01 00       	call   c0027f6c <__subdf3>
c000e24b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e24f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e253:	83 c4 20             	add    esp,0x20
c000e256:	6a 00                	push   0x0
c000e258:	6a 00                	push   0x0
c000e25a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e25e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e262:	e8 00 a6 01 00       	call   c0028867 <__ltdf2>
c000e267:	83 c4 10             	add    esp,0x10
c000e26a:	85 c0                	test   eax,eax
c000e26c:	79 1e                	jns    c000e28c <zoh_vari_process+0x33a>
c000e26e:	68 00 00 f0 3f       	push   0x3ff00000
c000e273:	6a 00                	push   0x0
c000e275:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e279:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e27d:	e8 99 96 01 00       	call   c002791b <__adddf3>
c000e282:	83 c4 10             	add    esp,0x10
c000e285:	89 04 24             	mov    DWORD PTR [esp],eax
c000e288:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e28c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e28f:	83 ec 10             	sub    esp,0x10
c000e292:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e296:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e29a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e29e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2a2:	e8 c5 9c 01 00       	call   c0027f6c <__subdf3>
c000e2a7:	83 c4 18             	add    esp,0x18
c000e2aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2b2:	52                   	push   edx
c000e2b3:	50                   	push   eax
c000e2b4:	e8 67 a7 01 00       	call   c0028a20 <lrint>
c000e2b9:	83 c4 10             	add    esp,0x10
c000e2bc:	0f af e8             	imul   ebp,eax
c000e2bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e2c2:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e2c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e2c9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e2cc:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e2cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2d3:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e2d6:	0f 8d 7a 02 00 00    	jge    c000e556 <zoh_vari_process+0x604>
c000e2dc:	83 ec 0c             	sub    esp,0xc
c000e2df:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e2e2:	e8 14 a3 01 00       	call   c00285fb <__floatsidf>
c000e2e7:	83 c4 10             	add    esp,0x10
c000e2ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2f2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e2fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e302:	e8 91 9c 01 00       	call   c0027f98 <__muldf3>
c000e307:	59                   	pop    ecx
c000e308:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e30c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e310:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e314:	e8 e2 a2 01 00       	call   c00285fb <__floatsidf>
c000e319:	83 c4 10             	add    esp,0x10
c000e31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e324:	52                   	push   edx
c000e325:	50                   	push   eax
c000e326:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e32a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e32e:	e8 e8 95 01 00       	call   c002791b <__adddf3>
c000e333:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e336:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e33a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e33e:	e8 b8 a2 01 00       	call   c00285fb <__floatsidf>
c000e343:	83 c4 10             	add    esp,0x10
c000e346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e34a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e34e:	52                   	push   edx
c000e34f:	50                   	push   eax
c000e350:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e354:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e358:	e8 0c a5 01 00       	call   c0028869 <__ledf2>
c000e35d:	83 c4 10             	add    esp,0x10
c000e360:	85 c0                	test   eax,eax
c000e362:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e366:	0f 8f ea 01 00 00    	jg     c000e556 <zoh_vari_process+0x604>
c000e36c:	85 c9                	test   ecx,ecx
c000e36e:	0f 8e ed 00 00 00    	jle    c000e461 <zoh_vari_process+0x50f>
c000e374:	83 ec 10             	sub    esp,0x10
c000e377:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e37a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e37d:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e380:	ff 37                	push   DWORD PTR [edi]
c000e382:	e8 e5 9b 01 00       	call   c0027f6c <__subdf3>
c000e387:	83 c4 18             	add    esp,0x18
c000e38a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e38e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e392:	52                   	push   edx
c000e393:	50                   	push   eax
c000e394:	e8 67 a6 01 00       	call   c0028a00 <fabs>
c000e399:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e39d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e3a1:	83 c4 10             	add    esp,0x10
c000e3a4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e3a9:	68 23 42 92 0c       	push   0xc924223
c000e3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3b6:	e8 8e a4 01 00       	call   c0028849 <__gtdf2>
c000e3bb:	83 c4 10             	add    esp,0x10
c000e3be:	85 c0                	test   eax,eax
c000e3c0:	0f 8e 9b 00 00 00    	jle    c000e461 <zoh_vari_process+0x50f>
c000e3c6:	8b 07                	mov    eax,DWORD PTR [edi]
c000e3c8:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e3cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e3cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e3d3:	52                   	push   edx
c000e3d4:	50                   	push   eax
c000e3d5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e3d8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e3db:	e8 8c 9b 01 00       	call   c0027f6c <__subdf3>
c000e3e0:	5d                   	pop    ebp
c000e3e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e3e5:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e3e9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e3ec:	e8 0a a2 01 00       	call   c00285fb <__floatsidf>
c000e3f1:	83 c4 10             	add    esp,0x10
c000e3f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e3f8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e3fc:	52                   	push   edx
c000e3fd:	50                   	push   eax
c000e3fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e406:	e8 8d 9b 01 00       	call   c0027f98 <__muldf3>
c000e40b:	59                   	pop    ecx
c000e40c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e410:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e414:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e417:	e8 df a1 01 00       	call   c00285fb <__floatsidf>
c000e41c:	83 c4 10             	add    esp,0x10
c000e41f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e423:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e427:	52                   	push   edx
c000e428:	50                   	push   eax
c000e429:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e42d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e431:	e8 46 9e 01 00       	call   c002827c <__divdf3>
c000e436:	83 c4 10             	add    esp,0x10
c000e439:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e43d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e441:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e445:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e449:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e44d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e451:	e8 c5 94 01 00       	call   c002791b <__adddf3>
c000e456:	83 c4 10             	add    esp,0x10
c000e459:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e45d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e461:	31 d2                	xor    edx,edx
c000e463:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e466:	39 d0                	cmp    eax,edx
c000e468:	7e 1d                	jle    c000e487 <zoh_vari_process+0x535>
c000e46a:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e46d:	29 c1                	sub    ecx,eax
c000e46f:	89 c8                	mov    eax,ecx
c000e471:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e473:	01 d0                	add    eax,edx
c000e475:	42                   	inc    edx
c000e476:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e479:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e47c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e47f:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e482:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e485:	eb dc                	jmp    c000e463 <zoh_vari_process+0x511>
c000e487:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e48b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e48f:	68 00 00 f0 3f       	push   0x3ff00000
c000e494:	6a 00                	push   0x0
c000e496:	e8 e1 9d 01 00       	call   c002827c <__divdf3>
c000e49b:	83 c4 10             	add    esp,0x10
c000e49e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e4a2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e4a6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e4aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e4ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4b6:	e8 60 94 01 00       	call   c002791b <__adddf3>
c000e4bb:	5d                   	pop    ebp
c000e4bc:	59                   	pop    ecx
c000e4bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e4c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e4c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4cd:	e8 4e a5 01 00       	call   c0028a20 <lrint>
c000e4d2:	83 ec 0c             	sub    esp,0xc
c000e4d5:	50                   	push   eax
c000e4d6:	e8 20 a1 01 00       	call   c00285fb <__floatsidf>
c000e4db:	83 c4 10             	add    esp,0x10
c000e4de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e4e2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e4e6:	52                   	push   edx
c000e4e7:	50                   	push   eax
c000e4e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e4ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e4f0:	e8 77 9a 01 00       	call   c0027f6c <__subdf3>
c000e4f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e4f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e4fd:	83 c4 20             	add    esp,0x20
c000e500:	6a 00                	push   0x0
c000e502:	6a 00                	push   0x0
c000e504:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e508:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e50c:	e8 56 a3 01 00       	call   c0028867 <__ltdf2>
c000e511:	83 c4 10             	add    esp,0x10
c000e514:	85 c0                	test   eax,eax
c000e516:	79 1e                	jns    c000e536 <zoh_vari_process+0x5e4>
c000e518:	68 00 00 f0 3f       	push   0x3ff00000
c000e51d:	6a 00                	push   0x0
c000e51f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e523:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e527:	e8 ef 93 01 00       	call   c002791b <__adddf3>
c000e52c:	83 c4 10             	add    esp,0x10
c000e52f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e532:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e536:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e539:	83 ec 10             	sub    esp,0x10
c000e53c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e540:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e548:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e54c:	e8 1b 9a 01 00       	call   c0027f6c <__subdf3>
c000e551:	e9 51 fd ff ff       	jmp    c000e2a7 <zoh_vari_process+0x355>
c000e556:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e55a:	7d 3a                	jge    c000e596 <zoh_vari_process+0x644>
c000e55c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e560:	83 ec 0c             	sub    esp,0xc
c000e563:	29 e8                	sub    eax,ebp
c000e565:	99                   	cdq    
c000e566:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e569:	50                   	push   eax
c000e56a:	e8 8c a0 01 00       	call   c00285fb <__floatsidf>
c000e56f:	83 c4 10             	add    esp,0x10
c000e572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e576:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e57a:	52                   	push   edx
c000e57b:	50                   	push   eax
c000e57c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e580:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e584:	e8 92 93 01 00       	call   c002791b <__adddf3>
c000e589:	83 c4 10             	add    esp,0x10
c000e58c:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e58f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e592:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e596:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e599:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e59d:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e5a0:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e5a3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e5a6:	85 c0                	test   eax,eax
c000e5a8:	7f 25                	jg     c000e5cf <zoh_vari_process+0x67d>
c000e5aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e5ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e5b2:	89 07                	mov    DWORD PTR [edi],eax
c000e5b4:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e5b7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e5ba:	99                   	cdq    
c000e5bb:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e5be:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e5c1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e5c4:	99                   	cdq    
c000e5c5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e5c8:	31 d2                	xor    edx,edx
c000e5ca:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e5cd:	eb 1e                	jmp    c000e5ed <zoh_vari_process+0x69b>
c000e5cf:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e5d2:	31 d2                	xor    edx,edx
c000e5d4:	29 c8                	sub    eax,ecx
c000e5d6:	c1 e0 02             	shl    eax,0x2
c000e5d9:	39 d1                	cmp    ecx,edx
c000e5db:	7e cd                	jle    c000e5aa <zoh_vari_process+0x658>
c000e5dd:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e5df:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e5e3:	83 c0 04             	add    eax,0x4
c000e5e6:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e5ea:	42                   	inc    edx
c000e5eb:	eb ec                	jmp    c000e5d9 <zoh_vari_process+0x687>
c000e5ed:	83 c4 3c             	add    esp,0x3c
c000e5f0:	89 d0                	mov    eax,edx
c000e5f2:	5b                   	pop    ebx
c000e5f3:	5e                   	pop    esi
c000e5f4:	5f                   	pop    edi
c000e5f5:	5d                   	pop    ebp
c000e5f6:	c3                   	ret    

c000e5f7 <zoh_reset>:
c000e5f7:	83 ec 0c             	sub    esp,0xc
c000e5fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e5fe:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e601:	85 c0                	test   eax,eax
c000e603:	74 20                	je     c000e625 <zoh_reset+0x2e>
c000e605:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e608:	83 c0 1c             	add    eax,0x1c
c000e60b:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e60e:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e615:	c1 e2 02             	shl    edx,0x2
c000e618:	51                   	push   ecx
c000e619:	52                   	push   edx
c000e61a:	6a 00                	push   0x0
c000e61c:	50                   	push   eax
c000e61d:	e8 2e 21 ff ff       	call   c0000750 <memset>
c000e622:	83 c4 10             	add    esp,0x10
c000e625:	83 c4 0c             	add    esp,0xc
c000e628:	c3                   	ret    

c000e629 <zoh_get_name>:
c000e629:	31 c0                	xor    eax,eax
c000e62b:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e630:	75 05                	jne    c000e637 <zoh_get_name+0xe>
c000e632:	b8 de a3 02 c0       	mov    eax,0xc002a3de
c000e637:	c3                   	ret    

c000e638 <zoh_get_description>:
c000e638:	31 c0                	xor    eax,eax
c000e63a:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e63f:	75 05                	jne    c000e646 <zoh_get_description+0xe>
c000e641:	b8 ef a3 02 c0       	mov    eax,0xc002a3ef
c000e646:	c3                   	ret    

c000e647 <zoh_set_converter>:
c000e647:	53                   	push   ebx
c000e648:	b8 0a 00 00 00       	mov    eax,0xa
c000e64d:	83 ec 08             	sub    esp,0x8
c000e650:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e654:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e659:	75 6e                	jne    c000e6c9 <zoh_set_converter+0x82>
c000e65b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e65e:	85 c0                	test   eax,eax
c000e660:	74 13                	je     c000e675 <zoh_set_converter+0x2e>
c000e662:	83 ec 0c             	sub    esp,0xc
c000e665:	50                   	push   eax
c000e666:	e8 0e 13 00 00       	call   c000f979 <free>
c000e66b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e672:	83 c4 10             	add    esp,0x10
c000e675:	50                   	push   eax
c000e676:	50                   	push   eax
c000e677:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e67a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e681:	50                   	push   eax
c000e682:	6a 01                	push   0x1
c000e684:	e8 10 13 00 00       	call   c000f999 <calloc>
c000e689:	83 c4 10             	add    esp,0x10
c000e68c:	89 c2                	mov    edx,eax
c000e68e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e691:	85 d2                	test   edx,edx
c000e693:	b8 01 00 00 00       	mov    eax,0x1
c000e698:	74 2f                	je     c000e6c9 <zoh_set_converter+0x82>
c000e69a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e69d:	83 ec 0c             	sub    esp,0xc
c000e6a0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e6a3:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e6a9:	c7 43 24 52 df 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000df52
c000e6b0:	c7 43 20 52 df 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000df52
c000e6b7:	c7 43 28 f7 e5 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e5f7
c000e6be:	53                   	push   ebx
c000e6bf:	e8 33 ff ff ff       	call   c000e5f7 <zoh_reset>
c000e6c4:	83 c4 10             	add    esp,0x10
c000e6c7:	31 c0                	xor    eax,eax
c000e6c9:	83 c4 08             	add    esp,0x8
c000e6cc:	5b                   	pop    ebx
c000e6cd:	c3                   	ret    

c000e6ce <CPU::current()>:
c000e6ce:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c000e6d3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e6d9:	c3                   	ret    

c000e6da <operator new(unsigned long)>:
c000e6da:	e9 8a 12 00 00       	jmp    c000f969 <malloc>

c000e6df <operator delete(void*)>:
c000e6df:	e9 a5 12 00 00       	jmp    c000f989 <rfree>

c000e6e4 <disableIRQs()>:
c000e6e4:	fa                   	cli    
c000e6e5:	ff 05 08 fb 02 c0    	inc    DWORD PTR ds:0xc002fb08
c000e6eb:	c3                   	ret    

c000e6ec <enableIRQs()>:
c000e6ec:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c000e6f1:	48                   	dec    eax
c000e6f2:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c000e6f7:	75 01                	jne    c000e6fa <enableIRQs()+0xe>
c000e6f9:	fb                   	sti    
c000e6fa:	c3                   	ret    

c000e6fb <lockScheduler()>:
c000e6fb:	fa                   	cli    
c000e6fc:	ff 05 08 fb 02 c0    	inc    DWORD PTR ds:0xc002fb08
c000e702:	c3                   	ret    

c000e703 <unlockScheduler()>:
c000e703:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c000e708:	48                   	dec    eax
c000e709:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c000e70e:	75 01                	jne    c000e711 <unlockScheduler()+0xe>
c000e710:	fb                   	sti    
c000e711:	c3                   	ret    

c000e712 <lockStuff()>:
c000e712:	fa                   	cli    
c000e713:	ff 05 08 fb 02 c0    	inc    DWORD PTR ds:0xc002fb08
c000e719:	ff 05 04 fb 02 c0    	inc    DWORD PTR ds:0xc002fb04
c000e71f:	c3                   	ret    

c000e720 <unlockStuff()>:
c000e720:	83 ec 0c             	sub    esp,0xc
c000e723:	a1 04 fb 02 c0       	mov    eax,ds:0xc002fb04
c000e728:	48                   	dec    eax
c000e729:	a3 04 fb 02 c0       	mov    ds:0xc002fb04,eax
c000e72e:	75 18                	jne    c000e748 <unlockStuff()+0x28>
c000e730:	83 3d 00 fb 02 c0 00 	cmp    DWORD PTR ds:0xc002fb00,0x0
c000e737:	74 0f                	je     c000e748 <unlockStuff()+0x28>
c000e739:	c7 05 00 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb00,0x0
c000e743:	e8 a9 f7 00 00       	call   c001def1 <schedule()>
c000e748:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c000e74d:	48                   	dec    eax
c000e74e:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c000e753:	75 01                	jne    c000e756 <unlockStuff()+0x36>
c000e755:	fb                   	sti    
c000e756:	83 c4 0c             	add    esp,0xc
c000e759:	c3                   	ret    

c000e75a <Virt::getAKernelVAS()>:
c000e75a:	a1 70 e7 02 c0       	mov    eax,ds:0xc002e770
c000e75f:	c3                   	ret    

c000e760 <__not_memcpy>:
c000e760:	57                   	push   edi
c000e761:	56                   	push   esi
c000e762:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e76a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e76e:	89 c7                	mov    edi,eax
c000e770:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e772:	5e                   	pop    esi
c000e773:	5f                   	pop    edi
c000e774:	c3                   	ret    

c000e775 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e775:	83 ec 0c             	sub    esp,0xc
c000e778:	83 ec 08             	sub    esp,0x8
c000e77b:	68 26 a4 02 c0       	push   0xc002a426
c000e780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e784:	e8 0f 21 ff ff       	call   c0000898 <strcmp>
c000e789:	83 c4 10             	add    esp,0x10
c000e78c:	85 c0                	test   eax,eax
c000e78e:	0f 94 c0             	sete   al
c000e791:	84 c0                	test   al,al
c000e793:	74 0a                	je     c000e79f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e795:	b8 08 e6 02 c0       	mov    eax,0xc002e608
c000e79a:	e9 e3 00 00 00       	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e79f:	83 ec 08             	sub    esp,0x8
c000e7a2:	68 2f a4 02 c0       	push   0xc002a42f
c000e7a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ab:	e8 e8 20 ff ff       	call   c0000898 <strcmp>
c000e7b0:	83 c4 10             	add    esp,0x10
c000e7b3:	85 c0                	test   eax,eax
c000e7b5:	0f 94 c0             	sete   al
c000e7b8:	84 c0                	test   al,al
c000e7ba:	74 0a                	je     c000e7c6 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e7bc:	b8 94 6d 02 c0       	mov    eax,0xc0026d94
c000e7c1:	e9 bc 00 00 00       	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e7c6:	83 ec 08             	sub    esp,0x8
c000e7c9:	68 39 a4 02 c0       	push   0xc002a439
c000e7ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7d2:	e8 c1 20 ff ff       	call   c0000898 <strcmp>
c000e7d7:	83 c4 10             	add    esp,0x10
c000e7da:	85 c0                	test   eax,eax
c000e7dc:	0f 94 c0             	sete   al
c000e7df:	84 c0                	test   al,al
c000e7e1:	74 0a                	je     c000e7ed <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e7e3:	b8 c8 6a 02 c0       	mov    eax,0xc0026ac8
c000e7e8:	e9 95 00 00 00       	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e7ed:	83 ec 08             	sub    esp,0x8
c000e7f0:	68 42 a4 02 c0       	push   0xc002a442
c000e7f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7f9:	e8 9a 20 ff ff       	call   c0000898 <strcmp>
c000e7fe:	83 c4 10             	add    esp,0x10
c000e801:	85 c0                	test   eax,eax
c000e803:	0f 94 c0             	sete   al
c000e806:	84 c0                	test   al,al
c000e808:	74 07                	je     c000e811 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e80a:	b8 94 6e 02 c0       	mov    eax,0xc0026e94
c000e80f:	eb 71                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e811:	83 ec 08             	sub    esp,0x8
c000e814:	68 4c a4 02 c0       	push   0xc002a44c
c000e819:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e81d:	e8 76 20 ff ff       	call   c0000898 <strcmp>
c000e822:	83 c4 10             	add    esp,0x10
c000e825:	85 c0                	test   eax,eax
c000e827:	0f 94 c0             	sete   al
c000e82a:	84 c0                	test   al,al
c000e82c:	74 07                	je     c000e835 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e82e:	b8 14 6c 02 c0       	mov    eax,0xc0026c14
c000e833:	eb 4d                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e835:	83 ec 08             	sub    esp,0x8
c000e838:	68 55 a4 02 c0       	push   0xc002a455
c000e83d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e841:	e8 52 20 ff ff       	call   c0000898 <strcmp>
c000e846:	83 c4 10             	add    esp,0x10
c000e849:	85 c0                	test   eax,eax
c000e84b:	0f 94 c0             	sete   al
c000e84e:	84 c0                	test   al,al
c000e850:	74 07                	je     c000e859 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e852:	b8 0c e6 02 c0       	mov    eax,0xc002e60c
c000e857:	eb 29                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e859:	83 ec 08             	sub    esp,0x8
c000e85c:	68 62 a4 02 c0       	push   0xc002a462
c000e861:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e865:	e8 2e 20 ff ff       	call   c0000898 <strcmp>
c000e86a:	83 c4 10             	add    esp,0x10
c000e86d:	85 c0                	test   eax,eax
c000e86f:	0f 94 c0             	sete   al
c000e872:	84 c0                	test   al,al
c000e874:	74 07                	je     c000e87d <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e876:	b8 0d e6 02 c0       	mov    eax,0xc002e60d
c000e87b:	eb 05                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e87d:	b8 00 00 00 00       	mov    eax,0x0
c000e882:	83 c4 0c             	add    esp,0xc
c000e885:	c3                   	ret    

c000e886 <Computer::close(int, int, void*)>:
c000e886:	57                   	push   edi
c000e887:	56                   	push   esi
c000e888:	53                   	push   ebx
c000e889:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e88d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e891:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e895:	83 ec 0c             	sub    esp,0xc
c000e898:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e89e:	e8 e1 56 00 00       	call   c0013f84 <Device::closeAll()>
c000e8a3:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e8a9:	83 c4 10             	add    esp,0x10
c000e8ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000e8ae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e8b2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e8ba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e8be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8c2:	5b                   	pop    ebx
c000e8c3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e8c6:	5e                   	pop    esi
c000e8c7:	5f                   	pop    edi
c000e8c8:	ff e0                	jmp    eax

c000e8ca <Krnl::firstTask()>:
c000e8ca:	53                   	push   ebx
c000e8cb:	83 ec 14             	sub    esp,0x14
c000e8ce:	68 6f a4 02 c0       	push   0xc002a46f
c000e8d3:	e8 eb 10 00 00       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c000e8d8:	fb                   	sti    
c000e8d9:	c7 04 24 86 a4 02 c0 	mov    DWORD PTR [esp],0xc002a486
c000e8e0:	e8 de 10 00 00       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c000e8e5:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e8ec:	e8 78 10 00 00       	call   c000f969 <malloc>
c000e8f1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e8f8:	89 c3                	mov    ebx,eax
c000e8fa:	ff 35 30 fb 02 c0    	push   DWORD PTR ds:0xc002fb30
c000e900:	68 9f a4 02 c0       	push   0xc002a49f
c000e905:	6a 01                	push   0x1
c000e907:	50                   	push   eax
c000e908:	e8 c7 f1 00 00       	call   c001dad4 <Process::Process(bool, char const*, Process*, char**)>
c000e90d:	83 c4 20             	add    esp,0x20
c000e910:	68 ff 00 00 00       	push   0xff
c000e915:	6a 00                	push   0x0
c000e917:	68 fb f1 00 c0       	push   0xc000f1fb
c000e91c:	53                   	push   ebx
c000e91d:	e8 aa f3 00 00       	call   c001dccc <Process::createThread(void (*)(void*), void*, int)>
c000e922:	6a 7a                	push   0x7a
c000e924:	6a 00                	push   0x0
c000e926:	68 bf e6 01 c0       	push   0xc001e6bf
c000e92b:	ff 35 30 fb 02 c0    	push   DWORD PTR ds:0xc002fb30
c000e931:	e8 96 f3 00 00       	call   c001dccc <Process::createThread(void (*)(void*), void*, int)>
c000e936:	83 c4 14             	add    esp,0x14
c000e939:	a3 e8 fa 02 c0       	mov    ds:0xc002fae8,eax
c000e93e:	68 18 a6 02 c0       	push   0xc002a618
c000e943:	c6 05 0d e6 02 c0 01 	mov    BYTE PTR ds:0xc002e60d,0x1
c000e94a:	e8 74 10 00 00       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c000e94f:	e8 17 01 01 00       	call   c001ea6b <Vm::initialise8086()>
c000e954:	e8 f3 43 00 00       	call   c0012d4c <Fs::initVFS()>
c000e959:	c7 04 24 ac a4 02 c0 	mov    DWORD PTR [esp],0xc002a4ac
c000e960:	e8 5e 10 00 00       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c000e965:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c000e96a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e970:	8b 10                	mov    edx,DWORD PTR [eax]
c000e972:	6a 00                	push   0x0
c000e974:	6a 00                	push   0x0
c000e976:	6a 00                	push   0x0
c000e978:	50                   	push   eax
c000e979:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e97c:	83 c4 14             	add    esp,0x14
c000e97f:	68 18 a6 02 c0       	push   0xc002a618
c000e984:	e8 3a 10 00 00       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c000e989:	e8 ce d9 00 00       	call   c001c35c <Sys::loadSyscalls()>
c000e98e:	e8 c3 b8 00 00       	call   c001a256 <Krnl::loadSystemEnv()>
c000e993:	83 c4 0c             	add    esp,0xc
c000e996:	6a 3a                	push   0x3a
c000e998:	68 c6 a4 02 c0       	push   0xc002a4c6
c000e99d:	68 cf a4 02 c0       	push   0xc002a4cf
c000e9a2:	e8 74 c7 00 00       	call   c001b11b <Reg::readIntWithDefault(char*, char*, int)>
c000e9a7:	89 04 24             	mov    DWORD PTR [esp],eax
c000e9aa:	e8 8d 4e 00 00       	call   c001383c <User::loadClockSettings(int)>
c000e9af:	c7 04 24 3c a6 02 c0 	mov    DWORD PTR [esp],0xc002a63c
c000e9b6:	e8 08 10 00 00       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c000e9bb:	58                   	pop    eax
c000e9bc:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c000e9c1:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e9c7:	e8 78 55 00 00       	call   c0013f44 <Device::loadDriversForAll()>
c000e9cc:	c7 04 24 d7 a4 02 c0 	mov    DWORD PTR [esp],0xc002a4d7
c000e9d3:	e8 eb 0f 00 00       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c000e9d8:	e8 e1 b3 00 00       	call   c0019dbe <Krnl::startCPUs()>
c000e9dd:	c7 04 24 f1 a4 02 c0 	mov    DWORD PTR [esp],0xc002a4f1
c000e9e4:	e8 da 0f 00 00       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c000e9e9:	5a                   	pop    edx
c000e9ea:	8b 1d 08 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e608
c000e9f0:	59                   	pop    ecx
c000e9f1:	6a 01                	push   0x1
c000e9f3:	68 02 a5 02 c0       	push   0xc002a502
c000e9f8:	e8 2f eb 00 00       	call   c001d52c <Thr::loadDLL(char const*, bool)>
c000e9fd:	5a                   	pop    edx
c000e9fe:	59                   	pop    ecx
c000e9ff:	53                   	push   ebx
c000ea00:	50                   	push   eax
c000ea01:	e8 57 ed 00 00       	call   c001d75d <Thr::executeDLL(unsigned long, void*)>
c000ea06:	83 c4 10             	add    esp,0x10
c000ea09:	83 ec 0c             	sub    esp,0xc
c000ea0c:	6a 02                	push   0x2
c000ea0e:	e8 b4 f6 00 00       	call   c001e0c7 <blockTask(TaskState)>
c000ea13:	83 c4 10             	add    esp,0x10
c000ea16:	eb f1                	jmp    c000ea09 <Krnl::firstTask()+0x13f>

c000ea18 <Computer::Computer()>:
c000ea18:	83 ec 0c             	sub    esp,0xc
c000ea1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea1f:	83 ec 08             	sub    esp,0x8
c000ea22:	68 1e a5 02 c0       	push   0xc002a51e
c000ea27:	50                   	push   eax
c000ea28:	e8 d1 55 00 00       	call   c0013ffe <Device::Device(char const*)>
c000ea2d:	83 c4 10             	add    esp,0x10
c000ea30:	ba ec a6 02 c0       	mov    edx,0xc002a6ec
c000ea35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea39:	89 10                	mov    DWORD PTR [eax],edx
c000ea3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea3f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ea49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea4d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ea57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea5b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000ea61:	83 ca 04             	or     edx,0x4
c000ea64:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000ea6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea6e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ea74:	0f b6 d0             	movzx  edx,al
c000ea77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea7b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ea82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea86:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ea8c:	0f b6 d0             	movzx  edx,al
c000ea8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea93:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000ea98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea9c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eaa2:	8d 50 01             	lea    edx,[eax+0x1]
c000eaa5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eaa9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000eaaf:	0f b6 d0             	movzx  edx,al
c000eab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eab6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000eaba:	83 e1 3f             	and    ecx,0x3f
c000eabd:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000eac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eac5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eacb:	0f b6 d0             	movzx  edx,al
c000eace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ead2:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000ead9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eadd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eae3:	0f b6 d0             	movzx  edx,al
c000eae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaea:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000eaef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaf3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eaf9:	8d 50 01             	lea    edx,[eax+0x1]
c000eafc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eb00:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000eb06:	0f b6 d0             	movzx  edx,al
c000eb09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb0d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000eb11:	83 e1 3f             	and    ecx,0x3f
c000eb14:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000eb18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb1c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eb22:	0f b6 d0             	movzx  edx,al
c000eb25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb29:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000eb30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb34:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eb3a:	0f b6 d0             	movzx  edx,al
c000eb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb41:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000eb46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb4a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eb50:	8d 50 01             	lea    edx,[eax+0x1]
c000eb53:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eb57:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000eb5d:	0f b6 d0             	movzx  edx,al
c000eb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb64:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000eb68:	83 e1 3f             	and    ecx,0x3f
c000eb6b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000eb6f:	90                   	nop
c000eb70:	83 c4 0c             	add    esp,0xc
c000eb73:	c3                   	ret    

c000eb74 <Computer::setBootMessage(char const*)>:
c000eb74:	c3                   	ret    
c000eb75:	90                   	nop

c000eb76 <Computer::detectFeatures()>:
c000eb76:	55                   	push   ebp
c000eb77:	57                   	push   edi
c000eb78:	56                   	push   esi
c000eb79:	53                   	push   ebx
c000eb7a:	83 ec 1c             	sub    esp,0x1c
c000eb7d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000eb81:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000eb8b:	e8 54 17 ff ff       	call   c00002e4 <detectCPUID>
c000eb90:	85 c0                	test   eax,eax
c000eb92:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb98:	0f 95 c2             	setne  dl
c000eb9b:	83 e0 fd             	and    eax,0xfffffffd
c000eb9e:	d1 e2                	shl    edx,1
c000eba0:	09 d0                	or     eax,edx
c000eba2:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eba8:	a8 02                	test   al,0x2
c000ebaa:	75 46                	jne    c000ebf2 <Computer::detectFeatures()+0x7c>
c000ebac:	f6 05 21 e6 02 c0 04 	test   BYTE PTR ds:0xc002e621,0x4
c000ebb3:	74 07                	je     c000ebbc <Computer::detectFeatures()+0x46>
c000ebb5:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000ebbc:	e8 95 7e 01 00       	call   c0026a56 <x87Detect>
c000ebc1:	83 e0 01             	and    eax,0x1
c000ebc4:	c1 e0 04             	shl    eax,0x4
c000ebc7:	88 c2                	mov    dl,al
c000ebc9:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ebcf:	83 e0 ef             	and    eax,0xffffffef
c000ebd2:	09 d0                	or     eax,edx
c000ebd4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ebda:	a8 10                	test   al,0x10
c000ebdc:	0f 85 2a 01 00 00    	jne    c000ed0c <Computer::detectFeatures()+0x196>
c000ebe2:	84 c0                	test   al,al
c000ebe4:	0f 88 45 01 00 00    	js     c000ed2f <Computer::detectFeatures()+0x1b9>
c000ebea:	83 c4 1c             	add    esp,0x1c
c000ebed:	5b                   	pop    ebx
c000ebee:	5e                   	pop    esi
c000ebef:	5f                   	pop    edi
c000ebf0:	5d                   	pop    ebp
c000ebf1:	c3                   	ret    
c000ebf2:	83 ec 0c             	sub    esp,0xc
c000ebf5:	6a 20                	push   0x20
c000ebf7:	e8 c4 a0 00 00       	call   c0018cc0 <CPU::cpuidCheckEDX(unsigned int)>
c000ebfc:	83 e0 01             	and    eax,0x1
c000ebff:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ec06:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ec0c:	83 e0 f7             	and    eax,0xfffffff7
c000ec0f:	09 d0                	or     eax,edx
c000ec11:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ec17:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000ec1e:	e8 9d a0 00 00       	call   c0018cc0 <CPU::cpuidCheckEDX(unsigned int)>
c000ec23:	83 e0 01             	and    eax,0x1
c000ec26:	88 c2                	mov    dl,al
c000ec28:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ec2e:	83 e0 fe             	and    eax,0xfffffffe
c000ec31:	09 d0                	or     eax,edx
c000ec33:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ec39:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000ec40:	e8 7b a0 00 00       	call   c0018cc0 <CPU::cpuidCheckEDX(unsigned int)>
c000ec45:	c1 e0 07             	shl    eax,0x7
c000ec48:	88 c2                	mov    dl,al
c000ec4a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ec50:	83 e0 7f             	and    eax,0x7f
c000ec53:	09 d0                	or     eax,edx
c000ec55:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ec5b:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ec62:	e8 59 a0 00 00       	call   c0018cc0 <CPU::cpuidCheckEDX(unsigned int)>
c000ec67:	83 c4 10             	add    esp,0x10
c000ec6a:	83 e0 01             	and    eax,0x1
c000ec6d:	c1 e0 05             	shl    eax,0x5
c000ec70:	88 c2                	mov    dl,al
c000ec72:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ec78:	83 e0 df             	and    eax,0xffffffdf
c000ec7b:	09 d0                	or     eax,edx
c000ec7d:	f7 05 20 e6 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e620,0x401
c000ec87:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ec8d:	0f 84 c2 00 00 00    	je     c000ed55 <Computer::detectFeatures()+0x1df>
c000ec93:	83 e0 fe             	and    eax,0xfffffffe
c000ec96:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ec9c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eca2:	88 c2                	mov    dl,al
c000eca4:	83 e2 09             	and    edx,0x9
c000eca7:	fe ca                	dec    dl
c000eca9:	75 09                	jne    c000ecb4 <Computer::detectFeatures()+0x13e>
c000ecab:	83 e0 fe             	and    eax,0xfffffffe
c000ecae:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ecb4:	83 ec 0c             	sub    esp,0xc
c000ecb7:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ecbb:	50                   	push   eax
c000ecbc:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ecc0:	55                   	push   ebp
c000ecc1:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ecc5:	57                   	push   edi
c000ecc6:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ecca:	56                   	push   esi
c000eccb:	68 00 00 00 80       	push   0x80000000
c000ecd0:	e8 67 9f 00 00       	call   c0018c3c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ecd5:	83 c4 20             	add    esp,0x20
c000ecd8:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ecdf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ece3:	0f 86 c3 fe ff ff    	jbe    c000ebac <Computer::detectFeatures()+0x36>
c000ece9:	83 ec 0c             	sub    esp,0xc
c000ecec:	50                   	push   eax
c000eced:	55                   	push   ebp
c000ecee:	57                   	push   edi
c000ecef:	56                   	push   esi
c000ecf0:	68 01 00 00 80       	push   0x80000001
c000ecf5:	e8 42 9f 00 00       	call   c0018c3c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ecfa:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ed04:	83 c4 20             	add    esp,0x20
c000ed07:	e9 a0 fe ff ff       	jmp    c000ebac <Computer::detectFeatures()+0x36>
c000ed0c:	e8 ff 7c 01 00       	call   c0026a10 <absolutelyNoChanceInHell>
c000ed11:	88 c2                	mov    dl,al
c000ed13:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ed19:	c1 e2 07             	shl    edx,0x7
c000ed1c:	83 e0 7f             	and    eax,0x7f
c000ed1f:	09 d0                	or     eax,edx
c000ed21:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ed27:	84 c0                	test   al,al
c000ed29:	0f 89 bb fe ff ff    	jns    c000ebea <Computer::detectFeatures()+0x74>
c000ed2f:	e8 bc 7c 01 00       	call   c00269f0 <avxDetect>
c000ed34:	83 e0 01             	and    eax,0x1
c000ed37:	c1 e0 05             	shl    eax,0x5
c000ed3a:	88 c2                	mov    dl,al
c000ed3c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ed42:	83 e0 df             	and    eax,0xffffffdf
c000ed45:	09 d0                	or     eax,edx
c000ed47:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ed4d:	83 c4 1c             	add    esp,0x1c
c000ed50:	5b                   	pop    ebx
c000ed51:	5e                   	pop    esi
c000ed52:	5f                   	pop    edi
c000ed53:	5d                   	pop    ebp
c000ed54:	c3                   	ret    
c000ed55:	83 ec 0c             	sub    esp,0xc
c000ed58:	68 00 02 00 00       	push   0x200
c000ed5d:	e8 5e 9f 00 00       	call   c0018cc0 <CPU::cpuidCheckEDX(unsigned int)>
c000ed62:	83 c4 10             	add    esp,0x10
c000ed65:	83 e0 01             	and    eax,0x1
c000ed68:	88 c2                	mov    dl,al
c000ed6a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ed70:	83 e0 fe             	and    eax,0xfffffffe
c000ed73:	09 d0                	or     eax,edx
c000ed75:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ed7b:	e9 1c ff ff ff       	jmp    c000ec9c <Computer::detectFeatures()+0x126>

c000ed80 <Computer::displayFeatures()>:
c000ed80:	c3                   	ret    
c000ed81:	90                   	nop

c000ed82 <Computer::rdmsr(unsigned int)>:
c000ed82:	83 ec 0c             	sub    esp,0xc
c000ed85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed89:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ed90:	74 0a                	je     c000ed9c <Computer::rdmsr(unsigned int)+0x1a>
c000ed92:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ed96:	0f 32                	rdmsr  
c000ed98:	83 c4 0c             	add    esp,0xc
c000ed9b:	c3                   	ret    
c000ed9c:	83 ec 0c             	sub    esp,0xc
c000ed9f:	68 27 a5 02 c0       	push   0xc002a527
c000eda4:	e8 b6 b5 00 00       	call   c001a35f <Krnl::panic(char const*)>
c000eda9:	83 c4 10             	add    esp,0x10
c000edac:	eb e4                	jmp    c000ed92 <Computer::rdmsr(unsigned int)+0x10>

c000edae <Computer::wrmsr(unsigned int, unsigned long long)>:
c000edae:	57                   	push   edi
c000edaf:	56                   	push   esi
c000edb0:	52                   	push   edx
c000edb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edb5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000edb9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000edbd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edc4:	74 0e                	je     c000edd4 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000edc6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edca:	89 f0                	mov    eax,esi
c000edcc:	89 fa                	mov    edx,edi
c000edce:	0f 30                	wrmsr  
c000edd0:	58                   	pop    eax
c000edd1:	5e                   	pop    esi
c000edd2:	5f                   	pop    edi
c000edd3:	c3                   	ret    
c000edd4:	83 ec 0c             	sub    esp,0xc
c000edd7:	68 2d a5 02 c0       	push   0xc002a52d
c000eddc:	e8 7e b5 00 00       	call   c001a35f <Krnl::panic(char const*)>
c000ede1:	83 c4 10             	add    esp,0x10
c000ede4:	eb e0                	jmp    c000edc6 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ede6 <Computer::nmiEnabled()>:
c000ede6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edea:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000edf0:	c3                   	ret    
c000edf1:	90                   	nop

c000edf2 <Computer::readCMOS(unsigned char)>:
c000edf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edf6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000edfd:	19 c0                	sbb    eax,eax
c000edff:	83 e0 80             	and    eax,0xffffff80
c000ee02:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee06:	e6 70                	out    0x70,al
c000ee08:	e4 71                	in     al,0x71
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <Computer::enableNMI(bool)>:
c000ee0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee14:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee1a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee22:	eb ce                	jmp    c000edf2 <Computer::readCMOS(unsigned char)>

c000ee24 <Computer::open(int, int, void*)>:
c000ee24:	56                   	push   esi
c000ee25:	53                   	push   ebx
c000ee26:	83 ec 10             	sub    esp,0x10
c000ee29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee2d:	68 5c a6 02 c0       	push   0xc002a65c
c000ee32:	e8 8c 0b 00 00       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c000ee37:	58                   	pop    eax
c000ee38:	f6 05 20 e6 02 c0 04 	test   BYTE PTR ds:0xc002e620,0x4
c000ee3f:	5a                   	pop    edx
c000ee40:	0f 94 05 40 d5 02 c0 	sete   BYTE PTR ds:0xc002d540
c000ee47:	68 58 01 00 00       	push   0x158
c000ee4c:	68 33 a5 02 c0       	push   0xc002a533
c000ee51:	e8 6b 3b 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000ee56:	59                   	pop    ecx
c000ee57:	5e                   	pop    esi
c000ee58:	68 14 01 00 00       	push   0x114
c000ee5d:	68 49 a5 02 c0       	push   0xc002a549
c000ee62:	e8 5a 3b 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000ee67:	58                   	pop    eax
c000ee68:	5a                   	pop    edx
c000ee69:	6a 14                	push   0x14
c000ee6b:	68 5d a5 02 c0       	push   0xc002a55d
c000ee70:	e8 4c 3b 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000ee75:	c7 04 24 70 a5 02 c0 	mov    DWORD PTR [esp],0xc002a570
c000ee7c:	e8 40 3b 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000ee81:	c7 04 24 82 a5 02 c0 	mov    DWORD PTR [esp],0xc002a582
c000ee88:	e8 36 0b 00 00       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c000ee8d:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ee94:	e8 d0 0a 00 00       	call   c000f969 <malloc>
c000ee99:	89 04 24             	mov    DWORD PTR [esp],eax
c000ee9c:	89 c6                	mov    esi,eax
c000ee9e:	e8 81 90 00 00       	call   c0017f24 <ACPI::ACPI()>
c000eea3:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eea9:	c7 04 24 9c a5 02 c0 	mov    DWORD PTR [esp],0xc002a59c
c000eeb0:	e8 0e 0b 00 00       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c000eeb5:	59                   	pop    ecx
c000eeb6:	5e                   	pop    esi
c000eeb7:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000eebd:	53                   	push   ebx
c000eebe:	e8 37 4f 00 00       	call   c0013dfa <Device::addChild(Device*)>
c000eec3:	c7 04 24 80 a6 02 c0 	mov    DWORD PTR [esp],0xc002a680
c000eeca:	e8 f4 0a 00 00       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c000eecf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eed2:	e8 9f fc ff ff       	call   c000eb76 <Computer::detectFeatures()>
c000eed7:	c7 04 24 a0 a6 02 c0 	mov    DWORD PTR [esp],0xc002a6a0
c000eede:	e8 e0 0a 00 00       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c000eee3:	c7 04 24 b6 a5 02 c0 	mov    DWORD PTR [esp],0xc002a5b6
c000eeea:	e8 d4 0a 00 00       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c000eeef:	58                   	pop    eax
c000eef0:	5a                   	pop    edx
c000eef1:	6a 01                	push   0x1
c000eef3:	53                   	push   ebx
c000eef4:	e8 13 ff ff ff       	call   c000ee0c <Computer::enableNMI(bool)>
c000eef9:	c7 04 24 d7 a4 02 c0 	mov    DWORD PTR [esp],0xc002a4d7
c000ef00:	e8 be 0a 00 00       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c000ef05:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef0c:	e8 58 0a 00 00       	call   c000f969 <malloc>
c000ef11:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef14:	89 c6                	mov    esi,eax
c000ef16:	e8 5d 9e 00 00       	call   c0018d78 <CPU::CPU()>
c000ef1b:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef21:	59                   	pop    ecx
c000ef22:	58                   	pop    eax
c000ef23:	56                   	push   esi
c000ef24:	53                   	push   ebx
c000ef25:	e8 d0 4e 00 00       	call   c0013dfa <Device::addChild(Device*)>
c000ef2a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef30:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef36:	6a 00                	push   0x0
c000ef38:	6a 00                	push   0x0
c000ef3a:	50                   	push   eax
c000ef3b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef3e:	83 c4 14             	add    esp,0x14
c000ef41:	68 c0 a6 02 c0       	push   0xc002a6c0
c000ef46:	e8 78 0a 00 00       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c000ef4b:	e8 42 54 00 00       	call   c0014392 <setupFPU()>
c000ef50:	83 c4 10             	add    esp,0x10
c000ef53:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef59:	85 c0                	test   eax,eax
c000ef5b:	74 1f                	je     c000ef7c <Computer::open(int, int, void*)+0x158>
c000ef5d:	83 ec 08             	sub    esp,0x8
c000ef60:	50                   	push   eax
c000ef61:	53                   	push   ebx
c000ef62:	e8 93 4e 00 00       	call   c0013dfa <Device::addChild(Device*)>
c000ef67:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef6d:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef6f:	6a 00                	push   0x0
c000ef71:	6a 00                	push   0x0
c000ef73:	6a 00                	push   0x0
c000ef75:	50                   	push   eax
c000ef76:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef79:	83 c4 20             	add    esp,0x20
c000ef7c:	83 ec 0c             	sub    esp,0xc
c000ef7f:	68 c7 a5 02 c0       	push   0xc002a5c7
c000ef84:	e8 3a 0a 00 00       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c000ef89:	c7 04 24 ca e8 00 c0 	mov    DWORD PTR [esp],0xc000e8ca
c000ef90:	e8 59 ee 00 00       	call   c001ddee <setupMultitasking(void (*)())>
c000ef95:	83 c4 14             	add    esp,0x14
c000ef98:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef9d:	5b                   	pop    ebx
c000ef9e:	5e                   	pop    esi
c000ef9f:	c3                   	ret    

c000efa0 <Computer::disableNMI()>:
c000efa0:	6a 00                	push   0x0
c000efa2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000efa6:	e8 61 fe ff ff       	call   c000ee0c <Computer::enableNMI(bool)>
c000efab:	58                   	pop    eax
c000efac:	5a                   	pop    edx
c000efad:	c3                   	ret    

c000efae <Computer::writeCMOS(unsigned char, unsigned char)>:
c000efae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efb2:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000efb9:	19 c0                	sbb    eax,eax
c000efbb:	83 e0 80             	and    eax,0xffffff80
c000efbe:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000efc2:	e6 70                	out    0x70,al
c000efc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efc8:	e6 71                	out    0x71,al
c000efca:	c3                   	ret    
c000efcb:	90                   	nop

c000efcc <Computer::handleNMI()>:
c000efcc:	56                   	push   esi
c000efcd:	53                   	push   ebx
c000efce:	83 ec 10             	sub    esp,0x10
c000efd1:	e4 92                	in     al,0x92
c000efd3:	89 c6                	mov    esi,eax
c000efd5:	e4 61                	in     al,0x61
c000efd7:	68 e2 a5 02 c0       	push   0xc002a5e2
c000efdc:	88 c3                	mov    bl,al
c000efde:	e8 de 39 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000efe3:	83 c4 10             	add    esp,0x10
c000efe6:	83 e6 10             	and    esi,0x10
c000efe9:	75 0d                	jne    c000eff8 <Computer::handleNMI()+0x2c>
c000efeb:	f6 c3 40             	test   bl,0x40
c000efee:	75 1d                	jne    c000f00d <Computer::handleNMI()+0x41>
c000eff0:	84 db                	test   bl,bl
c000eff2:	78 2d                	js     c000f021 <Computer::handleNMI()+0x55>
c000eff4:	58                   	pop    eax
c000eff5:	5b                   	pop    ebx
c000eff6:	5e                   	pop    esi
c000eff7:	c3                   	ret    
c000eff8:	83 ec 0c             	sub    esp,0xc
c000effb:	68 f3 a5 02 c0       	push   0xc002a5f3
c000f000:	e8 5a b3 00 00       	call   c001a35f <Krnl::panic(char const*)>
c000f005:	83 c4 10             	add    esp,0x10
c000f008:	f6 c3 40             	test   bl,0x40
c000f00b:	74 e3                	je     c000eff0 <Computer::handleNMI()+0x24>
c000f00d:	83 ec 0c             	sub    esp,0xc
c000f010:	68 00 a6 02 c0       	push   0xc002a600
c000f015:	e8 45 b3 00 00       	call   c001a35f <Krnl::panic(char const*)>
c000f01a:	83 c4 10             	add    esp,0x10
c000f01d:	84 db                	test   bl,bl
c000f01f:	79 d3                	jns    c000eff4 <Computer::handleNMI()+0x28>
c000f021:	c7 44 24 10 0a a6 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a60a
c000f029:	5a                   	pop    edx
c000f02a:	5b                   	pop    ebx
c000f02b:	5e                   	pop    esi
c000f02c:	e9 2e b3 00 00       	jmp    c001a35f <Krnl::panic(char const*)>
c000f031:	90                   	nop

c000f032 <Computer::setDiskActivityLight(int, bool)>:
c000f032:	56                   	push   esi
c000f033:	53                   	push   ebx
c000f034:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f038:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f03d:	77 1b                	ja     c000f05a <Computer::setDiskActivityLight(int, bool)+0x28>
c000f03f:	e4 92                	in     al,0x92
c000f041:	bb 40 00 00 00       	mov    ebx,0x40
c000f046:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f04a:	89 da                	mov    edx,ebx
c000f04c:	d3 e2                	shl    edx,cl
c000f04e:	89 f1                	mov    ecx,esi
c000f050:	f7 d2                	not    edx
c000f052:	d3 e3                	shl    ebx,cl
c000f054:	21 d0                	and    eax,edx
c000f056:	09 d8                	or     eax,ebx
c000f058:	e6 92                	out    0x92,al
c000f05a:	5b                   	pop    ebx
c000f05b:	5e                   	pop    esi
c000f05c:	c3                   	ret    
c000f05d:	90                   	nop

c000f05e <GDTEntry::setBase(unsigned int)>:
c000f05e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f062:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f066:	89 c1                	mov    ecx,eax
c000f068:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f06c:	c1 e9 10             	shr    ecx,0x10
c000f06f:	c1 e8 18             	shr    eax,0x18
c000f072:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f075:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f078:	c3                   	ret    
c000f079:	90                   	nop

c000f07a <GDTEntry::setLimit(unsigned int)>:
c000f07a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f07e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f082:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f085:	66 89 01             	mov    WORD PTR [ecx],ax
c000f088:	83 e2 f0             	and    edx,0xfffffff0
c000f08b:	c1 e8 10             	shr    eax,0x10
c000f08e:	83 e0 0f             	and    eax,0xf
c000f091:	09 d0                	or     eax,edx
c000f093:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f096:	c3                   	ret    
c000f097:	90                   	nop

c000f098 <GDT::GDT()>:
c000f098:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f09c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0ac:	90                   	nop
c000f0ad:	c3                   	ret    

c000f0ae <GDT::addEntry(GDTEntry)>:
c000f0ae:	53                   	push   ebx
c000f0af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f0b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f0b7:	8b 02                	mov    eax,DWORD PTR [edx]
c000f0b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f0bd:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000f0c1:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000f0c5:	8d 48 01             	lea    ecx,[eax+0x1]
c000f0c8:	c1 e0 03             	shl    eax,0x3
c000f0cb:	89 0a                	mov    DWORD PTR [edx],ecx
c000f0cd:	5b                   	pop    ebx
c000f0ce:	c3                   	ret    
c000f0cf:	90                   	nop

c000f0d0 <GDT::getNumberOfEntries()>:
c000f0d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0d6:	c3                   	ret    
c000f0d7:	90                   	nop

c000f0d8 <GDT::flush()>:
c000f0d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0dc:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0de:	83 c0 04             	add    eax,0x4
c000f0e1:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0e8:	a3 12 e6 02 c0       	mov    ds:0xc002e612,eax
c000f0ed:	66 89 15 10 e6 02 c0 	mov    WORD PTR ds:0xc002e610,dx
c000f0f4:	e9 57 13 ff ff       	jmp    c0000450 <loadGDT>
c000f0f9:	90                   	nop

c000f0fa <GDT::setup()>:
c000f0fa:	55                   	push   ebp
c000f0fb:	57                   	push   edi
c000f0fc:	56                   	push   esi
c000f0fd:	53                   	push   ebx
c000f0fe:	83 ec 3c             	sub    esp,0x3c
c000f101:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f105:	6a 00                	push   0x0
c000f107:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f10b:	53                   	push   ebx
c000f10c:	e8 4d ff ff ff       	call   c000f05e <GDTEntry::setBase(unsigned int)>
c000f111:	6a 00                	push   0x0
c000f113:	53                   	push   ebx
c000f114:	e8 61 ff ff ff       	call   c000f07a <GDTEntry::setLimit(unsigned int)>
c000f119:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f121:	6a 00                	push   0x0
c000f123:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f127:	53                   	push   ebx
c000f128:	e8 31 ff ff ff       	call   c000f05e <GDTEntry::setBase(unsigned int)>
c000f12d:	68 ff ff ff 00       	push   0xffffff
c000f132:	53                   	push   ebx
c000f133:	e8 42 ff ff ff       	call   c000f07a <GDTEntry::setLimit(unsigned int)>
c000f138:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f13c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f141:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f146:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f14a:	83 c4 20             	add    esp,0x20
c000f14d:	6a 00                	push   0x0
c000f14f:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f153:	53                   	push   ebx
c000f154:	e8 05 ff ff ff       	call   c000f05e <GDTEntry::setBase(unsigned int)>
c000f159:	68 ff ff ff 00       	push   0xffffff
c000f15e:	53                   	push   ebx
c000f15f:	e8 16 ff ff ff       	call   c000f07a <GDTEntry::setLimit(unsigned int)>
c000f164:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f168:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f16c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f170:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f174:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f178:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f17d:	0d 00 92 c0 00       	or     eax,0xc09200
c000f182:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f186:	89 d8                	mov    eax,ebx
c000f188:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f18c:	80 cc 60             	or     ah,0x60
c000f18f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f193:	83 c4 0c             	add    esp,0xc
c000f196:	89 f8                	mov    eax,edi
c000f198:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f19c:	80 cc 60             	or     ah,0x60
c000f19f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1a3:	89 c7                	mov    edi,eax
c000f1a5:	55                   	push   ebp
c000f1a6:	e8 03 ff ff ff       	call   c000f0ae <GDT::addEntry(GDTEntry)>
c000f1ab:	83 c4 0c             	add    esp,0xc
c000f1ae:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1b6:	55                   	push   ebp
c000f1b7:	e8 f2 fe ff ff       	call   c000f0ae <GDT::addEntry(GDTEntry)>
c000f1bc:	83 c4 0c             	add    esp,0xc
c000f1bf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1c3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1c7:	55                   	push   ebp
c000f1c8:	e8 e1 fe ff ff       	call   c000f0ae <GDT::addEntry(GDTEntry)>
c000f1cd:	83 c4 0c             	add    esp,0xc
c000f1d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1d8:	53                   	push   ebx
c000f1d9:	51                   	push   ecx
c000f1da:	55                   	push   ebp
c000f1db:	e8 ce fe ff ff       	call   c000f0ae <GDT::addEntry(GDTEntry)>
c000f1e0:	83 c4 0c             	add    esp,0xc
c000f1e3:	57                   	push   edi
c000f1e4:	56                   	push   esi
c000f1e5:	55                   	push   ebp
c000f1e6:	e8 c3 fe ff ff       	call   c000f0ae <GDT::addEntry(GDTEntry)>
c000f1eb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1ee:	e8 e5 fe ff ff       	call   c000f0d8 <GDT::flush()>
c000f1f3:	83 c4 4c             	add    esp,0x4c
c000f1f6:	5b                   	pop    ebx
c000f1f7:	5e                   	pop    esi
c000f1f8:	5f                   	pop    edi
c000f1f9:	5d                   	pop    ebp
c000f1fa:	c3                   	ret    

c000f1fb <idleFunction(void*)>:
c000f1fb:	53                   	push   ebx
c000f1fc:	83 ec 08             	sub    esp,0x8
c000f1ff:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c000f204:	48                   	dec    eax
c000f205:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c000f20a:	75 01                	jne    c000f20d <idleFunction(void*)+0x12>
c000f20c:	fb                   	sti    
c000f20d:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c000f212:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f218:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f21f:	74 3c                	je     c000f25d <idleFunction(void*)+0x62>
c000f221:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f228:	74 33                	je     c000f25d <idleFunction(void*)+0x62>
c000f22a:	31 db                	xor    ebx,ebx
c000f22c:	52                   	push   edx
c000f22d:	52                   	push   edx
c000f22e:	68 e1 00 00 00       	push   0xe1
c000f233:	50                   	push   eax
c000f234:	e8 49 fb ff ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c000f239:	53                   	push   ebx
c000f23a:	83 e0 02             	and    eax,0x2
c000f23d:	50                   	push   eax
c000f23e:	68 e1 00 00 00       	push   0xe1
c000f243:	ff 35 08 e6 02 c0    	push   DWORD PTR ds:0xc002e608
c000f249:	e8 60 fb ff ff       	call   c000edae <Computer::wrmsr(unsigned int, unsigned long long)>
c000f24e:	83 c4 20             	add    esp,0x20
c000f251:	e8 29 10 ff ff       	call   c000027f <doTPAUSE>
c000f256:	e8 45 98 01 00       	call   c0028aa0 <idleCommon()>
c000f25b:	eb f4                	jmp    c000f251 <idleFunction(void*)+0x56>
c000f25d:	fb                   	sti    
c000f25e:	f4                   	hlt    
c000f25f:	e8 3c 98 01 00       	call   c0028aa0 <idleCommon()>
c000f264:	eb f7                	jmp    c000f25d <idleFunction(void*)+0x62>

c000f266 <IDTEntry::IDTEntry(bool)>:
c000f266:	83 ec 04             	sub    esp,0x4
c000f269:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f26d:	88 04 24             	mov    BYTE PTR [esp],al
c000f270:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f274:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f27a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f27e:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f282:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f286:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f289:	83 e2 f0             	and    edx,0xfffffff0
c000f28c:	83 ca 0e             	or     edx,0xe
c000f28f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f292:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f296:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f299:	83 e2 ef             	and    edx,0xffffffef
c000f29c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f29f:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f2a3:	74 04                	je     c000f2a9 <IDTEntry::IDTEntry(bool)+0x43>
c000f2a5:	b2 03                	mov    dl,0x3
c000f2a7:	eb 02                	jmp    c000f2ab <IDTEntry::IDTEntry(bool)+0x45>
c000f2a9:	b2 00                	mov    dl,0x0
c000f2ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2af:	83 e2 03             	and    edx,0x3
c000f2b2:	88 d1                	mov    cl,dl
c000f2b4:	c1 e1 05             	shl    ecx,0x5
c000f2b7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ba:	83 e2 9f             	and    edx,0xffffff9f
c000f2bd:	09 ca                	or     edx,ecx
c000f2bf:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c6:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2c9:	83 ca 80             	or     edx,0xffffff80
c000f2cc:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2cf:	90                   	nop
c000f2d0:	83 c4 04             	add    esp,0x4
c000f2d3:	c3                   	ret    

c000f2d4 <IDTEntry::setOffset(unsigned int)>:
c000f2d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2dc:	66 89 02             	mov    WORD PTR [edx],ax
c000f2df:	c1 e8 10             	shr    eax,0x10
c000f2e2:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2e6:	c3                   	ret    
c000f2e7:	90                   	nop

c000f2e8 <IDT::IDT()>:
c000f2e8:	90                   	nop
c000f2e9:	c3                   	ret    

c000f2ea <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2ee:	83 c0 30             	add    eax,0x30
c000f2f1:	c3                   	ret    

c000f2f2 <IDT::addEntry(IDTEntry, int)>:
c000f2f2:	53                   	push   ebx
c000f2f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2fb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f303:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f306:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f30a:	5b                   	pop    ebx
c000f30b:	c3                   	ret    

c000f30c <IDT::addEntry(int, void (*)(), bool)>:
c000f30c:	53                   	push   ebx
c000f30d:	83 ec 10             	sub    esp,0x10
c000f310:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f315:	50                   	push   eax
c000f316:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f31a:	53                   	push   ebx
c000f31b:	e8 46 ff ff ff       	call   c000f266 <IDTEntry::IDTEntry(bool)>
c000f320:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f324:	53                   	push   ebx
c000f325:	e8 aa ff ff ff       	call   c000f2d4 <IDTEntry::setOffset(unsigned int)>
c000f32a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f32e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f332:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f33a:	e8 b3 ff ff ff       	call   c000f2f2 <IDT::addEntry(IDTEntry, int)>
c000f33f:	83 c4 30             	add    esp,0x30
c000f342:	5b                   	pop    ebx
c000f343:	c3                   	ret    

c000f344 <IDT::flush()>:
c000f344:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f348:	66 c7 05 18 e6 02 c0 ff 07 	mov    WORD PTR ds:0xc002e618,0x7ff
c000f351:	a3 1a e6 02 c0       	mov    ds:0xc002e61a,eax
c000f356:	0f 01 1d 18 e6 02 c0 	lidtd  ds:0xc002e618
c000f35d:	c3                   	ret    

c000f35e <IDT::setup()>:
c000f35e:	57                   	push   edi
c000f35f:	56                   	push   esi
c000f360:	53                   	push   ebx
c000f361:	83 ec 10             	sub    esp,0x10
c000f364:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f368:	6a 00                	push   0x0
c000f36a:	68 70 04 00 c0       	push   0xc0000470
c000f36f:	6a 00                	push   0x0
c000f371:	53                   	push   ebx
c000f372:	e8 95 ff ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f377:	6a 00                	push   0x0
c000f379:	68 80 04 00 c0       	push   0xc0000480
c000f37e:	6a 01                	push   0x1
c000f380:	53                   	push   ebx
c000f381:	e8 86 ff ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f386:	83 c4 20             	add    esp,0x20
c000f389:	6a 00                	push   0x0
c000f38b:	68 8a 04 00 c0       	push   0xc000048a
c000f390:	6a 02                	push   0x2
c000f392:	53                   	push   ebx
c000f393:	e8 74 ff ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f398:	6a 00                	push   0x0
c000f39a:	68 94 04 00 c0       	push   0xc0000494
c000f39f:	6a 03                	push   0x3
c000f3a1:	53                   	push   ebx
c000f3a2:	e8 65 ff ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f3a7:	83 c4 20             	add    esp,0x20
c000f3aa:	6a 00                	push   0x0
c000f3ac:	68 9e 04 00 c0       	push   0xc000049e
c000f3b1:	6a 04                	push   0x4
c000f3b3:	53                   	push   ebx
c000f3b4:	e8 53 ff ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f3b9:	6a 00                	push   0x0
c000f3bb:	68 a8 04 00 c0       	push   0xc00004a8
c000f3c0:	6a 05                	push   0x5
c000f3c2:	53                   	push   ebx
c000f3c3:	e8 44 ff ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f3c8:	83 c4 20             	add    esp,0x20
c000f3cb:	6a 00                	push   0x0
c000f3cd:	68 b2 04 00 c0       	push   0xc00004b2
c000f3d2:	6a 06                	push   0x6
c000f3d4:	53                   	push   ebx
c000f3d5:	e8 32 ff ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f3da:	6a 00                	push   0x0
c000f3dc:	68 bc 04 00 c0       	push   0xc00004bc
c000f3e1:	6a 07                	push   0x7
c000f3e3:	53                   	push   ebx
c000f3e4:	e8 23 ff ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f3e9:	83 c4 20             	add    esp,0x20
c000f3ec:	6a 00                	push   0x0
c000f3ee:	68 c6 04 00 c0       	push   0xc00004c6
c000f3f3:	6a 08                	push   0x8
c000f3f5:	53                   	push   ebx
c000f3f6:	e8 11 ff ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f3fb:	6a 00                	push   0x0
c000f3fd:	68 ce 04 00 c0       	push   0xc00004ce
c000f402:	6a 09                	push   0x9
c000f404:	53                   	push   ebx
c000f405:	e8 02 ff ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f40a:	83 c4 20             	add    esp,0x20
c000f40d:	6a 00                	push   0x0
c000f40f:	68 d8 04 00 c0       	push   0xc00004d8
c000f414:	6a 0a                	push   0xa
c000f416:	53                   	push   ebx
c000f417:	e8 f0 fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f41c:	6a 00                	push   0x0
c000f41e:	68 e0 04 00 c0       	push   0xc00004e0
c000f423:	6a 0b                	push   0xb
c000f425:	53                   	push   ebx
c000f426:	e8 e1 fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f42b:	83 c4 20             	add    esp,0x20
c000f42e:	6a 00                	push   0x0
c000f430:	68 e8 04 00 c0       	push   0xc00004e8
c000f435:	6a 0c                	push   0xc
c000f437:	53                   	push   ebx
c000f438:	e8 cf fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f43d:	6a 00                	push   0x0
c000f43f:	68 f0 04 00 c0       	push   0xc00004f0
c000f444:	6a 0d                	push   0xd
c000f446:	53                   	push   ebx
c000f447:	e8 c0 fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f44c:	83 c4 20             	add    esp,0x20
c000f44f:	6a 00                	push   0x0
c000f451:	68 f8 04 00 c0       	push   0xc00004f8
c000f456:	6a 0e                	push   0xe
c000f458:	53                   	push   ebx
c000f459:	e8 ae fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f45e:	6a 00                	push   0x0
c000f460:	68 00 05 00 c0       	push   0xc0000500
c000f465:	6a 0f                	push   0xf
c000f467:	53                   	push   ebx
c000f468:	e8 9f fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f46d:	83 c4 20             	add    esp,0x20
c000f470:	6a 00                	push   0x0
c000f472:	68 0a 05 00 c0       	push   0xc000050a
c000f477:	6a 10                	push   0x10
c000f479:	53                   	push   ebx
c000f47a:	e8 8d fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f47f:	6a 00                	push   0x0
c000f481:	68 14 05 00 c0       	push   0xc0000514
c000f486:	6a 11                	push   0x11
c000f488:	53                   	push   ebx
c000f489:	e8 7e fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f48e:	83 c4 20             	add    esp,0x20
c000f491:	6a 00                	push   0x0
c000f493:	68 1e 05 00 c0       	push   0xc000051e
c000f498:	6a 12                	push   0x12
c000f49a:	53                   	push   ebx
c000f49b:	e8 6c fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f4a0:	6a 01                	push   0x1
c000f4a2:	68 b8 05 00 c0       	push   0xc00005b8
c000f4a7:	6a 60                	push   0x60
c000f4a9:	53                   	push   ebx
c000f4aa:	e8 5d fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f4af:	83 c4 20             	add    esp,0x20
c000f4b2:	6a 00                	push   0x0
c000f4b4:	68 bf 05 00 c0       	push   0xc00005bf
c000f4b9:	6a 20                	push   0x20
c000f4bb:	53                   	push   ebx
c000f4bc:	e8 4b fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f4c1:	6a 00                	push   0x0
c000f4c3:	68 aa 05 00 c0       	push   0xc00005aa
c000f4c8:	6a 21                	push   0x21
c000f4ca:	53                   	push   ebx
c000f4cb:	e8 3c fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f4d0:	83 c4 20             	add    esp,0x20
c000f4d3:	6a 00                	push   0x0
c000f4d5:	68 b1 05 00 c0       	push   0xc00005b1
c000f4da:	6a 22                	push   0x22
c000f4dc:	53                   	push   ebx
c000f4dd:	e8 2a fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f4e2:	6a 00                	push   0x0
c000f4e4:	68 28 05 00 c0       	push   0xc0000528
c000f4e9:	6a 23                	push   0x23
c000f4eb:	53                   	push   ebx
c000f4ec:	e8 1b fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f4f1:	83 c4 20             	add    esp,0x20
c000f4f4:	6a 00                	push   0x0
c000f4f6:	68 32 05 00 c0       	push   0xc0000532
c000f4fb:	6a 24                	push   0x24
c000f4fd:	53                   	push   ebx
c000f4fe:	e8 09 fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f503:	6a 00                	push   0x0
c000f505:	68 3c 05 00 c0       	push   0xc000053c
c000f50a:	6a 25                	push   0x25
c000f50c:	53                   	push   ebx
c000f50d:	e8 fa fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f512:	83 c4 20             	add    esp,0x20
c000f515:	6a 00                	push   0x0
c000f517:	68 46 05 00 c0       	push   0xc0000546
c000f51c:	6a 26                	push   0x26
c000f51e:	53                   	push   ebx
c000f51f:	e8 e8 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f524:	6a 00                	push   0x0
c000f526:	68 50 05 00 c0       	push   0xc0000550
c000f52b:	6a 27                	push   0x27
c000f52d:	53                   	push   ebx
c000f52e:	e8 d9 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f533:	83 c4 20             	add    esp,0x20
c000f536:	6a 00                	push   0x0
c000f538:	68 5a 05 00 c0       	push   0xc000055a
c000f53d:	6a 28                	push   0x28
c000f53f:	53                   	push   ebx
c000f540:	e8 c7 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f545:	6a 00                	push   0x0
c000f547:	68 64 05 00 c0       	push   0xc0000564
c000f54c:	6a 29                	push   0x29
c000f54e:	53                   	push   ebx
c000f54f:	e8 b8 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f554:	83 c4 20             	add    esp,0x20
c000f557:	6a 00                	push   0x0
c000f559:	68 6e 05 00 c0       	push   0xc000056e
c000f55e:	6a 2a                	push   0x2a
c000f560:	53                   	push   ebx
c000f561:	e8 a6 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f566:	6a 00                	push   0x0
c000f568:	68 78 05 00 c0       	push   0xc0000578
c000f56d:	6a 2b                	push   0x2b
c000f56f:	53                   	push   ebx
c000f570:	e8 97 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f575:	83 c4 20             	add    esp,0x20
c000f578:	6a 00                	push   0x0
c000f57a:	68 82 05 00 c0       	push   0xc0000582
c000f57f:	6a 2c                	push   0x2c
c000f581:	53                   	push   ebx
c000f582:	e8 85 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f587:	6a 00                	push   0x0
c000f589:	68 8c 05 00 c0       	push   0xc000058c
c000f58e:	6a 2d                	push   0x2d
c000f590:	53                   	push   ebx
c000f591:	e8 76 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f596:	83 c4 20             	add    esp,0x20
c000f599:	6a 00                	push   0x0
c000f59b:	68 96 05 00 c0       	push   0xc0000596
c000f5a0:	6a 2e                	push   0x2e
c000f5a2:	53                   	push   ebx
c000f5a3:	e8 64 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f5a8:	6a 00                	push   0x0
c000f5aa:	68 a0 05 00 c0       	push   0xc00005a0
c000f5af:	6a 2f                	push   0x2f
c000f5b1:	53                   	push   ebx
c000f5b2:	e8 55 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f5b7:	83 c4 20             	add    esp,0x20
c000f5ba:	6a 00                	push   0x0
c000f5bc:	68 f6 05 00 c0       	push   0xc00005f6
c000f5c1:	6a 30                	push   0x30
c000f5c3:	53                   	push   ebx
c000f5c4:	e8 43 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f5c9:	6a 00                	push   0x0
c000f5cb:	68 00 06 00 c0       	push   0xc0000600
c000f5d0:	6a 31                	push   0x31
c000f5d2:	53                   	push   ebx
c000f5d3:	e8 34 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f5d8:	83 c4 20             	add    esp,0x20
c000f5db:	6a 00                	push   0x0
c000f5dd:	68 0a 06 00 c0       	push   0xc000060a
c000f5e2:	6a 32                	push   0x32
c000f5e4:	53                   	push   ebx
c000f5e5:	e8 22 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f5ea:	6a 00                	push   0x0
c000f5ec:	68 14 06 00 c0       	push   0xc0000614
c000f5f1:	6a 33                	push   0x33
c000f5f3:	53                   	push   ebx
c000f5f4:	e8 13 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f5f9:	83 c4 20             	add    esp,0x20
c000f5fc:	6a 00                	push   0x0
c000f5fe:	68 1e 06 00 c0       	push   0xc000061e
c000f603:	6a 34                	push   0x34
c000f605:	53                   	push   ebx
c000f606:	e8 01 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f60b:	6a 00                	push   0x0
c000f60d:	68 28 06 00 c0       	push   0xc0000628
c000f612:	6a 35                	push   0x35
c000f614:	53                   	push   ebx
c000f615:	e8 f2 fc ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f61a:	83 c4 20             	add    esp,0x20
c000f61d:	6a 00                	push   0x0
c000f61f:	68 32 06 00 c0       	push   0xc0000632
c000f624:	6a 36                	push   0x36
c000f626:	53                   	push   ebx
c000f627:	e8 e0 fc ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f62c:	6a 00                	push   0x0
c000f62e:	68 3c 06 00 c0       	push   0xc000063c
c000f633:	6a 37                	push   0x37
c000f635:	53                   	push   ebx
c000f636:	e8 d1 fc ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f63b:	83 c4 1c             	add    esp,0x1c
c000f63e:	6a 03                	push   0x3
c000f640:	6a 02                	push   0x2
c000f642:	ff 35 70 e7 02 c0    	push   DWORD PTR ds:0xc002e770
c000f648:	e8 4b 27 00 00       	call   c0011d98 <VAS::allocatePages(int, int)>
c000f64d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f654:	89 c6                	mov    esi,eax
c000f656:	e8 0e 03 00 00       	call   c000f969 <malloc>
c000f65b:	81 c6 00 20 00 00    	add    esi,0x2000
c000f661:	89 04 24             	mov    DWORD PTR [esp],eax
c000f664:	89 c7                	mov    edi,eax
c000f666:	e8 cb 18 00 00       	call   c0010f36 <TSS::TSS()>
c000f66b:	83 c4 0c             	add    esp,0xc
c000f66e:	68 c6 04 00 c0       	push   0xc00004c6
c000f673:	56                   	push   esi
c000f674:	57                   	push   edi
c000f675:	e8 fc 18 00 00       	call   c0010f76 <TSS::setup(unsigned long, unsigned long)>
c000f67a:	89 c6                	mov    esi,eax
c000f67c:	58                   	pop    eax
c000f67d:	5a                   	pop    edx
c000f67e:	6a 00                	push   0x0
c000f680:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f684:	50                   	push   eax
c000f685:	e8 dc fb ff ff       	call   c000f266 <IDTEntry::IDTEntry(bool)>
c000f68a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f68e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f693:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f69a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f6a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6a4:	80 ce 05             	or     dh,0x5
c000f6a7:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f6aa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f6ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6b2:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f6b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6b8:	e8 87 fc ff ff       	call   c000f344 <IDT::flush()>
c000f6bd:	83 c4 20             	add    esp,0x20
c000f6c0:	5b                   	pop    ebx
c000f6c1:	5e                   	pop    esi
c000f6c2:	5f                   	pop    edi
c000f6c3:	c3                   	ret    

c000f6c4 <sbrk>:
c000f6c4:	55                   	push   ebp
c000f6c5:	57                   	push   edi
c000f6c6:	56                   	push   esi
c000f6c7:	53                   	push   ebx
c000f6c8:	83 ec 24             	sub    esp,0x24
c000f6cb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000f6cf:	53                   	push   ebx
c000f6d0:	68 10 a7 02 c0       	push   0xc002a710
c000f6d5:	e8 e7 32 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000f6da:	83 c4 10             	add    esp,0x10
c000f6dd:	85 db                	test   ebx,ebx
c000f6df:	74 6b                	je     c000f74c <sbrk+0x88>
c000f6e1:	78 73                	js     c000f756 <sbrk+0x92>
c000f6e3:	83 ec 0c             	sub    esp,0xc
c000f6e6:	68 2e a7 02 c0       	push   0xc002a72e
c000f6eb:	e8 d1 32 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000f6f0:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c000f6f5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f6fb:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000f701:	83 e0 01             	and    eax,0x1
c000f704:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000f708:	c7 04 24 34 a7 02 c0 	mov    DWORD PTR [esp],0xc002a734
c000f70f:	e8 ad 32 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000f714:	a1 c8 d3 02 c0       	mov    eax,ds:0xc002d3c8
c000f719:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f71d:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000f723:	89 d8                	mov    eax,ebx
c000f725:	83 c4 10             	add    esp,0x10
c000f728:	85 db                	test   ebx,ebx
c000f72a:	78 45                	js     c000f771 <sbrk+0xad>
c000f72c:	c1 f8 0c             	sar    eax,0xc
c000f72f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f733:	89 c7                	mov    edi,eax
c000f735:	83 ec 0c             	sub    esp,0xc
c000f738:	68 3a a7 02 c0       	push   0xc002a73a
c000f73d:	e8 7f 32 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000f742:	83 c4 10             	add    esp,0x10
c000f745:	be 00 00 00 00       	mov    esi,0x0
c000f74a:	eb 65                	jmp    c000f7b1 <sbrk+0xed>
c000f74c:	a1 c8 d3 02 c0       	mov    eax,ds:0xc002d3c8
c000f751:	e9 ec 00 00 00       	jmp    c000f842 <sbrk+0x17e>
c000f756:	83 ec 08             	sub    esp,0x8
c000f759:	53                   	push   ebx
c000f75a:	68 94 a7 02 c0       	push   0xc002a794
c000f75f:	e8 5d 32 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000f764:	83 c4 10             	add    esp,0x10
c000f767:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f76c:	e9 d1 00 00 00       	jmp    c000f842 <sbrk+0x17e>
c000f771:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000f777:	eb b3                	jmp    c000f72c <sbrk+0x68>
c000f779:	83 ec 0c             	sub    esp,0xc
c000f77c:	68 4c a7 02 c0       	push   0xc002a74c
c000f781:	e8 3b 32 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000f786:	8b 1d c8 d3 02 c0    	mov    ebx,DWORD PTR ds:0xc002d3c8
c000f78c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f78f:	83 c4 10             	add    esp,0x10
c000f792:	83 ec 0c             	sub    esp,0xc
c000f795:	68 52 a7 02 c0       	push   0xc002a752
c000f79a:	e8 22 32 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000f79f:	81 05 c8 d3 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d3c8,0x1000
c000f7a9:	46                   	inc    esi
c000f7aa:	83 c4 10             	add    esp,0x10
c000f7ad:	39 f7                	cmp    edi,esi
c000f7af:	74 44                	je     c000f7f5 <sbrk+0x131>
c000f7b1:	83 ec 0c             	sub    esp,0xc
c000f7b4:	68 40 a7 02 c0       	push   0xc002a740
c000f7b9:	e8 03 32 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000f7be:	8b 1d 70 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e770
c000f7c4:	8b 2d c8 d3 02 c0    	mov    ebp,DWORD PTR ds:0xc002d3c8
c000f7ca:	e8 96 05 00 00       	call   c000fd65 <Phys::allocatePage()>
c000f7cf:	68 01 04 00 00       	push   0x401
c000f7d4:	55                   	push   ebp
c000f7d5:	50                   	push   eax
c000f7d6:	53                   	push   ebx
c000f7d7:	e8 ba 24 00 00       	call   c0011c96 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f7dc:	83 c4 14             	add    esp,0x14
c000f7df:	68 46 a7 02 c0       	push   0xc002a746
c000f7e4:	e8 d8 31 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000f7e9:	83 c4 10             	add    esp,0x10
c000f7ec:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7f1:	74 9f                	je     c000f792 <sbrk+0xce>
c000f7f3:	eb 84                	jmp    c000f779 <sbrk+0xb5>
c000f7f5:	83 ec 0c             	sub    esp,0xc
c000f7f8:	68 58 a7 02 c0       	push   0xc002a758
c000f7fd:	e8 bf 31 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000f802:	83 c4 10             	add    esp,0x10
c000f805:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f80a:	75 3e                	jne    c000f84a <sbrk+0x186>
c000f80c:	83 ec 0c             	sub    esp,0xc
c000f80f:	68 f4 bc 02 c0       	push   0xc002bcf4
c000f814:	e8 a8 31 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000f819:	0f 20 d8             	mov    eax,cr3
c000f81c:	0f 22 d8             	mov    cr3,eax
c000f81f:	c7 04 24 5e a7 02 c0 	mov    DWORD PTR [esp],0xc002a75e
c000f826:	e8 96 31 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000f82b:	83 c4 10             	add    esp,0x10
c000f82e:	83 ec 0c             	sub    esp,0xc
c000f831:	68 82 a7 02 c0       	push   0xc002a782
c000f836:	e8 86 31 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000f83b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f83f:	83 c4 10             	add    esp,0x10
c000f842:	83 c4 1c             	add    esp,0x1c
c000f845:	5b                   	pop    ebx
c000f846:	5e                   	pop    esi
c000f847:	5f                   	pop    edi
c000f848:	5d                   	pop    ebp
c000f849:	c3                   	ret    
c000f84a:	83 ec 0c             	sub    esp,0xc
c000f84d:	68 64 a7 02 c0       	push   0xc002a764
c000f852:	e8 6a 31 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000f857:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f85b:	89 c3                	mov    ebx,eax
c000f85d:	c1 eb 0a             	shr    ebx,0xa
c000f860:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f866:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f86c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f870:	c1 e6 0c             	shl    esi,0xc
c000f873:	01 c6                	add    esi,eax
c000f875:	c1 ee 0a             	shr    esi,0xa
c000f878:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000f87e:	81 ee 00 00 40 00    	sub    esi,0x400000
c000f884:	c7 04 24 6a a7 02 c0 	mov    DWORD PTR [esp],0xc002a76a
c000f88b:	e8 31 31 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000f890:	83 c4 10             	add    esp,0x10
c000f893:	39 f3                	cmp    ebx,esi
c000f895:	77 29                	ja     c000f8c0 <sbrk+0x1fc>
c000f897:	83 ec 0c             	sub    esp,0xc
c000f89a:	68 70 a7 02 c0       	push   0xc002a770
c000f89f:	e8 1d 31 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000f8a4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f8a7:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f8ad:	c7 04 24 76 a7 02 c0 	mov    DWORD PTR [esp],0xc002a776
c000f8b4:	e8 08 31 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000f8b9:	83 c4 10             	add    esp,0x10
c000f8bc:	39 de                	cmp    esi,ebx
c000f8be:	73 d7                	jae    c000f897 <sbrk+0x1d3>
c000f8c0:	83 ec 0c             	sub    esp,0xc
c000f8c3:	68 7c a7 02 c0       	push   0xc002a77c
c000f8c8:	e8 f4 30 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000f8cd:	83 c4 10             	add    esp,0x10
c000f8d0:	e9 59 ff ff ff       	jmp    c000f82e <sbrk+0x16a>

c000f8d5 <mmap>:
c000f8d5:	83 ec 18             	sub    esp,0x18
c000f8d8:	68 88 a7 02 c0       	push   0xc002a788
c000f8dd:	e8 7d aa 00 00       	call   c001a35f <Krnl::panic(char const*)>
c000f8e2:	b8 00 00 00 00       	mov    eax,0x0
c000f8e7:	83 c4 1c             	add    esp,0x1c
c000f8ea:	c3                   	ret    

c000f8eb <munmap>:
c000f8eb:	83 ec 18             	sub    esp,0x18
c000f8ee:	68 8d a7 02 c0       	push   0xc002a78d
c000f8f3:	e8 67 aa 00 00       	call   c001a35f <Krnl::panic(char const*)>
c000f8f8:	b8 00 00 00 00       	mov    eax,0x0
c000f8fd:	83 c4 1c             	add    esp,0x1c
c000f900:	c3                   	ret    

c000f901 <liballoc_lock()>:
c000f901:	fa                   	cli    
c000f902:	ff 05 08 fb 02 c0    	inc    DWORD PTR ds:0xc002fb08
c000f908:	b8 00 00 00 00       	mov    eax,0x0
c000f90d:	c3                   	ret    

c000f90e <liballoc_unlock()>:
c000f90e:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c000f913:	48                   	dec    eax
c000f914:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c000f919:	75 01                	jne    c000f91c <liballoc_unlock()+0xe>
c000f91b:	fb                   	sti    
c000f91c:	b8 00 00 00 00       	mov    eax,0x0
c000f921:	c3                   	ret    

c000f922 <liballoc_alloc(int)>:
c000f922:	83 ec 10             	sub    esp,0x10
c000f925:	6a 01                	push   0x1
c000f927:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f92b:	ff 35 70 e7 02 c0    	push   DWORD PTR ds:0xc002e770
c000f931:	e8 62 24 00 00       	call   c0011d98 <VAS::allocatePages(int, int)>
c000f936:	83 c4 1c             	add    esp,0x1c
c000f939:	c3                   	ret    

c000f93a <liballoc_free(void*, int)>:
c000f93a:	83 ec 14             	sub    esp,0x14
c000f93d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f941:	ff 35 70 e7 02 c0    	push   DWORD PTR ds:0xc002e770
c000f947:	e8 f6 20 00 00       	call   c0011a42 <VAS::freeAllocatedPages(unsigned long)>
c000f94c:	b8 00 00 00 00       	mov    eax,0x0
c000f951:	83 c4 1c             	add    esp,0x1c
c000f954:	c3                   	ret    

c000f955 <realloc>:
c000f955:	83 ec 14             	sub    esp,0x14
c000f958:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f95c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f960:	e8 c7 1c ff ff       	call   c000162c <dlrealloc>
c000f965:	83 c4 1c             	add    esp,0x1c
c000f968:	c3                   	ret    

c000f969 <malloc>:
c000f969:	83 ec 18             	sub    esp,0x18
c000f96c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f970:	e8 7a 17 ff ff       	call   c00010ef <dlmalloc>
c000f975:	83 c4 1c             	add    esp,0x1c
c000f978:	c3                   	ret    

c000f979 <free>:
c000f979:	83 ec 18             	sub    esp,0x18
c000f97c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f980:	e8 0f 14 ff ff       	call   c0000d94 <dlfree>
c000f985:	83 c4 1c             	add    esp,0x1c
c000f988:	c3                   	ret    

c000f989 <rfree>:
c000f989:	83 ec 18             	sub    esp,0x18
c000f98c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f990:	e8 ff 13 ff ff       	call   c0000d94 <dlfree>
c000f995:	83 c4 1c             	add    esp,0x1c
c000f998:	c3                   	ret    

c000f999 <calloc>:
c000f999:	56                   	push   esi
c000f99a:	53                   	push   ebx
c000f99b:	83 ec 10             	sub    esp,0x10
c000f99e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f9a2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f9a7:	53                   	push   ebx
c000f9a8:	e8 bc ff ff ff       	call   c000f969 <malloc>
c000f9ad:	89 c6                	mov    esi,eax
c000f9af:	83 c4 0c             	add    esp,0xc
c000f9b2:	53                   	push   ebx
c000f9b3:	6a 00                	push   0x0
c000f9b5:	50                   	push   eax
c000f9b6:	e8 95 0d ff ff       	call   c0000750 <memset>
c000f9bb:	89 f0                	mov    eax,esi
c000f9bd:	83 c4 14             	add    esp,0x14
c000f9c0:	5b                   	pop    ebx
c000f9c1:	5e                   	pop    esi
c000f9c2:	c3                   	ret    

c000f9c3 <Krnl::setBootMessage(char const*)>:
c000f9c3:	57                   	push   edi
c000f9c4:	56                   	push   esi
c000f9c5:	53                   	push   ebx
c000f9c6:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f9cc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f9d3:	68 9e 00 00 00       	push   0x9e
c000f9d8:	6a 00                	push   0x0
c000f9da:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f9de:	56                   	push   esi
c000f9df:	e8 6c 0d ff ff       	call   c0000750 <memset>
c000f9e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f9e7:	e8 80 0d ff ff       	call   c000076c <strlen>
c000f9ec:	ba 50 00 00 00       	mov    edx,0x50
c000f9f1:	83 c4 10             	add    esp,0x10
c000f9f4:	29 c2                	sub    edx,eax
c000f9f6:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f9fa:	d1 ea                	shr    edx,1
c000f9fc:	84 c0                	test   al,al
c000f9fe:	74 19                	je     c000fa19 <Krnl::setBootMessage(char const*)+0x56>
c000fa00:	01 d2                	add    edx,edx
c000fa02:	43                   	inc    ebx
c000fa03:	01 f2                	add    edx,esi
c000fa05:	80 cc 0f             	or     ah,0xf
c000fa08:	83 c2 02             	add    edx,0x2
c000fa0b:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000fa0f:	43                   	inc    ebx
c000fa10:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000fa15:	84 c0                	test   al,al
c000fa17:	75 ec                	jne    c000fa05 <Krnl::setBootMessage(char const*)+0x42>
c000fa19:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fa1e:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fa23:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa25:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fa2b:	5b                   	pop    ebx
c000fa2c:	5e                   	pop    esi
c000fa2d:	5f                   	pop    edi
c000fa2e:	c3                   	ret    

c000fa2f <kernel_main>:
c000fa2f:	57                   	push   edi
c000fa30:	bf f9 03 00 00       	mov    edi,0x3f9
c000fa35:	56                   	push   esi
c000fa36:	89 fa                	mov    edx,edi
c000fa38:	53                   	push   ebx
c000fa39:	31 f6                	xor    esi,esi
c000fa3b:	83 ec 2c             	sub    esp,0x2c
c000fa3e:	89 f0                	mov    eax,esi
c000fa40:	ee                   	out    dx,al
c000fa41:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fa46:	b0 80                	mov    al,0x80
c000fa48:	89 da                	mov    edx,ebx
c000fa4a:	ee                   	out    dx,al
c000fa4b:	b1 03                	mov    cl,0x3
c000fa4d:	ba f8 03 00 00       	mov    edx,0x3f8
c000fa52:	88 c8                	mov    al,cl
c000fa54:	ee                   	out    dx,al
c000fa55:	89 f0                	mov    eax,esi
c000fa57:	89 fa                	mov    edx,edi
c000fa59:	ee                   	out    dx,al
c000fa5a:	88 c8                	mov    al,cl
c000fa5c:	89 da                	mov    edx,ebx
c000fa5e:	ee                   	out    dx,al
c000fa5f:	b0 c7                	mov    al,0xc7
c000fa61:	ba fa 03 00 00       	mov    edx,0x3fa
c000fa66:	ee                   	out    dx,al
c000fa67:	b0 0b                	mov    al,0xb
c000fa69:	ba fc 03 00 00       	mov    edx,0x3fc
c000fa6e:	ee                   	out    dx,al
c000fa6f:	68 c4 a7 02 c0       	push   0xc002a7c4
c000fa74:	e8 48 2f 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000fa79:	e8 b8 09 00 00       	call   c0010436 <installVgaTextImplementation()>
c000fa7e:	0f b6 05 e0 d3 02 c0 	movzx  eax,BYTE PTR ds:0xc002d3e0
c000fa85:	83 c4 10             	add    esp,0x10
c000fa88:	84 c0                	test   al,al
c000fa8a:	74 6c                	je     c000faf8 <kernel_main+0xc9>
c000fa8c:	31 db                	xor    ebx,ebx
c000fa8e:	bf 0a 00 00 00       	mov    edi,0xa
c000fa93:	be 05 00 00 00       	mov    esi,0x5
c000fa98:	31 c9                	xor    ecx,ecx
c000fa9a:	eb 2a                	jmp    c000fac6 <kernel_main+0x97>
c000fa9c:	3c 0d                	cmp    al,0xd
c000fa9e:	74 1a                	je     c000faba <kernel_main+0x8b>
c000faa0:	3c 0a                	cmp    al,0xa
c000faa2:	74 40                	je     c000fae4 <kernel_main+0xb5>
c000faa4:	8d 14 b6             	lea    edx,[esi+esi*4]
c000faa7:	80 cc 0e             	or     ah,0xe
c000faaa:	c1 e2 04             	shl    edx,0x4
c000faad:	01 ca                	add    edx,ecx
c000faaf:	41                   	inc    ecx
c000fab0:	01 fa                	add    edx,edi
c000fab2:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000faba:	43                   	inc    ebx
c000fabb:	0f b6 83 e0 d3 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd2c20]
c000fac2:	84 c0                	test   al,al
c000fac4:	74 32                	je     c000faf8 <kernel_main+0xc9>
c000fac6:	80 b9 16 d4 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd2bea],0xdb
c000facd:	75 cd                	jne    c000fa9c <kernel_main+0x6d>
c000facf:	0f b6 91 15 d4 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd2beb]
c000fad6:	83 e2 fe             	and    edx,0xfffffffe
c000fad9:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fadf:	75 bb                	jne    c000fa9c <kernel_main+0x6d>
c000fae1:	47                   	inc    edi
c000fae2:	eb b8                	jmp    c000fa9c <kernel_main+0x6d>
c000fae4:	43                   	inc    ebx
c000fae5:	46                   	inc    esi
c000fae6:	31 c9                	xor    ecx,ecx
c000fae8:	0f b6 83 e0 d3 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd2c20]
c000faef:	bf 0a 00 00 00       	mov    edi,0xa
c000faf4:	84 c0                	test   al,al
c000faf6:	75 ce                	jne    c000fac6 <kernel_main+0x97>
c000faf8:	83 ec 0c             	sub    esp,0xc
c000fafb:	68 dc a7 02 c0       	push   0xc002a7dc
c000fb00:	e8 be fe ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c000fb05:	a1 00 05 00 00       	mov    eax,ds:0x500
c000fb0a:	a3 20 e6 02 c0       	mov    ds:0xc002e620,eax
c000fb0f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fb14:	05 ff 0f 00 00       	add    eax,0xfff
c000fb19:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fb1e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb21:	e8 cb 03 00 00       	call   c000fef1 <Phys::physicalMemorySetup(unsigned int)>
c000fb26:	e8 83 1c 00 00       	call   c00117ae <Virt::virtualMemorySetup()>
c000fb2b:	58                   	pop    eax
c000fb2c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fb30:	53                   	push   ebx
c000fb31:	e8 34 1d 00 00       	call   c001186a <VAS::VAS()>
c000fb36:	89 1d 70 e7 02 c0    	mov    DWORD PTR ds:0xc002e770,ebx
c000fb3c:	e8 df 04 ff ff       	call   c0000020 <callGlobalConstructors>
c000fb41:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fb48:	e8 1c fe ff ff       	call   c000f969 <malloc>
c000fb4d:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb50:	89 c6                	mov    esi,eax
c000fb52:	e8 c1 ee ff ff       	call   c000ea18 <Computer::Computer()>
c000fb57:	6a 00                	push   0x0
c000fb59:	89 35 08 e6 02 c0    	mov    DWORD PTR ds:0xc002e608,esi
c000fb5f:	6a 00                	push   0x0
c000fb61:	6a 00                	push   0x0
c000fb63:	56                   	push   esi
c000fb64:	e8 bb f2 ff ff       	call   c000ee24 <Computer::open(int, int, void*)>
c000fb69:	83 c4 14             	add    esp,0x14
c000fb6c:	53                   	push   ebx
c000fb6d:	e8 a8 1f 00 00       	call   c0011b1a <VAS::~VAS()>
c000fb72:	83 c4 30             	add    esp,0x30
c000fb75:	5b                   	pop    ebx
c000fb76:	5e                   	pop    esi
c000fb77:	5f                   	pop    edi
c000fb78:	c3                   	ret    

c000fb79 <Phys::allocateDMA(unsigned long)>:
c000fb79:	55                   	push   ebp
c000fb7a:	31 ed                	xor    ebp,ebp
c000fb7c:	57                   	push   edi
c000fb7d:	56                   	push   esi
c000fb7e:	53                   	push   ebx
c000fb7f:	31 db                	xor    ebx,ebx
c000fb81:	83 ec 18             	sub    esp,0x18
c000fb84:	68 fb a7 02 c0       	push   0xc002a7fb
c000fb89:	e8 33 2e 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000fb8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fb92:	31 d2                	xor    edx,edx
c000fb94:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fb9a:	83 c4 10             	add    esp,0x10
c000fb9d:	c1 ee 0c             	shr    esi,0xc
c000fba0:	31 c9                	xor    ecx,ecx
c000fba2:	eb 17                	jmp    c000fbbb <Phys::allocateDMA(unsigned long)+0x42>
c000fba4:	85 c9                	test   ecx,ecx
c000fba6:	75 04                	jne    c000fbac <Phys::allocateDMA(unsigned long)+0x33>
c000fba8:	89 d5                	mov    ebp,edx
c000fbaa:	89 d3                	mov    ebx,edx
c000fbac:	8d 41 01             	lea    eax,[ecx+0x1]
c000fbaf:	39 c6                	cmp    esi,eax
c000fbb1:	74 23                	je     c000fbd6 <Phys::allocateDMA(unsigned long)+0x5d>
c000fbb3:	42                   	inc    edx
c000fbb4:	89 c1                	mov    ecx,eax
c000fbb6:	83 fa 2f             	cmp    edx,0x2f
c000fbb9:	7f 11                	jg     c000fbcc <Phys::allocateDMA(unsigned long)+0x53>
c000fbbb:	80 ba 60 e6 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd19a0],0x0
c000fbc2:	74 e0                	je     c000fba4 <Phys::allocateDMA(unsigned long)+0x2b>
c000fbc4:	31 c9                	xor    ecx,ecx
c000fbc6:	42                   	inc    edx
c000fbc7:	83 fa 2f             	cmp    edx,0x2f
c000fbca:	7e ef                	jle    c000fbbb <Phys::allocateDMA(unsigned long)+0x42>
c000fbcc:	83 c4 0c             	add    esp,0xc
c000fbcf:	31 c0                	xor    eax,eax
c000fbd1:	5b                   	pop    ebx
c000fbd2:	5e                   	pop    esi
c000fbd3:	5f                   	pop    edi
c000fbd4:	5d                   	pop    ebp
c000fbd5:	c3                   	ret    
c000fbd6:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fbd9:	89 d7                	mov    edi,edx
c000fbdb:	4f                   	dec    edi
c000fbdc:	79 03                	jns    c000fbe1 <Phys::allocateDMA(unsigned long)+0x68>
c000fbde:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fbe1:	c1 ff 04             	sar    edi,0x4
c000fbe4:	89 da                	mov    edx,ebx
c000fbe6:	c1 fa 04             	sar    edx,0x4
c000fbe9:	39 fa                	cmp    edx,edi
c000fbeb:	75 43                	jne    c000fc30 <Phys::allocateDMA(unsigned long)+0xb7>
c000fbed:	85 c0                	test   eax,eax
c000fbef:	74 1a                	je     c000fc0b <Phys::allocateDMA(unsigned long)+0x92>
c000fbf1:	be 60 e6 02 c0       	mov    esi,0xc002e660
c000fbf6:	8d 93 60 e6 02 c0    	lea    edx,[ebx-0x3ffd19a0]
c000fbfc:	f7 d6                	not    esi
c000fbfe:	29 de                	sub    esi,ebx
c000fc00:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fc03:	42                   	inc    edx
c000fc04:	8d 04 16             	lea    eax,[esi+edx*1]
c000fc07:	39 c1                	cmp    ecx,eax
c000fc09:	7f f5                	jg     c000fc00 <Phys::allocateDMA(unsigned long)+0x87>
c000fc0b:	83 ec 0c             	sub    esp,0xc
c000fc0e:	68 14 a8 02 c0       	push   0xc002a814
c000fc13:	e8 a9 2d 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000fc18:	83 c4 10             	add    esp,0x10
c000fc1b:	85 ff                	test   edi,edi
c000fc1d:	74 17                	je     c000fc36 <Phys::allocateDMA(unsigned long)+0xbd>
c000fc1f:	83 c4 0c             	add    esp,0xc
c000fc22:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c000fc28:	5b                   	pop    ebx
c000fc29:	c1 e0 0c             	shl    eax,0xc
c000fc2c:	5e                   	pop    esi
c000fc2d:	5f                   	pop    edi
c000fc2e:	5d                   	pop    ebp
c000fc2f:	c3                   	ret    
c000fc30:	89 ea                	mov    edx,ebp
c000fc32:	31 c9                	xor    ecx,ecx
c000fc34:	eb 90                	jmp    c000fbc6 <Phys::allocateDMA(unsigned long)+0x4d>
c000fc36:	83 c4 0c             	add    esp,0xc
c000fc39:	c1 e3 0c             	shl    ebx,0xc
c000fc3c:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c000fc42:	5b                   	pop    ebx
c000fc43:	5e                   	pop    esi
c000fc44:	5f                   	pop    edi
c000fc45:	5d                   	pop    ebp
c000fc46:	c3                   	ret    

c000fc47 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fc47:	83 ec 18             	sub    esp,0x18
c000fc4a:	68 2b a8 02 c0       	push   0xc002a82b
c000fc4f:	e8 6d 2d 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000fc54:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc58:	83 c4 10             	add    esp,0x10
c000fc5b:	8d 88 ff 0f 00 00    	lea    ecx,[eax+0xfff]
c000fc61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc65:	c1 e9 0c             	shr    ecx,0xc
c000fc68:	81 7c 24 10 ff ff 05 c2 	cmp    DWORD PTR [esp+0x10],0xc205ffff
c000fc70:	76 29                	jbe    c000fc9b <Phys::freeDMA(unsigned long, unsigned long)+0x54>
c000fc72:	8d 90 00 00 fa 3d    	lea    edx,[eax+0x3dfa0000]
c000fc78:	c1 ea 0c             	shr    edx,0xc
c000fc7b:	83 c2 10             	add    edx,0x10
c000fc7e:	85 c9                	test   ecx,ecx
c000fc80:	74 15                	je     c000fc97 <Phys::freeDMA(unsigned long, unsigned long)+0x50>
c000fc82:	8d 82 60 e6 02 c0    	lea    eax,[edx-0x3ffd19a0]
c000fc88:	8d 94 11 60 e6 02 c0 	lea    edx,[ecx+edx*1-0x3ffd19a0]
c000fc8f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fc92:	40                   	inc    eax
c000fc93:	39 d0                	cmp    eax,edx
c000fc95:	75 f8                	jne    c000fc8f <Phys::freeDMA(unsigned long, unsigned long)+0x48>
c000fc97:	83 c4 0c             	add    esp,0xc
c000fc9a:	c3                   	ret    
c000fc9b:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fca1:	c1 ea 0c             	shr    edx,0xc
c000fca4:	eb d8                	jmp    c000fc7e <Phys::freeDMA(unsigned long, unsigned long)+0x37>

c000fca6 <Phys::setPageState(unsigned long, bool)>:
c000fca6:	56                   	push   esi
c000fca7:	ba 01 00 00 00       	mov    edx,0x1
c000fcac:	53                   	push   ebx
c000fcad:	8b 35 24 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d524
c000fcb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fcb7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fcbb:	89 c8                	mov    eax,ecx
c000fcbd:	83 e1 07             	and    ecx,0x7
c000fcc0:	c1 e8 03             	shr    eax,0x3
c000fcc3:	d3 e3                	shl    ebx,cl
c000fcc5:	01 c6                	add    esi,eax
c000fcc7:	d3 e2                	shl    edx,cl
c000fcc9:	f7 d2                	not    edx
c000fccb:	20 16                	and    BYTE PTR [esi],dl
c000fccd:	03 05 24 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d524
c000fcd3:	08 18                	or     BYTE PTR [eax],bl
c000fcd5:	5b                   	pop    ebx
c000fcd6:	5e                   	pop    esi
c000fcd7:	c3                   	ret    

c000fcd8 <Phys::getPageState(unsigned long)>:
c000fcd8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fcdc:	8b 15 24 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d524
c000fce2:	89 c8                	mov    eax,ecx
c000fce4:	83 e1 07             	and    ecx,0x7
c000fce7:	c1 e8 03             	shr    eax,0x3
c000fcea:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fcee:	d3 f8                	sar    eax,cl
c000fcf0:	83 e0 01             	and    eax,0x1
c000fcf3:	c3                   	ret    

c000fcf4 <Phys::freePage(unsigned long)>:
c000fcf4:	53                   	push   ebx
c000fcf5:	83 ec 10             	sub    esp,0x10
c000fcf8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fcfc:	53                   	push   ebx
c000fcfd:	68 41 a8 02 c0       	push   0xc002a841
c000fd02:	e8 ba 2c 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000fd07:	83 c4 10             	add    esp,0x10
c000fd0a:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fd10:	76 3d                	jbe    c000fd4f <Phys::freePage(unsigned long)+0x5b>
c000fd12:	83 ec 0c             	sub    esp,0xc
c000fd15:	c1 eb 0c             	shr    ebx,0xc
c000fd18:	53                   	push   ebx
c000fd19:	e8 ba ff ff ff       	call   c000fcd8 <Phys::getPageState(unsigned long)>
c000fd1e:	83 c4 10             	add    esp,0x10
c000fd21:	84 c0                	test   al,al
c000fd23:	74 19                	je     c000fd3e <Phys::freePage(unsigned long)+0x4a>
c000fd25:	83 ec 08             	sub    esp,0x8
c000fd28:	ff 0d 50 e6 02 c0    	dec    DWORD PTR ds:0xc002e650
c000fd2e:	6a 00                	push   0x0
c000fd30:	53                   	push   ebx
c000fd31:	e8 70 ff ff ff       	call   c000fca6 <Phys::setPageState(unsigned long, bool)>
c000fd36:	83 c4 10             	add    esp,0x10
c000fd39:	83 c4 08             	add    esp,0x8
c000fd3c:	5b                   	pop    ebx
c000fd3d:	c3                   	ret    
c000fd3e:	c7 44 24 10 54 a8 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a854
c000fd46:	83 c4 08             	add    esp,0x8
c000fd49:	5b                   	pop    ebx
c000fd4a:	e9 10 a6 00 00       	jmp    c001a35f <Krnl::panic(char const*)>
c000fd4f:	83 ec 08             	sub    esp,0x8
c000fd52:	68 00 10 00 00       	push   0x1000
c000fd57:	53                   	push   ebx
c000fd58:	e8 ea fe ff ff       	call   c000fc47 <Phys::freeDMA(unsigned long, unsigned long)>
c000fd5d:	83 c4 10             	add    esp,0x10
c000fd60:	83 c4 08             	add    esp,0x8
c000fd63:	5b                   	pop    ebx
c000fd64:	c3                   	ret    

c000fd65 <Phys::allocatePage()>:
c000fd65:	56                   	push   esi
c000fd66:	53                   	push   ebx
c000fd67:	83 ec 14             	sub    esp,0x14
c000fd6a:	8b 35 44 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e644
c000fd70:	89 f3                	mov    ebx,esi
c000fd72:	eb 0a                	jmp    c000fd7e <Phys::allocatePage()+0x19>
c000fd74:	89 1d 44 e6 02 c0    	mov    DWORD PTR ds:0xc002e644,ebx
c000fd7a:	39 de                	cmp    esi,ebx
c000fd7c:	74 24                	je     c000fda2 <Phys::allocatePage()+0x3d>
c000fd7e:	53                   	push   ebx
c000fd7f:	e8 54 ff ff ff       	call   c000fcd8 <Phys::getPageState(unsigned long)>
c000fd84:	5a                   	pop    edx
c000fd85:	84 c0                	test   al,al
c000fd87:	74 76                	je     c000fdff <Phys::allocatePage()+0x9a>
c000fd89:	43                   	inc    ebx
c000fd8a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fd90:	75 e2                	jne    c000fd74 <Phys::allocatePage()+0xf>
c000fd92:	31 db                	xor    ebx,ebx
c000fd94:	c7 05 44 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e644,0x0
c000fd9e:	39 de                	cmp    esi,ebx
c000fda0:	75 dc                	jne    c000fd7e <Phys::allocatePage()+0x19>
c000fda2:	83 ec 0c             	sub    esp,0xc
c000fda5:	68 88 a8 02 c0       	push   0xc002a888
c000fdaa:	e8 12 2c 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000fdaf:	58                   	pop    eax
c000fdb0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fdb5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fdb8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000fdbe:	e8 8d 28 00 00       	call   c0012650 <VAS::scanForEviction()>
c000fdc3:	83 c4 10             	add    esp,0x10
c000fdc6:	85 c0                	test   eax,eax
c000fdc8:	75 76                	jne    c000fe40 <Phys::allocatePage()+0xdb>
c000fdca:	83 ec 0c             	sub    esp,0xc
c000fdcd:	68 00 10 00 00       	push   0x1000
c000fdd2:	e8 a2 fd ff ff       	call   c000fb79 <Phys::allocateDMA(unsigned long)>
c000fdd7:	83 c4 10             	add    esp,0x10
c000fdda:	85 c0                	test   eax,eax
c000fddc:	75 5c                	jne    c000fe3a <Phys::allocatePage()+0xd5>
c000fdde:	83 ec 0c             	sub    esp,0xc
c000fde1:	68 a0 a8 02 c0       	push   0xc002a8a0
c000fde6:	e8 74 a5 00 00       	call   c001a35f <Krnl::panic(char const*)>
c000fdeb:	83 c4 10             	add    esp,0x10
c000fdee:	8b 1d 44 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e644
c000fdf4:	53                   	push   ebx
c000fdf5:	e8 de fe ff ff       	call   c000fcd8 <Phys::getPageState(unsigned long)>
c000fdfa:	5a                   	pop    edx
c000fdfb:	84 c0                	test   al,al
c000fdfd:	75 8a                	jne    c000fd89 <Phys::allocatePage()+0x24>
c000fdff:	6a 01                	push   0x1
c000fe01:	53                   	push   ebx
c000fe02:	e8 9f fe ff ff       	call   c000fca6 <Phys::setPageState(unsigned long, bool)>
c000fe07:	5a                   	pop    edx
c000fe08:	a1 50 e6 02 c0       	mov    eax,ds:0xc002e650
c000fe0d:	59                   	pop    ecx
c000fe0e:	40                   	inc    eax
c000fe0f:	8b 15 44 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e644
c000fe15:	a3 50 e6 02 c0       	mov    ds:0xc002e650,eax
c000fe1a:	c1 e2 0c             	shl    edx,0xc
c000fe1d:	52                   	push   edx
c000fe1e:	ff 35 54 e6 02 c0    	push   DWORD PTR ds:0xc002e654
c000fe24:	50                   	push   eax
c000fe25:	68 6a a8 02 c0       	push   0xc002a86a
c000fe2a:	e8 92 2b 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000fe2f:	a1 44 e6 02 c0       	mov    eax,ds:0xc002e644
c000fe34:	83 c4 10             	add    esp,0x10
c000fe37:	c1 e0 0c             	shl    eax,0xc
c000fe3a:	83 c4 14             	add    esp,0x14
c000fe3d:	5b                   	pop    ebx
c000fe3e:	5e                   	pop    esi
c000fe3f:	c3                   	ret    
c000fe40:	83 ec 08             	sub    esp,0x8
c000fe43:	89 c2                	mov    edx,eax
c000fe45:	6a 01                	push   0x1
c000fe47:	c1 ea 0c             	shr    edx,0xc
c000fe4a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe4e:	52                   	push   edx
c000fe4f:	e8 52 fe ff ff       	call   c000fca6 <Phys::setPageState(unsigned long, bool)>
c000fe54:	83 c4 10             	add    esp,0x10
c000fe57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe5b:	eb dd                	jmp    c000fe3a <Phys::allocatePage()+0xd5>

c000fe5d <Phys::allocateContiguousPages(int)>:
c000fe5d:	57                   	push   edi
c000fe5e:	56                   	push   esi
c000fe5f:	53                   	push   ebx
c000fe60:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fe64:	fa                   	cli    
c000fe65:	ff 05 08 fb 02 c0    	inc    DWORD PTR ds:0xc002fb08
c000fe6b:	31 db                	xor    ebx,ebx
c000fe6d:	85 db                	test   ebx,ebx
c000fe6f:	75 11                	jne    c000fe82 <Phys::allocateContiguousPages(int)+0x25>
c000fe71:	e8 ef fe ff ff       	call   c000fd65 <Phys::allocatePage()>
c000fe76:	83 fe 01             	cmp    esi,0x1
c000fe79:	89 c7                	mov    edi,eax
c000fe7b:	74 21                	je     c000fe9e <Phys::allocateContiguousPages(int)+0x41>
c000fe7d:	bb 01 00 00 00       	mov    ebx,0x1
c000fe82:	e8 de fe ff ff       	call   c000fd65 <Phys::allocatePage()>
c000fe87:	89 da                	mov    edx,ebx
c000fe89:	c1 e2 0c             	shl    edx,0xc
c000fe8c:	01 fa                	add    edx,edi
c000fe8e:	39 c2                	cmp    edx,eax
c000fe90:	74 20                	je     c000feb2 <Phys::allocateContiguousPages(int)+0x55>
c000fe92:	bb 01 00 00 00       	mov    ebx,0x1
c000fe97:	89 c7                	mov    edi,eax
c000fe99:	83 fe 01             	cmp    esi,0x1
c000fe9c:	75 e4                	jne    c000fe82 <Phys::allocateContiguousPages(int)+0x25>
c000fe9e:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c000fea3:	48                   	dec    eax
c000fea4:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c000fea9:	75 01                	jne    c000feac <Phys::allocateContiguousPages(int)+0x4f>
c000feab:	fb                   	sti    
c000feac:	89 f8                	mov    eax,edi
c000feae:	5b                   	pop    ebx
c000feaf:	5e                   	pop    esi
c000feb0:	5f                   	pop    edi
c000feb1:	c3                   	ret    
c000feb2:	43                   	inc    ebx
c000feb3:	39 f3                	cmp    ebx,esi
c000feb5:	75 b6                	jne    c000fe6d <Phys::allocateContiguousPages(int)+0x10>
c000feb7:	eb e5                	jmp    c000fe9e <Phys::allocateContiguousPages(int)+0x41>

c000feb9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000feb9:	56                   	push   esi
c000feba:	53                   	push   ebx
c000febb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000febf:	39 1d 48 e6 02 c0    	cmp    DWORD PTR ds:0xc002e648,ebx
c000fec5:	73 06                	jae    c000fecd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fec7:	89 1d 48 e6 02 c0    	mov    DWORD PTR ds:0xc002e648,ebx
c000fecd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fed1:	c1 eb 0c             	shr    ebx,0xc
c000fed4:	c1 e8 0c             	shr    eax,0xc
c000fed7:	39 d8                	cmp    eax,ebx
c000fed9:	73 13                	jae    c000feee <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fedb:	6a 00                	push   0x0
c000fedd:	8d 70 01             	lea    esi,[eax+0x1]
c000fee0:	50                   	push   eax
c000fee1:	e8 c0 fd ff ff       	call   c000fca6 <Phys::setPageState(unsigned long, bool)>
c000fee6:	5a                   	pop    edx
c000fee7:	89 f0                	mov    eax,esi
c000fee9:	59                   	pop    ecx
c000feea:	39 f3                	cmp    ebx,esi
c000feec:	75 ed                	jne    c000fedb <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000feee:	5b                   	pop    ebx
c000feef:	5e                   	pop    esi
c000fef0:	c3                   	ret    

c000fef1 <Phys::physicalMemorySetup(unsigned int)>:
c000fef1:	55                   	push   ebp
c000fef2:	57                   	push   edi
c000fef3:	56                   	push   esi
c000fef4:	53                   	push   ebx
c000fef5:	83 ec 40             	sub    esp,0x40
c000fef8:	6a 30                	push   0x30
c000fefa:	6a 00                	push   0x0
c000fefc:	68 60 e6 02 c0       	push   0xc002e660
c000ff01:	e8 4a 08 ff ff       	call   c0000750 <memset>
c000ff06:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ff0a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ff0f:	05 00 10 00 00       	add    eax,0x1000
c000ff14:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ff18:	5b                   	pop    ebx
c000ff19:	31 db                	xor    ebx,ebx
c000ff1b:	5e                   	pop    esi
c000ff1c:	50                   	push   eax
c000ff1d:	68 ae a8 02 c0       	push   0xc002a8ae
c000ff22:	e8 9a 2a 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000ff27:	83 c4 10             	add    esp,0x10
c000ff2a:	83 ec 08             	sub    esp,0x8
c000ff2d:	6a 01                	push   0x1
c000ff2f:	53                   	push   ebx
c000ff30:	43                   	inc    ebx
c000ff31:	e8 70 fd ff ff       	call   c000fca6 <Phys::setPageState(unsigned long, bool)>
c000ff36:	83 c4 10             	add    esp,0x10
c000ff39:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff3f:	75 e9                	jne    c000ff2a <Phys::physicalMemorySetup(unsigned int)+0x39>
c000ff41:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000ff48:	66 85 c0             	test   ax,ax
c000ff4b:	0f 84 8e 01 00 00    	je     c00100df <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000ff51:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ff55:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000ff5d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff61:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000ff66:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ff6a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000ff72:	eb 15                	jmp    c000ff89 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000ff74:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000ff78:	83 c3 18             	add    ebx,0x18
c000ff7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff7f:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000ff83:	0f 84 66 01 00 00    	je     c00100ef <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000ff89:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ff8c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ff8f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000ff92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ff96:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ff9a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000ff9c:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ff9f:	01 f0                	add    eax,esi
c000ffa1:	55                   	push   ebp
c000ffa2:	11 fa                	adc    edx,edi
c000ffa4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ffa8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000ffac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ffb0:	56                   	push   esi
c000ffb1:	68 f0 a8 02 c0       	push   0xc002a8f0
c000ffb6:	e8 06 2a 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c000ffbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ffbf:	83 c4 10             	add    esp,0x10
c000ffc2:	09 f8                	or     eax,edi
c000ffc4:	0f 85 25 01 00 00    	jne    c00100ef <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000ffca:	4d                   	dec    ebp
c000ffcb:	75 a7                	jne    c000ff74 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000ffcd:	ba 00 00 08 00       	mov    edx,0x80000
c000ffd2:	89 c1                	mov    ecx,eax
c000ffd4:	39 f2                	cmp    edx,esi
c000ffd6:	19 f9                	sbb    ecx,edi
c000ffd8:	0f 82 a7 00 00 00    	jb     c0010085 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000ffde:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000ffe2:	89 c1                	mov    ecx,eax
c000ffe4:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000ffe8:	0f 83 97 00 00 00    	jae    c0010085 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000ffee:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fff3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fff7:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fffb:	39 fa                	cmp    edx,edi
c000fffd:	19 e8                	sbb    eax,ebp
c000ffff:	0f 82 14 01 00 00    	jb     c0010119 <Phys::physicalMemorySetup(unsigned int)+0x228>
c0010005:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010009:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001000d:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010013:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010018:	83 d5 ff             	adc    ebp,0xffffffff
c001001b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001001f:	31 c0                	xor    eax,eax
c0010021:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010025:	39 fa                	cmp    edx,edi
c0010027:	89 c1                	mov    ecx,eax
c0010029:	19 e9                	sbb    ecx,ebp
c001002b:	0f 83 43 ff ff ff    	jae    c000ff74 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0010031:	be 00 00 08 00       	mov    esi,0x80000
c0010036:	50                   	push   eax
c0010037:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001003b:	57                   	push   edi
c001003c:	56                   	push   esi
c001003d:	68 14 a9 02 c0       	push   0xc002a914
c0010042:	e8 7a 29 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0010047:	5a                   	pop    edx
c0010048:	59                   	pop    ecx
c0010049:	57                   	push   edi
c001004a:	56                   	push   esi
c001004b:	e8 69 fe ff ff       	call   c000feb9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010050:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010054:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010058:	83 c4 0c             	add    esp,0xc
c001005b:	0f ac d0 0c          	shrd   eax,edx,0xc
c001005f:	03 05 54 e6 02 c0    	add    eax,DWORD PTR ds:0xc002e654
c0010065:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001006c:	a3 54 e6 02 c0       	mov    ds:0xc002e654,eax
c0010071:	52                   	push   edx
c0010072:	50                   	push   eax
c0010073:	68 d4 a8 02 c0       	push   0xc002a8d4
c0010078:	e8 44 29 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001007d:	83 c4 10             	add    esp,0x10
c0010080:	e9 ef fe ff ff       	jmp    c000ff74 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0010085:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010089:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001008d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010091:	39 ea                	cmp    edx,ebp
c0010093:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010097:	0f 82 d7 fe ff ff    	jb     c000ff74 <Phys::physicalMemorySetup(unsigned int)+0x83>
c001009d:	ba ff 1f 00 00       	mov    edx,0x1fff
c00100a2:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00100a6:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00100aa:	0f 83 c4 fe ff ff    	jae    c000ff74 <Phys::physicalMemorySetup(unsigned int)+0x83>
c00100b0:	39 ee                	cmp    esi,ebp
c00100b2:	89 f8                	mov    eax,edi
c00100b4:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00100b8:	0f 83 78 ff ff ff    	jae    c0010036 <Phys::physicalMemorySetup(unsigned int)+0x145>
c00100be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00100c2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00100c6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00100ca:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00100ce:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c00100d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00100da:	e9 57 ff ff ff       	jmp    c0010036 <Phys::physicalMemorySetup(unsigned int)+0x145>
c00100df:	83 ec 0c             	sub    esp,0xc
c00100e2:	68 c6 a8 02 c0       	push   0xc002a8c6
c00100e7:	e8 73 a2 00 00       	call   c001a35f <Krnl::panic(char const*)>
c00100ec:	83 c4 10             	add    esp,0x10
c00100ef:	bb 40 01 00 00       	mov    ebx,0x140
c00100f4:	83 ec 08             	sub    esp,0x8
c00100f7:	6a 00                	push   0x0
c00100f9:	53                   	push   ebx
c00100fa:	43                   	inc    ebx
c00100fb:	e8 a6 fb ff ff       	call   c000fca6 <Phys::setPageState(unsigned long, bool)>
c0010100:	ff 05 54 e6 02 c0    	inc    DWORD PTR ds:0xc002e654
c0010106:	83 c4 10             	add    esp,0x10
c0010109:	81 fb 80 01 00 00    	cmp    ebx,0x180
c001010f:	75 e3                	jne    c00100f4 <Phys::physicalMemorySetup(unsigned int)+0x203>
c0010111:	83 c4 3c             	add    esp,0x3c
c0010114:	5b                   	pop    ebx
c0010115:	5e                   	pop    esi
c0010116:	5f                   	pop    edi
c0010117:	5d                   	pop    ebp
c0010118:	c3                   	ret    
c0010119:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010121:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010129:	e9 d7 fe ff ff       	jmp    c0010005 <Phys::physicalMemorySetup(unsigned int)+0x114>

c001012e <Pipe::isAtty()>:
c001012e:	31 c0                	xor    eax,eax
c0010130:	c3                   	ret    
c0010131:	90                   	nop

c0010132 <Pipe::~Pipe()>:
c0010132:	83 ec 0c             	sub    esp,0xc
c0010135:	ba 80 a9 02 c0       	mov    edx,0xc002a980
c001013a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001013e:	89 10                	mov    DWORD PTR [eax],edx
c0010140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010144:	83 ec 0c             	sub    esp,0xc
c0010147:	50                   	push   eax
c0010148:	e8 41 12 00 00       	call   c001138e <UnixFile::~UnixFile()>
c001014d:	83 c4 10             	add    esp,0x10
c0010150:	90                   	nop
c0010151:	83 c4 0c             	add    esp,0xc
c0010154:	c3                   	ret    
c0010155:	90                   	nop

c0010156 <Pipe::~Pipe()>:
c0010156:	83 ec 0c             	sub    esp,0xc
c0010159:	83 ec 0c             	sub    esp,0xc
c001015c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010160:	e8 cd ff ff ff       	call   c0010132 <Pipe::~Pipe()>
c0010165:	83 c4 10             	add    esp,0x10
c0010168:	83 ec 08             	sub    esp,0x8
c001016b:	6a 20                	push   0x20
c001016d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010171:	e8 73 27 00 00       	call   c00128e9 <operator delete(void*, unsigned long)>
c0010176:	83 c4 10             	add    esp,0x10
c0010179:	83 c4 0c             	add    esp,0xc
c001017c:	c3                   	ret    
c001017d:	90                   	nop

c001017e <Pipe::read(unsigned long long, void*, int*)>:
c001017e:	55                   	push   ebp
c001017f:	57                   	push   edi
c0010180:	56                   	push   esi
c0010181:	53                   	push   ebx
c0010182:	83 ec 1c             	sub    esp,0x1c
c0010185:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010189:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001018d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010191:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010194:	89 c8                	mov    eax,ecx
c0010196:	99                   	cdq    
c0010197:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001019b:	74 24                	je     c00101c1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c001019d:	39 f9                	cmp    ecx,edi
c001019f:	89 d1                	mov    ecx,edx
c00101a1:	19 f1                	sbb    ecx,esi
c00101a3:	73 1c                	jae    c00101c1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c00101a5:	fa                   	cli    
c00101a6:	ff 05 08 fb 02 c0    	inc    DWORD PTR ds:0xc002fb08
c00101ac:	e8 40 dd 00 00       	call   c001def1 <schedule()>
c00101b1:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c00101b6:	48                   	dec    eax
c00101b7:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c00101bc:	75 d3                	jne    c0010191 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00101be:	fb                   	sti    
c00101bf:	eb d0                	jmp    c0010191 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00101c1:	39 f8                	cmp    eax,edi
c00101c3:	89 d1                	mov    ecx,edx
c00101c5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00101c8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00101cc:	19 f1                	sbb    ecx,esi
c00101ce:	73 07                	jae    c00101d7 <Pipe::read(unsigned long long, void*, int*)+0x59>
c00101d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00101d3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00101d7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00101da:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00101dd:	29 f7                	sub    edi,esi
c00101df:	89 f8                	mov    eax,edi
c00101e1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00101e5:	99                   	cdq    
c00101e6:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00101e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101ed:	19 d0                	sbb    eax,edx
c00101ef:	73 07                	jae    c00101f8 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00101f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00101f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00101f8:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00101fb:	89 ea                	mov    edx,ebp
c00101fd:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010201:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010206:	74 0d                	je     c0010215 <Pipe::read(unsigned long long, void*, int*)+0x97>
c0010208:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001020b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001020f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010213:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010215:	85 d2                	test   edx,edx
c0010217:	74 11                	je     c001022a <Pipe::read(unsigned long long, void*, int*)+0xac>
c0010219:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001021d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0010220:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010224:	89 d1                	mov    ecx,edx
c0010226:	89 c7                	mov    edi,eax
c0010228:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001022a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001022d:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0010230:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010233:	99                   	cdq    
c0010234:	89 f7                	mov    edi,esi
c0010236:	03 04 24             	add    eax,DWORD PTR [esp]
c0010239:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001023d:	c1 ff 1f             	sar    edi,0x1f
c0010240:	57                   	push   edi
c0010241:	56                   	push   esi
c0010242:	52                   	push   edx
c0010243:	50                   	push   eax
c0010244:	e8 4b 6c 01 00       	call   c0026e94 <__umoddi3>
c0010249:	83 c4 10             	add    esp,0x10
c001024c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001024f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010254:	75 10                	jne    c0010266 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0010256:	83 ec 0c             	sub    esp,0xc
c0010259:	68 3d a9 02 c0       	push   0xc002a93d
c001025e:	e8 fc a0 00 00       	call   c001a35f <Krnl::panic(char const*)>
c0010263:	83 c4 10             	add    esp,0x10
c0010266:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001026a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001026d:	89 10                	mov    DWORD PTR [eax],edx
c001026f:	83 c4 1c             	add    esp,0x1c
c0010272:	31 c0                	xor    eax,eax
c0010274:	5b                   	pop    ebx
c0010275:	5e                   	pop    esi
c0010276:	5f                   	pop    edi
c0010277:	5d                   	pop    ebp
c0010278:	c3                   	ret    
c0010279:	90                   	nop

c001027a <Pipe::write(unsigned long long, void*, int*)>:
c001027a:	55                   	push   ebp
c001027b:	57                   	push   edi
c001027c:	56                   	push   esi
c001027d:	53                   	push   ebx
c001027e:	83 ec 1c             	sub    esp,0x1c
c0010281:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010285:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010289:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001028c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010290:	89 04 24             	mov    DWORD PTR [esp],eax
c0010293:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010297:	89 d8                	mov    eax,ebx
c0010299:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001029c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00102a0:	89 d6                	mov    esi,edx
c00102a2:	89 d7                	mov    edi,edx
c00102a4:	c1 ff 1f             	sar    edi,0x1f
c00102a7:	03 34 24             	add    esi,DWORD PTR [esp]
c00102aa:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00102ae:	c1 f8 1f             	sar    eax,0x1f
c00102b1:	39 f3                	cmp    ebx,esi
c00102b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00102b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00102bb:	19 f8                	sbb    eax,edi
c00102bd:	b8 01 00 00 00       	mov    eax,0x1
c00102c2:	72 6e                	jb     c0010332 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00102c4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00102c7:	01 d0                	add    eax,edx
c00102c9:	99                   	cdq    
c00102ca:	f7 fb                	idiv   ebx
c00102cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102d0:	29 d3                	sub    ebx,edx
c00102d2:	89 d7                	mov    edi,edx
c00102d4:	89 de                	mov    esi,ebx
c00102d6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00102d9:	c1 fb 1f             	sar    ebx,0x1f
c00102dc:	39 f2                	cmp    edx,esi
c00102de:	19 d8                	sbb    eax,ebx
c00102e0:	b8 00 00 00 00       	mov    eax,0x0
c00102e5:	72 04                	jb     c00102eb <Pipe::write(unsigned long long, void*, int*)+0x71>
c00102e7:	89 d0                	mov    eax,edx
c00102e9:	29 f0                	sub    eax,esi
c00102eb:	89 d3                	mov    ebx,edx
c00102ed:	29 c3                	sub    ebx,eax
c00102ef:	74 0b                	je     c00102fc <Pipe::write(unsigned long long, void*, int*)+0x82>
c00102f1:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00102f4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00102f8:	89 d9                	mov    ecx,ebx
c00102fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102fc:	85 c0                	test   eax,eax
c00102fe:	74 0d                	je     c001030d <Pipe::write(unsigned long long, void*, int*)+0x93>
c0010300:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010304:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010307:	89 de                	mov    esi,ebx
c0010309:	89 c1                	mov    ecx,eax
c001030b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001030d:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010310:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010315:	75 10                	jne    c0010327 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0010317:	83 ec 0c             	sub    esp,0xc
c001031a:	68 59 a9 02 c0       	push   0xc002a959
c001031f:	e8 3b a0 00 00       	call   c001a35f <Krnl::panic(char const*)>
c0010324:	83 c4 10             	add    esp,0x10
c0010327:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001032b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001032e:	89 08                	mov    DWORD PTR [eax],ecx
c0010330:	31 c0                	xor    eax,eax
c0010332:	83 c4 1c             	add    esp,0x1c
c0010335:	5b                   	pop    ebx
c0010336:	5e                   	pop    esi
c0010337:	5f                   	pop    edi
c0010338:	5d                   	pop    ebp
c0010339:	c3                   	ret    

c001033a <Pipe::Pipe(int)>:
c001033a:	83 ec 0c             	sub    esp,0xc
c001033d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010341:	83 ec 08             	sub    esp,0x8
c0010344:	6a 00                	push   0x0
c0010346:	50                   	push   eax
c0010347:	e8 60 0e 00 00       	call   c00111ac <UnixFile::UnixFile(int)>
c001034c:	83 c4 10             	add    esp,0x10
c001034f:	ba 80 a9 02 c0       	mov    edx,0xc002a980
c0010354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010358:	89 10                	mov    DWORD PTR [eax],edx
c001035a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001035e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010362:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010369:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010374:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001037b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001037f:	83 ec 0c             	sub    esp,0xc
c0010382:	50                   	push   eax
c0010383:	e8 e1 f5 ff ff       	call   c000f969 <malloc>
c0010388:	83 c4 10             	add    esp,0x10
c001038b:	89 c2                	mov    edx,eax
c001038d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010391:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010398:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001039c:	90                   	nop
c001039d:	83 c4 0c             	add    esp,0xc
c00103a0:	c3                   	ret    
c00103a1:	90                   	nop

c00103a2 <VgaText::isAtty()>:
c00103a2:	b0 01                	mov    al,0x1
c00103a4:	c3                   	ret    
c00103a5:	90                   	nop

c00103a6 <VgaText::~VgaText()>:
c00103a6:	83 ec 0c             	sub    esp,0xc
c00103a9:	ba 08 aa 02 c0       	mov    edx,0xc002aa08
c00103ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103b2:	89 10                	mov    DWORD PTR [eax],edx
c00103b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103b8:	83 ec 0c             	sub    esp,0xc
c00103bb:	50                   	push   eax
c00103bc:	e8 cd 0f 00 00       	call   c001138e <UnixFile::~UnixFile()>
c00103c1:	83 c4 10             	add    esp,0x10
c00103c4:	90                   	nop
c00103c5:	83 c4 0c             	add    esp,0xc
c00103c8:	c3                   	ret    
c00103c9:	90                   	nop

c00103ca <VgaText::~VgaText()>:
c00103ca:	83 ec 0c             	sub    esp,0xc
c00103cd:	83 ec 0c             	sub    esp,0xc
c00103d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103d4:	e8 cd ff ff ff       	call   c00103a6 <VgaText::~VgaText()>
c00103d9:	83 c4 10             	add    esp,0x10
c00103dc:	83 ec 08             	sub    esp,0x8
c00103df:	68 c4 02 00 00       	push   0x2c4
c00103e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103e8:	e8 fc 24 00 00       	call   c00128e9 <operator delete(void*, unsigned long)>
c00103ed:	83 c4 10             	add    esp,0x10
c00103f0:	83 c4 0c             	add    esp,0xc
c00103f3:	c3                   	ret    

c00103f4 <VgaText::read(unsigned long long, void*, int*)>:
c00103f4:	83 ec 10             	sub    esp,0x10
c00103f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00103ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010403:	e8 86 5a 00 00       	call   c0015e8e <readKeyboard(VgaText*, char*, unsigned long)>
c0010408:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001040c:	89 02                	mov    DWORD PTR [edx],eax
c001040e:	31 c0                	xor    eax,eax
c0010410:	83 c4 1c             	add    esp,0x1c
c0010413:	c3                   	ret    

c0010414 <setTerminalScrollLock(bool)>:
c0010414:	c3                   	ret    

c0010415 <addToTerminalCycle(VgaText*)>:
c0010415:	8b 15 c0 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e6c0
c001041b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001041f:	85 d2                	test   edx,edx
c0010421:	75 09                	jne    c001042c <addToTerminalCycle(VgaText*)+0x17>
c0010423:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010426:	a3 c0 e6 02 c0       	mov    ds:0xc002e6c0,eax
c001042b:	c3                   	ret    
c001042c:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c001042f:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010432:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010435:	c3                   	ret    

c0010436 <installVgaTextImplementation()>:
c0010436:	83 ec 10             	sub    esp,0x10
c0010439:	6a 20                	push   0x20
c001043b:	6a 00                	push   0x0
c001043d:	68 a0 e6 02 c0       	push   0xc002e6a0
c0010442:	e8 09 03 ff ff       	call   c0000750 <memset>
c0010447:	83 c4 1c             	add    esp,0x1c
c001044a:	c3                   	ret    

c001044b <scrollTerminalScrollLock(int)>:
c001044b:	c3                   	ret    

c001044c <VgaText::updateTitle()>:
c001044c:	53                   	push   ebx
c001044d:	31 c0                	xor    eax,eax
c001044f:	83 ec 58             	sub    esp,0x58
c0010452:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010456:	89 e1                	mov    ecx,esp
c0010458:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001045c:	40                   	inc    eax
c001045d:	83 f8 50             	cmp    eax,0x50
c0010460:	75 f6                	jne    c0010458 <VgaText::updateTitle()+0xc>
c0010462:	31 c0                	xor    eax,eax
c0010464:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001046b:	84 db                	test   bl,bl
c001046d:	74 06                	je     c0010475 <VgaText::updateTitle()+0x29>
c001046f:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010472:	40                   	inc    eax
c0010473:	eb ef                	jmp    c0010464 <VgaText::updateTitle()+0x18>
c0010475:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010478:	85 c0                	test   eax,eax
c001047a:	74 09                	je     c0010485 <VgaText::updateTitle()+0x39>
c001047c:	53                   	push   ebx
c001047d:	53                   	push   ebx
c001047e:	51                   	push   ecx
c001047f:	52                   	push   edx
c0010480:	ff d0                	call   eax
c0010482:	83 c4 10             	add    esp,0x10
c0010485:	83 c4 58             	add    esp,0x58
c0010488:	5b                   	pop    ebx
c0010489:	c3                   	ret    

c001048a <VgaText::load()>:
c001048a:	53                   	push   ebx
c001048b:	31 c0                	xor    eax,eax
c001048d:	83 ec 58             	sub    esp,0x58
c0010490:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010494:	89 e2                	mov    edx,esp
c0010496:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001049a:	40                   	inc    eax
c001049b:	83 f8 50             	cmp    eax,0x50
c001049e:	75 f6                	jne    c0010496 <VgaText::load()+0xc>
c00104a0:	31 c0                	xor    eax,eax
c00104a2:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00104a9:	84 c9                	test   cl,cl
c00104ab:	74 06                	je     c00104b3 <VgaText::load()+0x29>
c00104ad:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00104b0:	40                   	inc    eax
c00104b1:	eb ef                	jmp    c00104a2 <VgaText::load()+0x18>
c00104b3:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00104b6:	85 c0                	test   eax,eax
c00104b8:	74 09                	je     c00104c3 <VgaText::load()+0x39>
c00104ba:	51                   	push   ecx
c00104bb:	51                   	push   ecx
c00104bc:	52                   	push   edx
c00104bd:	53                   	push   ebx
c00104be:	ff d0                	call   eax
c00104c0:	83 c4 10             	add    esp,0x10
c00104c3:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00104c6:	85 c0                	test   eax,eax
c00104c8:	74 09                	je     c00104d3 <VgaText::load()+0x49>
c00104ca:	83 ec 0c             	sub    esp,0xc
c00104cd:	53                   	push   ebx
c00104ce:	ff d0                	call   eax
c00104d0:	83 c4 10             	add    esp,0x10
c00104d3:	83 c4 58             	add    esp,0x58
c00104d6:	5b                   	pop    ebx
c00104d7:	c3                   	ret    

c00104d8 <VgaText::updateCursor()>:
c00104d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104dc:	39 05 c4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6c4,eax
c00104e2:	75 09                	jne    c00104ed <VgaText::updateCursor()+0x15>
c00104e4:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c00104e7:	85 c0                	test   eax,eax
c00104e9:	74 02                	je     c00104ed <VgaText::updateCursor()+0x15>
c00104eb:	ff e0                	jmp    eax
c00104ed:	c3                   	ret    

c00104ee <VgaText::doANSI_SGR(int)>:
c00104ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104f6:	85 d2                	test   edx,edx
c00104f8:	75 0b                	jne    c0010505 <VgaText::doANSI_SGR(int)+0x17>
c00104fa:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00104fd:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010500:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010503:	eb 59                	jmp    c001055e <VgaText::doANSI_SGR(int)+0x70>
c0010505:	83 fa 07             	cmp    edx,0x7
c0010508:	75 0b                	jne    c0010515 <VgaText::doANSI_SGR(int)+0x27>
c001050a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001050d:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010510:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010513:	eb 49                	jmp    c001055e <VgaText::doANSI_SGR(int)+0x70>
c0010515:	83 fa 1b             	cmp    edx,0x1b
c0010518:	74 e0                	je     c00104fa <VgaText::doANSI_SGR(int)+0xc>
c001051a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001051d:	83 f9 07             	cmp    ecx,0x7
c0010520:	77 09                	ja     c001052b <VgaText::doANSI_SGR(int)+0x3d>
c0010522:	8b 14 8d 60 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2aa0]
c0010529:	eb 20                	jmp    c001054b <VgaText::doANSI_SGR(int)+0x5d>
c001052b:	8d 4a d8             	lea    ecx,[edx-0x28]
c001052e:	83 f9 07             	cmp    ecx,0x7
c0010531:	77 09                	ja     c001053c <VgaText::doANSI_SGR(int)+0x4e>
c0010533:	8b 14 8d 60 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2aa0]
c001053a:	eb 22                	jmp    c001055e <VgaText::doANSI_SGR(int)+0x70>
c001053c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001053f:	83 f9 07             	cmp    ecx,0x7
c0010542:	77 0b                	ja     c001054f <VgaText::doANSI_SGR(int)+0x61>
c0010544:	8b 14 95 18 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2be8]
c001054b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001054e:	c3                   	ret    
c001054f:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010552:	83 f9 07             	cmp    ecx,0x7
c0010555:	77 0a                	ja     c0010561 <VgaText::doANSI_SGR(int)+0x73>
c0010557:	8b 14 95 f0 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c10]
c001055e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010561:	c3                   	ret    

c0010562 <VgaText::setDefaultBgColour(VgaColour)>:
c0010562:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010566:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001056a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001056d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010570:	c3                   	ret    
c0010571:	90                   	nop

c0010572 <VgaText::setDefaultFgColour(VgaColour)>:
c0010572:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010576:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001057a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001057d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010580:	c3                   	ret    
c0010581:	90                   	nop

c0010582 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010582:	53                   	push   ebx
c0010583:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010587:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001058b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001058f:	51                   	push   ecx
c0010590:	e8 cd ff ff ff       	call   c0010562 <VgaText::setDefaultBgColour(VgaColour)>
c0010595:	58                   	pop    eax
c0010596:	5a                   	pop    edx
c0010597:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001059b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001059f:	5b                   	pop    ebx
c00105a0:	eb d0                	jmp    c0010572 <VgaText::setDefaultFgColour(VgaColour)>

c00105a2 <VgaText::setTitleTextColour(VgaColour)>:
c00105a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105aa:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00105ad:	e9 9a fe ff ff       	jmp    c001044c <VgaText::updateTitle()>

c00105b2 <VgaText::setTitleColour(VgaColour)>:
c00105b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105ba:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00105bd:	e9 8a fe ff ff       	jmp    c001044c <VgaText::updateTitle()>

c00105c2 <VgaText::setTitle(char*)>:
c00105c2:	53                   	push   ebx
c00105c3:	83 ec 10             	sub    esp,0x10
c00105c6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00105ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105ce:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c00105d4:	50                   	push   eax
c00105d5:	e8 32 02 ff ff       	call   c000080c <strcpy>
c00105da:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00105de:	83 c4 18             	add    esp,0x18
c00105e1:	5b                   	pop    ebx
c00105e2:	e9 65 fe ff ff       	jmp    c001044c <VgaText::updateTitle()>
c00105e7:	90                   	nop

c00105e8 <VgaText::combineColours(unsigned char, unsigned char)>:
c00105e8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00105ec:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00105f1:	83 e0 0f             	and    eax,0xf
c00105f4:	c1 e2 04             	shl    edx,0x4
c00105f7:	09 d0                	or     eax,edx
c00105f9:	c3                   	ret    

c00105fa <VgaText::scrollScreen()>:
c00105fa:	55                   	push   ebp
c00105fb:	b9 01 00 00 00       	mov    ecx,0x1
c0010600:	57                   	push   edi
c0010601:	56                   	push   esi
c0010602:	53                   	push   ebx
c0010603:	83 ec 0c             	sub    esp,0xc
c0010606:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001060a:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010610:	31 ff                	xor    edi,edi
c0010612:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010615:	83 f9 17             	cmp    ecx,0x17
c0010618:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c001061b:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010622:	75 27                	jne    c001064b <VgaText::scrollScreen()+0x51>
c0010624:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010627:	01 f5                	add    ebp,esi
c0010629:	f7 c7 01 00 00 00    	test   edi,0x1
c001062f:	74 16                	je     c0010647 <VgaText::scrollScreen()+0x4d>
c0010631:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010635:	50                   	push   eax
c0010636:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001063a:	50                   	push   eax
c001063b:	e8 a8 ff ff ff       	call   c00105e8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010640:	5a                   	pop    edx
c0010641:	5a                   	pop    edx
c0010642:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010645:	eb 04                	jmp    c001064b <VgaText::scrollScreen()+0x51>
c0010647:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001064b:	47                   	inc    edi
c001064c:	46                   	inc    esi
c001064d:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010653:	75 bd                	jne    c0010612 <VgaText::scrollScreen()+0x18>
c0010655:	41                   	inc    ecx
c0010656:	83 f9 18             	cmp    ecx,0x18
c0010659:	75 af                	jne    c001060a <VgaText::scrollScreen()+0x10>
c001065b:	39 1d c4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6c4,ebx
c0010661:	75 1b                	jne    c001067e <VgaText::scrollScreen()+0x84>
c0010663:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010667:	74 05                	je     c001066e <VgaText::scrollScreen()+0x74>
c0010669:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001066c:	eb 10                	jmp    c001067e <VgaText::scrollScreen()+0x84>
c001066e:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010671:	85 c0                	test   eax,eax
c0010673:	74 09                	je     c001067e <VgaText::scrollScreen()+0x84>
c0010675:	83 ec 0c             	sub    esp,0xc
c0010678:	53                   	push   ebx
c0010679:	ff d0                	call   eax
c001067b:	83 c4 10             	add    esp,0x10
c001067e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010682:	83 c4 0c             	add    esp,0xc
c0010685:	5b                   	pop    ebx
c0010686:	5e                   	pop    esi
c0010687:	5f                   	pop    edi
c0010688:	5d                   	pop    ebp
c0010689:	e9 4a fe ff ff       	jmp    c00104d8 <VgaText::updateCursor()>

c001068e <VgaText::combineCharAndColour(char, unsigned char)>:
c001068e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010693:	c1 e0 08             	shl    eax,0x8
c0010696:	89 c2                	mov    edx,eax
c0010698:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001069d:	09 d0                	or     eax,edx
c001069f:	c3                   	ret    

c00106a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00106a0:	56                   	push   esi
c00106a1:	53                   	push   ebx
c00106a2:	51                   	push   ecx
c00106a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00106a7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00106ac:	50                   	push   eax
c00106ad:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00106b2:	50                   	push   eax
c00106b3:	e8 30 ff ff ff       	call   c00105e8 <VgaText::combineColours(unsigned char, unsigned char)>
c00106b8:	5b                   	pop    ebx
c00106b9:	0f b6 c0             	movzx  eax,al
c00106bc:	5e                   	pop    esi
c00106bd:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00106c2:	50                   	push   eax
c00106c3:	53                   	push   ebx
c00106c4:	e8 c5 ff ff ff       	call   c001068e <VgaText::combineCharAndColour(char, unsigned char)>
c00106c9:	5a                   	pop    edx
c00106ca:	5e                   	pop    esi
c00106cb:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00106ce:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00106d4:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00106d8:	0f b7 d2             	movzx  edx,dx
c00106db:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c00106df:	39 0d c4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6c4,ecx
c00106e5:	75 10                	jne    c00106f7 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00106e7:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c00106ea:	85 c0                	test   eax,eax
c00106ec:	74 09                	je     c00106f7 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00106ee:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00106f2:	5a                   	pop    edx
c00106f3:	5b                   	pop    ebx
c00106f4:	5e                   	pop    esi
c00106f5:	ff e0                	jmp    eax
c00106f7:	58                   	pop    eax
c00106f8:	5b                   	pop    ebx
c00106f9:	5e                   	pop    esi
c00106fa:	c3                   	ret    
c00106fb:	90                   	nop

c00106fc <VgaText::getCursorX()>:
c00106fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010700:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010703:	c3                   	ret    

c0010704 <VgaText::getCursorY()>:
c0010704:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010708:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001070b:	c3                   	ret    

c001070c <VgaText::setCursor(int, int)>:
c001070c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010710:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010714:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010717:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001071b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001071e:	e9 b5 fd ff ff       	jmp    c00104d8 <VgaText::updateCursor()>

c0010723 <setActiveTerminal(VgaText*)>:
c0010723:	53                   	push   ebx
c0010724:	83 ec 08             	sub    esp,0x8
c0010727:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001072b:	85 db                	test   ebx,ebx
c001072d:	75 11                	jne    c0010740 <setActiveTerminal(VgaText*)+0x1d>
c001072f:	c7 44 24 10 94 a9 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a994
c0010737:	83 c4 08             	add    esp,0x8
c001073a:	5b                   	pop    ebx
c001073b:	e9 1f 9c 00 00       	jmp    c001a35f <Krnl::panic(char const*)>
c0010740:	a1 c4 e6 02 c0       	mov    eax,ds:0xc002e6c4
c0010745:	85 c0                	test   eax,eax
c0010747:	74 0c                	je     c0010755 <setActiveTerminal(VgaText*)+0x32>
c0010749:	83 ec 0c             	sub    esp,0xc
c001074c:	50                   	push   eax
c001074d:	e8 86 fd ff ff       	call   c00104d8 <VgaText::updateCursor()>
c0010752:	83 c4 10             	add    esp,0x10
c0010755:	89 1d c4 e6 02 c0    	mov    DWORD PTR ds:0xc002e6c4,ebx
c001075b:	51                   	push   ecx
c001075c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001075f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010762:	53                   	push   ebx
c0010763:	e8 a4 ff ff ff       	call   c001070c <VgaText::setCursor(int, int)>
c0010768:	83 c4 10             	add    esp,0x10
c001076b:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001076f:	75 07                	jne    c0010778 <setActiveTerminal(VgaText*)+0x55>
c0010771:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010778:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001077c:	83 c4 08             	add    esp,0x8
c001077f:	5b                   	pop    ebx
c0010780:	e9 05 fd ff ff       	jmp    c001048a <VgaText::load()>

c0010785 <doTerminalCycle()>:
c0010785:	83 ec 18             	sub    esp,0x18
c0010788:	a1 c0 e6 02 c0       	mov    eax,ds:0xc002e6c0
c001078d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010790:	50                   	push   eax
c0010791:	a3 c0 e6 02 c0       	mov    ds:0xc002e6c0,eax
c0010796:	e8 88 ff ff ff       	call   c0010723 <setActiveTerminal(VgaText*)>
c001079b:	83 c4 1c             	add    esp,0x1c
c001079e:	c3                   	ret    
c001079f:	90                   	nop

c00107a0 <VgaText::setCursorX(int)>:
c00107a0:	83 ec 10             	sub    esp,0x10
c00107a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00107a7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00107aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107ae:	50                   	push   eax
c00107af:	e8 58 ff ff ff       	call   c001070c <VgaText::setCursor(int, int)>
c00107b4:	83 c4 1c             	add    esp,0x1c
c00107b7:	c3                   	ret    

c00107b8 <VgaText::setCursorY(int)>:
c00107b8:	83 ec 10             	sub    esp,0x10
c00107bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00107bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00107c3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00107c6:	50                   	push   eax
c00107c7:	e8 40 ff ff ff       	call   c001070c <VgaText::setCursor(int, int)>
c00107cc:	83 c4 1c             	add    esp,0x1c
c00107cf:	c3                   	ret    

c00107d0 <VgaText::incrementCursor(bool)>:
c00107d0:	56                   	push   esi
c00107d1:	53                   	push   ebx
c00107d2:	51                   	push   ecx
c00107d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107d7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00107db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00107de:	40                   	inc    eax
c00107df:	83 f8 50             	cmp    eax,0x50
c00107e2:	74 05                	je     c00107e9 <VgaText::incrementCursor(bool)+0x19>
c00107e4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00107e7:	eb 24                	jmp    c001080d <VgaText::incrementCursor(bool)+0x3d>
c00107e9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00107ec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00107f3:	8d 50 01             	lea    edx,[eax+0x1]
c00107f6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00107f9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00107fc:	75 0f                	jne    c001080d <VgaText::incrementCursor(bool)+0x3d>
c00107fe:	83 ec 0c             	sub    esp,0xc
c0010801:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010804:	53                   	push   ebx
c0010805:	e8 f0 fd ff ff       	call   c00105fa <VgaText::scrollScreen()>
c001080a:	83 c4 10             	add    esp,0x10
c001080d:	89 f0                	mov    eax,esi
c001080f:	84 c0                	test   al,al
c0010811:	74 0c                	je     c001081f <VgaText::incrementCursor(bool)+0x4f>
c0010813:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010817:	5a                   	pop    edx
c0010818:	5b                   	pop    ebx
c0010819:	5e                   	pop    esi
c001081a:	e9 b9 fc ff ff       	jmp    c00104d8 <VgaText::updateCursor()>
c001081f:	58                   	pop    eax
c0010820:	5b                   	pop    ebx
c0010821:	5e                   	pop    esi
c0010822:	c3                   	ret    
c0010823:	90                   	nop

c0010824 <VgaText::decrementCursor(bool)>:
c0010824:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010828:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001082c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001082f:	85 c0                	test   eax,eax
c0010831:	74 04                	je     c0010837 <VgaText::decrementCursor(bool)+0x13>
c0010833:	48                   	dec    eax
c0010834:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010837:	84 c9                	test   cl,cl
c0010839:	74 09                	je     c0010844 <VgaText::decrementCursor(bool)+0x20>
c001083b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001083f:	e9 94 fc ff ff       	jmp    c00104d8 <VgaText::updateCursor()>
c0010844:	c3                   	ret    
c0010845:	90                   	nop

c0010846 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010846:	53                   	push   ebx
c0010847:	83 ec 08             	sub    esp,0x8
c001084a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001084e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010852:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010856:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001085a:	3c 07                	cmp    al,0x7
c001085c:	75 2a                	jne    c0010888 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001085e:	a1 78 e7 02 c0       	mov    eax,ds:0xc002e778
c0010863:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001086b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010873:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c001087b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001087f:	83 c4 08             	add    esp,0x8
c0010882:	5b                   	pop    ebx
c0010883:	e9 46 2f 00 00       	jmp    c00137ce <Buzzer::beep(int, int, bool)>
c0010888:	3c 0d                	cmp    al,0xd
c001088a:	75 09                	jne    c0010895 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c001088c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010893:	eb 2c                	jmp    c00108c1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010895:	3c 0a                	cmp    al,0xa
c0010897:	75 31                	jne    c00108ca <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010899:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001089c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00108a3:	8d 50 01             	lea    edx,[eax+0x1]
c00108a6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00108a9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00108ac:	75 0f                	jne    c00108bd <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c00108ae:	83 ec 0c             	sub    esp,0xc
c00108b1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00108b4:	53                   	push   ebx
c00108b5:	e8 40 fd ff ff       	call   c00105fa <VgaText::scrollScreen()>
c00108ba:	83 c4 10             	add    esp,0x10
c00108bd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00108c1:	83 c4 08             	add    esp,0x8
c00108c4:	5b                   	pop    ebx
c00108c5:	e9 0e fc ff ff       	jmp    c00104d8 <VgaText::updateCursor()>
c00108ca:	3c 08                	cmp    al,0x8
c00108cc:	75 25                	jne    c00108f3 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c00108ce:	50                   	push   eax
c00108cf:	50                   	push   eax
c00108d0:	6a 01                	push   0x1
c00108d2:	53                   	push   ebx
c00108d3:	e8 4c ff ff ff       	call   c0010824 <VgaText::decrementCursor(bool)>
c00108d8:	5a                   	pop    edx
c00108d9:	59                   	pop    ecx
c00108da:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00108dd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00108e0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00108e3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00108e6:	6a 20                	push   0x20
c00108e8:	53                   	push   ebx
c00108e9:	e8 b2 fd ff ff       	call   c00106a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00108ee:	83 c4 28             	add    esp,0x28
c00108f1:	5b                   	pop    ebx
c00108f2:	c3                   	ret    
c00108f3:	83 ec 08             	sub    esp,0x8
c00108f6:	0f be c0             	movsx  eax,al
c00108f9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00108fc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00108ff:	51                   	push   ecx
c0010900:	52                   	push   edx
c0010901:	50                   	push   eax
c0010902:	53                   	push   ebx
c0010903:	e8 98 fd ff ff       	call   c00106a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010908:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001090c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010914:	83 c4 28             	add    esp,0x28
c0010917:	5b                   	pop    ebx
c0010918:	e9 b3 fe ff ff       	jmp    c00107d0 <VgaText::incrementCursor(bool)>
c001091d:	90                   	nop

c001091e <VgaText::doUpdate()>:
c001091e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010922:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010925:	85 c0                	test   eax,eax
c0010927:	74 02                	je     c001092b <VgaText::doUpdate()+0xd>
c0010929:	ff e0                	jmp    eax
c001092b:	c3                   	ret    

c001092c <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001092c:	55                   	push   ebp
c001092d:	31 ed                	xor    ebp,ebp
c001092f:	57                   	push   edi
c0010930:	56                   	push   esi
c0010931:	53                   	push   ebx
c0010932:	83 ec 1c             	sub    esp,0x1c
c0010935:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010939:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001093e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010945:	50                   	push   eax
c0010946:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001094b:	50                   	push   eax
c001094c:	e8 97 fc ff ff       	call   c00105e8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010951:	59                   	pop    ecx
c0010952:	0f b6 c0             	movzx  eax,al
c0010955:	5e                   	pop    esi
c0010956:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001095b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001095f:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010962:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010966:	0f b7 f6             	movzx  esi,si
c0010969:	01 f6                	add    esi,esi
c001096b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001096e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010971:	84 c0                	test   al,al
c0010973:	0f 84 fd 00 00 00    	je     c0010a76 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010979:	3c 0d                	cmp    al,0xd
c001097b:	75 0c                	jne    c0010989 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c001097d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010984:	e9 e7 00 00 00       	jmp    c0010a70 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010989:	3c 0a                	cmp    al,0xa
c001098b:	75 47                	jne    c00109d4 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c001098d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010990:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010997:	8d 48 01             	lea    ecx,[eax+0x1]
c001099a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c001099d:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00109a0:	75 0f                	jne    c00109b1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c00109a2:	83 ec 0c             	sub    esp,0xc
c00109a5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00109a8:	53                   	push   ebx
c00109a9:	e8 4c fc ff ff       	call   c00105fa <VgaText::scrollScreen()>
c00109ae:	83 c4 10             	add    esp,0x10
c00109b1:	83 ec 0c             	sub    esp,0xc
c00109b4:	31 ed                	xor    ebp,ebp
c00109b6:	53                   	push   ebx
c00109b7:	e8 1c fb ff ff       	call   c00104d8 <VgaText::updateCursor()>
c00109bc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00109c1:	83 c4 10             	add    esp,0x10
c00109c4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00109c7:	0f b7 f6             	movzx  esi,si
c00109ca:	01 f6                	add    esi,esi
c00109cc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00109cf:	e9 9c 00 00 00       	jmp    c0010a70 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00109d4:	3c 08                	cmp    al,0x8
c00109d6:	75 35                	jne    c0010a0d <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c00109d8:	56                   	push   esi
c00109d9:	56                   	push   esi
c00109da:	6a 01                	push   0x1
c00109dc:	53                   	push   ebx
c00109dd:	e8 42 fe ff ff       	call   c0010824 <VgaText::decrementCursor(bool)>
c00109e2:	58                   	pop    eax
c00109e3:	5a                   	pop    edx
c00109e4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00109e7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00109ea:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00109ed:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00109f0:	6a 20                	push   0x20
c00109f2:	53                   	push   ebx
c00109f3:	e8 a8 fc ff ff       	call   c00106a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00109f8:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00109fd:	83 c4 20             	add    esp,0x20
c0010a00:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010a03:	0f b7 f6             	movzx  esi,si
c0010a06:	01 f6                	add    esi,esi
c0010a08:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010a0b:	eb 63                	jmp    c0010a70 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010a0d:	51                   	push   ecx
c0010a0e:	51                   	push   ecx
c0010a0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010a13:	50                   	push   eax
c0010a14:	e8 75 fc ff ff       	call   c001068e <VgaText::combineCharAndColour(char, unsigned char)>
c0010a19:	83 c4 10             	add    esp,0x10
c0010a1c:	66 89 06             	mov    WORD PTR [esi],ax
c0010a1f:	39 1d c4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6c4,ebx
c0010a25:	75 21                	jne    c0010a48 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010a27:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010a2a:	85 c0                	test   eax,eax
c0010a2c:	74 1a                	je     c0010a48 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010a2e:	52                   	push   edx
c0010a2f:	52                   	push   edx
c0010a30:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010a33:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010a36:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010a3a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010a3e:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010a41:	51                   	push   ecx
c0010a42:	53                   	push   ebx
c0010a43:	ff d0                	call   eax
c0010a45:	83 c4 20             	add    esp,0x20
c0010a48:	83 c6 02             	add    esi,0x2
c0010a4b:	50                   	push   eax
c0010a4c:	50                   	push   eax
c0010a4d:	6a 00                	push   0x0
c0010a4f:	53                   	push   ebx
c0010a50:	e8 7b fd ff ff       	call   c00107d0 <VgaText::incrementCursor(bool)>
c0010a55:	83 c4 10             	add    esp,0x10
c0010a58:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010a5c:	75 0d                	jne    c0010a6b <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010a5e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010a63:	0f b7 f6             	movzx  esi,si
c0010a66:	01 f6                	add    esi,esi
c0010a68:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010a6b:	bd 01 00 00 00       	mov    ebp,0x1
c0010a70:	47                   	inc    edi
c0010a71:	e9 f8 fe ff ff       	jmp    c001096e <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010a76:	83 ec 0c             	sub    esp,0xc
c0010a79:	53                   	push   ebx
c0010a7a:	e8 59 fa ff ff       	call   c00104d8 <VgaText::updateCursor()>
c0010a7f:	83 c4 10             	add    esp,0x10
c0010a82:	89 e8                	mov    eax,ebp
c0010a84:	84 c0                	test   al,al
c0010a86:	74 0c                	je     c0010a94 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010a88:	83 ec 0c             	sub    esp,0xc
c0010a8b:	53                   	push   ebx
c0010a8c:	e8 8d fe ff ff       	call   c001091e <VgaText::doUpdate()>
c0010a91:	83 c4 10             	add    esp,0x10
c0010a94:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010a9b:	83 c4 1c             	add    esp,0x1c
c0010a9e:	5b                   	pop    ebx
c0010a9f:	5e                   	pop    esi
c0010aa0:	5f                   	pop    edi
c0010aa1:	5d                   	pop    ebp
c0010aa2:	c3                   	ret    
c0010aa3:	90                   	nop

c0010aa4 <VgaText::clearScreen()>:
c0010aa4:	57                   	push   edi
c0010aa5:	56                   	push   esi
c0010aa6:	31 f6                	xor    esi,esi
c0010aa8:	53                   	push   ebx
c0010aa9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010aad:	52                   	push   edx
c0010aae:	6a 00                	push   0x0
c0010ab0:	6a 00                	push   0x0
c0010ab2:	53                   	push   ebx
c0010ab3:	e8 54 fc ff ff       	call   c001070c <VgaText::setCursor(int, int)>
c0010ab8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010abf:	83 c4 10             	add    esp,0x10
c0010ac2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010ac5:	7e 20                	jle    c0010ae7 <VgaText::clearScreen()+0x43>
c0010ac7:	31 ff                	xor    edi,edi
c0010ac9:	50                   	push   eax
c0010aca:	50                   	push   eax
c0010acb:	56                   	push   esi
c0010acc:	57                   	push   edi
c0010acd:	47                   	inc    edi
c0010ace:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010ad1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010ad4:	6a 20                	push   0x20
c0010ad6:	53                   	push   ebx
c0010ad7:	e8 c4 fb ff ff       	call   c00106a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010adc:	83 c4 20             	add    esp,0x20
c0010adf:	83 ff 50             	cmp    edi,0x50
c0010ae2:	75 e5                	jne    c0010ac9 <VgaText::clearScreen()+0x25>
c0010ae4:	46                   	inc    esi
c0010ae5:	eb db                	jmp    c0010ac2 <VgaText::clearScreen()+0x1e>
c0010ae7:	83 ec 0c             	sub    esp,0xc
c0010aea:	53                   	push   ebx
c0010aeb:	e8 2e fe ff ff       	call   c001091e <VgaText::doUpdate()>
c0010af0:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010af7:	83 c4 10             	add    esp,0x10
c0010afa:	5b                   	pop    ebx
c0010afb:	5e                   	pop    esi
c0010afc:	5f                   	pop    edi
c0010afd:	c3                   	ret    

c0010afe <VgaText::putchar(char)>:
c0010afe:	56                   	push   esi
c0010aff:	53                   	push   ebx
c0010b00:	83 ec 14             	sub    esp,0x14
c0010b03:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010b07:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b0b:	3c 5b                	cmp    al,0x5b
c0010b0d:	75 18                	jne    c0010b27 <VgaText::putchar(char)+0x29>
c0010b0f:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010b13:	74 1f                	je     c0010b34 <VgaText::putchar(char)+0x36>
c0010b15:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010b1b:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010b22:	e9 bd 00 00 00       	jmp    c0010be4 <VgaText::putchar(char)+0xe6>
c0010b27:	3c 1b                	cmp    al,0x1b
c0010b29:	75 09                	jne    c0010b34 <VgaText::putchar(char)+0x36>
c0010b2b:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010b2f:	e9 b0 00 00 00       	jmp    c0010be4 <VgaText::putchar(char)+0xe6>
c0010b34:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010b37:	84 c9                	test   cl,cl
c0010b39:	0f 84 92 00 00 00    	je     c0010bd1 <VgaText::putchar(char)+0xd3>
c0010b3f:	8d 50 c0             	lea    edx,[eax-0x40]
c0010b42:	80 fa 3e             	cmp    dl,0x3e
c0010b45:	77 76                	ja     c0010bbd <VgaText::putchar(char)+0xbf>
c0010b47:	3c 6d                	cmp    al,0x6d
c0010b49:	75 47                	jne    c0010b92 <VgaText::putchar(char)+0x94>
c0010b4b:	31 f6                	xor    esi,esi
c0010b4d:	31 d2                	xor    edx,edx
c0010b4f:	31 c0                	xor    eax,eax
c0010b51:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010b54:	7e 2d                	jle    c0010b83 <VgaText::putchar(char)+0x85>
c0010b56:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010b5b:	80 fa 3b             	cmp    dl,0x3b
c0010b5e:	75 17                	jne    c0010b77 <VgaText::putchar(char)+0x79>
c0010b60:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010b64:	50                   	push   eax
c0010b65:	53                   	push   ebx
c0010b66:	e8 83 f9 ff ff       	call   c00104ee <VgaText::doANSI_SGR(int)>
c0010b6b:	59                   	pop    ecx
c0010b6c:	31 d2                	xor    edx,edx
c0010b6e:	58                   	pop    eax
c0010b6f:	31 c0                	xor    eax,eax
c0010b71:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010b75:	eb 09                	jmp    c0010b80 <VgaText::putchar(char)+0x82>
c0010b77:	6b c0 0a             	imul   eax,eax,0xa
c0010b7a:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010b7e:	88 ca                	mov    dl,cl
c0010b80:	46                   	inc    esi
c0010b81:	eb ce                	jmp    c0010b51 <VgaText::putchar(char)+0x53>
c0010b83:	84 d2                	test   dl,dl
c0010b85:	74 2e                	je     c0010bb5 <VgaText::putchar(char)+0xb7>
c0010b87:	50                   	push   eax
c0010b88:	53                   	push   ebx
c0010b89:	e8 60 f9 ff ff       	call   c00104ee <VgaText::doANSI_SGR(int)>
c0010b8e:	58                   	pop    eax
c0010b8f:	5a                   	pop    edx
c0010b90:	eb 23                	jmp    c0010bb5 <VgaText::putchar(char)+0xb7>
c0010b92:	3c 4a                	cmp    al,0x4a
c0010b94:	75 1f                	jne    c0010bb5 <VgaText::putchar(char)+0xb7>
c0010b96:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010b9a:	75 19                	jne    c0010bb5 <VgaText::putchar(char)+0xb7>
c0010b9c:	83 ec 0c             	sub    esp,0xc
c0010b9f:	53                   	push   ebx
c0010ba0:	e8 ff fe ff ff       	call   c0010aa4 <VgaText::clearScreen()>
c0010ba5:	83 c4 0c             	add    esp,0xc
c0010ba8:	6a 00                	push   0x0
c0010baa:	6a 00                	push   0x0
c0010bac:	53                   	push   ebx
c0010bad:	e8 5a fb ff ff       	call   c001070c <VgaText::setCursor(int, int)>
c0010bb2:	83 c4 10             	add    esp,0x10
c0010bb5:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010bbb:	eb 27                	jmp    c0010be4 <VgaText::putchar(char)+0xe6>
c0010bbd:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010bc0:	83 fa 0e             	cmp    edx,0xe
c0010bc3:	7f 1f                	jg     c0010be4 <VgaText::putchar(char)+0xe6>
c0010bc5:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010bc8:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010bcb:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010bcf:	eb 13                	jmp    c0010be4 <VgaText::putchar(char)+0xe6>
c0010bd1:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010bd4:	0f be c0             	movsx  eax,al
c0010bd7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010bda:	50                   	push   eax
c0010bdb:	53                   	push   ebx
c0010bdc:	e8 65 fc ff ff       	call   c0010846 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010be1:	83 c4 10             	add    esp,0x10
c0010be4:	83 c4 14             	add    esp,0x14
c0010be7:	5b                   	pop    ebx
c0010be8:	5e                   	pop    esi
c0010be9:	c3                   	ret    

c0010bea <VgaText::putx(unsigned int)>:
c0010bea:	57                   	push   edi
c0010beb:	b9 11 00 00 00       	mov    ecx,0x11
c0010bf0:	56                   	push   esi
c0010bf1:	be a2 a9 02 c0       	mov    esi,0xc002a9a2
c0010bf6:	53                   	push   ebx
c0010bf7:	83 ec 20             	sub    esp,0x20
c0010bfa:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010bfe:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010c02:	fc                   	cld    
c0010c03:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c05:	be 08 00 00 00       	mov    esi,0x8
c0010c0a:	50                   	push   eax
c0010c0b:	50                   	push   eax
c0010c0c:	89 d8                	mov    eax,ebx
c0010c0e:	c1 e3 04             	shl    ebx,0x4
c0010c11:	c1 e8 1c             	shr    eax,0x1c
c0010c14:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010c19:	50                   	push   eax
c0010c1a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010c1e:	e8 db fe ff ff       	call   c0010afe <VgaText::putchar(char)>
c0010c23:	83 c4 10             	add    esp,0x10
c0010c26:	4e                   	dec    esi
c0010c27:	75 e1                	jne    c0010c0a <VgaText::putx(unsigned int)+0x20>
c0010c29:	83 c4 20             	add    esp,0x20
c0010c2c:	5b                   	pop    ebx
c0010c2d:	5e                   	pop    esi
c0010c2e:	5f                   	pop    edi
c0010c2f:	c3                   	ret    

c0010c30 <VgaText::puts(char const*)>:
c0010c30:	53                   	push   ebx
c0010c31:	83 ec 08             	sub    esp,0x8
c0010c34:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c38:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010c3b:	84 c0                	test   al,al
c0010c3d:	74 12                	je     c0010c51 <VgaText::puts(char const*)+0x21>
c0010c3f:	43                   	inc    ebx
c0010c40:	51                   	push   ecx
c0010c41:	51                   	push   ecx
c0010c42:	50                   	push   eax
c0010c43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c47:	e8 b2 fe ff ff       	call   c0010afe <VgaText::putchar(char)>
c0010c4c:	83 c4 10             	add    esp,0x10
c0010c4f:	eb e7                	jmp    c0010c38 <VgaText::puts(char const*)+0x8>
c0010c51:	83 c4 08             	add    esp,0x8
c0010c54:	5b                   	pop    ebx
c0010c55:	c3                   	ret    

c0010c56 <VgaText::VgaText(char const*)>:
c0010c56:	57                   	push   edi
c0010c57:	56                   	push   esi
c0010c58:	53                   	push   ebx
c0010c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c5d:	83 ec 08             	sub    esp,0x8
c0010c60:	6a 00                	push   0x0
c0010c62:	50                   	push   eax
c0010c63:	e8 44 05 00 00       	call   c00111ac <UnixFile::UnixFile(int)>
c0010c68:	83 c4 10             	add    esp,0x10
c0010c6b:	ba 08 aa 02 c0       	mov    edx,0xc002aa08
c0010c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c74:	89 10                	mov    DWORD PTR [eax],edx
c0010c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c7a:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010c81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c85:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0010c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c90:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0010c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c98:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0010c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ca0:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0010ca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cab:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0010cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cb6:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0010cbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cc1:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0010cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ccc:	8d 50 60             	lea    edx,[eax+0x60]
c0010ccf:	bb a0 e6 02 c0       	mov    ebx,0xc002e6a0
c0010cd4:	b8 08 00 00 00       	mov    eax,0x8
c0010cd9:	fc                   	cld    
c0010cda:	89 d7                	mov    edi,edx
c0010cdc:	89 de                	mov    esi,ebx
c0010cde:	89 c1                	mov    ecx,eax
c0010ce0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ce6:	05 82 00 00 00       	add    eax,0x82
c0010ceb:	83 ec 08             	sub    esp,0x8
c0010cee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010cf2:	50                   	push   eax
c0010cf3:	e8 14 fb fe ff       	call   c000080c <strcpy>
c0010cf8:	83 c4 10             	add    esp,0x10
c0010cfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cff:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010d06:	83 ec 0c             	sub    esp,0xc
c0010d09:	6a 01                	push   0x1
c0010d0b:	e8 df 08 00 00       	call   c00115ef <Virt::allocateKernelVirtualPages(int)>
c0010d10:	83 c4 10             	add    esp,0x10
c0010d13:	89 c2                	mov    edx,eax
c0010d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d19:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010d1c:	8b 1d 70 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e770
c0010d22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d26:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010d29:	89 c6                	mov    esi,eax
c0010d2b:	e8 35 f0 ff ff       	call   c000fd65 <Phys::allocatePage()>
c0010d30:	68 05 0c 00 00       	push   0xc05
c0010d35:	56                   	push   esi
c0010d36:	50                   	push   eax
c0010d37:	53                   	push   ebx
c0010d38:	e8 59 0f 00 00       	call   c0011c96 <VAS::mapPage(unsigned long, unsigned long, int)>
c0010d3d:	83 c4 10             	add    esp,0x10
c0010d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d44:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010d47:	83 ec 04             	sub    esp,0x4
c0010d4a:	68 00 0f 00 00       	push   0xf00
c0010d4f:	6a 00                	push   0x0
c0010d51:	50                   	push   eax
c0010d52:	e8 f9 f9 fe ff       	call   c0000750 <memset>
c0010d57:	83 c4 10             	add    esp,0x10
c0010d5a:	83 ec 04             	sub    esp,0x4
c0010d5d:	6a 00                	push   0x0
c0010d5f:	6a 07                	push   0x7
c0010d61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d65:	e8 18 f8 ff ff       	call   c0010582 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010d6a:	83 c4 10             	add    esp,0x10
c0010d6d:	83 ec 04             	sub    esp,0x4
c0010d70:	6a 00                	push   0x0
c0010d72:	6a 00                	push   0x0
c0010d74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d78:	e8 8f f9 ff ff       	call   c001070c <VgaText::setCursor(int, int)>
c0010d7d:	83 c4 10             	add    esp,0x10
c0010d80:	83 ec 0c             	sub    esp,0xc
c0010d83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d87:	e8 18 fd ff ff       	call   c0010aa4 <VgaText::clearScreen()>
c0010d8c:	83 c4 10             	add    esp,0x10
c0010d8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d93:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0010d97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d9b:	05 02 01 00 00       	add    eax,0x102
c0010da0:	83 ec 04             	sub    esp,0x4
c0010da3:	68 96 00 00 00       	push   0x96
c0010da8:	6a 00                	push   0x0
c0010daa:	50                   	push   eax
c0010dab:	e8 a0 f9 fe ff       	call   c0000750 <memset>
c0010db0:	83 c4 10             	add    esp,0x10
c0010db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010db7:	05 98 01 00 00       	add    eax,0x198
c0010dbc:	83 ec 04             	sub    esp,0x4
c0010dbf:	68 2c 01 00 00       	push   0x12c
c0010dc4:	6a 00                	push   0x0
c0010dc6:	50                   	push   eax
c0010dc7:	e8 84 f9 fe ff       	call   c0000750 <memset>
c0010dcc:	83 c4 10             	add    esp,0x10
c0010dcf:	90                   	nop
c0010dd0:	5b                   	pop    ebx
c0010dd1:	5e                   	pop    esi
c0010dd2:	5f                   	pop    edi
c0010dd3:	c3                   	ret    

c0010dd4 <VgaText::receiveKey(unsigned char)>:
c0010dd4:	55                   	push   ebp
c0010dd5:	57                   	push   edi
c0010dd6:	56                   	push   esi
c0010dd7:	53                   	push   ebx
c0010dd8:	83 ec 1c             	sub    esp,0x1c
c0010ddb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010ddf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010de3:	84 db                	test   bl,bl
c0010de5:	0f 84 c9 00 00 00    	je     c0010eb4 <VgaText::receiveKey(unsigned char)+0xe0>
c0010deb:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010df1:	80 fb 08             	cmp    bl,0x8
c0010df4:	75 2c                	jne    c0010e22 <VgaText::receiveKey(unsigned char)+0x4e>
c0010df6:	83 ec 0c             	sub    esp,0xc
c0010df9:	57                   	push   edi
c0010dfa:	e8 6d f9 fe ff       	call   c000076c <strlen>
c0010dff:	83 c4 10             	add    esp,0x10
c0010e02:	85 c0                	test   eax,eax
c0010e04:	74 41                	je     c0010e47 <VgaText::receiveKey(unsigned char)+0x73>
c0010e06:	50                   	push   eax
c0010e07:	50                   	push   eax
c0010e08:	6a 08                	push   0x8
c0010e0a:	56                   	push   esi
c0010e0b:	e8 ee fc ff ff       	call   c0010afe <VgaText::putchar(char)>
c0010e10:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010e13:	e8 54 f9 fe ff       	call   c000076c <strlen>
c0010e18:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010e20:	eb 22                	jmp    c0010e44 <VgaText::receiveKey(unsigned char)+0x70>
c0010e22:	0f be c3             	movsx  eax,bl
c0010e25:	52                   	push   edx
c0010e26:	52                   	push   edx
c0010e27:	50                   	push   eax
c0010e28:	56                   	push   esi
c0010e29:	e8 d0 fc ff ff       	call   c0010afe <VgaText::putchar(char)>
c0010e2e:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010e32:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010e37:	59                   	pop    ecx
c0010e38:	5d                   	pop    ebp
c0010e39:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010e3d:	50                   	push   eax
c0010e3e:	57                   	push   edi
c0010e3f:	e8 08 fb fe ff       	call   c000094c <strcat>
c0010e44:	83 c4 10             	add    esp,0x10
c0010e47:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010e4e:	75 05                	jne    c0010e55 <VgaText::receiveKey(unsigned char)+0x81>
c0010e50:	80 fb 0a             	cmp    bl,0xa
c0010e53:	75 53                	jne    c0010ea8 <VgaText::receiveKey(unsigned char)+0xd4>
c0010e55:	83 ec 0c             	sub    esp,0xc
c0010e58:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010e5e:	53                   	push   ebx
c0010e5f:	e8 08 f9 fe ff       	call   c000076c <strlen>
c0010e64:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010e67:	89 c5                	mov    ebp,eax
c0010e69:	e8 fe f8 fe ff       	call   c000076c <strlen>
c0010e6e:	83 c4 10             	add    esp,0x10
c0010e71:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010e75:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010e7a:	76 10                	jbe    c0010e8c <VgaText::receiveKey(unsigned char)+0xb8>
c0010e7c:	83 ec 0c             	sub    esp,0xc
c0010e7f:	68 b3 a9 02 c0       	push   0xc002a9b3
c0010e84:	e8 d6 94 00 00       	call   c001a35f <Krnl::panic(char const*)>
c0010e89:	83 c4 10             	add    esp,0x10
c0010e8c:	50                   	push   eax
c0010e8d:	50                   	push   eax
c0010e8e:	57                   	push   edi
c0010e8f:	53                   	push   ebx
c0010e90:	e8 b7 fa fe ff       	call   c000094c <strcat>
c0010e95:	83 c4 0c             	add    esp,0xc
c0010e98:	68 96 00 00 00       	push   0x96
c0010e9d:	6a 00                	push   0x0
c0010e9f:	57                   	push   edi
c0010ea0:	e8 ab f8 fe ff       	call   c0000750 <memset>
c0010ea5:	83 c4 10             	add    esp,0x10
c0010ea8:	83 ec 0c             	sub    esp,0xc
c0010eab:	56                   	push   esi
c0010eac:	e8 6d fa ff ff       	call   c001091e <VgaText::doUpdate()>
c0010eb1:	83 c4 10             	add    esp,0x10
c0010eb4:	83 c4 1c             	add    esp,0x1c
c0010eb7:	5b                   	pop    ebx
c0010eb8:	5e                   	pop    esi
c0010eb9:	5f                   	pop    edi
c0010eba:	5d                   	pop    ebp
c0010ebb:	c3                   	ret    

c0010ebc <VgaText::write(unsigned long long, void*, int*)>:
c0010ebc:	55                   	push   ebp
c0010ebd:	57                   	push   edi
c0010ebe:	56                   	push   esi
c0010ebf:	53                   	push   ebx
c0010ec0:	83 ec 0c             	sub    esp,0xc
c0010ec3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010ec7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010ecb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010ecf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010ed6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010ed9:	39 eb                	cmp    ebx,ebp
c0010edb:	74 13                	je     c0010ef0 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010edd:	43                   	inc    ebx
c0010ede:	50                   	push   eax
c0010edf:	50                   	push   eax
c0010ee0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010ee4:	50                   	push   eax
c0010ee5:	56                   	push   esi
c0010ee6:	e8 13 fc ff ff       	call   c0010afe <VgaText::putchar(char)>
c0010eeb:	83 c4 10             	add    esp,0x10
c0010eee:	eb e9                	jmp    c0010ed9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010ef0:	83 ec 0c             	sub    esp,0xc
c0010ef3:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010efa:	56                   	push   esi
c0010efb:	e8 1e fa ff ff       	call   c001091e <VgaText::doUpdate()>
c0010f00:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010f04:	89 38                	mov    DWORD PTR [eax],edi
c0010f06:	83 c4 1c             	add    esp,0x1c
c0010f09:	31 c0                	xor    eax,eax
c0010f0b:	5b                   	pop    ebx
c0010f0c:	5e                   	pop    esi
c0010f0d:	5f                   	pop    edi
c0010f0e:	5d                   	pop    ebp
c0010f0f:	c3                   	ret    

c0010f10 <newTerminal(char*)>:
c0010f10:	83 ec 28             	sub    esp,0x28
c0010f13:	68 c4 02 00 00       	push   0x2c4
c0010f18:	e8 4c ea ff ff       	call   c000f969 <malloc>
c0010f1d:	5a                   	pop    edx
c0010f1e:	59                   	pop    ecx
c0010f1f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010f23:	50                   	push   eax
c0010f24:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010f28:	e8 29 fd ff ff       	call   c0010c56 <VgaText::VgaText(char const*)>
c0010f2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f31:	83 c4 2c             	add    esp,0x2c
c0010f34:	c3                   	ret    
c0010f35:	90                   	nop

c0010f36 <TSS::TSS()>:
c0010f36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f3a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010f41:	90                   	nop
c0010f42:	c3                   	ret    
c0010f43:	90                   	nop

c0010f44 <TSS::setESP(unsigned long)>:
c0010f44:	55                   	push   ebp
c0010f45:	89 e5                	mov    ebp,esp
c0010f47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f4d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010f50:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f53:	90                   	nop
c0010f54:	5d                   	pop    ebp
c0010f55:	c3                   	ret    

c0010f56 <TSS::flush()>:
c0010f56:	55                   	push   ebp
c0010f57:	89 e5                	mov    ebp,esp
c0010f59:	83 ec 10             	sub    esp,0x10
c0010f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f61:	83 c8 03             	or     eax,0x3
c0010f64:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010f68:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010f6c:	66 89 d0             	mov    ax,dx
c0010f6f:	0f 00 d8             	ltr    ax
c0010f72:	90                   	nop
c0010f73:	c9                   	leave  
c0010f74:	c3                   	ret    
c0010f75:	90                   	nop

c0010f76 <TSS::setup(unsigned long, unsigned long)>:
c0010f76:	55                   	push   ebp
c0010f77:	89 e5                	mov    ebp,esp
c0010f79:	83 ec 18             	sub    esp,0x18
c0010f7c:	83 ec 0c             	sub    esp,0xc
c0010f7f:	6a 68                	push   0x68
c0010f81:	e8 e3 e9 ff ff       	call   c000f969 <malloc>
c0010f86:	83 c4 10             	add    esp,0x10
c0010f89:	89 c2                	mov    edx,eax
c0010f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f8e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f97:	83 ec 04             	sub    esp,0x4
c0010f9a:	6a 68                	push   0x68
c0010f9c:	6a 00                	push   0x0
c0010f9e:	50                   	push   eax
c0010f9f:	e8 ac f7 fe ff       	call   c0000750 <memset>
c0010fa4:	83 c4 10             	add    esp,0x10
c0010fa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010faa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fad:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010fb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fb9:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010fbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fc2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fc5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010fc8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fd1:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010fd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fdd:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010fe3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fe6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fe9:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010fef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ff2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ff5:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010ffb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ffe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011001:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011007:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001100a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001100d:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011013:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011016:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011019:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001101c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001101f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011022:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011025:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011028:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001102b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001102e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011031:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011038:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001103b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001103e:	0f 20 da             	mov    edx,cr3
c0011041:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011044:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011047:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c001104a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001104d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011050:	83 ec 08             	sub    esp,0x8
c0011053:	50                   	push   eax
c0011054:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011057:	50                   	push   eax
c0011058:	e8 01 e0 ff ff       	call   c000f05e <GDTEntry::setBase(unsigned int)>
c001105d:	83 c4 10             	add    esp,0x10
c0011060:	83 ec 08             	sub    esp,0x8
c0011063:	6a 68                	push   0x68
c0011065:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011068:	50                   	push   eax
c0011069:	e8 0c e0 ff ff       	call   c000f07a <GDTEntry::setLimit(unsigned int)>
c001106e:	83 c4 10             	add    esp,0x10
c0011071:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011075:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011078:	83 e0 0f             	and    eax,0xf
c001107b:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001107e:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011081:	83 c8 40             	or     eax,0x40
c0011084:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011087:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001108c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011092:	05 78 01 00 00       	add    eax,0x178
c0011097:	83 ec 04             	sub    esp,0x4
c001109a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001109d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00110a0:	50                   	push   eax
c00110a1:	e8 08 e0 ff ff       	call   c000f0ae <GDT::addEntry(GDTEntry)>
c00110a6:	83 c4 10             	add    esp,0x10
c00110a9:	89 c2                	mov    edx,eax
c00110ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110ae:	89 10                	mov    DWORD PTR [eax],edx
c00110b0:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00110b5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00110bb:	05 78 01 00 00       	add    eax,0x178
c00110c0:	83 ec 0c             	sub    esp,0xc
c00110c3:	50                   	push   eax
c00110c4:	e8 0f e0 ff ff       	call   c000f0d8 <GDT::flush()>
c00110c9:	83 c4 10             	add    esp,0x10
c00110cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00110d1:	c9                   	leave  
c00110d2:	c3                   	ret    
c00110d3:	90                   	nop

c00110d4 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00110d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00110dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110df:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00110e4:	75 08                	jne    c00110ee <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00110e6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00110ec:	eb 38                	jmp    c0011126 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00110ee:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00110f3:	75 17                	jne    c001110c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00110f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110fa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00110fd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011103:	8b 10                	mov    edx,DWORD PTR [eax]
c0011105:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011109:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001110c:	89 c1                	mov    ecx,eax
c001110e:	83 e1 fd             	and    ecx,0xfffffffd
c0011111:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011117:	74 cd                	je     c00110e6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011119:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001111e:	83 e0 ef             	and    eax,0xffffffef
c0011121:	83 f8 08             	cmp    eax,0x8
c0011124:	76 c0                	jbe    c00110e6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011126:	31 c0                	xor    eax,eax
c0011128:	c3                   	ret    
c0011129:	90                   	nop

c001112a <ReservedFilename::isAtty()>:
c001112a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001112e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011131:	31 c0                	xor    eax,eax
c0011133:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011139:	74 09                	je     c0011144 <ReservedFilename::isAtty()+0x1a>
c001113b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011141:	0f 94 c0             	sete   al
c0011144:	c3                   	ret    
c0011145:	90                   	nop

c0011146 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001114a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001114e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011151:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011155:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001115a:	75 08                	jne    c0011164 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001115c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011162:	eb 3d                	jmp    c00111a1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011164:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011169:	75 17                	jne    c0011182 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001116b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011170:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011173:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011179:	8b 10                	mov    edx,DWORD PTR [eax]
c001117b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001117f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011182:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011187:	75 04                	jne    c001118d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011189:	89 0a                	mov    DWORD PTR [edx],ecx
c001118b:	eb 14                	jmp    c00111a1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001118d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011192:	74 c8                	je     c001115c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011194:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011199:	83 e0 ef             	and    eax,0xffffffef
c001119c:	83 f8 08             	cmp    eax,0x8
c001119f:	76 bb                	jbe    c001115c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00111a1:	31 c0                	xor    eax,eax
c00111a3:	c3                   	ret    

c00111a4 <UnixFile::getFileDescriptor()>:
c00111a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111ab:	c3                   	ret    

c00111ac <UnixFile::UnixFile(int)>:
c00111ac:	53                   	push   ebx
c00111ad:	83 ec 28             	sub    esp,0x28
c00111b0:	ba d0 aa 02 c0       	mov    edx,0xc002aad0
c00111b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00111b9:	89 10                	mov    DWORD PTR [eax],edx
c00111bb:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00111c3:	0f 8f 8c 01 00 00    	jg     c0011355 <UnixFile::UnixFile(int)+0x1a9>
c00111c9:	a1 a0 d5 02 c0       	mov    eax,ds:0xc002d5a0
c00111ce:	8d 50 01             	lea    edx,[eax+0x1]
c00111d1:	89 15 a0 d5 02 c0    	mov    DWORD PTR ds:0xc002d5a0,edx
c00111d7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00111db:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00111de:	83 ec 08             	sub    esp,0x8
c00111e1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00111e5:	68 58 e7 02 c0       	push   0xc002e758
c00111ea:	e8 17 79 01 00       	call   c0028b06 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00111ef:	83 c4 10             	add    esp,0x10
c00111f2:	a0 54 e7 02 c0       	mov    al,ds:0xc002e754
c00111f7:	83 f0 01             	xor    eax,0x1
c00111fa:	84 c0                	test   al,al
c00111fc:	0f 84 54 01 00 00    	je     c0011356 <UnixFile::UnixFile(int)+0x1aa>
c0011202:	c6 05 54 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e754,0x1
c0011209:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011211:	83 ec 0c             	sub    esp,0xc
c0011214:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011218:	e8 4c e7 ff ff       	call   c000f969 <malloc>
c001121d:	83 c4 10             	add    esp,0x10
c0011220:	89 c3                	mov    ebx,eax
c0011222:	83 ec 08             	sub    esp,0x8
c0011225:	68 03 ff ff 0f       	push   0xfffff03
c001122a:	53                   	push   ebx
c001122b:	e8 2c 01 00 00       	call   c001135c <ReservedFilename::ReservedFilename(int)>
c0011230:	83 c4 10             	add    esp,0x10
c0011233:	89 1d 4c e7 02 c0    	mov    DWORD PTR ds:0xc002e74c,ebx
c0011239:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011241:	83 ec 0c             	sub    esp,0xc
c0011244:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011248:	e8 1c e7 ff ff       	call   c000f969 <malloc>
c001124d:	83 c4 10             	add    esp,0x10
c0011250:	89 c3                	mov    ebx,eax
c0011252:	83 ec 08             	sub    esp,0x8
c0011255:	68 01 ff ff 0f       	push   0xfffff01
c001125a:	53                   	push   ebx
c001125b:	e8 fc 00 00 00       	call   c001135c <ReservedFilename::ReservedFilename(int)>
c0011260:	83 c4 10             	add    esp,0x10
c0011263:	89 1d 50 e7 02 c0    	mov    DWORD PTR ds:0xc002e750,ebx
c0011269:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011271:	83 ec 0c             	sub    esp,0xc
c0011274:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011278:	e8 ec e6 ff ff       	call   c000f969 <malloc>
c001127d:	83 c4 10             	add    esp,0x10
c0011280:	89 c3                	mov    ebx,eax
c0011282:	83 ec 08             	sub    esp,0x8
c0011285:	68 00 ff ff 0f       	push   0xfffff00
c001128a:	53                   	push   ebx
c001128b:	e8 cc 00 00 00       	call   c001135c <ReservedFilename::ReservedFilename(int)>
c0011290:	83 c4 10             	add    esp,0x10
c0011293:	89 1d 44 e7 02 c0    	mov    DWORD PTR ds:0xc002e744,ebx
c0011299:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00112a1:	83 ec 0c             	sub    esp,0xc
c00112a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00112a8:	e8 bc e6 ff ff       	call   c000f969 <malloc>
c00112ad:	83 c4 10             	add    esp,0x10
c00112b0:	89 c3                	mov    ebx,eax
c00112b2:	83 ec 08             	sub    esp,0x8
c00112b5:	68 02 ff ff 0f       	push   0xfffff02
c00112ba:	53                   	push   ebx
c00112bb:	e8 9c 00 00 00       	call   c001135c <ReservedFilename::ReservedFilename(int)>
c00112c0:	83 c4 10             	add    esp,0x10
c00112c3:	89 1d 48 e7 02 c0    	mov    DWORD PTR ds:0xc002e748,ebx
c00112c9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00112d1:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00112d6:	7f 7e                	jg     c0011356 <UnixFile::UnixFile(int)+0x1aa>
c00112d8:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00112e0:	83 ec 0c             	sub    esp,0xc
c00112e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00112e7:	e8 7d e6 ff ff       	call   c000f969 <malloc>
c00112ec:	83 c4 10             	add    esp,0x10
c00112ef:	89 c3                	mov    ebx,eax
c00112f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00112f5:	05 10 ff ff 0f       	add    eax,0xfffff10
c00112fa:	83 ec 08             	sub    esp,0x8
c00112fd:	50                   	push   eax
c00112fe:	53                   	push   ebx
c00112ff:	e8 58 00 00 00       	call   c001135c <ReservedFilename::ReservedFilename(int)>
c0011304:	83 c4 10             	add    esp,0x10
c0011307:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001130b:	89 1c 85 20 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd18e0],ebx
c0011312:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001131a:	83 ec 0c             	sub    esp,0xc
c001131d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011321:	e8 43 e6 ff ff       	call   c000f969 <malloc>
c0011326:	83 c4 10             	add    esp,0x10
c0011329:	89 c3                	mov    ebx,eax
c001132b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001132f:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011334:	83 ec 08             	sub    esp,0x8
c0011337:	50                   	push   eax
c0011338:	53                   	push   ebx
c0011339:	e8 1e 00 00 00       	call   c001135c <ReservedFilename::ReservedFilename(int)>
c001133e:	83 c4 10             	add    esp,0x10
c0011341:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011345:	89 1c 85 e0 e6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1920],ebx
c001134c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011350:	e9 7c ff ff ff       	jmp    c00112d1 <UnixFile::UnixFile(int)+0x125>
c0011355:	90                   	nop
c0011356:	83 c4 28             	add    esp,0x28
c0011359:	5b                   	pop    ebx
c001135a:	c3                   	ret    
c001135b:	90                   	nop

c001135c <ReservedFilename::ReservedFilename(int)>:
c001135c:	83 ec 0c             	sub    esp,0xc
c001135f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011363:	83 ec 08             	sub    esp,0x8
c0011366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001136a:	50                   	push   eax
c001136b:	e8 3c fe ff ff       	call   c00111ac <UnixFile::UnixFile(int)>
c0011370:	83 c4 10             	add    esp,0x10
c0011373:	ba ec aa 02 c0       	mov    edx,0xc002aaec
c0011378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001137c:	89 10                	mov    DWORD PTR [eax],edx
c001137e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011382:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011386:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011389:	90                   	nop
c001138a:	83 c4 0c             	add    esp,0xc
c001138d:	c3                   	ret    

c001138e <UnixFile::~UnixFile()>:
c001138e:	83 ec 1c             	sub    esp,0x1c
c0011391:	ba d0 aa 02 c0       	mov    edx,0xc002aad0
c0011396:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001139a:	89 10                	mov    DWORD PTR [eax],edx
c001139c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00113a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113a3:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00113a8:	7f 73                	jg     c001141d <UnixFile::~UnixFile()+0x8f>
c00113aa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00113b2:	83 ec 0c             	sub    esp,0xc
c00113b5:	68 58 e7 02 c0       	push   0xc002e758
c00113ba:	e8 1b 78 01 00       	call   c0028bda <LinkedList<UnixFile>::getFirstElement()>
c00113bf:	83 c4 10             	add    esp,0x10
c00113c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00113c6:	83 ec 0c             	sub    esp,0xc
c00113c9:	68 58 e7 02 c0       	push   0xc002e758
c00113ce:	e8 0f 78 01 00       	call   c0028be2 <LinkedList<UnixFile>::removeFirst()>
c00113d3:	83 c4 10             	add    esp,0x10
c00113d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00113da:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00113de:	74 40                	je     c0011420 <UnixFile::~UnixFile()+0x92>
c00113e0:	83 ec 08             	sub    esp,0x8
c00113e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00113e7:	68 58 e7 02 c0       	push   0xc002e758
c00113ec:	e8 15 77 01 00       	call   c0028b06 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00113f1:	83 c4 10             	add    esp,0x10
c00113f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00113f8:	8d 50 01             	lea    edx,[eax+0x1]
c00113fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00113ff:	3d 88 13 00 00       	cmp    eax,0x1388
c0011404:	0f 94 c0             	sete   al
c0011407:	84 c0                	test   al,al
c0011409:	74 a7                	je     c00113b2 <UnixFile::~UnixFile()+0x24>
c001140b:	83 ec 0c             	sub    esp,0xc
c001140e:	68 a8 aa 02 c0       	push   0xc002aaa8
c0011413:	e8 47 8f 00 00       	call   c001a35f <Krnl::panic(char const*)>
c0011418:	83 c4 10             	add    esp,0x10
c001141b:	eb 95                	jmp    c00113b2 <UnixFile::~UnixFile()+0x24>
c001141d:	90                   	nop
c001141e:	eb 01                	jmp    c0011421 <UnixFile::~UnixFile()+0x93>
c0011420:	90                   	nop
c0011421:	90                   	nop
c0011422:	83 c4 1c             	add    esp,0x1c
c0011425:	c3                   	ret    

c0011426 <UnixFile::~UnixFile()>:
c0011426:	83 ec 0c             	sub    esp,0xc
c0011429:	83 ec 0c             	sub    esp,0xc
c001142c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011430:	e8 59 ff ff ff       	call   c001138e <UnixFile::~UnixFile()>
c0011435:	83 c4 10             	add    esp,0x10
c0011438:	83 ec 08             	sub    esp,0x8
c001143b:	6a 0c                	push   0xc
c001143d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011441:	e8 a3 14 00 00       	call   c00128e9 <operator delete(void*, unsigned long)>
c0011446:	83 c4 10             	add    esp,0x10
c0011449:	83 c4 0c             	add    esp,0xc
c001144c:	c3                   	ret    
c001144d:	90                   	nop

c001144e <ReservedFilename::~ReservedFilename()>:
c001144e:	83 ec 0c             	sub    esp,0xc
c0011451:	ba ec aa 02 c0       	mov    edx,0xc002aaec
c0011456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001145a:	89 10                	mov    DWORD PTR [eax],edx
c001145c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011460:	83 ec 0c             	sub    esp,0xc
c0011463:	50                   	push   eax
c0011464:	e8 25 ff ff ff       	call   c001138e <UnixFile::~UnixFile()>
c0011469:	83 c4 10             	add    esp,0x10
c001146c:	90                   	nop
c001146d:	83 c4 0c             	add    esp,0xc
c0011470:	c3                   	ret    
c0011471:	90                   	nop

c0011472 <ReservedFilename::~ReservedFilename()>:
c0011472:	83 ec 0c             	sub    esp,0xc
c0011475:	83 ec 0c             	sub    esp,0xc
c0011478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001147c:	e8 cd ff ff ff       	call   c001144e <ReservedFilename::~ReservedFilename()>
c0011481:	83 c4 10             	add    esp,0x10
c0011484:	83 ec 08             	sub    esp,0x8
c0011487:	6a 0c                	push   0xc
c0011489:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001148d:	e8 57 14 00 00       	call   c00128e9 <operator delete(void*, unsigned long)>
c0011492:	83 c4 10             	add    esp,0x10
c0011495:	83 c4 0c             	add    esp,0xc
c0011498:	c3                   	ret    

c0011499 <getFromFileDescriptor(int)>:
c0011499:	53                   	push   ebx
c001149a:	83 ec 08             	sub    esp,0x8
c001149d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00114a1:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00114a7:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00114ad:	7f 2c                	jg     c00114db <getFromFileDescriptor(int)+0x42>
c00114af:	83 ec 0c             	sub    esp,0xc
c00114b2:	68 58 e7 02 c0       	push   0xc002e758
c00114b7:	e8 1e 77 01 00       	call   c0028bda <LinkedList<UnixFile>::getFirstElement()>
c00114bc:	83 c4 10             	add    esp,0x10
c00114bf:	85 c0                	test   eax,eax
c00114c1:	75 04                	jne    c00114c7 <getFromFileDescriptor(int)+0x2e>
c00114c3:	31 c0                	xor    eax,eax
c00114c5:	eb 6e                	jmp    c0011535 <getFromFileDescriptor(int)+0x9c>
c00114c7:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00114ca:	74 69                	je     c0011535 <getFromFileDescriptor(int)+0x9c>
c00114cc:	52                   	push   edx
c00114cd:	52                   	push   edx
c00114ce:	50                   	push   eax
c00114cf:	68 58 e7 02 c0       	push   0xc002e758
c00114d4:	e8 ab 77 01 00       	call   c0028c84 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00114d9:	eb e1                	jmp    c00114bc <getFromFileDescriptor(int)+0x23>
c00114db:	a1 4c e7 02 c0       	mov    eax,ds:0xc002e74c
c00114e0:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00114e6:	74 4d                	je     c0011535 <getFromFileDescriptor(int)+0x9c>
c00114e8:	a1 50 e7 02 c0       	mov    eax,ds:0xc002e750
c00114ed:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00114f3:	74 40                	je     c0011535 <getFromFileDescriptor(int)+0x9c>
c00114f5:	a1 48 e7 02 c0       	mov    eax,ds:0xc002e748
c00114fa:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011500:	74 33                	je     c0011535 <getFromFileDescriptor(int)+0x9c>
c0011502:	a1 44 e7 02 c0       	mov    eax,ds:0xc002e744
c0011507:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001150d:	74 26                	je     c0011535 <getFromFileDescriptor(int)+0x9c>
c001150f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011515:	83 f8 08             	cmp    eax,0x8
c0011518:	77 09                	ja     c0011523 <getFromFileDescriptor(int)+0x8a>
c001151a:	8b 04 85 20 e7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd18e0]
c0011521:	eb 12                	jmp    c0011535 <getFromFileDescriptor(int)+0x9c>
c0011523:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011529:	83 fb 08             	cmp    ebx,0x8
c001152c:	77 95                	ja     c00114c3 <getFromFileDescriptor(int)+0x2a>
c001152e:	8b 04 9d e0 e6 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1920]
c0011535:	83 c4 08             	add    esp,0x8
c0011538:	5b                   	pop    ebx
c0011539:	c3                   	ret    

c001153a <__static_initialization_and_destruction_0(int, int)>:
c001153a:	83 ec 0c             	sub    esp,0xc
c001153d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011542:	75 34                	jne    c0011578 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011544:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001154c:	75 2a                	jne    c0011578 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001154e:	83 ec 0c             	sub    esp,0xc
c0011551:	68 58 e7 02 c0       	push   0xc002e758
c0011556:	e8 69 75 01 00       	call   c0028ac4 <LinkedList<UnixFile>::LinkedList()>
c001155b:	83 c4 10             	add    esp,0x10
c001155e:	83 ec 04             	sub    esp,0x4
c0011561:	68 c4 d3 02 c0       	push   0xc002d3c4
c0011566:	68 58 e7 02 c0       	push   0xc002e758
c001156b:	68 c2 8a 02 c0       	push   0xc0028ac2
c0011570:	e8 ee 12 00 00       	call   c0012863 <__cxa_atexit>
c0011575:	83 c4 10             	add    esp,0x10
c0011578:	90                   	nop
c0011579:	83 c4 0c             	add    esp,0xc
c001157c:	c3                   	ret    

c001157d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001157d:	83 ec 0c             	sub    esp,0xc
c0011580:	83 ec 08             	sub    esp,0x8
c0011583:	68 ff ff 00 00       	push   0xffff
c0011588:	6a 01                	push   0x1
c001158a:	e8 ab ff ff ff       	call   c001153a <__static_initialization_and_destruction_0(int, int)>
c001158f:	83 c4 10             	add    esp,0x10
c0011592:	83 c4 0c             	add    esp,0xc
c0011595:	c3                   	ret    

c0011596 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011596:	53                   	push   ebx
c0011597:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001159b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001159f:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00115a5:	89 c8                	mov    eax,ecx
c00115a7:	d1 e8                	shr    eax,1
c00115a9:	03 05 a8 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d5a8
c00115af:	83 e1 01             	and    ecx,0x1
c00115b2:	8a 10                	mov    dl,BYTE PTR [eax]
c00115b4:	75 09                	jne    c00115bf <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00115b6:	83 e2 f0             	and    edx,0xfffffff0
c00115b9:	09 da                	or     edx,ebx
c00115bb:	88 10                	mov    BYTE PTR [eax],dl
c00115bd:	5b                   	pop    ebx
c00115be:	c3                   	ret    
c00115bf:	c1 e3 04             	shl    ebx,0x4
c00115c2:	83 e2 0f             	and    edx,0xf
c00115c5:	09 da                	or     edx,ebx
c00115c7:	88 10                	mov    BYTE PTR [eax],dl
c00115c9:	5b                   	pop    ebx
c00115ca:	c3                   	ret    

c00115cb <Virt::getPageState(unsigned long)>:
c00115cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115cf:	8b 0d a8 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d5a8
c00115d5:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00115db:	89 d0                	mov    eax,edx
c00115dd:	d1 e8                	shr    eax,1
c00115df:	83 e2 01             	and    edx,0x1
c00115e2:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00115e5:	75 04                	jne    c00115eb <Virt::getPageState(unsigned long)+0x20>
c00115e7:	83 e0 0f             	and    eax,0xf
c00115ea:	c3                   	ret    
c00115eb:	c0 e8 04             	shr    al,0x4
c00115ee:	c3                   	ret    

c00115ef <Virt::allocateKernelVirtualPages(int)>:
c00115ef:	55                   	push   ebp
c00115f0:	31 ed                	xor    ebp,ebp
c00115f2:	57                   	push   edi
c00115f3:	56                   	push   esi
c00115f4:	53                   	push   ebx
c00115f5:	31 db                	xor    ebx,ebx
c00115f7:	83 ec 1c             	sub    esp,0x1c
c00115fa:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00115fe:	8b 3d a4 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d5a4
c0011604:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011609:	57                   	push   edi
c001160a:	e8 bc ff ff ff       	call   c00115cb <Virt::getPageState(unsigned long)>
c001160f:	5a                   	pop    edx
c0011610:	84 c0                	test   al,al
c0011612:	75 3a                	jne    c001164e <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011614:	85 db                	test   ebx,ebx
c0011616:	75 02                	jne    c001161a <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011618:	89 fd                	mov    ebp,edi
c001161a:	43                   	inc    ebx
c001161b:	39 f3                	cmp    ebx,esi
c001161d:	74 5a                	je     c0011679 <Virt::allocateKernelVirtualPages(int)+0x8a>
c001161f:	47                   	inc    edi
c0011620:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011626:	76 31                	jbe    c0011659 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011628:	c7 05 a4 d5 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d5a4,0xc8000
c0011632:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011637:	75 28                	jne    c0011661 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011639:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001163e:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011643:	57                   	push   edi
c0011644:	e8 82 ff ff ff       	call   c00115cb <Virt::getPageState(unsigned long)>
c0011649:	5a                   	pop    edx
c001164a:	84 c0                	test   al,al
c001164c:	74 c6                	je     c0011614 <Virt::allocateKernelVirtualPages(int)+0x25>
c001164e:	31 db                	xor    ebx,ebx
c0011650:	47                   	inc    edi
c0011651:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011657:	77 cf                	ja     c0011628 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011659:	89 3d a4 d5 02 c0    	mov    DWORD PTR ds:0xc002d5a4,edi
c001165f:	eb a8                	jmp    c0011609 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011661:	83 ec 0c             	sub    esp,0xc
c0011664:	68 00 ab 02 c0       	push   0xc002ab00
c0011669:	e8 f1 8c 00 00       	call   c001a35f <Krnl::panic(char const*)>
c001166e:	8b 3d a4 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d5a4
c0011674:	83 c4 10             	add    esp,0x10
c0011677:	eb 90                	jmp    c0011609 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011679:	89 2d a4 d5 02 c0    	mov    DWORD PTR ds:0xc002d5a4,ebp
c001167f:	4b                   	dec    ebx
c0011680:	74 5f                	je     c00116e1 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011682:	85 f6                	test   esi,esi
c0011684:	74 3d                	je     c00116c3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011686:	89 e8                	mov    eax,ebp
c0011688:	31 db                	xor    ebx,ebx
c001168a:	8d 7e ff             	lea    edi,[esi-0x1]
c001168d:	eb 14                	jmp    c00116a3 <Virt::allocateKernelVirtualPages(int)+0xb4>
c001168f:	6a 01                	push   0x1
c0011691:	43                   	inc    ebx
c0011692:	50                   	push   eax
c0011693:	e8 fe fe ff ff       	call   c0011596 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011698:	58                   	pop    eax
c0011699:	39 f3                	cmp    ebx,esi
c001169b:	5a                   	pop    edx
c001169c:	74 25                	je     c00116c3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001169e:	a1 a4 d5 02 c0       	mov    eax,ds:0xc002d5a4
c00116a3:	8d 50 01             	lea    edx,[eax+0x1]
c00116a6:	85 db                	test   ebx,ebx
c00116a8:	89 15 a4 d5 02 c0    	mov    DWORD PTR ds:0xc002d5a4,edx
c00116ae:	74 20                	je     c00116d0 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00116b0:	39 df                	cmp    edi,ebx
c00116b2:	75 db                	jne    c001168f <Virt::allocateKernelVirtualPages(int)+0xa0>
c00116b4:	6a 03                	push   0x3
c00116b6:	43                   	inc    ebx
c00116b7:	50                   	push   eax
c00116b8:	e8 d9 fe ff ff       	call   c0011596 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116bd:	59                   	pop    ecx
c00116be:	39 f3                	cmp    ebx,esi
c00116c0:	58                   	pop    eax
c00116c1:	75 db                	jne    c001169e <Virt::allocateKernelVirtualPages(int)+0xaf>
c00116c3:	83 c4 1c             	add    esp,0x1c
c00116c6:	89 e8                	mov    eax,ebp
c00116c8:	5b                   	pop    ebx
c00116c9:	c1 e0 0c             	shl    eax,0xc
c00116cc:	5e                   	pop    esi
c00116cd:	5f                   	pop    edi
c00116ce:	5d                   	pop    ebp
c00116cf:	c3                   	ret    
c00116d0:	6a 02                	push   0x2
c00116d2:	bb 01 00 00 00       	mov    ebx,0x1
c00116d7:	50                   	push   eax
c00116d8:	e8 b9 fe ff ff       	call   c0011596 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116dd:	58                   	pop    eax
c00116de:	5a                   	pop    edx
c00116df:	eb bd                	jmp    c001169e <Virt::allocateKernelVirtualPages(int)+0xaf>
c00116e1:	6a 04                	push   0x4
c00116e3:	8d 45 01             	lea    eax,[ebp+0x1]
c00116e6:	55                   	push   ebp
c00116e7:	a3 a4 d5 02 c0       	mov    ds:0xc002d5a4,eax
c00116ec:	e8 a5 fe ff ff       	call   c0011596 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116f1:	59                   	pop    ecx
c00116f2:	89 e8                	mov    eax,ebp
c00116f4:	5b                   	pop    ebx
c00116f5:	c1 e0 0c             	shl    eax,0xc
c00116f8:	83 c4 1c             	add    esp,0x1c
c00116fb:	5b                   	pop    ebx
c00116fc:	5e                   	pop    esi
c00116fd:	5f                   	pop    edi
c00116fe:	5d                   	pop    ebp
c00116ff:	c3                   	ret    

c0011700 <Virt::freeSwapfilePage(unsigned long)>:
c0011700:	53                   	push   ebx
c0011701:	8b 15 6c e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e76c
c0011707:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001170b:	b8 01 00 00 00       	mov    eax,0x1
c0011710:	89 cb                	mov    ebx,ecx
c0011712:	d3 e0                	shl    eax,cl
c0011714:	c1 eb 05             	shr    ebx,0x5
c0011717:	f7 d0                	not    eax
c0011719:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c001171c:	5b                   	pop    ebx
c001171d:	c3                   	ret    

c001171e <Virt::swapIDToSector(unsigned long)>:
c001171e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011722:	0f af 05 ac d5 02 c0 	imul   eax,DWORD PTR ds:0xc002d5ac
c0011729:	03 05 b4 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d5b4
c001172f:	c3                   	ret    

c0011730 <Virt::allocateSwapfilePage()>:
c0011730:	55                   	push   ebp
c0011731:	31 d2                	xor    edx,edx
c0011733:	57                   	push   edi
c0011734:	56                   	push   esi
c0011735:	53                   	push   ebx
c0011736:	83 ec 0c             	sub    esp,0xc
c0011739:	8b 0d ac d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d5ac
c001173f:	a1 b0 d5 02 c0       	mov    eax,ds:0xc002d5b0
c0011744:	f7 f1                	div    ecx
c0011746:	39 0d b0 d5 02 c0    	cmp    DWORD PTR ds:0xc002d5b0,ecx
c001174c:	72 2d                	jb     c001177b <Virt::allocateSwapfilePage()+0x4b>
c001174e:	8b 35 6c e7 02 c0    	mov    esi,DWORD PTR ds:0xc002e76c
c0011754:	8b 16                	mov    edx,DWORD PTR [esi]
c0011756:	f6 c2 01             	test   dl,0x1
c0011759:	74 3c                	je     c0011797 <Virt::allocateSwapfilePage()+0x67>
c001175b:	31 c9                	xor    ecx,ecx
c001175d:	bf 01 00 00 00       	mov    edi,0x1
c0011762:	eb 12                	jmp    c0011776 <Virt::allocateSwapfilePage()+0x46>
c0011764:	89 fd                	mov    ebp,edi
c0011766:	89 ca                	mov    edx,ecx
c0011768:	d3 e5                	shl    ebp,cl
c001176a:	c1 ea 05             	shr    edx,0x5
c001176d:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011770:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011772:	85 ea                	test   edx,ebp
c0011774:	74 2a                	je     c00117a0 <Virt::allocateSwapfilePage()+0x70>
c0011776:	41                   	inc    ecx
c0011777:	39 c8                	cmp    eax,ecx
c0011779:	77 e9                	ja     c0011764 <Virt::allocateSwapfilePage()+0x34>
c001177b:	83 ec 0c             	sub    esp,0xc
c001177e:	68 e0 ac 02 c0       	push   0xc002ace0
c0011783:	e8 d7 8b 00 00       	call   c001a35f <Krnl::panic(char const*)>
c0011788:	83 c4 10             	add    esp,0x10
c001178b:	31 c9                	xor    ecx,ecx
c001178d:	83 c4 0c             	add    esp,0xc
c0011790:	89 c8                	mov    eax,ecx
c0011792:	5b                   	pop    ebx
c0011793:	5e                   	pop    esi
c0011794:	5f                   	pop    edi
c0011795:	5d                   	pop    ebp
c0011796:	c3                   	ret    
c0011797:	89 f3                	mov    ebx,esi
c0011799:	bd 01 00 00 00       	mov    ebp,0x1
c001179e:	31 c9                	xor    ecx,ecx
c00117a0:	09 ea                	or     edx,ebp
c00117a2:	89 c8                	mov    eax,ecx
c00117a4:	89 13                	mov    DWORD PTR [ebx],edx
c00117a6:	83 c4 0c             	add    esp,0xc
c00117a9:	5b                   	pop    ebx
c00117aa:	5e                   	pop    esi
c00117ab:	5f                   	pop    edi
c00117ac:	5d                   	pop    ebp
c00117ad:	c3                   	ret    

c00117ae <Virt::virtualMemorySetup()>:
c00117ae:	53                   	push   ebx
c00117af:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00117b4:	6a 0f                	push   0xf
c00117b6:	53                   	push   ebx
c00117b7:	43                   	inc    ebx
c00117b8:	e8 d9 fd ff ff       	call   c0011596 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117bd:	58                   	pop    eax
c00117be:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00117c4:	5a                   	pop    edx
c00117c5:	75 ed                	jne    c00117b4 <Virt::virtualMemorySetup()+0x6>
c00117c7:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00117cc:	6a 00                	push   0x0
c00117ce:	53                   	push   ebx
c00117cf:	43                   	inc    ebx
c00117d0:	e8 c1 fd ff ff       	call   c0011596 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117d5:	59                   	pop    ecx
c00117d6:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00117dc:	58                   	pop    eax
c00117dd:	75 ed                	jne    c00117cc <Virt::virtualMemorySetup()+0x1e>
c00117df:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00117e4:	6a 0f                	push   0xf
c00117e6:	53                   	push   ebx
c00117e7:	43                   	inc    ebx
c00117e8:	e8 a9 fd ff ff       	call   c0011596 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117ed:	58                   	pop    eax
c00117ee:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00117f4:	5a                   	pop    edx
c00117f5:	75 ed                	jne    c00117e4 <Virt::virtualMemorySetup()+0x36>
c00117f7:	5b                   	pop    ebx
c00117f8:	c3                   	ret    

c00117f9 <Virt::setupPageSwapping(int)>:
c00117f9:	53                   	push   ebx
c00117fa:	83 ec 0c             	sub    esp,0xc
c00117fd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011801:	a1 08 ec 02 c0       	mov    eax,ds:0xc002ec08
c0011806:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001180c:	8b 10                	mov    edx,DWORD PTR [eax]
c001180e:	53                   	push   ebx
c001180f:	c1 e3 0b             	shl    ebx,0xb
c0011812:	68 f7 ac 02 c0       	push   0xc002acf7
c0011817:	50                   	push   eax
c0011818:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c001181b:	89 1d b0 d5 02 c0    	mov    DWORD PTR ds:0xc002d5b0,ebx
c0011821:	c6 05 b8 d5 02 c0 43 	mov    BYTE PTR ds:0xc002d5b8,0x43
c0011828:	c1 eb 08             	shr    ebx,0x8
c001182b:	a3 b4 d5 02 c0       	mov    ds:0xc002d5b4,eax
c0011830:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011833:	c7 05 ac d5 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002d5ac,0x8
c001183d:	e8 27 e1 ff ff       	call   c000f969 <malloc>
c0011842:	83 c4 0c             	add    esp,0xc
c0011845:	89 c1                	mov    ecx,eax
c0011847:	a3 6c e7 02 c0       	mov    ds:0xc002e76c,eax
c001184c:	31 d2                	xor    edx,edx
c001184e:	a1 b0 d5 02 c0       	mov    eax,ds:0xc002d5b0
c0011853:	f7 35 ac d5 02 c0    	div    DWORD PTR ds:0xc002d5ac
c0011859:	c1 e8 05             	shr    eax,0x5
c001185c:	50                   	push   eax
c001185d:	6a 00                	push   0x0
c001185f:	51                   	push   ecx
c0011860:	e8 eb ee fe ff       	call   c0000750 <memset>
c0011865:	83 c4 18             	add    esp,0x18
c0011868:	5b                   	pop    ebx
c0011869:	c3                   	ret    

c001186a <VAS::VAS()>:
c001186a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001186e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011875:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011879:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011880:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011884:	a3 70 e7 02 c0       	mov    ds:0xc002e770,eax
c0011889:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001188d:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011891:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011895:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011898:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001189c:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00118a3:	90                   	nop
c00118a4:	c3                   	ret    
c00118a5:	90                   	nop

c00118a6 <VAS::VAS(VAS*)>:
c00118a6:	83 ec 0c             	sub    esp,0xc
c00118a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00118b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00118bf:	83 ec 0c             	sub    esp,0xc
c00118c2:	68 20 ab 02 c0       	push   0xc002ab20
c00118c7:	e8 93 8a 00 00       	call   c001a35f <Krnl::panic(char const*)>
c00118cc:	83 c4 10             	add    esp,0x10
c00118cf:	90                   	nop
c00118d0:	83 c4 0c             	add    esp,0xc
c00118d3:	c3                   	ret    

c00118d4 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00118d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118d8:	89 c2                	mov    edx,eax
c00118da:	c1 e8 0a             	shr    eax,0xa
c00118dd:	c1 ea 16             	shr    edx,0x16
c00118e0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00118e5:	19 c9                	sbb    ecx,ecx
c00118e7:	c1 e2 0c             	shl    edx,0xc
c00118ea:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00118f0:	25 fc 0f 00 00       	and    eax,0xffc
c00118f5:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00118fc:	01 d0                	add    eax,edx
c00118fe:	c3                   	ret    
c00118ff:	90                   	nop

c0011900 <VAS::getPageTableEntry(unsigned long)>:
c0011900:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011904:	89 ca                	mov    edx,ecx
c0011906:	c1 e9 0a             	shr    ecx,0xa
c0011909:	c1 ea 16             	shr    edx,0x16
c001190c:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011912:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011918:	c1 e0 0c             	shl    eax,0xc
c001191b:	8d 04 08             	lea    eax,[eax+ecx*1]
c001191e:	c3                   	ret    

c001191f <Virt::freeKernelVirtualPages(unsigned long)>:
c001191f:	57                   	push   edi
c0011920:	56                   	push   esi
c0011921:	be 01 00 00 00       	mov    esi,0x1
c0011926:	53                   	push   ebx
c0011927:	83 ec 10             	sub    esp,0x10
c001192a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001192e:	c1 eb 0c             	shr    ebx,0xc
c0011931:	eb 3f                	jmp    c0011972 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011933:	83 ec 08             	sub    esp,0x8
c0011936:	57                   	push   edi
c0011937:	ff 35 70 e7 02 c0    	push   DWORD PTR ds:0xc002e770
c001193d:	e8 be ff ff ff       	call   c0011900 <VAS::getPageTableEntry(unsigned long)>
c0011942:	83 c4 10             	add    esp,0x10
c0011945:	8b 00                	mov    eax,DWORD PTR [eax]
c0011947:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001194b:	f6 c4 04             	test   ah,0x4
c001194e:	75 5f                	jne    c00119af <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011950:	80 fa 04             	cmp    dl,0x4
c0011953:	74 78                	je     c00119cd <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011955:	80 fa 02             	cmp    dl,0x2
c0011958:	0f 84 88 00 00 00    	je     c00119e6 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001195e:	80 fa 03             	cmp    dl,0x3
c0011961:	0f 84 ad 00 00 00    	je     c0011a14 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011967:	fe ca                	dec    dl
c0011969:	0f 84 92 00 00 00    	je     c0011a01 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001196f:	43                   	inc    ebx
c0011970:	31 f6                	xor    esi,esi
c0011972:	53                   	push   ebx
c0011973:	89 df                	mov    edi,ebx
c0011975:	e8 51 fc ff ff       	call   c00115cb <Virt::getPageState(unsigned long)>
c001197a:	c1 e7 0c             	shl    edi,0xc
c001197d:	59                   	pop    ecx
c001197e:	84 c0                	test   al,al
c0011980:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011984:	75 ad                	jne    c0011933 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011986:	83 ec 0c             	sub    esp,0xc
c0011989:	68 0e ad 02 c0       	push   0xc002ad0e
c001198e:	e8 cc 89 00 00       	call   c001a35f <Krnl::panic(char const*)>
c0011993:	58                   	pop    eax
c0011994:	5a                   	pop    edx
c0011995:	57                   	push   edi
c0011996:	ff 35 70 e7 02 c0    	push   DWORD PTR ds:0xc002e770
c001199c:	e8 5f ff ff ff       	call   c0011900 <VAS::getPageTableEntry(unsigned long)>
c00119a1:	83 c4 10             	add    esp,0x10
c00119a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00119a6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00119aa:	f6 c4 04             	test   ah,0x4
c00119ad:	74 c0                	je     c001196f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00119af:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00119b3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00119b8:	83 ec 0c             	sub    esp,0xc
c00119bb:	50                   	push   eax
c00119bc:	e8 33 e3 ff ff       	call   c000fcf4 <Phys::freePage(unsigned long)>
c00119c1:	83 c4 10             	add    esp,0x10
c00119c4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00119c8:	80 fa 04             	cmp    dl,0x4
c00119cb:	75 88                	jne    c0011955 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00119cd:	89 f0                	mov    eax,esi
c00119cf:	84 c0                	test   al,al
c00119d1:	75 47                	jne    c0011a1a <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00119d3:	c7 44 24 20 44 ab 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ab44
c00119db:	83 c4 10             	add    esp,0x10
c00119de:	5b                   	pop    ebx
c00119df:	5e                   	pop    esi
c00119e0:	5f                   	pop    edi
c00119e1:	e9 79 89 00 00       	jmp    c001a35f <Krnl::panic(char const*)>
c00119e6:	89 f0                	mov    eax,esi
c00119e8:	84 c0                	test   al,al
c00119ea:	75 15                	jne    c0011a01 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00119ec:	83 ec 0c             	sub    esp,0xc
c00119ef:	68 2a ad 02 c0       	push   0xc002ad2a
c00119f4:	e8 66 89 00 00       	call   c001a35f <Krnl::panic(char const*)>
c00119f9:	83 c4 10             	add    esp,0x10
c00119fc:	e9 6e ff ff ff       	jmp    c001196f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a01:	83 ec 08             	sub    esp,0x8
c0011a04:	6a 00                	push   0x0
c0011a06:	53                   	push   ebx
c0011a07:	e8 8a fb ff ff       	call   c0011596 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a0c:	83 c4 10             	add    esp,0x10
c0011a0f:	e9 5b ff ff ff       	jmp    c001196f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a14:	89 f0                	mov    eax,esi
c0011a16:	84 c0                	test   al,al
c0011a18:	75 15                	jne    c0011a2f <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011a1a:	83 ec 08             	sub    esp,0x8
c0011a1d:	6a 00                	push   0x0
c0011a1f:	53                   	push   ebx
c0011a20:	e8 71 fb ff ff       	call   c0011596 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a25:	83 c4 10             	add    esp,0x10
c0011a28:	83 c4 10             	add    esp,0x10
c0011a2b:	5b                   	pop    ebx
c0011a2c:	5e                   	pop    esi
c0011a2d:	5f                   	pop    edi
c0011a2e:	c3                   	ret    
c0011a2f:	c7 44 24 20 46 ad 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ad46
c0011a37:	83 c4 10             	add    esp,0x10
c0011a3a:	5b                   	pop    ebx
c0011a3b:	5e                   	pop    esi
c0011a3c:	5f                   	pop    edi
c0011a3d:	e9 1d 89 00 00       	jmp    c001a35f <Krnl::panic(char const*)>

c0011a42 <VAS::freeAllocatedPages(unsigned long)>:
c0011a42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011a4a:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011a4e:	74 09                	je     c0011a59 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011a50:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011a54:	e9 c6 fe ff ff       	jmp    c001191f <Virt::freeKernelVirtualPages(unsigned long)>
c0011a59:	c7 44 24 04 68 ab 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ab68
c0011a61:	e9 5b 0f 00 00       	jmp    c00129c1 <Dbg::kprintf(char const*, ...)>

c0011a66 <VAS::virtualToPhysical(unsigned long)>:
c0011a66:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011a6a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011a6e:	e8 8d fe ff ff       	call   c0011900 <VAS::getPageTableEntry(unsigned long)>
c0011a73:	5a                   	pop    edx
c0011a74:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a76:	59                   	pop    ecx
c0011a77:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011a7c:	c3                   	ret    
c0011a7d:	90                   	nop

c0011a7e <VAS::reflagRange(unsigned long, int, int, int)>:
c0011a7e:	55                   	push   ebp
c0011a7f:	57                   	push   edi
c0011a80:	56                   	push   esi
c0011a81:	53                   	push   ebx
c0011a82:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011a86:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011a8a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011a8e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011a92:	85 db                	test   ebx,ebx
c0011a94:	7e 22                	jle    c0011ab8 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011a96:	c1 e3 0c             	shl    ebx,0xc
c0011a99:	01 f3                	add    ebx,esi
c0011a9b:	56                   	push   esi
c0011a9c:	81 c6 00 10 00 00    	add    esi,0x1000
c0011aa2:	55                   	push   ebp
c0011aa3:	e8 58 fe ff ff       	call   c0011900 <VAS::getPageTableEntry(unsigned long)>
c0011aa8:	5a                   	pop    edx
c0011aa9:	59                   	pop    ecx
c0011aaa:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011aac:	21 f9                	and    ecx,edi
c0011aae:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011ab2:	39 f3                	cmp    ebx,esi
c0011ab4:	89 08                	mov    DWORD PTR [eax],ecx
c0011ab6:	75 e3                	jne    c0011a9b <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011ab8:	5b                   	pop    ebx
c0011ab9:	5e                   	pop    esi
c0011aba:	5f                   	pop    edi
c0011abb:	5d                   	pop    ebp
c0011abc:	c3                   	ret    
c0011abd:	90                   	nop

c0011abe <VAS::setToWriteCombining(unsigned long, int)>:
c0011abe:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0011ac3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ac9:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011ad0:	75 01                	jne    c0011ad3 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011ad2:	c3                   	ret    
c0011ad3:	68 80 00 00 00       	push   0x80
c0011ad8:	6a ff                	push   0xffffffff
c0011ada:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011ade:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011ae2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011ae6:	e8 93 ff ff ff       	call   c0011a7e <VAS::reflagRange(unsigned long, int, int, int)>
c0011aeb:	83 c4 14             	add    esp,0x14
c0011aee:	c3                   	ret    
c0011aef:	90                   	nop

c0011af0 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011af0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011af5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011af9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011afc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b00:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0011b03:	19 c0                	sbb    eax,eax
c0011b05:	83 ca 03             	or     edx,0x3
c0011b08:	83 e0 fc             	and    eax,0xfffffffc
c0011b0b:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011b12:	0f 20 d8             	mov    eax,cr3
c0011b15:	0f 22 d8             	mov    cr3,eax
c0011b18:	c3                   	ret    
c0011b19:	90                   	nop

c0011b1a <VAS::~VAS()>:
c0011b1a:	83 ec 2c             	sub    esp,0x2c
c0011b1d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011b25:	fa                   	cli    
c0011b26:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c0011b2b:	40                   	inc    eax
c0011b2c:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c0011b31:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011b36:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b38:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011b3b:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011b41:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011b45:	6a 01                	push   0x1
c0011b47:	50                   	push   eax
c0011b48:	e8 a3 ff ff ff       	call   c0011af0 <VAS::mapOtherVASIn(bool, VAS*)>
c0011b4d:	83 c4 0c             	add    esp,0xc
c0011b50:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011b58:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011b60:	0f 8f d4 00 00 00    	jg     c0011c3a <VAS::~VAS()+0x120>
c0011b66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011b6a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011b6d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011b71:	c1 e2 02             	shl    edx,0x2
c0011b74:	01 d0                	add    eax,edx
c0011b76:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b78:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011b7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b80:	83 e0 01             	and    eax,0x1
c0011b83:	0f 84 a8 00 00 00    	je     c0011c31 <VAS::~VAS()+0x117>
c0011b89:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011b91:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011b99:	7f 72                	jg     c0011c0d <VAS::~VAS()+0xf3>
c0011b9b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011b9f:	c1 e0 0a             	shl    eax,0xa
c0011ba2:	89 c2                	mov    edx,eax
c0011ba4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011ba8:	01 d0                	add    eax,edx
c0011baa:	c1 e0 0c             	shl    eax,0xc
c0011bad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011bb1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011bb6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bb8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011bbb:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011bc1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011bc5:	6a 01                	push   0x1
c0011bc7:	50                   	push   eax
c0011bc8:	e8 07 fd ff ff       	call   c00118d4 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011bcd:	83 c4 0c             	add    esp,0xc
c0011bd0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011bd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011bd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bda:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011bde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011be2:	25 01 04 00 00       	and    eax,0x401
c0011be7:	3d 01 04 00 00       	cmp    eax,0x401
c0011bec:	75 19                	jne    c0011c07 <VAS::~VAS()+0xed>
c0011bee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bf2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011bf7:	83 ec 0c             	sub    esp,0xc
c0011bfa:	50                   	push   eax
c0011bfb:	e8 f4 e0 ff ff       	call   c000fcf4 <Phys::freePage(unsigned long)>
c0011c00:	83 c4 10             	add    esp,0x10
c0011c03:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011c07:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011c0b:	eb 84                	jmp    c0011b91 <VAS::~VAS()+0x77>
c0011c0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c11:	25 00 04 00 00       	and    eax,0x400
c0011c16:	74 19                	je     c0011c31 <VAS::~VAS()+0x117>
c0011c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c1c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c21:	83 ec 0c             	sub    esp,0xc
c0011c24:	50                   	push   eax
c0011c25:	e8 ca e0 ff ff       	call   c000fcf4 <Phys::freePage(unsigned long)>
c0011c2a:	83 c4 10             	add    esp,0x10
c0011c2d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011c31:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011c35:	e9 1e ff ff ff       	jmp    c0011b58 <VAS::~VAS()+0x3e>
c0011c3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c3e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011c41:	83 ec 0c             	sub    esp,0xc
c0011c44:	50                   	push   eax
c0011c45:	e8 d5 fc ff ff       	call   c001191f <Virt::freeKernelVirtualPages(unsigned long)>
c0011c4a:	83 c4 10             	add    esp,0x10
c0011c4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c51:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011c54:	83 ec 0c             	sub    esp,0xc
c0011c57:	50                   	push   eax
c0011c58:	e8 97 e0 ff ff       	call   c000fcf4 <Phys::freePage(unsigned long)>
c0011c5d:	83 c4 10             	add    esp,0x10
c0011c60:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011c64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c68:	c1 e0 02             	shl    eax,0x2
c0011c6b:	83 ec 08             	sub    esp,0x8
c0011c6e:	50                   	push   eax
c0011c6f:	68 8c ab 02 c0       	push   0xc002ab8c
c0011c74:	e8 48 0d 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0011c79:	83 c4 10             	add    esp,0x10
c0011c7c:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c0011c81:	48                   	dec    eax
c0011c82:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c0011c87:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c0011c8c:	85 c0                	test   eax,eax
c0011c8e:	75 01                	jne    c0011c91 <VAS::~VAS()+0x177>
c0011c90:	fb                   	sti    
c0011c91:	90                   	nop
c0011c92:	83 c4 2c             	add    esp,0x2c
c0011c95:	c3                   	ret    

c0011c96 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011c96:	55                   	push   ebp
c0011c97:	57                   	push   edi
c0011c98:	56                   	push   esi
c0011c99:	53                   	push   ebx
c0011c9a:	83 ec 1c             	sub    esp,0x1c
c0011c9d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011ca1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011ca5:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011cab:	77 08                	ja     c0011cb5 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011cad:	0f 20 d8             	mov    eax,cr3
c0011cb0:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011cb3:	75 47                	jne    c0011cfc <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011cb5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011cb9:	09 d8                	or     eax,ebx
c0011cbb:	a9 ff 0f 00 00       	test   eax,0xfff
c0011cc0:	75 57                	jne    c0011d19 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011cc2:	89 de                	mov    esi,ebx
c0011cc4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011cc7:	c1 ee 16             	shr    esi,0x16
c0011cca:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011cd1:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011cd5:	74 54                	je     c0011d2b <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011cd7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cdb:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011ce1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011ce5:	c1 e6 0c             	shl    esi,0xc
c0011ce8:	c1 eb 0a             	shr    ebx,0xa
c0011ceb:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011cf1:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011cf4:	83 c4 1c             	add    esp,0x1c
c0011cf7:	5b                   	pop    ebx
c0011cf8:	5e                   	pop    esi
c0011cf9:	5f                   	pop    edi
c0011cfa:	5d                   	pop    ebp
c0011cfb:	c3                   	ret    
c0011cfc:	83 ec 0c             	sub    esp,0xc
c0011cff:	68 ac ab 02 c0       	push   0xc002abac
c0011d04:	e8 b8 0c 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0011d09:	83 c4 10             	add    esp,0x10
c0011d0c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d10:	09 d8                	or     eax,ebx
c0011d12:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d17:	74 a9                	je     c0011cc2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011d19:	83 ec 0c             	sub    esp,0xc
c0011d1c:	68 14 ac 02 c0       	push   0xc002ac14
c0011d21:	e8 39 86 00 00       	call   c001a35f <Krnl::panic(char const*)>
c0011d26:	83 c4 10             	add    esp,0x10
c0011d29:	eb 97                	jmp    c0011cc2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011d2b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011d2f:	e8 31 e0 ff ff       	call   c000fd65 <Phys::allocatePage()>
c0011d34:	83 ec 0c             	sub    esp,0xc
c0011d37:	89 c5                	mov    ebp,eax
c0011d39:	8b 0d 70 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e770
c0011d3f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011d43:	6a 01                	push   0x1
c0011d45:	e8 a5 f8 ff ff       	call   c00115ef <Virt::allocateKernelVirtualPages(int)>
c0011d4a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011d51:	6a 01                	push   0x1
c0011d53:	50                   	push   eax
c0011d54:	55                   	push   ebp
c0011d55:	81 cd 07 04 00 00    	or     ebp,0x407
c0011d5b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011d5f:	51                   	push   ecx
c0011d60:	e8 27 02 00 00       	call   c0011f8c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011d65:	83 c4 1c             	add    esp,0x1c
c0011d68:	68 00 10 00 00       	push   0x1000
c0011d6d:	6a 00                	push   0x0
c0011d6f:	50                   	push   eax
c0011d70:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011d74:	e8 d7 e9 fe ff       	call   c0000750 <memset>
c0011d79:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011d7d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011d80:	e8 9a fb ff ff       	call   c001191f <Virt::freeKernelVirtualPages(unsigned long)>
c0011d85:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011d89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011d8c:	83 c4 10             	add    esp,0x10
c0011d8f:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011d92:	e9 40 ff ff ff       	jmp    c0011cd7 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011d97:	90                   	nop

c0011d98 <VAS::allocatePages(int, int)>:
c0011d98:	55                   	push   ebp
c0011d99:	57                   	push   edi
c0011d9a:	56                   	push   esi
c0011d9b:	53                   	push   ebx
c0011d9c:	83 ec 1c             	sub    esp,0x1c
c0011d9f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011da3:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0011da8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011dae:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011db4:	83 e0 01             	and    eax,0x1
c0011db7:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011dbb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011dbf:	0f 85 cc 00 00 00    	jne    c0011e91 <VAS::allocatePages(int, int)+0xf9>
c0011dc5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011dc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011dcc:	85 c0                	test   eax,eax
c0011dce:	0f 84 a1 00 00 00    	je     c0011e75 <VAS::allocatePages(int, int)+0xdd>
c0011dd4:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011dd8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ddc:	c1 e6 0c             	shl    esi,0xc
c0011ddf:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011de3:	85 c0                	test   eax,eax
c0011de5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011de8:	7e 33                	jle    c0011e1d <VAS::allocatePages(int, int)+0x85>
c0011dea:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011dee:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011df2:	81 cd 00 04 00 00    	or     ebp,0x400
c0011df8:	e8 68 df ff ff       	call   c000fd65 <Phys::allocatePage()>
c0011dfd:	55                   	push   ebp
c0011dfe:	53                   	push   ebx
c0011dff:	50                   	push   eax
c0011e00:	57                   	push   edi
c0011e01:	e8 90 fe ff ff       	call   c0011c96 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011e06:	83 c4 10             	add    esp,0x10
c0011e09:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011e0e:	74 03                	je     c0011e13 <VAS::allocatePages(int, int)+0x7b>
c0011e10:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011e13:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011e19:	39 de                	cmp    esi,ebx
c0011e1b:	75 db                	jne    c0011df8 <VAS::allocatePages(int, int)+0x60>
c0011e1d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011e22:	75 12                	jne    c0011e36 <VAS::allocatePages(int, int)+0x9e>
c0011e24:	0f 20 d8             	mov    eax,cr3
c0011e27:	0f 22 d8             	mov    cr3,eax
c0011e2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e2e:	83 c4 1c             	add    esp,0x1c
c0011e31:	5b                   	pop    ebx
c0011e32:	5e                   	pop    esi
c0011e33:	5f                   	pop    edi
c0011e34:	5d                   	pop    ebp
c0011e35:	c3                   	ret    
c0011e36:	c1 ee 0a             	shr    esi,0xa
c0011e39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011e3d:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011e43:	c1 eb 0a             	shr    ebx,0xa
c0011e46:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011e4c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011e52:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011e58:	39 c3                	cmp    ebx,eax
c0011e5a:	77 ce                	ja     c0011e2a <VAS::allocatePages(int, int)+0x92>
c0011e5c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011e5f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011e65:	39 d8                	cmp    eax,ebx
c0011e67:	73 f3                	jae    c0011e5c <VAS::allocatePages(int, int)+0xc4>
c0011e69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e6d:	83 c4 1c             	add    esp,0x1c
c0011e70:	5b                   	pop    ebx
c0011e71:	5e                   	pop    esi
c0011e72:	5f                   	pop    edi
c0011e73:	5d                   	pop    ebp
c0011e74:	c3                   	ret    
c0011e75:	83 ec 0c             	sub    esp,0xc
c0011e78:	68 38 ac 02 c0       	push   0xc002ac38
c0011e7d:	e8 dd 84 00 00       	call   c001a35f <Krnl::panic(char const*)>
c0011e82:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011e85:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011e89:	83 c4 10             	add    esp,0x10
c0011e8c:	e9 43 ff ff ff       	jmp    c0011dd4 <VAS::allocatePages(int, int)+0x3c>
c0011e91:	83 ec 0c             	sub    esp,0xc
c0011e94:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011e98:	e8 52 f7 ff ff       	call   c00115ef <Virt::allocateKernelVirtualPages(int)>
c0011e9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011ea1:	83 c4 10             	add    esp,0x10
c0011ea4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011ea9:	0f 87 9b 00 00 00    	ja     c0011f4a <VAS::allocatePages(int, int)+0x1b2>
c0011eaf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011eb3:	85 d2                	test   edx,edx
c0011eb5:	7e 3c                	jle    c0011ef3 <VAS::allocatePages(int, int)+0x15b>
c0011eb7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011ebb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011ebf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ec3:	c1 e5 0c             	shl    ebp,0xc
c0011ec6:	81 ce 00 04 00 00    	or     esi,0x400
c0011ecc:	01 dd                	add    ebp,ebx
c0011ece:	e8 92 de ff ff       	call   c000fd65 <Phys::allocatePage()>
c0011ed3:	56                   	push   esi
c0011ed4:	53                   	push   ebx
c0011ed5:	50                   	push   eax
c0011ed6:	57                   	push   edi
c0011ed7:	e8 ba fd ff ff       	call   c0011c96 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011edc:	83 c4 10             	add    esp,0x10
c0011edf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ee4:	74 03                	je     c0011ee9 <VAS::allocatePages(int, int)+0x151>
c0011ee6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ee9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011eef:	39 dd                	cmp    ebp,ebx
c0011ef1:	75 db                	jne    c0011ece <VAS::allocatePages(int, int)+0x136>
c0011ef3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ef8:	0f 84 26 ff ff ff    	je     c0011e24 <VAS::allocatePages(int, int)+0x8c>
c0011efe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f02:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f06:	89 d3                	mov    ebx,edx
c0011f08:	c1 e0 0c             	shl    eax,0xc
c0011f0b:	c1 eb 0a             	shr    ebx,0xa
c0011f0e:	01 d0                	add    eax,edx
c0011f10:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011f16:	c1 e8 0a             	shr    eax,0xa
c0011f19:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011f1f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f24:	2d 00 00 40 00       	sub    eax,0x400000
c0011f29:	39 c3                	cmp    ebx,eax
c0011f2b:	0f 87 f9 fe ff ff    	ja     c0011e2a <VAS::allocatePages(int, int)+0x92>
c0011f31:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f34:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f3a:	39 d8                	cmp    eax,ebx
c0011f3c:	73 f3                	jae    c0011f31 <VAS::allocatePages(int, int)+0x199>
c0011f3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f42:	83 c4 1c             	add    esp,0x1c
c0011f45:	5b                   	pop    ebx
c0011f46:	5e                   	pop    esi
c0011f47:	5f                   	pop    edi
c0011f48:	5d                   	pop    ebp
c0011f49:	c3                   	ret    
c0011f4a:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0011f4f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f55:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011f5c:	0f 84 4d ff ff ff    	je     c0011eaf <VAS::allocatePages(int, int)+0x117>
c0011f62:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011f6a:	e9 40 ff ff ff       	jmp    c0011eaf <VAS::allocatePages(int, int)+0x117>
c0011f6f:	90                   	nop

c0011f70 <VAS::setCPUSpecific(unsigned long)>:
c0011f70:	83 ec 0c             	sub    esp,0xc
c0011f73:	6a 05                	push   0x5
c0011f75:	68 00 00 40 c2       	push   0xc2400000
c0011f7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f82:	e8 0f fd ff ff       	call   c0011c96 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f87:	83 c4 1c             	add    esp,0x1c
c0011f8a:	c3                   	ret    
c0011f8b:	90                   	nop

c0011f8c <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011f8c:	55                   	push   ebp
c0011f8d:	57                   	push   edi
c0011f8e:	56                   	push   esi
c0011f8f:	53                   	push   ebx
c0011f90:	83 ec 1c             	sub    esp,0x1c
c0011f93:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0011f98:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011f9c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fa2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011fa6:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011fac:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011fb0:	83 e0 01             	and    eax,0x1
c0011fb3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011fb7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011fbb:	85 c0                	test   eax,eax
c0011fbd:	7e 39                	jle    c0011ff8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011fbf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011fc3:	89 f3                	mov    ebx,esi
c0011fc5:	c1 e0 0c             	shl    eax,0xc
c0011fc8:	01 f0                	add    eax,esi
c0011fca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011fce:	55                   	push   ebp
c0011fcf:	53                   	push   ebx
c0011fd0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011fd4:	29 f0                	sub    eax,esi
c0011fd6:	01 d8                	add    eax,ebx
c0011fd8:	50                   	push   eax
c0011fd9:	57                   	push   edi
c0011fda:	e8 b7 fc ff ff       	call   c0011c96 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011fdf:	83 c4 10             	add    esp,0x10
c0011fe2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011fe7:	74 03                	je     c0011fec <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011fe9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011fec:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ff2:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011ff6:	75 d6                	jne    c0011fce <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011ff8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ffd:	75 10                	jne    c001200f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011fff:	0f 20 d8             	mov    eax,cr3
c0012002:	0f 22 d8             	mov    cr3,eax
c0012005:	83 c4 1c             	add    esp,0x1c
c0012008:	89 f0                	mov    eax,esi
c001200a:	5b                   	pop    ebx
c001200b:	5e                   	pop    esi
c001200c:	5f                   	pop    edi
c001200d:	5d                   	pop    ebp
c001200e:	c3                   	ret    
c001200f:	89 f3                	mov    ebx,esi
c0012011:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012015:	c1 eb 0a             	shr    ebx,0xa
c0012018:	c1 e0 0c             	shl    eax,0xc
c001201b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012021:	01 f0                	add    eax,esi
c0012023:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012029:	c1 e8 0a             	shr    eax,0xa
c001202c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012031:	2d 00 00 40 00       	sub    eax,0x400000
c0012036:	39 c3                	cmp    ebx,eax
c0012038:	77 cb                	ja     c0012005 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001203a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001203d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012043:	39 d8                	cmp    eax,ebx
c0012045:	73 f3                	jae    c001203a <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012047:	83 c4 1c             	add    esp,0x1c
c001204a:	89 f0                	mov    eax,esi
c001204c:	5b                   	pop    ebx
c001204d:	5e                   	pop    esi
c001204e:	5f                   	pop    edi
c001204f:	5d                   	pop    ebp
c0012050:	c3                   	ret    
c0012051:	90                   	nop

c0012052 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012052:	55                   	push   ebp
c0012053:	57                   	push   edi
c0012054:	56                   	push   esi
c0012055:	53                   	push   ebx
c0012056:	83 ec 1c             	sub    esp,0x1c
c0012059:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001205d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012061:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012065:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012069:	a9 ff 0f 00 00       	test   eax,0xfff
c001206e:	75 4a                	jne    c00120ba <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012070:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012074:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012077:	c1 eb 16             	shr    ebx,0x16
c001207a:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012081:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012085:	74 4d                	je     c00120d4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012087:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001208b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001208f:	c1 e8 0a             	shr    eax,0xa
c0012092:	80 fa 01             	cmp    dl,0x1
c0012095:	19 d2                	sbb    edx,edx
c0012097:	c1 e3 0c             	shl    ebx,0xc
c001209a:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001209e:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00120a4:	25 fc 0f 00 00       	and    eax,0xffc
c00120a9:	01 d8                	add    eax,ebx
c00120ab:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00120b2:	83 c4 1c             	add    esp,0x1c
c00120b5:	5b                   	pop    ebx
c00120b6:	5e                   	pop    esi
c00120b7:	5f                   	pop    edi
c00120b8:	5d                   	pop    ebp
c00120b9:	c3                   	ret    
c00120ba:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00120be:	83 ec 0c             	sub    esp,0xc
c00120c1:	68 64 ac 02 c0       	push   0xc002ac64
c00120c6:	e8 94 82 00 00       	call   c001a35f <Krnl::panic(char const*)>
c00120cb:	83 c4 10             	add    esp,0x10
c00120ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120d2:	eb 9c                	jmp    c0012070 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00120d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00120d8:	e8 88 dc ff ff       	call   c000fd65 <Phys::allocatePage()>
c00120dd:	83 ec 0c             	sub    esp,0xc
c00120e0:	89 c5                	mov    ebp,eax
c00120e2:	8b 0d 70 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e770
c00120e8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00120ec:	6a 01                	push   0x1
c00120ee:	e8 fc f4 ff ff       	call   c00115ef <Virt::allocateKernelVirtualPages(int)>
c00120f3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00120fa:	6a 01                	push   0x1
c00120fc:	50                   	push   eax
c00120fd:	55                   	push   ebp
c00120fe:	81 cd 07 04 00 00    	or     ebp,0x407
c0012104:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012108:	51                   	push   ecx
c0012109:	e8 7e fe ff ff       	call   c0011f8c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001210e:	83 c4 1c             	add    esp,0x1c
c0012111:	68 00 10 00 00       	push   0x1000
c0012116:	6a 00                	push   0x0
c0012118:	50                   	push   eax
c0012119:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001211d:	e8 2e e6 fe ff       	call   c0000750 <memset>
c0012122:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012126:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012129:	e8 f1 f7 ff ff       	call   c001191f <Virt::freeKernelVirtualPages(unsigned long)>
c001212e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012131:	83 c4 10             	add    esp,0x10
c0012134:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012137:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001213b:	e9 47 ff ff ff       	jmp    c0012087 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0012140 <VAS::VAS(bool)>:
c0012140:	53                   	push   ebx
c0012141:	83 ec 28             	sub    esp,0x28
c0012144:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012148:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001214c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012150:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001215b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012162:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012166:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001216a:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001216d:	e8 f3 db ff ff       	call   c000fd65 <Phys::allocatePage()>
c0012172:	89 c2                	mov    edx,eax
c0012174:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012178:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001217b:	8b 1d 70 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e770
c0012181:	83 ec 0c             	sub    esp,0xc
c0012184:	6a 01                	push   0x1
c0012186:	e8 64 f4 ff ff       	call   c00115ef <Virt::allocateKernelVirtualPages(int)>
c001218b:	83 c4 10             	add    esp,0x10
c001218e:	89 c2                	mov    edx,eax
c0012190:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012194:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012197:	83 ec 0c             	sub    esp,0xc
c001219a:	6a 03                	push   0x3
c001219c:	6a 01                	push   0x1
c001219e:	52                   	push   edx
c001219f:	50                   	push   eax
c00121a0:	53                   	push   ebx
c00121a1:	e8 e6 fd ff ff       	call   c0011f8c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00121a6:	83 c4 20             	add    esp,0x20
c00121a9:	89 c2                	mov    edx,eax
c00121ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121af:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00121b2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00121ba:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00121c2:	7f 1c                	jg     c00121e0 <VAS::VAS(bool)+0xa0>
c00121c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121c8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00121cb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00121cf:	c1 e2 02             	shl    edx,0x2
c00121d2:	01 d0                	add    eax,edx
c00121d4:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00121da:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121de:	eb da                	jmp    c00121ba <VAS::VAS(bool)+0x7a>
c00121e0:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00121e8:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00121f0:	7f 7a                	jg     c001226c <VAS::VAS(bool)+0x12c>
c00121f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00121f6:	2d 00 02 00 00       	sub    eax,0x200
c00121fb:	c1 e0 0c             	shl    eax,0xc
c00121fe:	83 c8 03             	or     eax,0x3
c0012201:	89 c2                	mov    edx,eax
c0012203:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0012208:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001220e:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012214:	83 e0 10             	and    eax,0x10
c0012217:	84 c0                	test   al,al
c0012219:	74 07                	je     c0012222 <VAS::VAS(bool)+0xe2>
c001221b:	b8 00 01 00 00       	mov    eax,0x100
c0012220:	eb 05                	jmp    c0012227 <VAS::VAS(bool)+0xe7>
c0012222:	b8 00 00 00 00       	mov    eax,0x0
c0012227:	09 d0                	or     eax,edx
c0012229:	89 c1                	mov    ecx,eax
c001222b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001222f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012232:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012236:	c1 e2 02             	shl    edx,0x2
c0012239:	01 d0                	add    eax,edx
c001223b:	89 ca                	mov    edx,ecx
c001223d:	89 10                	mov    DWORD PTR [eax],edx
c001223f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012243:	2d 40 03 00 00       	sub    eax,0x340
c0012248:	83 f8 7f             	cmp    eax,0x7f
c001224b:	77 16                	ja     c0012263 <VAS::VAS(bool)+0x123>
c001224d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012251:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012254:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012258:	c1 e2 02             	shl    edx,0x2
c001225b:	01 d0                	add    eax,edx
c001225d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012263:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012267:	e9 7c ff ff ff       	jmp    c00121e8 <VAS::VAS(bool)+0xa8>
c001226c:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0012271:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012277:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001227d:	83 e0 10             	and    eax,0x10
c0012280:	84 c0                	test   al,al
c0012282:	74 07                	je     c001228b <VAS::VAS(bool)+0x14b>
c0012284:	b8 03 41 00 00       	mov    eax,0x4103
c0012289:	eb 05                	jmp    c0012290 <VAS::VAS(bool)+0x150>
c001228b:	b8 03 40 00 00       	mov    eax,0x4003
c0012290:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012294:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012297:	81 c2 20 0c 00 00    	add    edx,0xc20
c001229d:	89 02                	mov    DWORD PTR [edx],eax
c001229f:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00122a4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122aa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00122b0:	83 ec 08             	sub    esp,0x8
c00122b3:	50                   	push   eax
c00122b4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00122b8:	e8 b3 fc ff ff       	call   c0011f70 <VAS::setCPUSpecific(unsigned long)>
c00122bd:	83 c4 10             	add    esp,0x10
c00122c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122c4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00122c7:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00122cc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122d2:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00122d8:	83 e0 10             	and    eax,0x10
c00122db:	84 c0                	test   al,al
c00122dd:	74 07                	je     c00122e6 <VAS::VAS(bool)+0x1a6>
c00122df:	b8 00 01 00 00       	mov    eax,0x100
c00122e4:	eb 05                	jmp    c00122eb <VAS::VAS(bool)+0x1ab>
c00122e6:	b8 00 00 00 00       	mov    eax,0x0
c00122eb:	09 c2                	or     edx,eax
c00122ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122f1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00122f4:	05 fc 0f 00 00       	add    eax,0xffc
c00122f9:	83 ca 03             	or     edx,0x3
c00122fc:	89 10                	mov    DWORD PTR [eax],edx
c00122fe:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0012303:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012309:	83 ec 0c             	sub    esp,0xc
c001230c:	50                   	push   eax
c001230d:	e8 e8 1d 00 00       	call   c00140fa <Device::getName()>
c0012312:	83 c4 10             	add    esp,0x10
c0012315:	83 ec 08             	sub    esp,0x8
c0012318:	68 60 ad 02 c0       	push   0xc002ad60
c001231d:	50                   	push   eax
c001231e:	e8 75 e5 fe ff       	call   c0000898 <strcmp>
c0012323:	83 c4 10             	add    esp,0x10
c0012326:	85 c0                	test   eax,eax
c0012328:	0f 94 c0             	sete   al
c001232b:	84 c0                	test   al,al
c001232d:	0f 84 87 00 00 00    	je     c00123ba <VAS::VAS(bool)+0x27a>
c0012333:	fa                   	cli    
c0012334:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c0012339:	40                   	inc    eax
c001233a:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001233f:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0012344:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001234a:	05 7c 09 00 00       	add    eax,0x97c
c001234f:	83 ec 0c             	sub    esp,0xc
c0012352:	50                   	push   eax
c0012353:	e8 92 cf ff ff       	call   c000f2ea <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012358:	83 c4 10             	add    esp,0x10
c001235b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012360:	89 c3                	mov    ebx,eax
c0012362:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0012367:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001236d:	05 7c 09 00 00       	add    eax,0x97c
c0012372:	83 ec 0c             	sub    esp,0xc
c0012375:	50                   	push   eax
c0012376:	e8 6f cf ff ff       	call   c000f2ea <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001237b:	83 c4 10             	add    esp,0x10
c001237e:	83 ec 08             	sub    esp,0x8
c0012381:	50                   	push   eax
c0012382:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012386:	e8 75 f5 ff ff       	call   c0011900 <VAS::getPageTableEntry(unsigned long)>
c001238b:	83 c4 10             	add    esp,0x10
c001238e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012390:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012395:	6a 11                	push   0x11
c0012397:	53                   	push   ebx
c0012398:	50                   	push   eax
c0012399:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001239d:	e8 f4 f8 ff ff       	call   c0011c96 <VAS::mapPage(unsigned long, unsigned long, int)>
c00123a2:	83 c4 10             	add    esp,0x10
c00123a5:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c00123aa:	48                   	dec    eax
c00123ab:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c00123b0:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c00123b5:	85 c0                	test   eax,eax
c00123b7:	75 01                	jne    c00123ba <VAS::VAS(bool)+0x27a>
c00123b9:	fb                   	sti    
c00123ba:	90                   	nop
c00123bb:	83 c4 28             	add    esp,0x28
c00123be:	5b                   	pop    ebx
c00123bf:	c3                   	ret    

c00123c0 <VAS::evict(unsigned long)>:
c00123c0:	55                   	push   ebp
c00123c1:	57                   	push   edi
c00123c2:	56                   	push   esi
c00123c3:	53                   	push   ebx
c00123c4:	83 ec 28             	sub    esp,0x28
c00123c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00123cb:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00123cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123d3:	68 6e ad 02 c0       	push   0xc002ad6e
c00123d8:	e8 e4 05 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c00123dd:	e8 4e f3 ff ff       	call   c0011730 <Virt::allocateSwapfilePage()>
c00123e2:	5a                   	pop    edx
c00123e3:	89 c7                	mov    edi,eax
c00123e5:	59                   	pop    ecx
c00123e6:	50                   	push   eax
c00123e7:	68 8b ad 02 c0       	push   0xc002ad8b
c00123ec:	e8 d0 05 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c00123f1:	83 c4 10             	add    esp,0x10
c00123f4:	8b 1d ac d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5ac
c00123fa:	85 db                	test   ebx,ebx
c00123fc:	7e 3d                	jle    c001243b <VAS::evict(unsigned long)+0x7b>
c00123fe:	89 ee                	mov    esi,ebp
c0012400:	31 db                	xor    ebx,ebx
c0012402:	83 ec 0c             	sub    esp,0xc
c0012405:	57                   	push   edi
c0012406:	e8 13 f3 ff ff       	call   c001171e <Virt::swapIDToSector(unsigned long)>
c001240b:	89 34 24             	mov    DWORD PTR [esp],esi
c001240e:	01 d8                	add    eax,ebx
c0012410:	6a 01                	push   0x1
c0012412:	31 d2                	xor    edx,edx
c0012414:	43                   	inc    ebx
c0012415:	52                   	push   edx
c0012416:	81 c6 00 02 00 00    	add    esi,0x200
c001241c:	50                   	push   eax
c001241d:	0f be 05 b8 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d5b8
c0012424:	ff 34 85 fc ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1504]
c001242b:	e8 58 3f 00 00       	call   c0016388 <LogicalDisk::write(unsigned long long, int, void*)>
c0012430:	83 c4 20             	add    esp,0x20
c0012433:	39 1d ac d5 02 c0    	cmp    DWORD PTR ds:0xc002d5ac,ebx
c0012439:	7f c7                	jg     c0012402 <VAS::evict(unsigned long)+0x42>
c001243b:	83 ec 08             	sub    esp,0x8
c001243e:	c1 e7 0b             	shl    edi,0xb
c0012441:	55                   	push   ebp
c0012442:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012446:	e8 b5 f4 ff ff       	call   c0011900 <VAS::getPageTableEntry(unsigned long)>
c001244b:	5a                   	pop    edx
c001244c:	89 c6                	mov    esi,eax
c001244e:	59                   	pop    ecx
c001244f:	ff 30                	push   DWORD PTR [eax]
c0012451:	68 9b ad 02 c0       	push   0xc002ad9b
c0012456:	e8 66 05 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001245b:	8b 16                	mov    edx,DWORD PTR [esi]
c001245d:	89 d3                	mov    ebx,edx
c001245f:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012465:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001246b:	09 d7                	or     edi,edx
c001246d:	89 3e                	mov    DWORD PTR [esi],edi
c001246f:	5e                   	pop    esi
c0012470:	58                   	pop    eax
c0012471:	57                   	push   edi
c0012472:	68 b4 ad 02 c0       	push   0xc002adb4
c0012477:	e8 45 05 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001247c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001247f:	ff 05 68 e7 02 c0    	inc    DWORD PTR ds:0xc002e768
c0012485:	e8 6a d8 ff ff       	call   c000fcf4 <Phys::freePage(unsigned long)>
c001248a:	0f 20 d8             	mov    eax,cr3
c001248d:	0f 22 d8             	mov    cr3,eax
c0012490:	ff 35 68 e7 02 c0    	push   DWORD PTR ds:0xc002e768
c0012496:	55                   	push   ebp
c0012497:	53                   	push   ebx
c0012498:	68 88 ac 02 c0       	push   0xc002ac88
c001249d:	e8 1f 05 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c00124a2:	a1 64 e7 02 c0       	mov    eax,ds:0xc002e764
c00124a7:	c7 44 24 50 cd ad 02 c0 	mov    DWORD PTR [esp+0x50],0xc002adcd
c00124af:	8d 50 01             	lea    edx,[eax+0x1]
c00124b2:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00124b6:	89 15 64 e7 02 c0    	mov    DWORD PTR ds:0xc002e764,edx
c00124bc:	83 c4 3c             	add    esp,0x3c
c00124bf:	5b                   	pop    ebx
c00124c0:	5e                   	pop    esi
c00124c1:	5f                   	pop    edi
c00124c2:	5d                   	pop    ebp
c00124c3:	e9 f9 04 00 00       	jmp    c00129c1 <Dbg::kprintf(char const*, ...)>

c00124c8 <VAS::tryLoadBackOffDisk(unsigned long)>:
c00124c8:	55                   	push   ebp
c00124c9:	57                   	push   edi
c00124ca:	56                   	push   esi
c00124cb:	53                   	push   ebx
c00124cc:	83 ec 24             	sub    esp,0x24
c00124cf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00124d3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00124d7:	68 de ad 02 c0       	push   0xc002adde
c00124dc:	e8 e0 04 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c00124e1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00124e5:	58                   	pop    eax
c00124e6:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c00124ec:	5a                   	pop    edx
c00124ed:	57                   	push   edi
c00124ee:	53                   	push   ebx
c00124ef:	e8 0c f4 ff ff       	call   c0011900 <VAS::getPageTableEntry(unsigned long)>
c00124f4:	59                   	pop    ecx
c00124f5:	5e                   	pop    esi
c00124f6:	89 c6                	mov    esi,eax
c00124f8:	ff 30                	push   DWORD PTR [eax]
c00124fa:	68 f1 ad 02 c0       	push   0xc002adf1
c00124ff:	e8 bd 04 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0012504:	83 c4 10             	add    esp,0x10
c0012507:	85 ff                	test   edi,edi
c0012509:	74 0a                	je     c0012515 <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>
c001250b:	8b 2e                	mov    ebp,DWORD PTR [esi]
c001250d:	f7 c5 01 00 00 00    	test   ebp,0x1
c0012513:	74 0a                	je     c001251f <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c0012515:	83 c4 1c             	add    esp,0x1c
c0012518:	31 c0                	xor    eax,eax
c001251a:	5b                   	pop    ebx
c001251b:	5e                   	pop    esi
c001251c:	5f                   	pop    edi
c001251d:	5d                   	pop    ebp
c001251e:	c3                   	ret    
c001251f:	83 ec 08             	sub    esp,0x8
c0012522:	c1 ed 0b             	shr    ebp,0xb
c0012525:	55                   	push   ebp
c0012526:	68 ff ad 02 c0       	push   0xc002adff
c001252b:	e8 91 04 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0012530:	e8 30 d8 ff ff       	call   c000fd65 <Phys::allocatePage()>
c0012535:	59                   	pop    ecx
c0012536:	5a                   	pop    edx
c0012537:	50                   	push   eax
c0012538:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001253c:	68 0a ae 02 c0       	push   0xc002ae0a
c0012541:	e8 7b 04 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0012546:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001254a:	8b 16                	mov    edx,DWORD PTR [esi]
c001254c:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012552:	09 d0                	or     eax,edx
c0012554:	0d 01 08 00 00       	or     eax,0x801
c0012559:	89 06                	mov    DWORD PTR [esi],eax
c001255b:	59                   	pop    ecx
c001255c:	5e                   	pop    esi
c001255d:	50                   	push   eax
c001255e:	68 1f ae 02 c0       	push   0xc002ae1f
c0012563:	e8 59 04 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0012568:	0f 20 d8             	mov    eax,cr3
c001256b:	83 c4 0c             	add    esp,0xc
c001256e:	53                   	push   ebx
c001256f:	50                   	push   eax
c0012570:	68 37 ae 02 c0       	push   0xc002ae37
c0012575:	e8 47 04 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001257a:	c7 04 24 4f ae 02 c0 	mov    DWORD PTR [esp],0xc002ae4f
c0012581:	e8 3b 04 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0012586:	83 c4 10             	add    esp,0x10
c0012589:	a1 ac d5 02 c0       	mov    eax,ds:0xc002d5ac
c001258e:	85 c0                	test   eax,eax
c0012590:	7e 3d                	jle    c00125cf <VAS::tryLoadBackOffDisk(unsigned long)+0x107>
c0012592:	89 fe                	mov    esi,edi
c0012594:	31 db                	xor    ebx,ebx
c0012596:	83 ec 0c             	sub    esp,0xc
c0012599:	55                   	push   ebp
c001259a:	e8 7f f1 ff ff       	call   c001171e <Virt::swapIDToSector(unsigned long)>
c001259f:	89 34 24             	mov    DWORD PTR [esp],esi
c00125a2:	01 d8                	add    eax,ebx
c00125a4:	6a 01                	push   0x1
c00125a6:	31 d2                	xor    edx,edx
c00125a8:	43                   	inc    ebx
c00125a9:	52                   	push   edx
c00125aa:	81 c6 00 02 00 00    	add    esi,0x200
c00125b0:	50                   	push   eax
c00125b1:	0f be 05 b8 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d5b8
c00125b8:	ff 34 85 fc ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1504]
c00125bf:	e8 58 3d 00 00       	call   c001631c <LogicalDisk::read(unsigned long long, int, void*)>
c00125c4:	83 c4 20             	add    esp,0x20
c00125c7:	39 1d ac d5 02 c0    	cmp    DWORD PTR ds:0xc002d5ac,ebx
c00125cd:	7f c7                	jg     c0012596 <VAS::tryLoadBackOffDisk(unsigned long)+0xce>
c00125cf:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c00125d4:	48                   	dec    eax
c00125d5:	52                   	push   edx
c00125d6:	a3 68 e7 02 c0       	mov    ds:0xc002e768,eax
c00125db:	50                   	push   eax
c00125dc:	57                   	push   edi
c00125dd:	68 5f ae 02 c0       	push   0xc002ae5f
c00125e2:	e8 da 03 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c00125e7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00125ea:	e8 11 f1 ff ff       	call   c0011700 <Virt::freeSwapfilePage(unsigned long)>
c00125ef:	c7 04 24 74 ae 02 c0 	mov    DWORD PTR [esp],0xc002ae74
c00125f6:	e8 c6 03 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c00125fb:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c0012600:	83 c4 10             	add    esp,0x10
c0012603:	48                   	dec    eax
c0012604:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c0012609:	85 c0                	test   eax,eax
c001260b:	75 01                	jne    c001260e <VAS::tryLoadBackOffDisk(unsigned long)+0x146>
c001260d:	fb                   	sti    
c001260e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012612:	25 ff 0f 00 00       	and    eax,0xfff
c0012617:	3d e0 0f 00 00       	cmp    eax,0xfe0
c001261c:	77 20                	ja     c001263e <VAS::tryLoadBackOffDisk(unsigned long)+0x176>
c001261e:	0f 20 d8             	mov    eax,cr3
c0012621:	0f 22 d8             	mov    cr3,eax
c0012624:	83 ec 0c             	sub    esp,0xc
c0012627:	68 9a ae 02 c0       	push   0xc002ae9a
c001262c:	e8 90 03 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0012631:	83 c4 10             	add    esp,0x10
c0012634:	b0 01                	mov    al,0x1
c0012636:	83 c4 1c             	add    esp,0x1c
c0012639:	5b                   	pop    ebx
c001263a:	5e                   	pop    esi
c001263b:	5f                   	pop    edi
c001263c:	5d                   	pop    ebp
c001263d:	c3                   	ret    
c001263e:	83 ec 0c             	sub    esp,0xc
c0012641:	68 8a ae 02 c0       	push   0xc002ae8a
c0012646:	e8 76 03 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001264b:	83 c4 10             	add    esp,0x10
c001264e:	eb ce                	jmp    c001261e <VAS::tryLoadBackOffDisk(unsigned long)+0x156>

c0012650 <VAS::scanForEviction()>:
c0012650:	55                   	push   ebp
c0012651:	31 ed                	xor    ebp,ebp
c0012653:	57                   	push   edi
c0012654:	56                   	push   esi
c0012655:	53                   	push   ebx
c0012656:	83 ec 0c             	sub    esp,0xc
c0012659:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001265d:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012660:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012666:	75 0e                	jne    c0012676 <VAS::scanForEviction()+0x26>
c0012668:	89 da                	mov    edx,ebx
c001266a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001266d:	c1 ea 16             	shr    edx,0x16
c0012670:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012674:	74 4e                	je     c00126c4 <VAS::scanForEviction()+0x74>
c0012676:	53                   	push   ebx
c0012677:	56                   	push   esi
c0012678:	e8 83 f2 ff ff       	call   c0011900 <VAS::getPageTableEntry(unsigned long)>
c001267d:	5f                   	pop    edi
c001267e:	8b 38                	mov    edi,DWORD PTR [eax]
c0012680:	5a                   	pop    edx
c0012681:	89 fa                	mov    edx,edi
c0012683:	81 e2 01 08 00 00    	and    edx,0x801
c0012689:	81 fa 01 08 00 00    	cmp    edx,0x801
c001268f:	74 3e                	je     c00126cf <VAS::scanForEviction()+0x7f>
c0012691:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012697:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c001269d:	76 2b                	jbe    c00126ca <VAS::scanForEviction()+0x7a>
c001269f:	45                   	inc    ebp
c00126a0:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c00126a7:	83 fd 04             	cmp    ebp,0x4
c00126aa:	74 35                	je     c00126e1 <VAS::scanForEviction()+0x91>
c00126ac:	31 db                	xor    ebx,ebx
c00126ae:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00126b4:	75 c0                	jne    c0012676 <VAS::scanForEviction()+0x26>
c00126b6:	89 da                	mov    edx,ebx
c00126b8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00126bb:	c1 ea 16             	shr    edx,0x16
c00126be:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00126c2:	75 b2                	jne    c0012676 <VAS::scanForEviction()+0x26>
c00126c4:	81 c3 00 00 40 00    	add    ebx,0x400000
c00126ca:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00126cd:	eb 91                	jmp    c0012660 <VAS::scanForEviction()+0x10>
c00126cf:	f7 c7 20 00 00 00    	test   edi,0x20
c00126d5:	74 22                	je     c00126f9 <VAS::scanForEviction()+0xa9>
c00126d7:	83 e7 df             	and    edi,0xffffffdf
c00126da:	89 38                	mov    DWORD PTR [eax],edi
c00126dc:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00126df:	eb b0                	jmp    c0012691 <VAS::scanForEviction()+0x41>
c00126e1:	83 ec 0c             	sub    esp,0xc
c00126e4:	68 b8 ac 02 c0       	push   0xc002acb8
c00126e9:	e8 71 7c 00 00       	call   c001a35f <Krnl::panic(char const*)>
c00126ee:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00126f1:	83 c4 10             	add    esp,0x10
c00126f4:	e9 67 ff ff ff       	jmp    c0012660 <VAS::scanForEviction()+0x10>
c00126f9:	83 ec 08             	sub    esp,0x8
c00126fc:	53                   	push   ebx
c00126fd:	68 a8 ae 02 c0       	push   0xc002aea8
c0012702:	e8 ba 02 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0012707:	58                   	pop    eax
c0012708:	5a                   	pop    edx
c0012709:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001270c:	56                   	push   esi
c001270d:	e8 ae fc ff ff       	call   c00123c0 <VAS::evict(unsigned long)>
c0012712:	59                   	pop    ecx
c0012713:	5b                   	pop    ebx
c0012714:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0012717:	68 bc ae 02 c0       	push   0xc002aebc
c001271c:	e8 a0 02 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0012721:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012728:	89 f8                	mov    eax,edi
c001272a:	83 c4 1c             	add    esp,0x1c
c001272d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012732:	5b                   	pop    ebx
c0012733:	5e                   	pop    esi
c0012734:	5f                   	pop    edi
c0012735:	5d                   	pop    ebp
c0012736:	c3                   	ret    

c0012737 <mapVASFirstTime>:
c0012737:	55                   	push   ebp
c0012738:	57                   	push   edi
c0012739:	56                   	push   esi
c001273a:	53                   	push   ebx
c001273b:	83 ec 0c             	sub    esp,0xc
c001273e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012743:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012746:	4a                   	dec    edx
c0012747:	0f 84 fe 00 00 00    	je     c001284b <mapVASFirstTime+0x114>
c001274d:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012750:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012753:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012758:	c1 e5 15             	shl    ebp,0x15
c001275b:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0012760:	8b b2 32 05 00 00    	mov    esi,DWORD PTR [edx+0x532]
c0012766:	29 eb                	sub    ebx,ebp
c0012768:	29 ef                	sub    edi,ebp
c001276a:	83 ec 08             	sub    esp,0x8
c001276d:	53                   	push   ebx
c001276e:	68 e8 ae 02 c0       	push   0xc002aee8
c0012773:	e8 49 02 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0012778:	e8 e8 d5 ff ff       	call   c000fd65 <Phys::allocatePage()>
c001277d:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c0012784:	6a 01                	push   0x1
c0012786:	53                   	push   ebx
c0012787:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001278d:	50                   	push   eax
c001278e:	56                   	push   esi
c001278f:	e8 f8 f7 ff ff       	call   c0011f8c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012794:	83 c4 20             	add    esp,0x20
c0012797:	39 fb                	cmp    ebx,edi
c0012799:	75 cf                	jne    c001276a <mapVASFirstTime+0x33>
c001279b:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c00127a0:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c00127a5:	29 eb                	sub    ebx,ebp
c00127a7:	29 ef                	sub    edi,ebp
c00127a9:	83 ec 08             	sub    esp,0x8
c00127ac:	53                   	push   ebx
c00127ad:	68 04 af 02 c0       	push   0xc002af04
c00127b2:	e8 0a 02 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c00127b7:	58                   	pop    eax
c00127b8:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c00127bc:	5a                   	pop    edx
c00127bd:	19 c0                	sbb    eax,eax
c00127bf:	83 e0 04             	and    eax,0x4
c00127c2:	05 03 04 00 00       	add    eax,0x403
c00127c7:	50                   	push   eax
c00127c8:	68 29 ae 02 c0       	push   0xc002ae29
c00127cd:	e8 ef 01 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c00127d2:	e8 8e d5 ff ff       	call   c000fd65 <Phys::allocatePage()>
c00127d7:	59                   	pop    ecx
c00127d8:	89 c5                	mov    ebp,eax
c00127da:	58                   	pop    eax
c00127db:	55                   	push   ebp
c00127dc:	68 18 af 02 c0       	push   0xc002af18
c00127e1:	e8 db 01 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c00127e6:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c00127ea:	19 d2                	sbb    edx,edx
c00127ec:	83 e2 04             	and    edx,0x4
c00127ef:	81 c2 03 04 00 00    	add    edx,0x403
c00127f5:	89 14 24             	mov    DWORD PTR [esp],edx
c00127f8:	6a 01                	push   0x1
c00127fa:	53                   	push   ebx
c00127fb:	55                   	push   ebp
c00127fc:	56                   	push   esi
c00127fd:	e8 8a f7 ff ff       	call   c0011f8c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012802:	83 c4 18             	add    esp,0x18
c0012805:	53                   	push   ebx
c0012806:	56                   	push   esi
c0012807:	e8 f4 f0 ff ff       	call   c0011900 <VAS::getPageTableEntry(unsigned long)>
c001280c:	5a                   	pop    edx
c001280d:	59                   	pop    ecx
c001280e:	ff 30                	push   DWORD PTR [eax]
c0012810:	68 34 af 02 c0       	push   0xc002af34
c0012815:	e8 a7 01 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001281a:	0f 20 d8             	mov    eax,cr3
c001281d:	83 c4 0c             	add    esp,0xc
c0012820:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012826:	56                   	push   esi
c0012827:	50                   	push   eax
c0012828:	68 37 ae 02 c0       	push   0xc002ae37
c001282d:	e8 8f 01 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0012832:	83 c4 10             	add    esp,0x10
c0012835:	39 df                	cmp    edi,ebx
c0012837:	0f 85 6c ff ff ff    	jne    c00127a9 <mapVASFirstTime+0x72>
c001283d:	0f 20 d8             	mov    eax,cr3
c0012840:	0f 22 d8             	mov    cr3,eax
c0012843:	83 c4 0c             	add    esp,0xc
c0012846:	5b                   	pop    ebx
c0012847:	5e                   	pop    esi
c0012848:	5f                   	pop    edi
c0012849:	5d                   	pop    ebp
c001284a:	c3                   	ret    
c001284b:	83 ec 0c             	sub    esp,0xc
c001284e:	68 cf ae 02 c0       	push   0xc002aecf
c0012853:	e8 69 01 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0012858:	83 c4 10             	add    esp,0x10
c001285b:	83 c4 0c             	add    esp,0xc
c001285e:	5b                   	pop    ebx
c001285f:	5e                   	pop    esi
c0012860:	5f                   	pop    edi
c0012861:	5d                   	pop    ebp
c0012862:	c3                   	ret    

c0012863 <__cxa_atexit>:
c0012863:	31 c0                	xor    eax,eax
c0012865:	c3                   	ret    

c0012866 <__cxa_finalize>:
c0012866:	c3                   	ret    

c0012867 <__stack_chk_fail>:
c0012867:	55                   	push   ebp
c0012868:	89 e5                	mov    ebp,esp
c001286a:	83 ec 14             	sub    esp,0x14
c001286d:	68 3f af 02 c0       	push   0xc002af3f
c0012872:	e8 4a 01 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0012877:	58                   	pop    eax
c0012878:	5a                   	pop    edx
c0012879:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001287c:	68 8f af 02 c0       	push   0xc002af8f
c0012881:	e8 3b 01 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0012886:	59                   	pop    ecx
c0012887:	58                   	pop    eax
c0012888:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001288b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001288e:	68 8f af 02 c0       	push   0xc002af8f
c0012893:	e8 29 01 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0012898:	5a                   	pop    edx
c0012899:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001289c:	59                   	pop    ecx
c001289d:	8b 00                	mov    eax,DWORD PTR [eax]
c001289f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00128a2:	68 8f af 02 c0       	push   0xc002af8f
c00128a7:	e8 15 01 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c00128ac:	5a                   	pop    edx
c00128ad:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00128b0:	59                   	pop    ecx
c00128b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00128b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00128b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00128b8:	68 8f af 02 c0       	push   0xc002af8f
c00128bd:	e8 ff 00 00 00       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c00128c2:	c7 04 24 97 af 02 c0 	mov    DWORD PTR [esp],0xc002af97
c00128c9:	e8 91 7a 00 00       	call   c001a35f <Krnl::panic(char const*)>
c00128ce:	83 c4 10             	add    esp,0x10
c00128d1:	c9                   	leave  
c00128d2:	c3                   	ret    

c00128d3 <__cxa_pure_virtual>:
c00128d3:	83 ec 18             	sub    esp,0x18
c00128d6:	68 af af 02 c0       	push   0xc002afaf
c00128db:	e8 7f 7a 00 00       	call   c001a35f <Krnl::panic(char const*)>
c00128e0:	83 c4 1c             	add    esp,0x1c
c00128e3:	c3                   	ret    

c00128e4 <operator new[](unsigned long)>:
c00128e4:	e9 80 d0 ff ff       	jmp    c000f969 <malloc>

c00128e9 <operator delete(void*, unsigned long)>:
c00128e9:	e9 9b d0 ff ff       	jmp    c000f989 <rfree>

c00128ee <operator delete[](void*)>:
c00128ee:	e9 96 d0 ff ff       	jmp    c000f989 <rfree>

c00128f3 <operator delete[](void*, unsigned long)>:
c00128f3:	e9 91 d0 ff ff       	jmp    c000f989 <rfree>

c00128f8 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00128f8:	55                   	push   ebp
c00128f9:	b9 11 00 00 00       	mov    ecx,0x11
c00128fe:	57                   	push   edi
c00128ff:	56                   	push   esi
c0012900:	be a2 a9 02 c0       	mov    esi,0xc002a9a2
c0012905:	53                   	push   ebx
c0012906:	83 ec 20             	sub    esp,0x20
c0012909:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001290d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012911:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0012915:	fc                   	cld    
c0012916:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012918:	89 ee                	mov    esi,ebp
c001291a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001291e:	eb 02                	jmp    c0012922 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c0012920:	89 c6                	mov    esi,eax
c0012922:	31 d2                	xor    edx,edx
c0012924:	41                   	inc    ecx
c0012925:	89 f0                	mov    eax,esi
c0012927:	f7 f3                	div    ebx
c0012929:	39 de                	cmp    esi,ebx
c001292b:	73 f3                	jae    c0012920 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c001292d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012930:	eb 02                	jmp    c0012934 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c0012932:	89 c5                	mov    ebp,eax
c0012934:	31 d2                	xor    edx,edx
c0012936:	49                   	dec    ecx
c0012937:	89 e8                	mov    eax,ebp
c0012939:	f7 f3                	div    ebx
c001293b:	39 dd                	cmp    ebp,ebx
c001293d:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0012941:	88 11                	mov    BYTE PTR [ecx],dl
c0012943:	73 ed                	jae    c0012932 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c0012945:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012949:	83 c4 20             	add    esp,0x20
c001294c:	5b                   	pop    ebx
c001294d:	5e                   	pop    esi
c001294e:	5f                   	pop    edi
c001294f:	5d                   	pop    ebp
c0012950:	c3                   	ret    

c0012951 <Dbg::logc(char)>:
c0012951:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012955:	ba fd 03 00 00       	mov    edx,0x3fd
c001295a:	ec                   	in     al,dx
c001295b:	a8 20                	test   al,0x20
c001295d:	74 fb                	je     c001295a <Dbg::logc(char)+0x9>
c001295f:	ba f8 03 00 00       	mov    edx,0x3f8
c0012964:	88 c8                	mov    al,cl
c0012966:	ee                   	out    dx,al
c0012967:	c3                   	ret    

c0012968 <Dbg::logs(char*)>:
c0012968:	53                   	push   ebx
c0012969:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001296d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012970:	84 c0                	test   al,al
c0012972:	74 0f                	je     c0012983 <Dbg::logs(char*)+0x1b>
c0012974:	50                   	push   eax
c0012975:	43                   	inc    ebx
c0012976:	e8 d6 ff ff ff       	call   c0012951 <Dbg::logc(char)>
c001297b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001297e:	5a                   	pop    edx
c001297f:	84 c0                	test   al,al
c0012981:	75 f1                	jne    c0012974 <Dbg::logs(char*)+0xc>
c0012983:	5b                   	pop    ebx
c0012984:	c3                   	ret    

c0012985 <Dbg::logWriteInt(unsigned int)>:
c0012985:	83 ec 10             	sub    esp,0x10
c0012988:	6a 0a                	push   0xa
c001298a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001298e:	50                   	push   eax
c001298f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012993:	e8 60 ff ff ff       	call   c00128f8 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012998:	50                   	push   eax
c0012999:	e8 ca ff ff ff       	call   c0012968 <Dbg::logs(char*)>
c001299e:	83 c4 20             	add    esp,0x20
c00129a1:	c3                   	ret    

c00129a2 <Dbg::logWriteIntBase(unsigned int, int)>:
c00129a2:	83 ec 10             	sub    esp,0x10
c00129a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00129a9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00129ad:	50                   	push   eax
c00129ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129b2:	e8 41 ff ff ff       	call   c00128f8 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00129b7:	50                   	push   eax
c00129b8:	e8 ab ff ff ff       	call   c0012968 <Dbg::logs(char*)>
c00129bd:	83 c4 20             	add    esp,0x20
c00129c0:	c3                   	ret    

c00129c1 <Dbg::kprintf(char const*, ...)>:
c00129c1:	55                   	push   ebp
c00129c2:	57                   	push   edi
c00129c3:	56                   	push   esi
c00129c4:	53                   	push   ebx
c00129c5:	83 ec 0c             	sub    esp,0xc
c00129c8:	8d 44 24 24          	lea    eax,[esp+0x24]
c00129cc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00129d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00129d4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00129d7:	84 c0                	test   al,al
c00129d9:	74 4a                	je     c0012a25 <Dbg::kprintf(char const*, ...)+0x64>
c00129db:	31 db                	xor    ebx,ebx
c00129dd:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00129e0:	3c 25                	cmp    al,0x25
c00129e2:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00129e5:	0f 85 e4 00 00 00    	jne    c0012acf <Dbg::kprintf(char const*, ...)+0x10e>
c00129eb:	83 c3 02             	add    ebx,0x2
c00129ee:	8a 07                	mov    al,BYTE PTR [edi]
c00129f0:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00129f3:	83 e8 25             	sub    eax,0x25
c00129f6:	3c 53                	cmp    al,0x53
c00129f8:	0f 87 ba 00 00 00    	ja     c0012ab8 <Dbg::kprintf(char const*, ...)+0xf7>
c00129fe:	0f b6 c0             	movzx  eax,al
c0012a01:	ff 24 85 c4 af 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd503c]
c0012a08:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a0c:	89 c8                	mov    eax,ecx
c0012a0e:	83 c1 04             	add    ecx,0x4
c0012a11:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012a15:	ff 30                	push   DWORD PTR [eax]
c0012a17:	e8 69 ff ff ff       	call   c0012985 <Dbg::logWriteInt(unsigned int)>
c0012a1c:	5f                   	pop    edi
c0012a1d:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012a21:	84 c0                	test   al,al
c0012a23:	75 b8                	jne    c00129dd <Dbg::kprintf(char const*, ...)+0x1c>
c0012a25:	83 c4 0c             	add    esp,0xc
c0012a28:	5b                   	pop    ebx
c0012a29:	5e                   	pop    esi
c0012a2a:	5f                   	pop    edi
c0012a2b:	5d                   	pop    ebp
c0012a2c:	c3                   	ret    
c0012a2d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a31:	89 c8                	mov    eax,ecx
c0012a33:	83 c1 04             	add    ecx,0x4
c0012a36:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012a3a:	ff 30                	push   DWORD PTR [eax]
c0012a3c:	e8 27 ff ff ff       	call   c0012968 <Dbg::logs(char*)>
c0012a41:	58                   	pop    eax
c0012a42:	eb d9                	jmp    c0012a1d <Dbg::kprintf(char const*, ...)+0x5c>
c0012a44:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012a48:	89 d0                	mov    eax,edx
c0012a4a:	83 c2 04             	add    edx,0x4
c0012a4d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012a51:	ff 30                	push   DWORD PTR [eax]
c0012a53:	e8 2d ff ff ff       	call   c0012985 <Dbg::logWriteInt(unsigned int)>
c0012a58:	58                   	pop    eax
c0012a59:	eb c2                	jmp    c0012a1d <Dbg::kprintf(char const*, ...)+0x5c>
c0012a5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012a5f:	89 d0                	mov    eax,edx
c0012a61:	83 c2 04             	add    edx,0x4
c0012a64:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012a67:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012a6b:	50                   	push   eax
c0012a6c:	e8 e0 fe ff ff       	call   c0012951 <Dbg::logc(char)>
c0012a71:	58                   	pop    eax
c0012a72:	eb a9                	jmp    c0012a1d <Dbg::kprintf(char const*, ...)+0x5c>
c0012a74:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a78:	89 c8                	mov    eax,ecx
c0012a7a:	83 c1 04             	add    ecx,0x4
c0012a7d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012a81:	6a 10                	push   0x10
c0012a83:	ff 30                	push   DWORD PTR [eax]
c0012a85:	e8 18 ff ff ff       	call   c00129a2 <Dbg::logWriteIntBase(unsigned int, int)>
c0012a8a:	59                   	pop    ecx
c0012a8b:	5f                   	pop    edi
c0012a8c:	eb 8f                	jmp    c0012a1d <Dbg::kprintf(char const*, ...)+0x5c>
c0012a8e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012a92:	89 d0                	mov    eax,edx
c0012a94:	83 c2 08             	add    edx,0x8
c0012a97:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012a9b:	6a 10                	push   0x10
c0012a9d:	ff 30                	push   DWORD PTR [eax]
c0012a9f:	e8 fe fe ff ff       	call   c00129a2 <Dbg::logWriteIntBase(unsigned int, int)>
c0012aa4:	58                   	pop    eax
c0012aa5:	5a                   	pop    edx
c0012aa6:	e9 72 ff ff ff       	jmp    c0012a1d <Dbg::kprintf(char const*, ...)+0x5c>
c0012aab:	6a 25                	push   0x25
c0012aad:	e8 9f fe ff ff       	call   c0012951 <Dbg::logc(char)>
c0012ab2:	58                   	pop    eax
c0012ab3:	e9 65 ff ff ff       	jmp    c0012a1d <Dbg::kprintf(char const*, ...)+0x5c>
c0012ab8:	6a 25                	push   0x25
c0012aba:	e8 92 fe ff ff       	call   c0012951 <Dbg::logc(char)>
c0012abf:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012ac2:	50                   	push   eax
c0012ac3:	e8 89 fe ff ff       	call   c0012951 <Dbg::logc(char)>
c0012ac8:	5a                   	pop    edx
c0012ac9:	59                   	pop    ecx
c0012aca:	e9 4e ff ff ff       	jmp    c0012a1d <Dbg::kprintf(char const*, ...)+0x5c>
c0012acf:	50                   	push   eax
c0012ad0:	89 eb                	mov    ebx,ebp
c0012ad2:	e8 7a fe ff ff       	call   c0012951 <Dbg::logc(char)>
c0012ad7:	89 fd                	mov    ebp,edi
c0012ad9:	58                   	pop    eax
c0012ada:	e9 3e ff ff ff       	jmp    c0012a1d <Dbg::kprintf(char const*, ...)+0x5c>
c0012adf:	90                   	nop

c0012ae0 <File::read(unsigned long long, void*, int*)>:
c0012ae0:	53                   	push   ebx
c0012ae1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ae5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012ae9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012af0:	3c 19                	cmp    al,0x19
c0012af2:	77 35                	ja     c0012b29 <File::read(unsigned long long, void*, int*)+0x49>
c0012af4:	8b 04 85 00 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1400]
c0012afb:	85 c0                	test   eax,eax
c0012afd:	74 2a                	je     c0012b29 <File::read(unsigned long long, void*, int*)+0x49>
c0012aff:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012b05:	85 c0                	test   eax,eax
c0012b07:	74 20                	je     c0012b29 <File::read(unsigned long long, void*, int*)+0x49>
c0012b09:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012b0d:	74 21                	je     c0012b30 <File::read(unsigned long long, void*, int*)+0x50>
c0012b0f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012b11:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012b15:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012b1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012b1f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b23:	5b                   	pop    ebx
c0012b24:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012b27:	ff e0                	jmp    eax
c0012b29:	b8 0b 00 00 00       	mov    eax,0xb
c0012b2e:	eb 05                	jmp    c0012b35 <File::read(unsigned long long, void*, int*)+0x55>
c0012b30:	b8 05 00 00 00       	mov    eax,0x5
c0012b35:	5b                   	pop    ebx
c0012b36:	c3                   	ret    
c0012b37:	90                   	nop

c0012b38 <File::write(unsigned long long, void*, int*)>:
c0012b38:	53                   	push   ebx
c0012b39:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b3d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012b41:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012b48:	3c 19                	cmp    al,0x19
c0012b4a:	77 35                	ja     c0012b81 <File::write(unsigned long long, void*, int*)+0x49>
c0012b4c:	8b 04 85 00 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1400]
c0012b53:	85 c0                	test   eax,eax
c0012b55:	74 2a                	je     c0012b81 <File::write(unsigned long long, void*, int*)+0x49>
c0012b57:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012b5d:	85 c0                	test   eax,eax
c0012b5f:	74 20                	je     c0012b81 <File::write(unsigned long long, void*, int*)+0x49>
c0012b61:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012b65:	74 21                	je     c0012b88 <File::write(unsigned long long, void*, int*)+0x50>
c0012b67:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012b69:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012b6d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012b73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012b77:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b7b:	5b                   	pop    ebx
c0012b7c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012b7f:	ff e0                	jmp    eax
c0012b81:	b8 0b 00 00 00       	mov    eax,0xb
c0012b86:	eb 05                	jmp    c0012b8d <File::write(unsigned long long, void*, int*)+0x55>
c0012b88:	b8 05 00 00 00       	mov    eax,0x5
c0012b8d:	5b                   	pop    ebx
c0012b8e:	c3                   	ret    
c0012b8f:	90                   	nop

c0012b90 <Directory::read(unsigned long long, void*, int*)>:
c0012b90:	53                   	push   ebx
c0012b91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b95:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012b99:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012ba0:	3c 19                	cmp    al,0x19
c0012ba2:	77 35                	ja     c0012bd9 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ba4:	8b 04 85 00 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1400]
c0012bab:	85 c0                	test   eax,eax
c0012bad:	74 2a                	je     c0012bd9 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012baf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012bb5:	85 c0                	test   eax,eax
c0012bb7:	74 20                	je     c0012bd9 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012bb9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012bbd:	74 21                	je     c0012be0 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012bbf:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012bc1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012bc5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012bcf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012bd3:	5b                   	pop    ebx
c0012bd4:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012bd7:	ff e0                	jmp    eax
c0012bd9:	b8 0b 00 00 00       	mov    eax,0xb
c0012bde:	eb 05                	jmp    c0012be5 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012be0:	b8 05 00 00 00       	mov    eax,0x5
c0012be5:	5b                   	pop    ebx
c0012be6:	c3                   	ret    
c0012be7:	90                   	nop

c0012be8 <Directory::write(unsigned long long, void*, int*)>:
c0012be8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bec:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012bf3:	b8 0b 00 00 00       	mov    eax,0xb
c0012bf8:	80 fa 19             	cmp    dl,0x19
c0012bfb:	77 18                	ja     c0012c15 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012bfd:	8b 14 95 00 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1400]
c0012c04:	85 d2                	test   edx,edx
c0012c06:	74 0d                	je     c0012c15 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012c08:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012c0f:	19 c0                	sbb    eax,eax
c0012c11:	83 e0 0a             	and    eax,0xa
c0012c14:	40                   	inc    eax
c0012c15:	c3                   	ret    

c0012c16 <File::isAtty()>:
c0012c16:	31 c0                	xor    eax,eax
c0012c18:	c3                   	ret    
c0012c19:	90                   	nop

c0012c1a <Directory::isAtty()>:
c0012c1a:	31 c0                	xor    eax,eax
c0012c1c:	c3                   	ret    
c0012c1d:	90                   	nop

c0012c1e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012c1e:	b8 0a 00 00 00       	mov    eax,0xa
c0012c23:	c3                   	ret    

c0012c24 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012c24:	b8 0a 00 00 00       	mov    eax,0xa
c0012c29:	c3                   	ret    

c0012c2a <Filesystem::allocateSwapfile(char const*, int)>:
c0012c2a:	31 c0                	xor    eax,eax
c0012c2c:	31 d2                	xor    edx,edx
c0012c2e:	c3                   	ret    
c0012c2f:	90                   	nop

c0012c30 <File::~File()>:
c0012c30:	83 ec 0c             	sub    esp,0xc
c0012c33:	ba 84 b1 02 c0       	mov    edx,0xc002b184
c0012c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c3c:	89 10                	mov    DWORD PTR [eax],edx
c0012c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c42:	83 ec 0c             	sub    esp,0xc
c0012c45:	50                   	push   eax
c0012c46:	e8 43 e7 ff ff       	call   c001138e <UnixFile::~UnixFile()>
c0012c4b:	83 c4 10             	add    esp,0x10
c0012c4e:	90                   	nop
c0012c4f:	83 c4 0c             	add    esp,0xc
c0012c52:	c3                   	ret    
c0012c53:	90                   	nop

c0012c54 <File::~File()>:
c0012c54:	83 ec 0c             	sub    esp,0xc
c0012c57:	83 ec 0c             	sub    esp,0xc
c0012c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c5e:	e8 cd ff ff ff       	call   c0012c30 <File::~File()>
c0012c63:	83 c4 10             	add    esp,0x10
c0012c66:	83 ec 08             	sub    esp,0x8
c0012c69:	68 14 01 00 00       	push   0x114
c0012c6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c72:	e8 72 fc ff ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c0012c77:	83 c4 10             	add    esp,0x10
c0012c7a:	83 c4 0c             	add    esp,0xc
c0012c7d:	c3                   	ret    

c0012c7e <Directory::~Directory()>:
c0012c7e:	83 ec 0c             	sub    esp,0xc
c0012c81:	ba a0 b1 02 c0       	mov    edx,0xc002b1a0
c0012c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c8a:	89 10                	mov    DWORD PTR [eax],edx
c0012c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c90:	83 ec 0c             	sub    esp,0xc
c0012c93:	50                   	push   eax
c0012c94:	e8 f5 e6 ff ff       	call   c001138e <UnixFile::~UnixFile()>
c0012c99:	83 c4 10             	add    esp,0x10
c0012c9c:	90                   	nop
c0012c9d:	83 c4 0c             	add    esp,0xc
c0012ca0:	c3                   	ret    
c0012ca1:	90                   	nop

c0012ca2 <Directory::~Directory()>:
c0012ca2:	83 ec 0c             	sub    esp,0xc
c0012ca5:	83 ec 0c             	sub    esp,0xc
c0012ca8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cac:	e8 cd ff ff ff       	call   c0012c7e <Directory::~Directory()>
c0012cb1:	83 c4 10             	add    esp,0x10
c0012cb4:	83 ec 08             	sub    esp,0x8
c0012cb7:	68 14 01 00 00       	push   0x114
c0012cbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cc0:	e8 24 fc ff ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c0012cc5:	83 c4 10             	add    esp,0x10
c0012cc8:	83 c4 0c             	add    esp,0xc
c0012ccb:	c3                   	ret    

c0012ccc <Filesystem::Filesystem()>:
c0012ccc:	ba 1c b1 02 c0       	mov    edx,0xc002b11c
c0012cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012cd5:	89 10                	mov    DWORD PTR [eax],edx
c0012cd7:	8b 15 74 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e774
c0012cdd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ce1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012ce4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ce8:	a3 74 e7 02 c0       	mov    ds:0xc002e774,eax
c0012ced:	90                   	nop
c0012cee:	c3                   	ret    
c0012cef:	90                   	nop

c0012cf0 <Filesystem::~Filesystem()>:
c0012cf0:	ba 1c b1 02 c0       	mov    edx,0xc002b11c
c0012cf5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012cf9:	89 10                	mov    DWORD PTR [eax],edx
c0012cfb:	90                   	nop
c0012cfc:	c3                   	ret    
c0012cfd:	90                   	nop

c0012cfe <Filesystem::~Filesystem()>:
c0012cfe:	83 ec 0c             	sub    esp,0xc
c0012d01:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012d05:	e8 e6 ff ff ff       	call   c0012cf0 <Filesystem::~Filesystem()>
c0012d0a:	83 c4 04             	add    esp,0x4
c0012d0d:	83 ec 08             	sub    esp,0x8
c0012d10:	6a 08                	push   0x8
c0012d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d16:	e8 ce fb ff ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c0012d1b:	83 c4 10             	add    esp,0x10
c0012d1e:	83 c4 0c             	add    esp,0xc
c0012d21:	c3                   	ret    

c0012d22 <Fs::getcwd(Process*, char*, int)>:
c0012d22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012d26:	31 c0                	xor    eax,eax
c0012d28:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012d2b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012d2f:	7d 15                	jge    c0012d46 <Fs::getcwd(Process*, char*, int)+0x24>
c0012d31:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012d35:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012d3c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012d3f:	84 c9                	test   cl,cl
c0012d41:	74 06                	je     c0012d49 <Fs::getcwd(Process*, char*, int)+0x27>
c0012d43:	40                   	inc    eax
c0012d44:	eb e2                	jmp    c0012d28 <Fs::getcwd(Process*, char*, int)+0x6>
c0012d46:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012d49:	31 c0                	xor    eax,eax
c0012d4b:	c3                   	ret    

c0012d4c <Fs::initVFS()>:
c0012d4c:	83 ec 18             	sub    esp,0x18
c0012d4f:	6a 08                	push   0x8
c0012d51:	e8 13 cc ff ff       	call   c000f969 <malloc>
c0012d56:	89 04 24             	mov    DWORD PTR [esp],eax
c0012d59:	e8 dc e1 00 00       	call   c0020f3a <FAT::FAT()>
c0012d5e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012d65:	e8 ff cb ff ff       	call   c000f969 <malloc>
c0012d6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0012d6d:	e8 d4 f3 00 00       	call   c0022146 <ISO9660::ISO9660()>
c0012d72:	83 c4 1c             	add    esp,0x1c
c0012d75:	c3                   	ret    

c0012d76 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012d76:	55                   	push   ebp
c0012d77:	57                   	push   edi
c0012d78:	56                   	push   esi
c0012d79:	53                   	push   ebx
c0012d7a:	81 ec 10 04 00 00    	sub    esp,0x410
c0012d80:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012d87:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012d8e:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012d95:	68 00 04 00 00       	push   0x400
c0012d9a:	6a 00                	push   0x0
c0012d9c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012da0:	56                   	push   esi
c0012da1:	e8 aa d9 fe ff       	call   c0000750 <memset>
c0012da6:	83 c4 10             	add    esp,0x10
c0012da9:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012dad:	75 0b                	jne    c0012dba <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012daf:	50                   	push   eax
c0012db0:	50                   	push   eax
c0012db1:	57                   	push   edi
c0012db2:	56                   	push   esi
c0012db3:	e8 54 da fe ff       	call   c000080c <strcpy>
c0012db8:	eb 41                	jmp    c0012dfb <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012dba:	8a 07                	mov    al,BYTE PTR [edi]
c0012dbc:	3c 5c                	cmp    al,0x5c
c0012dbe:	74 04                	je     c0012dc4 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012dc0:	3c 2f                	cmp    al,0x2f
c0012dc2:	75 18                	jne    c0012ddc <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012dc4:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012dc7:	3c 60                	cmp    al,0x60
c0012dc9:	7e 03                	jle    c0012dce <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012dcb:	83 e8 20             	sub    eax,0x20
c0012dce:	88 04 24             	mov    BYTE PTR [esp],al
c0012dd1:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012dd8:	50                   	push   eax
c0012dd9:	50                   	push   eax
c0012dda:	eb 18                	jmp    c0012df4 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012ddc:	50                   	push   eax
c0012ddd:	50                   	push   eax
c0012dde:	55                   	push   ebp
c0012ddf:	56                   	push   esi
c0012de0:	e8 27 da fe ff       	call   c000080c <strcpy>
c0012de5:	5a                   	pop    edx
c0012de6:	59                   	pop    ecx
c0012de7:	68 aa c7 02 c0       	push   0xc002c7aa
c0012dec:	56                   	push   esi
c0012ded:	e8 5a db fe ff       	call   c000094c <strcat>
c0012df2:	5d                   	pop    ebp
c0012df3:	58                   	pop    eax
c0012df4:	57                   	push   edi
c0012df5:	56                   	push   esi
c0012df6:	e8 51 db fe ff       	call   c000094c <strcat>
c0012dfb:	83 c4 10             	add    esp,0x10
c0012dfe:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012e01:	3c 60                	cmp    al,0x60
c0012e03:	7e 03                	jle    c0012e08 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012e05:	83 e8 20             	sub    eax,0x20
c0012e08:	88 04 24             	mov    BYTE PTR [esp],al
c0012e0b:	88 03                	mov    BYTE PTR [ebx],al
c0012e0d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012e14:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012e1a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012e1e:	bf 03 00 00 00       	mov    edi,0x3
c0012e23:	b8 03 00 00 00       	mov    eax,0x3
c0012e28:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012e2b:	84 d2                	test   dl,dl
c0012e2d:	0f 84 91 00 00 00    	je     c0012ec4 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012e33:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012e36:	80 fa 5c             	cmp    dl,0x5c
c0012e39:	74 05                	je     c0012e40 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012e3b:	80 fa 2f             	cmp    dl,0x2f
c0012e3e:	75 12                	jne    c0012e52 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012e40:	89 c5                	mov    ebp,eax
c0012e42:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012e47:	74 09                	je     c0012e52 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012e49:	40                   	inc    eax
c0012e4a:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012e4e:	89 cf                	mov    edi,ecx
c0012e50:	eb d6                	jmp    c0012e28 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012e52:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012e57:	75 5b                	jne    c0012eb4 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012e59:	80 fa 2e             	cmp    dl,0x2e
c0012e5c:	75 56                	jne    c0012eb4 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012e5e:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012e62:	74 19                	je     c0012e7d <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012e64:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012e69:	74 53                	je     c0012ebe <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012e6b:	89 f9                	mov    ecx,edi
c0012e6d:	41                   	inc    ecx
c0012e6e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012e71:	80 fa 2f             	cmp    dl,0x2f
c0012e74:	74 f7                	je     c0012e6d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012e76:	80 fa 5c             	cmp    dl,0x5c
c0012e79:	74 f2                	je     c0012e6d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012e7b:	eb d1                	jmp    c0012e4e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012e7d:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012e82:	74 3a                	je     c0012ebe <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012e84:	83 f8 03             	cmp    eax,0x3
c0012e87:	74 c5                	je     c0012e4e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012e89:	41                   	inc    ecx
c0012e8a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012e8d:	80 fa 2f             	cmp    dl,0x2f
c0012e90:	74 f7                	je     c0012e89 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012e92:	80 fa 5c             	cmp    dl,0x5c
c0012e95:	74 f2                	je     c0012e89 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012e97:	48                   	dec    eax
c0012e98:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012e9c:	75 06                	jne    c0012ea4 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012e9e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ea2:	eb f3                	jmp    c0012e97 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012ea4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012ea8:	74 07                	je     c0012eb1 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012eaa:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012eae:	48                   	dec    eax
c0012eaf:	eb f3                	jmp    c0012ea4 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012eb1:	40                   	inc    eax
c0012eb2:	eb 9a                	jmp    c0012e4e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012eb4:	80 fa 2f             	cmp    dl,0x2f
c0012eb7:	74 95                	je     c0012e4e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012eb9:	80 fa 5c             	cmp    dl,0x5c
c0012ebc:	74 90                	je     c0012e4e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ebe:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012ec1:	40                   	inc    eax
c0012ec2:	eb 8a                	jmp    c0012e4e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ec4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ec8:	83 ec 0c             	sub    esp,0xc
c0012ecb:	53                   	push   ebx
c0012ecc:	e8 9b d8 fe ff       	call   c000076c <strlen>
c0012ed1:	83 c4 10             	add    esp,0x10
c0012ed4:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012ed9:	75 26                	jne    c0012f01 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012edb:	83 ec 0c             	sub    esp,0xc
c0012ede:	53                   	push   ebx
c0012edf:	e8 88 d8 fe ff       	call   c000076c <strlen>
c0012ee4:	83 c4 10             	add    esp,0x10
c0012ee7:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012eec:	74 26                	je     c0012f14 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012eee:	83 ec 0c             	sub    esp,0xc
c0012ef1:	53                   	push   ebx
c0012ef2:	e8 75 d8 fe ff       	call   c000076c <strlen>
c0012ef7:	83 c4 10             	add    esp,0x10
c0012efa:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012eff:	eb c7                	jmp    c0012ec8 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012f01:	83 ec 0c             	sub    esp,0xc
c0012f04:	53                   	push   ebx
c0012f05:	e8 62 d8 fe ff       	call   c000076c <strlen>
c0012f0a:	83 c4 10             	add    esp,0x10
c0012f0d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012f12:	74 c7                	je     c0012edb <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012f14:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012f1a:	5b                   	pop    ebx
c0012f1b:	5e                   	pop    esi
c0012f1c:	5f                   	pop    edi
c0012f1d:	5d                   	pop    ebp
c0012f1e:	c3                   	ret    
c0012f1f:	90                   	nop

c0012f20 <File::File(char const*, Process*)>:
c0012f20:	83 ec 0c             	sub    esp,0xc
c0012f23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f27:	83 ec 08             	sub    esp,0x8
c0012f2a:	6a 00                	push   0x0
c0012f2c:	50                   	push   eax
c0012f2d:	e8 7a e2 ff ff       	call   c00111ac <UnixFile::UnixFile(int)>
c0012f32:	83 c4 10             	add    esp,0x10
c0012f35:	ba 84 b1 02 c0       	mov    edx,0xc002b184
c0012f3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f3e:	89 10                	mov    DWORD PTR [eax],edx
c0012f40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f44:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f4e:	83 c0 0d             	add    eax,0xd
c0012f51:	83 ec 04             	sub    esp,0x4
c0012f54:	52                   	push   edx
c0012f55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f59:	50                   	push   eax
c0012f5a:	e8 17 fe ff ff       	call   c0012d76 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012f5f:	83 c4 10             	add    esp,0x10
c0012f62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f66:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012f69:	8d 50 bf             	lea    edx,[eax-0x41]
c0012f6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f70:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012f76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f7a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012f7e:	90                   	nop
c0012f7f:	83 c4 0c             	add    esp,0xc
c0012f82:	c3                   	ret    
c0012f83:	90                   	nop

c0012f84 <File::open(FileOpenMode)>:
c0012f84:	53                   	push   ebx
c0012f85:	b8 0b 00 00 00       	mov    eax,0xb
c0012f8a:	83 ec 08             	sub    esp,0x8
c0012f8d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012f91:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012f98:	80 fa 19             	cmp    dl,0x19
c0012f9b:	77 40                	ja     c0012fdd <File::open(FileOpenMode)+0x59>
c0012f9d:	8b 14 95 00 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1400]
c0012fa4:	85 d2                	test   edx,edx
c0012fa6:	74 35                	je     c0012fdd <File::open(FileOpenMode)+0x59>
c0012fa8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012fae:	85 d2                	test   edx,edx
c0012fb0:	74 2b                	je     c0012fdd <File::open(FileOpenMode)+0x59>
c0012fb2:	b8 06 00 00 00       	mov    eax,0x6
c0012fb7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012fbb:	75 20                	jne    c0012fdd <File::open(FileOpenMode)+0x59>
c0012fbd:	8b 02                	mov    eax,DWORD PTR [edx]
c0012fbf:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012fc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012fc9:	51                   	push   ecx
c0012fca:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012fcd:	51                   	push   ecx
c0012fce:	52                   	push   edx
c0012fcf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012fd2:	83 c4 10             	add    esp,0x10
c0012fd5:	85 c0                	test   eax,eax
c0012fd7:	75 04                	jne    c0012fdd <File::open(FileOpenMode)+0x59>
c0012fd9:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012fdd:	83 c4 08             	add    esp,0x8
c0012fe0:	5b                   	pop    ebx
c0012fe1:	c3                   	ret    

c0012fe2 <File::close()>:
c0012fe2:	53                   	push   ebx
c0012fe3:	b8 0b 00 00 00       	mov    eax,0xb
c0012fe8:	83 ec 08             	sub    esp,0x8
c0012feb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012fef:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012ff6:	80 fa 19             	cmp    dl,0x19
c0012ff9:	77 41                	ja     c001303c <File::close()+0x5a>
c0012ffb:	8b 1c 95 00 ec 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1400]
c0013002:	85 db                	test   ebx,ebx
c0013004:	74 36                	je     c001303c <File::close()+0x5a>
c0013006:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001300d:	74 2d                	je     c001303c <File::close()+0x5a>
c001300f:	b8 05 00 00 00       	mov    eax,0x5
c0013014:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013018:	74 22                	je     c001303c <File::close()+0x5a>
c001301a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001301e:	8b 04 95 00 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1400]
c0013025:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001302b:	53                   	push   ebx
c001302c:	53                   	push   ebx
c001302d:	8b 10                	mov    edx,DWORD PTR [eax]
c001302f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013035:	50                   	push   eax
c0013036:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013039:	83 c4 10             	add    esp,0x10
c001303c:	83 c4 08             	add    esp,0x8
c001303f:	5b                   	pop    ebx
c0013040:	c3                   	ret    
c0013041:	90                   	nop

c0013042 <File::seek(unsigned long long)>:
c0013042:	56                   	push   esi
c0013043:	53                   	push   ebx
c0013044:	b8 0b 00 00 00       	mov    eax,0xb
c0013049:	51                   	push   ecx
c001304a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001304e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013052:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013059:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001305d:	80 fa 19             	cmp    dl,0x19
c0013060:	77 31                	ja     c0013093 <File::seek(unsigned long long)+0x51>
c0013062:	8b 14 95 00 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1400]
c0013069:	85 d2                	test   edx,edx
c001306b:	74 26                	je     c0013093 <File::seek(unsigned long long)+0x51>
c001306d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013073:	85 d2                	test   edx,edx
c0013075:	74 1c                	je     c0013093 <File::seek(unsigned long long)+0x51>
c0013077:	b8 05 00 00 00       	mov    eax,0x5
c001307c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013080:	74 11                	je     c0013093 <File::seek(unsigned long long)+0x51>
c0013082:	8b 02                	mov    eax,DWORD PTR [edx]
c0013084:	53                   	push   ebx
c0013085:	51                   	push   ecx
c0013086:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001308c:	52                   	push   edx
c001308d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013090:	83 c4 10             	add    esp,0x10
c0013093:	5a                   	pop    edx
c0013094:	5b                   	pop    ebx
c0013095:	5e                   	pop    esi
c0013096:	c3                   	ret    
c0013097:	90                   	nop

c0013098 <File::tell(unsigned long long*)>:
c0013098:	83 ec 0c             	sub    esp,0xc
c001309b:	b8 0b 00 00 00       	mov    eax,0xb
c00130a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00130a4:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00130ab:	80 fa 19             	cmp    dl,0x19
c00130ae:	77 34                	ja     c00130e4 <File::tell(unsigned long long*)+0x4c>
c00130b0:	8b 14 95 00 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1400]
c00130b7:	85 d2                	test   edx,edx
c00130b9:	74 29                	je     c00130e4 <File::tell(unsigned long long*)+0x4c>
c00130bb:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00130c1:	85 d2                	test   edx,edx
c00130c3:	74 1f                	je     c00130e4 <File::tell(unsigned long long*)+0x4c>
c00130c5:	b8 05 00 00 00       	mov    eax,0x5
c00130ca:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00130ce:	74 14                	je     c00130e4 <File::tell(unsigned long long*)+0x4c>
c00130d0:	50                   	push   eax
c00130d1:	8b 02                	mov    eax,DWORD PTR [edx]
c00130d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00130d7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00130dd:	52                   	push   edx
c00130de:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00130e1:	83 c4 10             	add    esp,0x10
c00130e4:	83 c4 0c             	add    esp,0xc
c00130e7:	c3                   	ret    

c00130e8 <File::rewind()>:
c00130e8:	83 ec 10             	sub    esp,0x10
c00130eb:	6a 00                	push   0x0
c00130ed:	6a 00                	push   0x0
c00130ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130f3:	e8 4a ff ff ff       	call   c0013042 <File::seek(unsigned long long)>
c00130f8:	83 c4 1c             	add    esp,0x1c
c00130fb:	c3                   	ret    

c00130fc <File::unlink()>:
c00130fc:	83 ec 0c             	sub    esp,0xc
c00130ff:	b8 0b 00 00 00       	mov    eax,0xb
c0013104:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013108:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001310f:	80 f9 19             	cmp    cl,0x19
c0013112:	77 2f                	ja     c0013143 <File::unlink()+0x47>
c0013114:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c001311b:	85 c9                	test   ecx,ecx
c001311d:	74 24                	je     c0013143 <File::unlink()+0x47>
c001311f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013125:	85 c9                	test   ecx,ecx
c0013127:	74 1a                	je     c0013143 <File::unlink()+0x47>
c0013129:	b8 06 00 00 00       	mov    eax,0x6
c001312e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013132:	75 0f                	jne    c0013143 <File::unlink()+0x47>
c0013134:	83 c2 0d             	add    edx,0xd
c0013137:	50                   	push   eax
c0013138:	50                   	push   eax
c0013139:	8b 01                	mov    eax,DWORD PTR [ecx]
c001313b:	52                   	push   edx
c001313c:	51                   	push   ecx
c001313d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013140:	83 c4 10             	add    esp,0x10
c0013143:	83 c4 0c             	add    esp,0xc
c0013146:	c3                   	ret    
c0013147:	90                   	nop

c0013148 <File::rename(char const*)>:
c0013148:	83 ec 0c             	sub    esp,0xc
c001314b:	b8 0b 00 00 00       	mov    eax,0xb
c0013150:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013154:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001315b:	80 f9 19             	cmp    cl,0x19
c001315e:	77 32                	ja     c0013192 <File::rename(char const*)+0x4a>
c0013160:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c0013167:	85 c9                	test   ecx,ecx
c0013169:	74 27                	je     c0013192 <File::rename(char const*)+0x4a>
c001316b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013171:	85 c9                	test   ecx,ecx
c0013173:	74 1d                	je     c0013192 <File::rename(char const*)+0x4a>
c0013175:	b8 06 00 00 00       	mov    eax,0x6
c001317a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001317e:	75 12                	jne    c0013192 <File::rename(char const*)+0x4a>
c0013180:	83 c2 0d             	add    edx,0xd
c0013183:	50                   	push   eax
c0013184:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013186:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001318a:	52                   	push   edx
c001318b:	51                   	push   ecx
c001318c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001318f:	83 c4 10             	add    esp,0x10
c0013192:	83 c4 0c             	add    esp,0xc
c0013195:	c3                   	ret    

c0013196 <File::chfatattr(unsigned char, unsigned char)>:
c0013196:	57                   	push   edi
c0013197:	b8 0b 00 00 00       	mov    eax,0xb
c001319c:	56                   	push   esi
c001319d:	53                   	push   ebx
c001319e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131a2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00131a6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00131ad:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00131b1:	80 f9 19             	cmp    cl,0x19
c00131b4:	77 37                	ja     c00131ed <File::chfatattr(unsigned char, unsigned char)+0x57>
c00131b6:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c00131bd:	85 c9                	test   ecx,ecx
c00131bf:	74 2c                	je     c00131ed <File::chfatattr(unsigned char, unsigned char)+0x57>
c00131c1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00131c7:	85 c9                	test   ecx,ecx
c00131c9:	74 22                	je     c00131ed <File::chfatattr(unsigned char, unsigned char)+0x57>
c00131cb:	b8 06 00 00 00       	mov    eax,0x6
c00131d0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131d4:	75 17                	jne    c00131ed <File::chfatattr(unsigned char, unsigned char)+0x57>
c00131d6:	8b 39                	mov    edi,DWORD PTR [ecx]
c00131d8:	89 f0                	mov    eax,esi
c00131da:	83 c2 0d             	add    edx,0xd
c00131dd:	0f b6 f0             	movzx  esi,al
c00131e0:	0f b6 db             	movzx  ebx,bl
c00131e3:	56                   	push   esi
c00131e4:	53                   	push   ebx
c00131e5:	52                   	push   edx
c00131e6:	51                   	push   ecx
c00131e7:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00131ea:	83 c4 10             	add    esp,0x10
c00131ed:	5b                   	pop    ebx
c00131ee:	5e                   	pop    esi
c00131ef:	5f                   	pop    edi
c00131f0:	c3                   	ret    
c00131f1:	90                   	nop

c00131f2 <File::exists()>:
c00131f2:	83 ec 0c             	sub    esp,0xc
c00131f5:	31 c0                	xor    eax,eax
c00131f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131fb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013202:	80 f9 19             	cmp    cl,0x19
c0013205:	77 24                	ja     c001322b <File::exists()+0x39>
c0013207:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c001320e:	85 c9                	test   ecx,ecx
c0013210:	74 19                	je     c001322b <File::exists()+0x39>
c0013212:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013218:	85 c9                	test   ecx,ecx
c001321a:	74 0f                	je     c001322b <File::exists()+0x39>
c001321c:	83 c2 0d             	add    edx,0xd
c001321f:	50                   	push   eax
c0013220:	50                   	push   eax
c0013221:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013223:	52                   	push   edx
c0013224:	51                   	push   ecx
c0013225:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013228:	83 c4 10             	add    esp,0x10
c001322b:	83 c4 0c             	add    esp,0xc
c001322e:	c3                   	ret    
c001322f:	90                   	nop

c0013230 <File::stat(unsigned long long*, bool*)>:
c0013230:	56                   	push   esi
c0013231:	53                   	push   ebx
c0013232:	50                   	push   eax
c0013233:	b8 0b 00 00 00       	mov    eax,0xb
c0013238:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001323c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013240:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013247:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001324b:	80 f9 19             	cmp    cl,0x19
c001324e:	77 3d                	ja     c001328d <File::stat(unsigned long long*, bool*)+0x5d>
c0013250:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c0013257:	85 c9                	test   ecx,ecx
c0013259:	74 32                	je     c001328d <File::stat(unsigned long long*, bool*)+0x5d>
c001325b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013261:	85 c9                	test   ecx,ecx
c0013263:	74 28                	je     c001328d <File::stat(unsigned long long*, bool*)+0x5d>
c0013265:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013267:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001326b:	74 13                	je     c0013280 <File::stat(unsigned long long*, bool*)+0x50>
c001326d:	83 ec 04             	sub    esp,0x4
c0013270:	56                   	push   esi
c0013271:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013277:	51                   	push   ecx
c0013278:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001327b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001327e:	eb 0a                	jmp    c001328a <File::stat(unsigned long long*, bool*)+0x5a>
c0013280:	53                   	push   ebx
c0013281:	83 c2 0d             	add    edx,0xd
c0013284:	56                   	push   esi
c0013285:	52                   	push   edx
c0013286:	51                   	push   ecx
c0013287:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001328a:	83 c4 10             	add    esp,0x10
c001328d:	5a                   	pop    edx
c001328e:	5b                   	pop    ebx
c001328f:	5e                   	pop    esi
c0013290:	c3                   	ret    

c0013291 <Fs::setcwd(Process*, char*)>:
c0013291:	55                   	push   ebp
c0013292:	57                   	push   edi
c0013293:	56                   	push   esi
c0013294:	53                   	push   ebx
c0013295:	81 ec 20 02 00 00    	sub    esp,0x220
c001329b:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00132a2:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00132a8:	57                   	push   edi
c00132a9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00132b0:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00132b4:	56                   	push   esi
c00132b5:	e8 bc fa ff ff       	call   c0012d76 <Fs::standardiseFiles(char*, char const*, char const*)>
c00132ba:	89 34 24             	mov    DWORD PTR [esp],esi
c00132bd:	e8 aa d4 fe ff       	call   c000076c <strlen>
c00132c2:	83 c4 10             	add    esp,0x10
c00132c5:	83 f8 02             	cmp    eax,0x2
c00132c8:	77 17                	ja     c00132e1 <Fs::setcwd(Process*, char*)+0x50>
c00132ca:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00132cf:	83 e8 41             	sub    eax,0x41
c00132d2:	83 f8 19             	cmp    eax,0x19
c00132d5:	76 24                	jbe    c00132fb <Fs::setcwd(Process*, char*)+0x6a>
c00132d7:	b8 03 00 00 00       	mov    eax,0x3
c00132dc:	e9 e0 00 00 00       	jmp    c00133c1 <Fs::setcwd(Process*, char*)+0x130>
c00132e1:	83 ec 0c             	sub    esp,0xc
c00132e4:	56                   	push   esi
c00132e5:	e8 82 d4 fe ff       	call   c000076c <strlen>
c00132ea:	83 c4 10             	add    esp,0x10
c00132ed:	83 f8 03             	cmp    eax,0x3
c00132f0:	75 34                	jne    c0013326 <Fs::setcwd(Process*, char*)+0x95>
c00132f2:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00132f7:	75 2d                	jne    c0013326 <Fs::setcwd(Process*, char*)+0x95>
c00132f9:	eb cf                	jmp    c00132ca <Fs::setcwd(Process*, char*)+0x39>
c00132fb:	8b 14 85 00 ec 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1400]
c0013302:	b8 05 00 00 00       	mov    eax,0x5
c0013307:	85 d2                	test   edx,edx
c0013309:	0f 84 b2 00 00 00    	je     c00133c1 <Fs::setcwd(Process*, char*)+0x130>
c001330f:	b8 06 00 00 00       	mov    eax,0x6
c0013314:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001331b:	0f 85 92 00 00 00    	jne    c00133b3 <Fs::setcwd(Process*, char*)+0x122>
c0013321:	e9 9b 00 00 00       	jmp    c00133c1 <Fs::setcwd(Process*, char*)+0x130>
c0013326:	83 ec 0c             	sub    esp,0xc
c0013329:	68 14 01 00 00       	push   0x114
c001332e:	e8 36 c6 ff ff       	call   c000f969 <malloc>
c0013333:	83 c4 0c             	add    esp,0xc
c0013336:	89 c3                	mov    ebx,eax
c0013338:	55                   	push   ebp
c0013339:	56                   	push   esi
c001333a:	50                   	push   eax
c001333b:	e8 e0 fb ff ff       	call   c0012f20 <File::File(char const*, Process*)>
c0013340:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013345:	83 c4 0c             	add    esp,0xc
c0013348:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001334c:	50                   	push   eax
c001334d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013351:	50                   	push   eax
c0013352:	53                   	push   ebx
c0013353:	e8 d8 fe ff ff       	call   c0013230 <File::stat(unsigned long long*, bool*)>
c0013358:	83 c4 10             	add    esp,0x10
c001335b:	83 f8 02             	cmp    eax,0x2
c001335e:	74 04                	je     c0013364 <Fs::setcwd(Process*, char*)+0xd3>
c0013360:	85 c0                	test   eax,eax
c0013362:	74 1c                	je     c0013380 <Fs::setcwd(Process*, char*)+0xef>
c0013364:	b8 01 00 00 00       	mov    eax,0x1
c0013369:	85 db                	test   ebx,ebx
c001336b:	74 54                	je     c00133c1 <Fs::setcwd(Process*, char*)+0x130>
c001336d:	83 ec 0c             	sub    esp,0xc
c0013370:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013372:	53                   	push   ebx
c0013373:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013376:	83 c4 10             	add    esp,0x10
c0013379:	b8 01 00 00 00       	mov    eax,0x1
c001337e:	eb 41                	jmp    c00133c1 <Fs::setcwd(Process*, char*)+0x130>
c0013380:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013385:	75 1c                	jne    c00133a3 <Fs::setcwd(Process*, char*)+0x112>
c0013387:	b8 02 00 00 00       	mov    eax,0x2
c001338c:	85 db                	test   ebx,ebx
c001338e:	74 31                	je     c00133c1 <Fs::setcwd(Process*, char*)+0x130>
c0013390:	83 ec 0c             	sub    esp,0xc
c0013393:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013395:	53                   	push   ebx
c0013396:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013399:	83 c4 10             	add    esp,0x10
c001339c:	b8 02 00 00 00       	mov    eax,0x2
c00133a1:	eb 1e                	jmp    c00133c1 <Fs::setcwd(Process*, char*)+0x130>
c00133a3:	85 db                	test   ebx,ebx
c00133a5:	74 0c                	je     c00133b3 <Fs::setcwd(Process*, char*)+0x122>
c00133a7:	83 ec 0c             	sub    esp,0xc
c00133aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00133ac:	53                   	push   ebx
c00133ad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00133b0:	83 c4 10             	add    esp,0x10
c00133b3:	50                   	push   eax
c00133b4:	50                   	push   eax
c00133b5:	56                   	push   esi
c00133b6:	57                   	push   edi
c00133b7:	e8 50 d4 fe ff       	call   c000080c <strcpy>
c00133bc:	83 c4 10             	add    esp,0x10
c00133bf:	31 c0                	xor    eax,eax
c00133c1:	81 c4 1c 02 00 00    	add    esp,0x21c
c00133c7:	5b                   	pop    ebx
c00133c8:	5e                   	pop    esi
c00133c9:	5f                   	pop    edi
c00133ca:	5d                   	pop    ebp
c00133cb:	c3                   	ret    

c00133cc <Directory::Directory(char const*, Process*)>:
c00133cc:	83 ec 0c             	sub    esp,0xc
c00133cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133d3:	83 ec 08             	sub    esp,0x8
c00133d6:	6a 00                	push   0x0
c00133d8:	50                   	push   eax
c00133d9:	e8 ce dd ff ff       	call   c00111ac <UnixFile::UnixFile(int)>
c00133de:	83 c4 10             	add    esp,0x10
c00133e1:	ba a0 b1 02 c0       	mov    edx,0xc002b1a0
c00133e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ea:	89 10                	mov    DWORD PTR [eax],edx
c00133ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133f0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00133f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133fa:	83 c0 0d             	add    eax,0xd
c00133fd:	83 ec 04             	sub    esp,0x4
c0013400:	52                   	push   edx
c0013401:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013405:	50                   	push   eax
c0013406:	e8 6b f9 ff ff       	call   c0012d76 <Fs::standardiseFiles(char*, char const*, char const*)>
c001340b:	83 c4 10             	add    esp,0x10
c001340e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013412:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013415:	8d 50 bf             	lea    edx,[eax-0x41]
c0013418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001341c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013426:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001342a:	90                   	nop
c001342b:	83 c4 0c             	add    esp,0xc
c001342e:	c3                   	ret    
c001342f:	90                   	nop

c0013430 <Directory::open()>:
c0013430:	53                   	push   ebx
c0013431:	b8 0b 00 00 00       	mov    eax,0xb
c0013436:	83 ec 08             	sub    esp,0x8
c0013439:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001343d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013444:	80 fa 19             	cmp    dl,0x19
c0013447:	77 3d                	ja     c0013486 <Directory::open()+0x56>
c0013449:	8b 14 95 00 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1400]
c0013450:	85 d2                	test   edx,edx
c0013452:	74 32                	je     c0013486 <Directory::open()+0x56>
c0013454:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001345a:	85 d2                	test   edx,edx
c001345c:	74 28                	je     c0013486 <Directory::open()+0x56>
c001345e:	b8 06 00 00 00       	mov    eax,0x6
c0013463:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013467:	75 1d                	jne    c0013486 <Directory::open()+0x56>
c0013469:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001346f:	50                   	push   eax
c0013470:	8b 02                	mov    eax,DWORD PTR [edx]
c0013472:	51                   	push   ecx
c0013473:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013476:	51                   	push   ecx
c0013477:	52                   	push   edx
c0013478:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001347b:	83 c4 10             	add    esp,0x10
c001347e:	85 c0                	test   eax,eax
c0013480:	75 04                	jne    c0013486 <Directory::open()+0x56>
c0013482:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013486:	83 c4 08             	add    esp,0x8
c0013489:	5b                   	pop    ebx
c001348a:	c3                   	ret    
c001348b:	90                   	nop

c001348c <Directory::close()>:
c001348c:	53                   	push   ebx
c001348d:	b8 0b 00 00 00       	mov    eax,0xb
c0013492:	83 ec 08             	sub    esp,0x8
c0013495:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013499:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00134a0:	80 fa 19             	cmp    dl,0x19
c00134a3:	77 41                	ja     c00134e6 <Directory::close()+0x5a>
c00134a5:	8b 1c 95 00 ec 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1400]
c00134ac:	85 db                	test   ebx,ebx
c00134ae:	74 36                	je     c00134e6 <Directory::close()+0x5a>
c00134b0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00134b7:	74 2d                	je     c00134e6 <Directory::close()+0x5a>
c00134b9:	b8 05 00 00 00       	mov    eax,0x5
c00134be:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00134c2:	74 22                	je     c00134e6 <Directory::close()+0x5a>
c00134c4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00134c8:	8b 04 95 00 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1400]
c00134cf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00134d5:	53                   	push   ebx
c00134d6:	53                   	push   ebx
c00134d7:	8b 10                	mov    edx,DWORD PTR [eax]
c00134d9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00134df:	50                   	push   eax
c00134e0:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00134e3:	83 c4 10             	add    esp,0x10
c00134e6:	83 c4 08             	add    esp,0x8
c00134e9:	5b                   	pop    ebx
c00134ea:	c3                   	ret    
c00134eb:	90                   	nop

c00134ec <Directory::unlink()>:
c00134ec:	83 ec 0c             	sub    esp,0xc
c00134ef:	b8 0b 00 00 00       	mov    eax,0xb
c00134f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134f8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00134ff:	80 f9 19             	cmp    cl,0x19
c0013502:	77 2f                	ja     c0013533 <Directory::unlink()+0x47>
c0013504:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c001350b:	85 c9                	test   ecx,ecx
c001350d:	74 24                	je     c0013533 <Directory::unlink()+0x47>
c001350f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013515:	85 c9                	test   ecx,ecx
c0013517:	74 1a                	je     c0013533 <Directory::unlink()+0x47>
c0013519:	b8 06 00 00 00       	mov    eax,0x6
c001351e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013522:	75 0f                	jne    c0013533 <Directory::unlink()+0x47>
c0013524:	83 c2 0d             	add    edx,0xd
c0013527:	50                   	push   eax
c0013528:	50                   	push   eax
c0013529:	8b 01                	mov    eax,DWORD PTR [ecx]
c001352b:	52                   	push   edx
c001352c:	51                   	push   ecx
c001352d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013530:	83 c4 10             	add    esp,0x10
c0013533:	83 c4 0c             	add    esp,0xc
c0013536:	c3                   	ret    
c0013537:	90                   	nop

c0013538 <Directory::rename(char const*)>:
c0013538:	83 ec 0c             	sub    esp,0xc
c001353b:	b8 0b 00 00 00       	mov    eax,0xb
c0013540:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013544:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001354b:	80 f9 19             	cmp    cl,0x19
c001354e:	77 32                	ja     c0013582 <Directory::rename(char const*)+0x4a>
c0013550:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c0013557:	85 c9                	test   ecx,ecx
c0013559:	74 27                	je     c0013582 <Directory::rename(char const*)+0x4a>
c001355b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013561:	85 c9                	test   ecx,ecx
c0013563:	74 1d                	je     c0013582 <Directory::rename(char const*)+0x4a>
c0013565:	b8 06 00 00 00       	mov    eax,0x6
c001356a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001356e:	75 12                	jne    c0013582 <Directory::rename(char const*)+0x4a>
c0013570:	83 c2 0d             	add    edx,0xd
c0013573:	50                   	push   eax
c0013574:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013576:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001357a:	52                   	push   edx
c001357b:	51                   	push   ecx
c001357c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001357f:	83 c4 10             	add    esp,0x10
c0013582:	83 c4 0c             	add    esp,0xc
c0013585:	c3                   	ret    

c0013586 <Directory::exists()>:
c0013586:	83 ec 0c             	sub    esp,0xc
c0013589:	31 c0                	xor    eax,eax
c001358b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001358f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013596:	80 f9 19             	cmp    cl,0x19
c0013599:	77 24                	ja     c00135bf <Directory::exists()+0x39>
c001359b:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c00135a2:	85 c9                	test   ecx,ecx
c00135a4:	74 19                	je     c00135bf <Directory::exists()+0x39>
c00135a6:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135ac:	85 c9                	test   ecx,ecx
c00135ae:	74 0f                	je     c00135bf <Directory::exists()+0x39>
c00135b0:	83 c2 0d             	add    edx,0xd
c00135b3:	50                   	push   eax
c00135b4:	50                   	push   eax
c00135b5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135b7:	52                   	push   edx
c00135b8:	51                   	push   ecx
c00135b9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00135bc:	83 c4 10             	add    esp,0x10
c00135bf:	83 c4 0c             	add    esp,0xc
c00135c2:	c3                   	ret    
c00135c3:	90                   	nop

c00135c4 <Directory::read(dirent*)>:
c00135c4:	83 ec 1c             	sub    esp,0x1c
c00135c7:	b8 0b 00 00 00       	mov    eax,0xb
c00135cc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00135d0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00135d7:	80 fa 19             	cmp    dl,0x19
c00135da:	77 30                	ja     c001360c <Directory::read(dirent*)+0x48>
c00135dc:	8b 14 95 00 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1400]
c00135e3:	85 d2                	test   edx,edx
c00135e5:	74 25                	je     c001360c <Directory::read(dirent*)+0x48>
c00135e7:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00135ee:	74 1c                	je     c001360c <Directory::read(dirent*)+0x48>
c00135f0:	83 ec 0c             	sub    esp,0xc
c00135f3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135f5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00135f9:	52                   	push   edx
c00135fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00135fe:	6a 00                	push   0x0
c0013600:	68 10 01 00 00       	push   0x110
c0013605:	51                   	push   ecx
c0013606:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013609:	83 c4 20             	add    esp,0x20
c001360c:	83 c4 1c             	add    esp,0x1c
c001360f:	c3                   	ret    

c0013610 <Directory::create()>:
c0013610:	83 ec 0c             	sub    esp,0xc
c0013613:	b8 0b 00 00 00       	mov    eax,0xb
c0013618:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001361c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013623:	80 f9 19             	cmp    cl,0x19
c0013626:	77 2f                	ja     c0013657 <Directory::create()+0x47>
c0013628:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c001362f:	85 c9                	test   ecx,ecx
c0013631:	74 24                	je     c0013657 <Directory::create()+0x47>
c0013633:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013639:	85 c9                	test   ecx,ecx
c001363b:	74 1a                	je     c0013657 <Directory::create()+0x47>
c001363d:	b8 06 00 00 00       	mov    eax,0x6
c0013642:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013646:	75 0f                	jne    c0013657 <Directory::create()+0x47>
c0013648:	83 c2 0d             	add    edx,0xd
c001364b:	50                   	push   eax
c001364c:	50                   	push   eax
c001364d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001364f:	52                   	push   edx
c0013650:	51                   	push   ecx
c0013651:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013654:	83 c4 10             	add    esp,0x10
c0013657:	83 c4 0c             	add    esp,0xc
c001365a:	c3                   	ret    
c001365b:	90                   	nop

c001365c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001365c:	b8 0a 00 00 00       	mov    eax,0xa
c0013661:	c3                   	ret    

c0013662 <Bus::Bus(char const*)>:
c0013662:	83 ec 0c             	sub    esp,0xc
c0013665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013669:	83 ec 08             	sub    esp,0x8
c001366c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013670:	50                   	push   eax
c0013671:	e8 88 09 00 00       	call   c0013ffe <Device::Device(char const*)>
c0013676:	83 c4 10             	add    esp,0x10
c0013679:	ba bc b1 02 c0       	mov    edx,0xc002b1bc
c001367e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013682:	89 10                	mov    DWORD PTR [eax],edx
c0013684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013688:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013692:	90                   	nop
c0013693:	83 c4 0c             	add    esp,0xc
c0013696:	c3                   	ret    
c0013697:	90                   	nop

c0013698 <Bus::~Bus()>:
c0013698:	83 ec 0c             	sub    esp,0xc
c001369b:	ba bc b1 02 c0       	mov    edx,0xc002b1bc
c00136a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136a4:	89 10                	mov    DWORD PTR [eax],edx
c00136a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136aa:	83 ec 0c             	sub    esp,0xc
c00136ad:	50                   	push   eax
c00136ae:	e8 15 06 00 00       	call   c0013cc8 <Device::~Device()>
c00136b3:	83 c4 10             	add    esp,0x10
c00136b6:	90                   	nop
c00136b7:	83 c4 0c             	add    esp,0xc
c00136ba:	c3                   	ret    
c00136bb:	90                   	nop

c00136bc <Bus::~Bus()>:
c00136bc:	83 ec 0c             	sub    esp,0xc
c00136bf:	83 ec 0c             	sub    esp,0xc
c00136c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136c6:	e8 cd ff ff ff       	call   c0013698 <Bus::~Bus()>
c00136cb:	83 c4 10             	add    esp,0x10
c00136ce:	83 ec 08             	sub    esp,0x8
c00136d1:	68 58 01 00 00       	push   0x158
c00136d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136da:	e8 0a f2 ff ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c00136df:	83 c4 10             	add    esp,0x10
c00136e2:	83 c4 0c             	add    esp,0xc
c00136e5:	c3                   	ret    

c00136e6 <Buzzer::Buzzer(char const*)>:
c00136e6:	83 ec 0c             	sub    esp,0xc
c00136e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136ed:	83 ec 08             	sub    esp,0x8
c00136f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136f4:	50                   	push   eax
c00136f5:	e8 04 09 00 00       	call   c0013ffe <Device::Device(char const*)>
c00136fa:	83 c4 10             	add    esp,0x10
c00136fd:	ba e8 b1 02 c0       	mov    edx,0xc002b1e8
c0013702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013706:	89 10                	mov    DWORD PTR [eax],edx
c0013708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001370c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001371a:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013724:	90                   	nop
c0013725:	83 c4 0c             	add    esp,0xc
c0013728:	c3                   	ret    
c0013729:	90                   	nop

c001372a <Buzzer::~Buzzer()>:
c001372a:	83 ec 0c             	sub    esp,0xc
c001372d:	ba e8 b1 02 c0       	mov    edx,0xc002b1e8
c0013732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013736:	89 10                	mov    DWORD PTR [eax],edx
c0013738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001373c:	83 ec 0c             	sub    esp,0xc
c001373f:	50                   	push   eax
c0013740:	e8 83 05 00 00       	call   c0013cc8 <Device::~Device()>
c0013745:	83 c4 10             	add    esp,0x10
c0013748:	90                   	nop
c0013749:	83 c4 0c             	add    esp,0xc
c001374c:	c3                   	ret    
c001374d:	90                   	nop

c001374e <Buzzer::~Buzzer()>:
c001374e:	83 ec 0c             	sub    esp,0xc
c0013751:	83 ec 0c             	sub    esp,0xc
c0013754:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013758:	e8 cd ff ff ff       	call   c001372a <Buzzer::~Buzzer()>
c001375d:	83 c4 10             	add    esp,0x10
c0013760:	83 ec 08             	sub    esp,0x8
c0013763:	68 5c 01 00 00       	push   0x15c
c0013768:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001376c:	e8 78 f1 ff ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c0013771:	83 c4 10             	add    esp,0x10
c0013774:	83 c4 0c             	add    esp,0xc
c0013777:	c3                   	ret    

c0013778 <Buzzer::stop()>:
c0013778:	83 ec 14             	sub    esp,0x14
c001377b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001377f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013781:	6a 00                	push   0x0
c0013783:	50                   	push   eax
c0013784:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013787:	83 c4 1c             	add    esp,0x1c
c001378a:	c3                   	ret    

c001378b <beepThread(void*)>:
c001378b:	53                   	push   ebx
c001378c:	83 ec 08             	sub    esp,0x8
c001378f:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c0013794:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013798:	48                   	dec    eax
c0013799:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001379e:	75 01                	jne    c00137a1 <beepThread(void*)+0x16>
c00137a0:	fb                   	sti    
c00137a1:	50                   	push   eax
c00137a2:	50                   	push   eax
c00137a3:	b8 40 42 0f 00       	mov    eax,0xf4240
c00137a8:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00137ae:	52                   	push   edx
c00137af:	50                   	push   eax
c00137b0:	e8 16 aa 00 00       	call   c001e1cb <nanoSleep(unsigned long long)>
c00137b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00137b8:	e8 bb ff ff ff       	call   c0013778 <Buzzer::stop()>
c00137bd:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00137c5:	83 c4 18             	add    esp,0x18
c00137c8:	5b                   	pop    ebx
c00137c9:	e9 f9 a8 00 00       	jmp    c001e0c7 <blockTask(TaskState)>

c00137ce <Buzzer::beep(int, int, bool)>:
c00137ce:	57                   	push   edi
c00137cf:	56                   	push   esi
c00137d0:	53                   	push   ebx
c00137d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00137d5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00137d9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00137dd:	52                   	push   edx
c00137de:	52                   	push   edx
c00137df:	8b 06                	mov    eax,DWORD PTR [esi]
c00137e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137e5:	56                   	push   esi
c00137e6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00137e9:	83 c4 10             	add    esp,0x10
c00137ec:	89 f8                	mov    eax,edi
c00137ee:	84 c0                	test   al,al
c00137f0:	74 1f                	je     c0013811 <Buzzer::beep(int, int, bool)+0x43>
c00137f2:	50                   	push   eax
c00137f3:	50                   	push   eax
c00137f4:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00137fa:	99                   	cdq    
c00137fb:	52                   	push   edx
c00137fc:	50                   	push   eax
c00137fd:	e8 c9 a9 00 00       	call   c001e1cb <nanoSleep(unsigned long long)>
c0013802:	83 c4 10             	add    esp,0x10
c0013805:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013809:	5b                   	pop    ebx
c001380a:	5e                   	pop    esi
c001380b:	5f                   	pop    edi
c001380c:	e9 67 ff ff ff       	jmp    c0013778 <Buzzer::stop()>
c0013811:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013817:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001381c:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013824:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013828:	c7 44 24 14 8b 37 01 c0 	mov    DWORD PTR [esp+0x14],0xc001378b
c0013830:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013834:	5b                   	pop    ebx
c0013835:	5e                   	pop    esi
c0013836:	5f                   	pop    edi
c0013837:	e9 90 a4 00 00       	jmp    c001dccc <Process::createThread(void (*)(void*), void*, int)>

c001383c <User::loadClockSettings(int)>:
c001383c:	53                   	push   ebx
c001383d:	83 ec 14             	sub    esp,0x14
c0013840:	68 14 01 00 00       	push   0x114
c0013845:	e8 1f c1 ff ff       	call   c000f969 <malloc>
c001384a:	83 c4 0c             	add    esp,0xc
c001384d:	89 c3                	mov    ebx,eax
c001384f:	ff 35 30 fb 02 c0    	push   DWORD PTR ds:0xc002fb30
c0013855:	68 10 b2 02 c0       	push   0xc002b210
c001385a:	50                   	push   eax
c001385b:	e8 c0 f6 ff ff       	call   c0012f20 <File::File(char const*, Process*)>
c0013860:	58                   	pop    eax
c0013861:	5a                   	pop    edx
c0013862:	6a 01                	push   0x1
c0013864:	53                   	push   ebx
c0013865:	e8 1a f7 ff ff       	call   c0012f84 <File::open(FileOpenMode)>
c001386a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001386d:	e8 70 f7 ff ff       	call   c0012fe2 <File::close()>
c0013872:	83 c4 10             	add    esp,0x10
c0013875:	85 db                	test   ebx,ebx
c0013877:	74 0f                	je     c0013888 <User::loadClockSettings(int)+0x4c>
c0013879:	8b 03                	mov    eax,DWORD PTR [ebx]
c001387b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001387f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013882:	83 c4 08             	add    esp,0x8
c0013885:	5b                   	pop    ebx
c0013886:	ff e0                	jmp    eax
c0013888:	83 c4 08             	add    esp,0x8
c001388b:	5b                   	pop    ebx
c001388c:	c3                   	ret    
c001388d:	90                   	nop

c001388e <Clock::Clock(char const*)>:
c001388e:	83 ec 0c             	sub    esp,0xc
c0013891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013895:	83 ec 08             	sub    esp,0x8
c0013898:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001389c:	50                   	push   eax
c001389d:	e8 5c 07 00 00       	call   c0013ffe <Device::Device(char const*)>
c00138a2:	83 c4 10             	add    esp,0x10
c00138a5:	ba 38 b2 02 c0       	mov    edx,0xc002b238
c00138aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138ae:	89 10                	mov    DWORD PTR [eax],edx
c00138b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138b4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00138be:	90                   	nop
c00138bf:	83 c4 0c             	add    esp,0xc
c00138c2:	c3                   	ret    
c00138c3:	90                   	nop

c00138c4 <Clock::~Clock()>:
c00138c4:	83 ec 0c             	sub    esp,0xc
c00138c7:	ba 38 b2 02 c0       	mov    edx,0xc002b238
c00138cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138d0:	89 10                	mov    DWORD PTR [eax],edx
c00138d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138d6:	83 ec 0c             	sub    esp,0xc
c00138d9:	50                   	push   eax
c00138da:	e8 e9 03 00 00       	call   c0013cc8 <Device::~Device()>
c00138df:	83 c4 10             	add    esp,0x10
c00138e2:	90                   	nop
c00138e3:	83 c4 0c             	add    esp,0xc
c00138e6:	c3                   	ret    
c00138e7:	90                   	nop

c00138e8 <Clock::~Clock()>:
c00138e8:	83 ec 0c             	sub    esp,0xc
c00138eb:	83 ec 0c             	sub    esp,0xc
c00138ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138f2:	e8 cd ff ff ff       	call   c00138c4 <Clock::~Clock()>
c00138f7:	83 c4 10             	add    esp,0x10
c00138fa:	83 ec 08             	sub    esp,0x8
c00138fd:	68 58 01 00 00       	push   0x158
c0013902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013906:	e8 de ef ff ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c001390b:	83 c4 10             	add    esp,0x10
c001390e:	83 c4 0c             	add    esp,0xc
c0013911:	c3                   	ret    

c0013912 <Clock::timeInSecondsLocal()>:
c0013912:	53                   	push   ebx
c0013913:	83 ec 14             	sub    esp,0x14
c0013916:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001391a:	8b 10                	mov    edx,DWORD PTR [eax]
c001391c:	50                   	push   eax
c001391d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013920:	0f b6 0d 7c e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e77c
c0013927:	03 0d 80 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e780
c001392d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013933:	89 cb                	mov    ebx,ecx
c0013935:	c1 fb 1f             	sar    ebx,0x1f
c0013938:	01 c8                	add    eax,ecx
c001393a:	11 da                	adc    edx,ebx
c001393c:	83 c4 10             	add    esp,0x10
c001393f:	31 c9                	xor    ecx,ecx
c0013941:	80 3d 7d e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e77d,0x0
c0013948:	74 05                	je     c001394f <Clock::timeInSecondsLocal()+0x3d>
c001394a:	b9 08 07 00 00       	mov    ecx,0x708
c001394f:	31 db                	xor    ebx,ebx
c0013951:	01 c8                	add    eax,ecx
c0013953:	11 da                	adc    edx,ebx
c0013955:	83 c4 08             	add    esp,0x8
c0013958:	5b                   	pop    ebx
c0013959:	c3                   	ret    

c001395a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001395a:	57                   	push   edi
c001395b:	56                   	push   esi
c001395c:	53                   	push   ebx
c001395d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013961:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013965:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013967:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001396b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001396e:	0f b6 05 7c e7 02 c0 	movzx  eax,BYTE PTR ds:0xc002e77c
c0013975:	03 05 80 e7 02 c0    	add    eax,DWORD PTR ds:0xc002e780
c001397b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013981:	99                   	cdq    
c0013982:	29 c6                	sub    esi,eax
c0013984:	19 d7                	sbb    edi,edx
c0013986:	89 f0                	mov    eax,esi
c0013988:	89 fa                	mov    edx,edi
c001398a:	31 f6                	xor    esi,esi
c001398c:	80 3d 7d e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e77d,0x0
c0013993:	74 05                	je     c001399a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013995:	be 08 07 00 00       	mov    esi,0x708
c001399a:	31 ff                	xor    edi,edi
c001399c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00139a0:	29 f0                	sub    eax,esi
c00139a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00139a6:	19 fa                	sbb    edx,edi
c00139a8:	89 d8                	mov    eax,ebx
c00139aa:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00139ae:	5b                   	pop    ebx
c00139af:	5e                   	pop    esi
c00139b0:	5f                   	pop    edi
c00139b1:	ff e0                	jmp    eax

c00139b3 <datetimeToSeconds(datetime_t)>:
c00139b3:	55                   	push   ebp
c00139b4:	57                   	push   edi
c00139b5:	56                   	push   esi
c00139b6:	53                   	push   ebx
c00139b7:	83 ec 14             	sub    esp,0x14
c00139ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00139be:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00139c2:	89 d3                	mov    ebx,edx
c00139c4:	0f b6 c6             	movzx  eax,dh
c00139c7:	c1 eb 10             	shr    ebx,0x10
c00139ca:	48                   	dec    eax
c00139cb:	66 81 eb 6c 07       	sub    bx,0x76c
c00139d0:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00139d4:	0f b6 f5             	movzx  esi,ch
c00139d7:	89 cf                	mov    edi,ecx
c00139d9:	6b f6 3c             	imul   esi,esi,0x3c
c00139dc:	c1 ef 10             	shr    edi,0x10
c00139df:	0f b6 c9             	movzx  ecx,cl
c00139e2:	89 f8                	mov    eax,edi
c00139e4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00139ea:	0f b6 f8             	movzx  edi,al
c00139ed:	0f b6 d2             	movzx  edx,dl
c00139f0:	01 fe                	add    esi,edi
c00139f2:	01 f1                	add    ecx,esi
c00139f4:	0f b7 f3             	movzx  esi,bx
c00139f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00139fb:	c1 f9 1f             	sar    ecx,0x1f
c00139fe:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013a03:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013a07:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013a0c:	8b 0c 8d 80 b2 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4d80]
c0013a13:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013a17:	76 29                	jbe    c0013a42 <datetimeToSeconds(datetime_t)+0x8f>
c0013a19:	f6 c3 03             	test   bl,0x3
c0013a1c:	75 24                	jne    c0013a42 <datetimeToSeconds(datetime_t)+0x8f>
c0013a1e:	31 d2                	xor    edx,edx
c0013a20:	bf 64 00 00 00       	mov    edi,0x64
c0013a25:	89 d8                	mov    eax,ebx
c0013a27:	66 f7 f7             	div    di
c0013a2a:	66 85 d2             	test   dx,dx
c0013a2d:	75 12                	jne    c0013a41 <datetimeToSeconds(datetime_t)+0x8e>
c0013a2f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013a35:	bf 90 01 00 00       	mov    edi,0x190
c0013a3a:	99                   	cdq    
c0013a3b:	f7 ff                	idiv   edi
c0013a3d:	85 d2                	test   edx,edx
c0013a3f:	75 01                	jne    c0013a42 <datetimeToSeconds(datetime_t)+0x8f>
c0013a41:	41                   	inc    ecx
c0013a42:	66 83 fb 46          	cmp    bx,0x46
c0013a46:	76 45                	jbe    c0013a8d <datetimeToSeconds(datetime_t)+0xda>
c0013a48:	bb 46 00 00 00       	mov    ebx,0x46
c0013a4d:	bf 64 00 00 00       	mov    edi,0x64
c0013a52:	bd 90 01 00 00       	mov    ebp,0x190
c0013a57:	b8 6d 01 00 00       	mov    eax,0x16d
c0013a5c:	f6 c3 03             	test   bl,0x3
c0013a5f:	75 23                	jne    c0013a84 <datetimeToSeconds(datetime_t)+0xd1>
c0013a61:	89 d8                	mov    eax,ebx
c0013a63:	99                   	cdq    
c0013a64:	f7 ff                	idiv   edi
c0013a66:	b8 6e 01 00 00       	mov    eax,0x16e
c0013a6b:	85 d2                	test   edx,edx
c0013a6d:	75 15                	jne    c0013a84 <datetimeToSeconds(datetime_t)+0xd1>
c0013a6f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013a75:	99                   	cdq    
c0013a76:	f7 fd                	idiv   ebp
c0013a78:	83 fa 01             	cmp    edx,0x1
c0013a7b:	19 c0                	sbb    eax,eax
c0013a7d:	f7 d0                	not    eax
c0013a7f:	05 6e 01 00 00       	add    eax,0x16e
c0013a84:	01 c1                	add    ecx,eax
c0013a86:	43                   	inc    ebx
c0013a87:	39 f3                	cmp    ebx,esi
c0013a89:	7c cc                	jl     c0013a57 <datetimeToSeconds(datetime_t)+0xa4>
c0013a8b:	eb 35                	jmp    c0013ac2 <datetimeToSeconds(datetime_t)+0x10f>
c0013a8d:	74 33                	je     c0013ac2 <datetimeToSeconds(datetime_t)+0x10f>
c0013a8f:	b8 45 00 00 00       	mov    eax,0x45
c0013a94:	89 c2                	mov    edx,eax
c0013a96:	83 e2 03             	and    edx,0x3
c0013a99:	39 f0                	cmp    eax,esi
c0013a9b:	7e 0f                	jle    c0013aac <datetimeToSeconds(datetime_t)+0xf9>
c0013a9d:	83 fa 01             	cmp    edx,0x1
c0013aa0:	19 d2                	sbb    edx,edx
c0013aa2:	48                   	dec    eax
c0013aa3:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013aaa:	eb e8                	jmp    c0013a94 <datetimeToSeconds(datetime_t)+0xe1>
c0013aac:	b8 6d 01 00 00       	mov    eax,0x16d
c0013ab1:	85 d2                	test   edx,edx
c0013ab3:	75 0b                	jne    c0013ac0 <datetimeToSeconds(datetime_t)+0x10d>
c0013ab5:	66 83 fb 01          	cmp    bx,0x1
c0013ab9:	19 c0                	sbb    eax,eax
c0013abb:	05 6e 01 00 00       	add    eax,0x16e
c0013ac0:	29 c1                	sub    ecx,eax
c0013ac2:	b8 80 51 01 00       	mov    eax,0x15180
c0013ac7:	f7 e9                	imul   ecx
c0013ac9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013acd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013ad1:	83 c4 14             	add    esp,0x14
c0013ad4:	5b                   	pop    ebx
c0013ad5:	5e                   	pop    esi
c0013ad6:	5f                   	pop    edi
c0013ad7:	5d                   	pop    ebp
c0013ad8:	c3                   	ret    
c0013ad9:	90                   	nop

c0013ada <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013ada:	57                   	push   edi
c0013adb:	56                   	push   esi
c0013adc:	53                   	push   ebx
c0013add:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ae1:	8b 06                	mov    eax,DWORD PTR [esi]
c0013ae3:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013ae6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013aea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013aee:	e8 c0 fe ff ff       	call   c00139b3 <datetimeToSeconds(datetime_t)>
c0013af3:	59                   	pop    ecx
c0013af4:	0f b6 0d 7c e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e77c
c0013afb:	5b                   	pop    ebx
c0013afc:	03 0d 80 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e780
c0013b02:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013b08:	89 cb                	mov    ebx,ecx
c0013b0a:	c1 fb 1f             	sar    ebx,0x1f
c0013b0d:	29 c8                	sub    eax,ecx
c0013b0f:	19 da                	sbb    edx,ebx
c0013b11:	31 c9                	xor    ecx,ecx
c0013b13:	80 3d 7d e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e77d,0x0
c0013b1a:	74 05                	je     c0013b21 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013b1c:	b9 08 07 00 00       	mov    ecx,0x708
c0013b21:	31 db                	xor    ebx,ebx
c0013b23:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013b27:	29 c8                	sub    eax,ecx
c0013b29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b2d:	19 da                	sbb    edx,ebx
c0013b2f:	89 f8                	mov    eax,edi
c0013b31:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013b35:	5b                   	pop    ebx
c0013b36:	5e                   	pop    esi
c0013b37:	5f                   	pop    edi
c0013b38:	ff e0                	jmp    eax

c0013b3a <secondsToDatetime(unsigned long long)>:
c0013b3a:	55                   	push   ebp
c0013b3b:	57                   	push   edi
c0013b3c:	56                   	push   esi
c0013b3d:	53                   	push   ebx
c0013b3e:	83 ec 1c             	sub    esp,0x1c
c0013b41:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013b45:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013b49:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013b4d:	6a 00                	push   0x0
c0013b4f:	68 80 51 01 00       	push   0x15180
c0013b54:	55                   	push   ebp
c0013b55:	57                   	push   edi
c0013b56:	e8 39 32 01 00       	call   c0026d94 <__udivdi3>
c0013b5b:	83 c4 10             	add    esp,0x10
c0013b5e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013b64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013b68:	6a 00                	push   0x0
c0013b6a:	68 80 51 01 00       	push   0x15180
c0013b6f:	55                   	push   ebp
c0013b70:	57                   	push   edi
c0013b71:	bf 10 0e 00 00       	mov    edi,0xe10
c0013b76:	e8 19 33 01 00       	call   c0026e94 <__umoddi3>
c0013b7b:	83 c4 10             	add    esp,0x10
c0013b7e:	99                   	cdq    
c0013b7f:	f7 ff                	idiv   edi
c0013b81:	bf 3c 00 00 00       	mov    edi,0x3c
c0013b86:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013b89:	89 d0                	mov    eax,edx
c0013b8b:	99                   	cdq    
c0013b8c:	f7 ff                	idiv   edi
c0013b8e:	85 db                	test   ebx,ebx
c0013b90:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013b93:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013b96:	79 11                	jns    c0013ba9 <secondsToDatetime(unsigned long long)+0x6f>
c0013b98:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013b9c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013ba2:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013ba7:	eb 07                	jmp    c0013bb0 <secondsToDatetime(unsigned long long)+0x76>
c0013ba9:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013bae:	89 d8                	mov    eax,ebx
c0013bb0:	bf b4 05 00 00       	mov    edi,0x5b4
c0013bb5:	99                   	cdq    
c0013bb6:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013bbb:	f7 f9                	idiv   ecx
c0013bbd:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013bc2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013bc6:	31 d2                	xor    edx,edx
c0013bc8:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013bd0:	01 c3                	add    ebx,eax
c0013bd2:	89 d8                	mov    eax,ebx
c0013bd4:	f7 f1                	div    ecx
c0013bd6:	31 d2                	xor    edx,edx
c0013bd8:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013bdb:	89 d8                	mov    eax,ebx
c0013bdd:	f7 f7                	div    edi
c0013bdf:	31 d2                	xor    edx,edx
c0013be1:	29 c1                	sub    ecx,eax
c0013be3:	89 d8                	mov    eax,ebx
c0013be5:	f7 f5                	div    ebp
c0013be7:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013bec:	29 c1                	sub    ecx,eax
c0013bee:	31 d2                	xor    edx,edx
c0013bf0:	89 c8                	mov    eax,ecx
c0013bf2:	f7 f5                	div    ebp
c0013bf4:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013bf9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013bfd:	31 d2                	xor    edx,edx
c0013bff:	89 c8                	mov    eax,ecx
c0013c01:	f7 f5                	div    ebp
c0013c03:	31 d2                	xor    edx,edx
c0013c05:	01 c3                	add    ebx,eax
c0013c07:	89 c8                	mov    eax,ecx
c0013c09:	f7 f7                	div    edi
c0013c0b:	bf 99 00 00 00       	mov    edi,0x99
c0013c10:	29 c3                	sub    ebx,eax
c0013c12:	31 d2                	xor    edx,edx
c0013c14:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013c1c:	29 c3                	sub    ebx,eax
c0013c1e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013c21:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013c24:	bb 05 00 00 00       	mov    ebx,0x5
c0013c29:	83 c1 02             	add    ecx,0x2
c0013c2c:	89 c8                	mov    eax,ecx
c0013c2e:	f7 f7                	div    edi
c0013c30:	31 d2                	xor    edx,edx
c0013c32:	89 c7                	mov    edi,eax
c0013c34:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013c3a:	83 c0 02             	add    eax,0x2
c0013c3d:	f7 f3                	div    ebx
c0013c3f:	89 eb                	mov    ebx,ebp
c0013c41:	29 c3                	sub    ebx,eax
c0013c43:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013c49:	88 1e                	mov    BYTE PTR [esi],bl
c0013c4b:	19 c0                	sbb    eax,eax
c0013c4d:	31 d2                	xor    edx,edx
c0013c4f:	83 e0 0c             	and    eax,0xc
c0013c52:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013c56:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013c5e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013c62:	83 f9 01             	cmp    ecx,0x1
c0013c65:	0f 96 c2             	setbe  dl
c0013c68:	41                   	inc    ecx
c0013c69:	01 d0                	add    eax,edx
c0013c6b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013c6e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013c72:	83 c4 1c             	add    esp,0x1c
c0013c75:	89 f0                	mov    eax,esi
c0013c77:	5b                   	pop    ebx
c0013c78:	5e                   	pop    esi
c0013c79:	5f                   	pop    edi
c0013c7a:	5d                   	pop    ebp
c0013c7b:	c2 04 00             	ret    0x4

c0013c7e <Clock::timeInDatetimeLocal()>:
c0013c7e:	53                   	push   ebx
c0013c7f:	83 ec 14             	sub    esp,0x14
c0013c82:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c86:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013c8a:	e8 83 fc ff ff       	call   c0013912 <Clock::timeInSecondsLocal()>
c0013c8f:	83 c4 0c             	add    esp,0xc
c0013c92:	52                   	push   edx
c0013c93:	50                   	push   eax
c0013c94:	53                   	push   ebx
c0013c95:	e8 a0 fe ff ff       	call   c0013b3a <secondsToDatetime(unsigned long long)>
c0013c9a:	89 d8                	mov    eax,ebx
c0013c9c:	83 c4 14             	add    esp,0x14
c0013c9f:	5b                   	pop    ebx
c0013ca0:	c2 04 00             	ret    0x4
c0013ca3:	90                   	nop

c0013ca4 <Device::hibernate()>:
c0013ca4:	c3                   	ret    
c0013ca5:	90                   	nop

c0013ca6 <Device::wake()>:
c0013ca6:	c3                   	ret    
c0013ca7:	90                   	nop

c0013ca8 <Device::detect()>:
c0013ca8:	c3                   	ret    
c0013ca9:	90                   	nop

c0013caa <Device::disableLegacy()>:
c0013caa:	c3                   	ret    
c0013cab:	90                   	nop

c0013cac <Device::powerSaving(PowerSavingLevel)>:
c0013cac:	c3                   	ret    
c0013cad:	90                   	nop

c0013cae <DriverlessDevice::close(int, int, void*)>:
c0013cae:	31 c0                	xor    eax,eax
c0013cb0:	c3                   	ret    
c0013cb1:	90                   	nop

c0013cb2 <DriverlessDevice::detect()>:
c0013cb2:	c3                   	ret    
c0013cb3:	90                   	nop

c0013cb4 <DriverlessDevice::open(int, int, void*)>:
c0013cb4:	83 ec 18             	sub    esp,0x18
c0013cb7:	68 b0 b2 02 c0       	push   0xc002b2b0
c0013cbc:	e8 9e 66 00 00       	call   c001a35f <Krnl::panic(char const*)>
c0013cc1:	83 c8 ff             	or     eax,0xffffffff
c0013cc4:	83 c4 1c             	add    esp,0x1c
c0013cc7:	c3                   	ret    

c0013cc8 <Device::~Device()>:
c0013cc8:	ba 10 b3 02 c0       	mov    edx,0xc002b310
c0013ccd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013cd1:	89 10                	mov    DWORD PTR [eax],edx
c0013cd3:	90                   	nop
c0013cd4:	c3                   	ret    
c0013cd5:	90                   	nop

c0013cd6 <Device::~Device()>:
c0013cd6:	83 ec 0c             	sub    esp,0xc
c0013cd9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013cdd:	e8 e6 ff ff ff       	call   c0013cc8 <Device::~Device()>
c0013ce2:	83 c4 04             	add    esp,0x4
c0013ce5:	83 ec 08             	sub    esp,0x8
c0013ce8:	68 58 01 00 00       	push   0x158
c0013ced:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cf1:	e8 f3 eb ff ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c0013cf6:	83 c4 10             	add    esp,0x10
c0013cf9:	83 c4 0c             	add    esp,0xc
c0013cfc:	c3                   	ret    
c0013cfd:	90                   	nop

c0013cfe <Device::findAndLoadDriver()>:
c0013cfe:	c7 44 24 04 ce b2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b2ce
c0013d06:	e9 b6 ec ff ff       	jmp    c00129c1 <Dbg::kprintf(char const*, ...)>
c0013d0b:	90                   	nop

c0013d0c <Device::preOpenPCI(PCIDeviceInfo)>:
c0013d0c:	57                   	push   edi
c0013d0d:	b9 09 00 00 00       	mov    ecx,0x9
c0013d12:	56                   	push   esi
c0013d13:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013d17:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013d1b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013d25:	81 c7 18 01 00 00    	add    edi,0x118
c0013d2b:	fc                   	cld    
c0013d2c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013d2e:	5e                   	pop    esi
c0013d2f:	5f                   	pop    edi
c0013d30:	c3                   	ret    
c0013d31:	90                   	nop

c0013d32 <Device::preOpenACPI(void*, char*, char*)>:
c0013d32:	57                   	push   edi
c0013d33:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013d38:	56                   	push   esi
c0013d39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013d3d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d41:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013d4b:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013d51:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013d57:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d5b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013d5d:	b9 0e 00 00 00       	mov    ecx,0xe
c0013d62:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013d68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013d6c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013d6e:	5e                   	pop    esi
c0013d6f:	5f                   	pop    edi
c0013d70:	c3                   	ret    
c0013d71:	90                   	nop

c0013d72 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013d72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d76:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013d7b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013d82:	75 0b                	jne    c0013d8f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013d84:	8b 00                	mov    eax,DWORD PTR [eax]
c0013d86:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013d8a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013d8d:	eb 1e                	jmp    c0013dad <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013d8f:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0013d94:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013d9a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013da0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013da2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013da6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013daa:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013dad:	ff e0                	jmp    eax
c0013daf:	90                   	nop

c0013db0 <Device::getParent()>:
c0013db0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013db4:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013dba:	c3                   	ret    
c0013dbb:	90                   	nop

c0013dbc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013dbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013dc0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013dc5:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013dcc:	75 0b                	jne    c0013dd9 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013dce:	8b 00                	mov    eax,DWORD PTR [eax]
c0013dd0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013dd4:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013dd7:	eb 1e                	jmp    c0013df7 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013dd9:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0013dde:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013de4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013dea:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013dec:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013df0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013df4:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013df7:	ff e0                	jmp    eax
c0013df9:	90                   	nop

c0013dfa <Device::addChild(Device*)>:
c0013dfa:	53                   	push   ebx
c0013dfb:	83 ec 08             	sub    esp,0x8
c0013dfe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013e02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e06:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013e0c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013e12:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013e14:	85 d2                	test   edx,edx
c0013e16:	74 04                	je     c0013e1c <Device::addChild(Device*)+0x22>
c0013e18:	89 d3                	mov    ebx,edx
c0013e1a:	eb f6                	jmp    c0013e12 <Device::addChild(Device*)+0x18>
c0013e1c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013e1f:	83 ec 0c             	sub    esp,0xc
c0013e22:	6a 08                	push   0x8
c0013e24:	e8 40 bb ff ff       	call   c000f969 <malloc>
c0013e29:	89 03                	mov    DWORD PTR [ebx],eax
c0013e2b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013e31:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e38:	83 c4 18             	add    esp,0x18
c0013e3b:	5b                   	pop    ebx
c0013e3c:	c3                   	ret    
c0013e3d:	90                   	nop

c0013e3e <Device::removeAllChildren()>:
c0013e3e:	56                   	push   esi
c0013e3f:	53                   	push   ebx
c0013e40:	52                   	push   edx
c0013e41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e45:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013e4b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e4e:	74 17                	je     c0013e67 <Device::removeAllChildren()+0x29>
c0013e50:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013e53:	85 c0                	test   eax,eax
c0013e55:	74 0c                	je     c0013e63 <Device::removeAllChildren()+0x25>
c0013e57:	83 ec 0c             	sub    esp,0xc
c0013e5a:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e5c:	50                   	push   eax
c0013e5d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013e60:	83 c4 10             	add    esp,0x10
c0013e63:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e65:	eb e4                	jmp    c0013e4b <Device::removeAllChildren()+0xd>
c0013e67:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013e6d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013e73:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013e79:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e80:	58                   	pop    eax
c0013e81:	5b                   	pop    ebx
c0013e82:	5e                   	pop    esi
c0013e83:	c3                   	ret    

c0013e84 <Device::hibernateAll()>:
c0013e84:	53                   	push   ebx
c0013e85:	83 ec 14             	sub    esp,0x14
c0013e88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e8e:	53                   	push   ebx
c0013e8f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013e92:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e98:	83 c4 10             	add    esp,0x10
c0013e9b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e9e:	74 0f                	je     c0013eaf <Device::hibernateAll()+0x2b>
c0013ea0:	83 ec 0c             	sub    esp,0xc
c0013ea3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ea6:	e8 d9 ff ff ff       	call   c0013e84 <Device::hibernateAll()>
c0013eab:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ead:	eb e9                	jmp    c0013e98 <Device::hibernateAll()+0x14>
c0013eaf:	83 c4 08             	add    esp,0x8
c0013eb2:	5b                   	pop    ebx
c0013eb3:	c3                   	ret    

c0013eb4 <Device::wakeAll()>:
c0013eb4:	53                   	push   ebx
c0013eb5:	83 ec 14             	sub    esp,0x14
c0013eb8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ebc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ebe:	53                   	push   ebx
c0013ebf:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013ec2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ec8:	83 c4 10             	add    esp,0x10
c0013ecb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ece:	74 0f                	je     c0013edf <Device::wakeAll()+0x2b>
c0013ed0:	83 ec 0c             	sub    esp,0xc
c0013ed3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ed6:	e8 d9 ff ff ff       	call   c0013eb4 <Device::wakeAll()>
c0013edb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013edd:	eb e9                	jmp    c0013ec8 <Device::wakeAll()+0x14>
c0013edf:	83 c4 08             	add    esp,0x8
c0013ee2:	5b                   	pop    ebx
c0013ee3:	c3                   	ret    

c0013ee4 <Device::detectAll()>:
c0013ee4:	53                   	push   ebx
c0013ee5:	83 ec 14             	sub    esp,0x14
c0013ee8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013eec:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013eee:	53                   	push   ebx
c0013eef:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013ef2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ef8:	83 c4 10             	add    esp,0x10
c0013efb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013efe:	74 0f                	je     c0013f0f <Device::detectAll()+0x2b>
c0013f00:	83 ec 0c             	sub    esp,0xc
c0013f03:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f06:	e8 d9 ff ff ff       	call   c0013ee4 <Device::detectAll()>
c0013f0b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f0d:	eb e9                	jmp    c0013ef8 <Device::detectAll()+0x14>
c0013f0f:	83 c4 08             	add    esp,0x8
c0013f12:	5b                   	pop    ebx
c0013f13:	c3                   	ret    

c0013f14 <Device::disableLegacyAll()>:
c0013f14:	53                   	push   ebx
c0013f15:	83 ec 14             	sub    esp,0x14
c0013f18:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f1c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f1e:	53                   	push   ebx
c0013f1f:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013f22:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f28:	83 c4 10             	add    esp,0x10
c0013f2b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f2e:	74 0f                	je     c0013f3f <Device::disableLegacyAll()+0x2b>
c0013f30:	83 ec 0c             	sub    esp,0xc
c0013f33:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f36:	e8 d9 ff ff ff       	call   c0013f14 <Device::disableLegacyAll()>
c0013f3b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f3d:	eb e9                	jmp    c0013f28 <Device::disableLegacyAll()+0x14>
c0013f3f:	83 c4 08             	add    esp,0x8
c0013f42:	5b                   	pop    ebx
c0013f43:	c3                   	ret    

c0013f44 <Device::loadDriversForAll()>:
c0013f44:	53                   	push   ebx
c0013f45:	83 ec 08             	sub    esp,0x8
c0013f48:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f4c:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013f53:	75 0c                	jne    c0013f61 <Device::loadDriversForAll()+0x1d>
c0013f55:	83 ec 0c             	sub    esp,0xc
c0013f58:	53                   	push   ebx
c0013f59:	e8 a0 fd ff ff       	call   c0013cfe <Device::findAndLoadDriver()>
c0013f5e:	83 c4 10             	add    esp,0x10
c0013f61:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f67:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f6a:	74 12                	je     c0013f7e <Device::loadDriversForAll()+0x3a>
c0013f6c:	83 ec 0c             	sub    esp,0xc
c0013f6f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f72:	e8 cd ff ff ff       	call   c0013f44 <Device::loadDriversForAll()>
c0013f77:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f79:	83 c4 10             	add    esp,0x10
c0013f7c:	eb e9                	jmp    c0013f67 <Device::loadDriversForAll()+0x23>
c0013f7e:	83 c4 08             	add    esp,0x8
c0013f81:	5b                   	pop    ebx
c0013f82:	c3                   	ret    
c0013f83:	90                   	nop

c0013f84 <Device::closeAll()>:
c0013f84:	53                   	push   ebx
c0013f85:	83 ec 08             	sub    esp,0x8
c0013f88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f8e:	6a 00                	push   0x0
c0013f90:	6a 00                	push   0x0
c0013f92:	6a 00                	push   0x0
c0013f94:	53                   	push   ebx
c0013f95:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013f98:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f9e:	83 c4 10             	add    esp,0x10
c0013fa1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013fa4:	74 0f                	je     c0013fb5 <Device::closeAll()+0x31>
c0013fa6:	83 ec 0c             	sub    esp,0xc
c0013fa9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013fac:	e8 d3 ff ff ff       	call   c0013f84 <Device::closeAll()>
c0013fb1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013fb3:	eb e9                	jmp    c0013f9e <Device::closeAll()+0x1a>
c0013fb5:	83 c4 08             	add    esp,0x8
c0013fb8:	5b                   	pop    ebx
c0013fb9:	c3                   	ret    

c0013fba <Device::powerSavingAll(PowerSavingLevel)>:
c0013fba:	56                   	push   esi
c0013fbb:	53                   	push   ebx
c0013fbc:	83 ec 0c             	sub    esp,0xc
c0013fbf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013fc3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013fc7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fc9:	56                   	push   esi
c0013fca:	53                   	push   ebx
c0013fcb:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013fce:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013fd4:	83 c4 10             	add    esp,0x10
c0013fd7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013fda:	74 0f                	je     c0013feb <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013fdc:	52                   	push   edx
c0013fdd:	52                   	push   edx
c0013fde:	56                   	push   esi
c0013fdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013fe2:	e8 d3 ff ff ff       	call   c0013fba <Device::powerSavingAll(PowerSavingLevel)>
c0013fe7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013fe9:	eb e9                	jmp    c0013fd4 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013feb:	58                   	pop    eax
c0013fec:	5b                   	pop    ebx
c0013fed:	5e                   	pop    esi
c0013fee:	c3                   	ret    
c0013fef:	90                   	nop

c0013ff0 <Device::setName(char const*)>:
c0013ff0:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013ff8:	e9 0f c8 fe ff       	jmp    c000080c <strcpy>
c0013ffd:	90                   	nop

c0013ffe <Device::Device(char const*)>:
c0013ffe:	83 ec 1c             	sub    esp,0x1c
c0014001:	ba 10 b3 02 c0       	mov    edx,0xc002b310
c0014006:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001400a:	89 10                	mov    DWORD PTR [eax],edx
c001400c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014010:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001401a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001401e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014028:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001402c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014036:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001403a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014044:	83 ec 08             	sub    esp,0x8
c0014047:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001404b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001404f:	e8 9c ff ff ff       	call   c0013ff0 <Device::setName(char const*)>
c0014054:	83 c4 10             	add    esp,0x10
c0014057:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001405f:	83 ec 0c             	sub    esp,0xc
c0014062:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014066:	e8 fe b8 ff ff       	call   c000f969 <malloc>
c001406b:	83 c4 10             	add    esp,0x10
c001406e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014074:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001407b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001407f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014085:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014089:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001408f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014095:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014099:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001409f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00140a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140aa:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00140b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140b5:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00140bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140c0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00140ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140ce:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00140d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140dc:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00140e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140ea:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c00140f4:	90                   	nop
c00140f5:	83 c4 1c             	add    esp,0x1c
c00140f8:	c3                   	ret    
c00140f9:	90                   	nop

c00140fa <Device::getName()>:
c00140fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140fe:	05 d0 00 00 00       	add    eax,0xd0
c0014103:	c3                   	ret    

c0014104 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014104:	83 ec 0c             	sub    esp,0xc
c0014107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001410b:	83 ec 08             	sub    esp,0x8
c001410e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014112:	50                   	push   eax
c0014113:	e8 e6 fe ff ff       	call   c0013ffe <Device::Device(char const*)>
c0014118:	83 c4 10             	add    esp,0x10
c001411b:	ba 3c b3 02 c0       	mov    edx,0xc002b33c
c0014120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014124:	89 10                	mov    DWORD PTR [eax],edx
c0014126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001412a:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014134:	90                   	nop
c0014135:	83 c4 0c             	add    esp,0xc
c0014138:	c3                   	ret    
c0014139:	90                   	nop

c001413a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001413a:	57                   	push   edi
c001413b:	56                   	push   esi
c001413c:	53                   	push   ebx
c001413d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014141:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014145:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014149:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001414f:	75 0c                	jne    c001415d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014151:	52                   	push   edx
c0014152:	52                   	push   edx
c0014153:	53                   	push   ebx
c0014154:	56                   	push   esi
c0014155:	e8 76 4b 01 00       	call   c0028cd0 <LinkedList<Device>::addElement(Device*)>
c001415a:	83 c4 10             	add    esp,0x10
c001415d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014163:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014166:	74 12                	je     c001417a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014168:	50                   	push   eax
c0014169:	57                   	push   edi
c001416a:	56                   	push   esi
c001416b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001416e:	e8 c7 ff ff ff       	call   c001413a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014173:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014175:	83 c4 10             	add    esp,0x10
c0014178:	eb e9                	jmp    c0014163 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001417a:	5b                   	pop    ebx
c001417b:	5e                   	pop    esi
c001417c:	5f                   	pop    edi
c001417d:	c3                   	ret    

c001417e <getDevicesOfType(DeviceType)>:
c001417e:	53                   	push   ebx
c001417f:	83 ec 14             	sub    esp,0x14
c0014182:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014186:	53                   	push   ebx
c0014187:	e8 20 4c 01 00       	call   c0028dac <LinkedList<Device>::LinkedList()>
c001418c:	83 c4 0c             	add    esp,0xc
c001418f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014193:	53                   	push   ebx
c0014194:	ff 35 08 e6 02 c0    	push   DWORD PTR ds:0xc002e608
c001419a:	e8 9b ff ff ff       	call   c001413a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001419f:	89 d8                	mov    eax,ebx
c00141a1:	83 c4 18             	add    esp,0x18
c00141a4:	5b                   	pop    ebx
c00141a5:	c2 04 00             	ret    0x4

c00141a8 <HardDiskController::HardDiskController(char const*)>:
c00141a8:	83 ec 0c             	sub    esp,0xc
c00141ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141af:	83 ec 08             	sub    esp,0x8
c00141b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141b6:	50                   	push   eax
c00141b7:	e8 42 fe ff ff       	call   c0013ffe <Device::Device(char const*)>
c00141bc:	83 c4 10             	add    esp,0x10
c00141bf:	ba 68 b3 02 c0       	mov    edx,0xc002b368
c00141c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141c8:	89 10                	mov    DWORD PTR [eax],edx
c00141ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141ce:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00141d8:	90                   	nop
c00141d9:	83 c4 0c             	add    esp,0xc
c00141dc:	c3                   	ret    
c00141dd:	90                   	nop

c00141de <HardDiskController::~HardDiskController()>:
c00141de:	83 ec 0c             	sub    esp,0xc
c00141e1:	ba 68 b3 02 c0       	mov    edx,0xc002b368
c00141e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141ea:	89 10                	mov    DWORD PTR [eax],edx
c00141ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141f0:	83 ec 0c             	sub    esp,0xc
c00141f3:	50                   	push   eax
c00141f4:	e8 cf fa ff ff       	call   c0013cc8 <Device::~Device()>
c00141f9:	83 c4 10             	add    esp,0x10
c00141fc:	90                   	nop
c00141fd:	83 c4 0c             	add    esp,0xc
c0014200:	c3                   	ret    
c0014201:	90                   	nop

c0014202 <HardDiskController::~HardDiskController()>:
c0014202:	83 ec 0c             	sub    esp,0xc
c0014205:	83 ec 0c             	sub    esp,0xc
c0014208:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001420c:	e8 cd ff ff ff       	call   c00141de <HardDiskController::~HardDiskController()>
c0014211:	83 c4 10             	add    esp,0x10
c0014214:	83 ec 08             	sub    esp,0x8
c0014217:	68 58 01 00 00       	push   0x158
c001421c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014220:	e8 c4 e6 ff ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c0014225:	83 c4 10             	add    esp,0x10
c0014228:	83 c4 0c             	add    esp,0xc
c001422b:	c3                   	ret    

c001422c <PhysicalDisk::eject()>:
c001422c:	83 c8 ff             	or     eax,0xffffffff
c001422f:	c3                   	ret    

c0014230 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014230:	83 ec 0c             	sub    esp,0xc
c0014233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014237:	83 ec 08             	sub    esp,0x8
c001423a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001423e:	50                   	push   eax
c001423f:	e8 ba fd ff ff       	call   c0013ffe <Device::Device(char const*)>
c0014244:	83 c4 10             	add    esp,0x10
c0014247:	ba 94 b3 02 c0       	mov    edx,0xc002b394
c001424c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014250:	89 10                	mov    DWORD PTR [eax],edx
c0014252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014256:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001425d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014261:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001426c:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001427a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001427e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014288:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014292:	90                   	nop
c0014293:	83 c4 0c             	add    esp,0xc
c0014296:	c3                   	ret    
c0014297:	90                   	nop

c0014298 <PhysicalDisk::startCache()>:
c0014298:	56                   	push   esi
c0014299:	53                   	push   ebx
c001429a:	83 ec 10             	sub    esp,0x10
c001429d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142a1:	6a 44                	push   0x44
c00142a3:	e8 c1 b6 ff ff       	call   c000f969 <malloc>
c00142a8:	89 c6                	mov    esi,eax
c00142aa:	58                   	pop    eax
c00142ab:	5a                   	pop    edx
c00142ac:	53                   	push   ebx
c00142ad:	56                   	push   esi
c00142ae:	e8 77 28 00 00       	call   c0016b2a <VCache::VCache(PhysicalDisk*)>
c00142b3:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00142b9:	83 c4 14             	add    esp,0x14
c00142bc:	5b                   	pop    ebx
c00142bd:	5e                   	pop    esi
c00142be:	c3                   	ret    
c00142bf:	90                   	nop

c00142c0 <PhysicalDisk::~PhysicalDisk()>:
c00142c0:	83 ec 0c             	sub    esp,0xc
c00142c3:	ba 94 b3 02 c0       	mov    edx,0xc002b394
c00142c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142cc:	89 10                	mov    DWORD PTR [eax],edx
c00142ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142d2:	83 ec 0c             	sub    esp,0xc
c00142d5:	50                   	push   eax
c00142d6:	e8 ed f9 ff ff       	call   c0013cc8 <Device::~Device()>
c00142db:	83 c4 10             	add    esp,0x10
c00142de:	90                   	nop
c00142df:	83 c4 0c             	add    esp,0xc
c00142e2:	c3                   	ret    
c00142e3:	90                   	nop

c00142e4 <PhysicalDisk::~PhysicalDisk()>:
c00142e4:	83 ec 0c             	sub    esp,0xc
c00142e7:	83 ec 0c             	sub    esp,0xc
c00142ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142ee:	e8 cd ff ff ff       	call   c00142c0 <PhysicalDisk::~PhysicalDisk()>
c00142f3:	83 c4 10             	add    esp,0x10
c00142f6:	83 ec 08             	sub    esp,0x8
c00142f9:	68 6c 01 00 00       	push   0x16c
c00142fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014302:	e8 e2 e5 ff ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c0014307:	83 c4 10             	add    esp,0x10
c001430a:	83 c4 0c             	add    esp,0xc
c001430d:	c3                   	ret    

c001430e <FPU::FPU(char const*)>:
c001430e:	83 ec 0c             	sub    esp,0xc
c0014311:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014315:	83 ec 08             	sub    esp,0x8
c0014318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001431c:	50                   	push   eax
c001431d:	e8 dc fc ff ff       	call   c0013ffe <Device::Device(char const*)>
c0014322:	83 c4 10             	add    esp,0x10
c0014325:	ba d8 b3 02 c0       	mov    edx,0xc002b3d8
c001432a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001432e:	89 10                	mov    DWORD PTR [eax],edx
c0014330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014334:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001433e:	90                   	nop
c001433f:	83 c4 0c             	add    esp,0xc
c0014342:	c3                   	ret    
c0014343:	90                   	nop

c0014344 <FPU::~FPU()>:
c0014344:	83 ec 0c             	sub    esp,0xc
c0014347:	ba d8 b3 02 c0       	mov    edx,0xc002b3d8
c001434c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014350:	89 10                	mov    DWORD PTR [eax],edx
c0014352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014356:	83 ec 0c             	sub    esp,0xc
c0014359:	50                   	push   eax
c001435a:	e8 69 f9 ff ff       	call   c0013cc8 <Device::~Device()>
c001435f:	83 c4 10             	add    esp,0x10
c0014362:	90                   	nop
c0014363:	83 c4 0c             	add    esp,0xc
c0014366:	c3                   	ret    
c0014367:	90                   	nop

c0014368 <FPU::~FPU()>:
c0014368:	83 ec 0c             	sub    esp,0xc
c001436b:	83 ec 0c             	sub    esp,0xc
c001436e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014372:	e8 cd ff ff ff       	call   c0014344 <FPU::~FPU()>
c0014377:	83 c4 10             	add    esp,0x10
c001437a:	83 ec 08             	sub    esp,0x8
c001437d:	68 58 01 00 00       	push   0x158
c0014382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014386:	e8 5e e5 ff ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c001438b:	83 c4 10             	add    esp,0x10
c001438e:	83 c4 0c             	add    esp,0xc
c0014391:	c3                   	ret    

c0014392 <setupFPU()>:
c0014392:	53                   	push   ebx
c0014393:	83 ec 08             	sub    esp,0x8
c0014396:	8b 15 08 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e608
c001439c:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00143a3:	74 19                	je     c00143be <setupFPU()+0x2c>
c00143a5:	83 ec 0c             	sub    esp,0xc
c00143a8:	68 58 01 00 00       	push   0x158
c00143ad:	e8 b7 b5 ff ff       	call   c000f969 <malloc>
c00143b2:	89 c3                	mov    ebx,eax
c00143b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00143b7:	e8 5a 15 01 00       	call   c0025916 <AVX::AVX()>
c00143bc:	eb 5b                	jmp    c0014419 <setupFPU()+0x87>
c00143be:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00143c4:	84 c0                	test   al,al
c00143c6:	79 19                	jns    c00143e1 <setupFPU()+0x4f>
c00143c8:	83 ec 0c             	sub    esp,0xc
c00143cb:	68 58 01 00 00       	push   0x158
c00143d0:	e8 94 b5 ff ff       	call   c000f969 <malloc>
c00143d5:	89 c3                	mov    ebx,eax
c00143d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00143da:	e8 5d 16 01 00       	call   c0025a3c <SSE::SSE()>
c00143df:	eb 38                	jmp    c0014419 <setupFPU()+0x87>
c00143e1:	a8 20                	test   al,0x20
c00143e3:	74 19                	je     c00143fe <setupFPU()+0x6c>
c00143e5:	83 ec 0c             	sub    esp,0xc
c00143e8:	68 58 01 00 00       	push   0x158
c00143ed:	e8 77 b5 ff ff       	call   c000f969 <malloc>
c00143f2:	89 c3                	mov    ebx,eax
c00143f4:	89 04 24             	mov    DWORD PTR [esp],eax
c00143f7:	e8 aa 15 01 00       	call   c00259a6 <MMX::MMX()>
c00143fc:	eb 1b                	jmp    c0014419 <setupFPU()+0x87>
c00143fe:	a8 10                	test   al,0x10
c0014400:	74 1c                	je     c001441e <setupFPU()+0x8c>
c0014402:	83 ec 0c             	sub    esp,0xc
c0014405:	68 58 01 00 00       	push   0x158
c001440a:	e8 5a b5 ff ff       	call   c000f969 <malloc>
c001440f:	89 c3                	mov    ebx,eax
c0014411:	89 04 24             	mov    DWORD PTR [esp],eax
c0014414:	e8 b1 16 01 00       	call   c0025aca <x87::x87()>
c0014419:	83 c4 10             	add    esp,0x10
c001441c:	eb 24                	jmp    c0014442 <setupFPU()+0xb0>
c001441e:	83 e0 ef             	and    eax,0xffffffef
c0014421:	83 ec 0c             	sub    esp,0xc
c0014424:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001442a:	68 c4 b3 02 c0       	push   0xc002b3c4
c001442f:	e8 8d e5 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0014434:	0f 20 c0             	mov    eax,cr0
c0014437:	83 c8 04             	or     eax,0x4
c001443a:	0f 22 c0             	mov    cr0,eax
c001443d:	31 db                	xor    ebx,ebx
c001443f:	83 c4 10             	add    esp,0x10
c0014442:	89 d8                	mov    eax,ebx
c0014444:	83 c4 08             	add    esp,0x8
c0014447:	5b                   	pop    ebx
c0014448:	c3                   	ret    
c0014449:	90                   	nop

c001444a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001444a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001444e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014452:	c1 e0 04             	shl    eax,0x4
c0014455:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014459:	8d 50 10             	lea    edx,[eax+0x10]
c001445c:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014462:	74 08                	je     c001446c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014464:	83 c0 04             	add    eax,0x4
c0014467:	39 d0                	cmp    eax,edx
c0014469:	75 f1                	jne    c001445c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001446b:	c3                   	ret    
c001446c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014476:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014480:	eb e2                	jmp    c0014464 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014482 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014482:	57                   	push   edi
c0014483:	31 c0                	xor    eax,eax
c0014485:	56                   	push   esi
c0014486:	53                   	push   ebx
c0014487:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001448b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001448f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014493:	89 da                	mov    edx,ebx
c0014495:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014499:	c1 e2 04             	shl    edx,0x4
c001449c:	01 ca                	add    edx,ecx
c001449e:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00144a6:	74 16                	je     c00144be <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00144a8:	40                   	inc    eax
c00144a9:	83 f8 04             	cmp    eax,0x4
c00144ac:	75 f0                	jne    c001449e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00144ae:	c7 44 24 10 08 b4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b408
c00144b6:	5b                   	pop    ebx
c00144b7:	5e                   	pop    esi
c00144b8:	5f                   	pop    edi
c00144b9:	e9 a1 5e 00 00       	jmp    c001a35f <Krnl::panic(char const*)>
c00144be:	8d 04 98             	lea    eax,[eax+ebx*4]
c00144c1:	8d 04 81             	lea    eax,[ecx+eax*4]
c00144c4:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00144ca:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00144d0:	5b                   	pop    ebx
c00144d1:	5e                   	pop    esi
c00144d2:	5f                   	pop    edi
c00144d3:	c3                   	ret    

c00144d4 <doubleFault(regs*, void*)>:
c00144d4:	55                   	push   ebp
c00144d5:	89 e5                	mov    ebp,esp
c00144d7:	83 ec 08             	sub    esp,0x8
c00144da:	83 ec 0c             	sub    esp,0xc
c00144dd:	68 15 b4 02 c0       	push   0xc002b415
c00144e2:	e8 78 5e 00 00       	call   c001a35f <Krnl::panic(char const*)>
c00144e7:	83 c4 10             	add    esp,0x10
c00144ea:	90                   	nop
c00144eb:	c9                   	leave  
c00144ec:	c3                   	ret    
c00144ed:	90                   	nop

c00144ee <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00144ee:	56                   	push   esi
c00144ef:	53                   	push   ebx
c00144f0:	50                   	push   eax
c00144f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00144f5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00144f9:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00144fe:	75 35                	jne    c0014535 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014500:	8d 43 20             	lea    eax,[ebx+0x20]
c0014503:	31 d2                	xor    edx,edx
c0014505:	89 c1                	mov    ecx,eax
c0014507:	c1 e1 04             	shl    ecx,0x4
c001450a:	01 f1                	add    ecx,esi
c001450c:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014514:	74 3e                	je     c0014554 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014516:	42                   	inc    edx
c0014517:	83 fa 04             	cmp    edx,0x4
c001451a:	75 f0                	jne    c001450c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c001451c:	83 ec 0c             	sub    esp,0xc
c001451f:	68 2f b4 02 c0       	push   0xc002b42f
c0014524:	e8 36 5e 00 00       	call   c001a35f <Krnl::panic(char const*)>
c0014529:	83 c4 10             	add    esp,0x10
c001452c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014531:	5a                   	pop    edx
c0014532:	5b                   	pop    ebx
c0014533:	5e                   	pop    esi
c0014534:	c3                   	ret    
c0014535:	83 ec 0c             	sub    esp,0xc
c0014538:	56                   	push   esi
c0014539:	e8 bc fb ff ff       	call   c00140fa <Device::getName()>
c001453e:	83 c4 10             	add    esp,0x10
c0014541:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014544:	75 ba                	jne    c0014500 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014546:	83 fb 0f             	cmp    ebx,0xf
c0014549:	7f 29                	jg     c0014574 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001454b:	0f b6 9b 60 d8 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd27a0]
c0014552:	eb ac                	jmp    c0014500 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014554:	8d 04 82             	lea    eax,[edx+eax*4]
c0014557:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001455b:	8d 04 86             	lea    eax,[esi+eax*4]
c001455e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014564:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014568:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001456e:	89 d8                	mov    eax,ebx
c0014570:	5a                   	pop    edx
c0014571:	5b                   	pop    ebx
c0014572:	5e                   	pop    esi
c0014573:	c3                   	ret    
c0014574:	83 ec 0c             	sub    esp,0xc
c0014577:	68 22 b4 02 c0       	push   0xc002b422
c001457c:	e8 de 5d 00 00       	call   c001a35f <Krnl::panic(char const*)>
c0014581:	83 c4 10             	add    esp,0x10
c0014584:	e9 77 ff ff ff       	jmp    c0014500 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014589:	90                   	nop

c001458a <InterruptController::clearAllHandlers(int, bool)>:
c001458a:	56                   	push   esi
c001458b:	53                   	push   ebx
c001458c:	52                   	push   edx
c001458d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014591:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014595:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001459a:	75 61                	jne    c00145fd <InterruptController::clearAllHandlers(int, bool)+0x73>
c001459c:	8d 46 20             	lea    eax,[esi+0x20]
c001459f:	c1 e6 04             	shl    esi,0x4
c00145a2:	c1 e0 04             	shl    eax,0x4
c00145a5:	01 de                	add    esi,ebx
c00145a7:	01 d8                	add    eax,ebx
c00145a9:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00145b3:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00145bd:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00145c7:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00145d1:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00145db:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00145e5:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00145ef:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00145f9:	58                   	pop    eax
c00145fa:	5b                   	pop    ebx
c00145fb:	5e                   	pop    esi
c00145fc:	c3                   	ret    
c00145fd:	83 ec 0c             	sub    esp,0xc
c0014600:	53                   	push   ebx
c0014601:	e8 f4 fa ff ff       	call   c00140fa <Device::getName()>
c0014606:	83 c4 10             	add    esp,0x10
c0014609:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001460c:	75 8e                	jne    c001459c <InterruptController::clearAllHandlers(int, bool)+0x12>
c001460e:	83 fe 0f             	cmp    esi,0xf
c0014611:	7f 09                	jg     c001461c <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014613:	0f b6 b6 60 d8 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd27a0]
c001461a:	eb 80                	jmp    c001459c <InterruptController::clearAllHandlers(int, bool)+0x12>
c001461c:	83 ec 0c             	sub    esp,0xc
c001461f:	68 3c b4 02 c0       	push   0xc002b43c
c0014624:	e8 36 5d 00 00       	call   c001a35f <Krnl::panic(char const*)>
c0014629:	83 c4 10             	add    esp,0x10
c001462c:	e9 6b ff ff ff       	jmp    c001459c <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014631:	90                   	nop

c0014632 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014632:	56                   	push   esi
c0014633:	53                   	push   ebx
c0014634:	52                   	push   edx
c0014635:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014639:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001463d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014642:	75 3a                	jne    c001467e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014644:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014648:	8d 50 20             	lea    edx,[eax+0x20]
c001464b:	c1 e2 04             	shl    edx,0x4
c001464e:	8d 04 16             	lea    eax,[esi+edx*1]
c0014651:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014655:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c001465b:	74 0b                	je     c0014668 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c001465d:	83 c0 04             	add    eax,0x4
c0014660:	39 d0                	cmp    eax,edx
c0014662:	75 f1                	jne    c0014655 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014664:	58                   	pop    eax
c0014665:	5b                   	pop    ebx
c0014666:	5e                   	pop    esi
c0014667:	c3                   	ret    
c0014668:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014672:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001467c:	eb df                	jmp    c001465d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001467e:	83 ec 0c             	sub    esp,0xc
c0014681:	56                   	push   esi
c0014682:	e8 73 fa ff ff       	call   c00140fa <Device::getName()>
c0014687:	83 c4 10             	add    esp,0x10
c001468a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001468d:	75 b5                	jne    c0014644 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001468f:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014694:	7f 11                	jg     c00146a7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014696:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001469a:	0f b6 80 60 d8 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd27a0]
c00146a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00146a5:	eb 9d                	jmp    c0014644 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00146a7:	83 ec 0c             	sub    esp,0xc
c00146aa:	68 49 b4 02 c0       	push   0xc002b449
c00146af:	e8 ab 5c 00 00       	call   c001a35f <Krnl::panic(char const*)>
c00146b4:	83 c4 10             	add    esp,0x10
c00146b7:	eb 8b                	jmp    c0014644 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00146b9 <nmiHandler(regs*, void*)>:
c00146b9:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00146be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00146c2:	e9 05 a9 ff ff       	jmp    c000efcc <Computer::handleNMI()>

c00146c7 <int_handler>:
c00146c7:	55                   	push   ebp
c00146c8:	57                   	push   edi
c00146c9:	56                   	push   esi
c00146ca:	53                   	push   ebx
c00146cb:	83 ec 0c             	sub    esp,0xc
c00146ce:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00146d2:	80 3d 24 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f124,0x0
c00146d9:	74 0b                	je     c00146e6 <int_handler+0x1f>
c00146db:	fa                   	cli    
c00146dc:	f4                   	hlt    
c00146dd:	80 3d 24 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f124,0x0
c00146e4:	75 f5                	jne    c00146db <int_handler+0x14>
c00146e6:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00146eb:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00146ee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00146f4:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c00146fa:	8d 43 e0             	lea    eax,[ebx-0x20]
c00146fd:	83 f8 17             	cmp    eax,0x17
c0014700:	77 13                	ja     c0014715 <int_handler+0x4e>
c0014702:	83 ec 08             	sub    esp,0x8
c0014705:	8b 17                	mov    edx,DWORD PTR [edi]
c0014707:	8d 43 e0             	lea    eax,[ebx-0x20]
c001470a:	0f b6 c0             	movzx  eax,al
c001470d:	50                   	push   eax
c001470e:	57                   	push   edi
c001470f:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014712:	83 c4 10             	add    esp,0x10
c0014715:	83 c3 15             	add    ebx,0x15
c0014718:	c1 e3 04             	shl    ebx,0x4
c001471b:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c001471f:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014726:	31 db                	xor    ebx,ebx
c0014728:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001472c:	85 c0                	test   eax,eax
c001472e:	74 13                	je     c0014743 <int_handler+0x7c>
c0014730:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014733:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014737:	74 1c                	je     c0014755 <int_handler+0x8e>
c0014739:	83 ec 08             	sub    esp,0x8
c001473c:	52                   	push   edx
c001473d:	56                   	push   esi
c001473e:	ff d0                	call   eax
c0014740:	83 c4 10             	add    esp,0x10
c0014743:	43                   	inc    ebx
c0014744:	83 fb 04             	cmp    ebx,0x4
c0014747:	75 df                	jne    c0014728 <int_handler+0x61>
c0014749:	83 c4 0c             	add    esp,0xc
c001474c:	31 c0                	xor    eax,eax
c001474e:	5b                   	pop    ebx
c001474f:	31 d2                	xor    edx,edx
c0014751:	5e                   	pop    esi
c0014752:	5f                   	pop    edi
c0014753:	5d                   	pop    ebp
c0014754:	c3                   	ret    
c0014755:	83 ec 08             	sub    esp,0x8
c0014758:	52                   	push   edx
c0014759:	56                   	push   esi
c001475a:	ff d0                	call   eax
c001475c:	83 c4 10             	add    esp,0x10
c001475f:	83 c4 0c             	add    esp,0xc
c0014762:	5b                   	pop    ebx
c0014763:	5e                   	pop    esi
c0014764:	5f                   	pop    edi
c0014765:	5d                   	pop    ebp
c0014766:	c3                   	ret    
c0014767:	90                   	nop

c0014768 <InterruptController::InterruptController(char const*)>:
c0014768:	83 ec 1c             	sub    esp,0x1c
c001476b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001476f:	83 ec 08             	sub    esp,0x8
c0014772:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014776:	50                   	push   eax
c0014777:	e8 82 f8 ff ff       	call   c0013ffe <Device::Device(char const*)>
c001477c:	83 c4 10             	add    esp,0x10
c001477f:	ba 10 b7 02 c0       	mov    edx,0xc002b710
c0014784:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014788:	89 10                	mov    DWORD PTR [eax],edx
c001478a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001478e:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014798:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00147a0:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00147a8:	7f 5e                	jg     c0014808 <InterruptController::InterruptController(char const*)+0xa0>
c00147aa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00147b2:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00147b7:	7f 49                	jg     c0014802 <InterruptController::InterruptController(char const*)+0x9a>
c00147b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00147bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00147c1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00147c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00147cc:	01 ca                	add    edx,ecx
c00147ce:	83 c2 54             	add    edx,0x54
c00147d1:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00147d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00147dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00147e1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00147e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00147ec:	01 ca                	add    edx,ecx
c00147ee:	81 c2 54 04 00 00    	add    edx,0x454
c00147f4:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00147fc:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014800:	eb b0                	jmp    c00147b2 <InterruptController::InterruptController(char const*)+0x4a>
c0014802:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014806:	eb 98                	jmp    c00147a0 <InterruptController::InterruptController(char const*)+0x38>
c0014808:	90                   	nop
c0014809:	83 c4 1c             	add    esp,0x1c
c001480c:	c3                   	ret    
c001480d:	90                   	nop

c001480e <InterruptController::~InterruptController()>:
c001480e:	83 ec 0c             	sub    esp,0xc
c0014811:	ba 10 b7 02 c0       	mov    edx,0xc002b710
c0014816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001481a:	89 10                	mov    DWORD PTR [eax],edx
c001481c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014820:	83 ec 0c             	sub    esp,0xc
c0014823:	50                   	push   eax
c0014824:	e8 9f f4 ff ff       	call   c0013cc8 <Device::~Device()>
c0014829:	83 c4 10             	add    esp,0x10
c001482c:	90                   	nop
c001482d:	83 c4 0c             	add    esp,0xc
c0014830:	c3                   	ret    
c0014831:	90                   	nop

c0014832 <InterruptController::~InterruptController()>:
c0014832:	83 ec 0c             	sub    esp,0xc
c0014835:	83 ec 0c             	sub    esp,0xc
c0014838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001483c:	e8 cd ff ff ff       	call   c001480e <InterruptController::~InterruptController()>
c0014841:	83 c4 10             	add    esp,0x10
c0014844:	83 ec 08             	sub    esp,0x8
c0014847:	68 58 21 00 00       	push   0x2158
c001484c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014850:	e8 94 e0 ff ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c0014855:	83 c4 10             	add    esp,0x10
c0014858:	83 c4 0c             	add    esp,0xc
c001485b:	c3                   	ret    

c001485c <displayDebugInfo(regs*)>:
c001485c:	55                   	push   ebp
c001485d:	57                   	push   edi
c001485e:	56                   	push   esi
c001485f:	53                   	push   ebx
c0014860:	83 ec 24             	sub    esp,0x24
c0014863:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014867:	0f 20 c2             	mov    edx,cr0
c001486a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001486e:	0f 20 d7             	mov    edi,cr2
c0014871:	0f 20 de             	mov    esi,cr3
c0014874:	0f 20 e5             	mov    ebp,cr4
c0014877:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001487a:	68 56 b4 02 c0       	push   0xc002b456
c001487f:	e8 3d e1 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0014884:	59                   	pop    ecx
c0014885:	58                   	pop    eax
c0014886:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014889:	68 61 b4 02 c0       	push   0xc002b461
c001488e:	e8 2e e1 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0014893:	58                   	pop    eax
c0014894:	5a                   	pop    edx
c0014895:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014898:	68 6c b4 02 c0       	push   0xc002b46c
c001489d:	e8 1f e1 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c00148a2:	59                   	pop    ecx
c00148a3:	58                   	pop    eax
c00148a4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00148a7:	68 77 b4 02 c0       	push   0xc002b477
c00148ac:	e8 10 e1 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c00148b1:	58                   	pop    eax
c00148b2:	5a                   	pop    edx
c00148b3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00148b6:	68 82 b4 02 c0       	push   0xc002b482
c00148bb:	e8 01 e1 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c00148c0:	59                   	pop    ecx
c00148c1:	58                   	pop    eax
c00148c2:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00148c5:	68 8d b4 02 c0       	push   0xc002b48d
c00148ca:	e8 f2 e0 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c00148cf:	58                   	pop    eax
c00148d0:	5a                   	pop    edx
c00148d1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00148d4:	68 98 b4 02 c0       	push   0xc002b498
c00148d9:	e8 e3 e0 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c00148de:	59                   	pop    ecx
c00148df:	58                   	pop    eax
c00148e0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00148e3:	68 a3 b4 02 c0       	push   0xc002b4a3
c00148e8:	e8 d4 e0 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c00148ed:	58                   	pop    eax
c00148ee:	5a                   	pop    edx
c00148ef:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00148f2:	68 ae b4 02 c0       	push   0xc002b4ae
c00148f7:	e8 c5 e0 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c00148fc:	59                   	pop    ecx
c00148fd:	58                   	pop    eax
c00148fe:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014901:	68 bd b4 02 c0       	push   0xc002b4bd
c0014906:	e8 b6 e0 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001490b:	58                   	pop    eax
c001490c:	5a                   	pop    edx
c001490d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014910:	68 c8 b4 02 c0       	push   0xc002b4c8
c0014915:	e8 a7 e0 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001491a:	59                   	pop    ecx
c001491b:	58                   	pop    eax
c001491c:	57                   	push   edi
c001491d:	68 d3 b4 02 c0       	push   0xc002b4d3
c0014922:	e8 9a e0 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0014927:	58                   	pop    eax
c0014928:	5a                   	pop    edx
c0014929:	56                   	push   esi
c001492a:	68 de b4 02 c0       	push   0xc002b4de
c001492f:	e8 8d e0 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0014934:	59                   	pop    ecx
c0014935:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001493a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014940:	e8 de bd ff ff       	call   c0010723 <setActiveTerminal(VgaText*)>
c0014945:	58                   	pop    eax
c0014946:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014949:	5a                   	pop    edx
c001494a:	c1 e0 05             	shl    eax,0x5
c001494d:	05 c0 d5 02 c0       	add    eax,0xc002d5c0
c0014952:	50                   	push   eax
c0014953:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014958:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001495e:	e8 cd c2 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c0014963:	59                   	pop    ecx
c0014964:	58                   	pop    eax
c0014965:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001496a:	68 e9 b4 02 c0       	push   0xc002b4e9
c001496f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014975:	e8 b6 c2 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c001497a:	58                   	pop    eax
c001497b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014980:	5a                   	pop    edx
c0014981:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014984:	83 c0 0c             	add    eax,0xc
c0014987:	50                   	push   eax
c0014988:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001498d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014993:	e8 98 c2 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c0014998:	59                   	pop    ecx
c0014999:	58                   	pop    eax
c001499a:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001499f:	68 f2 b4 02 c0       	push   0xc002b4f2
c00149a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149aa:	e8 81 c2 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c00149af:	58                   	pop    eax
c00149b0:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c00149b5:	5a                   	pop    edx
c00149b6:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00149b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149bf:	e8 26 c2 ff ff       	call   c0010bea <VgaText::putx(unsigned int)>
c00149c4:	59                   	pop    ecx
c00149c5:	58                   	pop    eax
c00149c6:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c00149cb:	68 fa b4 02 c0       	push   0xc002b4fa
c00149d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149d6:	e8 55 c2 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c00149db:	58                   	pop    eax
c00149dc:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c00149e1:	5a                   	pop    edx
c00149e2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00149e5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149eb:	e8 fa c1 ff ff       	call   c0010bea <VgaText::putx(unsigned int)>
c00149f0:	59                   	pop    ecx
c00149f1:	58                   	pop    eax
c00149f2:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c00149f7:	68 02 b5 02 c0       	push   0xc002b502
c00149fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a02:	e8 29 c2 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c0014a07:	58                   	pop    eax
c0014a08:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014a0d:	5a                   	pop    edx
c0014a0e:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014a11:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a17:	e8 ce c1 ff ff       	call   c0010bea <VgaText::putx(unsigned int)>
c0014a1c:	59                   	pop    ecx
c0014a1d:	58                   	pop    eax
c0014a1e:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014a23:	68 0a b5 02 c0       	push   0xc002b50a
c0014a28:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a2e:	e8 fd c1 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c0014a33:	58                   	pop    eax
c0014a34:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014a39:	5a                   	pop    edx
c0014a3a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014a3d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a43:	e8 a2 c1 ff ff       	call   c0010bea <VgaText::putx(unsigned int)>
c0014a48:	59                   	pop    ecx
c0014a49:	58                   	pop    eax
c0014a4a:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014a4f:	68 12 b5 02 c0       	push   0xc002b512
c0014a54:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a5a:	e8 d1 c1 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c0014a5f:	58                   	pop    eax
c0014a60:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014a65:	5a                   	pop    edx
c0014a66:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014a69:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a6f:	e8 76 c1 ff ff       	call   c0010bea <VgaText::putx(unsigned int)>
c0014a74:	59                   	pop    ecx
c0014a75:	58                   	pop    eax
c0014a76:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014a7b:	68 1a b5 02 c0       	push   0xc002b51a
c0014a80:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a86:	e8 a5 c1 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c0014a8b:	58                   	pop    eax
c0014a8c:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014a91:	5a                   	pop    edx
c0014a92:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014a95:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a9b:	e8 4a c1 ff ff       	call   c0010bea <VgaText::putx(unsigned int)>
c0014aa0:	59                   	pop    ecx
c0014aa1:	58                   	pop    eax
c0014aa2:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014aa7:	68 22 b5 02 c0       	push   0xc002b522
c0014aac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ab2:	e8 79 c1 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c0014ab7:	58                   	pop    eax
c0014ab8:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014abd:	5a                   	pop    edx
c0014abe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014ac2:	52                   	push   edx
c0014ac3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ac9:	e8 1c c1 ff ff       	call   c0010bea <VgaText::putx(unsigned int)>
c0014ace:	59                   	pop    ecx
c0014acf:	58                   	pop    eax
c0014ad0:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014ad5:	68 2b b5 02 c0       	push   0xc002b52b
c0014ada:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ae0:	e8 4b c1 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c0014ae5:	58                   	pop    eax
c0014ae6:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014aeb:	5a                   	pop    edx
c0014aec:	57                   	push   edi
c0014aed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014af3:	e8 f2 c0 ff ff       	call   c0010bea <VgaText::putx(unsigned int)>
c0014af8:	59                   	pop    ecx
c0014af9:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014afe:	5f                   	pop    edi
c0014aff:	68 33 b5 02 c0       	push   0xc002b533
c0014b04:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b0a:	e8 21 c1 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c0014b0f:	58                   	pop    eax
c0014b10:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014b15:	5a                   	pop    edx
c0014b16:	56                   	push   esi
c0014b17:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b1d:	e8 c8 c0 ff ff       	call   c0010bea <VgaText::putx(unsigned int)>
c0014b22:	59                   	pop    ecx
c0014b23:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014b28:	5e                   	pop    esi
c0014b29:	68 3b b5 02 c0       	push   0xc002b53b
c0014b2e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b34:	e8 f7 c0 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c0014b39:	5f                   	pop    edi
c0014b3a:	58                   	pop    eax
c0014b3b:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014b40:	55                   	push   ebp
c0014b41:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b47:	e8 9e c0 ff ff       	call   c0010bea <VgaText::putx(unsigned int)>
c0014b4c:	58                   	pop    eax
c0014b4d:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014b52:	5a                   	pop    edx
c0014b53:	68 43 b5 02 c0       	push   0xc002b543
c0014b58:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b5e:	e8 cd c0 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c0014b63:	0f 21 c0             	mov    eax,db0
c0014b66:	59                   	pop    ecx
c0014b67:	5e                   	pop    esi
c0014b68:	50                   	push   eax
c0014b69:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014b6e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b74:	e8 71 c0 ff ff       	call   c0010bea <VgaText::putx(unsigned int)>
c0014b79:	5f                   	pop    edi
c0014b7a:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014b7f:	5d                   	pop    ebp
c0014b80:	68 4c b5 02 c0       	push   0xc002b54c
c0014b85:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b8b:	e8 a0 c0 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c0014b90:	0f 21 c8             	mov    eax,db1
c0014b93:	5a                   	pop    edx
c0014b94:	59                   	pop    ecx
c0014b95:	50                   	push   eax
c0014b96:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014b9b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ba1:	e8 44 c0 ff ff       	call   c0010bea <VgaText::putx(unsigned int)>
c0014ba6:	5e                   	pop    esi
c0014ba7:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014bac:	5f                   	pop    edi
c0014bad:	68 54 b5 02 c0       	push   0xc002b554
c0014bb2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bb8:	e8 73 c0 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c0014bbd:	0f 21 d0             	mov    eax,db2
c0014bc0:	5d                   	pop    ebp
c0014bc1:	5a                   	pop    edx
c0014bc2:	50                   	push   eax
c0014bc3:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014bc8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bce:	e8 17 c0 ff ff       	call   c0010bea <VgaText::putx(unsigned int)>
c0014bd3:	59                   	pop    ecx
c0014bd4:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014bd9:	5e                   	pop    esi
c0014bda:	68 5c b5 02 c0       	push   0xc002b55c
c0014bdf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014be5:	e8 46 c0 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c0014bea:	0f 21 d8             	mov    eax,db3
c0014bed:	5f                   	pop    edi
c0014bee:	5d                   	pop    ebp
c0014bef:	50                   	push   eax
c0014bf0:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014bf5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bfb:	e8 ea bf ff ff       	call   c0010bea <VgaText::putx(unsigned int)>
c0014c00:	58                   	pop    eax
c0014c01:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014c06:	5a                   	pop    edx
c0014c07:	68 64 b5 02 c0       	push   0xc002b564
c0014c0c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c12:	e8 19 c0 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c0014c17:	0f 21 f0             	mov    eax,db6
c0014c1a:	59                   	pop    ecx
c0014c1b:	5e                   	pop    esi
c0014c1c:	50                   	push   eax
c0014c1d:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014c22:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c28:	e8 bd bf ff ff       	call   c0010bea <VgaText::putx(unsigned int)>
c0014c2d:	5f                   	pop    edi
c0014c2e:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014c33:	5d                   	pop    ebp
c0014c34:	68 6c b5 02 c0       	push   0xc002b56c
c0014c39:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c3f:	e8 ec bf ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c0014c44:	0f 21 f8             	mov    eax,db7
c0014c47:	5a                   	pop    edx
c0014c48:	59                   	pop    ecx
c0014c49:	50                   	push   eax
c0014c4a:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014c4f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c55:	e8 90 bf ff ff       	call   c0010bea <VgaText::putx(unsigned int)>
c0014c5a:	5e                   	pop    esi
c0014c5b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014c5e:	e8 78 88 00 00       	call   c001d4db <Thr::getDriverNameFromAddress(unsigned long)>
c0014c63:	83 c4 10             	add    esp,0x10
c0014c66:	85 c0                	test   eax,eax
c0014c68:	74 7d                	je     c0014ce7 <displayDebugInfo(regs*)+0x48b>
c0014c6a:	89 c6                	mov    esi,eax
c0014c6c:	50                   	push   eax
c0014c6d:	50                   	push   eax
c0014c6e:	56                   	push   esi
c0014c6f:	68 74 b5 02 c0       	push   0xc002b574
c0014c74:	e8 48 dd ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0014c79:	5a                   	pop    edx
c0014c7a:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014c7f:	59                   	pop    ecx
c0014c80:	68 82 b5 02 c0       	push   0xc002b582
c0014c85:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c8b:	e8 a0 bf ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c0014c90:	5f                   	pop    edi
c0014c91:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014c96:	5d                   	pop    ebp
c0014c97:	56                   	push   esi
c0014c98:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c9e:	e8 8d bf ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c0014ca3:	58                   	pop    eax
c0014ca4:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014ca9:	5a                   	pop    edx
c0014caa:	68 8e b5 02 c0       	push   0xc002b58e
c0014caf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cb5:	e8 76 bf ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c0014cba:	59                   	pop    ecx
c0014cbb:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0014cc0:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014cc6:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014cc9:	e8 44 88 00 00       	call   c001d512 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014cce:	5b                   	pop    ebx
c0014ccf:	5d                   	pop    ebp
c0014cd0:	50                   	push   eax
c0014cd1:	57                   	push   edi
c0014cd2:	e8 13 bf ff ff       	call   c0010bea <VgaText::putx(unsigned int)>
c0014cd7:	58                   	pop    eax
c0014cd8:	5a                   	pop    edx
c0014cd9:	56                   	push   esi
c0014cda:	68 9a b5 02 c0       	push   0xc002b59a
c0014cdf:	e8 dd dc ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0014ce4:	83 c4 10             	add    esp,0x10
c0014ce7:	fa                   	cli    
c0014ce8:	f4                   	hlt    
c0014ce9:	eb fe                	jmp    c0014ce9 <displayDebugInfo(regs*)+0x48d>

c0014ceb <x87EmulHandler(regs*, void*)>:
c0014ceb:	83 ec 0c             	sub    esp,0xc
c0014cee:	0f 20 c2             	mov    edx,cr0
c0014cf1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014cf6:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014cfa:	75 4b                	jne    c0014d47 <x87EmulHandler(regs*, void*)+0x5c>
c0014cfc:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0014d01:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014d07:	85 c0                	test   eax,eax
c0014d09:	74 05                	je     c0014d10 <x87EmulHandler(regs*, void*)+0x25>
c0014d0b:	83 e2 08             	and    edx,0x8
c0014d0e:	75 17                	jne    c0014d27 <x87EmulHandler(regs*, void*)+0x3c>
c0014d10:	83 ec 0c             	sub    esp,0xc
c0014d13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d17:	e8 a5 ab 00 00       	call   c001f8c1 <Vm::x87Handler(regs*)>
c0014d1c:	83 c4 10             	add    esp,0x10
c0014d1f:	84 c0                	test   al,al
c0014d21:	74 24                	je     c0014d47 <x87EmulHandler(regs*, void*)+0x5c>
c0014d23:	83 c4 0c             	add    esp,0xc
c0014d26:	c3                   	ret    
c0014d27:	83 ec 0c             	sub    esp,0xc
c0014d2a:	68 c0 b5 02 c0       	push   0xc002b5c0
c0014d2f:	e8 8d dc ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0014d34:	0f 06                	clts   
c0014d36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d3b:	83 c4 10             	add    esp,0x10
c0014d3e:	a3 88 e7 02 c0       	mov    ds:0xc002e788,eax
c0014d43:	83 c4 0c             	add    esp,0xc
c0014d46:	c3                   	ret    
c0014d47:	83 ec 0c             	sub    esp,0xc
c0014d4a:	68 aa b5 02 c0       	push   0xc002b5aa
c0014d4f:	e8 6d dc ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0014d54:	5a                   	pop    edx
c0014d55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d59:	e8 fe fa ff ff       	call   c001485c <displayDebugInfo(regs*)>

c0014d5e <gpFault(regs*, void*)>:
c0014d5e:	53                   	push   ebx
c0014d5f:	83 ec 14             	sub    esp,0x14
c0014d62:	c7 05 84 e7 02 c0 9a ed 01 c0 	mov    DWORD PTR ds:0xc002e784,0xc001ed9a
c0014d6c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014d70:	53                   	push   ebx
c0014d71:	e8 24 a0 00 00       	call   c001ed9a <Vm::faultHandler(regs*)>
c0014d76:	83 c4 10             	add    esp,0x10
c0014d79:	84 c0                	test   al,al
c0014d7b:	74 05                	je     c0014d82 <gpFault(regs*, void*)+0x24>
c0014d7d:	83 c4 08             	add    esp,0x8
c0014d80:	5b                   	pop    ebx
c0014d81:	c3                   	ret    
c0014d82:	83 ec 0c             	sub    esp,0xc
c0014d85:	68 cd b5 02 c0       	push   0xc002b5cd
c0014d8a:	e8 32 dc ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0014d8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d92:	e8 c5 fa ff ff       	call   c001485c <displayDebugInfo(regs*)>

c0014d97 <pgFault(regs*, void*)>:
c0014d97:	53                   	push   ebx
c0014d98:	83 ec 10             	sub    esp,0x10
c0014d9b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014d9f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014da2:	68 e8 b5 02 c0       	push   0xc002b5e8
c0014da7:	e8 15 dc ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0014dac:	0f 20 d0             	mov    eax,cr2
c0014daf:	5a                   	pop    edx
c0014db0:	59                   	pop    ecx
c0014db1:	50                   	push   eax
c0014db2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014db7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014dba:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0014dc0:	e8 03 d7 ff ff       	call   c00124c8 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014dc5:	83 c4 10             	add    esp,0x10
c0014dc8:	84 c0                	test   al,al
c0014dca:	74 05                	je     c0014dd1 <pgFault(regs*, void*)+0x3a>
c0014dcc:	83 c4 08             	add    esp,0x8
c0014dcf:	5b                   	pop    ebx
c0014dd0:	c3                   	ret    
c0014dd1:	83 ec 0c             	sub    esp,0xc
c0014dd4:	68 fd b5 02 c0       	push   0xc002b5fd
c0014dd9:	e8 e3 db ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0014dde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014de1:	e8 76 fa ff ff       	call   c001485c <displayDebugInfo(regs*)>

c0014de6 <otherISRHandler(regs*, void*)>:
c0014de6:	53                   	push   ebx
c0014de7:	83 ec 0c             	sub    esp,0xc
c0014dea:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014dee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014df1:	50                   	push   eax
c0014df2:	50                   	push   eax
c0014df3:	68 0a b6 02 c0       	push   0xc002b60a
c0014df8:	e8 c4 db ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0014dfd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e00:	e8 57 fa ff ff       	call   c001485c <displayDebugInfo(regs*)>

c0014e05 <opcodeFault(regs*, void*)>:
c0014e05:	55                   	push   ebp
c0014e06:	89 e5                	mov    ebp,esp
c0014e08:	56                   	push   esi
c0014e09:	53                   	push   ebx
c0014e0a:	83 ec 40             	sub    esp,0x40
c0014e0d:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0014e12:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014e18:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014e1e:	84 c0                	test   al,al
c0014e20:	74 24                	je     c0014e46 <opcodeFault(regs*, void*)+0x41>
c0014e22:	83 ec 0c             	sub    esp,0xc
c0014e25:	68 28 b6 02 c0       	push   0xc002b628
c0014e2a:	e8 92 db ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0014e2f:	83 c4 10             	add    esp,0x10
c0014e32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e35:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e38:	8d 50 19             	lea    edx,[eax+0x19]
c0014e3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e3e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e41:	e9 d5 05 00 00       	jmp    c001541b <opcodeFault(regs*, void*)+0x616>
c0014e46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e49:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e4c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014e4f:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014e53:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014e57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e5a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e5d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014e60:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e63:	8a 00                	mov    al,BYTE PTR [eax]
c0014e65:	3c f0                	cmp    al,0xf0
c0014e67:	75 17                	jne    c0014e80 <opcodeFault(regs*, void*)+0x7b>
c0014e69:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e6f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e72:	8d 50 01             	lea    edx,[eax+0x1]
c0014e75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e78:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e7b:	e9 da 00 00 00       	jmp    c0014f5a <opcodeFault(regs*, void*)+0x155>
c0014e80:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e83:	8a 00                	mov    al,BYTE PTR [eax]
c0014e85:	3c f2                	cmp    al,0xf2
c0014e87:	74 09                	je     c0014e92 <opcodeFault(regs*, void*)+0x8d>
c0014e89:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e8c:	8a 00                	mov    al,BYTE PTR [eax]
c0014e8e:	3c f3                	cmp    al,0xf3
c0014e90:	75 1b                	jne    c0014ead <opcodeFault(regs*, void*)+0xa8>
c0014e92:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014e96:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e9c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e9f:	8d 50 01             	lea    edx,[eax+0x1]
c0014ea2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ea8:	e9 ad 00 00 00       	jmp    c0014f5a <opcodeFault(regs*, void*)+0x155>
c0014ead:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eb0:	8a 00                	mov    al,BYTE PTR [eax]
c0014eb2:	3c 66                	cmp    al,0x66
c0014eb4:	75 1f                	jne    c0014ed5 <opcodeFault(regs*, void*)+0xd0>
c0014eb6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014eba:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014ebe:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ec1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ec7:	8d 50 01             	lea    edx,[eax+0x1]
c0014eca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ecd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ed0:	e9 85 00 00 00       	jmp    c0014f5a <opcodeFault(regs*, void*)+0x155>
c0014ed5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ed8:	8a 00                	mov    al,BYTE PTR [eax]
c0014eda:	3c 67                	cmp    al,0x67
c0014edc:	75 18                	jne    c0014ef6 <opcodeFault(regs*, void*)+0xf1>
c0014ede:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ee2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ee5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014eeb:	8d 50 01             	lea    edx,[eax+0x1]
c0014eee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ef4:	eb 64                	jmp    c0014f5a <opcodeFault(regs*, void*)+0x155>
c0014ef6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ef9:	8a 00                	mov    al,BYTE PTR [eax]
c0014efb:	3c 2e                	cmp    al,0x2e
c0014efd:	74 09                	je     c0014f08 <opcodeFault(regs*, void*)+0x103>
c0014eff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f02:	8a 00                	mov    al,BYTE PTR [eax]
c0014f04:	3c 3e                	cmp    al,0x3e
c0014f06:	75 18                	jne    c0014f20 <opcodeFault(regs*, void*)+0x11b>
c0014f08:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f0c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f12:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f15:	8d 50 01             	lea    edx,[eax+0x1]
c0014f18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f1b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f1e:	eb 3a                	jmp    c0014f5a <opcodeFault(regs*, void*)+0x155>
c0014f20:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f23:	8a 00                	mov    al,BYTE PTR [eax]
c0014f25:	3c 36                	cmp    al,0x36
c0014f27:	74 1b                	je     c0014f44 <opcodeFault(regs*, void*)+0x13f>
c0014f29:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f2c:	8a 00                	mov    al,BYTE PTR [eax]
c0014f2e:	3c 26                	cmp    al,0x26
c0014f30:	74 12                	je     c0014f44 <opcodeFault(regs*, void*)+0x13f>
c0014f32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f35:	8a 00                	mov    al,BYTE PTR [eax]
c0014f37:	3c 64                	cmp    al,0x64
c0014f39:	74 09                	je     c0014f44 <opcodeFault(regs*, void*)+0x13f>
c0014f3b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f3e:	8a 00                	mov    al,BYTE PTR [eax]
c0014f40:	3c 65                	cmp    al,0x65
c0014f42:	75 16                	jne    c0014f5a <opcodeFault(regs*, void*)+0x155>
c0014f44:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f48:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f4e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f51:	8d 50 01             	lea    edx,[eax+0x1]
c0014f54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f57:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f5d:	8a 00                	mov    al,BYTE PTR [eax]
c0014f5f:	3c 0f                	cmp    al,0xf
c0014f61:	0f 85 ad 00 00 00    	jne    c0015014 <opcodeFault(regs*, void*)+0x20f>
c0014f67:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f6a:	40                   	inc    eax
c0014f6b:	8a 00                	mov    al,BYTE PTR [eax]
c0014f6d:	3c c2                	cmp    al,0xc2
c0014f6f:	74 0e                	je     c0014f7f <opcodeFault(regs*, void*)+0x17a>
c0014f71:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f74:	40                   	inc    eax
c0014f75:	8a 00                	mov    al,BYTE PTR [eax]
c0014f77:	3c c3                	cmp    al,0xc3
c0014f79:	0f 85 95 00 00 00    	jne    c0015014 <opcodeFault(regs*, void*)+0x20f>
c0014f7f:	83 ec 0c             	sub    esp,0xc
c0014f82:	68 4b b6 02 c0       	push   0xc002b64b
c0014f87:	e8 35 da ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0014f8c:	83 c4 10             	add    esp,0x10
c0014f8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f92:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f95:	8d 50 01             	lea    edx,[eax+0x1]
c0014f98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f9b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f9e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014fa1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fa4:	8a 00                	mov    al,BYTE PTR [eax]
c0014fa6:	8d 50 fe             	lea    edx,[eax-0x2]
c0014fa9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fac:	88 10                	mov    BYTE PTR [eax],dl
c0014fae:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014fb1:	50                   	push   eax
c0014fb2:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014fb5:	50                   	push   eax
c0014fb6:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014fb9:	50                   	push   eax
c0014fba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014fbd:	e8 b6 4a 00 00       	call   c0019a78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014fc2:	83 c4 10             	add    esp,0x10
c0014fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fcb:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014fce:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014fd1:	01 d0                	add    eax,edx
c0014fd3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014fd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fdc:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014fdf:	48                   	dec    eax
c0014fe0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014fe3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014fe9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fef:	83 ec 04             	sub    esp,0x4
c0014ff2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014ff5:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014ff8:	50                   	push   eax
c0014ff9:	e8 b6 b1 fe ff       	call   c00001b4 <voodooXADD>
c0014ffe:	83 c4 10             	add    esp,0x10
c0015001:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015004:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015007:	01 c2                	add    edx,eax
c0015009:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001500c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001500f:	e9 07 04 00 00       	jmp    c001541b <opcodeFault(regs*, void*)+0x616>
c0015014:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015017:	8a 00                	mov    al,BYTE PTR [eax]
c0015019:	3c 0f                	cmp    al,0xf
c001501b:	0f 85 8b 01 00 00    	jne    c00151ac <opcodeFault(regs*, void*)+0x3a7>
c0015021:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015024:	40                   	inc    eax
c0015025:	8a 00                	mov    al,BYTE PTR [eax]
c0015027:	3c c7                	cmp    al,0xc7
c0015029:	0f 86 7d 01 00 00    	jbe    c00151ac <opcodeFault(regs*, void*)+0x3a7>
c001502f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015032:	40                   	inc    eax
c0015033:	8a 00                	mov    al,BYTE PTR [eax]
c0015035:	3c cf                	cmp    al,0xcf
c0015037:	0f 87 6f 01 00 00    	ja     c00151ac <opcodeFault(regs*, void*)+0x3a7>
c001503d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015040:	40                   	inc    eax
c0015041:	8a 00                	mov    al,BYTE PTR [eax]
c0015043:	83 c0 38             	add    eax,0x38
c0015046:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015049:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001504d:	75 0b                	jne    c001505a <opcodeFault(regs*, void*)+0x255>
c001504f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015052:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015055:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015058:	eb 75                	jmp    c00150cf <opcodeFault(regs*, void*)+0x2ca>
c001505a:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001505e:	75 0b                	jne    c001506b <opcodeFault(regs*, void*)+0x266>
c0015060:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015063:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015066:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015069:	eb 64                	jmp    c00150cf <opcodeFault(regs*, void*)+0x2ca>
c001506b:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001506f:	75 0b                	jne    c001507c <opcodeFault(regs*, void*)+0x277>
c0015071:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015074:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015077:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001507a:	eb 53                	jmp    c00150cf <opcodeFault(regs*, void*)+0x2ca>
c001507c:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015080:	75 0b                	jne    c001508d <opcodeFault(regs*, void*)+0x288>
c0015082:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015085:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015088:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001508b:	eb 42                	jmp    c00150cf <opcodeFault(regs*, void*)+0x2ca>
c001508d:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015091:	75 0b                	jne    c001509e <opcodeFault(regs*, void*)+0x299>
c0015093:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015096:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015099:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001509c:	eb 31                	jmp    c00150cf <opcodeFault(regs*, void*)+0x2ca>
c001509e:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00150a2:	75 0b                	jne    c00150af <opcodeFault(regs*, void*)+0x2aa>
c00150a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a7:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00150aa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00150ad:	eb 20                	jmp    c00150cf <opcodeFault(regs*, void*)+0x2ca>
c00150af:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00150b3:	75 0b                	jne    c00150c0 <opcodeFault(regs*, void*)+0x2bb>
c00150b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00150bb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00150be:	eb 0f                	jmp    c00150cf <opcodeFault(regs*, void*)+0x2ca>
c00150c0:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00150c4:	75 09                	jne    c00150cf <opcodeFault(regs*, void*)+0x2ca>
c00150c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150c9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00150cc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00150cf:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00150d3:	74 10                	je     c00150e5 <opcodeFault(regs*, void*)+0x2e0>
c00150d5:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00150dc:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00150e3:	eb 2d                	jmp    c0015112 <opcodeFault(regs*, void*)+0x30d>
c00150e5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00150e8:	c1 e0 18             	shl    eax,0x18
c00150eb:	89 c2                	mov    edx,eax
c00150ed:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00150f0:	c1 e0 08             	shl    eax,0x8
c00150f3:	25 00 00 ff 00       	and    eax,0xff0000
c00150f8:	09 c2                	or     edx,eax
c00150fa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00150fd:	c1 e8 08             	shr    eax,0x8
c0015100:	25 00 ff 00 00       	and    eax,0xff00
c0015105:	09 c2                	or     edx,eax
c0015107:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001510a:	c1 e8 18             	shr    eax,0x18
c001510d:	09 d0                	or     eax,edx
c001510f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015112:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015116:	75 0b                	jne    c0015123 <opcodeFault(regs*, void*)+0x31e>
c0015118:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001511b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001511e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015121:	eb 75                	jmp    c0015198 <opcodeFault(regs*, void*)+0x393>
c0015123:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015127:	75 0b                	jne    c0015134 <opcodeFault(regs*, void*)+0x32f>
c0015129:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001512c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001512f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015132:	eb 64                	jmp    c0015198 <opcodeFault(regs*, void*)+0x393>
c0015134:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015138:	75 0b                	jne    c0015145 <opcodeFault(regs*, void*)+0x340>
c001513a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001513d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015140:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015143:	eb 53                	jmp    c0015198 <opcodeFault(regs*, void*)+0x393>
c0015145:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015149:	75 0b                	jne    c0015156 <opcodeFault(regs*, void*)+0x351>
c001514b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001514e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015151:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015154:	eb 42                	jmp    c0015198 <opcodeFault(regs*, void*)+0x393>
c0015156:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001515a:	75 0b                	jne    c0015167 <opcodeFault(regs*, void*)+0x362>
c001515c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001515f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015162:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015165:	eb 31                	jmp    c0015198 <opcodeFault(regs*, void*)+0x393>
c0015167:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001516b:	75 0b                	jne    c0015178 <opcodeFault(regs*, void*)+0x373>
c001516d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015170:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015173:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015176:	eb 20                	jmp    c0015198 <opcodeFault(regs*, void*)+0x393>
c0015178:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001517c:	75 0b                	jne    c0015189 <opcodeFault(regs*, void*)+0x384>
c001517e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015181:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015184:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015187:	eb 0f                	jmp    c0015198 <opcodeFault(regs*, void*)+0x393>
c0015189:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001518d:	75 09                	jne    c0015198 <opcodeFault(regs*, void*)+0x393>
c001518f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015192:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015198:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001519b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001519e:	8d 50 02             	lea    edx,[eax+0x2]
c00151a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00151a7:	e9 6f 02 00 00       	jmp    c001541b <opcodeFault(regs*, void*)+0x616>
c00151ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151af:	8a 00                	mov    al,BYTE PTR [eax]
c00151b1:	3c 0f                	cmp    al,0xf
c00151b3:	0f 85 8d 01 00 00    	jne    c0015346 <opcodeFault(regs*, void*)+0x541>
c00151b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151bc:	40                   	inc    eax
c00151bd:	8a 00                	mov    al,BYTE PTR [eax]
c00151bf:	3c c7                	cmp    al,0xc7
c00151c1:	0f 85 7f 01 00 00    	jne    c0015346 <opcodeFault(regs*, void*)+0x541>
c00151c7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00151ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151cd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151d0:	8d 50 01             	lea    edx,[eax+0x1]
c00151d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00151d9:	8d 45 ba             	lea    eax,[ebp-0x46]
c00151dc:	50                   	push   eax
c00151dd:	8d 45 bb             	lea    eax,[ebp-0x45]
c00151e0:	50                   	push   eax
c00151e1:	8d 45 bc             	lea    eax,[ebp-0x44]
c00151e4:	50                   	push   eax
c00151e5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00151e8:	e8 8b 48 00 00       	call   c0019a78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00151ed:	83 c4 10             	add    esp,0x10
c00151f0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00151f3:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00151f6:	83 f0 01             	xor    eax,0x1
c00151f9:	84 c0                	test   al,al
c00151fb:	0f 84 45 01 00 00    	je     c0015346 <opcodeFault(regs*, void*)+0x541>
c0015201:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015204:	3c 01                	cmp    al,0x1
c0015206:	0f 85 3a 01 00 00    	jne    c0015346 <opcodeFault(regs*, void*)+0x541>
c001520c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c001520f:	83 f0 01             	xor    eax,0x1
c0015212:	84 c0                	test   al,al
c0015214:	0f 84 2c 01 00 00    	je     c0015346 <opcodeFault(regs*, void*)+0x541>
c001521a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001521d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015220:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015223:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001522a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001522d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015230:	89 c2                	mov    edx,eax
c0015232:	b8 00 00 00 00       	mov    eax,0x0
c0015237:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001523a:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001523d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015240:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015243:	ba 00 00 00 00       	mov    edx,0x0
c0015248:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001524b:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001524e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015251:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015254:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015257:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001525e:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015261:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015264:	89 c2                	mov    edx,eax
c0015266:	b8 00 00 00 00       	mov    eax,0x0
c001526b:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001526e:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015271:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015274:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015277:	ba 00 00 00 00       	mov    edx,0x0
c001527c:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001527f:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015282:	fa                   	cli    
c0015283:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c0015288:	40                   	inc    eax
c0015289:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001528e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015291:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015294:	8b 00                	mov    eax,DWORD PTR [eax]
c0015296:	89 c1                	mov    ecx,eax
c0015298:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001529b:	89 cb                	mov    ebx,ecx
c001529d:	89 d0                	mov    eax,edx
c001529f:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00152a2:	89 c6                	mov    esi,eax
c00152a4:	89 f0                	mov    eax,esi
c00152a6:	09 d8                	or     eax,ebx
c00152a8:	85 c0                	test   eax,eax
c00152aa:	75 21                	jne    c00152cd <opcodeFault(regs*, void*)+0x4c8>
c00152ac:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00152af:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00152b2:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00152b5:	89 01                	mov    DWORD PTR [ecx],eax
c00152b7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00152ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152bd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152c0:	83 c8 40             	or     eax,0x40
c00152c3:	89 c2                	mov    edx,eax
c00152c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152c8:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00152cb:	eb 3e                	jmp    c001530b <opcodeFault(regs*, void*)+0x506>
c00152cd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00152d0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00152d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d5:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00152d8:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00152db:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00152de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152e1:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00152e4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00152e7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00152ea:	89 d0                	mov    eax,edx
c00152ec:	31 d2                	xor    edx,edx
c00152ee:	89 c3                	mov    ebx,eax
c00152f0:	89 d6                	mov    esi,edx
c00152f2:	89 da                	mov    edx,ebx
c00152f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f7:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00152fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152fd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015300:	83 e0 bf             	and    eax,0xffffffbf
c0015303:	89 c2                	mov    edx,eax
c0015305:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015308:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001530b:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c0015310:	48                   	dec    eax
c0015311:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c0015316:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001531b:	85 c0                	test   eax,eax
c001531d:	75 01                	jne    c0015320 <opcodeFault(regs*, void*)+0x51b>
c001531f:	fb                   	sti    
c0015320:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015323:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015326:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015329:	01 c2                	add    edx,eax
c001532b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001532e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015331:	83 ec 0c             	sub    esp,0xc
c0015334:	68 5a b6 02 c0       	push   0xc002b65a
c0015339:	e8 83 d6 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001533e:	83 c4 10             	add    esp,0x10
c0015341:	e9 d5 00 00 00       	jmp    c001541b <opcodeFault(regs*, void*)+0x616>
c0015346:	83 ec 0c             	sub    esp,0xc
c0015349:	68 6d b6 02 c0       	push   0xc002b66d
c001534e:	e8 6e d6 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0015353:	83 c4 10             	add    esp,0x10
c0015356:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015359:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001535c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001535f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015362:	c1 e0 04             	shl    eax,0x4
c0015365:	01 d0                	add    eax,edx
c0015367:	83 c0 03             	add    eax,0x3
c001536a:	8a 00                	mov    al,BYTE PTR [eax]
c001536c:	0f b6 d8             	movzx  ebx,al
c001536f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015372:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015378:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001537b:	c1 e0 04             	shl    eax,0x4
c001537e:	01 d0                	add    eax,edx
c0015380:	83 c0 02             	add    eax,0x2
c0015383:	8a 00                	mov    al,BYTE PTR [eax]
c0015385:	0f b6 c8             	movzx  ecx,al
c0015388:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001538e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015391:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015394:	c1 e0 04             	shl    eax,0x4
c0015397:	01 d0                	add    eax,edx
c0015399:	40                   	inc    eax
c001539a:	8a 00                	mov    al,BYTE PTR [eax]
c001539c:	0f b6 d0             	movzx  edx,al
c001539f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a2:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00153a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153ab:	c1 e0 04             	shl    eax,0x4
c00153ae:	01 f0                	add    eax,esi
c00153b0:	8a 00                	mov    al,BYTE PTR [eax]
c00153b2:	0f b6 c0             	movzx  eax,al
c00153b5:	83 ec 0c             	sub    esp,0xc
c00153b8:	53                   	push   ebx
c00153b9:	51                   	push   ecx
c00153ba:	52                   	push   edx
c00153bb:	50                   	push   eax
c00153bc:	68 80 b6 02 c0       	push   0xc002b680
c00153c1:	e8 fb d5 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c00153c6:	83 c4 20             	add    esp,0x20
c00153c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153cc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153cf:	83 c0 03             	add    eax,0x3
c00153d2:	8a 00                	mov    al,BYTE PTR [eax]
c00153d4:	0f b6 d8             	movzx  ebx,al
c00153d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153da:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153dd:	83 c0 02             	add    eax,0x2
c00153e0:	8a 00                	mov    al,BYTE PTR [eax]
c00153e2:	0f b6 c8             	movzx  ecx,al
c00153e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153eb:	40                   	inc    eax
c00153ec:	8a 00                	mov    al,BYTE PTR [eax]
c00153ee:	0f b6 d0             	movzx  edx,al
c00153f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153f7:	8a 00                	mov    al,BYTE PTR [eax]
c00153f9:	0f b6 c0             	movzx  eax,al
c00153fc:	83 ec 0c             	sub    esp,0xc
c00153ff:	53                   	push   ebx
c0015400:	51                   	push   ecx
c0015401:	52                   	push   edx
c0015402:	50                   	push   eax
c0015403:	68 a8 b6 02 c0       	push   0xc002b6a8
c0015408:	e8 b4 d5 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001540d:	83 c4 20             	add    esp,0x20
c0015410:	83 ec 0c             	sub    esp,0xc
c0015413:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015416:	e8 41 f4 ff ff       	call   c001485c <displayDebugInfo(regs*)>
c001541b:	8d 65 f8             	lea    esp,[ebp-0x8]
c001541e:	5b                   	pop    ebx
c001541f:	5e                   	pop    esi
c0015420:	5d                   	pop    ebp
c0015421:	c3                   	ret    

c0015422 <displayProgramFault(char const*)>:
c0015422:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015427:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001542a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015430:	85 c0                	test   eax,eax
c0015432:	74 15                	je     c0015449 <displayProgramFault(char const*)+0x27>
c0015434:	83 ec 0c             	sub    esp,0xc
c0015437:	6a 04                	push   0x4
c0015439:	6a 0f                	push   0xf
c001543b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001543f:	50                   	push   eax
c0015440:	e8 e7 b4 ff ff       	call   c001092c <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015445:	83 c4 1c             	add    esp,0x1c
c0015448:	c3                   	ret    
c0015449:	c3                   	ret    

c001544a <setupInterruptController()>:
c001544a:	55                   	push   ebp
c001544b:	89 e5                	mov    ebp,esp
c001544d:	53                   	push   ebx
c001544e:	83 ec 24             	sub    esp,0x24
c0015451:	b8 00 00 00 00       	mov    eax,0x0
c0015456:	85 c0                	test   eax,eax
c0015458:	0f 95 c0             	setne  al
c001545b:	84 c0                	test   al,al
c001545d:	74 5b                	je     c00154ba <setupInterruptController()+0x70>
c001545f:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015466:	83 ec 0c             	sub    esp,0xc
c0015469:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001546c:	e8 f8 a4 ff ff       	call   c000f969 <malloc>
c0015471:	83 c4 10             	add    esp,0x10
c0015474:	89 c3                	mov    ebx,eax
c0015476:	83 ec 0c             	sub    esp,0xc
c0015479:	53                   	push   ebx
c001547a:	e8 89 08 01 00       	call   c0025d08 <APIC::APIC()>
c001547f:	83 c4 10             	add    esp,0x10
c0015482:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015485:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015488:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001548b:	8b 00                	mov    eax,DWORD PTR [eax]
c001548d:	83 c0 08             	add    eax,0x8
c0015490:	8b 00                	mov    eax,DWORD PTR [eax]
c0015492:	6a 00                	push   0x0
c0015494:	6a 00                	push   0x0
c0015496:	6a 00                	push   0x0
c0015498:	52                   	push   edx
c0015499:	ff d0                	call   eax
c001549b:	83 c4 10             	add    esp,0x10
c001549e:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00154a3:	83 ec 08             	sub    esp,0x8
c00154a6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00154a9:	50                   	push   eax
c00154aa:	e8 4b e9 ff ff       	call   c0013dfa <Device::addChild(Device*)>
c00154af:	83 c4 10             	add    esp,0x10
c00154b2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00154b5:	e9 79 03 00 00       	jmp    c0015833 <setupInterruptController()+0x3e9>
c00154ba:	a0 60 ef 02 c0       	mov    al,ds:0xc002ef60
c00154bf:	84 c0                	test   al,al
c00154c1:	75 14                	jne    c00154d7 <setupInterruptController()+0x8d>
c00154c3:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00154c8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00154ce:	83 e2 fe             	and    edx,0xfffffffe
c00154d1:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00154d7:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00154dc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00154e2:	83 e0 01             	and    eax,0x1
c00154e5:	84 c0                	test   al,al
c00154e7:	0f 95 c0             	setne  al
c00154ea:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00154ed:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00154f4:	83 ec 0c             	sub    esp,0xc
c00154f7:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00154fa:	e8 6a a4 ff ff       	call   c000f969 <malloc>
c00154ff:	83 c4 10             	add    esp,0x10
c0015502:	89 c3                	mov    ebx,eax
c0015504:	83 ec 0c             	sub    esp,0xc
c0015507:	53                   	push   ebx
c0015508:	e8 53 0d 01 00       	call   c0026260 <PIC::PIC()>
c001550d:	83 c4 10             	add    esp,0x10
c0015510:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015513:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015516:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015519:	8b 00                	mov    eax,DWORD PTR [eax]
c001551b:	83 c0 08             	add    eax,0x8
c001551e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015520:	6a 00                	push   0x0
c0015522:	6a 00                	push   0x0
c0015524:	6a 00                	push   0x0
c0015526:	52                   	push   edx
c0015527:	ff d0                	call   eax
c0015529:	83 c4 10             	add    esp,0x10
c001552c:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015530:	74 73                	je     c00155a5 <setupInterruptController()+0x15b>
c0015532:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015535:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015538:	8b 00                	mov    eax,DWORD PTR [eax]
c001553a:	83 c0 0c             	add    eax,0xc
c001553d:	8b 00                	mov    eax,DWORD PTR [eax]
c001553f:	6a 00                	push   0x0
c0015541:	6a 00                	push   0x0
c0015543:	6a 00                	push   0x0
c0015545:	52                   	push   edx
c0015546:	ff d0                	call   eax
c0015548:	83 c4 10             	add    esp,0x10
c001554b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001554f:	74 15                	je     c0015566 <setupInterruptController()+0x11c>
c0015551:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015554:	8b 00                	mov    eax,DWORD PTR [eax]
c0015556:	83 c0 04             	add    eax,0x4
c0015559:	8b 00                	mov    eax,DWORD PTR [eax]
c001555b:	83 ec 0c             	sub    esp,0xc
c001555e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015561:	ff d0                	call   eax
c0015563:	83 c4 10             	add    esp,0x10
c0015566:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c001556d:	83 ec 0c             	sub    esp,0xc
c0015570:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015573:	e8 f1 a3 ff ff       	call   c000f969 <malloc>
c0015578:	83 c4 10             	add    esp,0x10
c001557b:	89 c3                	mov    ebx,eax
c001557d:	83 ec 0c             	sub    esp,0xc
c0015580:	53                   	push   ebx
c0015581:	e8 82 07 01 00       	call   c0025d08 <APIC::APIC()>
c0015586:	83 c4 10             	add    esp,0x10
c0015589:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001558c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001558f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015592:	8b 00                	mov    eax,DWORD PTR [eax]
c0015594:	83 c0 08             	add    eax,0x8
c0015597:	8b 00                	mov    eax,DWORD PTR [eax]
c0015599:	6a 00                	push   0x0
c001559b:	6a 00                	push   0x0
c001559d:	6a 00                	push   0x0
c001559f:	52                   	push   edx
c00155a0:	ff d0                	call   eax
c00155a2:	83 c4 10             	add    esp,0x10
c00155a5:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00155aa:	83 ec 08             	sub    esp,0x8
c00155ad:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155b0:	50                   	push   eax
c00155b1:	e8 44 e8 ff ff       	call   c0013dfa <Device::addChild(Device*)>
c00155b6:	83 c4 10             	add    esp,0x10
c00155b9:	c7 05 88 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e788,0x0
c00155c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00155c8:	83 c0 24             	add    eax,0x24
c00155cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00155cd:	6a 00                	push   0x0
c00155cf:	68 e6 4d 01 c0       	push   0xc0014de6
c00155d4:	6a 00                	push   0x0
c00155d6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155d9:	ff d0                	call   eax
c00155db:	83 c4 10             	add    esp,0x10
c00155de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00155e3:	83 c0 24             	add    eax,0x24
c00155e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00155e8:	6a 00                	push   0x0
c00155ea:	68 e6 4d 01 c0       	push   0xc0014de6
c00155ef:	6a 01                	push   0x1
c00155f1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155f4:	ff d0                	call   eax
c00155f6:	83 c4 10             	add    esp,0x10
c00155f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00155fe:	83 c0 24             	add    eax,0x24
c0015601:	8b 00                	mov    eax,DWORD PTR [eax]
c0015603:	6a 00                	push   0x0
c0015605:	68 b9 46 01 c0       	push   0xc00146b9
c001560a:	6a 02                	push   0x2
c001560c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001560f:	ff d0                	call   eax
c0015611:	83 c4 10             	add    esp,0x10
c0015614:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015617:	8b 00                	mov    eax,DWORD PTR [eax]
c0015619:	83 c0 24             	add    eax,0x24
c001561c:	8b 00                	mov    eax,DWORD PTR [eax]
c001561e:	6a 00                	push   0x0
c0015620:	68 e6 4d 01 c0       	push   0xc0014de6
c0015625:	6a 03                	push   0x3
c0015627:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001562a:	ff d0                	call   eax
c001562c:	83 c4 10             	add    esp,0x10
c001562f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015632:	8b 00                	mov    eax,DWORD PTR [eax]
c0015634:	83 c0 24             	add    eax,0x24
c0015637:	8b 00                	mov    eax,DWORD PTR [eax]
c0015639:	6a 00                	push   0x0
c001563b:	68 e6 4d 01 c0       	push   0xc0014de6
c0015640:	6a 04                	push   0x4
c0015642:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015645:	ff d0                	call   eax
c0015647:	83 c4 10             	add    esp,0x10
c001564a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001564d:	8b 00                	mov    eax,DWORD PTR [eax]
c001564f:	83 c0 24             	add    eax,0x24
c0015652:	8b 00                	mov    eax,DWORD PTR [eax]
c0015654:	6a 00                	push   0x0
c0015656:	68 e6 4d 01 c0       	push   0xc0014de6
c001565b:	6a 05                	push   0x5
c001565d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015660:	ff d0                	call   eax
c0015662:	83 c4 10             	add    esp,0x10
c0015665:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015668:	8b 00                	mov    eax,DWORD PTR [eax]
c001566a:	83 c0 24             	add    eax,0x24
c001566d:	8b 00                	mov    eax,DWORD PTR [eax]
c001566f:	6a 00                	push   0x0
c0015671:	68 05 4e 01 c0       	push   0xc0014e05
c0015676:	6a 06                	push   0x6
c0015678:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001567b:	ff d0                	call   eax
c001567d:	83 c4 10             	add    esp,0x10
c0015680:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015683:	8b 00                	mov    eax,DWORD PTR [eax]
c0015685:	83 c0 24             	add    eax,0x24
c0015688:	8b 00                	mov    eax,DWORD PTR [eax]
c001568a:	6a 00                	push   0x0
c001568c:	68 eb 4c 01 c0       	push   0xc0014ceb
c0015691:	6a 07                	push   0x7
c0015693:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015696:	ff d0                	call   eax
c0015698:	83 c4 10             	add    esp,0x10
c001569b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001569e:	8b 00                	mov    eax,DWORD PTR [eax]
c00156a0:	83 c0 24             	add    eax,0x24
c00156a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00156a5:	6a 00                	push   0x0
c00156a7:	68 d4 44 01 c0       	push   0xc00144d4
c00156ac:	6a 08                	push   0x8
c00156ae:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156b1:	ff d0                	call   eax
c00156b3:	83 c4 10             	add    esp,0x10
c00156b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00156bb:	83 c0 24             	add    eax,0x24
c00156be:	8b 00                	mov    eax,DWORD PTR [eax]
c00156c0:	6a 00                	push   0x0
c00156c2:	68 e6 4d 01 c0       	push   0xc0014de6
c00156c7:	6a 09                	push   0x9
c00156c9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156cc:	ff d0                	call   eax
c00156ce:	83 c4 10             	add    esp,0x10
c00156d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00156d6:	83 c0 24             	add    eax,0x24
c00156d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00156db:	6a 00                	push   0x0
c00156dd:	68 e6 4d 01 c0       	push   0xc0014de6
c00156e2:	6a 0a                	push   0xa
c00156e4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156e7:	ff d0                	call   eax
c00156e9:	83 c4 10             	add    esp,0x10
c00156ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00156f1:	83 c0 24             	add    eax,0x24
c00156f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00156f6:	6a 00                	push   0x0
c00156f8:	68 e6 4d 01 c0       	push   0xc0014de6
c00156fd:	6a 0b                	push   0xb
c00156ff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015702:	ff d0                	call   eax
c0015704:	83 c4 10             	add    esp,0x10
c0015707:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001570a:	8b 00                	mov    eax,DWORD PTR [eax]
c001570c:	83 c0 24             	add    eax,0x24
c001570f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015711:	6a 00                	push   0x0
c0015713:	68 e6 4d 01 c0       	push   0xc0014de6
c0015718:	6a 0c                	push   0xc
c001571a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001571d:	ff d0                	call   eax
c001571f:	83 c4 10             	add    esp,0x10
c0015722:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015725:	8b 00                	mov    eax,DWORD PTR [eax]
c0015727:	83 c0 24             	add    eax,0x24
c001572a:	8b 00                	mov    eax,DWORD PTR [eax]
c001572c:	6a 00                	push   0x0
c001572e:	68 5e 4d 01 c0       	push   0xc0014d5e
c0015733:	6a 0d                	push   0xd
c0015735:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015738:	ff d0                	call   eax
c001573a:	83 c4 10             	add    esp,0x10
c001573d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015740:	8b 00                	mov    eax,DWORD PTR [eax]
c0015742:	83 c0 24             	add    eax,0x24
c0015745:	8b 00                	mov    eax,DWORD PTR [eax]
c0015747:	6a 00                	push   0x0
c0015749:	68 97 4d 01 c0       	push   0xc0014d97
c001574e:	6a 0e                	push   0xe
c0015750:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015753:	ff d0                	call   eax
c0015755:	83 c4 10             	add    esp,0x10
c0015758:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001575b:	8b 00                	mov    eax,DWORD PTR [eax]
c001575d:	83 c0 24             	add    eax,0x24
c0015760:	8b 00                	mov    eax,DWORD PTR [eax]
c0015762:	6a 00                	push   0x0
c0015764:	68 e6 4d 01 c0       	push   0xc0014de6
c0015769:	6a 0f                	push   0xf
c001576b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001576e:	ff d0                	call   eax
c0015770:	83 c4 10             	add    esp,0x10
c0015773:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015776:	8b 00                	mov    eax,DWORD PTR [eax]
c0015778:	83 c0 24             	add    eax,0x24
c001577b:	8b 00                	mov    eax,DWORD PTR [eax]
c001577d:	6a 00                	push   0x0
c001577f:	68 e6 4d 01 c0       	push   0xc0014de6
c0015784:	6a 10                	push   0x10
c0015786:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015789:	ff d0                	call   eax
c001578b:	83 c4 10             	add    esp,0x10
c001578e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015791:	8b 00                	mov    eax,DWORD PTR [eax]
c0015793:	83 c0 24             	add    eax,0x24
c0015796:	8b 00                	mov    eax,DWORD PTR [eax]
c0015798:	6a 00                	push   0x0
c001579a:	68 e6 4d 01 c0       	push   0xc0014de6
c001579f:	6a 11                	push   0x11
c00157a1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157a4:	ff d0                	call   eax
c00157a6:	83 c4 10             	add    esp,0x10
c00157a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00157ae:	83 c0 24             	add    eax,0x24
c00157b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00157b3:	6a 00                	push   0x0
c00157b5:	68 e6 4d 01 c0       	push   0xc0014de6
c00157ba:	6a 12                	push   0x12
c00157bc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157bf:	ff d0                	call   eax
c00157c1:	83 c4 10             	add    esp,0x10
c00157c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00157c9:	83 c0 24             	add    eax,0x24
c00157cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00157ce:	6a 00                	push   0x0
c00157d0:	68 e6 4d 01 c0       	push   0xc0014de6
c00157d5:	6a 13                	push   0x13
c00157d7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157da:	ff d0                	call   eax
c00157dc:	83 c4 10             	add    esp,0x10
c00157df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00157e4:	83 c0 24             	add    eax,0x24
c00157e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00157e9:	6a 00                	push   0x0
c00157eb:	68 e6 4d 01 c0       	push   0xc0014de6
c00157f0:	6a 14                	push   0x14
c00157f2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157f5:	ff d0                	call   eax
c00157f7:	83 c4 10             	add    esp,0x10
c00157fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00157ff:	83 c0 24             	add    eax,0x24
c0015802:	8b 00                	mov    eax,DWORD PTR [eax]
c0015804:	6a 00                	push   0x0
c0015806:	68 e6 4d 01 c0       	push   0xc0014de6
c001580b:	6a 1e                	push   0x1e
c001580d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015810:	ff d0                	call   eax
c0015812:	83 c4 10             	add    esp,0x10
c0015815:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015818:	8b 00                	mov    eax,DWORD PTR [eax]
c001581a:	83 c0 24             	add    eax,0x24
c001581d:	8b 00                	mov    eax,DWORD PTR [eax]
c001581f:	6a 00                	push   0x0
c0015821:	68 51 c5 01 c0       	push   0xc001c551
c0015826:	6a 60                	push   0x60
c0015828:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001582b:	ff d0                	call   eax
c001582d:	83 c4 10             	add    esp,0x10
c0015830:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015833:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015836:	c9                   	leave  
c0015837:	c3                   	ret    

c0015838 <InterruptController::convertLegacyIRQNumber(int)>:
c0015838:	55                   	push   ebp
c0015839:	89 e5                	mov    ebp,esp
c001583b:	83 ec 08             	sub    esp,0x8
c001583e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015841:	83 ec 0c             	sub    esp,0xc
c0015844:	50                   	push   eax
c0015845:	e8 b0 e8 ff ff       	call   c00140fa <Device::getName()>
c001584a:	83 c4 10             	add    esp,0x10
c001584d:	8a 00                	mov    al,BYTE PTR [eax]
c001584f:	3c 41                	cmp    al,0x41
c0015851:	0f 94 c0             	sete   al
c0015854:	84 c0                	test   al,al
c0015856:	74 28                	je     c0015880 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015858:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001585c:	7f 12                	jg     c0015870 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c001585e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015861:	05 60 d8 02 c0       	add    eax,0xc002d860
c0015866:	8a 00                	mov    al,BYTE PTR [eax]
c0015868:	0f b6 c0             	movzx  eax,al
c001586b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001586e:	eb 10                	jmp    c0015880 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015870:	83 ec 0c             	sub    esp,0xc
c0015873:	68 d0 b6 02 c0       	push   0xc002b6d0
c0015878:	e8 e2 4a 00 00       	call   c001a35f <Krnl::panic(char const*)>
c001587d:	83 c4 10             	add    esp,0x10
c0015880:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015883:	c9                   	leave  
c0015884:	c3                   	ret    
c0015885:	90                   	nop

c0015886 <startGUI(void*)>:
c0015886:	55                   	push   ebp
c0015887:	89 e5                	mov    ebp,esp
c0015889:	53                   	push   ebx
c001588a:	83 ec 04             	sub    esp,0x4
c001588d:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c0015892:	48                   	dec    eax
c0015893:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c0015898:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001589d:	85 c0                	test   eax,eax
c001589f:	75 01                	jne    c00158a2 <startGUI(void*)+0x1c>
c00158a1:	fb                   	sti    
c00158a2:	8b 1d 08 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e608
c00158a8:	83 ec 08             	sub    esp,0x8
c00158ab:	6a 01                	push   0x1
c00158ad:	68 50 b7 02 c0       	push   0xc002b750
c00158b2:	e8 75 7c 00 00       	call   c001d52c <Thr::loadDLL(char const*, bool)>
c00158b7:	83 c4 10             	add    esp,0x10
c00158ba:	83 ec 08             	sub    esp,0x8
c00158bd:	53                   	push   ebx
c00158be:	50                   	push   eax
c00158bf:	e8 99 7e 00 00       	call   c001d75d <Thr::executeDLL(unsigned long, void*)>
c00158c4:	83 c4 10             	add    esp,0x10
c00158c7:	8b 1d 08 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e608
c00158cd:	83 ec 08             	sub    esp,0x8
c00158d0:	6a 01                	push   0x1
c00158d2:	68 6a b7 02 c0       	push   0xc002b76a
c00158d7:	e8 50 7c 00 00       	call   c001d52c <Thr::loadDLL(char const*, bool)>
c00158dc:	83 c4 10             	add    esp,0x10
c00158df:	83 ec 08             	sub    esp,0x8
c00158e2:	53                   	push   ebx
c00158e3:	50                   	push   eax
c00158e4:	e8 74 7e 00 00       	call   c001d75d <Thr::executeDLL(unsigned long, void*)>
c00158e9:	83 c4 10             	add    esp,0x10
c00158ec:	90                   	nop
c00158ed:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00158f0:	c9                   	leave  
c00158f1:	c3                   	ret    

c00158f2 <startGUIVESA(void*)>:
c00158f2:	55                   	push   ebp
c00158f3:	89 e5                	mov    ebp,esp
c00158f5:	53                   	push   ebx
c00158f6:	83 ec 04             	sub    esp,0x4
c00158f9:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c00158fe:	48                   	dec    eax
c00158ff:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c0015904:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c0015909:	85 c0                	test   eax,eax
c001590b:	75 01                	jne    c001590e <startGUIVESA(void*)+0x1c>
c001590d:	fb                   	sti    
c001590e:	8b 1d 08 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e608
c0015914:	83 ec 08             	sub    esp,0x8
c0015917:	6a 01                	push   0x1
c0015919:	68 84 b7 02 c0       	push   0xc002b784
c001591e:	e8 09 7c 00 00       	call   c001d52c <Thr::loadDLL(char const*, bool)>
c0015923:	83 c4 10             	add    esp,0x10
c0015926:	83 ec 08             	sub    esp,0x8
c0015929:	53                   	push   ebx
c001592a:	50                   	push   eax
c001592b:	e8 2d 7e 00 00       	call   c001d75d <Thr::executeDLL(unsigned long, void*)>
c0015930:	83 c4 10             	add    esp,0x10
c0015933:	8b 1d 08 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e608
c0015939:	83 ec 08             	sub    esp,0x8
c001593c:	6a 01                	push   0x1
c001593e:	68 6a b7 02 c0       	push   0xc002b76a
c0015943:	e8 e4 7b 00 00       	call   c001d52c <Thr::loadDLL(char const*, bool)>
c0015948:	83 c4 10             	add    esp,0x10
c001594b:	83 ec 08             	sub    esp,0x8
c001594e:	53                   	push   ebx
c001594f:	50                   	push   eax
c0015950:	e8 08 7e 00 00       	call   c001d75d <Thr::executeDLL(unsigned long, void*)>
c0015955:	83 c4 10             	add    esp,0x10
c0015958:	90                   	nop
c0015959:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001595c:	c9                   	leave  
c001595d:	c3                   	ret    

c001595e <sendKeyToTerminal(unsigned char)>:
c001595e:	55                   	push   ebp
c001595f:	89 e5                	mov    ebp,esp
c0015961:	83 ec 28             	sub    esp,0x28
c0015964:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015967:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001596a:	a1 c4 e6 02 c0       	mov    eax,ds:0xc002e6c4
c001596f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015973:	83 ec 08             	sub    esp,0x8
c0015976:	52                   	push   edx
c0015977:	50                   	push   eax
c0015978:	e8 57 b4 ff ff       	call   c0010dd4 <VgaText::receiveKey(unsigned char)>
c001597d:	83 c4 10             	add    esp,0x10
c0015980:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015984:	0f 85 8f 00 00 00    	jne    c0015a19 <sendKeyToTerminal(unsigned char)+0xbb>
c001598a:	fa                   	cli    
c001598b:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c0015990:	40                   	inc    eax
c0015991:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c0015996:	a1 04 fb 02 c0       	mov    eax,ds:0xc002fb04
c001599b:	40                   	inc    eax
c001599c:	a3 04 fb 02 c0       	mov    ds:0xc002fb04,eax
c00159a1:	a1 a0 e7 02 c0       	mov    eax,ds:0xc002e7a0
c00159a6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00159a9:	c7 05 a0 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e7a0,0x0
c00159b3:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00159b7:	74 1f                	je     c00159d8 <sendKeyToTerminal(unsigned char)+0x7a>
c00159b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159bc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00159bf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159c2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00159c5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00159c8:	83 ec 0c             	sub    esp,0xc
c00159cb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00159ce:	e8 b0 89 00 00       	call   c001e383 <unblockTask(ThreadControlBlock*)>
c00159d3:	83 c4 10             	add    esp,0x10
c00159d6:	eb db                	jmp    c00159b3 <sendKeyToTerminal(unsigned char)+0x55>
c00159d8:	a1 04 fb 02 c0       	mov    eax,ds:0xc002fb04
c00159dd:	48                   	dec    eax
c00159de:	a3 04 fb 02 c0       	mov    ds:0xc002fb04,eax
c00159e3:	a1 04 fb 02 c0       	mov    eax,ds:0xc002fb04
c00159e8:	85 c0                	test   eax,eax
c00159ea:	75 18                	jne    c0015a04 <sendKeyToTerminal(unsigned char)+0xa6>
c00159ec:	a1 00 fb 02 c0       	mov    eax,ds:0xc002fb00
c00159f1:	85 c0                	test   eax,eax
c00159f3:	74 0f                	je     c0015a04 <sendKeyToTerminal(unsigned char)+0xa6>
c00159f5:	c7 05 00 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb00,0x0
c00159ff:	e8 ed 84 00 00       	call   c001def1 <schedule()>
c0015a04:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c0015a09:	48                   	dec    eax
c0015a0a:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c0015a0f:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c0015a14:	85 c0                	test   eax,eax
c0015a16:	75 01                	jne    c0015a19 <sendKeyToTerminal(unsigned char)+0xbb>
c0015a18:	fb                   	sti    
c0015a19:	90                   	nop
c0015a1a:	c9                   	leave  
c0015a1b:	c3                   	ret    

c0015a1c <sendKeyboardToken(KeyboardToken)>:
c0015a1c:	55                   	push   ebp
c0015a1d:	89 e5                	mov    ebp,esp
c0015a1f:	83 ec 18             	sub    esp,0x18
c0015a22:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015a25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a28:	0f b7 c0             	movzx  eax,ax
c0015a2b:	83 f2 01             	xor    edx,0x1
c0015a2e:	88 90 c0 e7 02 c0    	mov    BYTE PTR [eax-0x3ffd1840],dl
c0015a34:	a1 a8 e7 02 c0       	mov    eax,ds:0xc002e7a8
c0015a39:	85 c0                	test   eax,eax
c0015a3b:	74 24                	je     c0015a61 <sendKeyboardToken(KeyboardToken)+0x45>
c0015a3d:	8b 0d a8 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e7a8
c0015a43:	83 ec 04             	sub    esp,0x4
c0015a46:	68 c0 e7 02 c0       	push   0xc002e7c0
c0015a4b:	83 ec 08             	sub    esp,0x8
c0015a4e:	89 e2                	mov    edx,esp
c0015a50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a53:	89 02                	mov    DWORD PTR [edx],eax
c0015a55:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015a58:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015a5c:	ff d1                	call   ecx
c0015a5e:	83 c4 10             	add    esp,0x10
c0015a61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a64:	66 3d 03 02          	cmp    ax,0x203
c0015a68:	75 07                	jne    c0015a71 <sendKeyboardToken(KeyboardToken)+0x55>
c0015a6a:	a0 c0 e8 02 c0       	mov    al,ds:0xc002e8c0
c0015a6f:	84 c0                	test   al,al
c0015a71:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015a75:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015a78:	a0 c8 eb 02 c0       	mov    al,ds:0xc002ebc8
c0015a7d:	38 c2                	cmp    dl,al
c0015a7f:	74 1c                	je     c0015a9d <sendKeyboardToken(KeyboardToken)+0x81>
c0015a81:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015a84:	a2 c8 eb 02 c0       	mov    ds:0xc002ebc8,al
c0015a89:	a0 c8 eb 02 c0       	mov    al,ds:0xc002ebc8
c0015a8e:	0f b6 c0             	movzx  eax,al
c0015a91:	83 ec 0c             	sub    esp,0xc
c0015a94:	50                   	push   eax
c0015a95:	e8 7a a9 ff ff       	call   c0010414 <setTerminalScrollLock(bool)>
c0015a9a:	83 c4 10             	add    esp,0x10
c0015a9d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015aa0:	84 c0                	test   al,al
c0015aa2:	0f 84 ae 00 00 00    	je     c0015b56 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015aa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aab:	66 3d 10 03          	cmp    ax,0x310
c0015aaf:	75 06                	jne    c0015ab7 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015ab1:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015ab7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aba:	66 3d 11 03          	cmp    ax,0x311
c0015abe:	75 06                	jne    c0015ac6 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015ac0:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015ac6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ac9:	66 3d 12 03          	cmp    ax,0x312
c0015acd:	75 06                	jne    c0015ad5 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015acf:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015ad5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ad8:	66 3d 13 03          	cmp    ax,0x313
c0015adc:	75 06                	jne    c0015ae4 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015ade:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015ae4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ae7:	66 3d 14 03          	cmp    ax,0x314
c0015aeb:	75 06                	jne    c0015af3 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015aed:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015af3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015af6:	66 3d 15 03          	cmp    ax,0x315
c0015afa:	75 06                	jne    c0015b02 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015afc:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015b02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b05:	66 3d 16 03          	cmp    ax,0x316
c0015b09:	75 06                	jne    c0015b11 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015b0b:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015b11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b14:	66 3d 17 03          	cmp    ax,0x317
c0015b18:	75 06                	jne    c0015b20 <sendKeyboardToken(KeyboardToken)+0x104>
c0015b1a:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015b20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b23:	66 3d 18 03          	cmp    ax,0x318
c0015b27:	75 06                	jne    c0015b2f <sendKeyboardToken(KeyboardToken)+0x113>
c0015b29:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015b2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b32:	66 3d 19 03          	cmp    ax,0x319
c0015b36:	75 06                	jne    c0015b3e <sendKeyboardToken(KeyboardToken)+0x122>
c0015b38:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015b3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b41:	66 3d 1a 03          	cmp    ax,0x31a
c0015b45:	0f 85 c9 00 00 00    	jne    c0015c14 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015b4b:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015b51:	e9 be 00 00 00       	jmp    c0015c14 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015b56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b59:	66 3d 10 03          	cmp    ax,0x310
c0015b5d:	75 0a                	jne    c0015b69 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015b5f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015b65:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b6c:	66 3d 11 03          	cmp    ax,0x311
c0015b70:	75 0a                	jne    c0015b7c <sendKeyboardToken(KeyboardToken)+0x160>
c0015b72:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015b78:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b7f:	66 3d 12 03          	cmp    ax,0x312
c0015b83:	75 0a                	jne    c0015b8f <sendKeyboardToken(KeyboardToken)+0x173>
c0015b85:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015b8b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b92:	66 3d 13 03          	cmp    ax,0x313
c0015b96:	75 0a                	jne    c0015ba2 <sendKeyboardToken(KeyboardToken)+0x186>
c0015b98:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015b9e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ba2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ba5:	66 3d 14 03          	cmp    ax,0x314
c0015ba9:	75 0a                	jne    c0015bb5 <sendKeyboardToken(KeyboardToken)+0x199>
c0015bab:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015bb1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bb8:	66 3d 15 03          	cmp    ax,0x315
c0015bbc:	75 0a                	jne    c0015bc8 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015bbe:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015bc4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bcb:	66 3d 16 03          	cmp    ax,0x316
c0015bcf:	75 0a                	jne    c0015bdb <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015bd1:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015bd7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bde:	66 3d 17 03          	cmp    ax,0x317
c0015be2:	75 0a                	jne    c0015bee <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015be4:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015bea:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bf1:	66 3d 18 03          	cmp    ax,0x318
c0015bf5:	75 0a                	jne    c0015c01 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015bf7:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015bfd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c04:	66 3d 19 03          	cmp    ax,0x319
c0015c08:	75 0a                	jne    c0015c14 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015c0a:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015c10:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c17:	66 3d 00 02          	cmp    ax,0x200
c0015c1b:	75 2c                	jne    c0015c49 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015c1d:	a0 c0 eb 02 c0       	mov    al,ds:0xc002ebc0
c0015c22:	83 f0 01             	xor    eax,0x1
c0015c25:	84 c0                	test   al,al
c0015c27:	74 20                	je     c0015c49 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015c29:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0015c2e:	6a 01                	push   0x1
c0015c30:	6a 00                	push   0x0
c0015c32:	68 86 58 01 c0       	push   0xc0015886
c0015c37:	50                   	push   eax
c0015c38:	e8 8f 80 00 00       	call   c001dccc <Process::createThread(void (*)(void*), void*, int)>
c0015c3d:	83 c4 10             	add    esp,0x10
c0015c40:	c6 05 c0 eb 02 c0 01 	mov    BYTE PTR ds:0xc002ebc0,0x1
c0015c47:	eb 33                	jmp    c0015c7c <sendKeyboardToken(KeyboardToken)+0x260>
c0015c49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c4c:	66 3d 01 02          	cmp    ax,0x201
c0015c50:	75 2a                	jne    c0015c7c <sendKeyboardToken(KeyboardToken)+0x260>
c0015c52:	a0 c0 eb 02 c0       	mov    al,ds:0xc002ebc0
c0015c57:	83 f0 01             	xor    eax,0x1
c0015c5a:	84 c0                	test   al,al
c0015c5c:	74 1e                	je     c0015c7c <sendKeyboardToken(KeyboardToken)+0x260>
c0015c5e:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0015c63:	6a 01                	push   0x1
c0015c65:	6a 00                	push   0x0
c0015c67:	68 f2 58 01 c0       	push   0xc00158f2
c0015c6c:	50                   	push   eax
c0015c6d:	e8 5a 80 00 00       	call   c001dccc <Process::createThread(void (*)(void*), void*, int)>
c0015c72:	83 c4 10             	add    esp,0x10
c0015c75:	c6 05 c0 eb 02 c0 01 	mov    BYTE PTR ds:0xc002ebc0,0x1
c0015c7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c7f:	66 3d 1d 03          	cmp    ax,0x31d
c0015c83:	75 06                	jne    c0015c8b <sendKeyboardToken(KeyboardToken)+0x26f>
c0015c85:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015c8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c8e:	66 3d 1c 03          	cmp    ax,0x31c
c0015c92:	75 06                	jne    c0015c9a <sendKeyboardToken(KeyboardToken)+0x27e>
c0015c94:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015c9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c9d:	66 3d 1b 03          	cmp    ax,0x31b
c0015ca1:	75 06                	jne    c0015ca9 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015ca3:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015ca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cac:	66 3d 1e 03          	cmp    ax,0x31e
c0015cb0:	75 06                	jne    c0015cb8 <sendKeyboardToken(KeyboardToken)+0x29c>
c0015cb2:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015cb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cbb:	66 3d 1f 03          	cmp    ax,0x31f
c0015cbf:	75 06                	jne    c0015cc7 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015cc1:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015cc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cca:	66 3d 1a 03          	cmp    ax,0x31a
c0015cce:	75 06                	jne    c0015cd6 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015cd0:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015cd6:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015cda:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015cdd:	83 f0 01             	xor    eax,0x1
c0015ce0:	84 c0                	test   al,al
c0015ce2:	74 77                	je     c0015d5b <sendKeyboardToken(KeyboardToken)+0x33f>
c0015ce4:	a0 c1 e8 02 c0       	mov    al,ds:0xc002e8c1
c0015ce9:	84 c0                	test   al,al
c0015ceb:	74 41                	je     c0015d2e <sendKeyboardToken(KeyboardToken)+0x312>
c0015ced:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015cf1:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015cf5:	74 2b                	je     c0015d22 <sendKeyboardToken(KeyboardToken)+0x306>
c0015cf7:	8b 15 c4 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebc4
c0015cfd:	89 d0                	mov    eax,edx
c0015cff:	c1 e0 02             	shl    eax,0x2
c0015d02:	01 d0                	add    eax,edx
c0015d04:	01 c0                	add    eax,eax
c0015d06:	a3 c4 eb 02 c0       	mov    ds:0xc002ebc4,eax
c0015d0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d0e:	0f b7 c0             	movzx  eax,ax
c0015d11:	8d 50 d0             	lea    edx,[eax-0x30]
c0015d14:	a1 c4 eb 02 c0       	mov    eax,ds:0xc002ebc4
c0015d19:	01 d0                	add    eax,edx
c0015d1b:	a3 c4 eb 02 c0       	mov    ds:0xc002ebc4,eax
c0015d20:	eb 6d                	jmp    c0015d8f <sendKeyboardToken(KeyboardToken)+0x373>
c0015d22:	c7 05 c4 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ebc4,0x0
c0015d2c:	eb 61                	jmp    c0015d8f <sendKeyboardToken(KeyboardToken)+0x373>
c0015d2e:	a1 c4 eb 02 c0       	mov    eax,ds:0xc002ebc4
c0015d33:	85 c0                	test   eax,eax
c0015d35:	74 18                	je     c0015d4f <sendKeyboardToken(KeyboardToken)+0x333>
c0015d37:	a1 c4 eb 02 c0       	mov    eax,ds:0xc002ebc4
c0015d3c:	0f b6 c0             	movzx  eax,al
c0015d3f:	83 ec 0c             	sub    esp,0xc
c0015d42:	50                   	push   eax
c0015d43:	e8 16 fc ff ff       	call   c001595e <sendKeyToTerminal(unsigned char)>
c0015d48:	83 c4 10             	add    esp,0x10
c0015d4b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015d4f:	c7 05 c4 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ebc4,0x0
c0015d59:	eb 34                	jmp    c0015d8f <sendKeyboardToken(KeyboardToken)+0x373>
c0015d5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d5e:	66 3d 01 01          	cmp    ax,0x101
c0015d62:	75 2b                	jne    c0015d8f <sendKeyboardToken(KeyboardToken)+0x373>
c0015d64:	a1 c4 eb 02 c0       	mov    eax,ds:0xc002ebc4
c0015d69:	85 c0                	test   eax,eax
c0015d6b:	74 18                	je     c0015d85 <sendKeyboardToken(KeyboardToken)+0x369>
c0015d6d:	a1 c4 eb 02 c0       	mov    eax,ds:0xc002ebc4
c0015d72:	0f b6 c0             	movzx  eax,al
c0015d75:	83 ec 0c             	sub    esp,0xc
c0015d78:	50                   	push   eax
c0015d79:	e8 e0 fb ff ff       	call   c001595e <sendKeyToTerminal(unsigned char)>
c0015d7e:	83 c4 10             	add    esp,0x10
c0015d81:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015d85:	c7 05 c4 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ebc4,0x0
c0015d8f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015d92:	83 f0 01             	xor    eax,0x1
c0015d95:	84 c0                	test   al,al
c0015d97:	74 4c                	je     c0015de5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015d99:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015d9c:	83 f0 01             	xor    eax,0x1
c0015d9f:	84 c0                	test   al,al
c0015da1:	74 42                	je     c0015de5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015da3:	a0 c0 e8 02 c0       	mov    al,ds:0xc002e8c0
c0015da8:	83 f0 01             	xor    eax,0x1
c0015dab:	84 c0                	test   al,al
c0015dad:	74 36                	je     c0015de5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015daf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015db2:	66 83 f8 1f          	cmp    ax,0x1f
c0015db6:	76 09                	jbe    c0015dc1 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015db8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dbb:	66 83 f8 7e          	cmp    ax,0x7e
c0015dbf:	76 12                	jbe    c0015dd3 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015dc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dc4:	66 83 f8 0a          	cmp    ax,0xa
c0015dc8:	74 09                	je     c0015dd3 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015dca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dcd:	66 83 f8 08          	cmp    ax,0x8
c0015dd1:	75 12                	jne    c0015de5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015dd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dd6:	0f b6 c0             	movzx  eax,al
c0015dd9:	83 ec 0c             	sub    esp,0xc
c0015ddc:	50                   	push   eax
c0015ddd:	e8 7c fb ff ff       	call   c001595e <sendKeyToTerminal(unsigned char)>
c0015de2:	83 c4 10             	add    esp,0x10
c0015de5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015de8:	83 f0 01             	xor    eax,0x1
c0015deb:	84 c0                	test   al,al
c0015ded:	74 4f                	je     c0015e3e <sendKeyboardToken(KeyboardToken)+0x422>
c0015def:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015df2:	83 f0 01             	xor    eax,0x1
c0015df5:	84 c0                	test   al,al
c0015df7:	74 45                	je     c0015e3e <sendKeyboardToken(KeyboardToken)+0x422>
c0015df9:	a0 c0 e8 02 c0       	mov    al,ds:0xc002e8c0
c0015dfe:	84 c0                	test   al,al
c0015e00:	74 3c                	je     c0015e3e <sendKeyboardToken(KeyboardToken)+0x422>
c0015e02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e05:	66 83 f8 3f          	cmp    ax,0x3f
c0015e09:	76 33                	jbe    c0015e3e <sendKeyboardToken(KeyboardToken)+0x422>
c0015e0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e0e:	66 83 f8 7f          	cmp    ax,0x7f
c0015e12:	77 2a                	ja     c0015e3e <sendKeyboardToken(KeyboardToken)+0x422>
c0015e14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e17:	88 c2                	mov    dl,al
c0015e19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e1c:	66 83 f8 5f          	cmp    ax,0x5f
c0015e20:	76 04                	jbe    c0015e26 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015e22:	b0 20                	mov    al,0x20
c0015e24:	eb 02                	jmp    c0015e28 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015e26:	b0 00                	mov    al,0x0
c0015e28:	29 c2                	sub    edx,eax
c0015e2a:	88 d0                	mov    al,dl
c0015e2c:	83 e8 40             	sub    eax,0x40
c0015e2f:	0f b6 c0             	movzx  eax,al
c0015e32:	83 ec 0c             	sub    esp,0xc
c0015e35:	50                   	push   eax
c0015e36:	e8 23 fb ff ff       	call   c001595e <sendKeyToTerminal(unsigned char)>
c0015e3b:	83 c4 10             	add    esp,0x10
c0015e3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e41:	66 3d 00 03          	cmp    ax,0x300
c0015e45:	75 0f                	jne    c0015e56 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015e47:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015e4a:	83 f0 01             	xor    eax,0x1
c0015e4d:	84 c0                	test   al,al
c0015e4f:	74 05                	je     c0015e56 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015e51:	e8 2f a9 ff ff       	call   c0010785 <doTerminalCycle()>
c0015e56:	90                   	nop
c0015e57:	c9                   	leave  
c0015e58:	c3                   	ret    

c0015e59 <clearInternalKeybuffer(VgaText*)>:
c0015e59:	55                   	push   ebp
c0015e5a:	89 e5                	mov    ebp,esp
c0015e5c:	83 ec 08             	sub    esp,0x8
c0015e5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e62:	05 98 01 00 00       	add    eax,0x198
c0015e67:	83 ec 0c             	sub    esp,0xc
c0015e6a:	50                   	push   eax
c0015e6b:	e8 fc a8 fe ff       	call   c000076c <strlen>
c0015e70:	83 c4 10             	add    esp,0x10
c0015e73:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e76:	81 c2 98 01 00 00    	add    edx,0x198
c0015e7c:	83 ec 04             	sub    esp,0x4
c0015e7f:	50                   	push   eax
c0015e80:	6a 00                	push   0x0
c0015e82:	52                   	push   edx
c0015e83:	e8 c8 a8 fe ff       	call   c0000750 <memset>
c0015e88:	83 c4 10             	add    esp,0x10
c0015e8b:	90                   	nop
c0015e8c:	c9                   	leave  
c0015e8d:	c3                   	ret    

c0015e8e <readKeyboard(VgaText*, char*, unsigned long)>:
c0015e8e:	55                   	push   ebp
c0015e8f:	89 e5                	mov    ebp,esp
c0015e91:	83 ec 18             	sub    esp,0x18
c0015e94:	a1 a8 e7 02 c0       	mov    eax,ds:0xc002e7a8
c0015e99:	85 c0                	test   eax,eax
c0015e9b:	74 2a                	je     c0015ec7 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015e9d:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015ea3:	8b 0d a8 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e7a8
c0015ea9:	83 ec 04             	sub    esp,0x4
c0015eac:	68 c0 e7 02 c0       	push   0xc002e7c0
c0015eb1:	83 ec 08             	sub    esp,0x8
c0015eb4:	89 e2                	mov    edx,esp
c0015eb6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015eb9:	89 02                	mov    DWORD PTR [edx],eax
c0015ebb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015ebe:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015ec2:	ff d1                	call   ecx
c0015ec4:	83 c4 10             	add    esp,0x10
c0015ec7:	fb                   	sti    
c0015ec8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015ecf:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015ed3:	0f 84 a1 00 00 00    	je     c0015f7a <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015ed9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015edc:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015ee2:	84 c0                	test   al,al
c0015ee4:	75 28                	jne    c0015f0e <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015ee6:	fa                   	cli    
c0015ee7:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c0015eec:	40                   	inc    eax
c0015eed:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c0015ef2:	e8 fa 7f 00 00       	call   c001def1 <schedule()>
c0015ef7:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c0015efc:	48                   	dec    eax
c0015efd:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c0015f02:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c0015f07:	85 c0                	test   eax,eax
c0015f09:	75 ce                	jne    c0015ed9 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015f0b:	fb                   	sti    
c0015f0c:	eb cb                	jmp    c0015ed9 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015f0e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015f11:	8d 50 01             	lea    edx,[eax+0x1]
c0015f14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015f17:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015f1a:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015f20:	88 10                	mov    BYTE PTR [eax],dl
c0015f22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f25:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015f2b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015f2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f31:	05 98 01 00 00       	add    eax,0x198
c0015f36:	83 ec 0c             	sub    esp,0xc
c0015f39:	50                   	push   eax
c0015f3a:	e8 2d a8 fe ff       	call   c000076c <strlen>
c0015f3f:	83 c4 10             	add    esp,0x10
c0015f42:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015f45:	81 c2 98 01 00 00    	add    edx,0x198
c0015f4b:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015f4e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015f51:	81 c2 98 01 00 00    	add    edx,0x198
c0015f57:	83 ec 04             	sub    esp,0x4
c0015f5a:	50                   	push   eax
c0015f5b:	51                   	push   ecx
c0015f5c:	52                   	push   edx
c0015f5d:	e8 26 a7 fe ff       	call   c0000688 <memmove>
c0015f62:	83 c4 10             	add    esp,0x10
c0015f65:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015f68:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015f6b:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015f6f:	0f 85 5a ff ff ff    	jne    c0015ecf <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015f75:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015f78:	eb 03                	jmp    c0015f7d <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015f7a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015f7d:	c9                   	leave  
c0015f7e:	c3                   	ret    
c0015f7f:	90                   	nop

c0015f80 <Keyboard::Keyboard(char const*)>:
c0015f80:	83 ec 0c             	sub    esp,0xc
c0015f83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f87:	83 ec 08             	sub    esp,0x8
c0015f8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f8e:	50                   	push   eax
c0015f8f:	e8 6a e0 ff ff       	call   c0013ffe <Device::Device(char const*)>
c0015f94:	83 c4 10             	add    esp,0x10
c0015f97:	ba a8 b7 02 c0       	mov    edx,0xc002b7a8
c0015f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fa0:	89 10                	mov    DWORD PTR [eax],edx
c0015fa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fa6:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015fb0:	c6 05 a4 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e7a4,0x1
c0015fb7:	90                   	nop
c0015fb8:	83 c4 0c             	add    esp,0xc
c0015fbb:	c3                   	ret    

c0015fbc <Keyboard::~Keyboard()>:
c0015fbc:	83 ec 0c             	sub    esp,0xc
c0015fbf:	ba a8 b7 02 c0       	mov    edx,0xc002b7a8
c0015fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fc8:	89 10                	mov    DWORD PTR [eax],edx
c0015fca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fce:	83 ec 0c             	sub    esp,0xc
c0015fd1:	50                   	push   eax
c0015fd2:	e8 f1 dc ff ff       	call   c0013cc8 <Device::~Device()>
c0015fd7:	83 c4 10             	add    esp,0x10
c0015fda:	90                   	nop
c0015fdb:	83 c4 0c             	add    esp,0xc
c0015fde:	c3                   	ret    
c0015fdf:	90                   	nop

c0015fe0 <Keyboard::~Keyboard()>:
c0015fe0:	83 ec 0c             	sub    esp,0xc
c0015fe3:	83 ec 0c             	sub    esp,0xc
c0015fe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015fea:	e8 cd ff ff ff       	call   c0015fbc <Keyboard::~Keyboard()>
c0015fef:	83 c4 10             	add    esp,0x10
c0015ff2:	83 ec 08             	sub    esp,0x8
c0015ff5:	68 5c 01 00 00       	push   0x15c
c0015ffa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ffe:	e8 e6 c8 ff ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c0016003:	83 c4 10             	add    esp,0x10
c0016006:	83 c4 0c             	add    esp,0xc
c0016009:	c3                   	ret    

c001600a <LogicalDisk::close(int, int, void*)>:
c001600a:	83 c8 ff             	or     eax,0xffffffff
c001600d:	c3                   	ret    

c001600e <LogicalDisk::~LogicalDisk()>:
c001600e:	83 ec 0c             	sub    esp,0xc
c0016011:	ba 20 b8 02 c0       	mov    edx,0xc002b820
c0016016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001601a:	89 10                	mov    DWORD PTR [eax],edx
c001601c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016020:	83 ec 0c             	sub    esp,0xc
c0016023:	50                   	push   eax
c0016024:	e8 9f dc ff ff       	call   c0013cc8 <Device::~Device()>
c0016029:	83 c4 10             	add    esp,0x10
c001602c:	90                   	nop
c001602d:	83 c4 0c             	add    esp,0xc
c0016030:	c3                   	ret    
c0016031:	90                   	nop

c0016032 <LogicalDisk::~LogicalDisk()>:
c0016032:	83 ec 0c             	sub    esp,0xc
c0016035:	83 ec 0c             	sub    esp,0xc
c0016038:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001603c:	e8 cd ff ff ff       	call   c001600e <LogicalDisk::~LogicalDisk()>
c0016041:	83 c4 10             	add    esp,0x10
c0016044:	83 ec 08             	sub    esp,0x8
c0016047:	68 74 01 00 00       	push   0x174
c001604c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016050:	e8 94 c8 ff ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c0016055:	83 c4 10             	add    esp,0x10
c0016058:	83 c4 0c             	add    esp,0xc
c001605b:	c3                   	ret    

c001605c <LogicalDisk::open(int, int, void*)>:
c001605c:	83 ec 18             	sub    esp,0x18
c001605f:	68 d4 b7 02 c0       	push   0xc002b7d4
c0016064:	e8 f6 42 00 00       	call   c001a35f <Krnl::panic(char const*)>
c0016069:	83 c8 ff             	or     eax,0xffffffff
c001606c:	83 c4 1c             	add    esp,0x1c
c001606f:	c3                   	ret    

c0016070 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016070:	53                   	push   ebx
c0016071:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016075:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016079:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001607d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016083:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016089:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001608f:	77 10                	ja     c00160a1 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016091:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0016097:	89 d3                	mov    ebx,edx
c0016099:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001609f:	72 05                	jb     c00160a6 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00160a1:	83 c8 ff             	or     eax,0xffffffff
c00160a4:	89 c2                	mov    edx,eax
c00160a6:	5b                   	pop    ebx
c00160a7:	c3                   	ret    

c00160a8 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00160a8:	56                   	push   esi
c00160a9:	83 c8 ff             	or     eax,0xffffffff
c00160ac:	53                   	push   ebx
c00160ad:	89 c2                	mov    edx,eax
c00160af:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00160b3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00160b7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00160bb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00160c1:	77 27                	ja     c00160ea <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00160c3:	89 d8                	mov    eax,ebx
c00160c5:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00160cb:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00160d1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00160d6:	89 c2                	mov    edx,eax
c00160d8:	73 10                	jae    c00160ea <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00160da:	89 c8                	mov    eax,ecx
c00160dc:	89 da                	mov    edx,ebx
c00160de:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00160e4:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00160ea:	5b                   	pop    ebx
c00160eb:	5e                   	pop    esi
c00160ec:	c3                   	ret    
c00160ed:	90                   	nop

c00160ee <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00160ee:	83 ec 1c             	sub    esp,0x1c
c00160f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00160f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00160f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00160fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016101:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016105:	89 04 24             	mov    DWORD PTR [esp],eax
c0016108:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001610c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016110:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016114:	83 ec 08             	sub    esp,0x8
c0016117:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001611b:	50                   	push   eax
c001611c:	e8 dd de ff ff       	call   c0013ffe <Device::Device(char const*)>
c0016121:	83 c4 10             	add    esp,0x10
c0016124:	ba 20 b8 02 c0       	mov    edx,0xc002b820
c0016129:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001612d:	89 10                	mov    DWORD PTR [eax],edx
c001612f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016133:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001613a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001613e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016145:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016149:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016153:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016157:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001615b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001615f:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016165:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001616b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001616f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016172:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016176:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001617c:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016182:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016186:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001618a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016190:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016194:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001619e:	90                   	nop
c001619f:	83 c4 1c             	add    esp,0x1c
c00161a2:	c3                   	ret    
c00161a3:	90                   	nop

c00161a4 <LogicalDisk::assignDriveLetter()>:
c00161a4:	55                   	push   ebp
c00161a5:	57                   	push   edi
c00161a6:	56                   	push   esi
c00161a7:	53                   	push   ebx
c00161a8:	83 ec 14             	sub    esp,0x14
c00161ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00161af:	8b 3d e0 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002ebe0
c00161b5:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00161bb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00161bf:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00161c5:	8b 3d e4 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002ebe4
c00161cb:	3c 01                	cmp    al,0x1
c00161cd:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00161d1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00161d5:	19 c0                	sbb    eax,eax
c00161d7:	83 e0 02             	and    eax,0x2
c00161da:	83 c0 41             	add    eax,0x41
c00161dd:	0f be e8             	movsx  ebp,al
c00161e0:	3c 43                	cmp    al,0x43
c00161e2:	75 10                	jne    c00161f4 <LogicalDisk::assignDriveLetter()+0x50>
c00161e4:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00161eb:	75 5d                	jne    c001624a <LogicalDisk::assignDriveLetter()+0xa6>
c00161ed:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00161f2:	75 56                	jne    c001624a <LogicalDisk::assignDriveLetter()+0xa6>
c00161f4:	8d 75 bf             	lea    esi,[ebp-0x41]
c00161f7:	ba 01 00 00 00       	mov    edx,0x1
c00161fc:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016200:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016204:	d3 e2                	shl    edx,cl
c0016206:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001620a:	89 d7                	mov    edi,edx
c001620c:	89 d6                	mov    esi,edx
c001620e:	c1 ff 1f             	sar    edi,0x1f
c0016211:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016215:	21 f9                	and    ecx,edi
c0016217:	09 d1                	or     ecx,edx
c0016219:	75 2f                	jne    c001624a <LogicalDisk::assignDriveLetter()+0xa6>
c001621b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001621f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016223:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016229:	09 f2                	or     edx,esi
c001622b:	89 15 e0 eb 02 c0    	mov    DWORD PTR ds:0xc002ebe0,edx
c0016231:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016235:	09 fa                	or     edx,edi
c0016237:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001623b:	89 15 e4 eb 02 c0    	mov    DWORD PTR ds:0xc002ebe4,edx
c0016241:	89 1c bd 00 ec 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1400],ebx
c0016248:	eb 08                	jmp    c0016252 <LogicalDisk::assignDriveLetter()+0xae>
c001624a:	45                   	inc    ebp
c001624b:	40                   	inc    eax
c001624c:	3c 5b                	cmp    al,0x5b
c001624e:	75 90                	jne    c00161e0 <LogicalDisk::assignDriveLetter()+0x3c>
c0016250:	31 c0                	xor    eax,eax
c0016252:	83 c4 14             	add    esp,0x14
c0016255:	5b                   	pop    ebx
c0016256:	5e                   	pop    esi
c0016257:	5f                   	pop    edi
c0016258:	5d                   	pop    ebp
c0016259:	c3                   	ret    

c001625a <LogicalDisk::mount()>:
c001625a:	56                   	push   esi
c001625b:	53                   	push   ebx
c001625c:	53                   	push   ebx
c001625d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016261:	8b 1d 74 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e774
c0016267:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016271:	85 db                	test   ebx,ebx
c0016273:	74 27                	je     c001629c <LogicalDisk::mount()+0x42>
c0016275:	51                   	push   ecx
c0016276:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001627d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001627f:	83 e8 41             	sub    eax,0x41
c0016282:	50                   	push   eax
c0016283:	56                   	push   esi
c0016284:	53                   	push   ebx
c0016285:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016288:	83 c4 10             	add    esp,0x10
c001628b:	84 c0                	test   al,al
c001628d:	74 08                	je     c0016297 <LogicalDisk::mount()+0x3d>
c001628f:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016295:	eb 07                	jmp    c001629e <LogicalDisk::mount()+0x44>
c0016297:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001629a:	eb d5                	jmp    c0016271 <LogicalDisk::mount()+0x17>
c001629c:	31 c0                	xor    eax,eax
c001629e:	5a                   	pop    edx
c001629f:	5b                   	pop    ebx
c00162a0:	5e                   	pop    esi
c00162a1:	c3                   	ret    

c00162a2 <LogicalDisk::unmount()>:
c00162a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162a6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00162b0:	c3                   	ret    
c00162b1:	90                   	nop

c00162b2 <LogicalDisk::eject()>:
c00162b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162b6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00162bc:	8b 10                	mov    edx,DWORD PTR [eax]
c00162be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00162c2:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00162c5:	90                   	nop

c00162c6 <LogicalDisk::unassignDriveLetter()>:
c00162c6:	57                   	push   edi
c00162c7:	56                   	push   esi
c00162c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162cc:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00162d3:	84 c9                	test   cl,cl
c00162d5:	75 0f                	jne    c00162e6 <LogicalDisk::unassignDriveLetter()+0x20>
c00162d7:	c7 44 24 0c f8 b7 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b7f8
c00162df:	5e                   	pop    esi
c00162e0:	5f                   	pop    edi
c00162e1:	e9 79 40 00 00       	jmp    c001a35f <Krnl::panic(char const*)>
c00162e6:	83 e9 41             	sub    ecx,0x41
c00162e9:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00162f0:	b8 01 00 00 00       	mov    eax,0x1
c00162f5:	c7 04 8d 00 ec 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1400],0x0
c0016300:	d3 e0                	shl    eax,cl
c0016302:	89 c7                	mov    edi,eax
c0016304:	f7 d0                	not    eax
c0016306:	c1 ff 1f             	sar    edi,0x1f
c0016309:	21 05 e0 eb 02 c0    	and    DWORD PTR ds:0xc002ebe0,eax
c001630f:	89 fe                	mov    esi,edi
c0016311:	f7 d6                	not    esi
c0016313:	21 35 e4 eb 02 c0    	and    DWORD PTR ds:0xc002ebe4,esi
c0016319:	5e                   	pop    esi
c001631a:	5f                   	pop    edi
c001631b:	c3                   	ret    

c001631c <LogicalDisk::read(unsigned long long, int, void*)>:
c001631c:	57                   	push   edi
c001631d:	56                   	push   esi
c001631e:	53                   	push   ebx
c001631f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016323:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016327:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001632b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001632f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016335:	77 41                	ja     c0016378 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016337:	99                   	cdq    
c0016338:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001633e:	01 c8                	add    eax,ecx
c0016340:	11 da                	adc    edx,ebx
c0016342:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016348:	19 d7                	sbb    edi,edx
c001634a:	72 33                	jb     c001637f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001634c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016352:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016358:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001635c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016360:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016366:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001636c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016370:	5b                   	pop    ebx
c0016371:	5e                   	pop    esi
c0016372:	5f                   	pop    edi
c0016373:	e9 1c 0b 00 00       	jmp    c0016e94 <VCache::read(unsigned long long, int, void*)>
c0016378:	b8 05 00 00 00       	mov    eax,0x5
c001637d:	eb 05                	jmp    c0016384 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001637f:	b8 07 00 00 00       	mov    eax,0x7
c0016384:	5b                   	pop    ebx
c0016385:	5e                   	pop    esi
c0016386:	5f                   	pop    edi
c0016387:	c3                   	ret    

c0016388 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016388:	57                   	push   edi
c0016389:	56                   	push   esi
c001638a:	53                   	push   ebx
c001638b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001638f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016393:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016397:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001639b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00163a1:	77 41                	ja     c00163e4 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00163a3:	99                   	cdq    
c00163a4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00163aa:	01 c8                	add    eax,ecx
c00163ac:	11 da                	adc    edx,ebx
c00163ae:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00163b4:	19 d7                	sbb    edi,edx
c00163b6:	72 33                	jb     c00163eb <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00163b8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00163be:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00163c4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00163c8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00163cc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00163d2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00163d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00163dc:	5b                   	pop    ebx
c00163dd:	5e                   	pop    esi
c00163de:	5f                   	pop    edi
c00163df:	e9 86 09 00 00       	jmp    c0016d6a <VCache::write(unsigned long long, int, void*)>
c00163e4:	b8 05 00 00 00       	mov    eax,0x5
c00163e9:	eb 05                	jmp    c00163f0 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00163eb:	b8 07 00 00 00       	mov    eax,0x7
c00163f0:	5b                   	pop    ebx
c00163f1:	5e                   	pop    esi
c00163f2:	5f                   	pop    edi
c00163f3:	c3                   	ret    

c00163f4 <Mouse::Mouse(char const*)>:
c00163f4:	83 ec 0c             	sub    esp,0xc
c00163f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163fb:	83 ec 08             	sub    esp,0x8
c00163fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016402:	50                   	push   eax
c0016403:	e8 f6 db ff ff       	call   c0013ffe <Device::Device(char const*)>
c0016408:	83 c4 10             	add    esp,0x10
c001640b:	ba 4c b8 02 c0       	mov    edx,0xc002b84c
c0016410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016414:	89 10                	mov    DWORD PTR [eax],edx
c0016416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001641a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016424:	90                   	nop
c0016425:	83 c4 0c             	add    esp,0xc
c0016428:	c3                   	ret    
c0016429:	90                   	nop

c001642a <Mouse::~Mouse()>:
c001642a:	83 ec 0c             	sub    esp,0xc
c001642d:	ba 4c b8 02 c0       	mov    edx,0xc002b84c
c0016432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016436:	89 10                	mov    DWORD PTR [eax],edx
c0016438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001643c:	83 ec 0c             	sub    esp,0xc
c001643f:	50                   	push   eax
c0016440:	e8 83 d8 ff ff       	call   c0013cc8 <Device::~Device()>
c0016445:	83 c4 10             	add    esp,0x10
c0016448:	90                   	nop
c0016449:	83 c4 0c             	add    esp,0xc
c001644c:	c3                   	ret    
c001644d:	90                   	nop

c001644e <Mouse::~Mouse()>:
c001644e:	83 ec 0c             	sub    esp,0xc
c0016451:	83 ec 0c             	sub    esp,0xc
c0016454:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016458:	e8 cd ff ff ff       	call   c001642a <Mouse::~Mouse()>
c001645d:	83 c4 10             	add    esp,0x10
c0016460:	83 ec 08             	sub    esp,0x8
c0016463:	68 58 01 00 00       	push   0x158
c0016468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001646c:	e8 78 c4 ff ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c0016471:	83 c4 10             	add    esp,0x10
c0016474:	83 c4 0c             	add    esp,0xc
c0016477:	c3                   	ret    

c0016478 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016478:	55                   	push   ebp
c0016479:	57                   	push   edi
c001647a:	56                   	push   esi
c001647b:	53                   	push   ebx
c001647c:	81 ec 28 01 00 00    	sub    esp,0x128
c0016482:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016489:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016490:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016497:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001649e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00164a2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00164a6:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00164ad:	e8 48 dc ff ff       	call   c00140fa <Device::getName()>
c00164b2:	5a                   	pop    edx
c00164b3:	59                   	pop    ecx
c00164b4:	50                   	push   eax
c00164b5:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00164b9:	55                   	push   ebp
c00164ba:	e8 4d a3 fe ff       	call   c000080c <strcpy>
c00164bf:	5b                   	pop    ebx
c00164c0:	58                   	pop    eax
c00164c1:	68 70 b8 02 c0       	push   0xc002b870
c00164c6:	55                   	push   ebp
c00164c7:	e8 80 a4 fe ff       	call   c000094c <strcat>
c00164cc:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00164d3:	e8 91 94 ff ff       	call   c000f969 <malloc>
c00164d8:	83 c4 0c             	add    esp,0xc
c00164db:	89 c3                	mov    ebx,eax
c00164dd:	57                   	push   edi
c00164de:	56                   	push   esi
c00164df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00164e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00164e7:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00164ee:	55                   	push   ebp
c00164ef:	50                   	push   eax
c00164f0:	e8 f9 fb ff ff       	call   c00160ee <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00164f5:	83 c4 14             	add    esp,0x14
c00164f8:	53                   	push   ebx
c00164f9:	e8 a6 fc ff ff       	call   c00161a4 <LogicalDisk::assignDriveLetter()>
c00164fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016501:	e8 54 fd ff ff       	call   c001625a <LogicalDisk::mount()>
c0016506:	58                   	pop    eax
c0016507:	5a                   	pop    edx
c0016508:	53                   	push   ebx
c0016509:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016510:	e8 e5 d8 ff ff       	call   c0013dfa <Device::addChild(Device*)>
c0016515:	81 c4 2c 01 00 00    	add    esp,0x12c
c001651b:	5b                   	pop    ebx
c001651c:	5e                   	pop    esi
c001651d:	5f                   	pop    edi
c001651e:	5d                   	pop    ebp
c001651f:	c3                   	ret    

c0016520 <createPartitionsForDisk(PhysicalDisk*)>:
c0016520:	55                   	push   ebp
c0016521:	57                   	push   edi
c0016522:	56                   	push   esi
c0016523:	53                   	push   ebx
c0016524:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001652a:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016531:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016537:	3d 00 02 00 00       	cmp    eax,0x200
c001653c:	74 27                	je     c0016565 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001653e:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016544:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001654a:	83 ec 10             	sub    esp,0x10
c001654d:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016551:	99                   	cdq    
c0016552:	c1 e6 0a             	shl    esi,0xa
c0016555:	52                   	push   edx
c0016556:	89 fd                	mov    ebp,edi
c0016558:	50                   	push   eax
c0016559:	55                   	push   ebp
c001655a:	56                   	push   esi
c001655b:	e8 34 08 01 00       	call   c0026d94 <__udivdi3>
c0016560:	e9 b1 00 00 00       	jmp    c0016616 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016565:	83 ec 0c             	sub    esp,0xc
c0016568:	8b 03                	mov    eax,DWORD PTR [ebx]
c001656a:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001656e:	56                   	push   esi
c001656f:	6a 01                	push   0x1
c0016571:	6a 00                	push   0x0
c0016573:	6a 00                	push   0x0
c0016575:	53                   	push   ebx
c0016576:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016579:	83 c4 20             	add    esp,0x20
c001657c:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016584:	75 0a                	jne    c0016590 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016586:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001658e:	74 2c                	je     c00165bc <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016590:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016596:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001659c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00165a2:	83 ec 10             	sub    esp,0x10
c00165a5:	0f a4 c2 0a          	shld   edx,eax,0xa
c00165a9:	89 f7                	mov    edi,esi
c00165ab:	c1 e0 0a             	shl    eax,0xa
c00165ae:	c1 ff 1f             	sar    edi,0x1f
c00165b1:	57                   	push   edi
c00165b2:	56                   	push   esi
c00165b3:	52                   	push   edx
c00165b4:	50                   	push   eax
c00165b5:	e8 da 07 01 00       	call   c0026d94 <__udivdi3>
c00165ba:	eb 5a                	jmp    c0016616 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00165bc:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00165c3:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00165ca:	83 e1 7f             	and    ecx,0x7f
c00165cd:	83 e0 7f             	and    eax,0x7f
c00165d0:	01 c1                	add    ecx,eax
c00165d2:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00165d9:	83 e0 7f             	and    eax,0x7f
c00165dc:	01 c1                	add    ecx,eax
c00165de:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00165e5:	83 e0 7f             	and    eax,0x7f
c00165e8:	00 c1                	add    cl,al
c00165ea:	74 41                	je     c001662d <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00165ec:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00165f2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00165f8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00165fe:	83 ec 10             	sub    esp,0x10
c0016601:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016605:	89 f7                	mov    edi,esi
c0016607:	c1 e0 0a             	shl    eax,0xa
c001660a:	c1 ff 1f             	sar    edi,0x1f
c001660d:	57                   	push   edi
c001660e:	56                   	push   esi
c001660f:	52                   	push   edx
c0016610:	50                   	push   eax
c0016611:	e8 7e 07 01 00       	call   c0026d94 <__udivdi3>
c0016616:	83 c4 14             	add    esp,0x14
c0016619:	52                   	push   edx
c001661a:	50                   	push   eax
c001661b:	6a 00                	push   0x0
c001661d:	6a 00                	push   0x0
c001661f:	53                   	push   ebx
c0016620:	e8 53 fe ff ff       	call   c0016478 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016625:	83 c4 20             	add    esp,0x20
c0016628:	e9 79 01 00 00       	jmp    c00167a6 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001662d:	89 f0                	mov    eax,esi
c001662f:	31 f6                	xor    esi,esi
c0016631:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016638:	75 02                	jne    c001663c <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001663a:	89 f1                	mov    ecx,esi
c001663c:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016643:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001664a:	c1 e2 08             	shl    edx,0x8
c001664d:	c1 e7 10             	shl    edi,0x10
c0016650:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016658:	09 fa                	or     edx,edi
c001665a:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016662:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016669:	83 c0 10             	add    eax,0x10
c001666c:	09 fa                	or     edx,edi
c001666e:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016675:	c1 e7 18             	shl    edi,0x18
c0016678:	09 fa                	or     edx,edi
c001667a:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016681:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016685:	c1 e7 10             	shl    edi,0x10
c0016688:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001668f:	c1 e2 08             	shl    edx,0x8
c0016692:	09 fa                	or     edx,edi
c0016694:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001669b:	09 fa                	or     edx,edi
c001669d:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00166a4:	c1 e7 18             	shl    edi,0x18
c00166a7:	09 fa                	or     edx,edi
c00166a9:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00166ad:	46                   	inc    esi
c00166ae:	83 fe 04             	cmp    esi,0x4
c00166b1:	0f 85 7a ff ff ff    	jne    c0016631 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00166b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166bb:	83 f0 01             	xor    eax,0x1
c00166be:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00166c2:	75 57                	jne    c001671b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00166c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166c8:	83 f0 01             	xor    eax,0x1
c00166cb:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00166cf:	75 4a                	jne    c001671b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00166d1:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00166d5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00166dd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00166e5:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00166eb:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00166f1:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00166f7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00166fb:	89 f7                	mov    edi,esi
c00166fd:	c1 e0 0a             	shl    eax,0xa
c0016700:	c1 ff 1f             	sar    edi,0x1f
c0016703:	57                   	push   edi
c0016704:	56                   	push   esi
c0016705:	52                   	push   edx
c0016706:	50                   	push   eax
c0016707:	e8 88 06 01 00       	call   c0026d94 <__udivdi3>
c001670c:	83 c4 10             	add    esp,0x10
c001670f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016713:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016717:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001671b:	84 c9                	test   cl,cl
c001671d:	74 53                	je     c0016772 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001671f:	0f b6 c9             	movzx  ecx,cl
c0016722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016726:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001672a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001672e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016736:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001673a:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001673e:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016742:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016746:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001674a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001674e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016752:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016756:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001675a:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001675e:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016762:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016766:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001676a:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001676e:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016772:	31 ed                	xor    ebp,ebp
c0016774:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016778:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001677c:	89 f8                	mov    eax,edi
c001677e:	09 f0                	or     eax,esi
c0016780:	74 1e                	je     c00167a0 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016782:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016786:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001678a:	89 d1                	mov    ecx,edx
c001678c:	09 c1                	or     ecx,eax
c001678e:	74 10                	je     c00167a0 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016790:	83 ec 0c             	sub    esp,0xc
c0016793:	57                   	push   edi
c0016794:	56                   	push   esi
c0016795:	52                   	push   edx
c0016796:	50                   	push   eax
c0016797:	53                   	push   ebx
c0016798:	e8 db fc ff ff       	call   c0016478 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001679d:	83 c4 20             	add    esp,0x20
c00167a0:	45                   	inc    ebp
c00167a1:	83 fd 04             	cmp    ebp,0x4
c00167a4:	75 ce                	jne    c0016774 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00167a6:	81 c4 5c 02 00 00    	add    esp,0x25c
c00167ac:	5b                   	pop    ebx
c00167ad:	5e                   	pop    esi
c00167ae:	5f                   	pop    edi
c00167af:	5d                   	pop    ebp
c00167b0:	c3                   	ret    
c00167b1:	90                   	nop

c00167b2 <Serial::Serial(char const*)>:
c00167b2:	83 ec 0c             	sub    esp,0xc
c00167b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167b9:	83 ec 08             	sub    esp,0x8
c00167bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167c0:	50                   	push   eax
c00167c1:	e8 38 d8 ff ff       	call   c0013ffe <Device::Device(char const*)>
c00167c6:	83 c4 10             	add    esp,0x10
c00167c9:	ba 84 b8 02 c0       	mov    edx,0xc002b884
c00167ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167d2:	89 10                	mov    DWORD PTR [eax],edx
c00167d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167d8:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00167e2:	90                   	nop
c00167e3:	83 c4 0c             	add    esp,0xc
c00167e6:	c3                   	ret    
c00167e7:	90                   	nop

c00167e8 <Serial::~Serial()>:
c00167e8:	83 ec 0c             	sub    esp,0xc
c00167eb:	ba 84 b8 02 c0       	mov    edx,0xc002b884
c00167f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167f4:	89 10                	mov    DWORD PTR [eax],edx
c00167f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167fa:	83 ec 0c             	sub    esp,0xc
c00167fd:	50                   	push   eax
c00167fe:	e8 c5 d4 ff ff       	call   c0013cc8 <Device::~Device()>
c0016803:	83 c4 10             	add    esp,0x10
c0016806:	90                   	nop
c0016807:	83 c4 0c             	add    esp,0xc
c001680a:	c3                   	ret    
c001680b:	90                   	nop

c001680c <Serial::~Serial()>:
c001680c:	83 ec 0c             	sub    esp,0xc
c001680f:	83 ec 0c             	sub    esp,0xc
c0016812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016816:	e8 cd ff ff ff       	call   c00167e8 <Serial::~Serial()>
c001681b:	83 c4 10             	add    esp,0x10
c001681e:	83 ec 08             	sub    esp,0x8
c0016821:	68 58 01 00 00       	push   0x158
c0016826:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001682a:	e8 ba c0 ff ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c001682f:	83 c4 10             	add    esp,0x10
c0016832:	83 c4 0c             	add    esp,0xc
c0016835:	c3                   	ret    

c0016836 <Timer::Timer(char const*)>:
c0016836:	83 ec 0c             	sub    esp,0xc
c0016839:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001683d:	83 ec 08             	sub    esp,0x8
c0016840:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016844:	50                   	push   eax
c0016845:	e8 b4 d7 ff ff       	call   c0013ffe <Device::Device(char const*)>
c001684a:	83 c4 10             	add    esp,0x10
c001684d:	ba c8 b8 02 c0       	mov    edx,0xc002b8c8
c0016852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016856:	89 10                	mov    DWORD PTR [eax],edx
c0016858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001685c:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016866:	90                   	nop
c0016867:	83 c4 0c             	add    esp,0xc
c001686a:	c3                   	ret    
c001686b:	90                   	nop

c001686c <Timer::~Timer()>:
c001686c:	83 ec 0c             	sub    esp,0xc
c001686f:	ba c8 b8 02 c0       	mov    edx,0xc002b8c8
c0016874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016878:	89 10                	mov    DWORD PTR [eax],edx
c001687a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001687e:	83 ec 0c             	sub    esp,0xc
c0016881:	50                   	push   eax
c0016882:	e8 41 d4 ff ff       	call   c0013cc8 <Device::~Device()>
c0016887:	83 c4 10             	add    esp,0x10
c001688a:	90                   	nop
c001688b:	83 c4 0c             	add    esp,0xc
c001688e:	c3                   	ret    
c001688f:	90                   	nop

c0016890 <Timer::~Timer()>:
c0016890:	83 ec 0c             	sub    esp,0xc
c0016893:	83 ec 0c             	sub    esp,0xc
c0016896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001689a:	e8 cd ff ff ff       	call   c001686c <Timer::~Timer()>
c001689f:	83 c4 10             	add    esp,0x10
c00168a2:	83 ec 08             	sub    esp,0x8
c00168a5:	68 5c 01 00 00       	push   0x15c
c00168aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168ae:	e8 36 c0 ff ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c00168b3:	83 c4 10             	add    esp,0x10
c00168b6:	83 c4 0c             	add    esp,0xc
c00168b9:	c3                   	ret    

c00168ba <Timer::read()>:
c00168ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00168be:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00168c4:	c3                   	ret    

c00168c5 <timerHandler(unsigned long long)>:
c00168c5:	55                   	push   ebp
c00168c6:	57                   	push   edi
c00168c7:	56                   	push   esi
c00168c8:	53                   	push   ebx
c00168c9:	83 ec 0c             	sub    esp,0xc
c00168cc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00168d0:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00168d4:	01 35 70 ec 02 c0    	add    DWORD PTR ds:0xc002ec70,esi
c00168da:	11 3d 74 ec 02 c0    	adc    DWORD PTR ds:0xc002ec74,edi
c00168e0:	80 3d 0d e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e60d,0x0
c00168e7:	0f 84 42 01 00 00    	je     c0016a2f <timerHandler(unsigned long long)+0x16a>
c00168ed:	fa                   	cli    
c00168ee:	ff 05 08 fb 02 c0    	inc    DWORD PTR ds:0xc002fb08
c00168f4:	83 ec 0c             	sub    esp,0xc
c00168f7:	ff 05 04 fb 02 c0    	inc    DWORD PTR ds:0xc002fb04
c00168fd:	68 18 fb 02 c0       	push   0xc002fb18
c0016902:	e8 e7 24 01 00       	call   c0028dee <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016907:	83 c4 10             	add    esp,0x10
c001690a:	84 c0                	test   al,al
c001690c:	0f 85 a2 00 00 00    	jne    c00169b4 <timerHandler(unsigned long long)+0xef>
c0016912:	83 ec 0c             	sub    esp,0xc
c0016915:	68 18 fb 02 c0       	push   0xc002fb18
c001691a:	e8 eb 24 01 00       	call   c0028e0a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001691f:	83 c4 10             	add    esp,0x10
c0016922:	89 c3                	mov    ebx,eax
c0016924:	83 ec 0c             	sub    esp,0xc
c0016927:	68 18 fb 02 c0       	push   0xc002fb18
c001692c:	e8 d9 24 01 00       	call   c0028e0a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016931:	c7 04 24 18 fb 02 c0 	mov    DWORD PTR [esp],0xc002fb18
c0016938:	89 c5                	mov    ebp,eax
c001693a:	e8 d3 24 01 00       	call   c0028e12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001693f:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016942:	83 c4 10             	add    esp,0x10
c0016945:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016948:	39 15 70 ec 02 c0    	cmp    DWORD PTR ds:0xc002ec70,edx
c001694e:	a1 74 ec 02 c0       	mov    eax,ds:0xc002ec74
c0016953:	19 c8                	sbb    eax,ecx
c0016955:	72 21                	jb     c0016978 <timerHandler(unsigned long long)+0xb3>
c0016957:	83 ec 0c             	sub    esp,0xc
c001695a:	55                   	push   ebp
c001695b:	e8 23 7a 00 00       	call   c001e383 <unblockTask(ThreadControlBlock*)>
c0016960:	83 c4 10             	add    esp,0x10
c0016963:	39 eb                	cmp    ebx,ebp
c0016965:	75 21                	jne    c0016988 <timerHandler(unsigned long long)+0xc3>
c0016967:	83 ec 0c             	sub    esp,0xc
c001696a:	68 18 fb 02 c0       	push   0xc002fb18
c001696f:	e8 96 24 01 00       	call   c0028e0a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016974:	89 c3                	mov    ebx,eax
c0016976:	eb 0d                	jmp    c0016985 <timerHandler(unsigned long long)+0xc0>
c0016978:	50                   	push   eax
c0016979:	50                   	push   eax
c001697a:	55                   	push   ebp
c001697b:	68 18 fb 02 c0       	push   0xc002fb18
c0016980:	e8 3b 25 01 00       	call   c0028ec0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016985:	83 c4 10             	add    esp,0x10
c0016988:	83 ec 0c             	sub    esp,0xc
c001698b:	68 18 fb 02 c0       	push   0xc002fb18
c0016990:	e8 59 24 01 00       	call   c0028dee <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016995:	83 c4 10             	add    esp,0x10
c0016998:	84 c0                	test   al,al
c001699a:	75 18                	jne    c00169b4 <timerHandler(unsigned long long)+0xef>
c001699c:	83 ec 0c             	sub    esp,0xc
c001699f:	68 18 fb 02 c0       	push   0xc002fb18
c00169a4:	e8 61 24 01 00       	call   c0028e0a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00169a9:	83 c4 10             	add    esp,0x10
c00169ac:	39 d8                	cmp    eax,ebx
c00169ae:	0f 85 70 ff ff ff    	jne    c0016924 <timerHandler(unsigned long long)+0x5f>
c00169b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169b9:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c00169bd:	74 3d                	je     c00169fc <timerHandler(unsigned long long)+0x137>
c00169bf:	80 3d 0c e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e60c,0x0
c00169c6:	74 34                	je     c00169fc <timerHandler(unsigned long long)+0x137>
c00169c8:	fa                   	cli    
c00169c9:	ff 05 08 fb 02 c0    	inc    DWORD PTR ds:0xc002fb08
c00169cf:	31 d2                	xor    edx,edx
c00169d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169d6:	89 f9                	mov    ecx,edi
c00169d8:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00169db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169e0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00169e3:	39 c6                	cmp    esi,eax
c00169e5:	19 d1                	sbb    ecx,edx
c00169e7:	72 05                	jb     c00169ee <timerHandler(unsigned long long)+0x129>
c00169e9:	e8 03 75 00 00       	call   c001def1 <schedule()>
c00169ee:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c00169f3:	48                   	dec    eax
c00169f4:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c00169f9:	75 01                	jne    c00169fc <timerHandler(unsigned long long)+0x137>
c00169fb:	fb                   	sti    
c00169fc:	a1 04 fb 02 c0       	mov    eax,ds:0xc002fb04
c0016a01:	48                   	dec    eax
c0016a02:	a3 04 fb 02 c0       	mov    ds:0xc002fb04,eax
c0016a07:	75 18                	jne    c0016a21 <timerHandler(unsigned long long)+0x15c>
c0016a09:	83 3d 00 fb 02 c0 00 	cmp    DWORD PTR ds:0xc002fb00,0x0
c0016a10:	74 0f                	je     c0016a21 <timerHandler(unsigned long long)+0x15c>
c0016a12:	c7 05 00 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb00,0x0
c0016a1c:	e8 d0 74 00 00       	call   c001def1 <schedule()>
c0016a21:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c0016a26:	48                   	dec    eax
c0016a27:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c0016a2c:	75 01                	jne    c0016a2f <timerHandler(unsigned long long)+0x16a>
c0016a2e:	fb                   	sti    
c0016a2f:	83 c4 0c             	add    esp,0xc
c0016a32:	5b                   	pop    ebx
c0016a33:	5e                   	pop    esi
c0016a34:	5f                   	pop    edi
c0016a35:	5d                   	pop    ebp
c0016a36:	c3                   	ret    

c0016a37 <setupTimer(int)>:
c0016a37:	57                   	push   edi
c0016a38:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0016a3d:	56                   	push   esi
c0016a3e:	53                   	push   ebx
c0016a3f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016a43:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016a49:	83 ec 0c             	sub    esp,0xc
c0016a4c:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016a52:	e8 a3 d6 ff ff       	call   c00140fa <Device::getName()>
c0016a57:	83 c4 10             	add    esp,0x10
c0016a5a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016a5d:	0f 85 8d 00 00 00    	jne    c0016af0 <setupTimer(int)+0xb9>
c0016a63:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0016a68:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016a6f:	74 7f                	je     c0016af0 <setupTimer(int)+0xb9>
c0016a71:	83 ec 0c             	sub    esp,0xc
c0016a74:	68 5c 01 00 00       	push   0x15c
c0016a79:	e8 eb 8e ff ff       	call   c000f969 <malloc>
c0016a7e:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a81:	89 c3                	mov    ebx,eax
c0016a83:	e8 e2 fe 00 00       	call   c002696a <PIT::PIT()>
c0016a88:	59                   	pop    ecx
c0016a89:	5f                   	pop    edi
c0016a8a:	53                   	push   ebx
c0016a8b:	ff 35 08 e6 02 c0    	push   DWORD PTR ds:0xc002e608
c0016a91:	e8 64 d3 ff ff       	call   c0013dfa <Device::addChild(Device*)>
c0016a96:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a98:	6a 00                	push   0x0
c0016a9a:	6a 00                	push   0x0
c0016a9c:	56                   	push   esi
c0016a9d:	53                   	push   ebx
c0016a9e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016aa1:	83 c4 14             	add    esp,0x14
c0016aa4:	68 60 01 00 00       	push   0x160
c0016aa9:	e8 bb 8e ff ff       	call   c000f969 <malloc>
c0016aae:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ab1:	89 c7                	mov    edi,eax
c0016ab3:	e8 62 fd 00 00       	call   c002681a <APICTimer::APICTimer()>
c0016ab8:	6a 00                	push   0x0
c0016aba:	6a 00                	push   0x0
c0016abc:	56                   	push   esi
c0016abd:	57                   	push   edi
c0016abe:	e8 59 fc 00 00       	call   c002671c <APICTimer::open(int, int, void*)>
c0016ac3:	83 c4 20             	add    esp,0x20
c0016ac6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ac8:	6a 00                	push   0x0
c0016aca:	6a 00                	push   0x0
c0016acc:	6a 00                	push   0x0
c0016ace:	53                   	push   ebx
c0016acf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016ad2:	58                   	pop    eax
c0016ad3:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0016ad8:	5a                   	pop    edx
c0016ad9:	57                   	push   edi
c0016ada:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ae0:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016ae6:	e8 0f d3 ff ff       	call   c0013dfa <Device::addChild(Device*)>
c0016aeb:	83 c4 10             	add    esp,0x10
c0016aee:	eb 33                	jmp    c0016b23 <setupTimer(int)+0xec>
c0016af0:	83 ec 0c             	sub    esp,0xc
c0016af3:	68 5c 01 00 00       	push   0x15c
c0016af8:	e8 6c 8e ff ff       	call   c000f969 <malloc>
c0016afd:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b00:	89 c3                	mov    ebx,eax
c0016b02:	e8 63 fe 00 00       	call   c002696a <PIT::PIT()>
c0016b07:	58                   	pop    eax
c0016b08:	5a                   	pop    edx
c0016b09:	53                   	push   ebx
c0016b0a:	ff 35 08 e6 02 c0    	push   DWORD PTR ds:0xc002e608
c0016b10:	e8 e5 d2 ff ff       	call   c0013dfa <Device::addChild(Device*)>
c0016b15:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b17:	6a 00                	push   0x0
c0016b19:	6a 00                	push   0x0
c0016b1b:	56                   	push   esi
c0016b1c:	53                   	push   ebx
c0016b1d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b20:	83 c4 20             	add    esp,0x20
c0016b23:	89 d8                	mov    eax,ebx
c0016b25:	5b                   	pop    ebx
c0016b26:	5e                   	pop    esi
c0016b27:	5f                   	pop    edi
c0016b28:	c3                   	ret    
c0016b29:	90                   	nop

c0016b2a <VCache::VCache(PhysicalDisk*)>:
c0016b2a:	53                   	push   ebx
c0016b2b:	83 ec 18             	sub    esp,0x18
c0016b2e:	ba 18 ba 02 c0       	mov    edx,0xc002ba18
c0016b33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b37:	89 10                	mov    DWORD PTR [eax],edx
c0016b39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b3d:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016b44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b48:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016b4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b53:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016b5a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016b61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b65:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016b6c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016b73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b77:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016b7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b82:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016b86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b8a:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016b91:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016b98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b9c:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016ba0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ba4:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016ba8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bac:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016bb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bb4:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016bbb:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016bc3:	83 ec 0c             	sub    esp,0xc
c0016bc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016bca:	e8 9a 8d ff ff       	call   c000f969 <malloc>
c0016bcf:	83 c4 10             	add    esp,0x10
c0016bd2:	89 c3                	mov    ebx,eax
c0016bd4:	83 ec 0c             	sub    esp,0xc
c0016bd7:	53                   	push   ebx
c0016bd8:	e8 dd 70 00 00       	call   c001dcba <Mutex::Mutex()>
c0016bdd:	83 c4 10             	add    esp,0x10
c0016be0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016be4:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016be7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016beb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016bef:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016bf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bf6:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016bfd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c01:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016c07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c0b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016c0e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c12:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016c18:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016c1e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016c22:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016c25:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016c28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c2c:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016c30:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c34:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016c3a:	05 00 01 00 00       	add    eax,0x100
c0016c3f:	c1 e0 04             	shl    eax,0x4
c0016c42:	83 ec 0c             	sub    esp,0xc
c0016c45:	50                   	push   eax
c0016c46:	e8 1e 8d ff ff       	call   c000f969 <malloc>
c0016c4b:	83 c4 10             	add    esp,0x10
c0016c4e:	89 c2                	mov    edx,eax
c0016c50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c54:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016c57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c5b:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016c62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c66:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016c6a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c6e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016c74:	c1 e0 07             	shl    eax,0x7
c0016c77:	83 ec 0c             	sub    esp,0xc
c0016c7a:	50                   	push   eax
c0016c7b:	e8 e9 8c ff ff       	call   c000f969 <malloc>
c0016c80:	83 c4 10             	add    esp,0x10
c0016c83:	89 c2                	mov    edx,eax
c0016c85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c89:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016c8c:	90                   	nop
c0016c8d:	83 c4 18             	add    esp,0x18
c0016c90:	5b                   	pop    ebx
c0016c91:	c3                   	ret    

c0016c92 <VCache::invalidateReadBuffer()>:
c0016c92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c96:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016c9c:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016ca0:	c3                   	ret    
c0016ca1:	90                   	nop

c0016ca2 <VCache::writeWriteBuffer()>:
c0016ca2:	53                   	push   ebx
c0016ca3:	83 ec 0c             	sub    esp,0xc
c0016ca6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016caa:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016cad:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016cb0:	68 f0 b8 02 c0       	push   0xc002b8f0
c0016cb5:	e8 07 bd ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0016cba:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016cbd:	5a                   	pop    edx
c0016cbe:	8b 10                	mov    edx,DWORD PTR [eax]
c0016cc0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016cc3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016cc6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016cc9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016ccc:	50                   	push   eax
c0016ccd:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016cd0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016cd7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016cde:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016ce2:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016ce9:	83 c4 28             	add    esp,0x28
c0016cec:	5b                   	pop    ebx
c0016ced:	c3                   	ret    

c0016cee <VCache::~VCache()>:
c0016cee:	83 ec 0c             	sub    esp,0xc
c0016cf1:	ba 18 ba 02 c0       	mov    edx,0xc002ba18
c0016cf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cfa:	89 10                	mov    DWORD PTR [eax],edx
c0016cfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d00:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016d03:	84 c0                	test   al,al
c0016d05:	74 0f                	je     c0016d16 <VCache::~VCache()+0x28>
c0016d07:	83 ec 0c             	sub    esp,0xc
c0016d0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d0e:	e8 8f ff ff ff       	call   c0016ca2 <VCache::writeWriteBuffer()>
c0016d13:	83 c4 10             	add    esp,0x10
c0016d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d1a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016d1d:	83 ec 0c             	sub    esp,0xc
c0016d20:	50                   	push   eax
c0016d21:	e8 53 8c ff ff       	call   c000f979 <free>
c0016d26:	83 c4 10             	add    esp,0x10
c0016d29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d2d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016d30:	83 ec 0c             	sub    esp,0xc
c0016d33:	50                   	push   eax
c0016d34:	e8 40 8c ff ff       	call   c000f979 <free>
c0016d39:	83 c4 10             	add    esp,0x10
c0016d3c:	90                   	nop
c0016d3d:	83 c4 0c             	add    esp,0xc
c0016d40:	c3                   	ret    
c0016d41:	90                   	nop

c0016d42 <VCache::~VCache()>:
c0016d42:	83 ec 0c             	sub    esp,0xc
c0016d45:	83 ec 0c             	sub    esp,0xc
c0016d48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d4c:	e8 9d ff ff ff       	call   c0016cee <VCache::~VCache()>
c0016d51:	83 c4 10             	add    esp,0x10
c0016d54:	83 ec 08             	sub    esp,0x8
c0016d57:	6a 44                	push   0x44
c0016d59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d5d:	e8 87 bb ff ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c0016d62:	83 c4 10             	add    esp,0x10
c0016d65:	83 c4 0c             	add    esp,0xc
c0016d68:	c3                   	ret    
c0016d69:	90                   	nop

c0016d6a <VCache::write(unsigned long long, int, void*)>:
c0016d6a:	55                   	push   ebp
c0016d6b:	57                   	push   edi
c0016d6c:	56                   	push   esi
c0016d6d:	53                   	push   ebx
c0016d6e:	83 ec 18             	sub    esp,0x18
c0016d71:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016d75:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d79:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016d7d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0016d81:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016d84:	e8 77 74 00 00       	call   c001e200 <Semaphore::acquire()>
c0016d89:	c7 04 24 14 b9 02 c0 	mov    DWORD PTR [esp],0xc002b914
c0016d90:	e8 2c bc ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0016d95:	83 c4 10             	add    esp,0x10
c0016d98:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016d9c:	74 0c                	je     c0016daa <VCache::write(unsigned long long, int, void*)+0x40>
c0016d9e:	83 ec 0c             	sub    esp,0xc
c0016da1:	53                   	push   ebx
c0016da2:	e8 eb fe ff ff       	call   c0016c92 <VCache::invalidateReadBuffer()>
c0016da7:	83 c4 10             	add    esp,0x10
c0016daa:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016dae:	74 66                	je     c0016e16 <VCache::write(unsigned long long, int, void*)+0xac>
c0016db0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016db3:	99                   	cdq    
c0016db4:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016db7:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016dba:	31 f0                	xor    eax,esi
c0016dbc:	89 d1                	mov    ecx,edx
c0016dbe:	89 ca                	mov    edx,ecx
c0016dc0:	31 fa                	xor    edx,edi
c0016dc2:	09 d0                	or     eax,edx
c0016dc4:	75 44                	jne    c0016e0a <VCache::write(unsigned long long, int, void*)+0xa0>
c0016dc6:	83 fd 01             	cmp    ebp,0x1
c0016dc9:	75 3f                	jne    c0016e0a <VCache::write(unsigned long long, int, void*)+0xa0>
c0016dcb:	83 ec 0c             	sub    esp,0xc
c0016dce:	68 3b b9 02 c0       	push   0xc002b93b
c0016dd3:	e8 e9 bb ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0016dd8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ddb:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016dde:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016de4:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016de8:	0f af f9             	imul   edi,ecx
c0016deb:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016dee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016df0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016df3:	83 c4 10             	add    esp,0x10
c0016df6:	40                   	inc    eax
c0016df7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016dfa:	83 c0 80             	add    eax,0xffffff80
c0016dfd:	75 75                	jne    c0016e74 <VCache::write(unsigned long long, int, void*)+0x10a>
c0016dff:	83 ec 0c             	sub    esp,0xc
c0016e02:	53                   	push   ebx
c0016e03:	e8 9a fe ff ff       	call   c0016ca2 <VCache::writeWriteBuffer()>
c0016e08:	eb 41                	jmp    c0016e4b <VCache::write(unsigned long long, int, void*)+0xe1>
c0016e0a:	83 ec 0c             	sub    esp,0xc
c0016e0d:	53                   	push   ebx
c0016e0e:	e8 8f fe ff ff       	call   c0016ca2 <VCache::writeWriteBuffer()>
c0016e13:	83 c4 10             	add    esp,0x10
c0016e16:	83 fd 7f             	cmp    ebp,0x7f
c0016e19:	7f 35                	jg     c0016e50 <VCache::write(unsigned long long, int, void*)+0xe6>
c0016e1b:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016e1e:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016e21:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016e24:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016e28:	56                   	push   esi
c0016e29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016e2d:	6a 01                	push   0x1
c0016e2f:	68 51 b9 02 c0       	push   0xc002b951
c0016e34:	e8 88 bb ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0016e39:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e3c:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016e3f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016e45:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016e49:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e4b:	83 c4 10             	add    esp,0x10
c0016e4e:	eb 24                	jmp    c0016e74 <VCache::write(unsigned long long, int, void*)+0x10a>
c0016e50:	52                   	push   edx
c0016e51:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016e55:	55                   	push   ebp
c0016e56:	68 72 b9 02 c0       	push   0xc002b972
c0016e5b:	e8 61 bb ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0016e60:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e63:	59                   	pop    ecx
c0016e64:	8b 10                	mov    edx,DWORD PTR [eax]
c0016e66:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016e6a:	55                   	push   ebp
c0016e6b:	57                   	push   edi
c0016e6c:	56                   	push   esi
c0016e6d:	50                   	push   eax
c0016e6e:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016e71:	83 c4 20             	add    esp,0x20
c0016e74:	83 ec 0c             	sub    esp,0xc
c0016e77:	68 8f b9 02 c0       	push   0xc002b98f
c0016e7c:	e8 40 bb ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0016e81:	58                   	pop    eax
c0016e82:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016e85:	e8 e2 79 00 00       	call   c001e86c <Semaphore::release()>
c0016e8a:	83 c4 1c             	add    esp,0x1c
c0016e8d:	31 c0                	xor    eax,eax
c0016e8f:	5b                   	pop    ebx
c0016e90:	5e                   	pop    esi
c0016e91:	5f                   	pop    edi
c0016e92:	5d                   	pop    ebp
c0016e93:	c3                   	ret    

c0016e94 <VCache::read(unsigned long long, int, void*)>:
c0016e94:	55                   	push   ebp
c0016e95:	57                   	push   edi
c0016e96:	56                   	push   esi
c0016e97:	53                   	push   ebx
c0016e98:	83 ec 28             	sub    esp,0x28
c0016e9b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016e9f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016ea3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016ea7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016eab:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016eaf:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016eb3:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0016eb7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016eba:	e8 41 73 00 00       	call   c001e200 <Semaphore::acquire()>
c0016ebf:	c7 04 24 af b9 02 c0 	mov    DWORD PTR [esp],0xc002b9af
c0016ec6:	e8 f6 ba ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0016ecb:	83 c4 10             	add    esp,0x10
c0016ece:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016ed2:	74 0c                	je     c0016ee0 <VCache::read(unsigned long long, int, void*)+0x4c>
c0016ed4:	83 ec 0c             	sub    esp,0xc
c0016ed7:	53                   	push   ebx
c0016ed8:	e8 c5 fd ff ff       	call   c0016ca2 <VCache::writeWriteBuffer()>
c0016edd:	83 c4 10             	add    esp,0x10
c0016ee0:	83 fe 01             	cmp    esi,0x1
c0016ee3:	75 79                	jne    c0016f5e <VCache::read(unsigned long long, int, void*)+0xca>
c0016ee5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ee8:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016eef:	75 6d                	jne    c0016f5e <VCache::read(unsigned long long, int, void*)+0xca>
c0016ef1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016ef4:	89 d1                	mov    ecx,edx
c0016ef6:	f7 d9                	neg    ecx
c0016ef8:	89 cf                	mov    edi,ecx
c0016efa:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016efe:	c1 ff 1f             	sar    edi,0x1f
c0016f01:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0016f04:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016f08:	89 ce                	mov    esi,ecx
c0016f0a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f0e:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0016f12:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016f16:	89 cf                	mov    edi,ecx
c0016f18:	74 0a                	je     c0016f24 <VCache::read(unsigned long long, int, void*)+0x90>
c0016f1a:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016f1d:	75 05                	jne    c0016f24 <VCache::read(unsigned long long, int, void*)+0x90>
c0016f1f:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0016f22:	74 1c                	je     c0016f40 <VCache::read(unsigned long long, int, void*)+0xac>
c0016f24:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016f28:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0016f2b:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0016f2e:	83 ec 0c             	sub    esp,0xc
c0016f31:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016f33:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016f36:	52                   	push   edx
c0016f37:	57                   	push   edi
c0016f38:	56                   	push   esi
c0016f39:	50                   	push   eax
c0016f3a:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016f3d:	83 c4 20             	add    esp,0x20
c0016f40:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f43:	89 ef                	mov    edi,ebp
c0016f45:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016f4b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016f4e:	8d 70 ff             	lea    esi,[eax-0x1]
c0016f51:	23 34 24             	and    esi,DWORD PTR [esp]
c0016f54:	0f af f1             	imul   esi,ecx
c0016f57:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016f5a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f5c:	eb 30                	jmp    c0016f8e <VCache::read(unsigned long long, int, void*)+0xfa>
c0016f5e:	83 ec 0c             	sub    esp,0xc
c0016f61:	53                   	push   ebx
c0016f62:	e8 2b fd ff ff       	call   c0016c92 <VCache::invalidateReadBuffer()>
c0016f67:	83 c4 0c             	add    esp,0xc
c0016f6a:	55                   	push   ebp
c0016f6b:	56                   	push   esi
c0016f6c:	68 d5 b9 02 c0       	push   0xc002b9d5
c0016f71:	e8 4b ba ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0016f76:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f79:	8b 10                	mov    edx,DWORD PTR [eax]
c0016f7b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016f7e:	56                   	push   esi
c0016f7f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f83:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f87:	50                   	push   eax
c0016f88:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016f8b:	83 c4 20             	add    esp,0x20
c0016f8e:	83 ec 0c             	sub    esp,0xc
c0016f91:	68 f1 b9 02 c0       	push   0xc002b9f1
c0016f96:	e8 26 ba ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0016f9b:	58                   	pop    eax
c0016f9c:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016f9f:	e8 c8 78 00 00       	call   c001e86c <Semaphore::release()>
c0016fa4:	83 c4 2c             	add    esp,0x2c
c0016fa7:	31 c0                	xor    eax,eax
c0016fa9:	5b                   	pop    ebx
c0016faa:	5e                   	pop    esi
c0016fab:	5f                   	pop    edi
c0016fac:	5d                   	pop    ebp
c0016fad:	c3                   	ret    

c0016fae <Video::putrect(int, int, int, int, unsigned int)>:
c0016fae:	55                   	push   ebp
c0016faf:	57                   	push   edi
c0016fb0:	56                   	push   esi
c0016fb1:	53                   	push   ebx
c0016fb2:	83 ec 1c             	sub    esp,0x1c
c0016fb5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016fb9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fbd:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016fc1:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016fc5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016fc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fcd:	01 df                	add    edi,ebx
c0016fcf:	39 fb                	cmp    ebx,edi
c0016fd1:	7d 1f                	jge    c0016ff2 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016fd3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016fd7:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016fdb:	7d 12                	jge    c0016fef <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016fdd:	8b 16                	mov    edx,DWORD PTR [esi]
c0016fdf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016fe3:	53                   	push   ebx
c0016fe4:	55                   	push   ebp
c0016fe5:	45                   	inc    ebp
c0016fe6:	56                   	push   esi
c0016fe7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016fea:	83 c4 10             	add    esp,0x10
c0016fed:	eb e8                	jmp    c0016fd7 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016fef:	43                   	inc    ebx
c0016ff0:	eb dd                	jmp    c0016fcf <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016ff2:	83 c4 1c             	add    esp,0x1c
c0016ff5:	5b                   	pop    ebx
c0016ff6:	5e                   	pop    esi
c0016ff7:	5f                   	pop    edi
c0016ff8:	5d                   	pop    ebp
c0016ff9:	c3                   	ret    

c0016ffa <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016ffa:	55                   	push   ebp
c0016ffb:	57                   	push   edi
c0016ffc:	31 ff                	xor    edi,edi
c0016ffe:	56                   	push   esi
c0016fff:	53                   	push   ebx
c0017000:	83 ec 1c             	sub    esp,0x1c
c0017003:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017007:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001700b:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017012:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0017017:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001701b:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001701f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017023:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0017026:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001702a:	01 f9                	add    ecx,edi
c001702c:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017030:	7d 2f                	jge    c0017061 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017032:	31 f6                	xor    esi,esi
c0017034:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017038:	01 f2                	add    edx,esi
c001703a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001703e:	7d 1a                	jge    c001705a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017040:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017043:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0017046:	46                   	inc    esi
c0017047:	51                   	push   ecx
c0017048:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001704c:	52                   	push   edx
c001704d:	55                   	push   ebp
c001704e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017051:	83 c4 10             	add    esp,0x10
c0017054:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017058:	eb da                	jmp    c0017034 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001705a:	47                   	inc    edi
c001705b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001705f:	eb c5                	jmp    c0017026 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017061:	83 c4 1c             	add    esp,0x1c
c0017064:	5b                   	pop    ebx
c0017065:	5e                   	pop    esi
c0017066:	5f                   	pop    edi
c0017067:	5d                   	pop    ebp
c0017068:	c3                   	ret    
c0017069:	90                   	nop

c001706a <Video::blit(unsigned int*, int, int, int, int)>:
c001706a:	55                   	push   ebp
c001706b:	57                   	push   edi
c001706c:	56                   	push   esi
c001706d:	53                   	push   ebx
c001706e:	83 ec 1c             	sub    esp,0x1c
c0017071:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017075:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017079:	85 c0                	test   eax,eax
c001707b:	79 02                	jns    c001707f <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001707d:	31 c0                	xor    eax,eax
c001707f:	c1 e0 02             	shl    eax,0x2
c0017082:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017086:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001708a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001708e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0017092:	39 d8                	cmp    eax,ebx
c0017094:	7e 49                	jle    c00170df <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017096:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001709c:	7c 41                	jl     c00170df <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001709e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00170a2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00170a6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00170aa:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00170ae:	39 f9                	cmp    ecx,edi
c00170b0:	7e 22                	jle    c00170d4 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00170b2:	83 c5 04             	add    ebp,0x4
c00170b5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00170bb:	7c 14                	jl     c00170d1 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00170bd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00170bf:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00170c2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00170c6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00170ca:	56                   	push   esi
c00170cb:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00170ce:	83 c4 10             	add    esp,0x10
c00170d1:	47                   	inc    edi
c00170d2:	eb d2                	jmp    c00170a6 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00170d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170d8:	43                   	inc    ebx
c00170d9:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00170dd:	eb ab                	jmp    c001708a <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00170df:	83 c4 1c             	add    esp,0x1c
c00170e2:	5b                   	pop    ebx
c00170e3:	5e                   	pop    esi
c00170e4:	5f                   	pop    edi
c00170e5:	5d                   	pop    ebp
c00170e6:	c3                   	ret    
c00170e7:	90                   	nop

c00170e8 <Video::clearScreen(unsigned int)>:
c00170e8:	57                   	push   edi
c00170e9:	56                   	push   esi
c00170ea:	53                   	push   ebx
c00170eb:	31 db                	xor    ebx,ebx
c00170ed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00170f1:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00170f7:	7e 1f                	jle    c0017118 <Video::clearScreen(unsigned int)+0x30>
c00170f9:	31 ff                	xor    edi,edi
c00170fb:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017101:	7e 12                	jle    c0017115 <Video::clearScreen(unsigned int)+0x2d>
c0017103:	8b 06                	mov    eax,DWORD PTR [esi]
c0017105:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017109:	53                   	push   ebx
c001710a:	57                   	push   edi
c001710b:	47                   	inc    edi
c001710c:	56                   	push   esi
c001710d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017110:	83 c4 10             	add    esp,0x10
c0017113:	eb e6                	jmp    c00170fb <Video::clearScreen(unsigned int)+0x13>
c0017115:	43                   	inc    ebx
c0017116:	eb d9                	jmp    c00170f1 <Video::clearScreen(unsigned int)+0x9>
c0017118:	5b                   	pop    ebx
c0017119:	5e                   	pop    esi
c001711a:	5f                   	pop    edi
c001711b:	c3                   	ret    

c001711c <Video::putpixel(int, int, unsigned int)>:
c001711c:	c7 44 24 04 20 ba 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ba20
c0017124:	e9 36 32 00 00       	jmp    c001a35f <Krnl::panic(char const*)>
c0017129:	90                   	nop

c001712a <Video::Video(char const*)>:
c001712a:	83 ec 0c             	sub    esp,0xc
c001712d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017131:	83 ec 08             	sub    esp,0x8
c0017134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017138:	50                   	push   eax
c0017139:	e8 c0 ce ff ff       	call   c0013ffe <Device::Device(char const*)>
c001713e:	83 c4 10             	add    esp,0x10
c0017141:	ba 90 ba 02 c0       	mov    edx,0xc002ba90
c0017146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001714a:	89 10                	mov    DWORD PTR [eax],edx
c001714c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017150:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001715a:	90                   	nop
c001715b:	83 c4 0c             	add    esp,0xc
c001715e:	c3                   	ret    
c001715f:	90                   	nop

c0017160 <Video::~Video()>:
c0017160:	83 ec 0c             	sub    esp,0xc
c0017163:	ba 90 ba 02 c0       	mov    edx,0xc002ba90
c0017168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001716c:	89 10                	mov    DWORD PTR [eax],edx
c001716e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017172:	83 ec 0c             	sub    esp,0xc
c0017175:	50                   	push   eax
c0017176:	e8 4d cb ff ff       	call   c0013cc8 <Device::~Device()>
c001717b:	83 c4 10             	add    esp,0x10
c001717e:	90                   	nop
c001717f:	83 c4 0c             	add    esp,0xc
c0017182:	c3                   	ret    
c0017183:	90                   	nop

c0017184 <Video::~Video()>:
c0017184:	83 ec 0c             	sub    esp,0xc
c0017187:	83 ec 0c             	sub    esp,0xc
c001718a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001718e:	e8 cd ff ff ff       	call   c0017160 <Video::~Video()>
c0017193:	83 c4 10             	add    esp,0x10
c0017196:	83 ec 08             	sub    esp,0x8
c0017199:	68 64 01 00 00       	push   0x164
c001719e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171a2:	e8 42 b7 ff ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c00171a7:	83 c4 10             	add    esp,0x10
c00171aa:	83 c4 0c             	add    esp,0xc
c00171ad:	c3                   	ret    

c00171ae <Video::isMonochrome()>:
c00171ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171b2:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00171b8:	c3                   	ret    
c00171b9:	90                   	nop

c00171ba <Video::getWidth()>:
c00171ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171be:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00171c4:	c3                   	ret    
c00171c5:	90                   	nop

c00171c6 <Video::getHeight()>:
c00171c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171ca:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00171d0:	c3                   	ret    
c00171d1:	90                   	nop

c00171d2 <Video::drawCursor(int, int, unsigned char*, int)>:
c00171d2:	55                   	push   ebp
c00171d3:	57                   	push   edi
c00171d4:	56                   	push   esi
c00171d5:	53                   	push   ebx
c00171d6:	83 ec 2c             	sub    esp,0x2c
c00171d9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00171dd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00171e1:	83 f8 01             	cmp    eax,0x1
c00171e4:	19 c9                	sbb    ecx,ecx
c00171e6:	31 db                	xor    ebx,ebx
c00171e8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00171ec:	89 cd                	mov    ebp,ecx
c00171ee:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00171f6:	f7 d5                	not    ebp
c00171f8:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00171fe:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017202:	01 d8                	add    eax,ebx
c0017204:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017208:	56                   	push   esi
c0017209:	e8 b8 ff ff ff       	call   c00171c6 <Video::getHeight()>
c001720e:	59                   	pop    ecx
c001720f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017213:	7e 70                	jle    c0017285 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017215:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017219:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001721d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017220:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017224:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017228:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001722f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017233:	89 f8                	mov    eax,edi
c0017235:	83 c0 20             	add    eax,0x20
c0017238:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001723c:	56                   	push   esi
c001723d:	e8 78 ff ff ff       	call   c00171ba <Video::getWidth()>
c0017242:	5a                   	pop    edx
c0017243:	39 c7                	cmp    edi,eax
c0017245:	7d 34                	jge    c001727b <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017247:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001724c:	74 05                	je     c0017253 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001724e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017250:	55                   	push   ebp
c0017251:	eb 0d                	jmp    c0017260 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017253:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017258:	74 12                	je     c001726c <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001725a:	8b 06                	mov    eax,DWORD PTR [esi]
c001725c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017260:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017264:	57                   	push   edi
c0017265:	56                   	push   esi
c0017266:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017269:	83 c4 10             	add    esp,0x10
c001726c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017270:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017274:	47                   	inc    edi
c0017275:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017279:	75 c1                	jne    c001723c <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001727b:	43                   	inc    ebx
c001727c:	83 fb 20             	cmp    ebx,0x20
c001727f:	0f 85 79 ff ff ff    	jne    c00171fe <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017285:	83 c4 2c             	add    esp,0x2c
c0017288:	5b                   	pop    ebx
c0017289:	5e                   	pop    esi
c001728a:	5f                   	pop    edi
c001728b:	5d                   	pop    ebp
c001728c:	c3                   	ret    
c001728d:	90                   	nop

c001728e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001728e:	55                   	push   ebp
c001728f:	57                   	push   edi
c0017290:	56                   	push   esi
c0017291:	53                   	push   ebx
c0017292:	83 ec 28             	sub    esp,0x28
c0017295:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017299:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c001729d:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c00172a1:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00172a5:	c1 e6 08             	shl    esi,0x8
c00172a8:	01 c6                	add    esi,eax
c00172aa:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00172ae:	c1 e0 08             	shl    eax,0x8
c00172b1:	01 d0                	add    eax,edx
c00172b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00172bb:	0f af c6             	imul   eax,esi
c00172be:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00172c5:	50                   	push   eax
c00172c6:	e8 9e 86 ff ff       	call   c000f969 <malloc>
c00172cb:	83 c4 10             	add    esp,0x10
c00172ce:	89 c7                	mov    edi,eax
c00172d0:	85 c0                	test   eax,eax
c00172d2:	75 10                	jne    c00172e4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c00172d4:	83 ec 0c             	sub    esp,0xc
c00172d7:	68 41 ba 02 c0       	push   0xc002ba41
c00172dc:	e8 7e 30 00 00       	call   c001a35f <Krnl::panic(char const*)>
c00172e1:	83 c4 10             	add    esp,0x10
c00172e4:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00172e7:	ba 12 00 00 00       	mov    edx,0x12
c00172ec:	84 c0                	test   al,al
c00172ee:	74 11                	je     c0017301 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c00172f0:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c00172f4:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c00172f8:	c1 fa 03             	sar    edx,0x3
c00172fb:	0f af d1             	imul   edx,ecx
c00172fe:	83 c2 12             	add    edx,0x12
c0017301:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017305:	74 04                	je     c001730b <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0017307:	85 f6                	test   esi,esi
c0017309:	75 12                	jne    c001731d <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c001730b:	83 ec 0c             	sub    esp,0xc
c001730e:	68 51 ba 02 c0       	push   0xc002ba51
c0017313:	e8 a9 b6 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0017318:	e9 b8 00 00 00       	jmp    c00173d5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c001731d:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0017321:	80 f9 02             	cmp    cl,0x2
c0017324:	0f 85 96 00 00 00    	jne    c00173c0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c001732a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001732f:	75 0e                	jne    c001733f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0017331:	84 c0                	test   al,al
c0017333:	75 0a                	jne    c001733f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0017335:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017338:	83 e8 18             	sub    eax,0x18
c001733b:	a8 f7                	test   al,0xf7
c001733d:	74 0a                	je     c0017349 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c001733f:	83 ec 0c             	sub    esp,0xc
c0017342:	68 66 ba 02 c0       	push   0xc002ba66
c0017347:	eb 7f                	jmp    c00173c8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0017349:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017351:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017359:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c001735d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017365:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017369:	75 0c                	jne    c0017377 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001736b:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0017370:	c1 e0 18             	shl    eax,0x18
c0017373:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017377:	45                   	inc    ebp
c0017378:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c001737d:	c1 e1 10             	shl    ecx,0x10
c0017380:	89 c8                	mov    eax,ecx
c0017382:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0017387:	c1 e1 08             	shl    ecx,0x8
c001738a:	09 c1                	or     ecx,eax
c001738c:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0017390:	09 c1                	or     ecx,eax
c0017392:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0017396:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c001739a:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001739e:	c1 f8 03             	sar    eax,0x3
c00173a1:	01 c2                	add    edx,eax
c00173a3:	89 e8                	mov    eax,ebp
c00173a5:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00173a9:	39 c6                	cmp    esi,eax
c00173ab:	7f b0                	jg     c001735d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c00173ad:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00173b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00173b5:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00173b8:	7e 22                	jle    c00173dc <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c00173ba:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c00173be:	eb 99                	jmp    c0017359 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00173c0:	50                   	push   eax
c00173c1:	50                   	push   eax
c00173c2:	51                   	push   ecx
c00173c3:	68 74 ba 02 c0       	push   0xc002ba74
c00173c8:	e8 f4 b5 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c00173cd:	89 3c 24             	mov    DWORD PTR [esp],edi
c00173d0:	e8 a4 85 ff ff       	call   c000f979 <free>
c00173d5:	83 c4 10             	add    esp,0x10
c00173d8:	31 ff                	xor    edi,edi
c00173da:	eb 0f                	jmp    c00173eb <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c00173dc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00173e0:	89 30                	mov    DWORD PTR [eax],esi
c00173e2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00173e6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00173e9:	89 30                	mov    DWORD PTR [eax],esi
c00173eb:	83 c4 1c             	add    esp,0x1c
c00173ee:	89 f8                	mov    eax,edi
c00173f0:	5b                   	pop    ebx
c00173f1:	5e                   	pop    esi
c00173f2:	5f                   	pop    edi
c00173f3:	5d                   	pop    ebp
c00173f4:	c3                   	ret    
c00173f5:	90                   	nop

c00173f6 <Video::putTGA(int, int, unsigned char*, int)>:
c00173f6:	55                   	push   ebp
c00173f7:	57                   	push   edi
c00173f8:	56                   	push   esi
c00173f9:	53                   	push   ebx
c00173fa:	83 ec 28             	sub    esp,0x28
c00173fd:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017401:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017405:	50                   	push   eax
c0017406:	8d 44 24 18          	lea    eax,[esp+0x18]
c001740a:	50                   	push   eax
c001740b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001740f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017413:	56                   	push   esi
c0017414:	e8 75 fe ff ff       	call   c001728e <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017419:	83 c4 20             	add    esp,0x20
c001741c:	85 c0                	test   eax,eax
c001741e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017422:	74 35                	je     c0017459 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017424:	89 c7                	mov    edi,eax
c0017426:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001742a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001742e:	39 d8                	cmp    eax,ebx
c0017430:	7e 27                	jle    c0017459 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017432:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017436:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001743a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001743e:	39 e8                	cmp    eax,ebp
c0017440:	7e 14                	jle    c0017456 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017442:	8b 06                	mov    eax,DWORD PTR [esi]
c0017444:	83 c7 04             	add    edi,0x4
c0017447:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001744a:	53                   	push   ebx
c001744b:	55                   	push   ebp
c001744c:	45                   	inc    ebp
c001744d:	56                   	push   esi
c001744e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017451:	83 c4 10             	add    esp,0x10
c0017454:	eb e0                	jmp    c0017436 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017456:	43                   	inc    ebx
c0017457:	eb cd                	jmp    c0017426 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017459:	83 c4 1c             	add    esp,0x1c
c001745c:	5b                   	pop    ebx
c001745d:	5e                   	pop    esi
c001745e:	5f                   	pop    edi
c001745f:	5d                   	pop    ebp
c0017460:	c3                   	ret    
c0017461:	90                   	nop

c0017462 <ACPI::close(int, int, void*)>:
c0017462:	83 ec 1c             	sub    esp,0x1c
c0017465:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001746d:	74 0a                	je     c0017479 <ACPI::close(int, int, void*)+0x17>
c001746f:	b8 00 00 00 00       	mov    eax,0x0
c0017474:	e9 8a 00 00 00       	jmp    c0017503 <ACPI::close(int, int, void*)+0xa1>
c0017479:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001747e:	75 27                	jne    c00174a7 <ACPI::close(int, int, void*)+0x45>
c0017480:	a1 88 ec 02 c0       	mov    eax,ds:0xc002ec88
c0017485:	85 c0                	test   eax,eax
c0017487:	74 07                	je     c0017490 <ACPI::close(int, int, void*)+0x2e>
c0017489:	a1 88 ec 02 c0       	mov    eax,ds:0xc002ec88
c001748e:	ff d0                	call   eax
c0017490:	83 ec 0c             	sub    esp,0xc
c0017493:	68 d0 ba 02 c0       	push   0xc002bad0
c0017498:	e8 c2 2e 00 00       	call   c001a35f <Krnl::panic(char const*)>
c001749d:	83 c4 10             	add    esp,0x10
c00174a0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00174a5:	eb 5c                	jmp    c0017503 <ACPI::close(int, int, void*)+0xa1>
c00174a7:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00174ac:	75 50                	jne    c00174fe <ACPI::close(int, int, void*)+0x9c>
c00174ae:	a1 84 ec 02 c0       	mov    eax,ds:0xc002ec84
c00174b3:	85 c0                	test   eax,eax
c00174b5:	74 07                	je     c00174be <ACPI::close(int, int, void*)+0x5c>
c00174b7:	a1 84 ec 02 c0       	mov    eax,ds:0xc002ec84
c00174bc:	ff d0                	call   eax
c00174be:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00174c3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00174c8:	83 e0 02             	and    eax,0x2
c00174cb:	74 1c                	je     c00174e9 <ACPI::close(int, int, void*)+0x87>
c00174cd:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00174d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174d8:	89 c2                	mov    edx,eax
c00174da:	ec                   	in     al,dx
c00174db:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00174df:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00174e3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00174e7:	eb da                	jmp    c00174c3 <ACPI::close(int, int, void*)+0x61>
c00174e9:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00174f0:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00174f5:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00174f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00174fd:	ee                   	out    dx,al
c00174fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017503:	83 c4 1c             	add    esp,0x1c
c0017506:	c3                   	ret    

c0017507 <findRSDP()>:
c0017507:	83 ec 1c             	sub    esp,0x1c
c001750a:	83 ec 0c             	sub    esp,0xc
c001750d:	68 ab bb 02 c0       	push   0xc002bbab
c0017512:	e8 ac 84 ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c0017517:	83 c4 10             	add    esp,0x10
c001751a:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001751f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017525:	83 e0 04             	and    eax,0x4
c0017528:	84 c0                	test   al,al
c001752a:	75 0a                	jne    c0017536 <findRSDP()+0x2f>
c001752c:	b8 00 00 00 00       	mov    eax,0x0
c0017531:	e9 9a 00 00 00       	jmp    c00175d0 <findRSDP()+0xc9>
c0017536:	a1 54 e6 02 c0       	mov    eax,ds:0xc002e654
c001753b:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017540:	7f 1b                	jg     c001755d <findRSDP()+0x56>
c0017542:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0017547:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001754d:	83 e2 fb             	and    edx,0xfffffffb
c0017550:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017556:	b8 00 00 00 00       	mov    eax,0x0
c001755b:	eb 73                	jmp    c00175d0 <findRSDP()+0xc9>
c001755d:	83 ec 0c             	sub    esp,0xc
c0017560:	68 bb bb 02 c0       	push   0xc002bbbb
c0017565:	e8 59 84 ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c001756a:	83 c4 10             	add    esp,0x10
c001756d:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017575:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001757d:	77 3c                	ja     c00175bb <findRSDP()+0xb4>
c001757f:	83 ec 04             	sub    esp,0x4
c0017582:	6a 08                	push   0x8
c0017584:	68 d4 bb 02 c0       	push   0xc002bbd4
c0017589:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001758d:	e8 ba 90 fe ff       	call   c000064c <memcmp>
c0017592:	83 c4 10             	add    esp,0x10
c0017595:	85 c0                	test   eax,eax
c0017597:	0f 94 c0             	sete   al
c001759a:	84 c0                	test   al,al
c001759c:	74 16                	je     c00175b4 <findRSDP()+0xad>
c001759e:	83 ec 0c             	sub    esp,0xc
c00175a1:	68 dd bb 02 c0       	push   0xc002bbdd
c00175a6:	e8 18 84 ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c00175ab:	83 c4 10             	add    esp,0x10
c00175ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175b2:	eb 1c                	jmp    c00175d0 <findRSDP()+0xc9>
c00175b4:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00175b9:	eb ba                	jmp    c0017575 <findRSDP()+0x6e>
c00175bb:	83 ec 0c             	sub    esp,0xc
c00175be:	68 eb bb 02 c0       	push   0xc002bbeb
c00175c3:	e8 fb 83 ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c00175c8:	83 c4 10             	add    esp,0x10
c00175cb:	b8 00 00 00 00       	mov    eax,0x0
c00175d0:	83 c4 1c             	add    esp,0x1c
c00175d3:	c3                   	ret    

c00175d4 <loadACPITables(unsigned char*)>:
c00175d4:	57                   	push   edi
c00175d5:	56                   	push   esi
c00175d6:	53                   	push   ebx
c00175d7:	83 ec 60             	sub    esp,0x60
c00175da:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00175df:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00175e5:	83 e0 04             	and    eax,0x4
c00175e8:	84 c0                	test   al,al
c00175ea:	0f 84 33 02 00 00    	je     c0017823 <loadACPITables(unsigned char*)+0x24f>
c00175f0:	a0 a0 ee 02 c0       	mov    al,ds:0xc002eea0
c00175f5:	84 c0                	test   al,al
c00175f7:	74 75                	je     c001766e <loadACPITables(unsigned char*)+0x9a>
c00175f9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00175fd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0017601:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017605:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017608:	83 e8 24             	sub    eax,0x24
c001760b:	c1 e8 03             	shr    eax,0x3
c001760e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017612:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001761a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001761e:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017622:	0f 8d b2 00 00 00    	jge    c00176da <loadACPITables(unsigned char*)+0x106>
c0017628:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001762c:	83 c0 24             	add    eax,0x24
c001762f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017633:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017637:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001763b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001763f:	c1 e0 03             	shl    eax,0x3
c0017642:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017646:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001764a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001764d:	8b 00                	mov    eax,DWORD PTR [eax]
c001764f:	89 c1                	mov    ecx,eax
c0017651:	a1 8c ec 02 c0       	mov    eax,ds:0xc002ec8c
c0017656:	8d 50 01             	lea    edx,[eax+0x1]
c0017659:	89 15 8c ec 02 c0    	mov    DWORD PTR ds:0xc002ec8c,edx
c001765f:	89 ca                	mov    edx,ecx
c0017661:	89 14 c5 a4 ec 02 c0 	mov    DWORD PTR [eax*8-0x3ffd135c],edx
c0017668:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001766c:	eb ac                	jmp    c001761a <loadACPITables(unsigned char*)+0x46>
c001766e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017672:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017676:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001767a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001767d:	83 e8 24             	sub    eax,0x24
c0017680:	c1 e8 02             	shr    eax,0x2
c0017683:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017687:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001768f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017693:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017697:	7d 41                	jge    c00176da <loadACPITables(unsigned char*)+0x106>
c0017699:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001769d:	83 c0 24             	add    eax,0x24
c00176a0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00176a4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00176a8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00176ac:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00176b0:	c1 e0 02             	shl    eax,0x2
c00176b3:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00176b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176bb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00176bd:	a1 8c ec 02 c0       	mov    eax,ds:0xc002ec8c
c00176c2:	8d 50 01             	lea    edx,[eax+0x1]
c00176c5:	89 15 8c ec 02 c0    	mov    DWORD PTR ds:0xc002ec8c,edx
c00176cb:	89 ca                	mov    edx,ecx
c00176cd:	89 14 c5 a4 ec 02 c0 	mov    DWORD PTR [eax*8-0x3ffd135c],edx
c00176d4:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00176d8:	eb b5                	jmp    c001768f <loadACPITables(unsigned char*)+0xbb>
c00176da:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00176e2:	a1 8c ec 02 c0       	mov    eax,ds:0xc002ec8c
c00176e7:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00176eb:	0f 8d 33 01 00 00    	jge    c0017824 <loadACPITables(unsigned char*)+0x250>
c00176f1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00176f5:	8b 04 c5 a4 ec 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd135c]
c00176fc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017700:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017704:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017708:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001770c:	25 ff 0f 00 00       	and    eax,0xfff
c0017711:	89 c6                	mov    esi,eax
c0017713:	8b 1d 70 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e770
c0017719:	83 ec 0c             	sub    esp,0xc
c001771c:	6a 01                	push   0x1
c001771e:	e8 cc 9e ff ff       	call   c00115ef <Virt::allocateKernelVirtualPages(int)>
c0017723:	83 c4 10             	add    esp,0x10
c0017726:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001772a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017730:	83 ec 0c             	sub    esp,0xc
c0017733:	6a 01                	push   0x1
c0017735:	6a 01                	push   0x1
c0017737:	50                   	push   eax
c0017738:	52                   	push   edx
c0017739:	53                   	push   ebx
c001773a:	e8 4d a8 ff ff       	call   c0011f8c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001773f:	83 c4 20             	add    esp,0x20
c0017742:	09 f0                	or     eax,esi
c0017744:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017748:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001774c:	c1 e0 03             	shl    eax,0x3
c001774f:	05 a0 ec 02 c0       	add    eax,0xc002eca0
c0017754:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017758:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001775c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017760:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0017768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001776c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017770:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017774:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017778:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001777c:	89 c6                	mov    esi,eax
c001777e:	89 d7                	mov    edi,edx
c0017780:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017782:	89 c8                	mov    eax,ecx
c0017784:	89 fa                	mov    edx,edi
c0017786:	89 f3                	mov    ebx,esi
c0017788:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001778c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017790:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017794:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017798:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001779b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001779f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177a3:	05 00 10 00 00       	add    eax,0x1000
c00177a8:	c1 e8 0c             	shr    eax,0xc
c00177ab:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00177af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00177b3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00177b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00177bb:	25 ff 0f 00 00       	and    eax,0xfff
c00177c0:	89 c6                	mov    esi,eax
c00177c2:	8b 1d 70 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e770
c00177c8:	83 ec 0c             	sub    esp,0xc
c00177cb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00177cf:	e8 1b 9e ff ff       	call   c00115ef <Virt::allocateKernelVirtualPages(int)>
c00177d4:	83 c4 10             	add    esp,0x10
c00177d7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00177db:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00177e1:	83 ec 0c             	sub    esp,0xc
c00177e4:	6a 01                	push   0x1
c00177e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00177ea:	50                   	push   eax
c00177eb:	52                   	push   edx
c00177ec:	53                   	push   ebx
c00177ed:	e8 9a a7 ff ff       	call   c0011f8c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00177f2:	83 c4 20             	add    esp,0x20
c00177f5:	09 f0                	or     eax,esi
c00177f7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00177fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177ff:	83 ec 0c             	sub    esp,0xc
c0017802:	50                   	push   eax
c0017803:	e8 17 a1 ff ff       	call   c001191f <Virt::freeKernelVirtualPages(unsigned long)>
c0017808:	83 c4 10             	add    esp,0x10
c001780b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001780f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017813:	89 14 c5 a4 ec 02 c0 	mov    DWORD PTR [eax*8-0x3ffd135c],edx
c001781a:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c001781e:	e9 bf fe ff ff       	jmp    c00176e2 <loadACPITables(unsigned char*)+0x10e>
c0017823:	90                   	nop
c0017824:	83 c4 60             	add    esp,0x60
c0017827:	5b                   	pop    ebx
c0017828:	5e                   	pop    esi
c0017829:	5f                   	pop    edi
c001782a:	c3                   	ret    

c001782b <findRSDT(unsigned char*)>:
c001782b:	57                   	push   edi
c001782c:	56                   	push   esi
c001782d:	53                   	push   ebx
c001782e:	83 ec 50             	sub    esp,0x50
c0017831:	83 ec 0c             	sub    esp,0xc
c0017834:	68 ff bb 02 c0       	push   0xc002bbff
c0017839:	e8 85 81 ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c001783e:	83 c4 10             	add    esp,0x10
c0017841:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0017846:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001784c:	83 e0 04             	and    eax,0x4
c001784f:	84 c0                	test   al,al
c0017851:	75 0a                	jne    c001785d <findRSDT(unsigned char*)+0x32>
c0017853:	b8 00 00 00 00       	mov    eax,0x0
c0017858:	e9 81 01 00 00       	jmp    c00179de <findRSDT(unsigned char*)+0x1b3>
c001785d:	83 ec 0c             	sub    esp,0xc
c0017860:	68 11 bc 02 c0       	push   0xc002bc11
c0017865:	e8 59 81 ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c001786a:	83 c4 10             	add    esp,0x10
c001786d:	89 e0                	mov    eax,esp
c001786f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017873:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017877:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001787b:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017883:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017887:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001788b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001788f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017893:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0017897:	89 c6                	mov    esi,eax
c0017899:	89 d7                	mov    edi,edx
c001789b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001789d:	89 c8                	mov    eax,ecx
c001789f:	89 fa                	mov    edx,edi
c00178a1:	89 f3                	mov    ebx,esi
c00178a3:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00178a7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00178ab:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00178af:	83 ec 0c             	sub    esp,0xc
c00178b2:	68 23 bc 02 c0       	push   0xc002bc23
c00178b7:	e8 07 81 ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c00178bc:	83 c4 10             	add    esp,0x10
c00178bf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00178c3:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00178c7:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00178cf:	83 ec 0c             	sub    esp,0xc
c00178d2:	68 35 bc 02 c0       	push   0xc002bc35
c00178d7:	e8 e7 80 ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c00178dc:	83 c4 10             	add    esp,0x10
c00178df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00178e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00178e7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00178eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00178f3:	83 ec 04             	sub    esp,0x4
c00178f6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00178fa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00178fe:	68 f4 ba 02 c0       	push   0xc002baf4
c0017903:	e8 b9 b0 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0017908:	83 c4 10             	add    esp,0x10
c001790b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001790f:	25 ff 0f 00 00       	and    eax,0xfff
c0017914:	89 c6                	mov    esi,eax
c0017916:	8b 1d 70 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e770
c001791c:	83 ec 0c             	sub    esp,0xc
c001791f:	6a 02                	push   0x2
c0017921:	e8 c9 9c ff ff       	call   c00115ef <Virt::allocateKernelVirtualPages(int)>
c0017926:	83 c4 10             	add    esp,0x10
c0017929:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001792d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017933:	83 ec 0c             	sub    esp,0xc
c0017936:	6a 01                	push   0x1
c0017938:	6a 02                	push   0x2
c001793a:	50                   	push   eax
c001793b:	52                   	push   edx
c001793c:	53                   	push   ebx
c001793d:	e8 4a a6 ff ff       	call   c0011f8c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017942:	83 c4 20             	add    esp,0x20
c0017945:	09 f0                	or     eax,esi
c0017947:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001794b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001794f:	25 ff 0f 00 00       	and    eax,0xfff
c0017954:	89 c6                	mov    esi,eax
c0017956:	8b 1d 70 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e770
c001795c:	83 ec 0c             	sub    esp,0xc
c001795f:	6a 02                	push   0x2
c0017961:	e8 89 9c ff ff       	call   c00115ef <Virt::allocateKernelVirtualPages(int)>
c0017966:	83 c4 10             	add    esp,0x10
c0017969:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001796d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017973:	83 ec 0c             	sub    esp,0xc
c0017976:	6a 01                	push   0x1
c0017978:	6a 02                	push   0x2
c001797a:	50                   	push   eax
c001797b:	52                   	push   edx
c001797c:	53                   	push   ebx
c001797d:	e8 0a a6 ff ff       	call   c0011f8c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017982:	83 c4 20             	add    esp,0x20
c0017985:	09 f0                	or     eax,esi
c0017987:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001798b:	83 ec 04             	sub    esp,0x4
c001798e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017992:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017996:	68 14 bb 02 c0       	push   0xc002bb14
c001799b:	e8 21 b0 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c00179a0:	83 c4 10             	add    esp,0x10
c00179a3:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00179a8:	75 11                	jne    c00179bb <findRSDT(unsigned char*)+0x190>
c00179aa:	c6 05 a0 ee 02 c0 00 	mov    BYTE PTR ds:0xc002eea0,0x0
c00179b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00179b5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00179b9:	eb 1f                	jmp    c00179da <findRSDT(unsigned char*)+0x1af>
c00179bb:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00179c0:	75 11                	jne    c00179d3 <findRSDT(unsigned char*)+0x1a8>
c00179c2:	c6 05 a0 ee 02 c0 01 	mov    BYTE PTR ds:0xc002eea0,0x1
c00179c9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00179cd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00179d1:	eb 07                	jmp    c00179da <findRSDT(unsigned char*)+0x1af>
c00179d3:	b8 00 00 00 00       	mov    eax,0x0
c00179d8:	eb 04                	jmp    c00179de <findRSDT(unsigned char*)+0x1b3>
c00179da:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00179de:	83 c4 50             	add    esp,0x50
c00179e1:	5b                   	pop    ebx
c00179e2:	5e                   	pop    esi
c00179e3:	5f                   	pop    edi
c00179e4:	c3                   	ret    

c00179e5 <findDataTable(unsigned char*, char*)>:
c00179e5:	83 ec 1c             	sub    esp,0x1c
c00179e8:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00179ed:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179f3:	83 e0 04             	and    eax,0x4
c00179f6:	84 c0                	test   al,al
c00179f8:	75 07                	jne    c0017a01 <findDataTable(unsigned char*, char*)+0x1c>
c00179fa:	b8 00 00 00 00       	mov    eax,0x0
c00179ff:	eb 52                	jmp    c0017a53 <findDataTable(unsigned char*, char*)+0x6e>
c0017a01:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017a09:	a1 8c ec 02 c0       	mov    eax,ds:0xc002ec8c
c0017a0e:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017a12:	7d 3a                	jge    c0017a4e <findDataTable(unsigned char*, char*)+0x69>
c0017a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a18:	c1 e0 03             	shl    eax,0x3
c0017a1b:	05 a0 ec 02 c0       	add    eax,0xc002eca0
c0017a20:	83 ec 04             	sub    esp,0x4
c0017a23:	6a 04                	push   0x4
c0017a25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a29:	50                   	push   eax
c0017a2a:	e8 1d 8c fe ff       	call   c000064c <memcmp>
c0017a2f:	83 c4 10             	add    esp,0x10
c0017a32:	85 c0                	test   eax,eax
c0017a34:	0f 94 c0             	sete   al
c0017a37:	84 c0                	test   al,al
c0017a39:	74 0d                	je     c0017a48 <findDataTable(unsigned char*, char*)+0x63>
c0017a3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a3f:	8b 04 c5 a4 ec 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd135c]
c0017a46:	eb 0b                	jmp    c0017a53 <findDataTable(unsigned char*, char*)+0x6e>
c0017a48:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017a4c:	eb bb                	jmp    c0017a09 <findDataTable(unsigned char*, char*)+0x24>
c0017a4e:	b8 00 00 00 00       	mov    eax,0x0
c0017a53:	83 c4 1c             	add    esp,0x1c
c0017a56:	c3                   	ret    

c0017a57 <scanMADT()>:
c0017a57:	53                   	push   ebx
c0017a58:	83 ec 38             	sub    esp,0x38
c0017a5b:	83 ec 0c             	sub    esp,0xc
c0017a5e:	68 47 bc 02 c0       	push   0xc002bc47
c0017a63:	e8 5b 7f ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c0017a68:	83 c4 10             	add    esp,0x10
c0017a6b:	a1 20 e6 02 c0       	mov    eax,ds:0xc002e620
c0017a70:	25 00 04 00 00       	and    eax,0x400
c0017a75:	74 14                	je     c0017a8b <scanMADT()+0x34>
c0017a77:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0017a7c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017a82:	83 e2 fb             	and    edx,0xfffffffb
c0017a85:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017a8b:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0017a90:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a96:	83 e0 04             	and    eax,0x4
c0017a99:	84 c0                	test   al,al
c0017a9b:	0f 84 7a 04 00 00    	je     c0017f1b <scanMADT()+0x4c4>
c0017aa1:	83 ec 0c             	sub    esp,0xc
c0017aa4:	68 54 bc 02 c0       	push   0xc002bc54
c0017aa9:	e8 15 7f ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c0017aae:	83 c4 10             	add    esp,0x10
c0017ab1:	e8 51 fa ff ff       	call   c0017507 <findRSDP()>
c0017ab6:	a3 ac ee 02 c0       	mov    ds:0xc002eeac,eax
c0017abb:	a1 ac ee 02 c0       	mov    eax,ds:0xc002eeac
c0017ac0:	85 c0                	test   eax,eax
c0017ac2:	75 19                	jne    c0017add <scanMADT()+0x86>
c0017ac4:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0017ac9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017acf:	83 e2 fb             	and    edx,0xfffffffb
c0017ad2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ad8:	e9 42 04 00 00       	jmp    c0017f1f <scanMADT()+0x4c8>
c0017add:	83 ec 0c             	sub    esp,0xc
c0017ae0:	68 66 bc 02 c0       	push   0xc002bc66
c0017ae5:	e8 d9 7e ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c0017aea:	83 c4 10             	add    esp,0x10
c0017aed:	a1 ac ee 02 c0       	mov    eax,ds:0xc002eeac
c0017af2:	83 ec 0c             	sub    esp,0xc
c0017af5:	50                   	push   eax
c0017af6:	e8 30 fd ff ff       	call   c001782b <findRSDT(unsigned char*)>
c0017afb:	83 c4 10             	add    esp,0x10
c0017afe:	a3 a8 ee 02 c0       	mov    ds:0xc002eea8,eax
c0017b03:	a1 a8 ee 02 c0       	mov    eax,ds:0xc002eea8
c0017b08:	85 c0                	test   eax,eax
c0017b0a:	75 19                	jne    c0017b25 <scanMADT()+0xce>
c0017b0c:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0017b11:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017b17:	83 e2 fb             	and    edx,0xfffffffb
c0017b1a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017b20:	e9 fa 03 00 00       	jmp    c0017f1f <scanMADT()+0x4c8>
c0017b25:	83 ec 0c             	sub    esp,0xc
c0017b28:	68 76 bc 02 c0       	push   0xc002bc76
c0017b2d:	e8 91 7e ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c0017b32:	83 c4 10             	add    esp,0x10
c0017b35:	a1 a8 ee 02 c0       	mov    eax,ds:0xc002eea8
c0017b3a:	83 ec 0c             	sub    esp,0xc
c0017b3d:	50                   	push   eax
c0017b3e:	e8 91 fa ff ff       	call   c00175d4 <loadACPITables(unsigned char*)>
c0017b43:	83 c4 10             	add    esp,0x10
c0017b46:	a1 a8 ee 02 c0       	mov    eax,ds:0xc002eea8
c0017b4b:	83 ec 08             	sub    esp,0x8
c0017b4e:	68 8e bc 02 c0       	push   0xc002bc8e
c0017b53:	50                   	push   eax
c0017b54:	e8 8c fe ff ff       	call   c00179e5 <findDataTable(unsigned char*, char*)>
c0017b59:	83 c4 10             	add    esp,0x10
c0017b5c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017b60:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017b65:	75 19                	jne    c0017b80 <scanMADT()+0x129>
c0017b67:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0017b6c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017b72:	83 e2 fe             	and    edx,0xfffffffe
c0017b75:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017b7b:	e9 9f 03 00 00       	jmp    c0017f1f <scanMADT()+0x4c8>
c0017b80:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017b88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b8f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017b93:	0f 87 86 03 00 00    	ja     c0017f1f <scanMADT()+0x4c8>
c0017b99:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017ba1:	0f 87 78 03 00 00    	ja     c0017f1f <scanMADT()+0x4c8>
c0017ba7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bab:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017baf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bb3:	8d 50 01             	lea    edx,[eax+0x1]
c0017bb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017bba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bbe:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017bc2:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017bc6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bca:	8d 50 01             	lea    edx,[eax+0x1]
c0017bcd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017bd1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bd5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017bd9:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017bdd:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017be2:	0f 86 36 03 00 00    	jbe    c0017f1e <scanMADT()+0x4c7>
c0017be8:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017bed:	75 57                	jne    c0017c46 <scanMADT()+0x1ef>
c0017bef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bf3:	8d 50 01             	lea    edx,[eax+0x1]
c0017bf6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017bfa:	8a 15 a0 f0 02 c0    	mov    dl,BYTE PTR ds:0xc002f0a0
c0017c00:	0f b6 d2             	movzx  edx,dl
c0017c03:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017c07:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017c0b:	88 82 e0 f0 02 c0    	mov    BYTE PTR [edx-0x3ffd0f20],al
c0017c11:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c15:	8d 50 01             	lea    edx,[eax+0x1]
c0017c18:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c1c:	8a 15 a0 f0 02 c0    	mov    dl,BYTE PTR ds:0xc002f0a0
c0017c22:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017c25:	88 0d a0 f0 02 c0    	mov    BYTE PTR ds:0xc002f0a0,cl
c0017c2b:	0f b6 d2             	movzx  edx,dl
c0017c2e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017c32:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017c36:	88 82 c0 f0 02 c0    	mov    BYTE PTR [edx-0x3ffd0f40],al
c0017c3c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017c41:	e9 c1 02 00 00       	jmp    c0017f07 <scanMADT()+0x4b0>
c0017c46:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017c4b:	0f 85 14 01 00 00    	jne    c0017d65 <scanMADT()+0x30e>
c0017c51:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c55:	8d 50 01             	lea    edx,[eax+0x1]
c0017c58:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c5c:	8a 15 60 ef 02 c0    	mov    dl,BYTE PTR ds:0xc002ef60
c0017c62:	0f b6 d2             	movzx  edx,dl
c0017c65:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017c69:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017c6d:	88 82 80 ef 02 c0    	mov    BYTE PTR [edx-0x3ffd1080],al
c0017c73:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017c77:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c7f:	01 d0                	add    eax,edx
c0017c81:	83 c0 2c             	add    eax,0x2c
c0017c84:	8a 00                	mov    al,BYTE PTR [eax]
c0017c86:	0f b6 d0             	movzx  edx,al
c0017c89:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c8d:	8d 48 01             	lea    ecx,[eax+0x1]
c0017c90:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c94:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017c98:	0f b6 c0             	movzx  eax,al
c0017c9b:	c1 e0 08             	shl    eax,0x8
c0017c9e:	89 d1                	mov    ecx,edx
c0017ca0:	09 c1                	or     ecx,eax
c0017ca2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ca6:	8d 50 02             	lea    edx,[eax+0x2]
c0017ca9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cad:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017cb1:	0f b6 c0             	movzx  eax,al
c0017cb4:	c1 e0 10             	shl    eax,0x10
c0017cb7:	09 c1                	or     ecx,eax
c0017cb9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cbd:	8d 50 03             	lea    edx,[eax+0x3]
c0017cc0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cc4:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017cc8:	0f b6 c0             	movzx  eax,al
c0017ccb:	c1 e0 18             	shl    eax,0x18
c0017cce:	09 c1                	or     ecx,eax
c0017cd0:	89 ca                	mov    edx,ecx
c0017cd2:	a0 60 ef 02 c0       	mov    al,ds:0xc002ef60
c0017cd7:	0f b6 c0             	movzx  eax,al
c0017cda:	89 14 85 a0 ef 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1060],edx
c0017ce1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017ce6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cee:	01 d0                	add    eax,edx
c0017cf0:	83 c0 2c             	add    eax,0x2c
c0017cf3:	8a 00                	mov    al,BYTE PTR [eax]
c0017cf5:	0f b6 d0             	movzx  edx,al
c0017cf8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cfc:	8d 48 01             	lea    ecx,[eax+0x1]
c0017cff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d03:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017d07:	0f b6 c0             	movzx  eax,al
c0017d0a:	c1 e0 08             	shl    eax,0x8
c0017d0d:	89 d1                	mov    ecx,edx
c0017d0f:	09 c1                	or     ecx,eax
c0017d11:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d15:	8d 50 02             	lea    edx,[eax+0x2]
c0017d18:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d1c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017d20:	0f b6 c0             	movzx  eax,al
c0017d23:	c1 e0 10             	shl    eax,0x10
c0017d26:	09 c1                	or     ecx,eax
c0017d28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d2c:	8d 50 03             	lea    edx,[eax+0x3]
c0017d2f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d33:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017d37:	0f b6 c0             	movzx  eax,al
c0017d3a:	c1 e0 18             	shl    eax,0x18
c0017d3d:	09 c1                	or     ecx,eax
c0017d3f:	89 ca                	mov    edx,ecx
c0017d41:	a0 60 ef 02 c0       	mov    al,ds:0xc002ef60
c0017d46:	0f b6 c0             	movzx  eax,al
c0017d49:	89 14 85 20 f0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0fe0],edx
c0017d50:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017d55:	a0 60 ef 02 c0       	mov    al,ds:0xc002ef60
c0017d5a:	40                   	inc    eax
c0017d5b:	a2 60 ef 02 c0       	mov    ds:0xc002ef60,al
c0017d60:	e9 a2 01 00 00       	jmp    c0017f07 <scanMADT()+0x4b0>
c0017d65:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017d6a:	0f 85 e9 00 00 00    	jne    c0017e59 <scanMADT()+0x402>
c0017d70:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d74:	8d 50 01             	lea    edx,[eax+0x1]
c0017d77:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d7b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d7f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d83:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017d87:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d8b:	8d 50 01             	lea    edx,[eax+0x1]
c0017d8e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d92:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d96:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d9a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017d9e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017da2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017da6:	01 d0                	add    eax,edx
c0017da8:	83 c0 2c             	add    eax,0x2c
c0017dab:	8a 00                	mov    al,BYTE PTR [eax]
c0017dad:	0f b6 d0             	movzx  edx,al
c0017db0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017db4:	8d 48 01             	lea    ecx,[eax+0x1]
c0017db7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017dbb:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017dbf:	0f b6 c0             	movzx  eax,al
c0017dc2:	c1 e0 08             	shl    eax,0x8
c0017dc5:	89 d1                	mov    ecx,edx
c0017dc7:	09 c1                	or     ecx,eax
c0017dc9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dcd:	8d 50 02             	lea    edx,[eax+0x2]
c0017dd0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017dd4:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017dd8:	0f b6 c0             	movzx  eax,al
c0017ddb:	c1 e0 10             	shl    eax,0x10
c0017dde:	09 c1                	or     ecx,eax
c0017de0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017de4:	8d 50 03             	lea    edx,[eax+0x3]
c0017de7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017deb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017def:	0f b6 c0             	movzx  eax,al
c0017df2:	c1 e0 18             	shl    eax,0x18
c0017df5:	09 c8                	or     eax,ecx
c0017df7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017dfb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017e00:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e08:	01 d0                	add    eax,edx
c0017e0a:	83 c0 2c             	add    eax,0x2c
c0017e0d:	8a 00                	mov    al,BYTE PTR [eax]
c0017e0f:	0f b6 c0             	movzx  eax,al
c0017e12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017e16:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017e19:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e1d:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017e21:	0f b6 d2             	movzx  edx,dl
c0017e24:	c1 e2 08             	shl    edx,0x8
c0017e27:	09 d0                	or     eax,edx
c0017e29:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017e2e:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017e33:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017e38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017e3c:	88 90 60 d8 02 c0    	mov    BYTE PTR [eax-0x3ffd27a0],dl
c0017e42:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017e47:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017e4c:	66 89 84 12 40 ef 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd10c0],ax
c0017e54:	e9 ae 00 00 00       	jmp    c0017f07 <scanMADT()+0x4b0>
c0017e59:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017e5e:	0f 85 97 00 00 00    	jne    c0017efb <scanMADT()+0x4a4>
c0017e64:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e68:	8d 50 01             	lea    edx,[eax+0x1]
c0017e6b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e6f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e73:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e77:	0f b6 c0             	movzx  eax,al
c0017e7a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017e7e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e82:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e86:	01 d0                	add    eax,edx
c0017e88:	83 c0 2c             	add    eax,0x2c
c0017e8b:	8a 00                	mov    al,BYTE PTR [eax]
c0017e8d:	0f b6 d0             	movzx  edx,al
c0017e90:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e94:	8d 48 01             	lea    ecx,[eax+0x1]
c0017e97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e9b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017e9f:	0f b6 c0             	movzx  eax,al
c0017ea2:	c1 e0 08             	shl    eax,0x8
c0017ea5:	09 d0                	or     eax,edx
c0017ea7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017eab:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017eb0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eb4:	8d 50 01             	lea    edx,[eax+0x1]
c0017eb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ebb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ebf:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ec3:	0f b6 c0             	movzx  eax,al
c0017ec6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017eca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ece:	c1 e0 08             	shl    eax,0x8
c0017ed1:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017ed5:	89 c1                	mov    ecx,eax
c0017ed7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017edb:	c1 e0 18             	shl    eax,0x18
c0017ede:	89 c3                	mov    ebx,eax
c0017ee0:	a1 b0 ee 02 c0       	mov    eax,ds:0xc002eeb0
c0017ee5:	8d 50 01             	lea    edx,[eax+0x1]
c0017ee8:	89 15 b0 ee 02 c0    	mov    DWORD PTR ds:0xc002eeb0,edx
c0017eee:	09 d9                	or     ecx,ebx
c0017ef0:	89 ca                	mov    edx,ecx
c0017ef2:	89 14 85 c0 ee 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1140],edx
c0017ef9:	eb 0c                	jmp    c0017f07 <scanMADT()+0x4b0>
c0017efb:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017f00:	75 05                	jne    c0017f07 <scanMADT()+0x4b0>
c0017f02:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017f07:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017f0c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f10:	01 d0                	add    eax,edx
c0017f12:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017f16:	e9 6d fc ff ff       	jmp    c0017b88 <scanMADT()+0x131>
c0017f1b:	90                   	nop
c0017f1c:	eb 01                	jmp    c0017f1f <scanMADT()+0x4c8>
c0017f1e:	90                   	nop
c0017f1f:	83 c4 38             	add    esp,0x38
c0017f22:	5b                   	pop    ebx
c0017f23:	c3                   	ret    

c0017f24 <ACPI::ACPI()>:
c0017f24:	83 ec 0c             	sub    esp,0xc
c0017f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f2b:	83 ec 08             	sub    esp,0x8
c0017f2e:	68 93 bc 02 c0       	push   0xc002bc93
c0017f33:	50                   	push   eax
c0017f34:	e8 c5 c0 ff ff       	call   c0013ffe <Device::Device(char const*)>
c0017f39:	83 c4 10             	add    esp,0x10
c0017f3c:	ba fc bd 02 c0       	mov    edx,0xc002bdfc
c0017f41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f45:	89 10                	mov    DWORD PTR [eax],edx
c0017f47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f4b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017f52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f56:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f64:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017f6e:	83 ec 0c             	sub    esp,0xc
c0017f71:	68 98 bc 02 c0       	push   0xc002bc98
c0017f76:	e8 48 7a ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c0017f7b:	83 c4 10             	add    esp,0x10
c0017f7e:	e8 d4 fa ff ff       	call   c0017a57 <scanMADT()>
c0017f83:	90                   	nop
c0017f84:	83 c4 0c             	add    esp,0xc
c0017f87:	c3                   	ret    

c0017f88 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017f88:	83 ec 2c             	sub    esp,0x2c
c0017f8b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017f8f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017f93:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017f97:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017f9b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017fa0:	88 d0                	mov    al,dl
c0017fa2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017fa6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017fab:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017fb3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017fb7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017fbd:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017fc1:	0f 8d 97 00 00 00    	jge    c001805e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017fc7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017fcb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017fcf:	83 c2 2a             	add    edx,0x2a
c0017fd2:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017fd6:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017fdb:	75 78                	jne    c0018055 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017fdd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017fe1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017fe5:	83 c2 2a             	add    edx,0x2a
c0017fe8:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017fec:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017ff0:	75 63                	jne    c0018055 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017ff2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017ff7:	74 3a                	je     c0018033 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017ff9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ffd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018001:	83 c2 2a             	add    edx,0x2a
c0018004:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018008:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001800c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001800f:	39 c2                	cmp    edx,eax
c0018011:	74 10                	je     c0018023 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0018013:	83 ec 0c             	sub    esp,0xc
c0018016:	68 34 bb 02 c0       	push   0xc002bb34
c001801b:	e8 3f 23 00 00       	call   c001a35f <Krnl::panic(char const*)>
c0018020:	83 c4 10             	add    esp,0x10
c0018023:	83 ec 0c             	sub    esp,0xc
c0018026:	68 a6 bc 02 c0       	push   0xc002bca6
c001802b:	e8 2f 23 00 00       	call   c001a35f <Krnl::panic(char const*)>
c0018030:	83 c4 10             	add    esp,0x10
c0018033:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018037:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001803b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001803f:	83 c2 2a             	add    edx,0x2a
c0018042:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0018046:	8b 02                	mov    eax,DWORD PTR [edx]
c0018048:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001804b:	89 01                	mov    DWORD PTR [ecx],eax
c001804d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018050:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018055:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0018059:	e9 55 ff ff ff       	jmp    c0017fb3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001805e:	90                   	nop
c001805f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018063:	83 c4 2c             	add    esp,0x2c
c0018066:	c2 04 00             	ret    0x4
c0018069:	90                   	nop

c001806a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001806a:	83 ec 1c             	sub    esp,0x1c
c001806d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018071:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0018075:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018079:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001807e:	88 c8                	mov    al,cl
c0018080:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018084:	88 d0                	mov    al,dl
c0018086:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001808a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001808e:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018094:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018098:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001809b:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001809f:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00180a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180a7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00180ad:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00180b1:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00180b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180b8:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00180bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180c1:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00180c7:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00180cb:	8d 48 01             	lea    ecx,[eax+0x1]
c00180ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180d2:	83 c2 2a             	add    edx,0x2a
c00180d5:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00180d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180dd:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00180e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180e7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00180ea:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00180ee:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00180f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180f6:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00180fc:	8d 50 01             	lea    edx,[eax+0x1]
c00180ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018103:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018109:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001810d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018113:	3d 00 02 00 00       	cmp    eax,0x200
c0018118:	75 10                	jne    c001812a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c001811a:	83 ec 0c             	sub    esp,0xc
c001811d:	68 b5 bc 02 c0       	push   0xc002bcb5
c0018122:	e8 38 22 00 00       	call   c001a35f <Krnl::panic(char const*)>
c0018127:	83 c4 10             	add    esp,0x10
c001812a:	90                   	nop
c001812b:	83 c4 1c             	add    esp,0x1c
c001812e:	c3                   	ret    
c001812f:	90                   	nop

c0018130 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018130:	b8 00 00 00 00       	mov    eax,0x0
c0018135:	c3                   	ret    

c0018136 <ACPI::detectPCI()>:
c0018136:	53                   	push   ebx
c0018137:	83 ec 28             	sub    esp,0x28
c001813a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001813f:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0018144:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0018149:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001814f:	83 e0 04             	and    eax,0x4
c0018152:	84 c0                	test   al,al
c0018154:	74 2b                	je     c0018181 <ACPI::detectPCI()+0x4b>
c0018156:	a1 a8 ee 02 c0       	mov    eax,ds:0xc002eea8
c001815b:	83 ec 08             	sub    esp,0x8
c001815e:	68 d2 bc 02 c0       	push   0xc002bcd2
c0018163:	50                   	push   eax
c0018164:	e8 7c f8 ff ff       	call   c00179e5 <findDataTable(unsigned char*, char*)>
c0018169:	83 c4 10             	add    esp,0x10
c001816c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018170:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0018175:	74 0a                	je     c0018181 <ACPI::detectPCI()+0x4b>
c0018177:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001817c:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0018181:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0018189:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001818d:	8a 00                	mov    al,BYTE PTR [eax]
c001818f:	3c 01                	cmp    al,0x1
c0018191:	75 0c                	jne    c001819f <ACPI::detectPCI()+0x69>
c0018193:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018198:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001819d:	eb 26                	jmp    c00181c5 <ACPI::detectPCI()+0x8f>
c001819f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00181a3:	8a 00                	mov    al,BYTE PTR [eax]
c00181a5:	3c 02                	cmp    al,0x2
c00181a7:	75 1c                	jne    c00181c5 <ACPI::detectPCI()+0x8f>
c00181a9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00181ae:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00181b3:	74 10                	je     c00181c5 <ACPI::detectPCI()+0x8f>
c00181b5:	83 ec 0c             	sub    esp,0xc
c00181b8:	68 64 bb 02 c0       	push   0xc002bb64
c00181bd:	e8 9d 21 00 00       	call   c001a35f <Krnl::panic(char const*)>
c00181c2:	83 c4 10             	add    esp,0x10
c00181c5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00181c9:	83 f0 01             	xor    eax,0x1
c00181cc:	84 c0                	test   al,al
c00181ce:	74 3f                	je     c001820f <ACPI::detectPCI()+0xd9>
c00181d0:	e8 7b 7f fe ff       	call   c0000150 <manualPCIProbe>
c00181d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00181d9:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00181de:	75 0c                	jne    c00181ec <ACPI::detectPCI()+0xb6>
c00181e0:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00181e5:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c00181ea:	eb 23                	jmp    c001820f <ACPI::detectPCI()+0xd9>
c00181ec:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c00181f1:	75 1c                	jne    c001820f <ACPI::detectPCI()+0xd9>
c00181f3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00181f8:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00181fd:	74 10                	je     c001820f <ACPI::detectPCI()+0xd9>
c00181ff:	83 ec 0c             	sub    esp,0xc
c0018202:	68 64 bb 02 c0       	push   0xc002bb64
c0018207:	e8 53 21 00 00       	call   c001a35f <Krnl::panic(char const*)>
c001820c:	83 c4 10             	add    esp,0x10
c001820f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018214:	74 7e                	je     c0018294 <ACPI::detectPCI()+0x15e>
c0018216:	83 ec 0c             	sub    esp,0xc
c0018219:	68 d7 bc 02 c0       	push   0xc002bcd7
c001821e:	e8 a0 77 ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c0018223:	83 c4 10             	add    esp,0x10
c0018226:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001822e:	83 ec 0c             	sub    esp,0xc
c0018231:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018235:	e8 2f 77 ff ff       	call   c000f969 <malloc>
c001823a:	83 c4 10             	add    esp,0x10
c001823d:	89 c3                	mov    ebx,eax
c001823f:	83 ec 0c             	sub    esp,0xc
c0018242:	53                   	push   ebx
c0018243:	e8 18 a7 00 00       	call   c0022960 <PCI::PCI()>
c0018248:	83 c4 10             	add    esp,0x10
c001824b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001824f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018253:	83 ec 08             	sub    esp,0x8
c0018256:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001825a:	50                   	push   eax
c001825b:	e8 9a bb ff ff       	call   c0013dfa <Device::addChild(Device*)>
c0018260:	83 c4 10             	add    esp,0x10
c0018263:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018267:	8b 00                	mov    eax,DWORD PTR [eax]
c0018269:	83 c0 08             	add    eax,0x8
c001826c:	8b 00                	mov    eax,DWORD PTR [eax]
c001826e:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0018273:	74 07                	je     c001827c <ACPI::detectPCI()+0x146>
c0018275:	ba 01 00 00 00       	mov    edx,0x1
c001827a:	eb 05                	jmp    c0018281 <ACPI::detectPCI()+0x14b>
c001827c:	ba 02 00 00 00       	mov    edx,0x2
c0018281:	6a 00                	push   0x0
c0018283:	6a 00                	push   0x0
c0018285:	52                   	push   edx
c0018286:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001828a:	ff d0                	call   eax
c001828c:	83 c4 10             	add    esp,0x10
c001828f:	e9 9e 00 00 00       	jmp    c0018332 <ACPI::detectPCI()+0x1fc>
c0018294:	83 ec 0c             	sub    esp,0xc
c0018297:	68 ef bc 02 c0       	push   0xc002bcef
c001829c:	e8 20 a7 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c00182a1:	83 c4 10             	add    esp,0x10
c00182a4:	83 ec 0c             	sub    esp,0xc
c00182a7:	68 fa bc 02 c0       	push   0xc002bcfa
c00182ac:	e8 12 77 ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c00182b1:	83 c4 10             	add    esp,0x10
c00182b4:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c00182bb:	83 ec 0c             	sub    esp,0xc
c00182be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00182c2:	e8 a2 76 ff ff       	call   c000f969 <malloc>
c00182c7:	83 c4 10             	add    esp,0x10
c00182ca:	89 c3                	mov    ebx,eax
c00182cc:	83 ec 0c             	sub    esp,0xc
c00182cf:	53                   	push   ebx
c00182d0:	e8 f5 b1 00 00       	call   c00234ca <IDE::IDE()>
c00182d5:	83 c4 10             	add    esp,0x10
c00182d8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00182dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182e0:	83 ec 08             	sub    esp,0x8
c00182e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00182e7:	50                   	push   eax
c00182e8:	e8 0d bb ff ff       	call   c0013dfa <Device::addChild(Device*)>
c00182ed:	83 c4 10             	add    esp,0x10
c00182f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00182f4:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c00182fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018302:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c001830b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001830f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0018318:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001831c:	8b 00                	mov    eax,DWORD PTR [eax]
c001831e:	83 c0 08             	add    eax,0x8
c0018321:	8b 00                	mov    eax,DWORD PTR [eax]
c0018323:	6a 00                	push   0x0
c0018325:	6a 00                	push   0x0
c0018327:	6a 00                	push   0x0
c0018329:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001832d:	ff d0                	call   eax
c001832f:	83 c4 10             	add    esp,0x10
c0018332:	90                   	nop
c0018333:	83 c4 28             	add    esp,0x28
c0018336:	5b                   	pop    ebx
c0018337:	c3                   	ret    

c0018338 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018338:	83 ec 1c             	sub    esp,0x1c
c001833b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001833f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018342:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018346:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001834b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018350:	83 ec 08             	sub    esp,0x8
c0018353:	52                   	push   edx
c0018354:	50                   	push   eax
c0018355:	e8 98 6a ff ff       	call   c000edf2 <Computer::readCMOS(unsigned char)>
c001835a:	83 c4 10             	add    esp,0x10
c001835d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018361:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0018366:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001836b:	83 ec 04             	sub    esp,0x4
c001836e:	6a 01                	push   0x1
c0018370:	52                   	push   edx
c0018371:	50                   	push   eax
c0018372:	e8 37 6c ff ff       	call   c000efae <Computer::writeCMOS(unsigned char, unsigned char)>
c0018377:	83 c4 10             	add    esp,0x10
c001837a:	90                   	nop
c001837b:	83 c4 1c             	add    esp,0x1c
c001837e:	c3                   	ret    
c001837f:	90                   	nop

c0018380 <ACPI::sleep()>:
c0018380:	83 ec 0c             	sub    esp,0xc
c0018383:	a1 80 ec 02 c0       	mov    eax,ds:0xc002ec80
c0018388:	85 c0                	test   eax,eax
c001838a:	74 07                	je     c0018393 <ACPI::sleep()+0x13>
c001838c:	a1 80 ec 02 c0       	mov    eax,ds:0xc002ec80
c0018391:	ff d0                	call   eax
c0018393:	90                   	nop
c0018394:	83 c4 0c             	add    esp,0xc
c0018397:	c3                   	ret    

c0018398 <ACPI::open(int, int, void*)>:
c0018398:	57                   	push   edi
c0018399:	56                   	push   esi
c001839a:	53                   	push   ebx
c001839b:	81 ec 60 01 00 00    	sub    esp,0x160
c00183a1:	83 ec 0c             	sub    esp,0xc
c00183a4:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c00183ab:	e8 86 fd ff ff       	call   c0018136 <ACPI::detectPCI()>
c00183b0:	83 c4 10             	add    esp,0x10
c00183b3:	83 ec 0c             	sub    esp,0xc
c00183b6:	68 8c bb 02 c0       	push   0xc002bb8c
c00183bb:	e8 03 76 ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c00183c0:	83 c4 10             	add    esp,0x10
c00183c3:	83 ec 0c             	sub    esp,0xc
c00183c6:	68 0f bd 02 c0       	push   0xc002bd0f
c00183cb:	e8 e5 46 00 00       	call   c001cab5 <Thr::loadKernelSymbolTable(char const*)>
c00183d0:	83 c4 10             	add    esp,0x10
c00183d3:	83 ec 0c             	sub    esp,0xc
c00183d6:	68 2d bd 02 c0       	push   0xc002bd2d
c00183db:	e8 e3 75 ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c00183e0:	83 c4 10             	add    esp,0x10
c00183e3:	83 ec 04             	sub    esp,0x4
c00183e6:	6a 0c                	push   0xc
c00183e8:	68 48 bd 02 c0       	push   0xc002bd48
c00183ed:	68 59 bd 02 c0       	push   0xc002bd59
c00183f2:	e8 24 2d 00 00       	call   c001b11b <Reg::readIntWithDefault(char*, char*, int)>
c00183f7:	83 c4 10             	add    esp,0x10
c00183fa:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0018401:	83 ec 0c             	sub    esp,0xc
c0018404:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c001840b:	e8 e9 93 ff ff       	call   c00117f9 <Virt::setupPageSwapping(int)>
c0018410:	83 c4 10             	add    esp,0x10
c0018413:	83 ec 0c             	sub    esp,0xc
c0018416:	68 ac a4 02 c0       	push   0xc002a4ac
c001841b:	e8 a3 75 ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c0018420:	83 c4 10             	add    esp,0x10
c0018423:	8b 1d 08 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e608
c0018429:	83 ec 08             	sub    esp,0x8
c001842c:	6a 01                	push   0x1
c001842e:	68 60 bd 02 c0       	push   0xc002bd60
c0018433:	e8 f4 50 00 00       	call   c001d52c <Thr::loadDLL(char const*, bool)>
c0018438:	83 c4 10             	add    esp,0x10
c001843b:	83 ec 08             	sub    esp,0x8
c001843e:	53                   	push   ebx
c001843f:	50                   	push   eax
c0018440:	e8 18 53 00 00       	call   c001d75d <Thr::executeDLL(unsigned long, void*)>
c0018445:	83 c4 10             	add    esp,0x10
c0018448:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c001844f:	83 ec 08             	sub    esp,0x8
c0018452:	6a 12                	push   0x12
c0018454:	50                   	push   eax
c0018455:	e8 24 bd ff ff       	call   c001417e <getDevicesOfType(DeviceType)>
c001845a:	83 c4 0c             	add    esp,0xc
c001845d:	83 ec 0c             	sub    esp,0xc
c0018460:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018467:	50                   	push   eax
c0018468:	e8 77 0b 01 00       	call   c0028fe4 <LinkedList<Device>::isEmpty()>
c001846d:	83 c4 10             	add    esp,0x10
c0018470:	83 f0 01             	xor    eax,0x1
c0018473:	84 c0                	test   al,al
c0018475:	0f 84 43 01 00 00    	je     c00185be <ACPI::open(int, int, void*)+0x226>
c001847b:	83 ec 0c             	sub    esp,0xc
c001847e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018485:	50                   	push   eax
c0018486:	e8 75 0b 01 00       	call   c0029000 <LinkedList<Device>::getFirstElement()>
c001848b:	83 c4 10             	add    esp,0x10
c001848e:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0018495:	83 ec 0c             	sub    esp,0xc
c0018498:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001849f:	50                   	push   eax
c00184a0:	e8 63 0b 01 00       	call   c0029008 <LinkedList<Device>::removeFirst()>
c00184a5:	83 c4 10             	add    esp,0x10
c00184a8:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c00184af:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c00184b6:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c00184bd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00184c1:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c00184c7:	ba 09 00 00 00       	mov    edx,0x9
c00184cc:	fc                   	cld    
c00184cd:	89 c7                	mov    edi,eax
c00184cf:	89 de                	mov    esi,ebx
c00184d1:	89 d1                	mov    ecx,edx
c00184d3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00184d5:	83 ec 08             	sub    esp,0x8
c00184d8:	8d 44 24 38          	lea    eax,[esp+0x38]
c00184dc:	50                   	push   eax
c00184dd:	83 ec 24             	sub    esp,0x24
c00184e0:	89 e0                	mov    eax,esp
c00184e2:	89 c3                	mov    ebx,eax
c00184e4:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00184e8:	ba 09 00 00 00       	mov    edx,0x9
c00184ed:	89 df                	mov    edi,ebx
c00184ef:	89 c6                	mov    esi,eax
c00184f1:	89 d1                	mov    ecx,edx
c00184f3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00184f5:	e8 44 a9 00 00       	call   c0022e3e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c00184fa:	83 c4 30             	add    esp,0x30
c00184fd:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0018504:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c001850c:	0f 84 4b ff ff ff    	je     c001845d <ACPI::open(int, int, void*)+0xc5>
c0018512:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c001851d:	83 ec 0c             	sub    esp,0xc
c0018520:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018527:	e8 3d 74 ff ff       	call   c000f969 <malloc>
c001852c:	83 c4 10             	add    esp,0x10
c001852f:	89 c3                	mov    ebx,eax
c0018531:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0018536:	83 ec 04             	sub    esp,0x4
c0018539:	50                   	push   eax
c001853a:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018541:	53                   	push   ebx
c0018542:	e8 d9 a9 ff ff       	call   c0012f20 <File::File(char const*, Process*)>
c0018547:	83 c4 10             	add    esp,0x10
c001854a:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0018551:	83 ec 0c             	sub    esp,0xc
c0018554:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001855b:	e8 92 ac ff ff       	call   c00131f2 <File::exists()>
c0018560:	83 c4 10             	add    esp,0x10
c0018563:	84 c0                	test   al,al
c0018565:	74 27                	je     c001858e <ACPI::open(int, int, void*)+0x1f6>
c0018567:	83 ec 08             	sub    esp,0x8
c001856a:	6a 01                	push   0x1
c001856c:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018573:	e8 b4 4f 00 00       	call   c001d52c <Thr::loadDLL(char const*, bool)>
c0018578:	83 c4 10             	add    esp,0x10
c001857b:	83 ec 08             	sub    esp,0x8
c001857e:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018585:	50                   	push   eax
c0018586:	e8 d2 51 00 00       	call   c001d75d <Thr::executeDLL(unsigned long, void*)>
c001858b:	83 c4 10             	add    esp,0x10
c001858e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0018596:	0f 84 c1 fe ff ff    	je     c001845d <ACPI::open(int, int, void*)+0xc5>
c001859c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00185a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00185a5:	83 c0 08             	add    eax,0x8
c00185a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00185aa:	83 ec 0c             	sub    esp,0xc
c00185ad:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00185b4:	ff d0                	call   eax
c00185b6:	83 c4 10             	add    esp,0x10
c00185b9:	e9 9f fe ff ff       	jmp    c001845d <ACPI::open(int, int, void*)+0xc5>
c00185be:	83 ec 0c             	sub    esp,0xc
c00185c1:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00185c8:	50                   	push   eax
c00185c9:	e8 14 0a 01 00       	call   c0028fe2 <LinkedList<Device>::~LinkedList()>
c00185ce:	83 c4 10             	add    esp,0x10
c00185d1:	8b 1d 08 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e608
c00185d7:	83 ec 08             	sub    esp,0x8
c00185da:	6a 01                	push   0x1
c00185dc:	68 7b bd 02 c0       	push   0xc002bd7b
c00185e1:	e8 46 4f 00 00       	call   c001d52c <Thr::loadDLL(char const*, bool)>
c00185e6:	83 c4 10             	add    esp,0x10
c00185e9:	83 ec 08             	sub    esp,0x8
c00185ec:	53                   	push   ebx
c00185ed:	50                   	push   eax
c00185ee:	e8 6a 51 00 00       	call   c001d75d <Thr::executeDLL(unsigned long, void*)>
c00185f3:	83 c4 10             	add    esp,0x10
c00185f6:	8b 1d 08 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e608
c00185fc:	83 ec 08             	sub    esp,0x8
c00185ff:	6a 01                	push   0x1
c0018601:	68 98 bd 02 c0       	push   0xc002bd98
c0018606:	e8 21 4f 00 00       	call   c001d52c <Thr::loadDLL(char const*, bool)>
c001860b:	83 c4 10             	add    esp,0x10
c001860e:	83 ec 08             	sub    esp,0x8
c0018611:	53                   	push   ebx
c0018612:	50                   	push   eax
c0018613:	e8 45 51 00 00       	call   c001d75d <Thr::executeDLL(unsigned long, void*)>
c0018618:	83 c4 10             	add    esp,0x10
c001861b:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0018620:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018626:	83 e0 04             	and    eax,0x4
c0018629:	84 c0                	test   al,al
c001862b:	0f 84 0d 01 00 00    	je     c001873e <ACPI::open(int, int, void*)+0x3a6>
c0018631:	83 ec 0c             	sub    esp,0xc
c0018634:	68 b5 bd 02 c0       	push   0xc002bdb5
c0018639:	e8 85 73 ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c001863e:	83 c4 10             	add    esp,0x10
c0018641:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001864c:	83 ec 0c             	sub    esp,0xc
c001864f:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0018656:	e8 0e 73 ff ff       	call   c000f969 <malloc>
c001865b:	83 c4 10             	add    esp,0x10
c001865e:	89 c3                	mov    ebx,eax
c0018660:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c0018665:	83 ec 04             	sub    esp,0x4
c0018668:	50                   	push   eax
c0018669:	68 d2 bd 02 c0       	push   0xc002bdd2
c001866e:	53                   	push   ebx
c001866f:	e8 ac a8 ff ff       	call   c0012f20 <File::File(char const*, Process*)>
c0018674:	83 c4 10             	add    esp,0x10
c0018677:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c001867e:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018686:	74 1a                	je     c00186a2 <ACPI::open(int, int, void*)+0x30a>
c0018688:	83 ec 0c             	sub    esp,0xc
c001868b:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018692:	e8 5b ab ff ff       	call   c00131f2 <File::exists()>
c0018697:	83 c4 10             	add    esp,0x10
c001869a:	84 c0                	test   al,al
c001869c:	74 04                	je     c00186a2 <ACPI::open(int, int, void*)+0x30a>
c001869e:	b0 01                	mov    al,0x1
c00186a0:	eb 02                	jmp    c00186a4 <ACPI::open(int, int, void*)+0x30c>
c00186a2:	b0 00                	mov    al,0x0
c00186a4:	84 c0                	test   al,al
c00186a6:	74 25                	je     c00186cd <ACPI::open(int, int, void*)+0x335>
c00186a8:	83 ec 08             	sub    esp,0x8
c00186ab:	6a 01                	push   0x1
c00186ad:	68 d2 bd 02 c0       	push   0xc002bdd2
c00186b2:	e8 75 4e 00 00       	call   c001d52c <Thr::loadDLL(char const*, bool)>
c00186b7:	83 c4 10             	add    esp,0x10
c00186ba:	83 ec 08             	sub    esp,0x8
c00186bd:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c00186c4:	50                   	push   eax
c00186c5:	e8 93 50 00 00       	call   c001d75d <Thr::executeDLL(unsigned long, void*)>
c00186ca:	83 c4 10             	add    esp,0x10
c00186cd:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00186d5:	74 27                	je     c00186fe <ACPI::open(int, int, void*)+0x366>
c00186d7:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00186df:	74 1d                	je     c00186fe <ACPI::open(int, int, void*)+0x366>
c00186e1:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c00186e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00186ea:	83 c0 08             	add    eax,0x8
c00186ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00186ef:	83 ec 0c             	sub    esp,0xc
c00186f2:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00186f9:	ff d0                	call   eax
c00186fb:	83 c4 10             	add    esp,0x10
c00186fe:	a1 a8 ee 02 c0       	mov    eax,ds:0xc002eea8
c0018703:	83 ec 08             	sub    esp,0x8
c0018706:	68 ef bd 02 c0       	push   0xc002bdef
c001870b:	50                   	push   eax
c001870c:	e8 d4 f2 ff ff       	call   c00179e5 <findDataTable(unsigned char*, char*)>
c0018711:	83 c4 10             	add    esp,0x10
c0018714:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c001871b:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0018723:	74 19                	je     c001873e <ACPI::open(int, int, void*)+0x3a6>
c0018725:	83 ec 08             	sub    esp,0x8
c0018728:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001872f:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0018736:	e8 fd fb ff ff       	call   c0018338 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001873b:	83 c4 10             	add    esp,0x10
c001873e:	b8 00 00 00 00       	mov    eax,0x0
c0018743:	81 c4 60 01 00 00    	add    esp,0x160
c0018749:	5b                   	pop    ebx
c001874a:	5e                   	pop    esi
c001874b:	5f                   	pop    edi
c001874c:	c3                   	ret    
c001874d:	90                   	nop

c001874e <CPU::close(int, int, void*)>:
c001874e:	31 c0                	xor    eax,eax
c0018750:	c3                   	ret    
c0018751:	90                   	nop

c0018752 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018752:	55                   	push   ebp
c0018753:	57                   	push   edi
c0018754:	56                   	push   esi
c0018755:	53                   	push   ebx
c0018756:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001875a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001875e:	89 ce                	mov    esi,ecx
c0018760:	89 d5                	mov    ebp,edx
c0018762:	80 f9 04             	cmp    cl,0x4
c0018765:	75 28                	jne    c001878f <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018767:	8d 42 f9             	lea    eax,[edx-0x7]
c001876a:	3c 03                	cmp    al,0x3
c001876c:	0f 86 63 01 00 00    	jbe    c00188d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018772:	80 fa 03             	cmp    dl,0x3
c0018775:	0f 84 5a 01 00 00    	je     c00188d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001877b:	8d 7a f2             	lea    edi,[edx-0xe]
c001877e:	b8 30 da 02 c0       	mov    eax,0xc002da30
c0018783:	89 fb                	mov    ebx,edi
c0018785:	80 fb 01             	cmp    bl,0x1
c0018788:	77 4e                	ja     c00187d8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001878a:	e9 52 01 00 00       	jmp    c00188e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001878f:	80 f9 05             	cmp    cl,0x5
c0018792:	75 4d                	jne    c00187e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018794:	b8 40 da 02 c0       	mov    eax,0xc002da40
c0018799:	80 fa 03             	cmp    dl,0x3
c001879c:	0f 86 3f 01 00 00    	jbe    c00188e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187a2:	8d 7a fa             	lea    edi,[edx-0x6]
c00187a5:	b8 50 da 02 c0       	mov    eax,0xc002da50
c00187aa:	89 fb                	mov    ebx,edi
c00187ac:	80 fb 01             	cmp    bl,0x1
c00187af:	0f 86 2c 01 00 00    	jbe    c00188e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187b5:	b8 60 da 02 c0       	mov    eax,0xc002da60
c00187ba:	80 fa 08             	cmp    dl,0x8
c00187bd:	0f 84 1e 01 00 00    	je     c00188e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187c3:	89 d7                	mov    edi,edx
c00187c5:	b8 70 da 02 c0       	mov    eax,0xc002da70
c00187ca:	83 e7 fb             	and    edi,0xfffffffb
c00187cd:	89 fb                	mov    ebx,edi
c00187cf:	80 fb 09             	cmp    bl,0x9
c00187d2:	0f 84 09 01 00 00    	je     c00188e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187d8:	31 c0                	xor    eax,eax
c00187da:	89 eb                	mov    ebx,ebp
c00187dc:	0f b6 fb             	movzx  edi,bl
c00187df:	eb 30                	jmp    c0018811 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00187e1:	31 c0                	xor    eax,eax
c00187e3:	80 f9 06             	cmp    cl,0x6
c00187e6:	75 f2                	jne    c00187da <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00187e8:	80 fa 0a             	cmp    dl,0xa
c00187eb:	77 ed                	ja     c00187da <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00187ed:	bf de 05 00 00       	mov    edi,0x5de
c00187f2:	0f a3 d7             	bt     edi,edx
c00187f5:	73 e3                	jae    c00187da <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00187f7:	b8 80 da 02 c0       	mov    eax,0xc002da80
c00187fc:	e9 e0 00 00 00       	jmp    c00188e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018801:	39 c7                	cmp    edi,eax
c0018803:	0f 84 d3 00 00 00    	je     c00188dc <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018809:	40                   	inc    eax
c001880a:	3d d0 00 00 00       	cmp    eax,0xd0
c001880f:	74 09                	je     c001881a <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018811:	89 f3                	mov    ebx,esi
c0018813:	80 fb 0f             	cmp    bl,0xf
c0018816:	75 f1                	jne    c0018809 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018818:	eb e7                	jmp    c0018801 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001881a:	80 f9 10             	cmp    cl,0x10
c001881d:	75 14                	jne    c0018833 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001881f:	8d 42 fc             	lea    eax,[edx-0x4]
c0018822:	83 e0 fb             	and    eax,0xfffffffb
c0018825:	3c 02                	cmp    al,0x2
c0018827:	76 34                	jbe    c001885d <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018829:	b8 75 bf 02 c0       	mov    eax,0xc002bf75
c001882e:	80 fa 02             	cmp    dl,0x2
c0018831:	eb 24                	jmp    c0018857 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018833:	80 f9 11             	cmp    cl,0x11
c0018836:	75 13                	jne    c001884b <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018838:	b8 75 bf 02 c0       	mov    eax,0xc002bf75
c001883d:	80 fa 03             	cmp    dl,0x3
c0018840:	0f 85 9b 00 00 00    	jne    c00188e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018846:	e9 91 00 00 00       	jmp    c00188dc <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001884b:	80 f9 12             	cmp    cl,0x12
c001884e:	75 14                	jne    c0018864 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018850:	b8 75 bf 02 c0       	mov    eax,0xc002bf75
c0018855:	fe ca                	dec    dl
c0018857:	0f 85 84 00 00 00    	jne    c00188e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001885d:	b8 a0 da 02 c0       	mov    eax,0xc002daa0
c0018862:	eb 7d                	jmp    c00188e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018864:	80 f9 14             	cmp    cl,0x14
c0018867:	75 12                	jne    c001887b <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018869:	4a                   	dec    edx
c001886a:	b8 75 bf 02 c0       	mov    eax,0xc002bf75
c001886f:	80 fa 01             	cmp    dl,0x1
c0018872:	77 6d                	ja     c00188e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018874:	b8 b0 da 02 c0       	mov    eax,0xc002dab0
c0018879:	eb 66                	jmp    c00188e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001887b:	80 f9 15             	cmp    cl,0x15
c001887e:	75 31                	jne    c00188b1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018880:	b8 c0 da 02 c0       	mov    eax,0xc002dac0
c0018885:	80 fa 01             	cmp    dl,0x1
c0018888:	74 57                	je     c00188e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001888a:	b8 75 bf 02 c0       	mov    eax,0xc002bf75
c001888f:	80 fa 13             	cmp    dl,0x13
c0018892:	76 0c                	jbe    c00188a0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018894:	80 fa 30             	cmp    dl,0x30
c0018897:	75 48                	jne    c00188e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018899:	b8 e0 da 02 c0       	mov    eax,0xc002dae0
c001889e:	eb 41                	jmp    c00188e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188a0:	b9 04 00 09 00       	mov    ecx,0x90004
c00188a5:	0f a3 d1             	bt     ecx,edx
c00188a8:	73 37                	jae    c00188e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188aa:	b8 d0 da 02 c0       	mov    eax,0xc002dad0
c00188af:	eb 30                	jmp    c00188e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188b1:	b8 75 bf 02 c0       	mov    eax,0xc002bf75
c00188b6:	80 f9 16             	cmp    cl,0x16
c00188b9:	75 26                	jne    c00188e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188bb:	b8 f0 da 02 c0       	mov    eax,0xc002daf0
c00188c0:	84 d2                	test   dl,dl
c00188c2:	74 1d                	je     c00188e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188c4:	b8 75 bf 02 c0       	mov    eax,0xc002bf75
c00188c9:	80 fa 30             	cmp    dl,0x30
c00188cc:	75 13                	jne    c00188e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188ce:	b8 00 db 02 c0       	mov    eax,0xc002db00
c00188d3:	eb 0c                	jmp    c00188e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188d5:	b8 20 da 02 c0       	mov    eax,0xc002da20
c00188da:	eb 05                	jmp    c00188e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188dc:	b8 90 da 02 c0       	mov    eax,0xc002da90
c00188e1:	5b                   	pop    ebx
c00188e2:	5e                   	pop    esi
c00188e3:	5f                   	pop    edi
c00188e4:	5d                   	pop    ebp
c00188e5:	c3                   	ret    

c00188e6 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00188e6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00188ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00188ee:	80 f9 04             	cmp    cl,0x4
c00188f1:	75 6b                	jne    c001895e <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00188f3:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c00188f8:	80 fa 01             	cmp    dl,0x1
c00188fb:	0f 86 92 02 00 00    	jbe    c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018901:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c0018906:	80 fa 02             	cmp    dl,0x2
c0018909:	0f 84 84 02 00 00    	je     c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001890f:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c0018914:	80 fa 03             	cmp    dl,0x3
c0018917:	0f 84 76 02 00 00    	je     c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001891d:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c0018922:	80 fa 04             	cmp    dl,0x4
c0018925:	0f 84 68 02 00 00    	je     c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001892b:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0018930:	80 fa 05             	cmp    dl,0x5
c0018933:	0f 84 5a 02 00 00    	je     c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018939:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c001893e:	80 fa 07             	cmp    dl,0x7
c0018941:	0f 84 4c 02 00 00    	je     c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018947:	83 ea 08             	sub    edx,0x8
c001894a:	b8 75 bf 02 c0       	mov    eax,0xc002bf75
c001894f:	80 fa 01             	cmp    dl,0x1
c0018952:	0f 87 3b 02 00 00    	ja     c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018958:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c001895d:	c3                   	ret    
c001895e:	80 f9 05             	cmp    cl,0x5
c0018961:	75 45                	jne    c00189a8 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018963:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018966:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c001896b:	80 f9 02             	cmp    cl,0x2
c001896e:	0f 86 1f 02 00 00    	jbe    c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018974:	80 fa 04             	cmp    dl,0x4
c0018977:	0f 84 f3 01 00 00    	je     c0018b70 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c001897d:	80 fa 07             	cmp    dl,0x7
c0018980:	0f 84 0d 02 00 00    	je     c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018986:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c001898b:	80 fa 08             	cmp    dl,0x8
c001898e:	0f 84 ff 01 00 00    	je     c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018994:	b8 75 bf 02 c0       	mov    eax,0xc002bf75
c0018999:	80 fa 09             	cmp    dl,0x9
c001899c:	0f 85 f1 01 00 00    	jne    c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189a2:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c00189a7:	c3                   	ret    
c00189a8:	80 f9 06             	cmp    cl,0x6
c00189ab:	0f 85 85 01 00 00    	jne    c0018b36 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00189b1:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c00189b6:	80 fa 01             	cmp    dl,0x1
c00189b9:	0f 84 d4 01 00 00    	je     c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189bf:	8d 42 fb             	lea    eax,[edx-0x5]
c00189c2:	3c 01                	cmp    al,0x1
c00189c4:	0f 86 ac 01 00 00    	jbe    c0018b76 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00189ca:	80 fa 03             	cmp    dl,0x3
c00189cd:	0f 84 a3 01 00 00    	je     c0018b76 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00189d3:	8d 4a f9             	lea    ecx,[edx-0x7]
c00189d6:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c00189db:	80 f9 01             	cmp    cl,0x1
c00189de:	0f 86 af 01 00 00    	jbe    c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189e4:	80 fa 09             	cmp    dl,0x9
c00189e7:	0f 84 8f 01 00 00    	je     c0018b7c <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00189ed:	8d 4a f6             	lea    ecx,[edx-0xa]
c00189f0:	80 f9 01             	cmp    cl,0x1
c00189f3:	0f 86 9a 01 00 00    	jbe    c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189f9:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c00189fe:	80 fa 0d             	cmp    dl,0xd
c0018a01:	0f 84 8c 01 00 00    	je     c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a07:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018a0c:	80 fa 0e             	cmp    dl,0xe
c0018a0f:	0f 84 7e 01 00 00    	je     c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a15:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018a1a:	80 fa 0f             	cmp    dl,0xf
c0018a1d:	0f 84 70 01 00 00    	je     c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a23:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018a28:	80 fa 15             	cmp    dl,0x15
c0018a2b:	0f 84 62 01 00 00    	je     c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a31:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018a34:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018a39:	80 f9 01             	cmp    cl,0x1
c0018a3c:	0f 86 51 01 00 00    	jbe    c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a42:	80 fa 1a             	cmp    dl,0x1a
c0018a45:	0f 84 37 01 00 00    	je     c0018b82 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018a4b:	80 fa 1c             	cmp    dl,0x1c
c0018a4e:	0f 84 34 01 00 00    	je     c0018b88 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018a54:	80 fa 1d             	cmp    dl,0x1d
c0018a57:	0f 84 36 01 00 00    	je     c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a5d:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018a62:	80 fa 25             	cmp    dl,0x25
c0018a65:	0f 84 28 01 00 00    	je     c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a6b:	8d 4a da             	lea    ecx,[edx-0x26]
c0018a6e:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018a73:	80 f9 01             	cmp    cl,0x1
c0018a76:	0f 86 17 01 00 00    	jbe    c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a7c:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018a81:	80 fa 2a             	cmp    dl,0x2a
c0018a84:	0f 84 09 01 00 00    	je     c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a8a:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018a8f:	80 fa 2c             	cmp    dl,0x2c
c0018a92:	0f 84 fb 00 00 00    	je     c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a98:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018a9d:	80 fa 2d             	cmp    dl,0x2d
c0018aa0:	0f 84 ed 00 00 00    	je     c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aa6:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018aab:	80 fa 2e             	cmp    dl,0x2e
c0018aae:	0f 84 df 00 00 00    	je     c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ab4:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018ab9:	80 fa 2f             	cmp    dl,0x2f
c0018abc:	0f 84 d1 00 00 00    	je     c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ac2:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018ac5:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018aca:	80 f9 01             	cmp    cl,0x1
c0018acd:	0f 86 c0 00 00 00    	jbe    c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad3:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c0018ad8:	80 fa 37             	cmp    dl,0x37
c0018adb:	0f 84 b2 00 00 00    	je     c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae1:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018ae6:	80 fa 3a             	cmp    dl,0x3a
c0018ae9:	0f 84 a4 00 00 00    	je     c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aef:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018af4:	80 fa 3c             	cmp    dl,0x3c
c0018af7:	0f 84 96 00 00 00    	je     c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018afd:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0018b02:	80 fa 3d             	cmp    dl,0x3d
c0018b05:	0f 84 88 00 00 00    	je     c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b0b:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018b10:	80 fa 3e             	cmp    dl,0x3e
c0018b13:	74 7e                	je     c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b15:	8d 42 bb             	lea    eax,[edx-0x45]
c0018b18:	3c 01                	cmp    al,0x1
c0018b1a:	76 72                	jbe    c0018b8e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b1c:	80 fa 3f             	cmp    dl,0x3f
c0018b1f:	74 6d                	je     c0018b8e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b21:	80 fa 4a             	cmp    dl,0x4a
c0018b24:	74 0a                	je     c0018b30 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018b26:	b8 75 bf 02 c0       	mov    eax,0xc002bf75
c0018b2b:	80 fa 4d             	cmp    dl,0x4d
c0018b2e:	75 63                	jne    c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b30:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c0018b35:	c3                   	ret    
c0018b36:	b8 75 bf 02 c0       	mov    eax,0xc002bf75
c0018b3b:	80 f9 0b             	cmp    cl,0xb
c0018b3e:	75 0a                	jne    c0018b4a <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018b40:	fe ca                	dec    dl
c0018b42:	75 4f                	jne    c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b44:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c0018b49:	c3                   	ret    
c0018b4a:	80 f9 0f             	cmp    cl,0xf
c0018b4d:	75 44                	jne    c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b4f:	b8 00 da 02 c0       	mov    eax,0xc002da00
c0018b54:	80 fa 02             	cmp    dl,0x2
c0018b57:	76 3a                	jbe    c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b59:	8d 42 fd             	lea    eax,[edx-0x3]
c0018b5c:	3c 01                	cmp    al,0x1
c0018b5e:	76 0a                	jbe    c0018b6a <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018b60:	b8 75 bf 02 c0       	mov    eax,0xc002bf75
c0018b65:	80 fa 06             	cmp    dl,0x6
c0018b68:	75 29                	jne    c0018b93 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b6a:	b8 10 da 02 c0       	mov    eax,0xc002da10
c0018b6f:	c3                   	ret    
c0018b70:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018b75:	c3                   	ret    
c0018b76:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018b7b:	c3                   	ret    
c0018b7c:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018b81:	c3                   	ret    
c0018b82:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018b87:	c3                   	ret    
c0018b88:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018b8d:	c3                   	ret    
c0018b8e:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018b93:	c3                   	ret    

c0018b94 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018b94:	60                   	pusha  
c0018b95:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018b99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018ba1:	9c                   	pushf  
c0018ba2:	fa                   	cli    
c0018ba3:	0f 09                	wbinvd 
c0018ba5:	0f 30                	wrmsr  
c0018ba7:	9d                   	popf   
c0018ba8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018bac:	89 02                	mov    DWORD PTR [edx],eax
c0018bae:	61                   	popa   
c0018baf:	c3                   	ret    

c0018bb0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018bb0:	60                   	pusha  
c0018bb1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018bb5:	9c                   	pushf  
c0018bb6:	fa                   	cli    
c0018bb7:	0f 09                	wbinvd 
c0018bb9:	31 c0                	xor    eax,eax
c0018bbb:	31 d2                	xor    edx,edx
c0018bbd:	0f 32                	rdmsr  
c0018bbf:	9d                   	popf   
c0018bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018bc4:	89 02                	mov    DWORD PTR [edx],eax
c0018bc6:	61                   	popa   
c0018bc7:	c3                   	ret    

c0018bc8 <CPU::AMD_K6_writeback(int, int, int)>:
c0018bc8:	56                   	push   esi
c0018bc9:	53                   	push   ebx
c0018bca:	83 ec 10             	sub    esp,0x10
c0018bcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018bd1:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018bd6:	75 5d                	jne    c0018c35 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018bd8:	83 f8 08             	cmp    eax,0x8
c0018bdb:	75 09                	jne    c0018be6 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018bdd:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018be2:	7e 13                	jle    c0018bf7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018be4:	eb 30                	jmp    c0018c16 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018be6:	83 f8 06             	cmp    eax,0x6
c0018be9:	7c 4a                	jl     c0018c35 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018beb:	83 f8 07             	cmp    eax,0x7
c0018bee:	7e 07                	jle    c0018bf7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018bf0:	83 f8 09             	cmp    eax,0x9
c0018bf3:	74 21                	je     c0018c16 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018bf5:	eb 3e                	jmp    c0018c35 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018bf7:	89 e6                	mov    esi,esp
c0018bf9:	8b 1d 48 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e648
c0018bff:	56                   	push   esi
c0018c00:	c1 eb 15             	shr    ebx,0x15
c0018c03:	68 82 00 00 c0       	push   0xc0000082
c0018c08:	83 e3 7e             	and    ebx,0x7e
c0018c0b:	e8 a0 ff ff ff       	call   c0018bb0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c10:	56                   	push   esi
c0018c11:	6a 00                	push   0x0
c0018c13:	53                   	push   ebx
c0018c14:	eb 12                	jmp    c0018c28 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018c16:	89 e3                	mov    ebx,esp
c0018c18:	53                   	push   ebx
c0018c19:	68 82 00 00 c0       	push   0xc0000082
c0018c1e:	e8 8d ff ff ff       	call   c0018bb0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c23:	53                   	push   ebx
c0018c24:	6a 00                	push   0x0
c0018c26:	6a 00                	push   0x0
c0018c28:	68 82 00 00 c0       	push   0xc0000082
c0018c2d:	e8 62 ff ff ff       	call   c0018b94 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018c32:	83 c4 18             	add    esp,0x18
c0018c35:	83 c4 10             	add    esp,0x10
c0018c38:	5b                   	pop    ebx
c0018c39:	5e                   	pop    esi
c0018c3a:	c3                   	ret    
c0018c3b:	90                   	nop

c0018c3c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018c3c:	55                   	push   ebp
c0018c3d:	57                   	push   edi
c0018c3e:	56                   	push   esi
c0018c3f:	53                   	push   ebx
c0018c40:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c44:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018c48:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018c4c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018c50:	39 05 20 db 02 c0    	cmp    DWORD PTR ds:0xc002db20,eax
c0018c56:	75 23                	jne    c0018c7b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018c58:	a1 0c f1 02 c0       	mov    eax,ds:0xc002f10c
c0018c5d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018c61:	89 06                	mov    DWORD PTR [esi],eax
c0018c63:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c0018c68:	89 07                	mov    DWORD PTR [edi],eax
c0018c6a:	a1 04 f1 02 c0       	mov    eax,ds:0xc002f104
c0018c6f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018c72:	a1 00 f1 02 c0       	mov    eax,ds:0xc002f100
c0018c77:	89 02                	mov    DWORD PTR [edx],eax
c0018c79:	eb 3f                	jmp    c0018cba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018c7b:	31 c9                	xor    ecx,ecx
c0018c7d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c81:	0f a2                	cpuid  
c0018c83:	89 06                	mov    DWORD PTR [esi],eax
c0018c85:	89 1f                	mov    DWORD PTR [edi],ebx
c0018c87:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018c8b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018c8e:	89 10                	mov    DWORD PTR [eax],edx
c0018c90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c94:	a3 20 db 02 c0       	mov    ds:0xc002db20,eax
c0018c99:	8b 06                	mov    eax,DWORD PTR [esi]
c0018c9b:	a3 0c f1 02 c0       	mov    ds:0xc002f10c,eax
c0018ca0:	8b 07                	mov    eax,DWORD PTR [edi]
c0018ca2:	a3 08 f1 02 c0       	mov    ds:0xc002f108,eax
c0018ca7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018caa:	a3 04 f1 02 c0       	mov    ds:0xc002f104,eax
c0018caf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018cb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cb5:	a3 00 f1 02 c0       	mov    ds:0xc002f100,eax
c0018cba:	5b                   	pop    ebx
c0018cbb:	5e                   	pop    esi
c0018cbc:	5f                   	pop    edi
c0018cbd:	5d                   	pop    ebp
c0018cbe:	c3                   	ret    
c0018cbf:	90                   	nop

c0018cc0 <CPU::cpuidCheckEDX(unsigned int)>:
c0018cc0:	83 ec 10             	sub    esp,0x10
c0018cc3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cc7:	50                   	push   eax
c0018cc8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ccc:	50                   	push   eax
c0018ccd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cd1:	50                   	push   eax
c0018cd2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cd6:	50                   	push   eax
c0018cd7:	6a 01                	push   0x1
c0018cd9:	e8 5e ff ff ff       	call   c0018c3c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018cde:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ce2:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018ce6:	0f 95 c0             	setne  al
c0018ce9:	83 c4 24             	add    esp,0x24
c0018cec:	c3                   	ret    
c0018ced:	90                   	nop

c0018cee <CPU::cpuidCheckECX(unsigned int)>:
c0018cee:	83 ec 10             	sub    esp,0x10
c0018cf1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cf5:	50                   	push   eax
c0018cf6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cfa:	50                   	push   eax
c0018cfb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cff:	50                   	push   eax
c0018d00:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d04:	50                   	push   eax
c0018d05:	6a 01                	push   0x1
c0018d07:	e8 30 ff ff ff       	call   c0018c3c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d0c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d10:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d14:	0f 95 c0             	setne  al
c0018d17:	83 c4 24             	add    esp,0x24
c0018d1a:	c3                   	ret    
c0018d1b:	90                   	nop

c0018d1c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018d1c:	83 ec 10             	sub    esp,0x10
c0018d1f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d23:	50                   	push   eax
c0018d24:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d28:	50                   	push   eax
c0018d29:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d2d:	50                   	push   eax
c0018d2e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d32:	50                   	push   eax
c0018d33:	6a 07                	push   0x7
c0018d35:	e8 02 ff ff ff       	call   c0018c3c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d3a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d3e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018d42:	0f 95 c0             	setne  al
c0018d45:	83 c4 24             	add    esp,0x24
c0018d48:	c3                   	ret    
c0018d49:	90                   	nop

c0018d4a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018d4a:	83 ec 10             	sub    esp,0x10
c0018d4d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d51:	50                   	push   eax
c0018d52:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d56:	50                   	push   eax
c0018d57:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d5b:	50                   	push   eax
c0018d5c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d60:	50                   	push   eax
c0018d61:	6a 07                	push   0x7
c0018d63:	e8 d4 fe ff ff       	call   c0018c3c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d68:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d6c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d70:	0f 95 c0             	setne  al
c0018d73:	83 c4 24             	add    esp,0x24
c0018d76:	c3                   	ret    
c0018d77:	90                   	nop

c0018d78 <CPU::CPU()>:
c0018d78:	83 ec 0c             	sub    esp,0xc
c0018d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d7f:	83 ec 08             	sub    esp,0x8
c0018d82:	68 75 bf 02 c0       	push   0xc002bf75
c0018d87:	50                   	push   eax
c0018d88:	e8 71 b2 ff ff       	call   c0013ffe <Device::Device(char const*)>
c0018d8d:	83 c4 10             	add    esp,0x10
c0018d90:	ba 98 c1 02 c0       	mov    edx,0xc002c198
c0018d95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d99:	89 10                	mov    DWORD PTR [eax],edx
c0018d9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d9f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018da9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dad:	05 78 01 00 00       	add    eax,0x178
c0018db2:	83 ec 0c             	sub    esp,0xc
c0018db5:	50                   	push   eax
c0018db6:	e8 dd 62 ff ff       	call   c000f098 <GDT::GDT()>
c0018dbb:	83 c4 10             	add    esp,0x10
c0018dbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dc2:	05 7c 09 00 00       	add    eax,0x97c
c0018dc7:	83 ec 0c             	sub    esp,0xc
c0018dca:	50                   	push   eax
c0018dcb:	e8 18 65 ff ff       	call   c000f2e8 <IDT::IDT()>
c0018dd0:	83 c4 10             	add    esp,0x10
c0018dd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dd7:	05 7c 11 00 00       	add    eax,0x117c
c0018ddc:	83 ec 0c             	sub    esp,0xc
c0018ddf:	50                   	push   eax
c0018de0:	e8 51 81 ff ff       	call   c0010f36 <TSS::TSS()>
c0018de5:	83 c4 10             	add    esp,0x10
c0018de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dec:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018df3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018df7:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018e01:	90                   	nop
c0018e02:	83 c4 0c             	add    esp,0xc
c0018e05:	c3                   	ret    

c0018e06 <CPU::displayFeatures()>:
c0018e06:	c3                   	ret    
c0018e07:	90                   	nop

c0018e08 <CPU::detectFeatures()>:
c0018e08:	55                   	push   ebp
c0018e09:	57                   	push   edi
c0018e0a:	56                   	push   esi
c0018e0b:	53                   	push   ebx
c0018e0c:	83 ec 50             	sub    esp,0x50
c0018e0f:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018e13:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018e1d:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018e24:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018e2a:	6a 0d                	push   0xd
c0018e2c:	6a 00                	push   0x0
c0018e2e:	55                   	push   ebp
c0018e2f:	e8 1c 79 fe ff       	call   c0000750 <memset>
c0018e34:	83 c4 10             	add    esp,0x10
c0018e37:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0018e3c:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018e43:	0f 84 22 09 00 00    	je     c001976b <CPU::detectFeatures()+0x963>
c0018e49:	83 ec 0c             	sub    esp,0xc
c0018e4c:	89 ef                	mov    edi,ebp
c0018e4e:	6a 10                	push   0x10
c0018e50:	e8 6b fe ff ff       	call   c0018cc0 <CPU::cpuidCheckEDX(unsigned int)>
c0018e55:	83 e0 01             	and    eax,0x1
c0018e58:	8d 14 00             	lea    edx,[eax+eax*1]
c0018e5b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018e61:	83 e0 fd             	and    eax,0xfffffffd
c0018e64:	09 d0                	or     eax,edx
c0018e66:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018e6c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018e73:	e8 48 fe ff ff       	call   c0018cc0 <CPU::cpuidCheckEDX(unsigned int)>
c0018e78:	83 e0 01             	and    eax,0x1
c0018e7b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018e82:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018e88:	83 e0 fb             	and    eax,0xfffffffb
c0018e8b:	09 d0                	or     eax,edx
c0018e8d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018e93:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018e9a:	e8 21 fe ff ff       	call   c0018cc0 <CPU::cpuidCheckEDX(unsigned int)>
c0018e9f:	83 e0 01             	and    eax,0x1
c0018ea2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018ea9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018eaf:	83 e0 f7             	and    eax,0xfffffff7
c0018eb2:	09 d0                	or     eax,edx
c0018eb4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018eba:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018ec1:	e8 fa fd ff ff       	call   c0018cc0 <CPU::cpuidCheckEDX(unsigned int)>
c0018ec6:	83 e0 01             	and    eax,0x1
c0018ec9:	c1 e0 04             	shl    eax,0x4
c0018ecc:	88 c2                	mov    dl,al
c0018ece:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ed4:	83 e0 ef             	and    eax,0xffffffef
c0018ed7:	09 d0                	or     eax,edx
c0018ed9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018edf:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018ee6:	e8 d5 fd ff ff       	call   c0018cc0 <CPU::cpuidCheckEDX(unsigned int)>
c0018eeb:	83 e0 01             	and    eax,0x1
c0018eee:	c1 e0 05             	shl    eax,0x5
c0018ef1:	88 c2                	mov    dl,al
c0018ef3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ef9:	83 e0 df             	and    eax,0xffffffdf
c0018efc:	09 d0                	or     eax,edx
c0018efe:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f04:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018f0b:	e8 b0 fd ff ff       	call   c0018cc0 <CPU::cpuidCheckEDX(unsigned int)>
c0018f10:	83 e0 01             	and    eax,0x1
c0018f13:	8d 14 00             	lea    edx,[eax+eax*1]
c0018f16:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018f1c:	83 e0 fd             	and    eax,0xfffffffd
c0018f1f:	09 d0                	or     eax,edx
c0018f21:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018f27:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018f2e:	e8 8d fd ff ff       	call   c0018cc0 <CPU::cpuidCheckEDX(unsigned int)>
c0018f33:	83 e0 01             	and    eax,0x1
c0018f36:	c1 e0 06             	shl    eax,0x6
c0018f39:	88 c2                	mov    dl,al
c0018f3b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018f41:	83 e0 bf             	and    eax,0xffffffbf
c0018f44:	09 d0                	or     eax,edx
c0018f46:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018f4c:	58                   	pop    eax
c0018f4d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f51:	50                   	push   eax
c0018f52:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f56:	50                   	push   eax
c0018f57:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018f5b:	56                   	push   esi
c0018f5c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f60:	50                   	push   eax
c0018f61:	6a 00                	push   0x0
c0018f63:	e8 d4 fc ff ff       	call   c0018c3c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f68:	b8 04 00 00 00       	mov    eax,0x4
c0018f6d:	89 c1                	mov    ecx,eax
c0018f6f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018f71:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018f77:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018f7b:	89 c1                	mov    ecx,eax
c0018f7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018f7f:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018f85:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018f89:	89 c1                	mov    ecx,eax
c0018f8b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018f8d:	83 c4 18             	add    esp,0x18
c0018f90:	68 20 be 02 c0       	push   0xc002be20
c0018f95:	55                   	push   ebp
c0018f96:	e8 fd 78 fe ff       	call   c0000898 <strcmp>
c0018f9b:	83 c4 10             	add    esp,0x10
c0018f9e:	85 c0                	test   eax,eax
c0018fa0:	75 0f                	jne    c0018fb1 <CPU::detectFeatures()+0x1a9>
c0018fa2:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018fac:	e9 22 02 00 00       	jmp    c00191d3 <CPU::detectFeatures()+0x3cb>
c0018fb1:	50                   	push   eax
c0018fb2:	50                   	push   eax
c0018fb3:	68 2d be 02 c0       	push   0xc002be2d
c0018fb8:	55                   	push   ebp
c0018fb9:	e8 da 78 fe ff       	call   c0000898 <strcmp>
c0018fbe:	83 c4 10             	add    esp,0x10
c0018fc1:	85 c0                	test   eax,eax
c0018fc3:	74 dd                	je     c0018fa2 <CPU::detectFeatures()+0x19a>
c0018fc5:	50                   	push   eax
c0018fc6:	50                   	push   eax
c0018fc7:	68 3a be 02 c0       	push   0xc002be3a
c0018fcc:	55                   	push   ebp
c0018fcd:	e8 c6 78 fe ff       	call   c0000898 <strcmp>
c0018fd2:	83 c4 10             	add    esp,0x10
c0018fd5:	85 c0                	test   eax,eax
c0018fd7:	74 2a                	je     c0019003 <CPU::detectFeatures()+0x1fb>
c0018fd9:	50                   	push   eax
c0018fda:	50                   	push   eax
c0018fdb:	68 47 be 02 c0       	push   0xc002be47
c0018fe0:	55                   	push   ebp
c0018fe1:	e8 b2 78 fe ff       	call   c0000898 <strcmp>
c0018fe6:	83 c4 10             	add    esp,0x10
c0018fe9:	85 c0                	test   eax,eax
c0018feb:	74 16                	je     c0019003 <CPU::detectFeatures()+0x1fb>
c0018fed:	50                   	push   eax
c0018fee:	50                   	push   eax
c0018fef:	68 54 be 02 c0       	push   0xc002be54
c0018ff4:	55                   	push   ebp
c0018ff5:	e8 9e 78 fe ff       	call   c0000898 <strcmp>
c0018ffa:	83 c4 10             	add    esp,0x10
c0018ffd:	85 c0                	test   eax,eax
c0018fff:	74 48                	je     c0019049 <CPU::detectFeatures()+0x241>
c0019001:	eb 0f                	jmp    c0019012 <CPU::detectFeatures()+0x20a>
c0019003:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001900d:	e9 c1 01 00 00       	jmp    c00191d3 <CPU::detectFeatures()+0x3cb>
c0019012:	50                   	push   eax
c0019013:	50                   	push   eax
c0019014:	68 61 be 02 c0       	push   0xc002be61
c0019019:	55                   	push   ebp
c001901a:	e8 79 78 fe ff       	call   c0000898 <strcmp>
c001901f:	83 c4 10             	add    esp,0x10
c0019022:	85 c0                	test   eax,eax
c0019024:	74 23                	je     c0019049 <CPU::detectFeatures()+0x241>
c0019026:	57                   	push   edi
c0019027:	57                   	push   edi
c0019028:	68 6e be 02 c0       	push   0xc002be6e
c001902d:	55                   	push   ebp
c001902e:	e8 65 78 fe ff       	call   c0000898 <strcmp>
c0019033:	83 c4 10             	add    esp,0x10
c0019036:	85 c0                	test   eax,eax
c0019038:	75 1e                	jne    c0019058 <CPU::detectFeatures()+0x250>
c001903a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019044:	e9 8a 01 00 00       	jmp    c00191d3 <CPU::detectFeatures()+0x3cb>
c0019049:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0019053:	e9 7b 01 00 00       	jmp    c00191d3 <CPU::detectFeatures()+0x3cb>
c0019058:	56                   	push   esi
c0019059:	56                   	push   esi
c001905a:	68 7b be 02 c0       	push   0xc002be7b
c001905f:	55                   	push   ebp
c0019060:	e8 33 78 fe ff       	call   c0000898 <strcmp>
c0019065:	83 c4 10             	add    esp,0x10
c0019068:	85 c0                	test   eax,eax
c001906a:	75 0f                	jne    c001907b <CPU::detectFeatures()+0x273>
c001906c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0019076:	e9 58 01 00 00       	jmp    c00191d3 <CPU::detectFeatures()+0x3cb>
c001907b:	51                   	push   ecx
c001907c:	51                   	push   ecx
c001907d:	68 3a be 02 c0       	push   0xc002be3a
c0019082:	55                   	push   ebp
c0019083:	e8 10 78 fe ff       	call   c0000898 <strcmp>
c0019088:	83 c4 10             	add    esp,0x10
c001908b:	85 c0                	test   eax,eax
c001908d:	75 0f                	jne    c001909e <CPU::detectFeatures()+0x296>
c001908f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0019099:	e9 35 01 00 00       	jmp    c00191d3 <CPU::detectFeatures()+0x3cb>
c001909e:	52                   	push   edx
c001909f:	52                   	push   edx
c00190a0:	68 88 be 02 c0       	push   0xc002be88
c00190a5:	55                   	push   ebp
c00190a6:	e8 ed 77 fe ff       	call   c0000898 <strcmp>
c00190ab:	83 c4 10             	add    esp,0x10
c00190ae:	85 c0                	test   eax,eax
c00190b0:	75 0f                	jne    c00190c1 <CPU::detectFeatures()+0x2b9>
c00190b2:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00190bc:	e9 12 01 00 00       	jmp    c00191d3 <CPU::detectFeatures()+0x3cb>
c00190c1:	50                   	push   eax
c00190c2:	50                   	push   eax
c00190c3:	68 95 be 02 c0       	push   0xc002be95
c00190c8:	55                   	push   ebp
c00190c9:	e8 ca 77 fe ff       	call   c0000898 <strcmp>
c00190ce:	83 c4 10             	add    esp,0x10
c00190d1:	85 c0                	test   eax,eax
c00190d3:	75 0f                	jne    c00190e4 <CPU::detectFeatures()+0x2dc>
c00190d5:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00190df:	e9 ef 00 00 00       	jmp    c00191d3 <CPU::detectFeatures()+0x3cb>
c00190e4:	50                   	push   eax
c00190e5:	50                   	push   eax
c00190e6:	68 a2 be 02 c0       	push   0xc002bea2
c00190eb:	55                   	push   ebp
c00190ec:	e8 a7 77 fe ff       	call   c0000898 <strcmp>
c00190f1:	83 c4 10             	add    esp,0x10
c00190f4:	85 c0                	test   eax,eax
c00190f6:	75 0f                	jne    c0019107 <CPU::detectFeatures()+0x2ff>
c00190f8:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019102:	e9 cc 00 00 00       	jmp    c00191d3 <CPU::detectFeatures()+0x3cb>
c0019107:	50                   	push   eax
c0019108:	50                   	push   eax
c0019109:	68 af be 02 c0       	push   0xc002beaf
c001910e:	55                   	push   ebp
c001910f:	e8 84 77 fe ff       	call   c0000898 <strcmp>
c0019114:	83 c4 10             	add    esp,0x10
c0019117:	85 c0                	test   eax,eax
c0019119:	75 0f                	jne    c001912a <CPU::detectFeatures()+0x322>
c001911b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019125:	e9 a9 00 00 00       	jmp    c00191d3 <CPU::detectFeatures()+0x3cb>
c001912a:	50                   	push   eax
c001912b:	50                   	push   eax
c001912c:	68 bc be 02 c0       	push   0xc002bebc
c0019131:	55                   	push   ebp
c0019132:	e8 61 77 fe ff       	call   c0000898 <strcmp>
c0019137:	83 c4 10             	add    esp,0x10
c001913a:	85 c0                	test   eax,eax
c001913c:	75 0f                	jne    c001914d <CPU::detectFeatures()+0x345>
c001913e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019148:	e9 86 00 00 00       	jmp    c00191d3 <CPU::detectFeatures()+0x3cb>
c001914d:	50                   	push   eax
c001914e:	50                   	push   eax
c001914f:	68 c9 be 02 c0       	push   0xc002bec9
c0019154:	55                   	push   ebp
c0019155:	e8 3e 77 fe ff       	call   c0000898 <strcmp>
c001915a:	83 c4 10             	add    esp,0x10
c001915d:	85 c0                	test   eax,eax
c001915f:	75 0c                	jne    c001916d <CPU::detectFeatures()+0x365>
c0019161:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001916b:	eb 66                	jmp    c00191d3 <CPU::detectFeatures()+0x3cb>
c001916d:	50                   	push   eax
c001916e:	50                   	push   eax
c001916f:	68 d6 be 02 c0       	push   0xc002bed6
c0019174:	55                   	push   ebp
c0019175:	e8 1e 77 fe ff       	call   c0000898 <strcmp>
c001917a:	83 c4 10             	add    esp,0x10
c001917d:	85 c0                	test   eax,eax
c001917f:	75 0c                	jne    c001918d <CPU::detectFeatures()+0x385>
c0019181:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001918b:	eb 46                	jmp    c00191d3 <CPU::detectFeatures()+0x3cb>
c001918d:	57                   	push   edi
c001918e:	57                   	push   edi
c001918f:	68 e3 be 02 c0       	push   0xc002bee3
c0019194:	55                   	push   ebp
c0019195:	e8 fe 76 fe ff       	call   c0000898 <strcmp>
c001919a:	83 c4 10             	add    esp,0x10
c001919d:	85 c0                	test   eax,eax
c001919f:	74 e0                	je     c0019181 <CPU::detectFeatures()+0x379>
c00191a1:	56                   	push   esi
c00191a2:	56                   	push   esi
c00191a3:	68 f0 be 02 c0       	push   0xc002bef0
c00191a8:	55                   	push   ebp
c00191a9:	e8 ea 76 fe ff       	call   c0000898 <strcmp>
c00191ae:	83 c4 10             	add    esp,0x10
c00191b1:	85 c0                	test   eax,eax
c00191b3:	74 cc                	je     c0019181 <CPU::detectFeatures()+0x379>
c00191b5:	51                   	push   ecx
c00191b6:	51                   	push   ecx
c00191b7:	68 fd be 02 c0       	push   0xc002befd
c00191bc:	55                   	push   ebp
c00191bd:	e8 d6 76 fe ff       	call   c0000898 <strcmp>
c00191c2:	83 c4 10             	add    esp,0x10
c00191c5:	85 c0                	test   eax,eax
c00191c7:	74 b8                	je     c0019181 <CPU::detectFeatures()+0x379>
c00191c9:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00191d3:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00191d8:	0f 86 be 00 00 00    	jbe    c001929c <CPU::detectFeatures()+0x494>
c00191de:	83 ec 0c             	sub    esp,0xc
c00191e1:	68 80 00 00 00       	push   0x80
c00191e6:	e8 31 fb ff ff       	call   c0018d1c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00191eb:	83 e0 01             	and    eax,0x1
c00191ee:	c1 e0 06             	shl    eax,0x6
c00191f1:	88 c2                	mov    dl,al
c00191f3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191f9:	83 e0 bf             	and    eax,0xffffffbf
c00191fc:	09 d0                	or     eax,edx
c00191fe:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019204:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001920b:	e8 0c fb ff ff       	call   c0018d1c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019210:	83 e0 01             	and    eax,0x1
c0019213:	c1 e0 04             	shl    eax,0x4
c0019216:	88 c2                	mov    dl,al
c0019218:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001921e:	83 e0 ef             	and    eax,0xffffffef
c0019221:	09 d0                	or     eax,edx
c0019223:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019229:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019230:	e8 e7 fa ff ff       	call   c0018d1c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019235:	c1 e0 07             	shl    eax,0x7
c0019238:	88 c2                	mov    dl,al
c001923a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019240:	83 e0 7f             	and    eax,0x7f
c0019243:	09 d0                	or     eax,edx
c0019245:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001924b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019252:	e8 f3 fa ff ff       	call   c0018d4a <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019257:	83 e0 01             	and    eax,0x1
c001925a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019261:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019267:	83 e0 f7             	and    eax,0xfffffff7
c001926a:	09 d0                	or     eax,edx
c001926c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019272:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019279:	e8 cc fa ff ff       	call   c0018d4a <CPU::cpuidCheckExtendedECX(unsigned int)>
c001927e:	83 c4 10             	add    esp,0x10
c0019281:	83 e0 01             	and    eax,0x1
c0019284:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001928b:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019291:	83 e0 fb             	and    eax,0xfffffffb
c0019294:	09 d0                	or     eax,edx
c0019296:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001929c:	83 ec 0c             	sub    esp,0xc
c001929f:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192a3:	50                   	push   eax
c00192a4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192a8:	50                   	push   eax
c00192a9:	8d 74 24 28          	lea    esi,[esp+0x28]
c00192ad:	56                   	push   esi
c00192ae:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192b2:	50                   	push   eax
c00192b3:	6a 01                	push   0x1
c00192b5:	e8 82 f9 ff ff       	call   c0018c3c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00192ba:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00192be:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00192c4:	88 ca                	mov    dl,cl
c00192c6:	83 e0 f0             	and    eax,0xfffffff0
c00192c9:	83 e2 0f             	and    edx,0xf
c00192cc:	09 d0                	or     eax,edx
c00192ce:	88 ca                	mov    dl,cl
c00192d0:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00192d6:	c0 ea 04             	shr    dl,0x4
c00192d9:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00192dd:	0f b6 c2             	movzx  eax,dl
c00192e0:	83 c4 20             	add    esp,0x20
c00192e3:	c1 e0 06             	shl    eax,0x6
c00192e6:	89 c7                	mov    edi,eax
c00192e8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00192ee:	66 25 3f c0          	and    ax,0xc03f
c00192f2:	09 f8                	or     eax,edi
c00192f4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00192fb:	89 c8                	mov    eax,ecx
c00192fd:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0019304:	c1 e8 08             	shr    eax,0x8
c0019307:	83 e5 3f             	and    ebp,0x3f
c001930a:	83 e0 0f             	and    eax,0xf
c001930d:	89 c7                	mov    edi,eax
c001930f:	c1 e7 06             	shl    edi,0x6
c0019312:	09 ef                	or     edi,ebp
c0019314:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c001931b:	89 fa                	mov    edx,edi
c001931d:	83 e5 c0             	and    ebp,0xffffffc0
c0019320:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019326:	88 c2                	mov    dl,al
c0019328:	c0 ea 02             	shr    dl,0x2
c001932b:	89 d7                	mov    edi,edx
c001932d:	09 ef                	or     edi,ebp
c001932f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019335:	89 fa                	mov    edx,edi
c0019337:	83 e5 cf             	and    ebp,0xffffffcf
c001933a:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019340:	89 cf                	mov    edi,ecx
c0019342:	c1 ef 0c             	shr    edi,0xc
c0019345:	83 e7 03             	and    edi,0x3
c0019348:	c1 e7 04             	shl    edi,0x4
c001934b:	09 ef                	or     edi,ebp
c001934d:	3c 06                	cmp    al,0x6
c001934f:	89 fa                	mov    edx,edi
c0019351:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019357:	74 04                	je     c001935d <CPU::detectFeatures()+0x555>
c0019359:	3c 0f                	cmp    al,0xf
c001935b:	75 5c                	jne    c00193b9 <CPU::detectFeatures()+0x5b1>
c001935d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019361:	89 cf                	mov    edi,ecx
c0019363:	c1 ef 10             	shr    edi,0x10
c0019366:	c1 e7 04             	shl    edi,0x4
c0019369:	09 fa                	or     edx,edi
c001936b:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0019371:	0f b6 d2             	movzx  edx,dl
c0019374:	66 81 e7 3f c0       	and    di,0xc03f
c0019379:	c1 e2 06             	shl    edx,0x6
c001937c:	09 fa                	or     edx,edi
c001937e:	3c 0f                	cmp    al,0xf
c0019380:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019387:	75 30                	jne    c00193b9 <CPU::detectFeatures()+0x5b1>
c0019389:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001938f:	c1 e9 14             	shr    ecx,0x14
c0019392:	83 e0 3f             	and    eax,0x3f
c0019395:	83 c1 0f             	add    ecx,0xf
c0019398:	88 ca                	mov    dl,cl
c001939a:	c0 e9 02             	shr    cl,0x2
c001939d:	c1 e2 06             	shl    edx,0x6
c00193a0:	09 d0                	or     eax,edx
c00193a2:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00193a8:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00193ae:	83 e0 c0             	and    eax,0xffffffc0
c00193b1:	09 c1                	or     ecx,eax
c00193b3:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00193b9:	83 ec 0c             	sub    esp,0xc
c00193bc:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00193c3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00193c7:	50                   	push   eax
c00193c8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00193cc:	55                   	push   ebp
c00193cd:	56                   	push   esi
c00193ce:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00193d2:	57                   	push   edi
c00193d3:	68 00 00 00 80       	push   0x80000000
c00193d8:	e8 5f f8 ff ff       	call   c0018c3c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00193dd:	83 c4 20             	add    esp,0x20
c00193e0:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00193e8:	76 22                	jbe    c001940c <CPU::detectFeatures()+0x604>
c00193ea:	83 ec 0c             	sub    esp,0xc
c00193ed:	8d 44 24 28          	lea    eax,[esp+0x28]
c00193f1:	50                   	push   eax
c00193f2:	55                   	push   ebp
c00193f3:	56                   	push   esi
c00193f4:	57                   	push   edi
c00193f5:	68 01 00 00 80       	push   0x80000001
c00193fa:	e8 3d f8 ff ff       	call   c0018c3c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00193ff:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019409:	83 c4 20             	add    esp,0x20
c001940c:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019412:	83 f8 01             	cmp    eax,0x1
c0019415:	75 6f                	jne    c0019486 <CPU::detectFeatures()+0x67e>
c0019417:	51                   	push   ecx
c0019418:	51                   	push   ecx
c0019419:	68 09 bf 02 c0       	push   0xc002bf09
c001941e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019422:	56                   	push   esi
c0019423:	e8 e4 73 fe ff       	call   c000080c <strcpy>
c0019428:	5f                   	pop    edi
c0019429:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001942f:	5d                   	pop    ebp
c0019430:	66 c1 e8 06          	shr    ax,0x6
c0019434:	0f b6 c0             	movzx  eax,al
c0019437:	50                   	push   eax
c0019438:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001943e:	c1 e8 0e             	shr    eax,0xe
c0019441:	0f b6 c0             	movzx  eax,al
c0019444:	50                   	push   eax
c0019445:	e8 9c f4 ff ff       	call   c00188e6 <CPU::lookupIntelName(unsigned char, unsigned char)>
c001944a:	5a                   	pop    edx
c001944b:	59                   	pop    ecx
c001944c:	50                   	push   eax
c001944d:	56                   	push   esi
c001944e:	e8 f9 74 fe ff       	call   c000094c <strcat>
c0019453:	5f                   	pop    edi
c0019454:	5d                   	pop    ebp
c0019455:	56                   	push   esi
c0019456:	53                   	push   ebx
c0019457:	e8 94 ab ff ff       	call   c0013ff0 <Device::setName(char const*)>
c001945c:	58                   	pop    eax
c001945d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019463:	5a                   	pop    edx
c0019464:	68 10 bf 02 c0       	push   0xc002bf10
c0019469:	50                   	push   eax
c001946a:	e8 29 74 fe ff       	call   c0000898 <strcmp>
c001946f:	83 c4 10             	add    esp,0x10
c0019472:	85 c0                	test   eax,eax
c0019474:	0f 85 71 03 00 00    	jne    c00197eb <CPU::detectFeatures()+0x9e3>
c001947a:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019481:	e9 65 03 00 00       	jmp    c00197eb <CPU::detectFeatures()+0x9e3>
c0019486:	83 f8 02             	cmp    eax,0x2
c0019489:	0f 85 b5 00 00 00    	jne    c0019544 <CPU::detectFeatures()+0x73c>
c001948f:	57                   	push   edi
c0019490:	57                   	push   edi
c0019491:	68 22 bf 02 c0       	push   0xc002bf22
c0019496:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001949a:	56                   	push   esi
c001949b:	e8 6c 73 fe ff       	call   c000080c <strcpy>
c00194a0:	5d                   	pop    ebp
c00194a1:	58                   	pop    eax
c00194a2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194a8:	66 c1 e8 06          	shr    ax,0x6
c00194ac:	0f b6 c0             	movzx  eax,al
c00194af:	50                   	push   eax
c00194b0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194b6:	c1 e8 0e             	shr    eax,0xe
c00194b9:	0f b6 c0             	movzx  eax,al
c00194bc:	50                   	push   eax
c00194bd:	e8 90 f2 ff ff       	call   c0018752 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00194c2:	5a                   	pop    edx
c00194c3:	59                   	pop    ecx
c00194c4:	50                   	push   eax
c00194c5:	56                   	push   esi
c00194c6:	e8 81 74 fe ff       	call   c000094c <strcat>
c00194cb:	5f                   	pop    edi
c00194cc:	5d                   	pop    ebp
c00194cd:	56                   	push   esi
c00194ce:	53                   	push   ebx
c00194cf:	e8 1c ab ff ff       	call   c0013ff0 <Device::setName(char const*)>
c00194d4:	58                   	pop    eax
c00194d5:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00194db:	5a                   	pop    edx
c00194dc:	68 27 bf 02 c0       	push   0xc002bf27
c00194e1:	50                   	push   eax
c00194e2:	e8 b1 73 fe ff       	call   c0000898 <strcmp>
c00194e7:	83 c4 10             	add    esp,0x10
c00194ea:	85 c0                	test   eax,eax
c00194ec:	75 20                	jne    c001950e <CPU::detectFeatures()+0x706>
c00194ee:	8b 15 08 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e608
c00194f4:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00194fa:	a8 01                	test   al,0x1
c00194fc:	74 10                	je     c001950e <CPU::detectFeatures()+0x706>
c00194fe:	83 e0 fe             	and    eax,0xfffffffe
c0019501:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019507:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001950e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019514:	c1 e8 0e             	shr    eax,0xe
c0019517:	3c 05                	cmp    al,0x5
c0019519:	0f 85 cc 02 00 00    	jne    c00197eb <CPU::detectFeatures()+0x9e3>
c001951f:	56                   	push   esi
c0019520:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019526:	83 e0 0f             	and    eax,0xf
c0019529:	50                   	push   eax
c001952a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019530:	66 c1 e8 06          	shr    ax,0x6
c0019534:	0f b6 c0             	movzx  eax,al
c0019537:	50                   	push   eax
c0019538:	6a 05                	push   0x5
c001953a:	e8 89 f6 ff ff       	call   c0018bc8 <CPU::AMD_K6_writeback(int, int, int)>
c001953f:	e9 1f 02 00 00       	jmp    c0019763 <CPU::detectFeatures()+0x95b>
c0019544:	8d 50 fd             	lea    edx,[eax-0x3]
c0019547:	83 fa 01             	cmp    edx,0x1
c001954a:	76 09                	jbe    c0019555 <CPU::detectFeatures()+0x74d>
c001954c:	83 f8 06             	cmp    eax,0x6
c001954f:	0f 85 91 01 00 00    	jne    c00196e6 <CPU::detectFeatures()+0x8de>
c0019555:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001955b:	c1 ea 0e             	shr    edx,0xe
c001955e:	80 fa 05             	cmp    dl,0x5
c0019561:	75 7b                	jne    c00195de <CPU::detectFeatures()+0x7d6>
c0019563:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019569:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001956e:	66 81 fa 00 01       	cmp    dx,0x100
c0019573:	75 0c                	jne    c0019581 <CPU::detectFeatures()+0x779>
c0019575:	51                   	push   ecx
c0019576:	51                   	push   ecx
c0019577:	68 2e bf 02 c0       	push   0xc002bf2e
c001957c:	e9 dc 01 00 00       	jmp    c001975d <CPU::detectFeatures()+0x955>
c0019581:	66 81 fa 00 02       	cmp    dx,0x200
c0019586:	75 0c                	jne    c0019594 <CPU::detectFeatures()+0x78c>
c0019588:	52                   	push   edx
c0019589:	52                   	push   edx
c001958a:	68 41 bf 02 c0       	push   0xc002bf41
c001958f:	e9 c9 01 00 00       	jmp    c001975d <CPU::detectFeatures()+0x955>
c0019594:	66 81 fa 40 02       	cmp    dx,0x240
c0019599:	75 0c                	jne    c00195a7 <CPU::detectFeatures()+0x79f>
c001959b:	50                   	push   eax
c001959c:	50                   	push   eax
c001959d:	68 53 bf 02 c0       	push   0xc002bf53
c00195a2:	e9 b6 01 00 00       	jmp    c001975d <CPU::detectFeatures()+0x955>
c00195a7:	83 f8 06             	cmp    eax,0x6
c00195aa:	75 0c                	jne    c00195b8 <CPU::detectFeatures()+0x7b0>
c00195ac:	50                   	push   eax
c00195ad:	50                   	push   eax
c00195ae:	68 65 bf 02 c0       	push   0xc002bf65
c00195b3:	e9 a5 01 00 00       	jmp    c001975d <CPU::detectFeatures()+0x955>
c00195b8:	83 f8 04             	cmp    eax,0x4
c00195bb:	75 0c                	jne    c00195c9 <CPU::detectFeatures()+0x7c1>
c00195bd:	50                   	push   eax
c00195be:	50                   	push   eax
c00195bf:	68 71 bf 02 c0       	push   0xc002bf71
c00195c4:	e9 94 01 00 00       	jmp    c001975d <CPU::detectFeatures()+0x955>
c00195c9:	83 f8 03             	cmp    eax,0x3
c00195cc:	0f 85 19 02 00 00    	jne    c00197eb <CPU::detectFeatures()+0x9e3>
c00195d2:	50                   	push   eax
c00195d3:	50                   	push   eax
c00195d4:	68 79 bf 02 c0       	push   0xc002bf79
c00195d9:	e9 7f 01 00 00       	jmp    c001975d <CPU::detectFeatures()+0x955>
c00195de:	80 fa 06             	cmp    dl,0x6
c00195e1:	0f 85 db 00 00 00    	jne    c00196c2 <CPU::detectFeatures()+0x8ba>
c00195e7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00195ed:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00195f2:	66 81 fa 80 01       	cmp    dx,0x180
c00195f7:	75 0c                	jne    c0019605 <CPU::detectFeatures()+0x7fd>
c00195f9:	50                   	push   eax
c00195fa:	50                   	push   eax
c00195fb:	68 84 bf 02 c0       	push   0xc002bf84
c0019600:	e9 58 01 00 00       	jmp    c001975d <CPU::detectFeatures()+0x955>
c0019605:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001960b:	66 f7 c1 80 ff       	test   cx,0xff80
c0019610:	75 0c                	jne    c001961e <CPU::detectFeatures()+0x816>
c0019612:	50                   	push   eax
c0019613:	50                   	push   eax
c0019614:	68 94 bf 02 c0       	push   0xc002bf94
c0019619:	e9 3f 01 00 00       	jmp    c001975d <CPU::detectFeatures()+0x955>
c001961e:	66 81 fa 40 02       	cmp    dx,0x240
c0019623:	75 0c                	jne    c0019631 <CPU::detectFeatures()+0x829>
c0019625:	55                   	push   ebp
c0019626:	55                   	push   ebp
c0019627:	68 9b bf 02 c0       	push   0xc002bf9b
c001962c:	e9 2c 01 00 00       	jmp    c001975d <CPU::detectFeatures()+0x955>
c0019631:	66 81 fa 80 02       	cmp    dx,0x280
c0019636:	75 0c                	jne    c0019644 <CPU::detectFeatures()+0x83c>
c0019638:	57                   	push   edi
c0019639:	57                   	push   edi
c001963a:	68 a4 bf 02 c0       	push   0xc002bfa4
c001963f:	e9 19 01 00 00       	jmp    c001975d <CPU::detectFeatures()+0x955>
c0019644:	66 81 fa 40 03       	cmp    dx,0x340
c0019649:	74 ed                	je     c0019638 <CPU::detectFeatures()+0x830>
c001964b:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019650:	75 0c                	jne    c001965e <CPU::detectFeatures()+0x856>
c0019652:	56                   	push   esi
c0019653:	56                   	push   esi
c0019654:	68 ab bf 02 c0       	push   0xc002bfab
c0019659:	e9 ff 00 00 00       	jmp    c001975d <CPU::detectFeatures()+0x955>
c001965e:	83 f8 06             	cmp    eax,0x6
c0019661:	0f 84 45 ff ff ff    	je     c00195ac <CPU::detectFeatures()+0x7a4>
c0019667:	83 f8 04             	cmp    eax,0x4
c001966a:	0f 84 4d ff ff ff    	je     c00195bd <CPU::detectFeatures()+0x7b5>
c0019670:	83 f8 03             	cmp    eax,0x3
c0019673:	0f 85 72 01 00 00    	jne    c00197eb <CPU::detectFeatures()+0x9e3>
c0019679:	51                   	push   ecx
c001967a:	51                   	push   ecx
c001967b:	68 b4 bf 02 c0       	push   0xc002bfb4
c0019680:	53                   	push   ebx
c0019681:	e8 6a a9 ff ff       	call   c0013ff0 <Device::setName(char const*)>
c0019686:	b1 c1                	mov    cl,0xc1
c0019688:	88 c8                	mov    al,cl
c001968a:	e6 22                	out    0x22,al
c001968c:	e4 23                	in     al,0x23
c001968e:	88 c2                	mov    dl,al
c0019690:	88 c8                	mov    al,cl
c0019692:	e6 22                	out    0x22,al
c0019694:	88 d0                	mov    al,dl
c0019696:	83 c8 10             	or     eax,0x10
c0019699:	e6 23                	out    0x23,al
c001969b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00196a2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00196a5:	89 d0                	mov    eax,edx
c00196a7:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00196ad:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00196b1:	40                   	inc    eax
c00196b2:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00196b8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00196bd:	e9 a1 00 00 00       	jmp    c0019763 <CPU::detectFeatures()+0x95b>
c00196c2:	83 f8 06             	cmp    eax,0x6
c00196c5:	0f 84 e1 fe ff ff    	je     c00195ac <CPU::detectFeatures()+0x7a4>
c00196cb:	83 f8 04             	cmp    eax,0x4
c00196ce:	0f 84 e9 fe ff ff    	je     c00195bd <CPU::detectFeatures()+0x7b5>
c00196d4:	83 f8 03             	cmp    eax,0x3
c00196d7:	0f 85 0e 01 00 00    	jne    c00197eb <CPU::detectFeatures()+0x9e3>
c00196dd:	52                   	push   edx
c00196de:	52                   	push   edx
c00196df:	68 bf bf 02 c0       	push   0xc002bfbf
c00196e4:	eb 77                	jmp    c001975d <CPU::detectFeatures()+0x955>
c00196e6:	83 f8 07             	cmp    eax,0x7
c00196e9:	75 09                	jne    c00196f4 <CPU::detectFeatures()+0x8ec>
c00196eb:	50                   	push   eax
c00196ec:	50                   	push   eax
c00196ed:	68 c9 bf 02 c0       	push   0xc002bfc9
c00196f2:	eb 69                	jmp    c001975d <CPU::detectFeatures()+0x955>
c00196f4:	83 f8 0a             	cmp    eax,0xa
c00196f7:	75 09                	jne    c0019702 <CPU::detectFeatures()+0x8fa>
c00196f9:	50                   	push   eax
c00196fa:	50                   	push   eax
c00196fb:	68 d4 bf 02 c0       	push   0xc002bfd4
c0019700:	eb 5b                	jmp    c001975d <CPU::detectFeatures()+0x955>
c0019702:	83 f8 0b             	cmp    eax,0xb
c0019705:	75 09                	jne    c0019710 <CPU::detectFeatures()+0x908>
c0019707:	50                   	push   eax
c0019708:	50                   	push   eax
c0019709:	68 dc bf 02 c0       	push   0xc002bfdc
c001970e:	eb 4d                	jmp    c001975d <CPU::detectFeatures()+0x955>
c0019710:	83 f8 08             	cmp    eax,0x8
c0019713:	75 09                	jne    c001971e <CPU::detectFeatures()+0x916>
c0019715:	50                   	push   eax
c0019716:	50                   	push   eax
c0019717:	68 e5 bf 02 c0       	push   0xc002bfe5
c001971c:	eb 3f                	jmp    c001975d <CPU::detectFeatures()+0x955>
c001971e:	83 f8 09             	cmp    eax,0x9
c0019721:	75 09                	jne    c001972c <CPU::detectFeatures()+0x924>
c0019723:	50                   	push   eax
c0019724:	50                   	push   eax
c0019725:	68 ed bf 02 c0       	push   0xc002bfed
c001972a:	eb 31                	jmp    c001975d <CPU::detectFeatures()+0x955>
c001972c:	83 f8 05             	cmp    eax,0x5
c001972f:	75 09                	jne    c001973a <CPU::detectFeatures()+0x932>
c0019731:	50                   	push   eax
c0019732:	50                   	push   eax
c0019733:	68 f5 bf 02 c0       	push   0xc002bff5
c0019738:	eb 23                	jmp    c001975d <CPU::detectFeatures()+0x955>
c001973a:	83 f8 0c             	cmp    eax,0xc
c001973d:	75 09                	jne    c0019748 <CPU::detectFeatures()+0x940>
c001973f:	55                   	push   ebp
c0019740:	55                   	push   ebp
c0019741:	68 03 c0 02 c0       	push   0xc002c003
c0019746:	eb 15                	jmp    c001975d <CPU::detectFeatures()+0x955>
c0019748:	83 f8 0d             	cmp    eax,0xd
c001974b:	75 09                	jne    c0019756 <CPU::detectFeatures()+0x94e>
c001974d:	57                   	push   edi
c001974e:	57                   	push   edi
c001974f:	68 0e c0 02 c0       	push   0xc002c00e
c0019754:	eb 07                	jmp    c001975d <CPU::detectFeatures()+0x955>
c0019756:	56                   	push   esi
c0019757:	56                   	push   esi
c0019758:	68 22 c0 02 c0       	push   0xc002c022
c001975d:	53                   	push   ebx
c001975e:	e8 8d a8 ff ff       	call   c0013ff0 <Device::setName(char const*)>
c0019763:	83 c4 10             	add    esp,0x10
c0019766:	e9 80 00 00 00       	jmp    c00197eb <CPU::detectFeatures()+0x9e3>
c001976b:	51                   	push   ecx
c001976c:	51                   	push   ecx
c001976d:	68 6e be 02 c0       	push   0xc002be6e
c0019772:	55                   	push   ebp
c0019773:	e8 94 70 fe ff       	call   c000080c <strcpy>
c0019778:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019782:	e8 27 6b fe ff       	call   c00002ae <is486>
c0019787:	83 c4 10             	add    esp,0x10
c001978a:	85 c0                	test   eax,eax
c001978c:	74 2b                	je     c00197b9 <CPU::detectFeatures()+0x9b1>
c001978e:	52                   	push   edx
c001978f:	52                   	push   edx
c0019790:	68 2e c0 02 c0       	push   0xc002c02e
c0019795:	53                   	push   ebx
c0019796:	e8 55 a8 ff ff       	call   c0013ff0 <Device::setName(char const*)>
c001979b:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00197a2:	0f 20 c0             	mov    eax,cr0
c00197a5:	83 e0 14             	and    eax,0x14
c00197a8:	83 c4 10             	add    esp,0x10
c00197ab:	83 f8 04             	cmp    eax,0x4
c00197ae:	75 1f                	jne    c00197cf <CPU::detectFeatures()+0x9c7>
c00197b0:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00197b7:	eb 32                	jmp    c00197eb <CPU::detectFeatures()+0x9e3>
c00197b9:	50                   	push   eax
c00197ba:	50                   	push   eax
c00197bb:	68 39 c0 02 c0       	push   0xc002c039
c00197c0:	53                   	push   ebx
c00197c1:	e8 2a a8 ff ff       	call   c0013ff0 <Device::setName(char const*)>
c00197c6:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00197cd:	eb d3                	jmp    c00197a2 <CPU::detectFeatures()+0x99a>
c00197cf:	e8 b5 6a fe ff       	call   c0000289 <hasLegacyFPU>
c00197d4:	83 e0 01             	and    eax,0x1
c00197d7:	8d 14 00             	lea    edx,[eax+eax*1]
c00197da:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00197e0:	83 e0 fd             	and    eax,0xfffffffd
c00197e3:	09 d0                	or     eax,edx
c00197e5:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00197eb:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00197f2:	83 c4 4c             	add    esp,0x4c
c00197f5:	5b                   	pop    ebx
c00197f6:	5e                   	pop    esi
c00197f7:	5f                   	pop    edi
c00197f8:	5d                   	pop    ebp
c00197f9:	c3                   	ret    

c00197fa <CPU::setupSMEP()>:
c00197fa:	0f 20 e0             	mov    eax,cr4
c00197fd:	0d 00 00 10 00       	or     eax,0x100000
c0019802:	0f 22 e0             	mov    cr4,eax
c0019805:	c3                   	ret    

c0019806 <CPU::setupUMIP()>:
c0019806:	0f 20 e0             	mov    eax,cr4
c0019809:	80 cc 08             	or     ah,0x8
c001980c:	0f 22 e0             	mov    cr4,eax
c001980f:	c3                   	ret    

c0019810 <CPU::setupTSC()>:
c0019810:	0f 20 e0             	mov    eax,cr4
c0019813:	83 c8 04             	or     eax,0x4
c0019816:	0f 22 e0             	mov    cr4,eax
c0019819:	c3                   	ret    

c001981a <CPU::setupLargePages()>:
c001981a:	0f 20 e0             	mov    eax,cr4
c001981d:	83 c8 10             	or     eax,0x10
c0019820:	0f 22 e0             	mov    cr4,eax
c0019823:	c3                   	ret    

c0019824 <CPU::setupPAT()>:
c0019824:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0019829:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019830:	74 2c                	je     c001985e <CPU::setupPAT()+0x3a>
c0019832:	53                   	push   ebx
c0019833:	83 ec 10             	sub    esp,0x10
c0019836:	68 77 02 00 00       	push   0x277
c001983b:	50                   	push   eax
c001983c:	e8 41 55 ff ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c0019841:	83 e2 f8             	and    edx,0xfffffff8
c0019844:	83 ca 01             	or     edx,0x1
c0019847:	52                   	push   edx
c0019848:	50                   	push   eax
c0019849:	68 77 02 00 00       	push   0x277
c001984e:	ff 35 08 e6 02 c0    	push   DWORD PTR ds:0xc002e608
c0019854:	e8 55 55 ff ff       	call   c000edae <Computer::wrmsr(unsigned int, unsigned long long)>
c0019859:	83 c4 28             	add    esp,0x28
c001985c:	5b                   	pop    ebx
c001985d:	c3                   	ret    
c001985e:	c3                   	ret    
c001985f:	90                   	nop

c0019860 <CPU::setupMTRR()>:
c0019860:	c3                   	ret    
c0019861:	90                   	nop

c0019862 <CPU::setupGlobalPages()>:
c0019862:	0f 20 e0             	mov    eax,cr4
c0019865:	0c 80                	or     al,0x80
c0019867:	0f 22 e0             	mov    cr4,eax
c001986a:	c3                   	ret    
c001986b:	90                   	nop

c001986c <CPU::allowUsermodeDataAccess()>:
c001986c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019870:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019877:	74 03                	je     c001987c <CPU::allowUsermodeDataAccess()+0x10>
c0019879:	0f 01 cb             	stac   
c001987c:	c3                   	ret    
c001987d:	90                   	nop

c001987e <CPU::prohibitUsermodeDataAccess()>:
c001987e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019882:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019889:	74 03                	je     c001988e <CPU::prohibitUsermodeDataAccess()+0x10>
c001988b:	0f 01 ca             	clac   
c001988e:	c3                   	ret    
c001988f:	90                   	nop

c0019890 <CPU::setupSMAP()>:
c0019890:	0f 20 e0             	mov    eax,cr4
c0019893:	0d 00 00 20 00       	or     eax,0x200000
c0019898:	0f 22 e0             	mov    cr4,eax
c001989b:	eb e1                	jmp    c001987e <CPU::prohibitUsermodeDataAccess()>
c001989d:	90                   	nop

c001989e <CPU::setupFeatures()>:
c001989e:	83 ec 0c             	sub    esp,0xc
c00198a1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00198a5:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00198ac:	74 07                	je     c00198b5 <CPU::setupFeatures()+0x17>
c00198ae:	52                   	push   edx
c00198af:	e8 46 ff ff ff       	call   c00197fa <CPU::setupSMEP()>
c00198b4:	58                   	pop    eax
c00198b5:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00198bc:	74 07                	je     c00198c5 <CPU::setupFeatures()+0x27>
c00198be:	52                   	push   edx
c00198bf:	e8 cc ff ff ff       	call   c0019890 <CPU::setupSMAP()>
c00198c4:	58                   	pop    eax
c00198c5:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00198cc:	74 07                	je     c00198d5 <CPU::setupFeatures()+0x37>
c00198ce:	52                   	push   edx
c00198cf:	e8 32 ff ff ff       	call   c0019806 <CPU::setupUMIP()>
c00198d4:	58                   	pop    eax
c00198d5:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00198dc:	74 07                	je     c00198e5 <CPU::setupFeatures()+0x47>
c00198de:	52                   	push   edx
c00198df:	e8 2c ff ff ff       	call   c0019810 <CPU::setupTSC()>
c00198e4:	58                   	pop    eax
c00198e5:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00198ec:	74 07                	je     c00198f5 <CPU::setupFeatures()+0x57>
c00198ee:	52                   	push   edx
c00198ef:	e8 26 ff ff ff       	call   c001981a <CPU::setupLargePages()>
c00198f4:	59                   	pop    ecx
c00198f5:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00198fc:	74 07                	je     c0019905 <CPU::setupFeatures()+0x67>
c00198fe:	52                   	push   edx
c00198ff:	e8 5e ff ff ff       	call   c0019862 <CPU::setupGlobalPages()>
c0019904:	58                   	pop    eax
c0019905:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c001990c:	74 0c                	je     c001991a <CPU::setupFeatures()+0x7c>
c001990e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019912:	83 c4 0c             	add    esp,0xc
c0019915:	e9 0a ff ff ff       	jmp    c0019824 <CPU::setupPAT()>
c001991a:	83 c4 0c             	add    esp,0xc
c001991d:	c3                   	ret    

c001991e <CPU::open(int, int, void*)>:
c001991e:	57                   	push   edi
c001991f:	56                   	push   esi
c0019920:	53                   	push   ebx
c0019921:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019925:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019929:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001992f:	83 ec 0c             	sub    esp,0xc
c0019932:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019938:	68 44 c0 02 c0       	push   0xc002c044
c001993d:	e8 81 60 ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c0019942:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019948:	89 04 24             	mov    DWORD PTR [esp],eax
c001994b:	e8 aa 57 ff ff       	call   c000f0fa <GDT::setup()>
c0019950:	c7 04 24 56 c0 02 c0 	mov    DWORD PTR [esp],0xc002c056
c0019957:	e8 67 60 ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c001995c:	83 c4 0c             	add    esp,0xc
c001995f:	6a 00                	push   0x0
c0019961:	68 ef be ad de       	push   0xdeadbeef
c0019966:	57                   	push   edi
c0019967:	e8 0a 76 ff ff       	call   c0010f76 <TSS::setup(unsigned long, unsigned long)>
c001996c:	c7 04 24 68 c0 02 c0 	mov    DWORD PTR [esp],0xc002c068
c0019973:	e8 4b 60 ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c0019978:	89 3c 24             	mov    DWORD PTR [esp],edi
c001997b:	e8 d6 75 ff ff       	call   c0010f56 <TSS::flush()>
c0019980:	c7 04 24 7c c0 02 c0 	mov    DWORD PTR [esp],0xc002c07c
c0019987:	e8 37 60 ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c001998c:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019992:	89 04 24             	mov    DWORD PTR [esp],eax
c0019995:	e8 c4 59 ff ff       	call   c000f35e <IDT::setup()>
c001999a:	c7 04 24 8e c0 02 c0 	mov    DWORD PTR [esp],0xc002c08e
c00199a1:	e8 1d 60 ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c00199a6:	b8 00 04 00 00       	mov    eax,0x400
c00199ab:	0f 23 f8             	mov    db7,eax
c00199ae:	c7 04 24 ac c0 02 c0 	mov    DWORD PTR [esp],0xc002c0ac
c00199b5:	e8 09 60 ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c00199ba:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00199c4:	e8 9c 63 ff ff       	call   c000fd65 <Phys::allocatePage()>
c00199c9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00199cf:	89 30                	mov    DWORD PTR [eax],esi
c00199d1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00199d7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00199da:	c7 04 24 ce c0 02 c0 	mov    DWORD PTR [esp],0xc002c0ce
c00199e1:	e8 dd 5f ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c00199e6:	58                   	pop    eax
c00199e7:	5a                   	pop    edx
c00199e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00199ee:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00199f2:	e8 79 85 ff ff       	call   c0011f70 <VAS::setCPUSpecific(unsigned long)>
c00199f7:	c7 04 24 f6 c0 02 c0 	mov    DWORD PTR [esp],0xc002c0f6
c00199fe:	e8 c0 5f ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c0019a03:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a06:	e8 fd f3 ff ff       	call   c0018e08 <CPU::detectFeatures()>
c0019a0b:	c7 04 24 19 c1 02 c0 	mov    DWORD PTR [esp],0xc002c119
c0019a12:	e8 ac 5f ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c0019a17:	e8 2e ba ff ff       	call   c001544a <setupInterruptController()>
c0019a1c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019a22:	c7 04 24 3d c1 02 c0 	mov    DWORD PTR [esp],0xc002c13d
c0019a29:	e8 95 5f ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c0019a2e:	a1 20 e6 02 c0       	mov    eax,ds:0xc002e620
c0019a33:	83 e0 10             	and    eax,0x10
c0019a36:	83 f8 01             	cmp    eax,0x1
c0019a39:	19 c0                	sbb    eax,eax
c0019a3b:	83 e0 46             	and    eax,0x46
c0019a3e:	83 c0 1e             	add    eax,0x1e
c0019a41:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a44:	e8 ee cf ff ff       	call   c0016a37 <setupTimer(int)>
c0019a49:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019a4f:	c7 04 24 58 c1 02 c0 	mov    DWORD PTR [esp],0xc002c158
c0019a56:	e8 68 5f ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c0019a5b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a5e:	e8 3b fe ff ff       	call   c001989e <CPU::setupFeatures()>
c0019a63:	c7 04 24 73 c1 02 c0 	mov    DWORD PTR [esp],0xc002c173
c0019a6a:	e8 54 5f ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c0019a6f:	83 c4 10             	add    esp,0x10
c0019a72:	31 c0                	xor    eax,eax
c0019a74:	5b                   	pop    ebx
c0019a75:	5e                   	pop    esi
c0019a76:	5f                   	pop    edi
c0019a77:	c3                   	ret    

c0019a78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019a78:	57                   	push   edi
c0019a79:	56                   	push   esi
c0019a7a:	53                   	push   ebx
c0019a7b:	51                   	push   ecx
c0019a7c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019a80:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019a83:	0f 02 c0             	lar    eax,ax
c0019a86:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019a89:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019a8d:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019a90:	88 ca                	mov    dl,cl
c0019a92:	c0 ea 06             	shr    dl,0x6
c0019a95:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019a99:	89 ca                	mov    edx,ecx
c0019a9b:	66 c1 ea 03          	shr    dx,0x3
c0019a9f:	83 e2 07             	and    edx,0x7
c0019aa2:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019aa7:	88 17                	mov    BYTE PTR [edi],dl
c0019aa9:	0f 84 a6 01 00 00    	je     c0019c55 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019aaf:	83 e1 07             	and    ecx,0x7
c0019ab2:	80 f9 04             	cmp    cl,0x4
c0019ab5:	0f 84 98 00 00 00    	je     c0019b53 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019abb:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019ac0:	0f 95 c0             	setne  al
c0019ac3:	80 f9 05             	cmp    cl,0x5
c0019ac6:	0f 95 c2             	setne  dl
c0019ac9:	08 c2                	or     dl,al
c0019acb:	74 79                	je     c0019b46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019acd:	84 c9                	test   cl,cl
c0019acf:	75 05                	jne    c0019ad6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019ad1:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019ad4:	eb 3c                	jmp    c0019b12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ad6:	80 f9 01             	cmp    cl,0x1
c0019ad9:	75 05                	jne    c0019ae0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019adb:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019ade:	eb 32                	jmp    c0019b12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ae0:	80 f9 02             	cmp    cl,0x2
c0019ae3:	75 05                	jne    c0019aea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019ae5:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019ae8:	eb 28                	jmp    c0019b12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019aea:	31 c0                	xor    eax,eax
c0019aec:	80 f9 03             	cmp    cl,0x3
c0019aef:	75 05                	jne    c0019af6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019af1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019af4:	eb 1c                	jmp    c0019b12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019af6:	80 f9 05             	cmp    cl,0x5
c0019af9:	75 05                	jne    c0019b00 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019afb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019afe:	eb 12                	jmp    c0019b12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b00:	80 f9 06             	cmp    cl,0x6
c0019b03:	75 05                	jne    c0019b0a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019b05:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019b08:	eb 08                	jmp    c0019b12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b0a:	80 f9 07             	cmp    cl,0x7
c0019b0d:	75 03                	jne    c0019b12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b0f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019b12:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019b17:	75 10                	jne    c0019b29 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019b19:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019b1d:	b9 03 00 00 00       	mov    ecx,0x3
c0019b22:	01 d0                	add    eax,edx
c0019b24:	e9 37 01 00 00       	jmp    c0019c60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019b29:	b9 02 00 00 00       	mov    ecx,0x2
c0019b2e:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019b33:	0f 85 27 01 00 00    	jne    c0019c60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019b39:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019b3c:	b9 06 00 00 00       	mov    ecx,0x6
c0019b41:	e9 1a 01 00 00       	jmp    c0019c60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019b46:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019b49:	b9 06 00 00 00       	mov    ecx,0x6
c0019b4e:	e9 0f 01 00 00       	jmp    c0019c62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019b53:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019b56:	88 ca                	mov    dl,cl
c0019b58:	c0 ea 06             	shr    dl,0x6
c0019b5b:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019b5f:	89 ca                	mov    edx,ecx
c0019b61:	66 c1 ea 03          	shr    dx,0x3
c0019b65:	83 e2 07             	and    edx,0x7
c0019b68:	80 e1 07             	and    cl,0x7
c0019b6b:	75 05                	jne    c0019b72 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019b6d:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019b70:	eb 4c                	jmp    c0019bbe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b72:	80 f9 01             	cmp    cl,0x1
c0019b75:	75 05                	jne    c0019b7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019b77:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019b7a:	eb 42                	jmp    c0019bbe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b7c:	80 f9 02             	cmp    cl,0x2
c0019b7f:	75 05                	jne    c0019b86 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019b81:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019b84:	eb 38                	jmp    c0019bbe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b86:	80 f9 03             	cmp    cl,0x3
c0019b89:	75 05                	jne    c0019b90 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019b8b:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019b8e:	eb 2e                	jmp    c0019bbe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b90:	80 f9 04             	cmp    cl,0x4
c0019b93:	75 12                	jne    c0019ba7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019b95:	f6 c4 60             	test   ah,0x60
c0019b98:	75 08                	jne    c0019ba2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019b9a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019b9d:	8d 78 14             	lea    edi,[eax+0x14]
c0019ba0:	eb 1c                	jmp    c0019bbe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ba2:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019ba5:	eb 17                	jmp    c0019bbe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ba7:	80 f9 05             	cmp    cl,0x5
c0019baa:	75 05                	jne    c0019bb1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019bac:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019baf:	eb 0d                	jmp    c0019bbe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019bb1:	80 f9 06             	cmp    cl,0x6
c0019bb4:	75 05                	jne    c0019bbb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019bb6:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019bb9:	eb 03                	jmp    c0019bbe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019bbb:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019bbe:	84 d2                	test   dl,dl
c0019bc0:	75 05                	jne    c0019bc7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019bc2:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019bc5:	eb 3c                	jmp    c0019c03 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019bc7:	80 fa 01             	cmp    dl,0x1
c0019bca:	75 05                	jne    c0019bd1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019bcc:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019bcf:	eb 32                	jmp    c0019c03 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019bd1:	80 fa 02             	cmp    dl,0x2
c0019bd4:	75 05                	jne    c0019bdb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019bd6:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019bd9:	eb 28                	jmp    c0019c03 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019bdb:	80 fa 03             	cmp    dl,0x3
c0019bde:	75 05                	jne    c0019be5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019be0:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019be3:	eb 1e                	jmp    c0019c03 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019be5:	31 c0                	xor    eax,eax
c0019be7:	80 fa 04             	cmp    dl,0x4
c0019bea:	74 17                	je     c0019c03 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019bec:	80 fa 05             	cmp    dl,0x5
c0019bef:	75 05                	jne    c0019bf6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019bf1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019bf4:	eb 0d                	jmp    c0019c03 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019bf6:	80 fa 06             	cmp    dl,0x6
c0019bf9:	75 05                	jne    c0019c00 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019bfb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019bfe:	eb 03                	jmp    c0019c03 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c00:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019c03:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019c08:	0f 94 c2             	sete   dl
c0019c0b:	80 f9 05             	cmp    cl,0x5
c0019c0e:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019c12:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019c17:	d3 e0                	shl    eax,cl
c0019c19:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019c1d:	74 0a                	je     c0019c29 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019c1f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019c22:	b9 07 00 00 00       	mov    ecx,0x7
c0019c27:	eb 37                	jmp    c0019c60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019c29:	01 f8                	add    eax,edi
c0019c2b:	b9 03 00 00 00       	mov    ecx,0x3
c0019c30:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019c35:	74 2b                	je     c0019c62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c37:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019c3c:	75 0d                	jne    c0019c4b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019c3e:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019c42:	01 c8                	add    eax,ecx
c0019c44:	b9 04 00 00 00       	mov    ecx,0x4
c0019c49:	eb 17                	jmp    c0019c62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c4b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019c4e:	b9 07 00 00 00       	mov    ecx,0x7
c0019c53:	eb 0d                	jmp    c0019c62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c55:	b9 02 00 00 00       	mov    ecx,0x2
c0019c5a:	b2 01                	mov    dl,0x1
c0019c5c:	31 c0                	xor    eax,eax
c0019c5e:	eb 02                	jmp    c0019c62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c60:	31 d2                	xor    edx,edx
c0019c62:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019c66:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019c68:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019c6c:	88 11                	mov    BYTE PTR [ecx],dl
c0019c6e:	5a                   	pop    edx
c0019c6f:	5b                   	pop    ebx
c0019c70:	5e                   	pop    esi
c0019c71:	5f                   	pop    edi
c0019c72:	c3                   	ret    

c0019c73 <Krnl::smpEntry()>:
c0019c73:	eb fe                	jmp    c0019c73 <Krnl::smpEntry()>

c0019c75 <Krnl::startCPU(int)>:
c0019c75:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0019c7a:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019c81:	0f 84 36 01 00 00    	je     c0019dbd <Krnl::startCPU(int)+0x148>
c0019c87:	53                   	push   ebx
c0019c88:	83 ec 10             	sub    esp,0x10
c0019c8b:	fa                   	cli    
c0019c8c:	ff 05 08 fb 02 c0    	inc    DWORD PTR ds:0xc002fb08
c0019c92:	6a 1b                	push   0x1b
c0019c94:	ff 35 08 e6 02 c0    	push   DWORD PTR ds:0xc002e608
c0019c9a:	e8 e3 50 ff ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c0019c9f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019ca4:	89 c3                	mov    ebx,eax
c0019ca6:	58                   	pop    eax
c0019ca7:	5a                   	pop    edx
c0019ca8:	53                   	push   ebx
c0019ca9:	68 bc c1 02 c0       	push   0xc002c1bc
c0019cae:	e8 0e 8d ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0019cb3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019cbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019cc1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019ccb:	c1 e0 18             	shl    eax,0x18
c0019cce:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019cd4:	83 c4 10             	add    esp,0x10
c0019cd7:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019cdd:	09 c2                	or     edx,eax
c0019cdf:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019ce5:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019ceb:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019cf1:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019cf7:	80 cd c5             	or     ch,0xc5
c0019cfa:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019d00:	f3 90                	pause  
c0019d02:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019d04:	0f ba e1 0c          	bt     ecx,0xc
c0019d08:	72 f6                	jb     c0019d00 <Krnl::startCPU(int)+0x8b>
c0019d0a:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019d10:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019d16:	09 c1                	or     ecx,eax
c0019d18:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019d1e:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019d24:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019d2a:	80 cd 85             	or     ch,0x85
c0019d2d:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019d33:	f3 90                	pause  
c0019d35:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019d37:	0f ba e1 0c          	bt     ecx,0xc
c0019d3b:	72 f6                	jb     c0019d33 <Krnl::startCPU(int)+0xbe>
c0019d3d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019d47:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019d4d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019d53:	09 c1                	or     ecx,eax
c0019d55:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019d5b:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019d61:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019d67:	81 c9 02 06 00 00    	or     ecx,0x602
c0019d6d:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019d73:	f3 90                	pause  
c0019d75:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019d77:	0f ba e1 0c          	bt     ecx,0xc
c0019d7b:	72 f6                	jb     c0019d73 <Krnl::startCPU(int)+0xfe>
c0019d7d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019d87:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019d8d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019d93:	09 c8                	or     eax,ecx
c0019d95:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019d9b:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019da1:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019da6:	0d 02 06 00 00       	or     eax,0x602
c0019dab:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019db1:	f3 90                	pause  
c0019db3:	8b 02                	mov    eax,DWORD PTR [edx]
c0019db5:	0f ba e0 0c          	bt     eax,0xc
c0019db9:	72 f6                	jb     c0019db1 <Krnl::startCPU(int)+0x13c>
c0019dbb:	eb fe                	jmp    c0019dbb <Krnl::startCPU(int)+0x146>
c0019dbd:	c3                   	ret    

c0019dbe <Krnl::startCPUs()>:
c0019dbe:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0019dc3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019dc9:	88 c2                	mov    dl,al
c0019dcb:	83 e2 0a             	and    edx,0xa
c0019dce:	80 fa 0a             	cmp    dl,0xa
c0019dd1:	75 09                	jne    c0019ddc <Krnl::startCPUs()+0x1e>
c0019dd3:	a8 01                	test   al,0x1
c0019dd5:	74 05                	je     c0019ddc <Krnl::startCPUs()+0x1e>
c0019dd7:	e9 bf 63 fe ff       	jmp    c000019b <prepareTramp>
c0019ddc:	c3                   	ret    
c0019ddd:	90                   	nop

c0019dde <EnvVarContainer::getEnv(char const*)>:
c0019dde:	57                   	push   edi
c0019ddf:	56                   	push   esi
c0019de0:	53                   	push   ebx
c0019de1:	31 db                	xor    ebx,ebx
c0019de3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019de7:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019de9:	7e 2b                	jle    c0019e16 <EnvVarContainer::getEnv(char const*)+0x38>
c0019deb:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019df2:	50                   	push   eax
c0019df3:	50                   	push   eax
c0019df4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019df7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019dfa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019dfe:	e8 95 6a fe ff       	call   c0000898 <strcmp>
c0019e03:	83 c4 10             	add    esp,0x10
c0019e06:	85 c0                	test   eax,eax
c0019e08:	75 09                	jne    c0019e13 <EnvVarContainer::getEnv(char const*)+0x35>
c0019e0a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019e0d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019e11:	eb 05                	jmp    c0019e18 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019e13:	43                   	inc    ebx
c0019e14:	eb d1                	jmp    c0019de7 <EnvVarContainer::getEnv(char const*)+0x9>
c0019e16:	31 c0                	xor    eax,eax
c0019e18:	5b                   	pop    ebx
c0019e19:	5e                   	pop    esi
c0019e1a:	5f                   	pop    edi
c0019e1b:	c3                   	ret    

c0019e1c <EnvVarContainer::setEnv(char const*, char const*)>:
c0019e1c:	55                   	push   ebp
c0019e1d:	57                   	push   edi
c0019e1e:	56                   	push   esi
c0019e1f:	53                   	push   ebx
c0019e20:	83 ec 28             	sub    esp,0x28
c0019e23:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019e27:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019e2b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019e2f:	56                   	push   esi
c0019e30:	e8 37 69 fe ff       	call   c000076c <strlen>
c0019e35:	40                   	inc    eax
c0019e36:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e39:	e8 2b 5b ff ff       	call   c000f969 <malloc>
c0019e3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019e45:	e8 22 69 fe ff       	call   c000076c <strlen>
c0019e4a:	40                   	inc    eax
c0019e4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e4e:	e8 16 5b ff ff       	call   c000f969 <malloc>
c0019e53:	89 34 24             	mov    DWORD PTR [esp],esi
c0019e56:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019e5a:	e8 0d 69 fe ff       	call   c000076c <strlen>
c0019e5f:	83 c4 0c             	add    esp,0xc
c0019e62:	40                   	inc    eax
c0019e63:	50                   	push   eax
c0019e64:	6a 00                	push   0x0
c0019e66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019e6a:	e8 e1 68 fe ff       	call   c0000750 <memset>
c0019e6f:	89 34 24             	mov    DWORD PTR [esp],esi
c0019e72:	e8 f5 68 fe ff       	call   c000076c <strlen>
c0019e77:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019e7b:	8d 48 01             	lea    ecx,[eax+0x1]
c0019e7e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019e80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e83:	89 de                	mov    esi,ebx
c0019e85:	e8 e2 68 fe ff       	call   c000076c <strlen>
c0019e8a:	83 c4 0c             	add    esp,0xc
c0019e8d:	40                   	inc    eax
c0019e8e:	50                   	push   eax
c0019e8f:	6a 00                	push   0x0
c0019e91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e95:	e8 b6 68 fe ff       	call   c0000750 <memset>
c0019e9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e9d:	e8 ca 68 fe ff       	call   c000076c <strlen>
c0019ea2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019ea6:	8d 48 01             	lea    ecx,[eax+0x1]
c0019ea9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019eab:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019eae:	40                   	inc    eax
c0019eaf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019eb2:	c1 e0 03             	shl    eax,0x3
c0019eb5:	5a                   	pop    edx
c0019eb6:	59                   	pop    ecx
c0019eb7:	50                   	push   eax
c0019eb8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019ebb:	e8 95 5a ff ff       	call   c000f955 <realloc>
c0019ec0:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019ec4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019ec7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019eca:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019ece:	b9 08 00 00 00       	mov    ecx,0x8
c0019ed3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ed5:	83 c4 2c             	add    esp,0x2c
c0019ed8:	5b                   	pop    ebx
c0019ed9:	5e                   	pop    esi
c0019eda:	5f                   	pop    edi
c0019edb:	5d                   	pop    ebp
c0019edc:	c3                   	ret    
c0019edd:	90                   	nop

c0019ede <EnvVarContainer::deleteEnv(char const*)>:
c0019ede:	c3                   	ret    
c0019edf:	90                   	nop

c0019ee0 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019ee0:	55                   	push   ebp
c0019ee1:	57                   	push   edi
c0019ee2:	56                   	push   esi
c0019ee3:	53                   	push   ebx
c0019ee4:	81 ec 38 01 00 00    	sub    esp,0x138
c0019eea:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0019ef1:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0019ef8:	68 14 01 00 00       	push   0x114
c0019efd:	e8 67 5a ff ff       	call   c000f969 <malloc>
c0019f02:	83 c4 0c             	add    esp,0xc
c0019f05:	89 c3                	mov    ebx,eax
c0019f07:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019f0a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019f11:	50                   	push   eax
c0019f12:	e8 09 90 ff ff       	call   c0012f20 <File::File(char const*, Process*)>
c0019f17:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f1a:	e8 d3 92 ff ff       	call   c00131f2 <File::exists()>
c0019f1f:	83 c4 10             	add    esp,0x10
c0019f22:	84 c0                	test   al,al
c0019f24:	75 31                	jne    c0019f57 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019f26:	50                   	push   eax
c0019f27:	50                   	push   eax
c0019f28:	6a 12                	push   0x12
c0019f2a:	53                   	push   ebx
c0019f2b:	e8 54 90 ff ff       	call   c0012f84 <File::open(FileOpenMode)>
c0019f30:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f32:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019f35:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f38:	e8 2f 68 fe ff       	call   c000076c <strlen>
c0019f3d:	5a                   	pop    edx
c0019f3e:	31 d2                	xor    edx,edx
c0019f40:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019f44:	51                   	push   ecx
c0019f45:	56                   	push   esi
c0019f46:	52                   	push   edx
c0019f47:	50                   	push   eax
c0019f48:	53                   	push   ebx
c0019f49:	ff d7                	call   edi
c0019f4b:	83 c4 14             	add    esp,0x14
c0019f4e:	53                   	push   ebx
c0019f4f:	e8 8e 90 ff ff       	call   c0012fe2 <File::close()>
c0019f54:	83 c4 10             	add    esp,0x10
c0019f57:	56                   	push   esi
c0019f58:	31 f6                	xor    esi,esi
c0019f5a:	68 00 01 00 00       	push   0x100
c0019f5f:	6a 00                	push   0x0
c0019f61:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019f65:	50                   	push   eax
c0019f66:	e8 e5 67 fe ff       	call   c0000750 <memset>
c0019f6b:	5f                   	pop    edi
c0019f6c:	58                   	pop    eax
c0019f6d:	6a 01                	push   0x1
c0019f6f:	53                   	push   ebx
c0019f70:	e8 0f 90 ff ff       	call   c0012f84 <File::open(FileOpenMode)>
c0019f75:	83 c4 10             	add    esp,0x10
c0019f78:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019f80:	83 ec 0c             	sub    esp,0xc
c0019f83:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f85:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019f89:	51                   	push   ecx
c0019f8a:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019f8e:	52                   	push   edx
c0019f8f:	6a 00                	push   0x0
c0019f91:	6a 01                	push   0x1
c0019f93:	53                   	push   ebx
c0019f94:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019f97:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019f9b:	83 c4 20             	add    esp,0x20
c0019f9e:	3c 0d                	cmp    al,0xd
c0019fa0:	0f 84 09 01 00 00    	je     c001a0af <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019fa6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019fab:	0f 84 ef 00 00 00    	je     c001a0a0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019fb1:	3c 0a                	cmp    al,0xa
c0019fb3:	74 13                	je     c0019fc8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019fb5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019fba:	74 0c                	je     c0019fc8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019fbc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019fc2:	0f 8e d8 00 00 00    	jle    c001a0a0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019fc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019fcc:	83 ec 0c             	sub    esp,0xc
c0019fcf:	8d 78 01             	lea    edi,[eax+0x1]
c0019fd2:	57                   	push   edi
c0019fd3:	e8 91 59 ff ff       	call   c000f969 <malloc>
c0019fd8:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019fdc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019fe0:	8d 56 04             	lea    edx,[esi+0x4]
c0019fe3:	89 14 24             	mov    DWORD PTR [esp],edx
c0019fe6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019fea:	e8 7a 59 ff ff       	call   c000f969 <malloc>
c0019fef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019ff3:	83 c4 0c             	add    esp,0xc
c0019ff6:	57                   	push   edi
c0019ff7:	6a 00                	push   0x0
c0019ff9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019ffd:	e8 4e 67 fe ff       	call   c0000750 <memset>
c001a002:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a006:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a00a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a00e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a010:	83 c4 0c             	add    esp,0xc
c001a013:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a017:	52                   	push   edx
c001a018:	6a 00                	push   0x0
c001a01a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a01e:	e8 2d 67 fe ff       	call   c0000750 <memset>
c001a023:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a027:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001a02b:	89 34 24             	mov    DWORD PTR [esp],esi
c001a02e:	e8 39 67 fe ff       	call   c000076c <strlen>
c001a033:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a037:	89 c1                	mov    ecx,eax
c001a039:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a03b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a03e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001a041:	40                   	inc    eax
c001a042:	83 c4 10             	add    esp,0x10
c001a045:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001a048:	85 d2                	test   edx,edx
c001a04a:	75 0c                	jne    c001a058 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c001a04c:	83 ec 0c             	sub    esp,0xc
c001a04f:	6a 08                	push   0x8
c001a051:	e8 13 59 ff ff       	call   c000f969 <malloc>
c001a056:	eb 0c                	jmp    c001a064 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c001a058:	c1 e0 03             	shl    eax,0x3
c001a05b:	51                   	push   ecx
c001a05c:	51                   	push   ecx
c001a05d:	50                   	push   eax
c001a05e:	52                   	push   edx
c001a05f:	e8 f1 58 ff ff       	call   c000f955 <realloc>
c001a064:	83 c4 10             	add    esp,0x10
c001a067:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001a06a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a06d:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001a070:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a074:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a078:	b9 08 00 00 00       	mov    ecx,0x8
c001a07d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a07f:	31 f6                	xor    esi,esi
c001a081:	50                   	push   eax
c001a082:	68 00 01 00 00       	push   0x100
c001a087:	6a 00                	push   0x0
c001a089:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a08d:	50                   	push   eax
c001a08e:	e8 bd 66 fe ff       	call   c0000750 <memset>
c001a093:	83 c4 10             	add    esp,0x10
c001a096:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a09e:	eb 0f                	jmp    c001a0af <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a0a0:	3c 3d                	cmp    al,0x3d
c001a0a2:	74 07                	je     c001a0ab <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c001a0a4:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001a0a8:	46                   	inc    esi
c001a0a9:	eb 04                	jmp    c001a0af <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a0ab:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a0af:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a0b4:	0f 85 c6 fe ff ff    	jne    c0019f80 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001a0ba:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a0c0:	5b                   	pop    ebx
c001a0c1:	5e                   	pop    esi
c001a0c2:	5f                   	pop    edi
c001a0c3:	5d                   	pop    ebp
c001a0c4:	c3                   	ret    
c001a0c5:	90                   	nop

c001a0c6 <EnvVarContainer::__loadSystem()>:
c001a0c6:	83 ec 10             	sub    esp,0x10
c001a0c9:	68 40 db 02 c0       	push   0xc002db40
c001a0ce:	68 cd c1 02 c0       	push   0xc002c1cd
c001a0d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0d7:	e8 04 fe ff ff       	call   c0019ee0 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a0dc:	83 c4 1c             	add    esp,0x1c
c001a0df:	c3                   	ret    

c001a0e0 <EnvVarContainer::__loadUser()>:
c001a0e0:	c3                   	ret    
c001a0e1:	90                   	nop

c001a0e2 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a0e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a0ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0f4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a0f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0fb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a102:	90                   	nop
c001a103:	c3                   	ret    

c001a104 <EnvVarContainer::~EnvVarContainer()>:
c001a104:	83 ec 0c             	sub    esp,0xc
c001a107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a10b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a10e:	85 c0                	test   eax,eax
c001a110:	74 1d                	je     c001a12f <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a116:	8b 00                	mov    eax,DWORD PTR [eax]
c001a118:	85 c0                	test   eax,eax
c001a11a:	74 13                	je     c001a12f <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a11c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a120:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a123:	83 ec 0c             	sub    esp,0xc
c001a126:	50                   	push   eax
c001a127:	e8 4d 58 ff ff       	call   c000f979 <free>
c001a12c:	83 c4 10             	add    esp,0x10
c001a12f:	90                   	nop
c001a130:	83 c4 0c             	add    esp,0xc
c001a133:	c3                   	ret    

c001a134 <Krnl::getEnv(Process*, char const*)>:
c001a134:	53                   	push   ebx
c001a135:	83 ec 08             	sub    esp,0x8
c001a138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a13c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a140:	39 05 30 fb 02 c0    	cmp    DWORD PTR ds:0xc002fb30,eax
c001a146:	74 04                	je     c001a14c <Krnl::getEnv(Process*, char const*)+0x18>
c001a148:	85 c0                	test   eax,eax
c001a14a:	75 0b                	jne    c001a157 <Krnl::getEnv(Process*, char const*)+0x23>
c001a14c:	a1 14 f1 02 c0       	mov    eax,ds:0xc002f114
c001a151:	85 c0                	test   eax,eax
c001a153:	75 19                	jne    c001a16e <Krnl::getEnv(Process*, char const*)+0x3a>
c001a155:	eb 27                	jmp    c001a17e <Krnl::getEnv(Process*, char const*)+0x4a>
c001a157:	52                   	push   edx
c001a158:	52                   	push   edx
c001a159:	53                   	push   ebx
c001a15a:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a160:	e8 79 fc ff ff       	call   c0019dde <EnvVarContainer::getEnv(char const*)>
c001a165:	83 c4 10             	add    esp,0x10
c001a168:	85 c0                	test   eax,eax
c001a16a:	75 28                	jne    c001a194 <Krnl::getEnv(Process*, char const*)+0x60>
c001a16c:	eb de                	jmp    c001a14c <Krnl::getEnv(Process*, char const*)+0x18>
c001a16e:	52                   	push   edx
c001a16f:	52                   	push   edx
c001a170:	53                   	push   ebx
c001a171:	50                   	push   eax
c001a172:	e8 67 fc ff ff       	call   c0019dde <EnvVarContainer::getEnv(char const*)>
c001a177:	83 c4 10             	add    esp,0x10
c001a17a:	85 c0                	test   eax,eax
c001a17c:	75 16                	jne    c001a194 <Krnl::getEnv(Process*, char const*)+0x60>
c001a17e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a182:	a1 18 f1 02 c0       	mov    eax,ds:0xc002f118
c001a187:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a18b:	83 c4 08             	add    esp,0x8
c001a18e:	5b                   	pop    ebx
c001a18f:	e9 4a fc ff ff       	jmp    c0019dde <EnvVarContainer::getEnv(char const*)>
c001a194:	83 c4 08             	add    esp,0x8
c001a197:	5b                   	pop    ebx
c001a198:	c3                   	ret    

c001a199 <Krnl::setEnvSystem(char const*, char const*)>:
c001a199:	83 ec 10             	sub    esp,0x10
c001a19c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1a4:	ff 35 18 f1 02 c0    	push   DWORD PTR ds:0xc002f118
c001a1aa:	e8 6d fc ff ff       	call   c0019e1c <EnvVarContainer::setEnv(char const*, char const*)>
c001a1af:	83 c4 1c             	add    esp,0x1c
c001a1b2:	c3                   	ret    

c001a1b3 <Krnl::setEnvUser(char const*, char const*)>:
c001a1b3:	a1 14 f1 02 c0       	mov    eax,ds:0xc002f114
c001a1b8:	85 c0                	test   eax,eax
c001a1ba:	74 15                	je     c001a1d1 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a1bc:	83 ec 10             	sub    esp,0x10
c001a1bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1c7:	50                   	push   eax
c001a1c8:	e8 4f fc ff ff       	call   c0019e1c <EnvVarContainer::setEnv(char const*, char const*)>
c001a1cd:	83 c4 1c             	add    esp,0x1c
c001a1d0:	c3                   	ret    
c001a1d1:	c3                   	ret    

c001a1d2 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a1d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1d6:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a1dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a1e0:	e9 37 fc ff ff       	jmp    c0019e1c <EnvVarContainer::setEnv(char const*, char const*)>

c001a1e5 <Krnl::deleteEnvSystem(char const*)>:
c001a1e5:	c3                   	ret    

c001a1e6 <Krnl::deleteEnvUser(char const*)>:
c001a1e6:	c3                   	ret    

c001a1e7 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a1e7:	c3                   	ret    

c001a1e8 <Krnl::newProcessEnv(Process*)>:
c001a1e8:	83 ec 28             	sub    esp,0x28
c001a1eb:	6a 0c                	push   0xc
c001a1ed:	e8 77 57 ff ff       	call   c000f969 <malloc>
c001a1f2:	5a                   	pop    edx
c001a1f3:	59                   	pop    ecx
c001a1f4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a1f8:	50                   	push   eax
c001a1f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a1fd:	e8 e0 fe ff ff       	call   c001a0e2 <EnvVarContainer::EnvVarContainer(Process*)>
c001a202:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a206:	83 c4 2c             	add    esp,0x2c
c001a209:	c3                   	ret    

c001a20a <Krnl::copyProcessEnv(Process*, Process*)>:
c001a20a:	57                   	push   edi
c001a20b:	56                   	push   esi
c001a20c:	53                   	push   ebx
c001a20d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a211:	83 ec 0c             	sub    esp,0xc
c001a214:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a21a:	6a 0c                	push   0xc
c001a21c:	e8 48 57 ff ff       	call   c000f969 <malloc>
c001a221:	89 c3                	mov    ebx,eax
c001a223:	58                   	pop    eax
c001a224:	5a                   	pop    edx
c001a225:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a229:	53                   	push   ebx
c001a22a:	e8 b3 fe ff ff       	call   c001a0e2 <EnvVarContainer::EnvVarContainer(Process*)>
c001a22f:	8b 07                	mov    eax,DWORD PTR [edi]
c001a231:	89 03                	mov    DWORD PTR [ebx],eax
c001a233:	c1 e0 03             	shl    eax,0x3
c001a236:	89 04 24             	mov    DWORD PTR [esp],eax
c001a239:	e8 2b 57 ff ff       	call   c000f969 <malloc>
c001a23e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a241:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a243:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a246:	c1 e1 03             	shl    ecx,0x3
c001a249:	89 c7                	mov    edi,eax
c001a24b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a24d:	83 c4 10             	add    esp,0x10
c001a250:	89 d8                	mov    eax,ebx
c001a252:	5b                   	pop    ebx
c001a253:	5e                   	pop    esi
c001a254:	5f                   	pop    edi
c001a255:	c3                   	ret    

c001a256 <Krnl::loadSystemEnv()>:
c001a256:	53                   	push   ebx
c001a257:	83 ec 14             	sub    esp,0x14
c001a25a:	6a 0c                	push   0xc
c001a25c:	e8 08 57 ff ff       	call   c000f969 <malloc>
c001a261:	89 c3                	mov    ebx,eax
c001a263:	58                   	pop    eax
c001a264:	5a                   	pop    edx
c001a265:	ff 35 30 fb 02 c0    	push   DWORD PTR ds:0xc002fb30
c001a26b:	53                   	push   ebx
c001a26c:	e8 71 fe ff ff       	call   c001a0e2 <EnvVarContainer::EnvVarContainer(Process*)>
c001a271:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a274:	89 1d 18 f1 02 c0    	mov    DWORD PTR ds:0xc002f118,ebx
c001a27a:	e8 47 fe ff ff       	call   c001a0c6 <EnvVarContainer::__loadSystem()>
c001a27f:	83 c4 18             	add    esp,0x18
c001a282:	5b                   	pop    ebx
c001a283:	c3                   	ret    

c001a284 <Krnl::loadUserEnv()>:
c001a284:	53                   	push   ebx
c001a285:	83 ec 14             	sub    esp,0x14
c001a288:	6a 0c                	push   0xc
c001a28a:	e8 da 56 ff ff       	call   c000f969 <malloc>
c001a28f:	89 c3                	mov    ebx,eax
c001a291:	58                   	pop    eax
c001a292:	5a                   	pop    edx
c001a293:	ff 35 30 fb 02 c0    	push   DWORD PTR ds:0xc002fb30
c001a299:	53                   	push   ebx
c001a29a:	e8 43 fe ff ff       	call   c001a0e2 <EnvVarContainer::EnvVarContainer(Process*)>
c001a29f:	89 1d 14 f1 02 c0    	mov    DWORD PTR ds:0xc002f114,ebx
c001a2a5:	83 c4 18             	add    esp,0x18
c001a2a8:	5b                   	pop    ebx
c001a2a9:	c3                   	ret    

c001a2aa <Krnl::flushEnv()>:
c001a2aa:	c3                   	ret    

c001a2ab <Krnl::getProcessTotalEnvCount(Process*)>:
c001a2ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2af:	8b 15 14 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f114
c001a2b5:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a2bb:	a1 18 f1 02 c0       	mov    eax,ds:0xc002f118
c001a2c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001a2c2:	03 01                	add    eax,DWORD PTR [ecx]
c001a2c4:	85 d2                	test   edx,edx
c001a2c6:	74 02                	je     c001a2ca <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a2c8:	03 02                	add    eax,DWORD PTR [edx]
c001a2ca:	c3                   	ret    

c001a2cb <Krnl::getProcessEnvPair(Process*, int)>:
c001a2cb:	57                   	push   edi
c001a2cc:	56                   	push   esi
c001a2cd:	8b 35 14 f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f114
c001a2d3:	53                   	push   ebx
c001a2d4:	85 f6                	test   esi,esi
c001a2d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a2da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a2de:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a2e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a2e8:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a2ea:	75 16                	jne    c001a302 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001a2ec:	39 c2                	cmp    edx,eax
c001a2ee:	7c 16                	jl     c001a306 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001a2f0:	8b 0d 18 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f118
c001a2f6:	8b 31                	mov    esi,DWORD PTR [ecx]
c001a2f8:	01 c6                	add    esi,eax
c001a2fa:	39 d6                	cmp    esi,edx
c001a2fc:	7e 3c                	jle    c001a33a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001a2fe:	29 c2                	sub    edx,eax
c001a300:	eb 04                	jmp    c001a306 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001a302:	39 c2                	cmp    edx,eax
c001a304:	7d 05                	jge    c001a30b <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001a306:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a309:	eb 20                	jmp    c001a32b <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001a30b:	8b 3e                	mov    edi,DWORD PTR [esi]
c001a30d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001a310:	39 d1                	cmp    ecx,edx
c001a312:	7e 04                	jle    c001a318 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c001a314:	29 c2                	sub    edx,eax
c001a316:	eb 10                	jmp    c001a328 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001a318:	8b 35 18 f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f118
c001a31e:	03 0e                	add    ecx,DWORD PTR [esi]
c001a320:	39 d1                	cmp    ecx,edx
c001a322:	7e 16                	jle    c001a33a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001a324:	29 c2                	sub    edx,eax
c001a326:	29 fa                	sub    edx,edi
c001a328:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a32b:	8d 14 d0             	lea    edx,[eax+edx*8]
c001a32e:	8b 02                	mov    eax,DWORD PTR [edx]
c001a330:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001a333:	89 03                	mov    DWORD PTR [ebx],eax
c001a335:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a338:	eb 1d                	jmp    c001a357 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001a33a:	83 ec 0c             	sub    esp,0xc
c001a33d:	68 ef c1 02 c0       	push   0xc002c1ef
c001a342:	e8 18 00 00 00       	call   c001a35f <Krnl::panic(char const*)>
c001a347:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a34d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a354:	83 c4 10             	add    esp,0x10
c001a357:	89 d8                	mov    eax,ebx
c001a359:	5b                   	pop    ebx
c001a35a:	5e                   	pop    esi
c001a35b:	5f                   	pop    edi
c001a35c:	c2 04 00             	ret    0x4

c001a35f <Krnl::panic(char const*)>:
c001a35f:	55                   	push   ebp
c001a360:	89 e5                	mov    ebp,esp
c001a362:	53                   	push   ebx
c001a363:	83 ec 10             	sub    esp,0x10
c001a366:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a369:	fa                   	cli    
c001a36a:	c6 05 24 f1 02 c0 01 	mov    BYTE PTR ds:0xc002f124,0x1
c001a371:	53                   	push   ebx
c001a372:	e8 4c 56 ff ff       	call   c000f9c3 <Krnl::setBootMessage(char const*)>
c001a377:	58                   	pop    eax
c001a378:	c6 05 40 d5 02 c0 00 	mov    BYTE PTR ds:0xc002d540,0x0
c001a37f:	5a                   	pop    edx
c001a380:	53                   	push   ebx
c001a381:	68 09 c2 02 c0       	push   0xc002c209
c001a386:	e8 36 86 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001a38b:	59                   	pop    ecx
c001a38c:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a391:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a397:	e8 87 63 ff ff       	call   c0010723 <setActiveTerminal(VgaText*)>
c001a39c:	83 c4 0c             	add    esp,0xc
c001a39f:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a3a4:	6a 01                	push   0x1
c001a3a6:	6a 0f                	push   0xf
c001a3a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3ae:	e8 cf 61 ff ff       	call   c0010582 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a3b3:	58                   	pop    eax
c001a3b4:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a3b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3bf:	e8 e0 66 ff ff       	call   c0010aa4 <VgaText::clearScreen()>
c001a3c4:	58                   	pop    eax
c001a3c5:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a3ca:	5a                   	pop    edx
c001a3cb:	68 22 c2 02 c0       	push   0xc002c222
c001a3d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3d6:	e8 55 68 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c001a3db:	59                   	pop    ecx
c001a3dc:	58                   	pop    eax
c001a3dd:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a3e2:	68 c8 c2 02 c0       	push   0xc002c2c8
c001a3e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3ed:	e8 3e 68 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c001a3f2:	58                   	pop    eax
c001a3f3:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a3f8:	5a                   	pop    edx
c001a3f9:	68 3e c2 02 c0       	push   0xc002c23e
c001a3fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a404:	e8 27 68 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c001a409:	59                   	pop    ecx
c001a40a:	58                   	pop    eax
c001a40b:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a410:	53                   	push   ebx
c001a411:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a417:	e8 14 68 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c001a41c:	58                   	pop    eax
c001a41d:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a422:	5a                   	pop    edx
c001a423:	68 5e c2 02 c0       	push   0xc002c25e
c001a428:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a42e:	e8 fd 67 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c001a433:	a1 20 f1 02 c0       	mov    eax,ds:0xc002f120
c001a438:	83 c4 10             	add    esp,0x10
c001a43b:	85 c0                	test   eax,eax
c001a43d:	74 02                	je     c001a441 <Krnl::panic(char const*)+0xe2>
c001a43f:	ff d0                	call   eax
c001a441:	83 ec 0c             	sub    esp,0xc
c001a444:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a447:	e8 8f 30 00 00       	call   c001d4db <Thr::getDriverNameFromAddress(unsigned long)>
c001a44c:	83 c4 10             	add    esp,0x10
c001a44f:	89 c3                	mov    ebx,eax
c001a451:	85 c0                	test   eax,eax
c001a453:	0f 84 4e 02 00 00    	je     c001a6a7 <Krnl::panic(char const*)+0x348>
c001a459:	83 ec 08             	sub    esp,0x8
c001a45c:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a461:	68 04 c3 02 c0       	push   0xc002c304
c001a466:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a46c:	e8 bf 67 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c001a471:	58                   	pop    eax
c001a472:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a477:	5a                   	pop    edx
c001a478:	68 3e c2 02 c0       	push   0xc002c23e
c001a47d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a483:	e8 a8 67 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c001a488:	59                   	pop    ecx
c001a489:	58                   	pop    eax
c001a48a:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a48f:	53                   	push   ebx
c001a490:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a496:	e8 95 67 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c001a49b:	83 c4 10             	add    esp,0x10
c001a49e:	83 ec 08             	sub    esp,0x8
c001a4a1:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a4a6:	68 5d c2 02 c0       	push   0xc002c25d
c001a4ab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4b1:	e8 7a 67 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c001a4b6:	58                   	pop    eax
c001a4b7:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a4bc:	5a                   	pop    edx
c001a4bd:	68 5c c3 02 c0       	push   0xc002c35c
c001a4c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4c8:	e8 63 67 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c001a4cd:	59                   	pop    ecx
c001a4ce:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a4d3:	5b                   	pop    ebx
c001a4d4:	68 9c c3 02 c0       	push   0xc002c39c
c001a4d9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4df:	e8 4c 67 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c001a4e4:	58                   	pop    eax
c001a4e5:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a4ea:	5a                   	pop    edx
c001a4eb:	68 49 c2 02 c0       	push   0xc002c249
c001a4f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4f6:	e8 35 67 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c001a4fb:	59                   	pop    ecx
c001a4fc:	5b                   	pop    ebx
c001a4fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a500:	68 61 c2 02 c0       	push   0xc002c261
c001a505:	e8 b7 84 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001a50a:	58                   	pop    eax
c001a50b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a50e:	5a                   	pop    edx
c001a50f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a512:	68 6a c2 02 c0       	push   0xc002c26a
c001a517:	e8 a5 84 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001a51c:	59                   	pop    ecx
c001a51d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a520:	5b                   	pop    ebx
c001a521:	8b 00                	mov    eax,DWORD PTR [eax]
c001a523:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a526:	68 73 c2 02 c0       	push   0xc002c273
c001a52b:	e8 91 84 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001a530:	58                   	pop    eax
c001a531:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a536:	5a                   	pop    edx
c001a537:	68 e0 c3 02 c0       	push   0xc002c3e0
c001a53c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a542:	e8 e9 66 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c001a547:	59                   	pop    ecx
c001a548:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a54d:	5b                   	pop    ebx
c001a54e:	68 7c c2 02 c0       	push   0xc002c27c
c001a553:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a559:	e8 d2 66 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c001a55e:	0f 20 c0             	mov    eax,cr0
c001a561:	5a                   	pop    edx
c001a562:	59                   	pop    ecx
c001a563:	50                   	push   eax
c001a564:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a569:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a56f:	e8 76 66 ff ff       	call   c0010bea <VgaText::putx(unsigned int)>
c001a574:	5b                   	pop    ebx
c001a575:	58                   	pop    eax
c001a576:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a57b:	68 86 c2 02 c0       	push   0xc002c286
c001a580:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a586:	e8 a5 66 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c001a58b:	0f 20 d0             	mov    eax,cr2
c001a58e:	5a                   	pop    edx
c001a58f:	59                   	pop    ecx
c001a590:	50                   	push   eax
c001a591:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a596:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a59c:	e8 49 66 ff ff       	call   c0010bea <VgaText::putx(unsigned int)>
c001a5a1:	5b                   	pop    ebx
c001a5a2:	58                   	pop    eax
c001a5a3:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a5a8:	68 90 c2 02 c0       	push   0xc002c290
c001a5ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5b3:	e8 78 66 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c001a5b8:	0f 20 d8             	mov    eax,cr3
c001a5bb:	5a                   	pop    edx
c001a5bc:	59                   	pop    ecx
c001a5bd:	50                   	push   eax
c001a5be:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a5c3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5c9:	e8 1c 66 ff ff       	call   c0010bea <VgaText::putx(unsigned int)>
c001a5ce:	5b                   	pop    ebx
c001a5cf:	58                   	pop    eax
c001a5d0:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a5d5:	68 a3 c2 02 c0       	push   0xc002c2a3
c001a5da:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5e0:	e8 4b 66 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c001a5e5:	0f 20 e0             	mov    eax,cr4
c001a5e8:	5a                   	pop    edx
c001a5e9:	59                   	pop    ecx
c001a5ea:	50                   	push   eax
c001a5eb:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a5f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5f6:	e8 ef 65 ff ff       	call   c0010bea <VgaText::putx(unsigned int)>
c001a5fb:	5b                   	pop    ebx
c001a5fc:	58                   	pop    eax
c001a5fd:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a602:	68 ad c2 02 c0       	push   0xc002c2ad
c001a607:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a60d:	e8 1e 66 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c001a612:	5a                   	pop    edx
c001a613:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a618:	59                   	pop    ecx
c001a619:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a61f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a622:	50                   	push   eax
c001a623:	e8 c2 65 ff ff       	call   c0010bea <VgaText::putx(unsigned int)>
c001a628:	5b                   	pop    ebx
c001a629:	58                   	pop    eax
c001a62a:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a62f:	68 c4 c2 02 c0       	push   0xc002c2c4
c001a634:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a63a:	e8 f1 65 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c001a63f:	5a                   	pop    edx
c001a640:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a645:	59                   	pop    ecx
c001a646:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a64c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a64f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a652:	50                   	push   eax
c001a653:	e8 92 65 ff ff       	call   c0010bea <VgaText::putx(unsigned int)>
c001a658:	5b                   	pop    ebx
c001a659:	58                   	pop    eax
c001a65a:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a65f:	68 c4 c2 02 c0       	push   0xc002c2c4
c001a664:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a66a:	e8 c1 65 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c001a66f:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a674:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a677:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a67d:	8b 12                	mov    edx,DWORD PTR [edx]
c001a67f:	59                   	pop    ecx
c001a680:	5b                   	pop    ebx
c001a681:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a684:	50                   	push   eax
c001a685:	e8 60 65 ff ff       	call   c0010bea <VgaText::putx(unsigned int)>
c001a68a:	83 c4 10             	add    esp,0x10
c001a68d:	b2 fe                	mov    dl,0xfe
c001a68f:	e4 60                	in     al,0x60
c001a691:	3c 1c                	cmp    al,0x1c
c001a693:	74 04                	je     c001a699 <Krnl::panic(char const*)+0x33a>
c001a695:	3c 5a                	cmp    al,0x5a
c001a697:	75 f6                	jne    c001a68f <Krnl::panic(char const*)+0x330>
c001a699:	e4 64                	in     al,0x64
c001a69b:	a8 02                	test   al,0x2
c001a69d:	75 fa                	jne    c001a699 <Krnl::panic(char const*)+0x33a>
c001a69f:	88 d0                	mov    al,dl
c001a6a1:	e6 64                	out    0x64,al
c001a6a3:	fa                   	cli    
c001a6a4:	f4                   	hlt    
c001a6a5:	eb e8                	jmp    c001a68f <Krnl::panic(char const*)+0x330>
c001a6a7:	50                   	push   eax
c001a6a8:	50                   	push   eax
c001a6a9:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a6ae:	68 30 c3 02 c0       	push   0xc002c330
c001a6b3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6b9:	e8 72 65 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c001a6be:	58                   	pop    eax
c001a6bf:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a6c4:	5a                   	pop    edx
c001a6c5:	68 3e c2 02 c0       	push   0xc002c23e
c001a6ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6d0:	e8 5b 65 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c001a6d5:	59                   	pop    ecx
c001a6d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a6db:	5b                   	pop    ebx
c001a6dc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a6df:	83 c0 0c             	add    eax,0xc
c001a6e2:	50                   	push   eax
c001a6e3:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001a6e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6ee:	e8 3d 65 ff ff       	call   c0010c30 <VgaText::puts(char const*)>
c001a6f3:	83 c4 10             	add    esp,0x10
c001a6f6:	e9 a3 fd ff ff       	jmp    c001a49e <Krnl::panic(char const*)+0x13f>

c001a6fb <Net::switchEndian16(unsigned short)>:
c001a6fb:	83 ec 04             	sub    esp,0x4
c001a6fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a702:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a706:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a70a:	c1 f8 08             	sar    eax,0x8
c001a70d:	89 c2                	mov    edx,eax
c001a70f:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a713:	c1 e0 08             	shl    eax,0x8
c001a716:	09 d0                	or     eax,edx
c001a718:	83 c4 04             	add    esp,0x4
c001a71b:	c3                   	ret    

c001a71c <Net::switchEndian32(unsigned int)>:
c001a71c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a720:	c1 e8 18             	shr    eax,0x18
c001a723:	89 c2                	mov    edx,eax
c001a725:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a729:	c1 e0 08             	shl    eax,0x8
c001a72c:	25 00 00 ff 00       	and    eax,0xff0000
c001a731:	09 c2                	or     edx,eax
c001a733:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a737:	c1 e8 08             	shr    eax,0x8
c001a73a:	25 00 ff 00 00       	and    eax,0xff00
c001a73f:	09 c2                	or     edx,eax
c001a741:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a745:	c1 e0 18             	shl    eax,0x18
c001a748:	09 d0                	or     eax,edx
c001a74a:	c3                   	ret    

c001a74b <Net::crc32Calc(unsigned char*, int)>:
c001a74b:	83 ec 10             	sub    esp,0x10
c001a74e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a753:	75 07                	jne    c001a75c <Net::crc32Calc(unsigned char*, int)+0x11>
c001a755:	b8 00 00 00 00       	mov    eax,0x0
c001a75a:	eb 7c                	jmp    c001a7d8 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a75c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a761:	7f 07                	jg     c001a76a <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a763:	b8 00 00 00 00       	mov    eax,0x0
c001a768:	eb 6e                	jmp    c001a7d8 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a76a:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a772:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a77e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a782:	7d 4e                	jge    c001a7d2 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a784:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a788:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a78c:	01 d0                	add    eax,edx
c001a78e:	8a 00                	mov    al,BYTE PTR [eax]
c001a790:	0f b6 c0             	movzx  eax,al
c001a793:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a797:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a79f:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a7a4:	7f 26                	jg     c001a7cc <Net::crc32Calc(unsigned char*, int)+0x81>
c001a7a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7aa:	83 e0 01             	and    eax,0x1
c001a7ad:	74 0d                	je     c001a7bc <Net::crc32Calc(unsigned char*, int)+0x71>
c001a7af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7b3:	d1 e8                	shr    eax,1
c001a7b5:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a7ba:	eb 06                	jmp    c001a7c2 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a7bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7c0:	d1 e8                	shr    eax,1
c001a7c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a7c6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a7ca:	eb d3                	jmp    c001a79f <Net::crc32Calc(unsigned char*, int)+0x54>
c001a7cc:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a7d0:	eb a8                	jmp    c001a77a <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a7d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7d6:	f7 d0                	not    eax
c001a7d8:	83 c4 10             	add    esp,0x10
c001a7db:	c3                   	ret    

c001a7dc <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a7dc:	57                   	push   edi
c001a7dd:	56                   	push   esi
c001a7de:	53                   	push   ebx
c001a7df:	83 ec 60             	sub    esp,0x60
c001a7e2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a7e9:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a7ed:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a7f5:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a7fa:	7f 1a                	jg     c001a816 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a7fc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a803:	8d 50 01             	lea    edx,[eax+0x1]
c001a806:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a80d:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a810:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a814:	eb df                	jmp    c001a7f5 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a816:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a81d:	8d 50 01             	lea    edx,[eax+0x1]
c001a820:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a827:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a82a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a831:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a835:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a839:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a83d:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a845:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a849:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a84d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a851:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a855:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a859:	89 c6                	mov    esi,eax
c001a85b:	89 d7                	mov    edi,edx
c001a85d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a85f:	89 c8                	mov    eax,ecx
c001a861:	89 fa                	mov    edx,edi
c001a863:	89 f3                	mov    ebx,esi
c001a865:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a869:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a86d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a870:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a878:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a87f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a883:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a887:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a88b:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a893:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a897:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a89b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a89f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a8a3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a8a7:	89 c6                	mov    esi,eax
c001a8a9:	89 d7                	mov    edi,edx
c001a8ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a8ad:	89 c8                	mov    eax,ecx
c001a8af:	89 fa                	mov    edx,edi
c001a8b1:	89 f3                	mov    ebx,esi
c001a8b3:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a8b7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a8bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a8bf:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a8c7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a8ce:	0f b7 c0             	movzx  eax,ax
c001a8d1:	c1 f8 08             	sar    eax,0x8
c001a8d4:	89 c1                	mov    ecx,eax
c001a8d6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a8dd:	8d 50 01             	lea    edx,[eax+0x1]
c001a8e0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a8e7:	88 ca                	mov    dl,cl
c001a8e9:	88 10                	mov    BYTE PTR [eax],dl
c001a8eb:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a8f2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a8f9:	8d 48 01             	lea    ecx,[eax+0x1]
c001a8fc:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a903:	88 10                	mov    BYTE PTR [eax],dl
c001a905:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a909:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a90d:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a914:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a918:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a91c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a920:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a924:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a928:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a92c:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a930:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a934:	89 c6                	mov    esi,eax
c001a936:	89 d7                	mov    edi,edx
c001a938:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a93a:	89 c8                	mov    eax,ecx
c001a93c:	89 fa                	mov    edx,edi
c001a93e:	89 f3                	mov    ebx,esi
c001a940:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a944:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a948:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a94c:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a950:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a957:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a95e:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a962:	50                   	push   eax
c001a963:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a967:	e8 df fd ff ff       	call   c001a74b <Net::crc32Calc(unsigned char*, int)>
c001a96c:	83 c4 08             	add    esp,0x8
c001a96f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a973:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a977:	c1 e8 18             	shr    eax,0x18
c001a97a:	89 c1                	mov    ecx,eax
c001a97c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a983:	8d 50 01             	lea    edx,[eax+0x1]
c001a986:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a98d:	88 ca                	mov    dl,cl
c001a98f:	88 10                	mov    BYTE PTR [eax],dl
c001a991:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a995:	c1 e8 10             	shr    eax,0x10
c001a998:	89 c1                	mov    ecx,eax
c001a99a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a9a1:	8d 50 01             	lea    edx,[eax+0x1]
c001a9a4:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a9ab:	88 ca                	mov    dl,cl
c001a9ad:	88 10                	mov    BYTE PTR [eax],dl
c001a9af:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a9b3:	c1 e8 08             	shr    eax,0x8
c001a9b6:	89 c1                	mov    ecx,eax
c001a9b8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a9bf:	8d 50 01             	lea    edx,[eax+0x1]
c001a9c2:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a9c9:	88 ca                	mov    dl,cl
c001a9cb:	88 10                	mov    BYTE PTR [eax],dl
c001a9cd:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a9d4:	8d 50 01             	lea    edx,[eax+0x1]
c001a9d7:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a9de:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a9e2:	88 10                	mov    BYTE PTR [eax],dl
c001a9e4:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a9e8:	83 c4 60             	add    esp,0x60
c001a9eb:	5b                   	pop    ebx
c001a9ec:	5e                   	pop    esi
c001a9ed:	5f                   	pop    edi
c001a9ee:	c3                   	ret    

c001a9ef <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a9ef:	57                   	push   edi
c001a9f0:	56                   	push   esi
c001a9f1:	53                   	push   ebx
c001a9f2:	83 ec 70             	sub    esp,0x70
c001a9f5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a9fc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001aa00:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001aa08:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aa0f:	83 c0 0e             	add    eax,0xe
c001aa12:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001aa16:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa1d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001aa21:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001aa29:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001aa31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aa35:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aa39:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001aa3d:	89 c6                	mov    esi,eax
c001aa3f:	89 d7                	mov    edi,edx
c001aa41:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa43:	89 c8                	mov    eax,ecx
c001aa45:	89 fa                	mov    edx,edi
c001aa47:	89 f3                	mov    ebx,esi
c001aa49:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001aa4d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001aa51:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aa55:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001aa5d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aa64:	83 c0 08             	add    eax,0x8
c001aa67:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001aa6b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa72:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001aa76:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001aa7e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001aa82:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001aa86:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001aa8a:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001aa8e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001aa92:	89 c6                	mov    esi,eax
c001aa94:	89 d7                	mov    edi,edx
c001aa96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa98:	89 c8                	mov    eax,ecx
c001aa9a:	89 fa                	mov    edx,edi
c001aa9c:	89 f3                	mov    ebx,esi
c001aa9e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001aaa2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001aaa6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001aaaa:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001aab2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aab9:	8d 50 01             	lea    edx,[eax+0x1]
c001aabc:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aac3:	8a 00                	mov    al,BYTE PTR [eax]
c001aac5:	0f b6 c0             	movzx  eax,al
c001aac8:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001aacd:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aad4:	8d 50 01             	lea    edx,[eax+0x1]
c001aad7:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aade:	8a 00                	mov    al,BYTE PTR [eax]
c001aae0:	0f b6 c0             	movzx  eax,al
c001aae3:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001aae8:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001aaed:	c1 e0 08             	shl    eax,0x8
c001aaf0:	89 c2                	mov    edx,eax
c001aaf2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001aaf6:	09 d0                	or     eax,edx
c001aaf8:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001aaff:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ab03:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001ab0b:	75 46                	jne    c001ab53 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001ab0d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ab14:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ab17:	66 3d dc 05          	cmp    ax,0x5dc
c001ab1b:	77 16                	ja     c001ab33 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001ab1d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ab24:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ab27:	0f b7 c0             	movzx  eax,ax
c001ab2a:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001ab31:	eb 20                	jmp    c001ab53 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001ab33:	83 ec 0c             	sub    esp,0xc
c001ab36:	68 08 c4 02 c0       	push   0xc002c408
c001ab3b:	e8 81 7e ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001ab40:	83 c4 10             	add    esp,0x10
c001ab43:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ab4a:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ab4e:	e9 17 01 00 00       	jmp    c001ac6a <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001ab53:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ab5a:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001ab61:	8b 12                	mov    edx,DWORD PTR [edx]
c001ab63:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ab67:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001ab6e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ab72:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ab76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ab7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab82:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ab86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ab8a:	89 c6                	mov    esi,eax
c001ab8c:	89 d7                	mov    edi,edx
c001ab8e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab90:	89 c8                	mov    eax,ecx
c001ab92:	89 fa                	mov    edx,edi
c001ab94:	89 f3                	mov    ebx,esi
c001ab96:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ab9a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ab9e:	89 04 24             	mov    DWORD PTR [esp],eax
c001aba1:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aba8:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001abaf:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001abb6:	8d 50 01             	lea    edx,[eax+0x1]
c001abb9:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001abc0:	8a 00                	mov    al,BYTE PTR [eax]
c001abc2:	0f b6 c0             	movzx  eax,al
c001abc5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001abc9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001abd0:	8d 50 01             	lea    edx,[eax+0x1]
c001abd3:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001abda:	8a 00                	mov    al,BYTE PTR [eax]
c001abdc:	0f b6 c0             	movzx  eax,al
c001abdf:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001abe3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001abea:	8d 50 01             	lea    edx,[eax+0x1]
c001abed:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001abf4:	8a 00                	mov    al,BYTE PTR [eax]
c001abf6:	0f b6 c0             	movzx  eax,al
c001abf9:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001abfd:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac04:	8d 50 01             	lea    edx,[eax+0x1]
c001ac07:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ac0e:	8a 00                	mov    al,BYTE PTR [eax]
c001ac10:	0f b6 c0             	movzx  eax,al
c001ac13:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001ac17:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001ac1b:	c1 e0 18             	shl    eax,0x18
c001ac1e:	89 c2                	mov    edx,eax
c001ac20:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001ac24:	c1 e0 10             	shl    eax,0x10
c001ac27:	09 c2                	or     edx,eax
c001ac29:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001ac2d:	c1 e0 08             	shl    eax,0x8
c001ac30:	09 d0                	or     eax,edx
c001ac32:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001ac36:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001ac3a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac41:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001ac45:	83 e8 04             	sub    eax,0x4
c001ac48:	83 ec 08             	sub    esp,0x8
c001ac4b:	50                   	push   eax
c001ac4c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001ac50:	e8 f6 fa ff ff       	call   c001a74b <Net::crc32Calc(unsigned char*, int)>
c001ac55:	83 c4 10             	add    esp,0x10
c001ac58:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001ac5c:	0f 94 c2             	sete   dl
c001ac5f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ac66:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ac69:	90                   	nop
c001ac6a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ac71:	83 c4 70             	add    esp,0x70
c001ac74:	5b                   	pop    ebx
c001ac75:	5e                   	pop    esi
c001ac76:	5f                   	pop    edi
c001ac77:	c2 04 00             	ret    0x4

c001ac7a <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ac7a:	55                   	push   ebp
c001ac7b:	57                   	push   edi
c001ac7c:	56                   	push   esi
c001ac7d:	53                   	push   ebx
c001ac7e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ac84:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ac8b:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ac8d:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ac90:	80 fb 40             	cmp    bl,0x40
c001ac93:	75 1b                	jne    c001acb0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ac95:	8a 16                	mov    dl,BYTE PTR [esi]
c001ac97:	84 d2                	test   dl,dl
c001ac99:	0f 84 f1 00 00 00    	je     c001ad90 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac9f:	8d 46 01             	lea    eax,[esi+0x1]
c001aca2:	80 fa 3a             	cmp    dl,0x3a
c001aca5:	74 04                	je     c001acab <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001aca7:	89 c6                	mov    esi,eax
c001aca9:	eb ea                	jmp    c001ac95 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001acab:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001acae:	89 c6                	mov    esi,eax
c001acb0:	50                   	push   eax
c001acb1:	6a 40                	push   0x40
c001acb3:	6a 00                	push   0x0
c001acb5:	8d 44 24 24          	lea    eax,[esp+0x24]
c001acb9:	50                   	push   eax
c001acba:	e8 91 5a fe ff       	call   c0000750 <memset>
c001acbf:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001acc6:	31 c0                	xor    eax,eax
c001acc8:	83 c4 10             	add    esp,0x10
c001accb:	8a 0f                	mov    cl,BYTE PTR [edi]
c001accd:	84 c9                	test   cl,cl
c001accf:	0f 84 bb 00 00 00    	je     c001ad90 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001acd5:	3d c7 00 00 00       	cmp    eax,0xc7
c001acda:	0f 8f b0 00 00 00    	jg     c001ad90 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ace0:	80 f9 0a             	cmp    cl,0xa
c001ace3:	0f 85 98 00 00 00    	jne    c001ad81 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ace9:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001acee:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001acf2:	a8 df                	test   al,0xdf
c001acf4:	0f 94 c1             	sete   cl
c001acf7:	3c 23                	cmp    al,0x23
c001acf9:	0f 94 c2             	sete   dl
c001acfc:	08 d1                	or     cl,dl
c001acfe:	75 4a                	jne    c001ad4a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad00:	8d 50 f7             	lea    edx,[eax-0x9]
c001ad03:	80 fa 01             	cmp    dl,0x1
c001ad06:	76 42                	jbe    c001ad4a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad08:	3c 5b                	cmp    al,0x5b
c001ad0a:	75 42                	jne    c001ad4e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ad0c:	80 fb 40             	cmp    bl,0x40
c001ad0f:	75 39                	jne    c001ad4a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad11:	83 ec 0c             	sub    esp,0xc
c001ad14:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ad18:	52                   	push   edx
c001ad19:	e8 4e 5a fe ff       	call   c000076c <strlen>
c001ad1e:	83 c4 10             	add    esp,0x10
c001ad21:	83 f8 3f             	cmp    eax,0x3f
c001ad24:	77 6a                	ja     c001ad90 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad26:	50                   	push   eax
c001ad27:	50                   	push   eax
c001ad28:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ad2c:	52                   	push   edx
c001ad2d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ad31:	52                   	push   edx
c001ad32:	e8 d5 5a fe ff       	call   c000080c <strcpy>
c001ad37:	58                   	pop    eax
c001ad38:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ad3c:	52                   	push   edx
c001ad3d:	e8 2a 5a fe ff       	call   c000076c <strlen>
c001ad42:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ad47:	83 c4 10             	add    esp,0x10
c001ad4a:	31 d2                	xor    edx,edx
c001ad4c:	eb 3a                	jmp    c001ad88 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ad4e:	80 fb 40             	cmp    bl,0x40
c001ad51:	74 06                	je     c001ad59 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ad53:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ad57:	eb 20                	jmp    c001ad79 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ad59:	50                   	push   eax
c001ad5a:	50                   	push   eax
c001ad5b:	55                   	push   ebp
c001ad5c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad60:	50                   	push   eax
c001ad61:	e8 32 5b fe ff       	call   c0000898 <strcmp>
c001ad66:	83 c4 10             	add    esp,0x10
c001ad69:	85 c0                	test   eax,eax
c001ad6b:	75 dd                	jne    c001ad4a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad6d:	eb e4                	jmp    c001ad53 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ad6f:	8d 50 01             	lea    edx,[eax+0x1]
c001ad72:	80 f9 3d             	cmp    cl,0x3d
c001ad75:	74 1d                	je     c001ad94 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ad77:	89 d0                	mov    eax,edx
c001ad79:	8a 08                	mov    cl,BYTE PTR [eax]
c001ad7b:	84 c9                	test   cl,cl
c001ad7d:	75 f0                	jne    c001ad6f <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ad7f:	eb 0f                	jmp    c001ad90 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad81:	8d 50 01             	lea    edx,[eax+0x1]
c001ad84:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ad88:	47                   	inc    edi
c001ad89:	89 d0                	mov    eax,edx
c001ad8b:	e9 3b ff ff ff       	jmp    c001accb <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ad90:	31 c0                	xor    eax,eax
c001ad92:	eb 33                	jmp    c001adc7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ad94:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ad98:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ad9b:	50                   	push   eax
c001ad9c:	50                   	push   eax
c001ad9d:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ada1:	50                   	push   eax
c001ada2:	56                   	push   esi
c001ada3:	e8 f0 5a fe ff       	call   c0000898 <strcmp>
c001ada8:	83 c4 10             	add    esp,0x10
c001adab:	85 c0                	test   eax,eax
c001adad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001adb1:	75 97                	jne    c001ad4a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adb3:	51                   	push   ecx
c001adb4:	51                   	push   ecx
c001adb5:	52                   	push   edx
c001adb6:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001adbd:	e8 4a 5a fe ff       	call   c000080c <strcpy>
c001adc2:	83 c4 10             	add    esp,0x10
c001adc5:	b0 01                	mov    al,0x1
c001adc7:	81 c4 2c 01 00 00    	add    esp,0x12c
c001adcd:	5b                   	pop    ebx
c001adce:	5e                   	pop    esi
c001adcf:	5f                   	pop    edi
c001add0:	5d                   	pop    ebp
c001add1:	c3                   	ret    

c001add2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001add2:	57                   	push   edi
c001add3:	56                   	push   esi
c001add4:	53                   	push   ebx
c001add5:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001addb:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ade2:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ade9:	53                   	push   ebx
c001adea:	e8 7d 59 fe ff       	call   c000076c <strlen>
c001adef:	89 34 24             	mov    DWORD PTR [esp],esi
c001adf2:	89 c7                	mov    edi,eax
c001adf4:	e8 73 59 fe ff       	call   c000076c <strlen>
c001adf9:	83 c4 10             	add    esp,0x10
c001adfc:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001ae00:	3d ff 00 00 00       	cmp    eax,0xff
c001ae05:	0f 87 d3 00 00 00    	ja     c001aede <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ae0b:	57                   	push   edi
c001ae0c:	57                   	push   edi
c001ae0d:	56                   	push   esi
c001ae0e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001ae12:	56                   	push   esi
c001ae13:	e8 f4 59 fe ff       	call   c000080c <strcpy>
c001ae18:	58                   	pop    eax
c001ae19:	5a                   	pop    edx
c001ae1a:	68 aa c7 02 c0       	push   0xc002c7aa
c001ae1f:	56                   	push   esi
c001ae20:	e8 27 5b fe ff       	call   c000094c <strcat>
c001ae25:	59                   	pop    ecx
c001ae26:	5f                   	pop    edi
c001ae27:	53                   	push   ebx
c001ae28:	56                   	push   esi
c001ae29:	e8 1e 5b fe ff       	call   c000094c <strcat>
c001ae2e:	58                   	pop    eax
c001ae2f:	5a                   	pop    edx
c001ae30:	68 54 c4 02 c0       	push   0xc002c454
c001ae35:	56                   	push   esi
c001ae36:	e8 11 5b fe ff       	call   c000094c <strcat>
c001ae3b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ae42:	e8 22 4b ff ff       	call   c000f969 <malloc>
c001ae47:	83 c4 0c             	add    esp,0xc
c001ae4a:	89 c3                	mov    ebx,eax
c001ae4c:	ff 35 30 fb 02 c0    	push   DWORD PTR ds:0xc002fb30
c001ae52:	56                   	push   esi
c001ae53:	50                   	push   eax
c001ae54:	e8 c7 80 ff ff       	call   c0012f20 <File::File(char const*, Process*)>
c001ae59:	83 c4 10             	add    esp,0x10
c001ae5c:	85 db                	test   ebx,ebx
c001ae5e:	74 7e                	je     c001aede <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ae60:	51                   	push   ecx
c001ae61:	51                   	push   ecx
c001ae62:	6a 01                	push   0x1
c001ae64:	53                   	push   ebx
c001ae65:	e8 1a 81 ff ff       	call   c0012f84 <File::open(FileOpenMode)>
c001ae6a:	83 c4 10             	add    esp,0x10
c001ae6d:	85 c0                	test   eax,eax
c001ae6f:	74 08                	je     c001ae79 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001ae71:	83 ec 0c             	sub    esp,0xc
c001ae74:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae76:	53                   	push   ebx
c001ae77:	eb 5f                	jmp    c001aed8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001ae79:	52                   	push   edx
c001ae7a:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ae7e:	50                   	push   eax
c001ae7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ae83:	50                   	push   eax
c001ae84:	53                   	push   ebx
c001ae85:	e8 a6 83 ff ff       	call   c0013230 <File::stat(unsigned long long*, bool*)>
c001ae8a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae8e:	83 c4 10             	add    esp,0x10
c001ae91:	89 c1                	mov    ecx,eax
c001ae93:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001ae97:	74 31                	je     c001aeca <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ae99:	83 ec 0c             	sub    esp,0xc
c001ae9c:	50                   	push   eax
c001ae9d:	e8 c7 4a ff ff       	call   c000f969 <malloc>
c001aea2:	89 c6                	mov    esi,eax
c001aea4:	58                   	pop    eax
c001aea5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aea7:	8d 54 24 20          	lea    edx,[esp+0x20]
c001aeab:	52                   	push   edx
c001aeac:	56                   	push   esi
c001aead:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aeb1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aeb5:	53                   	push   ebx
c001aeb6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aeb9:	83 c4 20             	add    esp,0x20
c001aebc:	85 c0                	test   eax,eax
c001aebe:	75 0a                	jne    c001aeca <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001aec0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aec4:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001aec8:	74 18                	je     c001aee2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001aeca:	83 ec 0c             	sub    esp,0xc
c001aecd:	53                   	push   ebx
c001aece:	e8 0f 81 ff ff       	call   c0012fe2 <File::close()>
c001aed3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aed5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aed8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aedb:	83 c4 10             	add    esp,0x10
c001aede:	31 c0                	xor    eax,eax
c001aee0:	eb 3b                	jmp    c001af1d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001aee2:	83 ec 0c             	sub    esp,0xc
c001aee5:	53                   	push   ebx
c001aee6:	e8 f7 80 ff ff       	call   c0012fe2 <File::close()>
c001aeeb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aeed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aef0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aef3:	83 c4 0c             	add    esp,0xc
c001aef6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aefd:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af04:	56                   	push   esi
c001af05:	e8 70 fd ff ff       	call   c001ac7a <Reg::findLineFromLoadedData(char*, char*, char*)>
c001af0a:	89 34 24             	mov    DWORD PTR [esp],esi
c001af0d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001af11:	e8 63 4a ff ff       	call   c000f979 <free>
c001af16:	83 c4 10             	add    esp,0x10
c001af19:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001af1d:	81 c4 20 01 00 00    	add    esp,0x120
c001af23:	5b                   	pop    ebx
c001af24:	5e                   	pop    esi
c001af25:	5f                   	pop    edi
c001af26:	c3                   	ret    

c001af27 <Reg::getLine(char*, char*, char*)>:
c001af27:	57                   	push   edi
c001af28:	56                   	push   esi
c001af29:	53                   	push   ebx
c001af2a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af2e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001af32:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001af36:	57                   	push   edi
c001af37:	56                   	push   esi
c001af38:	53                   	push   ebx
c001af39:	68 59 c4 02 c0       	push   0xc002c459
c001af3e:	e8 8f fe ff ff       	call   c001add2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001af43:	83 c4 10             	add    esp,0x10
c001af46:	84 c0                	test   al,al
c001af48:	75 10                	jne    c001af5a <Reg::getLine(char*, char*, char*)+0x33>
c001af4a:	57                   	push   edi
c001af4b:	56                   	push   esi
c001af4c:	53                   	push   ebx
c001af4d:	68 7e c4 02 c0       	push   0xc002c47e
c001af52:	e8 7b fe ff ff       	call   c001add2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001af57:	83 c4 10             	add    esp,0x10
c001af5a:	5b                   	pop    ebx
c001af5b:	5e                   	pop    esi
c001af5c:	5f                   	pop    edi
c001af5d:	c3                   	ret    

c001af5e <Reg::readInt(char*, char*, int*)>:
c001af5e:	55                   	push   ebp
c001af5f:	57                   	push   edi
c001af60:	56                   	push   esi
c001af61:	53                   	push   ebx
c001af62:	81 ec f0 00 00 00    	sub    esp,0xf0
c001af68:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001af6c:	57                   	push   edi
c001af6d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001af74:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001af7b:	e8 a7 ff ff ff       	call   c001af27 <Reg::getLine(char*, char*, char*)>
c001af80:	83 c4 10             	add    esp,0x10
c001af83:	84 c0                	test   al,al
c001af85:	0f 84 b3 00 00 00    	je     c001b03e <Reg::readInt(char*, char*, int*)+0xe0>
c001af8b:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001af8f:	80 fa 2b             	cmp    dl,0x2b
c001af92:	74 0c                	je     c001afa0 <Reg::readInt(char*, char*, int*)+0x42>
c001af94:	80 fa 2d             	cmp    dl,0x2d
c001af97:	75 0e                	jne    c001afa7 <Reg::readInt(char*, char*, int*)+0x49>
c001af99:	ba 01 00 00 00       	mov    edx,0x1
c001af9e:	eb 0b                	jmp    c001afab <Reg::readInt(char*, char*, int*)+0x4d>
c001afa0:	ba 01 00 00 00       	mov    edx,0x1
c001afa5:	eb 02                	jmp    c001afa9 <Reg::readInt(char*, char*, int*)+0x4b>
c001afa7:	31 d2                	xor    edx,edx
c001afa9:	31 c0                	xor    eax,eax
c001afab:	be 0a 00 00 00       	mov    esi,0xa
c001afb0:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001afb5:	75 20                	jne    c001afd7 <Reg::readInt(char*, char*, int*)+0x79>
c001afb7:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001afbb:	80 f9 78             	cmp    cl,0x78
c001afbe:	75 0a                	jne    c001afca <Reg::readInt(char*, char*, int*)+0x6c>
c001afc0:	83 c2 02             	add    edx,0x2
c001afc3:	be 10 00 00 00       	mov    esi,0x10
c001afc8:	eb 0d                	jmp    c001afd7 <Reg::readInt(char*, char*, int*)+0x79>
c001afca:	80 f9 62             	cmp    cl,0x62
c001afcd:	75 08                	jne    c001afd7 <Reg::readInt(char*, char*, int*)+0x79>
c001afcf:	83 c2 02             	add    edx,0x2
c001afd2:	be 02 00 00 00       	mov    esi,0x2
c001afd7:	01 d7                	add    edi,edx
c001afd9:	31 d2                	xor    edx,edx
c001afdb:	8a 1f                	mov    bl,BYTE PTR [edi]
c001afdd:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001afe1:	80 fb 0d             	cmp    bl,0xd
c001afe4:	0f 94 c3             	sete   bl
c001afe7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001afec:	0f 94 c1             	sete   cl
c001afef:	08 cb                	or     bl,cl
c001aff1:	75 3a                	jne    c001b02d <Reg::readInt(char*, char*, int*)+0xcf>
c001aff3:	0f af d6             	imul   edx,esi
c001aff6:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001affb:	83 fe 10             	cmp    esi,0x10
c001affe:	75 26                	jne    c001b026 <Reg::readInt(char*, char*, int*)+0xc8>
c001b000:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b004:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b007:	89 e9                	mov    ecx,ebp
c001b009:	80 f9 05             	cmp    cl,0x5
c001b00c:	77 06                	ja     c001b014 <Reg::readInt(char*, char*, int*)+0xb6>
c001b00e:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b012:	eb 16                	jmp    c001b02a <Reg::readInt(char*, char*, int*)+0xcc>
c001b014:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b018:	83 e9 61             	sub    ecx,0x61
c001b01b:	80 f9 05             	cmp    cl,0x5
c001b01e:	77 06                	ja     c001b026 <Reg::readInt(char*, char*, int*)+0xc8>
c001b020:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b024:	eb 04                	jmp    c001b02a <Reg::readInt(char*, char*, int*)+0xcc>
c001b026:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b02a:	47                   	inc    edi
c001b02b:	eb ae                	jmp    c001afdb <Reg::readInt(char*, char*, int*)+0x7d>
c001b02d:	84 c0                	test   al,al
c001b02f:	74 02                	je     c001b033 <Reg::readInt(char*, char*, int*)+0xd5>
c001b031:	f7 da                	neg    edx
c001b033:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b03a:	89 10                	mov    DWORD PTR [eax],edx
c001b03c:	88 d8                	mov    al,bl
c001b03e:	81 c4 ec 00 00 00    	add    esp,0xec
c001b044:	5b                   	pop    ebx
c001b045:	5e                   	pop    esi
c001b046:	5f                   	pop    edi
c001b047:	5d                   	pop    ebp
c001b048:	c3                   	ret    

c001b049 <Reg::readString(char*, char*, char*, int)>:
c001b049:	57                   	push   edi
c001b04a:	56                   	push   esi
c001b04b:	53                   	push   ebx
c001b04c:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b052:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b059:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b05d:	57                   	push   edi
c001b05e:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b065:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b06c:	e8 b6 fe ff ff       	call   c001af27 <Reg::getLine(char*, char*, char*)>
c001b071:	83 c4 10             	add    esp,0x10
c001b074:	89 c6                	mov    esi,eax
c001b076:	84 c0                	test   al,al
c001b078:	74 44                	je     c001b0be <Reg::readString(char*, char*, char*, int)+0x75>
c001b07a:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b081:	31 c0                	xor    eax,eax
c001b083:	4a                   	dec    edx
c001b084:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b087:	84 c9                	test   cl,cl
c001b089:	74 0f                	je     c001b09a <Reg::readString(char*, char*, char*, int)+0x51>
c001b08b:	39 c2                	cmp    edx,eax
c001b08d:	7e 0b                	jle    c001b09a <Reg::readString(char*, char*, char*, int)+0x51>
c001b08f:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b092:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b097:	40                   	inc    eax
c001b098:	eb ea                	jmp    c001b084 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b09a:	83 ec 0c             	sub    esp,0xc
c001b09d:	53                   	push   ebx
c001b09e:	e8 c9 56 fe ff       	call   c000076c <strlen>
c001b0a3:	83 c4 10             	add    esp,0x10
c001b0a6:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b0ab:	75 11                	jne    c001b0be <Reg::readString(char*, char*, char*, int)+0x75>
c001b0ad:	83 ec 0c             	sub    esp,0xc
c001b0b0:	53                   	push   ebx
c001b0b1:	e8 b6 56 fe ff       	call   c000076c <strlen>
c001b0b6:	83 c4 10             	add    esp,0x10
c001b0b9:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b0be:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b0c4:	89 f0                	mov    eax,esi
c001b0c6:	5b                   	pop    ebx
c001b0c7:	5e                   	pop    esi
c001b0c8:	5f                   	pop    edi
c001b0c9:	c3                   	ret    

c001b0ca <Reg::readBool(char*, char*, bool*)>:
c001b0ca:	83 ec 20             	sub    esp,0x20
c001b0cd:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b0d1:	50                   	push   eax
c001b0d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0da:	e8 7f fe ff ff       	call   c001af5e <Reg::readInt(char*, char*, int*)>
c001b0df:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b0e4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b0e8:	0f 95 02             	setne  BYTE PTR [edx]
c001b0eb:	83 c4 2c             	add    esp,0x2c
c001b0ee:	c3                   	ret    

c001b0ef <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b0ef:	53                   	push   ebx
c001b0f0:	83 ec 1c             	sub    esp,0x1c
c001b0f3:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b0f7:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b0fb:	50                   	push   eax
c001b0fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b100:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b104:	e8 c1 ff ff ff       	call   c001b0ca <Reg::readBool(char*, char*, bool*)>
c001b109:	83 c4 10             	add    esp,0x10
c001b10c:	84 c0                	test   al,al
c001b10e:	74 04                	je     c001b114 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b110:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b114:	88 d8                	mov    al,bl
c001b116:	83 c4 18             	add    esp,0x18
c001b119:	5b                   	pop    ebx
c001b11a:	c3                   	ret    

c001b11b <Reg::readIntWithDefault(char*, char*, int)>:
c001b11b:	53                   	push   ebx
c001b11c:	83 ec 1c             	sub    esp,0x1c
c001b11f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b123:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b127:	50                   	push   eax
c001b128:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b12c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b130:	e8 29 fe ff ff       	call   c001af5e <Reg::readInt(char*, char*, int*)>
c001b135:	83 c4 10             	add    esp,0x10
c001b138:	84 c0                	test   al,al
c001b13a:	74 04                	je     c001b140 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b13c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b140:	89 d8                	mov    eax,ebx
c001b142:	83 c4 18             	add    esp,0x18
c001b145:	5b                   	pop    ebx
c001b146:	c3                   	ret    

c001b147 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b147:	57                   	push   edi
c001b148:	56                   	push   esi
c001b149:	56                   	push   esi
c001b14a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b14e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b152:	56                   	push   esi
c001b153:	57                   	push   edi
c001b154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b158:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b15c:	e8 e8 fe ff ff       	call   c001b049 <Reg::readString(char*, char*, char*, int)>
c001b161:	83 c4 10             	add    esp,0x10
c001b164:	84 c0                	test   al,al
c001b166:	75 1a                	jne    c001b182 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001b168:	51                   	push   ecx
c001b169:	56                   	push   esi
c001b16a:	6a 00                	push   0x0
c001b16c:	57                   	push   edi
c001b16d:	e8 de 55 fe ff       	call   c0000750 <memset>
c001b172:	8d 4e ff             	lea    ecx,[esi-0x1]
c001b175:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b179:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b17b:	83 c4 10             	add    esp,0x10
c001b17e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b182:	89 f8                	mov    eax,edi
c001b184:	5a                   	pop    edx
c001b185:	5e                   	pop    esi
c001b186:	5f                   	pop    edi
c001b187:	c3                   	ret    

c001b188 <Sys::eject(regs*)>:
c001b188:	83 ec 0c             	sub    esp,0xc
c001b18b:	83 ca ff             	or     edx,0xffffffff
c001b18e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b192:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b195:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b19a:	83 e9 41             	sub    ecx,0x41
c001b19d:	83 f9 19             	cmp    ecx,0x19
c001b1a0:	77 18                	ja     c001b1ba <Sys::eject(regs*)+0x32>
c001b1a2:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c001b1a9:	85 c9                	test   ecx,ecx
c001b1ab:	74 0d                	je     c001b1ba <Sys::eject(regs*)+0x32>
c001b1ad:	83 ec 0c             	sub    esp,0xc
c001b1b0:	51                   	push   ecx
c001b1b1:	e8 fc b0 ff ff       	call   c00162b2 <LogicalDisk::eject()>
c001b1b6:	83 c4 10             	add    esp,0x10
c001b1b9:	99                   	cdq    
c001b1ba:	83 c4 0c             	add    esp,0xc
c001b1bd:	c3                   	ret    

c001b1be <Sys::exit(regs*)>:
c001b1be:	83 ec 18             	sub    esp,0x18
c001b1c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b1c5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b1c8:	e8 d3 35 00 00       	call   c001e7a0 <terminateTask(int)>
c001b1cd:	83 c8 ff             	or     eax,0xffffffff
c001b1d0:	83 c4 1c             	add    esp,0x1c
c001b1d3:	89 c2                	mov    edx,eax
c001b1d5:	c3                   	ret    

c001b1d6 <Sys::getCwd(regs*)>:
c001b1d6:	83 ec 10             	sub    esp,0x10
c001b1d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b1dd:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b1e0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b1e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1e8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b1eb:	e8 32 7b ff ff       	call   c0012d22 <Fs::getcwd(Process*, char*, int)>
c001b1f0:	83 c4 1c             	add    esp,0x1c
c001b1f3:	99                   	cdq    
c001b1f4:	c3                   	ret    

c001b1f5 <Sys::getPID(regs*)>:
c001b1f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1fa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1fd:	8b 00                	mov    eax,DWORD PTR [eax]
c001b1ff:	99                   	cdq    
c001b200:	c3                   	ret    

c001b201 <Sys::getRAMData(regs*)>:
c001b201:	8b 0d 54 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e654
c001b207:	69 05 50 e6 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc002e650,0xc8
c001b211:	99                   	cdq    
c001b212:	f7 f9                	idiv   ecx
c001b214:	c1 e0 18             	shl    eax,0x18
c001b217:	09 c8                	or     eax,ecx
c001b219:	99                   	cdq    
c001b21a:	c3                   	ret    

c001b21b <Sys::getVGAPtr(regs*)>:
c001b21b:	55                   	push   ebp
c001b21c:	57                   	push   edi
c001b21d:	56                   	push   esi
c001b21e:	53                   	push   ebx
c001b21f:	83 ec 18             	sub    esp,0x18
c001b222:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b226:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b229:	e8 be 30 00 00       	call   c001e2ec <Thr::processFromPID(int)>
c001b22e:	83 c4 10             	add    esp,0x10
c001b231:	89 c1                	mov    ecx,eax
c001b233:	b8 01 00 00 00       	mov    eax,0x1
c001b238:	85 c9                	test   ecx,ecx
c001b23a:	74 59                	je     c001b295 <Sys::getVGAPtr(regs*)+0x7a>
c001b23c:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b242:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b246:	74 0c                	je     c001b254 <Sys::getVGAPtr(regs*)+0x39>
c001b248:	83 ec 0c             	sub    esp,0xc
c001b24b:	53                   	push   ebx
c001b24c:	e8 d2 54 ff ff       	call   c0010723 <setActiveTerminal(VgaText*)>
c001b251:	83 c4 10             	add    esp,0x10
c001b254:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b257:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b25a:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b25f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b261:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b264:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b267:	81 c3 82 00 00 00    	add    ebx,0x82
c001b26d:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b273:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b276:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b279:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b27f:	50                   	push   eax
c001b280:	50                   	push   eax
c001b281:	53                   	push   ebx
c001b282:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b285:	05 a8 0f 00 00       	add    eax,0xfa8
c001b28a:	50                   	push   eax
c001b28b:	e8 7c 55 fe ff       	call   c000080c <strcpy>
c001b290:	83 c4 10             	add    esp,0x10
c001b293:	31 c0                	xor    eax,eax
c001b295:	83 c4 0c             	add    esp,0xc
c001b298:	31 d2                	xor    edx,edx
c001b29a:	5b                   	pop    ebx
c001b29b:	5e                   	pop    esi
c001b29c:	5f                   	pop    edi
c001b29d:	5d                   	pop    ebp
c001b29e:	c3                   	ret    

c001b29f <Sys::loadDLL(regs*)>:
c001b29f:	56                   	push   esi
c001b2a0:	53                   	push   ebx
c001b2a1:	31 d2                	xor    edx,edx
c001b2a3:	51                   	push   ecx
c001b2a4:	b8 01 00 00 00       	mov    eax,0x1
c001b2a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b2ad:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b2b1:	0f 84 8c 00 00 00    	je     c001b343 <Sys::loadDLL(regs*)+0xa4>
c001b2b7:	83 ec 0c             	sub    esp,0xc
c001b2ba:	68 14 01 00 00       	push   0x114
c001b2bf:	e8 a5 46 ff ff       	call   c000f969 <malloc>
c001b2c4:	83 c4 0c             	add    esp,0xc
c001b2c7:	89 c3                	mov    ebx,eax
c001b2c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2ce:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2d1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b2d4:	53                   	push   ebx
c001b2d5:	e8 46 7c ff ff       	call   c0012f20 <File::File(char const*, Process*)>
c001b2da:	83 c4 10             	add    esp,0x10
c001b2dd:	31 d2                	xor    edx,edx
c001b2df:	b8 02 00 00 00       	mov    eax,0x2
c001b2e4:	85 db                	test   ebx,ebx
c001b2e6:	74 5b                	je     c001b343 <Sys::loadDLL(regs*)+0xa4>
c001b2e8:	83 ec 0c             	sub    esp,0xc
c001b2eb:	53                   	push   ebx
c001b2ec:	e8 01 7f ff ff       	call   c00131f2 <File::exists()>
c001b2f1:	83 c4 10             	add    esp,0x10
c001b2f4:	84 c0                	test   al,al
c001b2f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2f8:	75 11                	jne    c001b30b <Sys::loadDLL(regs*)+0x6c>
c001b2fa:	83 ec 0c             	sub    esp,0xc
c001b2fd:	53                   	push   ebx
c001b2fe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b301:	83 c4 10             	add    esp,0x10
c001b304:	b8 03 00 00 00       	mov    eax,0x3
c001b309:	eb 36                	jmp    c001b341 <Sys::loadDLL(regs*)+0xa2>
c001b30b:	83 ec 0c             	sub    esp,0xc
c001b30e:	53                   	push   ebx
c001b30f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b312:	58                   	pop    eax
c001b313:	5a                   	pop    edx
c001b314:	6a 00                	push   0x0
c001b316:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b319:	e8 0e 22 00 00       	call   c001d52c <Thr::loadDLL(char const*, bool)>
c001b31e:	83 c4 10             	add    esp,0x10
c001b321:	89 c1                	mov    ecx,eax
c001b323:	31 d2                	xor    edx,edx
c001b325:	b8 04 00 00 00       	mov    eax,0x4
c001b32a:	85 c9                	test   ecx,ecx
c001b32c:	74 15                	je     c001b343 <Sys::loadDLL(regs*)+0xa4>
c001b32e:	53                   	push   ebx
c001b32f:	53                   	push   ebx
c001b330:	ff 35 08 e6 02 c0    	push   DWORD PTR ds:0xc002e608
c001b336:	51                   	push   ecx
c001b337:	e8 21 24 00 00       	call   c001d75d <Thr::executeDLL(unsigned long, void*)>
c001b33c:	83 c4 10             	add    esp,0x10
c001b33f:	31 c0                	xor    eax,eax
c001b341:	31 d2                	xor    edx,edx
c001b343:	59                   	pop    ecx
c001b344:	5b                   	pop    ebx
c001b345:	5e                   	pop    esi
c001b346:	c3                   	ret    

c001b347 <Sys::read(regs*)>:
c001b347:	57                   	push   edi
c001b348:	56                   	push   esi
c001b349:	53                   	push   ebx
c001b34a:	83 ec 10             	sub    esp,0x10
c001b34d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b351:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b354:	83 f8 02             	cmp    eax,0x2
c001b357:	77 10                	ja     c001b369 <Sys::read(regs*)+0x22>
c001b359:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b35e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b361:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b367:	eb 0e                	jmp    c001b377 <Sys::read(regs*)+0x30>
c001b369:	83 ec 0c             	sub    esp,0xc
c001b36c:	50                   	push   eax
c001b36d:	e8 27 61 ff ff       	call   c0011499 <getFromFileDescriptor(int)>
c001b372:	83 c4 10             	add    esp,0x10
c001b375:	89 c1                	mov    ecx,eax
c001b377:	83 c8 ff             	or     eax,0xffffffff
c001b37a:	85 c9                	test   ecx,ecx
c001b37c:	89 c2                	mov    edx,eax
c001b37e:	74 28                	je     c001b3a8 <Sys::read(regs*)+0x61>
c001b380:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b388:	31 ff                	xor    edi,edi
c001b38a:	83 ec 0c             	sub    esp,0xc
c001b38d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b38f:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b393:	52                   	push   edx
c001b394:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b397:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b39a:	57                   	push   edi
c001b39b:	56                   	push   esi
c001b39c:	51                   	push   ecx
c001b39d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b3a0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b3a4:	83 c4 20             	add    esp,0x20
c001b3a7:	99                   	cdq    
c001b3a8:	83 c4 10             	add    esp,0x10
c001b3ab:	5b                   	pop    ebx
c001b3ac:	5e                   	pop    esi
c001b3ad:	5f                   	pop    edi
c001b3ae:	c3                   	ret    

c001b3af <Sys::sbrk(regs*)>:
c001b3af:	56                   	push   esi
c001b3b0:	53                   	push   ebx
c001b3b1:	50                   	push   eax
c001b3b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b3bb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3be:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b3c1:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b3c7:	85 db                	test   ebx,ebx
c001b3c9:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b3cc:	74 02                	je     c001b3d0 <Sys::sbrk(regs*)+0x21>
c001b3ce:	79 06                	jns    c001b3d6 <Sys::sbrk(regs*)+0x27>
c001b3d0:	89 f0                	mov    eax,esi
c001b3d2:	31 d2                	xor    edx,edx
c001b3d4:	eb 2a                	jmp    c001b400 <Sys::sbrk(regs*)+0x51>
c001b3d6:	83 c8 ff             	or     eax,0xffffffff
c001b3d9:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b3df:	89 c2                	mov    edx,eax
c001b3e1:	77 1d                	ja     c001b400 <Sys::sbrk(regs*)+0x51>
c001b3e3:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b3e9:	50                   	push   eax
c001b3ea:	c1 ea 0c             	shr    edx,0xc
c001b3ed:	68 07 0c 00 00       	push   0xc07
c001b3f2:	52                   	push   edx
c001b3f3:	51                   	push   ecx
c001b3f4:	e8 9f 69 ff ff       	call   c0011d98 <VAS::allocatePages(int, int)>
c001b3f9:	89 f0                	mov    eax,esi
c001b3fb:	31 d2                	xor    edx,edx
c001b3fd:	83 c4 10             	add    esp,0x10
c001b400:	59                   	pop    ecx
c001b401:	5b                   	pop    ebx
c001b402:	5e                   	pop    esi
c001b403:	c3                   	ret    

c001b404 <Sys::setCwd(regs*)>:
c001b404:	83 ec 14             	sub    esp,0x14
c001b407:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b40b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b40e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b413:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b416:	e8 76 7e ff ff       	call   c0013291 <Fs::setcwd(Process*, char*)>
c001b41b:	83 c4 1c             	add    esp,0x1c
c001b41e:	99                   	cdq    
c001b41f:	c3                   	ret    

c001b420 <Sys::setTime(regs*)>:
c001b420:	55                   	push   ebp
c001b421:	31 c9                	xor    ecx,ecx
c001b423:	57                   	push   edi
c001b424:	bd 0c 00 00 00       	mov    ebp,0xc
c001b429:	56                   	push   esi
c001b42a:	53                   	push   ebx
c001b42b:	31 db                	xor    ebx,ebx
c001b42d:	83 ec 10             	sub    esp,0x10
c001b430:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b434:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001b437:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001b43a:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001b43d:	89 c2                	mov    edx,eax
c001b43f:	66 81 ef 6c 07       	sub    di,0x76c
c001b444:	83 e2 1f             	and    edx,0x1f
c001b447:	c1 e7 10             	shl    edi,0x10
c001b44a:	42                   	inc    edx
c001b44b:	c1 e8 05             	shr    eax,0x5
c001b44e:	88 d1                	mov    cl,dl
c001b450:	31 d2                	xor    edx,edx
c001b452:	f7 f5                	div    ebp
c001b454:	89 dd                	mov    ebp,ebx
c001b456:	88 d5                	mov    ch,dl
c001b458:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001b45e:	0f b7 c1             	movzx  eax,cx
c001b461:	31 d2                	xor    edx,edx
c001b463:	09 f8                	or     eax,edi
c001b465:	bf 3c 00 00 00       	mov    edi,0x3c
c001b46a:	89 c1                	mov    ecx,eax
c001b46c:	89 f0                	mov    eax,esi
c001b46e:	f7 f7                	div    edi
c001b470:	c1 e2 10             	shl    edx,0x10
c001b473:	09 d5                	or     ebp,edx
c001b475:	31 d2                	xor    edx,edx
c001b477:	89 eb                	mov    ebx,ebp
c001b479:	f7 f7                	div    edi
c001b47b:	bf 10 0e 00 00       	mov    edi,0xe10
c001b480:	88 d7                	mov    bh,dl
c001b482:	89 f0                	mov    eax,esi
c001b484:	31 d2                	xor    edx,edx
c001b486:	f7 f7                	div    edi
c001b488:	bf 18 00 00 00       	mov    edi,0x18
c001b48d:	31 d2                	xor    edx,edx
c001b48f:	f7 f7                	div    edi
c001b491:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001b496:	88 d3                	mov    bl,dl
c001b498:	53                   	push   ebx
c001b499:	51                   	push   ecx
c001b49a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b4a0:	e8 35 86 ff ff       	call   c0013ada <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b4a5:	83 c4 1c             	add    esp,0x1c
c001b4a8:	83 f0 01             	xor    eax,0x1
c001b4ab:	5b                   	pop    ebx
c001b4ac:	0f b6 c0             	movzx  eax,al
c001b4af:	5e                   	pop    esi
c001b4b0:	31 d2                	xor    edx,edx
c001b4b2:	5f                   	pop    edi
c001b4b3:	5d                   	pop    ebp
c001b4b4:	c3                   	ret    

c001b4b5 <Sys::timezone(regs*)>:
c001b4b5:	53                   	push   ebx
c001b4b6:	83 ec 08             	sub    esp,0x8
c001b4b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b4bd:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b4c1:	75 17                	jne    c001b4da <Sys::timezone(regs*)+0x25>
c001b4c3:	83 ec 0c             	sub    esp,0xc
c001b4c6:	68 99 c4 02 c0       	push   0xc002c499
c001b4cb:	e8 f1 74 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001b4d0:	83 c8 ff             	or     eax,0xffffffff
c001b4d3:	83 c4 10             	add    esp,0x10
c001b4d6:	89 c2                	mov    edx,eax
c001b4d8:	eb 20                	jmp    c001b4fa <Sys::timezone(regs*)+0x45>
c001b4da:	83 ec 0c             	sub    esp,0xc
c001b4dd:	68 ae c4 02 c0       	push   0xc002c4ae
c001b4e2:	e8 da 74 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001b4e7:	58                   	pop    eax
c001b4e8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b4eb:	e8 4c 83 ff ff       	call   c001383c <User::loadClockSettings(int)>
c001b4f0:	83 c4 10             	add    esp,0x10
c001b4f3:	b8 01 00 00 00       	mov    eax,0x1
c001b4f8:	31 d2                	xor    edx,edx
c001b4fa:	83 c4 08             	add    esp,0x8
c001b4fd:	5b                   	pop    ebx
c001b4fe:	c3                   	ret    

c001b4ff <Sys::write(regs*)>:
c001b4ff:	57                   	push   edi
c001b500:	56                   	push   esi
c001b501:	53                   	push   ebx
c001b502:	83 ec 10             	sub    esp,0x10
c001b505:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b509:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b50c:	83 f8 02             	cmp    eax,0x2
c001b50f:	77 10                	ja     c001b521 <Sys::write(regs*)+0x22>
c001b511:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b516:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b519:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b51f:	eb 0e                	jmp    c001b52f <Sys::write(regs*)+0x30>
c001b521:	83 ec 0c             	sub    esp,0xc
c001b524:	50                   	push   eax
c001b525:	e8 6f 5f ff ff       	call   c0011499 <getFromFileDescriptor(int)>
c001b52a:	83 c4 10             	add    esp,0x10
c001b52d:	89 c1                	mov    ecx,eax
c001b52f:	83 c8 ff             	or     eax,0xffffffff
c001b532:	85 c9                	test   ecx,ecx
c001b534:	89 c2                	mov    edx,eax
c001b536:	74 28                	je     c001b560 <Sys::write(regs*)+0x61>
c001b538:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b540:	31 ff                	xor    edi,edi
c001b542:	83 ec 0c             	sub    esp,0xc
c001b545:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b547:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b54b:	52                   	push   edx
c001b54c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b54f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b552:	57                   	push   edi
c001b553:	56                   	push   esi
c001b554:	51                   	push   ecx
c001b555:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b558:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b55c:	83 c4 20             	add    esp,0x20
c001b55f:	99                   	cdq    
c001b560:	83 c4 10             	add    esp,0x10
c001b563:	5b                   	pop    ebx
c001b564:	5e                   	pop    esi
c001b565:	5f                   	pop    edi
c001b566:	c3                   	ret    

c001b567 <Sys::wsbe(regs*)>:
c001b567:	57                   	push   edi
c001b568:	b9 0b 00 00 00       	mov    ecx,0xb
c001b56d:	56                   	push   esi
c001b56e:	be ed c4 02 c0       	mov    esi,0xc002c4ed
c001b573:	53                   	push   ebx
c001b574:	83 ec 30             	sub    esp,0x30
c001b577:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b57b:	fc                   	cld    
c001b57c:	83 ec 0c             	sub    esp,0xc
c001b57f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b581:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b585:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b58a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b58d:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b593:	8b 06                	mov    eax,DWORD PTR [esi]
c001b595:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b598:	57                   	push   edi
c001b599:	e8 ce 51 fe ff       	call   c000076c <strlen>
c001b59e:	5a                   	pop    edx
c001b59f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b5a3:	52                   	push   edx
c001b5a4:	31 d2                	xor    edx,edx
c001b5a6:	57                   	push   edi
c001b5a7:	52                   	push   edx
c001b5a8:	50                   	push   eax
c001b5a9:	56                   	push   esi
c001b5aa:	ff d3                	call   ebx
c001b5ac:	83 c4 14             	add    esp,0x14
c001b5af:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b5b3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b5b6:	e8 e5 31 00 00       	call   c001e7a0 <terminateTask(int)>
c001b5bb:	83 c4 40             	add    esp,0x40
c001b5be:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b5c3:	5b                   	pop    ebx
c001b5c4:	31 d2                	xor    edx,edx
c001b5c6:	5e                   	pop    esi
c001b5c7:	5f                   	pop    edi
c001b5c8:	c3                   	ret    

c001b5c9 <Sys::yield(regs*)>:
c001b5c9:	57                   	push   edi
c001b5ca:	56                   	push   esi
c001b5cb:	53                   	push   ebx
c001b5cc:	fa                   	cli    
c001b5cd:	ff 05 08 fb 02 c0    	inc    DWORD PTR ds:0xc002fb08
c001b5d3:	e8 19 29 00 00       	call   c001def1 <schedule()>
c001b5d8:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001b5dd:	48                   	dec    eax
c001b5de:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001b5e3:	75 01                	jne    c001b5e6 <Sys::yield(regs*)+0x1d>
c001b5e5:	fb                   	sti    
c001b5e6:	8b 35 70 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002ec70
c001b5ec:	8b 3d 74 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec74
c001b5f2:	89 f0                	mov    eax,esi
c001b5f4:	89 fb                	mov    ebx,edi
c001b5f6:	89 f1                	mov    ecx,esi
c001b5f8:	c1 e0 07             	shl    eax,0x7
c001b5fb:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b5ff:	25 80 30 0f 00       	and    eax,0xf3080
c001b604:	c1 eb 17             	shr    ebx,0x17
c001b607:	31 c8                	xor    eax,ecx
c001b609:	89 da                	mov    edx,ebx
c001b60b:	5b                   	pop    ebx
c001b60c:	5e                   	pop    esi
c001b60d:	5f                   	pop    edi
c001b60e:	c3                   	ret    

c001b60f <sysCallSeekDir(regs*)>:
c001b60f:	31 c0                	xor    eax,eax
c001b611:	31 d2                	xor    edx,edx
c001b613:	c3                   	ret    

c001b614 <sysCallTellDir(regs*)>:
c001b614:	31 c0                	xor    eax,eax
c001b616:	31 d2                	xor    edx,edx
c001b618:	c3                   	ret    

c001b619 <sysCallVerify(regs*)>:
c001b619:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b61d:	31 d2                	xor    edx,edx
c001b61f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b622:	c3                   	ret    

c001b623 <sysCallGetArgc(regs*)>:
c001b623:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b628:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b62b:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b631:	99                   	cdq    
c001b632:	c3                   	ret    

c001b633 <sysFormatDisk(regs*)>:
c001b633:	56                   	push   esi
c001b634:	53                   	push   ebx
c001b635:	53                   	push   ebx
c001b636:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b63a:	8b 1d 74 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e774
c001b640:	eb 25                	jmp    c001b667 <sysFormatDisk(regs*)+0x34>
c001b642:	83 ec 0c             	sub    esp,0xc
c001b645:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b648:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b64a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b64d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b650:	50                   	push   eax
c001b651:	ff 34 85 00 ec 02 c0 	push   DWORD PTR [eax*4-0x3ffd1400]
c001b658:	53                   	push   ebx
c001b659:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b65c:	83 c4 20             	add    esp,0x20
c001b65f:	83 f8 08             	cmp    eax,0x8
c001b662:	75 12                	jne    c001b676 <sysFormatDisk(regs*)+0x43>
c001b664:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b667:	85 db                	test   ebx,ebx
c001b669:	75 d7                	jne    c001b642 <sysFormatDisk(regs*)+0xf>
c001b66b:	59                   	pop    ecx
c001b66c:	b8 03 00 00 00       	mov    eax,0x3
c001b671:	31 d2                	xor    edx,edx
c001b673:	5b                   	pop    ebx
c001b674:	5e                   	pop    esi
c001b675:	c3                   	ret    
c001b676:	85 c0                	test   eax,eax
c001b678:	74 1b                	je     c001b695 <sysFormatDisk(regs*)+0x62>
c001b67a:	83 f8 09             	cmp    eax,0x9
c001b67d:	74 0b                	je     c001b68a <sysFormatDisk(regs*)+0x57>
c001b67f:	59                   	pop    ecx
c001b680:	b8 02 00 00 00       	mov    eax,0x2
c001b685:	31 d2                	xor    edx,edx
c001b687:	5b                   	pop    ebx
c001b688:	5e                   	pop    esi
c001b689:	c3                   	ret    
c001b68a:	59                   	pop    ecx
c001b68b:	b8 01 00 00 00       	mov    eax,0x1
c001b690:	31 d2                	xor    edx,edx
c001b692:	5b                   	pop    ebx
c001b693:	5e                   	pop    esi
c001b694:	c3                   	ret    
c001b695:	59                   	pop    ecx
c001b696:	31 c0                	xor    eax,eax
c001b698:	31 d2                	xor    edx,edx
c001b69a:	5b                   	pop    ebx
c001b69b:	5e                   	pop    esi
c001b69c:	c3                   	ret    

c001b69d <sysSetDiskVolumeLabel(regs*)>:
c001b69d:	56                   	push   esi
c001b69e:	53                   	push   ebx
c001b69f:	53                   	push   ebx
c001b6a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b6a4:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b6a7:	83 f8 19             	cmp    eax,0x19
c001b6aa:	77 29                	ja     c001b6d5 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6ac:	8b 0c 85 00 ec 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1400]
c001b6b3:	85 c9                	test   ecx,ecx
c001b6b5:	74 1e                	je     c001b6d5 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6b7:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b6ba:	85 d2                	test   edx,edx
c001b6bc:	74 17                	je     c001b6d5 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6be:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b6c4:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b6c6:	52                   	push   edx
c001b6c7:	50                   	push   eax
c001b6c8:	51                   	push   ecx
c001b6c9:	53                   	push   ebx
c001b6ca:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b6cd:	83 c4 10             	add    esp,0x10
c001b6d0:	99                   	cdq    
c001b6d1:	59                   	pop    ecx
c001b6d2:	5b                   	pop    ebx
c001b6d3:	5e                   	pop    esi
c001b6d4:	c3                   	ret    
c001b6d5:	59                   	pop    ecx
c001b6d6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b6db:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6e0:	5b                   	pop    ebx
c001b6e1:	5e                   	pop    esi
c001b6e2:	c3                   	ret    

c001b6e3 <sysGetDiskVolumeLabel(regs*)>:
c001b6e3:	57                   	push   edi
c001b6e4:	56                   	push   esi
c001b6e5:	53                   	push   ebx
c001b6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6ea:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b6ed:	83 fa 19             	cmp    edx,0x19
c001b6f0:	77 34                	ja     c001b726 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b6f2:	8b 0c 95 00 ec 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1400]
c001b6f9:	85 c9                	test   ecx,ecx
c001b6fb:	74 29                	je     c001b726 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b6fd:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b700:	85 db                	test   ebx,ebx
c001b702:	74 22                	je     c001b726 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b704:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b707:	85 c0                	test   eax,eax
c001b709:	74 1b                	je     c001b726 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b70b:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b711:	83 ec 0c             	sub    esp,0xc
c001b714:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b716:	50                   	push   eax
c001b717:	53                   	push   ebx
c001b718:	52                   	push   edx
c001b719:	51                   	push   ecx
c001b71a:	56                   	push   esi
c001b71b:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b71e:	83 c4 20             	add    esp,0x20
c001b721:	99                   	cdq    
c001b722:	5b                   	pop    ebx
c001b723:	5e                   	pop    esi
c001b724:	5f                   	pop    edi
c001b725:	c3                   	ret    
c001b726:	5b                   	pop    ebx
c001b727:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b72c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b731:	5e                   	pop    esi
c001b732:	5f                   	pop    edi
c001b733:	c3                   	ret    

c001b734 <sysShutdown(regs*)>:
c001b734:	83 ec 0c             	sub    esp,0xc
c001b737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b73b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b73e:	85 c0                	test   eax,eax
c001b740:	74 18                	je     c001b75a <sysShutdown(regs*)+0x26>
c001b742:	83 f8 01             	cmp    eax,0x1
c001b745:	74 38                	je     c001b77f <sysShutdown(regs*)+0x4b>
c001b747:	83 f8 02             	cmp    eax,0x2
c001b74a:	74 24                	je     c001b770 <sysShutdown(regs*)+0x3c>
c001b74c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b751:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b756:	83 c4 0c             	add    esp,0xc
c001b759:	c3                   	ret    
c001b75a:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001b75f:	8b 10                	mov    edx,DWORD PTR [eax]
c001b761:	6a 00                	push   0x0
c001b763:	6a 00                	push   0x0
c001b765:	6a 00                	push   0x0
c001b767:	50                   	push   eax
c001b768:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b76b:	83 c4 10             	add    esp,0x10
c001b76e:	eb dc                	jmp    c001b74c <sysShutdown(regs*)+0x18>
c001b770:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001b775:	8b 10                	mov    edx,DWORD PTR [eax]
c001b777:	6a 00                	push   0x0
c001b779:	6a 00                	push   0x0
c001b77b:	6a 01                	push   0x1
c001b77d:	eb e8                	jmp    c001b767 <sysShutdown(regs*)+0x33>
c001b77f:	a1 80 ec 02 c0       	mov    eax,ds:0xc002ec80
c001b784:	85 c0                	test   eax,eax
c001b786:	74 02                	je     c001b78a <sysShutdown(regs*)+0x56>
c001b788:	ff d0                	call   eax
c001b78a:	31 c0                	xor    eax,eax
c001b78c:	31 d2                	xor    edx,edx
c001b78e:	83 c4 0c             	add    esp,0xc
c001b791:	c3                   	ret    

c001b792 <sysCallRealpath(regs*)>:
c001b792:	83 ec 0c             	sub    esp,0xc
c001b795:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b799:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b79c:	85 d2                	test   edx,edx
c001b79e:	74 07                	je     c001b7a7 <sysCallRealpath(regs*)+0x15>
c001b7a0:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b7a3:	85 c0                	test   eax,eax
c001b7a5:	75 0b                	jne    c001b7b2 <sysCallRealpath(regs*)+0x20>
c001b7a7:	b8 01 00 00 00       	mov    eax,0x1
c001b7ac:	31 d2                	xor    edx,edx
c001b7ae:	83 c4 0c             	add    esp,0xc
c001b7b1:	c3                   	ret    
c001b7b2:	51                   	push   ecx
c001b7b3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b7b9:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b7bc:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b7c2:	51                   	push   ecx
c001b7c3:	52                   	push   edx
c001b7c4:	50                   	push   eax
c001b7c5:	e8 ac 75 ff ff       	call   c0012d76 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b7ca:	83 c4 10             	add    esp,0x10
c001b7cd:	31 c0                	xor    eax,eax
c001b7cf:	31 d2                	xor    edx,edx
c001b7d1:	83 c4 0c             	add    esp,0xc
c001b7d4:	c3                   	ret    

c001b7d5 <sysCallReadDir(regs*)>:
c001b7d5:	53                   	push   ebx
c001b7d6:	83 ec 18             	sub    esp,0x18
c001b7d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b7dd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b7e0:	83 f8 02             	cmp    eax,0x2
c001b7e3:	76 60                	jbe    c001b845 <sysCallReadDir(regs*)+0x70>
c001b7e5:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b7ec:	77 48                	ja     c001b836 <sysCallReadDir(regs*)+0x61>
c001b7ee:	83 ec 0c             	sub    esp,0xc
c001b7f1:	50                   	push   eax
c001b7f2:	e8 a2 5c ff ff       	call   c0011499 <getFromFileDescriptor(int)>
c001b7f7:	83 c4 10             	add    esp,0x10
c001b7fa:	85 c0                	test   eax,eax
c001b7fc:	74 38                	je     c001b836 <sysCallReadDir(regs*)+0x61>
c001b7fe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b806:	83 ec 0c             	sub    esp,0xc
c001b809:	8b 10                	mov    edx,DWORD PTR [eax]
c001b80b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b80f:	51                   	push   ecx
c001b810:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b813:	6a 00                	push   0x0
c001b815:	68 10 01 00 00       	push   0x110
c001b81a:	50                   	push   eax
c001b81b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b81e:	83 c4 20             	add    esp,0x20
c001b821:	85 c0                	test   eax,eax
c001b823:	74 29                	je     c001b84e <sysCallReadDir(regs*)+0x79>
c001b825:	83 f8 07             	cmp    eax,0x7
c001b828:	74 1b                	je     c001b845 <sysCallReadDir(regs*)+0x70>
c001b82a:	b8 02 00 00 00       	mov    eax,0x2
c001b82f:	31 d2                	xor    edx,edx
c001b831:	83 c4 18             	add    esp,0x18
c001b834:	5b                   	pop    ebx
c001b835:	c3                   	ret    
c001b836:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b83b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b840:	83 c4 18             	add    esp,0x18
c001b843:	5b                   	pop    ebx
c001b844:	c3                   	ret    
c001b845:	b8 01 00 00 00       	mov    eax,0x1
c001b84a:	31 d2                	xor    edx,edx
c001b84c:	eb e3                	jmp    c001b831 <sysCallReadDir(regs*)+0x5c>
c001b84e:	31 c0                	xor    eax,eax
c001b850:	31 d2                	xor    edx,edx
c001b852:	eb dd                	jmp    c001b831 <sysCallReadDir(regs*)+0x5c>

c001b854 <sysCallIsATTY(regs*)>:
c001b854:	83 ec 0c             	sub    esp,0xc
c001b857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b85b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b85e:	83 f8 02             	cmp    eax,0x2
c001b861:	76 07                	jbe    c001b86a <sysCallIsATTY(regs*)+0x16>
c001b863:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b868:	75 26                	jne    c001b890 <sysCallIsATTY(regs*)+0x3c>
c001b86a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b86f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b872:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b878:	85 c0                	test   eax,eax
c001b87a:	74 24                	je     c001b8a0 <sysCallIsATTY(regs*)+0x4c>
c001b87c:	83 ec 0c             	sub    esp,0xc
c001b87f:	8b 10                	mov    edx,DWORD PTR [eax]
c001b881:	50                   	push   eax
c001b882:	ff 12                	call   DWORD PTR [edx]
c001b884:	31 d2                	xor    edx,edx
c001b886:	0f b6 c0             	movzx  eax,al
c001b889:	83 c4 10             	add    esp,0x10
c001b88c:	83 c4 0c             	add    esp,0xc
c001b88f:	c3                   	ret    
c001b890:	83 ec 0c             	sub    esp,0xc
c001b893:	50                   	push   eax
c001b894:	e8 00 5c ff ff       	call   c0011499 <getFromFileDescriptor(int)>
c001b899:	83 c4 10             	add    esp,0x10
c001b89c:	85 c0                	test   eax,eax
c001b89e:	75 dc                	jne    c001b87c <sysCallIsATTY(regs*)+0x28>
c001b8a0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8a5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8aa:	83 c4 0c             	add    esp,0xc
c001b8ad:	c3                   	ret    

c001b8ae <sysCallSeek(regs*)>:
c001b8ae:	53                   	push   ebx
c001b8af:	83 ec 08             	sub    esp,0x8
c001b8b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8b6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b8b9:	8d 50 fd             	lea    edx,[eax-0x3]
c001b8bc:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b8c2:	77 32                	ja     c001b8f6 <sysCallSeek(regs*)+0x48>
c001b8c4:	83 ec 0c             	sub    esp,0xc
c001b8c7:	50                   	push   eax
c001b8c8:	e8 cc 5b ff ff       	call   c0011499 <getFromFileDescriptor(int)>
c001b8cd:	83 c4 0c             	add    esp,0xc
c001b8d0:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b8d3:	31 db                	xor    ebx,ebx
c001b8d5:	53                   	push   ebx
c001b8d6:	51                   	push   ecx
c001b8d7:	50                   	push   eax
c001b8d8:	e8 65 77 ff ff       	call   c0013042 <File::seek(unsigned long long)>
c001b8dd:	83 c4 10             	add    esp,0x10
c001b8e0:	85 c0                	test   eax,eax
c001b8e2:	0f 95 c0             	setne  al
c001b8e5:	31 d2                	xor    edx,edx
c001b8e7:	0f b6 c0             	movzx  eax,al
c001b8ea:	f7 d8                	neg    eax
c001b8ec:	83 d2 00             	adc    edx,0x0
c001b8ef:	83 c4 08             	add    esp,0x8
c001b8f2:	f7 da                	neg    edx
c001b8f4:	5b                   	pop    ebx
c001b8f5:	c3                   	ret    
c001b8f6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8fb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b900:	83 c4 08             	add    esp,0x8
c001b903:	5b                   	pop    ebx
c001b904:	c3                   	ret    

c001b905 <sysCallTell(regs*)>:
c001b905:	53                   	push   ebx
c001b906:	83 ec 08             	sub    esp,0x8
c001b909:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b90d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b910:	83 f8 02             	cmp    eax,0x2
c001b913:	76 4d                	jbe    c001b962 <sysCallTell(regs*)+0x5d>
c001b915:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b91a:	76 19                	jbe    c001b935 <sysCallTell(regs*)+0x30>
c001b91c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b91f:	31 d2                	xor    edx,edx
c001b921:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b927:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b92e:	31 c0                	xor    eax,eax
c001b930:	83 c4 08             	add    esp,0x8
c001b933:	5b                   	pop    ebx
c001b934:	c3                   	ret    
c001b935:	83 ec 0c             	sub    esp,0xc
c001b938:	50                   	push   eax
c001b939:	e8 5b 5b ff ff       	call   c0011499 <getFromFileDescriptor(int)>
c001b93e:	5a                   	pop    edx
c001b93f:	59                   	pop    ecx
c001b940:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b943:	50                   	push   eax
c001b944:	e8 4f 77 ff ff       	call   c0013098 <File::tell(unsigned long long*)>
c001b949:	83 c4 10             	add    esp,0x10
c001b94c:	85 c0                	test   eax,eax
c001b94e:	0f 95 c0             	setne  al
c001b951:	31 d2                	xor    edx,edx
c001b953:	0f b6 c0             	movzx  eax,al
c001b956:	f7 d8                	neg    eax
c001b958:	83 d2 00             	adc    edx,0x0
c001b95b:	83 c4 08             	add    esp,0x8
c001b95e:	f7 da                	neg    edx
c001b960:	5b                   	pop    ebx
c001b961:	c3                   	ret    
c001b962:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b967:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b96c:	83 c4 08             	add    esp,0x8
c001b96f:	5b                   	pop    ebx
c001b970:	c3                   	ret    

c001b971 <sysCallSize(regs*)>:
c001b971:	53                   	push   ebx
c001b972:	83 ec 18             	sub    esp,0x18
c001b975:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b979:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b97c:	83 f8 02             	cmp    eax,0x2
c001b97f:	76 53                	jbe    c001b9d4 <sysCallSize(regs*)+0x63>
c001b981:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b986:	76 19                	jbe    c001b9a1 <sysCallSize(regs*)+0x30>
c001b988:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b98b:	31 d2                	xor    edx,edx
c001b98d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b993:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b99a:	31 c0                	xor    eax,eax
c001b99c:	83 c4 18             	add    esp,0x18
c001b99f:	5b                   	pop    ebx
c001b9a0:	c3                   	ret    
c001b9a1:	83 ec 0c             	sub    esp,0xc
c001b9a4:	50                   	push   eax
c001b9a5:	e8 ef 5a ff ff       	call   c0011499 <getFromFileDescriptor(int)>
c001b9aa:	83 c4 0c             	add    esp,0xc
c001b9ad:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b9b1:	52                   	push   edx
c001b9b2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b9b5:	50                   	push   eax
c001b9b6:	e8 75 78 ff ff       	call   c0013230 <File::stat(unsigned long long*, bool*)>
c001b9bb:	83 c4 10             	add    esp,0x10
c001b9be:	85 c0                	test   eax,eax
c001b9c0:	0f 95 c0             	setne  al
c001b9c3:	31 d2                	xor    edx,edx
c001b9c5:	0f b6 c0             	movzx  eax,al
c001b9c8:	f7 d8                	neg    eax
c001b9ca:	83 d2 00             	adc    edx,0x0
c001b9cd:	83 c4 18             	add    esp,0x18
c001b9d0:	f7 da                	neg    edx
c001b9d2:	5b                   	pop    ebx
c001b9d3:	c3                   	ret    
c001b9d4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9d9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9de:	83 c4 18             	add    esp,0x18
c001b9e1:	5b                   	pop    ebx
c001b9e2:	c3                   	ret    

c001b9e3 <sysCallSizeFromFilename(regs*)>:
c001b9e3:	57                   	push   edi
c001b9e4:	56                   	push   esi
c001b9e5:	53                   	push   ebx
c001b9e6:	83 ec 20             	sub    esp,0x20
c001b9e9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b9ed:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b9f0:	83 fb 02             	cmp    ebx,0x2
c001b9f3:	0f 86 88 00 00 00    	jbe    c001ba81 <sysCallSizeFromFilename(regs*)+0x9e>
c001b9f9:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b9ff:	76 1b                	jbe    c001ba1c <sysCallSizeFromFilename(regs*)+0x39>
c001ba01:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001ba04:	31 d2                	xor    edx,edx
c001ba06:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba13:	83 c4 20             	add    esp,0x20
c001ba16:	31 c0                	xor    eax,eax
c001ba18:	5b                   	pop    ebx
c001ba19:	5e                   	pop    esi
c001ba1a:	5f                   	pop    edi
c001ba1b:	c3                   	ret    
c001ba1c:	83 ec 0c             	sub    esp,0xc
c001ba1f:	68 14 01 00 00       	push   0x114
c001ba24:	e8 40 3f ff ff       	call   c000f969 <malloc>
c001ba29:	83 c4 0c             	add    esp,0xc
c001ba2c:	89 c7                	mov    edi,eax
c001ba2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba33:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ba36:	53                   	push   ebx
c001ba37:	57                   	push   edi
c001ba38:	e8 e3 74 ff ff       	call   c0012f20 <File::File(char const*, Process*)>
c001ba3d:	83 c4 0c             	add    esp,0xc
c001ba40:	8d 44 24 23          	lea    eax,[esp+0x23]
c001ba44:	50                   	push   eax
c001ba45:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001ba48:	57                   	push   edi
c001ba49:	e8 e2 77 ff ff       	call   c0013230 <File::stat(unsigned long long*, bool*)>
c001ba4e:	83 c4 10             	add    esp,0x10
c001ba51:	85 ff                	test   edi,edi
c001ba53:	74 14                	je     c001ba69 <sysCallSizeFromFilename(regs*)+0x86>
c001ba55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba59:	8b 17                	mov    edx,DWORD PTR [edi]
c001ba5b:	83 ec 0c             	sub    esp,0xc
c001ba5e:	57                   	push   edi
c001ba5f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ba62:	83 c4 10             	add    esp,0x10
c001ba65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba69:	85 c0                	test   eax,eax
c001ba6b:	0f 95 c0             	setne  al
c001ba6e:	31 d2                	xor    edx,edx
c001ba70:	0f b6 c0             	movzx  eax,al
c001ba73:	f7 d8                	neg    eax
c001ba75:	83 d2 00             	adc    edx,0x0
c001ba78:	83 c4 20             	add    esp,0x20
c001ba7b:	f7 da                	neg    edx
c001ba7d:	5b                   	pop    ebx
c001ba7e:	5e                   	pop    esi
c001ba7f:	5f                   	pop    edi
c001ba80:	c3                   	ret    
c001ba81:	83 c4 20             	add    esp,0x20
c001ba84:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba89:	5b                   	pop    ebx
c001ba8a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba8f:	5e                   	pop    esi
c001ba90:	5f                   	pop    edi
c001ba91:	c3                   	ret    

c001ba92 <sysCallClose(regs*)>:
c001ba92:	53                   	push   ebx
c001ba93:	83 ec 08             	sub    esp,0x8
c001ba96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba9a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ba9d:	83 f8 02             	cmp    eax,0x2
c001baa0:	76 41                	jbe    c001bae3 <sysCallClose(regs*)+0x51>
c001baa2:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001baa8:	83 fa 01             	cmp    edx,0x1
c001baab:	76 2d                	jbe    c001bada <sysCallClose(regs*)+0x48>
c001baad:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bab2:	77 2f                	ja     c001bae3 <sysCallClose(regs*)+0x51>
c001bab4:	83 ec 0c             	sub    esp,0xc
c001bab7:	50                   	push   eax
c001bab8:	e8 dc 59 ff ff       	call   c0011499 <getFromFileDescriptor(int)>
c001babd:	89 c3                	mov    ebx,eax
c001babf:	89 04 24             	mov    DWORD PTR [esp],eax
c001bac2:	e8 1b 75 ff ff       	call   c0012fe2 <File::close()>
c001bac7:	83 c4 10             	add    esp,0x10
c001baca:	85 db                	test   ebx,ebx
c001bacc:	74 0c                	je     c001bada <sysCallClose(regs*)+0x48>
c001bace:	83 ec 0c             	sub    esp,0xc
c001bad1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bad3:	53                   	push   ebx
c001bad4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bad7:	83 c4 10             	add    esp,0x10
c001bada:	31 c0                	xor    eax,eax
c001badc:	31 d2                	xor    edx,edx
c001bade:	83 c4 08             	add    esp,0x8
c001bae1:	5b                   	pop    ebx
c001bae2:	c3                   	ret    
c001bae3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bae8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001baed:	83 c4 08             	add    esp,0x8
c001baf0:	5b                   	pop    ebx
c001baf1:	c3                   	ret    

c001baf2 <sysCallOpenDir(regs*)>:
c001baf2:	56                   	push   esi
c001baf3:	53                   	push   ebx
c001baf4:	53                   	push   ebx
c001baf5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001baf9:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bafc:	85 f6                	test   esi,esi
c001bafe:	74 59                	je     c001bb59 <sysCallOpenDir(regs*)+0x67>
c001bb00:	83 ec 0c             	sub    esp,0xc
c001bb03:	68 14 01 00 00       	push   0x114
c001bb08:	e8 5c 3e ff ff       	call   c000f969 <malloc>
c001bb0d:	83 c4 0c             	add    esp,0xc
c001bb10:	89 c6                	mov    esi,eax
c001bb12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb17:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb1a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb1d:	56                   	push   esi
c001bb1e:	e8 a9 78 ff ff       	call   c00133cc <Directory::Directory(char const*, Process*)>
c001bb23:	83 c4 10             	add    esp,0x10
c001bb26:	85 f6                	test   esi,esi
c001bb28:	74 2f                	je     c001bb59 <sysCallOpenDir(regs*)+0x67>
c001bb2a:	83 ec 0c             	sub    esp,0xc
c001bb2d:	56                   	push   esi
c001bb2e:	e8 fd 78 ff ff       	call   c0013430 <Directory::open()>
c001bb33:	83 c4 10             	add    esp,0x10
c001bb36:	85 c0                	test   eax,eax
c001bb38:	75 1f                	jne    c001bb59 <sysCallOpenDir(regs*)+0x67>
c001bb3a:	83 ec 0c             	sub    esp,0xc
c001bb3d:	56                   	push   esi
c001bb3e:	e8 61 56 ff ff       	call   c00111a4 <UnixFile::getFileDescriptor()>
c001bb43:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bb46:	83 c4 10             	add    esp,0x10
c001bb49:	89 02                	mov    DWORD PTR [edx],eax
c001bb4b:	c1 f8 1f             	sar    eax,0x1f
c001bb4e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bb51:	31 c0                	xor    eax,eax
c001bb53:	59                   	pop    ecx
c001bb54:	31 d2                	xor    edx,edx
c001bb56:	5b                   	pop    ebx
c001bb57:	5e                   	pop    esi
c001bb58:	c3                   	ret    
c001bb59:	59                   	pop    ecx
c001bb5a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb5f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb64:	5b                   	pop    ebx
c001bb65:	5e                   	pop    esi
c001bb66:	c3                   	ret    

c001bb67 <sysCallCloseDir(regs*)>:
c001bb67:	53                   	push   ebx
c001bb68:	83 ec 08             	sub    esp,0x8
c001bb6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb6f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb72:	8d 50 fd             	lea    edx,[eax-0x3]
c001bb75:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001bb7b:	77 2f                	ja     c001bbac <sysCallCloseDir(regs*)+0x45>
c001bb7d:	83 ec 0c             	sub    esp,0xc
c001bb80:	50                   	push   eax
c001bb81:	e8 13 59 ff ff       	call   c0011499 <getFromFileDescriptor(int)>
c001bb86:	89 c3                	mov    ebx,eax
c001bb88:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb8b:	e8 fc 78 ff ff       	call   c001348c <Directory::close()>
c001bb90:	83 c4 10             	add    esp,0x10
c001bb93:	85 db                	test   ebx,ebx
c001bb95:	74 0c                	je     c001bba3 <sysCallCloseDir(regs*)+0x3c>
c001bb97:	83 ec 0c             	sub    esp,0xc
c001bb9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb9c:	53                   	push   ebx
c001bb9d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bba0:	83 c4 10             	add    esp,0x10
c001bba3:	31 c0                	xor    eax,eax
c001bba5:	31 d2                	xor    edx,edx
c001bba7:	83 c4 08             	add    esp,0x8
c001bbaa:	5b                   	pop    ebx
c001bbab:	c3                   	ret    
c001bbac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbb1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbb6:	83 c4 08             	add    esp,0x8
c001bbb9:	5b                   	pop    ebx
c001bbba:	c3                   	ret    

c001bbbb <sysCallMakeDir(regs*)>:
c001bbbb:	56                   	push   esi
c001bbbc:	53                   	push   ebx
c001bbbd:	83 ec 10             	sub    esp,0x10
c001bbc0:	68 14 01 00 00       	push   0x114
c001bbc5:	e8 9f 3d ff ff       	call   c000f969 <malloc>
c001bbca:	83 c4 0c             	add    esp,0xc
c001bbcd:	89 c3                	mov    ebx,eax
c001bbcf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbd4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bbd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bbdb:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bbde:	53                   	push   ebx
c001bbdf:	e8 e8 77 ff ff       	call   c00133cc <Directory::Directory(char const*, Process*)>
c001bbe4:	83 c4 10             	add    esp,0x10
c001bbe7:	85 db                	test   ebx,ebx
c001bbe9:	74 32                	je     c001bc1d <sysCallMakeDir(regs*)+0x62>
c001bbeb:	83 ec 0c             	sub    esp,0xc
c001bbee:	53                   	push   ebx
c001bbef:	e8 1c 7a ff ff       	call   c0013610 <Directory::create()>
c001bbf4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbf7:	89 c6                	mov    esi,eax
c001bbf9:	e8 8e 78 ff ff       	call   c001348c <Directory::close()>
c001bbfe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc03:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc06:	83 c4 10             	add    esp,0x10
c001bc09:	31 c0                	xor    eax,eax
c001bc0b:	59                   	pop    ecx
c001bc0c:	85 f6                	test   esi,esi
c001bc0e:	5b                   	pop    ebx
c001bc0f:	0f 95 c0             	setne  al
c001bc12:	5e                   	pop    esi
c001bc13:	31 d2                	xor    edx,edx
c001bc15:	f7 d8                	neg    eax
c001bc17:	83 d2 00             	adc    edx,0x0
c001bc1a:	f7 da                	neg    edx
c001bc1c:	c3                   	ret    
c001bc1d:	59                   	pop    ecx
c001bc1e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc23:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc28:	5b                   	pop    ebx
c001bc29:	5e                   	pop    esi
c001bc2a:	c3                   	ret    

c001bc2b <sysCallWait(regs*)>:
c001bc2b:	83 ec 10             	sub    esp,0x10
c001bc2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bc32:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bc35:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc38:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bc3b:	e8 b4 24 00 00       	call   c001e0f4 <waitTask(int, int*, int)>
c001bc40:	83 c4 1c             	add    esp,0x1c
c001bc43:	99                   	cdq    
c001bc44:	c3                   	ret    

c001bc45 <sysCallNotImpl(regs*)>:
c001bc45:	83 ec 18             	sub    esp,0x18
c001bc48:	68 19 c5 02 c0       	push   0xc002c519
c001bc4d:	e8 0d e7 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c001bc52:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc57:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc5c:	83 c4 1c             	add    esp,0x1c
c001bc5f:	c3                   	ret    

c001bc60 <sysPanic(regs*)>:
c001bc60:	83 ec 18             	sub    esp,0x18
c001bc63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc67:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc6a:	e8 f0 e6 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c001bc6f:	b8 01 00 00 00       	mov    eax,0x1
c001bc74:	31 d2                	xor    edx,edx
c001bc76:	83 c4 1c             	add    esp,0x1c
c001bc79:	c3                   	ret    

c001bc7a <sysCallRmdir(regs*)>:
c001bc7a:	56                   	push   esi
c001bc7b:	53                   	push   ebx
c001bc7c:	83 ec 20             	sub    esp,0x20
c001bc7f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bc83:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bc86:	68 14 01 00 00       	push   0x114
c001bc8b:	e8 d9 3c ff ff       	call   c000f969 <malloc>
c001bc90:	83 c4 0c             	add    esp,0xc
c001bc93:	89 c3                	mov    ebx,eax
c001bc95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc9a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc9d:	56                   	push   esi
c001bc9e:	53                   	push   ebx
c001bc9f:	e8 7c 72 ff ff       	call   c0012f20 <File::File(char const*, Process*)>
c001bca4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bca7:	e8 50 74 ff ff       	call   c00130fc <File::unlink()>
c001bcac:	83 c4 10             	add    esp,0x10
c001bcaf:	85 db                	test   ebx,ebx
c001bcb1:	74 14                	je     c001bcc7 <sysCallRmdir(regs*)+0x4d>
c001bcb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bcb7:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bcb9:	83 ec 0c             	sub    esp,0xc
c001bcbc:	53                   	push   ebx
c001bcbd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bcc0:	83 c4 10             	add    esp,0x10
c001bcc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bcc7:	85 c0                	test   eax,eax
c001bcc9:	0f 95 c0             	setne  al
c001bccc:	31 d2                	xor    edx,edx
c001bcce:	0f b6 c0             	movzx  eax,al
c001bcd1:	f7 d8                	neg    eax
c001bcd3:	83 d2 00             	adc    edx,0x0
c001bcd6:	83 c4 14             	add    esp,0x14
c001bcd9:	f7 da                	neg    edx
c001bcdb:	5b                   	pop    ebx
c001bcdc:	5e                   	pop    esi
c001bcdd:	c3                   	ret    

c001bcde <sysCallUnlink(regs*)>:
c001bcde:	56                   	push   esi
c001bcdf:	53                   	push   ebx
c001bce0:	83 ec 20             	sub    esp,0x20
c001bce3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bce7:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bcea:	68 14 01 00 00       	push   0x114
c001bcef:	e8 75 3c ff ff       	call   c000f969 <malloc>
c001bcf4:	83 c4 0c             	add    esp,0xc
c001bcf7:	89 c3                	mov    ebx,eax
c001bcf9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcfe:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd01:	56                   	push   esi
c001bd02:	53                   	push   ebx
c001bd03:	e8 18 72 ff ff       	call   c0012f20 <File::File(char const*, Process*)>
c001bd08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd0b:	e8 ec 73 ff ff       	call   c00130fc <File::unlink()>
c001bd10:	83 c4 10             	add    esp,0x10
c001bd13:	85 db                	test   ebx,ebx
c001bd15:	74 14                	je     c001bd2b <sysCallUnlink(regs*)+0x4d>
c001bd17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd1b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bd1d:	83 ec 0c             	sub    esp,0xc
c001bd20:	53                   	push   ebx
c001bd21:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bd24:	83 c4 10             	add    esp,0x10
c001bd27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd2b:	85 c0                	test   eax,eax
c001bd2d:	0f 95 c0             	setne  al
c001bd30:	31 d2                	xor    edx,edx
c001bd32:	0f b6 c0             	movzx  eax,al
c001bd35:	f7 d8                	neg    eax
c001bd37:	83 d2 00             	adc    edx,0x0
c001bd3a:	83 c4 14             	add    esp,0x14
c001bd3d:	f7 da                	neg    edx
c001bd3f:	5b                   	pop    ebx
c001bd40:	5e                   	pop    esi
c001bd41:	c3                   	ret    

c001bd42 <sysCallGetArgv(regs*)>:
c001bd42:	83 ec 0c             	sub    esp,0xc
c001bd45:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bd49:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bd4c:	85 c0                	test   eax,eax
c001bd4e:	78 2b                	js     c001bd7b <sysCallGetArgv(regs*)+0x39>
c001bd50:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bd56:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bd59:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bd5f:	7d 1a                	jge    c001bd7b <sysCallGetArgv(regs*)+0x39>
c001bd61:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bd68:	85 c0                	test   eax,eax
c001bd6a:	74 17                	je     c001bd83 <sysCallGetArgv(regs*)+0x41>
c001bd6c:	83 ec 08             	sub    esp,0x8
c001bd6f:	50                   	push   eax
c001bd70:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bd73:	e8 94 4a fe ff       	call   c000080c <strcpy>
c001bd78:	83 c4 10             	add    esp,0x10
c001bd7b:	31 c0                	xor    eax,eax
c001bd7d:	31 d2                	xor    edx,edx
c001bd7f:	83 c4 0c             	add    esp,0xc
c001bd82:	c3                   	ret    
c001bd83:	b8 01 00 00 00       	mov    eax,0x1
c001bd88:	31 d2                	xor    edx,edx
c001bd8a:	83 c4 0c             	add    esp,0xc
c001bd8d:	c3                   	ret    

c001bd8e <sysCallTTYName(regs*)>:
c001bd8e:	56                   	push   esi
c001bd8f:	53                   	push   ebx
c001bd90:	53                   	push   ebx
c001bd91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bd95:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bd98:	85 c0                	test   eax,eax
c001bd9a:	74 5f                	je     c001bdfb <sysCallTTYName(regs*)+0x6d>
c001bd9c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bd9f:	83 f8 02             	cmp    eax,0x2
c001bda2:	77 3e                	ja     c001bde2 <sysCallTTYName(regs*)+0x54>
c001bda4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bda9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bdac:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bdb2:	85 db                	test   ebx,ebx
c001bdb4:	74 45                	je     c001bdfb <sysCallTTYName(regs*)+0x6d>
c001bdb6:	83 ec 0c             	sub    esp,0xc
c001bdb9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bdbb:	53                   	push   ebx
c001bdbc:	ff 10                	call   DWORD PTR [eax]
c001bdbe:	83 c4 10             	add    esp,0x10
c001bdc1:	84 c0                	test   al,al
c001bdc3:	74 41                	je     c001be06 <sysCallTTYName(regs*)+0x78>
c001bdc5:	83 ec 08             	sub    esp,0x8
c001bdc8:	81 c3 82 00 00 00    	add    ebx,0x82
c001bdce:	53                   	push   ebx
c001bdcf:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bdd2:	e8 35 4a fe ff       	call   c000080c <strcpy>
c001bdd7:	83 c4 10             	add    esp,0x10
c001bdda:	31 c0                	xor    eax,eax
c001bddc:	59                   	pop    ecx
c001bddd:	31 d2                	xor    edx,edx
c001bddf:	5b                   	pop    ebx
c001bde0:	5e                   	pop    esi
c001bde1:	c3                   	ret    
c001bde2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bde7:	74 bb                	je     c001bda4 <sysCallTTYName(regs*)+0x16>
c001bde9:	83 ec 0c             	sub    esp,0xc
c001bdec:	50                   	push   eax
c001bded:	e8 a7 56 ff ff       	call   c0011499 <getFromFileDescriptor(int)>
c001bdf2:	83 c4 10             	add    esp,0x10
c001bdf5:	89 c3                	mov    ebx,eax
c001bdf7:	85 db                	test   ebx,ebx
c001bdf9:	75 bb                	jne    c001bdb6 <sysCallTTYName(regs*)+0x28>
c001bdfb:	59                   	pop    ecx
c001bdfc:	b8 01 00 00 00       	mov    eax,0x1
c001be01:	31 d2                	xor    edx,edx
c001be03:	5b                   	pop    ebx
c001be04:	5e                   	pop    esi
c001be05:	c3                   	ret    
c001be06:	59                   	pop    ecx
c001be07:	b8 02 00 00 00       	mov    eax,0x2
c001be0c:	31 d2                	xor    edx,edx
c001be0e:	5b                   	pop    ebx
c001be0f:	5e                   	pop    esi
c001be10:	c3                   	ret    

c001be11 <sysCallUSleep(regs*)>:
c001be11:	83 ec 14             	sub    esp,0x14
c001be14:	b8 e8 03 00 00       	mov    eax,0x3e8
c001be19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001be1d:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001be24:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001be27:	01 ca                	add    edx,ecx
c001be29:	52                   	push   edx
c001be2a:	50                   	push   eax
c001be2b:	e8 9b 23 00 00       	call   c001e1cb <nanoSleep(unsigned long long)>
c001be30:	31 c0                	xor    eax,eax
c001be32:	31 d2                	xor    edx,edx
c001be34:	83 c4 1c             	add    esp,0x1c
c001be37:	c3                   	ret    

c001be38 <sysCallSpawn(regs*)>:
c001be38:	56                   	push   esi
c001be39:	53                   	push   ebx
c001be3a:	50                   	push   eax
c001be3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001be3f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001be42:	85 c0                	test   eax,eax
c001be44:	75 08                	jne    c001be4e <sysCallSpawn(regs*)+0x16>
c001be46:	59                   	pop    ecx
c001be47:	31 c0                	xor    eax,eax
c001be49:	31 d2                	xor    edx,edx
c001be4b:	5b                   	pop    ebx
c001be4c:	5e                   	pop    esi
c001be4d:	c3                   	ret    
c001be4e:	83 ec 0c             	sub    esp,0xc
c001be51:	68 3f 07 00 00       	push   0x73f
c001be56:	e8 0e 3b ff ff       	call   c000f969 <malloc>
c001be5b:	83 c4 10             	add    esp,0x10
c001be5e:	89 c6                	mov    esi,eax
c001be60:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001be63:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001be66:	85 c0                	test   eax,eax
c001be68:	75 32                	jne    c001be9c <sysCallSpawn(regs*)+0x64>
c001be6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be6f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be72:	52                   	push   edx
c001be73:	50                   	push   eax
c001be74:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be77:	56                   	push   esi
c001be78:	e8 73 1a 00 00       	call   c001d8f0 <Process::Process(char const*, Process*, char**)>
c001be7d:	83 c4 10             	add    esp,0x10
c001be80:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001be87:	75 bd                	jne    c001be46 <sysCallSpawn(regs*)+0xe>
c001be89:	83 ec 0c             	sub    esp,0xc
c001be8c:	56                   	push   esi
c001be8d:	e8 40 1f 00 00       	call   c001ddd2 <Process::createUserThread()>
c001be92:	8b 06                	mov    eax,DWORD PTR [esi]
c001be94:	83 c4 10             	add    esp,0x10
c001be97:	99                   	cdq    
c001be98:	59                   	pop    ecx
c001be99:	5b                   	pop    ebx
c001be9a:	5e                   	pop    esi
c001be9b:	c3                   	ret    
c001be9c:	31 c0                	xor    eax,eax
c001be9e:	eb d2                	jmp    c001be72 <sysCallSpawn(regs*)+0x3a>

c001bea0 <sysCallGetEnv(regs*)>:
c001bea0:	57                   	push   edi
c001bea1:	56                   	push   esi
c001bea2:	53                   	push   ebx
c001bea3:	83 ec 1c             	sub    esp,0x1c
c001bea6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001beaa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001beaf:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001beb2:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001beb5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001beb8:	e8 ee e3 ff ff       	call   c001a2ab <Krnl::getProcessTotalEnvCount(Process*)>
c001bebd:	83 c4 10             	add    esp,0x10
c001bec0:	39 c7                	cmp    edi,eax
c001bec2:	7c 14                	jl     c001bed8 <sysCallGetEnv(regs*)+0x38>
c001bec4:	85 f6                	test   esi,esi
c001bec6:	75 0b                	jne    c001bed3 <sysCallGetEnv(regs*)+0x33>
c001bec8:	83 c4 10             	add    esp,0x10
c001becb:	31 c0                	xor    eax,eax
c001becd:	5b                   	pop    ebx
c001bece:	31 d2                	xor    edx,edx
c001bed0:	5e                   	pop    esi
c001bed1:	5f                   	pop    edi
c001bed2:	c3                   	ret    
c001bed3:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bed6:	eb f0                	jmp    c001bec8 <sysCallGetEnv(regs*)+0x28>
c001bed8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bedc:	52                   	push   edx
c001bedd:	57                   	push   edi
c001bede:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bee4:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001bee7:	50                   	push   eax
c001bee8:	e8 de e3 ff ff       	call   c001a2cb <Krnl::getProcessEnvPair(Process*, int)>
c001beed:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bef0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bef4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bef8:	83 c4 0c             	add    esp,0xc
c001befb:	85 c9                	test   ecx,ecx
c001befd:	75 23                	jne    c001bf22 <sysCallGetEnv(regs*)+0x82>
c001beff:	83 ec 0c             	sub    esp,0xc
c001bf02:	50                   	push   eax
c001bf03:	e8 64 48 fe ff       	call   c000076c <strlen>
c001bf08:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bf0b:	89 c3                	mov    ebx,eax
c001bf0d:	e8 5a 48 fe ff       	call   c000076c <strlen>
c001bf12:	83 c4 10             	add    esp,0x10
c001bf15:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bf19:	83 c4 10             	add    esp,0x10
c001bf1c:	31 d2                	xor    edx,edx
c001bf1e:	5b                   	pop    ebx
c001bf1f:	5e                   	pop    esi
c001bf20:	5f                   	pop    edi
c001bf21:	c3                   	ret    
c001bf22:	83 ec 08             	sub    esp,0x8
c001bf25:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bf28:	50                   	push   eax
c001bf29:	56                   	push   esi
c001bf2a:	e8 dd 48 fe ff       	call   c000080c <strcpy>
c001bf2f:	58                   	pop    eax
c001bf30:	5a                   	pop    edx
c001bf31:	68 33 c5 02 c0       	push   0xc002c533
c001bf36:	56                   	push   esi
c001bf37:	e8 10 4a fe ff       	call   c000094c <strcat>
c001bf3c:	59                   	pop    ecx
c001bf3d:	5b                   	pop    ebx
c001bf3e:	57                   	push   edi
c001bf3f:	56                   	push   esi
c001bf40:	e8 07 4a fe ff       	call   c000094c <strcat>
c001bf45:	83 c4 10             	add    esp,0x10
c001bf48:	e9 7b ff ff ff       	jmp    c001bec8 <sysCallGetEnv(regs*)+0x28>

c001bf4d <sysAppSettings(regs*)>:
c001bf4d:	57                   	push   edi
c001bf4e:	56                   	push   esi
c001bf4f:	56                   	push   esi
c001bf50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf54:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bf57:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001bf5d:	25 e0 1f 00 00       	and    eax,0x1fe0
c001bf62:	66 3d c0 09          	cmp    ax,0x9c0
c001bf66:	75 2e                	jne    c001bf96 <sysAppSettings(regs*)+0x49>
c001bf68:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001bf6e:	83 e0 1f             	and    eax,0x1f
c001bf71:	3c 01                	cmp    al,0x1
c001bf73:	74 2c                	je     c001bfa1 <sysAppSettings(regs*)+0x54>
c001bf75:	3c 07                	cmp    al,0x7
c001bf77:	0f 84 b3 00 00 00    	je     c001c030 <sysAppSettings(regs*)+0xe3>
c001bf7d:	84 c0                	test   al,al
c001bf7f:	0f 84 d2 00 00 00    	je     c001c057 <sysAppSettings(regs*)+0x10a>
c001bf85:	3c 08                	cmp    al,0x8
c001bf87:	74 63                	je     c001bfec <sysAppSettings(regs*)+0x9f>
c001bf89:	59                   	pop    ecx
c001bf8a:	0f b6 c0             	movzx  eax,al
c001bf8d:	5e                   	pop    esi
c001bf8e:	05 e8 03 00 00       	add    eax,0x3e8
c001bf93:	5f                   	pop    edi
c001bf94:	99                   	cdq    
c001bf95:	c3                   	ret    
c001bf96:	b8 01 00 00 00       	mov    eax,0x1
c001bf9b:	59                   	pop    ecx
c001bf9c:	31 d2                	xor    edx,edx
c001bf9e:	5e                   	pop    esi
c001bf9f:	5f                   	pop    edi
c001bfa0:	c3                   	ret    
c001bfa1:	50                   	push   eax
c001bfa2:	68 00 01 00 00       	push   0x100
c001bfa7:	6a 00                	push   0x0
c001bfa9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfae:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bfb1:	83 c0 0c             	add    eax,0xc
c001bfb4:	50                   	push   eax
c001bfb5:	e8 96 47 fe ff       	call   c0000750 <memset>
c001bfba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfbf:	b9 ff 00 00 00       	mov    ecx,0xff
c001bfc4:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001bfc7:	83 c7 0c             	add    edi,0xc
c001bfca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bfcc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfd1:	5a                   	pop    edx
c001bfd2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bfd5:	59                   	pop    ecx
c001bfd6:	8d 50 0c             	lea    edx,[eax+0xc]
c001bfd9:	52                   	push   edx
c001bfda:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bfe0:	e8 dd 45 ff ff       	call   c00105c2 <VgaText::setTitle(char*)>
c001bfe5:	83 c4 10             	add    esp,0x10
c001bfe8:	31 c0                	xor    eax,eax
c001bfea:	eb af                	jmp    c001bf9b <sysAppSettings(regs*)+0x4e>
c001bfec:	83 ec 08             	sub    esp,0x8
c001bfef:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bff5:	83 e0 0f             	and    eax,0xf
c001bff8:	50                   	push   eax
c001bff9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bffe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c001:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c007:	e8 a6 45 ff ff       	call   c00105b2 <VgaText::setTitleColour(VgaColour)>
c001c00c:	5f                   	pop    edi
c001c00d:	58                   	pop    eax
c001c00e:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c014:	c1 e8 04             	shr    eax,0x4
c001c017:	83 e0 0f             	and    eax,0xf
c001c01a:	50                   	push   eax
c001c01b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c020:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c023:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c029:	e8 74 45 ff ff       	call   c00105a2 <VgaText::setTitleTextColour(VgaColour)>
c001c02e:	eb b5                	jmp    c001bfe5 <sysAppSettings(regs*)+0x98>
c001c030:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c035:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c038:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c03e:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001c044:	c0 e8 06             	shr    al,0x6
c001c047:	83 e0 01             	and    eax,0x1
c001c04a:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c050:	31 c0                	xor    eax,eax
c001c052:	e9 44 ff ff ff       	jmp    c001bf9b <sysAppSettings(regs*)+0x4e>
c001c057:	b8 02 00 00 00       	mov    eax,0x2
c001c05c:	e9 3a ff ff ff       	jmp    c001bf9b <sysAppSettings(regs*)+0x4e>

c001c061 <sysSetFatAttrib(regs*)>:
c001c061:	57                   	push   edi
c001c062:	56                   	push   esi
c001c063:	53                   	push   ebx
c001c064:	83 ec 1c             	sub    esp,0x1c
c001c067:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c06b:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c06e:	68 14 01 00 00       	push   0x114
c001c073:	e8 f1 38 ff ff       	call   c000f969 <malloc>
c001c078:	83 c4 0c             	add    esp,0xc
c001c07b:	89 c3                	mov    ebx,eax
c001c07d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c082:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c085:	57                   	push   edi
c001c086:	53                   	push   ebx
c001c087:	e8 94 6e ff ff       	call   c0012f20 <File::File(char const*, Process*)>
c001c08c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c08f:	83 c4 0c             	add    esp,0xc
c001c092:	0f b6 d4             	movzx  edx,ah
c001c095:	0f b6 c0             	movzx  eax,al
c001c098:	52                   	push   edx
c001c099:	50                   	push   eax
c001c09a:	53                   	push   ebx
c001c09b:	e8 f6 70 ff ff       	call   c0013196 <File::chfatattr(unsigned char, unsigned char)>
c001c0a0:	83 c4 10             	add    esp,0x10
c001c0a3:	85 db                	test   ebx,ebx
c001c0a5:	74 14                	je     c001c0bb <sysSetFatAttrib(regs*)+0x5a>
c001c0a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c0ad:	83 ec 0c             	sub    esp,0xc
c001c0b0:	53                   	push   ebx
c001c0b1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c0b4:	83 c4 10             	add    esp,0x10
c001c0b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0bb:	85 c0                	test   eax,eax
c001c0bd:	0f 95 c0             	setne  al
c001c0c0:	31 d2                	xor    edx,edx
c001c0c2:	0f b6 c0             	movzx  eax,al
c001c0c5:	f7 d8                	neg    eax
c001c0c7:	83 d2 00             	adc    edx,0x0
c001c0ca:	83 c4 10             	add    esp,0x10
c001c0cd:	f7 da                	neg    edx
c001c0cf:	5b                   	pop    ebx
c001c0d0:	5e                   	pop    esi
c001c0d1:	5f                   	pop    edi
c001c0d2:	c3                   	ret    

c001c0d3 <sysPipe(regs*)>:
c001c0d3:	57                   	push   edi
c001c0d4:	56                   	push   esi
c001c0d5:	53                   	push   ebx
c001c0d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0da:	83 ec 0c             	sub    esp,0xc
c001c0dd:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c0e0:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c0e3:	6a 20                	push   0x20
c001c0e5:	e8 7f 38 ff ff       	call   c000f969 <malloc>
c001c0ea:	89 c3                	mov    ebx,eax
c001c0ec:	58                   	pop    eax
c001c0ed:	5a                   	pop    edx
c001c0ee:	68 00 50 00 00       	push   0x5000
c001c0f3:	53                   	push   ebx
c001c0f4:	e8 41 42 ff ff       	call   c001033a <Pipe::Pipe(int)>
c001c0f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c0fc:	e8 a3 50 ff ff       	call   c00111a4 <UnixFile::getFileDescriptor()>
c001c101:	89 07                	mov    DWORD PTR [edi],eax
c001c103:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c106:	e8 99 50 ff ff       	call   c00111a4 <UnixFile::getFileDescriptor()>
c001c10b:	83 c4 10             	add    esp,0x10
c001c10e:	89 06                	mov    DWORD PTR [esi],eax
c001c110:	31 d2                	xor    edx,edx
c001c112:	5b                   	pop    ebx
c001c113:	31 c0                	xor    eax,eax
c001c115:	5e                   	pop    esi
c001c116:	5f                   	pop    edi
c001c117:	c3                   	ret    

c001c118 <sysGetUnixTime(regs*)>:
c001c118:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001c11d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c123:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c127:	e9 e6 77 ff ff       	jmp    c0013912 <Clock::timeInSecondsLocal()>

c001c12c <string_ends_with(char const*, char const*)>:
c001c12c:	57                   	push   edi
c001c12d:	56                   	push   esi
c001c12e:	53                   	push   ebx
c001c12f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c133:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c137:	83 ec 0c             	sub    esp,0xc
c001c13a:	53                   	push   ebx
c001c13b:	e8 2c 46 fe ff       	call   c000076c <strlen>
c001c140:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c143:	89 c6                	mov    esi,eax
c001c145:	e8 22 46 fe ff       	call   c000076c <strlen>
c001c14a:	83 c4 10             	add    esp,0x10
c001c14d:	39 c6                	cmp    esi,eax
c001c14f:	7d 06                	jge    c001c157 <string_ends_with(char const*, char const*)+0x2b>
c001c151:	5b                   	pop    ebx
c001c152:	31 c0                	xor    eax,eax
c001c154:	5e                   	pop    esi
c001c155:	5f                   	pop    edi
c001c156:	c3                   	ret    
c001c157:	83 ec 08             	sub    esp,0x8
c001c15a:	29 c6                	sub    esi,eax
c001c15c:	57                   	push   edi
c001c15d:	01 f3                	add    ebx,esi
c001c15f:	53                   	push   ebx
c001c160:	e8 33 47 fe ff       	call   c0000898 <strcmp>
c001c165:	83 c4 10             	add    esp,0x10
c001c168:	85 c0                	test   eax,eax
c001c16a:	5b                   	pop    ebx
c001c16b:	0f 94 c0             	sete   al
c001c16e:	5e                   	pop    esi
c001c16f:	0f b6 c0             	movzx  eax,al
c001c172:	5f                   	pop    edi
c001c173:	c3                   	ret    

c001c174 <sysCallOpen(regs*)>:
c001c174:	56                   	push   esi
c001c175:	53                   	push   ebx
c001c176:	81 ec 04 01 00 00    	sub    esp,0x104
c001c17c:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c183:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c186:	85 c9                	test   ecx,ecx
c001c188:	0f 84 ad 01 00 00    	je     c001c33b <sysCallOpen(regs*)+0x1c7>
c001c18e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c191:	85 c0                	test   eax,eax
c001c193:	0f 84 a2 01 00 00    	je     c001c33b <sysCallOpen(regs*)+0x1c7>
c001c199:	52                   	push   edx
c001c19a:	68 35 c5 02 c0       	push   0xc002c535
c001c19f:	50                   	push   eax
c001c1a0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c1a4:	56                   	push   esi
c001c1a5:	e8 cc 6b ff ff       	call   c0012d76 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c1aa:	89 34 24             	mov    DWORD PTR [esp],esi
c001c1ad:	e8 ba 45 fe ff       	call   c000076c <strlen>
c001c1b2:	83 c4 10             	add    esp,0x10
c001c1b5:	48                   	dec    eax
c001c1b6:	74 1d                	je     c001c1d5 <sysCallOpen(regs*)+0x61>
c001c1b8:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c1bb:	eb 0f                	jmp    c001c1cc <sysCallOpen(regs*)+0x58>
c001c1bd:	80 fa 3a             	cmp    dl,0x3a
c001c1c0:	74 0f                	je     c001c1d1 <sysCallOpen(regs*)+0x5d>
c001c1c2:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c1c6:	48                   	dec    eax
c001c1c7:	74 0c                	je     c001c1d5 <sysCallOpen(regs*)+0x61>
c001c1c9:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c1cc:	80 fa 2e             	cmp    dl,0x2e
c001c1cf:	75 ec                	jne    c001c1bd <sysCallOpen(regs*)+0x49>
c001c1d1:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c1d5:	83 ec 08             	sub    esp,0x8
c001c1d8:	68 39 c5 02 c0       	push   0xc002c539
c001c1dd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c1e0:	e8 47 ff ff ff       	call   c001c12c <string_ends_with(char const*, char const*)>
c001c1e5:	83 c4 10             	add    esp,0x10
c001c1e8:	85 c0                	test   eax,eax
c001c1ea:	74 1d                	je     c001c209 <sysCallOpen(regs*)+0x95>
c001c1ec:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c1ef:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c1f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c1fc:	81 c4 04 01 00 00    	add    esp,0x104
c001c202:	31 c0                	xor    eax,eax
c001c204:	31 d2                	xor    edx,edx
c001c206:	5b                   	pop    ebx
c001c207:	5e                   	pop    esi
c001c208:	c3                   	ret    
c001c209:	83 ec 08             	sub    esp,0x8
c001c20c:	68 3e c5 02 c0       	push   0xc002c53e
c001c211:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c214:	e8 13 ff ff ff       	call   c001c12c <string_ends_with(char const*, char const*)>
c001c219:	83 c4 10             	add    esp,0x10
c001c21c:	85 c0                	test   eax,eax
c001c21e:	75 cc                	jne    c001c1ec <sysCallOpen(regs*)+0x78>
c001c220:	83 ec 08             	sub    esp,0x8
c001c223:	68 3a c5 02 c0       	push   0xc002c53a
c001c228:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c22b:	e8 68 46 fe ff       	call   c0000898 <strcmp>
c001c230:	83 c4 10             	add    esp,0x10
c001c233:	85 c0                	test   eax,eax
c001c235:	74 b5                	je     c001c1ec <sysCallOpen(regs*)+0x78>
c001c237:	83 ec 08             	sub    esp,0x8
c001c23a:	68 39 c5 02 c0       	push   0xc002c539
c001c23f:	56                   	push   esi
c001c240:	e8 e7 fe ff ff       	call   c001c12c <string_ends_with(char const*, char const*)>
c001c245:	83 c4 10             	add    esp,0x10
c001c248:	85 c0                	test   eax,eax
c001c24a:	75 a0                	jne    c001c1ec <sysCallOpen(regs*)+0x78>
c001c24c:	83 ec 08             	sub    esp,0x8
c001c24f:	68 43 c5 02 c0       	push   0xc002c543
c001c254:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c257:	e8 d0 fe ff ff       	call   c001c12c <string_ends_with(char const*, char const*)>
c001c25c:	83 c4 10             	add    esp,0x10
c001c25f:	85 c0                	test   eax,eax
c001c261:	0f 85 e7 00 00 00    	jne    c001c34e <sysCallOpen(regs*)+0x1da>
c001c267:	83 ec 08             	sub    esp,0x8
c001c26a:	68 48 c5 02 c0       	push   0xc002c548
c001c26f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c272:	e8 b5 fe ff ff       	call   c001c12c <string_ends_with(char const*, char const*)>
c001c277:	83 c4 10             	add    esp,0x10
c001c27a:	85 c0                	test   eax,eax
c001c27c:	0f 85 cc 00 00 00    	jne    c001c34e <sysCallOpen(regs*)+0x1da>
c001c282:	83 ec 08             	sub    esp,0x8
c001c285:	68 44 c5 02 c0       	push   0xc002c544
c001c28a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c28d:	e8 06 46 fe ff       	call   c0000898 <strcmp>
c001c292:	83 c4 10             	add    esp,0x10
c001c295:	85 c0                	test   eax,eax
c001c297:	0f 84 b1 00 00 00    	je     c001c34e <sysCallOpen(regs*)+0x1da>
c001c29d:	83 ec 08             	sub    esp,0x8
c001c2a0:	68 43 c5 02 c0       	push   0xc002c543
c001c2a5:	56                   	push   esi
c001c2a6:	e8 81 fe ff ff       	call   c001c12c <string_ends_with(char const*, char const*)>
c001c2ab:	83 c4 10             	add    esp,0x10
c001c2ae:	85 c0                	test   eax,eax
c001c2b0:	0f 85 98 00 00 00    	jne    c001c34e <sysCallOpen(regs*)+0x1da>
c001c2b6:	83 ec 0c             	sub    esp,0xc
c001c2b9:	68 14 01 00 00       	push   0x114
c001c2be:	e8 a6 36 ff ff       	call   c000f969 <malloc>
c001c2c3:	83 c4 0c             	add    esp,0xc
c001c2c6:	89 c6                	mov    esi,eax
c001c2c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2cd:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c2d0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c2d3:	56                   	push   esi
c001c2d4:	e8 47 6c ff ff       	call   c0012f20 <File::File(char const*, Process*)>
c001c2d9:	83 c4 10             	add    esp,0x10
c001c2dc:	85 f6                	test   esi,esi
c001c2de:	74 5b                	je     c001c33b <sysCallOpen(regs*)+0x1c7>
c001c2e0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c2e3:	0f b6 c2             	movzx  eax,dl
c001c2e6:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c2e9:	89 d0                	mov    eax,edx
c001c2eb:	83 e0 01             	and    eax,0x1
c001c2ee:	f6 c2 02             	test   dl,0x2
c001c2f1:	74 03                	je     c001c2f6 <sysCallOpen(regs*)+0x182>
c001c2f3:	83 c8 02             	or     eax,0x2
c001c2f6:	f6 c2 04             	test   dl,0x4
c001c2f9:	74 03                	je     c001c2fe <sysCallOpen(regs*)+0x18a>
c001c2fb:	83 c8 04             	or     eax,0x4
c001c2fe:	f6 c2 08             	test   dl,0x8
c001c301:	74 03                	je     c001c306 <sysCallOpen(regs*)+0x192>
c001c303:	83 c8 0a             	or     eax,0xa
c001c306:	83 e2 10             	and    edx,0x10
c001c309:	74 03                	je     c001c30e <sysCallOpen(regs*)+0x19a>
c001c30b:	83 c8 12             	or     eax,0x12
c001c30e:	83 ec 08             	sub    esp,0x8
c001c311:	50                   	push   eax
c001c312:	56                   	push   esi
c001c313:	e8 6c 6c ff ff       	call   c0012f84 <File::open(FileOpenMode)>
c001c318:	83 c4 10             	add    esp,0x10
c001c31b:	85 c0                	test   eax,eax
c001c31d:	75 1c                	jne    c001c33b <sysCallOpen(regs*)+0x1c7>
c001c31f:	83 ec 0c             	sub    esp,0xc
c001c322:	56                   	push   esi
c001c323:	e8 7c 4e ff ff       	call   c00111a4 <UnixFile::getFileDescriptor()>
c001c328:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c32b:	83 c4 10             	add    esp,0x10
c001c32e:	89 02                	mov    DWORD PTR [edx],eax
c001c330:	c1 f8 1f             	sar    eax,0x1f
c001c333:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c336:	e9 c1 fe ff ff       	jmp    c001c1fc <sysCallOpen(regs*)+0x88>
c001c33b:	81 c4 04 01 00 00    	add    esp,0x104
c001c341:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c346:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c34b:	5b                   	pop    ebx
c001c34c:	5e                   	pop    esi
c001c34d:	c3                   	ret    
c001c34e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c351:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c357:	e9 99 fe ff ff       	jmp    c001c1f5 <sysCallOpen(regs*)+0x81>

c001c35c <Sys::loadSyscalls()>:
c001c35c:	c7 05 40 f1 02 c0 c9 b5 01 c0 	mov    DWORD PTR ds:0xc002f140,0xc001b5c9
c001c366:	c7 05 44 f1 02 c0 be b1 01 c0 	mov    DWORD PTR ds:0xc002f144,0xc001b1be
c001c370:	c7 05 48 f1 02 c0 af b3 01 c0 	mov    DWORD PTR ds:0xc002f148,0xc001b3af
c001c37a:	c7 05 4c f1 02 c0 ff b4 01 c0 	mov    DWORD PTR ds:0xc002f14c,0xc001b4ff
c001c384:	c7 05 50 f1 02 c0 47 b3 01 c0 	mov    DWORD PTR ds:0xc002f150,0xc001b347
c001c38e:	c7 05 54 f1 02 c0 f5 b1 01 c0 	mov    DWORD PTR ds:0xc002f154,0xc001b1f5
c001c398:	c7 05 58 f1 02 c0 d6 b1 01 c0 	mov    DWORD PTR ds:0xc002f158,0xc001b1d6
c001c3a2:	c7 05 5c f1 02 c0 04 b4 01 c0 	mov    DWORD PTR ds:0xc002f15c,0xc001b404
c001c3ac:	c7 05 64 f1 02 c0 92 ba 01 c0 	mov    DWORD PTR ds:0xc002f164,0xc001ba92
c001c3b6:	c7 05 60 f1 02 c0 74 c1 01 c0 	mov    DWORD PTR ds:0xc002f160,0xc001c174
c001c3c0:	c7 05 68 f1 02 c0 f2 ba 01 c0 	mov    DWORD PTR ds:0xc002f168,0xc001baf2
c001c3ca:	c7 05 6c f1 02 c0 d5 b7 01 c0 	mov    DWORD PTR ds:0xc002f16c,0xc001b7d5
c001c3d4:	c7 05 70 f1 02 c0 0f b6 01 c0 	mov    DWORD PTR ds:0xc002f170,0xc001b60f
c001c3de:	c7 05 74 f1 02 c0 14 b6 01 c0 	mov    DWORD PTR ds:0xc002f174,0xc001b614
c001c3e8:	c7 05 78 f1 02 c0 bb bb 01 c0 	mov    DWORD PTR ds:0xc002f178,0xc001bbbb
c001c3f2:	c7 05 7c f1 02 c0 67 bb 01 c0 	mov    DWORD PTR ds:0xc002f17c,0xc001bb67
c001c3fc:	c7 05 80 f1 02 c0 ae b8 01 c0 	mov    DWORD PTR ds:0xc002f180,0xc001b8ae
c001c406:	c7 05 84 f1 02 c0 05 b9 01 c0 	mov    DWORD PTR ds:0xc002f184,0xc001b905
c001c410:	c7 05 88 f1 02 c0 71 b9 01 c0 	mov    DWORD PTR ds:0xc002f188,0xc001b971
c001c41a:	c7 05 8c f1 02 c0 19 b6 01 c0 	mov    DWORD PTR ds:0xc002f18c,0xc001b619
c001c424:	c7 05 90 f1 02 c0 2b bc 01 c0 	mov    DWORD PTR ds:0xc002f190,0xc001bc2b
c001c42e:	c7 05 94 f1 02 c0 45 bc 01 c0 	mov    DWORD PTR ds:0xc002f194,0xc001bc45
c001c438:	c7 05 98 f1 02 c0 45 bc 01 c0 	mov    DWORD PTR ds:0xc002f198,0xc001bc45
c001c442:	c7 05 9c f1 02 c0 7a bc 01 c0 	mov    DWORD PTR ds:0xc002f19c,0xc001bc7a
c001c44c:	c7 05 a0 f1 02 c0 de bc 01 c0 	mov    DWORD PTR ds:0xc002f1a0,0xc001bcde
c001c456:	c7 05 a4 f1 02 c0 23 b6 01 c0 	mov    DWORD PTR ds:0xc002f1a4,0xc001b623
c001c460:	c7 05 a8 f1 02 c0 42 bd 01 c0 	mov    DWORD PTR ds:0xc002f1a8,0xc001bd42
c001c46a:	c7 05 ac f1 02 c0 92 b7 01 c0 	mov    DWORD PTR ds:0xc002f1ac,0xc001b792
c001c474:	c7 05 b0 f1 02 c0 8e bd 01 c0 	mov    DWORD PTR ds:0xc002f1b0,0xc001bd8e
c001c47e:	c7 05 b4 f1 02 c0 54 b8 01 c0 	mov    DWORD PTR ds:0xc002f1b4,0xc001b854
c001c488:	c7 05 b8 f1 02 c0 11 be 01 c0 	mov    DWORD PTR ds:0xc002f1b8,0xc001be11
c001c492:	c7 05 bc f1 02 c0 e3 b9 01 c0 	mov    DWORD PTR ds:0xc002f1bc,0xc001b9e3
c001c49c:	c7 05 c0 f1 02 c0 38 be 01 c0 	mov    DWORD PTR ds:0xc002f1c0,0xc001be38
c001c4a6:	c7 05 c4 f1 02 c0 a0 be 01 c0 	mov    DWORD PTR ds:0xc002f1c4,0xc001bea0
c001c4b0:	c7 05 c8 f1 02 c0 4d bf 01 c0 	mov    DWORD PTR ds:0xc002f1c8,0xc001bf4d
c001c4ba:	c7 05 cc f1 02 c0 33 b6 01 c0 	mov    DWORD PTR ds:0xc002f1cc,0xc001b633
c001c4c4:	c7 05 d0 f1 02 c0 9d b6 01 c0 	mov    DWORD PTR ds:0xc002f1d0,0xc001b69d
c001c4ce:	c7 05 d4 f1 02 c0 e3 b6 01 c0 	mov    DWORD PTR ds:0xc002f1d4,0xc001b6e3
c001c4d8:	c7 05 d8 f1 02 c0 61 c0 01 c0 	mov    DWORD PTR ds:0xc002f1d8,0xc001c061
c001c4e2:	c7 05 dc f1 02 c0 60 bc 01 c0 	mov    DWORD PTR ds:0xc002f1dc,0xc001bc60
c001c4ec:	c7 05 e0 f1 02 c0 34 b7 01 c0 	mov    DWORD PTR ds:0xc002f1e0,0xc001b734
c001c4f6:	c7 05 e4 f1 02 c0 d3 c0 01 c0 	mov    DWORD PTR ds:0xc002f1e4,0xc001c0d3
c001c500:	c7 05 e8 f1 02 c0 18 c1 01 c0 	mov    DWORD PTR ds:0xc002f1e8,0xc001c118
c001c50a:	c7 05 ec f1 02 c0 9f b2 01 c0 	mov    DWORD PTR ds:0xc002f1ec,0xc001b29f
c001c514:	c7 05 f0 f1 02 c0 20 b4 01 c0 	mov    DWORD PTR ds:0xc002f1f0,0xc001b420
c001c51e:	c7 05 f4 f1 02 c0 b5 b4 01 c0 	mov    DWORD PTR ds:0xc002f1f4,0xc001b4b5
c001c528:	c7 05 f8 f1 02 c0 88 b1 01 c0 	mov    DWORD PTR ds:0xc002f1f8,0xc001b188
c001c532:	c7 05 fc f1 02 c0 67 b5 01 c0 	mov    DWORD PTR ds:0xc002f1fc,0xc001b567
c001c53c:	c7 05 00 f2 02 c0 01 b2 01 c0 	mov    DWORD PTR ds:0xc002f200,0xc001b201
c001c546:	c7 05 04 f2 02 c0 1b b2 01 c0 	mov    DWORD PTR ds:0xc002f204,0xc001b21b
c001c550:	c3                   	ret    

c001c551 <Sys::systemCall(regs*, void*)>:
c001c551:	53                   	push   ebx
c001c552:	83 ec 08             	sub    esp,0x8
c001c555:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c559:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c55c:	83 f8 7f             	cmp    eax,0x7f
c001c55f:	77 16                	ja     c001c577 <Sys::systemCall(regs*, void*)+0x26>
c001c561:	8b 14 85 40 f1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0ec0]
c001c568:	85 d2                	test   edx,edx
c001c56a:	74 0b                	je     c001c577 <Sys::systemCall(regs*, void*)+0x26>
c001c56c:	83 ec 0c             	sub    esp,0xc
c001c56f:	53                   	push   ebx
c001c570:	ff d2                	call   edx
c001c572:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c575:	eb 0d                	jmp    c001c584 <Sys::systemCall(regs*, void*)+0x33>
c001c577:	52                   	push   edx
c001c578:	52                   	push   edx
c001c579:	50                   	push   eax
c001c57a:	68 4d c5 02 c0       	push   0xc002c54d
c001c57f:	e8 3d 64 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001c584:	83 c4 10             	add    esp,0x10
c001c587:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c58c:	31 d2                	xor    edx,edx
c001c58e:	83 c4 08             	add    esp,0x8
c001c591:	5b                   	pop    ebx
c001c592:	c3                   	ret    

c001c593 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c593:	55                   	push   ebp
c001c594:	57                   	push   edi
c001c595:	56                   	push   esi
c001c596:	53                   	push   ebx
c001c597:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c59d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c5a4:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c5ab:	85 c0                	test   eax,eax
c001c5ad:	0f 95 c1             	setne  cl
c001c5b0:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c5b8:	0f 94 c2             	sete   dl
c001c5bb:	84 d1                	test   cl,dl
c001c5bd:	74 23                	je     c001c5e2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c5bf:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c5c5:	74 1b                	je     c001c5e2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c5c7:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c5cd:	89 da                	mov    edx,ebx
c001c5cf:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c5d5:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c5db:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c5e2:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c5e9:	05 ff 0f 00 00       	add    eax,0xfff
c001c5ee:	83 ec 0c             	sub    esp,0xc
c001c5f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c5f5:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c5fb:	c1 e8 0c             	shr    eax,0xc
c001c5fe:	89 fe                	mov    esi,edi
c001c600:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c604:	c1 ee 0c             	shr    esi,0xc
c001c607:	6a 01                	push   0x1
c001c609:	e8 e1 4f ff ff       	call   c00115ef <Virt::allocateKernelVirtualPages(int)>
c001c60e:	89 c5                	mov    ebp,eax
c001c610:	58                   	pop    eax
c001c611:	5a                   	pop    edx
c001c612:	56                   	push   esi
c001c613:	68 61 c5 02 c0       	push   0xc002c561
c001c618:	e8 a4 63 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001c61d:	59                   	pop    ecx
c001c61e:	58                   	pop    eax
c001c61f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c623:	68 73 c5 02 c0       	push   0xc002c573
c001c628:	e8 94 63 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001c62d:	83 c4 10             	add    esp,0x10
c001c630:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c636:	0f 86 31 01 00 00    	jbe    c001c76d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c63c:	c1 e6 0c             	shl    esi,0xc
c001c63f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c642:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c645:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c649:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c650:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c653:	01 df                	add    edi,ebx
c001c655:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c658:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c65c:	0f 84 08 01 00 00    	je     c001c76a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c662:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c668:	76 05                	jbe    c001c66f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c66a:	bf 00 10 00 00       	mov    edi,0x1000
c001c66f:	83 ec 0c             	sub    esp,0xc
c001c672:	31 d2                	xor    edx,edx
c001c674:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c67b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c67d:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c681:	50                   	push   eax
c001c682:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c686:	56                   	push   esi
c001c687:	52                   	push   edx
c001c688:	57                   	push   edi
c001c689:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c690:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c693:	83 c4 20             	add    esp,0x20
c001c696:	85 c0                	test   eax,eax
c001c698:	74 0a                	je     c001c6a4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c69a:	53                   	push   ebx
c001c69b:	53                   	push   ebx
c001c69c:	50                   	push   eax
c001c69d:	68 85 c5 02 c0       	push   0xc002c585
c001c6a2:	eb 0f                	jmp    c001c6b3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c6a4:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c6a8:	74 20                	je     c001c6ca <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c6aa:	51                   	push   ecx
c001c6ab:	51                   	push   ecx
c001c6ac:	6a 00                	push   0x0
c001c6ae:	68 b0 c5 02 c0       	push   0xc002c5b0
c001c6b3:	e8 09 63 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001c6b8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c6bb:	e8 5f 52 ff ff       	call   c001191f <Virt::freeKernelVirtualPages(unsigned long)>
c001c6c0:	83 c4 10             	add    esp,0x10
c001c6c3:	31 c0                	xor    eax,eax
c001c6c5:	e9 68 01 00 00       	jmp    c001c832 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c6ca:	fa                   	cli    
c001c6cb:	ff 05 08 fb 02 c0    	inc    DWORD PTR ds:0xc002fb08
c001c6d1:	e8 8f 36 ff ff       	call   c000fd65 <Phys::allocatePage()>
c001c6d6:	6a 07                	push   0x7
c001c6d8:	89 c7                	mov    edi,eax
c001c6da:	55                   	push   ebp
c001c6db:	50                   	push   eax
c001c6dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c6e1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c6e4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c6ea:	e8 a7 55 ff ff       	call   c0011c96 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c6ef:	83 c4 0c             	add    esp,0xc
c001c6f2:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c6f9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c6ff:	6a 00                	push   0x0
c001c701:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c706:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c709:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c70f:	e8 dc 53 ff ff       	call   c0011af0 <VAS::mapOtherVASIn(bool, VAS*)>
c001c714:	58                   	pop    eax
c001c715:	5a                   	pop    edx
c001c716:	68 07 0c 00 00       	push   0xc07
c001c71b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c71f:	57                   	push   edi
c001c720:	89 ef                	mov    edi,ebp
c001c722:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c729:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c72f:	6a 00                	push   0x0
c001c731:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c736:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c739:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c73f:	e8 0e 59 ff ff       	call   c0012052 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c744:	b9 00 10 00 00       	mov    ecx,0x1000
c001c749:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c74b:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001c750:	83 c4 20             	add    esp,0x20
c001c753:	48                   	dec    eax
c001c754:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001c759:	85 c0                	test   eax,eax
c001c75b:	75 01                	jne    c001c75e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c75d:	fb                   	sti    
c001c75e:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c765:	e9 df fe ff ff       	jmp    c001c649 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c76a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c76d:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c775:	0f 86 a9 00 00 00    	jbe    c001c824 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c77b:	fa                   	cli    
c001c77c:	ff 05 08 fb 02 c0    	inc    DWORD PTR ds:0xc002fb08
c001c782:	51                   	push   ecx
c001c783:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c78a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c790:	6a 00                	push   0x0
c001c792:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c797:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c79a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c7a0:	e8 4b 53 ff ff       	call   c0011af0 <VAS::mapOtherVASIn(bool, VAS*)>
c001c7a5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c7a9:	c1 e6 0c             	shl    esi,0xc
c001c7ac:	01 de                	add    esi,ebx
c001c7ae:	83 c4 10             	add    esp,0x10
c001c7b1:	39 de                	cmp    esi,ebx
c001c7b3:	74 61                	je     c001c816 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c7b5:	e8 ab 35 ff ff       	call   c000fd65 <Phys::allocatePage()>
c001c7ba:	6a 07                	push   0x7
c001c7bc:	89 c7                	mov    edi,eax
c001c7be:	55                   	push   ebp
c001c7bf:	50                   	push   eax
c001c7c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7c5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7c8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c7ce:	e8 c3 54 ff ff       	call   c0011c96 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c7d3:	58                   	pop    eax
c001c7d4:	5a                   	pop    edx
c001c7d5:	68 07 0c 00 00       	push   0xc07
c001c7da:	53                   	push   ebx
c001c7db:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c7e1:	57                   	push   edi
c001c7e2:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c7e9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c7ef:	6a 00                	push   0x0
c001c7f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7f6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7f9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c7ff:	e8 4e 58 ff ff       	call   c0012052 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c804:	83 c4 1c             	add    esp,0x1c
c001c807:	68 00 10 00 00       	push   0x1000
c001c80c:	6a 00                	push   0x0
c001c80e:	55                   	push   ebp
c001c80f:	e8 3c 3f fe ff       	call   c0000750 <memset>
c001c814:	eb 98                	jmp    c001c7ae <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c816:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001c81b:	48                   	dec    eax
c001c81c:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001c821:	75 01                	jne    c001c824 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c823:	fb                   	sti    
c001c824:	83 ec 0c             	sub    esp,0xc
c001c827:	55                   	push   ebp
c001c828:	e8 f2 50 ff ff       	call   c001191f <Virt::freeKernelVirtualPages(unsigned long)>
c001c82d:	83 c4 10             	add    esp,0x10
c001c830:	b0 01                	mov    al,0x1
c001c832:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c838:	5b                   	pop    ebx
c001c839:	5e                   	pop    esi
c001c83a:	5f                   	pop    edi
c001c83b:	5d                   	pop    ebp
c001c83c:	c3                   	ret    

c001c83d <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c83d:	55                   	push   ebp
c001c83e:	57                   	push   edi
c001c83f:	56                   	push   esi
c001c840:	53                   	push   ebx
c001c841:	83 ec 48             	sub    esp,0x48
c001c844:	68 14 01 00 00       	push   0x114
c001c849:	e8 1b 31 ff ff       	call   c000f969 <malloc>
c001c84e:	83 c4 0c             	add    esp,0xc
c001c851:	89 c6                	mov    esi,eax
c001c853:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c857:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c85b:	50                   	push   eax
c001c85c:	e8 bf 66 ff ff       	call   c0012f20 <File::File(char const*, Process*)>
c001c861:	58                   	pop    eax
c001c862:	5a                   	pop    edx
c001c863:	6a 01                	push   0x1
c001c865:	56                   	push   esi
c001c866:	e8 19 67 ff ff       	call   c0012f84 <File::open(FileOpenMode)>
c001c86b:	83 c4 10             	add    esp,0x10
c001c86e:	85 c0                	test   eax,eax
c001c870:	0f 85 47 01 00 00    	jne    c001c9bd <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c876:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c87e:	83 ec 0c             	sub    esp,0xc
c001c881:	6a 34                	push   0x34
c001c883:	e8 e1 30 ff ff       	call   c000f969 <malloc>
c001c888:	89 c3                	mov    ebx,eax
c001c88a:	58                   	pop    eax
c001c88b:	8b 06                	mov    eax,DWORD PTR [esi]
c001c88d:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c891:	57                   	push   edi
c001c892:	53                   	push   ebx
c001c893:	6a 00                	push   0x0
c001c895:	6a 34                	push   0x34
c001c897:	56                   	push   esi
c001c898:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c89b:	83 c4 20             	add    esp,0x20
c001c89e:	85 c0                	test   eax,eax
c001c8a0:	0f 85 17 01 00 00    	jne    c001c9bd <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c8a6:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c8ac:	0f 85 0b 01 00 00    	jne    c001c9bd <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c8b2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c8b5:	85 c0                	test   eax,eax
c001c8b7:	0f 84 00 01 00 00    	je     c001c9bd <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c8bd:	31 d2                	xor    edx,edx
c001c8bf:	55                   	push   ebp
c001c8c0:	52                   	push   edx
c001c8c1:	50                   	push   eax
c001c8c2:	56                   	push   esi
c001c8c3:	e8 7a 67 ff ff       	call   c0013042 <File::seek(unsigned long long)>
c001c8c8:	83 c4 10             	add    esp,0x10
c001c8cb:	85 c0                	test   eax,eax
c001c8cd:	0f 85 ea 00 00 00    	jne    c001c9bd <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c8d3:	83 ec 0c             	sub    esp,0xc
c001c8d6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c8d9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c8dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c8e1:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c8e5:	0f af c2             	imul   eax,edx
c001c8e8:	50                   	push   eax
c001c8e9:	e8 7b 30 ff ff       	call   c000f969 <malloc>
c001c8ee:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c8f0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c8f4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c8f7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c8fb:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c8ff:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c903:	0f af c2             	imul   eax,edx
c001c906:	99                   	cdq    
c001c907:	52                   	push   edx
c001c908:	50                   	push   eax
c001c909:	56                   	push   esi
c001c90a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c90d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c910:	83 c4 20             	add    esp,0x20
c001c913:	85 c0                	test   eax,eax
c001c915:	0f 84 a2 00 00 00    	je     c001c9bd <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c91b:	31 d2                	xor    edx,edx
c001c91d:	51                   	push   ecx
c001c91e:	52                   	push   edx
c001c91f:	50                   	push   eax
c001c920:	56                   	push   esi
c001c921:	e8 1c 67 ff ff       	call   c0013042 <File::seek(unsigned long long)>
c001c926:	83 c4 10             	add    esp,0x10
c001c929:	85 c0                	test   eax,eax
c001c92b:	0f 85 8c 00 00 00    	jne    c001c9bd <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c931:	83 ec 0c             	sub    esp,0xc
c001c934:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c938:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c93c:	31 ed                	xor    ebp,ebp
c001c93e:	0f af c2             	imul   eax,edx
c001c941:	50                   	push   eax
c001c942:	e8 22 30 ff ff       	call   c000f969 <malloc>
c001c947:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c949:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c94d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c954:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c958:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c95c:	0f af c2             	imul   eax,edx
c001c95f:	99                   	cdq    
c001c960:	52                   	push   edx
c001c961:	50                   	push   eax
c001c962:	56                   	push   esi
c001c963:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c966:	83 c4 20             	add    esp,0x20
c001c969:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c971:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c975:	0f 86 80 00 00 00    	jbe    c001c9fb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c97b:	0f b7 fd             	movzx  edi,bp
c001c97e:	c1 e7 05             	shl    edi,0x5
c001c981:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c985:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c988:	75 6b                	jne    c001c9f5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c98a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c98d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c991:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c994:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c998:	52                   	push   edx
c001c999:	31 d2                	xor    edx,edx
c001c99b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c99e:	52                   	push   edx
c001c99f:	50                   	push   eax
c001c9a0:	56                   	push   esi
c001c9a1:	e8 9c 66 ff ff       	call   c0013042 <File::seek(unsigned long long)>
c001c9a6:	83 c4 10             	add    esp,0x10
c001c9a9:	85 c0                	test   eax,eax
c001c9ab:	74 17                	je     c001c9c4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c9ad:	83 ec 0c             	sub    esp,0xc
c001c9b0:	68 dc c5 02 c0       	push   0xc002c5dc
c001c9b5:	e8 07 60 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001c9ba:	83 c4 10             	add    esp,0x10
c001c9bd:	31 c0                	xor    eax,eax
c001c9bf:	e9 87 00 00 00       	jmp    c001ca4b <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c9c4:	83 ec 0c             	sub    esp,0xc
c001c9c7:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c9ca:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c9cd:	50                   	push   eax
c001c9ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c9d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c9d6:	56                   	push   esi
c001c9d7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c9db:	e8 b3 fb ff ff       	call   c001c593 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c9e0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c9e4:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c9e8:	83 c4 20             	add    esp,0x20
c001c9eb:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c9ef:	73 04                	jae    c001c9f5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c9f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c9f5:	45                   	inc    ebp
c001c9f6:	e9 76 ff ff ff       	jmp    c001c971 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c9fb:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c9ff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ca03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca07:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001ca0d:	83 ec 0c             	sub    esp,0xc
c001ca10:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001ca16:	25 00 f0 ff ff       	and    eax,0xfffff000
c001ca1b:	05 00 10 00 00       	add    eax,0x1000
c001ca20:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ca23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca27:	e8 4d 2f ff ff       	call   c000f979 <free>
c001ca2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca2f:	e8 45 2f ff ff       	call   c000f979 <free>
c001ca34:	58                   	pop    eax
c001ca35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ca39:	e8 3b 2f ff ff       	call   c000f979 <free>
c001ca3e:	89 34 24             	mov    DWORD PTR [esp],esi
c001ca41:	e8 9c 65 ff ff       	call   c0012fe2 <File::close()>
c001ca46:	83 c4 10             	add    esp,0x10
c001ca49:	b0 01                	mov    al,0x1
c001ca4b:	83 c4 3c             	add    esp,0x3c
c001ca4e:	5b                   	pop    ebx
c001ca4f:	5e                   	pop    esi
c001ca50:	5f                   	pop    edi
c001ca51:	5d                   	pop    ebp
c001ca52:	c3                   	ret    

c001ca53 <Thr::runtimeReferenceHelper()>:
c001ca53:	83 ec 18             	sub    esp,0x18
c001ca56:	68 e4 c5 02 c0       	push   0xc002c5e4
c001ca5b:	e8 61 5f ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001ca60:	fa                   	cli    
c001ca61:	83 c4 10             	add    esp,0x10
c001ca64:	eb fe                	jmp    c001ca64 <Thr::runtimeReferenceHelper()+0x11>

c001ca66 <Thr::getAddressOfKernelSymbol(char const*)>:
c001ca66:	57                   	push   edi
c001ca67:	56                   	push   esi
c001ca68:	53                   	push   ebx
c001ca69:	31 db                	xor    ebx,ebx
c001ca6b:	39 1d e0 fa 02 c0    	cmp    DWORD PTR ds:0xc002fae0,ebx
c001ca71:	7e 3c                	jle    c001caaf <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001ca73:	8b 34 9d 60 fa 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd05a0]
c001ca7a:	31 ff                	xor    edi,edi
c001ca7c:	39 3c 9d 60 f9 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd06a0],edi
c001ca83:	7e 27                	jle    c001caac <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001ca85:	50                   	push   eax
c001ca86:	50                   	push   eax
c001ca87:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ca8b:	8b 06                	mov    eax,DWORD PTR [esi]
c001ca8d:	03 04 9d e0 f9 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd0620]
c001ca94:	50                   	push   eax
c001ca95:	e8 fe 3d fe ff       	call   c0000898 <strcmp>
c001ca9a:	83 c4 10             	add    esp,0x10
c001ca9d:	85 c0                	test   eax,eax
c001ca9f:	75 05                	jne    c001caa6 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001caa1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001caa4:	eb 0b                	jmp    c001cab1 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001caa6:	83 c6 10             	add    esi,0x10
c001caa9:	47                   	inc    edi
c001caaa:	eb d0                	jmp    c001ca7c <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001caac:	43                   	inc    ebx
c001caad:	eb bc                	jmp    c001ca6b <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001caaf:	31 c0                	xor    eax,eax
c001cab1:	5b                   	pop    ebx
c001cab2:	5e                   	pop    esi
c001cab3:	5f                   	pop    edi
c001cab4:	c3                   	ret    

c001cab5 <Thr::loadKernelSymbolTable(char const*)>:
c001cab5:	55                   	push   ebp
c001cab6:	57                   	push   edi
c001cab7:	56                   	push   esi
c001cab8:	53                   	push   ebx
c001cab9:	83 ec 68             	sub    esp,0x68
c001cabc:	8b 35 30 fb 02 c0    	mov    esi,DWORD PTR ds:0xc002fb30
c001cac2:	68 14 01 00 00       	push   0x114
c001cac7:	e8 9d 2e ff ff       	call   c000f969 <malloc>
c001cacc:	83 c4 0c             	add    esp,0xc
c001cacf:	89 c3                	mov    ebx,eax
c001cad1:	56                   	push   esi
c001cad2:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cad6:	50                   	push   eax
c001cad7:	e8 44 64 ff ff       	call   c0012f20 <File::File(char const*, Process*)>
c001cadc:	5e                   	pop    esi
c001cadd:	5f                   	pop    edi
c001cade:	6a 01                	push   0x1
c001cae0:	53                   	push   ebx
c001cae1:	e8 9e 64 ff ff       	call   c0012f84 <File::open(FileOpenMode)>
c001cae6:	83 c4 10             	add    esp,0x10
c001cae9:	85 c0                	test   eax,eax
c001caeb:	74 0a                	je     c001caf7 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001caed:	83 ec 0c             	sub    esp,0xc
c001caf0:	68 06 c6 02 c0       	push   0xc002c606
c001caf5:	eb 34                	jmp    c001cb2b <Thr::loadKernelSymbolTable(char const*)+0x76>
c001caf7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001caff:	83 ec 0c             	sub    esp,0xc
c001cb02:	6a 34                	push   0x34
c001cb04:	e8 60 2e ff ff       	call   c000f969 <malloc>
c001cb09:	59                   	pop    ecx
c001cb0a:	89 c7                	mov    edi,eax
c001cb0c:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cb10:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb12:	56                   	push   esi
c001cb13:	57                   	push   edi
c001cb14:	6a 00                	push   0x0
c001cb16:	6a 34                	push   0x34
c001cb18:	53                   	push   ebx
c001cb19:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb1c:	83 c4 20             	add    esp,0x20
c001cb1f:	85 c0                	test   eax,eax
c001cb21:	74 17                	je     c001cb3a <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cb23:	83 ec 0c             	sub    esp,0xc
c001cb26:	68 1d c6 02 c0       	push   0xc002c61d
c001cb2b:	e8 2f d8 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c001cb30:	83 c4 10             	add    esp,0x10
c001cb33:	31 c0                	xor    eax,eax
c001cb35:	e9 31 02 00 00       	jmp    c001cd6b <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cb3a:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cb40:	75 e1                	jne    c001cb23 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cb42:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cb45:	85 c0                	test   eax,eax
c001cb47:	74 da                	je     c001cb23 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cb49:	52                   	push   edx
c001cb4a:	31 d2                	xor    edx,edx
c001cb4c:	52                   	push   edx
c001cb4d:	50                   	push   eax
c001cb4e:	53                   	push   ebx
c001cb4f:	e8 ee 64 ff ff       	call   c0013042 <File::seek(unsigned long long)>
c001cb54:	83 c4 10             	add    esp,0x10
c001cb57:	85 c0                	test   eax,eax
c001cb59:	75 c8                	jne    c001cb23 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cb5b:	83 ec 0c             	sub    esp,0xc
c001cb5e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cb62:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cb66:	31 ed                	xor    ebp,ebp
c001cb68:	0f af c2             	imul   eax,edx
c001cb6b:	50                   	push   eax
c001cb6c:	e8 f8 2d ff ff       	call   c000f969 <malloc>
c001cb71:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cb73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb77:	89 34 24             	mov    DWORD PTR [esp],esi
c001cb7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cb7e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cb82:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cb86:	0f af c2             	imul   eax,edx
c001cb89:	99                   	cdq    
c001cb8a:	52                   	push   edx
c001cb8b:	50                   	push   eax
c001cb8c:	53                   	push   ebx
c001cb8d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb90:	83 c4 20             	add    esp,0x20
c001cb93:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cb9b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cba3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cbab:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cbb3:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cbb7:	0f 86 aa 00 00 00    	jbe    c001cc67 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cbbd:	0f b7 f5             	movzx  esi,bp
c001cbc0:	6b f6 28             	imul   esi,esi,0x28
c001cbc3:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cbc7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cbca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cbce:	50                   	push   eax
c001cbcf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cbd3:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cbd7:	8b 16                	mov    edx,DWORD PTR [esi]
c001cbd9:	6b c0 28             	imul   eax,eax,0x28
c001cbdc:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cbe0:	89 d0                	mov    eax,edx
c001cbe2:	31 d2                	xor    edx,edx
c001cbe4:	52                   	push   edx
c001cbe5:	50                   	push   eax
c001cbe6:	53                   	push   ebx
c001cbe7:	e8 56 64 ff ff       	call   c0013042 <File::seek(unsigned long long)>
c001cbec:	83 c4 0c             	add    esp,0xc
c001cbef:	6a 20                	push   0x20
c001cbf1:	6a 00                	push   0x0
c001cbf3:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cbf7:	52                   	push   edx
c001cbf8:	e8 53 3b fe ff       	call   c0000750 <memset>
c001cbfd:	58                   	pop    eax
c001cbfe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cc00:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cc04:	51                   	push   ecx
c001cc05:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cc09:	52                   	push   edx
c001cc0a:	6a 00                	push   0x0
c001cc0c:	6a 1f                	push   0x1f
c001cc0e:	53                   	push   ebx
c001cc0f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cc12:	83 c4 18             	add    esp,0x18
c001cc15:	68 34 c6 02 c0       	push   0xc002c634
c001cc1a:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cc1e:	52                   	push   edx
c001cc1f:	e8 74 3c fe ff       	call   c0000898 <strcmp>
c001cc24:	83 c4 10             	add    esp,0x10
c001cc27:	85 c0                	test   eax,eax
c001cc29:	75 0f                	jne    c001cc3a <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cc2b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cc2e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cc32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc3a:	50                   	push   eax
c001cc3b:	50                   	push   eax
c001cc3c:	68 3c c6 02 c0       	push   0xc002c63c
c001cc41:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cc45:	50                   	push   eax
c001cc46:	e8 4d 3c fe ff       	call   c0000898 <strcmp>
c001cc4b:	83 c4 10             	add    esp,0x10
c001cc4e:	85 c0                	test   eax,eax
c001cc50:	75 0f                	jne    c001cc61 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cc52:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cc55:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc5d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cc61:	45                   	inc    ebp
c001cc62:	e9 4c ff ff ff       	jmp    c001cbb3 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cc67:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cc6c:	75 10                	jne    c001cc7e <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cc6e:	83 ec 0c             	sub    esp,0xc
c001cc71:	68 44 c6 02 c0       	push   0xc002c644
c001cc76:	e8 e4 d6 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c001cc7b:	83 c4 10             	add    esp,0x10
c001cc7e:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cc83:	75 10                	jne    c001cc95 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cc85:	83 ec 0c             	sub    esp,0xc
c001cc88:	68 44 c6 02 c0       	push   0xc002c644
c001cc8d:	e8 cd d6 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c001cc92:	83 c4 10             	add    esp,0x10
c001cc95:	31 d2                	xor    edx,edx
c001cc97:	50                   	push   eax
c001cc98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc9c:	52                   	push   edx
c001cc9d:	50                   	push   eax
c001cc9e:	53                   	push   ebx
c001cc9f:	e8 9e 63 ff ff       	call   c0013042 <File::seek(unsigned long long)>
c001cca4:	5a                   	pop    edx
c001cca5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cca9:	e8 bb 2c ff ff       	call   c000f969 <malloc>
c001ccae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ccb2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ccb6:	31 c9                	xor    ecx,ecx
c001ccb8:	5e                   	pop    esi
c001ccb9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ccbb:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001ccbf:	55                   	push   ebp
c001ccc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccc4:	51                   	push   ecx
c001ccc5:	52                   	push   edx
c001ccc6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ccca:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ccce:	53                   	push   ebx
c001cccf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ccd2:	83 c4 14             	add    esp,0x14
c001ccd5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ccd9:	e8 8b 2c ff ff       	call   c000f969 <malloc>
c001ccde:	89 c6                	mov    esi,eax
c001cce0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cce2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cce5:	56                   	push   esi
c001cce6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ccea:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ccee:	51                   	push   ecx
c001ccef:	52                   	push   edx
c001ccf0:	53                   	push   ebx
c001ccf1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ccf4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ccf8:	8b 15 e0 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fae0
c001ccfe:	83 c4 1c             	add    esp,0x1c
c001cd01:	c1 e8 04             	shr    eax,0x4
c001cd04:	89 04 95 60 f9 02 c0 	mov    DWORD PTR [edx*4-0x3ffd06a0],eax
c001cd0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cd0f:	31 d2                	xor    edx,edx
c001cd11:	52                   	push   edx
c001cd12:	50                   	push   eax
c001cd13:	53                   	push   ebx
c001cd14:	e8 29 63 ff ff       	call   c0013042 <File::seek(unsigned long long)>
c001cd19:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cd1b:	31 d2                	xor    edx,edx
c001cd1d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cd20:	56                   	push   esi
c001cd21:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cd25:	52                   	push   edx
c001cd26:	50                   	push   eax
c001cd27:	53                   	push   ebx
c001cd28:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd2b:	83 c4 14             	add    esp,0x14
c001cd2e:	53                   	push   ebx
c001cd2f:	e8 ae 62 ff ff       	call   c0012fe2 <File::close()>
c001cd34:	5d                   	pop    ebp
c001cd35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cd39:	e8 3b 2c ff ff       	call   c000f979 <free>
c001cd3e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cd41:	e8 33 2c ff ff       	call   c000f979 <free>
c001cd46:	a1 e0 fa 02 c0       	mov    eax,ds:0xc002fae0
c001cd4b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cd4f:	8d 50 01             	lea    edx,[eax+0x1]
c001cd52:	89 0c 85 60 fa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd05a0],ecx
c001cd59:	89 34 85 e0 f9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0620],esi
c001cd60:	89 15 e0 fa 02 c0    	mov    DWORD PTR ds:0xc002fae0,edx
c001cd66:	83 c4 10             	add    esp,0x10
c001cd69:	b0 01                	mov    al,0x1
c001cd6b:	83 c4 5c             	add    esp,0x5c
c001cd6e:	5b                   	pop    ebx
c001cd6f:	5e                   	pop    esi
c001cd70:	5f                   	pop    edi
c001cd71:	5d                   	pop    ebp
c001cd72:	c3                   	ret    

c001cd73 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cd73:	55                   	push   ebp
c001cd74:	57                   	push   edi
c001cd75:	56                   	push   esi
c001cd76:	53                   	push   ebx
c001cd77:	81 ec 68 03 00 00    	sub    esp,0x368
c001cd7d:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cd84:	8b 1d 30 fb 02 c0    	mov    ebx,DWORD PTR ds:0xc002fb30
c001cd8a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cd8e:	68 14 01 00 00       	push   0x114
c001cd93:	e8 d1 2b ff ff       	call   c000f969 <malloc>
c001cd98:	83 c4 0c             	add    esp,0xc
c001cd9b:	89 c5                	mov    ebp,eax
c001cd9d:	53                   	push   ebx
c001cd9e:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cda5:	50                   	push   eax
c001cda6:	e8 75 61 ff ff       	call   c0012f20 <File::File(char const*, Process*)>
c001cdab:	5e                   	pop    esi
c001cdac:	5f                   	pop    edi
c001cdad:	6a 01                	push   0x1
c001cdaf:	55                   	push   ebp
c001cdb0:	e8 cf 61 ff ff       	call   c0012f84 <File::open(FileOpenMode)>
c001cdb5:	83 c4 10             	add    esp,0x10
c001cdb8:	85 c0                	test   eax,eax
c001cdba:	0f 85 a7 06 00 00    	jne    c001d467 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cdc0:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cdc8:	83 ec 0c             	sub    esp,0xc
c001cdcb:	6a 34                	push   0x34
c001cdcd:	e8 97 2b ff ff       	call   c000f969 <malloc>
c001cdd2:	5b                   	pop    ebx
c001cdd3:	89 c7                	mov    edi,eax
c001cdd5:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cdd9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cddc:	53                   	push   ebx
c001cddd:	57                   	push   edi
c001cdde:	6a 00                	push   0x0
c001cde0:	6a 34                	push   0x34
c001cde2:	55                   	push   ebp
c001cde3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cde6:	83 c4 20             	add    esp,0x20
c001cde9:	85 c0                	test   eax,eax
c001cdeb:	0f 85 76 06 00 00    	jne    c001d467 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cdf1:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cdf7:	0f 85 6a 06 00 00    	jne    c001d467 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cdfd:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ce00:	85 c0                	test   eax,eax
c001ce02:	0f 84 5f 06 00 00    	je     c001d467 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ce08:	31 d2                	xor    edx,edx
c001ce0a:	51                   	push   ecx
c001ce0b:	52                   	push   edx
c001ce0c:	50                   	push   eax
c001ce0d:	55                   	push   ebp
c001ce0e:	e8 2f 62 ff ff       	call   c0013042 <File::seek(unsigned long long)>
c001ce13:	83 c4 10             	add    esp,0x10
c001ce16:	85 c0                	test   eax,eax
c001ce18:	0f 85 49 06 00 00    	jne    c001d467 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ce1e:	83 ec 0c             	sub    esp,0xc
c001ce21:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001ce24:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce28:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001ce2c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce30:	0f af c2             	imul   eax,edx
c001ce33:	50                   	push   eax
c001ce34:	e8 30 2b ff ff       	call   c000f969 <malloc>
c001ce39:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ce3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce43:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce47:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce4b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce4f:	0f af c2             	imul   eax,edx
c001ce52:	99                   	cdq    
c001ce53:	52                   	push   edx
c001ce54:	50                   	push   eax
c001ce55:	55                   	push   ebp
c001ce56:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce59:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001ce5c:	83 c4 20             	add    esp,0x20
c001ce5f:	85 c0                	test   eax,eax
c001ce61:	0f 84 00 06 00 00    	je     c001d467 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ce67:	52                   	push   edx
c001ce68:	31 d2                	xor    edx,edx
c001ce6a:	52                   	push   edx
c001ce6b:	50                   	push   eax
c001ce6c:	55                   	push   ebp
c001ce6d:	e8 d0 61 ff ff       	call   c0013042 <File::seek(unsigned long long)>
c001ce72:	83 c4 10             	add    esp,0x10
c001ce75:	85 c0                	test   eax,eax
c001ce77:	0f 85 ea 05 00 00    	jne    c001d467 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ce7d:	83 ec 0c             	sub    esp,0xc
c001ce80:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001ce84:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001ce88:	31 f6                	xor    esi,esi
c001ce8a:	0f af c2             	imul   eax,edx
c001ce8d:	50                   	push   eax
c001ce8e:	e8 d6 2a ff ff       	call   c000f969 <malloc>
c001ce93:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ce96:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ce9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce9d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cea1:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cea5:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cea9:	0f af c2             	imul   eax,edx
c001ceac:	99                   	cdq    
c001cead:	52                   	push   edx
c001ceae:	50                   	push   eax
c001ceaf:	55                   	push   ebp
c001ceb0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ceb3:	83 c4 20             	add    esp,0x20
c001ceb6:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001ceba:	0f 86 8a 00 00 00    	jbe    c001cf4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001cec0:	0f b7 de             	movzx  ebx,si
c001cec3:	c1 e3 05             	shl    ebx,0x5
c001cec6:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001ceca:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001cecd:	75 75                	jne    c001cf44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001cecf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001ced2:	31 d2                	xor    edx,edx
c001ced4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ced8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cedb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cedf:	50                   	push   eax
c001cee0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001cee3:	52                   	push   edx
c001cee4:	50                   	push   eax
c001cee5:	55                   	push   ebp
c001cee6:	e8 57 61 ff ff       	call   c0013042 <File::seek(unsigned long long)>
c001ceeb:	83 c4 10             	add    esp,0x10
c001ceee:	85 c0                	test   eax,eax
c001cef0:	0f 85 71 05 00 00    	jne    c001d467 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cef6:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001cefd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cf00:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001cf04:	31 d2                	xor    edx,edx
c001cf06:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001cf0a:	83 ec 0c             	sub    esp,0xc
c001cf0d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cf11:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf18:	50                   	push   eax
c001cf19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf21:	52                   	push   edx
c001cf22:	50                   	push   eax
c001cf23:	55                   	push   ebp
c001cf24:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf27:	83 c4 1c             	add    esp,0x1c
c001cf2a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cf2d:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001cf30:	50                   	push   eax
c001cf31:	6a 00                	push   0x0
c001cf33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf37:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001cf3b:	50                   	push   eax
c001cf3c:	e8 0f 38 fe ff       	call   c0000750 <memset>
c001cf41:	83 c4 10             	add    esp,0x10
c001cf44:	46                   	inc    esi
c001cf45:	e9 6c ff ff ff       	jmp    c001ceb6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001cf4a:	53                   	push   ebx
c001cf4b:	31 db                	xor    ebx,ebx
c001cf4d:	68 00 01 00 00       	push   0x100
c001cf52:	6a 00                	push   0x0
c001cf54:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cf58:	50                   	push   eax
c001cf59:	e8 f2 37 fe ff       	call   c0000750 <memset>
c001cf5e:	83 c4 0c             	add    esp,0xc
c001cf61:	68 00 01 00 00       	push   0x100
c001cf66:	6a 00                	push   0x0
c001cf68:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001cf6f:	50                   	push   eax
c001cf70:	e8 db 37 fe ff       	call   c0000750 <memset>
c001cf75:	83 c4 10             	add    esp,0x10
c001cf78:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cf80:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cf88:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001cf90:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cf98:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001cfa0:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001cfa4:	0f 86 30 01 00 00    	jbe    c001d0da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001cfaa:	0f b7 f3             	movzx  esi,bx
c001cfad:	6b f6 28             	imul   esi,esi,0x28
c001cfb0:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cfb4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cfb7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cfbb:	52                   	push   edx
c001cfbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cfc0:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001cfc4:	8b 06                	mov    eax,DWORD PTR [esi]
c001cfc6:	6b d2 28             	imul   edx,edx,0x28
c001cfc9:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001cfcd:	31 d2                	xor    edx,edx
c001cfcf:	52                   	push   edx
c001cfd0:	50                   	push   eax
c001cfd1:	55                   	push   ebp
c001cfd2:	e8 6b 60 ff ff       	call   c0013042 <File::seek(unsigned long long)>
c001cfd7:	83 c4 0c             	add    esp,0xc
c001cfda:	6a 20                	push   0x20
c001cfdc:	6a 00                	push   0x0
c001cfde:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cfe5:	51                   	push   ecx
c001cfe6:	e8 65 37 fe ff       	call   c0000750 <memset>
c001cfeb:	59                   	pop    ecx
c001cfec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cfef:	8d 54 24 58          	lea    edx,[esp+0x58]
c001cff3:	52                   	push   edx
c001cff4:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001cffb:	51                   	push   ecx
c001cffc:	6a 00                	push   0x0
c001cffe:	6a 1f                	push   0x1f
c001d000:	55                   	push   ebp
c001d001:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d004:	83 c4 1c             	add    esp,0x1c
c001d007:	6a 09                	push   0x9
c001d009:	68 5e c6 02 c0       	push   0xc002c65e
c001d00e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d015:	51                   	push   ecx
c001d016:	e8 31 36 fe ff       	call   c000064c <memcmp>
c001d01b:	83 c4 10             	add    esp,0x10
c001d01e:	85 c0                	test   eax,eax
c001d020:	75 21                	jne    c001d043 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d022:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d026:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d02a:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d02e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d032:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d035:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d03c:	89 d0                	mov    eax,edx
c001d03e:	40                   	inc    eax
c001d03f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d043:	50                   	push   eax
c001d044:	6a 09                	push   0x9
c001d046:	68 68 c6 02 c0       	push   0xc002c668
c001d04b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d052:	50                   	push   eax
c001d053:	e8 f4 35 fe ff       	call   c000064c <memcmp>
c001d058:	83 c4 10             	add    esp,0x10
c001d05b:	85 c0                	test   eax,eax
c001d05d:	75 21                	jne    c001d080 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d05f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d063:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d067:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d06b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d06f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d072:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d079:	89 d0                	mov    eax,edx
c001d07b:	40                   	inc    eax
c001d07c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d080:	50                   	push   eax
c001d081:	50                   	push   eax
c001d082:	68 34 c6 02 c0       	push   0xc002c634
c001d087:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d08e:	50                   	push   eax
c001d08f:	e8 04 38 fe ff       	call   c0000898 <strcmp>
c001d094:	83 c4 10             	add    esp,0x10
c001d097:	85 c0                	test   eax,eax
c001d099:	75 0f                	jne    c001d0aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d09b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d09e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d0a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d0aa:	50                   	push   eax
c001d0ab:	50                   	push   eax
c001d0ac:	68 3c c6 02 c0       	push   0xc002c63c
c001d0b1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d0b8:	50                   	push   eax
c001d0b9:	e8 da 37 fe ff       	call   c0000898 <strcmp>
c001d0be:	83 c4 10             	add    esp,0x10
c001d0c1:	85 c0                	test   eax,eax
c001d0c3:	75 0f                	jne    c001d0d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d0c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d0c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d0cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0d0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d0d4:	43                   	inc    ebx
c001d0d5:	e9 c6 fe ff ff       	jmp    c001cfa0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d0da:	31 d2                	xor    edx,edx
c001d0dc:	50                   	push   eax
c001d0dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d0e1:	52                   	push   edx
c001d0e2:	50                   	push   eax
c001d0e3:	55                   	push   ebp
c001d0e4:	e8 59 5f ff ff       	call   c0013042 <File::seek(unsigned long long)>
c001d0e9:	58                   	pop    eax
c001d0ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d0ee:	e8 76 28 ff ff       	call   c000f969 <malloc>
c001d0f3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0f6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d0fa:	31 d2                	xor    edx,edx
c001d0fc:	58                   	pop    eax
c001d0fd:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d101:	53                   	push   ebx
c001d102:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d106:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d10a:	52                   	push   edx
c001d10b:	50                   	push   eax
c001d10c:	55                   	push   ebp
c001d10d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d110:	83 c4 14             	add    esp,0x14
c001d113:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d117:	e8 4d 28 ff ff       	call   c000f969 <malloc>
c001d11c:	31 d2                	xor    edx,edx
c001d11e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d122:	83 c4 0c             	add    esp,0xc
c001d125:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d129:	52                   	push   edx
c001d12a:	50                   	push   eax
c001d12b:	55                   	push   ebp
c001d12c:	e8 11 5f ff ff       	call   c0013042 <File::seek(unsigned long long)>
c001d131:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d134:	31 d2                	xor    edx,edx
c001d136:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d139:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d13d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d141:	52                   	push   edx
c001d142:	50                   	push   eax
c001d143:	55                   	push   ebp
c001d144:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d147:	83 c4 20             	add    esp,0x20
c001d14a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d152:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d156:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d15a:	0f 84 0b 03 00 00    	je     c001d46b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d160:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d167:	31 d2                	xor    edx,edx
c001d169:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d16d:	c1 e8 03             	shr    eax,0x3
c001d170:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d174:	51                   	push   ecx
c001d175:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d179:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d17d:	52                   	push   edx
c001d17e:	50                   	push   eax
c001d17f:	55                   	push   ebp
c001d180:	e8 bd 5e ff ff       	call   c0013042 <File::seek(unsigned long long)>
c001d185:	5b                   	pop    ebx
c001d186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d18a:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d191:	e8 d3 27 ff ff       	call   c000f969 <malloc>
c001d196:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d199:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d19d:	31 d2                	xor    edx,edx
c001d19f:	5e                   	pop    esi
c001d1a0:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d1a4:	50                   	push   eax
c001d1a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1a9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d1ad:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d1b4:	52                   	push   edx
c001d1b5:	50                   	push   eax
c001d1b6:	55                   	push   ebp
c001d1b7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1ba:	83 c4 20             	add    esp,0x20
c001d1bd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d1c5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d1c9:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d1cd:	0f 8d 7c 02 00 00    	jge    c001d44f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d1d3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d1d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d1db:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d1e0:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d1e3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d1e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d1eb:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d1ef:	89 d8                	mov    eax,ebx
c001d1f1:	c1 e8 08             	shr    eax,0x8
c001d1f4:	89 c6                	mov    esi,eax
c001d1f6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d1fa:	c1 e6 04             	shl    esi,0x4
c001d1fd:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d201:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d204:	85 d2                	test   edx,edx
c001d206:	0f 85 bf 00 00 00    	jne    c001d2cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d20c:	83 ec 0c             	sub    esp,0xc
c001d20f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d213:	03 06                	add    eax,DWORD PTR [esi]
c001d215:	50                   	push   eax
c001d216:	e8 4b f8 ff ff       	call   c001ca66 <Thr::getAddressOfKernelSymbol(char const*)>
c001d21b:	83 c4 10             	add    esp,0x10
c001d21e:	89 c2                	mov    edx,eax
c001d220:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d225:	85 c0                	test   eax,eax
c001d227:	0f 85 9e 00 00 00    	jne    c001d2cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d22d:	83 ec 0c             	sub    esp,0xc
c001d230:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d234:	03 06                	add    eax,DWORD PTR [esi]
c001d236:	50                   	push   eax
c001d237:	e8 39 15 ff ff       	call   c000e775 <Krnl::resolveCompatibilitySymbol(char*)>
c001d23c:	83 c4 10             	add    esp,0x10
c001d23f:	89 c2                	mov    edx,eax
c001d241:	85 c0                	test   eax,eax
c001d243:	0f 85 82 00 00 00    	jne    c001d2cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d249:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d24d:	50                   	push   eax
c001d24e:	50                   	push   eax
c001d24f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d253:	03 06                	add    eax,DWORD PTR [esi]
c001d255:	50                   	push   eax
c001d256:	68 72 c6 02 c0       	push   0xc002c672
c001d25b:	e8 61 57 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001d260:	58                   	pop    eax
c001d261:	5a                   	pop    edx
c001d262:	68 8c c6 02 c0       	push   0xc002c68c
c001d267:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d26e:	50                   	push   eax
c001d26f:	e8 98 35 fe ff       	call   c000080c <strcpy>
c001d274:	59                   	pop    ecx
c001d275:	58                   	pop    eax
c001d276:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d27a:	03 06                	add    eax,DWORD PTR [esi]
c001d27c:	50                   	push   eax
c001d27d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d284:	50                   	push   eax
c001d285:	e8 c2 36 fe ff       	call   c000094c <strcat>
c001d28a:	58                   	pop    eax
c001d28b:	5a                   	pop    edx
c001d28c:	68 22 c7 02 c0       	push   0xc002c722
c001d291:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d298:	50                   	push   eax
c001d299:	e8 ae 36 fe ff       	call   c000094c <strcat>
c001d29e:	83 c4 10             	add    esp,0x10
c001d2a1:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d2a6:	0f 84 5d 01 00 00    	je     c001d409 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d2ac:	83 ec 0c             	sub    esp,0xc
c001d2af:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2b6:	50                   	push   eax
c001d2b7:	e8 a3 d0 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c001d2bc:	83 c4 10             	add    esp,0x10
c001d2bf:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d2c3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d2c7:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d2cb:	80 fb 01             	cmp    bl,0x1
c001d2ce:	0f 85 88 00 00 00    	jne    c001d35c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d2d4:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d2db:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d2df:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d2e3:	01 ce                	add    esi,ecx
c001d2e5:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d2eb:	0f 94 c0             	sete   al
c001d2ee:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d2f4:	0f 94 c3             	sete   bl
c001d2f7:	09 c3                	or     ebx,eax
c001d2f9:	8b 06                	mov    eax,DWORD PTR [esi]
c001d2fb:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d300:	74 41                	je     c001d343 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d302:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d305:	84 db                	test   bl,bl
c001d307:	75 15                	jne    c001d31e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d309:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d30d:	66 83 f8 0c          	cmp    ax,0xc
c001d311:	76 05                	jbe    c001d318 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d313:	b8 0c 00 00 00       	mov    eax,0xc
c001d318:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d31c:	76 37                	jbe    c001d355 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d31e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d322:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d327:	0f 84 dc 00 00 00    	je     c001d409 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d32d:	83 ec 0c             	sub    esp,0xc
c001d330:	68 a3 c6 02 c0       	push   0xc002c6a3
c001d335:	e8 25 d0 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c001d33a:	83 c4 10             	add    esp,0x10
c001d33d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d341:	eb 12                	jmp    c001d355 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d343:	01 c1                	add    ecx,eax
c001d345:	84 db                	test   bl,bl
c001d347:	75 0c                	jne    c001d355 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d349:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d34d:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d351:	77 02                	ja     c001d355 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d353:	01 d1                	add    ecx,edx
c001d355:	89 0e                	mov    DWORD PTR [esi],ecx
c001d357:	e9 ea 00 00 00       	jmp    c001d446 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d35c:	80 fb 02             	cmp    bl,0x2
c001d35f:	75 7c                	jne    c001d3dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d361:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d368:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d36c:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d370:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d376:	74 20                	je     c001d398 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d378:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d37e:	74 18                	je     c001d398 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d380:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d384:	b9 0a 00 00 00       	mov    ecx,0xa
c001d389:	66 83 f8 0e          	cmp    ax,0xe
c001d38d:	77 03                	ja     c001d392 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d38f:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d392:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d396:	76 1f                	jbe    c001d3b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d398:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d39c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d3a1:	74 66                	je     c001d409 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d3a3:	83 ec 0c             	sub    esp,0xc
c001d3a6:	68 bf c6 02 c0       	push   0xc002c6bf
c001d3ab:	e8 af cf ff ff       	call   c001a35f <Krnl::panic(char const*)>
c001d3b0:	83 c4 10             	add    esp,0x10
c001d3b3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d3b7:	8b 06                	mov    eax,DWORD PTR [esi]
c001d3b9:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d3be:	74 13                	je     c001d3d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d3c0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d3c4:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d3cb:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d3cf:	01 c8                	add    eax,ecx
c001d3d1:	eb 04                	jmp    c001d3d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d3d3:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d3d7:	01 c2                	add    edx,eax
c001d3d9:	89 16                	mov    DWORD PTR [esi],edx
c001d3db:	eb 69                	jmp    c001d446 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d3dd:	0f b6 db             	movzx  ebx,bl
c001d3e0:	50                   	push   eax
c001d3e1:	50                   	push   eax
c001d3e2:	53                   	push   ebx
c001d3e3:	68 db c6 02 c0       	push   0xc002c6db
c001d3e8:	e8 d4 55 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001d3ed:	83 c4 10             	add    esp,0x10
c001d3f0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d3f5:	74 12                	je     c001d409 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d3f7:	83 ec 0c             	sub    esp,0xc
c001d3fa:	68 e6 c6 02 c0       	push   0xc002c6e6
c001d3ff:	e8 5b cf ff ff       	call   c001a35f <Krnl::panic(char const*)>
c001d404:	83 c4 10             	add    esp,0x10
c001d407:	eb 3d                	jmp    c001d446 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d409:	83 ec 0c             	sub    esp,0xc
c001d40c:	55                   	push   ebp
c001d40d:	e8 d0 5b ff ff       	call   c0012fe2 <File::close()>
c001d412:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d415:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d418:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d41b:	59                   	pop    ecx
c001d41c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d420:	e8 54 25 ff ff       	call   c000f979 <free>
c001d425:	5b                   	pop    ebx
c001d426:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d42a:	e8 4a 25 ff ff       	call   c000f979 <free>
c001d42f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d432:	e8 42 25 ff ff       	call   c000f979 <free>
c001d437:	5e                   	pop    esi
c001d438:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d43c:	e8 38 25 ff ff       	call   c000f979 <free>
c001d441:	83 c4 10             	add    esp,0x10
c001d444:	eb 21                	jmp    c001d467 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d446:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d44a:	e9 76 fd ff ff       	jmp    c001d1c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d44f:	83 ec 0c             	sub    esp,0xc
c001d452:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d456:	e8 1e 25 ff ff       	call   c000f979 <free>
c001d45b:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d45f:	83 c4 10             	add    esp,0x10
c001d462:	e9 eb fc ff ff       	jmp    c001d152 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d467:	31 c0                	xor    eax,eax
c001d469:	eb 33                	jmp    c001d49e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d46b:	83 ec 0c             	sub    esp,0xc
c001d46e:	55                   	push   ebp
c001d46f:	e8 6e 5b ff ff       	call   c0012fe2 <File::close()>
c001d474:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d477:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d47a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d47d:	58                   	pop    eax
c001d47e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d482:	e8 f2 24 ff ff       	call   c000f979 <free>
c001d487:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d48a:	e8 ea 24 ff ff       	call   c000f979 <free>
c001d48f:	5a                   	pop    edx
c001d490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d494:	e8 e0 24 ff ff       	call   c000f979 <free>
c001d499:	83 c4 10             	add    esp,0x10
c001d49c:	b0 01                	mov    al,0x1
c001d49e:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d4a4:	5b                   	pop    ebx
c001d4a5:	5e                   	pop    esi
c001d4a6:	5f                   	pop    edi
c001d4a7:	5d                   	pop    ebp
c001d4a8:	c3                   	ret    

c001d4a9 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d4a9:	56                   	push   esi
c001d4aa:	31 d2                	xor    edx,edx
c001d4ac:	53                   	push   ebx
c001d4ad:	8b 1d 40 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f340
c001d4b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d4b7:	39 d3                	cmp    ebx,edx
c001d4b9:	7e 1b                	jle    c001d4d6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d4bb:	8b 04 95 60 f5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0aa0]
c001d4c2:	39 c8                	cmp    eax,ecx
c001d4c4:	77 0d                	ja     c001d4d3 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d4c6:	8b 34 95 60 f3 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd0ca0]
c001d4cd:	01 c6                	add    esi,eax
c001d4cf:	39 ce                	cmp    esi,ecx
c001d4d1:	77 05                	ja     c001d4d8 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d4d3:	42                   	inc    edx
c001d4d4:	eb e1                	jmp    c001d4b7 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d4d6:	31 c0                	xor    eax,eax
c001d4d8:	5b                   	pop    ebx
c001d4d9:	5e                   	pop    esi
c001d4da:	c3                   	ret    

c001d4db <Thr::getDriverNameFromAddress(unsigned long)>:
c001d4db:	53                   	push   ebx
c001d4dc:	31 c0                	xor    eax,eax
c001d4de:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d4e2:	8b 1d 40 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f340
c001d4e8:	39 c3                	cmp    ebx,eax
c001d4ea:	7e 22                	jle    c001d50e <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d4ec:	8b 14 85 60 f5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0aa0]
c001d4f3:	39 ca                	cmp    edx,ecx
c001d4f5:	77 14                	ja     c001d50b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d4f7:	03 14 85 60 f3 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd0ca0]
c001d4fe:	39 ca                	cmp    edx,ecx
c001d500:	76 09                	jbe    c001d50b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d502:	8b 04 85 60 f7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd08a0]
c001d509:	eb 05                	jmp    c001d510 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d50b:	40                   	inc    eax
c001d50c:	eb da                	jmp    c001d4e8 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d50e:	31 c0                	xor    eax,eax
c001d510:	5b                   	pop    ebx
c001d511:	c3                   	ret    

c001d512 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d512:	53                   	push   ebx
c001d513:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d517:	53                   	push   ebx
c001d518:	e8 8c ff ff ff       	call   c001d4a9 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d51d:	5a                   	pop    edx
c001d51e:	31 d2                	xor    edx,edx
c001d520:	85 c0                	test   eax,eax
c001d522:	74 04                	je     c001d528 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d524:	89 da                	mov    edx,ebx
c001d526:	29 c2                	sub    edx,eax
c001d528:	89 d0                	mov    eax,edx
c001d52a:	5b                   	pop    ebx
c001d52b:	c3                   	ret    

c001d52c <Thr::loadDLL(char const*, bool)>:
c001d52c:	55                   	push   ebp
c001d52d:	57                   	push   edi
c001d52e:	56                   	push   esi
c001d52f:	53                   	push   ebx
c001d530:	81 ec 34 01 00 00    	sub    esp,0x134
c001d536:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d53d:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d544:	56                   	push   esi
c001d545:	68 fe c6 02 c0       	push   0xc002c6fe
c001d54a:	e8 72 54 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001d54f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d556:	e8 0e 24 ff ff       	call   c000f969 <malloc>
c001d55b:	83 c4 0c             	add    esp,0xc
c001d55e:	89 c3                	mov    ebx,eax
c001d560:	ff 35 30 fb 02 c0    	push   DWORD PTR ds:0xc002fb30
c001d566:	56                   	push   esi
c001d567:	50                   	push   eax
c001d568:	e8 b3 59 ff ff       	call   c0012f20 <File::File(char const*, Process*)>
c001d56d:	83 c4 10             	add    esp,0x10
c001d570:	85 db                	test   ebx,ebx
c001d572:	75 3c                	jne    c001d5b0 <Thr::loadDLL(char const*, bool)+0x84>
c001d574:	89 f8                	mov    eax,edi
c001d576:	84 c0                	test   al,al
c001d578:	0f 84 d2 01 00 00    	je     c001d750 <Thr::loadDLL(char const*, bool)+0x224>
c001d57e:	55                   	push   ebp
c001d57f:	55                   	push   ebp
c001d580:	68 0f c7 02 c0       	push   0xc002c70f
c001d585:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d589:	55                   	push   ebp
c001d58a:	e8 7d 32 fe ff       	call   c000080c <strcpy>
c001d58f:	58                   	pop    eax
c001d590:	5a                   	pop    edx
c001d591:	56                   	push   esi
c001d592:	55                   	push   ebp
c001d593:	e8 b4 33 fe ff       	call   c000094c <strcat>
c001d598:	59                   	pop    ecx
c001d599:	58                   	pop    eax
c001d59a:	68 22 c7 02 c0       	push   0xc002c722
c001d59f:	55                   	push   ebp
c001d5a0:	e8 a7 33 fe ff       	call   c000094c <strcat>
c001d5a5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d5a8:	e8 b2 cd ff ff       	call   c001a35f <Krnl::panic(char const*)>
c001d5ad:	83 c4 10             	add    esp,0x10
c001d5b0:	51                   	push   ecx
c001d5b1:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d5b5:	50                   	push   eax
c001d5b6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d5ba:	50                   	push   eax
c001d5bb:	53                   	push   ebx
c001d5bc:	e8 6f 5c ff ff       	call   c0013230 <File::stat(unsigned long long*, bool*)>
c001d5c1:	83 c4 10             	add    esp,0x10
c001d5c4:	85 db                	test   ebx,ebx
c001d5c6:	74 0c                	je     c001d5d4 <Thr::loadDLL(char const*, bool)+0xa8>
c001d5c8:	83 ec 0c             	sub    esp,0xc
c001d5cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d5cd:	53                   	push   ebx
c001d5ce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d5d1:	83 c4 10             	add    esp,0x10
c001d5d4:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d5d9:	75 0a                	jne    c001d5e5 <Thr::loadDLL(char const*, bool)+0xb9>
c001d5db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d5df:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d5e3:	75 3c                	jne    c001d621 <Thr::loadDLL(char const*, bool)+0xf5>
c001d5e5:	89 f8                	mov    eax,edi
c001d5e7:	84 c0                	test   al,al
c001d5e9:	0f 84 49 01 00 00    	je     c001d738 <Thr::loadDLL(char const*, bool)+0x20c>
c001d5ef:	51                   	push   ecx
c001d5f0:	51                   	push   ecx
c001d5f1:	68 0f c7 02 c0       	push   0xc002c70f
c001d5f6:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d5fa:	53                   	push   ebx
c001d5fb:	e8 0c 32 fe ff       	call   c000080c <strcpy>
c001d600:	5d                   	pop    ebp
c001d601:	58                   	pop    eax
c001d602:	56                   	push   esi
c001d603:	53                   	push   ebx
c001d604:	e8 43 33 fe ff       	call   c000094c <strcat>
c001d609:	58                   	pop    eax
c001d60a:	5a                   	pop    edx
c001d60b:	68 22 c7 02 c0       	push   0xc002c722
c001d610:	53                   	push   ebx
c001d611:	e8 36 33 fe ff       	call   c000094c <strcat>
c001d616:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d619:	e8 41 cd ff ff       	call   c001a35f <Krnl::panic(char const*)>
c001d61e:	83 c4 10             	add    esp,0x10
c001d621:	52                   	push   edx
c001d622:	6a 03                	push   0x3
c001d624:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d628:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d62c:	05 ff 0f 00 00       	add    eax,0xfff
c001d631:	83 d2 00             	adc    edx,0x0
c001d634:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d638:	50                   	push   eax
c001d639:	ff 35 70 e7 02 c0    	push   DWORD PTR ds:0xc002e770
c001d63f:	e8 54 47 ff ff       	call   c0011d98 <VAS::allocatePages(int, int)>
c001d644:	59                   	pop    ecx
c001d645:	89 c3                	mov    ebx,eax
c001d647:	5d                   	pop    ebp
c001d648:	50                   	push   eax
c001d649:	68 b9 a8 02 c0       	push   0xc002a8b9
c001d64e:	e8 6e 53 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001d653:	89 34 24             	mov    DWORD PTR [esp],esi
c001d656:	e8 11 31 fe ff       	call   c000076c <strlen>
c001d65b:	8b 2d 40 f3 02 c0    	mov    ebp,DWORD PTR ds:0xc002f340
c001d661:	40                   	inc    eax
c001d662:	89 04 24             	mov    DWORD PTR [esp],eax
c001d665:	e8 ff 22 ff ff       	call   c000f969 <malloc>
c001d66a:	89 04 ad 60 f7 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd08a0],eax
c001d671:	58                   	pop    eax
c001d672:	a1 40 f3 02 c0       	mov    eax,ds:0xc002f340
c001d677:	5a                   	pop    edx
c001d678:	56                   	push   esi
c001d679:	ff 34 85 60 f7 02 c0 	push   DWORD PTR [eax*4-0x3ffd08a0]
c001d680:	e8 87 31 fe ff       	call   c000080c <strcpy>
c001d685:	a1 40 f3 02 c0       	mov    eax,ds:0xc002f340
c001d68a:	8d 50 01             	lea    edx,[eax+0x1]
c001d68d:	89 1c 85 60 f5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0aa0],ebx
c001d694:	89 15 40 f3 02 c0    	mov    DWORD PTR ds:0xc002f340,edx
c001d69a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d69e:	83 c4 0c             	add    esp,0xc
c001d6a1:	89 14 85 60 f3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ca0],edx
c001d6a8:	6a 01                	push   0x1
c001d6aa:	53                   	push   ebx
c001d6ab:	56                   	push   esi
c001d6ac:	e8 c2 f6 ff ff       	call   c001cd73 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d6b1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d6b5:	83 c4 10             	add    esp,0x10
c001d6b8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d6bd:	0f 85 89 00 00 00    	jne    c001d74c <Thr::loadDLL(char const*, bool)+0x220>
c001d6c3:	89 f8                	mov    eax,edi
c001d6c5:	84 c0                	test   al,al
c001d6c7:	74 73                	je     c001d73c <Thr::loadDLL(char const*, bool)+0x210>
c001d6c9:	83 ec 0c             	sub    esp,0xc
c001d6cc:	68 24 c7 02 c0       	push   0xc002c724
c001d6d1:	e8 89 cc ff ff       	call   c001a35f <Krnl::panic(char const*)>
c001d6d6:	83 c4 10             	add    esp,0x10
c001d6d9:	eb 61                	jmp    c001d73c <Thr::loadDLL(char const*, bool)+0x210>
c001d6db:	50                   	push   eax
c001d6dc:	50                   	push   eax
c001d6dd:	89 e8                	mov    eax,ebp
c001d6df:	c1 e0 0c             	shl    eax,0xc
c001d6e2:	01 d8                	add    eax,ebx
c001d6e4:	50                   	push   eax
c001d6e5:	ff 35 70 e7 02 c0    	push   DWORD PTR ds:0xc002e770
c001d6eb:	e8 10 42 ff ff       	call   c0011900 <VAS::getPageTableEntry(unsigned long)>
c001d6f0:	83 c4 10             	add    esp,0x10
c001d6f3:	8b 00                	mov    eax,DWORD PTR [eax]
c001d6f5:	a8 60                	test   al,0x60
c001d6f7:	75 11                	jne    c001d70a <Thr::loadDLL(char const*, bool)+0x1de>
c001d6f9:	83 ec 0c             	sub    esp,0xc
c001d6fc:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d701:	50                   	push   eax
c001d702:	e8 ed 25 ff ff       	call   c000fcf4 <Phys::freePage(unsigned long)>
c001d707:	83 c4 10             	add    esp,0x10
c001d70a:	45                   	inc    ebp
c001d70b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d70f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d713:	05 ff 0f 00 00       	add    eax,0xfff
c001d718:	bf 00 00 00 00       	mov    edi,0x0
c001d71d:	83 d2 00             	adc    edx,0x0
c001d720:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d724:	c1 ea 0c             	shr    edx,0xc
c001d727:	39 c5                	cmp    ebp,eax
c001d729:	89 d1                	mov    ecx,edx
c001d72b:	89 f8                	mov    eax,edi
c001d72d:	19 c8                	sbb    eax,ecx
c001d72f:	72 aa                	jb     c001d6db <Thr::loadDLL(char const*, bool)+0x1af>
c001d731:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d736:	75 18                	jne    c001d750 <Thr::loadDLL(char const*, bool)+0x224>
c001d738:	31 db                	xor    ebx,ebx
c001d73a:	eb 14                	jmp    c001d750 <Thr::loadDLL(char const*, bool)+0x224>
c001d73c:	83 ec 0c             	sub    esp,0xc
c001d73f:	68 43 c7 02 c0       	push   0xc002c743
c001d744:	e8 16 cc ff ff       	call   c001a35f <Krnl::panic(char const*)>
c001d749:	83 c4 10             	add    esp,0x10
c001d74c:	31 ed                	xor    ebp,ebp
c001d74e:	eb bb                	jmp    c001d70b <Thr::loadDLL(char const*, bool)+0x1df>
c001d750:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d756:	89 d8                	mov    eax,ebx
c001d758:	5b                   	pop    ebx
c001d759:	5e                   	pop    esi
c001d75a:	5f                   	pop    edi
c001d75b:	5d                   	pop    ebp
c001d75c:	c3                   	ret    

c001d75d <Thr::executeDLL(unsigned long, void*)>:
c001d75d:	56                   	push   esi
c001d75e:	53                   	push   ebx
c001d75f:	52                   	push   edx
c001d760:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d764:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d768:	85 db                	test   ebx,ebx
c001d76a:	75 10                	jne    c001d77c <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d76c:	83 ec 0c             	sub    esp,0xc
c001d76f:	68 5f c7 02 c0       	push   0xc002c75f
c001d774:	e8 e6 cb ff ff       	call   c001a35f <Krnl::panic(char const*)>
c001d779:	83 c4 10             	add    esp,0x10
c001d77c:	50                   	push   eax
c001d77d:	50                   	push   eax
c001d77e:	53                   	push   ebx
c001d77f:	68 89 c7 02 c0       	push   0xc002c789
c001d784:	e8 38 52 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001d789:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d78d:	89 d8                	mov    eax,ebx
c001d78f:	83 c4 14             	add    esp,0x14
c001d792:	5b                   	pop    ebx
c001d793:	5e                   	pop    esi
c001d794:	ff e0                	jmp    eax

c001d796 <userModeEntryPoint(void*)>:
c001d796:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001d79b:	48                   	dec    eax
c001d79c:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001d7a1:	75 01                	jne    c001d7a4 <userModeEntryPoint(void*)+0xe>
c001d7a3:	fb                   	sti    
c001d7a4:	fb                   	sti    
c001d7a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d7aa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d7ad:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d7b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d7b7:	e9 6e 2b fe ff       	jmp    c000032a <goToUsermode>

c001d7bc <changeTSS>:
c001d7bc:	83 ec 14             	sub    esp,0x14
c001d7bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d7c4:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d7c7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d7cc:	c1 e2 15             	shl    edx,0x15
c001d7cf:	29 d0                	sub    eax,edx
c001d7d1:	50                   	push   eax
c001d7d2:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001d7d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d7dd:	05 7c 11 00 00       	add    eax,0x117c
c001d7e2:	50                   	push   eax
c001d7e3:	e8 5c 37 ff ff       	call   c0010f44 <TSS::setESP(unsigned long)>
c001d7e8:	83 c4 1c             	add    esp,0x1c
c001d7eb:	c3                   	ret    

c001d7ec <switchToThread(ThreadControlBlock*)>:
c001d7ec:	57                   	push   edi
c001d7ed:	a1 04 fb 02 c0       	mov    eax,ds:0xc002fb04
c001d7f2:	56                   	push   esi
c001d7f3:	85 c0                	test   eax,eax
c001d7f5:	53                   	push   ebx
c001d7f6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d7fa:	0f 85 88 00 00 00    	jne    c001d888 <switchToThread(ThreadControlBlock*)+0x9c>
c001d800:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d803:	3c ff                	cmp    al,0xff
c001d805:	74 7d                	je     c001d884 <switchToThread(ThreadControlBlock*)+0x98>
c001d807:	0f b6 d0             	movzx  edx,al
c001d80a:	b8 84 03 00 00       	mov    eax,0x384
c001d80f:	29 d0                	sub    eax,edx
c001d811:	c1 e0 10             	shl    eax,0x10
c001d814:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d817:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d81a:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001d81f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d825:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d82c:	74 4a                	je     c001d878 <switchToThread(ThreadControlBlock*)+0x8c>
c001d82e:	0f 31                	rdtsc  
c001d830:	a3 48 fb 02 c0       	mov    ds:0xc002fb48,eax
c001d835:	89 c6                	mov    esi,eax
c001d837:	89 d7                	mov    edi,edx
c001d839:	2b 35 38 fb 02 c0    	sub    esi,DWORD PTR ds:0xc002fb38
c001d83f:	89 15 4c fb 02 c0    	mov    DWORD PTR ds:0xc002fb4c,edx
c001d845:	1b 3d 3c fb 02 c0    	sbb    edi,DWORD PTR ds:0xc002fb3c
c001d84b:	89 35 40 fb 02 c0    	mov    DWORD PTR ds:0xc002fb40,esi
c001d851:	a3 38 fb 02 c0       	mov    ds:0xc002fb38,eax
c001d856:	89 3d 44 fb 02 c0    	mov    DWORD PTR ds:0xc002fb44,edi
c001d85c:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d862:	89 15 3c fb 02 c0    	mov    DWORD PTR ds:0xc002fb3c,edx
c001d868:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d86b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d86e:	01 c6                	add    esi,eax
c001d870:	11 d7                	adc    edi,edx
c001d872:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d875:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d878:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d87c:	5b                   	pop    ebx
c001d87d:	5e                   	pop    esi
c001d87e:	5f                   	pop    edi
c001d87f:	e9 de 2a fe ff       	jmp    c0000362 <switchToThreadASM>
c001d884:	31 c0                	xor    eax,eax
c001d886:	eb 8f                	jmp    c001d817 <switchToThread(ThreadControlBlock*)+0x2b>
c001d888:	5b                   	pop    ebx
c001d889:	c7 05 00 fb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fb00,0x1
c001d893:	5e                   	pop    esi
c001d894:	5f                   	pop    edi
c001d895:	c3                   	ret    

c001d896 <Process::addArgs(char**)>:
c001d896:	57                   	push   edi
c001d897:	56                   	push   esi
c001d898:	53                   	push   ebx
c001d899:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d89d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d8a1:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d8ab:	85 ff                	test   edi,edi
c001d8ad:	74 3d                	je     c001d8ec <Process::addArgs(char**)+0x56>
c001d8af:	8b 07                	mov    eax,DWORD PTR [edi]
c001d8b1:	85 c0                	test   eax,eax
c001d8b3:	74 37                	je     c001d8ec <Process::addArgs(char**)+0x56>
c001d8b5:	31 db                	xor    ebx,ebx
c001d8b7:	83 ec 0c             	sub    esp,0xc
c001d8ba:	50                   	push   eax
c001d8bb:	e8 ac 2e fe ff       	call   c000076c <strlen>
c001d8c0:	40                   	inc    eax
c001d8c1:	89 04 24             	mov    DWORD PTR [esp],eax
c001d8c4:	e8 a0 20 ff ff       	call   c000f969 <malloc>
c001d8c9:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d8d0:	5a                   	pop    edx
c001d8d1:	59                   	pop    ecx
c001d8d2:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d8d5:	43                   	inc    ebx
c001d8d6:	50                   	push   eax
c001d8d7:	e8 30 2f fe ff       	call   c000080c <strcpy>
c001d8dc:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d8e2:	83 c4 10             	add    esp,0x10
c001d8e5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d8e8:	85 c0                	test   eax,eax
c001d8ea:	75 cb                	jne    c001d8b7 <Process::addArgs(char**)+0x21>
c001d8ec:	5b                   	pop    ebx
c001d8ed:	5e                   	pop    esi
c001d8ee:	5f                   	pop    edi
c001d8ef:	c3                   	ret    

c001d8f0 <Process::Process(char const*, Process*, char**)>:
c001d8f0:	56                   	push   esi
c001d8f1:	53                   	push   ebx
c001d8f2:	83 ec 14             	sub    esp,0x14
c001d8f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8f9:	05 0c 02 00 00       	add    eax,0x20c
c001d8fe:	bb 07 00 00 00       	mov    ebx,0x7
c001d903:	89 c6                	mov    esi,eax
c001d905:	85 db                	test   ebx,ebx
c001d907:	78 12                	js     c001d91b <Process::Process(char const*, Process*, char**)+0x2b>
c001d909:	83 ec 0c             	sub    esp,0xc
c001d90c:	56                   	push   esi
c001d90d:	e8 f4 b7 00 00       	call   c0029106 <ThreadControlBlock::ThreadControlBlock()>
c001d912:	83 c4 10             	add    esp,0x10
c001d915:	83 c6 63             	add    esi,0x63
c001d918:	4b                   	dec    ebx
c001d919:	eb ea                	jmp    c001d905 <Process::Process(char const*, Process*, char**)+0x15>
c001d91b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d91f:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d926:	83 ec 0c             	sub    esp,0xc
c001d929:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d92d:	e8 b6 c8 ff ff       	call   c001a1e8 <Krnl::newProcessEnv(Process*)>
c001d932:	83 c4 10             	add    esp,0x10
c001d935:	89 c2                	mov    edx,eax
c001d937:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d93b:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d941:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d945:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d94e:	a1 90 db 02 c0       	mov    eax,ds:0xc002db90
c001d953:	8d 50 01             	lea    edx,[eax+0x1]
c001d956:	89 15 90 db 02 c0    	mov    DWORD PTR ds:0xc002db90,edx
c001d95c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d960:	89 02                	mov    DWORD PTR [edx],eax
c001d962:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d96a:	83 ec 0c             	sub    esp,0xc
c001d96d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d971:	e8 f3 1f ff ff       	call   c000f969 <malloc>
c001d976:	83 c4 10             	add    esp,0x10
c001d979:	89 c3                	mov    ebx,eax
c001d97b:	83 ec 08             	sub    esp,0x8
c001d97e:	6a 00                	push   0x0
c001d980:	53                   	push   ebx
c001d981:	e8 ba 47 ff ff       	call   c0012140 <VAS::VAS(bool)>
c001d986:	83 c4 10             	add    esp,0x10
c001d989:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d98d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d993:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d997:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d9a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d9a9:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d9af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9b3:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d9b9:	85 c0                	test   eax,eax
c001d9bb:	74 42                	je     c001d9ff <Process::Process(char const*, Process*, char**)+0x10f>
c001d9bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9c1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d9c7:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d9cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9d1:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d9d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9db:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d9e1:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d9e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9eb:	05 0c 01 00 00       	add    eax,0x10c
c001d9f0:	83 ec 08             	sub    esp,0x8
c001d9f3:	52                   	push   edx
c001d9f4:	50                   	push   eax
c001d9f5:	e8 12 2e fe ff       	call   c000080c <strcpy>
c001d9fa:	83 c4 10             	add    esp,0x10
c001d9fd:	eb 63                	jmp    c001da62 <Process::Process(char const*, Process*, char**)+0x172>
c001d9ff:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001da07:	83 ec 0c             	sub    esp,0xc
c001da0a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001da0e:	e8 56 1f ff ff       	call   c000f969 <malloc>
c001da13:	83 c4 10             	add    esp,0x10
c001da16:	89 c3                	mov    ebx,eax
c001da18:	83 ec 08             	sub    esp,0x8
c001da1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da1f:	53                   	push   ebx
c001da20:	e8 31 32 ff ff       	call   c0010c56 <VgaText::VgaText(char const*)>
c001da25:	83 c4 10             	add    esp,0x10
c001da28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da2c:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001da32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da36:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001da3c:	83 ec 0c             	sub    esp,0xc
c001da3f:	50                   	push   eax
c001da40:	e8 d0 29 ff ff       	call   c0010415 <addToTerminalCycle(VgaText*)>
c001da45:	83 c4 10             	add    esp,0x10
c001da48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da4c:	05 0c 01 00 00       	add    eax,0x10c
c001da51:	83 ec 08             	sub    esp,0x8
c001da54:	68 a8 c7 02 c0       	push   0xc002c7a8
c001da59:	50                   	push   eax
c001da5a:	e8 ad 2d fe ff       	call   c000080c <strcpy>
c001da5f:	83 c4 10             	add    esp,0x10
c001da62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da66:	83 c0 0c             	add    eax,0xc
c001da69:	83 ec 08             	sub    esp,0x8
c001da6c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da70:	50                   	push   eax
c001da71:	e8 96 2d fe ff       	call   c000080c <strcpy>
c001da76:	83 c4 10             	add    esp,0x10
c001da79:	83 ec 08             	sub    esp,0x8
c001da7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001da80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da84:	e8 0d fe ff ff       	call   c001d896 <Process::addArgs(char**)>
c001da89:	83 c4 10             	add    esp,0x10
c001da8c:	83 ec 08             	sub    esp,0x8
c001da8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da97:	e8 a1 ed ff ff       	call   c001c83d <Thr::loadProgramIntoMemory(Process*, char const*)>
c001da9c:	83 c4 10             	add    esp,0x10
c001da9f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001daa3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001daa7:	83 f0 01             	xor    eax,0x1
c001daaa:	88 c2                	mov    dl,al
c001daac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dab0:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dab6:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dabb:	83 ec 08             	sub    esp,0x8
c001dabe:	50                   	push   eax
c001dabf:	68 00 c8 02 c0       	push   0xc002c800
c001dac4:	e8 f8 4e ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001dac9:	83 c4 10             	add    esp,0x10
c001dacc:	90                   	nop
c001dacd:	83 c4 14             	add    esp,0x14
c001dad0:	5b                   	pop    ebx
c001dad1:	5e                   	pop    esi
c001dad2:	c3                   	ret    
c001dad3:	90                   	nop

c001dad4 <Process::Process(bool, char const*, Process*, char**)>:
c001dad4:	56                   	push   esi
c001dad5:	53                   	push   ebx
c001dad6:	83 ec 24             	sub    esp,0x24
c001dad9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dadd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dae1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dae5:	05 0c 02 00 00       	add    eax,0x20c
c001daea:	bb 07 00 00 00       	mov    ebx,0x7
c001daef:	89 c6                	mov    esi,eax
c001daf1:	85 db                	test   ebx,ebx
c001daf3:	78 12                	js     c001db07 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001daf5:	83 ec 0c             	sub    esp,0xc
c001daf8:	56                   	push   esi
c001daf9:	e8 08 b6 00 00       	call   c0029106 <ThreadControlBlock::ThreadControlBlock()>
c001dafe:	83 c4 10             	add    esp,0x10
c001db01:	83 c6 63             	add    esi,0x63
c001db04:	4b                   	dec    ebx
c001db05:	eb ea                	jmp    c001daf1 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001db07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db0b:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001db12:	83 ec 0c             	sub    esp,0xc
c001db15:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001db19:	e8 ca c6 ff ff       	call   c001a1e8 <Krnl::newProcessEnv(Process*)>
c001db1e:	83 c4 10             	add    esp,0x10
c001db21:	89 c2                	mov    edx,eax
c001db23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db27:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001db2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db31:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001db3a:	a1 90 db 02 c0       	mov    eax,ds:0xc002db90
c001db3f:	8d 50 01             	lea    edx,[eax+0x1]
c001db42:	89 15 90 db 02 c0    	mov    DWORD PTR ds:0xc002db90,edx
c001db48:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001db4c:	89 02                	mov    DWORD PTR [edx],eax
c001db4e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001db56:	83 ec 0c             	sub    esp,0xc
c001db59:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001db5d:	e8 07 1e ff ff       	call   c000f969 <malloc>
c001db62:	83 c4 10             	add    esp,0x10
c001db65:	89 c3                	mov    ebx,eax
c001db67:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001db6c:	83 ec 08             	sub    esp,0x8
c001db6f:	50                   	push   eax
c001db70:	53                   	push   ebx
c001db71:	e8 ca 45 ff ff       	call   c0012140 <VAS::VAS(bool)>
c001db76:	83 c4 10             	add    esp,0x10
c001db79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db7d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001db83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db87:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001db91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db95:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001db99:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001db9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dba3:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dba9:	85 c0                	test   eax,eax
c001dbab:	74 42                	je     c001dbef <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dbad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbb1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbb7:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dbbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbc1:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dbc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbcb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbd1:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dbd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbdb:	05 0c 01 00 00       	add    eax,0x10c
c001dbe0:	83 ec 08             	sub    esp,0x8
c001dbe3:	52                   	push   edx
c001dbe4:	50                   	push   eax
c001dbe5:	e8 22 2c fe ff       	call   c000080c <strcpy>
c001dbea:	83 c4 10             	add    esp,0x10
c001dbed:	eb 63                	jmp    c001dc52 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dbef:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001dbf7:	83 ec 0c             	sub    esp,0xc
c001dbfa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dbfe:	e8 66 1d ff ff       	call   c000f969 <malloc>
c001dc03:	83 c4 10             	add    esp,0x10
c001dc06:	89 c3                	mov    ebx,eax
c001dc08:	83 ec 08             	sub    esp,0x8
c001dc0b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dc0f:	53                   	push   ebx
c001dc10:	e8 41 30 ff ff       	call   c0010c56 <VgaText::VgaText(char const*)>
c001dc15:	83 c4 10             	add    esp,0x10
c001dc18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc1c:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dc22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc26:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dc2c:	83 ec 0c             	sub    esp,0xc
c001dc2f:	50                   	push   eax
c001dc30:	e8 e0 27 ff ff       	call   c0010415 <addToTerminalCycle(VgaText*)>
c001dc35:	83 c4 10             	add    esp,0x10
c001dc38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc3c:	05 0c 01 00 00       	add    eax,0x10c
c001dc41:	83 ec 08             	sub    esp,0x8
c001dc44:	68 a8 c7 02 c0       	push   0xc002c7a8
c001dc49:	50                   	push   eax
c001dc4a:	e8 bd 2b fe ff       	call   c000080c <strcpy>
c001dc4f:	83 c4 10             	add    esp,0x10
c001dc52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc56:	83 c0 0c             	add    eax,0xc
c001dc59:	83 ec 08             	sub    esp,0x8
c001dc5c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dc60:	50                   	push   eax
c001dc61:	e8 a6 2b fe ff       	call   c000080c <strcpy>
c001dc66:	83 c4 10             	add    esp,0x10
c001dc69:	83 ec 08             	sub    esp,0x8
c001dc6c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dc70:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc74:	e8 1d fc ff ff       	call   c001d896 <Process::addArgs(char**)>
c001dc79:	83 c4 10             	add    esp,0x10
c001dc7c:	90                   	nop
c001dc7d:	83 c4 24             	add    esp,0x24
c001dc80:	5b                   	pop    ebx
c001dc81:	5e                   	pop    esi
c001dc82:	c3                   	ret    

c001dc83 <taskStartupFunction>:
c001dc83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc88:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001dc8b:	c3                   	ret    

c001dc8c <Semaphore::Semaphore(int)>:
c001dc8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dc90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dc94:	89 10                	mov    DWORD PTR [eax],edx
c001dc96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dc9a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dca1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dca5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001dcac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dcb0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dcb7:	90                   	nop
c001dcb8:	c3                   	ret    
c001dcb9:	90                   	nop

c001dcba <Mutex::Mutex()>:
c001dcba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dcbe:	6a 01                	push   0x1
c001dcc0:	50                   	push   eax
c001dcc1:	e8 c6 ff ff ff       	call   c001dc8c <Semaphore::Semaphore(int)>
c001dcc6:	83 c4 08             	add    esp,0x8
c001dcc9:	90                   	nop
c001dcca:	c3                   	ret    
c001dccb:	90                   	nop

c001dccc <Process::createThread(void (*)(void*), void*, int)>:
c001dccc:	55                   	push   ebp
c001dccd:	31 c9                	xor    ecx,ecx
c001dccf:	57                   	push   edi
c001dcd0:	56                   	push   esi
c001dcd1:	53                   	push   ebx
c001dcd2:	83 ec 1c             	sub    esp,0x1c
c001dcd5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dcd9:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001dce0:	89 f2                	mov    edx,esi
c001dce2:	0f b7 c2             	movzx  eax,dx
c001dce5:	83 e2 01             	and    edx,0x1
c001dce8:	74 16                	je     c001dd00 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001dcea:	d1 f8                	sar    eax,1
c001dcec:	41                   	inc    ecx
c001dced:	89 c2                	mov    edx,eax
c001dcef:	83 f9 10             	cmp    ecx,0x10
c001dcf2:	75 ee                	jne    c001dce2 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001dcf4:	83 c4 1c             	add    esp,0x1c
c001dcf7:	31 db                	xor    ebx,ebx
c001dcf9:	89 d8                	mov    eax,ebx
c001dcfb:	5b                   	pop    ebx
c001dcfc:	5e                   	pop    esi
c001dcfd:	5f                   	pop    edi
c001dcfe:	5d                   	pop    ebp
c001dcff:	c3                   	ret    
c001dd00:	b8 01 00 00 00       	mov    eax,0x1
c001dd05:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001dd08:	d3 e0                	shl    eax,cl
c001dd0a:	09 c6                	or     esi,eax
c001dd0c:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001dd0f:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001dd16:	89 c6                	mov    esi,eax
c001dd18:	c1 e6 05             	shl    esi,0x5
c001dd1b:	01 f0                	add    eax,esi
c001dd1d:	01 d8                	add    eax,ebx
c001dd1f:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001dd26:	75 0a                	jne    c001dd32 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001dd28:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001dd32:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dd38:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001dd3c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001dd3f:	01 ca                	add    edx,ecx
c001dd41:	83 ec 08             	sub    esp,0x8
c001dd44:	89 d0                	mov    eax,edx
c001dd46:	c1 e0 05             	shl    eax,0x5
c001dd49:	01 d0                	add    eax,edx
c001dd4b:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001dd4f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dd53:	01 d8                	add    eax,ebx
c001dd55:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001dd5b:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001dd61:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001dd67:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001dd6d:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001dd73:	89 cd                	mov    ebp,ecx
c001dd75:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001dd79:	f7 dd                	neg    ebp
c001dd7b:	c1 e5 15             	shl    ebp,0x15
c001dd7e:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001dd84:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001dd8a:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001dd94:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001dd9a:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001dda4:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001ddae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ddb2:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001ddb9:	53                   	push   ebx
c001ddba:	68 24 fb 02 c0       	push   0xc002fb24
c001ddbf:	e8 fc b0 00 00       	call   c0028ec0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ddc4:	89 d8                	mov    eax,ebx
c001ddc6:	83 c4 10             	add    esp,0x10
c001ddc9:	83 c4 1c             	add    esp,0x1c
c001ddcc:	5b                   	pop    ebx
c001ddcd:	5e                   	pop    esi
c001ddce:	5f                   	pop    edi
c001ddcf:	5d                   	pop    ebp
c001ddd0:	c3                   	ret    
c001ddd1:	90                   	nop

c001ddd2 <Process::createUserThread()>:
c001ddd2:	83 ec 0c             	sub    esp,0xc
c001ddd5:	68 80 00 00 00       	push   0x80
c001ddda:	6a 00                	push   0x0
c001dddc:	68 96 d7 01 c0       	push   0xc001d796
c001dde1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dde5:	e8 e2 fe ff ff       	call   c001dccc <Process::createThread(void (*)(void*), void*, int)>
c001ddea:	83 c4 1c             	add    esp,0x1c
c001dded:	c3                   	ret    

c001ddee <setupMultitasking(void (*)())>:
c001ddee:	56                   	push   esi
c001ddef:	53                   	push   ebx
c001ddf0:	51                   	push   ecx
c001ddf1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ddf5:	eb 10                	jmp    c001de07 <setupMultitasking(void (*)())+0x19>
c001ddf7:	83 ec 0c             	sub    esp,0xc
c001ddfa:	68 24 fb 02 c0       	push   0xc002fb24
c001ddff:	e8 0e b0 00 00       	call   c0028e12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001de04:	83 c4 10             	add    esp,0x10
c001de07:	83 ec 0c             	sub    esp,0xc
c001de0a:	68 24 fb 02 c0       	push   0xc002fb24
c001de0f:	e8 da af 00 00       	call   c0028dee <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001de14:	83 c4 10             	add    esp,0x10
c001de17:	84 c0                	test   al,al
c001de19:	74 dc                	je     c001ddf7 <setupMultitasking(void (*)())+0x9>
c001de1b:	83 ec 0c             	sub    esp,0xc
c001de1e:	68 3f 07 00 00       	push   0x73f
c001de23:	e8 41 1b ff ff       	call   c000f969 <malloc>
c001de28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001de2f:	89 c3                	mov    ebx,eax
c001de31:	6a 00                	push   0x0
c001de33:	68 ac c7 02 c0       	push   0xc002c7ac
c001de38:	6a 01                	push   0x1
c001de3a:	50                   	push   eax
c001de3b:	e8 94 fc ff ff       	call   c001dad4 <Process::Process(bool, char const*, Process*, char**)>
c001de40:	83 c4 14             	add    esp,0x14
c001de43:	89 1d 30 fb 02 c0    	mov    DWORD PTR ds:0xc002fb30,ebx
c001de49:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001de4f:	e8 cf 28 ff ff       	call   c0010723 <setActiveTerminal(VgaText*)>
c001de54:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001de5c:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001de66:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001de6c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001de6f:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001de79:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001de7f:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001de85:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001de8f:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001de99:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001dea3:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001dea9:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001deb3:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001deb9:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001dec3:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001dec9:	58                   	pop    eax
c001deca:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001ded0:	5a                   	pop    edx
c001ded1:	68 a8 c7 02 c0       	push   0xc002c7a8
c001ded6:	50                   	push   eax
c001ded7:	e8 30 29 fe ff       	call   c000080c <strcpy>
c001dedc:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001dee3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001dee7:	83 c4 14             	add    esp,0x14
c001deea:	5b                   	pop    ebx
c001deeb:	5e                   	pop    esi
c001deec:	e9 63 24 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001def1 <schedule()>:
c001def1:	a1 04 fb 02 c0       	mov    eax,ds:0xc002fb04
c001def6:	85 c0                	test   eax,eax
c001def8:	74 0b                	je     c001df05 <schedule()+0x14>
c001defa:	c7 05 00 fb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fb00,0x1
c001df04:	c3                   	ret    
c001df05:	53                   	push   ebx
c001df06:	83 ec 14             	sub    esp,0x14
c001df09:	68 24 fb 02 c0       	push   0xc002fb24
c001df0e:	e8 db ae 00 00       	call   c0028dee <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001df13:	83 c4 10             	add    esp,0x10
c001df16:	84 c0                	test   al,al
c001df18:	75 38                	jne    c001df52 <schedule()+0x61>
c001df1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df1f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001df22:	4a                   	dec    edx
c001df23:	74 32                	je     c001df57 <schedule()+0x66>
c001df25:	83 ec 0c             	sub    esp,0xc
c001df28:	68 24 fb 02 c0       	push   0xc002fb24
c001df2d:	e8 d8 ae 00 00       	call   c0028e0a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001df32:	c7 04 24 24 fb 02 c0 	mov    DWORD PTR [esp],0xc002fb24
c001df39:	89 c3                	mov    ebx,eax
c001df3b:	e8 d2 ae 00 00       	call   c0028e12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001df40:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001df47:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001df4a:	e8 9d f8 ff ff       	call   c001d7ec <switchToThread(ThreadControlBlock*)>
c001df4f:	83 c4 10             	add    esp,0x10
c001df52:	83 c4 08             	add    esp,0x8
c001df55:	5b                   	pop    ebx
c001df56:	c3                   	ret    
c001df57:	83 ec 08             	sub    esp,0x8
c001df5a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001df61:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001df67:	68 24 fb 02 c0       	push   0xc002fb24
c001df6c:	e8 4f af 00 00       	call   c0028ec0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df71:	83 c4 10             	add    esp,0x10
c001df74:	eb af                	jmp    c001df25 <schedule()+0x34>

c001df76 <Semaphore::tryAcquire()>:
c001df76:	53                   	push   ebx
c001df77:	83 ec 08             	sub    esp,0x8
c001df7a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001df7e:	fa                   	cli    
c001df7f:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001df84:	8d 50 01             	lea    edx,[eax+0x1]
c001df87:	89 15 08 fb 02 c0    	mov    DWORD PTR ds:0xc002fb08,edx
c001df8d:	8b 15 04 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb04
c001df93:	8d 5a 01             	lea    ebx,[edx+0x1]
c001df96:	89 1d 04 fb 02 c0    	mov    DWORD PTR ds:0xc002fb04,ebx
c001df9c:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001df9f:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001dfa1:	7c 2a                	jl     c001dfcd <Semaphore::tryAcquire()+0x57>
c001dfa3:	89 15 04 fb 02 c0    	mov    DWORD PTR ds:0xc002fb04,edx
c001dfa9:	85 d2                	test   edx,edx
c001dfab:	75 0a                	jne    c001dfb7 <Semaphore::tryAcquire()+0x41>
c001dfad:	8b 15 00 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb00
c001dfb3:	85 d2                	test   edx,edx
c001dfb5:	75 5b                	jne    c001e012 <Semaphore::tryAcquire()+0x9c>
c001dfb7:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001dfbc:	85 c0                	test   eax,eax
c001dfbe:	74 07                	je     c001dfc7 <Semaphore::tryAcquire()+0x51>
c001dfc0:	31 c0                	xor    eax,eax
c001dfc2:	83 c4 08             	add    esp,0x8
c001dfc5:	5b                   	pop    ebx
c001dfc6:	c3                   	ret    
c001dfc7:	fb                   	sti    
c001dfc8:	83 c4 08             	add    esp,0x8
c001dfcb:	5b                   	pop    ebx
c001dfcc:	c3                   	ret    
c001dfcd:	43                   	inc    ebx
c001dfce:	89 15 04 fb 02 c0    	mov    DWORD PTR ds:0xc002fb04,edx
c001dfd4:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001dfd7:	85 d2                	test   edx,edx
c001dfd9:	75 1f                	jne    c001dffa <Semaphore::tryAcquire()+0x84>
c001dfdb:	8b 0d 00 fb 02 c0    	mov    ecx,DWORD PTR ds:0xc002fb00
c001dfe1:	85 c9                	test   ecx,ecx
c001dfe3:	74 15                	je     c001dffa <Semaphore::tryAcquire()+0x84>
c001dfe5:	c7 05 00 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb00,0x0
c001dfef:	e8 fd fe ff ff       	call   c001def1 <schedule()>
c001dff4:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001dff9:	48                   	dec    eax
c001dffa:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001dfff:	85 c0                	test   eax,eax
c001e001:	75 08                	jne    c001e00b <Semaphore::tryAcquire()+0x95>
c001e003:	fb                   	sti    
c001e004:	b0 01                	mov    al,0x1
c001e006:	83 c4 08             	add    esp,0x8
c001e009:	5b                   	pop    ebx
c001e00a:	c3                   	ret    
c001e00b:	b0 01                	mov    al,0x1
c001e00d:	83 c4 08             	add    esp,0x8
c001e010:	5b                   	pop    ebx
c001e011:	c3                   	ret    
c001e012:	c7 05 00 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb00,0x0
c001e01c:	e8 d0 fe ff ff       	call   c001def1 <schedule()>
c001e021:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001e026:	48                   	dec    eax
c001e027:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001e02c:	85 c0                	test   eax,eax
c001e02e:	75 90                	jne    c001dfc0 <Semaphore::tryAcquire()+0x4a>
c001e030:	eb 95                	jmp    c001dfc7 <Semaphore::tryAcquire()+0x51>

c001e032 <Semaphore::assertLocked(char const*)>:
c001e032:	83 ec 0c             	sub    esp,0xc
c001e035:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e039:	fa                   	cli    
c001e03a:	ff 05 08 fb 02 c0    	inc    DWORD PTR ds:0xc002fb08
c001e040:	a1 04 fb 02 c0       	mov    eax,ds:0xc002fb04
c001e045:	8d 48 01             	lea    ecx,[eax+0x1]
c001e048:	89 0d 04 fb 02 c0    	mov    DWORD PTR ds:0xc002fb04,ecx
c001e04e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e050:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e053:	7c 24                	jl     c001e079 <Semaphore::assertLocked(char const*)+0x47>
c001e055:	a3 04 fb 02 c0       	mov    ds:0xc002fb04,eax
c001e05a:	85 c0                	test   eax,eax
c001e05c:	75 09                	jne    c001e067 <Semaphore::assertLocked(char const*)+0x35>
c001e05e:	a1 00 fb 02 c0       	mov    eax,ds:0xc002fb00
c001e063:	85 c0                	test   eax,eax
c001e065:	75 29                	jne    c001e090 <Semaphore::assertLocked(char const*)+0x5e>
c001e067:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001e06c:	48                   	dec    eax
c001e06d:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001e072:	75 01                	jne    c001e075 <Semaphore::assertLocked(char const*)+0x43>
c001e074:	fb                   	sti    
c001e075:	83 c4 0c             	add    esp,0xc
c001e078:	c3                   	ret    
c001e079:	83 ec 0c             	sub    esp,0xc
c001e07c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e080:	e8 da c2 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c001e085:	a1 04 fb 02 c0       	mov    eax,ds:0xc002fb04
c001e08a:	83 c4 10             	add    esp,0x10
c001e08d:	48                   	dec    eax
c001e08e:	eb c5                	jmp    c001e055 <Semaphore::assertLocked(char const*)+0x23>
c001e090:	c7 05 00 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb00,0x0
c001e09a:	e8 52 fe ff ff       	call   c001def1 <schedule()>
c001e09f:	eb c6                	jmp    c001e067 <Semaphore::assertLocked(char const*)+0x35>

c001e0a1 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e0a1:	83 ec 0c             	sub    esp,0xc
c001e0a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e0ad:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e0b0:	e8 3c fe ff ff       	call   c001def1 <schedule()>
c001e0b5:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001e0ba:	48                   	dec    eax
c001e0bb:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001e0c0:	75 01                	jne    c001e0c3 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001e0c2:	fb                   	sti    
c001e0c3:	83 c4 0c             	add    esp,0xc
c001e0c6:	c3                   	ret    

c001e0c7 <blockTask(TaskState)>:
c001e0c7:	83 ec 0c             	sub    esp,0xc
c001e0ca:	fa                   	cli    
c001e0cb:	ff 05 08 fb 02 c0    	inc    DWORD PTR ds:0xc002fb08
c001e0d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e0d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0da:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e0dd:	e8 0f fe ff ff       	call   c001def1 <schedule()>
c001e0e2:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001e0e7:	48                   	dec    eax
c001e0e8:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001e0ed:	75 01                	jne    c001e0f0 <blockTask(TaskState)+0x29>
c001e0ef:	fb                   	sti    
c001e0f0:	83 c4 0c             	add    esp,0xc
c001e0f3:	c3                   	ret    

c001e0f4 <waitTask(int, int*, int)>:
c001e0f4:	83 ec 18             	sub    esp,0x18
c001e0f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e100:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e103:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e10c:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e10f:	6a 07                	push   0x7
c001e111:	e8 b1 ff ff ff       	call   c001e0c7 <blockTask(TaskState)>
c001e116:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e11b:	83 c4 10             	add    esp,0x10
c001e11e:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e121:	85 d2                	test   edx,edx
c001e123:	74 0a                	je     c001e12f <waitTask(int, int*, int)+0x3b>
c001e125:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e128:	89 02                	mov    DWORD PTR [edx],eax
c001e12a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e12f:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e132:	83 c4 0c             	add    esp,0xc
c001e135:	c3                   	ret    

c001e136 <nanoSleepUntil(unsigned long long)>:
c001e136:	83 ec 0c             	sub    esp,0xc
c001e139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e13d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e141:	3b 05 70 ec 02 c0    	cmp    eax,DWORD PTR ds:0xc002ec70
c001e147:	89 d1                	mov    ecx,edx
c001e149:	1b 0d 74 ec 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ec74
c001e14f:	73 04                	jae    c001e155 <nanoSleepUntil(unsigned long long)+0x1f>
c001e151:	83 c4 0c             	add    esp,0xc
c001e154:	c3                   	ret    
c001e155:	fa                   	cli    
c001e156:	ff 05 08 fb 02 c0    	inc    DWORD PTR ds:0xc002fb08
c001e15c:	83 ec 08             	sub    esp,0x8
c001e15f:	ff 05 04 fb 02 c0    	inc    DWORD PTR ds:0xc002fb04
c001e165:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e16b:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e16e:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e171:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e177:	68 18 fb 02 c0       	push   0xc002fb18
c001e17c:	e8 3f ad 00 00       	call   c0028ec0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e181:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e188:	e8 3a ff ff ff       	call   c001e0c7 <blockTask(TaskState)>
c001e18d:	a1 04 fb 02 c0       	mov    eax,ds:0xc002fb04
c001e192:	83 c4 10             	add    esp,0x10
c001e195:	48                   	dec    eax
c001e196:	a3 04 fb 02 c0       	mov    ds:0xc002fb04,eax
c001e19b:	85 c0                	test   eax,eax
c001e19d:	75 09                	jne    c001e1a8 <nanoSleepUntil(unsigned long long)+0x72>
c001e19f:	a1 00 fb 02 c0       	mov    eax,ds:0xc002fb00
c001e1a4:	85 c0                	test   eax,eax
c001e1a6:	75 12                	jne    c001e1ba <nanoSleepUntil(unsigned long long)+0x84>
c001e1a8:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001e1ad:	48                   	dec    eax
c001e1ae:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001e1b3:	75 9c                	jne    c001e151 <nanoSleepUntil(unsigned long long)+0x1b>
c001e1b5:	fb                   	sti    
c001e1b6:	83 c4 0c             	add    esp,0xc
c001e1b9:	c3                   	ret    
c001e1ba:	c7 05 00 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb00,0x0
c001e1c4:	e8 28 fd ff ff       	call   c001def1 <schedule()>
c001e1c9:	eb dd                	jmp    c001e1a8 <nanoSleepUntil(unsigned long long)+0x72>

c001e1cb <nanoSleep(unsigned long long)>:
c001e1cb:	a1 70 ec 02 c0       	mov    eax,ds:0xc002ec70
c001e1d0:	8b 15 74 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec74
c001e1d6:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e1da:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e1de:	e9 53 ff ff ff       	jmp    c001e136 <nanoSleepUntil(unsigned long long)>

c001e1e3 <sleep(unsigned long long)>:
c001e1e3:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e1eb:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e1f0:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e1f4:	01 ca                	add    edx,ecx
c001e1f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e1fa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e1fe:	eb cb                	jmp    c001e1cb <nanoSleep(unsigned long long)>

c001e200 <Semaphore::acquire()>:
c001e200:	83 ec 0c             	sub    esp,0xc
c001e203:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e207:	fa                   	cli    
c001e208:	a1 04 fb 02 c0       	mov    eax,ds:0xc002fb04
c001e20d:	ff 05 08 fb 02 c0    	inc    DWORD PTR ds:0xc002fb08
c001e213:	8d 48 01             	lea    ecx,[eax+0x1]
c001e216:	89 0d 04 fb 02 c0    	mov    DWORD PTR ds:0xc002fb04,ecx
c001e21c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e21f:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e221:	7d 28                	jge    c001e24b <Semaphore::acquire()+0x4b>
c001e223:	41                   	inc    ecx
c001e224:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e227:	a3 04 fb 02 c0       	mov    ds:0xc002fb04,eax
c001e22c:	85 c0                	test   eax,eax
c001e22e:	75 09                	jne    c001e239 <Semaphore::acquire()+0x39>
c001e230:	a1 00 fb 02 c0       	mov    eax,ds:0xc002fb00
c001e235:	85 c0                	test   eax,eax
c001e237:	75 5d                	jne    c001e296 <Semaphore::acquire()+0x96>
c001e239:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001e23e:	48                   	dec    eax
c001e23f:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001e244:	75 01                	jne    c001e247 <Semaphore::acquire()+0x47>
c001e246:	fb                   	sti    
c001e247:	83 c4 0c             	add    esp,0xc
c001e24a:	c3                   	ret    
c001e24b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e250:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e257:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e25a:	85 c9                	test   ecx,ecx
c001e25c:	74 49                	je     c001e2a7 <Semaphore::acquire()+0xa7>
c001e25e:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e261:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e267:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e26a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e26f:	83 ec 0c             	sub    esp,0xc
c001e272:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e275:	68 28 c8 02 c0       	push   0xc002c828
c001e27a:	e8 42 47 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001e27f:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c001e286:	e8 3c fe ff ff       	call   c001e0c7 <blockTask(TaskState)>
c001e28b:	a1 04 fb 02 c0       	mov    eax,ds:0xc002fb04
c001e290:	83 c4 10             	add    esp,0x10
c001e293:	48                   	dec    eax
c001e294:	eb 91                	jmp    c001e227 <Semaphore::acquire()+0x27>
c001e296:	c7 05 00 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb00,0x0
c001e2a0:	e8 4c fc ff ff       	call   c001def1 <schedule()>
c001e2a5:	eb 92                	jmp    c001e239 <Semaphore::acquire()+0x39>
c001e2a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e2af:	eb b9                	jmp    c001e26a <Semaphore::acquire()+0x6a>

c001e2b1 <taskReturned>:
c001e2b1:	83 ec 18             	sub    esp,0x18
c001e2b4:	68 48 c8 02 c0       	push   0xc002c848
c001e2b9:	e8 a1 c0 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c001e2be:	83 c4 10             	add    esp,0x10
c001e2c1:	83 ec 0c             	sub    esp,0xc
c001e2c4:	6a 02                	push   0x2
c001e2c6:	e8 fc fd ff ff       	call   c001e0c7 <blockTask(TaskState)>
c001e2cb:	fa                   	cli    
c001e2cc:	ff 05 08 fb 02 c0    	inc    DWORD PTR ds:0xc002fb08
c001e2d2:	e8 1a fc ff ff       	call   c001def1 <schedule()>
c001e2d7:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001e2dc:	83 c4 10             	add    esp,0x10
c001e2df:	48                   	dec    eax
c001e2e0:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001e2e5:	85 c0                	test   eax,eax
c001e2e7:	75 d8                	jne    c001e2c1 <taskReturned+0x10>
c001e2e9:	fb                   	sti    
c001e2ea:	eb d5                	jmp    c001e2c1 <taskReturned+0x10>

c001e2ec <Thr::processFromPID(int)>:
c001e2ec:	57                   	push   edi
c001e2ed:	56                   	push   esi
c001e2ee:	53                   	push   ebx
c001e2ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e2f3:	fa                   	cli    
c001e2f4:	ff 05 08 fb 02 c0    	inc    DWORD PTR ds:0xc002fb08
c001e2fa:	83 ec 0c             	sub    esp,0xc
c001e2fd:	68 24 fb 02 c0       	push   0xc002fb24
c001e302:	e8 03 ab 00 00       	call   c0028e0a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e307:	83 c4 10             	add    esp,0x10
c001e30a:	89 c7                	mov    edi,eax
c001e30c:	eb 14                	jmp    c001e322 <Thr::processFromPID(int)+0x36>
c001e30e:	83 ec 0c             	sub    esp,0xc
c001e311:	68 24 fb 02 c0       	push   0xc002fb24
c001e316:	e8 ef aa 00 00       	call   c0028e0a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e31b:	83 c4 10             	add    esp,0x10
c001e31e:	39 f8                	cmp    eax,edi
c001e320:	74 49                	je     c001e36b <Thr::processFromPID(int)+0x7f>
c001e322:	83 ec 0c             	sub    esp,0xc
c001e325:	68 24 fb 02 c0       	push   0xc002fb24
c001e32a:	e8 db aa 00 00       	call   c0028e0a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e32f:	c7 04 24 24 fb 02 c0 	mov    DWORD PTR [esp],0xc002fb24
c001e336:	89 c3                	mov    ebx,eax
c001e338:	e8 d5 aa 00 00       	call   c0028e12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e33d:	58                   	pop    eax
c001e33e:	5a                   	pop    edx
c001e33f:	53                   	push   ebx
c001e340:	68 24 fb 02 c0       	push   0xc002fb24
c001e345:	e8 76 ab 00 00       	call   c0028ec0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e34a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e34d:	83 c4 10             	add    esp,0x10
c001e350:	39 30                	cmp    DWORD PTR [eax],esi
c001e352:	75 ba                	jne    c001e30e <Thr::processFromPID(int)+0x22>
c001e354:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001e359:	48                   	dec    eax
c001e35a:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001e35f:	74 07                	je     c001e368 <Thr::processFromPID(int)+0x7c>
c001e361:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e364:	5b                   	pop    ebx
c001e365:	5e                   	pop    esi
c001e366:	5f                   	pop    edi
c001e367:	c3                   	ret    
c001e368:	fb                   	sti    
c001e369:	eb f6                	jmp    c001e361 <Thr::processFromPID(int)+0x75>
c001e36b:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001e370:	48                   	dec    eax
c001e371:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001e376:	75 05                	jne    c001e37d <Thr::processFromPID(int)+0x91>
c001e378:	fb                   	sti    
c001e379:	5b                   	pop    ebx
c001e37a:	5e                   	pop    esi
c001e37b:	5f                   	pop    edi
c001e37c:	c3                   	ret    
c001e37d:	5b                   	pop    ebx
c001e37e:	31 c0                	xor    eax,eax
c001e380:	5e                   	pop    esi
c001e381:	5f                   	pop    edi
c001e382:	c3                   	ret    

c001e383 <unblockTask(ThreadControlBlock*)>:
c001e383:	53                   	push   ebx
c001e384:	83 ec 08             	sub    esp,0x8
c001e387:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e38b:	fa                   	cli    
c001e38c:	ff 05 08 fb 02 c0    	inc    DWORD PTR ds:0xc002fb08
c001e392:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e395:	85 c0                	test   eax,eax
c001e397:	74 5a                	je     c001e3f3 <unblockTask(ThreadControlBlock*)+0x70>
c001e399:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e39c:	48                   	dec    eax
c001e39d:	74 31                	je     c001e3d0 <unblockTask(ThreadControlBlock*)+0x4d>
c001e39f:	83 ec 0c             	sub    esp,0xc
c001e3a2:	68 24 fb 02 c0       	push   0xc002fb24
c001e3a7:	e8 5e aa 00 00       	call   c0028e0a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e3ac:	83 c4 10             	add    esp,0x10
c001e3af:	85 c0                	test   eax,eax
c001e3b1:	75 17                	jne    c001e3ca <unblockTask(ThreadControlBlock*)+0x47>
c001e3b3:	eb 50                	jmp    c001e405 <unblockTask(ThreadControlBlock*)+0x82>
c001e3b5:	83 ec 08             	sub    esp,0x8
c001e3b8:	50                   	push   eax
c001e3b9:	68 24 fb 02 c0       	push   0xc002fb24
c001e3be:	e8 cf ad 00 00       	call   c0029192 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e3c3:	83 c4 10             	add    esp,0x10
c001e3c6:	85 c0                	test   eax,eax
c001e3c8:	74 3b                	je     c001e405 <unblockTask(ThreadControlBlock*)+0x82>
c001e3ca:	39 c3                	cmp    ebx,eax
c001e3cc:	75 e7                	jne    c001e3b5 <unblockTask(ThreadControlBlock*)+0x32>
c001e3ce:	eb 10                	jmp    c001e3e0 <unblockTask(ThreadControlBlock*)+0x5d>
c001e3d0:	83 ec 0c             	sub    esp,0xc
c001e3d3:	68 ca c7 02 c0       	push   0xc002c7ca
c001e3d8:	e8 e4 45 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001e3dd:	83 c4 10             	add    esp,0x10
c001e3e0:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001e3e5:	48                   	dec    eax
c001e3e6:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001e3eb:	75 01                	jne    c001e3ee <unblockTask(ThreadControlBlock*)+0x6b>
c001e3ed:	fb                   	sti    
c001e3ee:	83 c4 08             	add    esp,0x8
c001e3f1:	5b                   	pop    ebx
c001e3f2:	c3                   	ret    
c001e3f3:	83 ec 0c             	sub    esp,0xc
c001e3f6:	68 b3 c7 02 c0       	push   0xc002c7b3
c001e3fb:	e8 c1 45 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001e400:	83 c4 10             	add    esp,0x10
c001e403:	eb db                	jmp    c001e3e0 <unblockTask(ThreadControlBlock*)+0x5d>
c001e405:	83 ec 08             	sub    esp,0x8
c001e408:	53                   	push   ebx
c001e409:	68 24 fb 02 c0       	push   0xc002fb24
c001e40e:	e8 ad aa 00 00       	call   c0028ec0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e413:	83 c4 10             	add    esp,0x10
c001e416:	eb c8                	jmp    c001e3e0 <unblockTask(ThreadControlBlock*)+0x5d>

c001e418 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e418:	55                   	push   ebp
c001e419:	57                   	push   edi
c001e41a:	56                   	push   esi
c001e41b:	53                   	push   ebx
c001e41c:	83 ec 1c             	sub    esp,0x1c
c001e41f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e423:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e426:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e42c:	85 ff                	test   edi,edi
c001e42e:	7e 20                	jle    c001e450 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e430:	31 f6                	xor    esi,esi
c001e432:	83 ec 0c             	sub    esp,0xc
c001e435:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e43c:	46                   	inc    esi
c001e43d:	e8 37 15 ff ff       	call   c000f979 <free>
c001e442:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e445:	83 c4 10             	add    esp,0x10
c001e448:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e44e:	7f e2                	jg     c001e432 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e450:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e45a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e45f:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e462:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e465:	d3 c0                	rol    eax,cl
c001e467:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e46e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e471:	89 f7                	mov    edi,esi
c001e473:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e47b:	0f 85 64 01 00 00    	jne    c001e5e5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e481:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e487:	85 ed                	test   ebp,ebp
c001e489:	74 1b                	je     c001e4a6 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e48b:	83 ec 0c             	sub    esp,0xc
c001e48e:	55                   	push   ebp
c001e48f:	e8 70 bc ff ff       	call   c001a104 <EnvVarContainer::~EnvVarContainer()>
c001e494:	59                   	pop    ecx
c001e495:	5e                   	pop    esi
c001e496:	6a 0c                	push   0xc
c001e498:	55                   	push   ebp
c001e499:	e8 4b 44 ff ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c001e49e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e4a1:	83 c4 10             	add    esp,0x10
c001e4a4:	89 f7                	mov    edi,esi
c001e4a6:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e4ac:	85 c0                	test   eax,eax
c001e4ae:	0f 84 aa 00 00 00    	je     c001e55e <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e4b4:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e4b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e4bb:	31 c9                	xor    ecx,ecx
c001e4bd:	eb 10                	jmp    c001e4cf <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e4bf:	41                   	inc    ecx
c001e4c0:	83 f9 10             	cmp    ecx,0x10
c001e4c3:	0f 84 95 00 00 00    	je     c001e55e <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e4c9:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e4cf:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e4d6:	d3 fa                	sar    edx,cl
c001e4d8:	83 e2 01             	and    edx,0x1
c001e4db:	74 e2                	je     c001e4bf <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e4dd:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e4e0:	01 ca                	add    edx,ecx
c001e4e2:	89 d5                	mov    ebp,edx
c001e4e4:	c1 e5 05             	shl    ebp,0x5
c001e4e7:	01 ea                	add    edx,ebp
c001e4e9:	01 d0                	add    eax,edx
c001e4eb:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e4f1:	83 fd 07             	cmp    ebp,0x7
c001e4f4:	75 c9                	jne    c001e4bf <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e4f6:	05 40 02 00 00       	add    eax,0x240
c001e4fb:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e4fe:	83 fd ff             	cmp    ebp,0xffffffff
c001e501:	0f 8c e6 00 00 00    	jl     c001e5ed <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001e507:	0f 84 97 01 00 00    	je     c001e6a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001e50d:	85 ed                	test   ebp,ebp
c001e50f:	0f 84 7e 01 00 00    	je     c001e693 <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001e515:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e517:	75 a6                	jne    c001e4bf <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e519:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e51f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e523:	01 d0                	add    eax,edx
c001e525:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e529:	83 ec 0c             	sub    esp,0xc
c001e52c:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e532:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e535:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e53b:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e542:	50                   	push   eax
c001e543:	e8 3b fe ff ff       	call   c001e383 <unblockTask(ThreadControlBlock*)>
c001e548:	83 c4 10             	add    esp,0x10
c001e54b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e54e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e552:	89 f7                	mov    edi,esi
c001e554:	41                   	inc    ecx
c001e555:	83 f9 10             	cmp    ecx,0x10
c001e558:	0f 85 6b ff ff ff    	jne    c001e4c9 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e55e:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e564:	85 c0                	test   eax,eax
c001e566:	74 5d                	je     c001e5c5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e568:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e56e:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e574:	74 4f                	je     c001e5c5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e576:	83 ec 0c             	sub    esp,0xc
c001e579:	68 24 fb 02 c0       	push   0xc002fb24
c001e57e:	e8 87 a8 00 00       	call   c0028e0a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e583:	c7 04 24 24 fb 02 c0 	mov    DWORD PTR [esp],0xc002fb24
c001e58a:	89 c7                	mov    edi,eax
c001e58c:	e8 5d a8 00 00       	call   c0028dee <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e591:	83 c4 10             	add    esp,0x10
c001e594:	84 c0                	test   al,al
c001e596:	0f 84 c2 00 00 00    	je     c001e65e <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001e59c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e59f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e5a5:	85 d2                	test   edx,edx
c001e5a7:	74 0f                	je     c001e5b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e5a9:	83 ec 0c             	sub    esp,0xc
c001e5ac:	8b 02                	mov    eax,DWORD PTR [edx]
c001e5ae:	52                   	push   edx
c001e5af:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e5b2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5b5:	83 c4 10             	add    esp,0x10
c001e5b8:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e5c2:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e5c5:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e5cb:	85 db                	test   ebx,ebx
c001e5cd:	74 16                	je     c001e5e5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e5cf:	83 ec 0c             	sub    esp,0xc
c001e5d2:	53                   	push   ebx
c001e5d3:	e8 42 35 ff ff       	call   c0011b1a <VAS::~VAS()>
c001e5d8:	58                   	pop    eax
c001e5d9:	5a                   	pop    edx
c001e5da:	6a 14                	push   0x14
c001e5dc:	53                   	push   ebx
c001e5dd:	e8 07 43 ff ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c001e5e2:	83 c4 10             	add    esp,0x10
c001e5e5:	83 c4 1c             	add    esp,0x1c
c001e5e8:	5b                   	pop    ebx
c001e5e9:	5e                   	pop    esi
c001e5ea:	5f                   	pop    edi
c001e5eb:	5d                   	pop    ebp
c001e5ec:	c3                   	ret    
c001e5ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e5f1:	83 ec 0c             	sub    esp,0xc
c001e5f4:	68 7c c8 02 c0       	push   0xc002c87c
c001e5f9:	e8 61 bd ff ff       	call   c001a35f <Krnl::panic(char const*)>
c001e5fe:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e601:	83 c4 10             	add    esp,0x10
c001e604:	89 f7                	mov    edi,esi
c001e606:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e60a:	e9 b0 fe ff ff       	jmp    c001e4bf <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e60f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e615:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e61b:	75 1c                	jne    c001e639 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e61d:	83 ec 0c             	sub    esp,0xc
c001e620:	68 e4 c8 02 c0       	push   0xc002c8e4
c001e625:	e8 97 43 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001e62a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e631:	e8 91 fa ff ff       	call   c001e0c7 <blockTask(TaskState)>
c001e636:	83 c4 10             	add    esp,0x10
c001e639:	83 ec 08             	sub    esp,0x8
c001e63c:	56                   	push   esi
c001e63d:	68 24 fb 02 c0       	push   0xc002fb24
c001e642:	e8 79 a8 00 00       	call   c0028ec0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e647:	c7 04 24 24 fb 02 c0 	mov    DWORD PTR [esp],0xc002fb24
c001e64e:	e8 b7 a7 00 00       	call   c0028e0a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e653:	83 c4 10             	add    esp,0x10
c001e656:	39 f8                	cmp    eax,edi
c001e658:	0f 84 3e ff ff ff    	je     c001e59c <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e65e:	83 ec 0c             	sub    esp,0xc
c001e661:	68 24 fb 02 c0       	push   0xc002fb24
c001e666:	e8 9f a7 00 00       	call   c0028e0a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e66b:	c7 04 24 24 fb 02 c0 	mov    DWORD PTR [esp],0xc002fb24
c001e672:	89 c6                	mov    esi,eax
c001e674:	e8 99 a7 00 00       	call   c0028e12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e679:	83 c4 10             	add    esp,0x10
c001e67c:	39 f3                	cmp    ebx,esi
c001e67e:	74 b9                	je     c001e639 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e680:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e683:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e686:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e68c:	75 ab                	jne    c001e639 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e68e:	e9 7c ff ff ff       	jmp    c001e60f <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e693:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e697:	83 ec 0c             	sub    esp,0xc
c001e69a:	68 b0 c8 02 c0       	push   0xc002c8b0
c001e69f:	e9 55 ff ff ff       	jmp    c001e5f9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e6a4:	8b 36                	mov    esi,DWORD PTR [esi]
c001e6a6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e6aa:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e6ad:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6b0:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e6b6:	01 d7                	add    edi,edx
c001e6b8:	89 f8                	mov    eax,edi
c001e6ba:	e9 66 fe ff ff       	jmp    c001e525 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e6bf <cleanerTaskFunction(void*)>:
c001e6bf:	53                   	push   ebx
c001e6c0:	83 ec 08             	sub    esp,0x8
c001e6c3:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001e6c8:	48                   	dec    eax
c001e6c9:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001e6ce:	75 01                	jne    c001e6d1 <cleanerTaskFunction(void*)+0x12>
c001e6d0:	fb                   	sti    
c001e6d1:	fa                   	cli    
c001e6d2:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001e6d7:	80 3d ec fa 02 c0 00 	cmp    BYTE PTR ds:0xc002faec,0x0
c001e6de:	8d 50 01             	lea    edx,[eax+0x1]
c001e6e1:	89 15 08 fb 02 c0    	mov    DWORD PTR ds:0xc002fb08,edx
c001e6e7:	0f 84 a1 00 00 00    	je     c001e78e <cleanerTaskFunction(void*)+0xcf>
c001e6ed:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001e6f2:	85 c0                	test   eax,eax
c001e6f4:	75 01                	jne    c001e6f7 <cleanerTaskFunction(void*)+0x38>
c001e6f6:	fb                   	sti    
c001e6f7:	c6 05 ec fa 02 c0 00 	mov    BYTE PTR ds:0xc002faec,0x0
c001e6fe:	fa                   	cli    
c001e6ff:	ff 05 08 fb 02 c0    	inc    DWORD PTR ds:0xc002fb08
c001e705:	ff 05 04 fb 02 c0    	inc    DWORD PTR ds:0xc002fb04
c001e70b:	fa                   	cli    
c001e70c:	ff 05 08 fb 02 c0    	inc    DWORD PTR ds:0xc002fb08
c001e712:	eb 26                	jmp    c001e73a <cleanerTaskFunction(void*)+0x7b>
c001e714:	83 ec 0c             	sub    esp,0xc
c001e717:	68 0c fb 02 c0       	push   0xc002fb0c
c001e71c:	e8 e9 a6 00 00       	call   c0028e0a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e721:	c7 04 24 0c fb 02 c0 	mov    DWORD PTR [esp],0xc002fb0c
c001e728:	89 c3                	mov    ebx,eax
c001e72a:	e8 e3 a6 00 00       	call   c0028e12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e72f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e732:	e8 e1 fc ff ff       	call   c001e418 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e737:	83 c4 10             	add    esp,0x10
c001e73a:	83 ec 0c             	sub    esp,0xc
c001e73d:	68 0c fb 02 c0       	push   0xc002fb0c
c001e742:	e8 a7 a6 00 00       	call   c0028dee <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e747:	83 c4 10             	add    esp,0x10
c001e74a:	84 c0                	test   al,al
c001e74c:	74 c6                	je     c001e714 <cleanerTaskFunction(void*)+0x55>
c001e74e:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001e753:	48                   	dec    eax
c001e754:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001e759:	75 01                	jne    c001e75c <cleanerTaskFunction(void*)+0x9d>
c001e75b:	fb                   	sti    
c001e75c:	a1 04 fb 02 c0       	mov    eax,ds:0xc002fb04
c001e761:	48                   	dec    eax
c001e762:	a3 04 fb 02 c0       	mov    ds:0xc002fb04,eax
c001e767:	0f 85 56 ff ff ff    	jne    c001e6c3 <cleanerTaskFunction(void*)+0x4>
c001e76d:	a1 00 fb 02 c0       	mov    eax,ds:0xc002fb00
c001e772:	85 c0                	test   eax,eax
c001e774:	0f 84 49 ff ff ff    	je     c001e6c3 <cleanerTaskFunction(void*)+0x4>
c001e77a:	c7 05 00 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb00,0x0
c001e784:	e8 68 f7 ff ff       	call   c001def1 <schedule()>
c001e789:	e9 35 ff ff ff       	jmp    c001e6c3 <cleanerTaskFunction(void*)+0x4>
c001e78e:	83 ec 0c             	sub    esp,0xc
c001e791:	6a 02                	push   0x2
c001e793:	e8 09 f9 ff ff       	call   c001e0a1 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e798:	83 c4 10             	add    esp,0x10
c001e79b:	e9 57 ff ff ff       	jmp    c001e6f7 <cleanerTaskFunction(void*)+0x38>

c001e7a0 <terminateTask(int)>:
c001e7a0:	83 ec 14             	sub    esp,0x14
c001e7a3:	fa                   	cli    
c001e7a4:	ff 05 08 fb 02 c0    	inc    DWORD PTR ds:0xc002fb08
c001e7aa:	ff 05 04 fb 02 c0    	inc    DWORD PTR ds:0xc002fb04
c001e7b0:	fa                   	cli    
c001e7b1:	ff 05 08 fb 02 c0    	inc    DWORD PTR ds:0xc002fb08
c001e7b7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e7bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7c0:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e7c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7c8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e7cb:	50                   	push   eax
c001e7cc:	68 0c fb 02 c0       	push   0xc002fb0c
c001e7d1:	e8 ea a6 00 00       	call   c0028ec0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e7d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7db:	83 c4 10             	add    esp,0x10
c001e7de:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e7e5:	a1 e8 fa 02 c0       	mov    eax,ds:0xc002fae8
c001e7ea:	85 c0                	test   eax,eax
c001e7ec:	74 53                	je     c001e841 <terminateTask(int)+0xa1>
c001e7ee:	83 ec 0c             	sub    esp,0xc
c001e7f1:	c6 05 ec fa 02 c0 01 	mov    BYTE PTR ds:0xc002faec,0x1
c001e7f8:	50                   	push   eax
c001e7f9:	e8 85 fb ff ff       	call   c001e383 <unblockTask(ThreadControlBlock*)>
c001e7fe:	83 c4 10             	add    esp,0x10
c001e801:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001e806:	48                   	dec    eax
c001e807:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001e80c:	75 01                	jne    c001e80f <terminateTask(int)+0x6f>
c001e80e:	fb                   	sti    
c001e80f:	a1 04 fb 02 c0       	mov    eax,ds:0xc002fb04
c001e814:	48                   	dec    eax
c001e815:	a3 04 fb 02 c0       	mov    ds:0xc002fb04,eax
c001e81a:	75 09                	jne    c001e825 <terminateTask(int)+0x85>
c001e81c:	83 3d 00 fb 02 c0 00 	cmp    DWORD PTR ds:0xc002fb00,0x0
c001e823:	75 2e                	jne    c001e853 <terminateTask(int)+0xb3>
c001e825:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001e82a:	48                   	dec    eax
c001e82b:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001e830:	75 01                	jne    c001e833 <terminateTask(int)+0x93>
c001e832:	fb                   	sti    
c001e833:	fa                   	cli    
c001e834:	ff 05 08 fb 02 c0    	inc    DWORD PTR ds:0xc002fb08
c001e83a:	e8 b2 f6 ff ff       	call   c001def1 <schedule()>
c001e83f:	eb e4                	jmp    c001e825 <terminateTask(int)+0x85>
c001e841:	83 ec 0c             	sub    esp,0xc
c001e844:	68 e1 c7 02 c0       	push   0xc002c7e1
c001e849:	e8 73 41 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001e84e:	83 c4 10             	add    esp,0x10
c001e851:	eb ae                	jmp    c001e801 <terminateTask(int)+0x61>
c001e853:	c7 05 00 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb00,0x0
c001e85d:	eb db                	jmp    c001e83a <terminateTask(int)+0x9a>

c001e85f <Thr::terminateFromIRQ(int)>:
c001e85f:	83 ec 18             	sub    esp,0x18
c001e862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e866:	e8 35 ff ff ff       	call   c001e7a0 <terminateTask(int)>
c001e86b:	90                   	nop

c001e86c <Semaphore::release()>:
c001e86c:	83 ec 0c             	sub    esp,0xc
c001e86f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e873:	fa                   	cli    
c001e874:	a1 04 fb 02 c0       	mov    eax,ds:0xc002fb04
c001e879:	ff 05 08 fb 02 c0    	inc    DWORD PTR ds:0xc002fb08
c001e87f:	8d 48 01             	lea    ecx,[eax+0x1]
c001e882:	89 0d 04 fb 02 c0    	mov    DWORD PTR ds:0xc002fb04,ecx
c001e888:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e88b:	85 c9                	test   ecx,ecx
c001e88d:	74 3c                	je     c001e8cb <Semaphore::release()+0x5f>
c001e88f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e892:	83 ec 0c             	sub    esp,0xc
c001e895:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e898:	51                   	push   ecx
c001e899:	e8 e5 fa ff ff       	call   c001e383 <unblockTask(ThreadControlBlock*)>
c001e89e:	a1 04 fb 02 c0       	mov    eax,ds:0xc002fb04
c001e8a3:	83 c4 10             	add    esp,0x10
c001e8a6:	48                   	dec    eax
c001e8a7:	a3 04 fb 02 c0       	mov    ds:0xc002fb04,eax
c001e8ac:	85 c0                	test   eax,eax
c001e8ae:	75 09                	jne    c001e8b9 <Semaphore::release()+0x4d>
c001e8b0:	a1 00 fb 02 c0       	mov    eax,ds:0xc002fb00
c001e8b5:	85 c0                	test   eax,eax
c001e8b7:	75 17                	jne    c001e8d0 <Semaphore::release()+0x64>
c001e8b9:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001e8be:	48                   	dec    eax
c001e8bf:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001e8c4:	75 01                	jne    c001e8c7 <Semaphore::release()+0x5b>
c001e8c6:	fb                   	sti    
c001e8c7:	83 c4 0c             	add    esp,0xc
c001e8ca:	c3                   	ret    
c001e8cb:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e8ce:	eb d7                	jmp    c001e8a7 <Semaphore::release()+0x3b>
c001e8d0:	c7 05 00 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb00,0x0
c001e8da:	e8 12 f6 ff ff       	call   c001def1 <schedule()>
c001e8df:	eb d8                	jmp    c001e8b9 <Semaphore::release()+0x4d>

c001e8e1 <__static_initialization_and_destruction_0(int, int)>:
c001e8e1:	83 ec 0c             	sub    esp,0xc
c001e8e4:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e8e9:	0f 85 88 00 00 00    	jne    c001e977 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e8ef:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e8f7:	75 7e                	jne    c001e977 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e8f9:	83 ec 0c             	sub    esp,0xc
c001e8fc:	68 24 fb 02 c0       	push   0xc002fb24
c001e901:	e8 4a a8 00 00       	call   c0029150 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e906:	83 c4 10             	add    esp,0x10
c001e909:	83 ec 04             	sub    esp,0x4
c001e90c:	68 c4 d3 02 c0       	push   0xc002d3c4
c001e911:	68 24 fb 02 c0       	push   0xc002fb24
c001e916:	68 04 91 02 c0       	push   0xc0029104
c001e91b:	e8 43 3f ff ff       	call   c0012863 <__cxa_atexit>
c001e920:	83 c4 10             	add    esp,0x10
c001e923:	83 ec 0c             	sub    esp,0xc
c001e926:	68 18 fb 02 c0       	push   0xc002fb18
c001e92b:	e8 20 a8 00 00       	call   c0029150 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e930:	83 c4 10             	add    esp,0x10
c001e933:	83 ec 04             	sub    esp,0x4
c001e936:	68 c4 d3 02 c0       	push   0xc002d3c4
c001e93b:	68 18 fb 02 c0       	push   0xc002fb18
c001e940:	68 04 91 02 c0       	push   0xc0029104
c001e945:	e8 19 3f ff ff       	call   c0012863 <__cxa_atexit>
c001e94a:	83 c4 10             	add    esp,0x10
c001e94d:	83 ec 0c             	sub    esp,0xc
c001e950:	68 0c fb 02 c0       	push   0xc002fb0c
c001e955:	e8 f6 a7 00 00       	call   c0029150 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e95a:	83 c4 10             	add    esp,0x10
c001e95d:	83 ec 04             	sub    esp,0x4
c001e960:	68 c4 d3 02 c0       	push   0xc002d3c4
c001e965:	68 0c fb 02 c0       	push   0xc002fb0c
c001e96a:	68 04 91 02 c0       	push   0xc0029104
c001e96f:	e8 ef 3e ff ff       	call   c0012863 <__cxa_atexit>
c001e974:	83 c4 10             	add    esp,0x10
c001e977:	90                   	nop
c001e978:	83 c4 0c             	add    esp,0xc
c001e97b:	c3                   	ret    

c001e97c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e97c:	83 ec 0c             	sub    esp,0xc
c001e97f:	83 ec 08             	sub    esp,0x8
c001e982:	68 ff ff 00 00       	push   0xffff
c001e987:	6a 01                	push   0x1
c001e989:	e8 53 ff ff ff       	call   c001e8e1 <__static_initialization_and_destruction_0(int, int)>
c001e98e:	83 c4 10             	add    esp,0x10
c001e991:	83 c4 0c             	add    esp,0xc
c001e994:	c3                   	ret    

c001e995 <Vm::inbv(unsigned short)>:
c001e995:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e999:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e99e:	75 06                	jne    c001e9a6 <Vm::inbv(unsigned short)+0x11>
c001e9a0:	a0 6c fb 02 c0       	mov    al,ds:0xc002fb6c
c001e9a5:	c3                   	ret    
c001e9a6:	ec                   	in     al,dx
c001e9a7:	c3                   	ret    

c001e9a8 <Vm::outbv(unsigned short, unsigned char)>:
c001e9a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e9ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e9b0:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e9b5:	75 25                	jne    c001e9dc <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e9b7:	8b 0d 6c fb 02 c0    	mov    ecx,DWORD PTR ds:0xc002fb6c
c001e9bd:	8d 51 01             	lea    edx,[ecx+0x1]
c001e9c0:	88 81 80 fb 02 c0    	mov    BYTE PTR [ecx-0x3ffd0480],al
c001e9c6:	89 15 6c fb 02 c0    	mov    DWORD PTR ds:0xc002fb6c,edx
c001e9cc:	83 fa 20             	cmp    edx,0x20
c001e9cf:	75 0c                	jne    c001e9dd <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e9d1:	c7 05 6c fb 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002fb6c,0x1f
c001e9db:	c3                   	ret    
c001e9dc:	ee                   	out    dx,al
c001e9dd:	c3                   	ret    

c001e9de <Vm::realToLinear(unsigned short, unsigned short)>:
c001e9de:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e9e3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e9e8:	c1 e0 04             	shl    eax,0x4
c001e9eb:	01 d0                	add    eax,edx
c001e9ed:	c3                   	ret    

c001e9ee <Vm::getSegment(unsigned int)>:
c001e9ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9f2:	c1 e8 10             	shr    eax,0x10
c001e9f5:	c3                   	ret    

c001e9f6 <Vm::getOffset(unsigned int)>:
c001e9f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9fa:	c3                   	ret    

c001e9fb <Vm::mainloop2()>:
c001e9fb:	83 ec 18             	sub    esp,0x18
c001e9fe:	fa                   	cli    
c001e9ff:	ff 05 08 fb 02 c0    	inc    DWORD PTR ds:0xc002fb08
c001ea05:	6a 02                	push   0x2
c001ea07:	c6 05 65 fb 02 c0 01 	mov    BYTE PTR ds:0xc002fb65,0x1
c001ea0e:	e8 8e f6 ff ff       	call   c001e0a1 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea18:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ea1c:	52                   	push   edx
c001ea1d:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ea21:	52                   	push   edx
c001ea22:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001ea26:	52                   	push   edx
c001ea27:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ea2b:	50                   	push   eax
c001ea2c:	e8 c9 18 fe ff       	call   c00002fa <goToVM86>
c001ea31:	83 c4 2c             	add    esp,0x2c
c001ea34:	c3                   	ret    

c001ea35 <Vm::mainVm8086Loop(void*)>:
c001ea35:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001ea3a:	48                   	dec    eax
c001ea3b:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001ea40:	75 01                	jne    c001ea43 <Vm::mainVm8086Loop(void*)+0xe>
c001ea42:	fb                   	sti    
c001ea43:	eb b6                	jmp    c001e9fb <Vm::mainloop2()>

c001ea45 <Vm::mainloop3(unsigned long)>:
c001ea45:	83 ec 18             	sub    esp,0x18
c001ea48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ea4c:	fa                   	cli    
c001ea4d:	ff 05 08 fb 02 c0    	inc    DWORD PTR ds:0xc002fb08
c001ea53:	6a 02                	push   0x2
c001ea55:	c6 05 64 fb 02 c0 01 	mov    BYTE PTR ds:0xc002fb64,0x1
c001ea5c:	a3 60 fb 02 c0       	mov    ds:0xc002fb60,eax
c001ea61:	e8 3b f6 ff ff       	call   c001e0a1 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea66:	83 c4 1c             	add    esp,0x1c
c001ea69:	eb 90                	jmp    c001e9fb <Vm::mainloop2()>

c001ea6b <Vm::initialise8086()>:
c001ea6b:	83 ec 0c             	sub    esp,0xc
c001ea6e:	68 80 00 00 00       	push   0x80
c001ea73:	6a 00                	push   0x0
c001ea75:	68 35 ea 01 c0       	push   0xc001ea35
c001ea7a:	ff 35 30 fb 02 c0    	push   DWORD PTR ds:0xc002fb30
c001ea80:	e8 47 f2 ff ff       	call   c001dccc <Process::createThread(void (*)(void*), void*, int)>
c001ea85:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ea8c:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001ea91:	68 00 01 00 00       	push   0x100
c001ea96:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c001ea9b:	6a 00                	push   0x0
c001ea9d:	6a 00                	push   0x0
c001ea9f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001eaa5:	e8 e2 34 ff ff       	call   c0011f8c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eaaa:	83 c4 2c             	add    esp,0x2c
c001eaad:	c3                   	ret    

c001eaae <Vm::finish8086()>:
c001eaae:	53                   	push   ebx
c001eaaf:	83 ec 08             	sub    esp,0x8
c001eab2:	fa                   	cli    
c001eab3:	ff 05 08 fb 02 c0    	inc    DWORD PTR ds:0xc002fb08
c001eab9:	80 3d 64 fb 02 c0 00 	cmp    BYTE PTR ds:0xc002fb64,0x0
c001eac0:	75 15                	jne    c001ead7 <Vm::finish8086()+0x29>
c001eac2:	e8 2a f4 ff ff       	call   c001def1 <schedule()>
c001eac7:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001eacc:	48                   	dec    eax
c001eacd:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001ead2:	75 de                	jne    c001eab2 <Vm::finish8086()+0x4>
c001ead4:	fb                   	sti    
c001ead5:	eb db                	jmp    c001eab2 <Vm::finish8086()+0x4>
c001ead7:	83 ec 0c             	sub    esp,0xc
c001eada:	8b 1d 60 fb 02 c0    	mov    ebx,DWORD PTR ds:0xc002fb60
c001eae0:	ff 35 68 fb 02 c0    	push   DWORD PTR ds:0xc002fb68
c001eae6:	c6 05 64 fb 02 c0 00 	mov    BYTE PTR ds:0xc002fb64,0x0
c001eaed:	e8 91 f8 ff ff       	call   c001e383 <unblockTask(ThreadControlBlock*)>
c001eaf2:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001eaf7:	83 c4 10             	add    esp,0x10
c001eafa:	8d 50 ff             	lea    edx,[eax-0x1]
c001eafd:	89 15 08 fb 02 c0    	mov    DWORD PTR ds:0xc002fb08,edx
c001eb03:	85 d2                	test   edx,edx
c001eb05:	75 01                	jne    c001eb08 <Vm::finish8086()+0x5a>
c001eb07:	fb                   	sti    
c001eb08:	89 d8                	mov    eax,ebx
c001eb0a:	83 c4 08             	add    esp,0x8
c001eb0d:	5b                   	pop    ebx
c001eb0e:	c3                   	ret    

c001eb0f <Vm::getOutput8086(unsigned char*)>:
c001eb0f:	57                   	push   edi
c001eb10:	8b 0d 6c fb 02 c0    	mov    ecx,DWORD PTR ds:0xc002fb6c
c001eb16:	56                   	push   esi
c001eb17:	be 80 fb 02 c0       	mov    esi,0xc002fb80
c001eb1c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001eb20:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001eb22:	a1 6c fb 02 c0       	mov    eax,ds:0xc002fb6c
c001eb27:	5e                   	pop    esi
c001eb28:	c7 05 6c fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb6c,0x0
c001eb32:	5f                   	pop    edi
c001eb33:	c3                   	ret    

c001eb34 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001eb34:	55                   	push   ebp
c001eb35:	57                   	push   edi
c001eb36:	56                   	push   esi
c001eb37:	53                   	push   ebx
c001eb38:	83 ec 2c             	sub    esp,0x2c
c001eb3b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001eb3f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001eb43:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001eb47:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001eb4b:	fa                   	cli    
c001eb4c:	ff 05 08 fb 02 c0    	inc    DWORD PTR ds:0xc002fb08
c001eb52:	0f b6 35 65 fb 02 c0 	movzx  esi,BYTE PTR ds:0xc002fb65
c001eb59:	89 f0                	mov    eax,esi
c001eb5b:	84 c0                	test   al,al
c001eb5d:	75 1d                	jne    c001eb7c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001eb5f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001eb63:	e8 89 f3 ff ff       	call   c001def1 <schedule()>
c001eb68:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001eb6d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001eb71:	48                   	dec    eax
c001eb72:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001eb77:	75 d2                	jne    c001eb4b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001eb79:	fb                   	sti    
c001eb7a:	eb cf                	jmp    c001eb4b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001eb7c:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001eb81:	c7 05 6c fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb6c,0x0
c001eb8b:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001eb8f:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001eb93:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001eb97:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001eb9b:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001eb9f:	50                   	push   eax
c001eba0:	6a 20                	push   0x20
c001eba2:	6a 00                	push   0x0
c001eba4:	68 80 fb 02 c0       	push   0xc002fb80
c001eba9:	e8 a2 1b fe ff       	call   c0000750 <memset>
c001ebae:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ebb5:	e8 af 0d ff ff       	call   c000f969 <malloc>
c001ebba:	83 c4 0c             	add    esp,0xc
c001ebbd:	89 c3                	mov    ebx,eax
c001ebbf:	ff 35 30 fb 02 c0    	push   DWORD PTR ds:0xc002fb30
c001ebc5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ebc9:	50                   	push   eax
c001ebca:	e8 51 43 ff ff       	call   c0012f20 <File::File(char const*, Process*)>
c001ebcf:	83 c4 10             	add    esp,0x10
c001ebd2:	85 db                	test   ebx,ebx
c001ebd4:	75 0a                	jne    c001ebe0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001ebd6:	83 ec 0c             	sub    esp,0xc
c001ebd9:	68 0c c9 02 c0       	push   0xc002c90c
c001ebde:	eb 3e                	jmp    c001ec1e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001ebe0:	50                   	push   eax
c001ebe1:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ebe5:	50                   	push   eax
c001ebe6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ebea:	50                   	push   eax
c001ebeb:	53                   	push   ebx
c001ebec:	e8 3f 46 ff ff       	call   c0013230 <File::stat(unsigned long long*, bool*)>
c001ebf1:	83 c4 10             	add    esp,0x10
c001ebf4:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001ebf9:	74 0a                	je     c001ec05 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ebfb:	83 ec 0c             	sub    esp,0xc
c001ebfe:	68 20 c9 02 c0       	push   0xc002c920
c001ec03:	eb 19                	jmp    c001ec1e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001ec05:	51                   	push   ecx
c001ec06:	51                   	push   ecx
c001ec07:	6a 01                	push   0x1
c001ec09:	53                   	push   ebx
c001ec0a:	e8 75 43 ff ff       	call   c0012f84 <File::open(FileOpenMode)>
c001ec0f:	83 c4 10             	add    esp,0x10
c001ec12:	85 c0                	test   eax,eax
c001ec14:	74 24                	je     c001ec3a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001ec16:	83 ec 0c             	sub    esp,0xc
c001ec19:	68 39 c9 02 c0       	push   0xc002c939
c001ec1e:	e8 3c b7 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c001ec23:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001ec28:	83 c4 10             	add    esp,0x10
c001ec2b:	48                   	dec    eax
c001ec2c:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001ec31:	85 c0                	test   eax,eax
c001ec33:	75 01                	jne    c001ec36 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001ec35:	fb                   	sti    
c001ec36:	31 f6                	xor    esi,esi
c001ec38:	eb 58                	jmp    c001ec92 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001ec3a:	0f b7 ed             	movzx  ebp,bp
c001ec3d:	50                   	push   eax
c001ec3e:	0f b7 ff             	movzx  edi,di
c001ec41:	50                   	push   eax
c001ec42:	55                   	push   ebp
c001ec43:	57                   	push   edi
c001ec44:	e8 95 fd ff ff       	call   c001e9de <Vm::realToLinear(unsigned short, unsigned short)>
c001ec49:	5a                   	pop    edx
c001ec4a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ec4c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ec50:	51                   	push   ecx
c001ec51:	50                   	push   eax
c001ec52:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ec56:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ec5a:	53                   	push   ebx
c001ec5b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ec5e:	83 c4 14             	add    esp,0x14
c001ec61:	53                   	push   ebx
c001ec62:	e8 7b 43 ff ff       	call   c0012fe2 <File::close()>
c001ec67:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001ec6c:	83 c4 10             	add    esp,0x10
c001ec6f:	48                   	dec    eax
c001ec70:	c6 05 65 fb 02 c0 00 	mov    BYTE PTR ds:0xc002fb65,0x0
c001ec77:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001ec7c:	85 c0                	test   eax,eax
c001ec7e:	75 01                	jne    c001ec81 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001ec80:	fb                   	sti    
c001ec81:	83 ec 0c             	sub    esp,0xc
c001ec84:	ff 35 68 fb 02 c0    	push   DWORD PTR ds:0xc002fb68
c001ec8a:	e8 f4 f6 ff ff       	call   c001e383 <unblockTask(ThreadControlBlock*)>
c001ec8f:	83 c4 10             	add    esp,0x10
c001ec92:	83 c4 2c             	add    esp,0x2c
c001ec95:	89 f0                	mov    eax,esi
c001ec97:	5b                   	pop    ebx
c001ec98:	5e                   	pop    esi
c001ec99:	5f                   	pop    edi
c001ec9a:	5d                   	pop    ebp
c001ec9b:	c3                   	ret    

c001ec9c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ec9c:	57                   	push   edi
c001ec9d:	56                   	push   esi
c001ec9e:	53                   	push   ebx
c001ec9f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eca3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eca7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ecab:	83 e8 06             	sub    eax,0x6
c001ecae:	0f b7 c0             	movzx  eax,ax
c001ecb1:	50                   	push   eax
c001ecb2:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ecb7:	50                   	push   eax
c001ecb8:	e8 21 fd ff ff       	call   c001e9de <Vm::realToLinear(unsigned short, unsigned short)>
c001ecbd:	5a                   	pop    edx
c001ecbe:	5e                   	pop    esi
c001ecbf:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ecc2:	8d 56 fa             	lea    edx,[esi-0x6]
c001ecc5:	81 e2 ff ff 00 00    	and    edx,0xffff
c001eccb:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ecce:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ecd1:	83 c2 02             	add    edx,0x2
c001ecd4:	66 89 10             	mov    WORD PTR [eax],dx
c001ecd7:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ecda:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ecde:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ece1:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ece5:	89 d6                	mov    esi,edx
c001ece7:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001eced:	66 81 e6 ff fd       	and    si,0xfdff
c001ecf2:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ecf6:	74 07                	je     c001ecff <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ecf8:	89 d6                	mov    esi,edx
c001ecfa:	66 81 ce 00 02       	or     si,0x200
c001ecff:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ed03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed08:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ed0c:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ed14:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ed17:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ed1f:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ed22:	5b                   	pop    ebx
c001ed23:	5e                   	pop    esi
c001ed24:	5f                   	pop    edi
c001ed25:	c3                   	ret    

c001ed26 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ed26:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed2b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed30:	c1 e0 04             	shl    eax,0x4
c001ed33:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ed36:	c3                   	ret    

c001ed37 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ed37:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed3c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed41:	c1 e0 04             	shl    eax,0x4
c001ed44:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ed48:	c3                   	ret    

c001ed49 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ed49:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed4e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed53:	c1 e0 04             	shl    eax,0x4
c001ed56:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ed59:	c3                   	ret    

c001ed5a <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ed5a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed5f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed64:	c1 e0 04             	shl    eax,0x4
c001ed67:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed6b:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ed6e:	c3                   	ret    

c001ed6f <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ed6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed74:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed79:	c1 e0 04             	shl    eax,0x4
c001ed7c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed80:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ed84:	c3                   	ret    

c001ed85 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ed85:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed8a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed8f:	c1 e0 04             	shl    eax,0x4
c001ed92:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed96:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ed99:	c3                   	ret    

c001ed9a <Vm::faultHandler(regs*)>:
c001ed9a:	55                   	push   ebp
c001ed9b:	57                   	push   edi
c001ed9c:	56                   	push   esi
c001ed9d:	53                   	push   ebx
c001ed9e:	83 ec 1c             	sub    esp,0x1c
c001eda1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001eda5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001eda8:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001edac:	0f b7 f8             	movzx  edi,ax
c001edaf:	52                   	push   edx
c001edb0:	0f b7 c0             	movzx  eax,ax
c001edb3:	50                   	push   eax
c001edb4:	e8 25 fc ff ff       	call   c001e9de <Vm::realToLinear(unsigned short, unsigned short)>
c001edb9:	5a                   	pop    edx
c001edba:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001edbd:	59                   	pop    ecx
c001edbe:	89 c1                	mov    ecx,eax
c001edc0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001edc3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001edc7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edcc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001edd0:	0f b7 c5             	movzx  eax,bp
c001edd3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001edd7:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001eddb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001eddf:	e8 fa fb ff ff       	call   c001e9de <Vm::realToLinear(unsigned short, unsigned short)>
c001ede4:	5e                   	pop    esi
c001ede5:	be 06 00 00 00       	mov    esi,0x6
c001edea:	5a                   	pop    edx
c001edeb:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001edf0:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001edf5:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001edf8:	80 fa 9d             	cmp    dl,0x9d
c001edfb:	0f 84 2c 02 00 00    	je     c001f02d <Vm::faultHandler(regs*)+0x293>
c001ee01:	0f 87 91 00 00 00    	ja     c001ee98 <Vm::faultHandler(regs*)+0xfe>
c001ee07:	80 fa 66             	cmp    dl,0x66
c001ee0a:	0f 84 98 01 00 00    	je     c001efa8 <Vm::faultHandler(regs*)+0x20e>
c001ee10:	77 47                	ja     c001ee59 <Vm::faultHandler(regs*)+0xbf>
c001ee12:	80 fa 36             	cmp    dl,0x36
c001ee15:	0f 84 80 01 00 00    	je     c001ef9b <Vm::faultHandler(regs*)+0x201>
c001ee1b:	77 1a                	ja     c001ee37 <Vm::faultHandler(regs*)+0x9d>
c001ee1d:	80 fa 26             	cmp    dl,0x26
c001ee20:	0f 84 4e 01 00 00    	je     c001ef74 <Vm::faultHandler(regs*)+0x1da>
c001ee26:	80 fa 2e             	cmp    dl,0x2e
c001ee29:	0f 85 e2 05 00 00    	jne    c001f411 <Vm::faultHandler(regs*)+0x677>
c001ee2f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee32:	31 f6                	xor    esi,esi
c001ee34:	41                   	inc    ecx
c001ee35:	eb be                	jmp    c001edf5 <Vm::faultHandler(regs*)+0x5b>
c001ee37:	80 fa 64             	cmp    dl,0x64
c001ee3a:	0f 84 41 01 00 00    	je     c001ef81 <Vm::faultHandler(regs*)+0x1e7>
c001ee40:	0f 87 48 01 00 00    	ja     c001ef8e <Vm::faultHandler(regs*)+0x1f4>
c001ee46:	80 fa 3e             	cmp    dl,0x3e
c001ee49:	0f 85 c2 05 00 00    	jne    c001f411 <Vm::faultHandler(regs*)+0x677>
c001ee4f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee52:	be 01 00 00 00       	mov    esi,0x1
c001ee57:	eb db                	jmp    c001ee34 <Vm::faultHandler(regs*)+0x9a>
c001ee59:	80 fa 6d             	cmp    dl,0x6d
c001ee5c:	0f 84 ec 02 00 00    	je     c001f14e <Vm::faultHandler(regs*)+0x3b4>
c001ee62:	77 17                	ja     c001ee7b <Vm::faultHandler(regs*)+0xe1>
c001ee64:	80 fa 67             	cmp    dl,0x67
c001ee67:	0f 84 48 01 00 00    	je     c001efb5 <Vm::faultHandler(regs*)+0x21b>
c001ee6d:	80 fa 6c             	cmp    dl,0x6c
c001ee70:	0f 84 69 02 00 00    	je     c001f0df <Vm::faultHandler(regs*)+0x345>
c001ee76:	e9 96 05 00 00       	jmp    c001f411 <Vm::faultHandler(regs*)+0x677>
c001ee7b:	80 fa 6f             	cmp    dl,0x6f
c001ee7e:	0f 84 f4 03 00 00    	je     c001f278 <Vm::faultHandler(regs*)+0x4de>
c001ee84:	0f 82 59 03 00 00    	jb     c001f1e3 <Vm::faultHandler(regs*)+0x449>
c001ee8a:	80 fa 9c             	cmp    dl,0x9c
c001ee8d:	0f 84 2f 01 00 00    	je     c001efc2 <Vm::faultHandler(regs*)+0x228>
c001ee93:	e9 79 05 00 00       	jmp    c001f411 <Vm::faultHandler(regs*)+0x677>
c001ee98:	80 fa ec             	cmp    dl,0xec
c001ee9b:	0f 84 14 05 00 00    	je     c001f3b5 <Vm::faultHandler(regs*)+0x61b>
c001eea1:	77 7b                	ja     c001ef1e <Vm::faultHandler(regs*)+0x184>
c001eea3:	80 fa e4             	cmp    dl,0xe4
c001eea6:	0f 84 93 04 00 00    	je     c001f33f <Vm::faultHandler(regs*)+0x5a5>
c001eeac:	77 53                	ja     c001ef01 <Vm::faultHandler(regs*)+0x167>
c001eeae:	80 fa cd             	cmp    dl,0xcd
c001eeb1:	0f 84 d9 01 00 00    	je     c001f090 <Vm::faultHandler(regs*)+0x2f6>
c001eeb7:	80 fa cf             	cmp    dl,0xcf
c001eeba:	0f 85 51 05 00 00    	jne    c001f411 <Vm::faultHandler(regs*)+0x677>
c001eec0:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001eec3:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001eec6:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001eeca:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001eecd:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001eed1:	81 ca 00 02 02 00    	or     edx,0x20200
c001eed7:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eeda:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001eede:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eee4:	66 c1 e8 09          	shr    ax,0x9
c001eee8:	83 e0 01             	and    eax,0x1
c001eeeb:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eeee:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eef1:	83 c0 06             	add    eax,0x6
c001eef4:	25 ff ff 00 00       	and    eax,0xffff
c001eef9:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001eefc:	e9 0c 05 00 00       	jmp    c001f40d <Vm::faultHandler(regs*)+0x673>
c001ef01:	80 fa e6             	cmp    dl,0xe6
c001ef04:	0f 84 7f 04 00 00    	je     c001f389 <Vm::faultHandler(regs*)+0x5ef>
c001ef0a:	0f 82 4b 04 00 00    	jb     c001f35b <Vm::faultHandler(regs*)+0x5c1>
c001ef10:	80 fa e7             	cmp    dl,0xe7
c001ef13:	0f 84 87 04 00 00    	je     c001f3a0 <Vm::faultHandler(regs*)+0x606>
c001ef19:	e9 f3 04 00 00       	jmp    c001f411 <Vm::faultHandler(regs*)+0x677>
c001ef1e:	80 fa ef             	cmp    dl,0xef
c001ef21:	0f 84 d1 04 00 00    	je     c001f3f8 <Vm::faultHandler(regs*)+0x65e>
c001ef27:	77 28                	ja     c001ef51 <Vm::faultHandler(regs*)+0x1b7>
c001ef29:	80 fa ed             	cmp    dl,0xed
c001ef2c:	0f 84 9f 04 00 00    	je     c001f3d1 <Vm::faultHandler(regs*)+0x637>
c001ef32:	80 fa ee             	cmp    dl,0xee
c001ef35:	0f 85 d6 04 00 00    	jne    c001f411 <Vm::faultHandler(regs*)+0x677>
c001ef3b:	50                   	push   eax
c001ef3c:	50                   	push   eax
c001ef3d:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ef41:	50                   	push   eax
c001ef42:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ef46:	50                   	push   eax
c001ef47:	e8 5c fa ff ff       	call   c001e9a8 <Vm::outbv(unsigned short, unsigned char)>
c001ef4c:	e9 9f 04 00 00       	jmp    c001f3f0 <Vm::faultHandler(regs*)+0x656>
c001ef51:	80 fa fa             	cmp    dl,0xfa
c001ef54:	0f 84 69 01 00 00    	je     c001f0c3 <Vm::faultHandler(regs*)+0x329>
c001ef5a:	80 fa fb             	cmp    dl,0xfb
c001ef5d:	0f 84 6e 01 00 00    	je     c001f0d1 <Vm::faultHandler(regs*)+0x337>
c001ef63:	80 fa f3             	cmp    dl,0xf3
c001ef66:	0f 85 a5 04 00 00    	jne    c001f411 <Vm::faultHandler(regs*)+0x677>
c001ef6c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ef6f:	e9 c0 fe ff ff       	jmp    c001ee34 <Vm::faultHandler(regs*)+0x9a>
c001ef74:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ef77:	be 02 00 00 00       	mov    esi,0x2
c001ef7c:	e9 b3 fe ff ff       	jmp    c001ee34 <Vm::faultHandler(regs*)+0x9a>
c001ef81:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ef84:	be 03 00 00 00       	mov    esi,0x3
c001ef89:	e9 a6 fe ff ff       	jmp    c001ee34 <Vm::faultHandler(regs*)+0x9a>
c001ef8e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ef91:	be 04 00 00 00       	mov    esi,0x4
c001ef96:	e9 99 fe ff ff       	jmp    c001ee34 <Vm::faultHandler(regs*)+0x9a>
c001ef9b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ef9e:	be 05 00 00 00       	mov    esi,0x5
c001efa3:	e9 8c fe ff ff       	jmp    c001ee34 <Vm::faultHandler(regs*)+0x9a>
c001efa8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001efab:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001efb0:	e9 7f fe ff ff       	jmp    c001ee34 <Vm::faultHandler(regs*)+0x9a>
c001efb5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001efb8:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001efbd:	e9 72 fe ff ff       	jmp    c001ee34 <Vm::faultHandler(regs*)+0x9a>
c001efc2:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001efc5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001efc9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001efce:	74 30                	je     c001f000 <Vm::faultHandler(regs*)+0x266>
c001efd0:	83 e9 04             	sub    ecx,0x4
c001efd3:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001efd9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001efdf:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001efe2:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001efe5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001efeb:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001efef:	0f 84 15 04 00 00    	je     c001f40a <Vm::faultHandler(regs*)+0x670>
c001eff5:	80 ce 02             	or     dh,0x2
c001eff8:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001effb:	e9 0a 04 00 00       	jmp    c001f40a <Vm::faultHandler(regs*)+0x670>
c001f000:	83 e9 02             	sub    ecx,0x2
c001f003:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f009:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f00c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f010:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f016:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f01a:	74 05                	je     c001f021 <Vm::faultHandler(regs*)+0x287>
c001f01c:	80 ce 02             	or     dh,0x2
c001f01f:	eb 03                	jmp    c001f024 <Vm::faultHandler(regs*)+0x28a>
c001f021:	80 e6 fd             	and    dh,0xfd
c001f024:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f028:	e9 dd 03 00 00       	jmp    c001f40a <Vm::faultHandler(regs*)+0x670>
c001f02d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f032:	74 2a                	je     c001f05e <Vm::faultHandler(regs*)+0x2c4>
c001f034:	8b 10                	mov    edx,DWORD PTR [eax]
c001f036:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f03c:	81 ca 00 02 02 00    	or     edx,0x20200
c001f042:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f045:	8b 00                	mov    eax,DWORD PTR [eax]
c001f047:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f04d:	c1 e8 09             	shr    eax,0x9
c001f050:	83 e0 01             	and    eax,0x1
c001f053:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f056:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f059:	83 c0 04             	add    eax,0x4
c001f05c:	eb 25                	jmp    c001f083 <Vm::faultHandler(regs*)+0x2e9>
c001f05e:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f061:	81 ca 00 02 02 00    	or     edx,0x20200
c001f067:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f06a:	66 8b 00             	mov    ax,WORD PTR [eax]
c001f06d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f073:	66 c1 e8 09          	shr    ax,0x9
c001f077:	83 e0 01             	and    eax,0x1
c001f07a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f07d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f080:	83 c0 02             	add    eax,0x2
c001f083:	25 ff ff 00 00       	and    eax,0xffff
c001f088:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f08b:	e9 7a 03 00 00       	jmp    c001f40a <Vm::faultHandler(regs*)+0x670>
c001f090:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f094:	3c ee                	cmp    al,0xee
c001f096:	75 10                	jne    c001f0a8 <Vm::faultHandler(regs*)+0x30e>
c001f098:	83 ec 0c             	sub    esp,0xc
c001f09b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001f09e:	e8 a2 f9 ff ff       	call   c001ea45 <Vm::mainloop3(unsigned long)>
c001f0a3:	e9 4b 03 00 00       	jmp    c001f3f3 <Vm::faultHandler(regs*)+0x659>
c001f0a8:	83 ec 0c             	sub    esp,0xc
c001f0ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f0af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0b3:	51                   	push   ecx
c001f0b4:	50                   	push   eax
c001f0b5:	53                   	push   ebx
c001f0b6:	e8 e1 fb ff ff       	call   c001ec9c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f0bb:	83 c4 20             	add    esp,0x20
c001f0be:	e9 4a 03 00 00       	jmp    c001f40d <Vm::faultHandler(regs*)+0x673>
c001f0c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f0c8:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f0cc:	e9 39 03 00 00       	jmp    c001f40a <Vm::faultHandler(regs*)+0x670>
c001f0d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f0d6:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f0da:	e9 2b 03 00 00       	jmp    c001f40a <Vm::faultHandler(regs*)+0x670>
c001f0df:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f0e2:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f0e7:	74 2b                	je     c001f114 <Vm::faultHandler(regs*)+0x37a>
c001f0e9:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001f0f0:	76 22                	jbe    c001f114 <Vm::faultHandler(regs*)+0x37a>
c001f0f2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f0f6:	50                   	push   eax
c001f0f7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f0fb:	50                   	push   eax
c001f0fc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f100:	50                   	push   eax
c001f101:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f105:	50                   	push   eax
c001f106:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f10a:	50                   	push   eax
c001f10b:	6a 6c                	push   0x6c
c001f10d:	6a 6c                	push   0x6c
c001f10f:	e9 b9 01 00 00       	jmp    c001f2cd <Vm::faultHandler(regs*)+0x533>
c001f114:	83 ec 0c             	sub    esp,0xc
c001f117:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f11b:	0f b7 f6             	movzx  esi,si
c001f11e:	50                   	push   eax
c001f11f:	e8 71 f8 ff ff       	call   c001e995 <Vm::inbv(unsigned short)>
c001f124:	83 c4 0c             	add    esp,0xc
c001f127:	0f b6 c0             	movzx  eax,al
c001f12a:	50                   	push   eax
c001f12b:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001f12f:	50                   	push   eax
c001f130:	56                   	push   esi
c001f131:	e8 24 fc ff ff       	call   c001ed5a <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f136:	83 c4 10             	add    esp,0x10
c001f139:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f13c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f140:	74 03                	je     c001f145 <Vm::faultHandler(regs*)+0x3ab>
c001f142:	48                   	dec    eax
c001f143:	eb 01                	jmp    c001f146 <Vm::faultHandler(regs*)+0x3ac>
c001f145:	40                   	inc    eax
c001f146:	0f b7 c0             	movzx  eax,ax
c001f149:	e9 8d 00 00 00       	jmp    c001f1db <Vm::faultHandler(regs*)+0x441>
c001f14e:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f151:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f154:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f159:	74 29                	je     c001f184 <Vm::faultHandler(regs*)+0x3ea>
c001f15b:	3d ff ff 00 00       	cmp    eax,0xffff
c001f160:	76 22                	jbe    c001f184 <Vm::faultHandler(regs*)+0x3ea>
c001f162:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f166:	50                   	push   eax
c001f167:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f16b:	50                   	push   eax
c001f16c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f170:	50                   	push   eax
c001f171:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f175:	50                   	push   eax
c001f176:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f17a:	50                   	push   eax
c001f17b:	6a 6d                	push   0x6d
c001f17d:	6a 6d                	push   0x6d
c001f17f:	e9 49 01 00 00       	jmp    c001f2cd <Vm::faultHandler(regs*)+0x533>
c001f184:	0f b7 c8             	movzx  ecx,ax
c001f187:	0f b7 f6             	movzx  esi,si
c001f18a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f18d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f192:	74 20                	je     c001f1b4 <Vm::faultHandler(regs*)+0x41a>
c001f194:	ed                   	in     eax,dx
c001f195:	55                   	push   ebp
c001f196:	50                   	push   eax
c001f197:	51                   	push   ecx
c001f198:	56                   	push   esi
c001f199:	e8 e7 fb ff ff       	call   c001ed85 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f19e:	83 c4 10             	add    esp,0x10
c001f1a1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f1a4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f1a8:	74 05                	je     c001f1af <Vm::faultHandler(regs*)+0x415>
c001f1aa:	83 e8 04             	sub    eax,0x4
c001f1ad:	eb 27                	jmp    c001f1d6 <Vm::faultHandler(regs*)+0x43c>
c001f1af:	83 c0 04             	add    eax,0x4
c001f1b2:	eb 22                	jmp    c001f1d6 <Vm::faultHandler(regs*)+0x43c>
c001f1b4:	66 ed                	in     ax,dx
c001f1b6:	0f b7 c0             	movzx  eax,ax
c001f1b9:	57                   	push   edi
c001f1ba:	50                   	push   eax
c001f1bb:	51                   	push   ecx
c001f1bc:	56                   	push   esi
c001f1bd:	e8 ad fb ff ff       	call   c001ed6f <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f1c2:	83 c4 10             	add    esp,0x10
c001f1c5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f1c8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f1cc:	74 05                	je     c001f1d3 <Vm::faultHandler(regs*)+0x439>
c001f1ce:	83 e8 02             	sub    eax,0x2
c001f1d1:	eb 03                	jmp    c001f1d6 <Vm::faultHandler(regs*)+0x43c>
c001f1d3:	83 c0 02             	add    eax,0x2
c001f1d6:	25 ff ff 00 00       	and    eax,0xffff
c001f1db:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001f1de:	e9 27 02 00 00       	jmp    c001f40a <Vm::faultHandler(regs*)+0x670>
c001f1e3:	8d 46 ff             	lea    eax,[esi-0x1]
c001f1e6:	3c 05                	cmp    al,0x5
c001f1e8:	77 24                	ja     c001f20e <Vm::faultHandler(regs*)+0x474>
c001f1ea:	0f b6 c0             	movzx  eax,al
c001f1ed:	ff 24 85 ac c9 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd3654]
c001f1f4:	0f b7 fd             	movzx  edi,bp
c001f1f7:	eb 15                	jmp    c001f20e <Vm::faultHandler(regs*)+0x474>
c001f1f9:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001f1fd:	eb 0f                	jmp    c001f20e <Vm::faultHandler(regs*)+0x474>
c001f1ff:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001f203:	eb 09                	jmp    c001f20e <Vm::faultHandler(regs*)+0x474>
c001f205:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001f209:	eb 03                	jmp    c001f20e <Vm::faultHandler(regs*)+0x474>
c001f20b:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001f20e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f211:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f216:	74 29                	je     c001f241 <Vm::faultHandler(regs*)+0x4a7>
c001f218:	3d ff ff 00 00       	cmp    eax,0xffff
c001f21d:	76 22                	jbe    c001f241 <Vm::faultHandler(regs*)+0x4a7>
c001f21f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f223:	50                   	push   eax
c001f224:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f228:	50                   	push   eax
c001f229:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f22d:	50                   	push   eax
c001f22e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f232:	50                   	push   eax
c001f233:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f237:	50                   	push   eax
c001f238:	6a 6e                	push   0x6e
c001f23a:	6a 6e                	push   0x6e
c001f23c:	e9 8c 00 00 00       	jmp    c001f2cd <Vm::faultHandler(regs*)+0x533>
c001f241:	0f b7 c0             	movzx  eax,ax
c001f244:	52                   	push   edx
c001f245:	52                   	push   edx
c001f246:	50                   	push   eax
c001f247:	57                   	push   edi
c001f248:	e8 d9 fa ff ff       	call   c001ed26 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f24d:	59                   	pop    ecx
c001f24e:	0f b6 c0             	movzx  eax,al
c001f251:	5e                   	pop    esi
c001f252:	50                   	push   eax
c001f253:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f257:	50                   	push   eax
c001f258:	e8 4b f7 ff ff       	call   c001e9a8 <Vm::outbv(unsigned short, unsigned char)>
c001f25d:	83 c4 10             	add    esp,0x10
c001f260:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f263:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f267:	74 03                	je     c001f26c <Vm::faultHandler(regs*)+0x4d2>
c001f269:	48                   	dec    eax
c001f26a:	eb 01                	jmp    c001f26d <Vm::faultHandler(regs*)+0x4d3>
c001f26c:	40                   	inc    eax
c001f26d:	0f b7 c0             	movzx  eax,ax
c001f270:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001f273:	e9 92 01 00 00       	jmp    c001f40a <Vm::faultHandler(regs*)+0x670>
c001f278:	8d 46 ff             	lea    eax,[esi-0x1]
c001f27b:	3c 05                	cmp    al,0x5
c001f27d:	77 1f                	ja     c001f29e <Vm::faultHandler(regs*)+0x504>
c001f27f:	0f b6 c0             	movzx  eax,al
c001f282:	ff 24 85 c4 c9 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd363c]
c001f289:	89 ef                	mov    edi,ebp
c001f28b:	eb 11                	jmp    c001f29e <Vm::faultHandler(regs*)+0x504>
c001f28d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001f290:	eb 0c                	jmp    c001f29e <Vm::faultHandler(regs*)+0x504>
c001f292:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001f295:	eb 07                	jmp    c001f29e <Vm::faultHandler(regs*)+0x504>
c001f297:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001f29a:	eb 02                	jmp    c001f29e <Vm::faultHandler(regs*)+0x504>
c001f29c:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001f29e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001f2a1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f2a6:	74 37                	je     c001f2df <Vm::faultHandler(regs*)+0x545>
c001f2a8:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001f2ae:	76 2f                	jbe    c001f2df <Vm::faultHandler(regs*)+0x545>
c001f2b0:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f2b4:	50                   	push   eax
c001f2b5:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f2b9:	50                   	push   eax
c001f2ba:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f2be:	50                   	push   eax
c001f2bf:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f2c3:	50                   	push   eax
c001f2c4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f2c8:	50                   	push   eax
c001f2c9:	6a 6f                	push   0x6f
c001f2cb:	6a 6f                	push   0x6f
c001f2cd:	68 52 c9 02 c0       	push   0xc002c952
c001f2d2:	e8 ea 36 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001f2d7:	83 c4 20             	add    esp,0x20
c001f2da:	e9 86 01 00 00       	jmp    c001f465 <Vm::faultHandler(regs*)+0x6cb>
c001f2df:	0f b7 d7             	movzx  edx,di
c001f2e2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001f2e5:	0f b7 c6             	movzx  eax,si
c001f2e8:	81 e1 00 04 00 00    	and    ecx,0x400
c001f2ee:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001f2f1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f2f6:	74 1d                	je     c001f315 <Vm::faultHandler(regs*)+0x57b>
c001f2f8:	55                   	push   ebp
c001f2f9:	55                   	push   ebp
c001f2fa:	50                   	push   eax
c001f2fb:	52                   	push   edx
c001f2fc:	e8 48 fa ff ff       	call   c001ed49 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f301:	83 c4 10             	add    esp,0x10
c001f304:	89 fa                	mov    edx,edi
c001f306:	ef                   	out    dx,eax
c001f307:	85 c9                	test   ecx,ecx
c001f309:	74 05                	je     c001f310 <Vm::faultHandler(regs*)+0x576>
c001f30b:	83 ee 04             	sub    esi,0x4
c001f30e:	eb 21                	jmp    c001f331 <Vm::faultHandler(regs*)+0x597>
c001f310:	83 c6 04             	add    esi,0x4
c001f313:	eb 1c                	jmp    c001f331 <Vm::faultHandler(regs*)+0x597>
c001f315:	55                   	push   ebp
c001f316:	55                   	push   ebp
c001f317:	50                   	push   eax
c001f318:	52                   	push   edx
c001f319:	e8 19 fa ff ff       	call   c001ed37 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f31e:	83 c4 10             	add    esp,0x10
c001f321:	89 fa                	mov    edx,edi
c001f323:	66 ef                	out    dx,ax
c001f325:	85 c9                	test   ecx,ecx
c001f327:	74 05                	je     c001f32e <Vm::faultHandler(regs*)+0x594>
c001f329:	83 ee 02             	sub    esi,0x2
c001f32c:	eb 03                	jmp    c001f331 <Vm::faultHandler(regs*)+0x597>
c001f32e:	83 c6 02             	add    esi,0x2
c001f331:	81 e6 ff ff 00 00    	and    esi,0xffff
c001f337:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001f33a:	e9 cb 00 00 00       	jmp    c001f40a <Vm::faultHandler(regs*)+0x670>
c001f33f:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f346:	83 ec 0c             	sub    esp,0xc
c001f349:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f34d:	50                   	push   eax
c001f34e:	e8 42 f6 ff ff       	call   c001e995 <Vm::inbv(unsigned short)>
c001f353:	0f b6 c0             	movzx  eax,al
c001f356:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f359:	eb 3f                	jmp    c001f39a <Vm::faultHandler(regs*)+0x600>
c001f35b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f360:	74 07                	je     c001f369 <Vm::faultHandler(regs*)+0x5cf>
c001f362:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f366:	ed                   	in     eax,dx
c001f367:	eb 14                	jmp    c001f37d <Vm::faultHandler(regs*)+0x5e3>
c001f369:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001f36c:	66 31 f6             	xor    si,si
c001f36f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001f372:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f376:	66 ed                	in     ax,dx
c001f378:	0f b7 c0             	movzx  eax,ax
c001f37b:	09 f0                	or     eax,esi
c001f37d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f380:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f384:	e9 84 00 00 00       	jmp    c001f40d <Vm::faultHandler(regs*)+0x673>
c001f389:	52                   	push   edx
c001f38a:	52                   	push   edx
c001f38b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f38f:	50                   	push   eax
c001f390:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f394:	50                   	push   eax
c001f395:	e8 0e f6 ff ff       	call   c001e9a8 <Vm::outbv(unsigned short, unsigned char)>
c001f39a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f39e:	eb 53                	jmp    c001f3f3 <Vm::faultHandler(regs*)+0x659>
c001f3a0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f3a3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f3a7:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f3ac:	74 03                	je     c001f3b1 <Vm::faultHandler(regs*)+0x617>
c001f3ae:	ef                   	out    dx,eax
c001f3af:	eb cf                	jmp    c001f380 <Vm::faultHandler(regs*)+0x5e6>
c001f3b1:	66 ef                	out    dx,ax
c001f3b3:	eb cb                	jmp    c001f380 <Vm::faultHandler(regs*)+0x5e6>
c001f3b5:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f3bc:	83 ec 0c             	sub    esp,0xc
c001f3bf:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f3c3:	50                   	push   eax
c001f3c4:	e8 cc f5 ff ff       	call   c001e995 <Vm::inbv(unsigned short)>
c001f3c9:	0f b6 c0             	movzx  eax,al
c001f3cc:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f3cf:	eb 1f                	jmp    c001f3f0 <Vm::faultHandler(regs*)+0x656>
c001f3d1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f3d4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f3d9:	74 03                	je     c001f3de <Vm::faultHandler(regs*)+0x644>
c001f3db:	ed                   	in     eax,dx
c001f3dc:	eb 0d                	jmp    c001f3eb <Vm::faultHandler(regs*)+0x651>
c001f3de:	66 ed                	in     ax,dx
c001f3e0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001f3e3:	0f b7 c0             	movzx  eax,ax
c001f3e6:	66 31 d2             	xor    dx,dx
c001f3e9:	09 d0                	or     eax,edx
c001f3eb:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f3ee:	eb 1a                	jmp    c001f40a <Vm::faultHandler(regs*)+0x670>
c001f3f0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f3f3:	83 c4 10             	add    esp,0x10
c001f3f6:	eb 15                	jmp    c001f40d <Vm::faultHandler(regs*)+0x673>
c001f3f8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f3fb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f3fe:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f403:	74 03                	je     c001f408 <Vm::faultHandler(regs*)+0x66e>
c001f405:	ef                   	out    dx,eax
c001f406:	eb 02                	jmp    c001f40a <Vm::faultHandler(regs*)+0x670>
c001f408:	66 ef                	out    dx,ax
c001f40a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f40d:	b0 01                	mov    al,0x1
c001f40f:	eb 56                	jmp    c001f467 <Vm::faultHandler(regs*)+0x6cd>
c001f411:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f415:	50                   	push   eax
c001f416:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f41a:	50                   	push   eax
c001f41b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f41f:	50                   	push   eax
c001f420:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f424:	50                   	push   eax
c001f425:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f429:	50                   	push   eax
c001f42a:	52                   	push   edx
c001f42b:	52                   	push   edx
c001f42c:	68 7f c9 02 c0       	push   0xc002c97f
c001f431:	e8 8b 35 ff ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c001f436:	83 c4 20             	add    esp,0x20
c001f439:	83 ec 0c             	sub    esp,0xc
c001f43c:	6a 60                	push   0x60
c001f43e:	e8 52 f5 ff ff       	call   c001e995 <Vm::inbv(unsigned short)>
c001f443:	83 c4 10             	add    esp,0x10
c001f446:	3c 1c                	cmp    al,0x1c
c001f448:	74 04                	je     c001f44e <Vm::faultHandler(regs*)+0x6b4>
c001f44a:	3c 5a                	cmp    al,0x5a
c001f44c:	75 eb                	jne    c001f439 <Vm::faultHandler(regs*)+0x69f>
c001f44e:	3c 5a                	cmp    al,0x5a
c001f450:	74 04                	je     c001f456 <Vm::faultHandler(regs*)+0x6bc>
c001f452:	3c 1c                	cmp    al,0x1c
c001f454:	75 0f                	jne    c001f465 <Vm::faultHandler(regs*)+0x6cb>
c001f456:	83 ec 0c             	sub    esp,0xc
c001f459:	6a 60                	push   0x60
c001f45b:	e8 35 f5 ff ff       	call   c001e995 <Vm::inbv(unsigned short)>
c001f460:	83 c4 10             	add    esp,0x10
c001f463:	eb e9                	jmp    c001f44e <Vm::faultHandler(regs*)+0x6b4>
c001f465:	31 c0                	xor    eax,eax
c001f467:	83 c4 1c             	add    esp,0x1c
c001f46a:	5b                   	pop    ebx
c001f46b:	5e                   	pop    esi
c001f46c:	5f                   	pop    edi
c001f46d:	5d                   	pop    ebp
c001f46e:	c3                   	ret    

c001f46f <Vm::fpuInternalTo32(unsigned long long)>:
c001f46f:	57                   	push   edi
c001f470:	56                   	push   esi
c001f471:	53                   	push   ebx
c001f472:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f47a:	89 d6                	mov    esi,edx
c001f47c:	89 d7                	mov    edi,edx
c001f47e:	89 c1                	mov    ecx,eax
c001f480:	c1 ef 14             	shr    edi,0x14
c001f483:	89 d3                	mov    ebx,edx
c001f485:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f48b:	31 d2                	xor    edx,edx
c001f48d:	89 f8                	mov    eax,edi
c001f48f:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f495:	bf ff 00 00 00       	mov    edi,0xff
c001f49a:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f49f:	83 d2 ff             	adc    edx,0xffffffff
c001f4a2:	39 c7                	cmp    edi,eax
c001f4a4:	bf 00 00 00 00       	mov    edi,0x0
c001f4a9:	19 d7                	sbb    edi,edx
c001f4ab:	72 15                	jb     c001f4c2 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f4ad:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f4b1:	c1 e0 17             	shl    eax,0x17
c001f4b4:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f4ba:	09 f1                	or     ecx,esi
c001f4bc:	09 c1                	or     ecx,eax
c001f4be:	89 cf                	mov    edi,ecx
c001f4c0:	eb 02                	jmp    c001f4c4 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f4c2:	31 ff                	xor    edi,edi
c001f4c4:	89 f8                	mov    eax,edi
c001f4c6:	5b                   	pop    ebx
c001f4c7:	5e                   	pop    esi
c001f4c8:	5f                   	pop    edi
c001f4c9:	c3                   	ret    

c001f4ca <Vm::fpuInternalTo64(unsigned long long)>:
c001f4ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f4d2:	c3                   	ret    

c001f4d3 <Vm::fpu32ToInternal(unsigned int)>:
c001f4d3:	57                   	push   edi
c001f4d4:	31 ff                	xor    edi,edi
c001f4d6:	56                   	push   esi
c001f4d7:	53                   	push   ebx
c001f4d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f4dc:	89 cb                	mov    ebx,ecx
c001f4de:	89 ce                	mov    esi,ecx
c001f4e0:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f4e6:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f4ec:	c1 e9 17             	shr    ecx,0x17
c001f4ef:	89 f0                	mov    eax,esi
c001f4f1:	0f b6 d1             	movzx  edx,cl
c001f4f4:	81 c2 80 03 00 00    	add    edx,0x380
c001f4fa:	89 d1                	mov    ecx,edx
c001f4fc:	89 fa                	mov    edx,edi
c001f4fe:	c1 e1 14             	shl    ecx,0x14
c001f501:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f505:	c1 e0 1d             	shl    eax,0x1d
c001f508:	89 d7                	mov    edi,edx
c001f50a:	89 c6                	mov    esi,eax
c001f50c:	89 ca                	mov    edx,ecx
c001f50e:	89 f0                	mov    eax,esi
c001f510:	09 fa                	or     edx,edi
c001f512:	09 da                	or     edx,ebx
c001f514:	5b                   	pop    ebx
c001f515:	5e                   	pop    esi
c001f516:	5f                   	pop    edi
c001f517:	c3                   	ret    

c001f518 <Vm::fpu64ToInternal(unsigned long long)>:
c001f518:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f51c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f520:	c3                   	ret    

c001f521 <Vm::fpuFloatToLong(unsigned long long)>:
c001f521:	57                   	push   edi
c001f522:	31 c0                	xor    eax,eax
c001f524:	56                   	push   esi
c001f525:	31 d2                	xor    edx,edx
c001f527:	53                   	push   ebx
c001f528:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f52c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f530:	89 d9                	mov    ecx,ebx
c001f532:	c1 e9 14             	shr    ecx,0x14
c001f535:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f53b:	89 cf                	mov    edi,ecx
c001f53d:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f543:	78 33                	js     c001f578 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f545:	89 d9                	mov    ecx,ebx
c001f547:	89 f0                	mov    eax,esi
c001f549:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f54f:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f555:	89 ca                	mov    edx,ecx
c001f557:	b9 34 00 00 00       	mov    ecx,0x34
c001f55c:	29 f9                	sub    ecx,edi
c001f55e:	0f ad d0             	shrd   eax,edx,cl
c001f561:	d3 fa                	sar    edx,cl
c001f563:	f6 c1 20             	test   cl,0x20
c001f566:	74 05                	je     c001f56d <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f568:	89 d0                	mov    eax,edx
c001f56a:	c1 fa 1f             	sar    edx,0x1f
c001f56d:	85 db                	test   ebx,ebx
c001f56f:	79 07                	jns    c001f578 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f571:	f7 d8                	neg    eax
c001f573:	83 d2 00             	adc    edx,0x0
c001f576:	f7 da                	neg    edx
c001f578:	5b                   	pop    ebx
c001f579:	5e                   	pop    esi
c001f57a:	5f                   	pop    edi
c001f57b:	c3                   	ret    

c001f57c <Vm::fpuULongToFloat(unsigned long long)>:
c001f57c:	57                   	push   edi
c001f57d:	31 c9                	xor    ecx,ecx
c001f57f:	56                   	push   esi
c001f580:	53                   	push   ebx
c001f581:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f585:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f589:	0f ba e7 14          	bt     edi,0x14
c001f58d:	72 07                	jb     c001f596 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f58f:	01 f6                	add    esi,esi
c001f591:	11 ff                	adc    edi,edi
c001f593:	41                   	inc    ecx
c001f594:	eb f3                	jmp    c001f589 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f596:	89 fa                	mov    edx,edi
c001f598:	89 f0                	mov    eax,esi
c001f59a:	bb 33 04 00 00       	mov    ebx,0x433
c001f59f:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f5a5:	29 cb                	sub    ebx,ecx
c001f5a7:	89 d9                	mov    ecx,ebx
c001f5a9:	5b                   	pop    ebx
c001f5aa:	c1 e1 14             	shl    ecx,0x14
c001f5ad:	5e                   	pop    esi
c001f5ae:	09 ca                	or     edx,ecx
c001f5b0:	5f                   	pop    edi
c001f5b1:	c3                   	ret    

c001f5b2 <Vm::fpuLongToFloat(long long)>:
c001f5b2:	56                   	push   esi
c001f5b3:	31 c0                	xor    eax,eax
c001f5b5:	53                   	push   ebx
c001f5b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f5ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f5be:	39 c8                	cmp    eax,ecx
c001f5c0:	19 d8                	sbb    eax,ebx
c001f5c2:	7d 04                	jge    c001f5c8 <Vm::fpuLongToFloat(long long)+0x16>
c001f5c4:	31 f6                	xor    esi,esi
c001f5c6:	eb 0c                	jmp    c001f5d4 <Vm::fpuLongToFloat(long long)+0x22>
c001f5c8:	f7 d9                	neg    ecx
c001f5ca:	be 01 00 00 00       	mov    esi,0x1
c001f5cf:	83 d3 00             	adc    ebx,0x0
c001f5d2:	f7 db                	neg    ebx
c001f5d4:	31 c0                	xor    eax,eax
c001f5d6:	0f ba e3 14          	bt     ebx,0x14
c001f5da:	72 07                	jb     c001f5e3 <Vm::fpuLongToFloat(long long)+0x31>
c001f5dc:	01 c9                	add    ecx,ecx
c001f5de:	11 db                	adc    ebx,ebx
c001f5e0:	40                   	inc    eax
c001f5e1:	eb f3                	jmp    c001f5d6 <Vm::fpuLongToFloat(long long)+0x24>
c001f5e3:	ba 33 04 00 00       	mov    edx,0x433
c001f5e8:	29 c2                	sub    edx,eax
c001f5ea:	89 c8                	mov    eax,ecx
c001f5ec:	c1 e2 14             	shl    edx,0x14
c001f5ef:	89 d9                	mov    ecx,ebx
c001f5f1:	89 f3                	mov    ebx,esi
c001f5f3:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f5f9:	09 ca                	or     edx,ecx
c001f5fb:	84 db                	test   bl,bl
c001f5fd:	74 06                	je     c001f605 <Vm::fpuLongToFloat(long long)+0x53>
c001f5ff:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f605:	5b                   	pop    ebx
c001f606:	5e                   	pop    esi
c001f607:	c3                   	ret    

c001f608 <Vm::fpuGet0()>:
c001f608:	31 c0                	xor    eax,eax
c001f60a:	31 d2                	xor    edx,edx
c001f60c:	c3                   	ret    

c001f60d <Vm::fpuGet1()>:
c001f60d:	b8 01 00 00 00       	mov    eax,0x1
c001f612:	31 d2                	xor    edx,edx
c001f614:	c3                   	ret    

c001f615 <Vm::fpuGetPi()>:
c001f615:	b8 03 00 00 00       	mov    eax,0x3
c001f61a:	31 d2                	xor    edx,edx
c001f61c:	c3                   	ret    

c001f61d <Vm::fpuGetLog2E()>:
c001f61d:	83 ec 18             	sub    esp,0x18
c001f620:	68 dc c9 02 c0       	push   0xc002c9dc
c001f625:	e8 35 ad ff ff       	call   c001a35f <Krnl::panic(char const*)>
c001f62a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f62f:	31 d2                	xor    edx,edx
c001f631:	83 c4 1c             	add    esp,0x1c
c001f634:	c3                   	ret    

c001f635 <Vm::fpuGetLogE2()>:
c001f635:	83 ec 18             	sub    esp,0x18
c001f638:	68 e8 c9 02 c0       	push   0xc002c9e8
c001f63d:	e8 1d ad ff ff       	call   c001a35f <Krnl::panic(char const*)>
c001f642:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f647:	31 d2                	xor    edx,edx
c001f649:	83 c4 1c             	add    esp,0x1c
c001f64c:	c3                   	ret    

c001f64d <Vm::fpuGetLog210()>:
c001f64d:	83 ec 18             	sub    esp,0x18
c001f650:	68 f4 c9 02 c0       	push   0xc002c9f4
c001f655:	e8 05 ad ff ff       	call   c001a35f <Krnl::panic(char const*)>
c001f65a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f65f:	31 d2                	xor    edx,edx
c001f661:	83 c4 1c             	add    esp,0x1c
c001f664:	c3                   	ret    

c001f665 <Vm::fpuGetLog102()>:
c001f665:	83 ec 18             	sub    esp,0x18
c001f668:	68 01 ca 02 c0       	push   0xc002ca01
c001f66d:	e8 ed ac ff ff       	call   c001a35f <Krnl::panic(char const*)>
c001f672:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f677:	31 d2                	xor    edx,edx
c001f679:	83 c4 1c             	add    esp,0x1c
c001f67c:	c3                   	ret    

c001f67d <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f67d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f681:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f685:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f689:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f68d:	0f 92 c0             	setb   al
c001f690:	c3                   	ret    

c001f691 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f691:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f699:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f69d:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f6a1:	09 c2                	or     edx,eax
c001f6a3:	0f 94 c0             	sete   al
c001f6a6:	c3                   	ret    

c001f6a7 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f6a7:	57                   	push   edi
c001f6a8:	56                   	push   esi
c001f6a9:	53                   	push   ebx
c001f6aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f6ae:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f6b2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f6b6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f6ba:	57                   	push   edi
c001f6bb:	56                   	push   esi
c001f6bc:	53                   	push   ebx
c001f6bd:	51                   	push   ecx
c001f6be:	e8 ce ff ff ff       	call   c001f691 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f6c3:	83 c4 10             	add    esp,0x10
c001f6c6:	88 c2                	mov    dl,al
c001f6c8:	31 c0                	xor    eax,eax
c001f6ca:	84 d2                	test   dl,dl
c001f6cc:	75 0c                	jne    c001f6da <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f6ce:	57                   	push   edi
c001f6cf:	56                   	push   esi
c001f6d0:	53                   	push   ebx
c001f6d1:	51                   	push   ecx
c001f6d2:	e8 a6 ff ff ff       	call   c001f67d <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f6d7:	83 c4 10             	add    esp,0x10
c001f6da:	83 e0 01             	and    eax,0x1
c001f6dd:	5b                   	pop    ebx
c001f6de:	88 c1                	mov    cl,al
c001f6e0:	83 e2 01             	and    edx,0x1
c001f6e3:	a0 a1 fb 02 c0       	mov    al,ds:0xc002fba1
c001f6e8:	c1 e2 06             	shl    edx,0x6
c001f6eb:	83 e0 ba             	and    eax,0xffffffba
c001f6ee:	5e                   	pop    esi
c001f6ef:	09 c8                	or     eax,ecx
c001f6f1:	5f                   	pop    edi
c001f6f2:	09 d0                	or     eax,edx
c001f6f4:	a2 a1 fb 02 c0       	mov    ds:0xc002fba1,al
c001f6f9:	c3                   	ret    

c001f6fa <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f6fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f702:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f706:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f70a:	c3                   	ret    

c001f70b <Vm::fpuAbs(unsigned long long)>:
c001f70b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f70f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f713:	c3                   	ret    

c001f714 <Vm::fpuChs(unsigned long long)>:
c001f714:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f718:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f71c:	f7 d8                	neg    eax
c001f71e:	83 d2 00             	adc    edx,0x0
c001f721:	f7 da                	neg    edx
c001f723:	c3                   	ret    

c001f724 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f724:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f728:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f72d:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f731:	eb c7                	jmp    c001f6fa <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f733 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f733:	53                   	push   ebx
c001f734:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f738:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f73c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f740:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f744:	0f af ca             	imul   ecx,edx
c001f747:	0f af d8             	imul   ebx,eax
c001f74a:	f7 e2                	mul    edx
c001f74c:	01 d9                	add    ecx,ebx
c001f74e:	5b                   	pop    ebx
c001f74f:	01 ca                	add    edx,ecx
c001f751:	c3                   	ret    

c001f752 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f752:	83 ec 0c             	sub    esp,0xc
c001f755:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f759:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f75d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f761:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f765:	e8 2a 76 00 00       	call   c0026d94 <__udivdi3>
c001f76a:	83 c4 1c             	add    esp,0x1c
c001f76d:	c3                   	ret    

c001f76e <Vm::fpuSquare(unsigned long long)>:
c001f76e:	50                   	push   eax
c001f76f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f773:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f777:	52                   	push   edx
c001f778:	50                   	push   eax
c001f779:	52                   	push   edx
c001f77a:	50                   	push   eax
c001f77b:	e8 b3 ff ff ff       	call   c001f733 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f780:	83 c4 14             	add    esp,0x14
c001f783:	c3                   	ret    

c001f784 <Vm::fpuGetReg(int)>:
c001f784:	83 ec 0c             	sub    esp,0xc
c001f787:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f78c:	76 10                	jbe    c001f79e <Vm::fpuGetReg(int)+0x1a>
c001f78e:	83 ec 0c             	sub    esp,0xc
c001f791:	68 0e ca 02 c0       	push   0xc002ca0e
c001f796:	e8 c4 ab ff ff       	call   c001a35f <Krnl::panic(char const*)>
c001f79b:	83 c4 10             	add    esp,0x10
c001f79e:	a0 a1 fb 02 c0       	mov    al,ds:0xc002fba1
c001f7a3:	b9 08 00 00 00       	mov    ecx,0x8
c001f7a8:	c0 e8 03             	shr    al,0x3
c001f7ab:	83 e0 07             	and    eax,0x7
c001f7ae:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f7b2:	99                   	cdq    
c001f7b3:	f7 f9                	idiv   ecx
c001f7b5:	8b 04 d5 a4 fb 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd045c]
c001f7bc:	8b 14 d5 a8 fb 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd0458]
c001f7c3:	83 c4 0c             	add    esp,0xc
c001f7c6:	c3                   	ret    

c001f7c7 <Vm::fpuSetReg(int, unsigned long long)>:
c001f7c7:	57                   	push   edi
c001f7c8:	56                   	push   esi
c001f7c9:	52                   	push   edx
c001f7ca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f7ce:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f7d2:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f7d7:	76 10                	jbe    c001f7e9 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f7d9:	83 ec 0c             	sub    esp,0xc
c001f7dc:	68 21 ca 02 c0       	push   0xc002ca21
c001f7e1:	e8 79 ab ff ff       	call   c001a35f <Krnl::panic(char const*)>
c001f7e6:	83 c4 10             	add    esp,0x10
c001f7e9:	a0 a1 fb 02 c0       	mov    al,ds:0xc002fba1
c001f7ee:	b9 08 00 00 00       	mov    ecx,0x8
c001f7f3:	c0 e8 03             	shr    al,0x3
c001f7f6:	83 e0 07             	and    eax,0x7
c001f7f9:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f7fd:	99                   	cdq    
c001f7fe:	f7 f9                	idiv   ecx
c001f800:	89 34 d5 a4 fb 02 c0 	mov    DWORD PTR [edx*8-0x3ffd045c],esi
c001f807:	89 3c d5 a8 fb 02 c0 	mov    DWORD PTR [edx*8-0x3ffd0458],edi
c001f80e:	58                   	pop    eax
c001f80f:	5e                   	pop    esi
c001f810:	5f                   	pop    edi
c001f811:	c3                   	ret    

c001f812 <Vm::fpuPush(unsigned long long)>:
c001f812:	a0 a1 fb 02 c0       	mov    al,ds:0xc002fba1
c001f817:	c0 e8 03             	shr    al,0x3
c001f81a:	83 e0 07             	and    eax,0x7
c001f81d:	83 c0 07             	add    eax,0x7
c001f820:	88 c2                	mov    dl,al
c001f822:	83 e0 07             	and    eax,0x7
c001f825:	83 e2 07             	and    edx,0x7
c001f828:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f82f:	8a 15 a1 fb 02 c0    	mov    dl,BYTE PTR ds:0xc002fba1
c001f835:	83 e2 c7             	and    edx,0xffffffc7
c001f838:	09 ca                	or     edx,ecx
c001f83a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f83e:	88 15 a1 fb 02 c0    	mov    BYTE PTR ds:0xc002fba1,dl
c001f844:	89 0c c5 a8 fb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd0458],ecx
c001f84b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f84f:	89 14 c5 a4 fb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd045c],edx
c001f856:	a1 e4 fb 02 c0       	mov    eax,ds:0xc002fbe4
c001f85b:	83 f8 08             	cmp    eax,0x8
c001f85e:	75 08                	jne    c001f868 <Vm::fpuPush(unsigned long long)+0x56>
c001f860:	80 0d a0 fb 02 c0 40 	or     BYTE PTR ds:0xc002fba0,0x40
c001f867:	c3                   	ret    
c001f868:	40                   	inc    eax
c001f869:	a3 e4 fb 02 c0       	mov    ds:0xc002fbe4,eax
c001f86e:	c3                   	ret    

c001f86f <Vm::fpuPop()>:
c001f86f:	8a 0d a1 fb 02 c0    	mov    cl,BYTE PTR ds:0xc002fba1
c001f875:	53                   	push   ebx
c001f876:	c0 e9 03             	shr    cl,0x3
c001f879:	8a 1d a1 fb 02 c0    	mov    bl,BYTE PTR ds:0xc002fba1
c001f87f:	83 e1 07             	and    ecx,0x7
c001f882:	83 e3 c7             	and    ebx,0xffffffc7
c001f885:	8b 04 cd a4 fb 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd045c]
c001f88c:	8b 14 cd a8 fb 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd0458]
c001f893:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f89a:	83 e1 38             	and    ecx,0x38
c001f89d:	09 d9                	or     ecx,ebx
c001f89f:	88 0d a1 fb 02 c0    	mov    BYTE PTR ds:0xc002fba1,cl
c001f8a5:	8b 0d e4 fb 02 c0    	mov    ecx,DWORD PTR ds:0xc002fbe4
c001f8ab:	85 c9                	test   ecx,ecx
c001f8ad:	74 09                	je     c001f8b8 <Vm::fpuPop()+0x49>
c001f8af:	49                   	dec    ecx
c001f8b0:	89 0d e4 fb 02 c0    	mov    DWORD PTR ds:0xc002fbe4,ecx
c001f8b6:	eb 07                	jmp    c001f8bf <Vm::fpuPop()+0x50>
c001f8b8:	80 0d a0 fb 02 c0 40 	or     BYTE PTR ds:0xc002fba0,0x40
c001f8bf:	5b                   	pop    ebx
c001f8c0:	c3                   	ret    

c001f8c1 <Vm::x87Handler(regs*)>:
c001f8c1:	55                   	push   ebp
c001f8c2:	57                   	push   edi
c001f8c3:	56                   	push   esi
c001f8c4:	53                   	push   ebx
c001f8c5:	83 ec 1c             	sub    esp,0x1c
c001f8c8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f8cc:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f8d1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f8d4:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f8dc:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f8e0:	50                   	push   eax
c001f8e1:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f8e5:	50                   	push   eax
c001f8e6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f8ea:	50                   	push   eax
c001f8eb:	53                   	push   ebx
c001f8ec:	e8 87 a1 ff ff       	call   c0019a78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f8f1:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f8f4:	83 c4 10             	add    esp,0x10
c001f8f7:	89 c6                	mov    esi,eax
c001f8f9:	80 fa d9             	cmp    dl,0xd9
c001f8fc:	0f 85 52 01 00 00    	jne    c001fa54 <Vm::x87Handler(regs*)+0x193>
c001f902:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f906:	8d 50 20             	lea    edx,[eax+0x20]
c001f909:	80 fa 0e             	cmp    dl,0xe
c001f90c:	0f 87 86 00 00 00    	ja     c001f998 <Vm::x87Handler(regs*)+0xd7>
c001f912:	0f b6 d2             	movzx  edx,dl
c001f915:	ff 24 95 34 ca 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd35cc]
c001f91c:	e8 e7 fc ff ff       	call   c001f608 <Vm::fpuGet0()>
c001f921:	eb 05                	jmp    c001f928 <Vm::x87Handler(regs*)+0x67>
c001f923:	e8 e5 fc ff ff       	call   c001f60d <Vm::fpuGet1()>
c001f928:	57                   	push   edi
c001f929:	57                   	push   edi
c001f92a:	52                   	push   edx
c001f92b:	50                   	push   eax
c001f92c:	e8 e1 fe ff ff       	call   c001f812 <Vm::fpuPush(unsigned long long)>
c001f931:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f935:	83 c4 10             	add    esp,0x10
c001f938:	b0 01                	mov    al,0x1
c001f93a:	e9 e3 09 00 00       	jmp    c0020322 <Vm::x87Handler(regs*)+0xa61>
c001f93f:	83 ec 0c             	sub    esp,0xc
c001f942:	6a 00                	push   0x0
c001f944:	e8 3b fe ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001f949:	59                   	pop    ecx
c001f94a:	5e                   	pop    esi
c001f94b:	52                   	push   edx
c001f94c:	50                   	push   eax
c001f94d:	e8 c2 fd ff ff       	call   c001f714 <Vm::fpuChs(unsigned long long)>
c001f952:	eb 13                	jmp    c001f967 <Vm::x87Handler(regs*)+0xa6>
c001f954:	83 ec 0c             	sub    esp,0xc
c001f957:	6a 00                	push   0x0
c001f959:	e8 26 fe ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001f95e:	5f                   	pop    edi
c001f95f:	5d                   	pop    ebp
c001f960:	52                   	push   edx
c001f961:	50                   	push   eax
c001f962:	e8 a4 fd ff ff       	call   c001f70b <Vm::fpuAbs(unsigned long long)>
c001f967:	83 c4 0c             	add    esp,0xc
c001f96a:	52                   	push   edx
c001f96b:	50                   	push   eax
c001f96c:	6a 00                	push   0x0
c001f96e:	e8 54 fe ff ff       	call   c001f7c7 <Vm::fpuSetReg(int, unsigned long long)>
c001f973:	eb bc                	jmp    c001f931 <Vm::x87Handler(regs*)+0x70>
c001f975:	e8 d3 fc ff ff       	call   c001f64d <Vm::fpuGetLog210()>
c001f97a:	eb ac                	jmp    c001f928 <Vm::x87Handler(regs*)+0x67>
c001f97c:	e8 9c fc ff ff       	call   c001f61d <Vm::fpuGetLog2E()>
c001f981:	eb a5                	jmp    c001f928 <Vm::x87Handler(regs*)+0x67>
c001f983:	e8 8d fc ff ff       	call   c001f615 <Vm::fpuGetPi()>
c001f988:	eb 9e                	jmp    c001f928 <Vm::x87Handler(regs*)+0x67>
c001f98a:	e8 d6 fc ff ff       	call   c001f665 <Vm::fpuGetLog102()>
c001f98f:	eb 97                	jmp    c001f928 <Vm::x87Handler(regs*)+0x67>
c001f991:	e8 9f fc ff ff       	call   c001f635 <Vm::fpuGetLogE2()>
c001f996:	eb 90                	jmp    c001f928 <Vm::x87Handler(regs*)+0x67>
c001f998:	8d 50 40             	lea    edx,[eax+0x40]
c001f99b:	80 fa 07             	cmp    dl,0x7
c001f99e:	77 15                	ja     c001f9b5 <Vm::x87Handler(regs*)+0xf4>
c001f9a0:	83 ec 0c             	sub    esp,0xc
c001f9a3:	2d c0 00 00 00       	sub    eax,0xc0
c001f9a8:	50                   	push   eax
c001f9a9:	e8 d6 fd ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001f9ae:	59                   	pop    ecx
c001f9af:	5e                   	pop    esi
c001f9b0:	e9 75 ff ff ff       	jmp    c001f92a <Vm::x87Handler(regs*)+0x69>
c001f9b5:	8d 50 38             	lea    edx,[eax+0x38]
c001f9b8:	80 fa 07             	cmp    dl,0x7
c001f9bb:	77 3c                	ja     c001f9f9 <Vm::x87Handler(regs*)+0x138>
c001f9bd:	83 ec 0c             	sub    esp,0xc
c001f9c0:	2d c8 00 00 00       	sub    eax,0xc8
c001f9c5:	50                   	push   eax
c001f9c6:	e8 b9 fd ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001f9cb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9d2:	89 c6                	mov    esi,eax
c001f9d4:	89 d7                	mov    edi,edx
c001f9d6:	e8 a9 fd ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001f9db:	83 c4 0c             	add    esp,0xc
c001f9de:	52                   	push   edx
c001f9df:	50                   	push   eax
c001f9e0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9e4:	2d c8 00 00 00       	sub    eax,0xc8
c001f9e9:	50                   	push   eax
c001f9ea:	e8 d8 fd ff ff       	call   c001f7c7 <Vm::fpuSetReg(int, unsigned long long)>
c001f9ef:	83 c4 0c             	add    esp,0xc
c001f9f2:	57                   	push   edi
c001f9f3:	56                   	push   esi
c001f9f4:	e9 73 ff ff ff       	jmp    c001f96c <Vm::x87Handler(regs*)+0xab>
c001f9f9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f9fd:	84 d2                	test   dl,dl
c001f9ff:	75 0f                	jne    c001fa10 <Vm::x87Handler(regs*)+0x14f>
c001fa01:	83 ec 0c             	sub    esp,0xc
c001fa04:	ff 36                	push   DWORD PTR [esi]
c001fa06:	e8 c8 fa ff ff       	call   c001f4d3 <Vm::fpu32ToInternal(unsigned int)>
c001fa0b:	e9 bf 00 00 00       	jmp    c001facf <Vm::x87Handler(regs*)+0x20e>
c001fa10:	80 fa 03             	cmp    dl,0x3
c001fa13:	75 13                	jne    c001fa28 <Vm::x87Handler(regs*)+0x167>
c001fa15:	e8 55 fe ff ff       	call   c001f86f <Vm::fpuPop()>
c001fa1a:	55                   	push   ebp
c001fa1b:	55                   	push   ebp
c001fa1c:	52                   	push   edx
c001fa1d:	50                   	push   eax
c001fa1e:	e8 4c fa ff ff       	call   c001f46f <Vm::fpuInternalTo32(unsigned long long)>
c001fa23:	e9 88 00 00 00       	jmp    c001fab0 <Vm::x87Handler(regs*)+0x1ef>
c001fa28:	80 fa 05             	cmp    dl,0x5
c001fa2b:	75 0e                	jne    c001fa3b <Vm::x87Handler(regs*)+0x17a>
c001fa2d:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fa30:	66 a3 a2 fb 02 c0    	mov    ds:0xc002fba2,ax
c001fa36:	e9 df 00 00 00       	jmp    c001fb1a <Vm::x87Handler(regs*)+0x259>
c001fa3b:	31 c0                	xor    eax,eax
c001fa3d:	80 fa 07             	cmp    dl,0x7
c001fa40:	0f 85 dc 08 00 00    	jne    c0020322 <Vm::x87Handler(regs*)+0xa61>
c001fa46:	66 a1 a2 fb 02 c0    	mov    ax,ds:0xc002fba2
c001fa4c:	66 89 06             	mov    WORD PTR [esi],ax
c001fa4f:	e9 c6 00 00 00       	jmp    c001fb1a <Vm::x87Handler(regs*)+0x259>
c001fa54:	80 fa d8             	cmp    dl,0xd8
c001fa57:	0f 84 c9 00 00 00    	je     c001fb26 <Vm::x87Handler(regs*)+0x265>
c001fa5d:	80 fa dc             	cmp    dl,0xdc
c001fa60:	0f 84 0d 02 00 00    	je     c001fc73 <Vm::x87Handler(regs*)+0x3b2>
c001fa66:	80 fa de             	cmp    dl,0xde
c001fa69:	0f 84 cd 02 00 00    	je     c001fd3c <Vm::x87Handler(regs*)+0x47b>
c001fa6f:	80 fa dd             	cmp    dl,0xdd
c001fa72:	0f 84 5f 04 00 00    	je     c001fed7 <Vm::x87Handler(regs*)+0x616>
c001fa78:	80 fa da             	cmp    dl,0xda
c001fa7b:	0f 84 24 05 00 00    	je     c001ffa5 <Vm::x87Handler(regs*)+0x6e4>
c001fa81:	80 fa df             	cmp    dl,0xdf
c001fa84:	0f 84 68 05 00 00    	je     c001fff2 <Vm::x87Handler(regs*)+0x731>
c001fa8a:	31 c0                	xor    eax,eax
c001fa8c:	80 fa db             	cmp    dl,0xdb
c001fa8f:	0f 85 8d 08 00 00    	jne    c0020322 <Vm::x87Handler(regs*)+0xa61>
c001fa95:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fa99:	80 fa 03             	cmp    dl,0x3
c001fa9c:	0f 85 70 06 00 00    	jne    c0020112 <Vm::x87Handler(regs*)+0x851>
c001faa2:	e8 c8 fd ff ff       	call   c001f86f <Vm::fpuPop()>
c001faa7:	55                   	push   ebp
c001faa8:	55                   	push   ebp
c001faa9:	52                   	push   edx
c001faaa:	50                   	push   eax
c001faab:	e8 71 fa ff ff       	call   c001f521 <Vm::fpuFloatToLong(unsigned long long)>
c001fab0:	83 c4 10             	add    esp,0x10
c001fab3:	89 06                	mov    DWORD PTR [esi],eax
c001fab5:	eb 63                	jmp    c001fb1a <Vm::x87Handler(regs*)+0x259>
c001fab7:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fabb:	84 d2                	test   dl,dl
c001fabd:	0f 85 e6 05 00 00    	jne    c00200a9 <Vm::x87Handler(regs*)+0x7e8>
c001fac3:	57                   	push   edi
c001fac4:	57                   	push   edi
c001fac5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fac8:	ff 36                	push   DWORD PTR [esi]
c001faca:	e8 49 fa ff ff       	call   c001f518 <Vm::fpu64ToInternal(unsigned long long)>
c001facf:	5e                   	pop    esi
c001fad0:	5f                   	pop    edi
c001fad1:	52                   	push   edx
c001fad2:	50                   	push   eax
c001fad3:	e8 3a fd ff ff       	call   c001f812 <Vm::fpuPush(unsigned long long)>
c001fad8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fadc:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fadf:	e9 51 fe ff ff       	jmp    c001f935 <Vm::x87Handler(regs*)+0x74>
c001fae4:	80 fa 03             	cmp    dl,0x3
c001fae7:	0f 85 d7 06 00 00    	jne    c00201c4 <Vm::x87Handler(regs*)+0x903>
c001faed:	57                   	push   edi
c001faee:	57                   	push   edi
c001faef:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001faf2:	ff 36                	push   DWORD PTR [esi]
c001faf4:	e8 1f fa ff ff       	call   c001f518 <Vm::fpu64ToInternal(unsigned long long)>
c001faf9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb00:	89 c6                	mov    esi,eax
c001fb02:	89 d7                	mov    edi,edx
c001fb04:	e8 7b fc ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001fb09:	57                   	push   edi
c001fb0a:	56                   	push   esi
c001fb0b:	52                   	push   edx
c001fb0c:	50                   	push   eax
c001fb0d:	e8 95 fb ff ff       	call   c001f6a7 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fb12:	83 c4 20             	add    esp,0x20
c001fb15:	e8 55 fd ff ff       	call   c001f86f <Vm::fpuPop()>
c001fb1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb1e:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fb21:	e9 12 fe ff ff       	jmp    c001f938 <Vm::x87Handler(regs*)+0x77>
c001fb26:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb2a:	8d 50 40             	lea    edx,[eax+0x40]
c001fb2d:	80 fa 07             	cmp    dl,0x7
c001fb30:	77 29                	ja     c001fb5b <Vm::x87Handler(regs*)+0x29a>
c001fb32:	83 ec 0c             	sub    esp,0xc
c001fb35:	2d c0 00 00 00       	sub    eax,0xc0
c001fb3a:	50                   	push   eax
c001fb3b:	e8 44 fc ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001fb40:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb47:	89 c6                	mov    esi,eax
c001fb49:	89 d7                	mov    edi,edx
c001fb4b:	e8 34 fc ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001fb50:	57                   	push   edi
c001fb51:	56                   	push   esi
c001fb52:	52                   	push   edx
c001fb53:	50                   	push   eax
c001fb54:	e8 a1 fb ff ff       	call   c001f6fa <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fb59:	eb 2f                	jmp    c001fb8a <Vm::x87Handler(regs*)+0x2c9>
c001fb5b:	8d 50 38             	lea    edx,[eax+0x38]
c001fb5e:	80 fa 07             	cmp    dl,0x7
c001fb61:	77 2f                	ja     c001fb92 <Vm::x87Handler(regs*)+0x2d1>
c001fb63:	83 ec 0c             	sub    esp,0xc
c001fb66:	2d c8 00 00 00       	sub    eax,0xc8
c001fb6b:	50                   	push   eax
c001fb6c:	e8 13 fc ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001fb71:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb78:	89 c6                	mov    esi,eax
c001fb7a:	89 d7                	mov    edi,edx
c001fb7c:	e8 03 fc ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001fb81:	57                   	push   edi
c001fb82:	56                   	push   esi
c001fb83:	52                   	push   edx
c001fb84:	50                   	push   eax
c001fb85:	e8 a9 fb ff ff       	call   c001f733 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fb8a:	83 c4 1c             	add    esp,0x1c
c001fb8d:	e9 d8 fd ff ff       	jmp    c001f96a <Vm::x87Handler(regs*)+0xa9>
c001fb92:	8d 50 30             	lea    edx,[eax+0x30]
c001fb95:	80 fa 07             	cmp    dl,0x7
c001fb98:	77 0d                	ja     c001fba7 <Vm::x87Handler(regs*)+0x2e6>
c001fb9a:	83 ec 0c             	sub    esp,0xc
c001fb9d:	2d d0 00 00 00       	sub    eax,0xd0
c001fba2:	e9 99 03 00 00       	jmp    c001ff40 <Vm::x87Handler(regs*)+0x67f>
c001fba7:	8d 50 28             	lea    edx,[eax+0x28]
c001fbaa:	80 fa 07             	cmp    dl,0x7
c001fbad:	77 0d                	ja     c001fbbc <Vm::x87Handler(regs*)+0x2fb>
c001fbaf:	83 ec 0c             	sub    esp,0xc
c001fbb2:	2d d8 00 00 00       	sub    eax,0xd8
c001fbb7:	e9 c0 03 00 00       	jmp    c001ff7c <Vm::x87Handler(regs*)+0x6bb>
c001fbbc:	8d 50 20             	lea    edx,[eax+0x20]
c001fbbf:	80 fa 07             	cmp    dl,0x7
c001fbc2:	77 1b                	ja     c001fbdf <Vm::x87Handler(regs*)+0x31e>
c001fbc4:	83 ec 0c             	sub    esp,0xc
c001fbc7:	2d e0 00 00 00       	sub    eax,0xe0
c001fbcc:	50                   	push   eax
c001fbcd:	e8 b2 fb ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001fbd2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbd9:	89 c6                	mov    esi,eax
c001fbdb:	89 d7                	mov    edi,edx
c001fbdd:	eb 22                	jmp    c001fc01 <Vm::x87Handler(regs*)+0x340>
c001fbdf:	8d 50 18             	lea    edx,[eax+0x18]
c001fbe2:	80 fa 07             	cmp    dl,0x7
c001fbe5:	77 2d                	ja     c001fc14 <Vm::x87Handler(regs*)+0x353>
c001fbe7:	83 ec 0c             	sub    esp,0xc
c001fbea:	6a 00                	push   0x0
c001fbec:	e8 93 fb ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001fbf1:	89 c6                	mov    esi,eax
c001fbf3:	89 d7                	mov    edi,edx
c001fbf5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbf9:	2d e8 00 00 00       	sub    eax,0xe8
c001fbfe:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc01:	e8 7e fb ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001fc06:	57                   	push   edi
c001fc07:	56                   	push   esi
c001fc08:	52                   	push   edx
c001fc09:	50                   	push   eax
c001fc0a:	e8 15 fb ff ff       	call   c001f724 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fc0f:	e9 76 ff ff ff       	jmp    c001fb8a <Vm::x87Handler(regs*)+0x2c9>
c001fc14:	8d 50 10             	lea    edx,[eax+0x10]
c001fc17:	80 fa 07             	cmp    dl,0x7
c001fc1a:	77 1b                	ja     c001fc37 <Vm::x87Handler(regs*)+0x376>
c001fc1c:	83 ec 0c             	sub    esp,0xc
c001fc1f:	2d f0 00 00 00       	sub    eax,0xf0
c001fc24:	50                   	push   eax
c001fc25:	e8 5a fb ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001fc2a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc31:	89 c6                	mov    esi,eax
c001fc33:	89 d7                	mov    edi,edx
c001fc35:	eb 22                	jmp    c001fc59 <Vm::x87Handler(regs*)+0x398>
c001fc37:	3c f7                	cmp    al,0xf7
c001fc39:	0f 86 d1 03 00 00    	jbe    c0020010 <Vm::x87Handler(regs*)+0x74f>
c001fc3f:	83 ec 0c             	sub    esp,0xc
c001fc42:	6a 00                	push   0x0
c001fc44:	e8 3b fb ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001fc49:	89 c6                	mov    esi,eax
c001fc4b:	89 d7                	mov    edi,edx
c001fc4d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc51:	2d f8 00 00 00       	sub    eax,0xf8
c001fc56:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc59:	e8 26 fb ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001fc5e:	57                   	push   edi
c001fc5f:	56                   	push   esi
c001fc60:	52                   	push   edx
c001fc61:	50                   	push   eax
c001fc62:	e8 eb fa ff ff       	call   c001f752 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fc67:	83 c4 1c             	add    esp,0x1c
c001fc6a:	52                   	push   edx
c001fc6b:	50                   	push   eax
c001fc6c:	6a 00                	push   0x0
c001fc6e:	e9 51 02 00 00       	jmp    c001fec4 <Vm::x87Handler(regs*)+0x603>
c001fc73:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc77:	8d 50 40             	lea    edx,[eax+0x40]
c001fc7a:	80 fa 07             	cmp    dl,0x7
c001fc7d:	77 37                	ja     c001fcb6 <Vm::x87Handler(regs*)+0x3f5>
c001fc7f:	83 ec 0c             	sub    esp,0xc
c001fc82:	2d c0 00 00 00       	sub    eax,0xc0
c001fc87:	50                   	push   eax
c001fc88:	e8 f7 fa ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001fc8d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc94:	89 c6                	mov    esi,eax
c001fc96:	89 d7                	mov    edi,edx
c001fc98:	e8 e7 fa ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001fc9d:	57                   	push   edi
c001fc9e:	56                   	push   esi
c001fc9f:	52                   	push   edx
c001fca0:	50                   	push   eax
c001fca1:	e8 54 fa ff ff       	call   c001f6fa <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fca6:	83 c4 1c             	add    esp,0x1c
c001fca9:	52                   	push   edx
c001fcaa:	50                   	push   eax
c001fcab:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcaf:	2d c0 00 00 00       	sub    eax,0xc0
c001fcb4:	eb 3d                	jmp    c001fcf3 <Vm::x87Handler(regs*)+0x432>
c001fcb6:	8d 50 38             	lea    edx,[eax+0x38]
c001fcb9:	80 fa 07             	cmp    dl,0x7
c001fcbc:	77 3b                	ja     c001fcf9 <Vm::x87Handler(regs*)+0x438>
c001fcbe:	83 ec 0c             	sub    esp,0xc
c001fcc1:	2d c8 00 00 00       	sub    eax,0xc8
c001fcc6:	50                   	push   eax
c001fcc7:	e8 b8 fa ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001fccc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcd3:	89 c6                	mov    esi,eax
c001fcd5:	89 d7                	mov    edi,edx
c001fcd7:	e8 a8 fa ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001fcdc:	57                   	push   edi
c001fcdd:	56                   	push   esi
c001fcde:	52                   	push   edx
c001fcdf:	50                   	push   eax
c001fce0:	e8 4e fa ff ff       	call   c001f733 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fce5:	83 c4 1c             	add    esp,0x1c
c001fce8:	52                   	push   edx
c001fce9:	50                   	push   eax
c001fcea:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcee:	2d c8 00 00 00       	sub    eax,0xc8
c001fcf3:	50                   	push   eax
c001fcf4:	e9 75 fc ff ff       	jmp    c001f96e <Vm::x87Handler(regs*)+0xad>
c001fcf9:	83 c0 18             	add    eax,0x18
c001fcfc:	3c 07                	cmp    al,0x7
c001fcfe:	0f 87 3b 04 00 00    	ja     c002013f <Vm::x87Handler(regs*)+0x87e>
c001fd04:	83 ec 0c             	sub    esp,0xc
c001fd07:	6a 00                	push   0x0
c001fd09:	e8 76 fa ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001fd0e:	89 c6                	mov    esi,eax
c001fd10:	89 d7                	mov    edi,edx
c001fd12:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd16:	2d e8 00 00 00       	sub    eax,0xe8
c001fd1b:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd1e:	e8 61 fa ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001fd23:	57                   	push   edi
c001fd24:	56                   	push   esi
c001fd25:	52                   	push   edx
c001fd26:	50                   	push   eax
c001fd27:	e8 f8 f9 ff ff       	call   c001f724 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fd2c:	83 c4 1c             	add    esp,0x1c
c001fd2f:	52                   	push   edx
c001fd30:	50                   	push   eax
c001fd31:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd35:	2d e8 00 00 00       	sub    eax,0xe8
c001fd3a:	eb b7                	jmp    c001fcf3 <Vm::x87Handler(regs*)+0x432>
c001fd3c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd40:	8d 50 40             	lea    edx,[eax+0x40]
c001fd43:	80 fa 07             	cmp    dl,0x7
c001fd46:	77 3a                	ja     c001fd82 <Vm::x87Handler(regs*)+0x4c1>
c001fd48:	83 ec 0c             	sub    esp,0xc
c001fd4b:	2d c0 00 00 00       	sub    eax,0xc0
c001fd50:	50                   	push   eax
c001fd51:	e8 2e fa ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001fd56:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd5d:	89 c6                	mov    esi,eax
c001fd5f:	89 d7                	mov    edi,edx
c001fd61:	e8 1e fa ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001fd66:	57                   	push   edi
c001fd67:	56                   	push   esi
c001fd68:	52                   	push   edx
c001fd69:	50                   	push   eax
c001fd6a:	e8 8b f9 ff ff       	call   c001f6fa <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd6f:	83 c4 1c             	add    esp,0x1c
c001fd72:	52                   	push   edx
c001fd73:	50                   	push   eax
c001fd74:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd78:	2d c0 00 00 00       	sub    eax,0xc0
c001fd7d:	e9 9e 01 00 00       	jmp    c001ff20 <Vm::x87Handler(regs*)+0x65f>
c001fd82:	8d 50 20             	lea    edx,[eax+0x20]
c001fd85:	80 fa 07             	cmp    dl,0x7
c001fd88:	77 3a                	ja     c001fdc4 <Vm::x87Handler(regs*)+0x503>
c001fd8a:	83 ec 0c             	sub    esp,0xc
c001fd8d:	2d e0 00 00 00       	sub    eax,0xe0
c001fd92:	50                   	push   eax
c001fd93:	e8 ec f9 ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001fd98:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd9f:	89 c6                	mov    esi,eax
c001fda1:	89 d7                	mov    edi,edx
c001fda3:	e8 dc f9 ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001fda8:	57                   	push   edi
c001fda9:	56                   	push   esi
c001fdaa:	52                   	push   edx
c001fdab:	50                   	push   eax
c001fdac:	e8 73 f9 ff ff       	call   c001f724 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fdb1:	83 c4 1c             	add    esp,0x1c
c001fdb4:	52                   	push   edx
c001fdb5:	50                   	push   eax
c001fdb6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdba:	2d e0 00 00 00       	sub    eax,0xe0
c001fdbf:	e9 5c 01 00 00       	jmp    c001ff20 <Vm::x87Handler(regs*)+0x65f>
c001fdc4:	8d 50 18             	lea    edx,[eax+0x18]
c001fdc7:	80 fa 07             	cmp    dl,0x7
c001fdca:	77 3b                	ja     c001fe07 <Vm::x87Handler(regs*)+0x546>
c001fdcc:	83 ec 0c             	sub    esp,0xc
c001fdcf:	6a 00                	push   0x0
c001fdd1:	e8 ae f9 ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001fdd6:	89 c6                	mov    esi,eax
c001fdd8:	89 d7                	mov    edi,edx
c001fdda:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdde:	2d e8 00 00 00       	sub    eax,0xe8
c001fde3:	89 04 24             	mov    DWORD PTR [esp],eax
c001fde6:	e8 99 f9 ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001fdeb:	57                   	push   edi
c001fdec:	56                   	push   esi
c001fded:	52                   	push   edx
c001fdee:	50                   	push   eax
c001fdef:	e8 30 f9 ff ff       	call   c001f724 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fdf4:	83 c4 1c             	add    esp,0x1c
c001fdf7:	52                   	push   edx
c001fdf8:	50                   	push   eax
c001fdf9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdfd:	2d e8 00 00 00       	sub    eax,0xe8
c001fe02:	e9 19 01 00 00       	jmp    c001ff20 <Vm::x87Handler(regs*)+0x65f>
c001fe07:	8d 50 38             	lea    edx,[eax+0x38]
c001fe0a:	80 fa 07             	cmp    dl,0x7
c001fe0d:	77 37                	ja     c001fe46 <Vm::x87Handler(regs*)+0x585>
c001fe0f:	83 ec 0c             	sub    esp,0xc
c001fe12:	2d c8 00 00 00       	sub    eax,0xc8
c001fe17:	50                   	push   eax
c001fe18:	e8 67 f9 ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001fe1d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe24:	89 c6                	mov    esi,eax
c001fe26:	89 d7                	mov    edi,edx
c001fe28:	e8 57 f9 ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001fe2d:	57                   	push   edi
c001fe2e:	56                   	push   esi
c001fe2f:	52                   	push   edx
c001fe30:	50                   	push   eax
c001fe31:	e8 fd f8 ff ff       	call   c001f733 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe36:	83 c4 1c             	add    esp,0x1c
c001fe39:	52                   	push   edx
c001fe3a:	50                   	push   eax
c001fe3b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe3f:	2d c8 00 00 00       	sub    eax,0xc8
c001fe44:	eb 7d                	jmp    c001fec3 <Vm::x87Handler(regs*)+0x602>
c001fe46:	3c f7                	cmp    al,0xf7
c001fe48:	76 38                	jbe    c001fe82 <Vm::x87Handler(regs*)+0x5c1>
c001fe4a:	83 ec 0c             	sub    esp,0xc
c001fe4d:	6a 00                	push   0x0
c001fe4f:	e8 30 f9 ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001fe54:	89 c6                	mov    esi,eax
c001fe56:	89 d7                	mov    edi,edx
c001fe58:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe5c:	2d f8 00 00 00       	sub    eax,0xf8
c001fe61:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe64:	e8 1b f9 ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001fe69:	57                   	push   edi
c001fe6a:	56                   	push   esi
c001fe6b:	52                   	push   edx
c001fe6c:	50                   	push   eax
c001fe6d:	e8 e0 f8 ff ff       	call   c001f752 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fe72:	83 c4 1c             	add    esp,0x1c
c001fe75:	52                   	push   edx
c001fe76:	50                   	push   eax
c001fe77:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe7b:	2d f8 00 00 00       	sub    eax,0xf8
c001fe80:	eb 41                	jmp    c001fec3 <Vm::x87Handler(regs*)+0x602>
c001fe82:	8d 50 10             	lea    edx,[eax+0x10]
c001fe85:	80 fa 07             	cmp    dl,0x7
c001fe88:	0f 87 5a 01 00 00    	ja     c001ffe8 <Vm::x87Handler(regs*)+0x727>
c001fe8e:	83 ec 0c             	sub    esp,0xc
c001fe91:	2d f0 00 00 00       	sub    eax,0xf0
c001fe96:	50                   	push   eax
c001fe97:	e8 e8 f8 ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001fe9c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fea3:	89 c6                	mov    esi,eax
c001fea5:	89 d7                	mov    edi,edx
c001fea7:	e8 d8 f8 ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001feac:	57                   	push   edi
c001fead:	56                   	push   esi
c001feae:	52                   	push   edx
c001feaf:	50                   	push   eax
c001feb0:	e8 9d f8 ff ff       	call   c001f752 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001feb5:	83 c4 1c             	add    esp,0x1c
c001feb8:	52                   	push   edx
c001feb9:	50                   	push   eax
c001feba:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001febe:	2d f0 00 00 00       	sub    eax,0xf0
c001fec3:	50                   	push   eax
c001fec4:	e8 fe f8 ff ff       	call   c001f7c7 <Vm::fpuSetReg(int, unsigned long long)>
c001fec9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fecd:	e8 9d f9 ff ff       	call   c001f86f <Vm::fpuPop()>
c001fed2:	e9 5e fa ff ff       	jmp    c001f935 <Vm::x87Handler(regs*)+0x74>
c001fed7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fedb:	8d 50 30             	lea    edx,[eax+0x30]
c001fede:	80 fa 07             	cmp    dl,0x7
c001fee1:	77 1d                	ja     c001ff00 <Vm::x87Handler(regs*)+0x63f>
c001fee3:	83 ec 0c             	sub    esp,0xc
c001fee6:	6a 00                	push   0x0
c001fee8:	e8 97 f8 ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001feed:	83 c4 0c             	add    esp,0xc
c001fef0:	52                   	push   edx
c001fef1:	50                   	push   eax
c001fef2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fef6:	2d d0 00 00 00       	sub    eax,0xd0
c001fefb:	e9 f3 fd ff ff       	jmp    c001fcf3 <Vm::x87Handler(regs*)+0x432>
c001ff00:	8d 50 28             	lea    edx,[eax+0x28]
c001ff03:	80 fa 07             	cmp    dl,0x7
c001ff06:	77 28                	ja     c001ff30 <Vm::x87Handler(regs*)+0x66f>
c001ff08:	83 ec 0c             	sub    esp,0xc
c001ff0b:	6a 00                	push   0x0
c001ff0d:	e8 72 f8 ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001ff12:	83 c4 0c             	add    esp,0xc
c001ff15:	52                   	push   edx
c001ff16:	50                   	push   eax
c001ff17:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff1b:	2d d8 00 00 00       	sub    eax,0xd8
c001ff20:	50                   	push   eax
c001ff21:	e8 a1 f8 ff ff       	call   c001f7c7 <Vm::fpuSetReg(int, unsigned long long)>
c001ff26:	e8 44 f9 ff ff       	call   c001f86f <Vm::fpuPop()>
c001ff2b:	e9 01 fa ff ff       	jmp    c001f931 <Vm::x87Handler(regs*)+0x70>
c001ff30:	8d 50 20             	lea    edx,[eax+0x20]
c001ff33:	80 fa 07             	cmp    dl,0x7
c001ff36:	77 30                	ja     c001ff68 <Vm::x87Handler(regs*)+0x6a7>
c001ff38:	83 ec 0c             	sub    esp,0xc
c001ff3b:	2d e0 00 00 00       	sub    eax,0xe0
c001ff40:	50                   	push   eax
c001ff41:	e8 3e f8 ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001ff46:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff4d:	89 c6                	mov    esi,eax
c001ff4f:	89 d7                	mov    edi,edx
c001ff51:	e8 2e f8 ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001ff56:	57                   	push   edi
c001ff57:	56                   	push   esi
c001ff58:	52                   	push   edx
c001ff59:	50                   	push   eax
c001ff5a:	e8 48 f7 ff ff       	call   c001f6a7 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ff5f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ff63:	e9 54 02 00 00       	jmp    c00201bc <Vm::x87Handler(regs*)+0x8fb>
c001ff68:	8d 50 18             	lea    edx,[eax+0x18]
c001ff6b:	80 fa 07             	cmp    dl,0x7
c001ff6e:	0f 87 43 fb ff ff    	ja     c001fab7 <Vm::x87Handler(regs*)+0x1f6>
c001ff74:	83 ec 0c             	sub    esp,0xc
c001ff77:	2d e8 00 00 00       	sub    eax,0xe8
c001ff7c:	50                   	push   eax
c001ff7d:	e8 02 f8 ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001ff82:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff89:	89 c6                	mov    esi,eax
c001ff8b:	89 d7                	mov    edi,edx
c001ff8d:	e8 f2 f7 ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001ff92:	57                   	push   edi
c001ff93:	56                   	push   esi
c001ff94:	52                   	push   edx
c001ff95:	50                   	push   eax
c001ff96:	e8 0c f7 ff ff       	call   c001f6a7 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ff9b:	83 c4 20             	add    esp,0x20
c001ff9e:	e8 cc f8 ff ff       	call   c001f86f <Vm::fpuPop()>
c001ffa3:	eb 62                	jmp    c0020007 <Vm::x87Handler(regs*)+0x746>
c001ffa5:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001ffa9:	0f 85 0f 01 00 00    	jne    c00200be <Vm::x87Handler(regs*)+0x7fd>
c001ffaf:	83 ec 0c             	sub    esp,0xc
c001ffb2:	6a 01                	push   0x1
c001ffb4:	e8 cb f7 ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001ffb9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffc0:	89 c6                	mov    esi,eax
c001ffc2:	89 d7                	mov    edi,edx
c001ffc4:	e8 bb f7 ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c001ffc9:	57                   	push   edi
c001ffca:	56                   	push   esi
c001ffcb:	52                   	push   edx
c001ffcc:	50                   	push   eax
c001ffcd:	e8 d5 f6 ff ff       	call   c001f6a7 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ffd2:	83 c4 20             	add    esp,0x20
c001ffd5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ffd9:	e8 91 f8 ff ff       	call   c001f86f <Vm::fpuPop()>
c001ffde:	e8 8c f8 ff ff       	call   c001f86f <Vm::fpuPop()>
c001ffe3:	e9 50 f9 ff ff       	jmp    c001f938 <Vm::x87Handler(regs*)+0x77>
c001ffe8:	3c d9                	cmp    al,0xd9
c001ffea:	0f 85 b5 02 00 00    	jne    c00202a5 <Vm::x87Handler(regs*)+0x9e4>
c001fff0:	eb bd                	jmp    c001ffaf <Vm::x87Handler(regs*)+0x6ee>
c001fff2:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001fff6:	0f 85 ea 02 00 00    	jne    c00202e6 <Vm::x87Handler(regs*)+0xa25>
c001fffc:	0f b7 05 a0 fb 02 c0 	movzx  eax,WORD PTR ds:0xc002fba0
c0020003:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020007:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002000b:	e9 28 f9 ff ff       	jmp    c001f938 <Vm::x87Handler(regs*)+0x77>
c0020010:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020014:	84 d2                	test   dl,dl
c0020016:	75 0f                	jne    c0020027 <Vm::x87Handler(regs*)+0x766>
c0020018:	83 ec 0c             	sub    esp,0xc
c002001b:	ff 36                	push   DWORD PTR [esi]
c002001d:	e8 b1 f4 ff ff       	call   c001f4d3 <Vm::fpu32ToInternal(unsigned int)>
c0020022:	e9 2c 01 00 00       	jmp    c0020153 <Vm::x87Handler(regs*)+0x892>
c0020027:	80 fa 01             	cmp    dl,0x1
c002002a:	75 0f                	jne    c002003b <Vm::x87Handler(regs*)+0x77a>
c002002c:	83 ec 0c             	sub    esp,0xc
c002002f:	ff 36                	push   DWORD PTR [esi]
c0020031:	e8 9d f4 ff ff       	call   c001f4d3 <Vm::fpu32ToInternal(unsigned int)>
c0020036:	e9 81 02 00 00       	jmp    c00202bc <Vm::x87Handler(regs*)+0x9fb>
c002003b:	80 fa 04             	cmp    dl,0x4
c002003e:	75 0f                	jne    c002004f <Vm::x87Handler(regs*)+0x78e>
c0020040:	83 ec 0c             	sub    esp,0xc
c0020043:	ff 36                	push   DWORD PTR [esi]
c0020045:	e8 89 f4 ff ff       	call   c001f4d3 <Vm::fpu32ToInternal(unsigned int)>
c002004a:	e9 86 01 00 00       	jmp    c00201d5 <Vm::x87Handler(regs*)+0x914>
c002004f:	80 fa 05             	cmp    dl,0x5
c0020052:	75 1b                	jne    c002006f <Vm::x87Handler(regs*)+0x7ae>
c0020054:	83 ec 0c             	sub    esp,0xc
c0020057:	6a 00                	push   0x0
c0020059:	e8 26 f7 ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c002005e:	89 c7                	mov    edi,eax
c0020060:	89 d5                	mov    ebp,edx
c0020062:	58                   	pop    eax
c0020063:	ff 36                	push   DWORD PTR [esi]
c0020065:	e8 69 f4 ff ff       	call   c001f4d3 <Vm::fpu32ToInternal(unsigned int)>
c002006a:	e9 a3 01 00 00       	jmp    c0020212 <Vm::x87Handler(regs*)+0x951>
c002006f:	80 fa 06             	cmp    dl,0x6
c0020072:	75 0f                	jne    c0020083 <Vm::x87Handler(regs*)+0x7c2>
c0020074:	83 ec 0c             	sub    esp,0xc
c0020077:	ff 36                	push   DWORD PTR [esi]
c0020079:	e8 55 f4 ff ff       	call   c001f4d3 <Vm::fpu32ToInternal(unsigned int)>
c002007e:	e9 ae 01 00 00       	jmp    c0020231 <Vm::x87Handler(regs*)+0x970>
c0020083:	31 c0                	xor    eax,eax
c0020085:	80 fa 07             	cmp    dl,0x7
c0020088:	0f 85 94 02 00 00    	jne    c0020322 <Vm::x87Handler(regs*)+0xa61>
c002008e:	83 ec 0c             	sub    esp,0xc
c0020091:	6a 00                	push   0x0
c0020093:	e8 ec f6 ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c0020098:	89 c7                	mov    edi,eax
c002009a:	89 d5                	mov    ebp,edx
c002009c:	58                   	pop    eax
c002009d:	ff 36                	push   DWORD PTR [esi]
c002009f:	e8 2f f4 ff ff       	call   c001f4d3 <Vm::fpu32ToInternal(unsigned int)>
c00200a4:	e9 cb 01 00 00       	jmp    c0020274 <Vm::x87Handler(regs*)+0x9b3>
c00200a9:	80 fa 03             	cmp    dl,0x3
c00200ac:	0f 85 d3 01 00 00    	jne    c0020285 <Vm::x87Handler(regs*)+0x9c4>
c00200b2:	e8 b8 f7 ff ff       	call   c001f86f <Vm::fpuPop()>
c00200b7:	51                   	push   ecx
c00200b8:	51                   	push   ecx
c00200b9:	e9 de 01 00 00       	jmp    c002029c <Vm::x87Handler(regs*)+0x9db>
c00200be:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00200c2:	80 fa 01             	cmp    dl,0x1
c00200c5:	75 09                	jne    c00200d0 <Vm::x87Handler(regs*)+0x80f>
c00200c7:	57                   	push   edi
c00200c8:	57                   	push   edi
c00200c9:	8b 06                	mov    eax,DWORD PTR [esi]
c00200cb:	e9 e3 01 00 00       	jmp    c00202b3 <Vm::x87Handler(regs*)+0x9f2>
c00200d0:	80 fa 04             	cmp    dl,0x4
c00200d3:	75 12                	jne    c00200e7 <Vm::x87Handler(regs*)+0x826>
c00200d5:	31 d2                	xor    edx,edx
c00200d7:	51                   	push   ecx
c00200d8:	51                   	push   ecx
c00200d9:	8b 06                	mov    eax,DWORD PTR [esi]
c00200db:	52                   	push   edx
c00200dc:	50                   	push   eax
c00200dd:	e8 d0 f4 ff ff       	call   c001f5b2 <Vm::fpuLongToFloat(long long)>
c00200e2:	e9 ee 00 00 00       	jmp    c00201d5 <Vm::x87Handler(regs*)+0x914>
c00200e7:	31 c0                	xor    eax,eax
c00200e9:	80 fa 07             	cmp    dl,0x7
c00200ec:	0f 85 30 02 00 00    	jne    c0020322 <Vm::x87Handler(regs*)+0xa61>
c00200f2:	83 ec 0c             	sub    esp,0xc
c00200f5:	6a 00                	push   0x0
c00200f7:	e8 88 f6 ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c00200fc:	89 c7                	mov    edi,eax
c00200fe:	89 d5                	mov    ebp,edx
c0020100:	58                   	pop    eax
c0020101:	8b 06                	mov    eax,DWORD PTR [esi]
c0020103:	5a                   	pop    edx
c0020104:	31 d2                	xor    edx,edx
c0020106:	52                   	push   edx
c0020107:	50                   	push   eax
c0020108:	e8 a5 f4 ff ff       	call   c001f5b2 <Vm::fpuLongToFloat(long long)>
c002010d:	e9 62 01 00 00       	jmp    c0020274 <Vm::x87Handler(regs*)+0x9b3>
c0020112:	84 d2                	test   dl,dl
c0020114:	75 0d                	jne    c0020123 <Vm::x87Handler(regs*)+0x862>
c0020116:	31 d2                	xor    edx,edx
c0020118:	55                   	push   ebp
c0020119:	55                   	push   ebp
c002011a:	8b 06                	mov    eax,DWORD PTR [esi]
c002011c:	52                   	push   edx
c002011d:	50                   	push   eax
c002011e:	e9 d3 01 00 00       	jmp    c00202f6 <Vm::x87Handler(regs*)+0xa35>
c0020123:	31 c0                	xor    eax,eax
c0020125:	80 fa 02             	cmp    dl,0x2
c0020128:	0f 85 f4 01 00 00    	jne    c0020322 <Vm::x87Handler(regs*)+0xa61>
c002012e:	83 ec 0c             	sub    esp,0xc
c0020131:	6a 00                	push   0x0
c0020133:	e8 4c f6 ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c0020138:	59                   	pop    ecx
c0020139:	5f                   	pop    edi
c002013a:	e9 6a f9 ff ff       	jmp    c001faa9 <Vm::x87Handler(regs*)+0x1e8>
c002013f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020143:	84 d2                	test   dl,dl
c0020145:	75 2a                	jne    c0020171 <Vm::x87Handler(regs*)+0x8b0>
c0020147:	50                   	push   eax
c0020148:	50                   	push   eax
c0020149:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002014c:	ff 36                	push   DWORD PTR [esi]
c002014e:	e8 c5 f3 ff ff       	call   c001f518 <Vm::fpu64ToInternal(unsigned long long)>
c0020153:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002015a:	89 c6                	mov    esi,eax
c002015c:	89 d7                	mov    edi,edx
c002015e:	e8 21 f6 ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c0020163:	57                   	push   edi
c0020164:	56                   	push   esi
c0020165:	52                   	push   edx
c0020166:	50                   	push   eax
c0020167:	e8 8e f5 ff ff       	call   c001f6fa <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002016c:	e9 64 01 00 00       	jmp    c00202d5 <Vm::x87Handler(regs*)+0xa14>
c0020171:	80 fa 01             	cmp    dl,0x1
c0020174:	75 11                	jne    c0020187 <Vm::x87Handler(regs*)+0x8c6>
c0020176:	50                   	push   eax
c0020177:	50                   	push   eax
c0020178:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002017b:	ff 36                	push   DWORD PTR [esi]
c002017d:	e8 96 f3 ff ff       	call   c001f518 <Vm::fpu64ToInternal(unsigned long long)>
c0020182:	e9 35 01 00 00       	jmp    c00202bc <Vm::x87Handler(regs*)+0x9fb>
c0020187:	80 fa 02             	cmp    dl,0x2
c002018a:	0f 85 54 f9 ff ff    	jne    c001fae4 <Vm::x87Handler(regs*)+0x223>
c0020190:	55                   	push   ebp
c0020191:	55                   	push   ebp
c0020192:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020195:	ff 36                	push   DWORD PTR [esi]
c0020197:	e8 7c f3 ff ff       	call   c001f518 <Vm::fpu64ToInternal(unsigned long long)>
c002019c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201a3:	89 c6                	mov    esi,eax
c00201a5:	89 d7                	mov    edi,edx
c00201a7:	e8 d8 f5 ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c00201ac:	57                   	push   edi
c00201ad:	56                   	push   esi
c00201ae:	52                   	push   edx
c00201af:	50                   	push   eax
c00201b0:	e8 f2 f4 ff ff       	call   c001f6a7 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201b5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00201b9:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00201bc:	83 c4 20             	add    esp,0x20
c00201bf:	e9 74 f7 ff ff       	jmp    c001f938 <Vm::x87Handler(regs*)+0x77>
c00201c4:	80 fa 04             	cmp    dl,0x4
c00201c7:	75 2a                	jne    c00201f3 <Vm::x87Handler(regs*)+0x932>
c00201c9:	51                   	push   ecx
c00201ca:	51                   	push   ecx
c00201cb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00201ce:	ff 36                	push   DWORD PTR [esi]
c00201d0:	e8 43 f3 ff ff       	call   c001f518 <Vm::fpu64ToInternal(unsigned long long)>
c00201d5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201dc:	89 c6                	mov    esi,eax
c00201de:	89 d7                	mov    edi,edx
c00201e0:	e8 9f f5 ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c00201e5:	57                   	push   edi
c00201e6:	56                   	push   esi
c00201e7:	52                   	push   edx
c00201e8:	50                   	push   eax
c00201e9:	e8 36 f5 ff ff       	call   c001f724 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00201ee:	e9 e2 00 00 00       	jmp    c00202d5 <Vm::x87Handler(regs*)+0xa14>
c00201f3:	80 fa 05             	cmp    dl,0x5
c00201f6:	75 28                	jne    c0020220 <Vm::x87Handler(regs*)+0x95f>
c00201f8:	83 ec 0c             	sub    esp,0xc
c00201fb:	6a 00                	push   0x0
c00201fd:	e8 82 f5 ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c0020202:	89 c7                	mov    edi,eax
c0020204:	89 d5                	mov    ebp,edx
c0020206:	58                   	pop    eax
c0020207:	5a                   	pop    edx
c0020208:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002020b:	ff 36                	push   DWORD PTR [esi]
c002020d:	e8 06 f3 ff ff       	call   c001f518 <Vm::fpu64ToInternal(unsigned long long)>
c0020212:	83 c4 10             	add    esp,0x10
c0020215:	55                   	push   ebp
c0020216:	57                   	push   edi
c0020217:	52                   	push   edx
c0020218:	50                   	push   eax
c0020219:	e8 06 f5 ff ff       	call   c001f724 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002021e:	eb 60                	jmp    c0020280 <Vm::x87Handler(regs*)+0x9bf>
c0020220:	80 fa 06             	cmp    dl,0x6
c0020223:	75 2a                	jne    c002024f <Vm::x87Handler(regs*)+0x98e>
c0020225:	51                   	push   ecx
c0020226:	51                   	push   ecx
c0020227:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002022a:	ff 36                	push   DWORD PTR [esi]
c002022c:	e8 e7 f2 ff ff       	call   c001f518 <Vm::fpu64ToInternal(unsigned long long)>
c0020231:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020238:	89 c6                	mov    esi,eax
c002023a:	89 d7                	mov    edi,edx
c002023c:	e8 43 f5 ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c0020241:	57                   	push   edi
c0020242:	56                   	push   esi
c0020243:	52                   	push   edx
c0020244:	50                   	push   eax
c0020245:	e8 08 f5 ff ff       	call   c001f752 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002024a:	e9 86 00 00 00       	jmp    c00202d5 <Vm::x87Handler(regs*)+0xa14>
c002024f:	31 c0                	xor    eax,eax
c0020251:	80 fa 07             	cmp    dl,0x7
c0020254:	0f 85 c8 00 00 00    	jne    c0020322 <Vm::x87Handler(regs*)+0xa61>
c002025a:	83 ec 0c             	sub    esp,0xc
c002025d:	6a 00                	push   0x0
c002025f:	e8 20 f5 ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c0020264:	89 c7                	mov    edi,eax
c0020266:	89 d5                	mov    ebp,edx
c0020268:	58                   	pop    eax
c0020269:	5a                   	pop    edx
c002026a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002026d:	ff 36                	push   DWORD PTR [esi]
c002026f:	e8 a4 f2 ff ff       	call   c001f518 <Vm::fpu64ToInternal(unsigned long long)>
c0020274:	83 c4 10             	add    esp,0x10
c0020277:	55                   	push   ebp
c0020278:	57                   	push   edi
c0020279:	52                   	push   edx
c002027a:	50                   	push   eax
c002027b:	e8 d2 f4 ff ff       	call   c001f752 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020280:	83 c4 0c             	add    esp,0xc
c0020283:	eb 53                	jmp    c00202d8 <Vm::x87Handler(regs*)+0xa17>
c0020285:	31 c0                	xor    eax,eax
c0020287:	80 fa 02             	cmp    dl,0x2
c002028a:	0f 85 92 00 00 00    	jne    c0020322 <Vm::x87Handler(regs*)+0xa61>
c0020290:	83 ec 0c             	sub    esp,0xc
c0020293:	6a 00                	push   0x0
c0020295:	e8 ea f4 ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c002029a:	59                   	pop    ecx
c002029b:	5f                   	pop    edi
c002029c:	52                   	push   edx
c002029d:	50                   	push   eax
c002029e:	e8 27 f2 ff ff       	call   c001f4ca <Vm::fpuInternalTo64(unsigned long long)>
c00202a3:	eb 70                	jmp    c0020315 <Vm::x87Handler(regs*)+0xa54>
c00202a5:	31 c0                	xor    eax,eax
c00202a7:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c00202ac:	75 74                	jne    c0020322 <Vm::x87Handler(regs*)+0xa61>
c00202ae:	50                   	push   eax
c00202af:	50                   	push   eax
c00202b0:	0f b7 06             	movzx  eax,WORD PTR [esi]
c00202b3:	31 d2                	xor    edx,edx
c00202b5:	52                   	push   edx
c00202b6:	50                   	push   eax
c00202b7:	e8 f6 f2 ff ff       	call   c001f5b2 <Vm::fpuLongToFloat(long long)>
c00202bc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202c3:	89 c6                	mov    esi,eax
c00202c5:	89 d7                	mov    edi,edx
c00202c7:	e8 b8 f4 ff ff       	call   c001f784 <Vm::fpuGetReg(int)>
c00202cc:	57                   	push   edi
c00202cd:	56                   	push   esi
c00202ce:	52                   	push   edx
c00202cf:	50                   	push   eax
c00202d0:	e8 5e f4 ff ff       	call   c001f733 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00202d5:	83 c4 1c             	add    esp,0x1c
c00202d8:	52                   	push   edx
c00202d9:	50                   	push   eax
c00202da:	6a 00                	push   0x0
c00202dc:	e8 e6 f4 ff ff       	call   c001f7c7 <Vm::fpuSetReg(int, unsigned long long)>
c00202e1:	e9 f2 f7 ff ff       	jmp    c001fad8 <Vm::x87Handler(regs*)+0x217>
c00202e6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202ea:	80 fa 05             	cmp    dl,0x5
c00202ed:	75 11                	jne    c0020300 <Vm::x87Handler(regs*)+0xa3f>
c00202ef:	55                   	push   ebp
c00202f0:	55                   	push   ebp
c00202f1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202f4:	ff 36                	push   DWORD PTR [esi]
c00202f6:	e8 81 f2 ff ff       	call   c001f57c <Vm::fpuULongToFloat(unsigned long long)>
c00202fb:	e9 cf f7 ff ff       	jmp    c001facf <Vm::x87Handler(regs*)+0x20e>
c0020300:	31 c0                	xor    eax,eax
c0020302:	80 fa 07             	cmp    dl,0x7
c0020305:	75 1b                	jne    c0020322 <Vm::x87Handler(regs*)+0xa61>
c0020307:	e8 63 f5 ff ff       	call   c001f86f <Vm::fpuPop()>
c002030c:	51                   	push   ecx
c002030d:	51                   	push   ecx
c002030e:	52                   	push   edx
c002030f:	50                   	push   eax
c0020310:	e8 0c f2 ff ff       	call   c001f521 <Vm::fpuFloatToLong(unsigned long long)>
c0020315:	83 c4 10             	add    esp,0x10
c0020318:	89 06                	mov    DWORD PTR [esi],eax
c002031a:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c002031d:	e9 f8 f7 ff ff       	jmp    c001fb1a <Vm::x87Handler(regs*)+0x259>
c0020322:	83 c4 1c             	add    esp,0x1c
c0020325:	5b                   	pop    ebx
c0020326:	5e                   	pop    esi
c0020327:	5f                   	pop    edi
c0020328:	5d                   	pop    ebp
c0020329:	c3                   	ret    

c002032a <__static_initialization_and_destruction_0(int, int)>:
c002032a:	83 ec 0c             	sub    esp,0xc
c002032d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020332:	75 1a                	jne    c002034e <__static_initialization_and_destruction_0(int, int)+0x24>
c0020334:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c002033c:	75 10                	jne    c002034e <__static_initialization_and_destruction_0(int, int)+0x24>
c002033e:	83 ec 0c             	sub    esp,0xc
c0020341:	68 a0 fb 02 c0       	push   0xc002fba0
c0020346:	e8 4f 8e 00 00       	call   c002919a <Vm::_FPUState::_FPUState()>
c002034b:	83 c4 10             	add    esp,0x10
c002034e:	90                   	nop
c002034f:	83 c4 0c             	add    esp,0xc
c0020352:	c3                   	ret    

c0020353 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020353:	83 ec 0c             	sub    esp,0xc
c0020356:	83 ec 08             	sub    esp,0x8
c0020359:	68 ff ff 00 00       	push   0xffff
c002035e:	6a 01                	push   0x1
c0020360:	e8 c5 ff ff ff       	call   c002032a <__static_initialization_and_destruction_0(int, int)>
c0020365:	83 c4 10             	add    esp,0x10
c0020368:	83 c4 0c             	add    esp,0xc
c002036b:	c3                   	ret    

c002036c <FAT::getName()>:
c002036c:	b8 70 ca 02 c0       	mov    eax,0xc002ca70
c0020371:	c3                   	ret    

c0020372 <FAT::tell(void*, unsigned long long*)>:
c0020372:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020377:	75 06                	jne    c002037f <FAT::tell(void*, unsigned long long*)+0xd>
c0020379:	b8 04 00 00 00       	mov    eax,0x4
c002037e:	c3                   	ret    
c002037f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020384:	75 06                	jne    c002038c <FAT::tell(void*, unsigned long long*)+0x1a>
c0020386:	b8 04 00 00 00       	mov    eax,0x4
c002038b:	c3                   	ret    
c002038c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020390:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020393:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020396:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002039a:	89 01                	mov    DWORD PTR [ecx],eax
c002039c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002039f:	b8 00 00 00 00       	mov    eax,0x0
c00203a4:	c3                   	ret    
c00203a5:	90                   	nop

c00203a6 <FAT::stat(void*, unsigned long long*)>:
c00203a6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00203ab:	75 06                	jne    c00203b3 <FAT::stat(void*, unsigned long long*)+0xd>
c00203ad:	b8 04 00 00 00       	mov    eax,0x4
c00203b2:	c3                   	ret    
c00203b3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00203b8:	75 06                	jne    c00203c0 <FAT::stat(void*, unsigned long long*)+0x1a>
c00203ba:	b8 04 00 00 00       	mov    eax,0x4
c00203bf:	c3                   	ret    
c00203c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00203c4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00203c7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00203ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00203ce:	89 01                	mov    DWORD PTR [ecx],eax
c00203d0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00203d3:	b8 00 00 00 00       	mov    eax,0x0
c00203d8:	c3                   	ret    
c00203d9:	90                   	nop

c00203da <FAT::~FAT()>:
c00203da:	83 ec 0c             	sub    esp,0xc
c00203dd:	ba bc ca 02 c0       	mov    edx,0xc002cabc
c00203e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203e6:	89 10                	mov    DWORD PTR [eax],edx
c00203e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203ec:	83 ec 0c             	sub    esp,0xc
c00203ef:	50                   	push   eax
c00203f0:	e8 fb 28 ff ff       	call   c0012cf0 <Filesystem::~Filesystem()>
c00203f5:	83 c4 10             	add    esp,0x10
c00203f8:	90                   	nop
c00203f9:	83 c4 0c             	add    esp,0xc
c00203fc:	c3                   	ret    
c00203fd:	90                   	nop

c00203fe <FAT::~FAT()>:
c00203fe:	83 ec 0c             	sub    esp,0xc
c0020401:	83 ec 0c             	sub    esp,0xc
c0020404:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020408:	e8 cd ff ff ff       	call   c00203da <FAT::~FAT()>
c002040d:	83 c4 10             	add    esp,0x10
c0020410:	83 ec 08             	sub    esp,0x8
c0020413:	6a 08                	push   0x8
c0020415:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020419:	e8 cb 24 ff ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c002041e:	83 c4 10             	add    esp,0x10
c0020421:	83 c4 0c             	add    esp,0xc
c0020424:	c3                   	ret    
c0020425:	90                   	nop

c0020426 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020426:	83 ec 1c             	sub    esp,0x1c
c0020429:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020430:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020435:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020439:	8b 04 85 20 fc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd03e0]
c0020440:	83 f8 ff             	cmp    eax,0xffffffff
c0020443:	75 34                	jne    c0020479 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020445:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020449:	88 c2                	mov    dl,al
c002044b:	a1 00 fc 02 c0       	mov    eax,ds:0xc002fc00
c0020450:	01 d0                	add    eax,edx
c0020452:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020456:	8b 15 00 fc 02 c0    	mov    edx,DWORD PTR ds:0xc002fc00
c002045c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020460:	89 14 85 20 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd03e0],edx
c0020467:	a1 00 fc 02 c0       	mov    eax,ds:0xc002fc00
c002046c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020470:	89 14 85 a0 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0360],edx
c0020477:	eb 17                	jmp    c0020490 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020479:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002047d:	88 c2                	mov    dl,al
c002047f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020483:	8b 04 85 20 fc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd03e0]
c002048a:	01 d0                	add    eax,edx
c002048c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020490:	83 ec 04             	sub    esp,0x4
c0020493:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020497:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002049b:	8d 44 24 15          	lea    eax,[esp+0x15]
c002049f:	50                   	push   eax
c00204a0:	e8 59 68 fe ff       	call   c0006cfe <f_getlabel>
c00204a5:	83 c4 10             	add    esp,0x10
c00204a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00204ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00204b1:	75 07                	jne    c00204ba <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c00204b3:	b8 00 00 00 00       	mov    eax,0x0
c00204b8:	eb 05                	jmp    c00204bf <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c00204ba:	b8 01 00 00 00       	mov    eax,0x1
c00204bf:	83 c4 1c             	add    esp,0x1c
c00204c2:	c3                   	ret    
c00204c3:	90                   	nop

c00204c4 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00204c4:	57                   	push   edi
c00204c5:	83 ec 58             	sub    esp,0x58
c00204c8:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00204d0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00204d4:	b9 0f 00 00 00       	mov    ecx,0xf
c00204d9:	b8 00 00 00 00       	mov    eax,0x0
c00204de:	fc                   	cld    
c00204df:	89 d7                	mov    edi,edx
c00204e1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00204e3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00204e7:	8b 04 85 20 fc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd03e0]
c00204ee:	83 f8 ff             	cmp    eax,0xffffffff
c00204f1:	75 34                	jne    c0020527 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00204f3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00204f7:	88 c2                	mov    dl,al
c00204f9:	a1 00 fc 02 c0       	mov    eax,ds:0xc002fc00
c00204fe:	01 d0                	add    eax,edx
c0020500:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020504:	8b 15 00 fc 02 c0    	mov    edx,DWORD PTR ds:0xc002fc00
c002050a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002050e:	89 14 85 20 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd03e0],edx
c0020515:	a1 00 fc 02 c0       	mov    eax,ds:0xc002fc00
c002051a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c002051e:	89 14 85 a0 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0360],edx
c0020525:	eb 17                	jmp    c002053e <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020527:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002052b:	88 c2                	mov    dl,al
c002052d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020531:	8b 04 85 20 fc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd03e0]
c0020538:	01 d0                	add    eax,edx
c002053a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002053e:	83 ec 08             	sub    esp,0x8
c0020541:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020545:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020549:	50                   	push   eax
c002054a:	e8 fd 03 fe ff       	call   c000094c <strcat>
c002054f:	83 c4 10             	add    esp,0x10
c0020552:	83 ec 0c             	sub    esp,0xc
c0020555:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020559:	50                   	push   eax
c002055a:	e8 8d 69 fe ff       	call   c0006eec <f_setlabel>
c002055f:	83 c4 10             	add    esp,0x10
c0020562:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020566:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c002056b:	75 07                	jne    c0020574 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c002056d:	b8 00 00 00 00       	mov    eax,0x0
c0020572:	eb 05                	jmp    c0020579 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020574:	b8 01 00 00 00       	mov    eax,0x1
c0020579:	83 c4 58             	add    esp,0x58
c002057c:	5f                   	pop    edi
c002057d:	c3                   	ret    

c002057e <FAT::format(LogicalDisk*, int, char const*, int)>:
c002057e:	83 ec 2c             	sub    esp,0x2c
c0020581:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020589:	83 ec 08             	sub    esp,0x8
c002058c:	68 94 ca 02 c0       	push   0xc002ca94
c0020591:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020595:	e8 fe 02 fe ff       	call   c0000898 <strcmp>
c002059a:	83 c4 10             	add    esp,0x10
c002059d:	85 c0                	test   eax,eax
c002059f:	0f 94 c0             	sete   al
c00205a2:	84 c0                	test   al,al
c00205a4:	74 0d                	je     c00205b3 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c00205a6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00205ae:	e9 a6 00 00 00       	jmp    c0020659 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00205b3:	83 ec 08             	sub    esp,0x8
c00205b6:	68 86 ca 02 c0       	push   0xc002ca86
c00205bb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00205bf:	e8 d4 02 fe ff       	call   c0000898 <strcmp>
c00205c4:	83 c4 10             	add    esp,0x10
c00205c7:	85 c0                	test   eax,eax
c00205c9:	0f 94 c0             	sete   al
c00205cc:	84 c0                	test   al,al
c00205ce:	74 0a                	je     c00205da <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00205d0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00205d8:	eb 7f                	jmp    c0020659 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00205da:	83 ec 08             	sub    esp,0x8
c00205dd:	68 8c ca 02 c0       	push   0xc002ca8c
c00205e2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00205e6:	e8 ad 02 fe ff       	call   c0000898 <strcmp>
c00205eb:	83 c4 10             	add    esp,0x10
c00205ee:	85 c0                	test   eax,eax
c00205f0:	0f 94 c0             	sete   al
c00205f3:	84 c0                	test   al,al
c00205f5:	74 0a                	je     c0020601 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00205f7:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00205ff:	eb 58                	jmp    c0020659 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020601:	83 ec 08             	sub    esp,0x8
c0020604:	68 0c 99 02 c0       	push   0xc002990c
c0020609:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002060d:	e8 86 02 fe ff       	call   c0000898 <strcmp>
c0020612:	83 c4 10             	add    esp,0x10
c0020615:	85 c0                	test   eax,eax
c0020617:	0f 94 c0             	sete   al
c002061a:	84 c0                	test   al,al
c002061c:	74 0a                	je     c0020628 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c002061e:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020626:	eb 31                	jmp    c0020659 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020628:	83 ec 08             	sub    esp,0x8
c002062b:	68 92 ca 02 c0       	push   0xc002ca92
c0020630:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020634:	e8 5f 02 fe ff       	call   c0000898 <strcmp>
c0020639:	83 c4 10             	add    esp,0x10
c002063c:	85 c0                	test   eax,eax
c002063e:	0f 94 c0             	sete   al
c0020641:	84 c0                	test   al,al
c0020643:	74 0a                	je     c002064f <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020645:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c002064d:	eb 0a                	jmp    c0020659 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002064f:	b8 08 00 00 00       	mov    eax,0x8
c0020654:	e9 df 00 00 00       	jmp    c0020738 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020659:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020660:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020665:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020669:	8b 04 85 20 fc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd03e0]
c0020670:	83 f8 ff             	cmp    eax,0xffffffff
c0020673:	75 34                	jne    c00206a9 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020675:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020679:	88 c2                	mov    dl,al
c002067b:	a1 00 fc 02 c0       	mov    eax,ds:0xc002fc00
c0020680:	01 d0                	add    eax,edx
c0020682:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020686:	8b 15 00 fc 02 c0    	mov    edx,DWORD PTR ds:0xc002fc00
c002068c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020690:	89 14 85 20 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd03e0],edx
c0020697:	a1 00 fc 02 c0       	mov    eax,ds:0xc002fc00
c002069c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00206a0:	89 14 85 a0 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0360],edx
c00206a7:	eb 17                	jmp    c00206c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00206a9:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00206ad:	88 c2                	mov    dl,al
c00206af:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00206b3:	8b 04 85 20 fc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd03e0]
c00206ba:	01 d0                	add    eax,edx
c00206bc:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00206c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00206c4:	88 04 24             	mov    BYTE PTR [esp],al
c00206c7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00206cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206cf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00206d7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00206dc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00206e4:	83 ec 0c             	sub    esp,0xc
c00206e7:	68 00 20 00 00       	push   0x2000
c00206ec:	e8 78 f2 fe ff       	call   c000f969 <malloc>
c00206f1:	83 c4 10             	add    esp,0x10
c00206f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00206f8:	68 00 20 00 00       	push   0x2000
c00206fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020701:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020705:	50                   	push   eax
c0020706:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c002070a:	50                   	push   eax
c002070b:	e8 5d 6e fe ff       	call   c000756d <f_mkfs>
c0020710:	83 c4 10             	add    esp,0x10
c0020713:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020717:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002071c:	75 07                	jne    c0020725 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c002071e:	b8 00 00 00 00       	mov    eax,0x0
c0020723:	eb 13                	jmp    c0020738 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020725:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c002072a:	75 07                	jne    c0020733 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c002072c:	b8 09 00 00 00       	mov    eax,0x9
c0020731:	eb 05                	jmp    c0020738 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020733:	b8 01 00 00 00       	mov    eax,0x1
c0020738:	83 c4 2c             	add    esp,0x2c
c002073b:	c3                   	ret    

c002073c <FAT::tryMount(LogicalDisk*, int)>:
c002073c:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020742:	a1 00 fc 02 c0       	mov    eax,ds:0xc002fc00
c0020747:	83 f8 14             	cmp    eax,0x14
c002074a:	75 17                	jne    c0020763 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002074c:	83 ec 0c             	sub    esp,0xc
c002074f:	68 98 ca 02 c0       	push   0xc002ca98
c0020754:	e8 06 9c ff ff       	call   c001a35f <Krnl::panic(char const*)>
c0020759:	83 c4 10             	add    esp,0x10
c002075c:	b0 00                	mov    al,0x0
c002075e:	e9 d7 01 00 00       	jmp    c002093a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020763:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002076a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020770:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020776:	3d 00 02 00 00       	cmp    eax,0x200
c002077b:	74 07                	je     c0020784 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002077d:	b0 00                	mov    al,0x0
c002077f:	e9 b6 01 00 00       	jmp    c002093a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020784:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c002078c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020793:	8b 04 85 20 fc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd03e0]
c002079a:	83 f8 ff             	cmp    eax,0xffffffff
c002079d:	74 07                	je     c00207a6 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c002079f:	b0 01                	mov    al,0x1
c00207a1:	e9 94 01 00 00       	jmp    c002093a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00207a6:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00207b0:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00207b8:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00207bf:	88 c2                	mov    dl,al
c00207c1:	a1 00 fc 02 c0       	mov    eax,ds:0xc002fc00
c00207c6:	01 d0                	add    eax,edx
c00207c8:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00207cf:	8b 15 00 fc 02 c0    	mov    edx,DWORD PTR ds:0xc002fc00
c00207d5:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00207dc:	89 14 85 20 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd03e0],edx
c00207e3:	a1 00 fc 02 c0       	mov    eax,ds:0xc002fc00
c00207e8:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00207ef:	89 14 85 a0 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0360],edx
c00207f6:	83 ec 0c             	sub    esp,0xc
c00207f9:	68 54 02 00 00       	push   0x254
c00207fe:	e8 66 f1 fe ff       	call   c000f969 <malloc>
c0020803:	83 c4 10             	add    esp,0x10
c0020806:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c002080d:	83 ec 04             	sub    esp,0x4
c0020810:	6a 00                	push   0x0
c0020812:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020819:	50                   	push   eax
c002081a:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020821:	e8 cf 46 fe ff       	call   c0004ef5 <f_mount>
c0020826:	83 c4 10             	add    esp,0x10
c0020829:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020830:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020838:	74 19                	je     c0020853 <FAT::tryMount(LogicalDisk*, int)+0x117>
c002083a:	83 ec 0c             	sub    esp,0xc
c002083d:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020844:	e8 40 f1 fe ff       	call   c000f989 <rfree>
c0020849:	83 c4 10             	add    esp,0x10
c002084c:	b0 00                	mov    al,0x0
c002084e:	e9 e7 00 00 00       	jmp    c002093a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020853:	83 ec 04             	sub    esp,0x4
c0020856:	68 00 01 00 00       	push   0x100
c002085b:	6a 00                	push   0x0
c002085d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020864:	50                   	push   eax
c0020865:	e8 e6 fe fd ff       	call   c0000750 <memset>
c002086a:	83 c4 10             	add    esp,0x10
c002086d:	83 ec 08             	sub    esp,0x8
c0020870:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020877:	50                   	push   eax
c0020878:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002087f:	50                   	push   eax
c0020880:	e8 c7 00 fe ff       	call   c000094c <strcat>
c0020885:	83 c4 10             	add    esp,0x10
c0020888:	83 ec 08             	sub    esp,0x8
c002088b:	68 a6 ca 02 c0       	push   0xc002caa6
c0020890:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020897:	50                   	push   eax
c0020898:	e8 af 00 fe ff       	call   c000094c <strcat>
c002089d:	83 c4 10             	add    esp,0x10
c00208a0:	83 ec 04             	sub    esp,0x4
c00208a3:	6a 01                	push   0x1
c00208a5:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00208ac:	50                   	push   eax
c00208ad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00208b1:	50                   	push   eax
c00208b2:	e8 a0 46 fe ff       	call   c0004f57 <f_open>
c00208b7:	83 c4 10             	add    esp,0x10
c00208ba:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00208c1:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00208c8:	85 c0                	test   eax,eax
c00208ca:	74 0a                	je     c00208d6 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00208cc:	78 2d                	js     c00208fb <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00208ce:	83 e8 04             	sub    eax,0x4
c00208d1:	83 f8 01             	cmp    eax,0x1
c00208d4:	77 25                	ja     c00208fb <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00208d6:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00208de:	83 ec 0c             	sub    esp,0xc
c00208e1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00208e5:	50                   	push   eax
c00208e6:	e8 be 51 fe ff       	call   c0005aa9 <f_close>
c00208eb:	83 c4 10             	add    esp,0x10
c00208ee:	90                   	nop
c00208ef:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00208f7:	74 3a                	je     c0020933 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00208f9:	eb 2d                	jmp    c0020928 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00208fb:	83 ec 0c             	sub    esp,0xc
c00208fe:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020905:	e8 7f f0 fe ff       	call   c000f989 <rfree>
c002090a:	83 c4 10             	add    esp,0x10
c002090d:	83 ec 04             	sub    esp,0x4
c0020910:	6a 00                	push   0x0
c0020912:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020919:	50                   	push   eax
c002091a:	6a 00                	push   0x0
c002091c:	e8 d4 45 fe ff       	call   c0004ef5 <f_mount>
c0020921:	83 c4 10             	add    esp,0x10
c0020924:	b0 00                	mov    al,0x0
c0020926:	eb 12                	jmp    c002093a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020928:	a1 00 fc 02 c0       	mov    eax,ds:0xc002fc00
c002092d:	40                   	inc    eax
c002092e:	a3 00 fc 02 c0       	mov    ds:0xc002fc00,eax
c0020933:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c002093a:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020940:	c3                   	ret    
c0020941:	90                   	nop

c0020942 <FAT::allocateSwapfile(char const*, int)>:
c0020942:	53                   	push   ebx
c0020943:	81 ec 28 04 00 00    	sub    esp,0x428
c0020949:	c7 84 24 10 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x410],0x114
c0020954:	83 ec 0c             	sub    esp,0xc
c0020957:	ff b4 24 1c 04 00 00 	push   DWORD PTR [esp+0x41c]
c002095e:	e8 06 f0 fe ff       	call   c000f969 <malloc>
c0020963:	83 c4 10             	add    esp,0x10
c0020966:	89 c3                	mov    ebx,eax
c0020968:	a1 30 fb 02 c0       	mov    eax,ds:0xc002fb30
c002096d:	83 ec 04             	sub    esp,0x4
c0020970:	50                   	push   eax
c0020971:	ff b4 24 3c 04 00 00 	push   DWORD PTR [esp+0x43c]
c0020978:	53                   	push   ebx
c0020979:	e8 a2 25 ff ff       	call   c0012f20 <File::File(char const*, Process*)>
c002097e:	83 c4 10             	add    esp,0x10
c0020981:	89 9c 24 1c 04 00 00 	mov    DWORD PTR [esp+0x41c],ebx
c0020988:	83 ec 0c             	sub    esp,0xc
c002098b:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c0020992:	e8 65 27 ff ff       	call   c00130fc <File::unlink()>
c0020997:	83 c4 10             	add    esp,0x10
c002099a:	83 ec 08             	sub    esp,0x8
c002099d:	6a 12                	push   0x12
c002099f:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c00209a6:	e8 d9 25 ff ff       	call   c0012f84 <File::open(FileOpenMode)>
c00209ab:	83 c4 10             	add    esp,0x10
c00209ae:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c00209b5:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00209bb:	89 84 24 18 04 00 00 	mov    DWORD PTR [esp+0x418],eax
c00209c2:	8b 84 24 38 04 00 00 	mov    eax,DWORD PTR [esp+0x438]
c00209c9:	c1 e0 14             	shl    eax,0x14
c00209cc:	99                   	cdq    
c00209cd:	6a 01                	push   0x1
c00209cf:	52                   	push   edx
c00209d0:	50                   	push   eax
c00209d1:	ff b4 24 24 04 00 00 	push   DWORD PTR [esp+0x424]
c00209d8:	e8 7c 67 fe ff       	call   c0007159 <f_expand>
c00209dd:	83 c4 10             	add    esp,0x10
c00209e0:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c00209e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00209e9:	83 c0 10             	add    eax,0x10
c00209ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00209ee:	83 ec 0c             	sub    esp,0xc
c00209f1:	8d 54 24 14          	lea    edx,[esp+0x14]
c00209f5:	52                   	push   edx
c00209f6:	8d 54 24 20          	lea    edx,[esp+0x20]
c00209fa:	52                   	push   edx
c00209fb:	6a 00                	push   0x0
c00209fd:	68 00 04 00 00       	push   0x400
c0020a02:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0020a09:	ff d0                	call   eax
c0020a0b:	83 c4 20             	add    esp,0x20
c0020a0e:	83 ec 0c             	sub    esp,0xc
c0020a11:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c0020a18:	e8 c5 25 ff ff       	call   c0012fe2 <File::close()>
c0020a1d:	83 c4 10             	add    esp,0x10
c0020a20:	83 ec 08             	sub    esp,0x8
c0020a23:	6a 01                	push   0x1
c0020a25:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c0020a2c:	e8 53 25 ff ff       	call   c0012f84 <File::open(FileOpenMode)>
c0020a31:	83 c4 10             	add    esp,0x10
c0020a34:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c0020a3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a3d:	83 c0 0c             	add    eax,0xc
c0020a40:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a42:	83 ec 0c             	sub    esp,0xc
c0020a45:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020a49:	52                   	push   edx
c0020a4a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020a4e:	52                   	push   edx
c0020a4f:	6a 00                	push   0x0
c0020a51:	6a 04                	push   0x4
c0020a53:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0020a5a:	ff d0                	call   eax
c0020a5c:	83 c4 20             	add    esp,0x20
c0020a5f:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c0020a66:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020a6c:	89 84 24 18 04 00 00 	mov    DWORD PTR [esp+0x418],eax
c0020a73:	8b 84 24 18 04 00 00 	mov    eax,DWORD PTR [esp+0x418]
c0020a7a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020a7d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020a80:	89 84 24 14 04 00 00 	mov    DWORD PTR [esp+0x414],eax
c0020a87:	83 ec 0c             	sub    esp,0xc
c0020a8a:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c0020a91:	e8 4c 25 ff ff       	call   c0012fe2 <File::close()>
c0020a96:	83 c4 10             	add    esp,0x10
c0020a99:	8b 84 24 14 04 00 00 	mov    eax,DWORD PTR [esp+0x414]
c0020aa0:	ba 00 00 00 00       	mov    edx,0x0
c0020aa5:	81 c4 28 04 00 00    	add    esp,0x428
c0020aab:	5b                   	pop    ebx
c0020aac:	c3                   	ret    
c0020aad:	90                   	nop

c0020aae <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020aae:	57                   	push   edi
c0020aaf:	56                   	push   esi
c0020ab0:	53                   	push   ebx
c0020ab1:	81 ec 50 02 00 00    	sub    esp,0x250
c0020ab7:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0020abf:	74 0a                	je     c0020acb <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0020ac1:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0020ac9:	75 0a                	jne    c0020ad5 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c0020acb:	b8 04 00 00 00       	mov    eax,0x4
c0020ad0:	e9 29 01 00 00       	jmp    c0020bfe <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020ad5:	83 ec 08             	sub    esp,0x8
c0020ad8:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020adf:	50                   	push   eax
c0020ae0:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0020ae7:	e8 c7 55 fe ff       	call   c00060b3 <f_readdir>
c0020aec:	83 c4 10             	add    esp,0x10
c0020aef:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0020af6:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0020afd:	83 ec 0c             	sub    esp,0xc
c0020b00:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0020b07:	83 c0 1a             	add    eax,0x1a
c0020b0a:	50                   	push   eax
c0020b0b:	e8 5c fc fd ff       	call   c000076c <strlen>
c0020b10:	83 c4 10             	add    esp,0x10
c0020b13:	ba 00 00 00 00       	mov    edx,0x0
c0020b18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020b1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020b20:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0020b27:	0f b6 c0             	movzx  eax,al
c0020b2a:	83 e0 10             	and    eax,0x10
c0020b2d:	74 07                	je     c0020b36 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020b2f:	b8 02 00 00 00       	mov    eax,0x2
c0020b34:	eb 05                	jmp    c0020b3b <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020b36:	b8 01 00 00 00       	mov    eax,0x1
c0020b3b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020b3f:	83 ec 08             	sub    esp,0x8
c0020b42:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020b49:	83 c0 1a             	add    eax,0x1a
c0020b4c:	50                   	push   eax
c0020b4d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020b51:	83 c0 10             	add    eax,0x10
c0020b54:	50                   	push   eax
c0020b55:	e8 b2 fc fd ff       	call   c000080c <strcpy>
c0020b5a:	83 c4 10             	add    esp,0x10
c0020b5d:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020b64:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020b6b:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020b6f:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0020b76:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020b7d:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0020b84:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0020b8b:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0020b92:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0020b99:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0020ba0:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0020ba7:	89 c6                	mov    esi,eax
c0020ba9:	89 d7                	mov    edi,edx
c0020bab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020bad:	89 c8                	mov    eax,ecx
c0020baf:	89 fa                	mov    edx,edi
c0020bb1:	89 f3                	mov    ebx,esi
c0020bb3:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0020bba:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0020bc1:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0020bc8:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0020bcf:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020bd5:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0020bdc:	84 c0                	test   al,al
c0020bde:	75 07                	jne    c0020be7 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0020be0:	b8 07 00 00 00       	mov    eax,0x7
c0020be5:	eb 17                	jmp    c0020bfe <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020be7:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0020bee:	85 c0                	test   eax,eax
c0020bf0:	75 07                	jne    c0020bf9 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0020bf2:	b8 00 00 00 00       	mov    eax,0x0
c0020bf7:	eb 05                	jmp    c0020bfe <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020bf9:	b8 01 00 00 00       	mov    eax,0x1
c0020bfe:	81 c4 50 02 00 00    	add    esp,0x250
c0020c04:	5b                   	pop    ebx
c0020c05:	5e                   	pop    esi
c0020c06:	5f                   	pop    edi
c0020c07:	c3                   	ret    

c0020c08 <FAT::read(void*, unsigned long, void*, int*)>:
c0020c08:	83 ec 1c             	sub    esp,0x1c
c0020c0b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c10:	74 07                	je     c0020c19 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020c12:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c17:	75 07                	jne    c0020c20 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020c19:	b8 04 00 00 00       	mov    eax,0x4
c0020c1e:	eb 3d                	jmp    c0020c5d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c20:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c24:	50                   	push   eax
c0020c25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c2d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c31:	e8 5d 47 fe ff       	call   c0005393 <f_read>
c0020c36:	83 c4 10             	add    esp,0x10
c0020c39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c41:	89 c2                	mov    edx,eax
c0020c43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c47:	89 10                	mov    DWORD PTR [eax],edx
c0020c49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c4d:	85 c0                	test   eax,eax
c0020c4f:	75 07                	jne    c0020c58 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020c51:	b8 00 00 00 00       	mov    eax,0x0
c0020c56:	eb 05                	jmp    c0020c5d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c58:	b8 01 00 00 00       	mov    eax,0x1
c0020c5d:	83 c4 1c             	add    esp,0x1c
c0020c60:	c3                   	ret    
c0020c61:	90                   	nop

c0020c62 <FAT::write(void*, unsigned long, void*, int*)>:
c0020c62:	83 ec 1c             	sub    esp,0x1c
c0020c65:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c6a:	74 07                	je     c0020c73 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020c6c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c71:	75 07                	jne    c0020c7a <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020c73:	b8 04 00 00 00       	mov    eax,0x4
c0020c78:	eb 3d                	jmp    c0020cb7 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020c7a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c7e:	50                   	push   eax
c0020c7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c87:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c8b:	e8 83 49 fe ff       	call   c0005613 <f_write>
c0020c90:	83 c4 10             	add    esp,0x10
c0020c93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c9b:	89 c2                	mov    edx,eax
c0020c9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020ca1:	89 10                	mov    DWORD PTR [eax],edx
c0020ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ca7:	85 c0                	test   eax,eax
c0020ca9:	75 07                	jne    c0020cb2 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020cab:	b8 00 00 00 00       	mov    eax,0x0
c0020cb0:	eb 05                	jmp    c0020cb7 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020cb2:	b8 01 00 00 00       	mov    eax,0x1
c0020cb7:	83 c4 1c             	add    esp,0x1c
c0020cba:	c3                   	ret    
c0020cbb:	90                   	nop

c0020cbc <FAT::close(void*)>:
c0020cbc:	83 ec 1c             	sub    esp,0x1c
c0020cbf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cc4:	75 07                	jne    c0020ccd <FAT::close(void*)+0x11>
c0020cc6:	b8 04 00 00 00       	mov    eax,0x4
c0020ccb:	eb 36                	jmp    c0020d03 <FAT::close(void*)+0x47>
c0020ccd:	83 ec 0c             	sub    esp,0xc
c0020cd0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cd4:	e8 d0 4d fe ff       	call   c0005aa9 <f_close>
c0020cd9:	83 c4 10             	add    esp,0x10
c0020cdc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ce0:	83 ec 0c             	sub    esp,0xc
c0020ce3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ce7:	e8 8d ec fe ff       	call   c000f979 <free>
c0020cec:	83 c4 10             	add    esp,0x10
c0020cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cf3:	85 c0                	test   eax,eax
c0020cf5:	75 07                	jne    c0020cfe <FAT::close(void*)+0x42>
c0020cf7:	b8 00 00 00 00       	mov    eax,0x0
c0020cfc:	eb 05                	jmp    c0020d03 <FAT::close(void*)+0x47>
c0020cfe:	b8 01 00 00 00       	mov    eax,0x1
c0020d03:	83 c4 1c             	add    esp,0x1c
c0020d06:	c3                   	ret    
c0020d07:	90                   	nop

c0020d08 <FAT::closeDir(void*)>:
c0020d08:	83 ec 1c             	sub    esp,0x1c
c0020d0b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d10:	75 07                	jne    c0020d19 <FAT::closeDir(void*)+0x11>
c0020d12:	b8 04 00 00 00       	mov    eax,0x4
c0020d17:	eb 36                	jmp    c0020d4f <FAT::closeDir(void*)+0x47>
c0020d19:	83 ec 0c             	sub    esp,0xc
c0020d1c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d20:	e8 6c 53 fe ff       	call   c0006091 <f_closedir>
c0020d25:	83 c4 10             	add    esp,0x10
c0020d28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d2c:	83 ec 0c             	sub    esp,0xc
c0020d2f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d33:	e8 41 ec fe ff       	call   c000f979 <free>
c0020d38:	83 c4 10             	add    esp,0x10
c0020d3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d3f:	85 c0                	test   eax,eax
c0020d41:	75 07                	jne    c0020d4a <FAT::closeDir(void*)+0x42>
c0020d43:	b8 00 00 00 00       	mov    eax,0x0
c0020d48:	eb 05                	jmp    c0020d4f <FAT::closeDir(void*)+0x47>
c0020d4a:	b8 01 00 00 00       	mov    eax,0x1
c0020d4f:	83 c4 1c             	add    esp,0x1c
c0020d52:	c3                   	ret    
c0020d53:	90                   	nop

c0020d54 <FAT::seek(void*, unsigned long long)>:
c0020d54:	83 ec 2c             	sub    esp,0x2c
c0020d57:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d5f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020d63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d67:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020d6c:	75 07                	jne    c0020d75 <FAT::seek(void*, unsigned long long)+0x21>
c0020d6e:	b8 04 00 00 00       	mov    eax,0x4
c0020d73:	eb 2f                	jmp    c0020da4 <FAT::seek(void*, unsigned long long)+0x50>
c0020d75:	83 ec 04             	sub    esp,0x4
c0020d78:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d7c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d80:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020d84:	e8 4f 4d fe ff       	call   c0005ad8 <f_lseek>
c0020d89:	83 c4 10             	add    esp,0x10
c0020d8c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020d90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d94:	85 c0                	test   eax,eax
c0020d96:	75 07                	jne    c0020d9f <FAT::seek(void*, unsigned long long)+0x4b>
c0020d98:	b8 00 00 00 00       	mov    eax,0x0
c0020d9d:	eb 05                	jmp    c0020da4 <FAT::seek(void*, unsigned long long)+0x50>
c0020d9f:	b8 01 00 00 00       	mov    eax,0x1
c0020da4:	83 c4 2c             	add    esp,0x2c
c0020da7:	c3                   	ret    

c0020da8 <fatWrapperReadDisk>:
c0020da8:	83 ec 1c             	sub    esp,0x1c
c0020dab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020daf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020db3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020db7:	89 04 24             	mov    DWORD PTR [esp],eax
c0020dba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020dbe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020dc2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020dc7:	8b 04 85 00 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1400]
c0020dce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020dd2:	83 ec 0c             	sub    esp,0xc
c0020dd5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020dd9:	52                   	push   edx
c0020dda:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020dde:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020de2:	50                   	push   eax
c0020de3:	e8 34 55 ff ff       	call   c001631c <LogicalDisk::read(unsigned long long, int, void*)>
c0020de8:	83 c4 20             	add    esp,0x20
c0020deb:	83 c4 1c             	add    esp,0x1c
c0020dee:	c3                   	ret    

c0020def <fatWrapperWriteDisk>:
c0020def:	83 ec 1c             	sub    esp,0x1c
c0020df2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020df6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020dfa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020dfe:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e01:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e05:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e09:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e0e:	8b 04 85 00 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1400]
c0020e15:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e19:	83 ec 0c             	sub    esp,0xc
c0020e1c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e20:	52                   	push   edx
c0020e21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e29:	50                   	push   eax
c0020e2a:	e8 59 55 ff ff       	call   c0016388 <LogicalDisk::write(unsigned long long, int, void*)>
c0020e2f:	83 c4 20             	add    esp,0x20
c0020e32:	83 c4 1c             	add    esp,0x1c
c0020e35:	c3                   	ret    

c0020e36 <fatWrapperIoctl>:
c0020e36:	53                   	push   ebx
c0020e37:	83 ec 28             	sub    esp,0x28
c0020e3a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e3e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020e42:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020e46:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020e4a:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020e4f:	75 31                	jne    c0020e82 <fatWrapperIoctl+0x4c>
c0020e51:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e55:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e59:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e5e:	8b 04 85 00 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1400]
c0020e65:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020e6b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020e71:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020e75:	66 89 02             	mov    WORD PTR [edx],ax
c0020e78:	b8 00 00 00 00       	mov    eax,0x0
c0020e7d:	e9 b2 00 00 00       	jmp    c0020f34 <fatWrapperIoctl+0xfe>
c0020e82:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020e87:	75 6a                	jne    c0020ef3 <fatWrapperIoctl+0xbd>
c0020e89:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020e91:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e96:	8b 04 85 00 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1400]
c0020e9d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020ea3:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020ea9:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020eaf:	89 c8                	mov    eax,ecx
c0020eb1:	89 da                	mov    edx,ebx
c0020eb3:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020eb7:	c1 e0 0a             	shl    eax,0xa
c0020eba:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020ebf:	8b 0c 8d 00 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1400]
c0020ec6:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020ecc:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020ed2:	89 cb                	mov    ebx,ecx
c0020ed4:	c1 fb 1f             	sar    ebx,0x1f
c0020ed7:	53                   	push   ebx
c0020ed8:	51                   	push   ecx
c0020ed9:	52                   	push   edx
c0020eda:	50                   	push   eax
c0020edb:	e8 b4 5e 00 00       	call   c0026d94 <__udivdi3>
c0020ee0:	83 c4 10             	add    esp,0x10
c0020ee3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020ee7:	89 01                	mov    DWORD PTR [ecx],eax
c0020ee9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020eec:	b8 00 00 00 00       	mov    eax,0x0
c0020ef1:	eb 41                	jmp    c0020f34 <fatWrapperIoctl+0xfe>
c0020ef3:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020ef8:	75 07                	jne    c0020f01 <fatWrapperIoctl+0xcb>
c0020efa:	b8 00 00 00 00       	mov    eax,0x0
c0020eff:	eb 33                	jmp    c0020f34 <fatWrapperIoctl+0xfe>
c0020f01:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020f06:	75 19                	jne    c0020f21 <fatWrapperIoctl+0xeb>
c0020f08:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f0c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f14:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020f1a:	b8 00 00 00 00       	mov    eax,0x0
c0020f1f:	eb 13                	jmp    c0020f34 <fatWrapperIoctl+0xfe>
c0020f21:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020f26:	75 07                	jne    c0020f2f <fatWrapperIoctl+0xf9>
c0020f28:	b8 00 00 00 00       	mov    eax,0x0
c0020f2d:	eb 05                	jmp    c0020f34 <fatWrapperIoctl+0xfe>
c0020f2f:	b8 04 00 00 00       	mov    eax,0x4
c0020f34:	83 c4 28             	add    esp,0x28
c0020f37:	5b                   	pop    ebx
c0020f38:	c3                   	ret    
c0020f39:	90                   	nop

c0020f3a <FAT::FAT()>:
c0020f3a:	83 ec 1c             	sub    esp,0x1c
c0020f3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f41:	83 ec 0c             	sub    esp,0xc
c0020f44:	50                   	push   eax
c0020f45:	e8 82 1d ff ff       	call   c0012ccc <Filesystem::Filesystem()>
c0020f4a:	83 c4 10             	add    esp,0x10
c0020f4d:	ba bc ca 02 c0       	mov    edx,0xc002cabc
c0020f52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f56:	89 10                	mov    DWORD PTR [eax],edx
c0020f58:	c7 05 00 fc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fc00,0x0
c0020f62:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020f6a:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020f6f:	7f 15                	jg     c0020f86 <FAT::FAT()+0x4c>
c0020f71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f75:	c7 04 85 20 fc 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd03e0],0xffffffff
c0020f80:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020f84:	eb e4                	jmp    c0020f6a <FAT::FAT()+0x30>
c0020f86:	90                   	nop
c0020f87:	83 c4 1c             	add    esp,0x1c
c0020f8a:	c3                   	ret    
c0020f8b:	90                   	nop

c0020f8c <FAT::fixFilepath(char*)>:
c0020f8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f90:	8a 00                	mov    al,BYTE PTR [eax]
c0020f92:	3c 40                	cmp    al,0x40
c0020f94:	7e 2c                	jle    c0020fc2 <FAT::fixFilepath(char*)+0x36>
c0020f96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f9a:	8a 00                	mov    al,BYTE PTR [eax]
c0020f9c:	83 e8 41             	sub    eax,0x41
c0020f9f:	88 c2                	mov    dl,al
c0020fa1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fa5:	88 10                	mov    BYTE PTR [eax],dl
c0020fa7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fab:	8a 00                	mov    al,BYTE PTR [eax]
c0020fad:	0f be c0             	movsx  eax,al
c0020fb0:	8b 04 85 20 fc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd03e0]
c0020fb7:	83 c0 30             	add    eax,0x30
c0020fba:	88 c2                	mov    dl,al
c0020fbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fc0:	88 10                	mov    BYTE PTR [eax],dl
c0020fc2:	90                   	nop
c0020fc3:	c3                   	ret    

c0020fc4 <FAT::open(char const*, void**, FileOpenMode)>:
c0020fc4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020fca:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020fd2:	74 0a                	je     c0020fde <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020fd4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020fdc:	75 0a                	jne    c0020fe8 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020fde:	b8 04 00 00 00       	mov    eax,0x4
c0020fe3:	e9 fd 00 00 00       	jmp    c00210e5 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020fe8:	83 ec 08             	sub    esp,0x8
c0020feb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ff2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ff6:	50                   	push   eax
c0020ff7:	e8 10 f8 fd ff       	call   c000080c <strcpy>
c0020ffc:	83 c4 10             	add    esp,0x10
c0020fff:	83 ec 08             	sub    esp,0x8
c0021002:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021006:	50                   	push   eax
c0021007:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002100e:	e8 79 ff ff ff       	call   c0020f8c <FAT::fixFilepath(char*)>
c0021013:	83 c4 10             	add    esp,0x10
c0021016:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c002101e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021025:	83 e0 01             	and    eax,0x1
c0021028:	74 08                	je     c0021032 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c002102a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021032:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021039:	83 e0 04             	and    eax,0x4
c002103c:	74 10                	je     c002104e <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c002103e:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021046:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002104e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021055:	83 e0 02             	and    eax,0x2
c0021058:	74 08                	je     c0021062 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002105a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021062:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021069:	83 e0 08             	and    eax,0x8
c002106c:	74 08                	je     c0021076 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c002106e:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021076:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002107d:	83 e0 10             	and    eax,0x10
c0021080:	74 08                	je     c002108a <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021082:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c002108a:	83 ec 0c             	sub    esp,0xc
c002108d:	68 50 02 00 00       	push   0x250
c0021092:	e8 d2 e8 fe ff       	call   c000f969 <malloc>
c0021097:	83 c4 10             	add    esp,0x10
c002109a:	89 c2                	mov    edx,eax
c002109c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210a3:	89 10                	mov    DWORD PTR [eax],edx
c00210a5:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00210ad:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00210b6:	83 ec 04             	sub    esp,0x4
c00210b9:	52                   	push   edx
c00210ba:	8d 54 24 10          	lea    edx,[esp+0x10]
c00210be:	52                   	push   edx
c00210bf:	50                   	push   eax
c00210c0:	e8 92 3e fe ff       	call   c0004f57 <f_open>
c00210c5:	83 c4 10             	add    esp,0x10
c00210c8:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00210cf:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00210d7:	74 07                	je     c00210e0 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00210d9:	b8 01 00 00 00       	mov    eax,0x1
c00210de:	eb 05                	jmp    c00210e5 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00210e0:	b8 00 00 00 00       	mov    eax,0x0
c00210e5:	81 c4 1c 01 00 00    	add    esp,0x11c
c00210eb:	c3                   	ret    

c00210ec <FAT::openDir(char const*, void**)>:
c00210ec:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00210f2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00210fa:	74 0a                	je     c0021106 <FAT::openDir(char const*, void**)+0x1a>
c00210fc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021104:	75 07                	jne    c002110d <FAT::openDir(char const*, void**)+0x21>
c0021106:	b8 04 00 00 00       	mov    eax,0x4
c002110b:	eb 7d                	jmp    c002118a <FAT::openDir(char const*, void**)+0x9e>
c002110d:	83 ec 08             	sub    esp,0x8
c0021110:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021117:	8d 44 24 18          	lea    eax,[esp+0x18]
c002111b:	50                   	push   eax
c002111c:	e8 eb f6 fd ff       	call   c000080c <strcpy>
c0021121:	83 c4 10             	add    esp,0x10
c0021124:	83 ec 08             	sub    esp,0x8
c0021127:	8d 44 24 14          	lea    eax,[esp+0x14]
c002112b:	50                   	push   eax
c002112c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021133:	e8 54 fe ff ff       	call   c0020f8c <FAT::fixFilepath(char*)>
c0021138:	83 c4 10             	add    esp,0x10
c002113b:	83 ec 0c             	sub    esp,0xc
c002113e:	6a 4c                	push   0x4c
c0021140:	e8 24 e8 fe ff       	call   c000f969 <malloc>
c0021145:	83 c4 10             	add    esp,0x10
c0021148:	89 c2                	mov    edx,eax
c002114a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021151:	89 10                	mov    DWORD PTR [eax],edx
c0021153:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002115a:	8b 00                	mov    eax,DWORD PTR [eax]
c002115c:	83 ec 08             	sub    esp,0x8
c002115f:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021163:	52                   	push   edx
c0021164:	50                   	push   eax
c0021165:	e8 25 4e fe ff       	call   c0005f8f <f_opendir>
c002116a:	83 c4 10             	add    esp,0x10
c002116d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021174:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c002117c:	74 07                	je     c0021185 <FAT::openDir(char const*, void**)+0x99>
c002117e:	b8 01 00 00 00       	mov    eax,0x1
c0021183:	eb 05                	jmp    c002118a <FAT::openDir(char const*, void**)+0x9e>
c0021185:	b8 00 00 00 00       	mov    eax,0x0
c002118a:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021190:	c3                   	ret    
c0021191:	90                   	nop

c0021192 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021192:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021198:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00211a0:	75 0a                	jne    c00211ac <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00211a2:	b8 04 00 00 00       	mov    eax,0x4
c00211a7:	e9 c9 00 00 00       	jmp    c0021275 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211ac:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00211b4:	75 0a                	jne    c00211c0 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00211b6:	b8 04 00 00 00       	mov    eax,0x4
c00211bb:	e9 b5 00 00 00       	jmp    c0021275 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211c0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00211c8:	75 0a                	jne    c00211d4 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00211ca:	b8 04 00 00 00       	mov    eax,0x4
c00211cf:	e9 a1 00 00 00       	jmp    c0021275 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211d4:	83 ec 08             	sub    esp,0x8
c00211d7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00211de:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00211e5:	50                   	push   eax
c00211e6:	e8 21 f6 fd ff       	call   c000080c <strcpy>
c00211eb:	83 c4 10             	add    esp,0x10
c00211ee:	83 ec 08             	sub    esp,0x8
c00211f1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00211f8:	50                   	push   eax
c00211f9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021200:	e8 87 fd ff ff       	call   c0020f8c <FAT::fixFilepath(char*)>
c0021205:	83 c4 10             	add    esp,0x10
c0021208:	83 ec 08             	sub    esp,0x8
c002120b:	8d 44 24 08          	lea    eax,[esp+0x8]
c002120f:	50                   	push   eax
c0021210:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021217:	50                   	push   eax
c0021218:	e8 31 4f fe ff       	call   c000614e <f_stat>
c002121d:	83 c4 10             	add    esp,0x10
c0021220:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021227:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002122e:	85 c0                	test   eax,eax
c0021230:	74 07                	je     c0021239 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021232:	83 f8 04             	cmp    eax,0x4
c0021235:	74 32                	je     c0021269 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021237:	eb 37                	jmp    c0021270 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021239:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002123d:	0f b6 c0             	movzx  eax,al
c0021240:	83 e0 10             	and    eax,0x10
c0021243:	0f 95 c2             	setne  dl
c0021246:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002124d:	88 10                	mov    BYTE PTR [eax],dl
c002124f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021252:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021256:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002125d:	89 01                	mov    DWORD PTR [ecx],eax
c002125f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021262:	b8 00 00 00 00       	mov    eax,0x0
c0021267:	eb 0c                	jmp    c0021275 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021269:	b8 02 00 00 00       	mov    eax,0x2
c002126e:	eb 05                	jmp    c0021275 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021270:	b8 01 00 00 00       	mov    eax,0x1
c0021275:	81 c4 2c 02 00 00    	add    esp,0x22c
c002127b:	c3                   	ret    

c002127c <FAT::unlink(char const*)>:
c002127c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021282:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002128a:	75 07                	jne    c0021293 <FAT::unlink(char const*)+0x17>
c002128c:	b8 04 00 00 00       	mov    eax,0x4
c0021291:	eb 5c                	jmp    c00212ef <FAT::unlink(char const*)+0x73>
c0021293:	83 ec 08             	sub    esp,0x8
c0021296:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002129d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212a1:	50                   	push   eax
c00212a2:	e8 65 f5 fd ff       	call   c000080c <strcpy>
c00212a7:	83 c4 10             	add    esp,0x10
c00212aa:	83 ec 08             	sub    esp,0x8
c00212ad:	8d 44 24 14          	lea    eax,[esp+0x14]
c00212b1:	50                   	push   eax
c00212b2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212b9:	e8 ce fc ff ff       	call   c0020f8c <FAT::fixFilepath(char*)>
c00212be:	83 c4 10             	add    esp,0x10
c00212c1:	83 ec 0c             	sub    esp,0xc
c00212c4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212c8:	50                   	push   eax
c00212c9:	e8 d2 51 fe ff       	call   c00064a0 <f_unlink>
c00212ce:	83 c4 10             	add    esp,0x10
c00212d1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00212d8:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00212df:	85 c0                	test   eax,eax
c00212e1:	75 07                	jne    c00212ea <FAT::unlink(char const*)+0x6e>
c00212e3:	b8 00 00 00 00       	mov    eax,0x0
c00212e8:	eb 05                	jmp    c00212ef <FAT::unlink(char const*)+0x73>
c00212ea:	b8 01 00 00 00       	mov    eax,0x1
c00212ef:	81 c4 1c 01 00 00    	add    esp,0x11c
c00212f5:	c3                   	ret    

c00212f6 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00212f6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00212fc:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021303:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c002130a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002130e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021312:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c002131a:	75 0a                	jne    c0021326 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c002131c:	b8 04 00 00 00       	mov    eax,0x4
c0021321:	e9 1c 01 00 00       	jmp    c0021442 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021326:	83 ec 08             	sub    esp,0x8
c0021329:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021330:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021334:	50                   	push   eax
c0021335:	e8 d2 f4 fd ff       	call   c000080c <strcpy>
c002133a:	83 c4 10             	add    esp,0x10
c002133d:	83 ec 08             	sub    esp,0x8
c0021340:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021344:	50                   	push   eax
c0021345:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002134c:	e8 3b fc ff ff       	call   c0020f8c <FAT::fixFilepath(char*)>
c0021351:	83 c4 10             	add    esp,0x10
c0021354:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002135c:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021364:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021369:	83 e0 01             	and    eax,0x1
c002136c:	74 08                	je     c0021376 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c002136e:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021376:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002137b:	83 e0 02             	and    eax,0x2
c002137e:	74 08                	je     c0021388 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021380:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021388:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002138d:	83 e0 04             	and    eax,0x4
c0021390:	74 08                	je     c002139a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021392:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c002139a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002139f:	83 e0 08             	and    eax,0x8
c00213a2:	74 08                	je     c00213ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00213a4:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00213ac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213b1:	83 e0 01             	and    eax,0x1
c00213b4:	74 08                	je     c00213be <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00213b6:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00213be:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213c3:	83 e0 02             	and    eax,0x2
c00213c6:	74 08                	je     c00213d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00213c8:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00213d0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213d5:	83 e0 04             	and    eax,0x4
c00213d8:	74 08                	je     c00213e2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00213da:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00213e2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213e7:	83 e0 08             	and    eax,0x8
c00213ea:	74 08                	je     c00213f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00213ec:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00213f4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00213fb:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021402:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c002140a:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021412:	83 ec 04             	sub    esp,0x4
c0021415:	52                   	push   edx
c0021416:	50                   	push   eax
c0021417:	8d 44 24 24          	lea    eax,[esp+0x24]
c002141b:	50                   	push   eax
c002141c:	e8 21 57 fe ff       	call   c0006b42 <f_chmod>
c0021421:	83 c4 10             	add    esp,0x10
c0021424:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c002142b:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021432:	85 c0                	test   eax,eax
c0021434:	75 07                	jne    c002143d <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021436:	b8 00 00 00 00       	mov    eax,0x0
c002143b:	eb 05                	jmp    c0021442 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002143d:	b8 01 00 00 00       	mov    eax,0x1
c0021442:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021448:	c3                   	ret    
c0021449:	90                   	nop

c002144a <FAT::rename(char const*, char const*)>:
c002144a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021450:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021458:	74 0a                	je     c0021464 <FAT::rename(char const*, char const*)+0x1a>
c002145a:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021462:	75 0a                	jne    c002146e <FAT::rename(char const*, char const*)+0x24>
c0021464:	b8 04 00 00 00       	mov    eax,0x4
c0021469:	e9 98 00 00 00       	jmp    c0021506 <FAT::rename(char const*, char const*)+0xbc>
c002146e:	83 ec 08             	sub    esp,0x8
c0021471:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021478:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002147f:	50                   	push   eax
c0021480:	e8 87 f3 fd ff       	call   c000080c <strcpy>
c0021485:	83 c4 10             	add    esp,0x10
c0021488:	83 ec 08             	sub    esp,0x8
c002148b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021492:	50                   	push   eax
c0021493:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002149a:	e8 ed fa ff ff       	call   c0020f8c <FAT::fixFilepath(char*)>
c002149f:	83 c4 10             	add    esp,0x10
c00214a2:	83 ec 08             	sub    esp,0x8
c00214a5:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00214ac:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214b0:	50                   	push   eax
c00214b1:	e8 56 f3 fd ff       	call   c000080c <strcpy>
c00214b6:	83 c4 10             	add    esp,0x10
c00214b9:	83 ec 08             	sub    esp,0x8
c00214bc:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214c0:	50                   	push   eax
c00214c1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214c8:	e8 bf fa ff ff       	call   c0020f8c <FAT::fixFilepath(char*)>
c00214cd:	83 c4 10             	add    esp,0x10
c00214d0:	83 ec 08             	sub    esp,0x8
c00214d3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214d7:	50                   	push   eax
c00214d8:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00214df:	50                   	push   eax
c00214e0:	e8 6a 53 fe ff       	call   c000684f <f_rename>
c00214e5:	83 c4 10             	add    esp,0x10
c00214e8:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00214ef:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00214f6:	85 c0                	test   eax,eax
c00214f8:	75 07                	jne    c0021501 <FAT::rename(char const*, char const*)+0xb7>
c00214fa:	b8 00 00 00 00       	mov    eax,0x0
c00214ff:	eb 05                	jmp    c0021506 <FAT::rename(char const*, char const*)+0xbc>
c0021501:	b8 01 00 00 00       	mov    eax,0x1
c0021506:	81 c4 1c 02 00 00    	add    esp,0x21c
c002150c:	c3                   	ret    
c002150d:	90                   	nop

c002150e <FAT::mkdir(char const*)>:
c002150e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021514:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002151c:	75 07                	jne    c0021525 <FAT::mkdir(char const*)+0x17>
c002151e:	b8 04 00 00 00       	mov    eax,0x4
c0021523:	eb 5c                	jmp    c0021581 <FAT::mkdir(char const*)+0x73>
c0021525:	83 ec 08             	sub    esp,0x8
c0021528:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002152f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021533:	50                   	push   eax
c0021534:	e8 d3 f2 fd ff       	call   c000080c <strcpy>
c0021539:	83 c4 10             	add    esp,0x10
c002153c:	83 ec 08             	sub    esp,0x8
c002153f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021543:	50                   	push   eax
c0021544:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002154b:	e8 3c fa ff ff       	call   c0020f8c <FAT::fixFilepath(char*)>
c0021550:	83 c4 10             	add    esp,0x10
c0021553:	83 ec 0c             	sub    esp,0xc
c0021556:	8d 44 24 18          	lea    eax,[esp+0x18]
c002155a:	50                   	push   eax
c002155b:	e8 c3 50 fe ff       	call   c0006623 <f_mkdir>
c0021560:	83 c4 10             	add    esp,0x10
c0021563:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002156a:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021571:	85 c0                	test   eax,eax
c0021573:	75 07                	jne    c002157c <FAT::mkdir(char const*)+0x6e>
c0021575:	b8 00 00 00 00       	mov    eax,0x0
c002157a:	eb 05                	jmp    c0021581 <FAT::mkdir(char const*)+0x73>
c002157c:	b8 01 00 00 00       	mov    eax,0x1
c0021581:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021587:	c3                   	ret    

c0021588 <FAT::exists(char const*)>:
c0021588:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002158e:	83 ec 08             	sub    esp,0x8
c0021591:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021598:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002159c:	50                   	push   eax
c002159d:	e8 6a f2 fd ff       	call   c000080c <strcpy>
c00215a2:	83 c4 10             	add    esp,0x10
c00215a5:	83 ec 08             	sub    esp,0x8
c00215a8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00215ac:	50                   	push   eax
c00215ad:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215b4:	e8 d3 f9 ff ff       	call   c0020f8c <FAT::fixFilepath(char*)>
c00215b9:	83 c4 10             	add    esp,0x10
c00215bc:	83 ec 08             	sub    esp,0x8
c00215bf:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00215c6:	50                   	push   eax
c00215c7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00215cb:	50                   	push   eax
c00215cc:	e8 7d 4b fe ff       	call   c000614e <f_stat>
c00215d1:	83 c4 10             	add    esp,0x10
c00215d4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00215db:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00215e2:	85 c0                	test   eax,eax
c00215e4:	75 04                	jne    c00215ea <FAT::exists(char const*)+0x62>
c00215e6:	b0 01                	mov    al,0x1
c00215e8:	eb 02                	jmp    c00215ec <FAT::exists(char const*)+0x64>
c00215ea:	b0 00                	mov    al,0x0
c00215ec:	81 c4 2c 02 00 00    	add    esp,0x22c
c00215f2:	c3                   	ret    
c00215f3:	90                   	nop

c00215f4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00215f4:	b8 08 00 00 00       	mov    eax,0x8
c00215f9:	c3                   	ret    

c00215fa <ISO9660::seek(void*, unsigned long long)>:
c00215fa:	53                   	push   ebx
c00215fb:	b8 04 00 00 00       	mov    eax,0x4
c0021600:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021604:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021608:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002160c:	85 d2                	test   edx,edx
c002160e:	74 17                	je     c0021627 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021610:	89 c8                	mov    eax,ecx
c0021612:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021615:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021618:	b8 01 00 00 00       	mov    eax,0x1
c002161d:	73 08                	jae    c0021627 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002161f:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021622:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021625:	31 c0                	xor    eax,eax
c0021627:	5b                   	pop    ebx
c0021628:	c3                   	ret    
c0021629:	90                   	nop

c002162a <ISO9660::tell(void*, unsigned long long*)>:
c002162a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002162e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021632:	85 d2                	test   edx,edx
c0021634:	74 12                	je     c0021648 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021636:	85 c0                	test   eax,eax
c0021638:	74 0e                	je     c0021648 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002163a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002163d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021640:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021643:	89 10                	mov    DWORD PTR [eax],edx
c0021645:	31 c0                	xor    eax,eax
c0021647:	c3                   	ret    
c0021648:	b8 04 00 00 00       	mov    eax,0x4
c002164d:	c3                   	ret    

c002164e <ISO9660::getName()>:
c002164e:	b8 1c cb 02 c0       	mov    eax,0xc002cb1c
c0021653:	c3                   	ret    

c0021654 <ISO9660::stat(void*, unsigned long long*)>:
c0021654:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021658:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002165c:	85 d2                	test   edx,edx
c002165e:	74 12                	je     c0021672 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021660:	85 c0                	test   eax,eax
c0021662:	74 0e                	je     c0021672 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021664:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021667:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002166a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002166d:	89 10                	mov    DWORD PTR [eax],edx
c002166f:	31 c0                	xor    eax,eax
c0021671:	c3                   	ret    
c0021672:	b8 04 00 00 00       	mov    eax,0x4
c0021677:	c3                   	ret    

c0021678 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021678:	b8 01 00 00 00       	mov    eax,0x1
c002167d:	c3                   	ret    

c002167e <ISO9660::unlink(char const*)>:
c002167e:	b8 01 00 00 00       	mov    eax,0x1
c0021683:	c3                   	ret    

c0021684 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021684:	b8 01 00 00 00       	mov    eax,0x1
c0021689:	c3                   	ret    

c002168a <ISO9660::rename(char const*, char const*)>:
c002168a:	b8 01 00 00 00       	mov    eax,0x1
c002168f:	c3                   	ret    

c0021690 <ISO9660::mkdir(char const*)>:
c0021690:	b8 01 00 00 00       	mov    eax,0x1
c0021695:	c3                   	ret    

c0021696 <ISO9660::close(void*)>:
c0021696:	83 ec 0c             	sub    esp,0xc
c0021699:	b8 04 00 00 00       	mov    eax,0x4
c002169e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216a2:	85 d2                	test   edx,edx
c00216a4:	74 0e                	je     c00216b4 <ISO9660::close(void*)+0x1e>
c00216a6:	83 ec 0c             	sub    esp,0xc
c00216a9:	52                   	push   edx
c00216aa:	e8 ca e2 fe ff       	call   c000f979 <free>
c00216af:	83 c4 10             	add    esp,0x10
c00216b2:	31 c0                	xor    eax,eax
c00216b4:	83 c4 0c             	add    esp,0xc
c00216b7:	c3                   	ret    

c00216b8 <ISO9660::closeDir(void*)>:
c00216b8:	83 ec 0c             	sub    esp,0xc
c00216bb:	b8 04 00 00 00       	mov    eax,0x4
c00216c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216c4:	85 d2                	test   edx,edx
c00216c6:	74 0e                	je     c00216d6 <ISO9660::closeDir(void*)+0x1e>
c00216c8:	83 ec 0c             	sub    esp,0xc
c00216cb:	52                   	push   edx
c00216cc:	e8 a8 e2 fe ff       	call   c000f979 <free>
c00216d1:	83 c4 10             	add    esp,0x10
c00216d4:	31 c0                	xor    eax,eax
c00216d6:	83 c4 0c             	add    esp,0xc
c00216d9:	c3                   	ret    

c00216da <ISO9660::~ISO9660()>:
c00216da:	83 ec 0c             	sub    esp,0xc
c00216dd:	ba 40 cb 02 c0       	mov    edx,0xc002cb40
c00216e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216e6:	89 10                	mov    DWORD PTR [eax],edx
c00216e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216ec:	83 ec 0c             	sub    esp,0xc
c00216ef:	50                   	push   eax
c00216f0:	e8 fb 15 ff ff       	call   c0012cf0 <Filesystem::~Filesystem()>
c00216f5:	83 c4 10             	add    esp,0x10
c00216f8:	90                   	nop
c00216f9:	83 c4 0c             	add    esp,0xc
c00216fc:	c3                   	ret    
c00216fd:	90                   	nop

c00216fe <ISO9660::~ISO9660()>:
c00216fe:	83 ec 0c             	sub    esp,0xc
c0021701:	83 ec 0c             	sub    esp,0xc
c0021704:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021708:	e8 cd ff ff ff       	call   c00216da <ISO9660::~ISO9660()>
c002170d:	83 c4 10             	add    esp,0x10
c0021710:	83 ec 08             	sub    esp,0x8
c0021713:	6a 08                	push   0x8
c0021715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021719:	e8 cb 11 ff ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c002171e:	83 c4 10             	add    esp,0x10
c0021721:	83 c4 0c             	add    esp,0xc
c0021724:	c3                   	ret    

c0021725 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021725:	55                   	push   ebp
c0021726:	31 c9                	xor    ecx,ecx
c0021728:	57                   	push   edi
c0021729:	56                   	push   esi
c002172a:	53                   	push   ebx
c002172b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c002172f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021733:	89 eb                	mov    ebx,ebp
c0021735:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021739:	39 ce                	cmp    esi,ecx
c002173b:	7e 17                	jle    c0021754 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002173d:	31 d2                	xor    edx,edx
c002173f:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021743:	7d 13                	jge    c0021758 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021745:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021749:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002174c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002174f:	75 0d                	jne    c002175e <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021751:	42                   	inc    edx
c0021752:	eb eb                	jmp    c002173f <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021754:	31 c0                	xor    eax,eax
c0021756:	eb 0a                	jmp    c0021762 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021758:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002175c:	eb 04                	jmp    c0021762 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002175e:	41                   	inc    ecx
c002175f:	43                   	inc    ebx
c0021760:	eb d7                	jmp    c0021739 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021762:	5b                   	pop    ebx
c0021763:	5e                   	pop    esi
c0021764:	5f                   	pop    edi
c0021765:	5d                   	pop    ebp
c0021766:	c3                   	ret    

c0021767 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021767:	57                   	push   edi
c0021768:	56                   	push   esi
c0021769:	53                   	push   ebx
c002176a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002176e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021772:	39 0d 00 fd 02 c0    	cmp    DWORD PTR ds:0xc002fd00,ecx
c0021778:	75 08                	jne    c0021782 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c002177a:	38 05 94 db 02 c0    	cmp    BYTE PTR ds:0xc002db94,al
c0021780:	74 2b                	je     c00217ad <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0021782:	83 ec 0c             	sub    esp,0xc
c0021785:	a2 94 db 02 c0       	mov    ds:0xc002db94,al
c002178a:	68 20 fd 02 c0       	push   0xc002fd20
c002178f:	0f be c0             	movsx  eax,al
c0021792:	6a 01                	push   0x1
c0021794:	89 0d 00 fd 02 c0    	mov    DWORD PTR ds:0xc002fd00,ecx
c002179a:	31 db                	xor    ebx,ebx
c002179c:	53                   	push   ebx
c002179d:	51                   	push   ecx
c002179e:	ff 34 85 fc ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1504]
c00217a5:	e8 72 4b ff ff       	call   c001631c <LogicalDisk::read(unsigned long long, int, void*)>
c00217aa:	83 c4 20             	add    esp,0x20
c00217ad:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00217b1:	be 20 fd 02 c0       	mov    esi,0xc002fd20
c00217b6:	b9 00 08 00 00       	mov    ecx,0x800
c00217bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00217bd:	5b                   	pop    ebx
c00217be:	5e                   	pop    esi
c00217bf:	5f                   	pop    edi
c00217c0:	c3                   	ret    
c00217c1:	90                   	nop

c00217c2 <ISO9660::tryMount(LogicalDisk*, int)>:
c00217c2:	81 ec 10 08 00 00    	sub    esp,0x810
c00217c8:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00217cf:	83 c0 41             	add    eax,0x41
c00217d2:	0f be c0             	movsx  eax,al
c00217d5:	50                   	push   eax
c00217d6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00217da:	50                   	push   eax
c00217db:	6a 10                	push   0x10
c00217dd:	e8 85 ff ff ff       	call   c0021767 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00217e2:	83 c4 10             	add    esp,0x10
c00217e5:	31 c0                	xor    eax,eax
c00217e7:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00217ec:	75 1d                	jne    c002180b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217ee:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00217f3:	75 16                	jne    c002180b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217f5:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00217fa:	75 0f                	jne    c002180b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217fc:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021801:	75 08                	jne    c002180b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021803:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021808:	0f 94 c0             	sete   al
c002180b:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021811:	c3                   	ret    

c0021812 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021812:	55                   	push   ebp
c0021813:	57                   	push   edi
c0021814:	56                   	push   esi
c0021815:	53                   	push   ebx
c0021816:	81 ec 2c 08 00 00    	sub    esp,0x82c
c002181c:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021823:	85 ed                	test   ebp,ebp
c0021825:	0f 84 da 01 00 00    	je     c0021a05 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c002182b:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021833:	0f 84 cc 01 00 00    	je     c0021a05 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021839:	b8 01 00 00 00       	mov    eax,0x1
c002183e:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021842:	0f 85 c2 01 00 00    	jne    c0021a0a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021848:	31 d2                	xor    edx,edx
c002184a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021851:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021854:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021857:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c002185a:	89 04 24             	mov    DWORD PTR [esp],eax
c002185d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021861:	01 c8                	add    eax,ecx
c0021863:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021866:	11 da                	adc    edx,ebx
c0021868:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c002186c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021870:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021874:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021878:	19 d7                	sbb    edi,edx
c002187a:	72 11                	jb     c002188d <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c002187c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c002187f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021883:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021887:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002188b:	eb 0c                	jmp    c0021899 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c002188d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0021891:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021895:	29 ce                	sub    esi,ecx
c0021897:	19 df                	sbb    edi,ebx
c0021899:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002189c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c002189f:	0f a4 c2 0b          	shld   edx,eax,0xb
c00218a3:	c1 e0 0b             	shl    eax,0xb
c00218a6:	01 c8                	add    eax,ecx
c00218a8:	11 da                	adc    edx,ebx
c00218aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00218ad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218b1:	51                   	push   ecx
c00218b2:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00218b6:	50                   	push   eax
c00218b7:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00218bb:	53                   	push   ebx
c00218bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00218c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00218c4:	0f ac d0 0b          	shrd   eax,edx,0xb
c00218c8:	50                   	push   eax
c00218c9:	e8 99 fe ff ff       	call   c0021767 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218ce:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00218d1:	b8 00 08 00 00       	mov    eax,0x800
c00218d6:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00218dc:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c00218e0:	29 d0                	sub    eax,edx
c00218e2:	83 c4 10             	add    esp,0x10
c00218e5:	89 f9                	mov    ecx,edi
c00218e7:	39 c6                	cmp    esi,eax
c00218e9:	83 d9 00             	sbb    ecx,0x0
c00218ec:	7d 1b                	jge    c0021909 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c00218ee:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00218f3:	75 12                	jne    c0021907 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c00218f5:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00218fc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021902:	e9 fa 00 00 00       	jmp    c0021a01 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021907:	89 f0                	mov    eax,esi
c0021909:	01 d3                	add    ebx,edx
c002190b:	31 d2                	xor    edx,edx
c002190d:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0021911:	39 c2                	cmp    edx,eax
c0021913:	7d 14                	jge    c0021929 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0021915:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c002191c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021920:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021923:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021926:	42                   	inc    edx
c0021927:	eb e8                	jmp    c0021911 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0021929:	89 c2                	mov    edx,eax
c002192b:	85 c0                	test   eax,eax
c002192d:	79 02                	jns    c0021931 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c002192f:	31 d2                	xor    edx,edx
c0021931:	01 c2                	add    edx,eax
c0021933:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0021936:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c002193d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0021941:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021945:	99                   	cdq    
c0021946:	01 c1                	add    ecx,eax
c0021948:	11 d3                	adc    ebx,edx
c002194a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002194e:	29 c6                	sub    esi,eax
c0021950:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0021954:	19 d7                	sbb    edi,edx
c0021956:	89 34 24             	mov    DWORD PTR [esp],esi
c0021959:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c002195d:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021962:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021965:	b8 00 00 00 00       	mov    eax,0x0
c002196a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c002196e:	7d 43                	jge    c00219b3 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0021970:	52                   	push   edx
c0021971:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021975:	50                   	push   eax
c0021976:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002197a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002197e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021982:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021986:	50                   	push   eax
c0021987:	e8 db fd ff ff       	call   c0021767 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002198c:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021994:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021999:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c00219a1:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00219a9:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00219ae:	83 c4 10             	add    esp,0x10
c00219b1:	eb aa                	jmp    c002195d <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c00219b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219b7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00219ba:	74 2a                	je     c00219e6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c00219bc:	50                   	push   eax
c00219bd:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219c1:	50                   	push   eax
c00219c2:	8d 74 24 28          	lea    esi,[esp+0x28]
c00219c6:	56                   	push   esi
c00219c7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00219cb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00219cf:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c00219d3:	51                   	push   ecx
c00219d4:	e8 8e fd ff ff       	call   c0021767 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219d9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00219dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00219e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00219e3:	83 c4 10             	add    esp,0x10
c00219e6:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00219ed:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00219f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00219f5:	89 18                	mov    DWORD PTR [eax],ebx
c00219f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219fb:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00219fe:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021a01:	31 c0                	xor    eax,eax
c0021a03:	eb 05                	jmp    c0021a0a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021a05:	b8 04 00 00 00       	mov    eax,0x4
c0021a0a:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021a10:	5b                   	pop    ebx
c0021a11:	5e                   	pop    esi
c0021a12:	5f                   	pop    edi
c0021a13:	5d                   	pop    ebp
c0021a14:	c3                   	ret    
c0021a15:	90                   	nop

c0021a16 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021a16:	55                   	push   ebp
c0021a17:	57                   	push   edi
c0021a18:	56                   	push   esi
c0021a19:	53                   	push   ebx
c0021a1a:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021a20:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0021a27:	85 ed                	test   ebp,ebp
c0021a29:	0f 84 51 02 00 00    	je     c0021c80 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021a2f:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021a37:	0f 84 43 02 00 00    	je     c0021c80 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021a3d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021a40:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0021a43:	75 0a                	jne    c0021a4f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021a45:	b8 07 00 00 00       	mov    eax,0x7
c0021a4a:	e9 36 02 00 00       	jmp    c0021c85 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021a4f:	50                   	push   eax
c0021a50:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a54:	50                   	push   eax
c0021a55:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021a5c:	53                   	push   ebx
c0021a5d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021a60:	c1 e0 0b             	shl    eax,0xb
c0021a63:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021a66:	c1 e8 0b             	shr    eax,0xb
c0021a69:	50                   	push   eax
c0021a6a:	e8 f8 fc ff ff       	call   c0021767 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a6f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021a72:	83 c4 10             	add    esp,0x10
c0021a75:	89 c1                	mov    ecx,eax
c0021a77:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0021a7a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021a80:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021a83:	84 db                	test   bl,bl
c0021a85:	0f 85 8b 00 00 00    	jne    c0021b16 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0021a8b:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0021a91:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021a94:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0021a9a:	29 c6                	sub    esi,eax
c0021a9c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0021aa0:	89 f3                	mov    ebx,esi
c0021aa2:	89 f1                	mov    ecx,esi
c0021aa4:	c1 fb 1f             	sar    ebx,0x1f
c0021aa7:	01 f0                	add    eax,esi
c0021aa9:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021aac:	11 da                	adc    edx,ebx
c0021aae:	89 04 24             	mov    DWORD PTR [esp],eax
c0021ab1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021ab5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021ab8:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021abb:	89 d8                	mov    eax,ebx
c0021abd:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0021ac1:	ba 00 00 00 00       	mov    edx,0x0
c0021ac6:	19 f8                	sbb    eax,edi
c0021ac8:	b8 00 00 00 00       	mov    eax,0x0
c0021acd:	73 08                	jae    c0021ad7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0021acf:	89 f0                	mov    eax,esi
c0021ad1:	89 fa                	mov    edx,edi
c0021ad3:	29 c8                	sub    eax,ecx
c0021ad5:	19 da                	sbb    edx,ebx
c0021ad7:	89 d7                	mov    edi,edx
c0021ad9:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021adc:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021adf:	09 c7                	or     edi,eax
c0021ae1:	0f 84 5e ff ff ff    	je     c0021a45 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021ae7:	57                   	push   edi
c0021ae8:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021aec:	50                   	push   eax
c0021aed:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021af4:	53                   	push   ebx
c0021af5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021af8:	c1 e0 0b             	shl    eax,0xb
c0021afb:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021aff:	c1 e8 0b             	shr    eax,0xb
c0021b02:	50                   	push   eax
c0021b03:	e8 5f fc ff ff       	call   c0021767 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b08:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021b0b:	83 c4 10             	add    esp,0x10
c0021b0e:	25 ff 07 00 00       	and    eax,0x7ff
c0021b13:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021b16:	31 ff                	xor    edi,edi
c0021b18:	56                   	push   esi
c0021b19:	6a 28                	push   0x28
c0021b1b:	6a 00                	push   0x0
c0021b1d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021b21:	50                   	push   eax
c0021b22:	e8 29 ec fd ff       	call   c0000750 <memset>
c0021b27:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021b2a:	25 ff 07 00 00       	and    eax,0x7ff
c0021b2f:	89 c6                	mov    esi,eax
c0021b31:	83 c6 21             	add    esi,0x21
c0021b34:	83 d7 00             	adc    edi,0x0
c0021b37:	83 c4 10             	add    esp,0x10
c0021b3a:	31 c9                	xor    ecx,ecx
c0021b3c:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021b43:	83 f9 28             	cmp    ecx,0x28
c0021b46:	88 04 24             	mov    BYTE PTR [esp],al
c0021b49:	0f 94 c2             	sete   dl
c0021b4c:	88 d0                	mov    al,dl
c0021b4e:	ba ff 07 00 00       	mov    edx,0x7ff
c0021b53:	39 f2                	cmp    edx,esi
c0021b55:	ba 00 00 00 00       	mov    edx,0x0
c0021b5a:	19 fa                	sbb    edx,edi
c0021b5c:	0f 92 c2             	setb   dl
c0021b5f:	09 c2                	or     edx,eax
c0021b61:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021b65:	0f 94 c0             	sete   al
c0021b68:	08 d0                	or     al,dl
c0021b6a:	75 16                	jne    c0021b82 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021b6c:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021b70:	74 10                	je     c0021b82 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021b72:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021b75:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021b79:	41                   	inc    ecx
c0021b7a:	83 c6 01             	add    esi,0x1
c0021b7d:	83 d7 00             	adc    edi,0x0
c0021b80:	eb ba                	jmp    c0021b3c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0021b82:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021b89:	83 ec 0c             	sub    esp,0xc
c0021b8c:	8d 74 24 24          	lea    esi,[esp+0x24]
c0021b90:	56                   	push   esi
c0021b91:	e8 d6 eb fd ff       	call   c000076c <strlen>
c0021b96:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0021b9d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021ba1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021ba9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021bac:	5a                   	pop    edx
c0021bad:	25 ff 07 00 00       	and    eax,0x7ff
c0021bb2:	59                   	pop    ecx
c0021bb3:	01 f8                	add    eax,edi
c0021bb5:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021bbb:	83 e0 02             	and    eax,0x2
c0021bbe:	3c 01                	cmp    al,0x1
c0021bc0:	19 c0                	sbb    eax,eax
c0021bc2:	83 c0 02             	add    eax,0x2
c0021bc5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021bc9:	56                   	push   esi
c0021bca:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021bce:	50                   	push   eax
c0021bcf:	e8 38 ec fd ff       	call   c000080c <strcpy>
c0021bd4:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021bd8:	83 c4 10             	add    esp,0x10
c0021bdb:	84 c0                	test   al,al
c0021bdd:	75 21                	jne    c0021c00 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0021bdf:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021be7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021bef:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021bf7:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021bfe:	eb 28                	jmp    c0021c28 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021c00:	fe c8                	dec    al
c0021c02:	75 24                	jne    c0021c28 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021c04:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021c0c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c14:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c1c:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021c23:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021c28:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021c2c:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021c33:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021c3a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021c3c:	0f b6 f3             	movzx  esi,bl
c0021c3f:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021c46:	31 db                	xor    ebx,ebx
c0021c48:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021c4e:	89 df                	mov    edi,ebx
c0021c50:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021c53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021c56:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021c59:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021c5c:	39 c6                	cmp    esi,eax
c0021c5e:	19 d7                	sbb    edi,edx
c0021c60:	72 10                	jb     c0021c72 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021c62:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021c69:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021c70:	eb 0a                	jmp    c0021c7c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0021c72:	29 f0                	sub    eax,esi
c0021c74:	19 da                	sbb    edx,ebx
c0021c76:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021c79:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021c7c:	31 c0                	xor    eax,eax
c0021c7e:	eb 05                	jmp    c0021c85 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021c80:	b8 04 00 00 00       	mov    eax,0x4
c0021c85:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021c8b:	5b                   	pop    ebx
c0021c8c:	5e                   	pop    esi
c0021c8d:	5f                   	pop    edi
c0021c8e:	5d                   	pop    ebp
c0021c8f:	c3                   	ret    

c0021c90 <readRoot(unsigned int*, unsigned int*, char)>:
c0021c90:	57                   	push   edi
c0021c91:	56                   	push   esi
c0021c92:	81 ec 38 08 00 00    	sub    esp,0x838
c0021c98:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021ca0:	50                   	push   eax
c0021ca1:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021ca5:	50                   	push   eax
c0021ca6:	6a 10                	push   0x10
c0021ca8:	e8 ba fa ff ff       	call   c0021767 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021cad:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0021cb4:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0021cb8:	b9 22 00 00 00       	mov    ecx,0x22
c0021cbd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021cbf:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021cc6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021cca:	89 10                	mov    DWORD PTR [eax],edx
c0021ccc:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021cd3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021cd7:	89 10                	mov    DWORD PTR [eax],edx
c0021cd9:	81 c4 44 08 00 00    	add    esp,0x844
c0021cdf:	b0 01                	mov    al,0x1
c0021ce1:	5e                   	pop    esi
c0021ce2:	5f                   	pop    edi
c0021ce3:	c3                   	ret    

c0021ce4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021ce4:	55                   	push   ebp
c0021ce5:	57                   	push   edi
c0021ce6:	56                   	push   esi
c0021ce7:	53                   	push   ebx
c0021ce8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021cee:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021cf5:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021cfc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021d00:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021d04:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021d08:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021d0c:	75 03                	jne    c0021d11 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d0e:	83 c3 02             	add    ebx,0x2
c0021d11:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021d14:	75 03                	jne    c0021d19 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021d16:	43                   	inc    ebx
c0021d17:	eb f8                	jmp    c0021d11 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d19:	51                   	push   ecx
c0021d1a:	68 00 01 00 00       	push   0x100
c0021d1f:	6a 00                	push   0x0
c0021d21:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d25:	50                   	push   eax
c0021d26:	e8 25 ea fd ff       	call   c0000750 <memset>
c0021d2b:	83 c4 10             	add    esp,0x10
c0021d2e:	31 d2                	xor    edx,edx
c0021d30:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021d33:	84 c0                	test   al,al
c0021d35:	74 21                	je     c0021d58 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021d37:	3c 2f                	cmp    al,0x2f
c0021d39:	75 0b                	jne    c0021d46 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021d3b:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021d3f:	bd 01 00 00 00       	mov    ebp,0x1
c0021d44:	eb 14                	jmp    c0021d5a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021d46:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021d49:	80 f9 19             	cmp    cl,0x19
c0021d4c:	77 03                	ja     c0021d51 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021d4e:	83 e8 20             	sub    eax,0x20
c0021d51:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021d55:	42                   	inc    edx
c0021d56:	eb d8                	jmp    c0021d30 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021d58:	31 ed                	xor    ebp,ebp
c0021d5a:	83 ec 0c             	sub    esp,0xc
c0021d5d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021d64:	e8 00 dc fe ff       	call   c000f969 <malloc>
c0021d69:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021d70:	89 c6                	mov    esi,eax
c0021d72:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021d78:	c1 ef 0b             	shr    edi,0xb
c0021d7b:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021d82:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021d86:	83 c4 10             	add    esp,0x10
c0021d89:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021d8e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021d92:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021d99:	74 28                	je     c0021dc3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021d9b:	52                   	push   edx
c0021d9c:	57                   	push   edi
c0021d9d:	50                   	push   eax
c0021d9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021da2:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021da9:	e8 b9 f9 ff ff       	call   c0021767 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021dae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021db2:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021db9:	05 00 08 00 00       	add    eax,0x800
c0021dbe:	83 c4 10             	add    esp,0x10
c0021dc1:	eb cb                	jmp    c0021d8e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021dc3:	83 ec 0c             	sub    esp,0xc
c0021dc6:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021dca:	57                   	push   edi
c0021dcb:	e8 9c e9 fd ff       	call   c000076c <strlen>
c0021dd0:	50                   	push   eax
c0021dd1:	57                   	push   edi
c0021dd2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021dd9:	56                   	push   esi
c0021dda:	e8 46 f9 ff ff       	call   c0021725 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021ddf:	83 c4 20             	add    esp,0x20
c0021de2:	85 c0                	test   eax,eax
c0021de4:	75 13                	jne    c0021df9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021de6:	83 ec 0c             	sub    esp,0xc
c0021de9:	56                   	push   esi
c0021dea:	e8 8a db fe ff       	call   c000f979 <free>
c0021def:	83 c4 10             	add    esp,0x10
c0021df2:	31 c0                	xor    eax,eax
c0021df4:	e9 b3 00 00 00       	jmp    c0021eac <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021df9:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021dfd:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021e01:	c1 e7 08             	shl    edi,0x8
c0021e04:	c1 e2 10             	shl    edx,0x10
c0021e07:	09 d7                	or     edi,edx
c0021e09:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021e0d:	09 d7                	or     edi,edx
c0021e0f:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021e13:	c1 e2 18             	shl    edx,0x18
c0021e16:	09 d7                	or     edi,edx
c0021e18:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021e1c:	89 d1                	mov    ecx,edx
c0021e1e:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021e22:	c1 e1 08             	shl    ecx,0x8
c0021e25:	c1 e2 10             	shl    edx,0x10
c0021e28:	09 ca                	or     edx,ecx
c0021e2a:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021e2e:	09 ca                	or     edx,ecx
c0021e30:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021e34:	c1 e1 18             	shl    ecx,0x18
c0021e37:	09 ca                	or     edx,ecx
c0021e39:	89 e9                	mov    ecx,ebp
c0021e3b:	84 c9                	test   cl,cl
c0021e3d:	74 3c                	je     c0021e7b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021e3f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021e43:	83 ec 0c             	sub    esp,0xc
c0021e46:	56                   	push   esi
c0021e47:	e8 2d db fe ff       	call   c000f979 <free>
c0021e4c:	83 c4 0c             	add    esp,0xc
c0021e4f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e56:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021e5b:	50                   	push   eax
c0021e5c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e63:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e6a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021e6e:	52                   	push   edx
c0021e6f:	57                   	push   edi
c0021e70:	53                   	push   ebx
c0021e71:	e8 6e fe ff ff       	call   c0021ce4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021e76:	83 c4 20             	add    esp,0x20
c0021e79:	eb 31                	jmp    c0021eac <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e7b:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021e7e:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021e85:	d0 e8                	shr    al,1
c0021e87:	89 3b                	mov    DWORD PTR [ebx],edi
c0021e89:	83 e0 01             	and    eax,0x1
c0021e8c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021e93:	83 ec 0c             	sub    esp,0xc
c0021e96:	89 13                	mov    DWORD PTR [ebx],edx
c0021e98:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021e9f:	89 03                	mov    DWORD PTR [ebx],eax
c0021ea1:	56                   	push   esi
c0021ea2:	e8 d2 da fe ff       	call   c000f979 <free>
c0021ea7:	83 c4 10             	add    esp,0x10
c0021eaa:	b0 01                	mov    al,0x1
c0021eac:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021eb2:	5b                   	pop    ebx
c0021eb3:	5e                   	pop    esi
c0021eb4:	5f                   	pop    edi
c0021eb5:	5d                   	pop    ebp
c0021eb6:	c3                   	ret    

c0021eb7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021eb7:	55                   	push   ebp
c0021eb8:	57                   	push   edi
c0021eb9:	56                   	push   esi
c0021eba:	53                   	push   ebx
c0021ebb:	83 ec 20             	sub    esp,0x20
c0021ebe:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021ec2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021ec6:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021eca:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021ed2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021eda:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021edf:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021ee5:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021eeb:	57                   	push   edi
c0021eec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021ef0:	50                   	push   eax
c0021ef1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021ef5:	50                   	push   eax
c0021ef6:	e8 95 fd ff ff       	call   c0021c90 <readRoot(unsigned int*, unsigned int*, char)>
c0021efb:	5a                   	pop    edx
c0021efc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021f00:	e8 67 e8 fd ff       	call   c000076c <strlen>
c0021f05:	83 c4 10             	add    esp,0x10
c0021f08:	83 f8 03             	cmp    eax,0x3
c0021f0b:	77 17                	ja     c0021f24 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021f0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f11:	89 03                	mov    DWORD PTR [ebx],eax
c0021f13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f17:	89 06                	mov    DWORD PTR [esi],eax
c0021f19:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021f20:	b0 01                	mov    al,0x1
c0021f22:	eb 19                	jmp    c0021f3d <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021f24:	50                   	push   eax
c0021f25:	55                   	push   ebp
c0021f26:	57                   	push   edi
c0021f27:	56                   	push   esi
c0021f28:	53                   	push   ebx
c0021f29:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f2d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f31:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f35:	e8 aa fd ff ff       	call   c0021ce4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f3a:	83 c4 20             	add    esp,0x20
c0021f3d:	83 c4 1c             	add    esp,0x1c
c0021f40:	5b                   	pop    ebx
c0021f41:	5e                   	pop    esi
c0021f42:	5f                   	pop    edi
c0021f43:	5d                   	pop    ebp
c0021f44:	c3                   	ret    
c0021f45:	90                   	nop

c0021f46 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021f46:	57                   	push   edi
c0021f47:	56                   	push   esi
c0021f48:	53                   	push   ebx
c0021f49:	83 ec 10             	sub    esp,0x10
c0021f4c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021f50:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021f54:	85 ff                	test   edi,edi
c0021f56:	0f 84 8b 00 00 00    	je     c0021fe7 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021f5c:	85 f6                	test   esi,esi
c0021f5e:	0f 84 83 00 00 00    	je     c0021fe7 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021f64:	b8 03 00 00 00       	mov    eax,0x3
c0021f69:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021f6e:	75 7c                	jne    c0021fec <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021f70:	83 ec 0c             	sub    esp,0xc
c0021f73:	6a 1c                	push   0x1c
c0021f75:	e8 ef d9 fe ff       	call   c000f969 <malloc>
c0021f7a:	89 07                	mov    DWORD PTR [edi],eax
c0021f7c:	89 c3                	mov    ebx,eax
c0021f7e:	58                   	pop    eax
c0021f7f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021f83:	50                   	push   eax
c0021f84:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021f87:	50                   	push   eax
c0021f88:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f8c:	50                   	push   eax
c0021f8d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f91:	50                   	push   eax
c0021f92:	56                   	push   esi
c0021f93:	e8 1f ff ff ff       	call   c0021eb7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021f98:	83 c4 20             	add    esp,0x20
c0021f9b:	84 c0                	test   al,al
c0021f9d:	74 07                	je     c0021fa6 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c0021f9f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021fa4:	74 0b                	je     c0021fb1 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c0021fa6:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021faa:	b8 01 00 00 00       	mov    eax,0x1
c0021faf:	eb 3b                	jmp    c0021fec <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021fb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fb5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021fb9:	89 03                	mov    DWORD PTR [ebx],eax
c0021fbb:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021fc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021fc6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021fcd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021fd4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021fd7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021fde:	8a 06                	mov    al,BYTE PTR [esi]
c0021fe0:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021fe3:	31 c0                	xor    eax,eax
c0021fe5:	eb 05                	jmp    c0021fec <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021fe7:	b8 04 00 00 00       	mov    eax,0x4
c0021fec:	83 c4 10             	add    esp,0x10
c0021fef:	5b                   	pop    ebx
c0021ff0:	5e                   	pop    esi
c0021ff1:	5f                   	pop    edi
c0021ff2:	c3                   	ret    
c0021ff3:	90                   	nop

c0021ff4 <ISO9660::exists(char const*)>:
c0021ff4:	83 ec 28             	sub    esp,0x28
c0021ff7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021ffb:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021fff:	52                   	push   edx
c0022000:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0022003:	52                   	push   edx
c0022004:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022008:	52                   	push   edx
c0022009:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002200d:	52                   	push   edx
c002200e:	50                   	push   eax
c002200f:	e8 a3 fe ff ff       	call   c0021eb7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022014:	83 c4 3c             	add    esp,0x3c
c0022017:	c3                   	ret    

c0022018 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022018:	56                   	push   esi
c0022019:	53                   	push   ebx
c002201a:	83 ec 14             	sub    esp,0x14
c002201d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022021:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022025:	85 db                	test   ebx,ebx
c0022027:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002202b:	0f 94 c2             	sete   dl
c002202e:	85 f6                	test   esi,esi
c0022030:	0f 94 c0             	sete   al
c0022033:	08 c2                	or     dl,al
c0022035:	75 68                	jne    c002209f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022037:	85 c9                	test   ecx,ecx
c0022039:	74 64                	je     c002209f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002203b:	83 ec 0c             	sub    esp,0xc
c002203e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022041:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022045:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002204b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022052:	50                   	push   eax
c0022053:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022056:	50                   	push   eax
c0022057:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002205b:	50                   	push   eax
c002205c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022060:	50                   	push   eax
c0022061:	51                   	push   ecx
c0022062:	e8 50 fe ff ff       	call   c0021eb7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022067:	83 c4 20             	add    esp,0x20
c002206a:	ba 01 00 00 00       	mov    edx,0x1
c002206f:	84 c0                	test   al,al
c0022071:	74 31                	je     c00220a4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022073:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022077:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002207e:	89 03                	mov    DWORD PTR [ebx],eax
c0022080:	ba 00 00 00 00       	mov    edx,0x0
c0022085:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022089:	85 c0                	test   eax,eax
c002208b:	0f 95 06             	setne  BYTE PTR [esi]
c002208e:	74 14                	je     c00220a4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022090:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022096:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002209d:	eb 05                	jmp    c00220a4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002209f:	ba 04 00 00 00       	mov    edx,0x4
c00220a4:	83 c4 14             	add    esp,0x14
c00220a7:	89 d0                	mov    eax,edx
c00220a9:	5b                   	pop    ebx
c00220aa:	5e                   	pop    esi
c00220ab:	c3                   	ret    

c00220ac <ISO9660::openDir(char const*, void**)>:
c00220ac:	57                   	push   edi
c00220ad:	56                   	push   esi
c00220ae:	53                   	push   ebx
c00220af:	83 ec 10             	sub    esp,0x10
c00220b2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00220b6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00220ba:	85 ff                	test   edi,edi
c00220bc:	74 7b                	je     c0022139 <ISO9660::openDir(char const*, void**)+0x8d>
c00220be:	85 f6                	test   esi,esi
c00220c0:	74 77                	je     c0022139 <ISO9660::openDir(char const*, void**)+0x8d>
c00220c2:	83 ec 0c             	sub    esp,0xc
c00220c5:	6a 1c                	push   0x1c
c00220c7:	e8 9d d8 fe ff       	call   c000f969 <malloc>
c00220cc:	89 07                	mov    DWORD PTR [edi],eax
c00220ce:	89 c3                	mov    ebx,eax
c00220d0:	58                   	pop    eax
c00220d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00220d5:	50                   	push   eax
c00220d6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00220d9:	50                   	push   eax
c00220da:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220de:	50                   	push   eax
c00220df:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220e3:	50                   	push   eax
c00220e4:	56                   	push   esi
c00220e5:	e8 cd fd ff ff       	call   c0021eb7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220ea:	83 c4 20             	add    esp,0x20
c00220ed:	84 c0                	test   al,al
c00220ef:	74 07                	je     c00220f8 <ISO9660::openDir(char const*, void**)+0x4c>
c00220f1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00220f6:	75 0b                	jne    c0022103 <ISO9660::openDir(char const*, void**)+0x57>
c00220f8:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00220fc:	b8 01 00 00 00       	mov    eax,0x1
c0022101:	eb 3b                	jmp    c002213e <ISO9660::openDir(char const*, void**)+0x92>
c0022103:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022107:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002210b:	89 03                	mov    DWORD PTR [ebx],eax
c002210d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022114:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022118:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002211f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022126:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022129:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022130:	8a 06                	mov    al,BYTE PTR [esi]
c0022132:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022135:	31 c0                	xor    eax,eax
c0022137:	eb 05                	jmp    c002213e <ISO9660::openDir(char const*, void**)+0x92>
c0022139:	b8 04 00 00 00       	mov    eax,0x4
c002213e:	83 c4 10             	add    esp,0x10
c0022141:	5b                   	pop    ebx
c0022142:	5e                   	pop    esi
c0022143:	5f                   	pop    edi
c0022144:	c3                   	ret    
c0022145:	90                   	nop

c0022146 <ISO9660::ISO9660()>:
c0022146:	83 ec 0c             	sub    esp,0xc
c0022149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002214d:	83 ec 0c             	sub    esp,0xc
c0022150:	50                   	push   eax
c0022151:	e8 76 0b ff ff       	call   c0012ccc <Filesystem::Filesystem()>
c0022156:	83 c4 10             	add    esp,0x10
c0022159:	ba 40 cb 02 c0       	mov    edx,0xc002cb40
c002215e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022162:	89 10                	mov    DWORD PTR [eax],edx
c0022164:	90                   	nop
c0022165:	83 c4 0c             	add    esp,0xc
c0022168:	c3                   	ret    
c0022169:	90                   	nop

c002216a <SoundChannel::SoundChannel(int, int, int, int)>:
c002216a:	83 ec 1c             	sub    esp,0x1c
c002216d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022171:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022175:	89 10                	mov    DWORD PTR [eax],edx
c0022177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002217b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002217f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022182:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022186:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002218a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002218d:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022192:	75 23                	jne    c00221b7 <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0022194:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022198:	8b 10                	mov    edx,DWORD PTR [eax]
c002219a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002219e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00221a1:	0f af c2             	imul   eax,edx
c00221a4:	85 c0                	test   eax,eax
c00221a6:	79 03                	jns    c00221ab <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c00221a8:	83 c0 03             	add    eax,0x3
c00221ab:	c1 f8 02             	sar    eax,0x2
c00221ae:	05 a0 0f 00 00       	add    eax,0xfa0
c00221b3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00221b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221bb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00221bf:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00221c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221c6:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00221cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221d1:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00221d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221dc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00221df:	c1 e0 02             	shl    eax,0x2
c00221e2:	83 ec 0c             	sub    esp,0xc
c00221e5:	50                   	push   eax
c00221e6:	e8 7e d7 fe ff       	call   c000f969 <malloc>
c00221eb:	83 c4 10             	add    esp,0x10
c00221ee:	89 c2                	mov    edx,eax
c00221f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221f4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00221f7:	83 ec 04             	sub    esp,0x4
c00221fa:	8d 44 24 08          	lea    eax,[esp+0x8]
c00221fe:	50                   	push   eax
c00221ff:	6a 01                	push   0x1
c0022201:	6a 04                	push   0x4
c0022203:	e8 93 6b fe ff       	call   c0008d9b <src_new>
c0022208:	83 c4 10             	add    esp,0x10
c002220b:	89 c2                	mov    edx,eax
c002220d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022211:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022214:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022218:	85 c0                	test   eax,eax
c002221a:	74 10                	je     c002222c <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c002221c:	83 ec 0c             	sub    esp,0xc
c002221f:	68 a0 cb 02 c0       	push   0xc002cba0
c0022224:	e8 36 81 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c0022229:	83 c4 10             	add    esp,0x10
c002222c:	a0 20 09 03 c0       	mov    al,ds:0xc0030920
c0022231:	83 f0 01             	xor    eax,0x1
c0022234:	84 c0                	test   al,al
c0022236:	74 57                	je     c002228f <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0022238:	a1 bc cb 02 c0       	mov    eax,ds:0xc002cbbc
c002223d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022241:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022249:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022251:	7f 35                	jg     c0022288 <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0022253:	83 ec 0c             	sub    esp,0xc
c0022256:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002225a:	e8 60 54 00 00       	call   c00276bf <__floatsisf>
c002225f:	83 c4 10             	add    esp,0x10
c0022262:	8b 15 bc cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cbbc
c0022268:	83 ec 08             	sub    esp,0x8
c002226b:	52                   	push   edx
c002226c:	50                   	push   eax
c002226d:	e8 5f 50 00 00       	call   c00272d1 <__mulsf3>
c0022272:	83 c4 10             	add    esp,0x10
c0022275:	89 c2                	mov    edx,eax
c0022277:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002227b:	89 14 85 20 05 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfae0],edx
c0022282:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022286:	eb c1                	jmp    c0022249 <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0022288:	c6 05 20 09 03 c0 01 	mov    BYTE PTR ds:0xc0030920,0x1
c002228f:	90                   	nop
c0022290:	83 c4 1c             	add    esp,0x1c
c0022293:	c3                   	ret    

c0022294 <SoundChannel::~SoundChannel()>:
c0022294:	83 ec 0c             	sub    esp,0xc
c0022297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002229b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002229e:	83 ec 0c             	sub    esp,0xc
c00222a1:	50                   	push   eax
c00222a2:	e8 d2 d6 fe ff       	call   c000f979 <free>
c00222a7:	83 c4 10             	add    esp,0x10
c00222aa:	90                   	nop
c00222ab:	83 c4 0c             	add    esp,0xc
c00222ae:	c3                   	ret    
c00222af:	90                   	nop

c00222b0 <SoundChannel::getSampleRate()>:
c00222b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00222b6:	c3                   	ret    
c00222b7:	90                   	nop

c00222b8 <SoundChannel::getBits()>:
c00222b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222bf:	c3                   	ret    

c00222c0 <SoundChannel::getBufferUsed()>:
c00222c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222c4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00222c7:	c3                   	ret    

c00222c8 <SoundChannel::getBufferSize()>:
c00222c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222cc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00222cf:	c3                   	ret    

c00222d0 <SoundChannel::unbuffer(float*, int, int)>:
c00222d0:	56                   	push   esi
c00222d1:	53                   	push   ebx
c00222d2:	83 ec 40             	sub    esp,0x40
c00222d5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00222d9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00222dc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00222e0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00222e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00222e7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00222eb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00222ef:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00222f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00222f7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00222fb:	e8 bf 53 00 00       	call   c00276bf <__floatsisf>
c0022300:	5a                   	pop    edx
c0022301:	89 c6                	mov    esi,eax
c0022303:	ff 33                	push   DWORD PTR [ebx]
c0022305:	e8 b5 53 00 00       	call   c00276bf <__floatsisf>
c002230a:	59                   	pop    ecx
c002230b:	5a                   	pop    edx
c002230c:	50                   	push   eax
c002230d:	56                   	push   esi
c002230e:	e8 81 51 00 00       	call   c0027494 <__divsf3>
c0022313:	89 04 24             	mov    DWORD PTR [esp],eax
c0022316:	e8 74 66 00 00       	call   c002898f <__extendsfdf2>
c002231b:	59                   	pop    ecx
c002231c:	5e                   	pop    esi
c002231d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022321:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022325:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c002232d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022331:	50                   	push   eax
c0022332:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022335:	e8 56 66 fe ff       	call   c0008990 <src_process>
c002233a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002233e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022341:	83 c4 0c             	add    esp,0xc
c0022344:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022347:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c002234a:	29 d0                	sub    eax,edx
c002234c:	c1 e0 02             	shl    eax,0x2
c002234f:	50                   	push   eax
c0022350:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022353:	50                   	push   eax
c0022354:	51                   	push   ecx
c0022355:	e8 2e e3 fd ff       	call   c0000688 <memmove>
c002235a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002235e:	83 c4 44             	add    esp,0x44
c0022361:	5b                   	pop    ebx
c0022362:	5e                   	pop    esi
c0022363:	c3                   	ret    

c0022364 <SoundChannel::buffer16(short*, int)>:
c0022364:	55                   	push   ebp
c0022365:	57                   	push   edi
c0022366:	56                   	push   esi
c0022367:	53                   	push   ebx
c0022368:	83 ec 1c             	sub    esp,0x1c
c002236b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002236f:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0022372:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0022375:	0f 84 d2 00 00 00    	je     c002244d <SoundChannel::buffer16(short*, int)+0xe9>
c002237b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c002237f:	85 ed                	test   ebp,ebp
c0022381:	0f 8e c6 00 00 00    	jle    c002244d <SoundChannel::buffer16(short*, int)+0xe9>
c0022387:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002238b:	bd 00 00 00 38       	mov    ebp,0x38000000
c0022390:	83 ec 0c             	sub    esp,0xc
c0022393:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0022396:	50                   	push   eax
c0022397:	e8 23 53 00 00       	call   c00276bf <__floatsisf>
c002239c:	59                   	pop    ecx
c002239d:	8d 4e 01             	lea    ecx,[esi+0x1]
c00223a0:	5f                   	pop    edi
c00223a1:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00223a4:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c00223a7:	55                   	push   ebp
c00223a8:	50                   	push   eax
c00223a9:	e8 23 4f 00 00       	call   c00272d1 <__mulsf3>
c00223ae:	83 c4 10             	add    esp,0x10
c00223b1:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c00223b4:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c00223b7:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c00223ba:	0f 84 99 00 00 00    	je     c0022459 <SoundChannel::buffer16(short*, int)+0xf5>
c00223c0:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c00223c5:	74 78                	je     c002243f <SoundChannel::buffer16(short*, int)+0xdb>
c00223c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00223cb:	83 ec 0c             	sub    esp,0xc
c00223ce:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c00223d2:	50                   	push   eax
c00223d3:	e8 e7 52 00 00       	call   c00276bf <__floatsisf>
c00223d8:	5f                   	pop    edi
c00223d9:	8d 4e 01             	lea    ecx,[esi+0x1]
c00223dc:	5a                   	pop    edx
c00223dd:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00223e0:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c00223e3:	55                   	push   ebp
c00223e4:	50                   	push   eax
c00223e5:	e8 e7 4e 00 00       	call   c00272d1 <__mulsf3>
c00223ea:	83 c4 10             	add    esp,0x10
c00223ed:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c00223f0:	be 02 00 00 00       	mov    esi,0x2
c00223f5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c00223f8:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c00223fb:	74 46                	je     c0022443 <SoundChannel::buffer16(short*, int)+0xdf>
c00223fd:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0022401:	eb 36                	jmp    c0022439 <SoundChannel::buffer16(short*, int)+0xd5>
c0022403:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022407:	83 ec 0c             	sub    esp,0xc
c002240a:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c002240e:	46                   	inc    esi
c002240f:	50                   	push   eax
c0022410:	e8 aa 52 00 00       	call   c00276bf <__floatsisf>
c0022415:	5a                   	pop    edx
c0022416:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0022419:	59                   	pop    ecx
c002241a:	8d 4f 01             	lea    ecx,[edi+0x1]
c002241d:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0022420:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022424:	50                   	push   eax
c0022425:	e8 a7 4e 00 00       	call   c00272d1 <__mulsf3>
c002242a:	83 c4 10             	add    esp,0x10
c002242d:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0022431:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0022434:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0022437:	74 0a                	je     c0022443 <SoundChannel::buffer16(short*, int)+0xdf>
c0022439:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c002243d:	75 c4                	jne    c0022403 <SoundChannel::buffer16(short*, int)+0x9f>
c002243f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0022443:	83 c4 1c             	add    esp,0x1c
c0022446:	89 f0                	mov    eax,esi
c0022448:	5b                   	pop    ebx
c0022449:	5e                   	pop    esi
c002244a:	5f                   	pop    edi
c002244b:	5d                   	pop    ebp
c002244c:	c3                   	ret    
c002244d:	83 c4 1c             	add    esp,0x1c
c0022450:	31 f6                	xor    esi,esi
c0022452:	5b                   	pop    ebx
c0022453:	89 f0                	mov    eax,esi
c0022455:	5e                   	pop    esi
c0022456:	5f                   	pop    edi
c0022457:	5d                   	pop    ebp
c0022458:	c3                   	ret    
c0022459:	be 01 00 00 00       	mov    esi,0x1
c002245e:	eb e3                	jmp    c0022443 <SoundChannel::buffer16(short*, int)+0xdf>

c0022460 <SoundChannel::buffer8(unsigned char*, int)>:
c0022460:	55                   	push   ebp
c0022461:	57                   	push   edi
c0022462:	56                   	push   esi
c0022463:	53                   	push   ebx
c0022464:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022468:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002246c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002246f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022473:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022476:	74 7a                	je     c00224f2 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022478:	85 ff                	test   edi,edi
c002247a:	7e 76                	jle    c00224f2 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002247c:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022480:	8d 70 01             	lea    esi,[eax+0x1]
c0022483:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022486:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022489:	8b 1c 9d 20 05 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcfae0]
c0022490:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022493:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022496:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022499:	74 5e                	je     c00224f9 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c002249b:	83 ff 01             	cmp    edi,0x1
c002249e:	74 4b                	je     c00224eb <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c00224a0:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00224a4:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00224a7:	8d 70 01             	lea    esi,[eax+0x1]
c00224aa:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224ad:	8b 1c 9d 20 05 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcfae0]
c00224b4:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00224b7:	b8 02 00 00 00       	mov    eax,0x2
c00224bc:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224bf:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224c2:	75 23                	jne    c00224e7 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00224c4:	eb 27                	jmp    c00224ed <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224c6:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00224cb:	8d 71 01             	lea    esi,[ecx+0x1]
c00224ce:	40                   	inc    eax
c00224cf:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224d2:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00224d5:	8b 1c 9d 20 05 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcfae0]
c00224dc:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00224df:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224e2:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224e5:	74 06                	je     c00224ed <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224e7:	39 c7                	cmp    edi,eax
c00224e9:	75 db                	jne    c00224c6 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00224eb:	89 f8                	mov    eax,edi
c00224ed:	5b                   	pop    ebx
c00224ee:	5e                   	pop    esi
c00224ef:	5f                   	pop    edi
c00224f0:	5d                   	pop    ebp
c00224f1:	c3                   	ret    
c00224f2:	5b                   	pop    ebx
c00224f3:	31 c0                	xor    eax,eax
c00224f5:	5e                   	pop    esi
c00224f6:	5f                   	pop    edi
c00224f7:	5d                   	pop    ebp
c00224f8:	c3                   	ret    
c00224f9:	b8 01 00 00 00       	mov    eax,0x1
c00224fe:	eb ed                	jmp    c00224ed <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022500 <SoundDevice::SoundDevice(char const*)>:
c0022500:	83 ec 1c             	sub    esp,0x1c
c0022503:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022507:	83 ec 08             	sub    esp,0x8
c002250a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002250e:	50                   	push   eax
c002250f:	e8 ea 1a ff ff       	call   c0013ffe <Device::Device(char const*)>
c0022514:	83 c4 10             	add    esp,0x10
c0022517:	ba c8 cb 02 c0       	mov    edx,0xc002cbc8
c002251c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022520:	89 10                	mov    DWORD PTR [eax],edx
c0022522:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022526:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022530:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022534:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c002253e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022546:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002254b:	7f 19                	jg     c0022566 <SoundDevice::SoundDevice(char const*)+0x66>
c002254d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022551:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022555:	83 c2 54             	add    edx,0x54
c0022558:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022560:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022564:	eb e0                	jmp    c0022546 <SoundDevice::SoundDevice(char const*)+0x46>
c0022566:	90                   	nop
c0022567:	83 c4 1c             	add    esp,0x1c
c002256a:	c3                   	ret    
c002256b:	90                   	nop

c002256c <SoundDevice::~SoundDevice()>:
c002256c:	53                   	push   ebx
c002256d:	83 ec 18             	sub    esp,0x18
c0022570:	ba c8 cb 02 c0       	mov    edx,0xc002cbc8
c0022575:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022579:	89 10                	mov    DWORD PTR [eax],edx
c002257b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022583:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022588:	7f 46                	jg     c00225d0 <SoundDevice::~SoundDevice()+0x64>
c002258a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002258e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022592:	83 c2 54             	add    edx,0x54
c0022595:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022599:	85 c0                	test   eax,eax
c002259b:	74 2d                	je     c00225ca <SoundDevice::~SoundDevice()+0x5e>
c002259d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225a5:	83 c2 54             	add    edx,0x54
c00225a8:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00225ac:	85 db                	test   ebx,ebx
c00225ae:	74 1a                	je     c00225ca <SoundDevice::~SoundDevice()+0x5e>
c00225b0:	83 ec 0c             	sub    esp,0xc
c00225b3:	53                   	push   ebx
c00225b4:	e8 db fc ff ff       	call   c0022294 <SoundChannel::~SoundChannel()>
c00225b9:	83 c4 10             	add    esp,0x10
c00225bc:	83 ec 08             	sub    esp,0x8
c00225bf:	6a 2c                	push   0x2c
c00225c1:	53                   	push   ebx
c00225c2:	e8 22 03 ff ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c00225c7:	83 c4 10             	add    esp,0x10
c00225ca:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00225ce:	eb b3                	jmp    c0022583 <SoundDevice::~SoundDevice()+0x17>
c00225d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225d4:	83 ec 0c             	sub    esp,0xc
c00225d7:	50                   	push   eax
c00225d8:	e8 eb 16 ff ff       	call   c0013cc8 <Device::~Device()>
c00225dd:	83 c4 10             	add    esp,0x10
c00225e0:	90                   	nop
c00225e1:	83 c4 18             	add    esp,0x18
c00225e4:	5b                   	pop    ebx
c00225e5:	c3                   	ret    

c00225e6 <SoundDevice::~SoundDevice()>:
c00225e6:	83 ec 0c             	sub    esp,0xc
c00225e9:	83 ec 0c             	sub    esp,0xc
c00225ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225f0:	e8 77 ff ff ff       	call   c002256c <SoundDevice::~SoundDevice()>
c00225f5:	83 c4 10             	add    esp,0x10
c00225f8:	83 ec 08             	sub    esp,0x8
c00225fb:	68 e4 01 00 00       	push   0x1e4
c0022600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022604:	e8 e0 02 ff ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c0022609:	83 c4 10             	add    esp,0x10
c002260c:	83 c4 0c             	add    esp,0xc
c002260f:	c3                   	ret    

c0022610 <SoundDevice::getFreeChannelNum()>:
c0022610:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022614:	31 c0                	xor    eax,eax
c0022616:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c002261e:	74 09                	je     c0022629 <SoundDevice::getFreeChannelNum()+0x19>
c0022620:	40                   	inc    eax
c0022621:	83 f8 20             	cmp    eax,0x20
c0022624:	75 f0                	jne    c0022616 <SoundDevice::getFreeChannelNum()+0x6>
c0022626:	83 c8 ff             	or     eax,0xffffffff
c0022629:	c3                   	ret    

c002262a <SoundDevice::addChannel(SoundChannel*)>:
c002262a:	56                   	push   esi
c002262b:	53                   	push   ebx
c002262c:	51                   	push   ecx
c002262d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022631:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022635:	53                   	push   ebx
c0022636:	e8 d5 ff ff ff       	call   c0022610 <SoundDevice::getFreeChannelNum()>
c002263b:	5a                   	pop    edx
c002263c:	83 f8 ff             	cmp    eax,0xffffffff
c002263f:	74 51                	je     c0022692 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022641:	85 f6                	test   esi,esi
c0022643:	74 4d                	je     c0022692 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022645:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c002264c:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022653:	75 30                	jne    c0022685 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022655:	83 ec 0c             	sub    esp,0xc
c0022658:	56                   	push   esi
c0022659:	e8 52 fc ff ff       	call   c00222b0 <SoundChannel::getSampleRate()>
c002265e:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022664:	89 34 24             	mov    DWORD PTR [esp],esi
c0022667:	e8 4c fc ff ff       	call   c00222b8 <SoundChannel::getBits()>
c002266c:	83 c4 0c             	add    esp,0xc
c002266f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022675:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022677:	50                   	push   eax
c0022678:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002267e:	53                   	push   ebx
c002267f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0022682:	83 c4 10             	add    esp,0x10
c0022685:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c002268b:	b8 01 00 00 00       	mov    eax,0x1
c0022690:	eb 03                	jmp    c0022695 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022692:	83 c8 ff             	or     eax,0xffffffff
c0022695:	5a                   	pop    edx
c0022696:	5b                   	pop    ebx
c0022697:	5e                   	pop    esi
c0022698:	c3                   	ret    
c0022699:	90                   	nop

c002269a <SoundDevice::removeChannel(int)>:
c002269a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002269e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226a2:	83 fa 1f             	cmp    edx,0x1f
c00226a5:	77 23                	ja     c00226ca <SoundDevice::removeChannel(int)+0x30>
c00226a7:	8d 14 90             	lea    edx,[eax+edx*4]
c00226aa:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00226b1:	74 17                	je     c00226ca <SoundDevice::removeChannel(int)+0x30>
c00226b3:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00226bd:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00226c3:	75 05                	jne    c00226ca <SoundDevice::removeChannel(int)+0x30>
c00226c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00226c7:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c00226ca:	c3                   	ret    
c00226cb:	90                   	nop

c00226cc <SoundDevice::floatTo16(float*, short*, int)>:
c00226cc:	57                   	push   edi
c00226cd:	56                   	push   esi
c00226ce:	53                   	push   ebx
c00226cf:	31 db                	xor    ebx,ebx
c00226d1:	83 ec 10             	sub    esp,0x10
c00226d4:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00226d8:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00226dc:	0f 8d d0 00 00 00    	jge    c00227b2 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c00226e2:	83 ec 0c             	sub    esp,0xc
c00226e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00226e9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00226ec:	e8 9e 62 00 00       	call   c002898f <__extendsfdf2>
c00226f1:	83 c4 10             	add    esp,0x10
c00226f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226fc:	68 00 00 f0 3f       	push   0x3ff00000
c0022701:	6a 00                	push   0x0
c0022703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022707:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002270b:	e8 0b 52 00 00       	call   c002791b <__adddf3>
c0022710:	83 c4 10             	add    esp,0x10
c0022713:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022717:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002271b:	68 00 00 e0 3f       	push   0x3fe00000
c0022720:	6a 00                	push   0x0
c0022722:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022726:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002272a:	e8 69 58 00 00       	call   c0027f98 <__muldf3>
c002272f:	83 c4 10             	add    esp,0x10
c0022732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022736:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002273a:	68 c0 ff df 40       	push   0x40dfffc0
c002273f:	6a 00                	push   0x0
c0022741:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022749:	e8 4a 58 00 00       	call   c0027f98 <__muldf3>
c002274e:	59                   	pop    ecx
c002274f:	5f                   	pop    edi
c0022750:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022754:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022758:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002275c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022760:	e8 06 61 00 00       	call   c002886b <__truncdfsf2>
c0022765:	5a                   	pop    edx
c0022766:	89 c7                	mov    edi,eax
c0022768:	59                   	pop    ecx
c0022769:	68 00 fe ff 46       	push   0x46fffe00
c002276e:	50                   	push   eax
c002276f:	e8 a1 51 00 00       	call   c0027915 <__gesf2>
c0022774:	83 c4 10             	add    esp,0x10
c0022777:	85 c0                	test   eax,eax
c0022779:	78 08                	js     c0022783 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c002277b:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0022781:	eb 29                	jmp    c00227ac <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022783:	50                   	push   eax
c0022784:	50                   	push   eax
c0022785:	6a 00                	push   0x0
c0022787:	57                   	push   edi
c0022788:	e8 8c 51 00 00       	call   c0027919 <__lesf2>
c002278d:	83 c4 10             	add    esp,0x10
c0022790:	85 c0                	test   eax,eax
c0022792:	7f 08                	jg     c002279c <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0022794:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c002279a:	eb 10                	jmp    c00227ac <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c002279c:	83 ec 0c             	sub    esp,0xc
c002279f:	57                   	push   edi
c00227a0:	e8 87 62 00 00       	call   c0028a2c <lrintf>
c00227a5:	83 c4 10             	add    esp,0x10
c00227a8:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00227ac:	43                   	inc    ebx
c00227ad:	e9 26 ff ff ff       	jmp    c00226d8 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c00227b2:	83 c4 10             	add    esp,0x10
c00227b5:	5b                   	pop    ebx
c00227b6:	5e                   	pop    esi
c00227b7:	5f                   	pop    edi
c00227b8:	c3                   	ret    
c00227b9:	90                   	nop

c00227ba <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00227ba:	57                   	push   edi
c00227bb:	56                   	push   esi
c00227bc:	53                   	push   ebx
c00227bd:	31 db                	xor    ebx,ebx
c00227bf:	83 ec 10             	sub    esp,0x10
c00227c2:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00227c6:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00227ca:	0f 8d cb 00 00 00    	jge    c002289b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00227d0:	83 ec 0c             	sub    esp,0xc
c00227d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00227d7:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00227da:	e8 b0 61 00 00       	call   c002898f <__extendsfdf2>
c00227df:	83 c4 10             	add    esp,0x10
c00227e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227ea:	68 00 00 f0 3f       	push   0x3ff00000
c00227ef:	6a 00                	push   0x0
c00227f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227f9:	e8 1d 51 00 00       	call   c002791b <__adddf3>
c00227fe:	83 c4 10             	add    esp,0x10
c0022801:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022805:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022809:	68 00 00 e0 3f       	push   0x3fe00000
c002280e:	6a 00                	push   0x0
c0022810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022814:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022818:	e8 7b 57 00 00       	call   c0027f98 <__muldf3>
c002281d:	83 c4 10             	add    esp,0x10
c0022820:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022824:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022828:	68 00 00 60 40       	push   0x40600000
c002282d:	6a 00                	push   0x0
c002282f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022833:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022837:	e8 5c 57 00 00       	call   c0027f98 <__muldf3>
c002283c:	59                   	pop    ecx
c002283d:	5f                   	pop    edi
c002283e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022842:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022846:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002284a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002284e:	e8 18 60 00 00       	call   c002886b <__truncdfsf2>
c0022853:	5a                   	pop    edx
c0022854:	89 c7                	mov    edi,eax
c0022856:	59                   	pop    ecx
c0022857:	68 00 00 fe 42       	push   0x42fe0000
c002285c:	50                   	push   eax
c002285d:	e8 b3 50 00 00       	call   c0027915 <__gesf2>
c0022862:	83 c4 10             	add    esp,0x10
c0022865:	85 c0                	test   eax,eax
c0022867:	78 06                	js     c002286f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022869:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002286d:	eb 26                	jmp    c0022895 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002286f:	50                   	push   eax
c0022870:	50                   	push   eax
c0022871:	6a 00                	push   0x0
c0022873:	57                   	push   edi
c0022874:	e8 a0 50 00 00       	call   c0027919 <__lesf2>
c0022879:	83 c4 10             	add    esp,0x10
c002287c:	85 c0                	test   eax,eax
c002287e:	7f 06                	jg     c0022886 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022880:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022884:	eb 0f                	jmp    c0022895 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022886:	83 ec 0c             	sub    esp,0xc
c0022889:	57                   	push   edi
c002288a:	e8 9d 61 00 00       	call   c0028a2c <lrintf>
c002288f:	83 c4 10             	add    esp,0x10
c0022892:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022895:	43                   	inc    ebx
c0022896:	e9 2b ff ff ff       	jmp    c00227c6 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002289b:	83 c4 10             	add    esp,0x10
c002289e:	5b                   	pop    ebx
c002289f:	5e                   	pop    esi
c00228a0:	5f                   	pop    edi
c00228a1:	c3                   	ret    

c00228a2 <SoundDevice::getAudio(int, float*, float*)>:
c00228a2:	55                   	push   ebp
c00228a3:	31 ed                	xor    ebp,ebp
c00228a5:	57                   	push   edi
c00228a6:	56                   	push   esi
c00228a7:	31 f6                	xor    esi,esi
c00228a9:	53                   	push   ebx
c00228aa:	83 ec 20             	sub    esp,0x20
c00228ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00228b1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00228b5:	c1 e0 02             	shl    eax,0x2
c00228b8:	50                   	push   eax
c00228b9:	6a 00                	push   0x0
c00228bb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00228bf:	e8 8c de fd ff       	call   c0000750 <memset>
c00228c4:	83 c4 10             	add    esp,0x10
c00228c7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00228cf:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c00228d6:	85 c9                	test   ecx,ecx
c00228d8:	74 52                	je     c002292c <SoundDevice::getAudio(int, float*, float*)+0x8a>
c00228da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00228de:	99                   	cdq    
c00228df:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c00228e5:	50                   	push   eax
c00228e6:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00228ec:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00228f0:	51                   	push   ecx
c00228f1:	e8 da f9 ff ff       	call   c00222d0 <SoundChannel::unbuffer(float*, int, int)>
c00228f6:	31 d2                	xor    edx,edx
c00228f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00228fc:	83 c4 10             	add    esp,0x10
c00228ff:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022903:	7d 1e                	jge    c0022923 <SoundDevice::getAudio(int, float*, float*)+0x81>
c0022905:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022909:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002290d:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0022910:	89 cf                	mov    edi,ecx
c0022912:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0022918:	0f af ca             	imul   ecx,edx
c002291b:	42                   	inc    edx
c002291c:	01 e9                	add    ecx,ebp
c002291e:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c0022921:	eb dc                	jmp    c00228ff <SoundDevice::getAudio(int, float*, float*)+0x5d>
c0022923:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0022927:	45                   	inc    ebp
c0022928:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c002292c:	46                   	inc    esi
c002292d:	83 fe 20             	cmp    esi,0x20
c0022930:	75 9d                	jne    c00228cf <SoundDevice::getAudio(int, float*, float*)+0x2d>
c0022932:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022936:	83 c4 1c             	add    esp,0x1c
c0022939:	5b                   	pop    ebx
c002293a:	5e                   	pop    esi
c002293b:	5f                   	pop    edi
c002293c:	5d                   	pop    ebp
c002293d:	c3                   	ret    

c002293e <PCI::open(int, int, void*)>:
c002293e:	83 ec 18             	sub    esp,0x18
c0022941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022945:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022949:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002294f:	8b 10                	mov    edx,DWORD PTR [eax]
c0022951:	50                   	push   eax
c0022952:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022955:	31 c0                	xor    eax,eax
c0022957:	83 c4 1c             	add    esp,0x1c
c002295a:	c3                   	ret    
c002295b:	90                   	nop

c002295c <PCI::close(int, int, void*)>:
c002295c:	31 c0                	xor    eax,eax
c002295e:	c3                   	ret    
c002295f:	90                   	nop

c0022960 <PCI::PCI()>:
c0022960:	83 ec 0c             	sub    esp,0xc
c0022963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022967:	83 ec 08             	sub    esp,0x8
c002296a:	68 f8 cb 02 c0       	push   0xc002cbf8
c002296f:	50                   	push   eax
c0022970:	e8 ed 0c ff ff       	call   c0013662 <Bus::Bus(char const*)>
c0022975:	83 c4 10             	add    esp,0x10
c0022978:	ba e4 cc 02 c0       	mov    edx,0xc002cce4
c002297d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022981:	89 10                	mov    DWORD PTR [eax],edx
c0022983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022987:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0022991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022995:	a3 24 09 03 c0       	mov    ds:0xc0030924,eax
c002299a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002299e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229a4:	0f b6 d0             	movzx  edx,al
c00229a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ab:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00229b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229b6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229bc:	0f b6 d0             	movzx  edx,al
c00229bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229c3:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00229c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229cc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229d2:	8d 50 01             	lea    edx,[eax+0x1]
c00229d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00229d9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00229df:	0f b6 d0             	movzx  edx,al
c00229e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229e6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00229ea:	83 c9 c0             	or     ecx,0xffffffc0
c00229ed:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00229f1:	90                   	nop
c00229f2:	83 c4 0c             	add    esp,0xc
c00229f5:	c3                   	ret    

c00229f6 <PCI::readBAR8(unsigned int, int)>:
c00229f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00229fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00229fe:	f6 c2 01             	test   dl,0x1
c0022a01:	74 07                	je     c0022a0a <PCI::readBAR8(unsigned int, int)+0x14>
c0022a03:	83 e2 fc             	and    edx,0xfffffffc
c0022a06:	01 c2                	add    edx,eax
c0022a08:	ec                   	in     al,dx
c0022a09:	c3                   	ret    
c0022a0a:	83 e2 f0             	and    edx,0xfffffff0
c0022a0d:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0022a10:	c3                   	ret    
c0022a11:	90                   	nop

c0022a12 <PCI::readBAR16(unsigned int, int)>:
c0022a12:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022a16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a1a:	f6 c2 01             	test   dl,0x1
c0022a1d:	74 08                	je     c0022a27 <PCI::readBAR16(unsigned int, int)+0x15>
c0022a1f:	83 e2 fc             	and    edx,0xfffffffc
c0022a22:	01 c2                	add    edx,eax
c0022a24:	66 ed                	in     ax,dx
c0022a26:	c3                   	ret    
c0022a27:	83 e2 f0             	and    edx,0xfffffff0
c0022a2a:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022a2e:	c3                   	ret    
c0022a2f:	90                   	nop

c0022a30 <PCI::readBAR32(unsigned int, int)>:
c0022a30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022a34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a38:	f6 c2 01             	test   dl,0x1
c0022a3b:	74 07                	je     c0022a44 <PCI::readBAR32(unsigned int, int)+0x14>
c0022a3d:	83 e2 fc             	and    edx,0xfffffffc
c0022a40:	01 c2                	add    edx,eax
c0022a42:	ed                   	in     eax,dx
c0022a43:	c3                   	ret    
c0022a44:	83 e2 f0             	and    edx,0xfffffff0
c0022a47:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022a4a:	c3                   	ret    
c0022a4b:	90                   	nop

c0022a4c <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022a4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a54:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022a58:	f6 c2 01             	test   dl,0x1
c0022a5b:	74 07                	je     c0022a64 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022a5d:	83 e2 fc             	and    edx,0xfffffffc
c0022a60:	01 ca                	add    edx,ecx
c0022a62:	ee                   	out    dx,al
c0022a63:	c3                   	ret    
c0022a64:	83 e2 f0             	and    edx,0xfffffff0
c0022a67:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022a6a:	c3                   	ret    
c0022a6b:	90                   	nop

c0022a6c <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022a6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022a70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a74:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022a78:	f6 c2 01             	test   dl,0x1
c0022a7b:	74 08                	je     c0022a85 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0022a7d:	83 e2 fc             	and    edx,0xfffffffc
c0022a80:	01 ca                	add    edx,ecx
c0022a82:	66 ef                	out    dx,ax
c0022a84:	c3                   	ret    
c0022a85:	83 e2 f0             	and    edx,0xfffffff0
c0022a88:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0022a8c:	c3                   	ret    
c0022a8d:	90                   	nop

c0022a8e <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0022a8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022a92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a96:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022a9a:	f6 c2 01             	test   dl,0x1
c0022a9d:	74 07                	je     c0022aa6 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0022a9f:	83 e2 fc             	and    edx,0xfffffffc
c0022aa2:	01 ca                	add    edx,ecx
c0022aa4:	ef                   	out    dx,eax
c0022aa5:	c3                   	ret    
c0022aa6:	83 e2 f0             	and    edx,0xfffffff0
c0022aa9:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0022aac:	c3                   	ret    
c0022aad:	90                   	nop

c0022aae <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022aae:	55                   	push   ebp
c0022aaf:	57                   	push   edi
c0022ab0:	56                   	push   esi
c0022ab1:	53                   	push   ebx
c0022ab2:	83 ec 0c             	sub    esp,0xc
c0022ab5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022ab9:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0022abd:	89 f0                	mov    eax,esi
c0022abf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022ac3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022ac7:	3c 07                	cmp    al,0x7
c0022ac9:	76 10                	jbe    c0022adb <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0022acb:	83 ec 0c             	sub    esp,0xc
c0022ace:	68 00 cc 02 c0       	push   0xc002cc00
c0022ad3:	e8 87 78 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c0022ad8:	83 c4 10             	add    esp,0x10
c0022adb:	80 fb 0f             	cmp    bl,0xf
c0022ade:	76 10                	jbe    c0022af0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0022ae0:	83 ec 0c             	sub    esp,0xc
c0022ae3:	68 30 cc 02 c0       	push   0xc002cc30
c0022ae8:	e8 72 78 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c0022aed:	83 c4 10             	add    esp,0x10
c0022af0:	8d 04 36             	lea    eax,[esi+esi*1]
c0022af3:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022af8:	83 c8 f0             	or     eax,0xfffffff0
c0022afb:	ee                   	out    dx,al
c0022afc:	ba fa 0c 00 00       	mov    edx,0xcfa
c0022b01:	89 e8                	mov    eax,ebp
c0022b03:	ee                   	out    dx,al
c0022b04:	83 c4 0c             	add    esp,0xc
c0022b07:	89 d8                	mov    eax,ebx
c0022b09:	66 81 e7 fc 00       	and    di,0xfc
c0022b0e:	5b                   	pop    ebx
c0022b0f:	c1 e0 08             	shl    eax,0x8
c0022b12:	5e                   	pop    esi
c0022b13:	09 f8                	or     eax,edi
c0022b15:	5f                   	pop    edi
c0022b16:	66 0d 00 c0          	or     ax,0xc000
c0022b1a:	5d                   	pop    ebp
c0022b1b:	c3                   	ret    

c0022b1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022b1c:	57                   	push   edi
c0022b1d:	56                   	push   esi
c0022b1e:	53                   	push   ebx
c0022b1f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022b23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022b27:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022b2d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022b31:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022b35:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022b39:	83 ff 01             	cmp    edi,0x1
c0022b3c:	75 3e                	jne    c0022b7c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022b3e:	89 de                	mov    esi,ebx
c0022b40:	0f b6 c0             	movzx  eax,al
c0022b43:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022b49:	c1 e0 10             	shl    eax,0x10
c0022b4c:	0f b6 c9             	movzx  ecx,cl
c0022b4f:	09 f0                	or     eax,esi
c0022b51:	c1 e1 08             	shl    ecx,0x8
c0022b54:	0f b6 d2             	movzx  edx,dl
c0022b57:	09 c8                	or     eax,ecx
c0022b59:	c1 e2 0b             	shl    edx,0xb
c0022b5c:	09 d0                	or     eax,edx
c0022b5e:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b63:	0d 00 00 00 80       	or     eax,0x80000000
c0022b68:	ef                   	out    dx,eax
c0022b69:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b6e:	ed                   	in     eax,dx
c0022b6f:	83 e3 02             	and    ebx,0x2
c0022b72:	0f b6 cb             	movzx  ecx,bl
c0022b75:	c1 e1 03             	shl    ecx,0x3
c0022b78:	d3 e8                	shr    eax,cl
c0022b7a:	eb 43                	jmp    c0022bbf <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022b7c:	83 ff 02             	cmp    edi,0x2
c0022b7f:	75 2c                	jne    c0022bad <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0022b81:	83 ec 0c             	sub    esp,0xc
c0022b84:	0f b6 c9             	movzx  ecx,cl
c0022b87:	0f b6 d2             	movzx  edx,dl
c0022b8a:	0f b6 fb             	movzx  edi,bl
c0022b8d:	0f b6 c0             	movzx  eax,al
c0022b90:	57                   	push   edi
c0022b91:	51                   	push   ecx
c0022b92:	52                   	push   edx
c0022b93:	50                   	push   eax
c0022b94:	56                   	push   esi
c0022b95:	e8 14 ff ff ff       	call   c0022aae <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b9a:	89 c2                	mov    edx,eax
c0022b9c:	ed                   	in     eax,dx
c0022b9d:	83 e3 02             	and    ebx,0x2
c0022ba0:	83 c4 20             	add    esp,0x20
c0022ba3:	0f b6 cb             	movzx  ecx,bl
c0022ba6:	c1 e1 03             	shl    ecx,0x3
c0022ba9:	d3 e8                	shr    eax,cl
c0022bab:	eb 12                	jmp    c0022bbf <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022bad:	83 ec 0c             	sub    esp,0xc
c0022bb0:	68 60 cc 02 c0       	push   0xc002cc60
c0022bb5:	e8 a5 77 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c0022bba:	83 c4 10             	add    esp,0x10
c0022bbd:	31 c0                	xor    eax,eax
c0022bbf:	5b                   	pop    ebx
c0022bc0:	5e                   	pop    esi
c0022bc1:	5f                   	pop    edi
c0022bc2:	c3                   	ret    
c0022bc3:	90                   	nop

c0022bc4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022bc4:	83 ec 18             	sub    esp,0x18
c0022bc7:	6a 00                	push   0x0
c0022bc9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022bce:	50                   	push   eax
c0022bcf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022bd4:	50                   	push   eax
c0022bd5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022bda:	50                   	push   eax
c0022bdb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022bdf:	e8 38 ff ff ff       	call   c0022b1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022be4:	83 c4 2c             	add    esp,0x2c
c0022be7:	c3                   	ret    

c0022be8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022be8:	83 ec 18             	sub    esp,0x18
c0022beb:	6a 0e                	push   0xe
c0022bed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022bf2:	50                   	push   eax
c0022bf3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022bf8:	50                   	push   eax
c0022bf9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022bfe:	50                   	push   eax
c0022bff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022c03:	e8 14 ff ff ff       	call   c0022b1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c08:	83 c4 2c             	add    esp,0x2c
c0022c0b:	0f b6 c0             	movzx  eax,al
c0022c0e:	c3                   	ret    
c0022c0f:	90                   	nop

c0022c10 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022c10:	55                   	push   ebp
c0022c11:	57                   	push   edi
c0022c12:	56                   	push   esi
c0022c13:	53                   	push   ebx
c0022c14:	83 ec 18             	sub    esp,0x18
c0022c17:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0022c1c:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0022c21:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0022c26:	6a 0a                	push   0xa
c0022c28:	56                   	push   esi
c0022c29:	55                   	push   ebp
c0022c2a:	57                   	push   edi
c0022c2b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022c2f:	e8 e8 fe ff ff       	call   c0022b1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c34:	83 c4 14             	add    esp,0x14
c0022c37:	89 c3                	mov    ebx,eax
c0022c39:	6a 0a                	push   0xa
c0022c3b:	0f b6 db             	movzx  ebx,bl
c0022c3e:	56                   	push   esi
c0022c3f:	55                   	push   ebp
c0022c40:	57                   	push   edi
c0022c41:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022c45:	e8 d2 fe ff ff       	call   c0022b1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c4a:	83 c4 2c             	add    esp,0x2c
c0022c4d:	25 00 ff 00 00       	and    eax,0xff00
c0022c52:	09 d8                	or     eax,ebx
c0022c54:	5b                   	pop    ebx
c0022c55:	5e                   	pop    esi
c0022c56:	5f                   	pop    edi
c0022c57:	5d                   	pop    ebp
c0022c58:	c3                   	ret    
c0022c59:	90                   	nop

c0022c5a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022c5a:	83 ec 18             	sub    esp,0x18
c0022c5d:	6a 08                	push   0x8
c0022c5f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c64:	50                   	push   eax
c0022c65:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c6a:	50                   	push   eax
c0022c6b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c70:	50                   	push   eax
c0022c71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022c75:	e8 a2 fe ff ff       	call   c0022b1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c7a:	83 c4 2c             	add    esp,0x2c
c0022c7d:	0f b6 c4             	movzx  eax,ah
c0022c80:	c3                   	ret    
c0022c81:	90                   	nop

c0022c82 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022c82:	83 ec 18             	sub    esp,0x18
c0022c85:	6a 08                	push   0x8
c0022c87:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c8c:	50                   	push   eax
c0022c8d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c92:	50                   	push   eax
c0022c93:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c98:	50                   	push   eax
c0022c99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022c9d:	e8 7a fe ff ff       	call   c0022b1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ca2:	83 c4 2c             	add    esp,0x2c
c0022ca5:	c3                   	ret    

c0022ca6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022ca6:	83 ec 18             	sub    esp,0x18
c0022ca9:	6a 3c                	push   0x3c
c0022cab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022cb0:	50                   	push   eax
c0022cb1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022cb6:	50                   	push   eax
c0022cb7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022cbc:	50                   	push   eax
c0022cbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022cc1:	e8 56 fe ff ff       	call   c0022b1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022cc6:	83 c4 2c             	add    esp,0x2c
c0022cc9:	c3                   	ret    

c0022cca <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022cca:	83 ec 18             	sub    esp,0x18
c0022ccd:	6a 18                	push   0x18
c0022ccf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022cd4:	50                   	push   eax
c0022cd5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022cda:	50                   	push   eax
c0022cdb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ce0:	50                   	push   eax
c0022ce1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022ce5:	e8 32 fe ff ff       	call   c0022b1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022cea:	83 c4 2c             	add    esp,0x2c
c0022ced:	0f b6 c4             	movzx  eax,ah
c0022cf0:	c3                   	ret    
c0022cf1:	90                   	nop

c0022cf2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022cf2:	55                   	push   ebp
c0022cf3:	57                   	push   edi
c0022cf4:	56                   	push   esi
c0022cf5:	53                   	push   ebx
c0022cf6:	83 ec 28             	sub    esp,0x28
c0022cf9:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0022cfd:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0022d02:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0022d07:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0022d0c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022d13:	8d 43 12             	lea    eax,[ebx+0x12]
c0022d16:	83 c3 10             	add    ebx,0x10
c0022d19:	0f b6 c0             	movzx  eax,al
c0022d1c:	0f b6 db             	movzx  ebx,bl
c0022d1f:	50                   	push   eax
c0022d20:	51                   	push   ecx
c0022d21:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0022d25:	57                   	push   edi
c0022d26:	55                   	push   ebp
c0022d27:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022d2b:	e8 ec fd ff ff       	call   c0022b1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d30:	83 c4 14             	add    esp,0x14
c0022d33:	89 c6                	mov    esi,eax
c0022d35:	53                   	push   ebx
c0022d36:	c1 e6 10             	shl    esi,0x10
c0022d39:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022d3d:	51                   	push   ecx
c0022d3e:	57                   	push   edi
c0022d3f:	55                   	push   ebp
c0022d40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022d44:	e8 d3 fd ff ff       	call   c0022b1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d49:	83 c4 3c             	add    esp,0x3c
c0022d4c:	0f b7 c0             	movzx  eax,ax
c0022d4f:	5b                   	pop    ebx
c0022d50:	09 f0                	or     eax,esi
c0022d52:	5e                   	pop    esi
c0022d53:	5f                   	pop    edi
c0022d54:	5d                   	pop    ebp
c0022d55:	c3                   	ret    

c0022d56 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022d56:	55                   	push   ebp
c0022d57:	57                   	push   edi
c0022d58:	56                   	push   esi
c0022d59:	53                   	push   ebx
c0022d5a:	83 ec 0c             	sub    esp,0xc
c0022d5d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022d61:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022d65:	89 f5                	mov    ebp,esi
c0022d67:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0022d6d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022d71:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022d75:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022d79:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022d7d:	83 f9 01             	cmp    ecx,0x1
c0022d80:	75 5d                	jne    c0022ddf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0022d82:	0f b6 c8             	movzx  ecx,al
c0022d85:	0f b6 d2             	movzx  edx,dl
c0022d88:	c1 e1 10             	shl    ecx,0x10
c0022d8b:	c1 e2 0b             	shl    edx,0xb
c0022d8e:	89 f0                	mov    eax,esi
c0022d90:	25 fc 00 00 00       	and    eax,0xfc
c0022d95:	09 c1                	or     ecx,eax
c0022d97:	89 e8                	mov    eax,ebp
c0022d99:	0f b6 c0             	movzx  eax,al
c0022d9c:	c1 e0 08             	shl    eax,0x8
c0022d9f:	09 c1                	or     ecx,eax
c0022da1:	09 d1                	or     ecx,edx
c0022da3:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022da8:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022dae:	89 c8                	mov    eax,ecx
c0022db0:	ef                   	out    dx,eax
c0022db1:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022db6:	ed                   	in     eax,dx
c0022db7:	0f b7 db             	movzx  ebx,bx
c0022dba:	83 e6 02             	and    esi,0x2
c0022dbd:	74 0a                	je     c0022dc9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0022dbf:	0f b7 d0             	movzx  edx,ax
c0022dc2:	c1 e3 10             	shl    ebx,0x10
c0022dc5:	09 d3                	or     ebx,edx
c0022dc7:	eb 05                	jmp    c0022dce <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0022dc9:	66 31 c0             	xor    ax,ax
c0022dcc:	09 c3                	or     ebx,eax
c0022dce:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022dd3:	89 c8                	mov    eax,ecx
c0022dd5:	ef                   	out    dx,eax
c0022dd6:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022ddb:	89 d8                	mov    eax,ebx
c0022ddd:	eb 41                	jmp    c0022e20 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022ddf:	83 f9 02             	cmp    ecx,0x2
c0022de2:	75 45                	jne    c0022e29 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0022de4:	83 ec 0c             	sub    esp,0xc
c0022de7:	0f b6 d2             	movzx  edx,dl
c0022dea:	89 f1                	mov    ecx,esi
c0022dec:	0f b6 c0             	movzx  eax,al
c0022def:	0f b6 f1             	movzx  esi,cl
c0022df2:	89 e9                	mov    ecx,ebp
c0022df4:	56                   	push   esi
c0022df5:	0f b6 c9             	movzx  ecx,cl
c0022df8:	51                   	push   ecx
c0022df9:	52                   	push   edx
c0022dfa:	50                   	push   eax
c0022dfb:	57                   	push   edi
c0022dfc:	e8 ad fc ff ff       	call   c0022aae <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e01:	89 c2                	mov    edx,eax
c0022e03:	ed                   	in     eax,dx
c0022e04:	83 c4 20             	add    esp,0x20
c0022e07:	0f b7 db             	movzx  ebx,bx
c0022e0a:	f6 c2 02             	test   dl,0x2
c0022e0d:	74 0c                	je     c0022e1b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0022e0f:	0f b7 c8             	movzx  ecx,ax
c0022e12:	89 d8                	mov    eax,ebx
c0022e14:	c1 e0 10             	shl    eax,0x10
c0022e17:	09 c8                	or     eax,ecx
c0022e19:	eb 05                	jmp    c0022e20 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022e1b:	66 31 c0             	xor    ax,ax
c0022e1e:	09 d8                	or     eax,ebx
c0022e20:	ef                   	out    dx,eax
c0022e21:	83 c4 0c             	add    esp,0xc
c0022e24:	5b                   	pop    ebx
c0022e25:	5e                   	pop    esi
c0022e26:	5f                   	pop    edi
c0022e27:	5d                   	pop    ebp
c0022e28:	c3                   	ret    
c0022e29:	c7 44 24 20 60 cc 02 c0 	mov    DWORD PTR [esp+0x20],0xc002cc60
c0022e31:	83 c4 0c             	add    esp,0xc
c0022e34:	5b                   	pop    ebx
c0022e35:	5e                   	pop    esi
c0022e36:	5f                   	pop    edi
c0022e37:	5d                   	pop    ebp
c0022e38:	e9 22 75 ff ff       	jmp    c001a35f <Krnl::panic(char const*)>
c0022e3d:	90                   	nop

c0022e3e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0022e3e:	55                   	push   ebp
c0022e3f:	57                   	push   edi
c0022e40:	56                   	push   esi
c0022e41:	53                   	push   ebx
c0022e42:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022e48:	80 3d 30 09 03 c0 00 	cmp    BYTE PTR ds:0xc0030930,0x0
c0022e4f:	0f 85 84 00 00 00    	jne    c0022ed9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0022e55:	83 ec 0c             	sub    esp,0xc
c0022e58:	68 14 01 00 00       	push   0x114
c0022e5d:	e8 07 cb fe ff       	call   c000f969 <malloc>
c0022e62:	83 c4 0c             	add    esp,0xc
c0022e65:	89 c3                	mov    ebx,eax
c0022e67:	ff 35 30 fb 02 c0    	push   DWORD PTR ds:0xc002fb30
c0022e6d:	68 66 cc 02 c0       	push   0xc002cc66
c0022e72:	50                   	push   eax
c0022e73:	e8 a8 00 ff ff       	call   c0012f20 <File::File(char const*, Process*)>
c0022e78:	5a                   	pop    edx
c0022e79:	59                   	pop    ecx
c0022e7a:	6a 01                	push   0x1
c0022e7c:	53                   	push   ebx
c0022e7d:	e8 02 01 ff ff       	call   c0012f84 <File::open(FileOpenMode)>
c0022e82:	83 c4 0c             	add    esp,0xc
c0022e85:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0022e89:	50                   	push   eax
c0022e8a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022e8e:	50                   	push   eax
c0022e8f:	53                   	push   ebx
c0022e90:	e8 9b 03 ff ff       	call   c0013230 <File::stat(unsigned long long*, bool*)>
c0022e95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022e99:	40                   	inc    eax
c0022e9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0022e9d:	e8 c7 ca fe ff       	call   c000f969 <malloc>
c0022ea2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022ea6:	a3 2c 09 03 c0       	mov    ds:0xc003092c,eax
c0022eab:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0022eaf:	5e                   	pop    esi
c0022eb0:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022eb2:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0022eb6:	51                   	push   ecx
c0022eb7:	50                   	push   eax
c0022eb8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022ebc:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022ec0:	53                   	push   ebx
c0022ec1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022ec4:	83 c4 14             	add    esp,0x14
c0022ec7:	53                   	push   ebx
c0022ec8:	e8 15 01 ff ff       	call   c0012fe2 <File::close()>
c0022ecd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022ed1:	83 c4 10             	add    esp,0x10
c0022ed4:	a3 28 09 03 c0       	mov    ds:0xc0030928,eax
c0022ed9:	a1 28 09 03 c0       	mov    eax,ds:0xc0030928
c0022ede:	8b 15 2c 09 03 c0    	mov    edx,DWORD PTR ds:0xc003092c
c0022ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0022ee7:	31 ff                	xor    edi,edi
c0022ee9:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0022ef1:	31 f6                	xor    esi,esi
c0022ef3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0022ef8:	31 db                	xor    ebx,ebx
c0022efa:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0022f02:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0022f07:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0022f0e:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0022f12:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0022f19:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0022f1d:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022f20:	0f 8e 6b 01 00 00    	jle    c0023091 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0022f26:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022f29:	d4 40                	aam    0x40
c0022f2b:	d5 39                	aad    0x39
c0022f2d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022f31:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0022f35:	d4 40                	aam    0x40
c0022f37:	d5 39                	aad    0x39
c0022f39:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022f3d:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0022f41:	d4 40                	aam    0x40
c0022f43:	d5 39                	aad    0x39
c0022f45:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0022f49:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0022f4d:	d4 40                	aam    0x40
c0022f4f:	d5 39                	aad    0x39
c0022f51:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022f55:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0022f59:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022f5d:	3c 56                	cmp    al,0x56
c0022f5f:	74 45                	je     c0022fa6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0022f61:	d4 40                	aam    0x40
c0022f63:	d5 39                	aad    0x39
c0022f65:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022f68:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0022f6c:	0f b6 c9             	movzx  ecx,cl
c0022f6f:	c1 e1 04             	shl    ecx,0x4
c0022f72:	d4 40                	aam    0x40
c0022f74:	d5 39                	aad    0x39
c0022f76:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022f79:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0022f7d:	0f b6 db             	movzx  ebx,bl
c0022f80:	09 cb                	or     ebx,ecx
c0022f82:	c1 e3 04             	shl    ebx,0x4
c0022f85:	d4 40                	aam    0x40
c0022f87:	d5 39                	aad    0x39
c0022f89:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022f8c:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0022f90:	0f b6 c9             	movzx  ecx,cl
c0022f93:	09 cb                	or     ebx,ecx
c0022f95:	c1 e3 04             	shl    ebx,0x4
c0022f98:	89 d9                	mov    ecx,ebx
c0022f9a:	d4 40                	aam    0x40
c0022f9c:	d5 39                	aad    0x39
c0022f9e:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022fa1:	0f b6 db             	movzx  ebx,bl
c0022fa4:	09 cb                	or     ebx,ecx
c0022fa6:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0022faa:	80 f9 44             	cmp    cl,0x44
c0022fad:	74 47                	je     c0022ff6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0022faf:	88 c8                	mov    al,cl
c0022fb1:	d4 40                	aam    0x40
c0022fb3:	d5 39                	aad    0x39
c0022fb5:	83 e8 30             	sub    eax,0x30
c0022fb8:	0f b6 e8             	movzx  ebp,al
c0022fbb:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0022fbf:	c1 e5 04             	shl    ebp,0x4
c0022fc2:	d4 40                	aam    0x40
c0022fc4:	d5 39                	aad    0x39
c0022fc6:	83 e8 30             	sub    eax,0x30
c0022fc9:	0f b6 f0             	movzx  esi,al
c0022fcc:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0022fd0:	09 ee                	or     esi,ebp
c0022fd2:	c1 e6 04             	shl    esi,0x4
c0022fd5:	d4 40                	aam    0x40
c0022fd7:	d5 39                	aad    0x39
c0022fd9:	83 e8 30             	sub    eax,0x30
c0022fdc:	0f b6 e8             	movzx  ebp,al
c0022fdf:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0022fe3:	09 ee                	or     esi,ebp
c0022fe5:	c1 e6 04             	shl    esi,0x4
c0022fe8:	89 f5                	mov    ebp,esi
c0022fea:	d4 40                	aam    0x40
c0022fec:	d5 39                	aad    0x39
c0022fee:	83 e8 30             	sub    eax,0x30
c0022ff1:	0f b6 f0             	movzx  esi,al
c0022ff4:	09 ee                	or     esi,ebp
c0022ff6:	83 c7 10             	add    edi,0x10
c0022ff9:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0022ffd:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0023000:	3c 0a                	cmp    al,0xa
c0023002:	74 09                	je     c002300d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0023004:	45                   	inc    ebp
c0023005:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0023008:	75 16                	jne    c0023020 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c002300a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002300d:	3c 0a                	cmp    al,0xa
c002300f:	0f 94 c0             	sete   al
c0023012:	0f b6 c0             	movzx  eax,al
c0023015:	01 c7                	add    edi,eax
c0023017:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c002301c:	75 0c                	jne    c002302a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c002301e:	eb 15                	jmp    c0023035 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0023020:	47                   	inc    edi
c0023021:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0023024:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0023028:	eb d3                	jmp    c0022ffd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c002302a:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c002302f:	0f 85 e8 fe ff ff    	jne    c0022f1d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0023035:	80 f9 44             	cmp    cl,0x44
c0023038:	74 0b                	je     c0023045 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c002303a:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c002303f:	0f 85 d8 fe ff ff    	jne    c0022f1d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0023045:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0023049:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c002304d:	c1 e1 04             	shl    ecx,0x4
c0023050:	83 e8 30             	sub    eax,0x30
c0023053:	09 c8                	or     eax,ecx
c0023055:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0023059:	0f 85 be fe ff ff    	jne    c0022f1d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c002305f:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0023063:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023067:	c1 e1 04             	shl    ecx,0x4
c002306a:	83 e8 30             	sub    eax,0x30
c002306d:	09 c8                	or     eax,ecx
c002306f:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0023073:	0f 85 a4 fe ff ff    	jne    c0022f1d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0023079:	50                   	push   eax
c002307a:	50                   	push   eax
c002307b:	8d 44 24 28          	lea    eax,[esp+0x28]
c002307f:	50                   	push   eax
c0023080:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0023087:	e8 80 d7 fd ff       	call   c000080c <strcpy>
c002308c:	83 c4 10             	add    esp,0x10
c002308f:	eb 15                	jmp    c00230a6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0023091:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0023098:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c00230a3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00230a6:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00230ad:	81 c4 2c 01 00 00    	add    esp,0x12c
c00230b3:	5b                   	pop    ebx
c00230b4:	5e                   	pop    esi
c00230b5:	5f                   	pop    edi
c00230b6:	5d                   	pop    ebp
c00230b7:	c3                   	ret    

c00230b8 <PCI::checkBus(unsigned char)>:
c00230b8:	56                   	push   esi
c00230b9:	53                   	push   ebx
c00230ba:	31 db                	xor    ebx,ebx
c00230bc:	51                   	push   ecx
c00230bd:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00230c2:	52                   	push   edx
c00230c3:	53                   	push   ebx
c00230c4:	43                   	inc    ebx
c00230c5:	56                   	push   esi
c00230c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00230ca:	e8 37 03 00 00       	call   c0023406 <PCI::checkDevice(unsigned char, unsigned char)>
c00230cf:	83 c4 10             	add    esp,0x10
c00230d2:	83 fb 20             	cmp    ebx,0x20
c00230d5:	75 eb                	jne    c00230c2 <PCI::checkBus(unsigned char)+0xa>
c00230d7:	58                   	pop    eax
c00230d8:	5b                   	pop    ebx
c00230d9:	5e                   	pop    esi
c00230da:	c3                   	ret    
c00230db:	90                   	nop

c00230dc <PCI::foundDevice(PCIDeviceInfo)>:
c00230dc:	55                   	push   ebp
c00230dd:	57                   	push   edi
c00230de:	56                   	push   esi
c00230df:	53                   	push   ebx
c00230e0:	83 ec 1c             	sub    esp,0x1c
c00230e3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00230e7:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00230ed:	0f 84 52 01 00 00    	je     c0023245 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00230f3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00230f7:	66 81 f9 06 04       	cmp    cx,0x406
c00230fc:	75 2c                	jne    c002312a <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00230fe:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0023103:	50                   	push   eax
c0023104:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0023109:	50                   	push   eax
c002310a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c002310f:	50                   	push   eax
c0023110:	56                   	push   esi
c0023111:	e8 b4 fb ff ff       	call   c0022cca <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0023116:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002311a:	0f b6 c0             	movzx  eax,al
c002311d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0023121:	83 c4 2c             	add    esp,0x2c
c0023124:	5b                   	pop    ebx
c0023125:	5e                   	pop    esi
c0023126:	5f                   	pop    edi
c0023127:	5d                   	pop    ebp
c0023128:	eb 8e                	jmp    c00230b8 <PCI::checkBus(unsigned char)>
c002312a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002312e:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0023134:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023138:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c002313c:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0023140:	88 d3                	mov    bl,dl
c0023142:	85 c0                	test   eax,eax
c0023144:	74 33                	je     c0023179 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0023146:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0023149:	85 d2                	test   edx,edx
c002314b:	74 28                	je     c0023175 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002314d:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0023153:	31 ef                	xor    edi,ebp
c0023155:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c002315b:	75 18                	jne    c0023175 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002315d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023161:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0023167:	75 0c                	jne    c0023175 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023169:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c002316f:	0f 84 d0 00 00 00    	je     c0023245 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0023175:	8b 00                	mov    eax,DWORD PTR [eax]
c0023177:	eb c9                	jmp    c0023142 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0023179:	66 81 f9 01 06       	cmp    cx,0x601
c002317e:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0023182:	75 19                	jne    c002319d <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0023184:	83 ec 0c             	sub    esp,0xc
c0023187:	68 64 01 00 00       	push   0x164
c002318c:	e8 d8 c7 fe ff       	call   c000f969 <malloc>
c0023191:	89 c5                	mov    ebp,eax
c0023193:	89 04 24             	mov    DWORD PTR [esp],eax
c0023196:	e8 85 0e 00 00       	call   c0024020 <SATABus::SATABus()>
c002319b:	eb 1e                	jmp    c00231bb <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c002319d:	66 81 f9 01 01       	cmp    cx,0x101
c00231a2:	75 60                	jne    c0023204 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00231a4:	83 ec 0c             	sub    esp,0xc
c00231a7:	68 70 02 00 00       	push   0x270
c00231ac:	e8 b8 c7 fe ff       	call   c000f969 <malloc>
c00231b1:	89 c5                	mov    ebp,eax
c00231b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00231b6:	e8 0f 03 00 00       	call   c00234ca <IDE::IDE()>
c00231bb:	58                   	pop    eax
c00231bc:	5a                   	pop    edx
c00231bd:	55                   	push   ebp
c00231be:	56                   	push   esi
c00231bf:	e8 36 0c ff ff       	call   c0013dfa <Device::addChild(Device*)>
c00231c4:	83 ec 1c             	sub    esp,0x1c
c00231c7:	b9 09 00 00 00       	mov    ecx,0x9
c00231cc:	fc                   	cld    
c00231cd:	89 e7                	mov    edi,esp
c00231cf:	89 de                	mov    esi,ebx
c00231d1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00231d3:	55                   	push   ebp
c00231d4:	e8 33 0b ff ff       	call   c0013d0c <Device::preOpenPCI(PCIDeviceInfo)>
c00231d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00231dc:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00231e0:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00231e8:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00231f0:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00231f8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00231fb:	83 c4 4c             	add    esp,0x4c
c00231fe:	5b                   	pop    ebx
c00231ff:	5e                   	pop    esi
c0023200:	5f                   	pop    edi
c0023201:	5d                   	pop    ebp
c0023202:	ff e0                	jmp    eax
c0023204:	83 ec 0c             	sub    esp,0xc
c0023207:	68 58 01 00 00       	push   0x158
c002320c:	e8 58 c7 fe ff       	call   c000f969 <malloc>
c0023211:	89 c5                	mov    ebp,eax
c0023213:	58                   	pop    eax
c0023214:	5a                   	pop    edx
c0023215:	68 7f cc 02 c0       	push   0xc002cc7f
c002321a:	55                   	push   ebp
c002321b:	e8 e4 0e ff ff       	call   c0014104 <DriverlessDevice::DriverlessDevice(char const*)>
c0023220:	59                   	pop    ecx
c0023221:	5f                   	pop    edi
c0023222:	55                   	push   ebp
c0023223:	56                   	push   esi
c0023224:	e8 d1 0b ff ff       	call   c0013dfa <Device::addChild(Device*)>
c0023229:	b9 09 00 00 00       	mov    ecx,0x9
c002322e:	fc                   	cld    
c002322f:	89 df                	mov    edi,ebx
c0023231:	89 de                	mov    esi,ebx
c0023233:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023235:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0023239:	83 c4 2c             	add    esp,0x2c
c002323c:	5b                   	pop    ebx
c002323d:	5e                   	pop    esi
c002323e:	5f                   	pop    edi
c002323f:	5d                   	pop    ebp
c0023240:	e9 c7 0a ff ff       	jmp    c0013d0c <Device::preOpenPCI(PCIDeviceInfo)>
c0023245:	83 c4 1c             	add    esp,0x1c
c0023248:	5b                   	pop    ebx
c0023249:	5e                   	pop    esi
c002324a:	5f                   	pop    edi
c002324b:	5d                   	pop    ebp
c002324c:	c3                   	ret    
c002324d:	90                   	nop

c002324e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002324e:	55                   	push   ebp
c002324f:	57                   	push   edi
c0023250:	56                   	push   esi
c0023251:	53                   	push   ebx
c0023252:	83 ec 68             	sub    esp,0x68
c0023255:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0023259:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0023260:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023264:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c002326b:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0023270:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023274:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c002327b:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0023280:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0023284:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0023289:	6a 0c                	push   0xc
c002328b:	57                   	push   edi
c002328c:	53                   	push   ebx
c002328d:	56                   	push   esi
c002328e:	55                   	push   ebp
c002328f:	e8 88 f8 ff ff       	call   c0022b1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023294:	83 c4 20             	add    esp,0x20
c0023297:	57                   	push   edi
c0023298:	53                   	push   ebx
c0023299:	56                   	push   esi
c002329a:	55                   	push   ebp
c002329b:	e8 70 f9 ff ff       	call   c0022c10 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c00232a0:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c00232a5:	57                   	push   edi
c00232a6:	53                   	push   ebx
c00232a7:	56                   	push   esi
c00232a8:	55                   	push   ebp
c00232a9:	e8 f8 f9 ff ff       	call   c0022ca6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00232ae:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00232b2:	83 c4 14             	add    esp,0x14
c00232b5:	6a 3c                	push   0x3c
c00232b7:	57                   	push   edi
c00232b8:	53                   	push   ebx
c00232b9:	56                   	push   esi
c00232ba:	55                   	push   ebp
c00232bb:	e8 5c f8 ff ff       	call   c0022b1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00232c0:	0f b6 c4             	movzx  eax,ah
c00232c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00232c7:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00232cb:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c00232cf:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00232d4:	83 c4 20             	add    esp,0x20
c00232d7:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00232dd:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c00232e4:	74 7c                	je     c0023362 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c00232e6:	31 c0                	xor    eax,eax
c00232e8:	8b 15 08 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e608
c00232ee:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00232f4:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c00232fa:	7e 66                	jle    c0023362 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c00232fc:	8d 14 c2             	lea    edx,[edx+eax*8]
c00232ff:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0023306:	39 cb                	cmp    ebx,ecx
c0023308:	75 55                	jne    c002335f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c002330a:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0023311:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0023315:	75 48                	jne    c002335f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0023317:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002331b:	83 ec 0c             	sub    esp,0xc
c002331e:	68 99 cc 02 c0       	push   0xc002cc99
c0023323:	e8 99 f6 fe ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0023328:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002332c:	8b 15 08 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e608
c0023332:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023336:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c002333c:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0023344:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0023348:	52                   	push   edx
c0023349:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002334d:	53                   	push   ebx
c002334e:	68 be cc 02 c0       	push   0xc002ccbe
c0023353:	e8 69 f6 fe ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0023358:	83 c4 20             	add    esp,0x20
c002335b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002335f:	40                   	inc    eax
c0023360:	eb 86                	jmp    c00232e8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0023362:	31 d2                	xor    edx,edx
c0023364:	83 ec 0c             	sub    esp,0xc
c0023367:	57                   	push   edi
c0023368:	53                   	push   ebx
c0023369:	56                   	push   esi
c002336a:	52                   	push   edx
c002336b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002336f:	55                   	push   ebp
c0023370:	e8 7d f9 ff ff       	call   c0022cf2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023375:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0023379:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002337d:	42                   	inc    edx
c002337e:	83 c4 20             	add    esp,0x20
c0023381:	83 fa 06             	cmp    edx,0x6
c0023384:	75 de                	jne    c0023364 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0023386:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c002338b:	83 ec 0c             	sub    esp,0xc
c002338e:	86 e0                	xchg   al,ah
c0023390:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0023395:	6a 02                	push   0x2
c0023397:	57                   	push   edi
c0023398:	53                   	push   ebx
c0023399:	56                   	push   esi
c002339a:	55                   	push   ebp
c002339b:	e8 7c f7 ff ff       	call   c0022b1c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00233a0:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c00233a5:	83 c4 20             	add    esp,0x20
c00233a8:	57                   	push   edi
c00233a9:	53                   	push   ebx
c00233aa:	56                   	push   esi
c00233ab:	55                   	push   ebp
c00233ac:	e8 a9 f8 ff ff       	call   c0022c5a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c00233b1:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00233b5:	57                   	push   edi
c00233b6:	53                   	push   ebx
c00233b7:	56                   	push   esi
c00233b8:	55                   	push   ebp
c00233b9:	e8 06 f8 ff ff       	call   c0022bc4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00233be:	b9 09 00 00 00       	mov    ecx,0x9
c00233c3:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c00233c8:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c00233cc:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c00233d0:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c00233d4:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c00233d8:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00233dc:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c00233e0:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c00233e4:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c00233e8:	83 ec 0c             	sub    esp,0xc
c00233eb:	fc                   	cld    
c00233ec:	89 e7                	mov    edi,esp
c00233ee:	8d 74 24 58          	lea    esi,[esp+0x58]
c00233f2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00233f4:	55                   	push   ebp
c00233f5:	e8 e2 fc ff ff       	call   c00230dc <PCI::foundDevice(PCIDeviceInfo)>
c00233fa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0023400:	5b                   	pop    ebx
c0023401:	5e                   	pop    esi
c0023402:	5f                   	pop    edi
c0023403:	5d                   	pop    ebp
c0023404:	c3                   	ret    
c0023405:	90                   	nop

c0023406 <PCI::checkDevice(unsigned char, unsigned char)>:
c0023406:	55                   	push   ebp
c0023407:	57                   	push   edi
c0023408:	56                   	push   esi
c0023409:	53                   	push   ebx
c002340a:	83 ec 0c             	sub    esp,0xc
c002340d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0023411:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0023416:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002341b:	6a 00                	push   0x0
c002341d:	56                   	push   esi
c002341e:	57                   	push   edi
c002341f:	55                   	push   ebp
c0023420:	e8 9f f7 ff ff       	call   c0022bc4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023425:	6a 00                	push   0x0
c0023427:	56                   	push   esi
c0023428:	57                   	push   edi
c0023429:	55                   	push   ebp
c002342a:	e8 1f fe ff ff       	call   c002324e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002342f:	83 c4 20             	add    esp,0x20
c0023432:	6a 00                	push   0x0
c0023434:	56                   	push   esi
c0023435:	57                   	push   edi
c0023436:	55                   	push   ebp
c0023437:	e8 ac f7 ff ff       	call   c0022be8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002343c:	83 c4 10             	add    esp,0x10
c002343f:	84 c0                	test   al,al
c0023441:	79 27                	jns    c002346a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0023443:	bb 01 00 00 00       	mov    ebx,0x1
c0023448:	53                   	push   ebx
c0023449:	56                   	push   esi
c002344a:	57                   	push   edi
c002344b:	55                   	push   ebp
c002344c:	e8 73 f7 ff ff       	call   c0022bc4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023451:	83 c4 10             	add    esp,0x10
c0023454:	66 40                	inc    ax
c0023456:	74 0c                	je     c0023464 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0023458:	53                   	push   ebx
c0023459:	56                   	push   esi
c002345a:	57                   	push   edi
c002345b:	55                   	push   ebp
c002345c:	e8 ed fd ff ff       	call   c002324e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023461:	83 c4 10             	add    esp,0x10
c0023464:	43                   	inc    ebx
c0023465:	83 fb 08             	cmp    ebx,0x8
c0023468:	75 de                	jne    c0023448 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002346a:	83 c4 0c             	add    esp,0xc
c002346d:	5b                   	pop    ebx
c002346e:	5e                   	pop    esi
c002346f:	5f                   	pop    edi
c0023470:	5d                   	pop    ebp
c0023471:	c3                   	ret    

c0023472 <PCI::detect()>:
c0023472:	56                   	push   esi
c0023473:	53                   	push   ebx
c0023474:	53                   	push   ebx
c0023475:	31 db                	xor    ebx,ebx
c0023477:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002347b:	6a 00                	push   0x0
c002347d:	6a 00                	push   0x0
c002347f:	6a 00                	push   0x0
c0023481:	56                   	push   esi
c0023482:	e8 61 f7 ff ff       	call   c0022be8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023487:	83 c4 10             	add    esp,0x10
c002348a:	a8 80                	test   al,0x80
c002348c:	75 21                	jne    c00234af <PCI::detect()+0x3d>
c002348e:	51                   	push   ecx
c002348f:	51                   	push   ecx
c0023490:	6a 00                	push   0x0
c0023492:	56                   	push   esi
c0023493:	e8 20 fc ff ff       	call   c00230b8 <PCI::checkBus(unsigned char)>
c0023498:	83 c4 10             	add    esp,0x10
c002349b:	eb 24                	jmp    c00234c1 <PCI::detect()+0x4f>
c002349d:	52                   	push   edx
c002349e:	52                   	push   edx
c002349f:	53                   	push   ebx
c00234a0:	43                   	inc    ebx
c00234a1:	56                   	push   esi
c00234a2:	e8 11 fc ff ff       	call   c00230b8 <PCI::checkBus(unsigned char)>
c00234a7:	83 c4 10             	add    esp,0x10
c00234aa:	83 fb 08             	cmp    ebx,0x8
c00234ad:	74 12                	je     c00234c1 <PCI::detect()+0x4f>
c00234af:	53                   	push   ebx
c00234b0:	6a 00                	push   0x0
c00234b2:	6a 00                	push   0x0
c00234b4:	56                   	push   esi
c00234b5:	e8 0a f7 ff ff       	call   c0022bc4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00234ba:	83 c4 10             	add    esp,0x10
c00234bd:	66 40                	inc    ax
c00234bf:	74 dc                	je     c002349d <PCI::detect()+0x2b>
c00234c1:	58                   	pop    eax
c00234c2:	5b                   	pop    ebx
c00234c3:	5e                   	pop    esi
c00234c4:	c3                   	ret    
c00234c5:	90                   	nop

c00234c6 <IDE::close(int, int, void*)>:
c00234c6:	83 c8 ff             	or     eax,0xffffffff
c00234c9:	c3                   	ret    

c00234ca <IDE::IDE()>:
c00234ca:	83 ec 0c             	sub    esp,0xc
c00234cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234d1:	83 ec 08             	sub    esp,0x8
c00234d4:	68 08 cd 02 c0       	push   0xc002cd08
c00234d9:	50                   	push   eax
c00234da:	e8 c9 0c ff ff       	call   c00141a8 <HardDiskController::HardDiskController(char const*)>
c00234df:	83 c4 10             	add    esp,0x10
c00234e2:	ba 98 cd 02 c0       	mov    edx,0xc002cd98
c00234e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234eb:	89 10                	mov    DWORD PTR [eax],edx
c00234ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234f1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00234f8:	90                   	nop
c00234f9:	83 c4 0c             	add    esp,0xc
c00234fc:	c3                   	ret    
c00234fd:	90                   	nop

c00234fe <IDE::prepareInterrupt(unsigned char)>:
c00234fe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023503:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023507:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002350f:	c3                   	ret    

c0023510 <selectDrive(unsigned char, unsigned char)>:
c0023510:	c3                   	ret    
c0023511:	90                   	nop

c0023512 <IDE::getBase(unsigned char)>:
c0023512:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023517:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002351b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023523:	c3                   	ret    

c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023524:	55                   	push   ebp
c0023525:	57                   	push   edi
c0023526:	56                   	push   esi
c0023527:	53                   	push   ebx
c0023528:	83 ec 1c             	sub    esp,0x1c
c002352b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002352f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023533:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023536:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002353a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002353e:	80 f9 03             	cmp    cl,0x3
c0023541:	77 51                	ja     c0023594 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023543:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023547:	0f b6 f2             	movzx  esi,dl
c002354a:	0f b6 db             	movzx  ebx,bl
c002354d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023550:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023554:	83 ca 80             	or     edx,0xffffff80
c0023557:	0f b6 d2             	movzx  edx,dl
c002355a:	52                   	push   edx
c002355b:	6a 0c                	push   0xc
c002355d:	56                   	push   esi
c002355e:	57                   	push   edi
c002355f:	e8 c0 ff ff ff       	call   c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023564:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023569:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002356d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023571:	ee                   	out    dx,al
c0023572:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023577:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002357b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002357f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023583:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002358b:	83 c4 2c             	add    esp,0x2c
c002358e:	5b                   	pop    ebx
c002358f:	5e                   	pop    esi
c0023590:	5f                   	pop    edi
c0023591:	5d                   	pop    ebp
c0023592:	eb 90                	jmp    c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023594:	80 fb 07             	cmp    bl,0x7
c0023597:	77 12                	ja     c00235ab <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023599:	0f b6 d2             	movzx  edx,dl
c002359c:	0f b6 db             	movzx  ebx,bl
c002359f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00235a7:	89 da                	mov    edx,ebx
c00235a9:	eb 2f                	jmp    c00235da <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00235ab:	80 fb 0d             	cmp    bl,0xd
c00235ae:	77 13                	ja     c00235c3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00235b0:	0f b6 d2             	movzx  edx,dl
c00235b3:	0f b6 db             	movzx  ebx,bl
c00235b6:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00235bd:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00235c1:	eb 17                	jmp    c00235da <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00235c3:	80 fb 15             	cmp    bl,0x15
c00235c6:	77 13                	ja     c00235db <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00235c8:	0f b6 d2             	movzx  edx,dl
c00235cb:	0f b6 db             	movzx  ebx,bl
c00235ce:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00235d6:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00235da:	ee                   	out    dx,al
c00235db:	83 c4 1c             	add    esp,0x1c
c00235de:	5b                   	pop    ebx
c00235df:	5e                   	pop    esi
c00235e0:	5f                   	pop    edi
c00235e1:	5d                   	pop    ebp
c00235e2:	c3                   	ret    
c00235e3:	90                   	nop

c00235e4 <IDE::read(unsigned char, unsigned char)>:
c00235e4:	55                   	push   ebp
c00235e5:	57                   	push   edi
c00235e6:	56                   	push   esi
c00235e7:	53                   	push   ebx
c00235e8:	83 ec 1c             	sub    esp,0x1c
c00235eb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00235ef:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00235f3:	8d 43 f8             	lea    eax,[ebx-0x8]
c00235f6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00235fa:	3c 03                	cmp    al,0x3
c00235fc:	77 43                	ja     c0023641 <IDE::read(unsigned char, unsigned char)+0x5d>
c00235fe:	0f b6 f2             	movzx  esi,dl
c0023601:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023604:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023608:	83 c8 80             	or     eax,0xffffff80
c002360b:	0f b6 c0             	movzx  eax,al
c002360e:	50                   	push   eax
c002360f:	6a 0c                	push   0xc
c0023611:	56                   	push   esi
c0023612:	57                   	push   edi
c0023613:	e8 0c ff ff ff       	call   c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023618:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002361d:	0f b6 c3             	movzx  eax,bl
c0023620:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023624:	ec                   	in     al,dx
c0023625:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023629:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002362e:	52                   	push   edx
c002362f:	6a 0c                	push   0xc
c0023631:	56                   	push   esi
c0023632:	57                   	push   edi
c0023633:	e8 ec fe ff ff       	call   c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023638:	83 c4 20             	add    esp,0x20
c002363b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002363f:	eb 49                	jmp    c002368a <IDE::read(unsigned char, unsigned char)+0xa6>
c0023641:	80 fb 07             	cmp    bl,0x7
c0023644:	77 12                	ja     c0023658 <IDE::read(unsigned char, unsigned char)+0x74>
c0023646:	0f b6 d2             	movzx  edx,dl
c0023649:	0f b6 c3             	movzx  eax,bl
c002364c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023654:	89 c2                	mov    edx,eax
c0023656:	eb 31                	jmp    c0023689 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023658:	80 fb 0d             	cmp    bl,0xd
c002365b:	77 13                	ja     c0023670 <IDE::read(unsigned char, unsigned char)+0x8c>
c002365d:	0f b6 d2             	movzx  edx,dl
c0023660:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023667:	0f b6 d3             	movzx  edx,bl
c002366a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002366e:	eb 19                	jmp    c0023689 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023670:	31 c0                	xor    eax,eax
c0023672:	80 fb 15             	cmp    bl,0x15
c0023675:	77 13                	ja     c002368a <IDE::read(unsigned char, unsigned char)+0xa6>
c0023677:	0f b6 d2             	movzx  edx,dl
c002367a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023682:	0f b6 d3             	movzx  edx,bl
c0023685:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023689:	ec                   	in     al,dx
c002368a:	83 c4 1c             	add    esp,0x1c
c002368d:	5b                   	pop    ebx
c002368e:	5e                   	pop    esi
c002368f:	5f                   	pop    edi
c0023690:	5d                   	pop    ebp
c0023691:	c3                   	ret    

c0023692 <IDE::waitInterrupt(unsigned char)>:
c0023692:	55                   	push   ebp
c0023693:	57                   	push   edi
c0023694:	56                   	push   esi
c0023695:	53                   	push   ebx
c0023696:	31 db                	xor    ebx,ebx
c0023698:	83 ec 0c             	sub    esp,0xc
c002369b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002369f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00236a4:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00236ac:	89 e8                	mov    eax,ebp
c00236ae:	84 c0                	test   al,al
c00236b0:	75 34                	jne    c00236e6 <IDE::waitInterrupt(unsigned char)+0x54>
c00236b2:	52                   	push   edx
c00236b3:	6a 0c                	push   0xc
c00236b5:	56                   	push   esi
c00236b6:	57                   	push   edi
c00236b7:	e8 28 ff ff ff       	call   c00235e4 <IDE::read(unsigned char, unsigned char)>
c00236bc:	83 c4 10             	add    esp,0x10
c00236bf:	a8 01                	test   al,0x1
c00236c1:	75 2b                	jne    c00236ee <IDE::waitInterrupt(unsigned char)+0x5c>
c00236c3:	f6 c3 04             	test   bl,0x4
c00236c6:	75 16                	jne    c00236de <IDE::waitInterrupt(unsigned char)+0x4c>
c00236c8:	83 fb 32             	cmp    ebx,0x32
c00236cb:	7e 11                	jle    c00236de <IDE::waitInterrupt(unsigned char)+0x4c>
c00236cd:	50                   	push   eax
c00236ce:	50                   	push   eax
c00236cf:	6a 00                	push   0x0
c00236d1:	68 80 96 98 00       	push   0x989680
c00236d6:	e8 f0 aa ff ff       	call   c001e1cb <nanoSleep(unsigned long long)>
c00236db:	83 c4 10             	add    esp,0x10
c00236de:	83 fb 3c             	cmp    ebx,0x3c
c00236e1:	74 0b                	je     c00236ee <IDE::waitInterrupt(unsigned char)+0x5c>
c00236e3:	43                   	inc    ebx
c00236e4:	eb be                	jmp    c00236a4 <IDE::waitInterrupt(unsigned char)+0x12>
c00236e6:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00236ee:	83 c4 0c             	add    esp,0xc
c00236f1:	89 e8                	mov    eax,ebp
c00236f3:	5b                   	pop    ebx
c00236f4:	5e                   	pop    esi
c00236f5:	5f                   	pop    edi
c00236f6:	5d                   	pop    ebp
c00236f7:	c3                   	ret    

c00236f8 <ideChannel0IRQHandler(regs*, void*)>:
c00236f8:	83 ec 10             	sub    esp,0x10
c00236fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00236ff:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023706:	6a 07                	push   0x7
c0023708:	6a 00                	push   0x0
c002370a:	50                   	push   eax
c002370b:	e8 d4 fe ff ff       	call   c00235e4 <IDE::read(unsigned char, unsigned char)>
c0023710:	83 c4 1c             	add    esp,0x1c
c0023713:	c3                   	ret    

c0023714 <ideChannel1IRQHandler(regs*, void*)>:
c0023714:	83 ec 10             	sub    esp,0x10
c0023717:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002371b:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023722:	6a 07                	push   0x7
c0023724:	6a 01                	push   0x1
c0023726:	50                   	push   eax
c0023727:	e8 b8 fe ff ff       	call   c00235e4 <IDE::read(unsigned char, unsigned char)>
c002372c:	83 c4 1c             	add    esp,0x1c
c002372f:	c3                   	ret    

c0023730 <IDE::enableIRQs(unsigned char, bool)>:
c0023730:	57                   	push   edi
c0023731:	56                   	push   esi
c0023732:	be 04 00 00 00       	mov    esi,0x4
c0023737:	53                   	push   ebx
c0023738:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002373d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023741:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023746:	0f 94 c0             	sete   al
c0023749:	d1 e0                	shl    eax,1
c002374b:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023752:	0f b6 c0             	movzx  eax,al
c0023755:	50                   	push   eax
c0023756:	6a 0c                	push   0xc
c0023758:	57                   	push   edi
c0023759:	53                   	push   ebx
c002375a:	e8 c5 fd ff ff       	call   c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002375f:	83 c4 10             	add    esp,0x10
c0023762:	50                   	push   eax
c0023763:	6a 0c                	push   0xc
c0023765:	57                   	push   edi
c0023766:	53                   	push   ebx
c0023767:	e8 78 fe ff ff       	call   c00235e4 <IDE::read(unsigned char, unsigned char)>
c002376c:	83 c4 10             	add    esp,0x10
c002376f:	4e                   	dec    esi
c0023770:	75 f0                	jne    c0023762 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023772:	5b                   	pop    ebx
c0023773:	5e                   	pop    esi
c0023774:	5f                   	pop    edi
c0023775:	c3                   	ret    

c0023776 <IDE::open(int, int, void*)>:
c0023776:	55                   	push   ebp
c0023777:	57                   	push   edi
c0023778:	56                   	push   esi
c0023779:	53                   	push   ebx
c002377a:	83 ec 1c             	sub    esp,0x1c
c002377d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023781:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002378a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023793:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002379a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00237a1:	0f 85 b0 02 00 00    	jne    c0023a57 <IDE::open(int, int, void*)+0x2e1>
c00237a7:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00237ad:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00237b1:	83 e0 7f             	and    eax,0x7f
c00237b4:	3c 05                	cmp    al,0x5
c00237b6:	74 04                	je     c00237bc <IDE::open(int, int, void*)+0x46>
c00237b8:	3c 0f                	cmp    al,0xf
c00237ba:	75 32                	jne    c00237ee <IDE::open(int, int, void*)+0x78>
c00237bc:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00237c2:	83 e0 fc             	and    eax,0xfffffffc
c00237c5:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00237cc:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00237d2:	83 e0 fc             	and    eax,0xfffffffc
c00237d5:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00237dc:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00237e2:	83 e0 fc             	and    eax,0xfffffffc
c00237e5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00237ec:	eb 14                	jmp    c0023802 <IDE::open(int, int, void*)+0x8c>
c00237ee:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00237f8:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023802:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023809:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023810:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023814:	89 c6                	mov    esi,eax
c0023816:	bf f8 0c 00 00       	mov    edi,0xcf8
c002381b:	c1 e6 10             	shl    esi,0x10
c002381e:	89 e8                	mov    eax,ebp
c0023820:	89 fa                	mov    edx,edi
c0023822:	c1 e0 0b             	shl    eax,0xb
c0023825:	09 f0                	or     eax,esi
c0023827:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002382e:	c1 e6 08             	shl    esi,0x8
c0023831:	09 c6                	or     esi,eax
c0023833:	89 f0                	mov    eax,esi
c0023835:	0d 08 00 00 80       	or     eax,0x80000008
c002383a:	ef                   	out    dx,eax
c002383b:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023840:	89 ca                	mov    edx,ecx
c0023842:	ed                   	in     eax,dx
c0023843:	c1 e8 10             	shr    eax,0x10
c0023846:	3d ff ff 00 00       	cmp    eax,0xffff
c002384b:	0f 84 f5 00 00 00    	je     c0023946 <IDE::open(int, int, void*)+0x1d0>
c0023851:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023857:	89 fa                	mov    edx,edi
c0023859:	89 f0                	mov    eax,esi
c002385b:	ef                   	out    dx,eax
c002385c:	b0 fe                	mov    al,0xfe
c002385e:	89 ca                	mov    edx,ecx
c0023860:	ee                   	out    dx,al
c0023861:	89 f0                	mov    eax,esi
c0023863:	89 fa                	mov    edx,edi
c0023865:	ef                   	out    dx,eax
c0023866:	89 ca                	mov    edx,ecx
c0023868:	ed                   	in     eax,dx
c0023869:	3c fe                	cmp    al,0xfe
c002386b:	0f 85 a9 00 00 00    	jne    c002391a <IDE::open(int, int, void*)+0x1a4>
c0023871:	8b 15 08 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e608
c0023877:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c002387e:	74 33                	je     c00238b3 <IDE::open(int, int, void*)+0x13d>
c0023880:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023886:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002388a:	40                   	inc    eax
c002388b:	83 ec 0c             	sub    esp,0xc
c002388e:	0f b6 c0             	movzx  eax,al
c0023891:	50                   	push   eax
c0023892:	55                   	push   ebp
c0023893:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023897:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002389d:	51                   	push   ecx
c002389e:	e8 e5 46 ff ff       	call   c0017f88 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00238a3:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00238a8:	83 c4 1c             	add    esp,0x1c
c00238ab:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00238b1:	eb 0a                	jmp    c00238bd <IDE::open(int, int, void*)+0x147>
c00238b3:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00238bd:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00238c4:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00238cb:	c1 e1 10             	shl    ecx,0x10
c00238ce:	c1 e0 08             	shl    eax,0x8
c00238d1:	bf f8 0c 00 00       	mov    edi,0xcf8
c00238d6:	09 c1                	or     ecx,eax
c00238d8:	89 fa                	mov    edx,edi
c00238da:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00238e1:	c1 e0 0b             	shl    eax,0xb
c00238e4:	09 c1                	or     ecx,eax
c00238e6:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00238ec:	89 c8                	mov    eax,ecx
c00238ee:	ef                   	out    dx,eax
c00238ef:	be fc 0c 00 00       	mov    esi,0xcfc
c00238f4:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00238fa:	89 f2                	mov    edx,esi
c00238fc:	ee                   	out    dx,al
c00238fd:	89 c8                	mov    eax,ecx
c00238ff:	89 fa                	mov    edx,edi
c0023901:	ef                   	out    dx,eax
c0023902:	89 f2                	mov    edx,esi
c0023904:	ed                   	in     eax,dx
c0023905:	0f b6 c0             	movzx  eax,al
c0023908:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002390e:	74 46                	je     c0023956 <IDE::open(int, int, void*)+0x1e0>
c0023910:	83 ec 0c             	sub    esp,0xc
c0023913:	68 20 cd 02 c0       	push   0xc002cd20
c0023918:	eb 34                	jmp    c002394e <IDE::open(int, int, void*)+0x1d8>
c002391a:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023923:	75 17                	jne    c002393c <IDE::open(int, int, void*)+0x1c6>
c0023925:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c002392a:	74 07                	je     c0023933 <IDE::open(int, int, void*)+0x1bd>
c002392c:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023931:	75 09                	jne    c002393c <IDE::open(int, int, void*)+0x1c6>
c0023933:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002393a:	eb 1a                	jmp    c0023956 <IDE::open(int, int, void*)+0x1e0>
c002393c:	83 ec 0c             	sub    esp,0xc
c002393f:	68 28 cd 02 c0       	push   0xc002cd28
c0023944:	eb 08                	jmp    c002394e <IDE::open(int, int, void*)+0x1d8>
c0023946:	83 ec 0c             	sub    esp,0xc
c0023949:	68 59 cd 02 c0       	push   0xc002cd59
c002394e:	e8 0c 6a ff ff       	call   c001a35f <Krnl::panic(char const*)>
c0023953:	83 c4 10             	add    esp,0x10
c0023956:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002395d:	79 1a                	jns    c0023979 <IDE::open(int, int, void*)+0x203>
c002395f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023965:	83 e0 fc             	and    eax,0xfffffffc
c0023968:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002396f:	83 c0 08             	add    eax,0x8
c0023972:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023979:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002397f:	89 c2                	mov    edx,eax
c0023981:	83 e2 0f             	and    edx,0xf
c0023984:	66 83 fa 08          	cmp    dx,0x8
c0023988:	75 0a                	jne    c0023994 <IDE::open(int, int, void*)+0x21e>
c002398a:	83 e8 02             	sub    eax,0x2
c002398d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023994:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002399a:	89 c2                	mov    edx,eax
c002399c:	83 e2 0f             	and    edx,0xf
c002399f:	66 83 fa 08          	cmp    dx,0x8
c00239a3:	75 0a                	jne    c00239af <IDE::open(int, int, void*)+0x239>
c00239a5:	83 e8 02             	sub    eax,0x2
c00239a8:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00239af:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00239b6:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00239bd:	89 d0                	mov    eax,edx
c00239bf:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00239c2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00239c6:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00239ca:	8d 4a 01             	lea    ecx,[edx+0x1]
c00239cd:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00239d2:	0f b6 c9             	movzx  ecx,cl
c00239d5:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00239dc:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00239df:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00239e3:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00239e7:	8d 50 02             	lea    edx,[eax+0x2]
c00239ea:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00239ef:	0f b6 d2             	movzx  edx,dl
c00239f2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00239f8:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00239fb:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00239ff:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023a03:	8d 48 03             	lea    ecx,[eax+0x3]
c0023a06:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023a0b:	0f b6 c9             	movzx  ecx,cl
c0023a0e:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023a14:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023a17:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023a1b:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023a1f:	8d 50 04             	lea    edx,[eax+0x4]
c0023a22:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023a28:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023a2d:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023a34:	66 85 f6             	test   si,si
c0023a37:	74 5b                	je     c0023a94 <IDE::open(int, int, void*)+0x31e>
c0023a39:	0f b6 d2             	movzx  edx,dl
c0023a3c:	83 c0 05             	add    eax,0x5
c0023a3f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023a42:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023a46:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023a4a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023a50:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023a55:	eb 3d                	jmp    c0023a94 <IDE::open(int, int, void*)+0x31e>
c0023a57:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0023a5d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023a64:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023a6b:	66 05 06 02          	add    ax,0x206
c0023a6f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023a76:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0023a7d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023a84:	66 05 06 02          	add    ax,0x206
c0023a88:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023a8f:	e9 e5 fe ff ff       	jmp    c0023979 <IDE::open(int, int, void*)+0x203>
c0023a94:	50                   	push   eax
c0023a95:	50                   	push   eax
c0023a96:	6a 00                	push   0x0
c0023a98:	53                   	push   ebx
c0023a99:	e8 60 fa ff ff       	call   c00234fe <IDE::prepareInterrupt(unsigned char)>
c0023a9e:	5a                   	pop    edx
c0023a9f:	59                   	pop    ecx
c0023aa0:	6a 01                	push   0x1
c0023aa2:	53                   	push   ebx
c0023aa3:	e8 56 fa ff ff       	call   c00234fe <IDE::prepareInterrupt(unsigned char)>
c0023aa8:	83 c4 0c             	add    esp,0xc
c0023aab:	6a 00                	push   0x0
c0023aad:	6a 00                	push   0x0
c0023aaf:	53                   	push   ebx
c0023ab0:	e8 7b fc ff ff       	call   c0023730 <IDE::enableIRQs(unsigned char, bool)>
c0023ab5:	83 c4 0c             	add    esp,0xc
c0023ab8:	6a 00                	push   0x0
c0023aba:	6a 01                	push   0x1
c0023abc:	53                   	push   ebx
c0023abd:	e8 6e fc ff ff       	call   c0023730 <IDE::enableIRQs(unsigned char, bool)>
c0023ac2:	83 c4 10             	add    esp,0x10
c0023ac5:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023acc:	74 34                	je     c0023b02 <IDE::open(int, int, void*)+0x38c>
c0023ace:	83 ec 0c             	sub    esp,0xc
c0023ad1:	53                   	push   ebx
c0023ad2:	6a 01                	push   0x1
c0023ad4:	68 f8 36 02 c0       	push   0xc00236f8
c0023ad9:	6a 0e                	push   0xe
c0023adb:	53                   	push   ebx
c0023adc:	e8 91 02 ff ff       	call   c0013d72 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023ae1:	83 c4 14             	add    esp,0x14
c0023ae4:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023aea:	53                   	push   ebx
c0023aeb:	6a 01                	push   0x1
c0023aed:	68 14 37 02 c0       	push   0xc0023714
c0023af2:	6a 0f                	push   0xf
c0023af4:	53                   	push   ebx
c0023af5:	e8 78 02 ff ff       	call   c0013d72 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023afa:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023b00:	eb 38                	jmp    c0023b3a <IDE::open(int, int, void*)+0x3c4>
c0023b02:	83 ec 0c             	sub    esp,0xc
c0023b05:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023b0f:	53                   	push   ebx
c0023b10:	6a 00                	push   0x0
c0023b12:	68 f8 36 02 c0       	push   0xc00236f8
c0023b17:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023b1d:	53                   	push   ebx
c0023b1e:	e8 4f 02 ff ff       	call   c0013d72 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023b23:	83 c4 14             	add    esp,0x14
c0023b26:	53                   	push   ebx
c0023b27:	6a 00                	push   0x0
c0023b29:	68 14 37 02 c0       	push   0xc0023714
c0023b2e:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023b34:	53                   	push   ebx
c0023b35:	e8 38 02 ff ff       	call   c0013d72 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023b3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023b3c:	83 c4 20             	add    esp,0x20
c0023b3f:	83 ec 0c             	sub    esp,0xc
c0023b42:	53                   	push   ebx
c0023b43:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023b46:	83 c4 0c             	add    esp,0xc
c0023b49:	6a 07                	push   0x7
c0023b4b:	6a 00                	push   0x0
c0023b4d:	53                   	push   ebx
c0023b4e:	e8 91 fa ff ff       	call   c00235e4 <IDE::read(unsigned char, unsigned char)>
c0023b53:	83 c4 0c             	add    esp,0xc
c0023b56:	6a 07                	push   0x7
c0023b58:	6a 01                	push   0x1
c0023b5a:	53                   	push   ebx
c0023b5b:	e8 84 fa ff ff       	call   c00235e4 <IDE::read(unsigned char, unsigned char)>
c0023b60:	83 c4 0c             	add    esp,0xc
c0023b63:	6a 01                	push   0x1
c0023b65:	6a 00                	push   0x0
c0023b67:	53                   	push   ebx
c0023b68:	e8 c3 fb ff ff       	call   c0023730 <IDE::enableIRQs(unsigned char, bool)>
c0023b6d:	83 c4 0c             	add    esp,0xc
c0023b70:	6a 01                	push   0x1
c0023b72:	6a 01                	push   0x1
c0023b74:	53                   	push   ebx
c0023b75:	e8 b6 fb ff ff       	call   c0023730 <IDE::enableIRQs(unsigned char, bool)>
c0023b7a:	83 c4 2c             	add    esp,0x2c
c0023b7d:	31 c0                	xor    eax,eax
c0023b7f:	5b                   	pop    ebx
c0023b80:	5e                   	pop    esi
c0023b81:	5f                   	pop    edi
c0023b82:	5d                   	pop    ebp
c0023b83:	c3                   	ret    

c0023b84 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023b84:	55                   	push   ebp
c0023b85:	57                   	push   edi
c0023b86:	56                   	push   esi
c0023b87:	53                   	push   ebx
c0023b88:	83 ec 1c             	sub    esp,0x1c
c0023b8b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023b8f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023b93:	8d 50 f8             	lea    edx,[eax-0x8]
c0023b96:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023b9a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023b9e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023ba2:	80 fa 03             	cmp    dl,0x3
c0023ba5:	77 5d                	ja     c0023c04 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023ba7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023bab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023baf:	0f b6 db             	movzx  ebx,bl
c0023bb2:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023bb5:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023bb9:	83 ca 80             	or     edx,0xffffff80
c0023bbc:	0f b6 d2             	movzx  edx,dl
c0023bbf:	52                   	push   edx
c0023bc0:	6a 0c                	push   0xc
c0023bc2:	53                   	push   ebx
c0023bc3:	56                   	push   esi
c0023bc4:	e8 5b f9 ff ff       	call   c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023bc9:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023bce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023bd2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023bd6:	0f b6 c0             	movzx  eax,al
c0023bd9:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023bdd:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023bdf:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023be4:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023be8:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023bec:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023bf0:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023bf8:	83 c4 2c             	add    esp,0x2c
c0023bfb:	5b                   	pop    ebx
c0023bfc:	5e                   	pop    esi
c0023bfd:	5f                   	pop    edi
c0023bfe:	5d                   	pop    ebp
c0023bff:	e9 20 f9 ff ff       	jmp    c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023c04:	3c 07                	cmp    al,0x7
c0023c06:	77 10                	ja     c0023c18 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023c08:	0f b6 db             	movzx  ebx,bl
c0023c0b:	0f b6 d0             	movzx  edx,al
c0023c0e:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023c16:	eb 2d                	jmp    c0023c45 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023c18:	3c 0d                	cmp    al,0xd
c0023c1a:	77 13                	ja     c0023c2f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023c1c:	0f b6 db             	movzx  ebx,bl
c0023c1f:	0f b6 c0             	movzx  eax,al
c0023c22:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023c29:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023c2d:	eb 16                	jmp    c0023c45 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023c2f:	3c 15                	cmp    al,0x15
c0023c31:	77 14                	ja     c0023c47 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023c33:	0f b6 db             	movzx  ebx,bl
c0023c36:	0f b6 c0             	movzx  eax,al
c0023c39:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023c41:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023c45:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023c47:	83 c4 1c             	add    esp,0x1c
c0023c4a:	5b                   	pop    ebx
c0023c4b:	5e                   	pop    esi
c0023c4c:	5f                   	pop    edi
c0023c4d:	5d                   	pop    ebp
c0023c4e:	c3                   	ret    
c0023c4f:	90                   	nop

c0023c50 <IDE::detect()>:
c0023c50:	55                   	push   ebp
c0023c51:	57                   	push   edi
c0023c52:	56                   	push   esi
c0023c53:	53                   	push   ebx
c0023c54:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023c5a:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023c61:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023c68:	0f 85 9d 02 00 00    	jne    c0023f0b <IDE::detect()+0x2bb>
c0023c6e:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023c75:	31 f6                	xor    esi,esi
c0023c77:	31 ed                	xor    ebp,ebp
c0023c79:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023c81:	89 e8                	mov    eax,ebp
c0023c83:	c1 e0 06             	shl    eax,0x6
c0023c86:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023c8e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023c92:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023c96:	c1 e0 04             	shl    eax,0x4
c0023c99:	83 c8 a0             	or     eax,0xffffffa0
c0023c9c:	0f b6 c0             	movzx  eax,al
c0023c9f:	50                   	push   eax
c0023ca0:	6a 06                	push   0x6
c0023ca2:	56                   	push   esi
c0023ca3:	53                   	push   ebx
c0023ca4:	e8 7b f8 ff ff       	call   c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ca9:	83 c4 0c             	add    esp,0xc
c0023cac:	6a 0c                	push   0xc
c0023cae:	56                   	push   esi
c0023caf:	53                   	push   ebx
c0023cb0:	e8 2f f9 ff ff       	call   c00235e4 <IDE::read(unsigned char, unsigned char)>
c0023cb5:	83 c4 0c             	add    esp,0xc
c0023cb8:	6a 0c                	push   0xc
c0023cba:	56                   	push   esi
c0023cbb:	53                   	push   ebx
c0023cbc:	e8 23 f9 ff ff       	call   c00235e4 <IDE::read(unsigned char, unsigned char)>
c0023cc1:	83 c4 0c             	add    esp,0xc
c0023cc4:	6a 0c                	push   0xc
c0023cc6:	56                   	push   esi
c0023cc7:	53                   	push   ebx
c0023cc8:	e8 17 f9 ff ff       	call   c00235e4 <IDE::read(unsigned char, unsigned char)>
c0023ccd:	83 c4 0c             	add    esp,0xc
c0023cd0:	6a 0c                	push   0xc
c0023cd2:	56                   	push   esi
c0023cd3:	53                   	push   ebx
c0023cd4:	e8 0b f9 ff ff       	call   c00235e4 <IDE::read(unsigned char, unsigned char)>
c0023cd9:	68 ec 00 00 00       	push   0xec
c0023cde:	6a 07                	push   0x7
c0023ce0:	56                   	push   esi
c0023ce1:	53                   	push   ebx
c0023ce2:	e8 3d f8 ff ff       	call   c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ce7:	83 c4 1c             	add    esp,0x1c
c0023cea:	6a 0c                	push   0xc
c0023cec:	56                   	push   esi
c0023ced:	53                   	push   ebx
c0023cee:	e8 f1 f8 ff ff       	call   c00235e4 <IDE::read(unsigned char, unsigned char)>
c0023cf3:	83 c4 0c             	add    esp,0xc
c0023cf6:	6a 0c                	push   0xc
c0023cf8:	56                   	push   esi
c0023cf9:	53                   	push   ebx
c0023cfa:	e8 e5 f8 ff ff       	call   c00235e4 <IDE::read(unsigned char, unsigned char)>
c0023cff:	83 c4 0c             	add    esp,0xc
c0023d02:	6a 0c                	push   0xc
c0023d04:	56                   	push   esi
c0023d05:	53                   	push   ebx
c0023d06:	e8 d9 f8 ff ff       	call   c00235e4 <IDE::read(unsigned char, unsigned char)>
c0023d0b:	83 c4 0c             	add    esp,0xc
c0023d0e:	6a 0c                	push   0xc
c0023d10:	56                   	push   esi
c0023d11:	53                   	push   ebx
c0023d12:	e8 cd f8 ff ff       	call   c00235e4 <IDE::read(unsigned char, unsigned char)>
c0023d17:	83 c4 0c             	add    esp,0xc
c0023d1a:	6a 0c                	push   0xc
c0023d1c:	56                   	push   esi
c0023d1d:	53                   	push   ebx
c0023d1e:	e8 c1 f8 ff ff       	call   c00235e4 <IDE::read(unsigned char, unsigned char)>
c0023d23:	83 c4 10             	add    esp,0x10
c0023d26:	84 c0                	test   al,al
c0023d28:	0f 84 63 01 00 00    	je     c0023e91 <IDE::detect()+0x241>
c0023d2e:	31 ff                	xor    edi,edi
c0023d30:	50                   	push   eax
c0023d31:	6a 0c                	push   0xc
c0023d33:	56                   	push   esi
c0023d34:	53                   	push   ebx
c0023d35:	e8 aa f8 ff ff       	call   c00235e4 <IDE::read(unsigned char, unsigned char)>
c0023d3a:	83 c4 10             	add    esp,0x10
c0023d3d:	a8 01                	test   al,0x1
c0023d3f:	0f 85 6d 01 00 00    	jne    c0023eb2 <IDE::detect()+0x262>
c0023d45:	84 c0                	test   al,al
c0023d47:	78 04                	js     c0023d4d <IDE::detect()+0xfd>
c0023d49:	a8 08                	test   al,0x8
c0023d4b:	75 27                	jne    c0023d74 <IDE::detect()+0x124>
c0023d4d:	47                   	inc    edi
c0023d4e:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023d54:	7e da                	jle    c0023d30 <IDE::detect()+0xe0>
c0023d56:	50                   	push   eax
c0023d57:	50                   	push   eax
c0023d58:	6a 00                	push   0x0
c0023d5a:	68 40 4b 4c 00       	push   0x4c4b40
c0023d5f:	e8 67 a4 ff ff       	call   c001e1cb <nanoSleep(unsigned long long)>
c0023d64:	83 c4 10             	add    esp,0x10
c0023d67:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023d6d:	75 c1                	jne    c0023d30 <IDE::detect()+0xe0>
c0023d6f:	e9 3e 01 00 00       	jmp    c0023eb2 <IDE::detect()+0x262>
c0023d74:	31 c9                	xor    ecx,ecx
c0023d76:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023d7a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023d7e:	83 ec 0c             	sub    esp,0xc
c0023d81:	68 80 00 00 00       	push   0x80
c0023d86:	57                   	push   edi
c0023d87:	6a 00                	push   0x0
c0023d89:	56                   	push   esi
c0023d8a:	53                   	push   ebx
c0023d8b:	e8 f4 fd ff ff       	call   c0023b84 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023d90:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023d95:	89 e8                	mov    eax,ebp
c0023d97:	89 d1                	mov    ecx,edx
c0023d99:	c1 e0 06             	shl    eax,0x6
c0023d9c:	01 d8                	add    eax,ebx
c0023d9e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023da5:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023dac:	89 f2                	mov    edx,esi
c0023dae:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023db4:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023db8:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023dbe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023dc2:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023dc9:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023dd1:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023dd8:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023de0:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023de6:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023ded:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023df3:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023df7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023dfb:	83 c4 20             	add    esp,0x20
c0023dfe:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023e01:	83 c0 02             	add    eax,0x2
c0023e04:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023e0a:	83 c7 02             	add    edi,0x2
c0023e0d:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023e10:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023e16:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023e1a:	75 e2                	jne    c0023dfe <IDE::detect()+0x1ae>
c0023e1c:	89 e8                	mov    eax,ebp
c0023e1e:	c1 e0 06             	shl    eax,0x6
c0023e21:	01 d8                	add    eax,ebx
c0023e23:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023e29:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023e30:	66 c1 ea 09          	shr    dx,0x9
c0023e34:	83 e2 01             	and    edx,0x1
c0023e37:	84 c9                	test   cl,cl
c0023e39:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023e3f:	75 22                	jne    c0023e63 <IDE::detect()+0x213>
c0023e41:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0023e48:	74 46                	je     c0023e90 <IDE::detect()+0x240>
c0023e4a:	83 ec 0c             	sub    esp,0xc
c0023e4d:	68 7c 01 00 00       	push   0x17c
c0023e52:	e8 12 bb fe ff       	call   c000f969 <malloc>
c0023e57:	89 c7                	mov    edi,eax
c0023e59:	89 04 24             	mov    DWORD PTR [esp],eax
c0023e5c:	e8 15 05 00 00       	call   c0024376 <ATA::ATA()>
c0023e61:	eb 17                	jmp    c0023e7a <IDE::detect()+0x22a>
c0023e63:	83 ec 0c             	sub    esp,0xc
c0023e66:	68 80 01 00 00       	push   0x180
c0023e6b:	e8 f9 ba fe ff       	call   c000f969 <malloc>
c0023e70:	89 c7                	mov    edi,eax
c0023e72:	89 04 24             	mov    DWORD PTR [esp],eax
c0023e75:	e8 88 0b 00 00       	call   c0024a02 <ATAPI::ATAPI()>
c0023e7a:	5a                   	pop    edx
c0023e7b:	59                   	pop    ecx
c0023e7c:	57                   	push   edi
c0023e7d:	53                   	push   ebx
c0023e7e:	e8 77 ff fe ff       	call   c0013dfa <Device::addChild(Device*)>
c0023e83:	8b 07                	mov    eax,DWORD PTR [edi]
c0023e85:	53                   	push   ebx
c0023e86:	55                   	push   ebp
c0023e87:	6a 00                	push   0x0
c0023e89:	57                   	push   edi
c0023e8a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023e8d:	83 c4 20             	add    esp,0x20
c0023e90:	45                   	inc    ebp
c0023e91:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0023e96:	74 0d                	je     c0023ea5 <IDE::detect()+0x255>
c0023e98:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0023ea0:	e9 dc fd ff ff       	jmp    c0023c81 <IDE::detect()+0x31>
c0023ea5:	4e                   	dec    esi
c0023ea6:	74 63                	je     c0023f0b <IDE::detect()+0x2bb>
c0023ea8:	be 01 00 00 00       	mov    esi,0x1
c0023ead:	e9 c7 fd ff ff       	jmp    c0023c79 <IDE::detect()+0x29>
c0023eb2:	50                   	push   eax
c0023eb3:	6a 04                	push   0x4
c0023eb5:	56                   	push   esi
c0023eb6:	53                   	push   ebx
c0023eb7:	e8 28 f7 ff ff       	call   c00235e4 <IDE::read(unsigned char, unsigned char)>
c0023ebc:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023ec0:	83 c4 0c             	add    esp,0xc
c0023ec3:	6a 05                	push   0x5
c0023ec5:	56                   	push   esi
c0023ec6:	53                   	push   ebx
c0023ec7:	e8 18 f7 ff ff       	call   c00235e4 <IDE::read(unsigned char, unsigned char)>
c0023ecc:	83 c4 10             	add    esp,0x10
c0023ecf:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023ed3:	80 fa 14             	cmp    dl,0x14
c0023ed6:	75 04                	jne    c0023edc <IDE::detect()+0x28c>
c0023ed8:	3c eb                	cmp    al,0xeb
c0023eda:	eb 07                	jmp    c0023ee3 <IDE::detect()+0x293>
c0023edc:	3c 96                	cmp    al,0x96
c0023ede:	75 b1                	jne    c0023e91 <IDE::detect()+0x241>
c0023ee0:	80 fa 69             	cmp    dl,0x69
c0023ee3:	75 ac                	jne    c0023e91 <IDE::detect()+0x241>
c0023ee5:	68 a1 00 00 00       	push   0xa1
c0023eea:	6a 07                	push   0x7
c0023eec:	56                   	push   esi
c0023eed:	53                   	push   ebx
c0023eee:	e8 31 f6 ff ff       	call   c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ef3:	5f                   	pop    edi
c0023ef4:	58                   	pop    eax
c0023ef5:	6a 00                	push   0x0
c0023ef7:	68 40 42 0f 00       	push   0xf4240
c0023efc:	e8 ca a2 ff ff       	call   c001e1cb <nanoSleep(unsigned long long)>
c0023f01:	83 c4 10             	add    esp,0x10
c0023f04:	b1 01                	mov    cl,0x1
c0023f06:	e9 6b fe ff ff       	jmp    c0023d76 <IDE::detect()+0x126>
c0023f0b:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023f11:	5b                   	pop    ebx
c0023f12:	5e                   	pop    esi
c0023f13:	5f                   	pop    edi
c0023f14:	5d                   	pop    ebp
c0023f15:	c3                   	ret    

c0023f16 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023f16:	55                   	push   ebp
c0023f17:	57                   	push   edi
c0023f18:	56                   	push   esi
c0023f19:	53                   	push   ebx
c0023f1a:	83 ec 1c             	sub    esp,0x1c
c0023f1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023f21:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023f25:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023f29:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023f2d:	88 c3                	mov    bl,al
c0023f2f:	84 c0                	test   al,al
c0023f31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023f35:	0f 84 81 00 00 00    	je     c0023fbc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023f3b:	83 ec 0c             	sub    esp,0xc
c0023f3e:	68 83 cd 02 c0       	push   0xc002cd83
c0023f43:	e8 79 ea fe ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0023f48:	83 c4 10             	add    esp,0x10
c0023f4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023f4f:	3c 01                	cmp    al,0x1
c0023f51:	74 63                	je     c0023fb6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0023f53:	3c 02                	cmp    al,0x2
c0023f55:	75 53                	jne    c0023faa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0023f57:	d1 e6                	shl    esi,1
c0023f59:	09 ee                	or     esi,ebp
c0023f5b:	50                   	push   eax
c0023f5c:	89 f0                	mov    eax,esi
c0023f5e:	6a 01                	push   0x1
c0023f60:	0f b6 f0             	movzx  esi,al
c0023f63:	c1 e6 06             	shl    esi,0x6
c0023f66:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023f6e:	50                   	push   eax
c0023f6f:	57                   	push   edi
c0023f70:	e8 6f f6 ff ff       	call   c00235e4 <IDE::read(unsigned char, unsigned char)>
c0023f75:	83 c4 10             	add    esp,0x10
c0023f78:	a8 01                	test   al,0x1
c0023f7a:	74 02                	je     c0023f7e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0023f7c:	b3 07                	mov    bl,0x7
c0023f7e:	a8 02                	test   al,0x2
c0023f80:	74 02                	je     c0023f84 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0023f82:	b3 03                	mov    bl,0x3
c0023f84:	a8 04                	test   al,0x4
c0023f86:	74 02                	je     c0023f8a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0023f88:	b3 14                	mov    bl,0x14
c0023f8a:	a8 08                	test   al,0x8
c0023f8c:	74 02                	je     c0023f90 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0023f8e:	b3 03                	mov    bl,0x3
c0023f90:	a8 10                	test   al,0x10
c0023f92:	74 02                	je     c0023f96 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0023f94:	b3 15                	mov    bl,0x15
c0023f96:	a8 20                	test   al,0x20
c0023f98:	74 02                	je     c0023f9c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0023f9a:	b3 03                	mov    bl,0x3
c0023f9c:	a8 40                	test   al,0x40
c0023f9e:	74 02                	je     c0023fa2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0023fa0:	b3 16                	mov    bl,0x16
c0023fa2:	84 c0                	test   al,al
c0023fa4:	79 16                	jns    c0023fbc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023fa6:	b3 0d                	mov    bl,0xd
c0023fa8:	eb 12                	jmp    c0023fbc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023faa:	3c 03                	cmp    al,0x3
c0023fac:	74 0c                	je     c0023fba <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0023fae:	3c 04                	cmp    al,0x4
c0023fb0:	75 0a                	jne    c0023fbc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023fb2:	b3 08                	mov    bl,0x8
c0023fb4:	eb 06                	jmp    c0023fbc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023fb6:	b3 13                	mov    bl,0x13
c0023fb8:	eb 02                	jmp    c0023fbc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023fba:	b3 17                	mov    bl,0x17
c0023fbc:	83 c4 1c             	add    esp,0x1c
c0023fbf:	88 d8                	mov    al,bl
c0023fc1:	5b                   	pop    ebx
c0023fc2:	5e                   	pop    esi
c0023fc3:	5f                   	pop    edi
c0023fc4:	5d                   	pop    ebp
c0023fc5:	c3                   	ret    

c0023fc6 <IDE::polling(unsigned char, unsigned int)>:
c0023fc6:	57                   	push   edi
c0023fc7:	56                   	push   esi
c0023fc8:	53                   	push   ebx
c0023fc9:	bb 04 00 00 00       	mov    ebx,0x4
c0023fce:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023fd2:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023fd7:	52                   	push   edx
c0023fd8:	6a 0c                	push   0xc
c0023fda:	56                   	push   esi
c0023fdb:	57                   	push   edi
c0023fdc:	e8 03 f6 ff ff       	call   c00235e4 <IDE::read(unsigned char, unsigned char)>
c0023fe1:	83 c4 10             	add    esp,0x10
c0023fe4:	4b                   	dec    ebx
c0023fe5:	75 f0                	jne    c0023fd7 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023fe7:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023fec:	50                   	push   eax
c0023fed:	6a 0c                	push   0xc
c0023fef:	56                   	push   esi
c0023ff0:	57                   	push   edi
c0023ff1:	e8 ee f5 ff ff       	call   c00235e4 <IDE::read(unsigned char, unsigned char)>
c0023ff6:	83 c4 10             	add    esp,0x10
c0023ff9:	a8 01                	test   al,0x1
c0023ffb:	75 17                	jne    c0024014 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023ffd:	a8 20                	test   al,0x20
c0023fff:	75 0f                	jne    c0024010 <IDE::polling(unsigned char, unsigned int)+0x4a>
c0024001:	4b                   	dec    ebx
c0024002:	74 10                	je     c0024014 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0024004:	84 c0                	test   al,al
c0024006:	78 e4                	js     c0023fec <IDE::polling(unsigned char, unsigned int)+0x26>
c0024008:	a8 08                	test   al,0x8
c002400a:	74 e0                	je     c0023fec <IDE::polling(unsigned char, unsigned int)+0x26>
c002400c:	31 c0                	xor    eax,eax
c002400e:	eb 06                	jmp    c0024016 <IDE::polling(unsigned char, unsigned int)+0x50>
c0024010:	b0 01                	mov    al,0x1
c0024012:	eb 02                	jmp    c0024016 <IDE::polling(unsigned char, unsigned int)+0x50>
c0024014:	b0 02                	mov    al,0x2
c0024016:	5b                   	pop    ebx
c0024017:	5e                   	pop    esi
c0024018:	5f                   	pop    edi
c0024019:	c3                   	ret    

c002401a <SATABus::close(int, int, void*)>:
c002401a:	31 c0                	xor    eax,eax
c002401c:	c3                   	ret    
c002401d:	90                   	nop

c002401e <SATABus::detect()>:
c002401e:	c3                   	ret    
c002401f:	90                   	nop

c0024020 <SATABus::SATABus()>:
c0024020:	83 ec 0c             	sub    esp,0xc
c0024023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024027:	83 ec 08             	sub    esp,0x8
c002402a:	68 bc cd 02 c0       	push   0xc002cdbc
c002402f:	50                   	push   eax
c0024030:	e8 73 01 ff ff       	call   c00141a8 <HardDiskController::HardDiskController(char const*)>
c0024035:	83 c4 10             	add    esp,0x10
c0024038:	ba 10 ce 02 c0       	mov    edx,0xc002ce10
c002403d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024041:	89 10                	mov    DWORD PTR [eax],edx
c0024043:	83 ec 0c             	sub    esp,0xc
c0024046:	6a 50                	push   0x50
c0024048:	e8 10 be fe ff       	call   c000fe5d <Phys::allocateContiguousPages(int)>
c002404d:	83 c4 10             	add    esp,0x10
c0024050:	89 c2                	mov    edx,eax
c0024052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024056:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002405c:	83 ec 0c             	sub    esp,0xc
c002405f:	6a 50                	push   0x50
c0024061:	e8 89 d5 fe ff       	call   c00115ef <Virt::allocateKernelVirtualPages(int)>
c0024066:	83 c4 10             	add    esp,0x10
c0024069:	89 c2                	mov    edx,eax
c002406b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002406f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024075:	a1 70 e7 02 c0       	mov    eax,ds:0xc002e770
c002407a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002407e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0024084:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024088:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002408e:	83 ec 0c             	sub    esp,0xc
c0024091:	6a 03                	push   0x3
c0024093:	6a 50                	push   0x50
c0024095:	51                   	push   ecx
c0024096:	52                   	push   edx
c0024097:	50                   	push   eax
c0024098:	e8 ef de fe ff       	call   c0011f8c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002409d:	83 c4 20             	add    esp,0x20
c00240a0:	90                   	nop
c00240a1:	83 c4 0c             	add    esp,0xc
c00240a4:	c3                   	ret    
c00240a5:	90                   	nop

c00240a6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00240a6:	83 ec 0c             	sub    esp,0xc
c00240a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00240ad:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00240b0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00240b3:	09 c2                	or     edx,eax
c00240b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240b9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00240bf:	8b 08                	mov    ecx,DWORD PTR [eax]
c00240c1:	31 c0                	xor    eax,eax
c00240c3:	c1 e9 08             	shr    ecx,0x8
c00240c6:	83 e1 0f             	and    ecx,0xf
c00240c9:	39 c8                	cmp    eax,ecx
c00240cb:	74 0a                	je     c00240d7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00240cd:	f6 c2 01             	test   dl,0x1
c00240d0:	74 18                	je     c00240ea <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c00240d2:	d1 ea                	shr    edx,1
c00240d4:	40                   	inc    eax
c00240d5:	eb f2                	jmp    c00240c9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c00240d7:	83 ec 0c             	sub    esp,0xc
c00240da:	68 e0 cd 02 c0       	push   0xc002cde0
c00240df:	e8 7b 62 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c00240e4:	83 c4 10             	add    esp,0x10
c00240e7:	83 c8 ff             	or     eax,0xffffffff
c00240ea:	83 c4 0c             	add    esp,0xc
c00240ed:	c3                   	ret    

c00240ee <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00240ee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00240f2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00240f5:	89 c2                	mov    edx,eax
c00240f7:	c1 ea 08             	shr    edx,0x8
c00240fa:	83 e2 0f             	and    edx,0xf
c00240fd:	fe ca                	dec    dl
c00240ff:	75 31                	jne    c0024132 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0024101:	83 e0 0f             	and    eax,0xf
c0024104:	3c 03                	cmp    al,0x3
c0024106:	75 2a                	jne    c0024132 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0024108:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002410b:	b8 02 00 00 00       	mov    eax,0x2
c0024110:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0024116:	74 1c                	je     c0024134 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0024118:	b8 04 00 00 00       	mov    eax,0x4
c002411d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0024123:	74 0f                	je     c0024134 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0024125:	31 c0                	xor    eax,eax
c0024127:	83 fa 03             	cmp    edx,0x3
c002412a:	0f 94 c0             	sete   al
c002412d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0024131:	c3                   	ret    
c0024132:	31 c0                	xor    eax,eax
c0024134:	c3                   	ret    
c0024135:	90                   	nop

c0024136 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0024136:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002413a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002413d:	0f ba e2 0f          	bt     edx,0xf
c0024141:	72 f7                	jb     c002413a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0024143:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024146:	83 ca 10             	or     edx,0x10
c0024149:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002414c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002414f:	83 ca 01             	or     edx,0x1
c0024152:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024155:	c3                   	ret    

c0024156 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0024156:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002415a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002415d:	83 e2 fe             	and    edx,0xfffffffe
c0024160:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024163:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024166:	83 e2 ef             	and    edx,0xffffffef
c0024169:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002416c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002416f:	0f ba e2 0e          	bt     edx,0xe
c0024173:	72 f7                	jb     c002416c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024175:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024178:	0f ba e2 0f          	bt     edx,0xf
c002417c:	72 ee                	jb     c002416c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002417e:	c3                   	ret    
c002417f:	90                   	nop

c0024180 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0024180:	55                   	push   ebp
c0024181:	57                   	push   edi
c0024182:	56                   	push   esi
c0024183:	53                   	push   ebx
c0024184:	83 ec 1c             	sub    esp,0x1c
c0024187:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002418b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002418f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024193:	53                   	push   ebx
c0024194:	89 fd                	mov    ebp,edi
c0024196:	56                   	push   esi
c0024197:	c1 e5 0a             	shl    ebp,0xa
c002419a:	e8 b7 ff ff ff       	call   c0024156 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002419f:	83 ec 0c             	sub    esp,0xc
c00241a2:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00241a8:	01 e8                	add    eax,ebp
c00241aa:	89 03                	mov    DWORD PTR [ebx],eax
c00241ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00241ae:	68 00 04 00 00       	push   0x400
c00241b3:	6a 00                	push   0x0
c00241b5:	50                   	push   eax
c00241b6:	e8 95 c5 fd ff       	call   c0000750 <memset>
c00241bb:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00241c1:	89 fa                	mov    edx,edi
c00241c3:	01 e8                	add    eax,ebp
c00241c5:	c1 e7 0d             	shl    edi,0xd
c00241c8:	89 03                	mov    DWORD PTR [ebx],eax
c00241ca:	c1 e2 08             	shl    edx,0x8
c00241cd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00241d4:	81 c2 00 80 00 00    	add    edx,0x8000
c00241da:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00241de:	89 d0                	mov    eax,edx
c00241e0:	83 c4 1c             	add    esp,0x1c
c00241e3:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00241e9:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00241ec:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00241ef:	68 00 01 00 00       	push   0x100
c00241f4:	6a 00                	push   0x0
c00241f6:	50                   	push   eax
c00241f7:	e8 54 c5 fd ff       	call   c0000750 <memset>
c00241fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024200:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0024206:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c002420c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024210:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0024213:	83 c4 10             	add    esp,0x10
c0024216:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002421d:	31 ff                	xor    edi,edi
c002421f:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0024225:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c002422b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002422f:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024235:	83 c5 20             	add    ebp,0x20
c0024238:	01 f8                	add    eax,edi
c002423a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002423d:	52                   	push   edx
c002423e:	68 00 01 00 00       	push   0x100
c0024243:	6a 00                	push   0x0
c0024245:	50                   	push   eax
c0024246:	e8 05 c5 fd ff       	call   c0000750 <memset>
c002424b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002424f:	83 c4 10             	add    esp,0x10
c0024252:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0024258:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002425f:	01 f8                	add    eax,edi
c0024261:	81 c7 00 01 00 00    	add    edi,0x100
c0024267:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002426a:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0024270:	75 b3                	jne    c0024225 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0024272:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0024276:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c002427a:	83 c4 1c             	add    esp,0x1c
c002427d:	5b                   	pop    ebx
c002427e:	5e                   	pop    esi
c002427f:	5f                   	pop    edi
c0024280:	5d                   	pop    ebp
c0024281:	e9 b0 fe ff ff       	jmp    c0024136 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0024286 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0024286:	55                   	push   ebp
c0024287:	57                   	push   edi
c0024288:	56                   	push   esi
c0024289:	53                   	push   ebx
c002428a:	31 db                	xor    ebx,ebx
c002428c:	83 ec 0c             	sub    esp,0xc
c002428f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024293:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024297:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002429a:	f7 c7 01 00 00 00    	test   edi,0x1
c00242a0:	74 7a                	je     c002431c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c00242a2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00242a6:	89 d8                	mov    eax,ebx
c00242a8:	c1 e0 07             	shl    eax,0x7
c00242ab:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c00242b2:	55                   	push   ebp
c00242b3:	56                   	push   esi
c00242b4:	e8 35 fe ff ff       	call   c00240ee <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c00242b9:	5a                   	pop    edx
c00242ba:	83 f8 01             	cmp    eax,0x1
c00242bd:	59                   	pop    ecx
c00242be:	75 21                	jne    c00242e1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c00242c0:	50                   	push   eax
c00242c1:	53                   	push   ebx
c00242c2:	55                   	push   ebp
c00242c3:	56                   	push   esi
c00242c4:	e8 b7 fe ff ff       	call   c0024180 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00242c9:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00242d0:	e8 94 b6 fe ff       	call   c000f969 <malloc>
c00242d5:	89 c5                	mov    ebp,eax
c00242d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00242da:	e8 87 0d 00 00       	call   c0025066 <SATA::SATA()>
c00242df:	eb 24                	jmp    c0024305 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c00242e1:	83 f8 04             	cmp    eax,0x4
c00242e4:	75 36                	jne    c002431c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c00242e6:	51                   	push   ecx
c00242e7:	53                   	push   ebx
c00242e8:	55                   	push   ebp
c00242e9:	56                   	push   esi
c00242ea:	e8 91 fe ff ff       	call   c0024180 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00242ef:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00242f6:	e8 6e b6 fe ff       	call   c000f969 <malloc>
c00242fb:	89 c5                	mov    ebp,eax
c00242fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0024300:	e8 d7 10 00 00       	call   c00253dc <SATAPI::SATAPI()>
c0024305:	58                   	pop    eax
c0024306:	5a                   	pop    edx
c0024307:	55                   	push   ebp
c0024308:	56                   	push   esi
c0024309:	e8 ec fa fe ff       	call   c0013dfa <Device::addChild(Device*)>
c002430e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0024311:	56                   	push   esi
c0024312:	6a 00                	push   0x0
c0024314:	53                   	push   ebx
c0024315:	55                   	push   ebp
c0024316:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0024319:	83 c4 20             	add    esp,0x20
c002431c:	d1 ef                	shr    edi,1
c002431e:	43                   	inc    ebx
c002431f:	83 fb 20             	cmp    ebx,0x20
c0024322:	0f 85 72 ff ff ff    	jne    c002429a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0024328:	83 c4 0c             	add    esp,0xc
c002432b:	5b                   	pop    ebx
c002432c:	5e                   	pop    esi
c002432d:	5f                   	pop    edi
c002432e:	5d                   	pop    ebp
c002432f:	c3                   	ret    

c0024330 <SATABus::open(int, int, void*)>:
c0024330:	83 ec 14             	sub    esp,0x14
c0024333:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024337:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c002433d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024343:	52                   	push   edx
c0024344:	50                   	push   eax
c0024345:	e8 3c ff ff ff       	call   c0024286 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002434a:	31 c0                	xor    eax,eax
c002434c:	83 c4 1c             	add    esp,0x1c
c002434f:	c3                   	ret    

c0024350 <ATA::close(int, int, void*)>:
c0024350:	83 ec 0c             	sub    esp,0xc
c0024353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024357:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002435d:	85 c0                	test   eax,eax
c002435f:	74 0c                	je     c002436d <ATA::close(int, int, void*)+0x1d>
c0024361:	83 ec 0c             	sub    esp,0xc
c0024364:	8b 10                	mov    edx,DWORD PTR [eax]
c0024366:	50                   	push   eax
c0024367:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002436a:	83 c4 10             	add    esp,0x10
c002436d:	31 c0                	xor    eax,eax
c002436f:	83 c4 0c             	add    esp,0xc
c0024372:	c3                   	ret    
c0024373:	90                   	nop

c0024374 <ATA::powerSaving(PowerSavingLevel)>:
c0024374:	c3                   	ret    
c0024375:	90                   	nop

c0024376 <ATA::ATA()>:
c0024376:	83 ec 0c             	sub    esp,0xc
c0024379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002437d:	83 ec 04             	sub    esp,0x4
c0024380:	68 00 02 00 00       	push   0x200
c0024385:	68 05 cf 02 c0       	push   0xc002cf05
c002438a:	50                   	push   eax
c002438b:	e8 a0 fe fe ff       	call   c0014230 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024390:	83 c4 10             	add    esp,0x10
c0024393:	ba 88 ce 02 c0       	mov    edx,0xc002ce88
c0024398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002439c:	89 10                	mov    DWORD PTR [eax],edx
c002439e:	90                   	nop
c002439f:	83 c4 0c             	add    esp,0xc
c00243a2:	c3                   	ret    
c00243a3:	90                   	nop

c00243a4 <ATA::flush(bool)>:
c00243a4:	53                   	push   ebx
c00243a5:	83 ec 08             	sub    esp,0x8
c00243a8:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00243ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00243b1:	19 c0                	sbb    eax,eax
c00243b3:	83 e0 fd             	and    eax,0xfffffffd
c00243b6:	05 ea 00 00 00       	add    eax,0xea
c00243bb:	50                   	push   eax
c00243bc:	6a 07                	push   0x7
c00243be:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243c5:	50                   	push   eax
c00243c6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243cc:	e8 53 f1 ff ff       	call   c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243d1:	83 c4 0c             	add    esp,0xc
c00243d4:	6a 00                	push   0x0
c00243d6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243dd:	50                   	push   eax
c00243de:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243e4:	e8 dd fb ff ff       	call   c0023fc6 <IDE::polling(unsigned char, unsigned int)>
c00243e9:	83 c4 18             	add    esp,0x18
c00243ec:	5b                   	pop    ebx
c00243ed:	c3                   	ret    

c00243ee <ATA::readyForCommand()>:
c00243ee:	56                   	push   esi
c00243ef:	53                   	push   ebx
c00243f0:	31 db                	xor    ebx,ebx
c00243f2:	50                   	push   eax
c00243f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00243f7:	50                   	push   eax
c00243f8:	6a 0c                	push   0xc
c00243fa:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024401:	50                   	push   eax
c0024402:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024408:	e8 d7 f1 ff ff       	call   c00235e4 <IDE::read(unsigned char, unsigned char)>
c002440d:	83 c4 10             	add    esp,0x10
c0024410:	a8 88                	test   al,0x88
c0024412:	74 23                	je     c0024437 <ATA::readyForCommand()+0x49>
c0024414:	43                   	inc    ebx
c0024415:	83 fb 63             	cmp    ebx,0x63
c0024418:	7e dd                	jle    c00243f7 <ATA::readyForCommand()+0x9>
c002441a:	51                   	push   ecx
c002441b:	51                   	push   ecx
c002441c:	6a 00                	push   0x0
c002441e:	68 40 42 0f 00       	push   0xf4240
c0024423:	e8 a3 9d ff ff       	call   c001e1cb <nanoSleep(unsigned long long)>
c0024428:	83 c4 10             	add    esp,0x10
c002442b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024431:	75 c4                	jne    c00243f7 <ATA::readyForCommand()+0x9>
c0024433:	31 c0                	xor    eax,eax
c0024435:	eb 02                	jmp    c0024439 <ATA::readyForCommand()+0x4b>
c0024437:	b0 01                	mov    al,0x1
c0024439:	5a                   	pop    edx
c002443a:	5b                   	pop    ebx
c002443b:	5e                   	pop    esi
c002443c:	c3                   	ret    
c002443d:	90                   	nop

c002443e <ATA::access(unsigned long long, int, void*, bool)>:
c002443e:	55                   	push   ebp
c002443f:	57                   	push   edi
c0024440:	56                   	push   esi
c0024441:	53                   	push   ebx
c0024442:	83 ec 38             	sub    esp,0x38
c0024445:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0024449:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c002444d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0024451:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024455:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0024459:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002445d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0024461:	68 34 ce 02 c0       	push   0xc002ce34
c0024466:	e8 56 e5 fe ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c002446b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024471:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024475:	83 c4 10             	add    esp,0x10
c0024478:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002447e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024482:	c1 e0 06             	shl    eax,0x6
c0024485:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002448d:	74 5d                	je     c00244ec <ATA::access(unsigned long long, int, void*, bool)+0xae>
c002448f:	89 fa                	mov    edx,edi
c0024491:	89 f0                	mov    eax,esi
c0024493:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024497:	c1 ea 1c             	shr    edx,0x1c
c002449a:	89 d1                	mov    ecx,edx
c002449c:	09 c1                	or     ecx,eax
c002449e:	74 25                	je     c00244c5 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c00244a0:	31 ed                	xor    ebp,ebp
c00244a2:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00244a9:	89 fa                	mov    edx,edi
c00244ab:	89 f0                	mov    eax,esi
c00244ad:	0f ad d0             	shrd   eax,edx,cl
c00244b0:	d3 ea                	shr    edx,cl
c00244b2:	f6 c1 20             	test   cl,0x20
c00244b5:	74 02                	je     c00244b9 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c00244b7:	89 d0                	mov    eax,edx
c00244b9:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00244bd:	45                   	inc    ebp
c00244be:	83 fd 06             	cmp    ebp,0x6
c00244c1:	75 df                	jne    c00244a2 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c00244c3:	eb 76                	jmp    c002453b <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c00244c5:	89 f0                	mov    eax,esi
c00244c7:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00244cc:	89 fa                	mov    edx,edi
c00244ce:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00244d5:	0f ac d0 10          	shrd   eax,edx,0x10
c00244d9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00244de:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00244e2:	c1 ee 18             	shr    esi,0x18
c00244e5:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00244ea:	eb 56                	jmp    c0024542 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c00244ec:	6a 00                	push   0x0
c00244ee:	6a 3f                	push   0x3f
c00244f0:	57                   	push   edi
c00244f1:	56                   	push   esi
c00244f2:	e8 9d 29 00 00       	call   c0026e94 <__umoddi3>
c00244f7:	83 c4 10             	add    esp,0x10
c00244fa:	40                   	inc    eax
c00244fb:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00244ff:	6a 00                	push   0x0
c0024501:	68 f0 03 00 00       	push   0x3f0
c0024506:	57                   	push   edi
c0024507:	56                   	push   esi
c0024508:	e8 87 28 00 00       	call   c0026d94 <__udivdi3>
c002450d:	83 c4 10             	add    esp,0x10
c0024510:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024515:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002451c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024521:	6a 00                	push   0x0
c0024523:	6a 3f                	push   0x3f
c0024525:	57                   	push   edi
c0024526:	56                   	push   esi
c0024527:	e8 68 28 00 00       	call   c0026d94 <__udivdi3>
c002452c:	83 c4 10             	add    esp,0x10
c002452f:	89 c6                	mov    esi,eax
c0024531:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024536:	83 e6 0f             	and    esi,0xf
c0024539:	eb 07                	jmp    c0024542 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c002453b:	31 f6                	xor    esi,esi
c002453d:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024542:	bf 01 00 00 00       	mov    edi,0x1
c0024547:	50                   	push   eax
c0024548:	6a 00                	push   0x0
c002454a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024551:	50                   	push   eax
c0024552:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024556:	e8 d5 f1 ff ff       	call   c0023730 <IDE::enableIRQs(unsigned char, bool)>
c002455b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002455e:	e8 8b fe ff ff       	call   c00243ee <ATA::readyForCommand()>
c0024563:	83 c4 10             	add    esp,0x10
c0024566:	84 c0                	test   al,al
c0024568:	0f 84 bc 02 00 00    	je     c002482a <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c002456e:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024574:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002457a:	c1 e0 04             	shl    eax,0x4
c002457d:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024584:	09 c6                	or     esi,eax
c0024586:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c002458b:	75 05                	jne    c0024592 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c002458d:	83 ce a0             	or     esi,0xffffffa0
c0024590:	eb 03                	jmp    c0024595 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c0024592:	83 ce e0             	or     esi,0xffffffe0
c0024595:	89 f0                	mov    eax,esi
c0024597:	0f b6 f0             	movzx  esi,al
c002459a:	56                   	push   esi
c002459b:	6a 06                	push   0x6
c002459d:	51                   	push   ecx
c002459e:	52                   	push   edx
c002459f:	e8 80 ef ff ff       	call   c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245a4:	83 c4 10             	add    esp,0x10
c00245a7:	6a 00                	push   0x0
c00245a9:	6a 01                	push   0x1
c00245ab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245b2:	50                   	push   eax
c00245b3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00245b9:	e8 66 ef ff ff       	call   c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245be:	83 c4 10             	add    esp,0x10
c00245c1:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00245c6:	75 6e                	jne    c0024636 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c00245c8:	6a 00                	push   0x0
c00245ca:	6a 08                	push   0x8
c00245cc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245d3:	50                   	push   eax
c00245d4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00245da:	e8 45 ef ff ff       	call   c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245df:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00245e4:	50                   	push   eax
c00245e5:	6a 09                	push   0x9
c00245e7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245ee:	50                   	push   eax
c00245ef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00245f5:	e8 2a ef ff ff       	call   c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245fa:	83 c4 20             	add    esp,0x20
c00245fd:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024602:	50                   	push   eax
c0024603:	6a 0a                	push   0xa
c0024605:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002460c:	50                   	push   eax
c002460d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024613:	e8 0c ef ff ff       	call   c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024618:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002461d:	50                   	push   eax
c002461e:	6a 0b                	push   0xb
c0024620:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024627:	50                   	push   eax
c0024628:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002462e:	e8 f1 ee ff ff       	call   c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024633:	83 c4 20             	add    esp,0x20
c0024636:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002463b:	50                   	push   eax
c002463c:	6a 02                	push   0x2
c002463e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024645:	50                   	push   eax
c0024646:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002464c:	e8 d3 ee ff ff       	call   c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024651:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024656:	50                   	push   eax
c0024657:	6a 03                	push   0x3
c0024659:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024660:	50                   	push   eax
c0024661:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024667:	e8 b8 ee ff ff       	call   c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002466c:	83 c4 20             	add    esp,0x20
c002466f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024674:	50                   	push   eax
c0024675:	6a 04                	push   0x4
c0024677:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002467e:	50                   	push   eax
c002467f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024685:	e8 9a ee ff ff       	call   c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002468a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002468f:	50                   	push   eax
c0024690:	6a 05                	push   0x5
c0024692:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024699:	50                   	push   eax
c002469a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00246a0:	e8 7f ee ff ff       	call   c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246a5:	83 c4 20             	add    esp,0x20
c00246a8:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00246ad:	0f 94 c0             	sete   al
c00246b0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00246b5:	74 09                	je     c00246c0 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c00246b7:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00246be:	eb 07                	jmp    c00246c7 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c00246c0:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00246c7:	0f b6 c0             	movzx  eax,al
c00246ca:	50                   	push   eax
c00246cb:	6a 07                	push   0x7
c00246cd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00246d4:	50                   	push   eax
c00246d5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00246db:	e8 44 ee ff ff       	call   c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246e0:	c7 04 24 41 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce41
c00246e7:	e8 d5 e2 fe ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c00246ec:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00246f0:	83 c4 10             	add    esp,0x10
c00246f3:	85 f6                	test   esi,esi
c00246f5:	0f 84 f7 00 00 00    	je     c00247f2 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c00246fb:	83 ec 0c             	sub    esp,0xc
c00246fe:	68 44 ce 02 c0       	push   0xc002ce44
c0024703:	e8 b9 e2 fe ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0024708:	83 c4 0c             	add    esp,0xc
c002470b:	6a 01                	push   0x1
c002470d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024714:	50                   	push   eax
c0024715:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002471b:	e8 a6 f8 ff ff       	call   c0023fc6 <IDE::polling(unsigned char, unsigned int)>
c0024720:	c7 04 24 47 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce47
c0024727:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002472b:	e8 91 e2 fe ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0024730:	83 c4 10             	add    esp,0x10
c0024733:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0024737:	84 c0                	test   al,al
c0024739:	74 2b                	je     c0024766 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c002473b:	0f b6 f8             	movzx  edi,al
c002473e:	57                   	push   edi
c002473f:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024746:	50                   	push   eax
c0024747:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002474e:	50                   	push   eax
c002474f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024755:	e8 bc f7 ff ff       	call   c0023f16 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002475a:	c7 04 24 4a ce 02 c0 	mov    DWORD PTR [esp],0xc002ce4a
c0024761:	e9 bc 00 00 00       	jmp    c0024822 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c0024766:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002476b:	74 50                	je     c00247bd <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c002476d:	83 ec 0c             	sub    esp,0xc
c0024770:	31 ed                	xor    ebp,ebp
c0024772:	68 55 ce 02 c0       	push   0xc002ce55
c0024777:	e8 45 e2 fe ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c002477c:	83 c4 10             	add    esp,0x10
c002477f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024783:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024787:	50                   	push   eax
c0024788:	50                   	push   eax
c0024789:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024790:	50                   	push   eax
c0024791:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024797:	e8 76 ed ff ff       	call   c0023512 <IDE::getBase(unsigned char)>
c002479c:	89 c2                	mov    edx,eax
c002479e:	89 f8                	mov    eax,edi
c00247a0:	66 ef                	out    dx,ax
c00247a2:	45                   	inc    ebp
c00247a3:	83 c4 10             	add    esp,0x10
c00247a6:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00247ac:	75 d1                	jne    c002477f <ATA::access(unsigned long long, int, void*, bool)+0x341>
c00247ae:	83 ec 0c             	sub    esp,0xc
c00247b1:	68 58 ce 02 c0       	push   0xc002ce58
c00247b6:	e8 06 e2 fe ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c00247bb:	eb 24                	jmp    c00247e1 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c00247bd:	51                   	push   ecx
c00247be:	51                   	push   ecx
c00247bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00247c6:	50                   	push   eax
c00247c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00247cd:	e8 40 ed ff ff       	call   c0023512 <IDE::getBase(unsigned char)>
c00247d2:	b9 00 01 00 00       	mov    ecx,0x100
c00247d7:	89 c2                	mov    edx,eax
c00247d9:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00247dd:	fc                   	cld    
c00247de:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00247e1:	83 c4 10             	add    esp,0x10
c00247e4:	4e                   	dec    esi
c00247e5:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00247ed:	e9 01 ff ff ff       	jmp    c00246f3 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c00247f2:	31 ff                	xor    edi,edi
c00247f4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00247f9:	74 2f                	je     c002482a <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c00247fb:	83 ec 0c             	sub    esp,0xc
c00247fe:	68 5b ce 02 c0       	push   0xc002ce5b
c0024803:	e8 b9 e1 fe ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0024808:	58                   	pop    eax
c0024809:	31 c0                	xor    eax,eax
c002480b:	5a                   	pop    edx
c002480c:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024811:	0f 94 c0             	sete   al
c0024814:	50                   	push   eax
c0024815:	53                   	push   ebx
c0024816:	e8 89 fb ff ff       	call   c00243a4 <ATA::flush(bool)>
c002481b:	c7 04 24 5e ce 02 c0 	mov    DWORD PTR [esp],0xc002ce5e
c0024822:	e8 9a e1 fe ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0024827:	83 c4 10             	add    esp,0x10
c002482a:	83 c4 2c             	add    esp,0x2c
c002482d:	89 f8                	mov    eax,edi
c002482f:	5b                   	pop    ebx
c0024830:	5e                   	pop    esi
c0024831:	5f                   	pop    edi
c0024832:	5d                   	pop    ebp
c0024833:	c3                   	ret    

c0024834 <ATA::read(unsigned long long, int, void*)>:
c0024834:	57                   	push   edi
c0024835:	b8 04 00 00 00       	mov    eax,0x4
c002483a:	56                   	push   esi
c002483b:	53                   	push   ebx
c002483c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024840:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024844:	8d 7a ff             	lea    edi,[edx-0x1]
c0024847:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002484b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002484f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024855:	77 25                	ja     c002487c <ATA::read(unsigned long long, int, void*)+0x48>
c0024857:	b8 06 00 00 00       	mov    eax,0x6
c002485c:	85 f6                	test   esi,esi
c002485e:	74 1c                	je     c002487c <ATA::read(unsigned long long, int, void*)+0x48>
c0024860:	50                   	push   eax
c0024861:	50                   	push   eax
c0024862:	6a 00                	push   0x0
c0024864:	56                   	push   esi
c0024865:	52                   	push   edx
c0024866:	53                   	push   ebx
c0024867:	51                   	push   ecx
c0024868:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002486c:	e8 cd fb ff ff       	call   c002443e <ATA::access(unsigned long long, int, void*, bool)>
c0024871:	83 c4 20             	add    esp,0x20
c0024874:	85 c0                	test   eax,eax
c0024876:	0f 95 c0             	setne  al
c0024879:	0f b6 c0             	movzx  eax,al
c002487c:	5b                   	pop    ebx
c002487d:	5e                   	pop    esi
c002487e:	5f                   	pop    edi
c002487f:	c3                   	ret    

c0024880 <ATA::write(unsigned long long, int, void*)>:
c0024880:	55                   	push   ebp
c0024881:	57                   	push   edi
c0024882:	56                   	push   esi
c0024883:	53                   	push   ebx
c0024884:	83 ec 18             	sub    esp,0x18
c0024887:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002488b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002488f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0024893:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0024897:	68 61 ce 02 c0       	push   0xc002ce61
c002489c:	e8 20 e1 fe ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c00248a1:	8d 53 ff             	lea    edx,[ebx-0x1]
c00248a4:	83 c4 10             	add    esp,0x10
c00248a7:	b8 04 00 00 00       	mov    eax,0x4
c00248ac:	81 fa fe 00 00 00    	cmp    edx,0xfe
c00248b2:	77 25                	ja     c00248d9 <ATA::write(unsigned long long, int, void*)+0x59>
c00248b4:	b8 06 00 00 00       	mov    eax,0x6
c00248b9:	85 f6                	test   esi,esi
c00248bb:	74 1c                	je     c00248d9 <ATA::write(unsigned long long, int, void*)+0x59>
c00248bd:	50                   	push   eax
c00248be:	50                   	push   eax
c00248bf:	6a 01                	push   0x1
c00248c1:	56                   	push   esi
c00248c2:	53                   	push   ebx
c00248c3:	55                   	push   ebp
c00248c4:	57                   	push   edi
c00248c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00248c9:	e8 70 fb ff ff       	call   c002443e <ATA::access(unsigned long long, int, void*, bool)>
c00248ce:	83 c4 20             	add    esp,0x20
c00248d1:	85 c0                	test   eax,eax
c00248d3:	0f 95 c0             	setne  al
c00248d6:	0f b6 c0             	movzx  eax,al
c00248d9:	83 c4 0c             	add    esp,0xc
c00248dc:	5b                   	pop    ebx
c00248dd:	5e                   	pop    esi
c00248de:	5f                   	pop    edi
c00248df:	5d                   	pop    ebp
c00248e0:	c3                   	ret    
c00248e1:	90                   	nop

c00248e2 <ATA::detectCHS()>:
c00248e2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00248e6:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00248ec:	c1 e0 06             	shl    eax,0x6
c00248ef:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00248f5:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00248ff:	c7 44 24 04 6d ce 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ce6d
c0024907:	e9 53 5a ff ff       	jmp    c001a35f <Krnl::panic(char const*)>

c002490c <ATA::open(int, int, void*)>:
c002490c:	53                   	push   ebx
c002490d:	83 ec 08             	sub    esp,0x8
c0024910:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024914:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024918:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002491c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024922:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024928:	c1 e0 06             	shl    eax,0x6
c002492b:	01 d0                	add    eax,edx
c002492d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024934:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002493a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024941:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002494b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024951:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024958:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002495f:	75 0c                	jne    c002496d <ATA::open(int, int, void*)+0x61>
c0024961:	83 ec 0c             	sub    esp,0xc
c0024964:	53                   	push   ebx
c0024965:	e8 78 ff ff ff       	call   c00248e2 <ATA::detectCHS()>
c002496a:	83 c4 10             	add    esp,0x10
c002496d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024973:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024979:	c1 e0 06             	shl    eax,0x6
c002497c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024983:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002498d:	d1 e8                	shr    eax,1
c002498f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024995:	6a 04                	push   0x4
c0024997:	6a 0c                	push   0xc
c0024999:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249a0:	50                   	push   eax
c00249a1:	52                   	push   edx
c00249a2:	e8 7d eb ff ff       	call   c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249a7:	90                   	nop
c00249a8:	90                   	nop
c00249a9:	6a 00                	push   0x0
c00249ab:	6a 0c                	push   0xc
c00249ad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249b4:	50                   	push   eax
c00249b5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00249bb:	e8 64 eb ff ff       	call   c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249c0:	83 c4 14             	add    esp,0x14
c00249c3:	53                   	push   ebx
c00249c4:	e8 cf f8 fe ff       	call   c0014298 <PhysicalDisk::startCache()>
c00249c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00249cc:	e8 4f 1b ff ff       	call   c0016520 <createPartitionsForDisk(PhysicalDisk*)>
c00249d1:	31 c0                	xor    eax,eax
c00249d3:	83 c4 18             	add    esp,0x18
c00249d6:	5b                   	pop    ebx
c00249d7:	c3                   	ret    

c00249d8 <ATAPI::write(unsigned long long, int, void*)>:
c00249d8:	b8 03 00 00 00       	mov    eax,0x3
c00249dd:	c3                   	ret    

c00249de <ATAPI::close(int, int, void*)>:
c00249de:	83 ec 0c             	sub    esp,0xc
c00249e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249e5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00249eb:	85 c0                	test   eax,eax
c00249ed:	74 0c                	je     c00249fb <ATAPI::close(int, int, void*)+0x1d>
c00249ef:	83 ec 0c             	sub    esp,0xc
c00249f2:	8b 10                	mov    edx,DWORD PTR [eax]
c00249f4:	50                   	push   eax
c00249f5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00249f8:	83 c4 10             	add    esp,0x10
c00249fb:	31 c0                	xor    eax,eax
c00249fd:	83 c4 0c             	add    esp,0xc
c0024a00:	c3                   	ret    
c0024a01:	90                   	nop

c0024a02 <ATAPI::ATAPI()>:
c0024a02:	83 ec 0c             	sub    esp,0xc
c0024a05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a09:	83 ec 04             	sub    esp,0x4
c0024a0c:	68 00 08 00 00       	push   0x800
c0024a11:	68 a5 cf 02 c0       	push   0xc002cfa5
c0024a16:	50                   	push   eax
c0024a17:	e8 14 f8 fe ff       	call   c0014230 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024a1c:	83 c4 10             	add    esp,0x10
c0024a1f:	ba c0 ce 02 c0       	mov    edx,0xc002cec0
c0024a24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a28:	89 10                	mov    DWORD PTR [eax],edx
c0024a2a:	90                   	nop
c0024a2b:	83 c4 0c             	add    esp,0xc
c0024a2e:	c3                   	ret    
c0024a2f:	90                   	nop

c0024a30 <ATAPI::readyForCommand()>:
c0024a30:	56                   	push   esi
c0024a31:	53                   	push   ebx
c0024a32:	31 db                	xor    ebx,ebx
c0024a34:	50                   	push   eax
c0024a35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024a39:	50                   	push   eax
c0024a3a:	6a 0c                	push   0xc
c0024a3c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024a43:	50                   	push   eax
c0024a44:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024a4a:	e8 95 eb ff ff       	call   c00235e4 <IDE::read(unsigned char, unsigned char)>
c0024a4f:	83 c4 10             	add    esp,0x10
c0024a52:	a8 88                	test   al,0x88
c0024a54:	74 23                	je     c0024a79 <ATAPI::readyForCommand()+0x49>
c0024a56:	43                   	inc    ebx
c0024a57:	83 fb 63             	cmp    ebx,0x63
c0024a5a:	7e dd                	jle    c0024a39 <ATAPI::readyForCommand()+0x9>
c0024a5c:	51                   	push   ecx
c0024a5d:	51                   	push   ecx
c0024a5e:	6a 00                	push   0x0
c0024a60:	68 40 42 0f 00       	push   0xf4240
c0024a65:	e8 61 97 ff ff       	call   c001e1cb <nanoSleep(unsigned long long)>
c0024a6a:	83 c4 10             	add    esp,0x10
c0024a6d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024a73:	75 c4                	jne    c0024a39 <ATAPI::readyForCommand()+0x9>
c0024a75:	31 c0                	xor    eax,eax
c0024a77:	eb 02                	jmp    c0024a7b <ATAPI::readyForCommand()+0x4b>
c0024a79:	b0 01                	mov    al,0x1
c0024a7b:	5a                   	pop    edx
c0024a7c:	5b                   	pop    ebx
c0024a7d:	5e                   	pop    esi
c0024a7e:	c3                   	ret    
c0024a7f:	90                   	nop

c0024a80 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024a80:	55                   	push   ebp
c0024a81:	57                   	push   edi
c0024a82:	56                   	push   esi
c0024a83:	53                   	push   ebx
c0024a84:	83 ec 20             	sub    esp,0x20
c0024a87:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024a8b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024a8f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024a93:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024a97:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024a9b:	6a 01                	push   0x1
c0024a9d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024aa4:	50                   	push   eax
c0024aa5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024aab:	e8 80 ec ff ff       	call   c0023730 <IDE::enableIRQs(unsigned char, bool)>
c0024ab0:	5e                   	pop    esi
c0024ab1:	58                   	pop    eax
c0024ab2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ab9:	50                   	push   eax
c0024aba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ac0:	e8 39 ea ff ff       	call   c00234fe <IDE::prepareInterrupt(unsigned char)>
c0024ac5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024ac8:	e8 63 ff ff ff       	call   c0024a30 <ATAPI::readyForCommand()>
c0024acd:	83 c4 10             	add    esp,0x10
c0024ad0:	84 c0                	test   al,al
c0024ad2:	75 0a                	jne    c0024ade <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024ad4:	bb 01 00 00 00       	mov    ebx,0x1
c0024ad9:	e9 57 02 00 00       	jmp    c0024d35 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024ade:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024ae4:	c1 e0 04             	shl    eax,0x4
c0024ae7:	0f b6 c0             	movzx  eax,al
c0024aea:	50                   	push   eax
c0024aeb:	6a 06                	push   0x6
c0024aed:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024af4:	50                   	push   eax
c0024af5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024afb:	e8 24 ea ff ff       	call   c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b00:	6a 00                	push   0x0
c0024b02:	6a 01                	push   0x1
c0024b04:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024b0b:	50                   	push   eax
c0024b0c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b12:	e8 0d ea ff ff       	call   c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b17:	83 c4 20             	add    esp,0x20
c0024b1a:	0f b6 c3             	movzx  eax,bl
c0024b1d:	0f b6 df             	movzx  ebx,bh
c0024b20:	50                   	push   eax
c0024b21:	6a 04                	push   0x4
c0024b23:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024b2a:	50                   	push   eax
c0024b2b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b31:	e8 ee e9 ff ff       	call   c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b36:	53                   	push   ebx
c0024b37:	6a 05                	push   0x5
c0024b39:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024b40:	50                   	push   eax
c0024b41:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b47:	e8 d8 e9 ff ff       	call   c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b4c:	83 c4 20             	add    esp,0x20
c0024b4f:	68 a0 00 00 00       	push   0xa0
c0024b54:	6a 07                	push   0x7
c0024b56:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024b5d:	50                   	push   eax
c0024b5e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b64:	e8 bb e9 ff ff       	call   c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b69:	83 c4 0c             	add    esp,0xc
c0024b6c:	6a 01                	push   0x1
c0024b6e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024b75:	50                   	push   eax
c0024b76:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b7c:	e8 45 f4 ff ff       	call   c0023fc6 <IDE::polling(unsigned char, unsigned int)>
c0024b81:	83 c4 10             	add    esp,0x10
c0024b84:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024b8a:	84 c0                	test   al,al
c0024b8c:	74 23                	je     c0024bb1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024b8e:	0f b6 d8             	movzx  ebx,al
c0024b91:	0f b6 d2             	movzx  edx,dl
c0024b94:	53                   	push   ebx
c0024b95:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024b9c:	50                   	push   eax
c0024b9d:	52                   	push   edx
c0024b9e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ba4:	e8 6d f3 ff ff       	call   c0023f16 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024ba9:	83 c4 10             	add    esp,0x10
c0024bac:	e9 84 01 00 00       	jmp    c0024d35 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024bb1:	0f b6 d2             	movzx  edx,dl
c0024bb4:	53                   	push   ebx
c0024bb5:	53                   	push   ebx
c0024bb6:	52                   	push   edx
c0024bb7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024bbd:	e8 50 e9 ff ff       	call   c0023512 <IDE::getBase(unsigned char)>
c0024bc2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024bc6:	b9 06 00 00 00       	mov    ecx,0x6
c0024bcb:	89 c2                	mov    edx,eax
c0024bcd:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024bd0:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024bd4:	83 c4 10             	add    esp,0x10
c0024bd7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024bdd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024be4:	85 db                	test   ebx,ebx
c0024be6:	0f 84 ec 00 00 00    	je     c0024cd8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024bec:	51                   	push   ecx
c0024bed:	51                   	push   ecx
c0024bee:	52                   	push   edx
c0024bef:	50                   	push   eax
c0024bf0:	e8 9d ea ff ff       	call   c0023692 <IDE::waitInterrupt(unsigned char)>
c0024bf5:	83 c4 10             	add    esp,0x10
c0024bf8:	84 c0                	test   al,al
c0024bfa:	0f 84 d4 fe ff ff    	je     c0024ad4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024c00:	56                   	push   esi
c0024c01:	56                   	push   esi
c0024c02:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024c09:	50                   	push   eax
c0024c0a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024c10:	e8 e9 e8 ff ff       	call   c00234fe <IDE::prepareInterrupt(unsigned char)>
c0024c15:	83 c4 0c             	add    esp,0xc
c0024c18:	6a 04                	push   0x4
c0024c1a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024c21:	50                   	push   eax
c0024c22:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024c28:	e8 b7 e9 ff ff       	call   c00235e4 <IDE::read(unsigned char, unsigned char)>
c0024c2d:	83 c4 0c             	add    esp,0xc
c0024c30:	89 c6                	mov    esi,eax
c0024c32:	6a 05                	push   0x5
c0024c34:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024c3b:	50                   	push   eax
c0024c3c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024c42:	e8 9d e9 ff ff       	call   c00235e4 <IDE::read(unsigned char, unsigned char)>
c0024c47:	89 f1                	mov    ecx,esi
c0024c49:	0f b6 c0             	movzx  eax,al
c0024c4c:	0f b6 f1             	movzx  esi,cl
c0024c4f:	c1 e0 08             	shl    eax,0x8
c0024c52:	09 c6                	or     esi,eax
c0024c54:	d1 fe                	sar    esi,1
c0024c56:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024c5a:	83 c4 10             	add    esp,0x10
c0024c5d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024c62:	74 41                	je     c0024ca5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024c64:	31 c9                	xor    ecx,ecx
c0024c66:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024c6c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024c73:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024c77:	75 0a                	jne    c0024c83 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024c79:	01 c9                	add    ecx,ecx
c0024c7b:	01 cd                	add    ebp,ecx
c0024c7d:	4b                   	dec    ebx
c0024c7e:	e9 54 ff ff ff       	jmp    c0024bd7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024c83:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024c88:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024c8c:	51                   	push   ecx
c0024c8d:	51                   	push   ecx
c0024c8e:	52                   	push   edx
c0024c8f:	50                   	push   eax
c0024c90:	e8 7d e8 ff ff       	call   c0023512 <IDE::getBase(unsigned char)>
c0024c95:	89 c2                	mov    edx,eax
c0024c97:	89 f0                	mov    eax,esi
c0024c99:	66 ef                	out    dx,ax
c0024c9b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024c9f:	83 c4 10             	add    esp,0x10
c0024ca2:	41                   	inc    ecx
c0024ca3:	eb c1                	jmp    c0024c66 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024ca5:	31 f6                	xor    esi,esi
c0024ca7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024cad:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024cb4:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024cb8:	75 06                	jne    c0024cc0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024cba:	01 f6                	add    esi,esi
c0024cbc:	01 f5                	add    ebp,esi
c0024cbe:	eb bd                	jmp    c0024c7d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024cc0:	51                   	push   ecx
c0024cc1:	51                   	push   ecx
c0024cc2:	52                   	push   edx
c0024cc3:	50                   	push   eax
c0024cc4:	e8 49 e8 ff ff       	call   c0023512 <IDE::getBase(unsigned char)>
c0024cc9:	89 c2                	mov    edx,eax
c0024ccb:	66 ed                	in     ax,dx
c0024ccd:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024cd2:	83 c4 10             	add    esp,0x10
c0024cd5:	46                   	inc    esi
c0024cd6:	eb cf                	jmp    c0024ca7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024cd8:	51                   	push   ecx
c0024cd9:	51                   	push   ecx
c0024cda:	52                   	push   edx
c0024cdb:	50                   	push   eax
c0024cdc:	e8 b1 e9 ff ff       	call   c0023692 <IDE::waitInterrupt(unsigned char)>
c0024ce1:	83 c4 10             	add    esp,0x10
c0024ce4:	84 c0                	test   al,al
c0024ce6:	0f 84 e8 fd ff ff    	je     c0024ad4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024cec:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024cf1:	52                   	push   edx
c0024cf2:	52                   	push   edx
c0024cf3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024cfa:	50                   	push   eax
c0024cfb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024d01:	e8 f8 e7 ff ff       	call   c00234fe <IDE::prepareInterrupt(unsigned char)>
c0024d06:	83 c4 10             	add    esp,0x10
c0024d09:	50                   	push   eax
c0024d0a:	50                   	push   eax
c0024d0b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024d12:	50                   	push   eax
c0024d13:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024d19:	e8 f4 e7 ff ff       	call   c0023512 <IDE::getBase(unsigned char)>
c0024d1e:	8d 50 07             	lea    edx,[eax+0x7]
c0024d21:	ec                   	in     al,dx
c0024d22:	83 c4 10             	add    esp,0x10
c0024d25:	a8 88                	test   al,0x88
c0024d27:	74 0a                	je     c0024d33 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024d29:	4b                   	dec    ebx
c0024d2a:	75 dd                	jne    c0024d09 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024d2c:	bb 02 00 00 00       	mov    ebx,0x2
c0024d31:	eb 02                	jmp    c0024d35 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024d33:	31 db                	xor    ebx,ebx
c0024d35:	83 c4 1c             	add    esp,0x1c
c0024d38:	89 d8                	mov    eax,ebx
c0024d3a:	5b                   	pop    ebx
c0024d3b:	5e                   	pop    esi
c0024d3c:	5f                   	pop    edi
c0024d3d:	5d                   	pop    ebp
c0024d3e:	c3                   	ret    
c0024d3f:	90                   	nop

c0024d40 <ATAPI::diskRemoved()>:
c0024d40:	83 ec 18             	sub    esp,0x18
c0024d43:	68 b1 cf 02 c0       	push   0xc002cfb1
c0024d48:	e8 74 dc fe ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0024d4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d51:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024d58:	83 c4 1c             	add    esp,0x1c
c0024d5b:	c3                   	ret    

c0024d5c <ATAPI::eject()>:
c0024d5c:	57                   	push   edi
c0024d5d:	b9 03 00 00 00       	mov    ecx,0x3
c0024d62:	53                   	push   ebx
c0024d63:	83 ec 14             	sub    esp,0x14
c0024d66:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024d6a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024d6e:	fc                   	cld    
c0024d6f:	31 c0                	xor    eax,eax
c0024d71:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024d73:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024d78:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024d7d:	50                   	push   eax
c0024d7e:	50                   	push   eax
c0024d7f:	6a 00                	push   0x0
c0024d81:	6a 00                	push   0x0
c0024d83:	6a 00                	push   0x0
c0024d85:	6a 02                	push   0x2
c0024d87:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024d8b:	50                   	push   eax
c0024d8c:	53                   	push   ebx
c0024d8d:	e8 ee fc ff ff       	call   c0024a80 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024d92:	83 c4 14             	add    esp,0x14
c0024d95:	53                   	push   ebx
c0024d96:	e8 a5 ff ff ff       	call   c0024d40 <ATAPI::diskRemoved()>
c0024d9b:	83 c4 24             	add    esp,0x24
c0024d9e:	31 c0                	xor    eax,eax
c0024da0:	5b                   	pop    ebx
c0024da1:	5f                   	pop    edi
c0024da2:	c3                   	ret    
c0024da3:	90                   	nop

c0024da4 <ATAPI::diskInserted()>:
c0024da4:	53                   	push   ebx
c0024da5:	83 ec 14             	sub    esp,0x14
c0024da8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024dac:	68 c8 cf 02 c0       	push   0xc002cfc8
c0024db1:	e8 0b dc fe ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0024db6:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024dbd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024dc0:	e8 d3 f4 fe ff       	call   c0014298 <PhysicalDisk::startCache()>
c0024dc5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024dc9:	83 c4 18             	add    esp,0x18
c0024dcc:	5b                   	pop    ebx
c0024dcd:	e9 4e 17 ff ff       	jmp    c0016520 <createPartitionsForDisk(PhysicalDisk*)>

c0024dd2 <ATAPI::detectMedia()>:
c0024dd2:	56                   	push   esi
c0024dd3:	53                   	push   ebx
c0024dd4:	83 ec 28             	sub    esp,0x28
c0024dd7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024ddb:	6a 0c                	push   0xc
c0024ddd:	6a 00                	push   0x0
c0024ddf:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024de3:	56                   	push   esi
c0024de4:	e8 67 b9 fd ff       	call   c0000750 <memset>
c0024de9:	58                   	pop    eax
c0024dea:	5a                   	pop    edx
c0024deb:	6a 00                	push   0x0
c0024ded:	6a 00                	push   0x0
c0024def:	6a 00                	push   0x0
c0024df1:	6a 00                	push   0x0
c0024df3:	56                   	push   esi
c0024df4:	53                   	push   ebx
c0024df5:	e8 86 fc ff ff       	call   c0024a80 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024dfa:	83 c4 1c             	add    esp,0x1c
c0024dfd:	6a 0c                	push   0xc
c0024dff:	6a 00                	push   0x0
c0024e01:	56                   	push   esi
c0024e02:	e8 49 b9 fd ff       	call   c0000750 <memset>
c0024e07:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024e0c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024e11:	59                   	pop    ecx
c0024e12:	58                   	pop    eax
c0024e13:	6a 01                	push   0x1
c0024e15:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024e19:	50                   	push   eax
c0024e1a:	6a 00                	push   0x0
c0024e1c:	6a 12                	push   0x12
c0024e1e:	56                   	push   esi
c0024e1f:	53                   	push   ebx
c0024e20:	e8 5b fc ff ff       	call   c0024a80 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024e25:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024e29:	83 c4 20             	add    esp,0x20
c0024e2c:	83 e0 7f             	and    eax,0x7f
c0024e2f:	3c 70                	cmp    al,0x70
c0024e31:	74 15                	je     c0024e48 <ATAPI::detectMedia()+0x76>
c0024e33:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024e3a:	75 0c                	jne    c0024e48 <ATAPI::detectMedia()+0x76>
c0024e3c:	83 ec 0c             	sub    esp,0xc
c0024e3f:	53                   	push   ebx
c0024e40:	e8 5f ff ff ff       	call   c0024da4 <ATAPI::diskInserted()>
c0024e45:	83 c4 10             	add    esp,0x10
c0024e48:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024e4c:	83 e0 0f             	and    eax,0xf
c0024e4f:	3c 02                	cmp    al,0x2
c0024e51:	75 1b                	jne    c0024e6e <ATAPI::detectMedia()+0x9c>
c0024e53:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024e58:	75 2d                	jne    c0024e87 <ATAPI::detectMedia()+0xb5>
c0024e5a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024e61:	74 24                	je     c0024e87 <ATAPI::detectMedia()+0xb5>
c0024e63:	83 ec 0c             	sub    esp,0xc
c0024e66:	53                   	push   ebx
c0024e67:	e8 d4 fe ff ff       	call   c0024d40 <ATAPI::diskRemoved()>
c0024e6c:	eb 16                	jmp    c0024e84 <ATAPI::detectMedia()+0xb2>
c0024e6e:	84 c0                	test   al,al
c0024e70:	75 15                	jne    c0024e87 <ATAPI::detectMedia()+0xb5>
c0024e72:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024e79:	75 0c                	jne    c0024e87 <ATAPI::detectMedia()+0xb5>
c0024e7b:	83 ec 0c             	sub    esp,0xc
c0024e7e:	53                   	push   ebx
c0024e7f:	e8 20 ff ff ff       	call   c0024da4 <ATAPI::diskInserted()>
c0024e84:	83 c4 10             	add    esp,0x10
c0024e87:	83 c4 24             	add    esp,0x24
c0024e8a:	5b                   	pop    ebx
c0024e8b:	5e                   	pop    esi
c0024e8c:	c3                   	ret    
c0024e8d:	90                   	nop

c0024e8e <ATAPI::open(int, int, void*)>:
c0024e8e:	53                   	push   ebx
c0024e8f:	83 ec 08             	sub    esp,0x8
c0024e92:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024e96:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024e9a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024e9e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024ea4:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024eaa:	c1 e0 06             	shl    eax,0x6
c0024ead:	01 d0                	add    eax,edx
c0024eaf:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024eb6:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024ebc:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024ec3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024ecd:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024ed3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024eda:	6a 04                	push   0x4
c0024edc:	6a 0c                	push   0xc
c0024ede:	51                   	push   ecx
c0024edf:	52                   	push   edx
c0024ee0:	e8 3f e6 ff ff       	call   c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ee5:	90                   	nop
c0024ee6:	90                   	nop
c0024ee7:	6a 00                	push   0x0
c0024ee9:	6a 0c                	push   0xc
c0024eeb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ef2:	50                   	push   eax
c0024ef3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ef9:	e8 26 e6 ff ff       	call   c0023524 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024efe:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024f05:	83 c4 14             	add    esp,0x14
c0024f08:	53                   	push   ebx
c0024f09:	e8 c4 fe ff ff       	call   c0024dd2 <ATAPI::detectMedia()>
c0024f0e:	31 c0                	xor    eax,eax
c0024f10:	83 c4 18             	add    esp,0x18
c0024f13:	5b                   	pop    ebx
c0024f14:	c3                   	ret    
c0024f15:	90                   	nop

c0024f16 <ATAPI::read(unsigned long long, int, void*)>:
c0024f16:	55                   	push   ebp
c0024f17:	57                   	push   edi
c0024f18:	56                   	push   esi
c0024f19:	53                   	push   ebx
c0024f1a:	83 ec 1c             	sub    esp,0x1c
c0024f1d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024f21:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024f25:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024f29:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024f30:	74 41                	je     c0024f73 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024f32:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024f36:	b9 03 00 00 00       	mov    ecx,0x3
c0024f3b:	fc                   	cld    
c0024f3c:	31 c0                	xor    eax,eax
c0024f3e:	86 fb                	xchg   bl,bh
c0024f40:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024f42:	c1 c3 10             	rol    ebx,0x10
c0024f45:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024f4a:	89 e8                	mov    eax,ebp
c0024f4c:	86 fb                	xchg   bl,bh
c0024f4e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024f52:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024f56:	50                   	push   eax
c0024f57:	50                   	push   eax
c0024f58:	55                   	push   ebp
c0024f59:	c1 e5 0b             	shl    ebp,0xb
c0024f5c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024f60:	6a 00                	push   0x0
c0024f62:	55                   	push   ebp
c0024f63:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024f67:	50                   	push   eax
c0024f68:	56                   	push   esi
c0024f69:	e8 12 fb ff ff       	call   c0024a80 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024f6e:	83 c4 20             	add    esp,0x20
c0024f71:	eb 1a                	jmp    c0024f8d <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024f73:	83 ec 0c             	sub    esp,0xc
c0024f76:	56                   	push   esi
c0024f77:	e8 56 fe ff ff       	call   c0024dd2 <ATAPI::detectMedia()>
c0024f7c:	83 c4 10             	add    esp,0x10
c0024f7f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024f86:	75 aa                	jne    c0024f32 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024f88:	b8 02 00 00 00       	mov    eax,0x2
c0024f8d:	83 c4 1c             	add    esp,0x1c
c0024f90:	5b                   	pop    ebx
c0024f91:	5e                   	pop    esi
c0024f92:	5f                   	pop    edi
c0024f93:	5d                   	pop    ebp
c0024f94:	c3                   	ret    
c0024f95:	90                   	nop

c0024f96 <SATA::close(int, int, void*)>:
c0024f96:	83 ec 0c             	sub    esp,0xc
c0024f99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f9d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024fa3:	85 c0                	test   eax,eax
c0024fa5:	74 0c                	je     c0024fb3 <SATA::close(int, int, void*)+0x1d>
c0024fa7:	83 ec 0c             	sub    esp,0xc
c0024faa:	8b 10                	mov    edx,DWORD PTR [eax]
c0024fac:	50                   	push   eax
c0024fad:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024fb0:	83 c4 10             	add    esp,0x10
c0024fb3:	31 c0                	xor    eax,eax
c0024fb5:	83 c4 0c             	add    esp,0xc
c0024fb8:	c3                   	ret    
c0024fb9:	90                   	nop

c0024fba <SATA::powerSaving(PowerSavingLevel)>:
c0024fba:	c3                   	ret    
c0024fbb:	90                   	nop

c0024fbc <SATA::open(int, int, void*)>:
c0024fbc:	56                   	push   esi
c0024fbd:	53                   	push   ebx
c0024fbe:	50                   	push   eax
c0024fbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024fc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024fc7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024fd1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024fd7:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024fe1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024fe5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024fef:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024ff5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024ffc:	e8 64 ad fe ff       	call   c000fd65 <Phys::allocatePage()>
c0025001:	89 c6                	mov    esi,eax
c0025003:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025009:	81 c6 00 10 00 00    	add    esi,0x1000
c002500f:	e8 51 ad fe ff       	call   c000fd65 <Phys::allocatePage()>
c0025014:	39 c6                	cmp    esi,eax
c0025016:	74 10                	je     c0025028 <SATA::open(int, int, void*)+0x6c>
c0025018:	83 ec 0c             	sub    esp,0xc
c002501b:	68 f0 ce 02 c0       	push   0xc002cef0
c0025020:	e8 3a 53 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c0025025:	83 c4 10             	add    esp,0x10
c0025028:	83 ec 0c             	sub    esp,0xc
c002502b:	6a 02                	push   0x2
c002502d:	e8 bd c5 fe ff       	call   c00115ef <Virt::allocateKernelVirtualPages(int)>
c0025032:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025038:	6a 03                	push   0x3
c002503a:	50                   	push   eax
c002503b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0025041:	ff 35 70 e7 02 c0    	push   DWORD PTR ds:0xc002e770
c0025047:	e8 4a cc fe ff       	call   c0011c96 <VAS::mapPage(unsigned long, unsigned long, int)>
c002504c:	83 c4 14             	add    esp,0x14
c002504f:	53                   	push   ebx
c0025050:	e8 43 f2 fe ff       	call   c0014298 <PhysicalDisk::startCache()>
c0025055:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025058:	e8 c3 14 ff ff       	call   c0016520 <createPartitionsForDisk(PhysicalDisk*)>
c002505d:	83 c4 14             	add    esp,0x14
c0025060:	31 c0                	xor    eax,eax
c0025062:	5b                   	pop    ebx
c0025063:	5e                   	pop    esi
c0025064:	c3                   	ret    
c0025065:	90                   	nop

c0025066 <SATA::SATA()>:
c0025066:	83 ec 0c             	sub    esp,0xc
c0025069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002506d:	83 ec 04             	sub    esp,0x4
c0025070:	68 00 02 00 00       	push   0x200
c0025075:	68 04 cf 02 c0       	push   0xc002cf04
c002507a:	50                   	push   eax
c002507b:	e8 b0 f1 fe ff       	call   c0014230 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025080:	83 c4 10             	add    esp,0x10
c0025083:	ba 74 cf 02 c0       	mov    edx,0xc002cf74
c0025088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002508c:	89 10                	mov    DWORD PTR [eax],edx
c002508e:	90                   	nop
c002508f:	83 c4 0c             	add    esp,0xc
c0025092:	c3                   	ret    
c0025093:	90                   	nop

c0025094 <SATA::access(unsigned long long, int, void*, bool)>:
c0025094:	55                   	push   ebp
c0025095:	57                   	push   edi
c0025096:	56                   	push   esi
c0025097:	53                   	push   ebx
c0025098:	83 ec 2c             	sub    esp,0x2c
c002509b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002509f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00250a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00250a7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00250ab:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00250af:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00250b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00250b8:	7e 10                	jle    c00250ca <SATA::access(unsigned long long, int, void*, bool)+0x36>
c00250ba:	83 ec 0c             	sub    esp,0xc
c00250bd:	68 14 cf 02 c0       	push   0xc002cf14
c00250c2:	e8 98 52 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c00250c7:	83 c4 10             	add    esp,0x10
c00250ca:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00250d0:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00250d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00250dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00250e0:	89 d0                	mov    eax,edx
c00250e2:	c1 e0 07             	shl    eax,0x7
c00250e5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00250e9:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00250f3:	51                   	push   ecx
c00250f4:	8d 42 02             	lea    eax,[edx+0x2]
c00250f7:	51                   	push   ecx
c00250f8:	c1 e0 07             	shl    eax,0x7
c00250fb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00250ff:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025103:	50                   	push   eax
c0025104:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002510a:	e8 97 ef ff ff       	call   c00240a6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002510f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025113:	83 c4 10             	add    esp,0x10
c0025116:	b8 01 00 00 00       	mov    eax,0x1
c002511b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025120:	0f 84 cb 01 00 00    	je     c00252f1 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025126:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002512a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002512e:	c1 e0 09             	shl    eax,0x9
c0025131:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025136:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002513a:	74 0e                	je     c002514a <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c002513c:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0025142:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0025146:	89 c1                	mov    ecx,eax
c0025148:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002514a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002514e:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0025154:	8d 42 02             	lea    eax,[edx+0x2]
c0025157:	c1 e0 07             	shl    eax,0x7
c002515a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002515e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025160:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025166:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002516c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025170:	c1 e1 05             	shl    ecx,0x5
c0025173:	01 c8                	add    eax,ecx
c0025175:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0025179:	83 e1 01             	and    ecx,0x1
c002517c:	89 ce                	mov    esi,ecx
c002517e:	8a 08                	mov    cl,BYTE PTR [eax]
c0025180:	c1 e6 06             	shl    esi,0x6
c0025183:	83 e1 bf             	and    ecx,0xffffffbf
c0025186:	09 f1                	or     ecx,esi
c0025188:	88 08                	mov    BYTE PTR [eax],cl
c002518a:	8b 08                	mov    ecx,DWORD PTR [eax]
c002518c:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0025192:	81 c9 05 00 01 00    	or     ecx,0x10005
c0025198:	89 08                	mov    DWORD PTR [eax],ecx
c002519a:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00251a0:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c00251a6:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c00251ac:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c00251af:	50                   	push   eax
c00251b0:	68 90 00 00 00       	push   0x90
c00251b5:	6a 00                	push   0x0
c00251b7:	56                   	push   esi
c00251b8:	e8 93 b5 fd ff       	call   c0000750 <memset>
c00251bd:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00251c3:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c00251c7:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c00251cd:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c00251d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00251d5:	83 c4 10             	add    esp,0x10
c00251d8:	48                   	dec    eax
c00251d9:	25 ff ff 3f 00       	and    eax,0x3fffff
c00251de:	89 c1                	mov    ecx,eax
c00251e0:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c00251e6:	25 00 00 c0 ff       	and    eax,0xffc00000
c00251eb:	09 c8                	or     eax,ecx
c00251ed:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c00251f3:	66 8b 06             	mov    ax,WORD PTR [esi]
c00251f6:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c00251fd:	66 25 00 7f          	and    ax,0x7f00
c0025201:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025205:	66 0d 27 80          	or     ax,0x8027
c0025209:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c002520e:	66 89 06             	mov    WORD PTR [esi],ax
c0025211:	19 c0                	sbb    eax,eax
c0025213:	83 e0 f0             	and    eax,0xfffffff0
c0025216:	83 c0 35             	add    eax,0x35
c0025219:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002521c:	89 e8                	mov    eax,ebp
c002521e:	c1 e8 10             	shr    eax,0x10
c0025221:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0025224:	89 e8                	mov    eax,ebp
c0025226:	c1 e8 18             	shr    eax,0x18
c0025229:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002522c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0025230:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0025233:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025237:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002523a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002523e:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0025242:	89 d6                	mov    esi,edx
c0025244:	31 c0                	xor    eax,eax
c0025246:	c1 e6 07             	shl    esi,0x7
c0025249:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c002524d:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0025253:	80 e1 88             	and    cl,0x88
c0025256:	74 0a                	je     c0025262 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0025258:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002525d:	74 0a                	je     c0025269 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c002525f:	40                   	inc    eax
c0025260:	eb eb                	jmp    c002524d <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0025262:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025267:	75 0a                	jne    c0025273 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0025269:	83 ec 0c             	sub    esp,0xc
c002526c:	68 4d cf 02 c0       	push   0xc002cf4d
c0025271:	eb 56                	jmp    c00252c9 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0025273:	b8 01 00 00 00       	mov    eax,0x1
c0025278:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002527c:	c1 e2 07             	shl    edx,0x7
c002527f:	d3 e0                	shl    eax,cl
c0025281:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0025285:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002528b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0025291:	85 c8                	test   eax,ecx
c0025293:	74 20                	je     c00252b5 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0025295:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002529b:	0f ba e1 1e          	bt     ecx,0x1e
c002529f:	73 ea                	jae    c002528b <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c00252a1:	83 ec 0c             	sub    esp,0xc
c00252a4:	68 5b cf 02 c0       	push   0xc002cf5b
c00252a9:	e8 b1 50 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c00252ae:	83 c4 10             	add    esp,0x10
c00252b1:	31 c0                	xor    eax,eax
c00252b3:	eb 3c                	jmp    c00252f1 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00252b5:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c00252bb:	0f ba e0 1e          	bt     eax,0x1e
c00252bf:	73 17                	jae    c00252d8 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c00252c1:	83 ec 0c             	sub    esp,0xc
c00252c4:	68 5b cf 02 c0       	push   0xc002cf5b
c00252c9:	e8 91 50 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c00252ce:	83 c4 10             	add    esp,0x10
c00252d1:	b8 01 00 00 00       	mov    eax,0x1
c00252d6:	eb 19                	jmp    c00252f1 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00252d8:	31 c0                	xor    eax,eax
c00252da:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00252df:	75 10                	jne    c00252f1 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00252e1:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c00252e7:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00252eb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00252ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00252f1:	83 c4 2c             	add    esp,0x2c
c00252f4:	5b                   	pop    ebx
c00252f5:	5e                   	pop    esi
c00252f6:	5f                   	pop    edi
c00252f7:	5d                   	pop    ebp
c00252f8:	c3                   	ret    
c00252f9:	90                   	nop

c00252fa <SATA::read(unsigned long long, int, void*)>:
c00252fa:	57                   	push   edi
c00252fb:	b8 04 00 00 00       	mov    eax,0x4
c0025300:	56                   	push   esi
c0025301:	53                   	push   ebx
c0025302:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025306:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002530a:	8d 7a ff             	lea    edi,[edx-0x1]
c002530d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0025311:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0025315:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002531b:	77 25                	ja     c0025342 <SATA::read(unsigned long long, int, void*)+0x48>
c002531d:	b8 06 00 00 00       	mov    eax,0x6
c0025322:	85 f6                	test   esi,esi
c0025324:	74 1c                	je     c0025342 <SATA::read(unsigned long long, int, void*)+0x48>
c0025326:	50                   	push   eax
c0025327:	50                   	push   eax
c0025328:	6a 00                	push   0x0
c002532a:	56                   	push   esi
c002532b:	52                   	push   edx
c002532c:	53                   	push   ebx
c002532d:	51                   	push   ecx
c002532e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025332:	e8 5d fd ff ff       	call   c0025094 <SATA::access(unsigned long long, int, void*, bool)>
c0025337:	83 c4 20             	add    esp,0x20
c002533a:	85 c0                	test   eax,eax
c002533c:	0f 95 c0             	setne  al
c002533f:	0f b6 c0             	movzx  eax,al
c0025342:	5b                   	pop    ebx
c0025343:	5e                   	pop    esi
c0025344:	5f                   	pop    edi
c0025345:	c3                   	ret    

c0025346 <SATA::write(unsigned long long, int, void*)>:
c0025346:	55                   	push   ebp
c0025347:	b8 04 00 00 00       	mov    eax,0x4
c002534c:	57                   	push   edi
c002534d:	56                   	push   esi
c002534e:	53                   	push   ebx
c002534f:	83 ec 0c             	sub    esp,0xc
c0025352:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025356:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002535a:	8d 73 ff             	lea    esi,[ebx-0x1]
c002535d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025361:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025365:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002536b:	77 3d                	ja     c00253aa <SATA::write(unsigned long long, int, void*)+0x64>
c002536d:	b8 06 00 00 00       	mov    eax,0x6
c0025372:	85 ed                	test   ebp,ebp
c0025374:	74 34                	je     c00253aa <SATA::write(unsigned long long, int, void*)+0x64>
c0025376:	c1 e3 09             	shl    ebx,0x9
c0025379:	01 eb                	add    ebx,ebp
c002537b:	89 d6                	mov    esi,edx
c002537d:	89 cf                	mov    edi,ecx
c002537f:	83 c6 01             	add    esi,0x1
c0025382:	83 d7 00             	adc    edi,0x0
c0025385:	50                   	push   eax
c0025386:	50                   	push   eax
c0025387:	6a 01                	push   0x1
c0025389:	55                   	push   ebp
c002538a:	81 c5 00 02 00 00    	add    ebp,0x200
c0025390:	6a 01                	push   0x1
c0025392:	51                   	push   ecx
c0025393:	52                   	push   edx
c0025394:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025398:	e8 f7 fc ff ff       	call   c0025094 <SATA::access(unsigned long long, int, void*, bool)>
c002539d:	83 c4 20             	add    esp,0x20
c00253a0:	89 f2                	mov    edx,esi
c00253a2:	89 f9                	mov    ecx,edi
c00253a4:	39 dd                	cmp    ebp,ebx
c00253a6:	75 d3                	jne    c002537b <SATA::write(unsigned long long, int, void*)+0x35>
c00253a8:	31 c0                	xor    eax,eax
c00253aa:	83 c4 0c             	add    esp,0xc
c00253ad:	5b                   	pop    ebx
c00253ae:	5e                   	pop    esi
c00253af:	5f                   	pop    edi
c00253b0:	5d                   	pop    ebp
c00253b1:	c3                   	ret    

c00253b2 <SATAPI::write(unsigned long long, int, void*)>:
c00253b2:	b8 03 00 00 00       	mov    eax,0x3
c00253b7:	c3                   	ret    

c00253b8 <SATAPI::close(int, int, void*)>:
c00253b8:	83 ec 0c             	sub    esp,0xc
c00253bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253bf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00253c5:	85 c0                	test   eax,eax
c00253c7:	74 0c                	je     c00253d5 <SATAPI::close(int, int, void*)+0x1d>
c00253c9:	83 ec 0c             	sub    esp,0xc
c00253cc:	8b 10                	mov    edx,DWORD PTR [eax]
c00253ce:	50                   	push   eax
c00253cf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00253d2:	83 c4 10             	add    esp,0x10
c00253d5:	31 c0                	xor    eax,eax
c00253d7:	83 c4 0c             	add    esp,0xc
c00253da:	c3                   	ret    
c00253db:	90                   	nop

c00253dc <SATAPI::SATAPI()>:
c00253dc:	83 ec 0c             	sub    esp,0xc
c00253df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253e3:	83 ec 04             	sub    esp,0x4
c00253e6:	68 00 08 00 00       	push   0x800
c00253eb:	68 a4 cf 02 c0       	push   0xc002cfa4
c00253f0:	50                   	push   eax
c00253f1:	e8 3a ee fe ff       	call   c0014230 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00253f6:	83 c4 10             	add    esp,0x10
c00253f9:	ba 50 d0 02 c0       	mov    edx,0xc002d050
c00253fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025402:	89 10                	mov    DWORD PTR [eax],edx
c0025404:	90                   	nop
c0025405:	83 c4 0c             	add    esp,0xc
c0025408:	c3                   	ret    
c0025409:	90                   	nop

c002540a <SATAPI::diskRemoved()>:
c002540a:	83 ec 18             	sub    esp,0x18
c002540d:	68 b0 cf 02 c0       	push   0xc002cfb0
c0025412:	e8 aa d5 fe ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0025417:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002541b:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025422:	83 c4 1c             	add    esp,0x1c
c0025425:	c3                   	ret    

c0025426 <SATAPI::diskInserted()>:
c0025426:	53                   	push   ebx
c0025427:	83 ec 14             	sub    esp,0x14
c002542a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002542e:	68 c7 cf 02 c0       	push   0xc002cfc7
c0025433:	e8 89 d5 fe ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0025438:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c002543f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025442:	e8 51 ee fe ff       	call   c0014298 <PhysicalDisk::startCache()>
c0025447:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002544b:	83 c4 18             	add    esp,0x18
c002544e:	5b                   	pop    ebx
c002544f:	e9 cc 10 ff ff       	jmp    c0016520 <createPartitionsForDisk(PhysicalDisk*)>

c0025454 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025454:	55                   	push   ebp
c0025455:	57                   	push   edi
c0025456:	56                   	push   esi
c0025457:	53                   	push   ebx
c0025458:	83 ec 34             	sub    esp,0x34
c002545b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002545f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025463:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0025467:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002546b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002546f:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0025475:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002547b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002547f:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0025485:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025489:	c1 e0 07             	shl    eax,0x7
c002548c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025490:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025494:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002549e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254a2:	8d 58 02             	lea    ebx,[eax+0x2]
c00254a5:	c1 e3 07             	shl    ebx,0x7
c00254a8:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00254ac:	53                   	push   ebx
c00254ad:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00254b3:	e8 ee eb ff ff       	call   c00240a6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00254b8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00254bc:	83 c4 10             	add    esp,0x10
c00254bf:	b8 01 00 00 00       	mov    eax,0x1
c00254c4:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00254c9:	0f 84 85 01 00 00    	je     c0025654 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c00254cf:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00254d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00254d7:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00254dd:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00254e3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00254e7:	c1 e1 05             	shl    ecx,0x5
c00254ea:	01 c8                	add    eax,ecx
c00254ec:	8b 08                	mov    ecx,DWORD PTR [eax]
c00254ee:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00254f4:	81 c9 25 00 01 00    	or     ecx,0x10025
c00254fa:	89 08                	mov    DWORD PTR [eax],ecx
c00254fc:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025502:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025508:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002550e:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025511:	8d 7b 40             	lea    edi,[ebx+0x40]
c0025514:	50                   	push   eax
c0025515:	68 90 00 00 00       	push   0x90
c002551a:	6a 00                	push   0x0
c002551c:	53                   	push   ebx
c002551d:	e8 2e b2 fd ff       	call   c0000750 <memset>
c0025522:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0025526:	b9 0c 00 00 00       	mov    ecx,0xc
c002552b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002552d:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0025533:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025537:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002553d:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025541:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025545:	48                   	dec    eax
c0025546:	25 ff ff 3f 00       	and    eax,0x3fffff
c002554b:	89 c1                	mov    ecx,eax
c002554d:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025553:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025558:	09 c8                	or     eax,ecx
c002555a:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025560:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025563:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c002556a:	66 25 00 7f          	and    ax,0x7f00
c002556e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0025572:	66 0d 27 80          	or     ax,0x8027
c0025576:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c002557a:	66 89 03             	mov    WORD PTR [ebx],ax
c002557d:	89 d0                	mov    eax,edx
c002557f:	c1 ea 18             	shr    edx,0x18
c0025582:	c1 e8 10             	shr    eax,0x10
c0025585:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025588:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002558b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002558f:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025592:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025596:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025599:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002559d:	83 c4 10             	add    esp,0x10
c00255a0:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00255a4:	31 c0                	xor    eax,eax
c00255a6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00255aa:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c00255b0:	80 e2 88             	and    dl,0x88
c00255b3:	74 0a                	je     c00255bf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00255b5:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00255ba:	74 0a                	je     c00255c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c00255bc:	40                   	inc    eax
c00255bd:	eb eb                	jmp    c00255aa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c00255bf:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00255c4:	75 0f                	jne    c00255d5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c00255c6:	83 ec 0c             	sub    esp,0xc
c00255c9:	68 4d cf 02 c0       	push   0xc002cf4d
c00255ce:	e8 8c 4d ff ff       	call   c001a35f <Krnl::panic(char const*)>
c00255d3:	eb 3f                	jmp    c0025614 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c00255d5:	ba 01 00 00 00       	mov    edx,0x1
c00255da:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00255de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00255e2:	d3 e2                	shl    edx,cl
c00255e4:	c1 e0 07             	shl    eax,0x7
c00255e7:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c00255ed:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00255f1:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c00255f7:	85 ca                	test   edx,ecx
c00255f9:	74 23                	je     c002561e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c00255fb:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025601:	0f ba e1 1e          	bt     ecx,0x1e
c0025605:	73 ea                	jae    c00255f1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025607:	83 ec 0c             	sub    esp,0xc
c002560a:	68 df cf 02 c0       	push   0xc002cfdf
c002560f:	e8 ad d3 fe ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0025614:	83 c4 10             	add    esp,0x10
c0025617:	b8 01 00 00 00       	mov    eax,0x1
c002561c:	eb 36                	jmp    c0025654 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c002561e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025624:	0f ba e0 1e          	bt     eax,0x1e
c0025628:	73 0a                	jae    c0025634 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c002562a:	83 ec 0c             	sub    esp,0xc
c002562d:	68 f2 cf 02 c0       	push   0xc002cff2
c0025632:	eb db                	jmp    c002560f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025634:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025639:	74 17                	je     c0025652 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c002563b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025640:	74 10                	je     c0025652 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025642:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025648:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002564c:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025650:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025652:	31 c0                	xor    eax,eax
c0025654:	83 c4 2c             	add    esp,0x2c
c0025657:	5b                   	pop    ebx
c0025658:	5e                   	pop    esi
c0025659:	5f                   	pop    edi
c002565a:	5d                   	pop    ebp
c002565b:	c3                   	ret    

c002565c <SATAPI::eject()>:
c002565c:	57                   	push   edi
c002565d:	b9 03 00 00 00       	mov    ecx,0x3
c0025662:	53                   	push   ebx
c0025663:	83 ec 14             	sub    esp,0x14
c0025666:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002566a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002566e:	fc                   	cld    
c002566f:	31 c0                	xor    eax,eax
c0025671:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025673:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025678:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002567d:	50                   	push   eax
c002567e:	6a 00                	push   0x0
c0025680:	6a 00                	push   0x0
c0025682:	6a 00                	push   0x0
c0025684:	6a 00                	push   0x0
c0025686:	6a 02                	push   0x2
c0025688:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002568c:	50                   	push   eax
c002568d:	53                   	push   ebx
c002568e:	e8 c1 fd ff ff       	call   c0025454 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025693:	83 c4 14             	add    esp,0x14
c0025696:	53                   	push   ebx
c0025697:	e8 6e fd ff ff       	call   c002540a <SATAPI::diskRemoved()>
c002569c:	83 c4 24             	add    esp,0x24
c002569f:	31 c0                	xor    eax,eax
c00256a1:	5b                   	pop    ebx
c00256a2:	5f                   	pop    edi
c00256a3:	c3                   	ret    

c00256a4 <SATAPI::detectMedia()>:
c00256a4:	56                   	push   esi
c00256a5:	53                   	push   ebx
c00256a6:	83 ec 28             	sub    esp,0x28
c00256a9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00256ad:	6a 0c                	push   0xc
c00256af:	6a 00                	push   0x0
c00256b1:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00256b5:	56                   	push   esi
c00256b6:	e8 95 b0 fd ff       	call   c0000750 <memset>
c00256bb:	83 c4 0c             	add    esp,0xc
c00256be:	6a 00                	push   0x0
c00256c0:	6a 00                	push   0x0
c00256c2:	6a 00                	push   0x0
c00256c4:	6a 00                	push   0x0
c00256c6:	6a 00                	push   0x0
c00256c8:	56                   	push   esi
c00256c9:	53                   	push   ebx
c00256ca:	e8 85 fd ff ff       	call   c0025454 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00256cf:	83 c4 1c             	add    esp,0x1c
c00256d2:	6a 0c                	push   0xc
c00256d4:	6a 00                	push   0x0
c00256d6:	56                   	push   esi
c00256d7:	e8 74 b0 fd ff       	call   c0000750 <memset>
c00256dc:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00256e1:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00256e6:	83 c4 0c             	add    esp,0xc
c00256e9:	6a 01                	push   0x1
c00256eb:	8d 44 24 16          	lea    eax,[esp+0x16]
c00256ef:	50                   	push   eax
c00256f0:	6a 00                	push   0x0
c00256f2:	6a 00                	push   0x0
c00256f4:	6a 12                	push   0x12
c00256f6:	56                   	push   esi
c00256f7:	53                   	push   ebx
c00256f8:	e8 57 fd ff ff       	call   c0025454 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00256fd:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025701:	83 c4 20             	add    esp,0x20
c0025704:	83 e0 7f             	and    eax,0x7f
c0025707:	3c 70                	cmp    al,0x70
c0025709:	74 15                	je     c0025720 <SATAPI::detectMedia()+0x7c>
c002570b:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025712:	75 0c                	jne    c0025720 <SATAPI::detectMedia()+0x7c>
c0025714:	83 ec 0c             	sub    esp,0xc
c0025717:	53                   	push   ebx
c0025718:	e8 09 fd ff ff       	call   c0025426 <SATAPI::diskInserted()>
c002571d:	83 c4 10             	add    esp,0x10
c0025720:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025724:	83 e0 0f             	and    eax,0xf
c0025727:	3c 02                	cmp    al,0x2
c0025729:	75 1b                	jne    c0025746 <SATAPI::detectMedia()+0xa2>
c002572b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025730:	75 2d                	jne    c002575f <SATAPI::detectMedia()+0xbb>
c0025732:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025739:	74 24                	je     c002575f <SATAPI::detectMedia()+0xbb>
c002573b:	83 ec 0c             	sub    esp,0xc
c002573e:	53                   	push   ebx
c002573f:	e8 c6 fc ff ff       	call   c002540a <SATAPI::diskRemoved()>
c0025744:	eb 16                	jmp    c002575c <SATAPI::detectMedia()+0xb8>
c0025746:	84 c0                	test   al,al
c0025748:	75 15                	jne    c002575f <SATAPI::detectMedia()+0xbb>
c002574a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025751:	75 0c                	jne    c002575f <SATAPI::detectMedia()+0xbb>
c0025753:	83 ec 0c             	sub    esp,0xc
c0025756:	53                   	push   ebx
c0025757:	e8 ca fc ff ff       	call   c0025426 <SATAPI::diskInserted()>
c002575c:	83 c4 10             	add    esp,0x10
c002575f:	83 c4 24             	add    esp,0x24
c0025762:	5b                   	pop    ebx
c0025763:	5e                   	pop    esi
c0025764:	c3                   	ret    
c0025765:	90                   	nop

c0025766 <SATAPI::open(int, int, void*)>:
c0025766:	56                   	push   esi
c0025767:	53                   	push   ebx
c0025768:	50                   	push   eax
c0025769:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002576d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025771:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002577b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025781:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002578b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002578f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025799:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002579f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00257a6:	e8 ba a5 fe ff       	call   c000fd65 <Phys::allocatePage()>
c00257ab:	89 c6                	mov    esi,eax
c00257ad:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00257b3:	81 c6 00 10 00 00    	add    esi,0x1000
c00257b9:	e8 a7 a5 fe ff       	call   c000fd65 <Phys::allocatePage()>
c00257be:	39 c6                	cmp    esi,eax
c00257c0:	74 10                	je     c00257d2 <SATAPI::open(int, int, void*)+0x6c>
c00257c2:	83 ec 0c             	sub    esp,0xc
c00257c5:	68 07 d0 02 c0       	push   0xc002d007
c00257ca:	e8 90 4b ff ff       	call   c001a35f <Krnl::panic(char const*)>
c00257cf:	83 c4 10             	add    esp,0x10
c00257d2:	83 ec 0c             	sub    esp,0xc
c00257d5:	6a 02                	push   0x2
c00257d7:	e8 13 be fe ff       	call   c00115ef <Virt::allocateKernelVirtualPages(int)>
c00257dc:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00257e2:	6a 03                	push   0x3
c00257e4:	50                   	push   eax
c00257e5:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00257eb:	ff 35 70 e7 02 c0    	push   DWORD PTR ds:0xc002e770
c00257f1:	e8 a0 c4 fe ff       	call   c0011c96 <VAS::mapPage(unsigned long, unsigned long, int)>
c00257f6:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00257fd:	83 c4 14             	add    esp,0x14
c0025800:	53                   	push   ebx
c0025801:	e8 9e fe ff ff       	call   c00256a4 <SATAPI::detectMedia()>
c0025806:	83 c4 14             	add    esp,0x14
c0025809:	31 c0                	xor    eax,eax
c002580b:	5b                   	pop    ebx
c002580c:	5e                   	pop    esi
c002580d:	c3                   	ret    

c002580e <SATAPI::read(unsigned long long, int, void*)>:
c002580e:	55                   	push   ebp
c002580f:	57                   	push   edi
c0025810:	56                   	push   esi
c0025811:	53                   	push   ebx
c0025812:	83 ec 1c             	sub    esp,0x1c
c0025815:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025819:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002581d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025821:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025828:	74 19                	je     c0025843 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002582a:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c002582f:	7e 2e                	jle    c002585f <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025831:	83 ec 0c             	sub    esp,0xc
c0025834:	68 1d d0 02 c0       	push   0xc002d01d
c0025839:	e8 21 4b ff ff       	call   c001a35f <Krnl::panic(char const*)>
c002583e:	83 c4 10             	add    esp,0x10
c0025841:	eb 1c                	jmp    c002585f <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025843:	83 ec 0c             	sub    esp,0xc
c0025846:	55                   	push   ebp
c0025847:	e8 58 fe ff ff       	call   c00256a4 <SATAPI::detectMedia()>
c002584c:	83 c4 10             	add    esp,0x10
c002584f:	b8 02 00 00 00       	mov    eax,0x2
c0025854:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002585b:	75 cd                	jne    c002582a <SATAPI::read(unsigned long long, int, void*)+0x1c>
c002585d:	eb 49                	jmp    c00258a8 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c002585f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025863:	b9 03 00 00 00       	mov    ecx,0x3
c0025868:	fc                   	cld    
c0025869:	31 c0                	xor    eax,eax
c002586b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002586d:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025872:	89 d8                	mov    eax,ebx
c0025874:	86 e0                	xchg   al,ah
c0025876:	c1 c0 10             	rol    eax,0x10
c0025879:	86 e0                	xchg   al,ah
c002587b:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c002587f:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025883:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025887:	50                   	push   eax
c0025888:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002588c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025890:	56                   	push   esi
c0025891:	53                   	push   ebx
c0025892:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025896:	c1 e0 0b             	shl    eax,0xb
c0025899:	50                   	push   eax
c002589a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002589e:	50                   	push   eax
c002589f:	55                   	push   ebp
c00258a0:	e8 af fb ff ff       	call   c0025454 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00258a5:	83 c4 20             	add    esp,0x20
c00258a8:	83 c4 1c             	add    esp,0x1c
c00258ab:	5b                   	pop    ebx
c00258ac:	5e                   	pop    esi
c00258ad:	5f                   	pop    edi
c00258ae:	5d                   	pop    ebp
c00258af:	c3                   	ret    

c00258b0 <AVX::open(int, int, void*)>:
c00258b0:	83 ec 0c             	sub    esp,0xc
c00258b3:	e8 40 11 00 00       	call   c00269f8 <avxInit>
c00258b8:	b8 00 00 00 00       	mov    eax,0x0
c00258bd:	83 c4 0c             	add    esp,0xc
c00258c0:	c3                   	ret    
c00258c1:	90                   	nop

c00258c2 <AVX::close(int, int, void*)>:
c00258c2:	83 ec 0c             	sub    esp,0xc
c00258c5:	e8 2f 11 00 00       	call   c00269f9 <avxClose>
c00258ca:	b8 00 00 00 00       	mov    eax,0x0
c00258cf:	83 c4 0c             	add    esp,0xc
c00258d2:	c3                   	ret    
c00258d3:	90                   	nop

c00258d4 <AVX::available()>:
c00258d4:	83 ec 0c             	sub    esp,0xc
c00258d7:	e8 14 11 00 00       	call   c00269f0 <avxDetect>
c00258dc:	85 c0                	test   eax,eax
c00258de:	0f 95 c0             	setne  al
c00258e1:	83 c4 0c             	add    esp,0xc
c00258e4:	c3                   	ret    
c00258e5:	90                   	nop

c00258e6 <AVX::save(void*)>:
c00258e6:	83 ec 0c             	sub    esp,0xc
c00258e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00258ed:	83 ec 0c             	sub    esp,0xc
c00258f0:	50                   	push   eax
c00258f1:	e8 00 11 00 00       	call   c00269f6 <avxSave>
c00258f6:	83 c4 10             	add    esp,0x10
c00258f9:	90                   	nop
c00258fa:	83 c4 0c             	add    esp,0xc
c00258fd:	c3                   	ret    

c00258fe <AVX::load(void*)>:
c00258fe:	83 ec 0c             	sub    esp,0xc
c0025901:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025905:	83 ec 0c             	sub    esp,0xc
c0025908:	50                   	push   eax
c0025909:	e8 e9 10 00 00       	call   c00269f7 <avxLoad>
c002590e:	83 c4 10             	add    esp,0x10
c0025911:	90                   	nop
c0025912:	83 c4 0c             	add    esp,0xc
c0025915:	c3                   	ret    

c0025916 <AVX::AVX()>:
c0025916:	83 ec 0c             	sub    esp,0xc
c0025919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002591d:	83 ec 08             	sub    esp,0x8
c0025920:	68 80 d0 02 c0       	push   0xc002d080
c0025925:	50                   	push   eax
c0025926:	e8 e3 e9 fe ff       	call   c001430e <FPU::FPU(char const*)>
c002592b:	83 c4 10             	add    esp,0x10
c002592e:	ba 90 d0 02 c0       	mov    edx,0xc002d090
c0025933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025937:	89 10                	mov    DWORD PTR [eax],edx
c0025939:	90                   	nop
c002593a:	83 c4 0c             	add    esp,0xc
c002593d:	c3                   	ret    

c002593e <MMX::available()>:
c002593e:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0025943:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025949:	83 e0 20             	and    eax,0x20
c002594c:	84 c0                	test   al,al
c002594e:	0f 95 c0             	setne  al
c0025951:	c3                   	ret    

c0025952 <MMX::open(int, int, void*)>:
c0025952:	83 ec 0c             	sub    esp,0xc
c0025955:	e8 28 11 00 00       	call   c0026a82 <x87Init>
c002595a:	b8 00 00 00 00       	mov    eax,0x0
c002595f:	83 c4 0c             	add    esp,0xc
c0025962:	c3                   	ret    
c0025963:	90                   	nop

c0025964 <MMX::close(int, int, void*)>:
c0025964:	83 ec 0c             	sub    esp,0xc
c0025967:	e8 30 11 00 00       	call   c0026a9c <x87Close>
c002596c:	b8 00 00 00 00       	mov    eax,0x0
c0025971:	83 c4 0c             	add    esp,0xc
c0025974:	c3                   	ret    
c0025975:	90                   	nop

c0025976 <MMX::save(void*)>:
c0025976:	83 ec 0c             	sub    esp,0xc
c0025979:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002597d:	83 ec 0c             	sub    esp,0xc
c0025980:	50                   	push   eax
c0025981:	e8 eb 10 00 00       	call   c0026a71 <x87Save>
c0025986:	83 c4 10             	add    esp,0x10
c0025989:	90                   	nop
c002598a:	83 c4 0c             	add    esp,0xc
c002598d:	c3                   	ret    

c002598e <MMX::load(void*)>:
c002598e:	83 ec 0c             	sub    esp,0xc
c0025991:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025995:	83 ec 0c             	sub    esp,0xc
c0025998:	50                   	push   eax
c0025999:	e8 dc 10 00 00       	call   c0026a7a <x87Load>
c002599e:	83 c4 10             	add    esp,0x10
c00259a1:	90                   	nop
c00259a2:	83 c4 0c             	add    esp,0xc
c00259a5:	c3                   	ret    

c00259a6 <MMX::MMX()>:
c00259a6:	83 ec 0c             	sub    esp,0xc
c00259a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259ad:	83 ec 08             	sub    esp,0x8
c00259b0:	68 c0 d0 02 c0       	push   0xc002d0c0
c00259b5:	50                   	push   eax
c00259b6:	e8 53 e9 fe ff       	call   c001430e <FPU::FPU(char const*)>
c00259bb:	83 c4 10             	add    esp,0x10
c00259be:	ba d0 d0 02 c0       	mov    edx,0xc002d0d0
c00259c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259c7:	89 10                	mov    DWORD PTR [eax],edx
c00259c9:	90                   	nop
c00259ca:	83 c4 0c             	add    esp,0xc
c00259cd:	c3                   	ret    

c00259ce <SSE::open(int, int, void*)>:
c00259ce:	83 ec 0c             	sub    esp,0xc
c00259d1:	e8 5e 10 00 00       	call   c0026a34 <sseInit>
c00259d6:	b8 00 00 00 00       	mov    eax,0x0
c00259db:	83 c4 0c             	add    esp,0xc
c00259de:	c3                   	ret    
c00259df:	90                   	nop

c00259e0 <SSE::close(int, int, void*)>:
c00259e0:	83 ec 0c             	sub    esp,0xc
c00259e3:	e8 5c 10 00 00       	call   c0026a44 <sseClose>
c00259e8:	b8 00 00 00 00       	mov    eax,0x0
c00259ed:	83 c4 0c             	add    esp,0xc
c00259f0:	c3                   	ret    
c00259f1:	90                   	nop

c00259f2 <SSE::available()>:
c00259f2:	83 ec 1c             	sub    esp,0x1c
c00259f5:	e8 16 10 00 00       	call   c0026a10 <absolutelyNoChanceInHell>
c00259fa:	85 c0                	test   eax,eax
c00259fc:	0f 95 c0             	setne  al
c00259ff:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025a03:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025a07:	83 c4 1c             	add    esp,0x1c
c0025a0a:	c3                   	ret    
c0025a0b:	90                   	nop

c0025a0c <SSE::save(void*)>:
c0025a0c:	83 ec 0c             	sub    esp,0xc
c0025a0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025a13:	83 ec 0c             	sub    esp,0xc
c0025a16:	50                   	push   eax
c0025a17:	e8 0c 10 00 00       	call   c0026a28 <sseSave>
c0025a1c:	83 c4 10             	add    esp,0x10
c0025a1f:	90                   	nop
c0025a20:	83 c4 0c             	add    esp,0xc
c0025a23:	c3                   	ret    

c0025a24 <SSE::load(void*)>:
c0025a24:	83 ec 0c             	sub    esp,0xc
c0025a27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025a2b:	83 ec 0c             	sub    esp,0xc
c0025a2e:	50                   	push   eax
c0025a2f:	e8 fa 0f 00 00       	call   c0026a2e <sseLoad>
c0025a34:	83 c4 10             	add    esp,0x10
c0025a37:	90                   	nop
c0025a38:	83 c4 0c             	add    esp,0xc
c0025a3b:	c3                   	ret    

c0025a3c <SSE::SSE()>:
c0025a3c:	83 ec 0c             	sub    esp,0xc
c0025a3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a43:	83 ec 08             	sub    esp,0x8
c0025a46:	68 00 d1 02 c0       	push   0xc002d100
c0025a4b:	50                   	push   eax
c0025a4c:	e8 bd e8 fe ff       	call   c001430e <FPU::FPU(char const*)>
c0025a51:	83 c4 10             	add    esp,0x10
c0025a54:	ba 10 d1 02 c0       	mov    edx,0xc002d110
c0025a59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a5d:	89 10                	mov    DWORD PTR [eax],edx
c0025a5f:	90                   	nop
c0025a60:	83 c4 0c             	add    esp,0xc
c0025a63:	c3                   	ret    

c0025a64 <x87::open(int, int, void*)>:
c0025a64:	83 ec 0c             	sub    esp,0xc
c0025a67:	e8 16 10 00 00       	call   c0026a82 <x87Init>
c0025a6c:	b8 00 00 00 00       	mov    eax,0x0
c0025a71:	83 c4 0c             	add    esp,0xc
c0025a74:	c3                   	ret    
c0025a75:	90                   	nop

c0025a76 <x87::close(int, int, void*)>:
c0025a76:	83 ec 0c             	sub    esp,0xc
c0025a79:	e8 1e 10 00 00       	call   c0026a9c <x87Close>
c0025a7e:	b8 00 00 00 00       	mov    eax,0x0
c0025a83:	83 c4 0c             	add    esp,0xc
c0025a86:	c3                   	ret    
c0025a87:	90                   	nop

c0025a88 <x87::available()>:
c0025a88:	83 ec 0c             	sub    esp,0xc
c0025a8b:	e8 c6 0f 00 00       	call   c0026a56 <x87Detect>
c0025a90:	85 c0                	test   eax,eax
c0025a92:	0f 95 c0             	setne  al
c0025a95:	83 c4 0c             	add    esp,0xc
c0025a98:	c3                   	ret    
c0025a99:	90                   	nop

c0025a9a <x87::save(void*)>:
c0025a9a:	83 ec 0c             	sub    esp,0xc
c0025a9d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025aa1:	83 ec 0c             	sub    esp,0xc
c0025aa4:	50                   	push   eax
c0025aa5:	e8 c7 0f 00 00       	call   c0026a71 <x87Save>
c0025aaa:	83 c4 10             	add    esp,0x10
c0025aad:	90                   	nop
c0025aae:	83 c4 0c             	add    esp,0xc
c0025ab1:	c3                   	ret    

c0025ab2 <x87::load(void*)>:
c0025ab2:	83 ec 0c             	sub    esp,0xc
c0025ab5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ab9:	83 ec 0c             	sub    esp,0xc
c0025abc:	50                   	push   eax
c0025abd:	e8 b8 0f 00 00       	call   c0026a7a <x87Load>
c0025ac2:	83 c4 10             	add    esp,0x10
c0025ac5:	90                   	nop
c0025ac6:	83 c4 0c             	add    esp,0xc
c0025ac9:	c3                   	ret    

c0025aca <x87::x87()>:
c0025aca:	83 ec 0c             	sub    esp,0xc
c0025acd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ad1:	83 ec 08             	sub    esp,0x8
c0025ad4:	68 40 d1 02 c0       	push   0xc002d140
c0025ad9:	50                   	push   eax
c0025ada:	e8 2f e8 fe ff       	call   c001430e <FPU::FPU(char const*)>
c0025adf:	83 c4 10             	add    esp,0x10
c0025ae2:	ba 50 d1 02 c0       	mov    edx,0xc002d150
c0025ae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aeb:	89 10                	mov    DWORD PTR [eax],edx
c0025aed:	90                   	nop
c0025aee:	83 c4 0c             	add    esp,0xc
c0025af1:	c3                   	ret    

c0025af2 <APIC::disable()>:
c0025af2:	90                   	nop
c0025af3:	c3                   	ret    

c0025af4 <APIC::close(int, int, void*)>:
c0025af4:	55                   	push   ebp
c0025af5:	89 e5                	mov    ebp,esp
c0025af7:	83 ec 08             	sub    esp,0x8
c0025afa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025afd:	8b 00                	mov    eax,DWORD PTR [eax]
c0025aff:	83 c0 3c             	add    eax,0x3c
c0025b02:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b04:	83 ec 0c             	sub    esp,0xc
c0025b07:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b0a:	ff d0                	call   eax
c0025b0c:	83 c4 10             	add    esp,0x10
c0025b0f:	b8 00 00 00 00       	mov    eax,0x0
c0025b14:	c9                   	leave  
c0025b15:	c3                   	ret    

c0025b16 <IOAPIC::close(int, int, void*)>:
c0025b16:	b8 00 00 00 00       	mov    eax,0x0
c0025b1b:	c3                   	ret    

c0025b1c <APIC::io_wait()>:
c0025b1c:	eb 00                	jmp    c0025b1e <APIC::io_wait()+0x2>
c0025b1e:	eb 00                	jmp    c0025b20 <APIC::io_wait()+0x4>
c0025b20:	90                   	nop
c0025b21:	c3                   	ret    

c0025b22 <APIC::getBase()>:
c0025b22:	55                   	push   ebp
c0025b23:	89 e5                	mov    ebp,esp
c0025b25:	83 ec 18             	sub    esp,0x18
c0025b28:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0025b2d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025b33:	83 e0 08             	and    eax,0x8
c0025b36:	84 c0                	test   al,al
c0025b38:	75 07                	jne    c0025b41 <APIC::getBase()+0x1f>
c0025b3a:	b8 00 00 00 00       	mov    eax,0x0
c0025b3f:	eb 21                	jmp    c0025b62 <APIC::getBase()+0x40>
c0025b41:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0025b46:	83 ec 08             	sub    esp,0x8
c0025b49:	6a 1b                	push   0x1b
c0025b4b:	50                   	push   eax
c0025b4c:	e8 31 92 fe ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c0025b51:	83 c4 10             	add    esp,0x10
c0025b54:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025b57:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025b5a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025b5d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025b62:	c9                   	leave  
c0025b63:	c3                   	ret    

c0025b64 <APIC::eoi(unsigned char)>:
c0025b64:	55                   	push   ebp
c0025b65:	89 e5                	mov    ebp,esp
c0025b67:	83 ec 28             	sub    esp,0x28
c0025b6a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b6d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025b70:	83 ec 0c             	sub    esp,0xc
c0025b73:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b76:	e8 a7 ff ff ff       	call   c0025b22 <APIC::getBase()>
c0025b7b:	83 c4 10             	add    esp,0x10
c0025b7e:	05 b0 00 00 00       	add    eax,0xb0
c0025b83:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025b86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025b89:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025b8f:	90                   	nop
c0025b90:	c9                   	leave  
c0025b91:	c3                   	ret    

c0025b92 <APIC::open(int, int, void*)>:
c0025b92:	55                   	push   ebp
c0025b93:	89 e5                	mov    ebp,esp
c0025b95:	57                   	push   edi
c0025b96:	56                   	push   esi
c0025b97:	53                   	push   ebx
c0025b98:	83 ec 2c             	sub    esp,0x2c
c0025b9b:	83 ec 0c             	sub    esp,0xc
c0025b9e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ba1:	e8 7c ff ff ff       	call   c0025b22 <APIC::getBase()>
c0025ba6:	83 c4 10             	add    esp,0x10
c0025ba9:	89 c2                	mov    edx,eax
c0025bab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bae:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025bb4:	0f b6 f8             	movzx  edi,al
c0025bb7:	89 d0                	mov    eax,edx
c0025bb9:	ba 00 00 00 00       	mov    edx,0x0
c0025bbe:	89 c1                	mov    ecx,eax
c0025bc0:	80 e5 ff             	and    ch,0xff
c0025bc3:	89 cb                	mov    ebx,ecx
c0025bc5:	0f b6 f2             	movzx  esi,dl
c0025bc8:	89 d8                	mov    eax,ebx
c0025bca:	89 f2                	mov    edx,esi
c0025bcc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025bcf:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025bd2:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025bd6:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025bda:	83 e0 00             	and    eax,0x0
c0025bdd:	09 d0                	or     eax,edx
c0025bdf:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025be3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025be6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025bec:	8d 50 01             	lea    edx,[eax+0x1]
c0025bef:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025bf2:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025bf8:	0f b6 d0             	movzx  edx,al
c0025bfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bfe:	83 c2 08             	add    edx,0x8
c0025c01:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025c05:	0f b6 c9             	movzx  ecx,cl
c0025c08:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025c0e:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025c12:	83 ec 0c             	sub    esp,0xc
c0025c15:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c18:	e8 05 ff ff ff       	call   c0025b22 <APIC::getBase()>
c0025c1d:	83 c4 10             	add    esp,0x10
c0025c20:	05 f0 00 00 00       	add    eax,0xf0
c0025c25:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025c28:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025c2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c2d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025c30:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025c37:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025c3e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025c41:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025c44:	89 10                	mov    DWORD PTR [eax],edx
c0025c46:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025c4d:	a1 b0 ee 02 c0       	mov    eax,ds:0xc002eeb0
c0025c52:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025c55:	7d 7c                	jge    c0025cd3 <APIC::open(int, int, void*)+0x141>
c0025c57:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025c5a:	8b 04 85 c0 ee 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1140]
c0025c61:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025c64:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025c67:	8b 04 85 c0 ee 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1140]
c0025c6e:	c1 e8 08             	shr    eax,0x8
c0025c71:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025c75:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025c78:	8b 04 85 c0 ee 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1140]
c0025c7f:	c1 e8 18             	shr    eax,0x18
c0025c82:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025c85:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025c89:	75 40                	jne    c0025ccb <APIC::open(int, int, void*)+0x139>
c0025c8b:	83 ec 0c             	sub    esp,0xc
c0025c8e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c91:	e8 8c fe ff ff       	call   c0025b22 <APIC::getBase()>
c0025c96:	83 c4 10             	add    esp,0x10
c0025c99:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025c9d:	75 07                	jne    c0025ca6 <APIC::open(int, int, void*)+0x114>
c0025c9f:	ba 60 03 00 00       	mov    edx,0x360
c0025ca4:	eb 05                	jmp    c0025cab <APIC::open(int, int, void*)+0x119>
c0025ca6:	ba 50 03 00 00       	mov    edx,0x350
c0025cab:	01 d0                	add    eax,edx
c0025cad:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025cb0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025cb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0025cb5:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025cb8:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025cbf:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025cc3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025cc6:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025cc9:	89 10                	mov    DWORD PTR [eax],edx
c0025ccb:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025cce:	e9 7a ff ff ff       	jmp    c0025c4d <APIC::open(int, int, void*)+0xbb>
c0025cd3:	b8 00 00 00 00       	mov    eax,0x0
c0025cd8:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025cdb:	5b                   	pop    ebx
c0025cdc:	5e                   	pop    esi
c0025cdd:	5f                   	pop    edi
c0025cde:	5d                   	pop    ebp
c0025cdf:	c3                   	ret    

c0025ce0 <IOAPIC::IOAPIC()>:
c0025ce0:	83 ec 0c             	sub    esp,0xc
c0025ce3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ce7:	83 ec 08             	sub    esp,0x8
c0025cea:	68 80 d1 02 c0       	push   0xc002d180
c0025cef:	50                   	push   eax
c0025cf0:	e8 09 e3 fe ff       	call   c0013ffe <Device::Device(char const*)>
c0025cf5:	83 c4 10             	add    esp,0x10
c0025cf8:	ba a8 d2 02 c0       	mov    edx,0xc002d2a8
c0025cfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d01:	89 10                	mov    DWORD PTR [eax],edx
c0025d03:	90                   	nop
c0025d04:	83 c4 0c             	add    esp,0xc
c0025d07:	c3                   	ret    

c0025d08 <APIC::APIC()>:
c0025d08:	53                   	push   ebx
c0025d09:	83 ec 18             	sub    esp,0x18
c0025d0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025d10:	83 ec 08             	sub    esp,0x8
c0025d13:	68 88 d1 02 c0       	push   0xc002d188
c0025d18:	50                   	push   eax
c0025d19:	e8 4a ea fe ff       	call   c0014768 <InterruptController::InterruptController(char const*)>
c0025d1e:	83 c4 10             	add    esp,0x10
c0025d21:	ba 60 d2 02 c0       	mov    edx,0xc002d260
c0025d26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025d2a:	89 10                	mov    DWORD PTR [eax],edx
c0025d2c:	a0 80 09 03 c0       	mov    al,ds:0xc0030980
c0025d31:	83 f0 01             	xor    eax,0x1
c0025d34:	84 c0                	test   al,al
c0025d36:	0f 84 a1 00 00 00    	je     c0025ddd <APIC::APIC()+0xd5>
c0025d3c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025d41:	a0 60 ef 02 c0       	mov    al,ds:0xc002ef60
c0025d46:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025d4a:	0f 83 86 00 00 00    	jae    c0025dd6 <APIC::APIC()+0xce>
c0025d50:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025d58:	83 ec 0c             	sub    esp,0xc
c0025d5b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025d5f:	e8 05 9c fe ff       	call   c000f969 <malloc>
c0025d64:	83 c4 10             	add    esp,0x10
c0025d67:	89 c3                	mov    ebx,eax
c0025d69:	83 ec 0c             	sub    esp,0xc
c0025d6c:	53                   	push   ebx
c0025d6d:	e8 6e ff ff ff       	call   c0025ce0 <IOAPIC::IOAPIC()>
c0025d72:	83 c4 10             	add    esp,0x10
c0025d75:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025d79:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025d7e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025d82:	89 14 85 60 09 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf6a0],edx
c0025d89:	a1 40 09 03 c0       	mov    eax,ds:0xc0030940
c0025d8e:	40                   	inc    eax
c0025d8f:	a3 40 09 03 c0       	mov    ds:0xc0030940,eax
c0025d94:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0025d99:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025d9f:	83 ec 08             	sub    esp,0x8
c0025da2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025da6:	50                   	push   eax
c0025da7:	e8 4e e0 fe ff       	call   c0013dfa <Device::addChild(Device*)>
c0025dac:	83 c4 10             	add    esp,0x10
c0025daf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025db3:	8b 00                	mov    eax,DWORD PTR [eax]
c0025db5:	83 c0 08             	add    eax,0x8
c0025db8:	8b 00                	mov    eax,DWORD PTR [eax]
c0025dba:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025dbf:	6a 00                	push   0x0
c0025dc1:	6a 00                	push   0x0
c0025dc3:	52                   	push   edx
c0025dc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025dc8:	ff d0                	call   eax
c0025dca:	83 c4 10             	add    esp,0x10
c0025dcd:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025dd1:	e9 6b ff ff ff       	jmp    c0025d41 <APIC::APIC()+0x39>
c0025dd6:	c6 05 80 09 03 c0 01 	mov    BYTE PTR ds:0xc0030980,0x1
c0025ddd:	90                   	nop
c0025dde:	83 c4 18             	add    esp,0x18
c0025de1:	5b                   	pop    ebx
c0025de2:	c3                   	ret    
c0025de3:	90                   	nop

c0025de4 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025de4:	55                   	push   ebp
c0025de5:	89 e5                	mov    ebp,esp
c0025de7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025dea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025df0:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025df3:	72 1d                	jb     c0025e12 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025df5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025df8:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025dfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e01:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025e07:	01 d0                	add    eax,edx
c0025e09:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025e0c:	73 04                	jae    c0025e12 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025e0e:	b0 01                	mov    al,0x1
c0025e10:	eb 02                	jmp    c0025e14 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025e12:	b0 00                	mov    al,0x0
c0025e14:	5d                   	pop    ebp
c0025e15:	c3                   	ret    

c0025e16 <IOAPIC::read(int)>:
c0025e16:	55                   	push   ebp
c0025e17:	89 e5                	mov    ebp,esp
c0025e19:	83 ec 10             	sub    esp,0x10
c0025e1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e1f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025e25:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025e28:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e2b:	0f b6 d0             	movzx  edx,al
c0025e2e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025e31:	89 10                	mov    DWORD PTR [eax],edx
c0025e33:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025e36:	83 c0 10             	add    eax,0x10
c0025e39:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e3b:	c9                   	leave  
c0025e3c:	c3                   	ret    
c0025e3d:	90                   	nop

c0025e3e <IOAPIC::open(int, int, void*)>:
c0025e3e:	55                   	push   ebp
c0025e3f:	89 e5                	mov    ebp,esp
c0025e41:	57                   	push   edi
c0025e42:	56                   	push   esi
c0025e43:	53                   	push   ebx
c0025e44:	83 ec 0c             	sub    esp,0xc
c0025e47:	83 ec 0c             	sub    esp,0xc
c0025e4a:	68 b3 d1 02 c0       	push   0xc002d1b3
c0025e4f:	e8 6d cb fe ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c0025e54:	83 c4 10             	add    esp,0x10
c0025e57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e5a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e5d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025e63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e66:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025e6c:	8b 14 85 a0 ef 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1060]
c0025e73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e76:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025e7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e7f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025e85:	8b 14 85 20 f0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0fe0]
c0025e8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e8f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025e95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e98:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025e9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ea1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025ea7:	0f b6 f8             	movzx  edi,al
c0025eaa:	89 d0                	mov    eax,edx
c0025eac:	ba 00 00 00 00       	mov    edx,0x0
c0025eb1:	89 c1                	mov    ecx,eax
c0025eb3:	80 e5 ff             	and    ch,0xff
c0025eb6:	89 cb                	mov    ebx,ecx
c0025eb8:	0f b6 f2             	movzx  esi,dl
c0025ebb:	89 d8                	mov    eax,ebx
c0025ebd:	89 f2                	mov    edx,esi
c0025ebf:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025ec2:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025ec5:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025ec9:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025ecd:	83 e0 00             	and    eax,0x0
c0025ed0:	09 d0                	or     eax,edx
c0025ed2:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025ed6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ed9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025edf:	8d 50 01             	lea    edx,[eax+0x1]
c0025ee2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025ee5:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025eeb:	0f b6 d0             	movzx  edx,al
c0025eee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ef1:	83 c2 08             	add    edx,0x8
c0025ef4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025ef8:	0f b6 c9             	movzx  ecx,cl
c0025efb:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025f01:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025f05:	83 ec 08             	sub    esp,0x8
c0025f08:	6a 01                	push   0x1
c0025f0a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f0d:	e8 04 ff ff ff       	call   c0025e16 <IOAPIC::read(int)>
c0025f12:	83 c4 10             	add    esp,0x10
c0025f15:	c1 f8 10             	sar    eax,0x10
c0025f18:	0f b6 c0             	movzx  eax,al
c0025f1b:	8d 50 01             	lea    edx,[eax+0x1]
c0025f1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f21:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025f27:	b8 00 00 00 00       	mov    eax,0x0
c0025f2c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025f2f:	5b                   	pop    ebx
c0025f30:	5e                   	pop    esi
c0025f31:	5f                   	pop    edi
c0025f32:	5d                   	pop    ebp
c0025f33:	c3                   	ret    

c0025f34 <IOAPIC::write(int, int)>:
c0025f34:	55                   	push   ebp
c0025f35:	89 e5                	mov    ebp,esp
c0025f37:	83 ec 10             	sub    esp,0x10
c0025f3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f3d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025f43:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025f46:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f49:	0f b6 d0             	movzx  edx,al
c0025f4c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025f4f:	89 10                	mov    DWORD PTR [eax],edx
c0025f51:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025f54:	8d 50 10             	lea    edx,[eax+0x10]
c0025f57:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025f5a:	89 02                	mov    DWORD PTR [edx],eax
c0025f5c:	90                   	nop
c0025f5d:	c9                   	leave  
c0025f5e:	c3                   	ret    
c0025f5f:	90                   	nop

c0025f60 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025f60:	55                   	push   ebp
c0025f61:	89 e5                	mov    ebp,esp
c0025f63:	53                   	push   ebx
c0025f64:	83 ec 2c             	sub    esp,0x2c
c0025f67:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f6a:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025f6d:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025f70:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025f73:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025f76:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025f79:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025f7c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025f7f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025f82:	88 d8                	mov    al,bl
c0025f84:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025f87:	88 c8                	mov    al,cl
c0025f89:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025f8c:	88 d0                	mov    al,dl
c0025f8e:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025f91:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025f95:	83 c0 08             	add    eax,0x8
c0025f98:	01 c0                	add    eax,eax
c0025f9a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025f9d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025fa1:	83 c0 08             	add    eax,0x8
c0025fa4:	01 c0                	add    eax,eax
c0025fa6:	40                   	inc    eax
c0025fa7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025faa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025fad:	50                   	push   eax
c0025fae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fb1:	e8 60 fe ff ff       	call   c0025e16 <IOAPIC::read(int)>
c0025fb6:	83 c4 08             	add    esp,0x8
c0025fb9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025fbc:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025fc3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025fc6:	c1 e0 18             	shl    eax,0x18
c0025fc9:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025fcc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025fcf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025fd2:	52                   	push   edx
c0025fd3:	50                   	push   eax
c0025fd4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fd7:	e8 58 ff ff ff       	call   c0025f34 <IOAPIC::write(int, int)>
c0025fdc:	83 c4 0c             	add    esp,0xc
c0025fdf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025fe2:	50                   	push   eax
c0025fe3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fe6:	e8 2b fe ff ff       	call   c0025e16 <IOAPIC::read(int)>
c0025feb:	83 c4 08             	add    esp,0x8
c0025fee:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025ff1:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025ff8:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025fff:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0026006:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002600a:	74 09                	je     c0026015 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002600c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0026013:	eb 07                	jmp    c002601c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0026015:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002601c:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0026020:	74 09                	je     c002602b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0026022:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0026029:	eb 07                	jmp    c0026032 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c002602b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0026032:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0026039:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002603d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0026040:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0026043:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026046:	52                   	push   edx
c0026047:	50                   	push   eax
c0026048:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002604b:	e8 e4 fe ff ff       	call   c0025f34 <IOAPIC::write(int, int)>
c0026050:	83 c4 0c             	add    esp,0xc
c0026053:	90                   	nop
c0026054:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0026057:	c9                   	leave  
c0026058:	c3                   	ret    
c0026059:	90                   	nop

c002605a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002605a:	55                   	push   ebp
c002605b:	89 e5                	mov    ebp,esp
c002605d:	57                   	push   edi
c002605e:	56                   	push   esi
c002605f:	53                   	push   ebx
c0026060:	83 ec 2c             	sub    esp,0x2c
c0026063:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026066:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0026069:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002606d:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0026071:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026075:	74 5a                	je     c00260d1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026077:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c002607b:	7f 44                	jg     c00260c1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002607d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026080:	05 60 d8 02 c0       	add    eax,0xc002d860
c0026085:	8a 00                	mov    al,BYTE PTR [eax]
c0026087:	0f b6 c0             	movzx  eax,al
c002608a:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002608d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026090:	66 8b 84 00 40 ef 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd10c0]
c0026098:	0f b7 c0             	movzx  eax,ax
c002609b:	83 e0 02             	and    eax,0x2
c002609e:	85 c0                	test   eax,eax
c00260a0:	74 04                	je     c00260a6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00260a2:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00260a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00260a9:	66 8b 84 00 40 ef 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd10c0]
c00260b1:	0f b7 c0             	movzx  eax,ax
c00260b4:	83 e0 08             	and    eax,0x8
c00260b7:	85 c0                	test   eax,eax
c00260b9:	74 16                	je     c00260d1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00260bb:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00260bf:	eb 10                	jmp    c00260d1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00260c1:	83 ec 0c             	sub    esp,0xc
c00260c4:	68 c4 d1 02 c0       	push   0xc002d1c4
c00260c9:	e8 91 42 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c00260ce:	83 c4 10             	add    esp,0x10
c00260d1:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00260d5:	a1 40 09 03 c0       	mov    eax,ds:0xc0030940
c00260da:	83 ec 08             	sub    esp,0x8
c00260dd:	50                   	push   eax
c00260de:	68 fc d1 02 c0       	push   0xc002d1fc
c00260e3:	e8 d9 c8 fe ff       	call   c00129c1 <Dbg::kprintf(char const*, ...)>
c00260e8:	83 c4 10             	add    esp,0x10
c00260eb:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00260f2:	a1 40 09 03 c0       	mov    eax,ds:0xc0030940
c00260f7:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00260fa:	7d 67                	jge    c0026163 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00260fc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00260ff:	8b 04 85 60 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf6a0]
c0026106:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026109:	83 ec 08             	sub    esp,0x8
c002610c:	52                   	push   edx
c002610d:	50                   	push   eax
c002610e:	e8 d1 fc ff ff       	call   c0025de4 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0026113:	83 c4 10             	add    esp,0x10
c0026116:	84 c0                	test   al,al
c0026118:	74 44                	je     c002615e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c002611a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002611d:	8b 1c 85 60 09 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcf6a0]
c0026124:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0026128:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002612b:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c002612f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026132:	83 c0 20             	add    eax,0x20
c0026135:	0f b6 f0             	movzx  esi,al
c0026138:	b8 00 00 00 00       	mov    eax,0x0
c002613d:	99                   	cdq    
c002613e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026141:	0f b6 c9             	movzx  ecx,cl
c0026144:	83 ec 04             	sub    esp,0x4
c0026147:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002614a:	57                   	push   edi
c002614b:	56                   	push   esi
c002614c:	52                   	push   edx
c002614d:	50                   	push   eax
c002614e:	51                   	push   ecx
c002614f:	53                   	push   ebx
c0026150:	e8 0b fe ff ff       	call   c0025f60 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0026155:	83 c4 20             	add    esp,0x20
c0026158:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002615c:	eb 05                	jmp    c0026163 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002615e:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0026161:	eb 8f                	jmp    c00260f2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0026163:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0026166:	83 f0 01             	xor    eax,0x1
c0026169:	84 c0                	test   al,al
c002616b:	74 10                	je     c002617d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002616d:	83 ec 0c             	sub    esp,0xc
c0026170:	68 13 d2 02 c0       	push   0xc002d213
c0026175:	e8 e5 41 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c002617a:	83 c4 10             	add    esp,0x10
c002617d:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0026181:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0026188:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002618c:	7f 65                	jg     c00261f3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c002618e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026191:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026194:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002619b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002619e:	01 ca                	add    edx,ecx
c00261a0:	83 c2 54             	add    edx,0x54
c00261a3:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00261a7:	85 c0                	test   eax,eax
c00261a9:	75 43                	jne    c00261ee <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00261ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00261ae:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00261b1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00261b8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00261bb:	01 ca                	add    edx,ecx
c00261bd:	8d 4a 54             	lea    ecx,[edx+0x54]
c00261c0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00261c3:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00261c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00261ca:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00261cd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00261d4:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00261d7:	01 ca                	add    edx,ecx
c00261d9:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00261df:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00261e2:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00261e6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00261e9:	83 e8 20             	sub    eax,0x20
c00261ec:	eb 1a                	jmp    c0026208 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00261ee:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00261f1:	eb 95                	jmp    c0026188 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00261f3:	83 ec 0c             	sub    esp,0xc
c00261f6:	68 20 d2 02 c0       	push   0xc002d220
c00261fb:	e8 5f 41 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c0026200:	83 c4 10             	add    esp,0x10
c0026203:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026208:	8d 65 f4             	lea    esp,[ebp-0xc]
c002620b:	5b                   	pop    ebx
c002620c:	5e                   	pop    esi
c002620d:	5f                   	pop    edi
c002620e:	5d                   	pop    ebp
c002620f:	c3                   	ret    

c0026210 <PIC::disable()>:
c0026210:	55                   	push   ebp
c0026211:	89 e5                	mov    ebp,esp
c0026213:	83 ec 10             	sub    esp,0x10
c0026216:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c002621c:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0026220:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026223:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026227:	ee                   	out    dx,al
c0026228:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c002622e:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0026232:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026235:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0026239:	ee                   	out    dx,al
c002623a:	90                   	nop
c002623b:	c9                   	leave  
c002623c:	c3                   	ret    
c002623d:	90                   	nop

c002623e <PIC::close(int, int, void*)>:
c002623e:	55                   	push   ebp
c002623f:	89 e5                	mov    ebp,esp
c0026241:	83 ec 08             	sub    esp,0x8
c0026244:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026247:	8b 00                	mov    eax,DWORD PTR [eax]
c0026249:	83 c0 3c             	add    eax,0x3c
c002624c:	8b 00                	mov    eax,DWORD PTR [eax]
c002624e:	83 ec 0c             	sub    esp,0xc
c0026251:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026254:	ff d0                	call   eax
c0026256:	83 c4 10             	add    esp,0x10
c0026259:	b8 00 00 00 00       	mov    eax,0x0
c002625e:	c9                   	leave  
c002625f:	c3                   	ret    

c0026260 <PIC::PIC()>:
c0026260:	83 ec 0c             	sub    esp,0xc
c0026263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026267:	83 ec 08             	sub    esp,0x8
c002626a:	68 cc d2 02 c0       	push   0xc002d2cc
c002626f:	50                   	push   eax
c0026270:	e8 f3 e4 fe ff       	call   c0014768 <InterruptController::InterruptController(char const*)>
c0026275:	83 c4 10             	add    esp,0x10
c0026278:	ba f8 d2 02 c0       	mov    edx,0xc002d2f8
c002627d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026281:	89 10                	mov    DWORD PTR [eax],edx
c0026283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026287:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002628d:	0f b6 d0             	movzx  edx,al
c0026290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026294:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c002629b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002629f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00262a5:	0f b6 d0             	movzx  edx,al
c00262a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262ac:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00262b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262b5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00262bb:	8d 50 01             	lea    edx,[eax+0x1]
c00262be:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00262c2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00262c8:	0f b6 d0             	movzx  edx,al
c00262cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262cf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00262d3:	83 e1 3f             	and    ecx,0x3f
c00262d6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00262da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262de:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00262e4:	0f b6 d0             	movzx  edx,al
c00262e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262eb:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00262f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262f6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00262fc:	0f b6 d0             	movzx  edx,al
c00262ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026303:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002630c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026312:	8d 50 01             	lea    edx,[eax+0x1]
c0026315:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026319:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002631f:	0f b6 d0             	movzx  edx,al
c0026322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026326:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002632a:	83 e1 3f             	and    ecx,0x3f
c002632d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026331:	90                   	nop
c0026332:	83 c4 0c             	add    esp,0xc
c0026335:	c3                   	ret    

c0026336 <PIC::ioWait()>:
c0026336:	eb 00                	jmp    c0026338 <PIC::ioWait()+0x2>
c0026338:	eb 00                	jmp    c002633a <PIC::ioWait()+0x4>
c002633a:	90                   	nop
c002633b:	c3                   	ret    

c002633c <PIC::getIRQReg(int)>:
c002633c:	55                   	push   ebp
c002633d:	89 e5                	mov    ebp,esp
c002633f:	83 ec 10             	sub    esp,0x10
c0026342:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026345:	0f b6 c0             	movzx  eax,al
c0026348:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002634e:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026351:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026354:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026358:	ee                   	out    dx,al
c0026359:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002635c:	0f b6 c0             	movzx  eax,al
c002635f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026365:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026368:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002636b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002636f:	ee                   	out    dx,al
c0026370:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026376:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002637a:	89 c2                	mov    edx,eax
c002637c:	ec                   	in     al,dx
c002637d:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026380:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026383:	0f b6 c0             	movzx  eax,al
c0026386:	c1 e0 08             	shl    eax,0x8
c0026389:	89 c1                	mov    ecx,eax
c002638b:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026391:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026395:	89 c2                	mov    edx,eax
c0026397:	ec                   	in     al,dx
c0026398:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002639b:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002639e:	0f b6 c0             	movzx  eax,al
c00263a1:	09 c8                	or     eax,ecx
c00263a3:	c9                   	leave  
c00263a4:	c3                   	ret    
c00263a5:	90                   	nop

c00263a6 <PIC::eoi(unsigned char)>:
c00263a6:	55                   	push   ebp
c00263a7:	89 e5                	mov    ebp,esp
c00263a9:	83 ec 14             	sub    esp,0x14
c00263ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00263af:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00263b2:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00263b6:	75 1e                	jne    c00263d6 <PIC::eoi(unsigned char)+0x30>
c00263b8:	6a 0b                	push   0xb
c00263ba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263bd:	e8 7a ff ff ff       	call   c002633c <PIC::getIRQReg(int)>
c00263c2:	83 c4 08             	add    esp,0x8
c00263c5:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00263c9:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00263cd:	25 80 00 00 00       	and    eax,0x80
c00263d2:	85 c0                	test   eax,eax
c00263d4:	74 5f                	je     c0026435 <PIC::eoi(unsigned char)+0x8f>
c00263d6:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00263da:	75 2d                	jne    c0026409 <PIC::eoi(unsigned char)+0x63>
c00263dc:	6a 0b                	push   0xb
c00263de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263e1:	e8 56 ff ff ff       	call   c002633c <PIC::getIRQReg(int)>
c00263e6:	83 c4 08             	add    esp,0x8
c00263e9:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00263ed:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00263f0:	66 85 c0             	test   ax,ax
c00263f3:	78 14                	js     c0026409 <PIC::eoi(unsigned char)+0x63>
c00263f5:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00263fb:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00263ff:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026402:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026406:	ee                   	out    dx,al
c0026407:	eb 2d                	jmp    c0026436 <PIC::eoi(unsigned char)+0x90>
c0026409:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002640d:	76 12                	jbe    c0026421 <PIC::eoi(unsigned char)+0x7b>
c002640f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026415:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026419:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002641c:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026420:	ee                   	out    dx,al
c0026421:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026427:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002642b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002642e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026432:	ee                   	out    dx,al
c0026433:	eb 01                	jmp    c0026436 <PIC::eoi(unsigned char)+0x90>
c0026435:	90                   	nop
c0026436:	c9                   	leave  
c0026437:	c3                   	ret    

c0026438 <PIC::remap()>:
c0026438:	55                   	push   ebp
c0026439:	89 e5                	mov    ebp,esp
c002643b:	83 ec 48             	sub    esp,0x48
c002643e:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026445:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002644c:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026452:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026455:	89 c2                	mov    edx,eax
c0026457:	ec                   	in     al,dx
c0026458:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002645b:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c002645e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026461:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026467:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002646a:	89 c2                	mov    edx,eax
c002646c:	ec                   	in     al,dx
c002646d:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026470:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026473:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026476:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002647c:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026480:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026483:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026486:	ee                   	out    dx,al
c0026487:	83 ec 0c             	sub    esp,0xc
c002648a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002648d:	e8 a4 fe ff ff       	call   c0026336 <PIC::ioWait()>
c0026492:	83 c4 10             	add    esp,0x10
c0026495:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002649b:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c002649f:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00264a2:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00264a5:	ee                   	out    dx,al
c00264a6:	83 ec 0c             	sub    esp,0xc
c00264a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264ac:	e8 85 fe ff ff       	call   c0026336 <PIC::ioWait()>
c00264b1:	83 c4 10             	add    esp,0x10
c00264b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00264b7:	0f b6 c0             	movzx  eax,al
c00264ba:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00264c0:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00264c3:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00264c6:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00264c9:	ee                   	out    dx,al
c00264ca:	83 ec 0c             	sub    esp,0xc
c00264cd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264d0:	e8 61 fe ff ff       	call   c0026336 <PIC::ioWait()>
c00264d5:	83 c4 10             	add    esp,0x10
c00264d8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00264db:	0f b6 c0             	movzx  eax,al
c00264de:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00264e4:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00264e7:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00264ea:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00264ed:	ee                   	out    dx,al
c00264ee:	83 ec 0c             	sub    esp,0xc
c00264f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264f4:	e8 3d fe ff ff       	call   c0026336 <PIC::ioWait()>
c00264f9:	83 c4 10             	add    esp,0x10
c00264fc:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026502:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026506:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026509:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c002650c:	ee                   	out    dx,al
c002650d:	83 ec 0c             	sub    esp,0xc
c0026510:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026513:	e8 1e fe ff ff       	call   c0026336 <PIC::ioWait()>
c0026518:	83 c4 10             	add    esp,0x10
c002651b:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026521:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026525:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026528:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002652b:	ee                   	out    dx,al
c002652c:	83 ec 0c             	sub    esp,0xc
c002652f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026532:	e8 ff fd ff ff       	call   c0026336 <PIC::ioWait()>
c0026537:	83 c4 10             	add    esp,0x10
c002653a:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026540:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026544:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026547:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002654a:	ee                   	out    dx,al
c002654b:	83 ec 0c             	sub    esp,0xc
c002654e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026551:	e8 e0 fd ff ff       	call   c0026336 <PIC::ioWait()>
c0026556:	83 c4 10             	add    esp,0x10
c0026559:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c002655f:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026563:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026566:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026569:	ee                   	out    dx,al
c002656a:	83 ec 0c             	sub    esp,0xc
c002656d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026570:	e8 c1 fd ff ff       	call   c0026336 <PIC::ioWait()>
c0026575:	83 c4 10             	add    esp,0x10
c0026578:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c002657c:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026582:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026585:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026588:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002658b:	ee                   	out    dx,al
c002658c:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026590:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026596:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026599:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c002659c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002659f:	ee                   	out    dx,al
c00265a0:	90                   	nop
c00265a1:	c9                   	leave  
c00265a2:	c3                   	ret    
c00265a3:	90                   	nop

c00265a4 <PIC::open(int, int, void*)>:
c00265a4:	55                   	push   ebp
c00265a5:	89 e5                	mov    ebp,esp
c00265a7:	83 ec 18             	sub    esp,0x18
c00265aa:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00265b0:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00265b4:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00265b7:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00265bb:	ee                   	out    dx,al
c00265bc:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00265c2:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00265c6:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00265c9:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00265cd:	ee                   	out    dx,al
c00265ce:	83 ec 0c             	sub    esp,0xc
c00265d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00265d4:	e8 5f fe ff ff       	call   c0026438 <PIC::remap()>
c00265d9:	83 c4 10             	add    esp,0x10
c00265dc:	b8 00 00 00 00       	mov    eax,0x0
c00265e1:	c9                   	leave  
c00265e2:	c3                   	ret    
c00265e3:	90                   	nop

c00265e4 <APICTimer::close(int, int, void*)>:
c00265e4:	b8 00 00 00 00       	mov    eax,0x0
c00265e9:	c3                   	ret    

c00265ea <apicTimerHandler(regs*, void*)>:
c00265ea:	83 ec 0c             	sub    esp,0xc
c00265ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00265f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00265f3:	99                   	cdq    
c00265f4:	52                   	push   edx
c00265f5:	50                   	push   eax
c00265f6:	6a 00                	push   0x0
c00265f8:	68 00 ca 9a 3b       	push   0x3b9aca00
c00265fd:	e8 92 07 00 00       	call   c0026d94 <__udivdi3>
c0026602:	83 c4 10             	add    esp,0x10
c0026605:	83 ec 08             	sub    esp,0x8
c0026608:	52                   	push   edx
c0026609:	50                   	push   eax
c002660a:	e8 b6 02 ff ff       	call   c00168c5 <timerHandler(unsigned long long)>
c002660f:	83 c4 10             	add    esp,0x10
c0026612:	90                   	nop
c0026613:	83 c4 0c             	add    esp,0xc
c0026616:	c3                   	ret    
c0026617:	90                   	nop

c0026618 <APICTimer::write(int)>:
c0026618:	53                   	push   ebx
c0026619:	83 ec 28             	sub    esp,0x28
c002661c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026620:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026624:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002662a:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c002662f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026635:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002663b:	83 ec 0c             	sub    esp,0xc
c002663e:	50                   	push   eax
c002663f:	e8 de f4 ff ff       	call   c0025b22 <APIC::getBase()>
c0026644:	83 c4 10             	add    esp,0x10
c0026647:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002664b:	a1 70 ec 02 c0       	mov    eax,ds:0xc002ec70
c0026650:	8b 15 74 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec74
c0026656:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002665a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002665e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026662:	05 e0 03 00 00       	add    eax,0x3e0
c0026667:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002666d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026671:	05 80 03 00 00       	add    eax,0x380
c0026676:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c002667c:	fb                   	sti    
c002667d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026681:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026685:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c002668a:	83 d2 00             	adc    edx,0x0
c002668d:	89 c1                	mov    ecx,eax
c002668f:	89 d3                	mov    ebx,edx
c0026691:	a1 70 ec 02 c0       	mov    eax,ds:0xc002ec70
c0026696:	8b 15 74 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec74
c002669c:	39 c8                	cmp    eax,ecx
c002669e:	89 d0                	mov    eax,edx
c00266a0:	19 d8                	sbb    eax,ebx
c00266a2:	73 02                	jae    c00266a6 <APICTimer::write(int)+0x8e>
c00266a4:	eb d7                	jmp    c002667d <APICTimer::write(int)+0x65>
c00266a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00266aa:	05 20 03 00 00       	add    eax,0x320
c00266af:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00266b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00266b9:	05 90 03 00 00       	add    eax,0x390
c00266be:	8b 00                	mov    eax,DWORD PTR [eax]
c00266c0:	f7 d0                	not    eax
c00266c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00266c6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00266ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00266ce:	ba 00 00 00 00       	mov    edx,0x0
c00266d3:	f7 f3                	div    ebx
c00266d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00266d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00266dd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00266e3:	0d 00 00 02 00       	or     eax,0x20000
c00266e8:	89 c2                	mov    edx,eax
c00266ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00266ee:	05 20 03 00 00       	add    eax,0x320
c00266f3:	89 10                	mov    DWORD PTR [eax],edx
c00266f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00266f9:	05 e0 03 00 00       	add    eax,0x3e0
c00266fe:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026704:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026708:	05 80 03 00 00       	add    eax,0x380
c002670d:	89 c2                	mov    edx,eax
c002670f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026713:	89 02                	mov    DWORD PTR [edx],eax
c0026715:	90                   	nop
c0026716:	83 c4 28             	add    esp,0x28
c0026719:	5b                   	pop    ebx
c002671a:	c3                   	ret    
c002671b:	90                   	nop

c002671c <APICTimer::open(int, int, void*)>:
c002671c:	57                   	push   edi
c002671d:	56                   	push   esi
c002671e:	53                   	push   ebx
c002671f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026723:	8b 00                	mov    eax,DWORD PTR [eax]
c0026725:	83 c0 24             	add    eax,0x24
c0026728:	8b 00                	mov    eax,DWORD PTR [eax]
c002672a:	83 ec 08             	sub    esp,0x8
c002672d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026731:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026735:	ff d0                	call   eax
c0026737:	83 c4 10             	add    esp,0x10
c002673a:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c002673f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026745:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002674b:	83 ec 0c             	sub    esp,0xc
c002674e:	50                   	push   eax
c002674f:	e8 ce f3 ff ff       	call   c0025b22 <APIC::getBase()>
c0026754:	83 c4 10             	add    esp,0x10
c0026757:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c002675d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026761:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026767:	0f b6 f8             	movzx  edi,al
c002676a:	89 d0                	mov    eax,edx
c002676c:	ba 00 00 00 00       	mov    edx,0x0
c0026771:	89 c1                	mov    ecx,eax
c0026773:	80 e5 ff             	and    ch,0xff
c0026776:	89 cb                	mov    ebx,ecx
c0026778:	0f b6 f2             	movzx  esi,dl
c002677b:	89 d8                	mov    eax,ebx
c002677d:	89 f2                	mov    edx,esi
c002677f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026783:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026786:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002678a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002678e:	83 e0 00             	and    eax,0x0
c0026791:	09 d0                	or     eax,edx
c0026793:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002679b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00267a1:	8d 50 01             	lea    edx,[eax+0x1]
c00267a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00267a8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00267ae:	0f b6 d0             	movzx  edx,al
c00267b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267b5:	83 c2 08             	add    edx,0x8
c00267b8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00267bc:	0f b6 c9             	movzx  ecx,cl
c00267bf:	81 c9 00 00 01 00    	or     ecx,0x10000
c00267c5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00267c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267cd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00267d1:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00267d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00267df:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00267e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00267e9:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00267ef:	83 ec 0c             	sub    esp,0xc
c00267f2:	51                   	push   ecx
c00267f3:	6a 01                	push   0x1
c00267f5:	68 ea 65 02 c0       	push   0xc00265ea
c00267fa:	52                   	push   edx
c00267fb:	50                   	push   eax
c00267fc:	e8 71 d5 fe ff       	call   c0013d72 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026801:	83 c4 20             	add    esp,0x20
c0026804:	89 c2                	mov    edx,eax
c0026806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002680a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026810:	b8 00 00 00 00       	mov    eax,0x0
c0026815:	5b                   	pop    ebx
c0026816:	5e                   	pop    esi
c0026817:	5f                   	pop    edi
c0026818:	c3                   	ret    
c0026819:	90                   	nop

c002681a <APICTimer::APICTimer()>:
c002681a:	83 ec 0c             	sub    esp,0xc
c002681d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026821:	83 ec 08             	sub    esp,0x8
c0026824:	68 38 d3 02 c0       	push   0xc002d338
c0026829:	50                   	push   eax
c002682a:	e8 07 00 ff ff       	call   c0016836 <Timer::Timer(char const*)>
c002682f:	83 c4 10             	add    esp,0x10
c0026832:	ba 4c d3 02 c0       	mov    edx,0xc002d34c
c0026837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002683b:	89 10                	mov    DWORD PTR [eax],edx
c002683d:	90                   	nop
c002683e:	83 c4 0c             	add    esp,0xc
c0026841:	c3                   	ret    

c0026842 <PIT::write(int)>:
c0026842:	83 ec 10             	sub    esp,0x10
c0026845:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026849:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002684d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026853:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026857:	a3 84 09 03 c0       	mov    ds:0xc0030984,eax
c002685c:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026861:	99                   	cdq    
c0026862:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026866:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002686a:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026871:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026876:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002687a:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002687f:	ee                   	out    dx,al
c0026880:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026884:	0f b6 c0             	movzx  eax,al
c0026887:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002688e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026892:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026896:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002689b:	ee                   	out    dx,al
c002689c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00268a0:	c1 f8 08             	sar    eax,0x8
c00268a3:	0f b6 c0             	movzx  eax,al
c00268a6:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00268ad:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00268b1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00268b5:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00268ba:	ee                   	out    dx,al
c00268bb:	90                   	nop
c00268bc:	83 c4 10             	add    esp,0x10
c00268bf:	c3                   	ret    

c00268c0 <pitHandler(regs*, void*)>:
c00268c0:	83 ec 0c             	sub    esp,0xc
c00268c3:	a1 84 09 03 c0       	mov    eax,ds:0xc0030984
c00268c8:	99                   	cdq    
c00268c9:	52                   	push   edx
c00268ca:	50                   	push   eax
c00268cb:	6a 00                	push   0x0
c00268cd:	68 00 ca 9a 3b       	push   0x3b9aca00
c00268d2:	e8 bd 04 00 00       	call   c0026d94 <__udivdi3>
c00268d7:	83 c4 10             	add    esp,0x10
c00268da:	83 ec 08             	sub    esp,0x8
c00268dd:	52                   	push   edx
c00268de:	50                   	push   eax
c00268df:	e8 e1 ff fe ff       	call   c00168c5 <timerHandler(unsigned long long)>
c00268e4:	83 c4 10             	add    esp,0x10
c00268e7:	90                   	nop
c00268e8:	83 c4 0c             	add    esp,0xc
c00268eb:	c3                   	ret    

c00268ec <PIT::open(int, int, void*)>:
c00268ec:	83 ec 0c             	sub    esp,0xc
c00268ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00268f5:	83 c0 24             	add    eax,0x24
c00268f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00268fa:	83 ec 08             	sub    esp,0x8
c00268fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026901:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026905:	ff d0                	call   eax
c0026907:	83 c4 10             	add    esp,0x10
c002690a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002690e:	83 ec 0c             	sub    esp,0xc
c0026911:	6a 00                	push   0x0
c0026913:	6a 01                	push   0x1
c0026915:	68 c0 68 02 c0       	push   0xc00268c0
c002691a:	6a 00                	push   0x0
c002691c:	50                   	push   eax
c002691d:	e8 50 d4 fe ff       	call   c0013d72 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026922:	83 c4 20             	add    esp,0x20
c0026925:	89 c2                	mov    edx,eax
c0026927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002692b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026931:	b8 00 00 00 00       	mov    eax,0x0
c0026936:	83 c4 0c             	add    esp,0xc
c0026939:	c3                   	ret    

c002693a <PIT::close(int, int, void*)>:
c002693a:	83 ec 0c             	sub    esp,0xc
c002693d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026941:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002694b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002694f:	6a 01                	push   0x1
c0026951:	68 c0 68 02 c0       	push   0xc00268c0
c0026956:	6a 00                	push   0x0
c0026958:	50                   	push   eax
c0026959:	e8 5e d4 fe ff       	call   c0013dbc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002695e:	83 c4 10             	add    esp,0x10
c0026961:	b8 00 00 00 00       	mov    eax,0x0
c0026966:	83 c4 0c             	add    esp,0xc
c0026969:	c3                   	ret    

c002696a <PIT::PIT()>:
c002696a:	83 ec 0c             	sub    esp,0xc
c002696d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026971:	83 ec 08             	sub    esp,0x8
c0026974:	68 74 d3 02 c0       	push   0xc002d374
c0026979:	50                   	push   eax
c002697a:	e8 b7 fe fe ff       	call   c0016836 <Timer::Timer(char const*)>
c002697f:	83 c4 10             	add    esp,0x10
c0026982:	ba 9c d3 02 c0       	mov    edx,0xc002d39c
c0026987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002698b:	89 10                	mov    DWORD PTR [eax],edx
c002698d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026991:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026997:	0f b6 d0             	movzx  edx,al
c002699a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002699e:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00269a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269a9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00269af:	0f b6 d0             	movzx  edx,al
c00269b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269b6:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00269bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269bf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00269c5:	8d 50 01             	lea    edx,[eax+0x1]
c00269c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00269cc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00269d2:	0f b6 d0             	movzx  edx,al
c00269d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269d9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00269dd:	83 e1 3f             	and    ecx,0x3f
c00269e0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00269e4:	90                   	nop
c00269e5:	83 c4 0c             	add    esp,0xc
c00269e8:	c3                   	ret    
c00269e9:	66 90                	xchg   ax,ax
c00269eb:	66 90                	xchg   ax,ax
c00269ed:	66 90                	xchg   ax,ax
c00269ef:	90                   	nop

c00269f0 <avxDetect>:
c00269f0:	b8 00 00 00 00       	mov    eax,0x0
c00269f5:	c3                   	ret    

c00269f6 <avxSave>:
c00269f6:	c3                   	ret    

c00269f7 <avxLoad>:
c00269f7:	c3                   	ret    

c00269f8 <avxInit>:
c00269f8:	c3                   	ret    

c00269f9 <avxClose>:
c00269f9:	c3                   	ret    

c00269fa <wouldSheSayYes>:
c00269fa:	c3                   	ret    
c00269fb:	49                   	dec    ecx
c00269fc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026a00:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026a04:	75 20                	jne    c0026a26 <sseDetect.noSSE+0x1>
c0026a06:	4e                   	dec    esi
c0026a07:	79 61                	jns    c0026a6a <x87Detect+0x14>
c0026a09:	68 2e 2e 2e 00       	push   0x2e2e2e
c0026a0e:	66 90                	xchg   ax,ax

c0026a10 <absolutelyNoChanceInHell>:
c0026a10:	b8 01 00 00 00       	mov    eax,0x1
c0026a15:	0f a2                	cpuid  
c0026a17:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0026a1d:	74 06                	je     c0026a25 <sseDetect.noSSE>
c0026a1f:	b8 01 00 00 00       	mov    eax,0x1
c0026a24:	c3                   	ret    

c0026a25 <sseDetect.noSSE>:
c0026a25:	31 c0                	xor    eax,eax
c0026a27:	c3                   	ret    

c0026a28 <sseSave>:
c0026a28:	0f ae 44 24 04       	fxsave [esp+0x4]
c0026a2d:	c3                   	ret    

c0026a2e <sseLoad>:
c0026a2e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026a33:	c3                   	ret    

c0026a34 <sseInit>:
c0026a34:	e8 49 00 00 00       	call   c0026a82 <x87Init>
c0026a39:	0f 20 e0             	mov    eax,cr4
c0026a3c:	66 0d 00 06          	or     ax,0x600
c0026a40:	0f 22 e0             	mov    cr4,eax
c0026a43:	c3                   	ret    

c0026a44 <sseClose>:
c0026a44:	c3                   	ret    
c0026a45:	66 90                	xchg   ax,ax
c0026a47:	66 90                	xchg   ax,ax
c0026a49:	66 90                	xchg   ax,ax
c0026a4b:	66 90                	xchg   ax,ax
c0026a4d:	66 90                	xchg   ax,ax
c0026a4f:	90                   	nop

c0026a50 <value_37F>:
c0026a50:	7f 03                	jg     c0026a55 <value_37A+0x1>

c0026a52 <value_37E>:
c0026a52:	7e 03                	jle    c0026a57 <x87Detect+0x1>

c0026a54 <value_37A>:
c0026a54:	7a 03                	jp     c0026a59 <x87Detect+0x3>

c0026a56 <x87Detect>:
c0026a56:	b8 01 00 00 00       	mov    eax,0x1
c0026a5b:	0f a2                	cpuid  
c0026a5d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026a63:	74 06                	je     c0026a6b <x87Detect.nox87>
c0026a65:	b8 01 00 00 00       	mov    eax,0x1
c0026a6a:	c3                   	ret    

c0026a6b <x87Detect.nox87>:
c0026a6b:	b8 00 00 00 00       	mov    eax,0x0
c0026a70:	c3                   	ret    

c0026a71 <x87Save>:
c0026a71:	55                   	push   ebp
c0026a72:	89 e5                	mov    ebp,esp
c0026a74:	9b dd 75 08          	fsave  [ebp+0x8]
c0026a78:	c9                   	leave  
c0026a79:	c3                   	ret    

c0026a7a <x87Load>:
c0026a7a:	55                   	push   ebp
c0026a7b:	89 e5                	mov    ebp,esp
c0026a7d:	dd 65 08             	frstor [ebp+0x8]
c0026a80:	c9                   	leave  
c0026a81:	c3                   	ret    

c0026a82 <x87Init>:
c0026a82:	9b db e3             	finit  
c0026a85:	0f 20 c0             	mov    eax,cr0
c0026a88:	66 25 fb ff          	and    ax,0xfffb
c0026a8c:	66 0d 22 00          	or     ax,0x22
c0026a90:	0f 22 c0             	mov    cr0,eax
c0026a93:	0f 06                	clts   
c0026a95:	d9 2d 54 6a 02 c0    	fldcw  WORD PTR ds:0xc0026a54
c0026a9b:	c3                   	ret    

c0026a9c <x87Close>:
c0026a9c:	c3                   	ret    
c0026a9d:	66 90                	xchg   ax,ax
c0026a9f:	90                   	nop

c0026aa0 <__do_global_ctors_aux>:
c0026aa0:	a1 94 96 02 c0       	mov    eax,ds:0xc0029694
c0026aa5:	83 f8 ff             	cmp    eax,0xffffffff
c0026aa8:	74 1a                	je     c0026ac4 <__do_global_ctors_aux+0x24>
c0026aaa:	55                   	push   ebp
c0026aab:	89 e5                	mov    ebp,esp
c0026aad:	53                   	push   ebx
c0026aae:	52                   	push   edx
c0026aaf:	bb 94 96 02 c0       	mov    ebx,0xc0029694
c0026ab4:	ff d0                	call   eax
c0026ab6:	83 eb 04             	sub    ebx,0x4
c0026ab9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026abb:	83 f8 ff             	cmp    eax,0xffffffff
c0026abe:	75 f4                	jne    c0026ab4 <__do_global_ctors_aux+0x14>
c0026ac0:	58                   	pop    eax
c0026ac1:	5b                   	pop    ebx
c0026ac2:	5d                   	pop    ebp
c0026ac3:	c3                   	ret    
c0026ac4:	c3                   	ret    
c0026ac5:	66 90                	xchg   ax,ax
c0026ac7:	90                   	nop

c0026ac8 <__divdi3>:
c0026ac8:	55                   	push   ebp
c0026ac9:	57                   	push   edi
c0026aca:	56                   	push   esi
c0026acb:	53                   	push   ebx
c0026acc:	83 ec 1c             	sub    esp,0x1c
c0026acf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026ad3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026ad7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026ada:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026ade:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026ae2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026ae6:	85 db                	test   ebx,ebx
c0026ae8:	0f 88 8e 00 00 00    	js     c0026b7c <__divdi3+0xb4>
c0026aee:	89 dd                	mov    ebp,ebx
c0026af0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026af8:	89 d3                	mov    ebx,edx
c0026afa:	85 d2                	test   edx,edx
c0026afc:	79 0d                	jns    c0026b0b <__divdi3+0x43>
c0026afe:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026b02:	f7 d8                	neg    eax
c0026b04:	83 d2 00             	adc    edx,0x0
c0026b07:	f7 da                	neg    edx
c0026b09:	89 d3                	mov    ebx,edx
c0026b0b:	89 c7                	mov    edi,eax
c0026b0d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026b10:	85 db                	test   ebx,ebx
c0026b12:	75 48                	jne    c0026b5c <__divdi3+0x94>
c0026b14:	39 ef                	cmp    edi,ebp
c0026b16:	76 24                	jbe    c0026b3c <__divdi3+0x74>
c0026b18:	89 ea                	mov    edx,ebp
c0026b1a:	f7 f7                	div    edi
c0026b1c:	89 c1                	mov    ecx,eax
c0026b1e:	31 f6                	xor    esi,esi
c0026b20:	89 c8                	mov    eax,ecx
c0026b22:	89 f2                	mov    edx,esi
c0026b24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b28:	85 c9                	test   ecx,ecx
c0026b2a:	74 07                	je     c0026b33 <__divdi3+0x6b>
c0026b2c:	f7 d8                	neg    eax
c0026b2e:	83 d2 00             	adc    edx,0x0
c0026b31:	f7 da                	neg    edx
c0026b33:	83 c4 1c             	add    esp,0x1c
c0026b36:	5b                   	pop    ebx
c0026b37:	5e                   	pop    esi
c0026b38:	5f                   	pop    edi
c0026b39:	5d                   	pop    ebp
c0026b3a:	c3                   	ret    
c0026b3b:	90                   	nop
c0026b3c:	85 ff                	test   edi,edi
c0026b3e:	75 0b                	jne    c0026b4b <__divdi3+0x83>
c0026b40:	b8 01 00 00 00       	mov    eax,0x1
c0026b45:	31 d2                	xor    edx,edx
c0026b47:	f7 f3                	div    ebx
c0026b49:	89 c7                	mov    edi,eax
c0026b4b:	31 d2                	xor    edx,edx
c0026b4d:	89 e8                	mov    eax,ebp
c0026b4f:	f7 f7                	div    edi
c0026b51:	89 c6                	mov    esi,eax
c0026b53:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026b56:	f7 f7                	div    edi
c0026b58:	89 c1                	mov    ecx,eax
c0026b5a:	eb c4                	jmp    c0026b20 <__divdi3+0x58>
c0026b5c:	39 eb                	cmp    ebx,ebp
c0026b5e:	77 3c                	ja     c0026b9c <__divdi3+0xd4>
c0026b60:	0f bd f3             	bsr    esi,ebx
c0026b63:	83 f6 1f             	xor    esi,0x1f
c0026b66:	75 40                	jne    c0026ba8 <__divdi3+0xe0>
c0026b68:	39 eb                	cmp    ebx,ebp
c0026b6a:	72 09                	jb     c0026b75 <__divdi3+0xad>
c0026b6c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026b6f:	0f 87 97 00 00 00    	ja     c0026c0c <__divdi3+0x144>
c0026b75:	b9 01 00 00 00       	mov    ecx,0x1
c0026b7a:	eb a4                	jmp    c0026b20 <__divdi3+0x58>
c0026b7c:	f7 d9                	neg    ecx
c0026b7e:	83 d3 00             	adc    ebx,0x0
c0026b81:	f7 db                	neg    ebx
c0026b83:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026b86:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026b8a:	89 dd                	mov    ebp,ebx
c0026b8c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026b94:	e9 5f ff ff ff       	jmp    c0026af8 <__divdi3+0x30>
c0026b99:	8d 76 00             	lea    esi,[esi+0x0]
c0026b9c:	31 f6                	xor    esi,esi
c0026b9e:	31 c9                	xor    ecx,ecx
c0026ba0:	e9 7b ff ff ff       	jmp    c0026b20 <__divdi3+0x58>
c0026ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0026ba8:	b8 20 00 00 00       	mov    eax,0x20
c0026bad:	29 f0                	sub    eax,esi
c0026baf:	89 f1                	mov    ecx,esi
c0026bb1:	d3 e3                	shl    ebx,cl
c0026bb3:	89 fa                	mov    edx,edi
c0026bb5:	88 c1                	mov    cl,al
c0026bb7:	d3 ea                	shr    edx,cl
c0026bb9:	09 da                	or     edx,ebx
c0026bbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026bbf:	89 f1                	mov    ecx,esi
c0026bc1:	d3 e7                	shl    edi,cl
c0026bc3:	89 eb                	mov    ebx,ebp
c0026bc5:	88 c1                	mov    cl,al
c0026bc7:	d3 eb                	shr    ebx,cl
c0026bc9:	89 f1                	mov    ecx,esi
c0026bcb:	d3 e5                	shl    ebp,cl
c0026bcd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026bd0:	88 c1                	mov    cl,al
c0026bd2:	d3 ea                	shr    edx,cl
c0026bd4:	09 d5                	or     ebp,edx
c0026bd6:	89 e8                	mov    eax,ebp
c0026bd8:	89 da                	mov    edx,ebx
c0026bda:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026bde:	89 d3                	mov    ebx,edx
c0026be0:	89 c5                	mov    ebp,eax
c0026be2:	f7 e7                	mul    edi
c0026be4:	39 d3                	cmp    ebx,edx
c0026be6:	72 18                	jb     c0026c00 <__divdi3+0x138>
c0026be8:	74 0a                	je     c0026bf4 <__divdi3+0x12c>
c0026bea:	89 e9                	mov    ecx,ebp
c0026bec:	31 f6                	xor    esi,esi
c0026bee:	e9 2d ff ff ff       	jmp    c0026b20 <__divdi3+0x58>
c0026bf3:	90                   	nop
c0026bf4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026bf7:	89 f1                	mov    ecx,esi
c0026bf9:	d3 e7                	shl    edi,cl
c0026bfb:	39 c7                	cmp    edi,eax
c0026bfd:	73 eb                	jae    c0026bea <__divdi3+0x122>
c0026bff:	90                   	nop
c0026c00:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026c03:	31 f6                	xor    esi,esi
c0026c05:	e9 16 ff ff ff       	jmp    c0026b20 <__divdi3+0x58>
c0026c0a:	66 90                	xchg   ax,ax
c0026c0c:	31 c9                	xor    ecx,ecx
c0026c0e:	e9 0d ff ff ff       	jmp    c0026b20 <__divdi3+0x58>
c0026c13:	90                   	nop

c0026c14 <__moddi3>:
c0026c14:	55                   	push   ebp
c0026c15:	57                   	push   edi
c0026c16:	56                   	push   esi
c0026c17:	53                   	push   ebx
c0026c18:	83 ec 2c             	sub    esp,0x2c
c0026c1b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026c1f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026c23:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026c27:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026c2b:	85 db                	test   ebx,ebx
c0026c2d:	0f 88 85 00 00 00    	js     c0026cb8 <__moddi3+0xa4>
c0026c33:	89 de                	mov    esi,ebx
c0026c35:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026c3d:	89 d7                	mov    edi,edx
c0026c3f:	85 d2                	test   edx,edx
c0026c41:	79 09                	jns    c0026c4c <__moddi3+0x38>
c0026c43:	f7 d8                	neg    eax
c0026c45:	83 d2 00             	adc    edx,0x0
c0026c48:	f7 da                	neg    edx
c0026c4a:	89 d7                	mov    edi,edx
c0026c4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026c50:	89 cd                	mov    ebp,ecx
c0026c52:	85 ff                	test   edi,edi
c0026c54:	75 52                	jne    c0026ca8 <__moddi3+0x94>
c0026c56:	89 c3                	mov    ebx,eax
c0026c58:	39 f0                	cmp    eax,esi
c0026c5a:	76 24                	jbe    c0026c80 <__moddi3+0x6c>
c0026c5c:	89 c8                	mov    eax,ecx
c0026c5e:	89 f2                	mov    edx,esi
c0026c60:	f7 f3                	div    ebx
c0026c62:	89 d6                	mov    esi,edx
c0026c64:	89 f0                	mov    eax,esi
c0026c66:	31 d2                	xor    edx,edx
c0026c68:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026c6c:	85 c9                	test   ecx,ecx
c0026c6e:	74 07                	je     c0026c77 <__moddi3+0x63>
c0026c70:	f7 d8                	neg    eax
c0026c72:	83 d2 00             	adc    edx,0x0
c0026c75:	f7 da                	neg    edx
c0026c77:	83 c4 2c             	add    esp,0x2c
c0026c7a:	5b                   	pop    ebx
c0026c7b:	5e                   	pop    esi
c0026c7c:	5f                   	pop    edi
c0026c7d:	5d                   	pop    ebp
c0026c7e:	c3                   	ret    
c0026c7f:	90                   	nop
c0026c80:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026c84:	85 db                	test   ebx,ebx
c0026c86:	75 0d                	jne    c0026c95 <__moddi3+0x81>
c0026c88:	b8 01 00 00 00       	mov    eax,0x1
c0026c8d:	31 d2                	xor    edx,edx
c0026c8f:	f7 f7                	div    edi
c0026c91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026c95:	89 f0                	mov    eax,esi
c0026c97:	31 d2                	xor    edx,edx
c0026c99:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026c9d:	f7 f7                	div    edi
c0026c9f:	89 e8                	mov    eax,ebp
c0026ca1:	f7 f7                	div    edi
c0026ca3:	89 d6                	mov    esi,edx
c0026ca5:	eb bd                	jmp    c0026c64 <__moddi3+0x50>
c0026ca7:	90                   	nop
c0026ca8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026cac:	39 f7                	cmp    edi,esi
c0026cae:	76 20                	jbe    c0026cd0 <__moddi3+0xbc>
c0026cb0:	89 c8                	mov    eax,ecx
c0026cb2:	89 f2                	mov    edx,esi
c0026cb4:	eb b2                	jmp    c0026c68 <__moddi3+0x54>
c0026cb6:	66 90                	xchg   ax,ax
c0026cb8:	f7 d9                	neg    ecx
c0026cba:	83 d3 00             	adc    ebx,0x0
c0026cbd:	f7 db                	neg    ebx
c0026cbf:	89 de                	mov    esi,ebx
c0026cc1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026cc9:	e9 6f ff ff ff       	jmp    c0026c3d <__moddi3+0x29>
c0026cce:	66 90                	xchg   ax,ax
c0026cd0:	0f bd c7             	bsr    eax,edi
c0026cd3:	83 f0 1f             	xor    eax,0x1f
c0026cd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026cda:	75 24                	jne    c0026d00 <__moddi3+0xec>
c0026cdc:	39 f7                	cmp    edi,esi
c0026cde:	72 06                	jb     c0026ce6 <__moddi3+0xd2>
c0026ce0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026ce4:	77 0c                	ja     c0026cf2 <__moddi3+0xde>
c0026ce6:	89 e9                	mov    ecx,ebp
c0026ce8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026cec:	19 fe                	sbb    esi,edi
c0026cee:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026cf2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026cf6:	89 f2                	mov    edx,esi
c0026cf8:	e9 6b ff ff ff       	jmp    c0026c68 <__moddi3+0x54>
c0026cfd:	8d 76 00             	lea    esi,[esi+0x0]
c0026d00:	b8 20 00 00 00       	mov    eax,0x20
c0026d05:	89 c2                	mov    edx,eax
c0026d07:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026d0b:	29 da                	sub    edx,ebx
c0026d0d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026d11:	88 d9                	mov    cl,bl
c0026d13:	d3 e7                	shl    edi,cl
c0026d15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026d19:	88 d1                	mov    cl,dl
c0026d1b:	d3 e8                	shr    eax,cl
c0026d1d:	09 c7                	or     edi,eax
c0026d1f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026d23:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026d27:	89 d8                	mov    eax,ebx
c0026d29:	88 d9                	mov    cl,bl
c0026d2b:	d3 e7                	shl    edi,cl
c0026d2d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026d31:	89 f3                	mov    ebx,esi
c0026d33:	88 d1                	mov    cl,dl
c0026d35:	d3 eb                	shr    ebx,cl
c0026d37:	89 c7                	mov    edi,eax
c0026d39:	88 c1                	mov    cl,al
c0026d3b:	d3 e6                	shl    esi,cl
c0026d3d:	89 e8                	mov    eax,ebp
c0026d3f:	88 d1                	mov    cl,dl
c0026d41:	d3 e8                	shr    eax,cl
c0026d43:	09 f0                	or     eax,esi
c0026d45:	89 f9                	mov    ecx,edi
c0026d47:	d3 e5                	shl    ebp,cl
c0026d49:	89 da                	mov    edx,ebx
c0026d4b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026d4f:	89 d3                	mov    ebx,edx
c0026d51:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026d55:	89 c6                	mov    esi,eax
c0026d57:	89 d1                	mov    ecx,edx
c0026d59:	39 d3                	cmp    ebx,edx
c0026d5b:	72 27                	jb     c0026d84 <__moddi3+0x170>
c0026d5d:	74 21                	je     c0026d80 <__moddi3+0x16c>
c0026d5f:	29 f5                	sub    ebp,esi
c0026d61:	19 cb                	sbb    ebx,ecx
c0026d63:	89 de                	mov    esi,ebx
c0026d65:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026d69:	d3 e6                	shl    esi,cl
c0026d6b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026d6f:	89 f9                	mov    ecx,edi
c0026d71:	d3 ed                	shr    ebp,cl
c0026d73:	09 ee                	or     esi,ebp
c0026d75:	89 f0                	mov    eax,esi
c0026d77:	d3 eb                	shr    ebx,cl
c0026d79:	89 da                	mov    edx,ebx
c0026d7b:	e9 e8 fe ff ff       	jmp    c0026c68 <__moddi3+0x54>
c0026d80:	39 c5                	cmp    ebp,eax
c0026d82:	73 db                	jae    c0026d5f <__moddi3+0x14b>
c0026d84:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026d88:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026d8c:	89 d1                	mov    ecx,edx
c0026d8e:	89 c6                	mov    esi,eax
c0026d90:	eb cd                	jmp    c0026d5f <__moddi3+0x14b>
c0026d92:	66 90                	xchg   ax,ax

c0026d94 <__udivdi3>:
c0026d94:	55                   	push   ebp
c0026d95:	57                   	push   edi
c0026d96:	56                   	push   esi
c0026d97:	53                   	push   ebx
c0026d98:	83 ec 1c             	sub    esp,0x1c
c0026d9b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026d9f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026da3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026da7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026dab:	85 d2                	test   edx,edx
c0026dad:	75 41                	jne    c0026df0 <__udivdi3+0x5c>
c0026daf:	39 f7                	cmp    edi,esi
c0026db1:	76 15                	jbe    c0026dc8 <__udivdi3+0x34>
c0026db3:	89 e8                	mov    eax,ebp
c0026db5:	89 f2                	mov    edx,esi
c0026db7:	f7 f7                	div    edi
c0026db9:	31 db                	xor    ebx,ebx
c0026dbb:	89 da                	mov    edx,ebx
c0026dbd:	83 c4 1c             	add    esp,0x1c
c0026dc0:	5b                   	pop    ebx
c0026dc1:	5e                   	pop    esi
c0026dc2:	5f                   	pop    edi
c0026dc3:	5d                   	pop    ebp
c0026dc4:	c3                   	ret    
c0026dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0026dc8:	89 f9                	mov    ecx,edi
c0026dca:	85 ff                	test   edi,edi
c0026dcc:	75 0b                	jne    c0026dd9 <__udivdi3+0x45>
c0026dce:	b8 01 00 00 00       	mov    eax,0x1
c0026dd3:	31 d2                	xor    edx,edx
c0026dd5:	f7 f7                	div    edi
c0026dd7:	89 c1                	mov    ecx,eax
c0026dd9:	31 d2                	xor    edx,edx
c0026ddb:	89 f0                	mov    eax,esi
c0026ddd:	f7 f1                	div    ecx
c0026ddf:	89 c3                	mov    ebx,eax
c0026de1:	89 e8                	mov    eax,ebp
c0026de3:	f7 f1                	div    ecx
c0026de5:	89 da                	mov    edx,ebx
c0026de7:	83 c4 1c             	add    esp,0x1c
c0026dea:	5b                   	pop    ebx
c0026deb:	5e                   	pop    esi
c0026dec:	5f                   	pop    edi
c0026ded:	5d                   	pop    ebp
c0026dee:	c3                   	ret    
c0026def:	90                   	nop
c0026df0:	39 f2                	cmp    edx,esi
c0026df2:	77 1c                	ja     c0026e10 <__udivdi3+0x7c>
c0026df4:	0f bd da             	bsr    ebx,edx
c0026df7:	83 f3 1f             	xor    ebx,0x1f
c0026dfa:	75 24                	jne    c0026e20 <__udivdi3+0x8c>
c0026dfc:	39 f2                	cmp    edx,esi
c0026dfe:	72 08                	jb     c0026e08 <__udivdi3+0x74>
c0026e00:	39 ef                	cmp    edi,ebp
c0026e02:	0f 87 84 00 00 00    	ja     c0026e8c <__udivdi3+0xf8>
c0026e08:	b8 01 00 00 00       	mov    eax,0x1
c0026e0d:	eb ac                	jmp    c0026dbb <__udivdi3+0x27>
c0026e0f:	90                   	nop
c0026e10:	31 db                	xor    ebx,ebx
c0026e12:	31 c0                	xor    eax,eax
c0026e14:	89 da                	mov    edx,ebx
c0026e16:	83 c4 1c             	add    esp,0x1c
c0026e19:	5b                   	pop    ebx
c0026e1a:	5e                   	pop    esi
c0026e1b:	5f                   	pop    edi
c0026e1c:	5d                   	pop    ebp
c0026e1d:	c3                   	ret    
c0026e1e:	66 90                	xchg   ax,ax
c0026e20:	b8 20 00 00 00       	mov    eax,0x20
c0026e25:	29 d8                	sub    eax,ebx
c0026e27:	88 d9                	mov    cl,bl
c0026e29:	d3 e2                	shl    edx,cl
c0026e2b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026e2f:	89 fa                	mov    edx,edi
c0026e31:	88 c1                	mov    cl,al
c0026e33:	d3 ea                	shr    edx,cl
c0026e35:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026e39:	09 d1                	or     ecx,edx
c0026e3b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026e3f:	88 d9                	mov    cl,bl
c0026e41:	d3 e7                	shl    edi,cl
c0026e43:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026e47:	89 f7                	mov    edi,esi
c0026e49:	88 c1                	mov    cl,al
c0026e4b:	d3 ef                	shr    edi,cl
c0026e4d:	88 d9                	mov    cl,bl
c0026e4f:	d3 e6                	shl    esi,cl
c0026e51:	89 ea                	mov    edx,ebp
c0026e53:	88 c1                	mov    cl,al
c0026e55:	d3 ea                	shr    edx,cl
c0026e57:	09 d6                	or     esi,edx
c0026e59:	89 f0                	mov    eax,esi
c0026e5b:	89 fa                	mov    edx,edi
c0026e5d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026e61:	89 d7                	mov    edi,edx
c0026e63:	89 c6                	mov    esi,eax
c0026e65:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026e69:	39 d7                	cmp    edi,edx
c0026e6b:	72 13                	jb     c0026e80 <__udivdi3+0xec>
c0026e6d:	74 09                	je     c0026e78 <__udivdi3+0xe4>
c0026e6f:	89 f0                	mov    eax,esi
c0026e71:	31 db                	xor    ebx,ebx
c0026e73:	e9 43 ff ff ff       	jmp    c0026dbb <__udivdi3+0x27>
c0026e78:	88 d9                	mov    cl,bl
c0026e7a:	d3 e5                	shl    ebp,cl
c0026e7c:	39 c5                	cmp    ebp,eax
c0026e7e:	73 ef                	jae    c0026e6f <__udivdi3+0xdb>
c0026e80:	8d 46 ff             	lea    eax,[esi-0x1]
c0026e83:	31 db                	xor    ebx,ebx
c0026e85:	e9 31 ff ff ff       	jmp    c0026dbb <__udivdi3+0x27>
c0026e8a:	66 90                	xchg   ax,ax
c0026e8c:	31 c0                	xor    eax,eax
c0026e8e:	e9 28 ff ff ff       	jmp    c0026dbb <__udivdi3+0x27>
c0026e93:	90                   	nop

c0026e94 <__umoddi3>:
c0026e94:	55                   	push   ebp
c0026e95:	57                   	push   edi
c0026e96:	56                   	push   esi
c0026e97:	53                   	push   ebx
c0026e98:	83 ec 1c             	sub    esp,0x1c
c0026e9b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026e9f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026ea3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026ea7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026eab:	89 da                	mov    edx,ebx
c0026ead:	85 c0                	test   eax,eax
c0026eaf:	75 37                	jne    c0026ee8 <__umoddi3+0x54>
c0026eb1:	39 df                	cmp    edi,ebx
c0026eb3:	76 13                	jbe    c0026ec8 <__umoddi3+0x34>
c0026eb5:	89 f0                	mov    eax,esi
c0026eb7:	f7 f7                	div    edi
c0026eb9:	89 d0                	mov    eax,edx
c0026ebb:	31 d2                	xor    edx,edx
c0026ebd:	83 c4 1c             	add    esp,0x1c
c0026ec0:	5b                   	pop    ebx
c0026ec1:	5e                   	pop    esi
c0026ec2:	5f                   	pop    edi
c0026ec3:	5d                   	pop    ebp
c0026ec4:	c3                   	ret    
c0026ec5:	8d 76 00             	lea    esi,[esi+0x0]
c0026ec8:	89 fd                	mov    ebp,edi
c0026eca:	85 ff                	test   edi,edi
c0026ecc:	75 0b                	jne    c0026ed9 <__umoddi3+0x45>
c0026ece:	b8 01 00 00 00       	mov    eax,0x1
c0026ed3:	31 d2                	xor    edx,edx
c0026ed5:	f7 f7                	div    edi
c0026ed7:	89 c5                	mov    ebp,eax
c0026ed9:	89 d8                	mov    eax,ebx
c0026edb:	31 d2                	xor    edx,edx
c0026edd:	f7 f5                	div    ebp
c0026edf:	89 f0                	mov    eax,esi
c0026ee1:	f7 f5                	div    ebp
c0026ee3:	89 d0                	mov    eax,edx
c0026ee5:	eb d4                	jmp    c0026ebb <__umoddi3+0x27>
c0026ee7:	90                   	nop
c0026ee8:	89 f1                	mov    ecx,esi
c0026eea:	39 d8                	cmp    eax,ebx
c0026eec:	76 0a                	jbe    c0026ef8 <__umoddi3+0x64>
c0026eee:	89 f0                	mov    eax,esi
c0026ef0:	83 c4 1c             	add    esp,0x1c
c0026ef3:	5b                   	pop    ebx
c0026ef4:	5e                   	pop    esi
c0026ef5:	5f                   	pop    edi
c0026ef6:	5d                   	pop    ebp
c0026ef7:	c3                   	ret    
c0026ef8:	0f bd e8             	bsr    ebp,eax
c0026efb:	83 f5 1f             	xor    ebp,0x1f
c0026efe:	75 1c                	jne    c0026f1c <__umoddi3+0x88>
c0026f00:	39 d8                	cmp    eax,ebx
c0026f02:	72 04                	jb     c0026f08 <__umoddi3+0x74>
c0026f04:	39 f7                	cmp    edi,esi
c0026f06:	77 08                	ja     c0026f10 <__umoddi3+0x7c>
c0026f08:	89 da                	mov    edx,ebx
c0026f0a:	29 fe                	sub    esi,edi
c0026f0c:	19 c2                	sbb    edx,eax
c0026f0e:	89 f1                	mov    ecx,esi
c0026f10:	89 c8                	mov    eax,ecx
c0026f12:	83 c4 1c             	add    esp,0x1c
c0026f15:	5b                   	pop    ebx
c0026f16:	5e                   	pop    esi
c0026f17:	5f                   	pop    edi
c0026f18:	5d                   	pop    ebp
c0026f19:	c3                   	ret    
c0026f1a:	66 90                	xchg   ax,ax
c0026f1c:	ba 20 00 00 00       	mov    edx,0x20
c0026f21:	29 ea                	sub    edx,ebp
c0026f23:	89 e9                	mov    ecx,ebp
c0026f25:	d3 e0                	shl    eax,cl
c0026f27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026f2b:	89 f8                	mov    eax,edi
c0026f2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026f31:	88 d1                	mov    cl,dl
c0026f33:	d3 e8                	shr    eax,cl
c0026f35:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026f39:	09 c1                	or     ecx,eax
c0026f3b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026f3f:	89 e9                	mov    ecx,ebp
c0026f41:	d3 e7                	shl    edi,cl
c0026f43:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026f47:	89 d8                	mov    eax,ebx
c0026f49:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026f4d:	88 d1                	mov    cl,dl
c0026f4f:	d3 e8                	shr    eax,cl
c0026f51:	89 c7                	mov    edi,eax
c0026f53:	89 e9                	mov    ecx,ebp
c0026f55:	d3 e3                	shl    ebx,cl
c0026f57:	89 f0                	mov    eax,esi
c0026f59:	88 d1                	mov    cl,dl
c0026f5b:	d3 e8                	shr    eax,cl
c0026f5d:	09 d8                	or     eax,ebx
c0026f5f:	89 e9                	mov    ecx,ebp
c0026f61:	d3 e6                	shl    esi,cl
c0026f63:	89 f3                	mov    ebx,esi
c0026f65:	89 fa                	mov    edx,edi
c0026f67:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026f6b:	89 d1                	mov    ecx,edx
c0026f6d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026f71:	89 c6                	mov    esi,eax
c0026f73:	89 d7                	mov    edi,edx
c0026f75:	39 d1                	cmp    ecx,edx
c0026f77:	72 27                	jb     c0026fa0 <__umoddi3+0x10c>
c0026f79:	74 21                	je     c0026f9c <__umoddi3+0x108>
c0026f7b:	89 ca                	mov    edx,ecx
c0026f7d:	29 f3                	sub    ebx,esi
c0026f7f:	19 fa                	sbb    edx,edi
c0026f81:	89 d0                	mov    eax,edx
c0026f83:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026f87:	d3 e0                	shl    eax,cl
c0026f89:	89 e9                	mov    ecx,ebp
c0026f8b:	d3 eb                	shr    ebx,cl
c0026f8d:	09 d8                	or     eax,ebx
c0026f8f:	d3 ea                	shr    edx,cl
c0026f91:	83 c4 1c             	add    esp,0x1c
c0026f94:	5b                   	pop    ebx
c0026f95:	5e                   	pop    esi
c0026f96:	5f                   	pop    edi
c0026f97:	5d                   	pop    ebp
c0026f98:	c3                   	ret    
c0026f99:	8d 76 00             	lea    esi,[esi+0x0]
c0026f9c:	39 c3                	cmp    ebx,eax
c0026f9e:	73 db                	jae    c0026f7b <__umoddi3+0xe7>
c0026fa0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026fa4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026fa8:	89 d7                	mov    edi,edx
c0026faa:	89 c6                	mov    esi,eax
c0026fac:	eb cd                	jmp    c0026f7b <__umoddi3+0xe7>

c0026fae <__addsf3>:
c0026fae:	55                   	push   ebp
c0026faf:	89 e5                	mov    ebp,esp
c0026fb1:	57                   	push   edi
c0026fb2:	56                   	push   esi
c0026fb3:	53                   	push   ebx
c0026fb4:	83 ec 08             	sub    esp,0x8
c0026fb7:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026fba:	89 fa                	mov    edx,edi
c0026fbc:	89 f8                	mov    eax,edi
c0026fbe:	c1 f8 17             	sar    eax,0x17
c0026fc1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026fc4:	c1 e2 08             	shl    edx,0x8
c0026fc7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026fcd:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026fd0:	89 de                	mov    esi,ebx
c0026fd2:	c1 fe 17             	sar    esi,0x17
c0026fd5:	c1 e3 08             	shl    ebx,0x8
c0026fd8:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026fde:	31 f0                	xor    eax,esi
c0026fe0:	0f 88 3b 01 00 00    	js     c0027121 <__addsf3+0x173>
c0026fe6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026fe9:	29 f1                	sub    ecx,esi
c0026feb:	85 c9                	test   ecx,ecx
c0026fed:	7e 54                	jle    c0027043 <__addsf3+0x95>
c0026fef:	89 f0                	mov    eax,esi
c0026ff1:	84 c0                	test   al,al
c0026ff3:	75 10                	jne    c0027005 <__addsf3+0x57>
c0026ff5:	85 db                	test   ebx,ebx
c0026ff7:	0f 84 aa 02 00 00    	je     c00272a7 <__addsf3+0x2f9>
c0026ffd:	49                   	dec    ecx
c0026ffe:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027001:	74 38                	je     c002703b <__addsf3+0x8d>
c0027003:	eb 13                	jmp    c0027018 <__addsf3+0x6a>
c0027005:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027008:	f7 d0                	not    eax
c002700a:	84 c0                	test   al,al
c002700c:	0f 84 95 02 00 00    	je     c00272a7 <__addsf3+0x2f9>
c0027012:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027018:	83 f9 1f             	cmp    ecx,0x1f
c002701b:	0f 8f 86 02 00 00    	jg     c00272a7 <__addsf3+0x2f9>
c0027021:	89 de                	mov    esi,ebx
c0027023:	d3 ee                	shr    esi,cl
c0027025:	b8 20 00 00 00       	mov    eax,0x20
c002702a:	29 c8                	sub    eax,ecx
c002702c:	89 c1                	mov    ecx,eax
c002702e:	d3 e3                	shl    ebx,cl
c0027030:	31 c0                	xor    eax,eax
c0027032:	85 db                	test   ebx,ebx
c0027034:	0f 95 c0             	setne  al
c0027037:	09 f0                	or     eax,esi
c0027039:	01 d0                	add    eax,edx
c002703b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002703e:	e9 b6 00 00 00       	jmp    c00270f9 <__addsf3+0x14b>
c0027043:	74 5c                	je     c00270a1 <__addsf3+0xf3>
c0027045:	89 f1                	mov    ecx,esi
c0027047:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c002704a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002704d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027051:	75 14                	jne    c0027067 <__addsf3+0xb9>
c0027053:	85 d2                	test   edx,edx
c0027055:	0f 84 4c 02 00 00    	je     c00272a7 <__addsf3+0x2f9>
c002705b:	49                   	dec    ecx
c002705c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002705f:	0f 84 94 00 00 00    	je     c00270f9 <__addsf3+0x14b>
c0027065:	eb 12                	jmp    c0027079 <__addsf3+0xcb>
c0027067:	89 f0                	mov    eax,esi
c0027069:	f7 d0                	not    eax
c002706b:	84 c0                	test   al,al
c002706d:	0f 84 34 02 00 00    	je     c00272a7 <__addsf3+0x2f9>
c0027073:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027079:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002707c:	83 f9 1f             	cmp    ecx,0x1f
c002707f:	0f 8f 22 02 00 00    	jg     c00272a7 <__addsf3+0x2f9>
c0027085:	89 d7                	mov    edi,edx
c0027087:	d3 ef                	shr    edi,cl
c0027089:	b8 20 00 00 00       	mov    eax,0x20
c002708e:	29 c8                	sub    eax,ecx
c0027090:	89 c1                	mov    ecx,eax
c0027092:	d3 e2                	shl    edx,cl
c0027094:	31 c0                	xor    eax,eax
c0027096:	85 d2                	test   edx,edx
c0027098:	0f 95 c0             	setne  al
c002709b:	09 f8                	or     eax,edi
c002709d:	01 d8                	add    eax,ebx
c002709f:	eb 58                	jmp    c00270f9 <__addsf3+0x14b>
c00270a1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00270a4:	8d 70 01             	lea    esi,[eax+0x1]
c00270a7:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00270ad:	75 32                	jne    c00270e1 <__addsf3+0x133>
c00270af:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00270b3:	75 1f                	jne    c00270d4 <__addsf3+0x126>
c00270b5:	85 d2                	test   edx,edx
c00270b7:	0f 84 e0 01 00 00    	je     c002729d <__addsf3+0x2ef>
c00270bd:	85 db                	test   ebx,ebx
c00270bf:	0f 84 e2 01 00 00    	je     c00272a7 <__addsf3+0x2f9>
c00270c5:	89 d0                	mov    eax,edx
c00270c7:	01 d8                	add    eax,ebx
c00270c9:	0f 89 a9 01 00 00    	jns    c0027278 <__addsf3+0x2ca>
c00270cf:	e9 9d 01 00 00       	jmp    c0027271 <__addsf3+0x2c3>
c00270d4:	85 d2                	test   edx,edx
c00270d6:	0f 85 cb 01 00 00    	jne    c00272a7 <__addsf3+0x2f9>
c00270dc:	e9 bc 01 00 00       	jmp    c002729d <__addsf3+0x2ef>
c00270e1:	31 c0                	xor    eax,eax
c00270e3:	89 f1                	mov    ecx,esi
c00270e5:	f7 d1                	not    ecx
c00270e7:	84 c9                	test   cl,cl
c00270e9:	0f 84 90 01 00 00    	je     c002727f <__addsf3+0x2d1>
c00270ef:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00270f2:	d1 e8                	shr    eax,1
c00270f4:	e9 86 01 00 00       	jmp    c002727f <__addsf3+0x2d1>
c00270f9:	85 c0                	test   eax,eax
c00270fb:	0f 89 7e 01 00 00    	jns    c002727f <__addsf3+0x2d1>
c0027101:	46                   	inc    esi
c0027102:	89 f2                	mov    edx,esi
c0027104:	f7 d2                	not    edx
c0027106:	84 d2                	test   dl,dl
c0027108:	0f 84 6f 01 00 00    	je     c002727d <__addsf3+0x2cf>
c002710e:	89 c2                	mov    edx,eax
c0027110:	83 e2 01             	and    edx,0x1
c0027113:	d1 e8                	shr    eax,1
c0027115:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002711a:	09 d0                	or     eax,edx
c002711c:	e9 5e 01 00 00       	jmp    c002727f <__addsf3+0x2d1>
c0027121:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0027125:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027128:	89 f0                	mov    eax,esi
c002712a:	0f b6 c0             	movzx  eax,al
c002712d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027130:	29 c1                	sub    ecx,eax
c0027132:	85 c9                	test   ecx,ecx
c0027134:	7e 55                	jle    c002718b <__addsf3+0x1dd>
c0027136:	85 c0                	test   eax,eax
c0027138:	75 11                	jne    c002714b <__addsf3+0x19d>
c002713a:	85 db                	test   ebx,ebx
c002713c:	0f 84 65 01 00 00    	je     c00272a7 <__addsf3+0x2f9>
c0027142:	49                   	dec    ecx
c0027143:	75 19                	jne    c002715e <__addsf3+0x1b0>
c0027145:	89 d0                	mov    eax,edx
c0027147:	29 d8                	sub    eax,ebx
c0027149:	eb 38                	jmp    c0027183 <__addsf3+0x1d5>
c002714b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002714e:	f7 d0                	not    eax
c0027150:	84 c0                	test   al,al
c0027152:	0f 84 4f 01 00 00    	je     c00272a7 <__addsf3+0x2f9>
c0027158:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002715e:	83 f9 1f             	cmp    ecx,0x1f
c0027161:	0f 8f 40 01 00 00    	jg     c00272a7 <__addsf3+0x2f9>
c0027167:	89 de                	mov    esi,ebx
c0027169:	d3 ee                	shr    esi,cl
c002716b:	b8 20 00 00 00       	mov    eax,0x20
c0027170:	29 c8                	sub    eax,ecx
c0027172:	89 c1                	mov    ecx,eax
c0027174:	d3 e3                	shl    ebx,cl
c0027176:	31 c0                	xor    eax,eax
c0027178:	85 db                	test   ebx,ebx
c002717a:	0f 95 c0             	setne  al
c002717d:	09 f0                	or     eax,esi
c002717f:	29 c2                	sub    edx,eax
c0027181:	89 d0                	mov    eax,edx
c0027183:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027186:	e9 af 00 00 00       	jmp    c002723a <__addsf3+0x28c>
c002718b:	74 5c                	je     c00271e9 <__addsf3+0x23b>
c002718d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0027190:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027193:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027197:	75 14                	jne    c00271ad <__addsf3+0x1ff>
c0027199:	85 d2                	test   edx,edx
c002719b:	0f 84 06 01 00 00    	je     c00272a7 <__addsf3+0x2f9>
c00271a1:	48                   	dec    eax
c00271a2:	75 1b                	jne    c00271bf <__addsf3+0x211>
c00271a4:	89 d8                	mov    eax,ebx
c00271a6:	29 d0                	sub    eax,edx
c00271a8:	e9 8d 00 00 00       	jmp    c002723a <__addsf3+0x28c>
c00271ad:	89 f1                	mov    ecx,esi
c00271af:	f7 d1                	not    ecx
c00271b1:	84 c9                	test   cl,cl
c00271b3:	0f 84 ee 00 00 00    	je     c00272a7 <__addsf3+0x2f9>
c00271b9:	81 ca 00 00 00 80    	or     edx,0x80000000
c00271bf:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00271c2:	83 f8 1f             	cmp    eax,0x1f
c00271c5:	0f 8f dc 00 00 00    	jg     c00272a7 <__addsf3+0x2f9>
c00271cb:	89 d7                	mov    edi,edx
c00271cd:	88 c1                	mov    cl,al
c00271cf:	d3 ef                	shr    edi,cl
c00271d1:	b9 20 00 00 00       	mov    ecx,0x20
c00271d6:	29 c1                	sub    ecx,eax
c00271d8:	d3 e2                	shl    edx,cl
c00271da:	31 c0                	xor    eax,eax
c00271dc:	85 d2                	test   edx,edx
c00271de:	0f 95 c0             	setne  al
c00271e1:	09 f8                	or     eax,edi
c00271e3:	29 c3                	sub    ebx,eax
c00271e5:	89 d8                	mov    eax,ebx
c00271e7:	eb 51                	jmp    c002723a <__addsf3+0x28c>
c00271e9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00271ec:	40                   	inc    eax
c00271ed:	a8 fe                	test   al,0xfe
c00271ef:	75 3d                	jne    c002722e <__addsf3+0x280>
c00271f1:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00271f5:	0f 85 a7 00 00 00    	jne    c00272a2 <__addsf3+0x2f4>
c00271fb:	85 d2                	test   edx,edx
c00271fd:	75 12                	jne    c0027211 <__addsf3+0x263>
c00271ff:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027202:	85 db                	test   ebx,ebx
c0027204:	0f 85 9d 00 00 00    	jne    c00272a7 <__addsf3+0x2f9>
c002720a:	31 ff                	xor    edi,edi
c002720c:	e9 96 00 00 00       	jmp    c00272a7 <__addsf3+0x2f9>
c0027211:	85 db                	test   ebx,ebx
c0027213:	0f 84 8e 00 00 00    	je     c00272a7 <__addsf3+0x2f9>
c0027219:	89 d0                	mov    eax,edx
c002721b:	29 d8                	sub    eax,ebx
c002721d:	79 06                	jns    c0027225 <__addsf3+0x277>
c002721f:	89 d8                	mov    eax,ebx
c0027221:	29 d0                	sub    eax,edx
c0027223:	eb 5a                	jmp    c002727f <__addsf3+0x2d1>
c0027225:	bf 00 00 00 00       	mov    edi,0x0
c002722a:	74 7b                	je     c00272a7 <__addsf3+0x2f9>
c002722c:	eb 4a                	jmp    c0027278 <__addsf3+0x2ca>
c002722e:	89 d0                	mov    eax,edx
c0027230:	29 d8                	sub    eax,ebx
c0027232:	79 12                	jns    c0027246 <__addsf3+0x298>
c0027234:	89 d8                	mov    eax,ebx
c0027236:	29 d0                	sub    eax,edx
c0027238:	eb 09                	jmp    c0027243 <__addsf3+0x295>
c002723a:	85 c0                	test   eax,eax
c002723c:	79 41                	jns    c002727f <__addsf3+0x2d1>
c002723e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027243:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027246:	31 f6                	xor    esi,esi
c0027248:	85 c0                	test   eax,eax
c002724a:	74 33                	je     c002727f <__addsf3+0x2d1>
c002724c:	0f bd c8             	bsr    ecx,eax
c002724f:	83 f1 1f             	xor    ecx,0x1f
c0027252:	d3 e0                	shl    eax,cl
c0027254:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0027258:	39 ca                	cmp    edx,ecx
c002725a:	7f 10                	jg     c002726c <__addsf3+0x2be>
c002725c:	29 d1                	sub    ecx,edx
c002725e:	41                   	inc    ecx
c002725f:	d3 e8                	shr    eax,cl
c0027261:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027264:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c002726a:	eb 13                	jmp    c002727f <__addsf3+0x2d1>
c002726c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002726f:	29 ce                	sub    esi,ecx
c0027271:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027276:	eb 07                	jmp    c002727f <__addsf3+0x2d1>
c0027278:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002727b:	eb 02                	jmp    c002727f <__addsf3+0x2d1>
c002727d:	31 c0                	xor    eax,eax
c002727f:	89 c2                	mov    edx,eax
c0027281:	c1 ea 08             	shr    edx,0x8
c0027284:	a8 7f                	test   al,0x7f
c0027286:	0f 95 c1             	setne  cl
c0027289:	09 d1                	or     ecx,edx
c002728b:	83 e1 01             	and    ecx,0x1
c002728e:	c1 e8 07             	shr    eax,0x7
c0027291:	21 c8                	and    eax,ecx
c0027293:	c1 e6 17             	shl    esi,0x17
c0027296:	09 d6                	or     esi,edx
c0027298:	8d 3c 30             	lea    edi,[eax+esi*1]
c002729b:	eb 0a                	jmp    c00272a7 <__addsf3+0x2f9>
c002729d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00272a0:	eb 05                	jmp    c00272a7 <__addsf3+0x2f9>
c00272a2:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c00272a7:	89 f8                	mov    eax,edi
c00272a9:	5a                   	pop    edx
c00272aa:	59                   	pop    ecx
c00272ab:	5b                   	pop    ebx
c00272ac:	5e                   	pop    esi
c00272ad:	5f                   	pop    edi
c00272ae:	5d                   	pop    ebp
c00272af:	c3                   	ret    

c00272b0 <__subsf3>:
c00272b0:	55                   	push   ebp
c00272b1:	89 e5                	mov    ebp,esp
c00272b3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00272b6:	05 00 00 00 80       	add    eax,0x80000000
c00272bb:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00272be:	5d                   	pop    ebp
c00272bf:	e9 ea fc ff ff       	jmp    c0026fae <__addsf3>

c00272c4 <__negsf2>:
c00272c4:	55                   	push   ebp
c00272c5:	89 e5                	mov    ebp,esp
c00272c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00272ca:	05 00 00 00 80       	add    eax,0x80000000
c00272cf:	5d                   	pop    ebp
c00272d0:	c3                   	ret    

c00272d1 <__mulsf3>:
c00272d1:	55                   	push   ebp
c00272d2:	89 e5                	mov    ebp,esp
c00272d4:	57                   	push   edi
c00272d5:	56                   	push   esi
c00272d6:	53                   	push   ebx
c00272d7:	83 ec 1c             	sub    esp,0x1c
c00272da:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00272dd:	89 f0                	mov    eax,esi
c00272df:	89 f1                	mov    ecx,esi
c00272e1:	c1 f9 17             	sar    ecx,0x17
c00272e4:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00272e7:	c1 e0 08             	shl    eax,0x8
c00272ea:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00272ef:	89 c1                	mov    ecx,eax
c00272f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00272f4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00272f7:	89 c7                	mov    edi,eax
c00272f9:	c1 ff 17             	sar    edi,0x17
c00272fc:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027300:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027303:	89 f8                	mov    eax,edi
c0027305:	0f b6 c0             	movzx  eax,al
c0027308:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c002730b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c002730f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027312:	42                   	inc    edx
c0027313:	80 e2 fe             	and    dl,0xfe
c0027316:	75 7b                	jne    c0027393 <__mulsf3+0xc2>
c0027318:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002731c:	74 54                	je     c0027372 <__mulsf3+0xa1>
c002731e:	85 c9                	test   ecx,ecx
c0027320:	0f 85 64 01 00 00    	jne    c002748a <__mulsf3+0x1b9>
c0027326:	8d 57 01             	lea    edx,[edi+0x1]
c0027329:	80 e2 fe             	and    dl,0xfe
c002732c:	75 1f                	jne    c002734d <__mulsf3+0x7c>
c002732e:	85 c0                	test   eax,eax
c0027330:	b8 00 00 00 00       	mov    eax,0x0
c0027335:	74 29                	je     c0027360 <__mulsf3+0x8f>
c0027337:	53                   	push   ebx
c0027338:	53                   	push   ebx
c0027339:	50                   	push   eax
c002733a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002733d:	e8 96 05 00 00       	call   c00278d8 <__nesf2>
c0027342:	83 c4 10             	add    esp,0x10
c0027345:	85 c0                	test   eax,eax
c0027347:	0f 85 3a 01 00 00    	jne    c0027487 <__mulsf3+0x1b6>
c002734d:	85 ff                	test   edi,edi
c002734f:	0f 89 35 01 00 00    	jns    c002748a <__mulsf3+0x1b9>
c0027355:	81 c6 00 00 00 80    	add    esi,0x80000000
c002735b:	e9 2a 01 00 00       	jmp    c002748a <__mulsf3+0x1b9>
c0027360:	51                   	push   ecx
c0027361:	51                   	push   ecx
c0027362:	50                   	push   eax
c0027363:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027366:	e8 6d 05 00 00       	call   c00278d8 <__nesf2>
c002736b:	83 c4 10             	add    esp,0x10
c002736e:	85 c0                	test   eax,eax
c0027370:	eb 15                	jmp    c0027387 <__mulsf3+0xb6>
c0027372:	85 c9                	test   ecx,ecx
c0027374:	74 0b                	je     c0027381 <__mulsf3+0xb0>
c0027376:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027379:	01 c9                	add    ecx,ecx
c002737b:	78 16                	js     c0027393 <__mulsf3+0xc2>
c002737d:	89 d3                	mov    ebx,edx
c002737f:	eb f5                	jmp    c0027376 <__mulsf3+0xa5>
c0027381:	89 f8                	mov    eax,edi
c0027383:	f7 d0                	not    eax
c0027385:	84 c0                	test   al,al
c0027387:	75 c4                	jne    c002734d <__mulsf3+0x7c>
c0027389:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c002738e:	e9 f7 00 00 00       	jmp    c002748a <__mulsf3+0x1b9>
c0027393:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027396:	c1 e6 08             	shl    esi,0x8
c0027399:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c002739f:	8d 57 01             	lea    edx,[edi+0x1]
c00273a2:	80 e2 fe             	and    dl,0xfe
c00273a5:	75 63                	jne    c002740a <__mulsf3+0x139>
c00273a7:	85 c0                	test   eax,eax
c00273a9:	74 2f                	je     c00273da <__mulsf3+0x109>
c00273ab:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00273af:	0f 89 d2 00 00 00    	jns    c0027487 <__mulsf3+0x1b6>
c00273b5:	52                   	push   edx
c00273b6:	52                   	push   edx
c00273b7:	6a 00                	push   0x0
c00273b9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00273bc:	e8 dc 04 00 00       	call   c002789d <__eqsf2>
c00273c1:	83 c4 10             	add    esp,0x10
c00273c4:	85 c0                	test   eax,eax
c00273c6:	0f 85 bb 00 00 00    	jne    c0027487 <__mulsf3+0x1b6>
c00273cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00273cf:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00273d5:	e9 b0 00 00 00       	jmp    c002748a <__mulsf3+0x1b9>
c00273da:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00273dd:	50                   	push   eax
c00273de:	50                   	push   eax
c00273df:	6a 00                	push   0x0
c00273e1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00273e4:	e8 b4 04 00 00       	call   c002789d <__eqsf2>
c00273e9:	83 c4 10             	add    esp,0x10
c00273ec:	85 c0                	test   eax,eax
c00273ee:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00273f1:	75 0c                	jne    c00273ff <__mulsf3+0x12e>
c00273f3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00273f7:	0f 89 8a 00 00 00    	jns    c0027487 <__mulsf3+0x1b6>
c00273fd:	eb cd                	jmp    c00273cc <__mulsf3+0xfb>
c00273ff:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027402:	01 f6                	add    esi,esi
c0027404:	78 04                	js     c002740a <__mulsf3+0x139>
c0027406:	89 c3                	mov    ebx,eax
c0027408:	eb f5                	jmp    c00273ff <__mulsf3+0x12e>
c002740a:	89 c8                	mov    eax,ecx
c002740c:	0d 00 00 00 80       	or     eax,0x80000000
c0027411:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027417:	f7 e6                	mul    esi
c0027419:	85 c0                	test   eax,eax
c002741b:	0f 95 c0             	setne  al
c002741e:	0f b6 c0             	movzx  eax,al
c0027421:	09 c2                	or     edx,eax
c0027423:	78 03                	js     c0027428 <__mulsf3+0x157>
c0027425:	01 d2                	add    edx,edx
c0027427:	4b                   	dec    ebx
c0027428:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c002742e:	7f 22                	jg     c0027452 <__mulsf3+0x181>
c0027430:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027436:	85 db                	test   ebx,ebx
c0027438:	7f 23                	jg     c002745d <__mulsf3+0x18c>
c002743a:	83 fb e9             	cmp    ebx,0xffffffe9
c002743d:	7c 1a                	jl     c0027459 <__mulsf3+0x188>
c002743f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027445:	b9 01 00 00 00       	mov    ecx,0x1
c002744a:	29 d9                	sub    ecx,ebx
c002744c:	d3 ea                	shr    edx,cl
c002744e:	31 db                	xor    ebx,ebx
c0027450:	eb 0b                	jmp    c002745d <__mulsf3+0x18c>
c0027452:	bb ff 00 00 00       	mov    ebx,0xff
c0027457:	eb 02                	jmp    c002745b <__mulsf3+0x18a>
c0027459:	31 db                	xor    ebx,ebx
c002745b:	31 d2                	xor    edx,edx
c002745d:	89 d0                	mov    eax,edx
c002745f:	c1 e8 08             	shr    eax,0x8
c0027462:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027465:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002746b:	09 fb                	or     ebx,edi
c002746d:	c1 e3 17             	shl    ebx,0x17
c0027470:	09 c3                	or     ebx,eax
c0027472:	f6 c2 7f             	test   dl,0x7f
c0027475:	0f 95 c1             	setne  cl
c0027478:	09 c8                	or     eax,ecx
c002747a:	83 e0 01             	and    eax,0x1
c002747d:	c1 ea 07             	shr    edx,0x7
c0027480:	21 c2                	and    edx,eax
c0027482:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027485:	eb 03                	jmp    c002748a <__mulsf3+0x1b9>
c0027487:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c002748a:	89 f0                	mov    eax,esi
c002748c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002748f:	5b                   	pop    ebx
c0027490:	5e                   	pop    esi
c0027491:	5f                   	pop    edi
c0027492:	5d                   	pop    ebp
c0027493:	c3                   	ret    

c0027494 <__divsf3>:
c0027494:	55                   	push   ebp
c0027495:	89 e5                	mov    ebp,esp
c0027497:	57                   	push   edi
c0027498:	56                   	push   esi
c0027499:	53                   	push   ebx
c002749a:	83 ec 1c             	sub    esp,0x1c
c002749d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00274a0:	89 d8                	mov    eax,ebx
c00274a2:	89 d9                	mov    ecx,ebx
c00274a4:	c1 f9 17             	sar    ecx,0x17
c00274a7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00274aa:	c1 e0 08             	shl    eax,0x8
c00274ad:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00274b2:	89 c1                	mov    ecx,eax
c00274b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00274b7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00274ba:	89 c7                	mov    edi,eax
c00274bc:	c1 ff 17             	sar    edi,0x17
c00274bf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00274c3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00274c6:	89 f8                	mov    eax,edi
c00274c8:	0f b6 c0             	movzx  eax,al
c00274cb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00274ce:	29 c6                	sub    esi,eax
c00274d0:	83 c6 7f             	add    esi,0x7f
c00274d3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00274d6:	42                   	inc    edx
c00274d7:	80 e2 fe             	and    dl,0xfe
c00274da:	0f 85 9c 00 00 00    	jne    c002757c <__divsf3+0xe8>
c00274e0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00274e4:	74 33                	je     c0027519 <__divsf3+0x85>
c00274e6:	85 c9                	test   ecx,ecx
c00274e8:	0f 85 c7 01 00 00    	jne    c00276b5 <__divsf3+0x221>
c00274ee:	8d 57 01             	lea    edx,[edi+0x1]
c00274f1:	80 e2 fe             	and    dl,0xfe
c00274f4:	75 2f                	jne    c0027525 <__divsf3+0x91>
c00274f6:	85 c0                	test   eax,eax
c00274f8:	74 2b                	je     c0027525 <__divsf3+0x91>
c00274fa:	51                   	push   ecx
c00274fb:	51                   	push   ecx
c00274fc:	6a 00                	push   0x0
c00274fe:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027501:	e8 d2 03 00 00       	call   c00278d8 <__nesf2>
c0027506:	83 c4 10             	add    esp,0x10
c0027509:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002750c:	85 c0                	test   eax,eax
c002750e:	0f 85 a1 01 00 00    	jne    c00276b5 <__divsf3+0x221>
c0027514:	e9 92 01 00 00       	jmp    c00276ab <__divsf3+0x217>
c0027519:	85 c9                	test   ecx,ecx
c002751b:	75 1b                	jne    c0027538 <__divsf3+0xa4>
c002751d:	8d 57 01             	lea    edx,[edi+0x1]
c0027520:	80 e2 fe             	and    dl,0xfe
c0027523:	74 1e                	je     c0027543 <__divsf3+0xaf>
c0027525:	85 ff                	test   edi,edi
c0027527:	0f 89 88 01 00 00    	jns    c00276b5 <__divsf3+0x221>
c002752d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027533:	e9 7d 01 00 00       	jmp    c00276b5 <__divsf3+0x221>
c0027538:	8d 56 ff             	lea    edx,[esi-0x1]
c002753b:	01 c9                	add    ecx,ecx
c002753d:	78 3d                	js     c002757c <__divsf3+0xe8>
c002753f:	89 d6                	mov    esi,edx
c0027541:	eb f5                	jmp    c0027538 <__divsf3+0xa4>
c0027543:	85 c0                	test   eax,eax
c0027545:	b8 00 00 00 00       	mov    eax,0x0
c002754a:	74 18                	je     c0027564 <__divsf3+0xd0>
c002754c:	52                   	push   edx
c002754d:	52                   	push   edx
c002754e:	50                   	push   eax
c002754f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027552:	e8 81 03 00 00       	call   c00278d8 <__nesf2>
c0027557:	83 c4 10             	add    esp,0x10
c002755a:	85 c0                	test   eax,eax
c002755c:	0f 85 50 01 00 00    	jne    c00276b2 <__divsf3+0x21e>
c0027562:	eb c1                	jmp    c0027525 <__divsf3+0x91>
c0027564:	56                   	push   esi
c0027565:	56                   	push   esi
c0027566:	50                   	push   eax
c0027567:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002756a:	e8 69 03 00 00       	call   c00278d8 <__nesf2>
c002756f:	83 c4 10             	add    esp,0x10
c0027572:	85 c0                	test   eax,eax
c0027574:	0f 84 31 01 00 00    	je     c00276ab <__divsf3+0x217>
c002757a:	eb a9                	jmp    c0027525 <__divsf3+0x91>
c002757c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c002757f:	c1 e3 08             	shl    ebx,0x8
c0027582:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027588:	8d 57 01             	lea    edx,[edi+0x1]
c002758b:	80 e2 fe             	and    dl,0xfe
c002758e:	75 71                	jne    c0027601 <__divsf3+0x16d>
c0027590:	85 c0                	test   eax,eax
c0027592:	ba 00 00 00 00       	mov    edx,0x0
c0027597:	74 2f                	je     c00275c8 <__divsf3+0x134>
c0027599:	51                   	push   ecx
c002759a:	51                   	push   ecx
c002759b:	52                   	push   edx
c002759c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002759f:	e8 f9 02 00 00       	call   c002789d <__eqsf2>
c00275a4:	83 c4 10             	add    esp,0x10
c00275a7:	85 c0                	test   eax,eax
c00275a9:	0f 85 03 01 00 00    	jne    c00276b2 <__divsf3+0x21e>
c00275af:	31 d2                	xor    edx,edx
c00275b1:	89 d3                	mov    ebx,edx
c00275b3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00275b6:	31 f8                	xor    eax,edi
c00275b8:	0f 89 f7 00 00 00    	jns    c00276b5 <__divsf3+0x221>
c00275be:	bb 00 00 00 80       	mov    ebx,0x80000000
c00275c3:	e9 ed 00 00 00       	jmp    c00276b5 <__divsf3+0x221>
c00275c8:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00275cb:	50                   	push   eax
c00275cc:	50                   	push   eax
c00275cd:	52                   	push   edx
c00275ce:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00275d1:	e8 c7 02 00 00       	call   c002789d <__eqsf2>
c00275d6:	83 c4 10             	add    esp,0x10
c00275d9:	85 c0                	test   eax,eax
c00275db:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00275de:	75 16                	jne    c00275f6 <__divsf3+0x162>
c00275e0:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00275e3:	31 fb                	xor    ebx,edi
c00275e5:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00275eb:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00275f1:	e9 bf 00 00 00       	jmp    c00276b5 <__divsf3+0x221>
c00275f6:	8d 46 01             	lea    eax,[esi+0x1]
c00275f9:	01 db                	add    ebx,ebx
c00275fb:	78 04                	js     c0027601 <__divsf3+0x16d>
c00275fd:	89 c6                	mov    esi,eax
c00275ff:	eb f5                	jmp    c00275f6 <__divsf3+0x162>
c0027601:	89 c8                	mov    eax,ecx
c0027603:	0d 00 00 00 80       	or     eax,0x80000000
c0027608:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002760e:	31 d2                	xor    edx,edx
c0027610:	39 d8                	cmp    eax,ebx
c0027612:	72 07                	jb     c002761b <__divsf3+0x187>
c0027614:	29 d8                	sub    eax,ebx
c0027616:	ba 01 00 00 00       	mov    edx,0x1
c002761b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027622:	01 d2                	add    edx,edx
c0027624:	89 c1                	mov    ecx,eax
c0027626:	01 c0                	add    eax,eax
c0027628:	85 c9                	test   ecx,ecx
c002762a:	78 04                	js     c0027630 <__divsf3+0x19c>
c002762c:	39 c3                	cmp    ebx,eax
c002762e:	77 05                	ja     c0027635 <__divsf3+0x1a1>
c0027630:	29 d8                	sub    eax,ebx
c0027632:	83 ca 01             	or     edx,0x1
c0027635:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027638:	75 e8                	jne    c0027622 <__divsf3+0x18e>
c002763a:	85 c0                	test   eax,eax
c002763c:	0f 95 c0             	setne  al
c002763f:	0f b6 c0             	movzx  eax,al
c0027642:	c1 e2 06             	shl    edx,0x6
c0027645:	09 c2                	or     edx,eax
c0027647:	78 03                	js     c002764c <__divsf3+0x1b8>
c0027649:	01 d2                	add    edx,edx
c002764b:	4e                   	dec    esi
c002764c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027652:	7f 22                	jg     c0027676 <__divsf3+0x1e2>
c0027654:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002765a:	85 f6                	test   esi,esi
c002765c:	7f 23                	jg     c0027681 <__divsf3+0x1ed>
c002765e:	83 fe e9             	cmp    esi,0xffffffe9
c0027661:	7c 1a                	jl     c002767d <__divsf3+0x1e9>
c0027663:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027669:	b9 01 00 00 00       	mov    ecx,0x1
c002766e:	29 f1                	sub    ecx,esi
c0027670:	d3 ea                	shr    edx,cl
c0027672:	31 f6                	xor    esi,esi
c0027674:	eb 0b                	jmp    c0027681 <__divsf3+0x1ed>
c0027676:	be ff 00 00 00       	mov    esi,0xff
c002767b:	eb 02                	jmp    c002767f <__divsf3+0x1eb>
c002767d:	31 f6                	xor    esi,esi
c002767f:	31 d2                	xor    edx,edx
c0027681:	89 d0                	mov    eax,edx
c0027683:	c1 e8 08             	shr    eax,0x8
c0027686:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027689:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002768f:	09 fe                	or     esi,edi
c0027691:	c1 e6 17             	shl    esi,0x17
c0027694:	09 c6                	or     esi,eax
c0027696:	f6 c2 7f             	test   dl,0x7f
c0027699:	0f 95 c1             	setne  cl
c002769c:	09 c8                	or     eax,ecx
c002769e:	83 e0 01             	and    eax,0x1
c00276a1:	c1 ea 07             	shr    edx,0x7
c00276a4:	21 c2                	and    edx,eax
c00276a6:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00276a9:	eb 0a                	jmp    c00276b5 <__divsf3+0x221>
c00276ab:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00276b0:	eb 03                	jmp    c00276b5 <__divsf3+0x221>
c00276b2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00276b5:	89 d8                	mov    eax,ebx
c00276b7:	8d 65 f4             	lea    esp,[ebp-0xc]
c00276ba:	5b                   	pop    ebx
c00276bb:	5e                   	pop    esi
c00276bc:	5f                   	pop    edi
c00276bd:	5d                   	pop    ebp
c00276be:	c3                   	ret    

c00276bf <__floatsisf>:
c00276bf:	55                   	push   ebp
c00276c0:	89 e5                	mov    ebp,esp
c00276c2:	53                   	push   ebx
c00276c3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00276c6:	85 d2                	test   edx,edx
c00276c8:	7e 2b                	jle    c00276f5 <__floatsisf+0x36>
c00276ca:	0f bd ca             	bsr    ecx,edx
c00276cd:	83 f1 1f             	xor    ecx,0x1f
c00276d0:	d3 e2                	shl    edx,cl
c00276d2:	89 d0                	mov    eax,edx
c00276d4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00276d9:	89 c3                	mov    ebx,eax
c00276db:	c1 eb 08             	shr    ebx,0x8
c00276de:	80 e2 7f             	and    dl,0x7f
c00276e1:	0f 95 c2             	setne  dl
c00276e4:	09 da                	or     edx,ebx
c00276e6:	83 e2 01             	and    edx,0x1
c00276e9:	c1 e8 07             	shr    eax,0x7
c00276ec:	21 c2                	and    edx,eax
c00276ee:	b8 9e 00 00 00       	mov    eax,0x9e
c00276f3:	eb 32                	jmp    c0027727 <__floatsisf+0x68>
c00276f5:	b8 00 00 00 00       	mov    eax,0x0
c00276fa:	74 34                	je     c0027730 <__floatsisf+0x71>
c00276fc:	f7 da                	neg    edx
c00276fe:	0f bd ca             	bsr    ecx,edx
c0027701:	83 f1 1f             	xor    ecx,0x1f
c0027704:	d3 e2                	shl    edx,cl
c0027706:	89 d0                	mov    eax,edx
c0027708:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002770d:	89 c3                	mov    ebx,eax
c002770f:	c1 eb 08             	shr    ebx,0x8
c0027712:	80 e2 7f             	and    dl,0x7f
c0027715:	0f 95 c2             	setne  dl
c0027718:	09 da                	or     edx,ebx
c002771a:	83 e2 01             	and    edx,0x1
c002771d:	c1 e8 07             	shr    eax,0x7
c0027720:	21 c2                	and    edx,eax
c0027722:	b8 9e 01 00 00       	mov    eax,0x19e
c0027727:	29 c8                	sub    eax,ecx
c0027729:	c1 e0 17             	shl    eax,0x17
c002772c:	09 d8                	or     eax,ebx
c002772e:	01 d0                	add    eax,edx
c0027730:	5b                   	pop    ebx
c0027731:	5d                   	pop    ebp
c0027732:	c3                   	ret    

c0027733 <__floatunsisf>:
c0027733:	55                   	push   ebp
c0027734:	89 e5                	mov    ebp,esp
c0027736:	53                   	push   ebx
c0027737:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002773a:	31 c0                	xor    eax,eax
c002773c:	85 d2                	test   edx,edx
c002773e:	74 32                	je     c0027772 <__floatunsisf+0x3f>
c0027740:	0f bd ca             	bsr    ecx,edx
c0027743:	83 f1 1f             	xor    ecx,0x1f
c0027746:	d3 e2                	shl    edx,cl
c0027748:	89 d0                	mov    eax,edx
c002774a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002774f:	89 c3                	mov    ebx,eax
c0027751:	c1 eb 08             	shr    ebx,0x8
c0027754:	80 e2 7f             	and    dl,0x7f
c0027757:	0f 95 c2             	setne  dl
c002775a:	09 da                	or     edx,ebx
c002775c:	83 e2 01             	and    edx,0x1
c002775f:	c1 e8 07             	shr    eax,0x7
c0027762:	21 c2                	and    edx,eax
c0027764:	b8 9e 00 00 00       	mov    eax,0x9e
c0027769:	29 c8                	sub    eax,ecx
c002776b:	c1 e0 17             	shl    eax,0x17
c002776e:	09 d8                	or     eax,ebx
c0027770:	01 d0                	add    eax,edx
c0027772:	5b                   	pop    ebx
c0027773:	5d                   	pop    ebp
c0027774:	c3                   	ret    

c0027775 <__fixsfsi>:
c0027775:	55                   	push   ebp
c0027776:	89 e5                	mov    ebp,esp
c0027778:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002777b:	89 d1                	mov    ecx,edx
c002777d:	c1 e1 08             	shl    ecx,0x8
c0027780:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027786:	c1 fa 17             	sar    edx,0x17
c0027789:	78 1c                	js     c00277a7 <__fixsfsi+0x32>
c002778b:	83 ea 7f             	sub    edx,0x7f
c002778e:	31 c0                	xor    eax,eax
c0027790:	83 fa 1e             	cmp    edx,0x1e
c0027793:	77 40                	ja     c00277d5 <__fixsfsi+0x60>
c0027795:	89 c8                	mov    eax,ecx
c0027797:	0d 00 00 00 80       	or     eax,0x80000000
c002779c:	b9 1f 00 00 00       	mov    ecx,0x1f
c00277a1:	29 d1                	sub    ecx,edx
c00277a3:	d3 e8                	shr    eax,cl
c00277a5:	eb 2e                	jmp    c00277d5 <__fixsfsi+0x60>
c00277a7:	31 c0                	xor    eax,eax
c00277a9:	81 c2 81 00 00 00    	add    edx,0x81
c00277af:	78 24                	js     c00277d5 <__fixsfsi+0x60>
c00277b1:	83 fa 1e             	cmp    edx,0x1e
c00277b4:	7e 09                	jle    c00277bf <__fixsfsi+0x4a>
c00277b6:	83 fa 1f             	cmp    edx,0x1f
c00277b9:	75 18                	jne    c00277d3 <__fixsfsi+0x5e>
c00277bb:	85 c9                	test   ecx,ecx
c00277bd:	75 14                	jne    c00277d3 <__fixsfsi+0x5e>
c00277bf:	89 c8                	mov    eax,ecx
c00277c1:	0d 00 00 00 80       	or     eax,0x80000000
c00277c6:	b9 1f 00 00 00       	mov    ecx,0x1f
c00277cb:	29 d1                	sub    ecx,edx
c00277cd:	d3 e8                	shr    eax,cl
c00277cf:	f7 d8                	neg    eax
c00277d1:	eb 02                	jmp    c00277d5 <__fixsfsi+0x60>
c00277d3:	31 c0                	xor    eax,eax
c00277d5:	5d                   	pop    ebp
c00277d6:	c3                   	ret    

c00277d7 <__fixunssfsi>:
c00277d7:	55                   	push   ebp
c00277d8:	89 e5                	mov    ebp,esp
c00277da:	53                   	push   ebx
c00277db:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00277de:	89 d3                	mov    ebx,edx
c00277e0:	c1 fb 17             	sar    ebx,0x17
c00277e3:	83 eb 7f             	sub    ebx,0x7f
c00277e6:	31 c0                	xor    eax,eax
c00277e8:	83 fb 1f             	cmp    ebx,0x1f
c00277eb:	77 18                	ja     c0027805 <__fixunssfsi+0x2e>
c00277ed:	89 d0                	mov    eax,edx
c00277ef:	c1 e0 08             	shl    eax,0x8
c00277f2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00277f7:	0d 00 00 00 80       	or     eax,0x80000000
c00277fc:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027801:	29 d9                	sub    ecx,ebx
c0027803:	d3 e8                	shr    eax,cl
c0027805:	5b                   	pop    ebx
c0027806:	5d                   	pop    ebp
c0027807:	c3                   	ret    

c0027808 <__cmpsf2>:
c0027808:	55                   	push   ebp
c0027809:	89 e5                	mov    ebp,esp
c002780b:	57                   	push   edi
c002780c:	56                   	push   esi
c002780d:	53                   	push   ebx
c002780e:	83 ec 24             	sub    esp,0x24
c0027811:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027814:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027817:	e8 4f 10 00 00       	call   c002886b <__truncdfsf2>
c002781c:	5a                   	pop    edx
c002781d:	59                   	pop    ecx
c002781e:	89 c3                	mov    ebx,eax
c0027820:	c1 e8 17             	shr    eax,0x17
c0027823:	0f b6 f0             	movzx  esi,al
c0027826:	89 d8                	mov    eax,ebx
c0027828:	c1 e8 1f             	shr    eax,0x1f
c002782b:	31 c6                	xor    esi,eax
c002782d:	c1 e3 08             	shl    ebx,0x8
c0027830:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027833:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027836:	e8 30 10 00 00       	call   c002886b <__truncdfsf2>
c002783b:	83 c4 10             	add    esp,0x10
c002783e:	89 c1                	mov    ecx,eax
c0027840:	c1 e9 17             	shr    ecx,0x17
c0027843:	0f b6 c9             	movzx  ecx,cl
c0027846:	89 c7                	mov    edi,eax
c0027848:	c1 ef 1f             	shr    edi,0x1f
c002784b:	89 ca                	mov    edx,ecx
c002784d:	31 fa                	xor    edx,edi
c002784f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027852:	c1 e0 08             	shl    eax,0x8
c0027855:	89 c2                	mov    edx,eax
c0027857:	89 d8                	mov    eax,ebx
c0027859:	09 d0                	or     eax,edx
c002785b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027860:	09 f0                	or     eax,esi
c0027862:	75 08                	jne    c002786c <__cmpsf2+0x64>
c0027864:	31 c0                	xor    eax,eax
c0027866:	39 f9                	cmp    ecx,edi
c0027868:	75 0c                	jne    c0027876 <__cmpsf2+0x6e>
c002786a:	eb 29                	jmp    c0027895 <__cmpsf2+0x8d>
c002786c:	b8 01 00 00 00       	mov    eax,0x1
c0027871:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027874:	7f 1f                	jg     c0027895 <__cmpsf2+0x8d>
c0027876:	83 c8 ff             	or     eax,0xffffffff
c0027879:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002787c:	7c 17                	jl     c0027895 <__cmpsf2+0x8d>
c002787e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027884:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002788a:	b8 01 00 00 00       	mov    eax,0x1
c002788f:	39 d3                	cmp    ebx,edx
c0027891:	77 02                	ja     c0027895 <__cmpsf2+0x8d>
c0027893:	19 c0                	sbb    eax,eax
c0027895:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027898:	5b                   	pop    ebx
c0027899:	5e                   	pop    esi
c002789a:	5f                   	pop    edi
c002789b:	5d                   	pop    ebp
c002789c:	c3                   	ret    

c002789d <__eqsf2>:
c002789d:	55                   	push   ebp
c002789e:	89 e5                	mov    ebp,esp
c00278a0:	83 ec 24             	sub    esp,0x24
c00278a3:	6a 01                	push   0x1
c00278a5:	83 ec 0c             	sub    esp,0xc
c00278a8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00278ab:	e8 df 10 00 00       	call   c002898f <__extendsfdf2>
c00278b0:	83 c4 10             	add    esp,0x10
c00278b3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00278b6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00278b9:	52                   	push   edx
c00278ba:	50                   	push   eax
c00278bb:	50                   	push   eax
c00278bc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00278bf:	e8 cb 10 00 00       	call   c002898f <__extendsfdf2>
c00278c4:	59                   	pop    ecx
c00278c5:	59                   	pop    ecx
c00278c6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00278c9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00278cc:	52                   	push   edx
c00278cd:	50                   	push   eax
c00278ce:	e8 35 ff ff ff       	call   c0027808 <__cmpsf2>
c00278d3:	83 c4 20             	add    esp,0x20
c00278d6:	c9                   	leave  
c00278d7:	c3                   	ret    

c00278d8 <__nesf2>:
c00278d8:	eb c3                	jmp    c002789d <__eqsf2>

c00278da <__gtsf2>:
c00278da:	55                   	push   ebp
c00278db:	89 e5                	mov    ebp,esp
c00278dd:	83 ec 24             	sub    esp,0x24
c00278e0:	6a ff                	push   0xffffffff
c00278e2:	83 ec 0c             	sub    esp,0xc
c00278e5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00278e8:	e8 a2 10 00 00       	call   c002898f <__extendsfdf2>
c00278ed:	83 c4 10             	add    esp,0x10
c00278f0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00278f3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00278f6:	52                   	push   edx
c00278f7:	50                   	push   eax
c00278f8:	50                   	push   eax
c00278f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00278fc:	e8 8e 10 00 00       	call   c002898f <__extendsfdf2>
c0027901:	59                   	pop    ecx
c0027902:	59                   	pop    ecx
c0027903:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027906:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027909:	52                   	push   edx
c002790a:	50                   	push   eax
c002790b:	e8 f8 fe ff ff       	call   c0027808 <__cmpsf2>
c0027910:	83 c4 20             	add    esp,0x20
c0027913:	c9                   	leave  
c0027914:	c3                   	ret    

c0027915 <__gesf2>:
c0027915:	eb c3                	jmp    c00278da <__gtsf2>

c0027917 <__ltsf2>:
c0027917:	eb 84                	jmp    c002789d <__eqsf2>

c0027919 <__lesf2>:
c0027919:	eb 82                	jmp    c002789d <__eqsf2>

c002791b <__adddf3>:
c002791b:	55                   	push   ebp
c002791c:	89 e5                	mov    ebp,esp
c002791e:	57                   	push   edi
c002791f:	56                   	push   esi
c0027920:	53                   	push   ebx
c0027921:	83 ec 24             	sub    esp,0x24
c0027924:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027927:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002792a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002792d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027930:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027933:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027936:	89 c8                	mov    eax,ecx
c0027938:	89 ce                	mov    esi,ecx
c002793a:	c1 fe 14             	sar    esi,0x14
c002793d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027940:	89 fb                	mov    ebx,edi
c0027942:	89 fa                	mov    edx,edi
c0027944:	c1 e2 0b             	shl    edx,0xb
c0027947:	c1 e0 0b             	shl    eax,0xb
c002794a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002794f:	c1 eb 15             	shr    ebx,0x15
c0027952:	09 d8                	or     eax,ebx
c0027954:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027957:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002795a:	c1 fe 14             	sar    esi,0x14
c002795d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027960:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027963:	89 f3                	mov    ebx,esi
c0027965:	c1 e3 0b             	shl    ebx,0xb
c0027968:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002796b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002796e:	c1 e3 0b             	shl    ebx,0xb
c0027971:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027977:	c1 ee 15             	shr    esi,0x15
c002797a:	09 f3                	or     ebx,esi
c002797c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c002797f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027982:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027985:	0f 88 5f 02 00 00    	js     c0027bea <__adddf3+0x2cf>
c002798b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002798e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027991:	85 db                	test   ebx,ebx
c0027993:	0f 8e c7 00 00 00    	jle    c0027a60 <__adddf3+0x145>
c0027999:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00279a0:	75 1a                	jne    c00279bc <__adddf3+0xa1>
c00279a2:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00279a5:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00279a8:	0f 84 b2 05 00 00    	je     c0027f60 <__adddf3+0x645>
c00279ae:	4b                   	dec    ebx
c00279af:	75 23                	jne    c00279d4 <__adddf3+0xb9>
c00279b1:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00279b4:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00279b7:	e9 99 00 00 00       	jmp    c0027a55 <__adddf3+0x13a>
c00279bc:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00279bf:	f7 d6                	not    esi
c00279c1:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00279c7:	0f 84 93 05 00 00    	je     c0027f60 <__adddf3+0x645>
c00279cd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00279d4:	83 fb 1f             	cmp    ebx,0x1f
c00279d7:	7e 42                	jle    c0027a1b <__adddf3+0x100>
c00279d9:	83 fb 3f             	cmp    ebx,0x3f
c00279dc:	0f 8f 7e 05 00 00    	jg     c0027f60 <__adddf3+0x645>
c00279e2:	83 e3 1f             	and    ebx,0x1f
c00279e5:	89 d9                	mov    ecx,ebx
c00279e7:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00279ea:	d3 ef                	shr    edi,cl
c00279ec:	31 db                	xor    ebx,ebx
c00279ee:	85 c9                	test   ecx,ecx
c00279f0:	74 15                	je     c0027a07 <__adddf3+0xec>
c00279f2:	be 20 00 00 00       	mov    esi,0x20
c00279f7:	29 ce                	sub    esi,ecx
c00279f9:	89 f1                	mov    ecx,esi
c00279fb:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279fe:	d3 e6                	shl    esi,cl
c0027a00:	31 db                	xor    ebx,ebx
c0027a02:	85 f6                	test   esi,esi
c0027a04:	0f 95 c3             	setne  bl
c0027a07:	31 c9                	xor    ecx,ecx
c0027a09:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027a0d:	0f 95 c1             	setne  cl
c0027a10:	09 cf                	or     edi,ecx
c0027a12:	09 fb                	or     ebx,edi
c0027a14:	01 da                	add    edx,ebx
c0027a16:	83 d0 00             	adc    eax,0x0
c0027a19:	eb 3a                	jmp    c0027a55 <__adddf3+0x13a>
c0027a1b:	bf 20 00 00 00       	mov    edi,0x20
c0027a20:	29 df                	sub    edi,ebx
c0027a22:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027a25:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a28:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027a2b:	d3 e6                	shl    esi,cl
c0027a2d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027a30:	88 d9                	mov    cl,bl
c0027a32:	d3 ef                	shr    edi,cl
c0027a34:	09 fe                	or     esi,edi
c0027a36:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027a39:	88 d9                	mov    cl,bl
c0027a3b:	d3 ef                	shr    edi,cl
c0027a3d:	89 fb                	mov    ebx,edi
c0027a3f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027a42:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027a45:	d3 e7                	shl    edi,cl
c0027a47:	85 ff                	test   edi,edi
c0027a49:	0f 95 c1             	setne  cl
c0027a4c:	0f b6 c9             	movzx  ecx,cl
c0027a4f:	09 ce                	or     esi,ecx
c0027a51:	01 f2                	add    edx,esi
c0027a53:	11 d8                	adc    eax,ebx
c0027a55:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a58:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027a5b:	e9 52 01 00 00       	jmp    c0027bb2 <__adddf3+0x297>
c0027a60:	0f 84 d5 00 00 00    	je     c0027b3b <__adddf3+0x220>
c0027a66:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027a69:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027a6c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a6f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a72:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027a79:	75 20                	jne    c0027a9b <__adddf3+0x180>
c0027a7b:	89 d6                	mov    esi,edx
c0027a7d:	09 c6                	or     esi,eax
c0027a7f:	0f 84 db 04 00 00    	je     c0027f60 <__adddf3+0x645>
c0027a85:	4b                   	dec    ebx
c0027a86:	75 29                	jne    c0027ab1 <__adddf3+0x196>
c0027a88:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a8b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027a8e:	01 d1                	add    ecx,edx
c0027a90:	11 c6                	adc    esi,eax
c0027a92:	89 f0                	mov    eax,esi
c0027a94:	89 ca                	mov    edx,ecx
c0027a96:	e9 17 01 00 00       	jmp    c0027bb2 <__adddf3+0x297>
c0027a9b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027a9e:	f7 d6                	not    esi
c0027aa0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027aa6:	0f 84 b4 04 00 00    	je     c0027f60 <__adddf3+0x645>
c0027aac:	0d 00 00 00 80       	or     eax,0x80000000
c0027ab1:	83 fb 1f             	cmp    ebx,0x1f
c0027ab4:	7e 48                	jle    c0027afe <__adddf3+0x1e3>
c0027ab6:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027ab9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027abc:	83 fb 3f             	cmp    ebx,0x3f
c0027abf:	0f 8f 9b 04 00 00    	jg     c0027f60 <__adddf3+0x645>
c0027ac5:	83 e3 1f             	and    ebx,0x1f
c0027ac8:	89 d9                	mov    ecx,ebx
c0027aca:	89 c7                	mov    edi,eax
c0027acc:	d3 ef                	shr    edi,cl
c0027ace:	31 db                	xor    ebx,ebx
c0027ad0:	85 c9                	test   ecx,ecx
c0027ad2:	74 12                	je     c0027ae6 <__adddf3+0x1cb>
c0027ad4:	be 20 00 00 00       	mov    esi,0x20
c0027ad9:	29 ce                	sub    esi,ecx
c0027adb:	89 f1                	mov    ecx,esi
c0027add:	d3 e0                	shl    eax,cl
c0027adf:	31 db                	xor    ebx,ebx
c0027ae1:	85 c0                	test   eax,eax
c0027ae3:	0f 95 c3             	setne  bl
c0027ae6:	31 c0                	xor    eax,eax
c0027ae8:	85 d2                	test   edx,edx
c0027aea:	0f 95 c0             	setne  al
c0027aed:	09 c7                	or     edi,eax
c0027aef:	09 fb                	or     ebx,edi
c0027af1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027af4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027af7:	01 da                	add    edx,ebx
c0027af9:	83 d6 00             	adc    esi,0x0
c0027afc:	eb 39                	jmp    c0027b37 <__adddf3+0x21c>
c0027afe:	be 20 00 00 00       	mov    esi,0x20
c0027b03:	29 de                	sub    esi,ebx
c0027b05:	89 c7                	mov    edi,eax
c0027b07:	89 f1                	mov    ecx,esi
c0027b09:	d3 e7                	shl    edi,cl
c0027b0b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027b0e:	89 d7                	mov    edi,edx
c0027b10:	88 d9                	mov    cl,bl
c0027b12:	d3 ef                	shr    edi,cl
c0027b14:	89 f9                	mov    ecx,edi
c0027b16:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b19:	09 cf                	or     edi,ecx
c0027b1b:	88 d9                	mov    cl,bl
c0027b1d:	d3 e8                	shr    eax,cl
c0027b1f:	89 f1                	mov    ecx,esi
c0027b21:	d3 e2                	shl    edx,cl
c0027b23:	85 d2                	test   edx,edx
c0027b25:	0f 95 c2             	setne  dl
c0027b28:	0f b6 d2             	movzx  edx,dl
c0027b2b:	09 d7                	or     edi,edx
c0027b2d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027b30:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027b33:	01 fa                	add    edx,edi
c0027b35:	11 c6                	adc    esi,eax
c0027b37:	89 f0                	mov    eax,esi
c0027b39:	eb 77                	jmp    c0027bb2 <__adddf3+0x297>
c0027b3b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027b3e:	46                   	inc    esi
c0027b3f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027b42:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027b48:	75 41                	jne    c0027b8b <__adddf3+0x270>
c0027b4a:	89 d3                	mov    ebx,edx
c0027b4c:	09 c3                	or     ebx,eax
c0027b4e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027b55:	75 27                	jne    c0027b7e <__adddf3+0x263>
c0027b57:	85 db                	test   ebx,ebx
c0027b59:	0f 84 fb 03 00 00    	je     c0027f5a <__adddf3+0x63f>
c0027b5f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027b62:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027b65:	0f 84 f5 03 00 00    	je     c0027f60 <__adddf3+0x645>
c0027b6b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027b6e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027b71:	85 c0                	test   eax,eax
c0027b73:	0f 89 91 03 00 00    	jns    c0027f0a <__adddf3+0x5ef>
c0027b79:	e9 85 03 00 00       	jmp    c0027f03 <__adddf3+0x5e8>
c0027b7e:	85 db                	test   ebx,ebx
c0027b80:	0f 85 da 03 00 00    	jne    c0027f60 <__adddf3+0x645>
c0027b86:	e9 cf 03 00 00       	jmp    c0027f5a <__adddf3+0x63f>
c0027b8b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027b8e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027b91:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b94:	f7 d1                	not    ecx
c0027b96:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027b9c:	0f 84 70 03 00 00    	je     c0027f12 <__adddf3+0x5f7>
c0027ba2:	d1 ea                	shr    edx,1
c0027ba4:	89 c1                	mov    ecx,eax
c0027ba6:	c1 e1 1f             	shl    ecx,0x1f
c0027ba9:	09 ca                	or     edx,ecx
c0027bab:	d1 e8                	shr    eax,1
c0027bad:	e9 6f 03 00 00       	jmp    c0027f21 <__adddf3+0x606>
c0027bb2:	85 c0                	test   eax,eax
c0027bb4:	0f 89 67 03 00 00    	jns    c0027f21 <__adddf3+0x606>
c0027bba:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027bbd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027bc0:	f7 d1                	not    ecx
c0027bc2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027bc8:	0f 84 44 03 00 00    	je     c0027f12 <__adddf3+0x5f7>
c0027bce:	89 d1                	mov    ecx,edx
c0027bd0:	d1 e9                	shr    ecx,1
c0027bd2:	83 e2 01             	and    edx,0x1
c0027bd5:	09 ca                	or     edx,ecx
c0027bd7:	89 c1                	mov    ecx,eax
c0027bd9:	c1 e1 1f             	shl    ecx,0x1f
c0027bdc:	09 ca                	or     edx,ecx
c0027bde:	d1 e8                	shr    eax,1
c0027be0:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027be5:	e9 37 03 00 00       	jmp    c0027f21 <__adddf3+0x606>
c0027bea:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027bed:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027bf3:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027bf6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027bf9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027bff:	29 de                	sub    esi,ebx
c0027c01:	85 f6                	test   esi,esi
c0027c03:	0f 8e bd 00 00 00    	jle    c0027cc6 <__adddf3+0x3ab>
c0027c09:	85 db                	test   ebx,ebx
c0027c0b:	75 17                	jne    c0027c24 <__adddf3+0x309>
c0027c0d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027c10:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027c13:	0f 84 47 03 00 00    	je     c0027f60 <__adddf3+0x645>
c0027c19:	4e                   	dec    esi
c0027c1a:	75 20                	jne    c0027c3c <__adddf3+0x321>
c0027c1c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027c1f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027c22:	eb 5b                	jmp    c0027c7f <__adddf3+0x364>
c0027c24:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027c27:	f7 d3                	not    ebx
c0027c29:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027c2f:	0f 84 2b 03 00 00    	je     c0027f60 <__adddf3+0x645>
c0027c35:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027c3c:	83 fe 1f             	cmp    esi,0x1f
c0027c3f:	7e 49                	jle    c0027c8a <__adddf3+0x36f>
c0027c41:	83 fe 3f             	cmp    esi,0x3f
c0027c44:	0f 8f 16 03 00 00    	jg     c0027f60 <__adddf3+0x645>
c0027c4a:	83 e6 1f             	and    esi,0x1f
c0027c4d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027c50:	89 f1                	mov    ecx,esi
c0027c52:	d3 ef                	shr    edi,cl
c0027c54:	31 db                	xor    ebx,ebx
c0027c56:	85 f6                	test   esi,esi
c0027c58:	74 13                	je     c0027c6d <__adddf3+0x352>
c0027c5a:	b9 20 00 00 00       	mov    ecx,0x20
c0027c5f:	29 f1                	sub    ecx,esi
c0027c61:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027c64:	d3 e6                	shl    esi,cl
c0027c66:	31 db                	xor    ebx,ebx
c0027c68:	85 f6                	test   esi,esi
c0027c6a:	0f 95 c3             	setne  bl
c0027c6d:	31 c9                	xor    ecx,ecx
c0027c6f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027c73:	0f 95 c1             	setne  cl
c0027c76:	09 cf                	or     edi,ecx
c0027c78:	09 fb                	or     ebx,edi
c0027c7a:	29 da                	sub    edx,ebx
c0027c7c:	83 d8 00             	sbb    eax,0x0
c0027c7f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c82:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027c85:	e9 aa 01 00 00       	jmp    c0027e34 <__adddf3+0x519>
c0027c8a:	bf 20 00 00 00       	mov    edi,0x20
c0027c8f:	29 f7                	sub    edi,esi
c0027c91:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027c94:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027c97:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027c9a:	d3 e3                	shl    ebx,cl
c0027c9c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027c9f:	89 f1                	mov    ecx,esi
c0027ca1:	d3 ef                	shr    edi,cl
c0027ca3:	09 fb                	or     ebx,edi
c0027ca5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027ca8:	89 f1                	mov    ecx,esi
c0027caa:	d3 ef                	shr    edi,cl
c0027cac:	89 fe                	mov    esi,edi
c0027cae:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027cb1:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027cb4:	d3 e7                	shl    edi,cl
c0027cb6:	85 ff                	test   edi,edi
c0027cb8:	0f 95 c1             	setne  cl
c0027cbb:	0f b6 c9             	movzx  ecx,cl
c0027cbe:	09 cb                	or     ebx,ecx
c0027cc0:	29 da                	sub    edx,ebx
c0027cc2:	19 f0                	sbb    eax,esi
c0027cc4:	eb b9                	jmp    c0027c7f <__adddf3+0x364>
c0027cc6:	0f 84 cd 00 00 00    	je     c0027d99 <__adddf3+0x47e>
c0027ccc:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027ccf:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027cd2:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027cd5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027cd9:	75 1b                	jne    c0027cf6 <__adddf3+0x3db>
c0027cdb:	89 d6                	mov    esi,edx
c0027cdd:	09 c6                	or     esi,eax
c0027cdf:	0f 84 7b 02 00 00    	je     c0027f60 <__adddf3+0x645>
c0027ce5:	4b                   	dec    ebx
c0027ce6:	75 24                	jne    c0027d0c <__adddf3+0x3f1>
c0027ce8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ceb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027cee:	29 d1                	sub    ecx,edx
c0027cf0:	19 c6                	sbb    esi,eax
c0027cf2:	89 ca                	mov    edx,ecx
c0027cf4:	eb 61                	jmp    c0027d57 <__adddf3+0x43c>
c0027cf6:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027cf9:	f7 d6                	not    esi
c0027cfb:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027d01:	0f 84 59 02 00 00    	je     c0027f60 <__adddf3+0x645>
c0027d07:	0d 00 00 00 80       	or     eax,0x80000000
c0027d0c:	83 fb 1f             	cmp    ebx,0x1f
c0027d0f:	7e 4d                	jle    c0027d5e <__adddf3+0x443>
c0027d11:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027d14:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027d17:	83 fb 3f             	cmp    ebx,0x3f
c0027d1a:	0f 8f 40 02 00 00    	jg     c0027f60 <__adddf3+0x645>
c0027d20:	83 e3 1f             	and    ebx,0x1f
c0027d23:	89 d9                	mov    ecx,ebx
c0027d25:	89 c7                	mov    edi,eax
c0027d27:	d3 ef                	shr    edi,cl
c0027d29:	31 db                	xor    ebx,ebx
c0027d2b:	85 c9                	test   ecx,ecx
c0027d2d:	74 12                	je     c0027d41 <__adddf3+0x426>
c0027d2f:	be 20 00 00 00       	mov    esi,0x20
c0027d34:	29 ce                	sub    esi,ecx
c0027d36:	89 f1                	mov    ecx,esi
c0027d38:	d3 e0                	shl    eax,cl
c0027d3a:	31 db                	xor    ebx,ebx
c0027d3c:	85 c0                	test   eax,eax
c0027d3e:	0f 95 c3             	setne  bl
c0027d41:	31 c0                	xor    eax,eax
c0027d43:	85 d2                	test   edx,edx
c0027d45:	0f 95 c0             	setne  al
c0027d48:	09 c7                	or     edi,eax
c0027d4a:	09 fb                	or     ebx,edi
c0027d4c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d4f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027d52:	29 da                	sub    edx,ebx
c0027d54:	83 de 00             	sbb    esi,0x0
c0027d57:	89 f0                	mov    eax,esi
c0027d59:	e9 d6 00 00 00       	jmp    c0027e34 <__adddf3+0x519>
c0027d5e:	be 20 00 00 00       	mov    esi,0x20
c0027d63:	29 de                	sub    esi,ebx
c0027d65:	89 c7                	mov    edi,eax
c0027d67:	89 f1                	mov    ecx,esi
c0027d69:	d3 e7                	shl    edi,cl
c0027d6b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027d6e:	89 d7                	mov    edi,edx
c0027d70:	88 d9                	mov    cl,bl
c0027d72:	d3 ef                	shr    edi,cl
c0027d74:	89 f9                	mov    ecx,edi
c0027d76:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d79:	09 cf                	or     edi,ecx
c0027d7b:	88 d9                	mov    cl,bl
c0027d7d:	d3 e8                	shr    eax,cl
c0027d7f:	89 f1                	mov    ecx,esi
c0027d81:	d3 e2                	shl    edx,cl
c0027d83:	85 d2                	test   edx,edx
c0027d85:	0f 95 c2             	setne  dl
c0027d88:	0f b6 d2             	movzx  edx,dl
c0027d8b:	09 d7                	or     edi,edx
c0027d8d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d90:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027d93:	29 fa                	sub    edx,edi
c0027d95:	19 c6                	sbb    esi,eax
c0027d97:	eb be                	jmp    c0027d57 <__adddf3+0x43c>
c0027d99:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027d9c:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027d9f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027da5:	75 6a                	jne    c0027e11 <__adddf3+0x4f6>
c0027da7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027dab:	75 58                	jne    c0027e05 <__adddf3+0x4ea>
c0027dad:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027db0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027db3:	89 d6                	mov    esi,edx
c0027db5:	09 c6                	or     esi,eax
c0027db7:	75 17                	jne    c0027dd0 <__adddf3+0x4b5>
c0027db9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027dbc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027dbf:	85 db                	test   ebx,ebx
c0027dc1:	0f 85 99 01 00 00    	jne    c0027f60 <__adddf3+0x645>
c0027dc7:	31 ff                	xor    edi,edi
c0027dc9:	31 c9                	xor    ecx,ecx
c0027dcb:	e9 90 01 00 00       	jmp    c0027f60 <__adddf3+0x645>
c0027dd0:	85 db                	test   ebx,ebx
c0027dd2:	0f 84 88 01 00 00    	je     c0027f60 <__adddf3+0x645>
c0027dd8:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027ddb:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027dde:	85 c0                	test   eax,eax
c0027de0:	79 10                	jns    c0027df2 <__adddf3+0x4d7>
c0027de2:	31 c9                	xor    ecx,ecx
c0027de4:	f7 da                	neg    edx
c0027de6:	0f 95 c1             	setne  cl
c0027de9:	01 c8                	add    eax,ecx
c0027deb:	f7 d8                	neg    eax
c0027ded:	e9 2f 01 00 00       	jmp    c0027f21 <__adddf3+0x606>
c0027df2:	31 ff                	xor    edi,edi
c0027df4:	31 c9                	xor    ecx,ecx
c0027df6:	89 c3                	mov    ebx,eax
c0027df8:	09 d3                	or     ebx,edx
c0027dfa:	0f 84 60 01 00 00    	je     c0027f60 <__adddf3+0x645>
c0027e00:	e9 05 01 00 00       	jmp    c0027f0a <__adddf3+0x5ef>
c0027e05:	31 ff                	xor    edi,edi
c0027e07:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027e0c:	e9 4f 01 00 00       	jmp    c0027f60 <__adddf3+0x645>
c0027e11:	89 c1                	mov    ecx,eax
c0027e13:	89 d0                	mov    eax,edx
c0027e15:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027e18:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027e1b:	89 ca                	mov    edx,ecx
c0027e1d:	85 c9                	test   ecx,ecx
c0027e1f:	79 2c                	jns    c0027e4d <__adddf3+0x532>
c0027e21:	31 c9                	xor    ecx,ecx
c0027e23:	f7 d8                	neg    eax
c0027e25:	0f 95 c1             	setne  cl
c0027e28:	01 ca                	add    edx,ecx
c0027e2a:	f7 da                	neg    edx
c0027e2c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027e2f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027e32:	eb 19                	jmp    c0027e4d <__adddf3+0x532>
c0027e34:	85 c0                	test   eax,eax
c0027e36:	0f 89 e5 00 00 00    	jns    c0027f21 <__adddf3+0x606>
c0027e3c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027e41:	89 c1                	mov    ecx,eax
c0027e43:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027e46:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027e49:	89 d0                	mov    eax,edx
c0027e4b:	89 ca                	mov    edx,ecx
c0027e4d:	85 d2                	test   edx,edx
c0027e4f:	74 59                	je     c0027eaa <__adddf3+0x58f>
c0027e51:	0f bd da             	bsr    ebx,edx
c0027e54:	83 f3 1f             	xor    ebx,0x1f
c0027e57:	88 d9                	mov    cl,bl
c0027e59:	d3 e2                	shl    edx,cl
c0027e5b:	bf 20 00 00 00       	mov    edi,0x20
c0027e60:	89 f9                	mov    ecx,edi
c0027e62:	29 d9                	sub    ecx,ebx
c0027e64:	89 c6                	mov    esi,eax
c0027e66:	d3 ee                	shr    esi,cl
c0027e68:	09 d6                	or     esi,edx
c0027e6a:	88 d9                	mov    cl,bl
c0027e6c:	d3 e0                	shl    eax,cl
c0027e6e:	89 c2                	mov    edx,eax
c0027e70:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e73:	25 ff 07 00 00       	and    eax,0x7ff
c0027e78:	39 d8                	cmp    eax,ebx
c0027e7a:	7f 22                	jg     c0027e9e <__adddf3+0x583>
c0027e7c:	29 c3                	sub    ebx,eax
c0027e7e:	43                   	inc    ebx
c0027e7f:	88 d9                	mov    cl,bl
c0027e81:	d3 ea                	shr    edx,cl
c0027e83:	29 df                	sub    edi,ebx
c0027e85:	89 f9                	mov    ecx,edi
c0027e87:	89 f0                	mov    eax,esi
c0027e89:	d3 e0                	shl    eax,cl
c0027e8b:	09 c2                	or     edx,eax
c0027e8d:	89 f0                	mov    eax,esi
c0027e8f:	88 d9                	mov    cl,bl
c0027e91:	d3 e8                	shr    eax,cl
c0027e93:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027e96:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027e9c:	eb 6f                	jmp    c0027f0d <__adddf3+0x5f2>
c0027e9e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ea1:	29 d8                	sub    eax,ebx
c0027ea3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ea6:	89 f0                	mov    eax,esi
c0027ea8:	eb 59                	jmp    c0027f03 <__adddf3+0x5e8>
c0027eaa:	85 c0                	test   eax,eax
c0027eac:	74 6a                	je     c0027f18 <__adddf3+0x5fd>
c0027eae:	0f bd c8             	bsr    ecx,eax
c0027eb1:	83 f1 1f             	xor    ecx,0x1f
c0027eb4:	d3 e0                	shl    eax,cl
c0027eb6:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027eb9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027ebf:	83 c1 20             	add    ecx,0x20
c0027ec2:	39 cb                	cmp    ebx,ecx
c0027ec4:	7f 35                	jg     c0027efb <__adddf3+0x5e0>
c0027ec6:	29 d9                	sub    ecx,ebx
c0027ec8:	8d 71 01             	lea    esi,[ecx+0x1]
c0027ecb:	83 fe 1f             	cmp    esi,0x1f
c0027ece:	7e 09                	jle    c0027ed9 <__adddf3+0x5be>
c0027ed0:	83 e9 1f             	sub    ecx,0x1f
c0027ed3:	d3 e8                	shr    eax,cl
c0027ed5:	89 c3                	mov    ebx,eax
c0027ed7:	eb 11                	jmp    c0027eea <__adddf3+0x5cf>
c0027ed9:	b9 20 00 00 00       	mov    ecx,0x20
c0027ede:	29 f1                	sub    ecx,esi
c0027ee0:	89 c3                	mov    ebx,eax
c0027ee2:	d3 e3                	shl    ebx,cl
c0027ee4:	89 f1                	mov    ecx,esi
c0027ee6:	d3 e8                	shr    eax,cl
c0027ee8:	89 c2                	mov    edx,eax
c0027eea:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027eed:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027ef2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ef5:	89 d0                	mov    eax,edx
c0027ef7:	89 da                	mov    edx,ebx
c0027ef9:	eb 26                	jmp    c0027f21 <__adddf3+0x606>
c0027efb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027efe:	29 cf                	sub    edi,ecx
c0027f00:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027f03:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027f08:	eb 17                	jmp    c0027f21 <__adddf3+0x606>
c0027f0a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f0d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027f10:	eb 0f                	jmp    c0027f21 <__adddf3+0x606>
c0027f12:	31 d2                	xor    edx,edx
c0027f14:	31 c0                	xor    eax,eax
c0027f16:	eb 09                	jmp    c0027f21 <__adddf3+0x606>
c0027f18:	89 c2                	mov    edx,eax
c0027f1a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027f21:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027f24:	c1 e1 14             	shl    ecx,0x14
c0027f27:	89 c3                	mov    ebx,eax
c0027f29:	c1 eb 0b             	shr    ebx,0xb
c0027f2c:	09 d9                	or     ecx,ebx
c0027f2e:	89 d3                	mov    ebx,edx
c0027f30:	c1 eb 0b             	shr    ebx,0xb
c0027f33:	c1 e0 15             	shl    eax,0x15
c0027f36:	09 d8                	or     eax,ebx
c0027f38:	89 c7                	mov    edi,eax
c0027f3a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027f40:	0f 95 c0             	setne  al
c0027f43:	89 c6                	mov    esi,eax
c0027f45:	09 f3                	or     ebx,esi
c0027f47:	83 e3 01             	and    ebx,0x1
c0027f4a:	c1 ea 0a             	shr    edx,0xa
c0027f4d:	21 da                	and    edx,ebx
c0027f4f:	89 f8                	mov    eax,edi
c0027f51:	01 d0                	add    eax,edx
c0027f53:	83 d1 00             	adc    ecx,0x0
c0027f56:	89 c7                	mov    edi,eax
c0027f58:	eb 06                	jmp    c0027f60 <__adddf3+0x645>
c0027f5a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027f5d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027f60:	89 f8                	mov    eax,edi
c0027f62:	89 ca                	mov    edx,ecx
c0027f64:	83 c4 24             	add    esp,0x24
c0027f67:	5b                   	pop    ebx
c0027f68:	5e                   	pop    esi
c0027f69:	5f                   	pop    edi
c0027f6a:	5d                   	pop    ebp
c0027f6b:	c3                   	ret    

c0027f6c <__subdf3>:
c0027f6c:	55                   	push   ebp
c0027f6d:	89 e5                	mov    ebp,esp
c0027f6f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027f72:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027f75:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027f7b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027f7e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027f81:	5d                   	pop    ebp
c0027f82:	e9 94 f9 ff ff       	jmp    c002791b <__adddf3>

c0027f87 <__negdf2>:
c0027f87:	55                   	push   ebp
c0027f88:	89 e5                	mov    ebp,esp
c0027f8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027f8d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027f90:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027f96:	5d                   	pop    ebp
c0027f97:	c3                   	ret    

c0027f98 <__muldf3>:
c0027f98:	55                   	push   ebp
c0027f99:	89 e5                	mov    ebp,esp
c0027f9b:	57                   	push   edi
c0027f9c:	56                   	push   esi
c0027f9d:	53                   	push   ebx
c0027f9e:	83 ec 24             	sub    esp,0x24
c0027fa1:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027fa4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027fa7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027faa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027fad:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027fb0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027fb3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027fb6:	89 c8                	mov    eax,ecx
c0027fb8:	c1 f8 14             	sar    eax,0x14
c0027fbb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027fbe:	89 f8                	mov    eax,edi
c0027fc0:	89 fb                	mov    ebx,edi
c0027fc2:	c1 e3 0b             	shl    ebx,0xb
c0027fc5:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027fc8:	c1 e1 0b             	shl    ecx,0xb
c0027fcb:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027fd1:	c1 e8 15             	shr    eax,0x15
c0027fd4:	09 c1                	or     ecx,eax
c0027fd6:	89 d6                	mov    esi,edx
c0027fd8:	89 d0                	mov    eax,edx
c0027fda:	c1 f8 14             	sar    eax,0x14
c0027fdd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027fe0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027fe3:	89 c3                	mov    ebx,eax
c0027fe5:	c1 e3 0b             	shl    ebx,0xb
c0027fe8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027feb:	c1 e6 0b             	shl    esi,0xb
c0027fee:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027ff4:	c1 e8 15             	shr    eax,0x15
c0027ff7:	09 c6                	or     esi,eax
c0027ff9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ffc:	25 ff 07 00 00       	and    eax,0x7ff
c0028001:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028004:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028007:	25 ff 07 00 00       	and    eax,0x7ff
c002800c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002800f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028012:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028015:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002801c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002801f:	40                   	inc    eax
c0028020:	a9 fe 07 00 00       	test   eax,0x7fe
c0028025:	0f 85 8d 00 00 00    	jne    c00280b8 <__muldf3+0x120>
c002802b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002802e:	09 c8                	or     eax,ecx
c0028030:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0028034:	74 44                	je     c002807a <__muldf3+0xe2>
c0028036:	85 c0                	test   eax,eax
c0028038:	0f 85 31 02 00 00    	jne    c002826f <__muldf3+0x2d7>
c002803e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028041:	40                   	inc    eax
c0028042:	a9 fe 07 00 00       	test   eax,0x7fe
c0028047:	75 13                	jne    c002805c <__muldf3+0xc4>
c0028049:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002804c:	09 f1                	or     ecx,esi
c002804e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028052:	74 22                	je     c0028076 <__muldf3+0xde>
c0028054:	85 c9                	test   ecx,ecx
c0028056:	0f 85 0d 02 00 00    	jne    c0028269 <__muldf3+0x2d1>
c002805c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0028060:	0f 89 09 02 00 00    	jns    c002826f <__muldf3+0x2d7>
c0028066:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028069:	05 00 00 00 80       	add    eax,0x80000000
c002806e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028071:	e9 f9 01 00 00       	jmp    c002826f <__muldf3+0x2d7>
c0028076:	85 c9                	test   ecx,ecx
c0028078:	eb 2e                	jmp    c00280a8 <__muldf3+0x110>
c002807a:	85 c0                	test   eax,eax
c002807c:	74 20                	je     c002809e <__muldf3+0x106>
c002807e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0028081:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028084:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028087:	c1 ef 1f             	shr    edi,0x1f
c002808a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c002808d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0028090:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028093:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028096:	09 f9                	or     ecx,edi
c0028098:	78 1e                	js     c00280b8 <__muldf3+0x120>
c002809a:	89 c3                	mov    ebx,eax
c002809c:	eb e0                	jmp    c002807e <__muldf3+0xe6>
c002809e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00280a1:	f7 d0                	not    eax
c00280a3:	a9 ff 07 00 00       	test   eax,0x7ff
c00280a8:	75 b2                	jne    c002805c <__muldf3+0xc4>
c00280aa:	31 ff                	xor    edi,edi
c00280ac:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c00280b3:	e9 b7 01 00 00       	jmp    c002826f <__muldf3+0x2d7>
c00280b8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00280bb:	40                   	inc    eax
c00280bc:	a9 fe 07 00 00       	test   eax,0x7fe
c00280c1:	75 57                	jne    c002811a <__muldf3+0x182>
c00280c3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00280c6:	09 f0                	or     eax,esi
c00280c8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00280cc:	74 23                	je     c00280f1 <__muldf3+0x159>
c00280ce:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00280d2:	0f 89 91 01 00 00    	jns    c0028269 <__muldf3+0x2d1>
c00280d8:	85 c0                	test   eax,eax
c00280da:	0f 85 89 01 00 00    	jne    c0028269 <__muldf3+0x2d1>
c00280e0:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00280e3:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00280e9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00280ec:	e9 7e 01 00 00       	jmp    c002826f <__muldf3+0x2d7>
c00280f1:	85 c0                	test   eax,eax
c00280f3:	75 0c                	jne    c0028101 <__muldf3+0x169>
c00280f5:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00280f9:	0f 89 6a 01 00 00    	jns    c0028269 <__muldf3+0x2d1>
c00280ff:	eb df                	jmp    c00280e0 <__muldf3+0x148>
c0028101:	01 f6                	add    esi,esi
c0028103:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028106:	c1 ea 1f             	shr    edx,0x1f
c0028109:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002810c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002810f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028112:	09 d6                	or     esi,edx
c0028114:	78 04                	js     c002811a <__muldf3+0x182>
c0028116:	89 c3                	mov    ebx,eax
c0028118:	eb e7                	jmp    c0028101 <__muldf3+0x169>
c002811a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0028120:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028126:	89 c8                	mov    eax,ecx
c0028128:	f7 e6                	mul    esi
c002812a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c002812d:	89 c7                	mov    edi,eax
c002812f:	89 c8                	mov    eax,ecx
c0028131:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028134:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0028137:	89 c1                	mov    ecx,eax
c0028139:	89 f0                	mov    eax,esi
c002813b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c002813e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0028141:	89 c6                	mov    esi,eax
c0028143:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028146:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028149:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002814c:	31 c0                	xor    eax,eax
c002814e:	01 f1                	add    ecx,esi
c0028150:	0f 92 c0             	setb   al
c0028153:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0028156:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0028159:	83 d6 00             	adc    esi,0x0
c002815c:	01 c7                	add    edi,eax
c002815e:	83 d6 00             	adc    esi,0x0
c0028161:	01 ca                	add    edx,ecx
c0028163:	0f 92 c1             	setb   cl
c0028166:	0f b6 c9             	movzx  ecx,cl
c0028169:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c002816c:	83 d6 00             	adc    esi,0x0
c002816f:	01 cf                	add    edi,ecx
c0028171:	83 d6 00             	adc    esi,0x0
c0028174:	31 c9                	xor    ecx,ecx
c0028176:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0028179:	0f 95 c1             	setne  cl
c002817c:	09 cf                	or     edi,ecx
c002817e:	85 f6                	test   esi,esi
c0028180:	78 0c                	js     c002818e <__muldf3+0x1f6>
c0028182:	01 f6                	add    esi,esi
c0028184:	89 f8                	mov    eax,edi
c0028186:	c1 e8 1f             	shr    eax,0x1f
c0028189:	09 c6                	or     esi,eax
c002818b:	01 ff                	add    edi,edi
c002818d:	4b                   	dec    ebx
c002818e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0028194:	0f 8f 85 00 00 00    	jg     c002821f <__muldf3+0x287>
c002819a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00281a0:	85 db                	test   ebx,ebx
c00281a2:	0f 8f 84 00 00 00    	jg     c002822c <__muldf3+0x294>
c00281a8:	83 fb cc             	cmp    ebx,0xffffffcc
c00281ab:	7c 79                	jl     c0028226 <__muldf3+0x28e>
c00281ad:	ba 01 00 00 00       	mov    edx,0x1
c00281b2:	29 da                	sub    edx,ebx
c00281b4:	81 ce 00 00 00 80    	or     esi,0x80000000
c00281ba:	83 fa 1f             	cmp    edx,0x1f
c00281bd:	7e 30                	jle    c00281ef <__muldf3+0x257>
c00281bf:	83 fa 20             	cmp    edx,0x20
c00281c2:	75 0b                	jne    c00281cf <__muldf3+0x237>
c00281c4:	31 c0                	xor    eax,eax
c00281c6:	85 ff                	test   edi,edi
c00281c8:	0f 95 c0             	setne  al
c00281cb:	89 c7                	mov    edi,eax
c00281cd:	eb 1a                	jmp    c00281e9 <__muldf3+0x251>
c00281cf:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c00281d2:	89 f0                	mov    eax,esi
c00281d4:	d3 e0                	shl    eax,cl
c00281d6:	09 f8                	or     eax,edi
c00281d8:	0f 95 c0             	setne  al
c00281db:	0f b6 c0             	movzx  eax,al
c00281de:	89 c7                	mov    edi,eax
c00281e0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00281e5:	29 d9                	sub    ecx,ebx
c00281e7:	d3 ee                	shr    esi,cl
c00281e9:	09 f7                	or     edi,esi
c00281eb:	31 db                	xor    ebx,ebx
c00281ed:	eb 3b                	jmp    c002822a <__muldf3+0x292>
c00281ef:	83 c3 1f             	add    ebx,0x1f
c00281f2:	89 f0                	mov    eax,esi
c00281f4:	88 d9                	mov    cl,bl
c00281f6:	d3 e0                	shl    eax,cl
c00281f8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00281fb:	89 f8                	mov    eax,edi
c00281fd:	88 d1                	mov    cl,dl
c00281ff:	d3 e8                	shr    eax,cl
c0028201:	89 c1                	mov    ecx,eax
c0028203:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028206:	09 c8                	or     eax,ecx
c0028208:	88 d9                	mov    cl,bl
c002820a:	d3 e7                	shl    edi,cl
c002820c:	31 db                	xor    ebx,ebx
c002820e:	85 ff                	test   edi,edi
c0028210:	0f 95 c3             	setne  bl
c0028213:	89 df                	mov    edi,ebx
c0028215:	09 c7                	or     edi,eax
c0028217:	88 d1                	mov    cl,dl
c0028219:	d3 ee                	shr    esi,cl
c002821b:	31 db                	xor    ebx,ebx
c002821d:	eb 0d                	jmp    c002822c <__muldf3+0x294>
c002821f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028224:	eb 02                	jmp    c0028228 <__muldf3+0x290>
c0028226:	31 db                	xor    ebx,ebx
c0028228:	31 ff                	xor    edi,edi
c002822a:	31 f6                	xor    esi,esi
c002822c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002822f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028232:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028237:	09 c3                	or     ebx,eax
c0028239:	c1 e3 14             	shl    ebx,0x14
c002823c:	89 f0                	mov    eax,esi
c002823e:	c1 e8 0b             	shr    eax,0xb
c0028241:	09 c3                	or     ebx,eax
c0028243:	89 f8                	mov    eax,edi
c0028245:	c1 e8 0b             	shr    eax,0xb
c0028248:	c1 e6 15             	shl    esi,0x15
c002824b:	09 c6                	or     esi,eax
c002824d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0028253:	0f 95 c1             	setne  cl
c0028256:	09 c8                	or     eax,ecx
c0028258:	83 e0 01             	and    eax,0x1
c002825b:	c1 ef 0a             	shr    edi,0xa
c002825e:	21 c7                	and    edi,eax
c0028260:	01 f7                	add    edi,esi
c0028262:	83 d3 00             	adc    ebx,0x0
c0028265:	89 da                	mov    edx,ebx
c0028267:	eb 03                	jmp    c002826c <__muldf3+0x2d4>
c0028269:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002826c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002826f:	89 f8                	mov    eax,edi
c0028271:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028274:	83 c4 24             	add    esp,0x24
c0028277:	5b                   	pop    ebx
c0028278:	5e                   	pop    esi
c0028279:	5f                   	pop    edi
c002827a:	5d                   	pop    ebp
c002827b:	c3                   	ret    

c002827c <__divdf3>:
c002827c:	55                   	push   ebp
c002827d:	89 e5                	mov    ebp,esp
c002827f:	57                   	push   edi
c0028280:	56                   	push   esi
c0028281:	53                   	push   ebx
c0028282:	83 ec 2c             	sub    esp,0x2c
c0028285:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028288:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002828b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002828e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0028291:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028294:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028297:	89 ce                	mov    esi,ecx
c0028299:	89 c8                	mov    eax,ecx
c002829b:	c1 f8 14             	sar    eax,0x14
c002829e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00282a1:	89 f8                	mov    eax,edi
c00282a3:	89 fb                	mov    ebx,edi
c00282a5:	c1 e3 0b             	shl    ebx,0xb
c00282a8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00282ab:	c1 e6 0b             	shl    esi,0xb
c00282ae:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00282b4:	c1 e8 15             	shr    eax,0x15
c00282b7:	09 c6                	or     esi,eax
c00282b9:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c00282bc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00282bf:	89 c2                	mov    edx,eax
c00282c1:	c1 fa 14             	sar    edx,0x14
c00282c4:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00282c7:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00282ca:	89 de                	mov    esi,ebx
c00282cc:	c1 e6 0b             	shl    esi,0xb
c00282cf:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00282d2:	c1 e0 0b             	shl    eax,0xb
c00282d5:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00282da:	c1 eb 15             	shr    ebx,0x15
c00282dd:	09 d8                	or     eax,ebx
c00282df:	89 c2                	mov    edx,eax
c00282e1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00282e4:	25 ff 07 00 00       	and    eax,0x7ff
c00282e9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00282ec:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00282ef:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00282f5:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c00282f8:	29 d8                	sub    eax,ebx
c00282fa:	05 ff 03 00 00       	add    eax,0x3ff
c00282ff:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028302:	46                   	inc    esi
c0028303:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028309:	0f 85 a5 00 00 00    	jne    c00283b4 <__divdf3+0x138>
c002830f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028312:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028315:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028319:	74 2a                	je     c0028345 <__divdf3+0xc9>
c002831b:	85 f6                	test   esi,esi
c002831d:	0f 85 cc 02 00 00    	jne    c00285ef <__divdf3+0x373>
c0028323:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028326:	40                   	inc    eax
c0028327:	a9 fe 07 00 00       	test   eax,0x7fe
c002832c:	75 26                	jne    c0028354 <__divdf3+0xd8>
c002832e:	85 db                	test   ebx,ebx
c0028330:	74 22                	je     c0028354 <__divdf3+0xd8>
c0028332:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028335:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028338:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002833b:	09 d0                	or     eax,edx
c002833d:	0f 85 ac 02 00 00    	jne    c00285ef <__divdf3+0x373>
c0028343:	eb 63                	jmp    c00283a8 <__divdf3+0x12c>
c0028345:	85 f6                	test   esi,esi
c0028347:	75 22                	jne    c002836b <__divdf3+0xef>
c0028349:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002834c:	40                   	inc    eax
c002834d:	a9 fe 07 00 00       	test   eax,0x7fe
c0028352:	74 36                	je     c002838a <__divdf3+0x10e>
c0028354:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028358:	0f 89 91 02 00 00    	jns    c00285ef <__divdf3+0x373>
c002835e:	89 f8                	mov    eax,edi
c0028360:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028366:	e9 80 02 00 00       	jmp    c00285eb <__divdf3+0x36f>
c002836b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002836e:	01 f6                	add    esi,esi
c0028370:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028373:	c1 ef 1f             	shr    edi,0x1f
c0028376:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028379:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c002837c:	8d 48 ff             	lea    ecx,[eax-0x1]
c002837f:	09 f7                	or     edi,esi
c0028381:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028384:	78 2e                	js     c00283b4 <__divdf3+0x138>
c0028386:	89 c8                	mov    eax,ecx
c0028388:	eb e1                	jmp    c002836b <__divdf3+0xef>
c002838a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002838d:	09 d0                	or     eax,edx
c002838f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028393:	74 0f                	je     c00283a4 <__divdf3+0x128>
c0028395:	85 c0                	test   eax,eax
c0028397:	74 bb                	je     c0028354 <__divdf3+0xd8>
c0028399:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002839c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002839f:	e9 4b 02 00 00       	jmp    c00285ef <__divdf3+0x373>
c00283a4:	85 c0                	test   eax,eax
c00283a6:	75 ac                	jne    c0028354 <__divdf3+0xd8>
c00283a8:	31 ff                	xor    edi,edi
c00283aa:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00283af:	e9 3b 02 00 00       	jmp    c00285ef <__divdf3+0x373>
c00283b4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00283b7:	8d 4f 01             	lea    ecx,[edi+0x1]
c00283ba:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00283c0:	75 6b                	jne    c002842d <__divdf3+0x1b1>
c00283c2:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00283c5:	09 d6                	or     esi,edx
c00283c7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00283cb:	74 28                	je     c00283f5 <__divdf3+0x179>
c00283cd:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00283d0:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00283d3:	85 f6                	test   esi,esi
c00283d5:	0f 85 14 02 00 00    	jne    c00285ef <__divdf3+0x373>
c00283db:	31 ff                	xor    edi,edi
c00283dd:	31 c9                	xor    ecx,ecx
c00283df:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00283e2:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00283e5:	0f 89 04 02 00 00    	jns    c00285ef <__divdf3+0x373>
c00283eb:	b9 00 00 00 80       	mov    ecx,0x80000000
c00283f0:	e9 fa 01 00 00       	jmp    c00285ef <__divdf3+0x373>
c00283f5:	85 f6                	test   esi,esi
c00283f7:	75 1b                	jne    c0028414 <__divdf3+0x198>
c00283f9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00283fc:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00283ff:	25 00 00 00 80       	and    eax,0x80000000
c0028404:	31 c9                	xor    ecx,ecx
c0028406:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c002840b:	89 cf                	mov    edi,ecx
c002840d:	89 c1                	mov    ecx,eax
c002840f:	e9 db 01 00 00       	jmp    c00285ef <__divdf3+0x373>
c0028414:	01 d2                	add    edx,edx
c0028416:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028419:	c1 eb 1f             	shr    ebx,0x1f
c002841c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002841f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028422:	8d 48 01             	lea    ecx,[eax+0x1]
c0028425:	09 da                	or     edx,ebx
c0028427:	78 04                	js     c002842d <__divdf3+0x1b1>
c0028429:	89 c8                	mov    eax,ecx
c002842b:	eb e7                	jmp    c0028414 <__divdf3+0x198>
c002842d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028430:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028436:	81 ca 00 00 00 80    	or     edx,0x80000000
c002843c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c002843f:	39 d6                	cmp    esi,edx
c0028441:	77 0d                	ja     c0028450 <__divdf3+0x1d4>
c0028443:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028446:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028449:	72 1b                	jb     c0028466 <__divdf3+0x1ea>
c002844b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c002844e:	75 16                	jne    c0028466 <__divdf3+0x1ea>
c0028450:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028453:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028456:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028459:	83 de 00             	sbb    esi,0x0
c002845c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c002845f:	ba 01 00 00 00       	mov    edx,0x1
c0028464:	eb 02                	jmp    c0028468 <__divdf3+0x1ec>
c0028466:	31 d2                	xor    edx,edx
c0028468:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c002846f:	31 ff                	xor    edi,edi
c0028471:	01 ff                	add    edi,edi
c0028473:	89 d1                	mov    ecx,edx
c0028475:	c1 e9 1f             	shr    ecx,0x1f
c0028478:	09 cf                	or     edi,ecx
c002847a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c002847d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028480:	89 da                	mov    edx,ebx
c0028482:	89 f3                	mov    ebx,esi
c0028484:	8d 34 36             	lea    esi,[esi+esi*1]
c0028487:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002848a:	c1 e9 1f             	shr    ecx,0x1f
c002848d:	09 ce                	or     esi,ecx
c002848f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028492:	01 c9                	add    ecx,ecx
c0028494:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028497:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002849a:	85 db                	test   ebx,ebx
c002849c:	78 29                	js     c00284c7 <__divdf3+0x24b>
c002849e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00284a1:	72 07                	jb     c00284aa <__divdf3+0x22e>
c00284a3:	75 3c                	jne    c00284e1 <__divdf3+0x265>
c00284a5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00284a8:	77 37                	ja     c00284e1 <__divdf3+0x265>
c00284aa:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00284ad:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00284b0:	31 d2                	xor    edx,edx
c00284b2:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00284b5:	0f 97 c2             	seta   dl
c00284b8:	29 d6                	sub    esi,edx
c00284ba:	89 d9                	mov    ecx,ebx
c00284bc:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00284bf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00284c2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00284c5:	eb 17                	jmp    c00284de <__divdf3+0x262>
c00284c7:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00284ca:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00284cd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00284d0:	0f 97 c1             	seta   cl
c00284d3:	0f b6 c9             	movzx  ecx,cl
c00284d6:	29 ce                	sub    esi,ecx
c00284d8:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00284db:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00284de:	83 ca 01             	or     edx,0x1
c00284e1:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00284e4:	75 8b                	jne    c0028471 <__divdf3+0x1f5>
c00284e6:	c1 e7 09             	shl    edi,0x9
c00284e9:	89 d1                	mov    ecx,edx
c00284eb:	c1 e9 17             	shr    ecx,0x17
c00284ee:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00284f1:	09 f3                	or     ebx,esi
c00284f3:	0f 95 c3             	setne  bl
c00284f6:	0f b6 db             	movzx  ebx,bl
c00284f9:	c1 e2 09             	shl    edx,0x9
c00284fc:	09 d3                	or     ebx,edx
c00284fe:	89 ca                	mov    edx,ecx
c0028500:	09 fa                	or     edx,edi
c0028502:	78 0c                	js     c0028510 <__divdf3+0x294>
c0028504:	01 d2                	add    edx,edx
c0028506:	89 d9                	mov    ecx,ebx
c0028508:	c1 e9 1f             	shr    ecx,0x1f
c002850b:	09 ca                	or     edx,ecx
c002850d:	01 db                	add    ebx,ebx
c002850f:	48                   	dec    eax
c0028510:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028515:	0f 8f 83 00 00 00    	jg     c002859e <__divdf3+0x322>
c002851b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028521:	85 c0                	test   eax,eax
c0028523:	0f 8f 82 00 00 00    	jg     c00285ab <__divdf3+0x32f>
c0028529:	83 f8 cc             	cmp    eax,0xffffffcc
c002852c:	7c 77                	jl     c00285a5 <__divdf3+0x329>
c002852e:	be 01 00 00 00       	mov    esi,0x1
c0028533:	29 c6                	sub    esi,eax
c0028535:	81 ca 00 00 00 80    	or     edx,0x80000000
c002853b:	83 fe 1f             	cmp    esi,0x1f
c002853e:	7e 2f                	jle    c002856f <__divdf3+0x2f3>
c0028540:	83 fe 20             	cmp    esi,0x20
c0028543:	75 0a                	jne    c002854f <__divdf3+0x2d3>
c0028545:	85 db                	test   ebx,ebx
c0028547:	0f 95 c3             	setne  bl
c002854a:	0f b6 db             	movzx  ebx,bl
c002854d:	eb 1a                	jmp    c0028569 <__divdf3+0x2ed>
c002854f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028552:	89 d7                	mov    edi,edx
c0028554:	d3 e7                	shl    edi,cl
c0028556:	89 f9                	mov    ecx,edi
c0028558:	09 d9                	or     ecx,ebx
c002855a:	0f 95 c3             	setne  bl
c002855d:	0f b6 db             	movzx  ebx,bl
c0028560:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028565:	29 c1                	sub    ecx,eax
c0028567:	d3 ea                	shr    edx,cl
c0028569:	09 d3                	or     ebx,edx
c002856b:	31 c0                	xor    eax,eax
c002856d:	eb 3a                	jmp    c00285a9 <__divdf3+0x32d>
c002856f:	83 c0 1f             	add    eax,0x1f
c0028572:	89 d7                	mov    edi,edx
c0028574:	88 c1                	mov    cl,al
c0028576:	d3 e7                	shl    edi,cl
c0028578:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002857b:	89 df                	mov    edi,ebx
c002857d:	89 f1                	mov    ecx,esi
c002857f:	d3 ef                	shr    edi,cl
c0028581:	89 f9                	mov    ecx,edi
c0028583:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028586:	09 cf                	or     edi,ecx
c0028588:	88 c1                	mov    cl,al
c002858a:	d3 e3                	shl    ebx,cl
c002858c:	85 db                	test   ebx,ebx
c002858e:	0f 95 c3             	setne  bl
c0028591:	0f b6 db             	movzx  ebx,bl
c0028594:	09 fb                	or     ebx,edi
c0028596:	89 f1                	mov    ecx,esi
c0028598:	d3 ea                	shr    edx,cl
c002859a:	31 c0                	xor    eax,eax
c002859c:	eb 0d                	jmp    c00285ab <__divdf3+0x32f>
c002859e:	b8 ff 07 00 00       	mov    eax,0x7ff
c00285a3:	eb 02                	jmp    c00285a7 <__divdf3+0x32b>
c00285a5:	31 c0                	xor    eax,eax
c00285a7:	31 db                	xor    ebx,ebx
c00285a9:	31 d2                	xor    edx,edx
c00285ab:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00285ae:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00285b1:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00285b7:	09 c8                	or     eax,ecx
c00285b9:	c1 e0 14             	shl    eax,0x14
c00285bc:	89 d1                	mov    ecx,edx
c00285be:	c1 e9 0b             	shr    ecx,0xb
c00285c1:	09 c8                	or     eax,ecx
c00285c3:	89 c6                	mov    esi,eax
c00285c5:	89 d9                	mov    ecx,ebx
c00285c7:	c1 e9 0b             	shr    ecx,0xb
c00285ca:	c1 e2 15             	shl    edx,0x15
c00285cd:	09 ca                	or     edx,ecx
c00285cf:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00285d5:	0f 95 c0             	setne  al
c00285d8:	09 c1                	or     ecx,eax
c00285da:	83 e1 01             	and    ecx,0x1
c00285dd:	c1 eb 0a             	shr    ebx,0xa
c00285e0:	21 cb                	and    ebx,ecx
c00285e2:	01 d3                	add    ebx,edx
c00285e4:	89 d8                	mov    eax,ebx
c00285e6:	83 d6 00             	adc    esi,0x0
c00285e9:	89 f2                	mov    edx,esi
c00285eb:	89 c7                	mov    edi,eax
c00285ed:	89 d1                	mov    ecx,edx
c00285ef:	89 f8                	mov    eax,edi
c00285f1:	89 ca                	mov    edx,ecx
c00285f3:	83 c4 2c             	add    esp,0x2c
c00285f6:	5b                   	pop    ebx
c00285f7:	5e                   	pop    esi
c00285f8:	5f                   	pop    edi
c00285f9:	5d                   	pop    ebp
c00285fa:	c3                   	ret    

c00285fb <__floatsidf>:
c00285fb:	55                   	push   ebp
c00285fc:	89 e5                	mov    ebp,esp
c00285fe:	56                   	push   esi
c00285ff:	53                   	push   ebx
c0028600:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028603:	85 db                	test   ebx,ebx
c0028605:	7e 15                	jle    c002861c <__floatsidf+0x21>
c0028607:	0f bd cb             	bsr    ecx,ebx
c002860a:	83 f1 1f             	xor    ecx,0x1f
c002860d:	d3 e3                	shl    ebx,cl
c002860f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028615:	b8 1e 04 00 00       	mov    eax,0x41e
c002861a:	eb 21                	jmp    c002863d <__floatsidf+0x42>
c002861c:	b8 00 00 00 00       	mov    eax,0x0
c0028621:	ba 00 00 00 00       	mov    edx,0x0
c0028626:	74 2a                	je     c0028652 <__floatsidf+0x57>
c0028628:	f7 db                	neg    ebx
c002862a:	0f bd cb             	bsr    ecx,ebx
c002862d:	83 f1 1f             	xor    ecx,0x1f
c0028630:	d3 e3                	shl    ebx,cl
c0028632:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028638:	b8 1e 0c 00 00       	mov    eax,0xc1e
c002863d:	29 c8                	sub    eax,ecx
c002863f:	c1 e0 14             	shl    eax,0x14
c0028642:	89 c1                	mov    ecx,eax
c0028644:	89 de                	mov    esi,ebx
c0028646:	c1 ee 0b             	shr    esi,0xb
c0028649:	09 f1                	or     ecx,esi
c002864b:	89 ca                	mov    edx,ecx
c002864d:	c1 e3 15             	shl    ebx,0x15
c0028650:	89 d8                	mov    eax,ebx
c0028652:	5b                   	pop    ebx
c0028653:	5e                   	pop    esi
c0028654:	5d                   	pop    ebp
c0028655:	c3                   	ret    

c0028656 <__floatunsidf>:
c0028656:	55                   	push   ebp
c0028657:	89 e5                	mov    ebp,esp
c0028659:	56                   	push   esi
c002865a:	53                   	push   ebx
c002865b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002865e:	85 db                	test   ebx,ebx
c0028660:	74 2a                	je     c002868c <__floatunsidf+0x36>
c0028662:	0f bd cb             	bsr    ecx,ebx
c0028665:	83 f1 1f             	xor    ecx,0x1f
c0028668:	d3 e3                	shl    ebx,cl
c002866a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028670:	b8 1e 04 00 00       	mov    eax,0x41e
c0028675:	29 c8                	sub    eax,ecx
c0028677:	c1 e0 14             	shl    eax,0x14
c002867a:	89 c1                	mov    ecx,eax
c002867c:	89 de                	mov    esi,ebx
c002867e:	c1 ee 0b             	shr    esi,0xb
c0028681:	09 f1                	or     ecx,esi
c0028683:	89 ca                	mov    edx,ecx
c0028685:	c1 e3 15             	shl    ebx,0x15
c0028688:	89 d8                	mov    eax,ebx
c002868a:	eb 04                	jmp    c0028690 <__floatunsidf+0x3a>
c002868c:	31 c0                	xor    eax,eax
c002868e:	31 d2                	xor    edx,edx
c0028690:	5b                   	pop    ebx
c0028691:	5e                   	pop    esi
c0028692:	5d                   	pop    ebp
c0028693:	c3                   	ret    

c0028694 <__fixdfsi>:
c0028694:	55                   	push   ebp
c0028695:	89 e5                	mov    ebp,esp
c0028697:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002869a:	89 d1                	mov    ecx,edx
c002869c:	c1 e1 0b             	shl    ecx,0xb
c002869f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00286a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00286a8:	c1 e8 15             	shr    eax,0x15
c00286ab:	09 c1                	or     ecx,eax
c00286ad:	c1 fa 14             	sar    edx,0x14
c00286b0:	78 1f                	js     c00286d1 <__fixdfsi+0x3d>
c00286b2:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00286b8:	31 c0                	xor    eax,eax
c00286ba:	83 fa 1e             	cmp    edx,0x1e
c00286bd:	77 40                	ja     c00286ff <__fixdfsi+0x6b>
c00286bf:	89 c8                	mov    eax,ecx
c00286c1:	0d 00 00 00 80       	or     eax,0x80000000
c00286c6:	b9 1f 00 00 00       	mov    ecx,0x1f
c00286cb:	29 d1                	sub    ecx,edx
c00286cd:	d3 e8                	shr    eax,cl
c00286cf:	eb 2e                	jmp    c00286ff <__fixdfsi+0x6b>
c00286d1:	31 c0                	xor    eax,eax
c00286d3:	81 c2 01 04 00 00    	add    edx,0x401
c00286d9:	78 24                	js     c00286ff <__fixdfsi+0x6b>
c00286db:	83 fa 1e             	cmp    edx,0x1e
c00286de:	7e 09                	jle    c00286e9 <__fixdfsi+0x55>
c00286e0:	83 fa 1f             	cmp    edx,0x1f
c00286e3:	75 18                	jne    c00286fd <__fixdfsi+0x69>
c00286e5:	85 c9                	test   ecx,ecx
c00286e7:	75 14                	jne    c00286fd <__fixdfsi+0x69>
c00286e9:	89 c8                	mov    eax,ecx
c00286eb:	0d 00 00 00 80       	or     eax,0x80000000
c00286f0:	b9 1f 00 00 00       	mov    ecx,0x1f
c00286f5:	29 d1                	sub    ecx,edx
c00286f7:	d3 e8                	shr    eax,cl
c00286f9:	f7 d8                	neg    eax
c00286fb:	eb 02                	jmp    c00286ff <__fixdfsi+0x6b>
c00286fd:	31 c0                	xor    eax,eax
c00286ff:	5d                   	pop    ebp
c0028700:	c3                   	ret    

c0028701 <__fixunsdfsi>:
c0028701:	55                   	push   ebp
c0028702:	89 e5                	mov    ebp,esp
c0028704:	53                   	push   ebx
c0028705:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028708:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002870b:	89 d3                	mov    ebx,edx
c002870d:	c1 fb 14             	sar    ebx,0x14
c0028710:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028716:	31 c0                	xor    eax,eax
c0028718:	83 fb 1f             	cmp    ebx,0x1f
c002871b:	77 1d                	ja     c002873a <__fixunsdfsi+0x39>
c002871d:	89 d0                	mov    eax,edx
c002871f:	c1 e0 0b             	shl    eax,0xb
c0028722:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028727:	c1 e9 15             	shr    ecx,0x15
c002872a:	09 c8                	or     eax,ecx
c002872c:	0d 00 00 00 80       	or     eax,0x80000000
c0028731:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028736:	29 d9                	sub    ecx,ebx
c0028738:	d3 e8                	shr    eax,cl
c002873a:	5b                   	pop    ebx
c002873b:	5d                   	pop    ebp
c002873c:	c3                   	ret    

c002873d <__cmpdf2>:
c002873d:	55                   	push   ebp
c002873e:	89 e5                	mov    ebp,esp
c0028740:	57                   	push   edi
c0028741:	56                   	push   esi
c0028742:	53                   	push   ebx
c0028743:	83 ec 0c             	sub    esp,0xc
c0028746:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028749:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002874c:	89 ca                	mov    edx,ecx
c002874e:	c1 ea 14             	shr    edx,0x14
c0028751:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028757:	89 cb                	mov    ebx,ecx
c0028759:	c1 fb 1f             	sar    ebx,0x1f
c002875c:	31 da                	xor    edx,ebx
c002875e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028761:	89 df                	mov    edi,ebx
c0028763:	c1 e7 0b             	shl    edi,0xb
c0028766:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028769:	c1 e1 0b             	shl    ecx,0xb
c002876c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028772:	c1 eb 15             	shr    ebx,0x15
c0028775:	09 d9                	or     ecx,ebx
c0028777:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c002877a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002877d:	89 ce                	mov    esi,ecx
c002877f:	c1 ee 14             	shr    esi,0x14
c0028782:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028788:	89 cb                	mov    ebx,ecx
c002878a:	c1 fb 1f             	sar    ebx,0x1f
c002878d:	31 de                	xor    esi,ebx
c002878f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028792:	89 df                	mov    edi,ebx
c0028794:	c1 e7 0b             	shl    edi,0xb
c0028797:	c1 e1 0b             	shl    ecx,0xb
c002879a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00287a0:	c1 eb 15             	shr    ebx,0x15
c00287a3:	09 d9                	or     ecx,ebx
c00287a5:	89 d3                	mov    ebx,edx
c00287a7:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00287ad:	43                   	inc    ebx
c00287ae:	83 fb 01             	cmp    ebx,0x1
c00287b1:	77 08                	ja     c00287bb <__cmpdf2+0x7e>
c00287b3:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00287b6:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00287b9:	75 68                	jne    c0028823 <__cmpdf2+0xe6>
c00287bb:	89 f3                	mov    ebx,esi
c00287bd:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00287c3:	43                   	inc    ebx
c00287c4:	83 fb 01             	cmp    ebx,0x1
c00287c7:	77 06                	ja     c00287cf <__cmpdf2+0x92>
c00287c9:	89 fb                	mov    ebx,edi
c00287cb:	09 cb                	or     ebx,ecx
c00287cd:	75 54                	jne    c0028823 <__cmpdf2+0xe6>
c00287cf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00287d2:	09 f8                	or     eax,edi
c00287d4:	09 c8                	or     eax,ecx
c00287d6:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00287d9:	75 12                	jne    c00287ed <__cmpdf2+0xb0>
c00287db:	8d 42 01             	lea    eax,[edx+0x1]
c00287de:	83 f8 01             	cmp    eax,0x1
c00287e1:	77 0a                	ja     c00287ed <__cmpdf2+0xb0>
c00287e3:	8d 5e 01             	lea    ebx,[esi+0x1]
c00287e6:	31 c0                	xor    eax,eax
c00287e8:	83 fb 01             	cmp    ebx,0x1
c00287eb:	76 36                	jbe    c0028823 <__cmpdf2+0xe6>
c00287ed:	b8 01 00 00 00       	mov    eax,0x1
c00287f2:	39 f2                	cmp    edx,esi
c00287f4:	7f 2d                	jg     c0028823 <__cmpdf2+0xe6>
c00287f6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00287fb:	7c 26                	jl     c0028823 <__cmpdf2+0xe6>
c00287fd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028800:	77 07                	ja     c0028809 <__cmpdf2+0xcc>
c0028802:	72 16                	jb     c002881a <__cmpdf2+0xdd>
c0028804:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028807:	76 0a                	jbe    c0028813 <__cmpdf2+0xd6>
c0028809:	89 d0                	mov    eax,edx
c002880b:	c1 f8 1f             	sar    eax,0x1f
c002880e:	83 c8 01             	or     eax,0x1
c0028811:	eb 10                	jmp    c0028823 <__cmpdf2+0xe6>
c0028813:	b8 00 00 00 00       	mov    eax,0x0
c0028818:	73 09                	jae    c0028823 <__cmpdf2+0xe6>
c002881a:	89 d0                	mov    eax,edx
c002881c:	c1 f8 1f             	sar    eax,0x1f
c002881f:	83 e0 02             	and    eax,0x2
c0028822:	48                   	dec    eax
c0028823:	83 c4 0c             	add    esp,0xc
c0028826:	5b                   	pop    ebx
c0028827:	5e                   	pop    esi
c0028828:	5f                   	pop    edi
c0028829:	5d                   	pop    ebp
c002882a:	c3                   	ret    

c002882b <__eqdf2>:
c002882b:	55                   	push   ebp
c002882c:	89 e5                	mov    ebp,esp
c002882e:	50                   	push   eax
c002882f:	6a 01                	push   0x1
c0028831:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028834:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028837:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002883a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002883d:	e8 fb fe ff ff       	call   c002873d <__cmpdf2>
c0028842:	83 c4 18             	add    esp,0x18
c0028845:	c9                   	leave  
c0028846:	c3                   	ret    

c0028847 <__nedf2>:
c0028847:	eb e2                	jmp    c002882b <__eqdf2>

c0028849 <__gtdf2>:
c0028849:	55                   	push   ebp
c002884a:	89 e5                	mov    ebp,esp
c002884c:	50                   	push   eax
c002884d:	6a ff                	push   0xffffffff
c002884f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028852:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028855:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028858:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002885b:	e8 dd fe ff ff       	call   c002873d <__cmpdf2>
c0028860:	83 c4 18             	add    esp,0x18
c0028863:	c9                   	leave  
c0028864:	c3                   	ret    

c0028865 <__gedf2>:
c0028865:	eb e2                	jmp    c0028849 <__gtdf2>

c0028867 <__ltdf2>:
c0028867:	eb c2                	jmp    c002882b <__eqdf2>

c0028869 <__ledf2>:
c0028869:	eb c0                	jmp    c002882b <__eqdf2>

c002886b <__truncdfsf2>:
c002886b:	55                   	push   ebp
c002886c:	89 e5                	mov    ebp,esp
c002886e:	57                   	push   edi
c002886f:	56                   	push   esi
c0028870:	53                   	push   ebx
c0028871:	83 ec 0c             	sub    esp,0xc
c0028874:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028877:	89 d1                	mov    ecx,edx
c0028879:	c1 f9 14             	sar    ecx,0x14
c002887c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002887f:	89 df                	mov    edi,ebx
c0028881:	c1 e7 0b             	shl    edi,0xb
c0028884:	89 d0                	mov    eax,edx
c0028886:	c1 e0 0b             	shl    eax,0xb
c0028889:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002888e:	c1 eb 15             	shr    ebx,0x15
c0028891:	09 d8                	or     eax,ebx
c0028893:	89 cb                	mov    ebx,ecx
c0028895:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002889b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00288a1:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00288a7:	0f 86 9e 00 00 00    	jbe    c002894b <__truncdfsf2+0xe0>
c00288ad:	85 db                	test   ebx,ebx
c00288af:	75 0a                	jne    c00288bb <__truncdfsf2+0x50>
c00288b1:	c1 fa 17             	sar    edx,0x17
c00288b4:	30 d2                	xor    dl,dl
c00288b6:	e9 84 00 00 00       	jmp    c002893f <__truncdfsf2+0xd4>
c00288bb:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00288c1:	83 fe 83             	cmp    esi,0xffffff83
c00288c4:	7d 4b                	jge    c0028911 <__truncdfsf2+0xa6>
c00288c6:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00288cb:	29 f1                	sub    ecx,esi
c00288cd:	83 f9 1f             	cmp    ecx,0x1f
c00288d0:	7f 6b                	jg     c002893d <__truncdfsf2+0xd2>
c00288d2:	0d 00 00 00 80       	or     eax,0x80000000
c00288d7:	89 c3                	mov    ebx,eax
c00288d9:	d3 eb                	shr    ebx,cl
c00288db:	be 01 00 00 00       	mov    esi,0x1
c00288e0:	d3 e6                	shl    esi,cl
c00288e2:	4e                   	dec    esi
c00288e3:	21 f0                	and    eax,esi
c00288e5:	09 f8                	or     eax,edi
c00288e7:	0f 95 c0             	setne  al
c00288ea:	0f b6 c0             	movzx  eax,al
c00288ed:	09 c3                	or     ebx,eax
c00288ef:	89 d9                	mov    ecx,ebx
c00288f1:	c1 e9 08             	shr    ecx,0x8
c00288f4:	f6 c3 7f             	test   bl,0x7f
c00288f7:	0f 95 c0             	setne  al
c00288fa:	09 c8                	or     eax,ecx
c00288fc:	83 e0 01             	and    eax,0x1
c00288ff:	c1 eb 07             	shr    ebx,0x7
c0028902:	21 c3                	and    ebx,eax
c0028904:	81 e2 00 00 00 80    	and    edx,0x80000000
c002890a:	09 d1                	or     ecx,edx
c002890c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002890f:	eb 76                	jmp    c0028987 <__truncdfsf2+0x11c>
c0028911:	83 c6 80             	add    esi,0xffffff80
c0028914:	7e 1d                	jle    c0028933 <__truncdfsf2+0xc8>
c0028916:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002891c:	75 0b                	jne    c0028929 <__truncdfsf2+0xbe>
c002891e:	09 f8                	or     eax,edi
c0028920:	74 09                	je     c002892b <__truncdfsf2+0xc0>
c0028922:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028927:	eb 02                	jmp    c002892b <__truncdfsf2+0xc0>
c0028929:	31 c0                	xor    eax,eax
c002892b:	c1 fa 17             	sar    edx,0x17
c002892e:	80 ca ff             	or     dl,0xff
c0028931:	eb 0e                	jmp    c0028941 <__truncdfsf2+0xd6>
c0028933:	c1 fa 1f             	sar    edx,0x1f
c0028936:	c1 e2 08             	shl    edx,0x8
c0028939:	09 ca                	or     edx,ecx
c002893b:	eb 04                	jmp    c0028941 <__truncdfsf2+0xd6>
c002893d:	31 d2                	xor    edx,edx
c002893f:	31 c0                	xor    eax,eax
c0028941:	c1 e2 17             	shl    edx,0x17
c0028944:	c1 e8 08             	shr    eax,0x8
c0028947:	09 d0                	or     eax,edx
c0028949:	eb 3c                	jmp    c0028987 <__truncdfsf2+0x11c>
c002894b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028951:	89 ca                	mov    edx,ecx
c0028953:	c1 fa 0b             	sar    edx,0xb
c0028956:	c1 e2 08             	shl    edx,0x8
c0028959:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002895c:	31 db                	xor    ebx,ebx
c002895e:	85 ff                	test   edi,edi
c0028960:	0f 95 c3             	setne  bl
c0028963:	09 d8                	or     eax,ebx
c0028965:	89 c3                	mov    ebx,eax
c0028967:	c1 eb 08             	shr    ebx,0x8
c002896a:	a8 7f                	test   al,0x7f
c002896c:	0f 95 c2             	setne  dl
c002896f:	89 d6                	mov    esi,edx
c0028971:	09 de                	or     esi,ebx
c0028973:	83 e6 01             	and    esi,0x1
c0028976:	c1 e8 07             	shr    eax,0x7
c0028979:	21 f0                	and    eax,esi
c002897b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002897e:	09 ca                	or     edx,ecx
c0028980:	c1 e2 17             	shl    edx,0x17
c0028983:	09 da                	or     edx,ebx
c0028985:	01 d0                	add    eax,edx
c0028987:	83 c4 0c             	add    esp,0xc
c002898a:	5b                   	pop    ebx
c002898b:	5e                   	pop    esi
c002898c:	5f                   	pop    edi
c002898d:	5d                   	pop    ebp
c002898e:	c3                   	ret    

c002898f <__extendsfdf2>:
c002898f:	55                   	push   ebp
c0028990:	89 e5                	mov    ebp,esp
c0028992:	57                   	push   edi
c0028993:	56                   	push   esi
c0028994:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028997:	89 d1                	mov    ecx,edx
c0028999:	c1 f9 17             	sar    ecx,0x17
c002899c:	c1 e2 08             	shl    edx,0x8
c002899f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00289a5:	89 c8                	mov    eax,ecx
c00289a7:	80 e4 f8             	and    ah,0xf8
c00289aa:	8d 71 01             	lea    esi,[ecx+0x1]
c00289ad:	81 e6 fe 00 00 00    	and    esi,0xfe
c00289b3:	75 27                	jne    c00289dc <__extendsfdf2+0x4d>
c00289b5:	81 e1 ff 00 00 00    	and    ecx,0xff
c00289bb:	75 18                	jne    c00289d5 <__extendsfdf2+0x46>
c00289bd:	85 d2                	test   edx,edx
c00289bf:	74 20                	je     c00289e1 <__extendsfdf2+0x52>
c00289c1:	41                   	inc    ecx
c00289c2:	01 d2                	add    edx,edx
c00289c4:	79 fb                	jns    c00289c1 <__extendsfdf2+0x32>
c00289c6:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00289cc:	29 c8                	sub    eax,ecx
c00289ce:	05 81 03 00 00       	add    eax,0x381
c00289d3:	eb 0c                	jmp    c00289e1 <__extendsfdf2+0x52>
c00289d5:	05 00 07 00 00       	add    eax,0x700
c00289da:	eb 05                	jmp    c00289e1 <__extendsfdf2+0x52>
c00289dc:	05 80 03 00 00       	add    eax,0x380
c00289e1:	c1 e0 14             	shl    eax,0x14
c00289e4:	89 c1                	mov    ecx,eax
c00289e6:	89 d0                	mov    eax,edx
c00289e8:	c1 e8 0b             	shr    eax,0xb
c00289eb:	09 c1                	or     ecx,eax
c00289ed:	c1 e2 15             	shl    edx,0x15
c00289f0:	89 d0                	mov    eax,edx
c00289f2:	89 ca                	mov    edx,ecx
c00289f4:	5e                   	pop    esi
c00289f5:	5f                   	pop    edi
c00289f6:	5d                   	pop    ebp
c00289f7:	c3                   	ret    
c00289f8:	66 90                	xchg   ax,ax
c00289fa:	66 90                	xchg   ax,ax
c00289fc:	66 90                	xchg   ax,ax
c00289fe:	66 90                	xchg   ax,ax

c0028a00 <fabs>:
c0028a00:	83 ec 0c             	sub    esp,0xc
c0028a03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a07:	89 04 24             	mov    DWORD PTR [esp],eax
c0028a0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028a0e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028a13:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028a17:	dd 04 24             	fld    QWORD PTR [esp]
c0028a1a:	83 c4 0c             	add    esp,0xc
c0028a1d:	c3                   	ret    
c0028a1e:	66 90                	xchg   ax,ax

c0028a20 <lrint>:
c0028a20:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028a24:	83 ec 04             	sub    esp,0x4
c0028a27:	db 1c 24             	fistp  DWORD PTR [esp]
c0028a2a:	58                   	pop    eax
c0028a2b:	c3                   	ret    

c0028a2c <lrintf>:
c0028a2c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028a30:	83 ec 04             	sub    esp,0x4
c0028a33:	db 1c 24             	fistp  DWORD PTR [esp]
c0028a36:	58                   	pop    eax
c0028a37:	c3                   	ret    

Disassembly of section .init:

c0028a38 <_init>:
c0028a38:	55                   	push   ebp
c0028a39:	89 e5                	mov    ebp,esp
c0028a3b:	e8 d8 76 fd ff       	call   c0000118 <frame_dummy>
c0028a40:	e8 5b e0 ff ff       	call   c0026aa0 <__do_global_ctors_aux>
c0028a45:	5d                   	pop    ebp
c0028a46:	c3                   	ret    

Disassembly of section .fini:

c0028a47 <_fini>:
c0028a47:	55                   	push   ebp
c0028a48:	89 e5                	mov    ebp,esp
c0028a4a:	e8 59 76 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0028a4f:	5d                   	pop    ebp
c0028a50:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028a52 <Computer::~Computer()>:
c0028a52:	83 ec 0c             	sub    esp,0xc
c0028a55:	ba ec a6 02 c0       	mov    edx,0xc002a6ec
c0028a5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a5e:	89 10                	mov    DWORD PTR [eax],edx
c0028a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a64:	83 ec 0c             	sub    esp,0xc
c0028a67:	50                   	push   eax
c0028a68:	e8 5b b2 fe ff       	call   c0013cc8 <Device::~Device()>
c0028a6d:	83 c4 10             	add    esp,0x10
c0028a70:	90                   	nop
c0028a71:	83 c4 0c             	add    esp,0xc
c0028a74:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028a76 <Computer::~Computer()>:
c0028a76:	83 ec 0c             	sub    esp,0xc
c0028a79:	83 ec 0c             	sub    esp,0xc
c0028a7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a80:	e8 cd ff ff ff       	call   c0028a52 <Computer::~Computer()>
c0028a85:	83 c4 10             	add    esp,0x10
c0028a88:	83 ec 08             	sub    esp,0x8
c0028a8b:	68 ec 01 00 00       	push   0x1ec
c0028a90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a94:	e8 50 9e fe ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c0028a99:	83 c4 10             	add    esp,0x10
c0028a9c:	83 c4 0c             	add    esp,0xc
c0028a9f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028aa0 <idleCommon()>:
c0028aa0:	83 ec 0c             	sub    esp,0xc
c0028aa3:	fa                   	cli    
c0028aa4:	ff 05 08 fb 02 c0    	inc    DWORD PTR ds:0xc002fb08
c0028aaa:	e8 42 54 ff ff       	call   c001def1 <schedule()>
c0028aaf:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c0028ab4:	48                   	dec    eax
c0028ab5:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c0028aba:	75 01                	jne    c0028abd <idleCommon()+0x1d>
c0028abc:	fb                   	sti    
c0028abd:	83 c4 0c             	add    esp,0xc
c0028ac0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028ac2 <LinkedList<UnixFile>::~LinkedList()>:
c0028ac2:	90                   	nop
c0028ac3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028ac4 <LinkedList<UnixFile>::LinkedList()>:
c0028ac4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ac8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ace:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ad2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ad9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028add:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ae4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ae8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028aee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028af2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028af9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028afd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b04:	90                   	nop
c0028b05:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028b06 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028b06:	83 ec 0c             	sub    esp,0xc
c0028b09:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028b0e:	75 10                	jne    c0028b20 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028b10:	83 ec 0c             	sub    esp,0xc
c0028b13:	68 1c aa 02 c0       	push   0xc002aa1c
c0028b18:	e8 42 18 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c0028b1d:	83 c4 10             	add    esp,0x10
c0028b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b24:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b26:	85 c0                	test   eax,eax
c0028b28:	74 34                	je     c0028b5e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028b2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b31:	85 c0                	test   eax,eax
c0028b33:	74 29                	je     c0028b5e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b39:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b3c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b40:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b47:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b4b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b55:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b5c:	eb 65                	jmp    c0028bc3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028b5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b62:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b64:	85 c0                	test   eax,eax
c0028b66:	75 4b                	jne    c0028bb3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028b68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b6f:	85 c0                	test   eax,eax
c0028b71:	75 40                	jne    c0028bb3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b77:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b7b:	89 10                	mov    DWORD PTR [eax],edx
c0028b7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b85:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b8f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b9a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b9d:	85 c0                	test   eax,eax
c0028b9f:	74 22                	je     c0028bc3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028ba1:	83 ec 0c             	sub    esp,0xc
c0028ba4:	68 3e aa 02 c0       	push   0xc002aa3e
c0028ba9:	e8 b1 17 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c0028bae:	83 c4 10             	add    esp,0x10
c0028bb1:	eb 10                	jmp    c0028bc3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028bb3:	83 ec 0c             	sub    esp,0xc
c0028bb6:	68 48 aa 02 c0       	push   0xc002aa48
c0028bbb:	e8 9f 17 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c0028bc0:	83 c4 10             	add    esp,0x10
c0028bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bca:	8d 50 01             	lea    edx,[eax+0x1]
c0028bcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028bd4:	90                   	nop
c0028bd5:	83 c4 0c             	add    esp,0xc
c0028bd8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028bda <LinkedList<UnixFile>::getFirstElement()>:
c0028bda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bde:	8b 00                	mov    eax,DWORD PTR [eax]
c0028be0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028be2 <LinkedList<UnixFile>::removeFirst()>:
c0028be2:	83 ec 0c             	sub    esp,0xc
c0028be5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be9:	8b 00                	mov    eax,DWORD PTR [eax]
c0028beb:	85 c0                	test   eax,eax
c0028bed:	75 12                	jne    c0028c01 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028bef:	83 ec 0c             	sub    esp,0xc
c0028bf2:	68 54 aa 02 c0       	push   0xc002aa54
c0028bf7:	e8 63 17 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c0028bfc:	83 c4 10             	add    esp,0x10
c0028bff:	eb 7e                	jmp    c0028c7f <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c05:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c08:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c0b:	85 c0                	test   eax,eax
c0028c0d:	74 10                	je     c0028c1f <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028c0f:	83 ec 0c             	sub    esp,0xc
c0028c12:	68 9f aa 02 c0       	push   0xc002aa9f
c0028c17:	e8 43 17 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c0028c1c:	83 c4 10             	add    esp,0x10
c0028c1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c23:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c25:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c28:	85 c0                	test   eax,eax
c0028c2a:	75 33                	jne    c0028c5f <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c30:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c3a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028c41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c45:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c48:	83 f8 01             	cmp    eax,0x1
c0028c4b:	74 21                	je     c0028c6e <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028c4d:	83 ec 0c             	sub    esp,0xc
c0028c50:	68 78 aa 02 c0       	push   0xc002aa78
c0028c55:	e8 05 17 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c0028c5a:	83 c4 10             	add    esp,0x10
c0028c5d:	eb 0f                	jmp    c0028c6e <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028c5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c63:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c65:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028c68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c6c:	89 10                	mov    DWORD PTR [eax],edx
c0028c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c72:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c75:	8d 50 ff             	lea    edx,[eax-0x1]
c0028c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c7c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028c7f:	83 c4 0c             	add    esp,0xc
c0028c82:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0028c84 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0028c84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028c88:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c8b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028c8c <DriverlessDevice::~DriverlessDevice()>:
c0028c8c:	ba 3c b3 02 c0       	mov    edx,0xc002b33c
c0028c91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c95:	89 10                	mov    DWORD PTR [eax],edx
c0028c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c9b:	50                   	push   eax
c0028c9c:	e8 27 b0 fe ff       	call   c0013cc8 <Device::~Device()>
c0028ca1:	83 c4 04             	add    esp,0x4
c0028ca4:	90                   	nop
c0028ca5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028ca6 <DriverlessDevice::~DriverlessDevice()>:
c0028ca6:	83 ec 0c             	sub    esp,0xc
c0028ca9:	83 ec 0c             	sub    esp,0xc
c0028cac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cb0:	e8 d7 ff ff ff       	call   c0028c8c <DriverlessDevice::~DriverlessDevice()>
c0028cb5:	83 c4 10             	add    esp,0x10
c0028cb8:	83 ec 08             	sub    esp,0x8
c0028cbb:	68 58 01 00 00       	push   0x158
c0028cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cc4:	e8 20 9c fe ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c0028cc9:	83 c4 10             	add    esp,0x10
c0028ccc:	83 c4 0c             	add    esp,0xc
c0028ccf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028cd0 <LinkedList<Device>::addElement(Device*)>:
c0028cd0:	83 ec 0c             	sub    esp,0xc
c0028cd3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028cd8:	75 10                	jne    c0028cea <LinkedList<Device>::addElement(Device*)+0x1a>
c0028cda:	83 ec 0c             	sub    esp,0xc
c0028cdd:	68 1c aa 02 c0       	push   0xc002aa1c
c0028ce2:	e8 78 16 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c0028ce7:	83 c4 10             	add    esp,0x10
c0028cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cee:	8b 00                	mov    eax,DWORD PTR [eax]
c0028cf0:	85 c0                	test   eax,eax
c0028cf2:	74 3a                	je     c0028d2e <LinkedList<Device>::addElement(Device*)+0x5e>
c0028cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028cfb:	85 c0                	test   eax,eax
c0028cfd:	74 2f                	je     c0028d2e <LinkedList<Device>::addElement(Device*)+0x5e>
c0028cff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d06:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d0a:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d14:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d18:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028d1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d1f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d22:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028d2c:	eb 68                	jmp    c0028d96 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d32:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d34:	85 c0                	test   eax,eax
c0028d36:	75 4e                	jne    c0028d86 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d3f:	85 c0                	test   eax,eax
c0028d41:	75 43                	jne    c0028d86 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028d43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d47:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d4b:	89 10                	mov    DWORD PTR [eax],edx
c0028d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d5f:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d6d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028d70:	85 c0                	test   eax,eax
c0028d72:	74 22                	je     c0028d96 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028d74:	83 ec 0c             	sub    esp,0xc
c0028d77:	68 3e aa 02 c0       	push   0xc002aa3e
c0028d7c:	e8 de 15 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c0028d81:	83 c4 10             	add    esp,0x10
c0028d84:	eb 10                	jmp    c0028d96 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028d86:	83 ec 0c             	sub    esp,0xc
c0028d89:	68 48 aa 02 c0       	push   0xc002aa48
c0028d8e:	e8 cc 15 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c0028d93:	83 c4 10             	add    esp,0x10
c0028d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d9a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028d9d:	8d 50 01             	lea    edx,[eax+0x1]
c0028da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028da7:	90                   	nop
c0028da8:	83 c4 0c             	add    esp,0xc
c0028dab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028dac <LinkedList<Device>::LinkedList()>:
c0028dac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028db0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028db6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028dba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028dc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028dc5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028dcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028dd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028dd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028dda:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028de1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028de5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028dec:	90                   	nop
c0028ded:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028dee <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028dee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028df2:	8b 00                	mov    eax,DWORD PTR [eax]
c0028df4:	85 c0                	test   eax,eax
c0028df6:	75 0e                	jne    c0028e06 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028df8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028dfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028dff:	85 c0                	test   eax,eax
c0028e01:	75 03                	jne    c0028e06 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028e03:	b0 01                	mov    al,0x1
c0028e05:	c3                   	ret    
c0028e06:	b0 00                	mov    al,0x0
c0028e08:	90                   	nop
c0028e09:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028e0a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028e0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e10:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028e12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028e12:	83 ec 0c             	sub    esp,0xc
c0028e15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e19:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e1b:	85 c0                	test   eax,eax
c0028e1d:	75 15                	jne    c0028e34 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028e1f:	83 ec 0c             	sub    esp,0xc
c0028e22:	68 54 aa 02 c0       	push   0xc002aa54
c0028e27:	e8 33 15 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c0028e2c:	83 c4 10             	add    esp,0x10
c0028e2f:	e9 88 00 00 00       	jmp    c0028ebc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028e34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028e3b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028e3e:	85 c0                	test   eax,eax
c0028e40:	0f 95 c0             	setne  al
c0028e43:	84 c0                	test   al,al
c0028e45:	74 10                	je     c0028e57 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028e47:	83 ec 0c             	sub    esp,0xc
c0028e4a:	68 9f aa 02 c0       	push   0xc002aa9f
c0028e4f:	e8 0b 15 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c0028e54:	83 c4 10             	add    esp,0x10
c0028e57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e5d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028e60:	85 c0                	test   eax,eax
c0028e62:	0f 94 c0             	sete   al
c0028e65:	84 c0                	test   al,al
c0028e67:	74 33                	je     c0028e9c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028e69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e6d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e77:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028e7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e82:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028e85:	83 f8 01             	cmp    eax,0x1
c0028e88:	74 21                	je     c0028eab <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028e8a:	83 ec 0c             	sub    esp,0xc
c0028e8d:	68 78 aa 02 c0       	push   0xc002aa78
c0028e92:	e8 c8 14 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c0028e97:	83 c4 10             	add    esp,0x10
c0028e9a:	eb 0f                	jmp    c0028eab <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea0:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ea2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028ea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea9:	89 10                	mov    DWORD PTR [eax],edx
c0028eab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eaf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028eb2:	8d 50 ff             	lea    edx,[eax-0x1]
c0028eb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028ebc:	83 c4 0c             	add    esp,0xc
c0028ebf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028ec0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028ec0:	83 ec 0c             	sub    esp,0xc
c0028ec3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028ec8:	75 10                	jne    c0028eda <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028eca:	83 ec 0c             	sub    esp,0xc
c0028ecd:	68 1c aa 02 c0       	push   0xc002aa1c
c0028ed2:	e8 88 14 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c0028ed7:	83 c4 10             	add    esp,0x10
c0028eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ede:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ee0:	85 c0                	test   eax,eax
c0028ee2:	74 34                	je     c0028f18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028ee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028eeb:	85 c0                	test   eax,eax
c0028eed:	74 29                	je     c0028f18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028eef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ef6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028efa:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028efd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f01:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f05:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028f08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f0f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028f16:	eb 65                	jmp    c0028f7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028f18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f1e:	85 c0                	test   eax,eax
c0028f20:	75 4b                	jne    c0028f6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f29:	85 c0                	test   eax,eax
c0028f2b:	75 40                	jne    c0028f6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028f2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f31:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f35:	89 10                	mov    DWORD PTR [eax],edx
c0028f37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f3b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f3f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f49:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028f57:	85 c0                	test   eax,eax
c0028f59:	74 22                	je     c0028f7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028f5b:	83 ec 0c             	sub    esp,0xc
c0028f5e:	68 3e aa 02 c0       	push   0xc002aa3e
c0028f63:	e8 f7 13 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c0028f68:	83 c4 10             	add    esp,0x10
c0028f6b:	eb 10                	jmp    c0028f7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028f6d:	83 ec 0c             	sub    esp,0xc
c0028f70:	68 48 aa 02 c0       	push   0xc002aa48
c0028f75:	e8 e5 13 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c0028f7a:	83 c4 10             	add    esp,0x10
c0028f7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f81:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028f84:	8d 50 01             	lea    edx,[eax+0x1]
c0028f87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f8b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028f8e:	90                   	nop
c0028f8f:	83 c4 0c             	add    esp,0xc
c0028f92:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028f94 <ACPI::~ACPI()>:
c0028f94:	83 ec 0c             	sub    esp,0xc
c0028f97:	ba fc bd 02 c0       	mov    edx,0xc002bdfc
c0028f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa0:	89 10                	mov    DWORD PTR [eax],edx
c0028fa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa6:	83 ec 0c             	sub    esp,0xc
c0028fa9:	50                   	push   eax
c0028faa:	e8 19 ad fe ff       	call   c0013cc8 <Device::~Device()>
c0028faf:	83 c4 10             	add    esp,0x10
c0028fb2:	90                   	nop
c0028fb3:	83 c4 0c             	add    esp,0xc
c0028fb6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028fb8 <ACPI::~ACPI()>:
c0028fb8:	83 ec 0c             	sub    esp,0xc
c0028fbb:	83 ec 0c             	sub    esp,0xc
c0028fbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fc2:	e8 cd ff ff ff       	call   c0028f94 <ACPI::~ACPI()>
c0028fc7:	83 c4 10             	add    esp,0x10
c0028fca:	83 ec 08             	sub    esp,0x8
c0028fcd:	68 64 12 00 00       	push   0x1264
c0028fd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fd6:	e8 0e 99 fe ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c0028fdb:	83 c4 10             	add    esp,0x10
c0028fde:	83 c4 0c             	add    esp,0xc
c0028fe1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0028fe2 <LinkedList<Device>::~LinkedList()>:
c0028fe2:	90                   	nop
c0028fe3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0028fe4 <LinkedList<Device>::isEmpty()>:
c0028fe4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028fe8:	8b 00                	mov    eax,DWORD PTR [eax]
c0028fea:	85 c0                	test   eax,eax
c0028fec:	75 0e                	jne    c0028ffc <LinkedList<Device>::isEmpty()+0x18>
c0028fee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ff2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ff5:	85 c0                	test   eax,eax
c0028ff7:	75 03                	jne    c0028ffc <LinkedList<Device>::isEmpty()+0x18>
c0028ff9:	b0 01                	mov    al,0x1
c0028ffb:	c3                   	ret    
c0028ffc:	b0 00                	mov    al,0x0
c0028ffe:	90                   	nop
c0028fff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0029000 <LinkedList<Device>::getFirstElement()>:
c0029000:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029004:	8b 00                	mov    eax,DWORD PTR [eax]
c0029006:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029008 <LinkedList<Device>::removeFirst()>:
c0029008:	83 ec 0c             	sub    esp,0xc
c002900b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002900f:	8b 00                	mov    eax,DWORD PTR [eax]
c0029011:	85 c0                	test   eax,eax
c0029013:	75 15                	jne    c002902a <LinkedList<Device>::removeFirst()+0x22>
c0029015:	83 ec 0c             	sub    esp,0xc
c0029018:	68 54 aa 02 c0       	push   0xc002aa54
c002901d:	e8 3d 13 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c0029022:	83 c4 10             	add    esp,0x10
c0029025:	e9 87 00 00 00       	jmp    c00290b1 <LinkedList<Device>::removeFirst()+0xa9>
c002902a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002902e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029031:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029037:	85 c0                	test   eax,eax
c0029039:	74 10                	je     c002904b <LinkedList<Device>::removeFirst()+0x43>
c002903b:	83 ec 0c             	sub    esp,0xc
c002903e:	68 9f aa 02 c0       	push   0xc002aa9f
c0029043:	e8 17 13 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c0029048:	83 c4 10             	add    esp,0x10
c002904b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002904f:	8b 00                	mov    eax,DWORD PTR [eax]
c0029051:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029057:	85 c0                	test   eax,eax
c0029059:	75 33                	jne    c002908e <LinkedList<Device>::removeFirst()+0x86>
c002905b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002905f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029069:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029074:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029077:	83 f8 01             	cmp    eax,0x1
c002907a:	74 24                	je     c00290a0 <LinkedList<Device>::removeFirst()+0x98>
c002907c:	83 ec 0c             	sub    esp,0xc
c002907f:	68 78 aa 02 c0       	push   0xc002aa78
c0029084:	e8 d6 12 ff ff       	call   c001a35f <Krnl::panic(char const*)>
c0029089:	83 c4 10             	add    esp,0x10
c002908c:	eb 12                	jmp    c00290a0 <LinkedList<Device>::removeFirst()+0x98>
c002908e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029092:	8b 00                	mov    eax,DWORD PTR [eax]
c0029094:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002909a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002909e:	89 10                	mov    DWORD PTR [eax],edx
c00290a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290a7:	8d 50 ff             	lea    edx,[eax-0x1]
c00290aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00290b1:	83 c4 0c             	add    esp,0xc
c00290b4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00290b6 <CPU::~CPU()>:
c00290b6:	83 ec 0c             	sub    esp,0xc
c00290b9:	ba 98 c1 02 c0       	mov    edx,0xc002c198
c00290be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c2:	89 10                	mov    DWORD PTR [eax],edx
c00290c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c8:	83 ec 0c             	sub    esp,0xc
c00290cb:	50                   	push   eax
c00290cc:	e8 f7 ab fe ff       	call   c0013cc8 <Device::~Device()>
c00290d1:	83 c4 10             	add    esp,0x10
c00290d4:	90                   	nop
c00290d5:	83 c4 0c             	add    esp,0xc
c00290d8:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00290da <CPU::~CPU()>:
c00290da:	83 ec 0c             	sub    esp,0xc
c00290dd:	83 ec 0c             	sub    esp,0xc
c00290e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290e4:	e8 cd ff ff ff       	call   c00290b6 <CPU::~CPU()>
c00290e9:	83 c4 10             	add    esp,0x10
c00290ec:	83 ec 08             	sub    esp,0x8
c00290ef:	68 98 11 00 00       	push   0x1198
c00290f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290f8:	e8 ec 97 fe ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c00290fd:	83 c4 10             	add    esp,0x10
c0029100:	83 c4 0c             	add    esp,0xc
c0029103:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029104 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029104:	90                   	nop
c0029105:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029106 <ThreadControlBlock::ThreadControlBlock()>:
c0029106:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002910a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029111:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029115:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002911c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029120:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0029127:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002912b:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0029132:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029136:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c002913d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029141:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0029145:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029149:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002914d:	90                   	nop
c002914e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0029150 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0029150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029154:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002915a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002915e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029165:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029169:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029174:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002917a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002917e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029185:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029189:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029190:	90                   	nop
c0029191:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0029192 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0029192:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029196:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0029199:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c002919a <Vm::_FPUState::_FPUState()>:
c002919a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002919e:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00291a5:	90                   	nop
c00291a6:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00291a8 <PCI::~PCI()>:
c00291a8:	83 ec 0c             	sub    esp,0xc
c00291ab:	ba e4 cc 02 c0       	mov    edx,0xc002cce4
c00291b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b4:	89 10                	mov    DWORD PTR [eax],edx
c00291b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ba:	83 ec 0c             	sub    esp,0xc
c00291bd:	50                   	push   eax
c00291be:	e8 d5 a4 fe ff       	call   c0013698 <Bus::~Bus()>
c00291c3:	83 c4 10             	add    esp,0x10
c00291c6:	90                   	nop
c00291c7:	83 c4 0c             	add    esp,0xc
c00291ca:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00291cc <PCI::~PCI()>:
c00291cc:	83 ec 0c             	sub    esp,0xc
c00291cf:	83 ec 0c             	sub    esp,0xc
c00291d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291d6:	e8 cd ff ff ff       	call   c00291a8 <PCI::~PCI()>
c00291db:	83 c4 10             	add    esp,0x10
c00291de:	83 ec 08             	sub    esp,0x8
c00291e1:	68 5c 01 00 00       	push   0x15c
c00291e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291ea:	e8 fa 96 fe ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c00291ef:	83 c4 10             	add    esp,0x10
c00291f2:	83 c4 0c             	add    esp,0xc
c00291f5:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00291f6 <IDE::~IDE()>:
c00291f6:	83 ec 0c             	sub    esp,0xc
c00291f9:	ba 98 cd 02 c0       	mov    edx,0xc002cd98
c00291fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029202:	89 10                	mov    DWORD PTR [eax],edx
c0029204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029208:	83 ec 0c             	sub    esp,0xc
c002920b:	50                   	push   eax
c002920c:	e8 cd af fe ff       	call   c00141de <HardDiskController::~HardDiskController()>
c0029211:	83 c4 10             	add    esp,0x10
c0029214:	90                   	nop
c0029215:	83 c4 0c             	add    esp,0xc
c0029218:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002921a <IDE::~IDE()>:
c002921a:	83 ec 0c             	sub    esp,0xc
c002921d:	83 ec 0c             	sub    esp,0xc
c0029220:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029224:	e8 cd ff ff ff       	call   c00291f6 <IDE::~IDE()>
c0029229:	83 c4 10             	add    esp,0x10
c002922c:	83 ec 08             	sub    esp,0x8
c002922f:	68 70 02 00 00       	push   0x270
c0029234:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029238:	e8 ac 96 fe ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c002923d:	83 c4 10             	add    esp,0x10
c0029240:	83 c4 0c             	add    esp,0xc
c0029243:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0029244 <SATABus::~SATABus()>:
c0029244:	83 ec 0c             	sub    esp,0xc
c0029247:	ba 10 ce 02 c0       	mov    edx,0xc002ce10
c002924c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029250:	89 10                	mov    DWORD PTR [eax],edx
c0029252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029256:	83 ec 0c             	sub    esp,0xc
c0029259:	50                   	push   eax
c002925a:	e8 7f af fe ff       	call   c00141de <HardDiskController::~HardDiskController()>
c002925f:	83 c4 10             	add    esp,0x10
c0029262:	90                   	nop
c0029263:	83 c4 0c             	add    esp,0xc
c0029266:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0029268 <SATABus::~SATABus()>:
c0029268:	83 ec 0c             	sub    esp,0xc
c002926b:	83 ec 0c             	sub    esp,0xc
c002926e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029272:	e8 cd ff ff ff       	call   c0029244 <SATABus::~SATABus()>
c0029277:	83 c4 10             	add    esp,0x10
c002927a:	83 ec 08             	sub    esp,0x8
c002927d:	68 64 01 00 00       	push   0x164
c0029282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029286:	e8 5e 96 fe ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c002928b:	83 c4 10             	add    esp,0x10
c002928e:	83 c4 0c             	add    esp,0xc
c0029291:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0029292 <ATA::~ATA()>:
c0029292:	83 ec 0c             	sub    esp,0xc
c0029295:	ba 88 ce 02 c0       	mov    edx,0xc002ce88
c002929a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002929e:	89 10                	mov    DWORD PTR [eax],edx
c00292a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292a4:	83 ec 0c             	sub    esp,0xc
c00292a7:	50                   	push   eax
c00292a8:	e8 13 b0 fe ff       	call   c00142c0 <PhysicalDisk::~PhysicalDisk()>
c00292ad:	83 c4 10             	add    esp,0x10
c00292b0:	90                   	nop
c00292b1:	83 c4 0c             	add    esp,0xc
c00292b4:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00292b6 <ATA::~ATA()>:
c00292b6:	83 ec 0c             	sub    esp,0xc
c00292b9:	83 ec 0c             	sub    esp,0xc
c00292bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292c0:	e8 cd ff ff ff       	call   c0029292 <ATA::~ATA()>
c00292c5:	83 c4 10             	add    esp,0x10
c00292c8:	83 ec 08             	sub    esp,0x8
c00292cb:	68 7c 01 00 00       	push   0x17c
c00292d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292d4:	e8 10 96 fe ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c00292d9:	83 c4 10             	add    esp,0x10
c00292dc:	83 c4 0c             	add    esp,0xc
c00292df:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00292e0 <ATAPI::~ATAPI()>:
c00292e0:	83 ec 0c             	sub    esp,0xc
c00292e3:	ba c0 ce 02 c0       	mov    edx,0xc002cec0
c00292e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292ec:	89 10                	mov    DWORD PTR [eax],edx
c00292ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292f2:	83 ec 0c             	sub    esp,0xc
c00292f5:	50                   	push   eax
c00292f6:	e8 c5 af fe ff       	call   c00142c0 <PhysicalDisk::~PhysicalDisk()>
c00292fb:	83 c4 10             	add    esp,0x10
c00292fe:	90                   	nop
c00292ff:	83 c4 0c             	add    esp,0xc
c0029302:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029304 <ATAPI::~ATAPI()>:
c0029304:	83 ec 0c             	sub    esp,0xc
c0029307:	83 ec 0c             	sub    esp,0xc
c002930a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002930e:	e8 cd ff ff ff       	call   c00292e0 <ATAPI::~ATAPI()>
c0029313:	83 c4 10             	add    esp,0x10
c0029316:	83 ec 08             	sub    esp,0x8
c0029319:	68 80 01 00 00       	push   0x180
c002931e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029322:	e8 c2 95 fe ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c0029327:	83 c4 10             	add    esp,0x10
c002932a:	83 c4 0c             	add    esp,0xc
c002932d:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002932e <SATA::~SATA()>:
c002932e:	83 ec 0c             	sub    esp,0xc
c0029331:	ba 74 cf 02 c0       	mov    edx,0xc002cf74
c0029336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002933a:	89 10                	mov    DWORD PTR [eax],edx
c002933c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029340:	83 ec 0c             	sub    esp,0xc
c0029343:	50                   	push   eax
c0029344:	e8 77 af fe ff       	call   c00142c0 <PhysicalDisk::~PhysicalDisk()>
c0029349:	83 c4 10             	add    esp,0x10
c002934c:	90                   	nop
c002934d:	83 c4 0c             	add    esp,0xc
c0029350:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0029352 <SATA::~SATA()>:
c0029352:	83 ec 0c             	sub    esp,0xc
c0029355:	83 ec 0c             	sub    esp,0xc
c0029358:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002935c:	e8 cd ff ff ff       	call   c002932e <SATA::~SATA()>
c0029361:	83 c4 10             	add    esp,0x10
c0029364:	83 ec 08             	sub    esp,0x8
c0029367:	68 7c 01 00 00       	push   0x17c
c002936c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029370:	e8 74 95 fe ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c0029375:	83 c4 10             	add    esp,0x10
c0029378:	83 c4 0c             	add    esp,0xc
c002937b:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002937c <SATAPI::~SATAPI()>:
c002937c:	83 ec 0c             	sub    esp,0xc
c002937f:	ba 50 d0 02 c0       	mov    edx,0xc002d050
c0029384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029388:	89 10                	mov    DWORD PTR [eax],edx
c002938a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002938e:	83 ec 0c             	sub    esp,0xc
c0029391:	50                   	push   eax
c0029392:	e8 29 af fe ff       	call   c00142c0 <PhysicalDisk::~PhysicalDisk()>
c0029397:	83 c4 10             	add    esp,0x10
c002939a:	90                   	nop
c002939b:	83 c4 0c             	add    esp,0xc
c002939e:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00293a0 <SATAPI::~SATAPI()>:
c00293a0:	83 ec 0c             	sub    esp,0xc
c00293a3:	83 ec 0c             	sub    esp,0xc
c00293a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293aa:	e8 cd ff ff ff       	call   c002937c <SATAPI::~SATAPI()>
c00293af:	83 c4 10             	add    esp,0x10
c00293b2:	83 ec 08             	sub    esp,0x8
c00293b5:	68 80 01 00 00       	push   0x180
c00293ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293be:	e8 26 95 fe ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c00293c3:	83 c4 10             	add    esp,0x10
c00293c6:	83 c4 0c             	add    esp,0xc
c00293c9:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00293ca <AVX::~AVX()>:
c00293ca:	83 ec 0c             	sub    esp,0xc
c00293cd:	ba 90 d0 02 c0       	mov    edx,0xc002d090
c00293d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293d6:	89 10                	mov    DWORD PTR [eax],edx
c00293d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293dc:	83 ec 0c             	sub    esp,0xc
c00293df:	50                   	push   eax
c00293e0:	e8 5f af fe ff       	call   c0014344 <FPU::~FPU()>
c00293e5:	83 c4 10             	add    esp,0x10
c00293e8:	90                   	nop
c00293e9:	83 c4 0c             	add    esp,0xc
c00293ec:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00293ee <AVX::~AVX()>:
c00293ee:	83 ec 0c             	sub    esp,0xc
c00293f1:	83 ec 0c             	sub    esp,0xc
c00293f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293f8:	e8 cd ff ff ff       	call   c00293ca <AVX::~AVX()>
c00293fd:	83 c4 10             	add    esp,0x10
c0029400:	83 ec 08             	sub    esp,0x8
c0029403:	68 58 01 00 00       	push   0x158
c0029408:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002940c:	e8 d8 94 fe ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c0029411:	83 c4 10             	add    esp,0x10
c0029414:	83 c4 0c             	add    esp,0xc
c0029417:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0029418 <MMX::~MMX()>:
c0029418:	83 ec 0c             	sub    esp,0xc
c002941b:	ba d0 d0 02 c0       	mov    edx,0xc002d0d0
c0029420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029424:	89 10                	mov    DWORD PTR [eax],edx
c0029426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002942a:	83 ec 0c             	sub    esp,0xc
c002942d:	50                   	push   eax
c002942e:	e8 11 af fe ff       	call   c0014344 <FPU::~FPU()>
c0029433:	83 c4 10             	add    esp,0x10
c0029436:	90                   	nop
c0029437:	83 c4 0c             	add    esp,0xc
c002943a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c002943c <MMX::~MMX()>:
c002943c:	83 ec 0c             	sub    esp,0xc
c002943f:	83 ec 0c             	sub    esp,0xc
c0029442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029446:	e8 cd ff ff ff       	call   c0029418 <MMX::~MMX()>
c002944b:	83 c4 10             	add    esp,0x10
c002944e:	83 ec 08             	sub    esp,0x8
c0029451:	68 58 01 00 00       	push   0x158
c0029456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002945a:	e8 8a 94 fe ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c002945f:	83 c4 10             	add    esp,0x10
c0029462:	83 c4 0c             	add    esp,0xc
c0029465:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029466 <SSE::~SSE()>:
c0029466:	83 ec 0c             	sub    esp,0xc
c0029469:	ba 10 d1 02 c0       	mov    edx,0xc002d110
c002946e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029472:	89 10                	mov    DWORD PTR [eax],edx
c0029474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029478:	83 ec 0c             	sub    esp,0xc
c002947b:	50                   	push   eax
c002947c:	e8 c3 ae fe ff       	call   c0014344 <FPU::~FPU()>
c0029481:	83 c4 10             	add    esp,0x10
c0029484:	90                   	nop
c0029485:	83 c4 0c             	add    esp,0xc
c0029488:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002948a <SSE::~SSE()>:
c002948a:	83 ec 0c             	sub    esp,0xc
c002948d:	83 ec 0c             	sub    esp,0xc
c0029490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029494:	e8 cd ff ff ff       	call   c0029466 <SSE::~SSE()>
c0029499:	83 c4 10             	add    esp,0x10
c002949c:	83 ec 08             	sub    esp,0x8
c002949f:	68 58 01 00 00       	push   0x158
c00294a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294a8:	e8 3c 94 fe ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c00294ad:	83 c4 10             	add    esp,0x10
c00294b0:	83 c4 0c             	add    esp,0xc
c00294b3:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00294b4 <x87::~x87()>:
c00294b4:	83 ec 0c             	sub    esp,0xc
c00294b7:	ba 50 d1 02 c0       	mov    edx,0xc002d150
c00294bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294c0:	89 10                	mov    DWORD PTR [eax],edx
c00294c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294c6:	83 ec 0c             	sub    esp,0xc
c00294c9:	50                   	push   eax
c00294ca:	e8 75 ae fe ff       	call   c0014344 <FPU::~FPU()>
c00294cf:	83 c4 10             	add    esp,0x10
c00294d2:	90                   	nop
c00294d3:	83 c4 0c             	add    esp,0xc
c00294d6:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00294d8 <x87::~x87()>:
c00294d8:	83 ec 0c             	sub    esp,0xc
c00294db:	83 ec 0c             	sub    esp,0xc
c00294de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294e2:	e8 cd ff ff ff       	call   c00294b4 <x87::~x87()>
c00294e7:	83 c4 10             	add    esp,0x10
c00294ea:	83 ec 08             	sub    esp,0x8
c00294ed:	68 58 01 00 00       	push   0x158
c00294f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294f6:	e8 ee 93 fe ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c00294fb:	83 c4 10             	add    esp,0x10
c00294fe:	83 c4 0c             	add    esp,0xc
c0029501:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029502 <IOAPIC::~IOAPIC()>:
c0029502:	83 ec 0c             	sub    esp,0xc
c0029505:	ba a8 d2 02 c0       	mov    edx,0xc002d2a8
c002950a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002950e:	89 10                	mov    DWORD PTR [eax],edx
c0029510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029514:	83 ec 0c             	sub    esp,0xc
c0029517:	50                   	push   eax
c0029518:	e8 ab a7 fe ff       	call   c0013cc8 <Device::~Device()>
c002951d:	83 c4 10             	add    esp,0x10
c0029520:	90                   	nop
c0029521:	83 c4 0c             	add    esp,0xc
c0029524:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029526 <IOAPIC::~IOAPIC()>:
c0029526:	83 ec 0c             	sub    esp,0xc
c0029529:	83 ec 0c             	sub    esp,0xc
c002952c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029530:	e8 cd ff ff ff       	call   c0029502 <IOAPIC::~IOAPIC()>
c0029535:	83 c4 10             	add    esp,0x10
c0029538:	83 ec 08             	sub    esp,0x8
c002953b:	68 68 01 00 00       	push   0x168
c0029540:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029544:	e8 a0 93 fe ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c0029549:	83 c4 10             	add    esp,0x10
c002954c:	83 c4 0c             	add    esp,0xc
c002954f:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029550 <APIC::~APIC()>:
c0029550:	83 ec 0c             	sub    esp,0xc
c0029553:	ba 60 d2 02 c0       	mov    edx,0xc002d260
c0029558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002955c:	89 10                	mov    DWORD PTR [eax],edx
c002955e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029562:	83 ec 0c             	sub    esp,0xc
c0029565:	50                   	push   eax
c0029566:	e8 a3 b2 fe ff       	call   c001480e <InterruptController::~InterruptController()>
c002956b:	83 c4 10             	add    esp,0x10
c002956e:	90                   	nop
c002956f:	83 c4 0c             	add    esp,0xc
c0029572:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029574 <APIC::~APIC()>:
c0029574:	83 ec 0c             	sub    esp,0xc
c0029577:	83 ec 0c             	sub    esp,0xc
c002957a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002957e:	e8 cd ff ff ff       	call   c0029550 <APIC::~APIC()>
c0029583:	83 c4 10             	add    esp,0x10
c0029586:	83 ec 08             	sub    esp,0x8
c0029589:	68 58 21 00 00       	push   0x2158
c002958e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029592:	e8 52 93 fe ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c0029597:	83 c4 10             	add    esp,0x10
c002959a:	83 c4 0c             	add    esp,0xc
c002959d:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c002959e <PIC::~PIC()>:
c002959e:	83 ec 0c             	sub    esp,0xc
c00295a1:	ba f8 d2 02 c0       	mov    edx,0xc002d2f8
c00295a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295aa:	89 10                	mov    DWORD PTR [eax],edx
c00295ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295b0:	83 ec 0c             	sub    esp,0xc
c00295b3:	50                   	push   eax
c00295b4:	e8 55 b2 fe ff       	call   c001480e <InterruptController::~InterruptController()>
c00295b9:	83 c4 10             	add    esp,0x10
c00295bc:	90                   	nop
c00295bd:	83 c4 0c             	add    esp,0xc
c00295c0:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00295c2 <PIC::~PIC()>:
c00295c2:	83 ec 0c             	sub    esp,0xc
c00295c5:	83 ec 0c             	sub    esp,0xc
c00295c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295cc:	e8 cd ff ff ff       	call   c002959e <PIC::~PIC()>
c00295d1:	83 c4 10             	add    esp,0x10
c00295d4:	83 ec 08             	sub    esp,0x8
c00295d7:	68 58 21 00 00       	push   0x2158
c00295dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295e0:	e8 04 93 fe ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c00295e5:	83 c4 10             	add    esp,0x10
c00295e8:	83 c4 0c             	add    esp,0xc
c00295eb:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00295ec <APICTimer::~APICTimer()>:
c00295ec:	83 ec 0c             	sub    esp,0xc
c00295ef:	ba 4c d3 02 c0       	mov    edx,0xc002d34c
c00295f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295f8:	89 10                	mov    DWORD PTR [eax],edx
c00295fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295fe:	83 ec 0c             	sub    esp,0xc
c0029601:	50                   	push   eax
c0029602:	e8 65 d2 fe ff       	call   c001686c <Timer::~Timer()>
c0029607:	83 c4 10             	add    esp,0x10
c002960a:	90                   	nop
c002960b:	83 c4 0c             	add    esp,0xc
c002960e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029610 <APICTimer::~APICTimer()>:
c0029610:	83 ec 0c             	sub    esp,0xc
c0029613:	83 ec 0c             	sub    esp,0xc
c0029616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002961a:	e8 cd ff ff ff       	call   c00295ec <APICTimer::~APICTimer()>
c002961f:	83 c4 10             	add    esp,0x10
c0029622:	83 ec 08             	sub    esp,0x8
c0029625:	68 60 01 00 00       	push   0x160
c002962a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002962e:	e8 b6 92 fe ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c0029633:	83 c4 10             	add    esp,0x10
c0029636:	83 c4 0c             	add    esp,0xc
c0029639:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002963a <PIT::~PIT()>:
c002963a:	83 ec 0c             	sub    esp,0xc
c002963d:	ba 9c d3 02 c0       	mov    edx,0xc002d39c
c0029642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029646:	89 10                	mov    DWORD PTR [eax],edx
c0029648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002964c:	83 ec 0c             	sub    esp,0xc
c002964f:	50                   	push   eax
c0029650:	e8 17 d2 fe ff       	call   c001686c <Timer::~Timer()>
c0029655:	83 c4 10             	add    esp,0x10
c0029658:	90                   	nop
c0029659:	83 c4 0c             	add    esp,0xc
c002965c:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002965e <PIT::~PIT()>:
c002965e:	83 ec 0c             	sub    esp,0xc
c0029661:	83 ec 0c             	sub    esp,0xc
c0029664:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029668:	e8 cd ff ff ff       	call   c002963a <PIT::~PIT()>
c002966d:	83 c4 10             	add    esp,0x10
c0029670:	83 ec 08             	sub    esp,0x8
c0029673:	68 5c 01 00 00       	push   0x15c
c0029678:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002967c:	e8 68 92 fe ff       	call   c00128e9 <operator delete(void*, unsigned long)>
c0029681:	83 c4 10             	add    esp,0x10
c0029684:	83 c4 0c             	add    esp,0xc
c0029687:	c3                   	ret    
